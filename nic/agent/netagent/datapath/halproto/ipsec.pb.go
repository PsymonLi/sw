// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ipsec.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// IPSec protocols
type IpsecProtocol int32

const (
	IpsecProtocol_IPSEC_PROTOCOL_NONE IpsecProtocol = 0
	IpsecProtocol_IPSEC_PROTOCOL_AH   IpsecProtocol = 1
	IpsecProtocol_IPSEC_PROTOCOL_ESP  IpsecProtocol = 2
)

var IpsecProtocol_name = map[int32]string{
	0: "IPSEC_PROTOCOL_NONE",
	1: "IPSEC_PROTOCOL_AH",
	2: "IPSEC_PROTOCOL_ESP",
}
var IpsecProtocol_value = map[string]int32{
	"IPSEC_PROTOCOL_NONE": 0,
	"IPSEC_PROTOCOL_AH":   1,
	"IPSEC_PROTOCOL_ESP":  2,
}

func (x IpsecProtocol) String() string {
	return proto.EnumName(IpsecProtocol_name, int32(x))
}
func (IpsecProtocol) EnumDescriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{0} }

// Encryption algorithms
type EncryptionAlgorithm int32

const (
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE        EncryptionAlgorithm = 0
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_GCM_128 EncryptionAlgorithm = 1
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_GCM_256 EncryptionAlgorithm = 2
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CCM_128 EncryptionAlgorithm = 3
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CCM_192 EncryptionAlgorithm = 4
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CCM_256 EncryptionAlgorithm = 5
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CBC_128 EncryptionAlgorithm = 6
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CBC_192 EncryptionAlgorithm = 7
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CBC_256 EncryptionAlgorithm = 8
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_DES3        EncryptionAlgorithm = 9
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_CHA_CHA     EncryptionAlgorithm = 10
)

var EncryptionAlgorithm_name = map[int32]string{
	0:  "ENCRYPTION_ALGORITHM_NONE",
	1:  "ENCRYPTION_ALGORITHM_AES_GCM_128",
	2:  "ENCRYPTION_ALGORITHM_AES_GCM_256",
	3:  "ENCRYPTION_ALGORITHM_AES_CCM_128",
	4:  "ENCRYPTION_ALGORITHM_AES_CCM_192",
	5:  "ENCRYPTION_ALGORITHM_AES_CCM_256",
	6:  "ENCRYPTION_ALGORITHM_AES_CBC_128",
	7:  "ENCRYPTION_ALGORITHM_AES_CBC_192",
	8:  "ENCRYPTION_ALGORITHM_AES_CBC_256",
	9:  "ENCRYPTION_ALGORITHM_DES3",
	10: "ENCRYPTION_ALGORITHM_CHA_CHA",
}
var EncryptionAlgorithm_value = map[string]int32{
	"ENCRYPTION_ALGORITHM_NONE":        0,
	"ENCRYPTION_ALGORITHM_AES_GCM_128": 1,
	"ENCRYPTION_ALGORITHM_AES_GCM_256": 2,
	"ENCRYPTION_ALGORITHM_AES_CCM_128": 3,
	"ENCRYPTION_ALGORITHM_AES_CCM_192": 4,
	"ENCRYPTION_ALGORITHM_AES_CCM_256": 5,
	"ENCRYPTION_ALGORITHM_AES_CBC_128": 6,
	"ENCRYPTION_ALGORITHM_AES_CBC_192": 7,
	"ENCRYPTION_ALGORITHM_AES_CBC_256": 8,
	"ENCRYPTION_ALGORITHM_DES3":        9,
	"ENCRYPTION_ALGORITHM_CHA_CHA":     10,
}

func (x EncryptionAlgorithm) String() string {
	return proto.EnumName(EncryptionAlgorithm_name, int32(x))
}
func (EncryptionAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{1} }

// Authentication algorithms
type AuthenticationAlgorithm int32

const (
	AuthenticationAlgorithm_AUTHENTICATION_ALGORITHM_NONE AuthenticationAlgorithm = 0
	AuthenticationAlgorithm_AUTHENTICATION_AES_GCM        AuthenticationAlgorithm = 1
	AuthenticationAlgorithm_AUTHENTICATION_AES_CCM        AuthenticationAlgorithm = 2
	AuthenticationAlgorithm_AUTHENTICATION_HMAC           AuthenticationAlgorithm = 3
	AuthenticationAlgorithm_AUTHENTICATION_AES_CBC_SHA    AuthenticationAlgorithm = 4
)

var AuthenticationAlgorithm_name = map[int32]string{
	0: "AUTHENTICATION_ALGORITHM_NONE",
	1: "AUTHENTICATION_AES_GCM",
	2: "AUTHENTICATION_AES_CCM",
	3: "AUTHENTICATION_HMAC",
	4: "AUTHENTICATION_AES_CBC_SHA",
}
var AuthenticationAlgorithm_value = map[string]int32{
	"AUTHENTICATION_ALGORITHM_NONE": 0,
	"AUTHENTICATION_AES_GCM":        1,
	"AUTHENTICATION_AES_CCM":        2,
	"AUTHENTICATION_HMAC":           3,
	"AUTHENTICATION_AES_CBC_SHA":    4,
}

func (x AuthenticationAlgorithm) String() string {
	return proto.EnumName(AuthenticationAlgorithm_name, int32(x))
}
func (AuthenticationAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{2} }

// Key object
type Key struct {
	// Types that are valid to be assigned to KeyInfo:
	//	*Key_Key
	//	*Key_KeyLocation
	KeyInfo isKey_KeyInfo `protobuf_oneof:"key_info"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{0} }

type isKey_KeyInfo interface {
	isKey_KeyInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Key_Key struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3,oneof"`
}
type Key_KeyLocation struct {
	KeyLocation uint32 `protobuf:"varint,2,opt,name=key_location,json=keyLocation,proto3,oneof"`
}

func (*Key_Key) isKey_KeyInfo()         {}
func (*Key_KeyLocation) isKey_KeyInfo() {}

func (m *Key) GetKeyInfo() isKey_KeyInfo {
	if m != nil {
		return m.KeyInfo
	}
	return nil
}

func (m *Key) GetKey() []byte {
	if x, ok := m.GetKeyInfo().(*Key_Key); ok {
		return x.Key
	}
	return nil
}

func (m *Key) GetKeyLocation() uint32 {
	if x, ok := m.GetKeyInfo().(*Key_KeyLocation); ok {
		return x.KeyLocation
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Key) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Key_OneofMarshaler, _Key_OneofUnmarshaler, _Key_OneofSizer, []interface{}{
		(*Key_Key)(nil),
		(*Key_KeyLocation)(nil),
	}
}

func _Key_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Key)
	// key_info
	switch x := m.KeyInfo.(type) {
	case *Key_Key:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Key)
	case *Key_KeyLocation:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.KeyLocation))
	case nil:
	default:
		return fmt.Errorf("Key.KeyInfo has unexpected type %T", x)
	}
	return nil
}

func _Key_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Key)
	switch tag {
	case 1: // key_info.key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.KeyInfo = &Key_Key{x}
		return true, err
	case 2: // key_info.key_location
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyInfo = &Key_KeyLocation{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Key_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Key)
	// key_info
	switch x := m.KeyInfo.(type) {
	case *Key_Key:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Key)))
		n += len(x.Key)
	case *Key_KeyLocation:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.KeyLocation))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// IPSec security association object
type IpsecSAEncrypt struct {
	Meta                    *ObjectMeta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle             *IpsecSAEncryptKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
	Protocol                IpsecProtocol            `protobuf:"varint,3,opt,name=protocol,proto3,enum=ipsec.IpsecProtocol" json:"protocol,omitempty"`
	AuthenticationAlgorithm AuthenticationAlgorithm  `protobuf:"varint,4,opt,name=authentication_algorithm,json=authenticationAlgorithm,proto3,enum=ipsec.AuthenticationAlgorithm" json:"authentication_algorithm,omitempty"`
	AuthenticationKey       *Key                     `protobuf:"bytes,5,opt,name=authentication_key,json=authenticationKey" json:"authentication_key,omitempty"`
	EncryptionAlgorithm     EncryptionAlgorithm      `protobuf:"varint,6,opt,name=encryption_algorithm,json=encryptionAlgorithm,proto3,enum=ipsec.EncryptionAlgorithm" json:"encryption_algorithm,omitempty"`
	EncryptionKey           *Key                     `protobuf:"bytes,7,opt,name=encryption_key,json=encryptionKey" json:"encryption_key,omitempty"`
	LocalGatewayIp          *IPAddress               `protobuf:"bytes,8,opt,name=local_gateway_ip,json=localGatewayIp" json:"local_gateway_ip,omitempty"`
	RemoteGatewayIp         *IPAddress               `protobuf:"bytes,9,opt,name=remote_gateway_ip,json=remoteGatewayIp" json:"remote_gateway_ip,omitempty"`
	Spi                     uint32                   `protobuf:"varint,10,opt,name=spi,proto3" json:"spi,omitempty"`
	NatTraversalPort        uint32                   `protobuf:"varint,11,opt,name=nat_traversal_port,json=natTraversalPort,proto3" json:"nat_traversal_port,omitempty"`
	Salt                    uint32                   `protobuf:"varint,12,opt,name=salt,proto3" json:"salt,omitempty"`
	Iv                      uint64                   `protobuf:"varint,13,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (m *IpsecSAEncrypt) Reset()                    { *m = IpsecSAEncrypt{} }
func (m *IpsecSAEncrypt) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncrypt) ProtoMessage()               {}
func (*IpsecSAEncrypt) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{1} }

func (m *IpsecSAEncrypt) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *IpsecSAEncrypt) GetKeyOrHandle() *IpsecSAEncryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecSAEncrypt) GetProtocol() IpsecProtocol {
	if m != nil {
		return m.Protocol
	}
	return IpsecProtocol_IPSEC_PROTOCOL_NONE
}

func (m *IpsecSAEncrypt) GetAuthenticationAlgorithm() AuthenticationAlgorithm {
	if m != nil {
		return m.AuthenticationAlgorithm
	}
	return AuthenticationAlgorithm_AUTHENTICATION_ALGORITHM_NONE
}

func (m *IpsecSAEncrypt) GetAuthenticationKey() *Key {
	if m != nil {
		return m.AuthenticationKey
	}
	return nil
}

func (m *IpsecSAEncrypt) GetEncryptionAlgorithm() EncryptionAlgorithm {
	if m != nil {
		return m.EncryptionAlgorithm
	}
	return EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE
}

func (m *IpsecSAEncrypt) GetEncryptionKey() *Key {
	if m != nil {
		return m.EncryptionKey
	}
	return nil
}

func (m *IpsecSAEncrypt) GetLocalGatewayIp() *IPAddress {
	if m != nil {
		return m.LocalGatewayIp
	}
	return nil
}

func (m *IpsecSAEncrypt) GetRemoteGatewayIp() *IPAddress {
	if m != nil {
		return m.RemoteGatewayIp
	}
	return nil
}

func (m *IpsecSAEncrypt) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

func (m *IpsecSAEncrypt) GetNatTraversalPort() uint32 {
	if m != nil {
		return m.NatTraversalPort
	}
	return 0
}

func (m *IpsecSAEncrypt) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *IpsecSAEncrypt) GetIv() uint64 {
	if m != nil {
		return m.Iv
	}
	return 0
}

// IPSec security association object
type IpsecSADecrypt struct {
	Meta                    *ObjectMeta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle             *IpsecSADecryptKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
	Protocol                IpsecProtocol            `protobuf:"varint,3,opt,name=protocol,proto3,enum=ipsec.IpsecProtocol" json:"protocol,omitempty"`
	AuthenticationAlgorithm AuthenticationAlgorithm  `protobuf:"varint,4,opt,name=authentication_algorithm,json=authenticationAlgorithm,proto3,enum=ipsec.AuthenticationAlgorithm" json:"authentication_algorithm,omitempty"`
	AuthenticationKey       *Key                     `protobuf:"bytes,5,opt,name=authentication_key,json=authenticationKey" json:"authentication_key,omitempty"`
	DecryptionAlgorithm     EncryptionAlgorithm      `protobuf:"varint,6,opt,name=decryption_algorithm,json=decryptionAlgorithm,proto3,enum=ipsec.EncryptionAlgorithm" json:"decryption_algorithm,omitempty"`
	RekeyDecAlgorithm       EncryptionAlgorithm      `protobuf:"varint,7,opt,name=rekey_dec_algorithm,json=rekeyDecAlgorithm,proto3,enum=ipsec.EncryptionAlgorithm" json:"rekey_dec_algorithm,omitempty"`
	DecryptionKey           *Key                     `protobuf:"bytes,8,opt,name=decryption_key,json=decryptionKey" json:"decryption_key,omitempty"`
	RekeyAuthenticationKey  *Key                     `protobuf:"bytes,9,opt,name=rekey_authentication_key,json=rekeyAuthenticationKey" json:"rekey_authentication_key,omitempty"`
	RekeyDecryptionKey      *Key                     `protobuf:"bytes,10,opt,name=rekey_decryption_key,json=rekeyDecryptionKey" json:"rekey_decryption_key,omitempty"`
	LocalGatewayIp          *IPAddress               `protobuf:"bytes,11,opt,name=local_gateway_ip,json=localGatewayIp" json:"local_gateway_ip,omitempty"`
	RemoteGatewayIp         *IPAddress               `protobuf:"bytes,12,opt,name=remote_gateway_ip,json=remoteGatewayIp" json:"remote_gateway_ip,omitempty"`
	Spi                     uint32                   `protobuf:"varint,13,opt,name=spi,proto3" json:"spi,omitempty"`
	RekeyActive             uint32                   `protobuf:"varint,14,opt,name=rekey_active,json=rekeyActive,proto3" json:"rekey_active,omitempty"`
	RekeySpi                uint32                   `protobuf:"varint,15,opt,name=rekey_spi,json=rekeySpi,proto3" json:"rekey_spi,omitempty"`
	Salt                    uint32                   `protobuf:"varint,16,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (m *IpsecSADecrypt) Reset()                    { *m = IpsecSADecrypt{} }
func (m *IpsecSADecrypt) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecrypt) ProtoMessage()               {}
func (*IpsecSADecrypt) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{2} }

func (m *IpsecSADecrypt) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *IpsecSADecrypt) GetKeyOrHandle() *IpsecSADecryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecSADecrypt) GetProtocol() IpsecProtocol {
	if m != nil {
		return m.Protocol
	}
	return IpsecProtocol_IPSEC_PROTOCOL_NONE
}

func (m *IpsecSADecrypt) GetAuthenticationAlgorithm() AuthenticationAlgorithm {
	if m != nil {
		return m.AuthenticationAlgorithm
	}
	return AuthenticationAlgorithm_AUTHENTICATION_ALGORITHM_NONE
}

func (m *IpsecSADecrypt) GetAuthenticationKey() *Key {
	if m != nil {
		return m.AuthenticationKey
	}
	return nil
}

func (m *IpsecSADecrypt) GetDecryptionAlgorithm() EncryptionAlgorithm {
	if m != nil {
		return m.DecryptionAlgorithm
	}
	return EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE
}

func (m *IpsecSADecrypt) GetRekeyDecAlgorithm() EncryptionAlgorithm {
	if m != nil {
		return m.RekeyDecAlgorithm
	}
	return EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE
}

func (m *IpsecSADecrypt) GetDecryptionKey() *Key {
	if m != nil {
		return m.DecryptionKey
	}
	return nil
}

func (m *IpsecSADecrypt) GetRekeyAuthenticationKey() *Key {
	if m != nil {
		return m.RekeyAuthenticationKey
	}
	return nil
}

func (m *IpsecSADecrypt) GetRekeyDecryptionKey() *Key {
	if m != nil {
		return m.RekeyDecryptionKey
	}
	return nil
}

func (m *IpsecSADecrypt) GetLocalGatewayIp() *IPAddress {
	if m != nil {
		return m.LocalGatewayIp
	}
	return nil
}

func (m *IpsecSADecrypt) GetRemoteGatewayIp() *IPAddress {
	if m != nil {
		return m.RemoteGatewayIp
	}
	return nil
}

func (m *IpsecSADecrypt) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

func (m *IpsecSADecrypt) GetRekeyActive() uint32 {
	if m != nil {
		return m.RekeyActive
	}
	return 0
}

func (m *IpsecSADecrypt) GetRekeySpi() uint32 {
	if m != nil {
		return m.RekeySpi
	}
	return 0
}

func (m *IpsecSADecrypt) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

type IpsecRuleMatchSpec struct {
	RuleId uint64     `protobuf:"varint,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	Match  *RuleMatch `protobuf:"bytes,2,opt,name=match" json:"match,omitempty"`
	// IPSec security associaton parameters
	//
	// Types that are valid to be assigned to IpSecSAInfo:
	//	*IpsecRuleMatchSpec_EncSecurityAssociation
	//	*IpsecRuleMatchSpec_DecSecurityAssociation
	IpSecSAInfo isIpsecRuleMatchSpec_IpSecSAInfo `protobuf_oneof:"IpSecSAInfo"`
}

func (m *IpsecRuleMatchSpec) Reset()                    { *m = IpsecRuleMatchSpec{} }
func (m *IpsecRuleMatchSpec) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleMatchSpec) ProtoMessage()               {}
func (*IpsecRuleMatchSpec) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{3} }

type isIpsecRuleMatchSpec_IpSecSAInfo interface {
	isIpsecRuleMatchSpec_IpSecSAInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IpsecRuleMatchSpec_EncSecurityAssociation struct {
	EncSecurityAssociation *IpsecSAEncrypt `protobuf:"bytes,10,opt,name=enc_security_association,json=encSecurityAssociation,oneof"`
}
type IpsecRuleMatchSpec_DecSecurityAssociation struct {
	DecSecurityAssociation *IpsecSADecrypt `protobuf:"bytes,11,opt,name=dec_security_association,json=decSecurityAssociation,oneof"`
}

func (*IpsecRuleMatchSpec_EncSecurityAssociation) isIpsecRuleMatchSpec_IpSecSAInfo() {}
func (*IpsecRuleMatchSpec_DecSecurityAssociation) isIpsecRuleMatchSpec_IpSecSAInfo() {}

func (m *IpsecRuleMatchSpec) GetIpSecSAInfo() isIpsecRuleMatchSpec_IpSecSAInfo {
	if m != nil {
		return m.IpSecSAInfo
	}
	return nil
}

func (m *IpsecRuleMatchSpec) GetRuleId() uint64 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *IpsecRuleMatchSpec) GetMatch() *RuleMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *IpsecRuleMatchSpec) GetEncSecurityAssociation() *IpsecSAEncrypt {
	if x, ok := m.GetIpSecSAInfo().(*IpsecRuleMatchSpec_EncSecurityAssociation); ok {
		return x.EncSecurityAssociation
	}
	return nil
}

func (m *IpsecRuleMatchSpec) GetDecSecurityAssociation() *IpsecSADecrypt {
	if x, ok := m.GetIpSecSAInfo().(*IpsecRuleMatchSpec_DecSecurityAssociation); ok {
		return x.DecSecurityAssociation
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IpsecRuleMatchSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IpsecRuleMatchSpec_OneofMarshaler, _IpsecRuleMatchSpec_OneofUnmarshaler, _IpsecRuleMatchSpec_OneofSizer, []interface{}{
		(*IpsecRuleMatchSpec_EncSecurityAssociation)(nil),
		(*IpsecRuleMatchSpec_DecSecurityAssociation)(nil),
	}
}

func _IpsecRuleMatchSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IpsecRuleMatchSpec)
	// IpSecSAInfo
	switch x := m.IpSecSAInfo.(type) {
	case *IpsecRuleMatchSpec_EncSecurityAssociation:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EncSecurityAssociation); err != nil {
			return err
		}
	case *IpsecRuleMatchSpec_DecSecurityAssociation:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DecSecurityAssociation); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IpsecRuleMatchSpec.IpSecSAInfo has unexpected type %T", x)
	}
	return nil
}

func _IpsecRuleMatchSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IpsecRuleMatchSpec)
	switch tag {
	case 10: // IpSecSAInfo.enc_security_association
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IpsecSAEncrypt)
		err := b.DecodeMessage(msg)
		m.IpSecSAInfo = &IpsecRuleMatchSpec_EncSecurityAssociation{msg}
		return true, err
	case 11: // IpSecSAInfo.dec_security_association
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IpsecSADecrypt)
		err := b.DecodeMessage(msg)
		m.IpSecSAInfo = &IpsecRuleMatchSpec_DecSecurityAssociation{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IpsecRuleMatchSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IpsecRuleMatchSpec)
	// IpSecSAInfo
	switch x := m.IpSecSAInfo.(type) {
	case *IpsecRuleMatchSpec_EncSecurityAssociation:
		s := proto.Size(x.EncSecurityAssociation)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IpsecRuleMatchSpec_DecSecurityAssociation:
		s := proto.Size(x.DecSecurityAssociation)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// IpsecRuleSpec is the user intent for the IPSec rule
type IpsecRuleSpec struct {
	Meta         *ObjectMeta           `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle  *IpsecRuleKeyHandle   `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
	VrfKeyHandle *VrfKeyHandle         `protobuf:"bytes,3,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty" venice:ref`
	Rules        []*IpsecRuleMatchSpec `protobuf:"bytes,4,rep,name=rules" json:"rules,omitempty"`
}

func (m *IpsecRuleSpec) Reset()                    { *m = IpsecRuleSpec{} }
func (m *IpsecRuleSpec) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleSpec) ProtoMessage()               {}
func (*IpsecRuleSpec) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{4} }

func (m *IpsecRuleSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *IpsecRuleSpec) GetKeyOrHandle() *IpsecRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecRuleSpec) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

func (m *IpsecRuleSpec) GetRules() []*IpsecRuleMatchSpec {
	if m != nil {
		return m.Rules
	}
	return nil
}

// IpsecRuleRequestMsg is the batched add or modify of NAT rule request
type IpsecRuleRequestMsg struct {
	Request []*IpsecRuleSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecRuleRequestMsg) Reset()                    { *m = IpsecRuleRequestMsg{} }
func (m *IpsecRuleRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleRequestMsg) ProtoMessage()               {}
func (*IpsecRuleRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{5} }

func (m *IpsecRuleRequestMsg) GetRequest() []*IpsecRuleSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecRuleStatus reflects the current operational status of the IPSec rule
type IpsecRuleStatus struct {
	Handle uint64 `protobuf:"fixed64,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *IpsecRuleStatus) Reset()                    { *m = IpsecRuleStatus{} }
func (m *IpsecRuleStatus) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleStatus) ProtoMessage()               {}
func (*IpsecRuleStatus) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{6} }

func (m *IpsecRuleStatus) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// IpsecRuleResponse is the response to IpsecRuleSpec
type IpsecRuleResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status"`
	Status    *IpsecRuleStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *IpsecRuleResponse) Reset()                    { *m = IpsecRuleResponse{} }
func (m *IpsecRuleResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleResponse) ProtoMessage()               {}
func (*IpsecRuleResponse) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{7} }

func (m *IpsecRuleResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecRuleResponse) GetStatus() *IpsecRuleStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// IpsecRuleResponseMsg is batched response to IpsecRuleRequestMsg
type IpsecRuleResponseMsg struct {
	Response []*IpsecRuleResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecRuleResponseMsg) Reset()                    { *m = IpsecRuleResponseMsg{} }
func (m *IpsecRuleResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleResponseMsg) ProtoMessage()               {}
func (*IpsecRuleResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{8} }

func (m *IpsecRuleResponseMsg) GetResponse() []*IpsecRuleResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecRuleDeleteRequest is used to delete a policy rule
type IpsecRuleDeleteRequest struct {
	Meta        *ObjectMeta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *IpsecRuleKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecRuleDeleteRequest) Reset()                    { *m = IpsecRuleDeleteRequest{} }
func (m *IpsecRuleDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleDeleteRequest) ProtoMessage()               {}
func (*IpsecRuleDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{9} }

func (m *IpsecRuleDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *IpsecRuleDeleteRequest) GetKeyOrHandle() *IpsecRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecRuleDeleteRequestMsg is used to delete a batch of ipsec rules
type IpsecRuleDeleteRequestMsg struct {
	Request []*IpsecRuleDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecRuleDeleteRequestMsg) Reset()                    { *m = IpsecRuleDeleteRequestMsg{} }
func (m *IpsecRuleDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleDeleteRequestMsg) ProtoMessage()               {}
func (*IpsecRuleDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{10} }

func (m *IpsecRuleDeleteRequestMsg) GetRequest() []*IpsecRuleDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecRuleDeleteResponseMsg is batched response to IpsecRuleDeleteRequestMsg
type IpsecRuleDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *IpsecRuleDeleteResponseMsg) Reset()                    { *m = IpsecRuleDeleteResponseMsg{} }
func (m *IpsecRuleDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleDeleteResponseMsg) ProtoMessage()               {}
func (*IpsecRuleDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{11} }

func (m *IpsecRuleDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// IpsecRuleGetRequest is used to get information about a ipsec rule
type IpsecRuleGetRequest struct {
	Meta        *ObjectMeta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *IpsecRuleKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecRuleGetRequest) Reset()                    { *m = IpsecRuleGetRequest{} }
func (m *IpsecRuleGetRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleGetRequest) ProtoMessage()               {}
func (*IpsecRuleGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{12} }

func (m *IpsecRuleGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *IpsecRuleGetRequest) GetKeyOrHandle() *IpsecRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecRuleGetRequestMsg is batched GET requests for ipsec rule
type IpsecRuleGetRequestMsg struct {
	Request []*IpsecRuleGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecRuleGetRequestMsg) Reset()                    { *m = IpsecRuleGetRequestMsg{} }
func (m *IpsecRuleGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleGetRequestMsg) ProtoMessage()               {}
func (*IpsecRuleGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{13} }

func (m *IpsecRuleGetRequestMsg) GetRequest() []*IpsecRuleGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecSAEncryptRequestMsg is batched add or modify ipsec_sa request
type IpsecSAEncryptRequestMsg struct {
	Request []*IpsecSAEncrypt `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSAEncryptRequestMsg) Reset()                    { *m = IpsecSAEncryptRequestMsg{} }
func (m *IpsecSAEncryptRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptRequestMsg) ProtoMessage()               {}
func (*IpsecSAEncryptRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{14} }

func (m *IpsecSAEncryptRequestMsg) GetRequest() []*IpsecSAEncrypt {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecSAEncryptStatus is the operational status of a given ipsec_sa
type IpsecSAEncryptStatus struct {
	IpsecSaHandle uint64 `protobuf:"fixed64,1,opt,name=ipsec_sa_handle,json=ipsecSaHandle,proto3" json:"ipsec_sa_handle,omitempty"`
}

func (m *IpsecSAEncryptStatus) Reset()                    { *m = IpsecSAEncryptStatus{} }
func (m *IpsecSAEncryptStatus) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptStatus) ProtoMessage()               {}
func (*IpsecSAEncryptStatus) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{15} }

func (m *IpsecSAEncryptStatus) GetIpsecSaHandle() uint64 {
	if m != nil {
		return m.IpsecSaHandle
	}
	return 0
}

// IpsecSAEncryptResponse is response to IpsecSA
type IpsecSAEncryptResponse struct {
	ApiStatus     ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	IpsecSaStatus *IpsecSAEncryptStatus `protobuf:"bytes,2,opt,name=ipsec_sa_status,json=ipsecSaStatus" json:"ipsec_sa_status,omitempty"`
}

func (m *IpsecSAEncryptResponse) Reset()                    { *m = IpsecSAEncryptResponse{} }
func (m *IpsecSAEncryptResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptResponse) ProtoMessage()               {}
func (*IpsecSAEncryptResponse) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{16} }

func (m *IpsecSAEncryptResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecSAEncryptResponse) GetIpsecSaStatus() *IpsecSAEncryptStatus {
	if m != nil {
		return m.IpsecSaStatus
	}
	return nil
}

// IpsecSAEncryptResponseMsg is batched response to IpsecSAEncryptRequestMsg
type IpsecSAEncryptResponseMsg struct {
	Response []*IpsecSAEncryptResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecSAEncryptResponseMsg) Reset()                    { *m = IpsecSAEncryptResponseMsg{} }
func (m *IpsecSAEncryptResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptResponseMsg) ProtoMessage()               {}
func (*IpsecSAEncryptResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{17} }

func (m *IpsecSAEncryptResponseMsg) GetResponse() []*IpsecSAEncryptResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecSAEncryptDeleteRequest is used to delete a ipsec_sa
type IpsecSAEncryptDeleteRequest struct {
	Meta        *ObjectMeta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *IpsecSAEncryptKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecSAEncryptDeleteRequest) Reset()         { *m = IpsecSAEncryptDeleteRequest{} }
func (m *IpsecSAEncryptDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*IpsecSAEncryptDeleteRequest) ProtoMessage()    {}
func (*IpsecSAEncryptDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{18}
}

func (m *IpsecSAEncryptDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *IpsecSAEncryptDeleteRequest) GetKeyOrHandle() *IpsecSAEncryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecSAEncryptDeleteRequestMsg is used to delete a batch of ipsec_sas
type IpsecSAEncryptDeleteRequestMsg struct {
	Request []*IpsecSAEncryptDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSAEncryptDeleteRequestMsg) Reset()         { *m = IpsecSAEncryptDeleteRequestMsg{} }
func (m *IpsecSAEncryptDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSAEncryptDeleteRequestMsg) ProtoMessage()    {}
func (*IpsecSAEncryptDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{19}
}

func (m *IpsecSAEncryptDeleteRequestMsg) GetRequest() []*IpsecSAEncryptDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecSAEncryptDeleteResponseMsg is batched response to IpsecSADeleteRequestMsg
type IpsecSAEncryptDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *IpsecSAEncryptDeleteResponseMsg) Reset()         { *m = IpsecSAEncryptDeleteResponseMsg{} }
func (m *IpsecSAEncryptDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSAEncryptDeleteResponseMsg) ProtoMessage()    {}
func (*IpsecSAEncryptDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{20}
}

func (m *IpsecSAEncryptDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// IpsecSAEncryptGetRequest is used to get information about a ipsec_sa
type IpsecSAEncryptGetRequest struct {
	Meta        *ObjectMeta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *IpsecSAEncryptKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecSAEncryptGetRequest) Reset()                    { *m = IpsecSAEncryptGetRequest{} }
func (m *IpsecSAEncryptGetRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptGetRequest) ProtoMessage()               {}
func (*IpsecSAEncryptGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{21} }

func (m *IpsecSAEncryptGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *IpsecSAEncryptGetRequest) GetKeyOrHandle() *IpsecSAEncryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecSAEncryptGetRequestMsg is batched GET requests for ipsec_sas
type IpsecSAEncryptGetRequestMsg struct {
	Request []*IpsecSAEncryptGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSAEncryptGetRequestMsg) Reset()         { *m = IpsecSAEncryptGetRequestMsg{} }
func (m *IpsecSAEncryptGetRequestMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSAEncryptGetRequestMsg) ProtoMessage()    {}
func (*IpsecSAEncryptGetRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{22}
}

func (m *IpsecSAEncryptGetRequestMsg) GetRequest() []*IpsecSAEncryptGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type IpsecSAEncryptGetResponse struct {
	ApiStatus ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *IpsecSAEncrypt       `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *IpsecSAEncryptStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *IpsecSAEncryptGetResponse) Reset()                    { *m = IpsecSAEncryptGetResponse{} }
func (m *IpsecSAEncryptGetResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptGetResponse) ProtoMessage()               {}
func (*IpsecSAEncryptGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{23} }

func (m *IpsecSAEncryptGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecSAEncryptGetResponse) GetSpec() *IpsecSAEncrypt {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *IpsecSAEncryptGetResponse) GetStatus() *IpsecSAEncryptStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type IpsecSAEncryptGetResponseMsg struct {
	Response []*IpsecSAEncryptGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecSAEncryptGetResponseMsg) Reset()         { *m = IpsecSAEncryptGetResponseMsg{} }
func (m *IpsecSAEncryptGetResponseMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSAEncryptGetResponseMsg) ProtoMessage()    {}
func (*IpsecSAEncryptGetResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{24}
}

func (m *IpsecSAEncryptGetResponseMsg) GetResponse() []*IpsecSAEncryptGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecSADecryptRequestMsg is batched add or modify ipsec_sa request
type IpsecSADecryptRequestMsg struct {
	Request []*IpsecSADecrypt `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSADecryptRequestMsg) Reset()                    { *m = IpsecSADecryptRequestMsg{} }
func (m *IpsecSADecryptRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptRequestMsg) ProtoMessage()               {}
func (*IpsecSADecryptRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{25} }

func (m *IpsecSADecryptRequestMsg) GetRequest() []*IpsecSADecrypt {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecSADecryptStatus is the operational status of a given ipsec_sa
type IpsecSADecryptStatus struct {
	IpsecSaHandle uint64 `protobuf:"fixed64,1,opt,name=ipsec_sa_handle,json=ipsecSaHandle,proto3" json:"ipsec_sa_handle,omitempty"`
}

func (m *IpsecSADecryptStatus) Reset()                    { *m = IpsecSADecryptStatus{} }
func (m *IpsecSADecryptStatus) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptStatus) ProtoMessage()               {}
func (*IpsecSADecryptStatus) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{26} }

func (m *IpsecSADecryptStatus) GetIpsecSaHandle() uint64 {
	if m != nil {
		return m.IpsecSaHandle
	}
	return 0
}

// IpsecSADecryptResponse is response to IpsecSA
type IpsecSADecryptResponse struct {
	ApiStatus     ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	IpsecSaStatus *IpsecSADecryptStatus `protobuf:"bytes,2,opt,name=ipsec_sa_status,json=ipsecSaStatus" json:"ipsec_sa_status,omitempty"`
}

func (m *IpsecSADecryptResponse) Reset()                    { *m = IpsecSADecryptResponse{} }
func (m *IpsecSADecryptResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptResponse) ProtoMessage()               {}
func (*IpsecSADecryptResponse) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{27} }

func (m *IpsecSADecryptResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecSADecryptResponse) GetIpsecSaStatus() *IpsecSADecryptStatus {
	if m != nil {
		return m.IpsecSaStatus
	}
	return nil
}

// IpsecSADecryptResponseMsg is batched response to IpsecSADecryptRequestMsg
type IpsecSADecryptResponseMsg struct {
	Response []*IpsecSADecryptResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecSADecryptResponseMsg) Reset()                    { *m = IpsecSADecryptResponseMsg{} }
func (m *IpsecSADecryptResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptResponseMsg) ProtoMessage()               {}
func (*IpsecSADecryptResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{28} }

func (m *IpsecSADecryptResponseMsg) GetResponse() []*IpsecSADecryptResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecSADecryptDeleteRequest is used to delete a ipsec_sa
type IpsecSADecryptDeleteRequest struct {
	Meta        *ObjectMeta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *IpsecSADecryptKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecSADecryptDeleteRequest) Reset()         { *m = IpsecSADecryptDeleteRequest{} }
func (m *IpsecSADecryptDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*IpsecSADecryptDeleteRequest) ProtoMessage()    {}
func (*IpsecSADecryptDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{29}
}

func (m *IpsecSADecryptDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *IpsecSADecryptDeleteRequest) GetKeyOrHandle() *IpsecSADecryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecSADecryptDeleteRequestMsg is used to delete a batch of ipsec_sas
type IpsecSADecryptDeleteRequestMsg struct {
	Request []*IpsecSADecryptDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSADecryptDeleteRequestMsg) Reset()         { *m = IpsecSADecryptDeleteRequestMsg{} }
func (m *IpsecSADecryptDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSADecryptDeleteRequestMsg) ProtoMessage()    {}
func (*IpsecSADecryptDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{30}
}

func (m *IpsecSADecryptDeleteRequestMsg) GetRequest() []*IpsecSADecryptDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecSADecryptDeleteResponseMsg is batched response to IpsecSADeleteRequestMsg
type IpsecSADecryptDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *IpsecSADecryptDeleteResponseMsg) Reset()         { *m = IpsecSADecryptDeleteResponseMsg{} }
func (m *IpsecSADecryptDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSADecryptDeleteResponseMsg) ProtoMessage()    {}
func (*IpsecSADecryptDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{31}
}

func (m *IpsecSADecryptDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// IpsecSADecryptGetRequest is used to get information about a ipsec_sa
type IpsecSADecryptGetRequest struct {
	Meta        *ObjectMeta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *IpsecSADecryptKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecSADecryptGetRequest) Reset()                    { *m = IpsecSADecryptGetRequest{} }
func (m *IpsecSADecryptGetRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptGetRequest) ProtoMessage()               {}
func (*IpsecSADecryptGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{32} }

func (m *IpsecSADecryptGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *IpsecSADecryptGetRequest) GetKeyOrHandle() *IpsecSADecryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecSADecryptGetRequestMsg is batched GET requests for ipsec_sas
type IpsecSADecryptGetRequestMsg struct {
	Request []*IpsecSADecryptGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSADecryptGetRequestMsg) Reset()         { *m = IpsecSADecryptGetRequestMsg{} }
func (m *IpsecSADecryptGetRequestMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSADecryptGetRequestMsg) ProtoMessage()    {}
func (*IpsecSADecryptGetRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{33}
}

func (m *IpsecSADecryptGetRequestMsg) GetRequest() []*IpsecSADecryptGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type IpsecSADecryptGetResponse struct {
	ApiStatus ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *IpsecSADecrypt       `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *IpsecSADecryptStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *IpsecSADecryptGetResponse) Reset()                    { *m = IpsecSADecryptGetResponse{} }
func (m *IpsecSADecryptGetResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptGetResponse) ProtoMessage()               {}
func (*IpsecSADecryptGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{34} }

func (m *IpsecSADecryptGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecSADecryptGetResponse) GetSpec() *IpsecSADecrypt {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *IpsecSADecryptGetResponse) GetStatus() *IpsecSADecryptStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type IpsecSADecryptGetResponseMsg struct {
	Response []*IpsecSADecryptGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecSADecryptGetResponseMsg) Reset()         { *m = IpsecSADecryptGetResponseMsg{} }
func (m *IpsecSADecryptGetResponseMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSADecryptGetResponseMsg) ProtoMessage()    {}
func (*IpsecSADecryptGetResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{35}
}

func (m *IpsecSADecryptGetResponseMsg) GetResponse() []*IpsecSADecryptGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*Key)(nil), "ipsec.Key")
	proto.RegisterType((*IpsecSAEncrypt)(nil), "ipsec.IpsecSAEncrypt")
	proto.RegisterType((*IpsecSADecrypt)(nil), "ipsec.IpsecSADecrypt")
	proto.RegisterType((*IpsecRuleMatchSpec)(nil), "ipsec.IpsecRuleMatchSpec")
	proto.RegisterType((*IpsecRuleSpec)(nil), "ipsec.IpsecRuleSpec")
	proto.RegisterType((*IpsecRuleRequestMsg)(nil), "ipsec.IpsecRuleRequestMsg")
	proto.RegisterType((*IpsecRuleStatus)(nil), "ipsec.IpsecRuleStatus")
	proto.RegisterType((*IpsecRuleResponse)(nil), "ipsec.IpsecRuleResponse")
	proto.RegisterType((*IpsecRuleResponseMsg)(nil), "ipsec.IpsecRuleResponseMsg")
	proto.RegisterType((*IpsecRuleDeleteRequest)(nil), "ipsec.IpsecRuleDeleteRequest")
	proto.RegisterType((*IpsecRuleDeleteRequestMsg)(nil), "ipsec.IpsecRuleDeleteRequestMsg")
	proto.RegisterType((*IpsecRuleDeleteResponseMsg)(nil), "ipsec.IpsecRuleDeleteResponseMsg")
	proto.RegisterType((*IpsecRuleGetRequest)(nil), "ipsec.IpsecRuleGetRequest")
	proto.RegisterType((*IpsecRuleGetRequestMsg)(nil), "ipsec.IpsecRuleGetRequestMsg")
	proto.RegisterType((*IpsecSAEncryptRequestMsg)(nil), "ipsec.IpsecSAEncryptRequestMsg")
	proto.RegisterType((*IpsecSAEncryptStatus)(nil), "ipsec.IpsecSAEncryptStatus")
	proto.RegisterType((*IpsecSAEncryptResponse)(nil), "ipsec.IpsecSAEncryptResponse")
	proto.RegisterType((*IpsecSAEncryptResponseMsg)(nil), "ipsec.IpsecSAEncryptResponseMsg")
	proto.RegisterType((*IpsecSAEncryptDeleteRequest)(nil), "ipsec.IpsecSAEncryptDeleteRequest")
	proto.RegisterType((*IpsecSAEncryptDeleteRequestMsg)(nil), "ipsec.IpsecSAEncryptDeleteRequestMsg")
	proto.RegisterType((*IpsecSAEncryptDeleteResponseMsg)(nil), "ipsec.IpsecSAEncryptDeleteResponseMsg")
	proto.RegisterType((*IpsecSAEncryptGetRequest)(nil), "ipsec.IpsecSAEncryptGetRequest")
	proto.RegisterType((*IpsecSAEncryptGetRequestMsg)(nil), "ipsec.IpsecSAEncryptGetRequestMsg")
	proto.RegisterType((*IpsecSAEncryptGetResponse)(nil), "ipsec.IpsecSAEncryptGetResponse")
	proto.RegisterType((*IpsecSAEncryptGetResponseMsg)(nil), "ipsec.IpsecSAEncryptGetResponseMsg")
	proto.RegisterType((*IpsecSADecryptRequestMsg)(nil), "ipsec.IpsecSADecryptRequestMsg")
	proto.RegisterType((*IpsecSADecryptStatus)(nil), "ipsec.IpsecSADecryptStatus")
	proto.RegisterType((*IpsecSADecryptResponse)(nil), "ipsec.IpsecSADecryptResponse")
	proto.RegisterType((*IpsecSADecryptResponseMsg)(nil), "ipsec.IpsecSADecryptResponseMsg")
	proto.RegisterType((*IpsecSADecryptDeleteRequest)(nil), "ipsec.IpsecSADecryptDeleteRequest")
	proto.RegisterType((*IpsecSADecryptDeleteRequestMsg)(nil), "ipsec.IpsecSADecryptDeleteRequestMsg")
	proto.RegisterType((*IpsecSADecryptDeleteResponseMsg)(nil), "ipsec.IpsecSADecryptDeleteResponseMsg")
	proto.RegisterType((*IpsecSADecryptGetRequest)(nil), "ipsec.IpsecSADecryptGetRequest")
	proto.RegisterType((*IpsecSADecryptGetRequestMsg)(nil), "ipsec.IpsecSADecryptGetRequestMsg")
	proto.RegisterType((*IpsecSADecryptGetResponse)(nil), "ipsec.IpsecSADecryptGetResponse")
	proto.RegisterType((*IpsecSADecryptGetResponseMsg)(nil), "ipsec.IpsecSADecryptGetResponseMsg")
	proto.RegisterEnum("ipsec.IpsecProtocol", IpsecProtocol_name, IpsecProtocol_value)
	proto.RegisterEnum("ipsec.EncryptionAlgorithm", EncryptionAlgorithm_name, EncryptionAlgorithm_value)
	proto.RegisterEnum("ipsec.AuthenticationAlgorithm", AuthenticationAlgorithm_name, AuthenticationAlgorithm_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Ipsec service

type IpsecClient interface {
	IpsecRuleCreate(ctx context.Context, in *IpsecRuleRequestMsg, opts ...grpc.CallOption) (*IpsecRuleResponseMsg, error)
	IpsecRuleUpdate(ctx context.Context, in *IpsecRuleRequestMsg, opts ...grpc.CallOption) (*IpsecRuleResponseMsg, error)
	IpsecRuleDelete(ctx context.Context, in *IpsecRuleDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecRuleDeleteResponseMsg, error)
	IpsecRuleGet(ctx context.Context, in *IpsecRuleGetRequestMsg, opts ...grpc.CallOption) (*IpsecRuleGetRequestMsg, error)
	IpsecSAEncryptCreate(ctx context.Context, in *IpsecSAEncryptRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptResponseMsg, error)
	IpsecSAEncryptUpdate(ctx context.Context, in *IpsecSAEncryptRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptResponseMsg, error)
	IpsecSAEncryptDelete(ctx context.Context, in *IpsecSAEncryptDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptDeleteResponseMsg, error)
	IpsecSAEncryptGet(ctx context.Context, in *IpsecSAEncryptGetRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptGetResponseMsg, error)
	IpsecSADecryptCreate(ctx context.Context, in *IpsecSADecryptRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptResponseMsg, error)
	IpsecSADecryptUpdate(ctx context.Context, in *IpsecSADecryptRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptResponseMsg, error)
	IpsecSADecryptDelete(ctx context.Context, in *IpsecSADecryptDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptDeleteResponseMsg, error)
	IpsecSADecryptGet(ctx context.Context, in *IpsecSADecryptGetRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptGetResponseMsg, error)
}

type ipsecClient struct {
	cc *grpc.ClientConn
}

func NewIpsecClient(cc *grpc.ClientConn) IpsecClient {
	return &ipsecClient{cc}
}

func (c *ipsecClient) IpsecRuleCreate(ctx context.Context, in *IpsecRuleRequestMsg, opts ...grpc.CallOption) (*IpsecRuleResponseMsg, error) {
	out := new(IpsecRuleResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecRuleCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecRuleUpdate(ctx context.Context, in *IpsecRuleRequestMsg, opts ...grpc.CallOption) (*IpsecRuleResponseMsg, error) {
	out := new(IpsecRuleResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecRuleUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecRuleDelete(ctx context.Context, in *IpsecRuleDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecRuleDeleteResponseMsg, error) {
	out := new(IpsecRuleDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecRuleDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecRuleGet(ctx context.Context, in *IpsecRuleGetRequestMsg, opts ...grpc.CallOption) (*IpsecRuleGetRequestMsg, error) {
	out := new(IpsecRuleGetRequestMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecRuleGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecSAEncryptCreate(ctx context.Context, in *IpsecSAEncryptRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptResponseMsg, error) {
	out := new(IpsecSAEncryptResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecSAEncryptCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecSAEncryptUpdate(ctx context.Context, in *IpsecSAEncryptRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptResponseMsg, error) {
	out := new(IpsecSAEncryptResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecSAEncryptUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecSAEncryptDelete(ctx context.Context, in *IpsecSAEncryptDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptDeleteResponseMsg, error) {
	out := new(IpsecSAEncryptDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecSAEncryptDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecSAEncryptGet(ctx context.Context, in *IpsecSAEncryptGetRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptGetResponseMsg, error) {
	out := new(IpsecSAEncryptGetResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecSAEncryptGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecSADecryptCreate(ctx context.Context, in *IpsecSADecryptRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptResponseMsg, error) {
	out := new(IpsecSADecryptResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecSADecryptCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecSADecryptUpdate(ctx context.Context, in *IpsecSADecryptRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptResponseMsg, error) {
	out := new(IpsecSADecryptResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecSADecryptUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecSADecryptDelete(ctx context.Context, in *IpsecSADecryptDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptDeleteResponseMsg, error) {
	out := new(IpsecSADecryptDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecSADecryptDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecSADecryptGet(ctx context.Context, in *IpsecSADecryptGetRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptGetResponseMsg, error) {
	out := new(IpsecSADecryptGetResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecSADecryptGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ipsec service

type IpsecServer interface {
	IpsecRuleCreate(context.Context, *IpsecRuleRequestMsg) (*IpsecRuleResponseMsg, error)
	IpsecRuleUpdate(context.Context, *IpsecRuleRequestMsg) (*IpsecRuleResponseMsg, error)
	IpsecRuleDelete(context.Context, *IpsecRuleDeleteRequestMsg) (*IpsecRuleDeleteResponseMsg, error)
	IpsecRuleGet(context.Context, *IpsecRuleGetRequestMsg) (*IpsecRuleGetRequestMsg, error)
	IpsecSAEncryptCreate(context.Context, *IpsecSAEncryptRequestMsg) (*IpsecSAEncryptResponseMsg, error)
	IpsecSAEncryptUpdate(context.Context, *IpsecSAEncryptRequestMsg) (*IpsecSAEncryptResponseMsg, error)
	IpsecSAEncryptDelete(context.Context, *IpsecSAEncryptDeleteRequestMsg) (*IpsecSAEncryptDeleteResponseMsg, error)
	IpsecSAEncryptGet(context.Context, *IpsecSAEncryptGetRequestMsg) (*IpsecSAEncryptGetResponseMsg, error)
	IpsecSADecryptCreate(context.Context, *IpsecSADecryptRequestMsg) (*IpsecSADecryptResponseMsg, error)
	IpsecSADecryptUpdate(context.Context, *IpsecSADecryptRequestMsg) (*IpsecSADecryptResponseMsg, error)
	IpsecSADecryptDelete(context.Context, *IpsecSADecryptDeleteRequestMsg) (*IpsecSADecryptDeleteResponseMsg, error)
	IpsecSADecryptGet(context.Context, *IpsecSADecryptGetRequestMsg) (*IpsecSADecryptGetResponseMsg, error)
}

func RegisterIpsecServer(s *grpc.Server, srv IpsecServer) {
	s.RegisterService(&_Ipsec_serviceDesc, srv)
}

func _Ipsec_IpsecRuleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecRuleRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecRuleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecRuleCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecRuleCreate(ctx, req.(*IpsecRuleRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecRuleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecRuleRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecRuleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecRuleUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecRuleUpdate(ctx, req.(*IpsecRuleRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecRuleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecRuleDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecRuleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecRuleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecRuleDelete(ctx, req.(*IpsecRuleDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecRuleGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecRuleGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecRuleGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecRuleGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecRuleGet(ctx, req.(*IpsecRuleGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecSAEncryptCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecSAEncryptRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecSAEncryptCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecSAEncryptCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecSAEncryptCreate(ctx, req.(*IpsecSAEncryptRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecSAEncryptUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecSAEncryptRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecSAEncryptUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecSAEncryptUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecSAEncryptUpdate(ctx, req.(*IpsecSAEncryptRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecSAEncryptDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecSAEncryptDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecSAEncryptDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecSAEncryptDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecSAEncryptDelete(ctx, req.(*IpsecSAEncryptDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecSAEncryptGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecSAEncryptGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecSAEncryptGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecSAEncryptGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecSAEncryptGet(ctx, req.(*IpsecSAEncryptGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecSADecryptCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecSADecryptRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecSADecryptCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecSADecryptCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecSADecryptCreate(ctx, req.(*IpsecSADecryptRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecSADecryptUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecSADecryptRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecSADecryptUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecSADecryptUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecSADecryptUpdate(ctx, req.(*IpsecSADecryptRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecSADecryptDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecSADecryptDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecSADecryptDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecSADecryptDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecSADecryptDelete(ctx, req.(*IpsecSADecryptDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecSADecryptGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecSADecryptGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecSADecryptGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecSADecryptGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecSADecryptGet(ctx, req.(*IpsecSADecryptGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ipsec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ipsec.Ipsec",
	HandlerType: (*IpsecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IpsecRuleCreate",
			Handler:    _Ipsec_IpsecRuleCreate_Handler,
		},
		{
			MethodName: "IpsecRuleUpdate",
			Handler:    _Ipsec_IpsecRuleUpdate_Handler,
		},
		{
			MethodName: "IpsecRuleDelete",
			Handler:    _Ipsec_IpsecRuleDelete_Handler,
		},
		{
			MethodName: "IpsecRuleGet",
			Handler:    _Ipsec_IpsecRuleGet_Handler,
		},
		{
			MethodName: "IpsecSAEncryptCreate",
			Handler:    _Ipsec_IpsecSAEncryptCreate_Handler,
		},
		{
			MethodName: "IpsecSAEncryptUpdate",
			Handler:    _Ipsec_IpsecSAEncryptUpdate_Handler,
		},
		{
			MethodName: "IpsecSAEncryptDelete",
			Handler:    _Ipsec_IpsecSAEncryptDelete_Handler,
		},
		{
			MethodName: "IpsecSAEncryptGet",
			Handler:    _Ipsec_IpsecSAEncryptGet_Handler,
		},
		{
			MethodName: "IpsecSADecryptCreate",
			Handler:    _Ipsec_IpsecSADecryptCreate_Handler,
		},
		{
			MethodName: "IpsecSADecryptUpdate",
			Handler:    _Ipsec_IpsecSADecryptUpdate_Handler,
		},
		{
			MethodName: "IpsecSADecryptDelete",
			Handler:    _Ipsec_IpsecSADecryptDelete_Handler,
		},
		{
			MethodName: "IpsecSADecryptGet",
			Handler:    _Ipsec_IpsecSADecryptGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipsec.proto",
}

func (m *Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Key) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyInfo != nil {
		nn1, err := m.KeyInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Key_Key) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}
func (m *Key_KeyLocation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintIpsec(dAtA, i, uint64(m.KeyLocation))
	return i, nil
}
func (m *IpsecSAEncrypt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncrypt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Meta.Size()))
		n2, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n3, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Protocol != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Protocol))
	}
	if m.AuthenticationAlgorithm != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.AuthenticationAlgorithm))
	}
	if m.AuthenticationKey != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.AuthenticationKey.Size()))
		n4, err := m.AuthenticationKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.EncryptionAlgorithm != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptionAlgorithm))
	}
	if m.EncryptionKey != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptionKey.Size()))
		n5, err := m.EncryptionKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.LocalGatewayIp != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.LocalGatewayIp.Size()))
		n6, err := m.LocalGatewayIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.RemoteGatewayIp != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RemoteGatewayIp.Size()))
		n7, err := m.RemoteGatewayIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Spi != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Spi))
	}
	if m.NatTraversalPort != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.NatTraversalPort))
	}
	if m.Salt != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Salt))
	}
	if m.Iv != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Iv))
	}
	return i, nil
}

func (m *IpsecSADecrypt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecrypt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Meta.Size()))
		n8, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n9, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Protocol != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Protocol))
	}
	if m.AuthenticationAlgorithm != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.AuthenticationAlgorithm))
	}
	if m.AuthenticationKey != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.AuthenticationKey.Size()))
		n10, err := m.AuthenticationKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.DecryptionAlgorithm != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecryptionAlgorithm))
	}
	if m.RekeyDecAlgorithm != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RekeyDecAlgorithm))
	}
	if m.DecryptionKey != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecryptionKey.Size()))
		n11, err := m.DecryptionKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.RekeyAuthenticationKey != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RekeyAuthenticationKey.Size()))
		n12, err := m.RekeyAuthenticationKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.RekeyDecryptionKey != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RekeyDecryptionKey.Size()))
		n13, err := m.RekeyDecryptionKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.LocalGatewayIp != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.LocalGatewayIp.Size()))
		n14, err := m.LocalGatewayIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.RemoteGatewayIp != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RemoteGatewayIp.Size()))
		n15, err := m.RemoteGatewayIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Spi != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Spi))
	}
	if m.RekeyActive != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RekeyActive))
	}
	if m.RekeySpi != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RekeySpi))
	}
	if m.Salt != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Salt))
	}
	return i, nil
}

func (m *IpsecRuleMatchSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleMatchSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RuleId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RuleId))
	}
	if m.Match != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Match.Size()))
		n16, err := m.Match.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.IpSecSAInfo != nil {
		nn17, err := m.IpSecSAInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn17
	}
	return i, nil
}

func (m *IpsecRuleMatchSpec_EncSecurityAssociation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EncSecurityAssociation != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncSecurityAssociation.Size()))
		n18, err := m.EncSecurityAssociation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *IpsecRuleMatchSpec_DecSecurityAssociation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DecSecurityAssociation != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecSecurityAssociation.Size()))
		n19, err := m.DecSecurityAssociation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *IpsecRuleSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Meta.Size()))
		n20, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n21, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.VrfKeyHandle != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.VrfKeyHandle.Size()))
		n22, err := m.VrfKeyHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0x22
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecRuleRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecRuleStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Handle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Handle))
		i += 8
	}
	return i, nil
}

func (m *IpsecRuleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Status.Size()))
		n23, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *IpsecRuleResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecRuleDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Meta.Size()))
		n24, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n25, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *IpsecRuleDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecRuleDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA27 := make([]byte, len(m.ApiStatus)*10)
		var j26 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(j26))
		i += copy(dAtA[i:], dAtA27[:j26])
	}
	return i, nil
}

func (m *IpsecRuleGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Meta.Size()))
		n28, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n29, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *IpsecRuleGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSAEncryptRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSAEncryptStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IpsecSaHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.IpsecSaHandle))
		i += 8
	}
	return i, nil
}

func (m *IpsecSAEncryptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.ApiStatus))
	}
	if m.IpsecSaStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.IpsecSaStatus.Size()))
		n30, err := m.IpsecSaStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}

func (m *IpsecSAEncryptResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSAEncryptDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Meta.Size()))
		n31, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n32, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func (m *IpsecSAEncryptDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSAEncryptDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA34 := make([]byte, len(m.ApiStatus)*10)
		var j33 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA34[j33] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j33++
			}
			dAtA34[j33] = uint8(num)
			j33++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(j33))
		i += copy(dAtA[i:], dAtA34[:j33])
	}
	return i, nil
}

func (m *IpsecSAEncryptGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Meta.Size()))
		n35, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n36, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *IpsecSAEncryptGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSAEncryptGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Spec.Size()))
		n37, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Status.Size()))
		n38, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}

func (m *IpsecSAEncryptGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSADecryptRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSADecryptStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IpsecSaHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.IpsecSaHandle))
		i += 8
	}
	return i, nil
}

func (m *IpsecSADecryptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.ApiStatus))
	}
	if m.IpsecSaStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.IpsecSaStatus.Size()))
		n39, err := m.IpsecSaStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}

func (m *IpsecSADecryptResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSADecryptDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Meta.Size()))
		n40, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n41, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func (m *IpsecSADecryptDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSADecryptDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA43 := make([]byte, len(m.ApiStatus)*10)
		var j42 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA43[j42] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j42++
			}
			dAtA43[j42] = uint8(num)
			j42++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(j42))
		i += copy(dAtA[i:], dAtA43[:j42])
	}
	return i, nil
}

func (m *IpsecSADecryptGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Meta.Size()))
		n44, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n45, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}

func (m *IpsecSADecryptGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSADecryptGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Spec.Size()))
		n46, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Status.Size()))
		n47, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}

func (m *IpsecSADecryptGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintIpsec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Key) Size() (n int) {
	var l int
	_ = l
	if m.KeyInfo != nil {
		n += m.KeyInfo.Size()
	}
	return n
}

func (m *Key_Key) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}
func (m *Key_KeyLocation) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovIpsec(uint64(m.KeyLocation))
	return n
}
func (m *IpsecSAEncrypt) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Protocol != 0 {
		n += 1 + sovIpsec(uint64(m.Protocol))
	}
	if m.AuthenticationAlgorithm != 0 {
		n += 1 + sovIpsec(uint64(m.AuthenticationAlgorithm))
	}
	if m.AuthenticationKey != nil {
		l = m.AuthenticationKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.EncryptionAlgorithm != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptionAlgorithm))
	}
	if m.EncryptionKey != nil {
		l = m.EncryptionKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.LocalGatewayIp != nil {
		l = m.LocalGatewayIp.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.RemoteGatewayIp != nil {
		l = m.RemoteGatewayIp.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Spi != 0 {
		n += 1 + sovIpsec(uint64(m.Spi))
	}
	if m.NatTraversalPort != 0 {
		n += 1 + sovIpsec(uint64(m.NatTraversalPort))
	}
	if m.Salt != 0 {
		n += 1 + sovIpsec(uint64(m.Salt))
	}
	if m.Iv != 0 {
		n += 1 + sovIpsec(uint64(m.Iv))
	}
	return n
}

func (m *IpsecSADecrypt) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Protocol != 0 {
		n += 1 + sovIpsec(uint64(m.Protocol))
	}
	if m.AuthenticationAlgorithm != 0 {
		n += 1 + sovIpsec(uint64(m.AuthenticationAlgorithm))
	}
	if m.AuthenticationKey != nil {
		l = m.AuthenticationKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.DecryptionAlgorithm != 0 {
		n += 1 + sovIpsec(uint64(m.DecryptionAlgorithm))
	}
	if m.RekeyDecAlgorithm != 0 {
		n += 1 + sovIpsec(uint64(m.RekeyDecAlgorithm))
	}
	if m.DecryptionKey != nil {
		l = m.DecryptionKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.RekeyAuthenticationKey != nil {
		l = m.RekeyAuthenticationKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.RekeyDecryptionKey != nil {
		l = m.RekeyDecryptionKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.LocalGatewayIp != nil {
		l = m.LocalGatewayIp.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.RemoteGatewayIp != nil {
		l = m.RemoteGatewayIp.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Spi != 0 {
		n += 1 + sovIpsec(uint64(m.Spi))
	}
	if m.RekeyActive != 0 {
		n += 1 + sovIpsec(uint64(m.RekeyActive))
	}
	if m.RekeySpi != 0 {
		n += 1 + sovIpsec(uint64(m.RekeySpi))
	}
	if m.Salt != 0 {
		n += 2 + sovIpsec(uint64(m.Salt))
	}
	return n
}

func (m *IpsecRuleMatchSpec) Size() (n int) {
	var l int
	_ = l
	if m.RuleId != 0 {
		n += 1 + sovIpsec(uint64(m.RuleId))
	}
	if m.Match != nil {
		l = m.Match.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.IpSecSAInfo != nil {
		n += m.IpSecSAInfo.Size()
	}
	return n
}

func (m *IpsecRuleMatchSpec_EncSecurityAssociation) Size() (n int) {
	var l int
	_ = l
	if m.EncSecurityAssociation != nil {
		l = m.EncSecurityAssociation.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}
func (m *IpsecRuleMatchSpec_DecSecurityAssociation) Size() (n int) {
	var l int
	_ = l
	if m.DecSecurityAssociation != nil {
		l = m.DecSecurityAssociation.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}
func (m *IpsecRuleSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.VrfKeyHandle != nil {
		l = m.VrfKeyHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecRuleRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecRuleStatus) Size() (n int) {
	var l int
	_ = l
	if m.Handle != 0 {
		n += 9
	}
	return n
}

func (m *IpsecRuleResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpsec(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecRuleResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecRuleDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecRuleDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecRuleDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovIpsec(uint64(e))
		}
		n += 1 + sovIpsec(uint64(l)) + l
	}
	return n
}

func (m *IpsecRuleGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecRuleGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSAEncryptRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSAEncryptStatus) Size() (n int) {
	var l int
	_ = l
	if m.IpsecSaHandle != 0 {
		n += 9
	}
	return n
}

func (m *IpsecSAEncryptResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpsec(uint64(m.ApiStatus))
	}
	if m.IpsecSaStatus != nil {
		l = m.IpsecSaStatus.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecSAEncryptResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSAEncryptDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecSAEncryptDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSAEncryptDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovIpsec(uint64(e))
		}
		n += 1 + sovIpsec(uint64(l)) + l
	}
	return n
}

func (m *IpsecSAEncryptGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecSAEncryptGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSAEncryptGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpsec(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecSAEncryptGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSADecryptRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSADecryptStatus) Size() (n int) {
	var l int
	_ = l
	if m.IpsecSaHandle != 0 {
		n += 9
	}
	return n
}

func (m *IpsecSADecryptResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpsec(uint64(m.ApiStatus))
	}
	if m.IpsecSaStatus != nil {
		l = m.IpsecSaStatus.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecSADecryptResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSADecryptDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecSADecryptDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSADecryptDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovIpsec(uint64(e))
		}
		n += 1 + sovIpsec(uint64(l)) + l
	}
	return n
}

func (m *IpsecSADecryptGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecSADecryptGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSADecryptGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpsec(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecSADecryptGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func sovIpsec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIpsec(x uint64) (n int) {
	return sovIpsec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.KeyInfo = &Key_Key{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyLocation", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyInfo = &Key_KeyLocation{v}
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncrypt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncrypt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncrypt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecSAEncryptKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= (IpsecProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationAlgorithm", wireType)
			}
			m.AuthenticationAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthenticationAlgorithm |= (AuthenticationAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthenticationKey == nil {
				m.AuthenticationKey = &Key{}
			}
			if err := m.AuthenticationKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionAlgorithm", wireType)
			}
			m.EncryptionAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptionAlgorithm |= (EncryptionAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncryptionKey == nil {
				m.EncryptionKey = &Key{}
			}
			if err := m.EncryptionKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalGatewayIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalGatewayIp == nil {
				m.LocalGatewayIp = &IPAddress{}
			}
			if err := m.LocalGatewayIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteGatewayIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteGatewayIp == nil {
				m.RemoteGatewayIp = &IPAddress{}
			}
			if err := m.RemoteGatewayIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spi", wireType)
			}
			m.Spi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Spi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatTraversalPort", wireType)
			}
			m.NatTraversalPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NatTraversalPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iv", wireType)
			}
			m.Iv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iv |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecrypt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecrypt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecrypt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecSADecryptKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= (IpsecProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationAlgorithm", wireType)
			}
			m.AuthenticationAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthenticationAlgorithm |= (AuthenticationAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthenticationKey == nil {
				m.AuthenticationKey = &Key{}
			}
			if err := m.AuthenticationKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptionAlgorithm", wireType)
			}
			m.DecryptionAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecryptionAlgorithm |= (EncryptionAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeyDecAlgorithm", wireType)
			}
			m.RekeyDecAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RekeyDecAlgorithm |= (EncryptionAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecryptionKey == nil {
				m.DecryptionKey = &Key{}
			}
			if err := m.DecryptionKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeyAuthenticationKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RekeyAuthenticationKey == nil {
				m.RekeyAuthenticationKey = &Key{}
			}
			if err := m.RekeyAuthenticationKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeyDecryptionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RekeyDecryptionKey == nil {
				m.RekeyDecryptionKey = &Key{}
			}
			if err := m.RekeyDecryptionKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalGatewayIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalGatewayIp == nil {
				m.LocalGatewayIp = &IPAddress{}
			}
			if err := m.LocalGatewayIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteGatewayIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteGatewayIp == nil {
				m.RemoteGatewayIp = &IPAddress{}
			}
			if err := m.RemoteGatewayIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spi", wireType)
			}
			m.Spi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Spi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeyActive", wireType)
			}
			m.RekeyActive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RekeyActive |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeySpi", wireType)
			}
			m.RekeySpi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RekeySpi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleMatchSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleMatchSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleMatchSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleId", wireType)
			}
			m.RuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuleId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Match == nil {
				m.Match = &RuleMatch{}
			}
			if err := m.Match.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncSecurityAssociation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IpsecSAEncrypt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpSecSAInfo = &IpsecRuleMatchSpec_EncSecurityAssociation{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecSecurityAssociation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IpsecSADecrypt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpSecSAInfo = &IpsecRuleMatchSpec_DecSecurityAssociation{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecRuleKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VrfKeyHandle == nil {
				m.VrfKeyHandle = &VrfKeyHandle{}
			}
			if err := m.VrfKeyHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &IpsecRuleMatchSpec{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecRuleSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &IpsecRuleStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecRuleResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecRuleKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecRuleDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIpsec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIpsec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIpsec
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIpsec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecRuleKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecRuleGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecSAEncrypt{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpsecSaHandle", wireType)
			}
			m.IpsecSaHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.IpsecSaHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpsecSaStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpsecSaStatus == nil {
				m.IpsecSaStatus = &IpsecSAEncryptStatus{}
			}
			if err := m.IpsecSaStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecSAEncryptResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecSAEncryptKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecSAEncryptDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIpsec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIpsec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIpsec
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIpsec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecSAEncryptKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecSAEncryptGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &IpsecSAEncrypt{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &IpsecSAEncryptStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecSAEncryptGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecSADecrypt{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpsecSaHandle", wireType)
			}
			m.IpsecSaHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.IpsecSaHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpsecSaStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpsecSaStatus == nil {
				m.IpsecSaStatus = &IpsecSADecryptStatus{}
			}
			if err := m.IpsecSaStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecSADecryptResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecSADecryptKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecSADecryptDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIpsec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIpsec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIpsec
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIpsec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecSADecryptKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecSADecryptGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &IpsecSADecrypt{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &IpsecSADecryptStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecSADecryptGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIpsec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIpsec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIpsec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIpsec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIpsec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIpsec   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ipsec.proto", fileDescriptorIpsec) }

var fileDescriptorIpsec = []byte{
	// 1754 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x59, 0xcb, 0x53, 0xe3, 0xc8,
	0x19, 0xb7, 0xb0, 0x01, 0xf3, 0xf9, 0x31, 0xa2, 0x61, 0x41, 0x63, 0x16, 0xf0, 0x68, 0xb3, 0x53,
	0xec, 0x54, 0xca, 0x64, 0x3d, 0x79, 0x31, 0x35, 0x95, 0x2d, 0x63, 0x1c, 0xec, 0x05, 0x63, 0x56,
	0x66, 0x37, 0xb3, 0x49, 0x6a, 0x55, 0x5a, 0xb9, 0xc1, 0x0a, 0xc6, 0x56, 0x24, 0x41, 0xe2, 0xca,
	0x2d, 0xb5, 0xb9, 0xe4, 0x90, 0x73, 0xfe, 0x81, 0xdc, 0x92, 0x4b, 0xfe, 0x8a, 0x1c, 0x53, 0x95,
	0xfb, 0x54, 0x6a, 0x72, 0xcb, 0x71, 0xee, 0xa9, 0x4a, 0x75, 0xab, 0xf5, 0x96, 0x6c, 0x03, 0x43,
	0x2e, 0x39, 0x4c, 0x8d, 0xa5, 0xef, 0xf7, 0xfd, 0xfa, 0x7b, 0x77, 0xb7, 0x80, 0x9c, 0xa6, 0x9b,
	0x58, 0xad, 0xe8, 0xc6, 0xc8, 0x1a, 0xa1, 0x79, 0xfa, 0x50, 0xca, 0x59, 0x63, 0x1d, 0x9b, 0xf6,
	0xbb, 0x52, 0xf6, 0xb2, 0x6f, 0xff, 0x12, 0x3f, 0x85, 0xf4, 0x11, 0x1e, 0x23, 0x04, 0xe9, 0x4b,
	0x3c, 0x16, 0xb8, 0x32, 0xb7, 0x93, 0x6f, 0xa6, 0x24, 0xf2, 0x80, 0x3e, 0x80, 0xfc, 0x25, 0x1e,
	0xcb, 0x83, 0x91, 0xaa, 0x58, 0xda, 0x68, 0x28, 0xcc, 0x95, 0xb9, 0x9d, 0x42, 0x33, 0x25, 0xe5,
	0x2e, 0xf1, 0xf8, 0x98, 0xbd, 0xdc, 0x07, 0xc8, 0x12, 0x90, 0x36, 0x3c, 0x1f, 0x89, 0x7f, 0x9d,
	0x87, 0x62, 0x8b, 0x2c, 0xd6, 0xad, 0x35, 0x86, 0xaa, 0x31, 0xd6, 0x2d, 0xf4, 0x21, 0x64, 0xae,
	0xb0, 0xa5, 0x50, 0xe2, 0x5c, 0x75, 0xb9, 0x62, 0x1b, 0xd1, 0xf9, 0xfa, 0x17, 0x58, 0xb5, 0xda,
	0xd8, 0x52, 0x24, 0x2a, 0x46, 0x9f, 0x41, 0x81, 0xb0, 0x8c, 0x0c, 0xb9, 0xaf, 0x0c, 0x7b, 0x03,
	0x4c, 0xd7, 0xca, 0x55, 0x37, 0x2a, 0x97, 0xfd, 0x4a, 0x90, 0xf1, 0x08, 0x8f, 0x9b, 0x14, 0xb2,
	0xcf, 0xbf, 0x7d, 0xbd, 0x9d, 0xbf, 0xc1, 0x43, 0x4d, 0xc5, 0x2f, 0xc4, 0x4b, 0x3c, 0x16, 0xa9,
	0x61, 0x1d, 0xc3, 0x16, 0xa3, 0xef, 0x40, 0x96, 0x7a, 0xa8, 0x8e, 0x06, 0x42, 0xba, 0xcc, 0xed,
	0x14, 0xab, 0xab, 0x15, 0x3b, 0x2c, 0x94, 0xf0, 0x94, 0xc9, 0x24, 0x17, 0x85, 0xbe, 0x04, 0x41,
	0xb9, 0xb6, 0xfa, 0x78, 0x68, 0x69, 0xb6, 0x73, 0xb2, 0x32, 0xb8, 0x18, 0x19, 0x9a, 0xd5, 0xbf,
	0x12, 0x32, 0x94, 0x61, 0x8b, 0x31, 0xd4, 0x02, 0xb0, 0x9a, 0x83, 0x92, 0xd6, 0x95, 0x78, 0x01,
	0xda, 0x03, 0x14, 0xa2, 0x26, 0xd1, 0x9e, 0xa7, 0x4e, 0x02, 0x23, 0x3d, 0xc2, 0x63, 0x69, 0x39,
	0x88, 0x22, 0x99, 0x69, 0xc3, 0x2a, 0xb6, 0x5d, 0x0f, 0x5a, 0xb4, 0x40, 0x2d, 0x2a, 0x31, 0xe5,
	0x86, 0x0b, 0xf1, 0xac, 0x59, 0xc1, 0xd1, 0x97, 0xe8, 0x63, 0x28, 0xfa, 0xe8, 0x88, 0x15, 0x8b,
	0x11, 0x2b, 0x0a, 0x1e, 0x82, 0x58, 0xf0, 0x02, 0x78, 0x52, 0x03, 0x03, 0xf9, 0x42, 0xb1, 0xf0,
	0xaf, 0x94, 0xb1, 0xac, 0xe9, 0x42, 0x96, 0x2a, 0xf1, 0x2c, 0x9f, 0xad, 0xd3, 0x5a, 0xaf, 0x67,
	0x60, 0xd3, 0x94, 0x8a, 0x14, 0x79, 0x68, 0x03, 0x5b, 0x3a, 0x7a, 0x09, 0xcb, 0x06, 0xbe, 0x1a,
	0x59, 0xd8, 0xaf, 0xbc, 0x94, 0xa0, 0xfc, 0xc8, 0x86, 0x7a, 0xda, 0x3c, 0xa4, 0x4d, 0x5d, 0x13,
	0x80, 0x14, 0x9e, 0x44, 0x7e, 0xa2, 0x6f, 0x03, 0x1a, 0x2a, 0x96, 0x6c, 0x19, 0xca, 0x0d, 0x36,
	0x4c, 0x65, 0x20, 0xeb, 0x23, 0xc3, 0x12, 0x72, 0x14, 0xc0, 0x0f, 0x15, 0xeb, 0xcc, 0x11, 0x9c,
	0x8e, 0x0c, 0x0b, 0x21, 0xc8, 0x98, 0xca, 0xc0, 0x12, 0xf2, 0x54, 0x4e, 0x7f, 0xa3, 0x22, 0xcc,
	0x69, 0x37, 0x42, 0xa1, 0xcc, 0xed, 0x64, 0xa4, 0x39, 0xed, 0x46, 0xfc, 0x66, 0xd1, 0x2d, 0xda,
	0x03, 0xfc, 0xae, 0x8b, 0x96, 0x31, 0xfe, 0x3f, 0x16, 0x6d, 0x0f, 0xdf, 0xad, 0x68, 0x3d, 0x3d,
	0xcf, 0x92, 0x4f, 0x61, 0xc5, 0xc0, 0x24, 0xd6, 0x3d, 0xac, 0xfa, 0xd8, 0x16, 0xa7, 0xb2, 0x2d,
	0x53, 0xb5, 0x03, 0xac, 0x06, 0x1a, 0xc0, 0x67, 0x1a, 0xf1, 0x28, 0x1b, 0x6d, 0x00, 0x0f, 0x41,
	0xbc, 0x39, 0x00, 0xc1, 0x5e, 0x3e, 0x26, 0x1c, 0x4b, 0x11, 0xe5, 0x35, 0x8a, 0xad, 0x45, 0x62,
	0xf2, 0x12, 0x56, 0x5d, 0x27, 0xfc, 0xcb, 0x43, 0x84, 0x01, 0x39, 0x56, 0x4f, 0x69, 0xc2, 0xdc,
	0x7d, 0x9a, 0x30, 0x7f, 0xcb, 0x26, 0x2c, 0x78, 0x4d, 0xf8, 0x04, 0xf2, 0x2c, 0x1e, 0xaa, 0xa5,
	0xdd, 0x60, 0xa1, 0x48, 0x45, 0x39, 0xdb, 0x6f, 0xfa, 0x0a, 0x6d, 0xc0, 0x92, 0x0d, 0x21, 0xaa,
	0x8f, 0xa8, 0x3c, 0x4b, 0x5f, 0x74, 0x75, 0xcd, 0x6d, 0x4b, 0xde, 0x6b, 0x4b, 0xf1, 0xf7, 0x73,
	0x80, 0x68, 0x8d, 0x4b, 0xd7, 0x03, 0xdc, 0x56, 0x2c, 0xb5, 0xdf, 0xd5, 0xb1, 0x8a, 0xd6, 0x61,
	0xd1, 0xb8, 0x1e, 0x60, 0x59, 0xeb, 0xd1, 0x6e, 0xcc, 0x48, 0x0b, 0xe4, 0xb1, 0xd5, 0x43, 0x4f,
	0x61, 0xfe, 0x8a, 0xa0, 0x58, 0xd3, 0x39, 0x7e, 0xb8, 0xda, 0x92, 0x2d, 0x46, 0x9f, 0x81, 0x80,
	0x87, 0xaa, 0x6c, 0x62, 0xf5, 0xda, 0xd0, 0xac, 0xb1, 0xac, 0x98, 0xe6, 0x48, 0xd5, 0xec, 0x0d,
	0xcd, 0x8e, 0xfc, 0x7b, 0xfe, 0x0e, 0x73, 0xf7, 0x99, 0x66, 0x4a, 0x5a, 0xc3, 0x43, 0xb5, 0xcb,
	0xf4, 0x6a, 0x9e, 0x1a, 0xa1, 0x24, 0x75, 0x18, 0x4b, 0x99, 0x8b, 0xa3, 0x64, 0x99, 0x24, 0x94,
	0x3d, 0x1c, 0x47, 0xb9, 0x5f, 0x80, 0x5c, 0x4b, 0xef, 0x12, 0x6c, 0x8b, 0x6c, 0xa4, 0xff, 0xe1,
	0xa0, 0xe0, 0x06, 0x83, 0xc6, 0x61, 0xc6, 0x91, 0x74, 0x1c, 0x3f, 0x92, 0xd6, 0xdc, 0x91, 0x44,
	0x08, 0x67, 0x9e, 0x46, 0x3f, 0x86, 0xe2, 0x8d, 0x71, 0x4e, 0x8a, 0xd4, 0xa1, 0x4b, 0xb3, 0x60,
	0x5f, 0xf6, 0x2b, 0x5f, 0x18, 0xe7, 0x1e, 0x51, 0xf1, 0xed, 0xeb, 0x6d, 0x60, 0x44, 0x06, 0x3e,
	0x97, 0xf2, 0x37, 0x3e, 0x29, 0xda, 0x85, 0x79, 0x92, 0x35, 0x53, 0xc8, 0x94, 0xd3, 0x3b, 0xb9,
	0xea, 0x63, 0x7f, 0x74, 0x02, 0xe9, 0x96, 0x6c, 0x9c, 0xd8, 0x80, 0x15, 0x57, 0x28, 0xe1, 0x5f,
	0x5e, 0x63, 0xd3, 0x6a, 0x9b, 0x17, 0xa8, 0x02, 0x8b, 0x86, 0xfd, 0x24, 0x70, 0x94, 0x69, 0x35,
	0xcc, 0x44, 0x49, 0x1c, 0x90, 0xf8, 0x11, 0x3c, 0xf2, 0x24, 0x96, 0x62, 0x5d, 0x9b, 0x68, 0x0d,
	0x16, 0x98, 0x2b, 0x24, 0x92, 0x0b, 0x12, 0x7b, 0x12, 0xbf, 0xe1, 0x60, 0xd9, 0xb7, 0xa4, 0xa9,
	0x8f, 0x86, 0x26, 0x46, 0x9f, 0x00, 0x28, 0xba, 0x26, 0x9b, 0x54, 0x97, 0x6a, 0x14, 0xdd, 0x4a,
	0xab, 0xe9, 0x9a, 0xcd, 0xb9, 0x5f, 0xfc, 0xf7, 0xeb, 0x6d, 0x1f, 0x4e, 0x5a, 0x52, 0x1c, 0x11,
	0xaa, 0xc0, 0x02, 0x53, 0x76, 0x12, 0x11, 0x36, 0xd8, 0x56, 0x61, 0x28, 0xf1, 0x18, 0x56, 0x23,
	0x56, 0x10, 0xcf, 0xbf, 0x0b, 0x59, 0x83, 0x3d, 0x32, 0xd7, 0x85, 0x30, 0x93, 0x03, 0x97, 0x5c,
	0xa4, 0xf8, 0x1b, 0x58, 0x73, 0xc5, 0x07, 0x78, 0x80, 0x2d, 0x27, 0x98, 0xb3, 0x96, 0xd3, 0x8b,
	0x5b, 0x95, 0x53, 0xa0, 0x78, 0xc4, 0x33, 0x78, 0x1c, 0xbf, 0x38, 0xf1, 0xe7, 0x07, 0xe1, 0x4c,
	0x6e, 0x86, 0xdd, 0x09, 0xa8, 0x78, 0x29, 0x6d, 0x43, 0x29, 0x02, 0xf1, 0xc2, 0xb4, 0x1b, 0xca,
	0x57, 0x3a, 0x2e, 0x5f, 0xbe, 0xfc, 0x88, 0xbf, 0xf6, 0x15, 0xda, 0x21, 0xb6, 0xfe, 0x87, 0xe1,
	0x39, 0xf1, 0xe5, 0xc6, 0x5b, 0xd9, 0xce, 0x75, 0x28, 0x36, 0xa5, 0x70, 0x6c, 0x3c, 0xbc, 0x17,
	0x98, 0x23, 0x10, 0x82, 0x03, 0xcc, 0xc7, 0xb8, 0x1b, 0x66, 0x8c, 0x1f, 0x79, 0x1e, 0xd9, 0x8f,
	0x58, 0x19, 0xba, 0x22, 0x56, 0xce, 0x4f, 0xe1, 0x11, 0x55, 0x94, 0x4d, 0x45, 0x0e, 0xb4, 0x51,
	0x81, 0xbe, 0xee, 0x2a, 0xcc, 0xb9, 0x3f, 0x70, 0xcc, 0x3b, 0x9f, 0x35, 0xac, 0xa5, 0x76, 0x67,
	0x69, 0x29, 0x7f, 0x0b, 0xd5, 0x7d, 0x6b, 0x06, 0x7a, 0x69, 0x23, 0xd6, 0x09, 0x46, 0xe0, 0x18,
	0xc4, 0xf2, 0xfc, 0x05, 0x2b, 0xc6, 0x88, 0x3d, 0x24, 0x3c, 0x7b, 0x91, 0xe6, 0xda, 0x8c, 0x8f,
	0x4f, 0xb4, 0xc3, 0x7e, 0xc7, 0xc1, 0x46, 0x10, 0x74, 0xa7, 0x3e, 0xfb, 0xe4, 0xf6, 0xd7, 0x9f,
	0x60, 0x35, 0x7d, 0x05, 0x5b, 0x13, 0xcc, 0x20, 0x4e, 0xbe, 0x0c, 0xd7, 0x80, 0x18, 0xeb, 0x63,
	0x42, 0xdb, 0x49, 0xb0, 0x1d, 0x8f, 0xbb, 0x47, 0xef, 0xfd, 0x96, 0x0b, 0x97, 0xec, 0xed, 0x3b,
	0xf0, 0xde, 0x81, 0x7b, 0x15, 0xce, 0x5f, 0xb0, 0x17, 0xf7, 0xc2, 0x51, 0xdb, 0x8e, 0x8d, 0x5a,
	0x5c, 0x43, 0xfe, 0x99, 0x0b, 0xd7, 0x1c, 0x45, 0xdd, 0xb5, 0x0d, 0x3e, 0x82, 0x8c, 0xa9, 0x63,
	0x95, 0x39, 0x98, 0xd0, 0xc0, 0x14, 0x82, 0x9e, 0xbb, 0x9b, 0x4e, 0x7a, 0x7a, 0xa3, 0x38, 0x3b,
	0xcf, 0xcf, 0xe1, 0xfd, 0x44, 0x6b, 0xed, 0xfa, 0x09, 0x37, 0x49, 0x39, 0x39, 0x14, 0x91, 0x3e,
	0xf1, 0xa6, 0x13, 0x3b, 0x0b, 0xdd, 0x62, 0x3a, 0x39, 0x1a, 0x31, 0xd3, 0x89, 0x89, 0xee, 0x3e,
	0x9d, 0x5c, 0x6b, 0x1e, 0x7a, 0x3a, 0x05, 0x2c, 0x4d, 0x9e, 0x4e, 0x21, 0x7b, 0x66, 0x9a, 0x4e,
	0x21, 0x9d, 0xf8, 0xe9, 0xc4, 0x40, 0x0f, 0x35, 0x9d, 0xc2, 0xf7, 0xdc, 0xa4, 0xe9, 0x14, 0x67,
	0xc6, 0x2c, 0xd3, 0x29, 0x4e, 0x2f, 0x6e, 0x3a, 0x85, 0x70, 0xef, 0x66, 0x3a, 0x31, 0xd2, 0x07,
	0x99, 0x4e, 0x93, 0x03, 0xf7, 0x2a, 0x9c, 0xbf, 0xdb, 0x4d, 0xa7, 0x88, 0x52, 0xec, 0x74, 0xf2,
	0xa3, 0x1e, 0x64, 0x3a, 0x39, 0x05, 0x3a, 0xd3, 0x74, 0x0a, 0x36, 0x4a, 0x74, 0x3a, 0x45, 0xad,
	0x9d, 0x69, 0x3a, 0x45, 0xd5, 0xbc, 0x3e, 0x79, 0xf6, 0x13, 0x76, 0xdb, 0x72, 0x3e, 0xaf, 0xa0,
	0x75, 0x58, 0x69, 0x9d, 0x76, 0x1b, 0x75, 0xf9, 0x54, 0xea, 0x9c, 0x75, 0xea, 0x9d, 0x63, 0xf9,
	0xa4, 0x73, 0xd2, 0xe0, 0x53, 0xe8, 0x3d, 0x58, 0x0e, 0x09, 0x6a, 0x4d, 0x9e, 0x43, 0x6b, 0x80,
	0x42, 0xaf, 0x1b, 0xdd, 0x53, 0x7e, 0xee, 0xd9, 0x9f, 0xd2, 0xb0, 0x12, 0xf3, 0x59, 0x02, 0x6d,
	0xc2, 0xe3, 0xc6, 0x49, 0x5d, 0xfa, 0xf2, 0xf4, 0xac, 0xd5, 0x39, 0x91, 0x6b, 0xc7, 0x87, 0x1d,
	0xa9, 0x75, 0xd6, 0x6c, 0x3b, 0xab, 0x7c, 0x0b, 0xca, 0xb1, 0xe2, 0x5a, 0xa3, 0x2b, 0x1f, 0xd6,
	0xdb, 0xf2, 0xc7, 0xd5, 0x1f, 0xf2, 0xdc, 0x54, 0x54, 0xf5, 0x7b, 0xdf, 0xe7, 0xe7, 0x26, 0xa2,
	0xea, 0x8c, 0x2b, 0x3d, 0x1d, 0xb5, 0x57, 0xe5, 0x33, 0x53, 0x51, 0x64, 0xc5, 0xf9, 0xc9, 0xa8,
	0xfd, 0x3a, 0x5d, 0x71, 0x61, 0x3a, 0x6a, 0xaf, 0xca, 0x2f, 0x4e, 0x45, 0x91, 0x15, 0xb3, 0x89,
	0xe1, 0x3c, 0x68, 0x74, 0x9f, 0xf3, 0x4b, 0xa8, 0x0c, 0xef, 0xc7, 0x8a, 0xeb, 0xcd, 0x1a, 0xf9,
	0xc7, 0xc3, 0xb3, 0xbf, 0x70, 0xb0, 0x9e, 0xf0, 0x79, 0x0c, 0x3d, 0x81, 0xcd, 0xda, 0xe7, 0x67,
	0xcd, 0xc6, 0xc9, 0x59, 0xab, 0x5e, 0x8b, 0xcf, 0x57, 0x09, 0xd6, 0xc2, 0x10, 0x3b, 0x07, 0x3c,
	0x97, 0x20, 0xab, 0xd7, 0xdb, 0xfc, 0x1c, 0x29, 0xb3, 0x90, 0xac, 0xd9, 0xae, 0xd5, 0xf9, 0x34,
	0xda, 0x82, 0x52, 0x9c, 0xd2, 0x7e, 0x5d, 0xee, 0x36, 0x6b, 0x7c, 0xa6, 0xfa, 0x8f, 0x2c, 0xcc,
	0xd3, 0x8a, 0x45, 0xc7, 0xbe, 0x2b, 0x6e, 0xdd, 0xc0, 0x8a, 0x85, 0x51, 0x29, 0x7a, 0x33, 0x74,
	0x26, 0x46, 0x69, 0x23, 0xe9, 0xd6, 0xd8, 0x36, 0x2f, 0xc4, 0x54, 0x80, 0xed, 0x73, 0xbd, 0x77,
	0x4f, 0xb6, 0x57, 0x3e, 0x36, 0x7b, 0x22, 0xa3, 0xf2, 0xc4, 0x6b, 0x1e, 0xe1, 0x7c, 0x92, 0x84,
	0xf0, 0x33, 0x9f, 0x40, 0xde, 0x7f, 0x19, 0x42, 0x9b, 0xc9, 0x37, 0x24, 0xc2, 0x39, 0x59, 0x2c,
	0xa6, 0xd0, 0xcf, 0xc2, 0xf7, 0x1d, 0x16, 0xca, 0xed, 0x84, 0x7b, 0x80, 0xcb, 0x5c, 0x9e, 0x78,
	0x51, 0x48, 0x20, 0x67, 0x91, 0x7d, 0x27, 0xe4, 0x17, 0x61, 0x72, 0x16, 0xe8, 0x0f, 0xa7, 0x9f,
	0xee, 0xc9, 0x12, 0x4f, 0x27, 0xc2, 0xfc, 0x0b, 0x7d, 0xc5, 0xbe, 0x8f, 0xf8, 0x0f, 0x7a, 0x48,
	0x9c, 0x72, 0x1a, 0x26, 0x4b, 0x7c, 0x30, 0xed, 0x98, 0x18, 0x8e, 0x12, 0x1b, 0xd5, 0xf1, 0x29,
	0x88, 0x1c, 0x1f, 0x4b, 0xe5, 0x89, 0xa7, 0xa1, 0x04, 0xf2, 0xf8, 0x14, 0xdc, 0x8d, 0xfc, 0x22,
	0x4c, 0x1e, 0x9f, 0x82, 0x84, 0xa3, 0x4f, 0x38, 0x05, 0x49, 0x27, 0x98, 0x40, 0x0a, 0xbc, 0xdd,
	0x0c, 0x89, 0x53, 0xb6, 0xfc, 0x98, 0x14, 0xc4, 0x6e, 0xa1, 0x62, 0x6a, 0xbf, 0xf4, 0xb7, 0x37,
	0x5b, 0xdc, 0xdf, 0xdf, 0x6c, 0x71, 0xff, 0x7c, 0xb3, 0xc5, 0xfd, 0xf1, 0x5f, 0x5b, 0xa9, 0x9f,
	0x66, 0xfb, 0xca, 0x80, 0xfe, 0xa5, 0xe1, 0xeb, 0x05, 0xfa, 0xdf, 0xf3, 0xff, 0x06, 0x00, 0x00,
	0xff, 0xff, 0x72, 0xb2, 0xd1, 0x4f, 0x5a, 0x1c, 0x00, 0x00,
}
