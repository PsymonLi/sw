// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ipsec.proto

package halproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// IPSec protocols
type IpsecProtocol int32

const (
	IpsecProtocol_IPSEC_PROTOCOL_NONE IpsecProtocol = 0
	IpsecProtocol_IPSEC_PROTOCOL_AH   IpsecProtocol = 1
	IpsecProtocol_IPSEC_PROTOCOL_ESP  IpsecProtocol = 2
)

var IpsecProtocol_name = map[int32]string{
	0: "IPSEC_PROTOCOL_NONE",
	1: "IPSEC_PROTOCOL_AH",
	2: "IPSEC_PROTOCOL_ESP",
}
var IpsecProtocol_value = map[string]int32{
	"IPSEC_PROTOCOL_NONE": 0,
	"IPSEC_PROTOCOL_AH":   1,
	"IPSEC_PROTOCOL_ESP":  2,
}

func (x IpsecProtocol) String() string {
	return proto.EnumName(IpsecProtocol_name, int32(x))
}
func (IpsecProtocol) EnumDescriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{0} }

// Encryption algorithms
type EncryptionAlgorithm int32

const (
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE        EncryptionAlgorithm = 0
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_GCM_128 EncryptionAlgorithm = 1
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_GCM_256 EncryptionAlgorithm = 2
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CCM_128 EncryptionAlgorithm = 3
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CCM_192 EncryptionAlgorithm = 4
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CCM_256 EncryptionAlgorithm = 5
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CBC_128 EncryptionAlgorithm = 6
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CBC_192 EncryptionAlgorithm = 7
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CBC_256 EncryptionAlgorithm = 8
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_DES3        EncryptionAlgorithm = 9
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_CHA_CHA     EncryptionAlgorithm = 10
)

var EncryptionAlgorithm_name = map[int32]string{
	0:  "ENCRYPTION_ALGORITHM_NONE",
	1:  "ENCRYPTION_ALGORITHM_AES_GCM_128",
	2:  "ENCRYPTION_ALGORITHM_AES_GCM_256",
	3:  "ENCRYPTION_ALGORITHM_AES_CCM_128",
	4:  "ENCRYPTION_ALGORITHM_AES_CCM_192",
	5:  "ENCRYPTION_ALGORITHM_AES_CCM_256",
	6:  "ENCRYPTION_ALGORITHM_AES_CBC_128",
	7:  "ENCRYPTION_ALGORITHM_AES_CBC_192",
	8:  "ENCRYPTION_ALGORITHM_AES_CBC_256",
	9:  "ENCRYPTION_ALGORITHM_DES3",
	10: "ENCRYPTION_ALGORITHM_CHA_CHA",
}
var EncryptionAlgorithm_value = map[string]int32{
	"ENCRYPTION_ALGORITHM_NONE":        0,
	"ENCRYPTION_ALGORITHM_AES_GCM_128": 1,
	"ENCRYPTION_ALGORITHM_AES_GCM_256": 2,
	"ENCRYPTION_ALGORITHM_AES_CCM_128": 3,
	"ENCRYPTION_ALGORITHM_AES_CCM_192": 4,
	"ENCRYPTION_ALGORITHM_AES_CCM_256": 5,
	"ENCRYPTION_ALGORITHM_AES_CBC_128": 6,
	"ENCRYPTION_ALGORITHM_AES_CBC_192": 7,
	"ENCRYPTION_ALGORITHM_AES_CBC_256": 8,
	"ENCRYPTION_ALGORITHM_DES3":        9,
	"ENCRYPTION_ALGORITHM_CHA_CHA":     10,
}

func (x EncryptionAlgorithm) String() string {
	return proto.EnumName(EncryptionAlgorithm_name, int32(x))
}
func (EncryptionAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{1} }

// Authentication algorithms
type AuthenticationAlgorithm int32

const (
	AuthenticationAlgorithm_AUTHENTICATION_ALGORITHM_NONE AuthenticationAlgorithm = 0
	AuthenticationAlgorithm_AUTHENTICATION_AES_GCM        AuthenticationAlgorithm = 1
	AuthenticationAlgorithm_AUTHENTICATION_AES_CCM        AuthenticationAlgorithm = 2
	AuthenticationAlgorithm_AUTHENTICATION_HMAC           AuthenticationAlgorithm = 3
	AuthenticationAlgorithm_AUTHENTICATION_AES_CBC_SHA    AuthenticationAlgorithm = 4
)

var AuthenticationAlgorithm_name = map[int32]string{
	0: "AUTHENTICATION_ALGORITHM_NONE",
	1: "AUTHENTICATION_AES_GCM",
	2: "AUTHENTICATION_AES_CCM",
	3: "AUTHENTICATION_HMAC",
	4: "AUTHENTICATION_AES_CBC_SHA",
}
var AuthenticationAlgorithm_value = map[string]int32{
	"AUTHENTICATION_ALGORITHM_NONE": 0,
	"AUTHENTICATION_AES_GCM":        1,
	"AUTHENTICATION_AES_CCM":        2,
	"AUTHENTICATION_HMAC":           3,
	"AUTHENTICATION_AES_CBC_SHA":    4,
}

func (x AuthenticationAlgorithm) String() string {
	return proto.EnumName(AuthenticationAlgorithm_name, int32(x))
}
func (AuthenticationAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{2} }

type IpsecSAActionType int32

const (
	IpsecSAActionType_IPSEC_SA_ACTION_TYPE_NONE    IpsecSAActionType = 0
	IpsecSAActionType_IPSEC_SA_ACTION_TYPE_ENCRYPT IpsecSAActionType = 1
	IpsecSAActionType_IPSEC_SA_ACTION_TYPE_DECRYPT IpsecSAActionType = 2
	IpsecSAActionType_IPSEC_SA_ACTION_TYPE_DROP    IpsecSAActionType = 3
)

var IpsecSAActionType_name = map[int32]string{
	0: "IPSEC_SA_ACTION_TYPE_NONE",
	1: "IPSEC_SA_ACTION_TYPE_ENCRYPT",
	2: "IPSEC_SA_ACTION_TYPE_DECRYPT",
	3: "IPSEC_SA_ACTION_TYPE_DROP",
}
var IpsecSAActionType_value = map[string]int32{
	"IPSEC_SA_ACTION_TYPE_NONE":    0,
	"IPSEC_SA_ACTION_TYPE_ENCRYPT": 1,
	"IPSEC_SA_ACTION_TYPE_DECRYPT": 2,
	"IPSEC_SA_ACTION_TYPE_DROP":    3,
}

func (x IpsecSAActionType) String() string {
	return proto.EnumName(IpsecSAActionType_name, int32(x))
}
func (IpsecSAActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{3} }

// Key object
type Key struct {
	// Types that are valid to be assigned to KeyInfo:
	//	*Key_Key
	//	*Key_KeyLocation
	KeyInfo isKey_KeyInfo `protobuf_oneof:"key_info"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{0} }

type isKey_KeyInfo interface {
	isKey_KeyInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Key_Key struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3,oneof"`
}
type Key_KeyLocation struct {
	KeyLocation uint32 `protobuf:"varint,2,opt,name=key_location,json=keyLocation,proto3,oneof"`
}

func (*Key_Key) isKey_KeyInfo()         {}
func (*Key_KeyLocation) isKey_KeyInfo() {}

func (m *Key) GetKeyInfo() isKey_KeyInfo {
	if m != nil {
		return m.KeyInfo
	}
	return nil
}

func (m *Key) GetKey() []byte {
	if x, ok := m.GetKeyInfo().(*Key_Key); ok {
		return x.Key
	}
	return nil
}

func (m *Key) GetKeyLocation() uint32 {
	if x, ok := m.GetKeyInfo().(*Key_KeyLocation); ok {
		return x.KeyLocation
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Key) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Key_OneofMarshaler, _Key_OneofUnmarshaler, _Key_OneofSizer, []interface{}{
		(*Key_Key)(nil),
		(*Key_KeyLocation)(nil),
	}
}

func _Key_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Key)
	// key_info
	switch x := m.KeyInfo.(type) {
	case *Key_Key:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Key)
	case *Key_KeyLocation:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.KeyLocation))
	case nil:
	default:
		return fmt.Errorf("Key.KeyInfo has unexpected type %T", x)
	}
	return nil
}

func _Key_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Key)
	switch tag {
	case 1: // key_info.key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.KeyInfo = &Key_Key{x}
		return true, err
	case 2: // key_info.key_location
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyInfo = &Key_KeyLocation{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Key_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Key)
	// key_info
	switch x := m.KeyInfo.(type) {
	case *Key_Key:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Key)))
		n += len(x.Key)
	case *Key_KeyLocation:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.KeyLocation))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// IPSec security association object
type IpsecSAEncrypt struct {
	KeyOrHandle             *IpsecSAEncryptKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
	Protocol                IpsecProtocol            `protobuf:"varint,2,opt,name=protocol,proto3,enum=ipsec.IpsecProtocol" json:"protocol,omitempty"`
	AuthenticationAlgorithm AuthenticationAlgorithm  `protobuf:"varint,3,opt,name=authentication_algorithm,json=authenticationAlgorithm,proto3,enum=ipsec.AuthenticationAlgorithm" json:"authentication_algorithm,omitempty"`
	AuthenticationKey       *Key                     `protobuf:"bytes,4,opt,name=authentication_key,json=authenticationKey" json:"authentication_key,omitempty"`
	EncryptionAlgorithm     EncryptionAlgorithm      `protobuf:"varint,5,opt,name=encryption_algorithm,json=encryptionAlgorithm,proto3,enum=ipsec.EncryptionAlgorithm" json:"encryption_algorithm,omitempty"`
	EncryptionKey           *Key                     `protobuf:"bytes,6,opt,name=encryption_key,json=encryptionKey" json:"encryption_key,omitempty"`
	LocalGatewayIp          *IPAddress               `protobuf:"bytes,7,opt,name=local_gateway_ip,json=localGatewayIp" json:"local_gateway_ip,omitempty"`
	RemoteGatewayIp         *IPAddress               `protobuf:"bytes,8,opt,name=remote_gateway_ip,json=remoteGatewayIp" json:"remote_gateway_ip,omitempty"`
	Spi                     uint32                   `protobuf:"varint,9,opt,name=spi,proto3" json:"spi,omitempty"`
	NatTraversalPort        uint32                   `protobuf:"varint,10,opt,name=nat_traversal_port,json=natTraversalPort,proto3" json:"nat_traversal_port,omitempty"`
	Salt                    uint32                   `protobuf:"varint,11,opt,name=salt,proto3" json:"salt,omitempty"`
	Iv                      uint64                   `protobuf:"varint,12,opt,name=iv,proto3" json:"iv,omitempty"`
	TepVrf                  *VrfKeyHandle            `protobuf:"bytes,13,opt,name=tep_vrf,json=tepVrf" json:"tep_vrf,omitempty"`
}

func (m *IpsecSAEncrypt) Reset()                    { *m = IpsecSAEncrypt{} }
func (m *IpsecSAEncrypt) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncrypt) ProtoMessage()               {}
func (*IpsecSAEncrypt) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{1} }

func (m *IpsecSAEncrypt) GetKeyOrHandle() *IpsecSAEncryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecSAEncrypt) GetProtocol() IpsecProtocol {
	if m != nil {
		return m.Protocol
	}
	return IpsecProtocol_IPSEC_PROTOCOL_NONE
}

func (m *IpsecSAEncrypt) GetAuthenticationAlgorithm() AuthenticationAlgorithm {
	if m != nil {
		return m.AuthenticationAlgorithm
	}
	return AuthenticationAlgorithm_AUTHENTICATION_ALGORITHM_NONE
}

func (m *IpsecSAEncrypt) GetAuthenticationKey() *Key {
	if m != nil {
		return m.AuthenticationKey
	}
	return nil
}

func (m *IpsecSAEncrypt) GetEncryptionAlgorithm() EncryptionAlgorithm {
	if m != nil {
		return m.EncryptionAlgorithm
	}
	return EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE
}

func (m *IpsecSAEncrypt) GetEncryptionKey() *Key {
	if m != nil {
		return m.EncryptionKey
	}
	return nil
}

func (m *IpsecSAEncrypt) GetLocalGatewayIp() *IPAddress {
	if m != nil {
		return m.LocalGatewayIp
	}
	return nil
}

func (m *IpsecSAEncrypt) GetRemoteGatewayIp() *IPAddress {
	if m != nil {
		return m.RemoteGatewayIp
	}
	return nil
}

func (m *IpsecSAEncrypt) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

func (m *IpsecSAEncrypt) GetNatTraversalPort() uint32 {
	if m != nil {
		return m.NatTraversalPort
	}
	return 0
}

func (m *IpsecSAEncrypt) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *IpsecSAEncrypt) GetIv() uint64 {
	if m != nil {
		return m.Iv
	}
	return 0
}

func (m *IpsecSAEncrypt) GetTepVrf() *VrfKeyHandle {
	if m != nil {
		return m.TepVrf
	}
	return nil
}

// IPSec security association object
type IpsecSADecrypt struct {
	KeyOrHandle             *IpsecSADecryptKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
	Protocol                IpsecProtocol            `protobuf:"varint,2,opt,name=protocol,proto3,enum=ipsec.IpsecProtocol" json:"protocol,omitempty"`
	AuthenticationAlgorithm AuthenticationAlgorithm  `protobuf:"varint,3,opt,name=authentication_algorithm,json=authenticationAlgorithm,proto3,enum=ipsec.AuthenticationAlgorithm" json:"authentication_algorithm,omitempty"`
	AuthenticationKey       *Key                     `protobuf:"bytes,4,opt,name=authentication_key,json=authenticationKey" json:"authentication_key,omitempty"`
	DecryptionAlgorithm     EncryptionAlgorithm      `protobuf:"varint,5,opt,name=decryption_algorithm,json=decryptionAlgorithm,proto3,enum=ipsec.EncryptionAlgorithm" json:"decryption_algorithm,omitempty"`
	RekeyDecAlgorithm       EncryptionAlgorithm      `protobuf:"varint,6,opt,name=rekey_dec_algorithm,json=rekeyDecAlgorithm,proto3,enum=ipsec.EncryptionAlgorithm" json:"rekey_dec_algorithm,omitempty"`
	DecryptionKey           *Key                     `protobuf:"bytes,7,opt,name=decryption_key,json=decryptionKey" json:"decryption_key,omitempty"`
	RekeyAuthenticationKey  *Key                     `protobuf:"bytes,8,opt,name=rekey_authentication_key,json=rekeyAuthenticationKey" json:"rekey_authentication_key,omitempty"`
	RekeyDecryptionKey      *Key                     `protobuf:"bytes,9,opt,name=rekey_decryption_key,json=rekeyDecryptionKey" json:"rekey_decryption_key,omitempty"`
	Spi                     uint32                   `protobuf:"varint,10,opt,name=spi,proto3" json:"spi,omitempty"`
	RekeyActive             uint32                   `protobuf:"varint,11,opt,name=rekey_active,json=rekeyActive,proto3" json:"rekey_active,omitempty"`
	RekeySpi                uint32                   `protobuf:"varint,12,opt,name=rekey_spi,json=rekeySpi,proto3" json:"rekey_spi,omitempty"`
	Salt                    uint32                   `protobuf:"varint,13,opt,name=salt,proto3" json:"salt,omitempty"`
	TepVrf                  *VrfKeyHandle            `protobuf:"bytes,14,opt,name=tep_vrf,json=tepVrf" json:"tep_vrf,omitempty"`
}

func (m *IpsecSADecrypt) Reset()                    { *m = IpsecSADecrypt{} }
func (m *IpsecSADecrypt) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecrypt) ProtoMessage()               {}
func (*IpsecSADecrypt) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{2} }

func (m *IpsecSADecrypt) GetKeyOrHandle() *IpsecSADecryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecSADecrypt) GetProtocol() IpsecProtocol {
	if m != nil {
		return m.Protocol
	}
	return IpsecProtocol_IPSEC_PROTOCOL_NONE
}

func (m *IpsecSADecrypt) GetAuthenticationAlgorithm() AuthenticationAlgorithm {
	if m != nil {
		return m.AuthenticationAlgorithm
	}
	return AuthenticationAlgorithm_AUTHENTICATION_ALGORITHM_NONE
}

func (m *IpsecSADecrypt) GetAuthenticationKey() *Key {
	if m != nil {
		return m.AuthenticationKey
	}
	return nil
}

func (m *IpsecSADecrypt) GetDecryptionAlgorithm() EncryptionAlgorithm {
	if m != nil {
		return m.DecryptionAlgorithm
	}
	return EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE
}

func (m *IpsecSADecrypt) GetRekeyDecAlgorithm() EncryptionAlgorithm {
	if m != nil {
		return m.RekeyDecAlgorithm
	}
	return EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE
}

func (m *IpsecSADecrypt) GetDecryptionKey() *Key {
	if m != nil {
		return m.DecryptionKey
	}
	return nil
}

func (m *IpsecSADecrypt) GetRekeyAuthenticationKey() *Key {
	if m != nil {
		return m.RekeyAuthenticationKey
	}
	return nil
}

func (m *IpsecSADecrypt) GetRekeyDecryptionKey() *Key {
	if m != nil {
		return m.RekeyDecryptionKey
	}
	return nil
}

func (m *IpsecSADecrypt) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

func (m *IpsecSADecrypt) GetRekeyActive() uint32 {
	if m != nil {
		return m.RekeyActive
	}
	return 0
}

func (m *IpsecSADecrypt) GetRekeySpi() uint32 {
	if m != nil {
		return m.RekeySpi
	}
	return 0
}

func (m *IpsecSADecrypt) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *IpsecSADecrypt) GetTepVrf() *VrfKeyHandle {
	if m != nil {
		return m.TepVrf
	}
	return nil
}

type IPSecSAEncryptGetSpec struct {
	KeyOrHandle             *IpsecSAEncryptKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
	Protocol                IpsecProtocol            `protobuf:"varint,2,opt,name=protocol,proto3,enum=ipsec.IpsecProtocol" json:"protocol,omitempty"`
	AuthenticationAlgorithm AuthenticationAlgorithm  `protobuf:"varint,3,opt,name=authentication_algorithm,json=authenticationAlgorithm,proto3,enum=ipsec.AuthenticationAlgorithm" json:"authentication_algorithm,omitempty"`
	AuthenticationKey       *Key                     `protobuf:"bytes,4,opt,name=authentication_key,json=authenticationKey" json:"authentication_key,omitempty"`
	EncryptionAlgorithm     EncryptionAlgorithm      `protobuf:"varint,5,opt,name=encryption_algorithm,json=encryptionAlgorithm,proto3,enum=ipsec.EncryptionAlgorithm" json:"encryption_algorithm,omitempty"`
	EncryptionKey           *Key                     `protobuf:"bytes,6,opt,name=encryption_key,json=encryptionKey" json:"encryption_key,omitempty"`
	LocalGatewayIp          *IPAddress               `protobuf:"bytes,7,opt,name=local_gateway_ip,json=localGatewayIp" json:"local_gateway_ip,omitempty"`
	RemoteGatewayIp         *IPAddress               `protobuf:"bytes,8,opt,name=remote_gateway_ip,json=remoteGatewayIp" json:"remote_gateway_ip,omitempty"`
	Spi                     uint32                   `protobuf:"varint,9,opt,name=spi,proto3" json:"spi,omitempty"`
	NatTraversalPort        uint32                   `protobuf:"varint,10,opt,name=nat_traversal_port,json=natTraversalPort,proto3" json:"nat_traversal_port,omitempty"`
	Salt                    uint32                   `protobuf:"varint,11,opt,name=salt,proto3" json:"salt,omitempty"`
	Iv                      uint64                   `protobuf:"varint,12,opt,name=iv,proto3" json:"iv,omitempty"`
	KeyIndex                uint32                   `protobuf:"varint,13,opt,name=key_index,json=keyIndex,proto3" json:"key_index,omitempty"`
	IvSize                  uint32                   `protobuf:"varint,14,opt,name=iv_size,json=ivSize,proto3" json:"iv_size,omitempty"`
	IcvSize                 uint32                   `protobuf:"varint,15,opt,name=icv_size,json=icvSize,proto3" json:"icv_size,omitempty"`
	SeqNo                   uint64                   `protobuf:"varint,16,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	TotalPkts               uint64                   `protobuf:"varint,17,opt,name=total_pkts,json=totalPkts,proto3" json:"total_pkts,omitempty"`
	TotalBytes              uint64                   `protobuf:"varint,18,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	TotalDrops              uint64                   `protobuf:"varint,19,opt,name=total_drops,json=totalDrops,proto3" json:"total_drops,omitempty"`
	TotalRxPkts             uint64                   `protobuf:"varint,20,opt,name=total_rx_pkts,json=totalRxPkts,proto3" json:"total_rx_pkts,omitempty"`
	TotalRxBytes            uint64                   `protobuf:"varint,21,opt,name=total_rx_bytes,json=totalRxBytes,proto3" json:"total_rx_bytes,omitempty"`
	TotalRxDrops            uint64                   `protobuf:"varint,22,opt,name=total_rx_drops,json=totalRxDrops,proto3" json:"total_rx_drops,omitempty"`
	TepVrf                  *VrfKeyHandle            `protobuf:"bytes,23,opt,name=tep_vrf,json=tepVrf" json:"tep_vrf,omitempty"`
}

func (m *IPSecSAEncryptGetSpec) Reset()                    { *m = IPSecSAEncryptGetSpec{} }
func (m *IPSecSAEncryptGetSpec) String() string            { return proto.CompactTextString(m) }
func (*IPSecSAEncryptGetSpec) ProtoMessage()               {}
func (*IPSecSAEncryptGetSpec) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{3} }

func (m *IPSecSAEncryptGetSpec) GetKeyOrHandle() *IpsecSAEncryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IPSecSAEncryptGetSpec) GetProtocol() IpsecProtocol {
	if m != nil {
		return m.Protocol
	}
	return IpsecProtocol_IPSEC_PROTOCOL_NONE
}

func (m *IPSecSAEncryptGetSpec) GetAuthenticationAlgorithm() AuthenticationAlgorithm {
	if m != nil {
		return m.AuthenticationAlgorithm
	}
	return AuthenticationAlgorithm_AUTHENTICATION_ALGORITHM_NONE
}

func (m *IPSecSAEncryptGetSpec) GetAuthenticationKey() *Key {
	if m != nil {
		return m.AuthenticationKey
	}
	return nil
}

func (m *IPSecSAEncryptGetSpec) GetEncryptionAlgorithm() EncryptionAlgorithm {
	if m != nil {
		return m.EncryptionAlgorithm
	}
	return EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE
}

func (m *IPSecSAEncryptGetSpec) GetEncryptionKey() *Key {
	if m != nil {
		return m.EncryptionKey
	}
	return nil
}

func (m *IPSecSAEncryptGetSpec) GetLocalGatewayIp() *IPAddress {
	if m != nil {
		return m.LocalGatewayIp
	}
	return nil
}

func (m *IPSecSAEncryptGetSpec) GetRemoteGatewayIp() *IPAddress {
	if m != nil {
		return m.RemoteGatewayIp
	}
	return nil
}

func (m *IPSecSAEncryptGetSpec) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetNatTraversalPort() uint32 {
	if m != nil {
		return m.NatTraversalPort
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetIv() uint64 {
	if m != nil {
		return m.Iv
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetKeyIndex() uint32 {
	if m != nil {
		return m.KeyIndex
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetIvSize() uint32 {
	if m != nil {
		return m.IvSize
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetIcvSize() uint32 {
	if m != nil {
		return m.IcvSize
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetTotalPkts() uint64 {
	if m != nil {
		return m.TotalPkts
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetTotalBytes() uint64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetTotalDrops() uint64 {
	if m != nil {
		return m.TotalDrops
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetTotalRxPkts() uint64 {
	if m != nil {
		return m.TotalRxPkts
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetTotalRxBytes() uint64 {
	if m != nil {
		return m.TotalRxBytes
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetTotalRxDrops() uint64 {
	if m != nil {
		return m.TotalRxDrops
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetTepVrf() *VrfKeyHandle {
	if m != nil {
		return m.TepVrf
	}
	return nil
}

type IPSecSADecryptGetSpec struct {
	KeyOrHandle             *IpsecSADecryptKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
	Protocol                IpsecProtocol            `protobuf:"varint,2,opt,name=protocol,proto3,enum=ipsec.IpsecProtocol" json:"protocol,omitempty"`
	AuthenticationAlgorithm AuthenticationAlgorithm  `protobuf:"varint,3,opt,name=authentication_algorithm,json=authenticationAlgorithm,proto3,enum=ipsec.AuthenticationAlgorithm" json:"authentication_algorithm,omitempty"`
	AuthenticationKey       *Key                     `protobuf:"bytes,4,opt,name=authentication_key,json=authenticationKey" json:"authentication_key,omitempty"`
	DecryptionAlgorithm     EncryptionAlgorithm      `protobuf:"varint,5,opt,name=decryption_algorithm,json=decryptionAlgorithm,proto3,enum=ipsec.EncryptionAlgorithm" json:"decryption_algorithm,omitempty"`
	RekeyDecAlgorithm       EncryptionAlgorithm      `protobuf:"varint,6,opt,name=rekey_dec_algorithm,json=rekeyDecAlgorithm,proto3,enum=ipsec.EncryptionAlgorithm" json:"rekey_dec_algorithm,omitempty"`
	DecryptionKey           *Key                     `protobuf:"bytes,7,opt,name=decryption_key,json=decryptionKey" json:"decryption_key,omitempty"`
	RekeyAuthenticationKey  *Key                     `protobuf:"bytes,8,opt,name=rekey_authentication_key,json=rekeyAuthenticationKey" json:"rekey_authentication_key,omitempty"`
	RekeyDecryptionKey      *Key                     `protobuf:"bytes,9,opt,name=rekey_decryption_key,json=rekeyDecryptionKey" json:"rekey_decryption_key,omitempty"`
	LocalGatewayIp          *IPAddress               `protobuf:"bytes,10,opt,name=local_gateway_ip,json=localGatewayIp" json:"local_gateway_ip,omitempty"`
	RemoteGatewayIp         *IPAddress               `protobuf:"bytes,11,opt,name=remote_gateway_ip,json=remoteGatewayIp" json:"remote_gateway_ip,omitempty"`
	Spi                     uint32                   `protobuf:"varint,12,opt,name=spi,proto3" json:"spi,omitempty"`
	RekeyActive             uint32                   `protobuf:"varint,13,opt,name=rekey_active,json=rekeyActive,proto3" json:"rekey_active,omitempty"`
	RekeySpi                uint32                   `protobuf:"varint,14,opt,name=rekey_spi,json=rekeySpi,proto3" json:"rekey_spi,omitempty"`
	Salt                    uint32                   `protobuf:"varint,15,opt,name=salt,proto3" json:"salt,omitempty"`
	KeyIndex                uint32                   `protobuf:"varint,16,opt,name=key_index,json=keyIndex,proto3" json:"key_index,omitempty"`
	NewKeyIndex             uint32                   `protobuf:"varint,17,opt,name=new_key_index,json=newKeyIndex,proto3" json:"new_key_index,omitempty"`
	IvSize                  uint32                   `protobuf:"varint,18,opt,name=iv_size,json=ivSize,proto3" json:"iv_size,omitempty"`
	IcvSize                 uint32                   `protobuf:"varint,19,opt,name=icv_size,json=icvSize,proto3" json:"icv_size,omitempty"`
	SeqNo                   uint64                   `protobuf:"varint,20,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	TotalPkts               uint64                   `protobuf:"varint,21,opt,name=total_pkts,json=totalPkts,proto3" json:"total_pkts,omitempty"`
	TotalBytes              uint64                   `protobuf:"varint,22,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	TotalDrops              uint64                   `protobuf:"varint,23,opt,name=total_drops,json=totalDrops,proto3" json:"total_drops,omitempty"`
	TotalRxPkts             uint64                   `protobuf:"varint,24,opt,name=total_rx_pkts,json=totalRxPkts,proto3" json:"total_rx_pkts,omitempty"`
	TotalRxBytes            uint64                   `protobuf:"varint,25,opt,name=total_rx_bytes,json=totalRxBytes,proto3" json:"total_rx_bytes,omitempty"`
	TotalRxDrops            uint64                   `protobuf:"varint,26,opt,name=total_rx_drops,json=totalRxDrops,proto3" json:"total_rx_drops,omitempty"`
	TepVrf                  *VrfKeyHandle            `protobuf:"bytes,27,opt,name=tep_vrf,json=tepVrf" json:"tep_vrf,omitempty"`
	SeqNoBmp                uint64                   `protobuf:"varint,28,opt,name=seq_no_bmp,json=seqNoBmp,proto3" json:"seq_no_bmp,omitempty"`
	LastReplaySeqNo         uint64                   `protobuf:"varint,29,opt,name=last_replay_seq_no,json=lastReplaySeqNo,proto3" json:"last_replay_seq_no,omitempty"`
}

func (m *IPSecSADecryptGetSpec) Reset()                    { *m = IPSecSADecryptGetSpec{} }
func (m *IPSecSADecryptGetSpec) String() string            { return proto.CompactTextString(m) }
func (*IPSecSADecryptGetSpec) ProtoMessage()               {}
func (*IPSecSADecryptGetSpec) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{4} }

func (m *IPSecSADecryptGetSpec) GetKeyOrHandle() *IpsecSADecryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IPSecSADecryptGetSpec) GetProtocol() IpsecProtocol {
	if m != nil {
		return m.Protocol
	}
	return IpsecProtocol_IPSEC_PROTOCOL_NONE
}

func (m *IPSecSADecryptGetSpec) GetAuthenticationAlgorithm() AuthenticationAlgorithm {
	if m != nil {
		return m.AuthenticationAlgorithm
	}
	return AuthenticationAlgorithm_AUTHENTICATION_ALGORITHM_NONE
}

func (m *IPSecSADecryptGetSpec) GetAuthenticationKey() *Key {
	if m != nil {
		return m.AuthenticationKey
	}
	return nil
}

func (m *IPSecSADecryptGetSpec) GetDecryptionAlgorithm() EncryptionAlgorithm {
	if m != nil {
		return m.DecryptionAlgorithm
	}
	return EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE
}

func (m *IPSecSADecryptGetSpec) GetRekeyDecAlgorithm() EncryptionAlgorithm {
	if m != nil {
		return m.RekeyDecAlgorithm
	}
	return EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE
}

func (m *IPSecSADecryptGetSpec) GetDecryptionKey() *Key {
	if m != nil {
		return m.DecryptionKey
	}
	return nil
}

func (m *IPSecSADecryptGetSpec) GetRekeyAuthenticationKey() *Key {
	if m != nil {
		return m.RekeyAuthenticationKey
	}
	return nil
}

func (m *IPSecSADecryptGetSpec) GetRekeyDecryptionKey() *Key {
	if m != nil {
		return m.RekeyDecryptionKey
	}
	return nil
}

func (m *IPSecSADecryptGetSpec) GetLocalGatewayIp() *IPAddress {
	if m != nil {
		return m.LocalGatewayIp
	}
	return nil
}

func (m *IPSecSADecryptGetSpec) GetRemoteGatewayIp() *IPAddress {
	if m != nil {
		return m.RemoteGatewayIp
	}
	return nil
}

func (m *IPSecSADecryptGetSpec) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetRekeyActive() uint32 {
	if m != nil {
		return m.RekeyActive
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetRekeySpi() uint32 {
	if m != nil {
		return m.RekeySpi
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetKeyIndex() uint32 {
	if m != nil {
		return m.KeyIndex
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetNewKeyIndex() uint32 {
	if m != nil {
		return m.NewKeyIndex
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetIvSize() uint32 {
	if m != nil {
		return m.IvSize
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetIcvSize() uint32 {
	if m != nil {
		return m.IcvSize
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetTotalPkts() uint64 {
	if m != nil {
		return m.TotalPkts
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetTotalBytes() uint64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetTotalDrops() uint64 {
	if m != nil {
		return m.TotalDrops
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetTotalRxPkts() uint64 {
	if m != nil {
		return m.TotalRxPkts
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetTotalRxBytes() uint64 {
	if m != nil {
		return m.TotalRxBytes
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetTotalRxDrops() uint64 {
	if m != nil {
		return m.TotalRxDrops
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetTepVrf() *VrfKeyHandle {
	if m != nil {
		return m.TepVrf
	}
	return nil
}

func (m *IPSecSADecryptGetSpec) GetSeqNoBmp() uint64 {
	if m != nil {
		return m.SeqNoBmp
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetLastReplaySeqNo() uint64 {
	if m != nil {
		return m.LastReplaySeqNo
	}
	return 0
}

type IPSecGlobalStatisticsGetSpec struct {
	EncryptInputDescErrors     uint64 `protobuf:"varint,1,opt,name=encrypt_input_desc_errors,json=encryptInputDescErrors,proto3" json:"encrypt_input_desc_errors,omitempty"`
	EncryptOutputDescErrors    uint64 `protobuf:"varint,2,opt,name=encrypt_output_desc_errors,json=encryptOutputDescErrors,proto3" json:"encrypt_output_desc_errors,omitempty"`
	EncryptCbRingBaseErrors    uint64 `protobuf:"varint,3,opt,name=encrypt_cb_ring_base_errors,json=encryptCbRingBaseErrors,proto3" json:"encrypt_cb_ring_base_errors,omitempty"`
	EncryptInputPageErrors     uint64 `protobuf:"varint,4,opt,name=encrypt_input_page_errors,json=encryptInputPageErrors,proto3" json:"encrypt_input_page_errors,omitempty"`
	EncryptBarcoReqAddrErrors  uint64 `protobuf:"varint,5,opt,name=encrypt_barco_req_addr_errors,json=encryptBarcoReqAddrErrors,proto3" json:"encrypt_barco_req_addr_errors,omitempty"`
	EncryptBarcoCbBaseErrors   uint64 `protobuf:"varint,6,opt,name=encrypt_barco_cb_base_errors,json=encryptBarcoCbBaseErrors,proto3" json:"encrypt_barco_cb_base_errors,omitempty"`
	EncryptPadAddrErrors       uint64 `protobuf:"varint,7,opt,name=encrypt_pad_addr_errors,json=encryptPadAddrErrors,proto3" json:"encrypt_pad_addr_errors,omitempty"`
	EncryptTailBytesErrors     uint64 `protobuf:"varint,8,opt,name=encrypt_tail_bytes_errors,json=encryptTailBytesErrors,proto3" json:"encrypt_tail_bytes_errors,omitempty"`
	EncryptOutputPageErrors    uint64 `protobuf:"varint,9,opt,name=encrypt_output_page_errors,json=encryptOutputPageErrors,proto3" json:"encrypt_output_page_errors,omitempty"`
	EncryptStage4InpageErrors  uint64 `protobuf:"varint,10,opt,name=encrypt_stage4_inpage_errors,json=encryptStage4InpageErrors,proto3" json:"encrypt_stage4_inpage_errors,omitempty"`
	EncryptTable0InpageErrors  uint64 `protobuf:"varint,11,opt,name=encrypt_table0_inpage_errors,json=encryptTable0InpageErrors,proto3" json:"encrypt_table0_inpage_errors,omitempty"`
	EncryptTable2InpageErrors  uint64 `protobuf:"varint,12,opt,name=encrypt_table2_inpage_errors,json=encryptTable2InpageErrors,proto3" json:"encrypt_table2_inpage_errors,omitempty"`
	EncryptTable3InpageErrors  uint64 `protobuf:"varint,13,opt,name=encrypt_table3_inpage_errors,json=encryptTable3InpageErrors,proto3" json:"encrypt_table3_inpage_errors,omitempty"`
	EncryptBadBarcoAddrErrors  uint64 `protobuf:"varint,14,opt,name=encrypt_bad_barco_addr_errors,json=encryptBadBarcoAddrErrors,proto3" json:"encrypt_bad_barco_addr_errors,omitempty"`
	EncryptBarcoFullErrors     uint64 `protobuf:"varint,15,opt,name=encrypt_barco_full_errors,json=encryptBarcoFullErrors,proto3" json:"encrypt_barco_full_errors,omitempty"`
	EncryptCbRingDmaErrors     uint64 `protobuf:"varint,16,opt,name=encrypt_cb_ring_dma_errors,json=encryptCbRingDmaErrors,proto3" json:"encrypt_cb_ring_dma_errors,omitempty"`
	DecryptInputDescErrors     uint64 `protobuf:"varint,17,opt,name=decrypt_input_desc_errors,json=decryptInputDescErrors,proto3" json:"decrypt_input_desc_errors,omitempty"`
	DecryptOutputDescErrors    uint64 `protobuf:"varint,18,opt,name=decrypt_output_desc_errors,json=decryptOutputDescErrors,proto3" json:"decrypt_output_desc_errors,omitempty"`
	DecryptCbRingBaseErrors    uint64 `protobuf:"varint,19,opt,name=decrypt_cb_ring_base_errors,json=decryptCbRingBaseErrors,proto3" json:"decrypt_cb_ring_base_errors,omitempty"`
	DecryptInputPageErrors     uint64 `protobuf:"varint,20,opt,name=decrypt_input_page_errors,json=decryptInputPageErrors,proto3" json:"decrypt_input_page_errors,omitempty"`
	DecryptBarcoReqAddrErrors  uint64 `protobuf:"varint,21,opt,name=decrypt_barco_req_addr_errors,json=decryptBarcoReqAddrErrors,proto3" json:"decrypt_barco_req_addr_errors,omitempty"`
	DecryptBarcoCbAddrErrors   uint64 `protobuf:"varint,22,opt,name=decrypt_barco_cb_addr_errors,json=decryptBarcoCbAddrErrors,proto3" json:"decrypt_barco_cb_addr_errors,omitempty"`
	DecryptStage4InpageErrors  uint64 `protobuf:"varint,23,opt,name=decrypt_stage4_inpage_errors,json=decryptStage4InpageErrors,proto3" json:"decrypt_stage4_inpage_errors,omitempty"`
	DecryptOutputPageErrors    uint64 `protobuf:"varint,24,opt,name=decrypt_output_page_errors,json=decryptOutputPageErrors,proto3" json:"decrypt_output_page_errors,omitempty"`
	DecryptTxdma1EnterCounters uint64 `protobuf:"varint,25,opt,name=decrypt_txdma1_enter_counters,json=decryptTxdma1EnterCounters,proto3" json:"decrypt_txdma1_enter_counters,omitempty"`
	DecryptTxdma2EnterCounters uint64 `protobuf:"varint,26,opt,name=decrypt_txdma2_enter_counters,json=decryptTxdma2EnterCounters,proto3" json:"decrypt_txdma2_enter_counters,omitempty"`
	DecryptTxdma1DropCounters  uint64 `protobuf:"varint,27,opt,name=decrypt_txdma1_drop_counters,json=decryptTxdma1DropCounters,proto3" json:"decrypt_txdma1_drop_counters,omitempty"`
}

func (m *IPSecGlobalStatisticsGetSpec) Reset()         { *m = IPSecGlobalStatisticsGetSpec{} }
func (m *IPSecGlobalStatisticsGetSpec) String() string { return proto.CompactTextString(m) }
func (*IPSecGlobalStatisticsGetSpec) ProtoMessage()    {}
func (*IPSecGlobalStatisticsGetSpec) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{5}
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptInputDescErrors() uint64 {
	if m != nil {
		return m.EncryptInputDescErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptOutputDescErrors() uint64 {
	if m != nil {
		return m.EncryptOutputDescErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptCbRingBaseErrors() uint64 {
	if m != nil {
		return m.EncryptCbRingBaseErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptInputPageErrors() uint64 {
	if m != nil {
		return m.EncryptInputPageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptBarcoReqAddrErrors() uint64 {
	if m != nil {
		return m.EncryptBarcoReqAddrErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptBarcoCbBaseErrors() uint64 {
	if m != nil {
		return m.EncryptBarcoCbBaseErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptPadAddrErrors() uint64 {
	if m != nil {
		return m.EncryptPadAddrErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptTailBytesErrors() uint64 {
	if m != nil {
		return m.EncryptTailBytesErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptOutputPageErrors() uint64 {
	if m != nil {
		return m.EncryptOutputPageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptStage4InpageErrors() uint64 {
	if m != nil {
		return m.EncryptStage4InpageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptTable0InpageErrors() uint64 {
	if m != nil {
		return m.EncryptTable0InpageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptTable2InpageErrors() uint64 {
	if m != nil {
		return m.EncryptTable2InpageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptTable3InpageErrors() uint64 {
	if m != nil {
		return m.EncryptTable3InpageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptBadBarcoAddrErrors() uint64 {
	if m != nil {
		return m.EncryptBadBarcoAddrErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptBarcoFullErrors() uint64 {
	if m != nil {
		return m.EncryptBarcoFullErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptCbRingDmaErrors() uint64 {
	if m != nil {
		return m.EncryptCbRingDmaErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptInputDescErrors() uint64 {
	if m != nil {
		return m.DecryptInputDescErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptOutputDescErrors() uint64 {
	if m != nil {
		return m.DecryptOutputDescErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptCbRingBaseErrors() uint64 {
	if m != nil {
		return m.DecryptCbRingBaseErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptInputPageErrors() uint64 {
	if m != nil {
		return m.DecryptInputPageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptBarcoReqAddrErrors() uint64 {
	if m != nil {
		return m.DecryptBarcoReqAddrErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptBarcoCbAddrErrors() uint64 {
	if m != nil {
		return m.DecryptBarcoCbAddrErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptStage4InpageErrors() uint64 {
	if m != nil {
		return m.DecryptStage4InpageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptOutputPageErrors() uint64 {
	if m != nil {
		return m.DecryptOutputPageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptTxdma1EnterCounters() uint64 {
	if m != nil {
		return m.DecryptTxdma1EnterCounters
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptTxdma2EnterCounters() uint64 {
	if m != nil {
		return m.DecryptTxdma2EnterCounters
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptTxdma1DropCounters() uint64 {
	if m != nil {
		return m.DecryptTxdma1DropCounters
	}
	return 0
}

type IpsecSAAction struct {
	SaActionType IpsecSAActionType `protobuf:"varint,1,opt,name=sa_action_type,json=saActionType,proto3,enum=ipsec.IpsecSAActionType" json:"sa_action_type,omitempty"`
	// Types that are valid to be assigned to SaHandle:
	//	*IpsecSAAction_EncHandle
	//	*IpsecSAAction_DecHandle
	SaHandle isIpsecSAAction_SaHandle `protobuf_oneof:"sa_handle"`
}

func (m *IpsecSAAction) Reset()                    { *m = IpsecSAAction{} }
func (m *IpsecSAAction) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAAction) ProtoMessage()               {}
func (*IpsecSAAction) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{6} }

type isIpsecSAAction_SaHandle interface {
	isIpsecSAAction_SaHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IpsecSAAction_EncHandle struct {
	EncHandle *IpsecSAEncryptKeyHandle `protobuf:"bytes,2,opt,name=enc_handle,json=encHandle,oneof"`
}
type IpsecSAAction_DecHandle struct {
	DecHandle *IpsecSADecryptKeyHandle `protobuf:"bytes,3,opt,name=dec_handle,json=decHandle,oneof"`
}

func (*IpsecSAAction_EncHandle) isIpsecSAAction_SaHandle() {}
func (*IpsecSAAction_DecHandle) isIpsecSAAction_SaHandle() {}

func (m *IpsecSAAction) GetSaHandle() isIpsecSAAction_SaHandle {
	if m != nil {
		return m.SaHandle
	}
	return nil
}

func (m *IpsecSAAction) GetSaActionType() IpsecSAActionType {
	if m != nil {
		return m.SaActionType
	}
	return IpsecSAActionType_IPSEC_SA_ACTION_TYPE_NONE
}

func (m *IpsecSAAction) GetEncHandle() *IpsecSAEncryptKeyHandle {
	if x, ok := m.GetSaHandle().(*IpsecSAAction_EncHandle); ok {
		return x.EncHandle
	}
	return nil
}

func (m *IpsecSAAction) GetDecHandle() *IpsecSADecryptKeyHandle {
	if x, ok := m.GetSaHandle().(*IpsecSAAction_DecHandle); ok {
		return x.DecHandle
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IpsecSAAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IpsecSAAction_OneofMarshaler, _IpsecSAAction_OneofUnmarshaler, _IpsecSAAction_OneofSizer, []interface{}{
		(*IpsecSAAction_EncHandle)(nil),
		(*IpsecSAAction_DecHandle)(nil),
	}
}

func _IpsecSAAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IpsecSAAction)
	// sa_handle
	switch x := m.SaHandle.(type) {
	case *IpsecSAAction_EncHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EncHandle); err != nil {
			return err
		}
	case *IpsecSAAction_DecHandle:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DecHandle); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IpsecSAAction.SaHandle has unexpected type %T", x)
	}
	return nil
}

func _IpsecSAAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IpsecSAAction)
	switch tag {
	case 2: // sa_handle.enc_handle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IpsecSAEncryptKeyHandle)
		err := b.DecodeMessage(msg)
		m.SaHandle = &IpsecSAAction_EncHandle{msg}
		return true, err
	case 3: // sa_handle.dec_handle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IpsecSADecryptKeyHandle)
		err := b.DecodeMessage(msg)
		m.SaHandle = &IpsecSAAction_DecHandle{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IpsecSAAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IpsecSAAction)
	// sa_handle
	switch x := m.SaHandle.(type) {
	case *IpsecSAAction_EncHandle:
		s := proto.Size(x.EncHandle)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IpsecSAAction_DecHandle:
		s := proto.Size(x.DecHandle)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type IpsecRuleMatchSpec struct {
	RuleId   uint64         `protobuf:"varint,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	Match    *RuleMatch     `protobuf:"bytes,2,opt,name=match" json:"match,omitempty"`
	SaAction *IpsecSAAction `protobuf:"bytes,3,opt,name=sa_action,json=saAction" json:"sa_action,omitempty"`
}

func (m *IpsecRuleMatchSpec) Reset()                    { *m = IpsecRuleMatchSpec{} }
func (m *IpsecRuleMatchSpec) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleMatchSpec) ProtoMessage()               {}
func (*IpsecRuleMatchSpec) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{7} }

func (m *IpsecRuleMatchSpec) GetRuleId() uint64 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *IpsecRuleMatchSpec) GetMatch() *RuleMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *IpsecRuleMatchSpec) GetSaAction() *IpsecSAAction {
	if m != nil {
		return m.SaAction
	}
	return nil
}

// IpsecRuleSpec is the user intent for the IPSec rule
type IpsecRuleSpec struct {
	KeyOrHandle  *IpsecRuleKeyHandle   `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
	VrfKeyHandle *VrfKeyHandle         `protobuf:"bytes,2,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty" venice:ref`
	Rules        []*IpsecRuleMatchSpec `protobuf:"bytes,3,rep,name=rules" json:"rules,omitempty"`
}

func (m *IpsecRuleSpec) Reset()                    { *m = IpsecRuleSpec{} }
func (m *IpsecRuleSpec) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleSpec) ProtoMessage()               {}
func (*IpsecRuleSpec) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{8} }

func (m *IpsecRuleSpec) GetKeyOrHandle() *IpsecRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecRuleSpec) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

func (m *IpsecRuleSpec) GetRules() []*IpsecRuleMatchSpec {
	if m != nil {
		return m.Rules
	}
	return nil
}

// IpsecRuleRequestMsg is the batched add or modify of NAT rule request
type IpsecRuleRequestMsg struct {
	Request []*IpsecRuleSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecRuleRequestMsg) Reset()                    { *m = IpsecRuleRequestMsg{} }
func (m *IpsecRuleRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleRequestMsg) ProtoMessage()               {}
func (*IpsecRuleRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{9} }

func (m *IpsecRuleRequestMsg) GetRequest() []*IpsecRuleSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecRuleStatus reflects the current operational status of the IPSec rule
type IpsecRuleStatus struct {
	Handle uint64 `protobuf:"fixed64,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *IpsecRuleStatus) Reset()                    { *m = IpsecRuleStatus{} }
func (m *IpsecRuleStatus) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleStatus) ProtoMessage()               {}
func (*IpsecRuleStatus) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{10} }

func (m *IpsecRuleStatus) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// IpsecRuleResponse is the response to IpsecRuleSpec
type IpsecRuleResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status"`
	Status    *IpsecRuleStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *IpsecRuleResponse) Reset()                    { *m = IpsecRuleResponse{} }
func (m *IpsecRuleResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleResponse) ProtoMessage()               {}
func (*IpsecRuleResponse) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{11} }

func (m *IpsecRuleResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecRuleResponse) GetStatus() *IpsecRuleStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// IpsecRuleResponseMsg is batched response to IpsecRuleRequestMsg
type IpsecRuleResponseMsg struct {
	Response []*IpsecRuleResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecRuleResponseMsg) Reset()                    { *m = IpsecRuleResponseMsg{} }
func (m *IpsecRuleResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleResponseMsg) ProtoMessage()               {}
func (*IpsecRuleResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{12} }

func (m *IpsecRuleResponseMsg) GetResponse() []*IpsecRuleResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecRuleDeleteRequest is used to delete a policy rule
type IpsecRuleDeleteRequest struct {
	KeyOrHandle *IpsecRuleKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecRuleDeleteRequest) Reset()                    { *m = IpsecRuleDeleteRequest{} }
func (m *IpsecRuleDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleDeleteRequest) ProtoMessage()               {}
func (*IpsecRuleDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{13} }

func (m *IpsecRuleDeleteRequest) GetKeyOrHandle() *IpsecRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecRuleDeleteRequestMsg is used to delete a batch of ipsec rules
type IpsecRuleDeleteRequestMsg struct {
	Request []*IpsecRuleDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecRuleDeleteRequestMsg) Reset()                    { *m = IpsecRuleDeleteRequestMsg{} }
func (m *IpsecRuleDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleDeleteRequestMsg) ProtoMessage()               {}
func (*IpsecRuleDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{14} }

func (m *IpsecRuleDeleteRequestMsg) GetRequest() []*IpsecRuleDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecRuleDeleteResponse is response to IpsecRuleDeleteRequest
type IpsecRuleDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *IpsecRuleDeleteResponse) Reset()                    { *m = IpsecRuleDeleteResponse{} }
func (m *IpsecRuleDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleDeleteResponse) ProtoMessage()               {}
func (*IpsecRuleDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{15} }

func (m *IpsecRuleDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// IpsecRuleDeleteResponseMsg is batched response to IpsecRuleDeleteRequestMsg
type IpsecRuleDeleteResponseMsg struct {
	Response []*IpsecRuleDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecRuleDeleteResponseMsg) Reset()                    { *m = IpsecRuleDeleteResponseMsg{} }
func (m *IpsecRuleDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleDeleteResponseMsg) ProtoMessage()               {}
func (*IpsecRuleDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{16} }

func (m *IpsecRuleDeleteResponseMsg) GetResponse() []*IpsecRuleDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecRuleGetRequest is used to get information about a ipsec rule
type IpsecRuleGetRequest struct {
	KeyOrHandle *IpsecRuleKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecRuleGetRequest) Reset()                    { *m = IpsecRuleGetRequest{} }
func (m *IpsecRuleGetRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleGetRequest) ProtoMessage()               {}
func (*IpsecRuleGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{17} }

func (m *IpsecRuleGetRequest) GetKeyOrHandle() *IpsecRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecRuleGetRequestMsg is batched GET requests for ipsec rule
type IpsecRuleGetRequestMsg struct {
	Request []*IpsecRuleGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecRuleGetRequestMsg) Reset()                    { *m = IpsecRuleGetRequestMsg{} }
func (m *IpsecRuleGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleGetRequestMsg) ProtoMessage()               {}
func (*IpsecRuleGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{18} }

func (m *IpsecRuleGetRequestMsg) GetRequest() []*IpsecRuleGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// per rule stats
type IpsecRuleEntryStats struct {
	NumTcpSessions   uint32 `protobuf:"varint,1,opt,name=num_tcp_sessions,json=numTcpSessions,proto3" json:"num_tcp_sessions,omitempty"`
	NumUdpSessions   uint32 `protobuf:"varint,2,opt,name=num_udp_sessions,json=numUdpSessions,proto3" json:"num_udp_sessions,omitempty"`
	NumOtherSessions uint32 `protobuf:"varint,3,opt,name=num_other_sessions,json=numOtherSessions,proto3" json:"num_other_sessions,omitempty"`
}

func (m *IpsecRuleEntryStats) Reset()                    { *m = IpsecRuleEntryStats{} }
func (m *IpsecRuleEntryStats) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleEntryStats) ProtoMessage()               {}
func (*IpsecRuleEntryStats) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{19} }

func (m *IpsecRuleEntryStats) GetNumTcpSessions() uint32 {
	if m != nil {
		return m.NumTcpSessions
	}
	return 0
}

func (m *IpsecRuleEntryStats) GetNumUdpSessions() uint32 {
	if m != nil {
		return m.NumUdpSessions
	}
	return 0
}

func (m *IpsecRuleEntryStats) GetNumOtherSessions() uint32 {
	if m != nil {
		return m.NumOtherSessions
	}
	return 0
}

// per policy stats
type IpsecRuleStats struct {
	Stats []*IpsecRuleEntryStats `protobuf:"bytes,1,rep,name=stats" json:"stats,omitempty"`
}

func (m *IpsecRuleStats) Reset()                    { *m = IpsecRuleStats{} }
func (m *IpsecRuleStats) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleStats) ProtoMessage()               {}
func (*IpsecRuleStats) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{20} }

func (m *IpsecRuleStats) GetStats() []*IpsecRuleEntryStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// IpsecRuleGetResponse catpures all information about IPSec policy
type IpsecRuleGetResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *IpsecRuleSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *IpsecRuleStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *IpsecRuleStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *IpsecRuleGetResponse) Reset()                    { *m = IpsecRuleGetResponse{} }
func (m *IpsecRuleGetResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleGetResponse) ProtoMessage()               {}
func (*IpsecRuleGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{21} }

func (m *IpsecRuleGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecRuleGetResponse) GetSpec() *IpsecRuleSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *IpsecRuleGetResponse) GetStatus() *IpsecRuleStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *IpsecRuleGetResponse) GetStats() *IpsecRuleStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// IpsecRuleGetResponseMsg is batched response to IpsecRuleGetRequestMsg
type IpsecRuleGetResponseMsg struct {
	Response []*IpsecRuleGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecRuleGetResponseMsg) Reset()                    { *m = IpsecRuleGetResponseMsg{} }
func (m *IpsecRuleGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleGetResponseMsg) ProtoMessage()               {}
func (*IpsecRuleGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{22} }

func (m *IpsecRuleGetResponseMsg) GetResponse() []*IpsecRuleGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecSAEncryptRequestMsg is batched add or modify ipsec_sa request
type IpsecSAEncryptRequestMsg struct {
	Request []*IpsecSAEncrypt `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSAEncryptRequestMsg) Reset()                    { *m = IpsecSAEncryptRequestMsg{} }
func (m *IpsecSAEncryptRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptRequestMsg) ProtoMessage()               {}
func (*IpsecSAEncryptRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{23} }

func (m *IpsecSAEncryptRequestMsg) GetRequest() []*IpsecSAEncrypt {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecSAEncryptStatus is the operational status of a given ipsec_sa
type IpsecSAEncryptStatus struct {
	IpsecSaHandle uint64 `protobuf:"fixed64,1,opt,name=ipsec_sa_handle,json=ipsecSaHandle,proto3" json:"ipsec_sa_handle,omitempty"`
}

func (m *IpsecSAEncryptStatus) Reset()                    { *m = IpsecSAEncryptStatus{} }
func (m *IpsecSAEncryptStatus) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptStatus) ProtoMessage()               {}
func (*IpsecSAEncryptStatus) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{24} }

func (m *IpsecSAEncryptStatus) GetIpsecSaHandle() uint64 {
	if m != nil {
		return m.IpsecSaHandle
	}
	return 0
}

// IpsecSAEncryptResponse is response to IpsecSA
type IpsecSAEncryptResponse struct {
	ApiStatus     ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	IpsecSaStatus *IpsecSAEncryptStatus `protobuf:"bytes,2,opt,name=ipsec_sa_status,json=ipsecSaStatus" json:"ipsec_sa_status,omitempty"`
}

func (m *IpsecSAEncryptResponse) Reset()                    { *m = IpsecSAEncryptResponse{} }
func (m *IpsecSAEncryptResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptResponse) ProtoMessage()               {}
func (*IpsecSAEncryptResponse) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{25} }

func (m *IpsecSAEncryptResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecSAEncryptResponse) GetIpsecSaStatus() *IpsecSAEncryptStatus {
	if m != nil {
		return m.IpsecSaStatus
	}
	return nil
}

// IpsecSAEncryptResponseMsg is batched response to IpsecSAEncryptRequestMsg
type IpsecSAEncryptResponseMsg struct {
	Response []*IpsecSAEncryptResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecSAEncryptResponseMsg) Reset()                    { *m = IpsecSAEncryptResponseMsg{} }
func (m *IpsecSAEncryptResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptResponseMsg) ProtoMessage()               {}
func (*IpsecSAEncryptResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{26} }

func (m *IpsecSAEncryptResponseMsg) GetResponse() []*IpsecSAEncryptResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecSAEncryptDeleteRequest is used to delete a ipsec_sa
type IpsecSAEncryptDeleteRequest struct {
	KeyOrHandle *IpsecSAEncryptKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecSAEncryptDeleteRequest) Reset()         { *m = IpsecSAEncryptDeleteRequest{} }
func (m *IpsecSAEncryptDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*IpsecSAEncryptDeleteRequest) ProtoMessage()    {}
func (*IpsecSAEncryptDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{27}
}

func (m *IpsecSAEncryptDeleteRequest) GetKeyOrHandle() *IpsecSAEncryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecSAEncryptDeleteRequestMsg is used to delete a batch of ipsec_sas
type IpsecSAEncryptDeleteRequestMsg struct {
	Request []*IpsecSAEncryptDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSAEncryptDeleteRequestMsg) Reset()         { *m = IpsecSAEncryptDeleteRequestMsg{} }
func (m *IpsecSAEncryptDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSAEncryptDeleteRequestMsg) ProtoMessage()    {}
func (*IpsecSAEncryptDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{28}
}

func (m *IpsecSAEncryptDeleteRequestMsg) GetRequest() []*IpsecSAEncryptDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecSAEncryptDeleteResponse is response to delete a ipsec_sa
type IpsecSAEncryptDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *IpsecSAEncryptDeleteResponse) Reset()         { *m = IpsecSAEncryptDeleteResponse{} }
func (m *IpsecSAEncryptDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*IpsecSAEncryptDeleteResponse) ProtoMessage()    {}
func (*IpsecSAEncryptDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{29}
}

func (m *IpsecSAEncryptDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// IpsecSAEncryptDeleteResponseMsg is batched response to IpsecSADeleteRequestMsg
type IpsecSAEncryptDeleteResponseMsg struct {
	Response []*IpsecSAEncryptDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecSAEncryptDeleteResponseMsg) Reset()         { *m = IpsecSAEncryptDeleteResponseMsg{} }
func (m *IpsecSAEncryptDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSAEncryptDeleteResponseMsg) ProtoMessage()    {}
func (*IpsecSAEncryptDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{30}
}

func (m *IpsecSAEncryptDeleteResponseMsg) GetResponse() []*IpsecSAEncryptDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecSAEncryptGetRequest is used to get information about a ipsec_sa
type IpsecSAEncryptGetRequest struct {
	KeyOrHandle *IpsecSAEncryptKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecSAEncryptGetRequest) Reset()                    { *m = IpsecSAEncryptGetRequest{} }
func (m *IpsecSAEncryptGetRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptGetRequest) ProtoMessage()               {}
func (*IpsecSAEncryptGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{31} }

func (m *IpsecSAEncryptGetRequest) GetKeyOrHandle() *IpsecSAEncryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecSAEncryptGetRequestMsg is batched GET requests for ipsec_sas
type IpsecSAEncryptGetRequestMsg struct {
	Request []*IpsecSAEncryptGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSAEncryptGetRequestMsg) Reset()         { *m = IpsecSAEncryptGetRequestMsg{} }
func (m *IpsecSAEncryptGetRequestMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSAEncryptGetRequestMsg) ProtoMessage()    {}
func (*IpsecSAEncryptGetRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{32}
}

func (m *IpsecSAEncryptGetRequestMsg) GetRequest() []*IpsecSAEncryptGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type IpsecSAEncryptGetResponse struct {
	ApiStatus ApiStatus              `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *IPSecSAEncryptGetSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *IpsecSAEncryptStatus  `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *IpsecSAEncryptGetResponse) Reset()                    { *m = IpsecSAEncryptGetResponse{} }
func (m *IpsecSAEncryptGetResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptGetResponse) ProtoMessage()               {}
func (*IpsecSAEncryptGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{33} }

func (m *IpsecSAEncryptGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecSAEncryptGetResponse) GetSpec() *IPSecSAEncryptGetSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *IpsecSAEncryptGetResponse) GetStatus() *IpsecSAEncryptStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type IpsecSAEncryptGetResponseMsg struct {
	Response []*IpsecSAEncryptGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecSAEncryptGetResponseMsg) Reset()         { *m = IpsecSAEncryptGetResponseMsg{} }
func (m *IpsecSAEncryptGetResponseMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSAEncryptGetResponseMsg) ProtoMessage()    {}
func (*IpsecSAEncryptGetResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{34}
}

func (m *IpsecSAEncryptGetResponseMsg) GetResponse() []*IpsecSAEncryptGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecSADecryptRequestMsg is batched add or modify ipsec_sa request
type IpsecSADecryptRequestMsg struct {
	Request []*IpsecSADecrypt `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSADecryptRequestMsg) Reset()                    { *m = IpsecSADecryptRequestMsg{} }
func (m *IpsecSADecryptRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptRequestMsg) ProtoMessage()               {}
func (*IpsecSADecryptRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{35} }

func (m *IpsecSADecryptRequestMsg) GetRequest() []*IpsecSADecrypt {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecSADecryptStatus is the operational status of a given ipsec_sa
type IpsecSADecryptStatus struct {
	IpsecSaHandle uint64 `protobuf:"fixed64,1,opt,name=ipsec_sa_handle,json=ipsecSaHandle,proto3" json:"ipsec_sa_handle,omitempty"`
}

func (m *IpsecSADecryptStatus) Reset()                    { *m = IpsecSADecryptStatus{} }
func (m *IpsecSADecryptStatus) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptStatus) ProtoMessage()               {}
func (*IpsecSADecryptStatus) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{36} }

func (m *IpsecSADecryptStatus) GetIpsecSaHandle() uint64 {
	if m != nil {
		return m.IpsecSaHandle
	}
	return 0
}

// IpsecSADecryptResponse is response to IpsecSA
type IpsecSADecryptResponse struct {
	ApiStatus     ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	IpsecSaStatus *IpsecSADecryptStatus `protobuf:"bytes,2,opt,name=ipsec_sa_status,json=ipsecSaStatus" json:"ipsec_sa_status,omitempty"`
}

func (m *IpsecSADecryptResponse) Reset()                    { *m = IpsecSADecryptResponse{} }
func (m *IpsecSADecryptResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptResponse) ProtoMessage()               {}
func (*IpsecSADecryptResponse) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{37} }

func (m *IpsecSADecryptResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecSADecryptResponse) GetIpsecSaStatus() *IpsecSADecryptStatus {
	if m != nil {
		return m.IpsecSaStatus
	}
	return nil
}

// IpsecSADecryptResponseMsg is batched response to IpsecSADecryptRequestMsg
type IpsecSADecryptResponseMsg struct {
	Response []*IpsecSADecryptResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecSADecryptResponseMsg) Reset()                    { *m = IpsecSADecryptResponseMsg{} }
func (m *IpsecSADecryptResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptResponseMsg) ProtoMessage()               {}
func (*IpsecSADecryptResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{38} }

func (m *IpsecSADecryptResponseMsg) GetResponse() []*IpsecSADecryptResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecSADecryptDeleteRequest is used to delete a ipsec_sa
type IpsecSADecryptDeleteRequest struct {
	KeyOrHandle *IpsecSADecryptKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecSADecryptDeleteRequest) Reset()         { *m = IpsecSADecryptDeleteRequest{} }
func (m *IpsecSADecryptDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*IpsecSADecryptDeleteRequest) ProtoMessage()    {}
func (*IpsecSADecryptDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{39}
}

func (m *IpsecSADecryptDeleteRequest) GetKeyOrHandle() *IpsecSADecryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecSADecryptDeleteRequestMsg is used to delete a batch of ipsec_sas
type IpsecSADecryptDeleteRequestMsg struct {
	Request []*IpsecSADecryptDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSADecryptDeleteRequestMsg) Reset()         { *m = IpsecSADecryptDeleteRequestMsg{} }
func (m *IpsecSADecryptDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSADecryptDeleteRequestMsg) ProtoMessage()    {}
func (*IpsecSADecryptDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{40}
}

func (m *IpsecSADecryptDeleteRequestMsg) GetRequest() []*IpsecSADecryptDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecSADecryptDeleteResponse is response to delete a ipsec_sa
type IpsecSADecryptDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *IpsecSADecryptDeleteResponse) Reset()         { *m = IpsecSADecryptDeleteResponse{} }
func (m *IpsecSADecryptDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*IpsecSADecryptDeleteResponse) ProtoMessage()    {}
func (*IpsecSADecryptDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{41}
}

func (m *IpsecSADecryptDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// IpsecSADecryptDeleteResponseMsg is batched response to IpsecSADeleteRequestMsg
type IpsecSADecryptDeleteResponseMsg struct {
	Response []*IpsecSADecryptDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecSADecryptDeleteResponseMsg) Reset()         { *m = IpsecSADecryptDeleteResponseMsg{} }
func (m *IpsecSADecryptDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSADecryptDeleteResponseMsg) ProtoMessage()    {}
func (*IpsecSADecryptDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{42}
}

func (m *IpsecSADecryptDeleteResponseMsg) GetResponse() []*IpsecSADecryptDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecSADecryptGetRequest is used to get information about a ipsec_sa
type IpsecSADecryptGetRequest struct {
	KeyOrHandle *IpsecSADecryptKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecSADecryptGetRequest) Reset()                    { *m = IpsecSADecryptGetRequest{} }
func (m *IpsecSADecryptGetRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptGetRequest) ProtoMessage()               {}
func (*IpsecSADecryptGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{43} }

func (m *IpsecSADecryptGetRequest) GetKeyOrHandle() *IpsecSADecryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecSADecryptGetRequestMsg is batched GET requests for ipsec_sas
type IpsecSADecryptGetRequestMsg struct {
	Request []*IpsecSADecryptGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSADecryptGetRequestMsg) Reset()         { *m = IpsecSADecryptGetRequestMsg{} }
func (m *IpsecSADecryptGetRequestMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSADecryptGetRequestMsg) ProtoMessage()    {}
func (*IpsecSADecryptGetRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{44}
}

func (m *IpsecSADecryptGetRequestMsg) GetRequest() []*IpsecSADecryptGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type IpsecSADecryptGetResponse struct {
	ApiStatus ApiStatus              `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *IPSecSADecryptGetSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *IpsecSADecryptStatus  `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *IpsecSADecryptGetResponse) Reset()                    { *m = IpsecSADecryptGetResponse{} }
func (m *IpsecSADecryptGetResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptGetResponse) ProtoMessage()               {}
func (*IpsecSADecryptGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorIpsec, []int{45} }

func (m *IpsecSADecryptGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecSADecryptGetResponse) GetSpec() *IPSecSADecryptGetSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *IpsecSADecryptGetResponse) GetStatus() *IpsecSADecryptStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type IpsecSADecryptGetResponseMsg struct {
	Response []*IpsecSADecryptGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecSADecryptGetResponseMsg) Reset()         { *m = IpsecSADecryptGetResponseMsg{} }
func (m *IpsecSADecryptGetResponseMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSADecryptGetResponseMsg) ProtoMessage()    {}
func (*IpsecSADecryptGetResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{46}
}

func (m *IpsecSADecryptGetResponseMsg) GetResponse() []*IpsecSADecryptGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type IpsecGlobalStatisticsGetRequest struct {
	ClearOnRead uint32 `protobuf:"varint,1,opt,name=clear_on_read,json=clearOnRead,proto3" json:"clear_on_read,omitempty"`
}

func (m *IpsecGlobalStatisticsGetRequest) Reset()         { *m = IpsecGlobalStatisticsGetRequest{} }
func (m *IpsecGlobalStatisticsGetRequest) String() string { return proto.CompactTextString(m) }
func (*IpsecGlobalStatisticsGetRequest) ProtoMessage()    {}
func (*IpsecGlobalStatisticsGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{47}
}

func (m *IpsecGlobalStatisticsGetRequest) GetClearOnRead() uint32 {
	if m != nil {
		return m.ClearOnRead
	}
	return 0
}

type IpsecGlobalStatisticsGetRequestMsg struct {
	Request []*IpsecGlobalStatisticsGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecGlobalStatisticsGetRequestMsg) Reset()         { *m = IpsecGlobalStatisticsGetRequestMsg{} }
func (m *IpsecGlobalStatisticsGetRequestMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecGlobalStatisticsGetRequestMsg) ProtoMessage()    {}
func (*IpsecGlobalStatisticsGetRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{48}
}

func (m *IpsecGlobalStatisticsGetRequestMsg) GetRequest() []*IpsecGlobalStatisticsGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type IpsecGlobalStatisticsGetResponse struct {
	ApiStatus ApiStatus                     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *IPSecGlobalStatisticsGetSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *IpsecGlobalStatisticsGetResponse) Reset()         { *m = IpsecGlobalStatisticsGetResponse{} }
func (m *IpsecGlobalStatisticsGetResponse) String() string { return proto.CompactTextString(m) }
func (*IpsecGlobalStatisticsGetResponse) ProtoMessage()    {}
func (*IpsecGlobalStatisticsGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{49}
}

func (m *IpsecGlobalStatisticsGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecGlobalStatisticsGetResponse) GetSpec() *IPSecGlobalStatisticsGetSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type IpsecGlobalStatisticsGetResponseMsg struct {
	Response []*IpsecGlobalStatisticsGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecGlobalStatisticsGetResponseMsg) Reset()         { *m = IpsecGlobalStatisticsGetResponseMsg{} }
func (m *IpsecGlobalStatisticsGetResponseMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecGlobalStatisticsGetResponseMsg) ProtoMessage()    {}
func (*IpsecGlobalStatisticsGetResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorIpsec, []int{50}
}

func (m *IpsecGlobalStatisticsGetResponseMsg) GetResponse() []*IpsecGlobalStatisticsGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*Key)(nil), "ipsec.Key")
	proto.RegisterType((*IpsecSAEncrypt)(nil), "ipsec.IpsecSAEncrypt")
	proto.RegisterType((*IpsecSADecrypt)(nil), "ipsec.IpsecSADecrypt")
	proto.RegisterType((*IPSecSAEncryptGetSpec)(nil), "ipsec.IPSecSAEncryptGetSpec")
	proto.RegisterType((*IPSecSADecryptGetSpec)(nil), "ipsec.IPSecSADecryptGetSpec")
	proto.RegisterType((*IPSecGlobalStatisticsGetSpec)(nil), "ipsec.IPSecGlobalStatisticsGetSpec")
	proto.RegisterType((*IpsecSAAction)(nil), "ipsec.IpsecSAAction")
	proto.RegisterType((*IpsecRuleMatchSpec)(nil), "ipsec.IpsecRuleMatchSpec")
	proto.RegisterType((*IpsecRuleSpec)(nil), "ipsec.IpsecRuleSpec")
	proto.RegisterType((*IpsecRuleRequestMsg)(nil), "ipsec.IpsecRuleRequestMsg")
	proto.RegisterType((*IpsecRuleStatus)(nil), "ipsec.IpsecRuleStatus")
	proto.RegisterType((*IpsecRuleResponse)(nil), "ipsec.IpsecRuleResponse")
	proto.RegisterType((*IpsecRuleResponseMsg)(nil), "ipsec.IpsecRuleResponseMsg")
	proto.RegisterType((*IpsecRuleDeleteRequest)(nil), "ipsec.IpsecRuleDeleteRequest")
	proto.RegisterType((*IpsecRuleDeleteRequestMsg)(nil), "ipsec.IpsecRuleDeleteRequestMsg")
	proto.RegisterType((*IpsecRuleDeleteResponse)(nil), "ipsec.IpsecRuleDeleteResponse")
	proto.RegisterType((*IpsecRuleDeleteResponseMsg)(nil), "ipsec.IpsecRuleDeleteResponseMsg")
	proto.RegisterType((*IpsecRuleGetRequest)(nil), "ipsec.IpsecRuleGetRequest")
	proto.RegisterType((*IpsecRuleGetRequestMsg)(nil), "ipsec.IpsecRuleGetRequestMsg")
	proto.RegisterType((*IpsecRuleEntryStats)(nil), "ipsec.IpsecRuleEntryStats")
	proto.RegisterType((*IpsecRuleStats)(nil), "ipsec.IpsecRuleStats")
	proto.RegisterType((*IpsecRuleGetResponse)(nil), "ipsec.IpsecRuleGetResponse")
	proto.RegisterType((*IpsecRuleGetResponseMsg)(nil), "ipsec.IpsecRuleGetResponseMsg")
	proto.RegisterType((*IpsecSAEncryptRequestMsg)(nil), "ipsec.IpsecSAEncryptRequestMsg")
	proto.RegisterType((*IpsecSAEncryptStatus)(nil), "ipsec.IpsecSAEncryptStatus")
	proto.RegisterType((*IpsecSAEncryptResponse)(nil), "ipsec.IpsecSAEncryptResponse")
	proto.RegisterType((*IpsecSAEncryptResponseMsg)(nil), "ipsec.IpsecSAEncryptResponseMsg")
	proto.RegisterType((*IpsecSAEncryptDeleteRequest)(nil), "ipsec.IpsecSAEncryptDeleteRequest")
	proto.RegisterType((*IpsecSAEncryptDeleteRequestMsg)(nil), "ipsec.IpsecSAEncryptDeleteRequestMsg")
	proto.RegisterType((*IpsecSAEncryptDeleteResponse)(nil), "ipsec.IpsecSAEncryptDeleteResponse")
	proto.RegisterType((*IpsecSAEncryptDeleteResponseMsg)(nil), "ipsec.IpsecSAEncryptDeleteResponseMsg")
	proto.RegisterType((*IpsecSAEncryptGetRequest)(nil), "ipsec.IpsecSAEncryptGetRequest")
	proto.RegisterType((*IpsecSAEncryptGetRequestMsg)(nil), "ipsec.IpsecSAEncryptGetRequestMsg")
	proto.RegisterType((*IpsecSAEncryptGetResponse)(nil), "ipsec.IpsecSAEncryptGetResponse")
	proto.RegisterType((*IpsecSAEncryptGetResponseMsg)(nil), "ipsec.IpsecSAEncryptGetResponseMsg")
	proto.RegisterType((*IpsecSADecryptRequestMsg)(nil), "ipsec.IpsecSADecryptRequestMsg")
	proto.RegisterType((*IpsecSADecryptStatus)(nil), "ipsec.IpsecSADecryptStatus")
	proto.RegisterType((*IpsecSADecryptResponse)(nil), "ipsec.IpsecSADecryptResponse")
	proto.RegisterType((*IpsecSADecryptResponseMsg)(nil), "ipsec.IpsecSADecryptResponseMsg")
	proto.RegisterType((*IpsecSADecryptDeleteRequest)(nil), "ipsec.IpsecSADecryptDeleteRequest")
	proto.RegisterType((*IpsecSADecryptDeleteRequestMsg)(nil), "ipsec.IpsecSADecryptDeleteRequestMsg")
	proto.RegisterType((*IpsecSADecryptDeleteResponse)(nil), "ipsec.IpsecSADecryptDeleteResponse")
	proto.RegisterType((*IpsecSADecryptDeleteResponseMsg)(nil), "ipsec.IpsecSADecryptDeleteResponseMsg")
	proto.RegisterType((*IpsecSADecryptGetRequest)(nil), "ipsec.IpsecSADecryptGetRequest")
	proto.RegisterType((*IpsecSADecryptGetRequestMsg)(nil), "ipsec.IpsecSADecryptGetRequestMsg")
	proto.RegisterType((*IpsecSADecryptGetResponse)(nil), "ipsec.IpsecSADecryptGetResponse")
	proto.RegisterType((*IpsecSADecryptGetResponseMsg)(nil), "ipsec.IpsecSADecryptGetResponseMsg")
	proto.RegisterType((*IpsecGlobalStatisticsGetRequest)(nil), "ipsec.IpsecGlobalStatisticsGetRequest")
	proto.RegisterType((*IpsecGlobalStatisticsGetRequestMsg)(nil), "ipsec.IpsecGlobalStatisticsGetRequestMsg")
	proto.RegisterType((*IpsecGlobalStatisticsGetResponse)(nil), "ipsec.IpsecGlobalStatisticsGetResponse")
	proto.RegisterType((*IpsecGlobalStatisticsGetResponseMsg)(nil), "ipsec.IpsecGlobalStatisticsGetResponseMsg")
	proto.RegisterEnum("ipsec.IpsecProtocol", IpsecProtocol_name, IpsecProtocol_value)
	proto.RegisterEnum("ipsec.EncryptionAlgorithm", EncryptionAlgorithm_name, EncryptionAlgorithm_value)
	proto.RegisterEnum("ipsec.AuthenticationAlgorithm", AuthenticationAlgorithm_name, AuthenticationAlgorithm_value)
	proto.RegisterEnum("ipsec.IpsecSAActionType", IpsecSAActionType_name, IpsecSAActionType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Ipsec service

type IpsecClient interface {
	IpsecRuleCreate(ctx context.Context, in *IpsecRuleRequestMsg, opts ...grpc.CallOption) (*IpsecRuleResponseMsg, error)
	IpsecRuleUpdate(ctx context.Context, in *IpsecRuleRequestMsg, opts ...grpc.CallOption) (*IpsecRuleResponseMsg, error)
	IpsecRuleDelete(ctx context.Context, in *IpsecRuleDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecRuleDeleteResponseMsg, error)
	IpsecRuleGet(ctx context.Context, in *IpsecRuleGetRequestMsg, opts ...grpc.CallOption) (*IpsecRuleGetResponseMsg, error)
	IpsecSAEncryptCreate(ctx context.Context, in *IpsecSAEncryptRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptResponseMsg, error)
	IpsecSAEncryptUpdate(ctx context.Context, in *IpsecSAEncryptRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptResponseMsg, error)
	IpsecSAEncryptDelete(ctx context.Context, in *IpsecSAEncryptDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptDeleteResponseMsg, error)
	IpsecSAEncryptGet(ctx context.Context, in *IpsecSAEncryptGetRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptGetResponseMsg, error)
	IpsecSADecryptCreate(ctx context.Context, in *IpsecSADecryptRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptResponseMsg, error)
	IpsecSADecryptUpdate(ctx context.Context, in *IpsecSADecryptRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptResponseMsg, error)
	IpsecSADecryptDelete(ctx context.Context, in *IpsecSADecryptDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptDeleteResponseMsg, error)
	IpsecSADecryptGet(ctx context.Context, in *IpsecSADecryptGetRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptGetResponseMsg, error)
	IpsecGlobalStatisticsGet(ctx context.Context, in *IpsecGlobalStatisticsGetRequestMsg, opts ...grpc.CallOption) (*IpsecGlobalStatisticsGetResponseMsg, error)
}

type ipsecClient struct {
	cc *grpc.ClientConn
}

func NewIpsecClient(cc *grpc.ClientConn) IpsecClient {
	return &ipsecClient{cc}
}

func (c *ipsecClient) IpsecRuleCreate(ctx context.Context, in *IpsecRuleRequestMsg, opts ...grpc.CallOption) (*IpsecRuleResponseMsg, error) {
	out := new(IpsecRuleResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecRuleCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecRuleUpdate(ctx context.Context, in *IpsecRuleRequestMsg, opts ...grpc.CallOption) (*IpsecRuleResponseMsg, error) {
	out := new(IpsecRuleResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecRuleUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecRuleDelete(ctx context.Context, in *IpsecRuleDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecRuleDeleteResponseMsg, error) {
	out := new(IpsecRuleDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecRuleDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecRuleGet(ctx context.Context, in *IpsecRuleGetRequestMsg, opts ...grpc.CallOption) (*IpsecRuleGetResponseMsg, error) {
	out := new(IpsecRuleGetResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecRuleGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecSAEncryptCreate(ctx context.Context, in *IpsecSAEncryptRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptResponseMsg, error) {
	out := new(IpsecSAEncryptResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecSAEncryptCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecSAEncryptUpdate(ctx context.Context, in *IpsecSAEncryptRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptResponseMsg, error) {
	out := new(IpsecSAEncryptResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecSAEncryptUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecSAEncryptDelete(ctx context.Context, in *IpsecSAEncryptDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptDeleteResponseMsg, error) {
	out := new(IpsecSAEncryptDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecSAEncryptDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecSAEncryptGet(ctx context.Context, in *IpsecSAEncryptGetRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptGetResponseMsg, error) {
	out := new(IpsecSAEncryptGetResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecSAEncryptGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecSADecryptCreate(ctx context.Context, in *IpsecSADecryptRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptResponseMsg, error) {
	out := new(IpsecSADecryptResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecSADecryptCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecSADecryptUpdate(ctx context.Context, in *IpsecSADecryptRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptResponseMsg, error) {
	out := new(IpsecSADecryptResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecSADecryptUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecSADecryptDelete(ctx context.Context, in *IpsecSADecryptDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptDeleteResponseMsg, error) {
	out := new(IpsecSADecryptDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecSADecryptDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecSADecryptGet(ctx context.Context, in *IpsecSADecryptGetRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptGetResponseMsg, error) {
	out := new(IpsecSADecryptGetResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecSADecryptGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) IpsecGlobalStatisticsGet(ctx context.Context, in *IpsecGlobalStatisticsGetRequestMsg, opts ...grpc.CallOption) (*IpsecGlobalStatisticsGetResponseMsg, error) {
	out := new(IpsecGlobalStatisticsGetResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecGlobalStatisticsGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ipsec service

type IpsecServer interface {
	IpsecRuleCreate(context.Context, *IpsecRuleRequestMsg) (*IpsecRuleResponseMsg, error)
	IpsecRuleUpdate(context.Context, *IpsecRuleRequestMsg) (*IpsecRuleResponseMsg, error)
	IpsecRuleDelete(context.Context, *IpsecRuleDeleteRequestMsg) (*IpsecRuleDeleteResponseMsg, error)
	IpsecRuleGet(context.Context, *IpsecRuleGetRequestMsg) (*IpsecRuleGetResponseMsg, error)
	IpsecSAEncryptCreate(context.Context, *IpsecSAEncryptRequestMsg) (*IpsecSAEncryptResponseMsg, error)
	IpsecSAEncryptUpdate(context.Context, *IpsecSAEncryptRequestMsg) (*IpsecSAEncryptResponseMsg, error)
	IpsecSAEncryptDelete(context.Context, *IpsecSAEncryptDeleteRequestMsg) (*IpsecSAEncryptDeleteResponseMsg, error)
	IpsecSAEncryptGet(context.Context, *IpsecSAEncryptGetRequestMsg) (*IpsecSAEncryptGetResponseMsg, error)
	IpsecSADecryptCreate(context.Context, *IpsecSADecryptRequestMsg) (*IpsecSADecryptResponseMsg, error)
	IpsecSADecryptUpdate(context.Context, *IpsecSADecryptRequestMsg) (*IpsecSADecryptResponseMsg, error)
	IpsecSADecryptDelete(context.Context, *IpsecSADecryptDeleteRequestMsg) (*IpsecSADecryptDeleteResponseMsg, error)
	IpsecSADecryptGet(context.Context, *IpsecSADecryptGetRequestMsg) (*IpsecSADecryptGetResponseMsg, error)
	IpsecGlobalStatisticsGet(context.Context, *IpsecGlobalStatisticsGetRequestMsg) (*IpsecGlobalStatisticsGetResponseMsg, error)
}

func RegisterIpsecServer(s *grpc.Server, srv IpsecServer) {
	s.RegisterService(&_Ipsec_serviceDesc, srv)
}

func _Ipsec_IpsecRuleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecRuleRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecRuleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecRuleCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecRuleCreate(ctx, req.(*IpsecRuleRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecRuleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecRuleRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecRuleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecRuleUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecRuleUpdate(ctx, req.(*IpsecRuleRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecRuleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecRuleDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecRuleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecRuleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecRuleDelete(ctx, req.(*IpsecRuleDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecRuleGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecRuleGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecRuleGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecRuleGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecRuleGet(ctx, req.(*IpsecRuleGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecSAEncryptCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecSAEncryptRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecSAEncryptCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecSAEncryptCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecSAEncryptCreate(ctx, req.(*IpsecSAEncryptRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecSAEncryptUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecSAEncryptRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecSAEncryptUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecSAEncryptUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecSAEncryptUpdate(ctx, req.(*IpsecSAEncryptRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecSAEncryptDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecSAEncryptDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecSAEncryptDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecSAEncryptDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecSAEncryptDelete(ctx, req.(*IpsecSAEncryptDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecSAEncryptGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecSAEncryptGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecSAEncryptGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecSAEncryptGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecSAEncryptGet(ctx, req.(*IpsecSAEncryptGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecSADecryptCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecSADecryptRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecSADecryptCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecSADecryptCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecSADecryptCreate(ctx, req.(*IpsecSADecryptRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecSADecryptUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecSADecryptRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecSADecryptUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecSADecryptUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecSADecryptUpdate(ctx, req.(*IpsecSADecryptRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecSADecryptDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecSADecryptDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecSADecryptDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecSADecryptDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecSADecryptDelete(ctx, req.(*IpsecSADecryptDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecSADecryptGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecSADecryptGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecSADecryptGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecSADecryptGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecSADecryptGet(ctx, req.(*IpsecSADecryptGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_IpsecGlobalStatisticsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecGlobalStatisticsGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecGlobalStatisticsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecGlobalStatisticsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecGlobalStatisticsGet(ctx, req.(*IpsecGlobalStatisticsGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ipsec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ipsec.Ipsec",
	HandlerType: (*IpsecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IpsecRuleCreate",
			Handler:    _Ipsec_IpsecRuleCreate_Handler,
		},
		{
			MethodName: "IpsecRuleUpdate",
			Handler:    _Ipsec_IpsecRuleUpdate_Handler,
		},
		{
			MethodName: "IpsecRuleDelete",
			Handler:    _Ipsec_IpsecRuleDelete_Handler,
		},
		{
			MethodName: "IpsecRuleGet",
			Handler:    _Ipsec_IpsecRuleGet_Handler,
		},
		{
			MethodName: "IpsecSAEncryptCreate",
			Handler:    _Ipsec_IpsecSAEncryptCreate_Handler,
		},
		{
			MethodName: "IpsecSAEncryptUpdate",
			Handler:    _Ipsec_IpsecSAEncryptUpdate_Handler,
		},
		{
			MethodName: "IpsecSAEncryptDelete",
			Handler:    _Ipsec_IpsecSAEncryptDelete_Handler,
		},
		{
			MethodName: "IpsecSAEncryptGet",
			Handler:    _Ipsec_IpsecSAEncryptGet_Handler,
		},
		{
			MethodName: "IpsecSADecryptCreate",
			Handler:    _Ipsec_IpsecSADecryptCreate_Handler,
		},
		{
			MethodName: "IpsecSADecryptUpdate",
			Handler:    _Ipsec_IpsecSADecryptUpdate_Handler,
		},
		{
			MethodName: "IpsecSADecryptDelete",
			Handler:    _Ipsec_IpsecSADecryptDelete_Handler,
		},
		{
			MethodName: "IpsecSADecryptGet",
			Handler:    _Ipsec_IpsecSADecryptGet_Handler,
		},
		{
			MethodName: "IpsecGlobalStatisticsGet",
			Handler:    _Ipsec_IpsecGlobalStatisticsGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipsec.proto",
}

func (m *Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Key) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyInfo != nil {
		nn1, err := m.KeyInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Key_Key) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}
func (m *Key_KeyLocation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintIpsec(dAtA, i, uint64(m.KeyLocation))
	return i, nil
}
func (m *IpsecSAEncrypt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncrypt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n2, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Protocol != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Protocol))
	}
	if m.AuthenticationAlgorithm != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.AuthenticationAlgorithm))
	}
	if m.AuthenticationKey != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.AuthenticationKey.Size()))
		n3, err := m.AuthenticationKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.EncryptionAlgorithm != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptionAlgorithm))
	}
	if m.EncryptionKey != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptionKey.Size()))
		n4, err := m.EncryptionKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.LocalGatewayIp != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.LocalGatewayIp.Size()))
		n5, err := m.LocalGatewayIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.RemoteGatewayIp != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RemoteGatewayIp.Size()))
		n6, err := m.RemoteGatewayIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Spi != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Spi))
	}
	if m.NatTraversalPort != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.NatTraversalPort))
	}
	if m.Salt != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Salt))
	}
	if m.Iv != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Iv))
	}
	if m.TepVrf != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.TepVrf.Size()))
		n7, err := m.TepVrf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *IpsecSADecrypt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecrypt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n8, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Protocol != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Protocol))
	}
	if m.AuthenticationAlgorithm != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.AuthenticationAlgorithm))
	}
	if m.AuthenticationKey != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.AuthenticationKey.Size()))
		n9, err := m.AuthenticationKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.DecryptionAlgorithm != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecryptionAlgorithm))
	}
	if m.RekeyDecAlgorithm != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RekeyDecAlgorithm))
	}
	if m.DecryptionKey != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecryptionKey.Size()))
		n10, err := m.DecryptionKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.RekeyAuthenticationKey != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RekeyAuthenticationKey.Size()))
		n11, err := m.RekeyAuthenticationKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.RekeyDecryptionKey != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RekeyDecryptionKey.Size()))
		n12, err := m.RekeyDecryptionKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Spi != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Spi))
	}
	if m.RekeyActive != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RekeyActive))
	}
	if m.RekeySpi != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RekeySpi))
	}
	if m.Salt != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Salt))
	}
	if m.TepVrf != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.TepVrf.Size()))
		n13, err := m.TepVrf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *IPSecSAEncryptGetSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPSecSAEncryptGetSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n14, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Protocol != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Protocol))
	}
	if m.AuthenticationAlgorithm != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.AuthenticationAlgorithm))
	}
	if m.AuthenticationKey != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.AuthenticationKey.Size()))
		n15, err := m.AuthenticationKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.EncryptionAlgorithm != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptionAlgorithm))
	}
	if m.EncryptionKey != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptionKey.Size()))
		n16, err := m.EncryptionKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.LocalGatewayIp != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.LocalGatewayIp.Size()))
		n17, err := m.LocalGatewayIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.RemoteGatewayIp != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RemoteGatewayIp.Size()))
		n18, err := m.RemoteGatewayIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Spi != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Spi))
	}
	if m.NatTraversalPort != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.NatTraversalPort))
	}
	if m.Salt != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Salt))
	}
	if m.Iv != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Iv))
	}
	if m.KeyIndex != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyIndex))
	}
	if m.IvSize != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.IvSize))
	}
	if m.IcvSize != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.IcvSize))
	}
	if m.SeqNo != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.SeqNo))
	}
	if m.TotalPkts != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.TotalPkts))
	}
	if m.TotalBytes != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.TotalBytes))
	}
	if m.TotalDrops != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.TotalDrops))
	}
	if m.TotalRxPkts != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.TotalRxPkts))
	}
	if m.TotalRxBytes != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.TotalRxBytes))
	}
	if m.TotalRxDrops != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.TotalRxDrops))
	}
	if m.TepVrf != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.TepVrf.Size()))
		n19, err := m.TepVrf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *IPSecSADecryptGetSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPSecSADecryptGetSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n20, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Protocol != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Protocol))
	}
	if m.AuthenticationAlgorithm != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.AuthenticationAlgorithm))
	}
	if m.AuthenticationKey != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.AuthenticationKey.Size()))
		n21, err := m.AuthenticationKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.DecryptionAlgorithm != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecryptionAlgorithm))
	}
	if m.RekeyDecAlgorithm != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RekeyDecAlgorithm))
	}
	if m.DecryptionKey != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecryptionKey.Size()))
		n22, err := m.DecryptionKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.RekeyAuthenticationKey != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RekeyAuthenticationKey.Size()))
		n23, err := m.RekeyAuthenticationKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.RekeyDecryptionKey != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RekeyDecryptionKey.Size()))
		n24, err := m.RekeyDecryptionKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.LocalGatewayIp != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.LocalGatewayIp.Size()))
		n25, err := m.LocalGatewayIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.RemoteGatewayIp != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RemoteGatewayIp.Size()))
		n26, err := m.RemoteGatewayIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.Spi != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Spi))
	}
	if m.RekeyActive != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RekeyActive))
	}
	if m.RekeySpi != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RekeySpi))
	}
	if m.Salt != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Salt))
	}
	if m.KeyIndex != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyIndex))
	}
	if m.NewKeyIndex != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.NewKeyIndex))
	}
	if m.IvSize != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.IvSize))
	}
	if m.IcvSize != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.IcvSize))
	}
	if m.SeqNo != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.SeqNo))
	}
	if m.TotalPkts != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.TotalPkts))
	}
	if m.TotalBytes != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.TotalBytes))
	}
	if m.TotalDrops != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.TotalDrops))
	}
	if m.TotalRxPkts != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.TotalRxPkts))
	}
	if m.TotalRxBytes != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.TotalRxBytes))
	}
	if m.TotalRxDrops != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.TotalRxDrops))
	}
	if m.TepVrf != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.TepVrf.Size()))
		n27, err := m.TepVrf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.SeqNoBmp != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.SeqNoBmp))
	}
	if m.LastReplaySeqNo != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.LastReplaySeqNo))
	}
	return i, nil
}

func (m *IPSecGlobalStatisticsGetSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPSecGlobalStatisticsGetSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EncryptInputDescErrors != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptInputDescErrors))
	}
	if m.EncryptOutputDescErrors != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptOutputDescErrors))
	}
	if m.EncryptCbRingBaseErrors != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptCbRingBaseErrors))
	}
	if m.EncryptInputPageErrors != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptInputPageErrors))
	}
	if m.EncryptBarcoReqAddrErrors != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptBarcoReqAddrErrors))
	}
	if m.EncryptBarcoCbBaseErrors != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptBarcoCbBaseErrors))
	}
	if m.EncryptPadAddrErrors != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptPadAddrErrors))
	}
	if m.EncryptTailBytesErrors != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptTailBytesErrors))
	}
	if m.EncryptOutputPageErrors != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptOutputPageErrors))
	}
	if m.EncryptStage4InpageErrors != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptStage4InpageErrors))
	}
	if m.EncryptTable0InpageErrors != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptTable0InpageErrors))
	}
	if m.EncryptTable2InpageErrors != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptTable2InpageErrors))
	}
	if m.EncryptTable3InpageErrors != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptTable3InpageErrors))
	}
	if m.EncryptBadBarcoAddrErrors != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptBadBarcoAddrErrors))
	}
	if m.EncryptBarcoFullErrors != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptBarcoFullErrors))
	}
	if m.EncryptCbRingDmaErrors != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncryptCbRingDmaErrors))
	}
	if m.DecryptInputDescErrors != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecryptInputDescErrors))
	}
	if m.DecryptOutputDescErrors != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecryptOutputDescErrors))
	}
	if m.DecryptCbRingBaseErrors != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecryptCbRingBaseErrors))
	}
	if m.DecryptInputPageErrors != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecryptInputPageErrors))
	}
	if m.DecryptBarcoReqAddrErrors != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecryptBarcoReqAddrErrors))
	}
	if m.DecryptBarcoCbAddrErrors != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecryptBarcoCbAddrErrors))
	}
	if m.DecryptStage4InpageErrors != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecryptStage4InpageErrors))
	}
	if m.DecryptOutputPageErrors != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecryptOutputPageErrors))
	}
	if m.DecryptTxdma1EnterCounters != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecryptTxdma1EnterCounters))
	}
	if m.DecryptTxdma2EnterCounters != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecryptTxdma2EnterCounters))
	}
	if m.DecryptTxdma1DropCounters != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecryptTxdma1DropCounters))
	}
	return i, nil
}

func (m *IpsecSAAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SaActionType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.SaActionType))
	}
	if m.SaHandle != nil {
		nn28, err := m.SaHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn28
	}
	return i, nil
}

func (m *IpsecSAAction_EncHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EncHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.EncHandle.Size()))
		n29, err := m.EncHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *IpsecSAAction_DecHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DecHandle != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.DecHandle.Size()))
		n30, err := m.DecHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *IpsecRuleMatchSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleMatchSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RuleId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.RuleId))
	}
	if m.Match != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Match.Size()))
		n31, err := m.Match.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.SaAction != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.SaAction.Size()))
		n32, err := m.SaAction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func (m *IpsecRuleSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n33, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.VrfKeyHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.VrfKeyHandle.Size()))
		n34, err := m.VrfKeyHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecRuleRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecRuleStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Handle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Handle))
		i += 8
	}
	return i, nil
}

func (m *IpsecRuleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Status.Size()))
		n35, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *IpsecRuleResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecRuleDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n36, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *IpsecRuleDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecRuleDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *IpsecRuleDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecRuleGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n37, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}

func (m *IpsecRuleGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecRuleEntryStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleEntryStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumTcpSessions != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.NumTcpSessions))
	}
	if m.NumUdpSessions != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.NumUdpSessions))
	}
	if m.NumOtherSessions != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.NumOtherSessions))
	}
	return i, nil
}

func (m *IpsecRuleStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for _, msg := range m.Stats {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecRuleGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Spec.Size()))
		n38, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Status.Size()))
		n39, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Stats.Size()))
		n40, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}

func (m *IpsecRuleGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSAEncryptRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSAEncryptStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IpsecSaHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.IpsecSaHandle))
		i += 8
	}
	return i, nil
}

func (m *IpsecSAEncryptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.ApiStatus))
	}
	if m.IpsecSaStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.IpsecSaStatus.Size()))
		n41, err := m.IpsecSaStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func (m *IpsecSAEncryptResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSAEncryptDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n42, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}

func (m *IpsecSAEncryptDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSAEncryptDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *IpsecSAEncryptDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSAEncryptGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n43, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}

func (m *IpsecSAEncryptGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSAEncryptGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Spec.Size()))
		n44, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Status.Size()))
		n45, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}

func (m *IpsecSAEncryptGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSAEncryptGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSADecryptRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSADecryptStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IpsecSaHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.IpsecSaHandle))
		i += 8
	}
	return i, nil
}

func (m *IpsecSADecryptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.ApiStatus))
	}
	if m.IpsecSaStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.IpsecSaStatus.Size()))
		n46, err := m.IpsecSaStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}

func (m *IpsecSADecryptResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSADecryptDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n47, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}

func (m *IpsecSADecryptDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSADecryptDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *IpsecSADecryptDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSADecryptGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n48, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}

func (m *IpsecSADecryptGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecSADecryptGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Spec.Size()))
		n49, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Status.Size()))
		n50, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}

func (m *IpsecSADecryptGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSADecryptGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecGlobalStatisticsGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecGlobalStatisticsGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClearOnRead != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.ClearOnRead))
	}
	return i, nil
}

func (m *IpsecGlobalStatisticsGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecGlobalStatisticsGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecGlobalStatisticsGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecGlobalStatisticsGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsec(dAtA, i, uint64(m.Spec.Size()))
		n51, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}

func (m *IpsecGlobalStatisticsGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecGlobalStatisticsGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintIpsec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Key) Size() (n int) {
	var l int
	_ = l
	if m.KeyInfo != nil {
		n += m.KeyInfo.Size()
	}
	return n
}

func (m *Key_Key) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}
func (m *Key_KeyLocation) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovIpsec(uint64(m.KeyLocation))
	return n
}
func (m *IpsecSAEncrypt) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Protocol != 0 {
		n += 1 + sovIpsec(uint64(m.Protocol))
	}
	if m.AuthenticationAlgorithm != 0 {
		n += 1 + sovIpsec(uint64(m.AuthenticationAlgorithm))
	}
	if m.AuthenticationKey != nil {
		l = m.AuthenticationKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.EncryptionAlgorithm != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptionAlgorithm))
	}
	if m.EncryptionKey != nil {
		l = m.EncryptionKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.LocalGatewayIp != nil {
		l = m.LocalGatewayIp.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.RemoteGatewayIp != nil {
		l = m.RemoteGatewayIp.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Spi != 0 {
		n += 1 + sovIpsec(uint64(m.Spi))
	}
	if m.NatTraversalPort != 0 {
		n += 1 + sovIpsec(uint64(m.NatTraversalPort))
	}
	if m.Salt != 0 {
		n += 1 + sovIpsec(uint64(m.Salt))
	}
	if m.Iv != 0 {
		n += 1 + sovIpsec(uint64(m.Iv))
	}
	if m.TepVrf != nil {
		l = m.TepVrf.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecSADecrypt) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Protocol != 0 {
		n += 1 + sovIpsec(uint64(m.Protocol))
	}
	if m.AuthenticationAlgorithm != 0 {
		n += 1 + sovIpsec(uint64(m.AuthenticationAlgorithm))
	}
	if m.AuthenticationKey != nil {
		l = m.AuthenticationKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.DecryptionAlgorithm != 0 {
		n += 1 + sovIpsec(uint64(m.DecryptionAlgorithm))
	}
	if m.RekeyDecAlgorithm != 0 {
		n += 1 + sovIpsec(uint64(m.RekeyDecAlgorithm))
	}
	if m.DecryptionKey != nil {
		l = m.DecryptionKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.RekeyAuthenticationKey != nil {
		l = m.RekeyAuthenticationKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.RekeyDecryptionKey != nil {
		l = m.RekeyDecryptionKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Spi != 0 {
		n += 1 + sovIpsec(uint64(m.Spi))
	}
	if m.RekeyActive != 0 {
		n += 1 + sovIpsec(uint64(m.RekeyActive))
	}
	if m.RekeySpi != 0 {
		n += 1 + sovIpsec(uint64(m.RekeySpi))
	}
	if m.Salt != 0 {
		n += 1 + sovIpsec(uint64(m.Salt))
	}
	if m.TepVrf != nil {
		l = m.TepVrf.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IPSecSAEncryptGetSpec) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Protocol != 0 {
		n += 1 + sovIpsec(uint64(m.Protocol))
	}
	if m.AuthenticationAlgorithm != 0 {
		n += 1 + sovIpsec(uint64(m.AuthenticationAlgorithm))
	}
	if m.AuthenticationKey != nil {
		l = m.AuthenticationKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.EncryptionAlgorithm != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptionAlgorithm))
	}
	if m.EncryptionKey != nil {
		l = m.EncryptionKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.LocalGatewayIp != nil {
		l = m.LocalGatewayIp.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.RemoteGatewayIp != nil {
		l = m.RemoteGatewayIp.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Spi != 0 {
		n += 1 + sovIpsec(uint64(m.Spi))
	}
	if m.NatTraversalPort != 0 {
		n += 1 + sovIpsec(uint64(m.NatTraversalPort))
	}
	if m.Salt != 0 {
		n += 1 + sovIpsec(uint64(m.Salt))
	}
	if m.Iv != 0 {
		n += 1 + sovIpsec(uint64(m.Iv))
	}
	if m.KeyIndex != 0 {
		n += 1 + sovIpsec(uint64(m.KeyIndex))
	}
	if m.IvSize != 0 {
		n += 1 + sovIpsec(uint64(m.IvSize))
	}
	if m.IcvSize != 0 {
		n += 1 + sovIpsec(uint64(m.IcvSize))
	}
	if m.SeqNo != 0 {
		n += 2 + sovIpsec(uint64(m.SeqNo))
	}
	if m.TotalPkts != 0 {
		n += 2 + sovIpsec(uint64(m.TotalPkts))
	}
	if m.TotalBytes != 0 {
		n += 2 + sovIpsec(uint64(m.TotalBytes))
	}
	if m.TotalDrops != 0 {
		n += 2 + sovIpsec(uint64(m.TotalDrops))
	}
	if m.TotalRxPkts != 0 {
		n += 2 + sovIpsec(uint64(m.TotalRxPkts))
	}
	if m.TotalRxBytes != 0 {
		n += 2 + sovIpsec(uint64(m.TotalRxBytes))
	}
	if m.TotalRxDrops != 0 {
		n += 2 + sovIpsec(uint64(m.TotalRxDrops))
	}
	if m.TepVrf != nil {
		l = m.TepVrf.Size()
		n += 2 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IPSecSADecryptGetSpec) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Protocol != 0 {
		n += 1 + sovIpsec(uint64(m.Protocol))
	}
	if m.AuthenticationAlgorithm != 0 {
		n += 1 + sovIpsec(uint64(m.AuthenticationAlgorithm))
	}
	if m.AuthenticationKey != nil {
		l = m.AuthenticationKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.DecryptionAlgorithm != 0 {
		n += 1 + sovIpsec(uint64(m.DecryptionAlgorithm))
	}
	if m.RekeyDecAlgorithm != 0 {
		n += 1 + sovIpsec(uint64(m.RekeyDecAlgorithm))
	}
	if m.DecryptionKey != nil {
		l = m.DecryptionKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.RekeyAuthenticationKey != nil {
		l = m.RekeyAuthenticationKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.RekeyDecryptionKey != nil {
		l = m.RekeyDecryptionKey.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.LocalGatewayIp != nil {
		l = m.LocalGatewayIp.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.RemoteGatewayIp != nil {
		l = m.RemoteGatewayIp.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Spi != 0 {
		n += 1 + sovIpsec(uint64(m.Spi))
	}
	if m.RekeyActive != 0 {
		n += 1 + sovIpsec(uint64(m.RekeyActive))
	}
	if m.RekeySpi != 0 {
		n += 1 + sovIpsec(uint64(m.RekeySpi))
	}
	if m.Salt != 0 {
		n += 1 + sovIpsec(uint64(m.Salt))
	}
	if m.KeyIndex != 0 {
		n += 2 + sovIpsec(uint64(m.KeyIndex))
	}
	if m.NewKeyIndex != 0 {
		n += 2 + sovIpsec(uint64(m.NewKeyIndex))
	}
	if m.IvSize != 0 {
		n += 2 + sovIpsec(uint64(m.IvSize))
	}
	if m.IcvSize != 0 {
		n += 2 + sovIpsec(uint64(m.IcvSize))
	}
	if m.SeqNo != 0 {
		n += 2 + sovIpsec(uint64(m.SeqNo))
	}
	if m.TotalPkts != 0 {
		n += 2 + sovIpsec(uint64(m.TotalPkts))
	}
	if m.TotalBytes != 0 {
		n += 2 + sovIpsec(uint64(m.TotalBytes))
	}
	if m.TotalDrops != 0 {
		n += 2 + sovIpsec(uint64(m.TotalDrops))
	}
	if m.TotalRxPkts != 0 {
		n += 2 + sovIpsec(uint64(m.TotalRxPkts))
	}
	if m.TotalRxBytes != 0 {
		n += 2 + sovIpsec(uint64(m.TotalRxBytes))
	}
	if m.TotalRxDrops != 0 {
		n += 2 + sovIpsec(uint64(m.TotalRxDrops))
	}
	if m.TepVrf != nil {
		l = m.TepVrf.Size()
		n += 2 + l + sovIpsec(uint64(l))
	}
	if m.SeqNoBmp != 0 {
		n += 2 + sovIpsec(uint64(m.SeqNoBmp))
	}
	if m.LastReplaySeqNo != 0 {
		n += 2 + sovIpsec(uint64(m.LastReplaySeqNo))
	}
	return n
}

func (m *IPSecGlobalStatisticsGetSpec) Size() (n int) {
	var l int
	_ = l
	if m.EncryptInputDescErrors != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptInputDescErrors))
	}
	if m.EncryptOutputDescErrors != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptOutputDescErrors))
	}
	if m.EncryptCbRingBaseErrors != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptCbRingBaseErrors))
	}
	if m.EncryptInputPageErrors != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptInputPageErrors))
	}
	if m.EncryptBarcoReqAddrErrors != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptBarcoReqAddrErrors))
	}
	if m.EncryptBarcoCbBaseErrors != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptBarcoCbBaseErrors))
	}
	if m.EncryptPadAddrErrors != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptPadAddrErrors))
	}
	if m.EncryptTailBytesErrors != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptTailBytesErrors))
	}
	if m.EncryptOutputPageErrors != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptOutputPageErrors))
	}
	if m.EncryptStage4InpageErrors != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptStage4InpageErrors))
	}
	if m.EncryptTable0InpageErrors != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptTable0InpageErrors))
	}
	if m.EncryptTable2InpageErrors != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptTable2InpageErrors))
	}
	if m.EncryptTable3InpageErrors != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptTable3InpageErrors))
	}
	if m.EncryptBadBarcoAddrErrors != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptBadBarcoAddrErrors))
	}
	if m.EncryptBarcoFullErrors != 0 {
		n += 1 + sovIpsec(uint64(m.EncryptBarcoFullErrors))
	}
	if m.EncryptCbRingDmaErrors != 0 {
		n += 2 + sovIpsec(uint64(m.EncryptCbRingDmaErrors))
	}
	if m.DecryptInputDescErrors != 0 {
		n += 2 + sovIpsec(uint64(m.DecryptInputDescErrors))
	}
	if m.DecryptOutputDescErrors != 0 {
		n += 2 + sovIpsec(uint64(m.DecryptOutputDescErrors))
	}
	if m.DecryptCbRingBaseErrors != 0 {
		n += 2 + sovIpsec(uint64(m.DecryptCbRingBaseErrors))
	}
	if m.DecryptInputPageErrors != 0 {
		n += 2 + sovIpsec(uint64(m.DecryptInputPageErrors))
	}
	if m.DecryptBarcoReqAddrErrors != 0 {
		n += 2 + sovIpsec(uint64(m.DecryptBarcoReqAddrErrors))
	}
	if m.DecryptBarcoCbAddrErrors != 0 {
		n += 2 + sovIpsec(uint64(m.DecryptBarcoCbAddrErrors))
	}
	if m.DecryptStage4InpageErrors != 0 {
		n += 2 + sovIpsec(uint64(m.DecryptStage4InpageErrors))
	}
	if m.DecryptOutputPageErrors != 0 {
		n += 2 + sovIpsec(uint64(m.DecryptOutputPageErrors))
	}
	if m.DecryptTxdma1EnterCounters != 0 {
		n += 2 + sovIpsec(uint64(m.DecryptTxdma1EnterCounters))
	}
	if m.DecryptTxdma2EnterCounters != 0 {
		n += 2 + sovIpsec(uint64(m.DecryptTxdma2EnterCounters))
	}
	if m.DecryptTxdma1DropCounters != 0 {
		n += 2 + sovIpsec(uint64(m.DecryptTxdma1DropCounters))
	}
	return n
}

func (m *IpsecSAAction) Size() (n int) {
	var l int
	_ = l
	if m.SaActionType != 0 {
		n += 1 + sovIpsec(uint64(m.SaActionType))
	}
	if m.SaHandle != nil {
		n += m.SaHandle.Size()
	}
	return n
}

func (m *IpsecSAAction_EncHandle) Size() (n int) {
	var l int
	_ = l
	if m.EncHandle != nil {
		l = m.EncHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}
func (m *IpsecSAAction_DecHandle) Size() (n int) {
	var l int
	_ = l
	if m.DecHandle != nil {
		l = m.DecHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}
func (m *IpsecRuleMatchSpec) Size() (n int) {
	var l int
	_ = l
	if m.RuleId != 0 {
		n += 1 + sovIpsec(uint64(m.RuleId))
	}
	if m.Match != nil {
		l = m.Match.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.SaAction != nil {
		l = m.SaAction.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecRuleSpec) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.VrfKeyHandle != nil {
		l = m.VrfKeyHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecRuleRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecRuleStatus) Size() (n int) {
	var l int
	_ = l
	if m.Handle != 0 {
		n += 9
	}
	return n
}

func (m *IpsecRuleResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpsec(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecRuleResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecRuleDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecRuleDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecRuleDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpsec(uint64(m.ApiStatus))
	}
	return n
}

func (m *IpsecRuleDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecRuleGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecRuleGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecRuleEntryStats) Size() (n int) {
	var l int
	_ = l
	if m.NumTcpSessions != 0 {
		n += 1 + sovIpsec(uint64(m.NumTcpSessions))
	}
	if m.NumUdpSessions != 0 {
		n += 1 + sovIpsec(uint64(m.NumUdpSessions))
	}
	if m.NumOtherSessions != 0 {
		n += 1 + sovIpsec(uint64(m.NumOtherSessions))
	}
	return n
}

func (m *IpsecRuleStats) Size() (n int) {
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecRuleGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpsec(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecRuleGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSAEncryptRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSAEncryptStatus) Size() (n int) {
	var l int
	_ = l
	if m.IpsecSaHandle != 0 {
		n += 9
	}
	return n
}

func (m *IpsecSAEncryptResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpsec(uint64(m.ApiStatus))
	}
	if m.IpsecSaStatus != nil {
		l = m.IpsecSaStatus.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecSAEncryptResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSAEncryptDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecSAEncryptDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSAEncryptDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpsec(uint64(m.ApiStatus))
	}
	return n
}

func (m *IpsecSAEncryptDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSAEncryptGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecSAEncryptGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSAEncryptGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpsec(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecSAEncryptGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSADecryptRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSADecryptStatus) Size() (n int) {
	var l int
	_ = l
	if m.IpsecSaHandle != 0 {
		n += 9
	}
	return n
}

func (m *IpsecSADecryptResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpsec(uint64(m.ApiStatus))
	}
	if m.IpsecSaStatus != nil {
		l = m.IpsecSaStatus.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecSADecryptResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSADecryptDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecSADecryptDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSADecryptDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpsec(uint64(m.ApiStatus))
	}
	return n
}

func (m *IpsecSADecryptDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSADecryptGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecSADecryptGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecSADecryptGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpsec(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecSADecryptGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecGlobalStatisticsGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.ClearOnRead != 0 {
		n += 1 + sovIpsec(uint64(m.ClearOnRead))
	}
	return n
}

func (m *IpsecGlobalStatisticsGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func (m *IpsecGlobalStatisticsGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpsec(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovIpsec(uint64(l))
	}
	return n
}

func (m *IpsecGlobalStatisticsGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpsec(uint64(l))
		}
	}
	return n
}

func sovIpsec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIpsec(x uint64) (n int) {
	return sovIpsec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.KeyInfo = &Key_Key{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyLocation", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyInfo = &Key_KeyLocation{v}
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncrypt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncrypt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncrypt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecSAEncryptKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= (IpsecProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationAlgorithm", wireType)
			}
			m.AuthenticationAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthenticationAlgorithm |= (AuthenticationAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthenticationKey == nil {
				m.AuthenticationKey = &Key{}
			}
			if err := m.AuthenticationKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionAlgorithm", wireType)
			}
			m.EncryptionAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptionAlgorithm |= (EncryptionAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncryptionKey == nil {
				m.EncryptionKey = &Key{}
			}
			if err := m.EncryptionKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalGatewayIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalGatewayIp == nil {
				m.LocalGatewayIp = &IPAddress{}
			}
			if err := m.LocalGatewayIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteGatewayIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteGatewayIp == nil {
				m.RemoteGatewayIp = &IPAddress{}
			}
			if err := m.RemoteGatewayIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spi", wireType)
			}
			m.Spi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Spi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatTraversalPort", wireType)
			}
			m.NatTraversalPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NatTraversalPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iv", wireType)
			}
			m.Iv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iv |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TepVrf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TepVrf == nil {
				m.TepVrf = &VrfKeyHandle{}
			}
			if err := m.TepVrf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecrypt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecrypt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecrypt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecSADecryptKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= (IpsecProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationAlgorithm", wireType)
			}
			m.AuthenticationAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthenticationAlgorithm |= (AuthenticationAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthenticationKey == nil {
				m.AuthenticationKey = &Key{}
			}
			if err := m.AuthenticationKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptionAlgorithm", wireType)
			}
			m.DecryptionAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecryptionAlgorithm |= (EncryptionAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeyDecAlgorithm", wireType)
			}
			m.RekeyDecAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RekeyDecAlgorithm |= (EncryptionAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecryptionKey == nil {
				m.DecryptionKey = &Key{}
			}
			if err := m.DecryptionKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeyAuthenticationKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RekeyAuthenticationKey == nil {
				m.RekeyAuthenticationKey = &Key{}
			}
			if err := m.RekeyAuthenticationKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeyDecryptionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RekeyDecryptionKey == nil {
				m.RekeyDecryptionKey = &Key{}
			}
			if err := m.RekeyDecryptionKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spi", wireType)
			}
			m.Spi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Spi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeyActive", wireType)
			}
			m.RekeyActive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RekeyActive |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeySpi", wireType)
			}
			m.RekeySpi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RekeySpi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TepVrf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TepVrf == nil {
				m.TepVrf = &VrfKeyHandle{}
			}
			if err := m.TepVrf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPSecSAEncryptGetSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPSecSAEncryptGetSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPSecSAEncryptGetSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecSAEncryptKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= (IpsecProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationAlgorithm", wireType)
			}
			m.AuthenticationAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthenticationAlgorithm |= (AuthenticationAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthenticationKey == nil {
				m.AuthenticationKey = &Key{}
			}
			if err := m.AuthenticationKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionAlgorithm", wireType)
			}
			m.EncryptionAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptionAlgorithm |= (EncryptionAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncryptionKey == nil {
				m.EncryptionKey = &Key{}
			}
			if err := m.EncryptionKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalGatewayIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalGatewayIp == nil {
				m.LocalGatewayIp = &IPAddress{}
			}
			if err := m.LocalGatewayIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteGatewayIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteGatewayIp == nil {
				m.RemoteGatewayIp = &IPAddress{}
			}
			if err := m.RemoteGatewayIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spi", wireType)
			}
			m.Spi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Spi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatTraversalPort", wireType)
			}
			m.NatTraversalPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NatTraversalPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iv", wireType)
			}
			m.Iv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iv |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIndex", wireType)
			}
			m.KeyIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IvSize", wireType)
			}
			m.IvSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IvSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcvSize", wireType)
			}
			m.IcvSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IcvSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNo", wireType)
			}
			m.SeqNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNo |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPkts", wireType)
			}
			m.TotalPkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBytes", wireType)
			}
			m.TotalBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBytes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDrops", wireType)
			}
			m.TotalDrops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDrops |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRxPkts", wireType)
			}
			m.TotalRxPkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRxPkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRxBytes", wireType)
			}
			m.TotalRxBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRxBytes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRxDrops", wireType)
			}
			m.TotalRxDrops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRxDrops |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TepVrf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TepVrf == nil {
				m.TepVrf = &VrfKeyHandle{}
			}
			if err := m.TepVrf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPSecSADecryptGetSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPSecSADecryptGetSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPSecSADecryptGetSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecSADecryptKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= (IpsecProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationAlgorithm", wireType)
			}
			m.AuthenticationAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthenticationAlgorithm |= (AuthenticationAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthenticationKey == nil {
				m.AuthenticationKey = &Key{}
			}
			if err := m.AuthenticationKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptionAlgorithm", wireType)
			}
			m.DecryptionAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecryptionAlgorithm |= (EncryptionAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeyDecAlgorithm", wireType)
			}
			m.RekeyDecAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RekeyDecAlgorithm |= (EncryptionAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecryptionKey == nil {
				m.DecryptionKey = &Key{}
			}
			if err := m.DecryptionKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeyAuthenticationKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RekeyAuthenticationKey == nil {
				m.RekeyAuthenticationKey = &Key{}
			}
			if err := m.RekeyAuthenticationKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeyDecryptionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RekeyDecryptionKey == nil {
				m.RekeyDecryptionKey = &Key{}
			}
			if err := m.RekeyDecryptionKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalGatewayIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalGatewayIp == nil {
				m.LocalGatewayIp = &IPAddress{}
			}
			if err := m.LocalGatewayIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteGatewayIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteGatewayIp == nil {
				m.RemoteGatewayIp = &IPAddress{}
			}
			if err := m.RemoteGatewayIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spi", wireType)
			}
			m.Spi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Spi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeyActive", wireType)
			}
			m.RekeyActive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RekeyActive |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RekeySpi", wireType)
			}
			m.RekeySpi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RekeySpi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIndex", wireType)
			}
			m.KeyIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewKeyIndex", wireType)
			}
			m.NewKeyIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewKeyIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IvSize", wireType)
			}
			m.IvSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IvSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcvSize", wireType)
			}
			m.IcvSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IcvSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNo", wireType)
			}
			m.SeqNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNo |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPkts", wireType)
			}
			m.TotalPkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBytes", wireType)
			}
			m.TotalBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBytes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDrops", wireType)
			}
			m.TotalDrops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDrops |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRxPkts", wireType)
			}
			m.TotalRxPkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRxPkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRxBytes", wireType)
			}
			m.TotalRxBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRxBytes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRxDrops", wireType)
			}
			m.TotalRxDrops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRxDrops |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TepVrf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TepVrf == nil {
				m.TepVrf = &VrfKeyHandle{}
			}
			if err := m.TepVrf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNoBmp", wireType)
			}
			m.SeqNoBmp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNoBmp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReplaySeqNo", wireType)
			}
			m.LastReplaySeqNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastReplaySeqNo |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPSecGlobalStatisticsGetSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPSecGlobalStatisticsGetSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPSecGlobalStatisticsGetSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptInputDescErrors", wireType)
			}
			m.EncryptInputDescErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptInputDescErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptOutputDescErrors", wireType)
			}
			m.EncryptOutputDescErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptOutputDescErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptCbRingBaseErrors", wireType)
			}
			m.EncryptCbRingBaseErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptCbRingBaseErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptInputPageErrors", wireType)
			}
			m.EncryptInputPageErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptInputPageErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptBarcoReqAddrErrors", wireType)
			}
			m.EncryptBarcoReqAddrErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptBarcoReqAddrErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptBarcoCbBaseErrors", wireType)
			}
			m.EncryptBarcoCbBaseErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptBarcoCbBaseErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptPadAddrErrors", wireType)
			}
			m.EncryptPadAddrErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptPadAddrErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptTailBytesErrors", wireType)
			}
			m.EncryptTailBytesErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptTailBytesErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptOutputPageErrors", wireType)
			}
			m.EncryptOutputPageErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptOutputPageErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptStage4InpageErrors", wireType)
			}
			m.EncryptStage4InpageErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptStage4InpageErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptTable0InpageErrors", wireType)
			}
			m.EncryptTable0InpageErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptTable0InpageErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptTable2InpageErrors", wireType)
			}
			m.EncryptTable2InpageErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptTable2InpageErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptTable3InpageErrors", wireType)
			}
			m.EncryptTable3InpageErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptTable3InpageErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptBadBarcoAddrErrors", wireType)
			}
			m.EncryptBadBarcoAddrErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptBadBarcoAddrErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptBarcoFullErrors", wireType)
			}
			m.EncryptBarcoFullErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptBarcoFullErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptCbRingDmaErrors", wireType)
			}
			m.EncryptCbRingDmaErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptCbRingDmaErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptInputDescErrors", wireType)
			}
			m.DecryptInputDescErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecryptInputDescErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptOutputDescErrors", wireType)
			}
			m.DecryptOutputDescErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecryptOutputDescErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptCbRingBaseErrors", wireType)
			}
			m.DecryptCbRingBaseErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecryptCbRingBaseErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptInputPageErrors", wireType)
			}
			m.DecryptInputPageErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecryptInputPageErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptBarcoReqAddrErrors", wireType)
			}
			m.DecryptBarcoReqAddrErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecryptBarcoReqAddrErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptBarcoCbAddrErrors", wireType)
			}
			m.DecryptBarcoCbAddrErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecryptBarcoCbAddrErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptStage4InpageErrors", wireType)
			}
			m.DecryptStage4InpageErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecryptStage4InpageErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptOutputPageErrors", wireType)
			}
			m.DecryptOutputPageErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecryptOutputPageErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptTxdma1EnterCounters", wireType)
			}
			m.DecryptTxdma1EnterCounters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecryptTxdma1EnterCounters |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptTxdma2EnterCounters", wireType)
			}
			m.DecryptTxdma2EnterCounters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecryptTxdma2EnterCounters |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptTxdma1DropCounters", wireType)
			}
			m.DecryptTxdma1DropCounters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecryptTxdma1DropCounters |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaActionType", wireType)
			}
			m.SaActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaActionType |= (IpsecSAActionType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IpsecSAEncryptKeyHandle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SaHandle = &IpsecSAAction_EncHandle{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IpsecSADecryptKeyHandle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SaHandle = &IpsecSAAction_DecHandle{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleMatchSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleMatchSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleMatchSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleId", wireType)
			}
			m.RuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuleId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Match == nil {
				m.Match = &RuleMatch{}
			}
			if err := m.Match.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SaAction == nil {
				m.SaAction = &IpsecSAAction{}
			}
			if err := m.SaAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecRuleKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VrfKeyHandle == nil {
				m.VrfKeyHandle = &VrfKeyHandle{}
			}
			if err := m.VrfKeyHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &IpsecRuleMatchSpec{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecRuleSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &IpsecRuleStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecRuleResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecRuleKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecRuleDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecRuleDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecRuleKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecRuleGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleEntryStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleEntryStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleEntryStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTcpSessions", wireType)
			}
			m.NumTcpSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTcpSessions |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUdpSessions", wireType)
			}
			m.NumUdpSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumUdpSessions |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOtherSessions", wireType)
			}
			m.NumOtherSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOtherSessions |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &IpsecRuleEntryStats{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &IpsecRuleSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &IpsecRuleStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &IpsecRuleStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecRuleGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecSAEncrypt{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpsecSaHandle", wireType)
			}
			m.IpsecSaHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.IpsecSaHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpsecSaStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpsecSaStatus == nil {
				m.IpsecSaStatus = &IpsecSAEncryptStatus{}
			}
			if err := m.IpsecSaStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecSAEncryptResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecSAEncryptKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecSAEncryptDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecSAEncryptDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecSAEncryptKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecSAEncryptGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &IPSecSAEncryptGetSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &IpsecSAEncryptStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSAEncryptGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSAEncryptGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSAEncryptGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecSAEncryptGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecSADecrypt{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpsecSaHandle", wireType)
			}
			m.IpsecSaHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.IpsecSaHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpsecSaStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpsecSaStatus == nil {
				m.IpsecSaStatus = &IpsecSADecryptStatus{}
			}
			if err := m.IpsecSaStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecSADecryptResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecSADecryptKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecSADecryptDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecSADecryptDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecSADecryptKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecSADecryptGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &IPSecSADecryptGetSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &IpsecSADecryptStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSADecryptGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSADecryptGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSADecryptGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecSADecryptGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecGlobalStatisticsGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecGlobalStatisticsGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecGlobalStatisticsGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearOnRead", wireType)
			}
			m.ClearOnRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClearOnRead |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecGlobalStatisticsGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecGlobalStatisticsGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecGlobalStatisticsGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecGlobalStatisticsGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecGlobalStatisticsGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecGlobalStatisticsGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecGlobalStatisticsGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &IPSecGlobalStatisticsGetSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecGlobalStatisticsGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecGlobalStatisticsGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecGlobalStatisticsGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecGlobalStatisticsGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIpsec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIpsec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpsec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIpsec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIpsec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIpsec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIpsec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIpsec   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ipsec.proto", fileDescriptorIpsec) }

var fileDescriptorIpsec = []byte{
	// 2896 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x4b, 0x73, 0xdb, 0xd6,
	0xf5, 0x37, 0xf5, 0xd6, 0x91, 0x48, 0x51, 0x57, 0x2f, 0x5a, 0xef, 0xc0, 0xf9, 0xfb, 0xef, 0x38,
	0x19, 0xc5, 0xa6, 0x93, 0xa6, 0x76, 0x35, 0x71, 0x28, 0x8a, 0xb1, 0x14, 0x5b, 0x22, 0x0b, 0x32,
	0xa9, 0xd3, 0x74, 0x82, 0x01, 0xc1, 0x2b, 0x09, 0x15, 0x05, 0xc0, 0x00, 0xa8, 0x98, 0x59, 0x77,
	0xd1, 0x45, 0xa6, 0xbb, 0x4e, 0x3f, 0x41, 0x97, 0x5d, 0xb5, 0xf9, 0x0e, 0xed, 0xae, 0x8b, 0x2e,
	0xba, 0xca, 0x74, 0x32, 0xd3, 0x4d, 0x97, 0x99, 0x7e, 0x80, 0xce, 0x7d, 0x80, 0xb8, 0x00, 0x2e,
	0x48, 0x2a, 0x76, 0xa6, 0x8b, 0x7a, 0x91, 0x89, 0x88, 0xf3, 0x3b, 0x8f, 0x7b, 0x1e, 0xbf, 0x7b,
	0x2f, 0x60, 0x98, 0x31, 0x1d, 0x0f, 0x1b, 0x3b, 0x8e, 0x6b, 0xfb, 0x36, 0x1a, 0xa7, 0x3f, 0x56,
	0x67, 0xfc, 0xae, 0x83, 0x3d, 0xf6, 0x6c, 0x75, 0xea, 0xfc, 0x8c, 0xfd, 0xa5, 0x7c, 0x04, 0xa3,
	0x8f, 0x71, 0x17, 0x21, 0x18, 0x3d, 0xc7, 0xdd, 0x42, 0x66, 0x3b, 0x73, 0x6b, 0xf6, 0xe0, 0x9a,
	0x4a, 0x7e, 0xa0, 0x1b, 0x30, 0x7b, 0x8e, 0xbb, 0x5a, 0xdb, 0x36, 0x74, 0xdf, 0xb4, 0xad, 0xc2,
	0xc8, 0x76, 0xe6, 0x56, 0xf6, 0xe0, 0x9a, 0x3a, 0x73, 0x8e, 0xbb, 0x4f, 0xf8, 0xc3, 0x3d, 0x80,
	0x29, 0x02, 0x32, 0xad, 0x13, 0x5b, 0xf9, 0xd3, 0x38, 0xe4, 0x0e, 0x89, 0xb3, 0x7a, 0xa9, 0x62,
	0x19, 0x6e, 0xd7, 0xf1, 0x51, 0x15, 0xb2, 0x44, 0x6c, 0xbb, 0xda, 0x99, 0x6e, 0xb5, 0xda, 0x98,
	0x7a, 0x98, 0x29, 0xae, 0xed, 0x9c, 0x9f, 0xed, 0x44, 0xa1, 0x8f, 0x71, 0xf7, 0x80, 0x42, 0xf6,
	0x72, 0xdf, 0x7d, 0xb3, 0x05, 0x97, 0xd8, 0x32, 0x0d, 0xfc, 0xe0, 0x1c, 0x77, 0xa9, 0xbf, 0xaa,
	0xcb, 0x84, 0xe8, 0x0e, 0x4c, 0xd1, 0xc0, 0x0d, 0xbb, 0x4d, 0x03, 0xca, 0x15, 0x17, 0x77, 0xd8,
	0x6a, 0xa9, 0xb9, 0x1a, 0x97, 0xa9, 0x3d, 0x14, 0xfa, 0x14, 0x0a, 0x7a, 0xc7, 0x3f, 0xc3, 0x96,
	0x6f, 0xb2, 0x98, 0x35, 0xbd, 0x7d, 0x6a, 0xbb, 0xa6, 0x7f, 0x76, 0x51, 0x18, 0xa5, 0x16, 0x36,
	0xb9, 0x85, 0x52, 0x04, 0x56, 0x0a, 0x50, 0xea, 0x8a, 0x2e, 0x17, 0xa0, 0xfb, 0x80, 0x62, 0xa6,
	0x49, 0x12, 0xc7, 0xe8, 0x12, 0x81, 0x1b, 0x7d, 0x8c, 0xbb, 0xea, 0x7c, 0x14, 0x45, 0x12, 0x7e,
	0x04, 0x8b, 0x98, 0x2d, 0x3c, 0x1a, 0xd1, 0x38, 0x8d, 0x68, 0x95, 0x2b, 0x57, 0x7a, 0x90, 0x30,
	0x9a, 0x05, 0x9c, 0x7c, 0x88, 0xee, 0x42, 0x4e, 0x30, 0x47, 0xa2, 0x98, 0x48, 0x44, 0x91, 0x0d,
	0x11, 0x24, 0x82, 0x07, 0x90, 0x27, 0xa5, 0x6d, 0x6b, 0xa7, 0xba, 0x8f, 0xbf, 0xd0, 0xbb, 0x9a,
	0xe9, 0x14, 0x26, 0xa9, 0x52, 0x7e, 0x87, 0xf5, 0xca, 0x61, 0xad, 0xd4, 0x6a, 0xb9, 0xd8, 0xf3,
	0xd4, 0x1c, 0x45, 0x3e, 0x62, 0xc0, 0x43, 0x07, 0xed, 0xc2, 0xbc, 0x8b, 0x2f, 0x6c, 0x1f, 0x8b,
	0xca, 0x53, 0x29, 0xca, 0x73, 0x0c, 0x1a, 0x6a, 0xe7, 0x61, 0xd4, 0x73, 0xcc, 0xc2, 0x34, 0xe9,
	0x27, 0x95, 0xfc, 0x89, 0xde, 0x02, 0x64, 0xe9, 0xbe, 0xe6, 0xbb, 0xfa, 0x25, 0x76, 0x3d, 0xbd,
	0xad, 0x39, 0xb6, 0xeb, 0x17, 0x80, 0x02, 0xf2, 0x96, 0xee, 0x37, 0x02, 0x41, 0xcd, 0x76, 0x7d,
	0x84, 0x60, 0xcc, 0xd3, 0xdb, 0x7e, 0x61, 0x86, 0xca, 0xe9, 0xdf, 0x28, 0x07, 0x23, 0xe6, 0x65,
	0x61, 0x76, 0x3b, 0x73, 0x6b, 0x4c, 0x1d, 0x31, 0x2f, 0xd1, 0x1b, 0x30, 0xe9, 0x63, 0x47, 0xbb,
	0x74, 0x4f, 0x0a, 0x59, 0x1e, 0xd7, 0xf9, 0xd9, 0xce, 0x27, 0xee, 0x49, 0xaf, 0xcf, 0xd4, 0x09,
	0x1f, 0x3b, 0x9f, 0xb8, 0x27, 0xca, 0x57, 0x13, 0xbd, 0xb6, 0xdd, 0xc7, 0x43, 0xb7, 0x2d, 0x87,
	0xfe, 0xef, 0xb5, 0x6d, 0x0b, 0x7f, 0xbf, 0xb6, 0x0d, 0xf5, 0xc2, 0x48, 0x3e, 0x82, 0x05, 0x17,
	0x93, 0x4c, 0xb7, 0xb0, 0x21, 0x58, 0x9b, 0x18, 0x68, 0x6d, 0x9e, 0xaa, 0xed, 0x63, 0x23, 0x32,
	0x02, 0x42, 0x68, 0x64, 0x45, 0x93, 0xc9, 0x11, 0x08, 0x11, 0x64, 0x35, 0xfb, 0x50, 0x60, 0xee,
	0x25, 0xe9, 0x98, 0x4a, 0x28, 0x2f, 0x53, 0x6c, 0x29, 0x91, 0x93, 0x5d, 0x58, 0xec, 0x2d, 0x42,
	0x74, 0x3f, 0x9d, 0xb0, 0x80, 0x82, 0xa8, 0x85, 0x18, 0xf8, 0x30, 0x40, 0x38, 0x0c, 0xaf, 0xc1,
	0x2c, 0x8f, 0xca, 0xf0, 0xcd, 0x4b, 0xcc, 0xdb, 0x7c, 0x86, 0x79, 0xa7, 0x8f, 0xd0, 0x1a, 0x4c,
	0x33, 0x08, 0x51, 0x9d, 0xa5, 0xf2, 0x29, 0xfa, 0xa0, 0xee, 0x98, 0xbd, 0xf1, 0xc8, 0x0a, 0xe3,
	0x21, 0x8c, 0x43, 0x6e, 0xc0, 0x38, 0xfc, 0x7b, 0x12, 0x96, 0x0e, 0x6b, 0x75, 0x81, 0x9a, 0x1f,
	0x61, 0xbf, 0xee, 0x60, 0xe3, 0x15, 0x99, 0xbf, 0x22, 0xf3, 0xff, 0x0e, 0x99, 0xaf, 0xc1, 0x34,
	0x3b, 0x64, 0xb4, 0xf0, 0x73, 0xde, 0xd6, 0xe4, 0xd4, 0x71, 0x48, 0x7e, 0xa3, 0x15, 0x98, 0x34,
	0x2f, 0x35, 0xcf, 0xfc, 0x12, 0xd3, 0xd6, 0xce, 0xaa, 0x13, 0xe6, 0x65, 0xdd, 0xfc, 0x12, 0xa3,
	0xeb, 0x30, 0x65, 0x1a, 0x5c, 0x32, 0x47, 0x25, 0x93, 0xa6, 0xc1, 0x44, 0x4b, 0x30, 0xe1, 0xe1,
	0x67, 0x9a, 0x65, 0x17, 0xf2, 0xd4, 0xc9, 0xb8, 0x87, 0x9f, 0x1d, 0xdb, 0x68, 0x03, 0xc0, 0xb7,
	0x7d, 0x12, 0xf1, 0xb9, 0xef, 0x15, 0xe6, 0xa9, 0x68, 0x9a, 0x3e, 0xa9, 0x9d, 0xfb, 0x1e, 0xda,
	0x82, 0x19, 0x26, 0x6e, 0x76, 0x7d, 0xec, 0x15, 0x10, 0x95, 0x33, 0x8d, 0x3d, 0xf2, 0x24, 0x04,
	0xb4, 0x5c, 0xdb, 0xf1, 0x0a, 0x0b, 0x02, 0x60, 0x9f, 0x3c, 0x41, 0x0a, 0x64, 0x19, 0xc0, 0x7d,
	0xce, 0x7c, 0x2c, 0x52, 0x08, 0xd3, 0x52, 0x9f, 0x53, 0x2f, 0xaf, 0x43, 0xae, 0x87, 0x61, 0x8e,
	0x96, 0x28, 0x68, 0x96, 0x83, 0x98, 0x2b, 0x11, 0xc5, 0xbc, 0x2d, 0x47, 0x50, 0xcc, 0x9f, 0x30,
	0xf6, 0x2b, 0x03, 0xc6, 0xfe, 0x6b, 0xe8, 0x8d, 0x3d, 0x27, 0xa8, 0x2b, 0x8c, 0xfd, 0xab, 0xcd,
	0xf0, 0xd5, 0x66, 0xf8, 0x32, 0x36, 0x43, 0x19, 0x8d, 0xc1, 0x8b, 0xd0, 0xd8, 0xcc, 0x15, 0x69,
	0x6c, 0x36, 0x7d, 0x1b, 0xce, 0x0e, 0xd8, 0x86, 0x73, 0x29, 0xdb, 0xf0, 0x9c, 0x40, 0x6c, 0x11,
	0x22, 0xcb, 0xc7, 0x88, 0x4c, 0x81, 0xac, 0x85, 0xbf, 0xd0, 0x42, 0xc0, 0x3c, 0xf3, 0x68, 0xe1,
	0x2f, 0x1e, 0x4b, 0xc8, 0x0e, 0xa5, 0x92, 0xdd, 0x42, 0x1a, 0xd9, 0x2d, 0xa6, 0x93, 0xdd, 0xd2,
	0x00, 0xb2, 0x5b, 0x1e, 0x44, 0x76, 0x2b, 0x83, 0xc9, 0xae, 0x30, 0x0c, 0xd9, 0x5d, 0x1f, 0x8a,
	0xec, 0x56, 0xfb, 0x93, 0xdd, 0x5a, 0x7f, 0xb2, 0x43, 0xeb, 0x00, 0x2c, 0x25, 0x5a, 0xf3, 0xc2,
	0x29, 0xac, 0x53, 0x63, 0x53, 0x34, 0x2d, 0x7b, 0x17, 0x0e, 0x7a, 0x13, 0x50, 0x5b, 0xf7, 0x7c,
	0xcd, 0xc5, 0x4e, 0x5b, 0xef, 0x6a, 0x3c, 0x79, 0x1b, 0x14, 0x35, 0x47, 0x24, 0x2a, 0x15, 0xd4,
	0x09, 0x5e, 0xf9, 0x3a, 0x0b, 0xeb, 0x94, 0x37, 0x1f, 0xb5, 0xed, 0xa6, 0xde, 0xae, 0xfb, 0xba,
	0x6f, 0x7a, 0xbe, 0x69, 0x78, 0x01, 0x7d, 0xde, 0x87, 0xeb, 0x7c, 0xaf, 0xd6, 0x4c, 0xcb, 0xe9,
	0xf8, 0x5a, 0x0b, 0x7b, 0x86, 0x86, 0x5d, 0xd7, 0x76, 0x3d, 0x4a, 0xa5, 0x63, 0xea, 0x32, 0x07,
	0x1c, 0x12, 0xf9, 0x3e, 0xf6, 0x8c, 0x0a, 0x95, 0xa2, 0x9f, 0xc0, 0x6a, 0xa0, 0x6a, 0x77, 0xfc,
	0xb8, 0xee, 0x08, 0xd5, 0x5d, 0xe1, 0x88, 0x2a, 0x05, 0x08, 0xca, 0xbb, 0xb0, 0x16, 0x28, 0x1b,
	0x4d, 0xcd, 0x35, 0xad, 0x53, 0xad, 0xa9, 0x7b, 0x38, 0xd0, 0x1e, 0x8d, 0x68, 0x97, 0x9b, 0xaa,
	0x69, 0x9d, 0xee, 0xe9, 0x1e, 0xe6, 0xda, 0x89, 0xa8, 0x1d, 0xfd, 0xb4, 0xa7, 0x3b, 0x96, 0x8c,
	0xba, 0xa6, 0x9f, 0x06, 0xaa, 0x1f, 0xc0, 0x46, 0xa0, 0xda, 0xd4, 0x5d, 0xc3, 0xd6, 0x5c, 0xfc,
	0x4c, 0xd3, 0x5b, 0x2d, 0x37, 0x50, 0x1f, 0xa7, 0xea, 0x81, 0xfd, 0x3d, 0x82, 0x51, 0xf1, 0x33,
	0x32, 0x9a, 0xdc, 0xc2, 0xfb, 0xb0, 0x1e, 0xb5, 0x60, 0x34, 0x23, 0xb1, 0x4f, 0x50, 0x03, 0x05,
	0xd1, 0x40, 0xb9, 0x29, 0x04, 0xff, 0x2e, 0x04, 0xeb, 0xd2, 0x1c, 0xbd, 0x15, 0xf1, 0x3d, 0x49,
	0x55, 0x83, 0xe3, 0x5a, 0x4d, 0x6f, 0x09, 0x6e, 0x85, 0x35, 0xfb, 0xba, 0xc9, 0x3b, 0x3f, 0x50,
	0x9c, 0x8a, 0xac, 0xb9, 0xa1, 0x9b, 0x6c, 0x0c, 0x52, 0x2b, 0x25, 0xe6, 0x6b, 0x5a, 0x52, 0x29,
	0x21, 0x61, 0x0f, 0xc3, 0xe5, 0x7a, 0xbe, 0x7e, 0x8a, 0xdf, 0x21, 0x29, 0x17, 0xd4, 0x21, 0x92,
	0xaf, 0x3a, 0x85, 0x1c, 0x52, 0x44, 0xd2, 0x80, 0xaf, 0x37, 0xdb, 0xf8, 0x4e, 0xcc, 0xc0, 0x4c,
	0xc4, 0x40, 0x83, 0x42, 0xfa, 0x1a, 0x28, 0xc6, 0x0c, 0xcc, 0x26, 0x0d, 0x14, 0xfb, 0x1a, 0xb8,
	0x17, 0x33, 0x90, 0x4d, 0x1a, 0xb8, 0x17, 0x31, 0x10, 0x69, 0x9a, 0x16, 0x2f, 0xbb, 0x58, 0xb8,
	0x5c, 0xac, 0x69, 0x5a, 0xb4, 0xec, 0xf2, 0xea, 0x31, 0xed, 0x93, 0x4e, 0xbb, 0x1d, 0x68, 0xcf,
	0x45, 0xaa, 0x47, 0x55, 0x3f, 0xec, 0xb4, 0xdb, 0x5c, 0xf5, 0x41, 0x58, 0xbd, 0x60, 0x54, 0x5a,
	0x17, 0x7a, 0xa0, 0x9b, 0x8f, 0xe8, 0xb2, 0x49, 0xd9, 0xbf, 0xd0, 0x43, 0xb7, 0x7c, 0xab, 0x93,
	0x8c, 0x37, 0x3b, 0x42, 0x2e, 0x73, 0x80, 0x64, 0xbc, 0x03, 0x55, 0xc9, 0x78, 0xb3, 0xe3, 0xe5,
	0x0a, 0x47, 0xc8, 0xc6, 0x3b, 0x50, 0x96, 0x8d, 0xf7, 0x42, 0x44, 0x5b, 0x36, 0xde, 0xd1, 0xa8,
	0xc5, 0x62, 0x2d, 0x26, 0xa3, 0x8e, 0x8e, 0x77, 0xa0, 0x2a, 0x1f, 0x6f, 0xb6, 0x95, 0x04, 0xf6,
	0xe5, 0xe3, 0x1d, 0xb5, 0x60, 0x34, 0x23, 0x06, 0xd8, 0x5e, 0x53, 0x10, 0x0d, 0x94, 0x9b, 0x82,
	0xfe, 0xc3, 0x50, 0x5f, 0x3a, 0x2f, 0x2b, 0x91, 0x00, 0x24, 0xf3, 0x92, 0x4c, 0xbc, 0xa8, 0x5e,
	0x90, 0x24, 0x5e, 0x58, 0x7f, 0x29, 0x5c, 0xbf, 0xff, 0xbc, 0x75, 0xa1, 0xdf, 0xd5, 0xb0, 0xe5,
	0x63, 0x57, 0x33, 0xec, 0x0e, 0xf9, 0x7f, 0xb0, 0x83, 0x05, 0x1e, 0x1a, 0x14, 0x53, 0x21, 0xa2,
	0x32, 0x47, 0x24, 0x4c, 0x14, 0xe3, 0x26, 0x56, 0x93, 0x26, 0x8a, 0x51, 0x13, 0x42, 0x0e, 0x78,
	0x14, 0x64, 0x63, 0x0c, 0x2d, 0xac, 0x45, 0x72, 0xc0, 0x82, 0x20, 0xdb, 0x64, 0x60, 0x40, 0xf9,
	0x7b, 0x06, 0xb2, 0xfc, 0xf4, 0x4e, 0x4e, 0x33, 0xb6, 0x85, 0xde, 0x87, 0x9c, 0xa7, 0xd3, 0xd3,
	0x8e, 0x6d, 0x69, 0xe4, 0xc0, 0x44, 0x77, 0xa7, 0x5c, 0xb1, 0x20, 0x1e, 0xce, 0x03, 0x74, 0xa3,
	0xeb, 0x60, 0x75, 0xd6, 0xd3, 0xc3, 0x5f, 0x68, 0x17, 0x00, 0x5b, 0x46, 0x70, 0x49, 0x18, 0x19,
	0xf8, 0x6e, 0xe0, 0xe0, 0x9a, 0x3a, 0x8d, 0x2d, 0x83, 0x5f, 0x0a, 0x76, 0x01, 0xc8, 0xb9, 0x97,
	0x6b, 0x8f, 0x0e, 0xbc, 0x62, 0x10, 0xed, 0x16, 0xe6, 0xda, 0x7b, 0x33, 0x30, 0xed, 0xe9, 0x5c,
	0x59, 0xf9, 0x75, 0x06, 0x10, 0xd5, 0x52, 0x3b, 0x6d, 0x7c, 0xa4, 0xfb, 0xc6, 0x19, 0xdd, 0x88,
	0x57, 0x60, 0xd2, 0xed, 0xb4, 0xb1, 0x66, 0xb6, 0xf8, 0xb6, 0x3b, 0x41, 0x7e, 0x1e, 0xb6, 0xd0,
	0x4d, 0x18, 0xbf, 0x20, 0x28, 0x1e, 0x73, 0x70, 0x5a, 0xec, 0x69, 0xab, 0x4c, 0x8c, 0xee, 0x52,
	0x27, 0x2c, 0x41, 0x3c, 0xc2, 0x45, 0x59, 0x6e, 0xd4, 0xa9, 0x20, 0x2f, 0xca, 0xdf, 0x82, 0x2c,
	0x13, 0x63, 0x34, 0x8a, 0x8f, 0xe4, 0xb7, 0xa9, 0xe5, 0xde, 0x52, 0x09, 0x72, 0xc8, 0x8b, 0xd4,
	0x87, 0x90, 0xbb, 0x74, 0x4f, 0xe8, 0x89, 0x31, 0x92, 0xf5, 0xc4, 0xc1, 0x27, 0x62, 0xc6, 0xc5,
	0x27, 0xea, 0xec, 0xa5, 0x20, 0x45, 0x6f, 0xc3, 0x38, 0x49, 0x05, 0x39, 0x14, 0x8c, 0xde, 0x9a,
	0x29, 0x5e, 0x17, 0x17, 0x15, 0xc9, 0xa1, 0xca, 0x70, 0x4a, 0x05, 0x16, 0x7a, 0x42, 0x15, 0x3f,
	0xeb, 0x60, 0xcf, 0x3f, 0xf2, 0x4e, 0xd1, 0x0e, 0x4c, 0xba, 0xec, 0x57, 0x21, 0x43, 0x2d, 0x2d,
	0xc6, 0x2d, 0x51, 0x23, 0x01, 0x48, 0x79, 0x03, 0xe6, 0x42, 0x89, 0xaf, 0xfb, 0x1d, 0x0f, 0x2d,
	0xc3, 0x84, 0x90, 0x97, 0x09, 0x95, 0xff, 0x52, 0x7e, 0x95, 0x81, 0x79, 0xc1, 0xa5, 0xe7, 0xd8,
	0x96, 0x87, 0xd1, 0x43, 0x00, 0xdd, 0x31, 0x09, 0x0b, 0xf8, 0x1d, 0x8f, 0xb7, 0x6b, 0x50, 0xbe,
	0x92, 0x63, 0x32, 0x9b, 0x7b, 0xb9, 0x7f, 0x7d, 0xb3, 0x25, 0xe0, 0xd4, 0x69, 0x3d, 0x10, 0xa1,
	0x1d, 0x98, 0xe0, 0xca, 0x23, 0xbc, 0x0c, 0xf1, 0x80, 0x99, 0x0a, 0x47, 0x29, 0x4f, 0x60, 0x31,
	0x11, 0x05, 0x59, 0xf9, 0x3b, 0x30, 0xe5, 0xf2, 0x9f, 0x7c, 0xe9, 0x85, 0xb8, 0xa5, 0x00, 0xae,
	0xf6, 0x90, 0x4a, 0x03, 0x96, 0x7b, 0xe2, 0x7d, 0xdc, 0xc6, 0x7e, 0x90, 0x4c, 0xf4, 0xe0, 0x4a,
	0x5d, 0x12, 0xe9, 0x0a, 0xa5, 0x01, 0xd7, 0xe5, 0x56, 0x49, 0xa0, 0xef, 0xc5, 0x4b, 0xb4, 0x11,
	0x8f, 0x33, 0xa2, 0x12, 0xd6, 0x4a, 0x87, 0x95, 0x04, 0x84, 0x57, 0xe1, 0xc3, 0xa1, 0xaa, 0xb0,
	0xf4, 0xdd, 0x37, 0x5b, 0xf3, 0xbc, 0x05, 0xa5, 0xc5, 0x50, 0x9e, 0xc2, 0x6a, 0x8a, 0x0b, 0x12,
	0xf9, 0x83, 0x44, 0x8a, 0x37, 0xd3, 0x42, 0x4f, 0x24, 0xfa, 0xa7, 0x42, 0xbf, 0x3e, 0xc2, 0xfe,
	0xcb, 0xc8, 0xf2, 0xb1, 0x50, 0xbb, 0xd0, 0x24, 0xeb, 0x85, 0x58, 0x8a, 0x57, 0xe3, 0x71, 0x86,
	0xf8, 0x30, 0xbf, 0xbf, 0xcb, 0x08, 0x31, 0x56, 0x2c, 0xdf, 0xed, 0x92, 0xac, 0x78, 0xe8, 0x16,
	0xe4, 0xad, 0xce, 0x85, 0xe6, 0x1b, 0x8e, 0xe6, 0x61, 0xcf, 0x33, 0x6d, 0x8b, 0xa5, 0x38, 0xab,
	0xe6, 0xac, 0xce, 0x45, 0xc3, 0x70, 0xea, 0xfc, 0x69, 0x80, 0xec, 0xb4, 0x04, 0xe4, 0x48, 0x0f,
	0xf9, 0x71, 0x2b, 0x44, 0xbe, 0x05, 0x88, 0x20, 0x6d, 0xff, 0x0c, 0xbb, 0x21, 0x76, 0x94, 0xbf,
	0xa1, 0xeb, 0x5c, 0x54, 0x89, 0x20, 0x40, 0x2b, 0x7b, 0xfc, 0xf3, 0x48, 0x30, 0x0e, 0x1e, 0xba,
	0x03, 0xe3, 0xa4, 0x7a, 0x5e, 0xda, 0xfa, 0xc2, 0xf0, 0x55, 0x06, 0x54, 0xfe, 0x99, 0x11, 0x06,
	0x87, 0x2e, 0xff, 0xe5, 0xf6, 0x0e, 0xba, 0x05, 0x63, 0x9e, 0x83, 0x0d, 0x3e, 0xc6, 0x72, 0xde,
	0xa1, 0x08, 0x61, 0xe4, 0x47, 0x87, 0x19, 0x79, 0xf4, 0x66, 0xb0, 0x58, 0xf6, 0x4e, 0x68, 0x49,
	0x06, 0xef, 0xad, 0x53, 0x15, 0xa6, 0x44, 0x58, 0x26, 0x9b, 0xbc, 0x78, 0xff, 0xae, 0x49, 0xfb,
	0x22, 0xd1, 0xbc, 0x8f, 0xa1, 0x10, 0xdd, 0x41, 0x85, 0x5e, 0x7b, 0x3b, 0xde, 0x6b, 0x4b, 0xd1,
	0x0d, 0x29, 0xd0, 0xe8, 0xb5, 0xd9, 0xfb, 0xbc, 0x0e, 0x3d, 0x11, 0xcf, 0xdf, 0x4d, 0x98, 0xa3,
	0x8a, 0x5a, 0x6f, 0x1b, 0xe5, 0x04, 0x9c, 0xa5, 0x8f, 0xeb, 0x3a, 0x6f, 0xfb, 0xdf, 0x64, 0x78,
	0xdf, 0x0b, 0xd1, 0xf0, 0x52, 0xbe, 0x3d, 0x4c, 0x29, 0xc5, 0x9a, 0x95, 0x05, 0x9f, 0x11, 0x16,
	0x5e, 0x93, 0x2e, 0x82, 0x1b, 0x08, 0x02, 0xe2, 0xa4, 0xf1, 0x09, 0x67, 0xbb, 0x44, 0x3c, 0x24,
	0x3d, 0xf7, 0x13, 0x39, 0xdf, 0x90, 0xe7, 0x27, 0x99, 0xf5, 0xcf, 0x61, 0x2d, 0x8a, 0x89, 0x12,
	0xf4, 0xc3, 0xab, 0x7f, 0x0b, 0x89, 0xf2, 0xc7, 0xe7, 0xb0, 0xd9, 0xc7, 0x3e, 0x09, 0x7e, 0x37,
	0x5e, 0x5b, 0x45, 0x1a, 0x7b, 0x0a, 0x5f, 0x9f, 0xc0, 0xba, 0x1c, 0xf7, 0x92, 0x49, 0xbb, 0x09,
	0x5b, 0xfd, 0xfc, 0x90, 0x85, 0x3c, 0x4c, 0x54, 0xe1, 0x46, 0xdf, 0x95, 0x24, 0x6a, 0xf1, 0x59,
	0x7c, 0x02, 0x04, 0x0e, 0x7f, 0xe1, 0x42, 0x3c, 0x8d, 0x17, 0x3a, 0xca, 0xe6, 0xf7, 0xe3, 0x55,
	0xd8, 0x92, 0xc6, 0x2e, 0xa3, 0xf4, 0x3f, 0x66, 0xe2, 0xbd, 0x29, 0x32, 0xdf, 0x95, 0xc7, 0xe5,
	0x4e, 0x84, 0xe2, 0xd6, 0x83, 0x30, 0x64, 0x9f, 0xea, 0x38, 0xd5, 0xdd, 0x8b, 0x51, 0x5d, 0xdf,
	0xb9, 0x0a, 0x8e, 0x38, 0xbf, 0x88, 0x37, 0x4e, 0x8c, 0xc7, 0x76, 0x13, 0xd5, 0xdc, 0x4e, 0xcf,
	0x48, 0x1f, 0x32, 0xe3, 0x07, 0xfa, 0x2b, 0x90, 0x59, 0xa0, 0x21, 0x21, 0xb3, 0x7d, 0xfc, 0x82,
	0x64, 0xd6, 0x8b, 0xe6, 0x87, 0x26, 0xb3, 0x48, 0xa4, 0xe9, 0x64, 0x16, 0x8b, 0x67, 0x28, 0x32,
	0x8b, 0xe9, 0x48, 0xc9, 0x8c, 0x63, 0xae, 0x4c, 0x66, 0xf1, 0xeb, 0x57, 0x1a, 0x99, 0xc9, 0xec,
	0x0f, 0x43, 0x66, 0x32, 0x3d, 0x19, 0x99, 0xc5, 0x70, 0x3f, 0x18, 0x99, 0x49, 0xfd, 0x0c, 0x45,
	0x66, 0x52, 0x4d, 0x29, 0x99, 0x85, 0xdf, 0xd9, 0x5e, 0x5a, 0x21, 0x9e, 0xc6, 0x0b, 0x7d, 0x35,
	0x32, 0x4b, 0x28, 0x49, 0xc9, 0x4c, 0x44, 0xfd, 0x20, 0x64, 0x16, 0xfd, 0x00, 0x39, 0x1c, 0x99,
	0x45, 0xe7, 0x2a, 0x49, 0x66, 0xc9, 0xa0, 0x87, 0x22, 0xb3, 0xa4, 0x9a, 0x50, 0xca, 0x0a, 0x6f,
	0x17, 0xc9, 0xab, 0xff, 0xa0, 0xa2, 0x0a, 0x64, 0x8d, 0x36, 0xd6, 0x5d, 0xcd, 0xb6, 0x34, 0x17,
	0xeb, 0x2d, 0x7e, 0x76, 0x9f, 0xa1, 0x0f, 0xab, 0x96, 0x8a, 0xf5, 0x96, 0x72, 0x02, 0xca, 0x00,
	0x33, 0x24, 0xd4, 0x0f, 0xe2, 0xb5, 0xbb, 0x29, 0x46, 0x9a, 0xae, 0x1b, 0x96, 0xf0, 0xab, 0x0c,
	0x6c, 0xa7, 0x83, 0xbf, 0x6f, 0x25, 0xdf, 0x8b, 0x54, 0xf2, 0x86, 0x58, 0xc9, 0x94, 0x4f, 0x22,
	0xac, 0xa0, 0xca, 0x2f, 0xe1, 0xc6, 0xa0, 0x68, 0xc8, 0xba, 0xcb, 0x89, 0x12, 0xfd, 0xff, 0xc0,
	0x85, 0xc7, 0x2b, 0x75, 0xfb, 0x67, 0xfc, 0x35, 0x4c, 0xf0, 0x6d, 0x19, 0xad, 0xc0, 0xc2, 0x61,
	0xad, 0x5e, 0x29, 0x6b, 0x35, 0xb5, 0xda, 0xa8, 0x96, 0xab, 0x4f, 0xb4, 0xe3, 0xea, 0x71, 0x25,
	0x7f, 0x0d, 0x2d, 0xc1, 0x7c, 0x4c, 0x50, 0x3a, 0xc8, 0x67, 0xd0, 0x32, 0xa0, 0xd8, 0xe3, 0x4a,
	0xbd, 0x96, 0x1f, 0xb9, 0xfd, 0xfb, 0x51, 0x58, 0x90, 0x7c, 0x93, 0x45, 0x1b, 0x70, 0xbd, 0x72,
	0x5c, 0x56, 0x3f, 0xad, 0x35, 0x0e, 0xab, 0xc7, 0x5a, 0xe9, 0xc9, 0xa3, 0xaa, 0x7a, 0xd8, 0x38,
	0x38, 0x0a, 0xbc, 0xbc, 0x0e, 0xdb, 0x52, 0x71, 0xa9, 0x52, 0xd7, 0x1e, 0x95, 0x8f, 0xb4, 0xbb,
	0xc5, 0x1f, 0xe7, 0x33, 0x03, 0x51, 0xc5, 0x77, 0x7f, 0x94, 0x1f, 0xe9, 0x8b, 0x2a, 0x73, 0x5b,
	0xa3, 0x83, 0x51, 0xf7, 0x8b, 0xf9, 0xb1, 0x81, 0x28, 0xe2, 0x71, 0xbc, 0x3f, 0x6a, 0xaf, 0x4c,
	0x3d, 0x4e, 0x0c, 0x46, 0xdd, 0x2f, 0xe6, 0x27, 0x07, 0xa2, 0x88, 0xc7, 0xa9, 0xd4, 0x74, 0xee,
	0x57, 0xea, 0xf7, 0xf2, 0xd3, 0x68, 0x1b, 0xd6, 0xa5, 0xe2, 0xf2, 0x41, 0x89, 0xfc, 0x97, 0x87,
	0xdb, 0x7f, 0xc8, 0xc0, 0x4a, 0xca, 0xbf, 0x0d, 0x40, 0xaf, 0xc1, 0x46, 0xe9, 0xe3, 0xc6, 0x41,
	0xe5, 0xb8, 0x71, 0x58, 0x2e, 0xc9, 0xeb, 0xb5, 0x0a, 0xcb, 0x71, 0x08, 0xab, 0x41, 0x3e, 0x93,
	0x22, 0x2b, 0x97, 0x8f, 0xf2, 0x23, 0xa4, 0xcd, 0x62, 0xb2, 0x83, 0xa3, 0x52, 0x39, 0x3f, 0x8a,
	0x36, 0x61, 0x55, 0xa6, 0xb4, 0x57, 0xd6, 0xea, 0x07, 0xa5, 0xfc, 0xd8, 0xed, 0xdf, 0x06, 0xef,
	0xbb, 0xc4, 0x17, 0xae, 0x24, 0x0d, 0xac, 0x0b, 0xeb, 0x25, 0xad, 0x54, 0xa6, 0x6a, 0x8d, 0x4f,
	0x6b, 0x95, 0x20, 0xca, 0x6d, 0xfa, 0x29, 0x32, 0x29, 0xe6, 0xb9, 0xc9, 0x67, 0x52, 0x11, 0xfb,
	0x15, 0x86, 0x18, 0x49, 0x75, 0xb1, 0xaf, 0x56, 0x6b, 0xf9, 0xd1, 0xe2, 0x5f, 0xa6, 0x61, 0x9c,
	0xc6, 0x85, 0x9e, 0x08, 0x2f, 0xef, 0xca, 0x2e, 0xd6, 0x7d, 0x8c, 0x56, 0x93, 0xef, 0xbc, 0x02,
	0xfa, 0x5a, 0x5d, 0x4b, 0x7b, 0x1f, 0x76, 0xe4, 0x9d, 0x2a, 0xd7, 0x22, 0xd6, 0x3e, 0x76, 0x5a,
	0x2f, 0x68, 0xed, 0xa9, 0x60, 0x8d, 0x6d, 0xc4, 0x68, 0xbb, 0xef, 0x7b, 0x2e, 0x62, 0xf3, 0xb5,
	0xfe, 0xaf, 0x93, 0x98, 0xe5, 0x2a, 0xcc, 0x8a, 0xd7, 0x75, 0xb4, 0x91, 0xfe, 0x6e, 0x87, 0xd8,
	0xdc, 0xec, 0x73, 0xc5, 0x67, 0x06, 0x3f, 0x8b, 0x5f, 0xc8, 0x79, 0x2e, 0xb7, 0x52, 0x2e, 0xaa,
	0x3d, 0xd3, 0xdb, 0x7d, 0x6f, 0xb2, 0x29, 0xc6, 0x79, 0x6a, 0x5f, 0x8a, 0xf1, 0xd3, 0xb8, 0x71,
	0x9e, 0xe9, 0xff, 0x1b, 0x7c, 0x4d, 0x25, 0x2e, 0x6e, 0x0e, 0x71, 0x07, 0x64, 0x8e, 0x3e, 0xef,
	0x8d, 0x42, 0x78, 0xb5, 0x40, 0xca, 0x80, 0x6b, 0x18, 0x71, 0x71, 0x63, 0xd0, 0xc5, 0x24, 0x9e,
	0x25, 0xbe, 0xdb, 0xcb, 0x4b, 0x90, 0xb8, 0xb0, 0xac, 0x6e, 0xf7, 0x3d, 0x7f, 0xa7, 0x18, 0x97,
	0x97, 0xe0, 0xfb, 0x19, 0x3f, 0x8d, 0x1b, 0x97, 0x97, 0x20, 0xe5, 0x50, 0x1e, 0x2f, 0x41, 0xda,
	0x99, 0x37, 0x52, 0x82, 0xf0, 0x40, 0x84, 0x94, 0x01, 0x87, 0x47, 0x49, 0x09, 0xa4, 0xa7, 0x30,
	0xe5, 0x1a, 0xf2, 0xf8, 0xa1, 0x58, 0xb2, 0x9b, 0xa3, 0x37, 0x86, 0x3b, 0xe7, 0x10, 0x6f, 0xb7,
	0x87, 0x3c, 0x19, 0x50, 0xa7, 0x7b, 0xcb, 0x7f, 0xfe, 0x76, 0x33, 0xf3, 0xd7, 0x6f, 0x37, 0x33,
	0xff, 0xf8, 0x76, 0x33, 0xf3, 0xf3, 0xa9, 0x33, 0xbd, 0x4d, 0xff, 0xc1, 0x59, 0x73, 0x82, 0xfe,
	0xef, 0xde, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7c, 0xbe, 0xd0, 0x78, 0x47, 0x31, 0x00, 0x00,
}
