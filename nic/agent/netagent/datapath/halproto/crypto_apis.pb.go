// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crypto_apis.proto

package halproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Types of Crypto Hash algos
type CryptoApiHashType int32

const (
	CryptoApiHashType_none        CryptoApiHashType = 0
	CryptoApiHashType_MD5         CryptoApiHashType = 1
	CryptoApiHashType_SHA1        CryptoApiHashType = 2
	CryptoApiHashType_SHA224      CryptoApiHashType = 3
	CryptoApiHashType_SHA256      CryptoApiHashType = 4
	CryptoApiHashType_SHA384      CryptoApiHashType = 5
	CryptoApiHashType_SHA512      CryptoApiHashType = 6
	CryptoApiHashType_SHA512_224  CryptoApiHashType = 7
	CryptoApiHashType_SHA512_256  CryptoApiHashType = 8
	CryptoApiHashType_HMAC_MD5    CryptoApiHashType = 9
	CryptoApiHashType_HMAC_SHA1   CryptoApiHashType = 10
	CryptoApiHashType_HMAC_SHA224 CryptoApiHashType = 11
	CryptoApiHashType_HMAC_SHA256 CryptoApiHashType = 12
	CryptoApiHashType_HMAC_SHA384 CryptoApiHashType = 13
	CryptoApiHashType_HMAC_SHA512 CryptoApiHashType = 14
)

var CryptoApiHashType_name = map[int32]string{
	0:  "CRYPTOAPI_HASHTYPE_NONE",
	1:  "CRYPTOAPI_HASHTYPE_MD5",
	2:  "CRYPTOAPI_HASHTYPE_SHA1",
	3:  "CRYPTOAPI_HASHTYPE_SHA224",
	4:  "CRYPTOAPI_HASHTYPE_SHA256",
	5:  "CRYPTOAPI_HASHTYPE_SHA384",
	6:  "CRYPTOAPI_HASHTYPE_SHA512",
	7:  "CRYPTOAPI_HASHTYPE_SHA512_224",
	8:  "CRYPTOAPI_HASHTYPE_SHA512_256",
	9:  "CRYPTOAPI_HASHTYPE_HMAC_MD5",
	10: "CRYPTOAPI_HASHTYPE_HMAC_SHA1",
	11: "CRYPTOAPI_HASHTYPE_HMAC_SHA224",
	12: "CRYPTOAPI_HASHTYPE_HMAC_SHA256",
	13: "CRYPTOAPI_HASHTYPE_HMAC_SHA384",
	14: "CRYPTOAPI_HASHTYPE_HMAC_SHA512",
}
var CryptoApiHashType_value = map[string]int32{
	"CRYPTOAPI_HASHTYPE_NONE":        0,
	"CRYPTOAPI_HASHTYPE_MD5":         1,
	"CRYPTOAPI_HASHTYPE_SHA1":        2,
	"CRYPTOAPI_HASHTYPE_SHA224":      3,
	"CRYPTOAPI_HASHTYPE_SHA256":      4,
	"CRYPTOAPI_HASHTYPE_SHA384":      5,
	"CRYPTOAPI_HASHTYPE_SHA512":      6,
	"CRYPTOAPI_HASHTYPE_SHA512_224":  7,
	"CRYPTOAPI_HASHTYPE_SHA512_256":  8,
	"CRYPTOAPI_HASHTYPE_HMAC_MD5":    9,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA1":   10,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA224": 11,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA256": 12,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA384": 13,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA512": 14,
}

func (x CryptoApiHashType) String() string {
	return proto.EnumName(CryptoApiHashType_name, int32(x))
}
func (CryptoApiHashType) EnumDescriptor() ([]byte, []int) { return fileDescriptorCryptoApis, []int{0} }

type CryptoApiType int32

const (
	CryptoApiType_ASYMAPI_ECC_POINT_MUL_FP    CryptoApiType = 0
	CryptoApiType_ASYMAPI_ECDSA_SIG_GEN_FP    CryptoApiType = 1
	CryptoApiType_ASYMAPI_ECDSA_SIG_VERIFY_FP CryptoApiType = 2
	CryptoApiType_ASYMAPI_RSA_ENCRYPT         CryptoApiType = 3
	CryptoApiType_ASYMAPI_RSA_DECRYPT         CryptoApiType = 4
	CryptoApiType_ASYMAPI_RSA_CRT_DECRYPT     CryptoApiType = 5
	CryptoApiType_SYMMAPI_HASH_GENERATE       CryptoApiType = 6
	CryptoApiType_SYMMAPI_HASH_VERIFY         CryptoApiType = 7
	CryptoApiType_ASYMAPI_RSA_SIG_GEN         CryptoApiType = 8
	CryptoApiType_ASYMAPI_RSA_SIG_VERIFY      CryptoApiType = 9
	CryptoApiType_ASYMAPI_SETUP_PRIV_KEY      CryptoApiType = 10
	CryptoApiType_ASYMAPI_SETUP_CERT          CryptoApiType = 11
)

var CryptoApiType_name = map[int32]string{
	0:  "ASYMAPI_ECC_POINT_MUL_FP",
	1:  "ASYMAPI_ECDSA_SIG_GEN_FP",
	2:  "ASYMAPI_ECDSA_SIG_VERIFY_FP",
	3:  "ASYMAPI_RSA_ENCRYPT",
	4:  "ASYMAPI_RSA_DECRYPT",
	5:  "ASYMAPI_RSA_CRT_DECRYPT",
	6:  "SYMMAPI_HASH_GENERATE",
	7:  "SYMMAPI_HASH_VERIFY",
	8:  "ASYMAPI_RSA_SIG_GEN",
	9:  "ASYMAPI_RSA_SIG_VERIFY",
	10: "ASYMAPI_SETUP_PRIV_KEY",
	11: "ASYMAPI_SETUP_CERT",
}
var CryptoApiType_value = map[string]int32{
	"ASYMAPI_ECC_POINT_MUL_FP":    0,
	"ASYMAPI_ECDSA_SIG_GEN_FP":    1,
	"ASYMAPI_ECDSA_SIG_VERIFY_FP": 2,
	"ASYMAPI_RSA_ENCRYPT":         3,
	"ASYMAPI_RSA_DECRYPT":         4,
	"ASYMAPI_RSA_CRT_DECRYPT":     5,
	"SYMMAPI_HASH_GENERATE":       6,
	"SYMMAPI_HASH_VERIFY":         7,
	"ASYMAPI_RSA_SIG_GEN":         8,
	"ASYMAPI_RSA_SIG_VERIFY":      9,
	"ASYMAPI_SETUP_PRIV_KEY":      10,
	"ASYMAPI_SETUP_CERT":          11,
}

func (x CryptoApiType) String() string {
	return proto.EnumName(CryptoApiType_name, int32(x))
}
func (CryptoApiType) EnumDescriptor() ([]byte, []int) { return fileDescriptorCryptoApis, []int{1} }

type UpdateType int32

const (
	UpdateType_ADD_UPDATE UpdateType = 0
	UpdateType_DELETE     UpdateType = 1
)

var UpdateType_name = map[int32]string{
	0: "ADD_UPDATE",
	1: "DELETE",
}
var UpdateType_value = map[string]int32{
	"ADD_UPDATE": 0,
	"DELETE":     1,
}

func (x UpdateType) String() string {
	return proto.EnumName(UpdateType_name, int32(x))
}
func (UpdateType) EnumDescriptor() ([]byte, []int) { return fileDescriptorCryptoApis, []int{2} }

type ECCPoint struct {
	X []byte `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y []byte `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *ECCPoint) Reset()                    { *m = ECCPoint{} }
func (m *ECCPoint) String() string            { return proto.CompactTextString(m) }
func (*ECCPoint) ProtoMessage()               {}
func (*ECCPoint) Descriptor() ([]byte, []int) { return fileDescriptorCryptoApis, []int{0} }

func (m *ECCPoint) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *ECCPoint) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

type CryptoAsymApiECCDomainParamsFp struct {
	KeySize uint32    `protobuf:"varint,1,opt,name=KeySize,proto3" json:"KeySize,omitempty"`
	P       []byte    `protobuf:"bytes,2,opt,name=p,proto3" json:"p,omitempty"`
	A       []byte    `protobuf:"bytes,3,opt,name=a,proto3" json:"a,omitempty"`
	B       []byte    `protobuf:"bytes,4,opt,name=b,proto3" json:"b,omitempty"`
	G       *ECCPoint `protobuf:"bytes,5,opt,name=G" json:"G,omitempty"`
	N       []byte    `protobuf:"bytes,6,opt,name=n,proto3" json:"n,omitempty"`
}

func (m *CryptoAsymApiECCDomainParamsFp) Reset()         { *m = CryptoAsymApiECCDomainParamsFp{} }
func (m *CryptoAsymApiECCDomainParamsFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiECCDomainParamsFp) ProtoMessage()    {}
func (*CryptoAsymApiECCDomainParamsFp) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{1}
}

func (m *CryptoAsymApiECCDomainParamsFp) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiECCDomainParamsFp) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *CryptoAsymApiECCDomainParamsFp) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *CryptoAsymApiECCDomainParamsFp) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *CryptoAsymApiECCDomainParamsFp) GetG() *ECCPoint {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *CryptoAsymApiECCDomainParamsFp) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

type CryptoAsymApiReqECCPointMulFp struct {
	EccDomainParams *CryptoAsymApiECCDomainParamsFp `protobuf:"bytes,1,opt,name=ecc_domain_params,json=eccDomainParams" json:"ecc_domain_params,omitempty"`
	EccPoint        *ECCPoint                       `protobuf:"bytes,2,opt,name=ecc_point,json=eccPoint" json:"ecc_point,omitempty"`
	K               []byte                          `protobuf:"bytes,3,opt,name=k,proto3" json:"k,omitempty"`
}

func (m *CryptoAsymApiReqECCPointMulFp) Reset()         { *m = CryptoAsymApiReqECCPointMulFp{} }
func (m *CryptoAsymApiReqECCPointMulFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqECCPointMulFp) ProtoMessage()    {}
func (*CryptoAsymApiReqECCPointMulFp) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{2}
}

func (m *CryptoAsymApiReqECCPointMulFp) GetEccDomainParams() *CryptoAsymApiECCDomainParamsFp {
	if m != nil {
		return m.EccDomainParams
	}
	return nil
}

func (m *CryptoAsymApiReqECCPointMulFp) GetEccPoint() *ECCPoint {
	if m != nil {
		return m.EccPoint
	}
	return nil
}

func (m *CryptoAsymApiReqECCPointMulFp) GetK() []byte {
	if m != nil {
		return m.K
	}
	return nil
}

type CryptoAsymApiRespECCPointMulFp struct {
	Q *ECCPoint `protobuf:"bytes,1,opt,name=Q" json:"Q,omitempty"`
}

func (m *CryptoAsymApiRespECCPointMulFp) Reset()         { *m = CryptoAsymApiRespECCPointMulFp{} }
func (m *CryptoAsymApiRespECCPointMulFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespECCPointMulFp) ProtoMessage()    {}
func (*CryptoAsymApiRespECCPointMulFp) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{3}
}

func (m *CryptoAsymApiRespECCPointMulFp) GetQ() *ECCPoint {
	if m != nil {
		return m.Q
	}
	return nil
}

// ESCDA Signature Generation
type CryptoAsymApiReqECDSASignatureGenFp struct {
	EccDomainParams *CryptoAsymApiECCDomainParamsFp `protobuf:"bytes,1,opt,name=ecc_domain_params,json=eccDomainParams" json:"ecc_domain_params,omitempty"`
	Da              []byte                          `protobuf:"bytes,2,opt,name=da,proto3" json:"da,omitempty"`
	K               []byte                          `protobuf:"bytes,3,opt,name=k,proto3" json:"k,omitempty"`
	H               []byte                          `protobuf:"bytes,4,opt,name=h,proto3" json:"h,omitempty"`
	KeyIdx          int32                           `protobuf:"varint,5,opt,name=key_idx,json=keyIdx,proto3" json:"key_idx,omitempty"`
	AsyncEn         bool                            `protobuf:"varint,6,opt,name=async_en,json=asyncEn,proto3" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) Reset()         { *m = CryptoAsymApiReqECDSASignatureGenFp{} }
func (m *CryptoAsymApiReqECDSASignatureGenFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqECDSASignatureGenFp) ProtoMessage()    {}
func (*CryptoAsymApiReqECDSASignatureGenFp) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{4}
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetEccDomainParams() *CryptoAsymApiECCDomainParamsFp {
	if m != nil {
		return m.EccDomainParams
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetDa() []byte {
	if m != nil {
		return m.Da
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetK() []byte {
	if m != nil {
		return m.K
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetKeyIdx() int32 {
	if m != nil {
		return m.KeyIdx
	}
	return 0
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

type CryptoAsymApiRespECDSASignatureGenFp struct {
	R []byte `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) Reset()         { *m = CryptoAsymApiRespECDSASignatureGenFp{} }
func (m *CryptoAsymApiRespECDSASignatureGenFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespECDSASignatureGenFp) ProtoMessage()    {}
func (*CryptoAsymApiRespECDSASignatureGenFp) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{5}
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// ECDSA Signature Verification
type CryptoAsymApiReqECDSASignatureVerifyFp struct {
	EccDomainParams *CryptoAsymApiECCDomainParamsFp `protobuf:"bytes,1,opt,name=ecc_domain_params,json=eccDomainParams" json:"ecc_domain_params,omitempty"`
	Q               *ECCPoint                       `protobuf:"bytes,2,opt,name=Q" json:"Q,omitempty"`
	R               []byte                          `protobuf:"bytes,3,opt,name=r,proto3" json:"r,omitempty"`
	S               []byte                          `protobuf:"bytes,4,opt,name=s,proto3" json:"s,omitempty"`
	H               []byte                          `protobuf:"bytes,5,opt,name=h,proto3" json:"h,omitempty"`
	AsyncEn         bool                            `protobuf:"varint,6,opt,name=async_en,json=asyncEn,proto3" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) Reset() {
	*m = CryptoAsymApiReqECDSASignatureVerifyFp{}
}
func (m *CryptoAsymApiReqECDSASignatureVerifyFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqECDSASignatureVerifyFp) ProtoMessage()    {}
func (*CryptoAsymApiReqECDSASignatureVerifyFp) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{6}
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetEccDomainParams() *CryptoAsymApiECCDomainParamsFp {
	if m != nil {
		return m.EccDomainParams
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetQ() *ECCPoint {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

// RSA Encryption
type CryptoAsymApiReqRSAEncrypt struct {
	KeySize   uint32 `protobuf:"varint,1,opt,name=KeySize,proto3" json:"KeySize,omitempty"`
	ModN      []byte `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	E         []byte `protobuf:"bytes,3,opt,name=e,proto3" json:"e,omitempty"`
	PlainText []byte `protobuf:"bytes,4,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty"`
	AsyncEn   bool   `protobuf:"varint,5,opt,name=async_en,json=asyncEn,proto3" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqRSAEncrypt) Reset()         { *m = CryptoAsymApiReqRSAEncrypt{} }
func (m *CryptoAsymApiReqRSAEncrypt) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSAEncrypt) ProtoMessage()    {}
func (*CryptoAsymApiReqRSAEncrypt) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{7}
}

func (m *CryptoAsymApiReqRSAEncrypt) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSAEncrypt) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqRSAEncrypt) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *CryptoAsymApiReqRSAEncrypt) GetPlainText() []byte {
	if m != nil {
		return m.PlainText
	}
	return nil
}

func (m *CryptoAsymApiReqRSAEncrypt) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

type CryptoAsymApiRespRSAEncrypt struct {
	CipherText []byte `protobuf:"bytes,1,opt,name=cipher_text,json=cipherText,proto3" json:"cipher_text,omitempty"`
}

func (m *CryptoAsymApiRespRSAEncrypt) Reset()         { *m = CryptoAsymApiRespRSAEncrypt{} }
func (m *CryptoAsymApiRespRSAEncrypt) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSAEncrypt) ProtoMessage()    {}
func (*CryptoAsymApiRespRSAEncrypt) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{8}
}

func (m *CryptoAsymApiRespRSAEncrypt) GetCipherText() []byte {
	if m != nil {
		return m.CipherText
	}
	return nil
}

// RSA Decryption
type CryptoAsymApiReqRSADecrypt struct {
	KeySize    uint32 `protobuf:"varint,1,opt,name=KeySize,proto3" json:"KeySize,omitempty"`
	ModN       []byte `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	D          []byte `protobuf:"bytes,3,opt,name=d,proto3" json:"d,omitempty"`
	CipherText []byte `protobuf:"bytes,4,opt,name=cipher_text,json=cipherText,proto3" json:"cipher_text,omitempty"`
}

func (m *CryptoAsymApiReqRSADecrypt) Reset()         { *m = CryptoAsymApiReqRSADecrypt{} }
func (m *CryptoAsymApiReqRSADecrypt) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSADecrypt) ProtoMessage()    {}
func (*CryptoAsymApiReqRSADecrypt) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{9}
}

func (m *CryptoAsymApiReqRSADecrypt) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSADecrypt) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqRSADecrypt) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *CryptoAsymApiReqRSADecrypt) GetCipherText() []byte {
	if m != nil {
		return m.CipherText
	}
	return nil
}

type CryptoAsymApiRespRSADecrypt struct {
	PlainText []byte `protobuf:"bytes,1,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty"`
}

func (m *CryptoAsymApiRespRSADecrypt) Reset()         { *m = CryptoAsymApiRespRSADecrypt{} }
func (m *CryptoAsymApiRespRSADecrypt) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSADecrypt) ProtoMessage()    {}
func (*CryptoAsymApiRespRSADecrypt) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{10}
}

func (m *CryptoAsymApiRespRSADecrypt) GetPlainText() []byte {
	if m != nil {
		return m.PlainText
	}
	return nil
}

// RSA CRT Decryption
type CryptoAsymApiReqRSACRTDecrypt struct {
	KeySize    uint32 `protobuf:"varint,1,opt,name=KeySize,proto3" json:"KeySize,omitempty"`
	P          []byte `protobuf:"bytes,2,opt,name=p,proto3" json:"p,omitempty"`
	Q          []byte `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Dp         []byte `protobuf:"bytes,4,opt,name=dp,proto3" json:"dp,omitempty"`
	Dq         []byte `protobuf:"bytes,5,opt,name=dq,proto3" json:"dq,omitempty"`
	Qinv       []byte `protobuf:"bytes,6,opt,name=qinv,proto3" json:"qinv,omitempty"`
	CipherText []byte `protobuf:"bytes,7,opt,name=cipher_text,json=cipherText,proto3" json:"cipher_text,omitempty"`
	KeyIdx     int32  `protobuf:"varint,8,opt,name=key_idx,json=keyIdx,proto3" json:"key_idx,omitempty"`
	AsyncEn    bool   `protobuf:"varint,9,opt,name=async_en,json=asyncEn,proto3" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqRSACRTDecrypt) Reset()         { *m = CryptoAsymApiReqRSACRTDecrypt{} }
func (m *CryptoAsymApiReqRSACRTDecrypt) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSACRTDecrypt) ProtoMessage()    {}
func (*CryptoAsymApiReqRSACRTDecrypt) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{11}
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetDp() []byte {
	if m != nil {
		return m.Dp
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetDq() []byte {
	if m != nil {
		return m.Dq
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetQinv() []byte {
	if m != nil {
		return m.Qinv
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetCipherText() []byte {
	if m != nil {
		return m.CipherText
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetKeyIdx() int32 {
	if m != nil {
		return m.KeyIdx
	}
	return 0
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

type CryptoAsymApiRespRSACRTDecrypt struct {
	PlainText []byte `protobuf:"bytes,1,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty"`
}

func (m *CryptoAsymApiRespRSACRTDecrypt) Reset()         { *m = CryptoAsymApiRespRSACRTDecrypt{} }
func (m *CryptoAsymApiRespRSACRTDecrypt) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSACRTDecrypt) ProtoMessage()    {}
func (*CryptoAsymApiRespRSACRTDecrypt) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{12}
}

func (m *CryptoAsymApiRespRSACRTDecrypt) GetPlainText() []byte {
	if m != nil {
		return m.PlainText
	}
	return nil
}

// Asymmetric Private Key Setup
// Temp API as a workaround until securemon is ready
type CryptoAsymApiReqSetupPrivateKey struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *CryptoAsymApiReqSetupPrivateKey) Reset()         { *m = CryptoAsymApiReqSetupPrivateKey{} }
func (m *CryptoAsymApiReqSetupPrivateKey) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqSetupPrivateKey) ProtoMessage()    {}
func (*CryptoAsymApiReqSetupPrivateKey) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{13}
}

func (m *CryptoAsymApiReqSetupPrivateKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type CryptoAsymApiRespECDSAKeyInfo struct {
	SignKeyIdx int32 `protobuf:"varint,1,opt,name=sign_key_idx,json=signKeyIdx,proto3" json:"sign_key_idx,omitempty"`
}

func (m *CryptoAsymApiRespECDSAKeyInfo) Reset()         { *m = CryptoAsymApiRespECDSAKeyInfo{} }
func (m *CryptoAsymApiRespECDSAKeyInfo) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespECDSAKeyInfo) ProtoMessage()    {}
func (*CryptoAsymApiRespECDSAKeyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{14}
}

func (m *CryptoAsymApiRespECDSAKeyInfo) GetSignKeyIdx() int32 {
	if m != nil {
		return m.SignKeyIdx
	}
	return 0
}

type CryptoAsymApiRespRSAKeyInfo struct {
	SignKeyIdx    int32 `protobuf:"varint,1,opt,name=sign_key_idx,json=signKeyIdx,proto3" json:"sign_key_idx,omitempty"`
	DecryptKeyIdx int32 `protobuf:"varint,2,opt,name=decrypt_key_idx,json=decryptKeyIdx,proto3" json:"decrypt_key_idx,omitempty"`
}

func (m *CryptoAsymApiRespRSAKeyInfo) Reset()         { *m = CryptoAsymApiRespRSAKeyInfo{} }
func (m *CryptoAsymApiRespRSAKeyInfo) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSAKeyInfo) ProtoMessage()    {}
func (*CryptoAsymApiRespRSAKeyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{15}
}

func (m *CryptoAsymApiRespRSAKeyInfo) GetSignKeyIdx() int32 {
	if m != nil {
		return m.SignKeyIdx
	}
	return 0
}

func (m *CryptoAsymApiRespRSAKeyInfo) GetDecryptKeyIdx() int32 {
	if m != nil {
		return m.DecryptKeyIdx
	}
	return 0
}

type CryptoAsymApiRespSetupPrivateKey struct {
	KeyType CryptoAsymKeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=types.CryptoAsymKeyType" json:"key_type,omitempty"`
	// Types that are valid to be assigned to KeyInfo:
	//	*CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo
	//	*CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo
	KeyInfo isCryptoAsymApiRespSetupPrivateKey_KeyInfo `protobuf_oneof:"KeyInfo"`
}

func (m *CryptoAsymApiRespSetupPrivateKey) Reset()         { *m = CryptoAsymApiRespSetupPrivateKey{} }
func (m *CryptoAsymApiRespSetupPrivateKey) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespSetupPrivateKey) ProtoMessage()    {}
func (*CryptoAsymApiRespSetupPrivateKey) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{16}
}

type isCryptoAsymApiRespSetupPrivateKey_KeyInfo interface {
	isCryptoAsymApiRespSetupPrivateKey_KeyInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo struct {
	EcdsaKeyInfo *CryptoAsymApiRespECDSAKeyInfo `protobuf:"bytes,2,opt,name=ecdsa_key_info,json=ecdsaKeyInfo,oneof"`
}
type CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo struct {
	RsaKeyInfo *CryptoAsymApiRespRSAKeyInfo `protobuf:"bytes,3,opt,name=rsa_key_info,json=rsaKeyInfo,oneof"`
}

func (*CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo) isCryptoAsymApiRespSetupPrivateKey_KeyInfo() {}
func (*CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo) isCryptoAsymApiRespSetupPrivateKey_KeyInfo()   {}

func (m *CryptoAsymApiRespSetupPrivateKey) GetKeyInfo() isCryptoAsymApiRespSetupPrivateKey_KeyInfo {
	if m != nil {
		return m.KeyInfo
	}
	return nil
}

func (m *CryptoAsymApiRespSetupPrivateKey) GetKeyType() CryptoAsymKeyType {
	if m != nil {
		return m.KeyType
	}
	return CryptoAsymKeyType_CRYPTO_ASYM_KEY_TYPE_ECDSA
}

func (m *CryptoAsymApiRespSetupPrivateKey) GetEcdsaKeyInfo() *CryptoAsymApiRespECDSAKeyInfo {
	if x, ok := m.GetKeyInfo().(*CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo); ok {
		return x.EcdsaKeyInfo
	}
	return nil
}

func (m *CryptoAsymApiRespSetupPrivateKey) GetRsaKeyInfo() *CryptoAsymApiRespRSAKeyInfo {
	if x, ok := m.GetKeyInfo().(*CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo); ok {
		return x.RsaKeyInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CryptoAsymApiRespSetupPrivateKey) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CryptoAsymApiRespSetupPrivateKey_OneofMarshaler, _CryptoAsymApiRespSetupPrivateKey_OneofUnmarshaler, _CryptoAsymApiRespSetupPrivateKey_OneofSizer, []interface{}{
		(*CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo)(nil),
		(*CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo)(nil),
	}
}

func _CryptoAsymApiRespSetupPrivateKey_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CryptoAsymApiRespSetupPrivateKey)
	// KeyInfo
	switch x := m.KeyInfo.(type) {
	case *CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaKeyInfo); err != nil {
			return err
		}
	case *CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaKeyInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CryptoAsymApiRespSetupPrivateKey.KeyInfo has unexpected type %T", x)
	}
	return nil
}

func _CryptoAsymApiRespSetupPrivateKey_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CryptoAsymApiRespSetupPrivateKey)
	switch tag {
	case 2: // KeyInfo.ecdsa_key_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespECDSAKeyInfo)
		err := b.DecodeMessage(msg)
		m.KeyInfo = &CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo{msg}
		return true, err
	case 3: // KeyInfo.rsa_key_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSAKeyInfo)
		err := b.DecodeMessage(msg)
		m.KeyInfo = &CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CryptoAsymApiRespSetupPrivateKey_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CryptoAsymApiRespSetupPrivateKey)
	// KeyInfo
	switch x := m.KeyInfo.(type) {
	case *CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo:
		s := proto.Size(x.EcdsaKeyInfo)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo:
		s := proto.Size(x.RsaKeyInfo)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Certificate Setup
type CryptoAsymApiReqSetupCert struct {
	UpdateType UpdateType `protobuf:"varint,1,opt,name=update_type,json=updateType,proto3,enum=cryptoapis.UpdateType" json:"update_type,omitempty"`
	CertId     int32      `protobuf:"varint,2,opt,name=cert_id,json=certId,proto3" json:"cert_id,omitempty"`
	Body       string     `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	NextCertId int32      `protobuf:"varint,5,opt,name=next_cert_id,json=nextCertId,proto3" json:"next_cert_id,omitempty"`
}

func (m *CryptoAsymApiReqSetupCert) Reset()         { *m = CryptoAsymApiReqSetupCert{} }
func (m *CryptoAsymApiReqSetupCert) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqSetupCert) ProtoMessage()    {}
func (*CryptoAsymApiReqSetupCert) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{17}
}

func (m *CryptoAsymApiReqSetupCert) GetUpdateType() UpdateType {
	if m != nil {
		return m.UpdateType
	}
	return UpdateType_ADD_UPDATE
}

func (m *CryptoAsymApiReqSetupCert) GetCertId() int32 {
	if m != nil {
		return m.CertId
	}
	return 0
}

func (m *CryptoAsymApiReqSetupCert) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *CryptoAsymApiReqSetupCert) GetNextCertId() int32 {
	if m != nil {
		return m.NextCertId
	}
	return 0
}

type CryptoAsymApiRespSetupCert struct {
}

func (m *CryptoAsymApiRespSetupCert) Reset()         { *m = CryptoAsymApiRespSetupCert{} }
func (m *CryptoAsymApiRespSetupCert) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespSetupCert) ProtoMessage()    {}
func (*CryptoAsymApiRespSetupCert) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{18}
}

// RSA Signature Generation
type CryptoAsymApiReqRSASignatureGen struct {
	KeySize uint32 `protobuf:"varint,1,opt,name=KeySize,proto3" json:"KeySize,omitempty"`
	ModN    []byte `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	D       []byte `protobuf:"bytes,3,opt,name=d,proto3" json:"d,omitempty"`
	H       []byte `protobuf:"bytes,4,opt,name=h,proto3" json:"h,omitempty"`
	KeyIdx  int32  `protobuf:"varint,5,opt,name=key_idx,json=keyIdx,proto3" json:"key_idx,omitempty"`
	AsyncEn bool   `protobuf:"varint,6,opt,name=async_en,json=asyncEn,proto3" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqRSASignatureGen) Reset()         { *m = CryptoAsymApiReqRSASignatureGen{} }
func (m *CryptoAsymApiReqRSASignatureGen) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSASignatureGen) ProtoMessage()    {}
func (*CryptoAsymApiReqRSASignatureGen) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{19}
}

func (m *CryptoAsymApiReqRSASignatureGen) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSASignatureGen) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureGen) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureGen) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureGen) GetKeyIdx() int32 {
	if m != nil {
		return m.KeyIdx
	}
	return 0
}

func (m *CryptoAsymApiReqRSASignatureGen) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

type CryptoAsymApiRespRSASignatureGen struct {
	S []byte `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *CryptoAsymApiRespRSASignatureGen) Reset()         { *m = CryptoAsymApiRespRSASignatureGen{} }
func (m *CryptoAsymApiRespRSASignatureGen) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSASignatureGen) ProtoMessage()    {}
func (*CryptoAsymApiRespRSASignatureGen) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{20}
}

func (m *CryptoAsymApiRespRSASignatureGen) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// RSA Signature Verification
type CryptoAsymApiReqRSASignatureVerify struct {
	KeySize uint32 `protobuf:"varint,1,opt,name=KeySize,proto3" json:"KeySize,omitempty"`
	ModN    []byte `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	E       []byte `protobuf:"bytes,3,opt,name=e,proto3" json:"e,omitempty"`
	H       []byte `protobuf:"bytes,4,opt,name=h,proto3" json:"h,omitempty"`
	S       []byte `protobuf:"bytes,5,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *CryptoAsymApiReqRSASignatureVerify) Reset()         { *m = CryptoAsymApiReqRSASignatureVerify{} }
func (m *CryptoAsymApiReqRSASignatureVerify) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSASignatureVerify) ProtoMessage()    {}
func (*CryptoAsymApiReqRSASignatureVerify) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{21}
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// Crypto Hash digest generate request
type CryptoSymmApiReqHashGenerate struct {
	Hashtype  CryptoApiHashType `protobuf:"varint,1,opt,name=hashtype,proto3,enum=cryptoapis.CryptoApiHashType" json:"hashtype,omitempty"`
	Key       []byte            `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	KeyLen    int32             `protobuf:"varint,3,opt,name=key_len,json=keyLen,proto3" json:"key_len,omitempty"`
	Data      []byte            `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	DataLen   int32             `protobuf:"varint,5,opt,name=data_len,json=dataLen,proto3" json:"data_len,omitempty"`
	DigestLen int32             `protobuf:"varint,6,opt,name=digest_len,json=digestLen,proto3" json:"digest_len,omitempty"`
}

func (m *CryptoSymmApiReqHashGenerate) Reset()         { *m = CryptoSymmApiReqHashGenerate{} }
func (m *CryptoSymmApiReqHashGenerate) String() string { return proto.CompactTextString(m) }
func (*CryptoSymmApiReqHashGenerate) ProtoMessage()    {}
func (*CryptoSymmApiReqHashGenerate) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{22}
}

func (m *CryptoSymmApiReqHashGenerate) GetHashtype() CryptoApiHashType {
	if m != nil {
		return m.Hashtype
	}
	return CryptoApiHashType_none
}

func (m *CryptoSymmApiReqHashGenerate) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CryptoSymmApiReqHashGenerate) GetKeyLen() int32 {
	if m != nil {
		return m.KeyLen
	}
	return 0
}

func (m *CryptoSymmApiReqHashGenerate) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CryptoSymmApiReqHashGenerate) GetDataLen() int32 {
	if m != nil {
		return m.DataLen
	}
	return 0
}

func (m *CryptoSymmApiReqHashGenerate) GetDigestLen() int32 {
	if m != nil {
		return m.DigestLen
	}
	return 0
}

type CryptoSymmApiRespHashGenerate struct {
	Digest []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *CryptoSymmApiRespHashGenerate) Reset()         { *m = CryptoSymmApiRespHashGenerate{} }
func (m *CryptoSymmApiRespHashGenerate) String() string { return proto.CompactTextString(m) }
func (*CryptoSymmApiRespHashGenerate) ProtoMessage()    {}
func (*CryptoSymmApiRespHashGenerate) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{23}
}

func (m *CryptoSymmApiRespHashGenerate) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

// Crypto Hash digest verify request
type CryptoSymmApiReqHashVerify struct {
	Hashtype  CryptoApiHashType `protobuf:"varint,1,opt,name=hashtype,proto3,enum=cryptoapis.CryptoApiHashType" json:"hashtype,omitempty"`
	Key       []byte            `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	KeyLen    int32             `protobuf:"varint,3,opt,name=key_len,json=keyLen,proto3" json:"key_len,omitempty"`
	Data      []byte            `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	DataLen   int32             `protobuf:"varint,5,opt,name=data_len,json=dataLen,proto3" json:"data_len,omitempty"`
	Digest    []byte            `protobuf:"bytes,6,opt,name=digest,proto3" json:"digest,omitempty"`
	DigestLen int32             `protobuf:"varint,7,opt,name=digest_len,json=digestLen,proto3" json:"digest_len,omitempty"`
}

func (m *CryptoSymmApiReqHashVerify) Reset()         { *m = CryptoSymmApiReqHashVerify{} }
func (m *CryptoSymmApiReqHashVerify) String() string { return proto.CompactTextString(m) }
func (*CryptoSymmApiReqHashVerify) ProtoMessage()    {}
func (*CryptoSymmApiReqHashVerify) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoApis, []int{24}
}

func (m *CryptoSymmApiReqHashVerify) GetHashtype() CryptoApiHashType {
	if m != nil {
		return m.Hashtype
	}
	return CryptoApiHashType_none
}

func (m *CryptoSymmApiReqHashVerify) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CryptoSymmApiReqHashVerify) GetKeyLen() int32 {
	if m != nil {
		return m.KeyLen
	}
	return 0
}

func (m *CryptoSymmApiReqHashVerify) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CryptoSymmApiReqHashVerify) GetDataLen() int32 {
	if m != nil {
		return m.DataLen
	}
	return 0
}

func (m *CryptoSymmApiReqHashVerify) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *CryptoSymmApiReqHashVerify) GetDigestLen() int32 {
	if m != nil {
		return m.DigestLen
	}
	return 0
}

type CryptoApiRequest struct {
	ApiType CryptoApiType `protobuf:"varint,1,opt,name=api_type,json=apiType,proto3,enum=cryptoapis.CryptoApiType" json:"api_type,omitempty"`
	// Types that are valid to be assigned to CryptoApiReq:
	//	*CryptoApiRequest_EccPointMulFp
	//	*CryptoApiRequest_EcdsaSigGenFp
	//	*CryptoApiRequest_EcdsaSigVerifyFp
	//	*CryptoApiRequest_RsaEncrypt
	//	*CryptoApiRequest_RsaDecrypt
	//	*CryptoApiRequest_RsaCrtDecrypt
	//	*CryptoApiRequest_HashGenerate
	//	*CryptoApiRequest_HashVerify
	//	*CryptoApiRequest_RsaSigGen
	//	*CryptoApiRequest_RsaSigVerify
	//	*CryptoApiRequest_SetupPrivKey
	//	*CryptoApiRequest_SetupCert
	CryptoApiReq isCryptoApiRequest_CryptoApiReq `protobuf_oneof:"CryptoApiReq"`
}

func (m *CryptoApiRequest) Reset()                    { *m = CryptoApiRequest{} }
func (m *CryptoApiRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoApiRequest) ProtoMessage()               {}
func (*CryptoApiRequest) Descriptor() ([]byte, []int) { return fileDescriptorCryptoApis, []int{25} }

type isCryptoApiRequest_CryptoApiReq interface {
	isCryptoApiRequest_CryptoApiReq()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CryptoApiRequest_EccPointMulFp struct {
	EccPointMulFp *CryptoAsymApiReqECCPointMulFp `protobuf:"bytes,2,opt,name=ecc_point_mul_fp,json=eccPointMulFp,oneof"`
}
type CryptoApiRequest_EcdsaSigGenFp struct {
	EcdsaSigGenFp *CryptoAsymApiReqECDSASignatureGenFp `protobuf:"bytes,3,opt,name=ecdsa_sig_gen_fp,json=ecdsaSigGenFp,oneof"`
}
type CryptoApiRequest_EcdsaSigVerifyFp struct {
	EcdsaSigVerifyFp *CryptoAsymApiReqECDSASignatureVerifyFp `protobuf:"bytes,4,opt,name=ecdsa_sig_verify_fp,json=ecdsaSigVerifyFp,oneof"`
}
type CryptoApiRequest_RsaEncrypt struct {
	RsaEncrypt *CryptoAsymApiReqRSAEncrypt `protobuf:"bytes,5,opt,name=rsa_encrypt,json=rsaEncrypt,oneof"`
}
type CryptoApiRequest_RsaDecrypt struct {
	RsaDecrypt *CryptoAsymApiReqRSADecrypt `protobuf:"bytes,6,opt,name=rsa_decrypt,json=rsaDecrypt,oneof"`
}
type CryptoApiRequest_RsaCrtDecrypt struct {
	RsaCrtDecrypt *CryptoAsymApiReqRSACRTDecrypt `protobuf:"bytes,7,opt,name=rsa_crt_decrypt,json=rsaCrtDecrypt,oneof"`
}
type CryptoApiRequest_HashGenerate struct {
	HashGenerate *CryptoSymmApiReqHashGenerate `protobuf:"bytes,8,opt,name=hash_generate,json=hashGenerate,oneof"`
}
type CryptoApiRequest_HashVerify struct {
	HashVerify *CryptoSymmApiReqHashVerify `protobuf:"bytes,9,opt,name=hash_verify,json=hashVerify,oneof"`
}
type CryptoApiRequest_RsaSigGen struct {
	RsaSigGen *CryptoAsymApiReqRSASignatureGen `protobuf:"bytes,10,opt,name=rsa_sig_gen,json=rsaSigGen,oneof"`
}
type CryptoApiRequest_RsaSigVerify struct {
	RsaSigVerify *CryptoAsymApiReqRSASignatureVerify `protobuf:"bytes,11,opt,name=rsa_sig_verify,json=rsaSigVerify,oneof"`
}
type CryptoApiRequest_SetupPrivKey struct {
	SetupPrivKey *CryptoAsymApiReqSetupPrivateKey `protobuf:"bytes,12,opt,name=setup_priv_key,json=setupPrivKey,oneof"`
}
type CryptoApiRequest_SetupCert struct {
	SetupCert *CryptoAsymApiReqSetupCert `protobuf:"bytes,13,opt,name=setup_cert,json=setupCert,oneof"`
}

func (*CryptoApiRequest_EccPointMulFp) isCryptoApiRequest_CryptoApiReq()    {}
func (*CryptoApiRequest_EcdsaSigGenFp) isCryptoApiRequest_CryptoApiReq()    {}
func (*CryptoApiRequest_EcdsaSigVerifyFp) isCryptoApiRequest_CryptoApiReq() {}
func (*CryptoApiRequest_RsaEncrypt) isCryptoApiRequest_CryptoApiReq()       {}
func (*CryptoApiRequest_RsaDecrypt) isCryptoApiRequest_CryptoApiReq()       {}
func (*CryptoApiRequest_RsaCrtDecrypt) isCryptoApiRequest_CryptoApiReq()    {}
func (*CryptoApiRequest_HashGenerate) isCryptoApiRequest_CryptoApiReq()     {}
func (*CryptoApiRequest_HashVerify) isCryptoApiRequest_CryptoApiReq()       {}
func (*CryptoApiRequest_RsaSigGen) isCryptoApiRequest_CryptoApiReq()        {}
func (*CryptoApiRequest_RsaSigVerify) isCryptoApiRequest_CryptoApiReq()     {}
func (*CryptoApiRequest_SetupPrivKey) isCryptoApiRequest_CryptoApiReq()     {}
func (*CryptoApiRequest_SetupCert) isCryptoApiRequest_CryptoApiReq()        {}

func (m *CryptoApiRequest) GetCryptoApiReq() isCryptoApiRequest_CryptoApiReq {
	if m != nil {
		return m.CryptoApiReq
	}
	return nil
}

func (m *CryptoApiRequest) GetApiType() CryptoApiType {
	if m != nil {
		return m.ApiType
	}
	return CryptoApiType_ASYMAPI_ECC_POINT_MUL_FP
}

func (m *CryptoApiRequest) GetEccPointMulFp() *CryptoAsymApiReqECCPointMulFp {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_EccPointMulFp); ok {
		return x.EccPointMulFp
	}
	return nil
}

func (m *CryptoApiRequest) GetEcdsaSigGenFp() *CryptoAsymApiReqECDSASignatureGenFp {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_EcdsaSigGenFp); ok {
		return x.EcdsaSigGenFp
	}
	return nil
}

func (m *CryptoApiRequest) GetEcdsaSigVerifyFp() *CryptoAsymApiReqECDSASignatureVerifyFp {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_EcdsaSigVerifyFp); ok {
		return x.EcdsaSigVerifyFp
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaEncrypt() *CryptoAsymApiReqRSAEncrypt {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaEncrypt); ok {
		return x.RsaEncrypt
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaDecrypt() *CryptoAsymApiReqRSADecrypt {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaDecrypt); ok {
		return x.RsaDecrypt
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaCrtDecrypt() *CryptoAsymApiReqRSACRTDecrypt {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaCrtDecrypt); ok {
		return x.RsaCrtDecrypt
	}
	return nil
}

func (m *CryptoApiRequest) GetHashGenerate() *CryptoSymmApiReqHashGenerate {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_HashGenerate); ok {
		return x.HashGenerate
	}
	return nil
}

func (m *CryptoApiRequest) GetHashVerify() *CryptoSymmApiReqHashVerify {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_HashVerify); ok {
		return x.HashVerify
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaSigGen() *CryptoAsymApiReqRSASignatureGen {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaSigGen); ok {
		return x.RsaSigGen
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaSigVerify() *CryptoAsymApiReqRSASignatureVerify {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaSigVerify); ok {
		return x.RsaSigVerify
	}
	return nil
}

func (m *CryptoApiRequest) GetSetupPrivKey() *CryptoAsymApiReqSetupPrivateKey {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_SetupPrivKey); ok {
		return x.SetupPrivKey
	}
	return nil
}

func (m *CryptoApiRequest) GetSetupCert() *CryptoAsymApiReqSetupCert {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_SetupCert); ok {
		return x.SetupCert
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CryptoApiRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CryptoApiRequest_OneofMarshaler, _CryptoApiRequest_OneofUnmarshaler, _CryptoApiRequest_OneofSizer, []interface{}{
		(*CryptoApiRequest_EccPointMulFp)(nil),
		(*CryptoApiRequest_EcdsaSigGenFp)(nil),
		(*CryptoApiRequest_EcdsaSigVerifyFp)(nil),
		(*CryptoApiRequest_RsaEncrypt)(nil),
		(*CryptoApiRequest_RsaDecrypt)(nil),
		(*CryptoApiRequest_RsaCrtDecrypt)(nil),
		(*CryptoApiRequest_HashGenerate)(nil),
		(*CryptoApiRequest_HashVerify)(nil),
		(*CryptoApiRequest_RsaSigGen)(nil),
		(*CryptoApiRequest_RsaSigVerify)(nil),
		(*CryptoApiRequest_SetupPrivKey)(nil),
		(*CryptoApiRequest_SetupCert)(nil),
	}
}

func _CryptoApiRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CryptoApiRequest)
	// CryptoApiReq
	switch x := m.CryptoApiReq.(type) {
	case *CryptoApiRequest_EccPointMulFp:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EccPointMulFp); err != nil {
			return err
		}
	case *CryptoApiRequest_EcdsaSigGenFp:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaSigGenFp); err != nil {
			return err
		}
	case *CryptoApiRequest_EcdsaSigVerifyFp:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaSigVerifyFp); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaEncrypt:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaEncrypt); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaDecrypt:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaDecrypt); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaCrtDecrypt:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaCrtDecrypt); err != nil {
			return err
		}
	case *CryptoApiRequest_HashGenerate:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashGenerate); err != nil {
			return err
		}
	case *CryptoApiRequest_HashVerify:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashVerify); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaSigGen:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaSigGen); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaSigVerify:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaSigVerify); err != nil {
			return err
		}
	case *CryptoApiRequest_SetupPrivKey:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupPrivKey); err != nil {
			return err
		}
	case *CryptoApiRequest_SetupCert:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupCert); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CryptoApiRequest.CryptoApiReq has unexpected type %T", x)
	}
	return nil
}

func _CryptoApiRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CryptoApiRequest)
	switch tag {
	case 2: // CryptoApiReq.ecc_point_mul_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqECCPointMulFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_EccPointMulFp{msg}
		return true, err
	case 3: // CryptoApiReq.ecdsa_sig_gen_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqECDSASignatureGenFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_EcdsaSigGenFp{msg}
		return true, err
	case 4: // CryptoApiReq.ecdsa_sig_verify_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqECDSASignatureVerifyFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_EcdsaSigVerifyFp{msg}
		return true, err
	case 5: // CryptoApiReq.rsa_encrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSAEncrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaEncrypt{msg}
		return true, err
	case 6: // CryptoApiReq.rsa_decrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSADecrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaDecrypt{msg}
		return true, err
	case 7: // CryptoApiReq.rsa_crt_decrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSACRTDecrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaCrtDecrypt{msg}
		return true, err
	case 8: // CryptoApiReq.hash_generate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoSymmApiReqHashGenerate)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_HashGenerate{msg}
		return true, err
	case 9: // CryptoApiReq.hash_verify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoSymmApiReqHashVerify)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_HashVerify{msg}
		return true, err
	case 10: // CryptoApiReq.rsa_sig_gen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSASignatureGen)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaSigGen{msg}
		return true, err
	case 11: // CryptoApiReq.rsa_sig_verify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSASignatureVerify)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaSigVerify{msg}
		return true, err
	case 12: // CryptoApiReq.setup_priv_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqSetupPrivateKey)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_SetupPrivKey{msg}
		return true, err
	case 13: // CryptoApiReq.setup_cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqSetupCert)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_SetupCert{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CryptoApiRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CryptoApiRequest)
	// CryptoApiReq
	switch x := m.CryptoApiReq.(type) {
	case *CryptoApiRequest_EccPointMulFp:
		s := proto.Size(x.EccPointMulFp)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_EcdsaSigGenFp:
		s := proto.Size(x.EcdsaSigGenFp)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_EcdsaSigVerifyFp:
		s := proto.Size(x.EcdsaSigVerifyFp)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaEncrypt:
		s := proto.Size(x.RsaEncrypt)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaDecrypt:
		s := proto.Size(x.RsaDecrypt)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaCrtDecrypt:
		s := proto.Size(x.RsaCrtDecrypt)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_HashGenerate:
		s := proto.Size(x.HashGenerate)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_HashVerify:
		s := proto.Size(x.HashVerify)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaSigGen:
		s := proto.Size(x.RsaSigGen)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaSigVerify:
		s := proto.Size(x.RsaSigVerify)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_SetupPrivKey:
		s := proto.Size(x.SetupPrivKey)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_SetupCert:
		s := proto.Size(x.SetupCert)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CryptoApiResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	// Types that are valid to be assigned to CryptoApiResp:
	//	*CryptoApiResponse_EccPointMulFp
	//	*CryptoApiResponse_EcdsaSigGenFp
	//	*CryptoApiResponse_RsaEncrypt
	//	*CryptoApiResponse_RsaDecrypt
	//	*CryptoApiResponse_RsaCrtDecrypt
	//	*CryptoApiResponse_HashGenerate
	//	*CryptoApiResponse_RsaSigGen
	//	*CryptoApiResponse_SetupPrivKey
	//	*CryptoApiResponse_SetupCert
	CryptoApiResp isCryptoApiResponse_CryptoApiResp `protobuf_oneof:"CryptoApiResp"`
}

func (m *CryptoApiResponse) Reset()                    { *m = CryptoApiResponse{} }
func (m *CryptoApiResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoApiResponse) ProtoMessage()               {}
func (*CryptoApiResponse) Descriptor() ([]byte, []int) { return fileDescriptorCryptoApis, []int{26} }

type isCryptoApiResponse_CryptoApiResp interface {
	isCryptoApiResponse_CryptoApiResp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CryptoApiResponse_EccPointMulFp struct {
	EccPointMulFp *CryptoAsymApiRespECCPointMulFp `protobuf:"bytes,2,opt,name=ecc_point_mul_fp,json=eccPointMulFp,oneof"`
}
type CryptoApiResponse_EcdsaSigGenFp struct {
	EcdsaSigGenFp *CryptoAsymApiRespECDSASignatureGenFp `protobuf:"bytes,3,opt,name=ecdsa_sig_gen_fp,json=ecdsaSigGenFp,oneof"`
}
type CryptoApiResponse_RsaEncrypt struct {
	RsaEncrypt *CryptoAsymApiRespRSAEncrypt `protobuf:"bytes,4,opt,name=rsa_encrypt,json=rsaEncrypt,oneof"`
}
type CryptoApiResponse_RsaDecrypt struct {
	RsaDecrypt *CryptoAsymApiRespRSADecrypt `protobuf:"bytes,5,opt,name=rsa_decrypt,json=rsaDecrypt,oneof"`
}
type CryptoApiResponse_RsaCrtDecrypt struct {
	RsaCrtDecrypt *CryptoAsymApiRespRSACRTDecrypt `protobuf:"bytes,6,opt,name=rsa_crt_decrypt,json=rsaCrtDecrypt,oneof"`
}
type CryptoApiResponse_HashGenerate struct {
	HashGenerate *CryptoSymmApiRespHashGenerate `protobuf:"bytes,7,opt,name=hash_generate,json=hashGenerate,oneof"`
}
type CryptoApiResponse_RsaSigGen struct {
	RsaSigGen *CryptoAsymApiRespRSASignatureGen `protobuf:"bytes,8,opt,name=rsa_sig_gen,json=rsaSigGen,oneof"`
}
type CryptoApiResponse_SetupPrivKey struct {
	SetupPrivKey *CryptoAsymApiRespSetupPrivateKey `protobuf:"bytes,9,opt,name=setup_priv_key,json=setupPrivKey,oneof"`
}
type CryptoApiResponse_SetupCert struct {
	SetupCert *CryptoAsymApiRespSetupCert `protobuf:"bytes,10,opt,name=setup_cert,json=setupCert,oneof"`
}

func (*CryptoApiResponse_EccPointMulFp) isCryptoApiResponse_CryptoApiResp() {}
func (*CryptoApiResponse_EcdsaSigGenFp) isCryptoApiResponse_CryptoApiResp() {}
func (*CryptoApiResponse_RsaEncrypt) isCryptoApiResponse_CryptoApiResp()    {}
func (*CryptoApiResponse_RsaDecrypt) isCryptoApiResponse_CryptoApiResp()    {}
func (*CryptoApiResponse_RsaCrtDecrypt) isCryptoApiResponse_CryptoApiResp() {}
func (*CryptoApiResponse_HashGenerate) isCryptoApiResponse_CryptoApiResp()  {}
func (*CryptoApiResponse_RsaSigGen) isCryptoApiResponse_CryptoApiResp()     {}
func (*CryptoApiResponse_SetupPrivKey) isCryptoApiResponse_CryptoApiResp()  {}
func (*CryptoApiResponse_SetupCert) isCryptoApiResponse_CryptoApiResp()     {}

func (m *CryptoApiResponse) GetCryptoApiResp() isCryptoApiResponse_CryptoApiResp {
	if m != nil {
		return m.CryptoApiResp
	}
	return nil
}

func (m *CryptoApiResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoApiResponse) GetEccPointMulFp() *CryptoAsymApiRespECCPointMulFp {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_EccPointMulFp); ok {
		return x.EccPointMulFp
	}
	return nil
}

func (m *CryptoApiResponse) GetEcdsaSigGenFp() *CryptoAsymApiRespECDSASignatureGenFp {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_EcdsaSigGenFp); ok {
		return x.EcdsaSigGenFp
	}
	return nil
}

func (m *CryptoApiResponse) GetRsaEncrypt() *CryptoAsymApiRespRSAEncrypt {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_RsaEncrypt); ok {
		return x.RsaEncrypt
	}
	return nil
}

func (m *CryptoApiResponse) GetRsaDecrypt() *CryptoAsymApiRespRSADecrypt {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_RsaDecrypt); ok {
		return x.RsaDecrypt
	}
	return nil
}

func (m *CryptoApiResponse) GetRsaCrtDecrypt() *CryptoAsymApiRespRSACRTDecrypt {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_RsaCrtDecrypt); ok {
		return x.RsaCrtDecrypt
	}
	return nil
}

func (m *CryptoApiResponse) GetHashGenerate() *CryptoSymmApiRespHashGenerate {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_HashGenerate); ok {
		return x.HashGenerate
	}
	return nil
}

func (m *CryptoApiResponse) GetRsaSigGen() *CryptoAsymApiRespRSASignatureGen {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_RsaSigGen); ok {
		return x.RsaSigGen
	}
	return nil
}

func (m *CryptoApiResponse) GetSetupPrivKey() *CryptoAsymApiRespSetupPrivateKey {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_SetupPrivKey); ok {
		return x.SetupPrivKey
	}
	return nil
}

func (m *CryptoApiResponse) GetSetupCert() *CryptoAsymApiRespSetupCert {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_SetupCert); ok {
		return x.SetupCert
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CryptoApiResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CryptoApiResponse_OneofMarshaler, _CryptoApiResponse_OneofUnmarshaler, _CryptoApiResponse_OneofSizer, []interface{}{
		(*CryptoApiResponse_EccPointMulFp)(nil),
		(*CryptoApiResponse_EcdsaSigGenFp)(nil),
		(*CryptoApiResponse_RsaEncrypt)(nil),
		(*CryptoApiResponse_RsaDecrypt)(nil),
		(*CryptoApiResponse_RsaCrtDecrypt)(nil),
		(*CryptoApiResponse_HashGenerate)(nil),
		(*CryptoApiResponse_RsaSigGen)(nil),
		(*CryptoApiResponse_SetupPrivKey)(nil),
		(*CryptoApiResponse_SetupCert)(nil),
	}
}

func _CryptoApiResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CryptoApiResponse)
	// CryptoApiResp
	switch x := m.CryptoApiResp.(type) {
	case *CryptoApiResponse_EccPointMulFp:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EccPointMulFp); err != nil {
			return err
		}
	case *CryptoApiResponse_EcdsaSigGenFp:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaSigGenFp); err != nil {
			return err
		}
	case *CryptoApiResponse_RsaEncrypt:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaEncrypt); err != nil {
			return err
		}
	case *CryptoApiResponse_RsaDecrypt:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaDecrypt); err != nil {
			return err
		}
	case *CryptoApiResponse_RsaCrtDecrypt:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaCrtDecrypt); err != nil {
			return err
		}
	case *CryptoApiResponse_HashGenerate:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashGenerate); err != nil {
			return err
		}
	case *CryptoApiResponse_RsaSigGen:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaSigGen); err != nil {
			return err
		}
	case *CryptoApiResponse_SetupPrivKey:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupPrivKey); err != nil {
			return err
		}
	case *CryptoApiResponse_SetupCert:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupCert); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CryptoApiResponse.CryptoApiResp has unexpected type %T", x)
	}
	return nil
}

func _CryptoApiResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CryptoApiResponse)
	switch tag {
	case 2: // CryptoApiResp.ecc_point_mul_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespECCPointMulFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_EccPointMulFp{msg}
		return true, err
	case 3: // CryptoApiResp.ecdsa_sig_gen_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespECDSASignatureGenFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_EcdsaSigGenFp{msg}
		return true, err
	case 4: // CryptoApiResp.rsa_encrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSAEncrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_RsaEncrypt{msg}
		return true, err
	case 5: // CryptoApiResp.rsa_decrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSADecrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_RsaDecrypt{msg}
		return true, err
	case 6: // CryptoApiResp.rsa_crt_decrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSACRTDecrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_RsaCrtDecrypt{msg}
		return true, err
	case 7: // CryptoApiResp.hash_generate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoSymmApiRespHashGenerate)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_HashGenerate{msg}
		return true, err
	case 8: // CryptoApiResp.rsa_sig_gen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSASignatureGen)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_RsaSigGen{msg}
		return true, err
	case 9: // CryptoApiResp.setup_priv_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespSetupPrivateKey)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_SetupPrivKey{msg}
		return true, err
	case 10: // CryptoApiResp.setup_cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespSetupCert)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_SetupCert{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CryptoApiResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CryptoApiResponse)
	// CryptoApiResp
	switch x := m.CryptoApiResp.(type) {
	case *CryptoApiResponse_EccPointMulFp:
		s := proto.Size(x.EccPointMulFp)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_EcdsaSigGenFp:
		s := proto.Size(x.EcdsaSigGenFp)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_RsaEncrypt:
		s := proto.Size(x.RsaEncrypt)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_RsaDecrypt:
		s := proto.Size(x.RsaDecrypt)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_RsaCrtDecrypt:
		s := proto.Size(x.RsaCrtDecrypt)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_HashGenerate:
		s := proto.Size(x.HashGenerate)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_RsaSigGen:
		s := proto.Size(x.RsaSigGen)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_SetupPrivKey:
		s := proto.Size(x.SetupPrivKey)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_SetupCert:
		s := proto.Size(x.SetupCert)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CryptoApiRequestMsg struct {
	Request []*CryptoApiRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoApiRequestMsg) Reset()                    { *m = CryptoApiRequestMsg{} }
func (m *CryptoApiRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoApiRequestMsg) ProtoMessage()               {}
func (*CryptoApiRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorCryptoApis, []int{27} }

func (m *CryptoApiRequestMsg) GetRequest() []*CryptoApiRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoApiResponseMsg struct {
	Response []*CryptoApiResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoApiResponseMsg) Reset()                    { *m = CryptoApiResponseMsg{} }
func (m *CryptoApiResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoApiResponseMsg) ProtoMessage()               {}
func (*CryptoApiResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorCryptoApis, []int{28} }

func (m *CryptoApiResponseMsg) GetResponse() []*CryptoApiResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*ECCPoint)(nil), "cryptoapis.ECCPoint")
	proto.RegisterType((*CryptoAsymApiECCDomainParamsFp)(nil), "cryptoapis.CryptoAsymApiECCDomainParamsFp")
	proto.RegisterType((*CryptoAsymApiReqECCPointMulFp)(nil), "cryptoapis.CryptoAsymApiReqECCPointMulFp")
	proto.RegisterType((*CryptoAsymApiRespECCPointMulFp)(nil), "cryptoapis.CryptoAsymApiRespECCPointMulFp")
	proto.RegisterType((*CryptoAsymApiReqECDSASignatureGenFp)(nil), "cryptoapis.CryptoAsymApiReqECDSASignatureGenFp")
	proto.RegisterType((*CryptoAsymApiRespECDSASignatureGenFp)(nil), "cryptoapis.CryptoAsymApiRespECDSASignatureGenFp")
	proto.RegisterType((*CryptoAsymApiReqECDSASignatureVerifyFp)(nil), "cryptoapis.CryptoAsymApiReqECDSASignatureVerifyFp")
	proto.RegisterType((*CryptoAsymApiReqRSAEncrypt)(nil), "cryptoapis.CryptoAsymApiReqRSAEncrypt")
	proto.RegisterType((*CryptoAsymApiRespRSAEncrypt)(nil), "cryptoapis.CryptoAsymApiRespRSAEncrypt")
	proto.RegisterType((*CryptoAsymApiReqRSADecrypt)(nil), "cryptoapis.CryptoAsymApiReqRSADecrypt")
	proto.RegisterType((*CryptoAsymApiRespRSADecrypt)(nil), "cryptoapis.CryptoAsymApiRespRSADecrypt")
	proto.RegisterType((*CryptoAsymApiReqRSACRTDecrypt)(nil), "cryptoapis.CryptoAsymApiReqRSACRTDecrypt")
	proto.RegisterType((*CryptoAsymApiRespRSACRTDecrypt)(nil), "cryptoapis.CryptoAsymApiRespRSACRTDecrypt")
	proto.RegisterType((*CryptoAsymApiReqSetupPrivateKey)(nil), "cryptoapis.CryptoAsymApiReqSetupPrivateKey")
	proto.RegisterType((*CryptoAsymApiRespECDSAKeyInfo)(nil), "cryptoapis.CryptoAsymApiRespECDSAKeyInfo")
	proto.RegisterType((*CryptoAsymApiRespRSAKeyInfo)(nil), "cryptoapis.CryptoAsymApiRespRSAKeyInfo")
	proto.RegisterType((*CryptoAsymApiRespSetupPrivateKey)(nil), "cryptoapis.CryptoAsymApiRespSetupPrivateKey")
	proto.RegisterType((*CryptoAsymApiReqSetupCert)(nil), "cryptoapis.CryptoAsymApiReqSetupCert")
	proto.RegisterType((*CryptoAsymApiRespSetupCert)(nil), "cryptoapis.CryptoAsymApiRespSetupCert")
	proto.RegisterType((*CryptoAsymApiReqRSASignatureGen)(nil), "cryptoapis.CryptoAsymApiReqRSASignatureGen")
	proto.RegisterType((*CryptoAsymApiRespRSASignatureGen)(nil), "cryptoapis.CryptoAsymApiRespRSASignatureGen")
	proto.RegisterType((*CryptoAsymApiReqRSASignatureVerify)(nil), "cryptoapis.CryptoAsymApiReqRSASignatureVerify")
	proto.RegisterType((*CryptoSymmApiReqHashGenerate)(nil), "cryptoapis.CryptoSymmApiReqHashGenerate")
	proto.RegisterType((*CryptoSymmApiRespHashGenerate)(nil), "cryptoapis.CryptoSymmApiRespHashGenerate")
	proto.RegisterType((*CryptoSymmApiReqHashVerify)(nil), "cryptoapis.CryptoSymmApiReqHashVerify")
	proto.RegisterType((*CryptoApiRequest)(nil), "cryptoapis.CryptoApiRequest")
	proto.RegisterType((*CryptoApiResponse)(nil), "cryptoapis.CryptoApiResponse")
	proto.RegisterType((*CryptoApiRequestMsg)(nil), "cryptoapis.CryptoApiRequestMsg")
	proto.RegisterType((*CryptoApiResponseMsg)(nil), "cryptoapis.CryptoApiResponseMsg")
	proto.RegisterEnum("cryptoapis.CryptoApiHashType", CryptoApiHashType_name, CryptoApiHashType_value)
	proto.RegisterEnum("cryptoapis.CryptoApiType", CryptoApiType_name, CryptoApiType_value)
	proto.RegisterEnum("cryptoapis.UpdateType", UpdateType_name, UpdateType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CryptoApis service

type CryptoApisClient interface {
	CryptoApiInvoke(ctx context.Context, in *CryptoApiRequestMsg, opts ...grpc.CallOption) (*CryptoApiResponseMsg, error)
}

type cryptoApisClient struct {
	cc *grpc.ClientConn
}

func NewCryptoApisClient(cc *grpc.ClientConn) CryptoApisClient {
	return &cryptoApisClient{cc}
}

func (c *cryptoApisClient) CryptoApiInvoke(ctx context.Context, in *CryptoApiRequestMsg, opts ...grpc.CallOption) (*CryptoApiResponseMsg, error) {
	out := new(CryptoApiResponseMsg)
	err := grpc.Invoke(ctx, "/cryptoapis.CryptoApis/CryptoApiInvoke", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CryptoApis service

type CryptoApisServer interface {
	CryptoApiInvoke(context.Context, *CryptoApiRequestMsg) (*CryptoApiResponseMsg, error)
}

func RegisterCryptoApisServer(s *grpc.Server, srv CryptoApisServer) {
	s.RegisterService(&_CryptoApis_serviceDesc, srv)
}

func _CryptoApis_CryptoApiInvoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoApiRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoApisServer).CryptoApiInvoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptoapis.CryptoApis/CryptoApiInvoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoApisServer).CryptoApiInvoke(ctx, req.(*CryptoApiRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _CryptoApis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cryptoapis.CryptoApis",
	HandlerType: (*CryptoApisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CryptoApiInvoke",
			Handler:    _CryptoApis_CryptoApiInvoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crypto_apis.proto",
}

func (m *ECCPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ECCPoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.X) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.X)))
		i += copy(dAtA[i:], m.X)
	}
	if len(m.Y) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.Y)))
		i += copy(dAtA[i:], m.Y)
	}
	return i, nil
}

func (m *CryptoAsymApiECCDomainParamsFp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiECCDomainParamsFp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeySize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.KeySize))
	}
	if len(m.P) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.P)))
		i += copy(dAtA[i:], m.P)
	}
	if len(m.A) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.A)))
		i += copy(dAtA[i:], m.A)
	}
	if len(m.B) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.B)))
		i += copy(dAtA[i:], m.B)
	}
	if m.G != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.G.Size()))
		n1, err := m.G.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.N) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.N)))
		i += copy(dAtA[i:], m.N)
	}
	return i, nil
}

func (m *CryptoAsymApiReqECCPointMulFp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqECCPointMulFp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EccDomainParams != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.EccDomainParams.Size()))
		n2, err := m.EccDomainParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.EccPoint != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.EccPoint.Size()))
		n3, err := m.EccPoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.K) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.K)))
		i += copy(dAtA[i:], m.K)
	}
	return i, nil
}

func (m *CryptoAsymApiRespECCPointMulFp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespECCPointMulFp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Q != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.Q.Size()))
		n4, err := m.Q.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EccDomainParams != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.EccDomainParams.Size()))
		n5, err := m.EccDomainParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Da) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.Da)))
		i += copy(dAtA[i:], m.Da)
	}
	if len(m.K) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.K)))
		i += copy(dAtA[i:], m.K)
	}
	if len(m.H) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.H)))
		i += copy(dAtA[i:], m.H)
	}
	if m.KeyIdx != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.KeyIdx))
	}
	if m.AsyncEn {
		dAtA[i] = 0x30
		i++
		if m.AsyncEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.R) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.R)))
		i += copy(dAtA[i:], m.R)
	}
	if len(m.S) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.S)))
		i += copy(dAtA[i:], m.S)
	}
	return i, nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EccDomainParams != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.EccDomainParams.Size()))
		n6, err := m.EccDomainParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Q != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.Q.Size()))
		n7, err := m.Q.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.R) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.R)))
		i += copy(dAtA[i:], m.R)
	}
	if len(m.S) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.S)))
		i += copy(dAtA[i:], m.S)
	}
	if len(m.H) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.H)))
		i += copy(dAtA[i:], m.H)
	}
	if m.AsyncEn {
		dAtA[i] = 0x30
		i++
		if m.AsyncEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CryptoAsymApiReqRSAEncrypt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqRSAEncrypt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeySize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.KeySize))
	}
	if len(m.ModN) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.ModN)))
		i += copy(dAtA[i:], m.ModN)
	}
	if len(m.E) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.E)))
		i += copy(dAtA[i:], m.E)
	}
	if len(m.PlainText) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.PlainText)))
		i += copy(dAtA[i:], m.PlainText)
	}
	if m.AsyncEn {
		dAtA[i] = 0x28
		i++
		if m.AsyncEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CryptoAsymApiRespRSAEncrypt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespRSAEncrypt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CipherText) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.CipherText)))
		i += copy(dAtA[i:], m.CipherText)
	}
	return i, nil
}

func (m *CryptoAsymApiReqRSADecrypt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqRSADecrypt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeySize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.KeySize))
	}
	if len(m.ModN) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.ModN)))
		i += copy(dAtA[i:], m.ModN)
	}
	if len(m.D) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.D)))
		i += copy(dAtA[i:], m.D)
	}
	if len(m.CipherText) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.CipherText)))
		i += copy(dAtA[i:], m.CipherText)
	}
	return i, nil
}

func (m *CryptoAsymApiRespRSADecrypt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespRSADecrypt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlainText) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.PlainText)))
		i += copy(dAtA[i:], m.PlainText)
	}
	return i, nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeySize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.KeySize))
	}
	if len(m.P) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.P)))
		i += copy(dAtA[i:], m.P)
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if len(m.Dp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.Dp)))
		i += copy(dAtA[i:], m.Dp)
	}
	if len(m.Dq) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.Dq)))
		i += copy(dAtA[i:], m.Dq)
	}
	if len(m.Qinv) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.Qinv)))
		i += copy(dAtA[i:], m.Qinv)
	}
	if len(m.CipherText) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.CipherText)))
		i += copy(dAtA[i:], m.CipherText)
	}
	if m.KeyIdx != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.KeyIdx))
	}
	if m.AsyncEn {
		dAtA[i] = 0x48
		i++
		if m.AsyncEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CryptoAsymApiRespRSACRTDecrypt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespRSACRTDecrypt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlainText) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.PlainText)))
		i += copy(dAtA[i:], m.PlainText)
	}
	return i, nil
}

func (m *CryptoAsymApiReqSetupPrivateKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqSetupPrivateKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *CryptoAsymApiRespECDSAKeyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespECDSAKeyInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SignKeyIdx != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.SignKeyIdx))
	}
	return i, nil
}

func (m *CryptoAsymApiRespRSAKeyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespRSAKeyInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SignKeyIdx != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.SignKeyIdx))
	}
	if m.DecryptKeyIdx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.DecryptKeyIdx))
	}
	return i, nil
}

func (m *CryptoAsymApiRespSetupPrivateKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespSetupPrivateKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.KeyType))
	}
	if m.KeyInfo != nil {
		nn8, err := m.KeyInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	return i, nil
}

func (m *CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EcdsaKeyInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.EcdsaKeyInfo.Size()))
		n9, err := m.EcdsaKeyInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaKeyInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.RsaKeyInfo.Size()))
		n10, err := m.RsaKeyInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *CryptoAsymApiReqSetupCert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqSetupCert) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UpdateType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.UpdateType))
	}
	if m.CertId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.CertId))
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.NextCertId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.NextCertId))
	}
	return i, nil
}

func (m *CryptoAsymApiRespSetupCert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespSetupCert) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CryptoAsymApiReqRSASignatureGen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqRSASignatureGen) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeySize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.KeySize))
	}
	if len(m.ModN) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.ModN)))
		i += copy(dAtA[i:], m.ModN)
	}
	if len(m.D) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.D)))
		i += copy(dAtA[i:], m.D)
	}
	if len(m.H) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.H)))
		i += copy(dAtA[i:], m.H)
	}
	if m.KeyIdx != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.KeyIdx))
	}
	if m.AsyncEn {
		dAtA[i] = 0x30
		i++
		if m.AsyncEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CryptoAsymApiRespRSASignatureGen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespRSASignatureGen) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.S) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.S)))
		i += copy(dAtA[i:], m.S)
	}
	return i, nil
}

func (m *CryptoAsymApiReqRSASignatureVerify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqRSASignatureVerify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeySize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.KeySize))
	}
	if len(m.ModN) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.ModN)))
		i += copy(dAtA[i:], m.ModN)
	}
	if len(m.E) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.E)))
		i += copy(dAtA[i:], m.E)
	}
	if len(m.H) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.H)))
		i += copy(dAtA[i:], m.H)
	}
	if len(m.S) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.S)))
		i += copy(dAtA[i:], m.S)
	}
	return i, nil
}

func (m *CryptoSymmApiReqHashGenerate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoSymmApiReqHashGenerate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hashtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.Hashtype))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.KeyLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.KeyLen))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.DataLen != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.DataLen))
	}
	if m.DigestLen != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.DigestLen))
	}
	return i, nil
}

func (m *CryptoSymmApiRespHashGenerate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoSymmApiRespHashGenerate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Digest) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.Digest)))
		i += copy(dAtA[i:], m.Digest)
	}
	return i, nil
}

func (m *CryptoSymmApiReqHashVerify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoSymmApiReqHashVerify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hashtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.Hashtype))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.KeyLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.KeyLen))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.DataLen != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.DataLen))
	}
	if len(m.Digest) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(len(m.Digest)))
		i += copy(dAtA[i:], m.Digest)
	}
	if m.DigestLen != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.DigestLen))
	}
	return i, nil
}

func (m *CryptoApiRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoApiRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.ApiType))
	}
	if m.CryptoApiReq != nil {
		nn11, err := m.CryptoApiReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn11
	}
	return i, nil
}

func (m *CryptoApiRequest_EccPointMulFp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EccPointMulFp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.EccPointMulFp.Size()))
		n12, err := m.EccPointMulFp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *CryptoApiRequest_EcdsaSigGenFp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EcdsaSigGenFp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.EcdsaSigGenFp.Size()))
		n13, err := m.EcdsaSigGenFp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *CryptoApiRequest_EcdsaSigVerifyFp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EcdsaSigVerifyFp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.EcdsaSigVerifyFp.Size()))
		n14, err := m.EcdsaSigVerifyFp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *CryptoApiRequest_RsaEncrypt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaEncrypt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.RsaEncrypt.Size()))
		n15, err := m.RsaEncrypt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *CryptoApiRequest_RsaDecrypt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaDecrypt != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.RsaDecrypt.Size()))
		n16, err := m.RsaDecrypt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *CryptoApiRequest_RsaCrtDecrypt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaCrtDecrypt != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.RsaCrtDecrypt.Size()))
		n17, err := m.RsaCrtDecrypt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *CryptoApiRequest_HashGenerate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashGenerate != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.HashGenerate.Size()))
		n18, err := m.HashGenerate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *CryptoApiRequest_HashVerify) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashVerify != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.HashVerify.Size()))
		n19, err := m.HashVerify.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *CryptoApiRequest_RsaSigGen) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaSigGen != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.RsaSigGen.Size()))
		n20, err := m.RsaSigGen.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *CryptoApiRequest_RsaSigVerify) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaSigVerify != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.RsaSigVerify.Size()))
		n21, err := m.RsaSigVerify.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *CryptoApiRequest_SetupPrivKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetupPrivKey != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.SetupPrivKey.Size()))
		n22, err := m.SetupPrivKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *CryptoApiRequest_SetupCert) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetupCert != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.SetupCert.Size()))
		n23, err := m.SetupCert.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *CryptoApiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoApiResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.ApiStatus))
	}
	if m.CryptoApiResp != nil {
		nn24, err := m.CryptoApiResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn24
	}
	return i, nil
}

func (m *CryptoApiResponse_EccPointMulFp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EccPointMulFp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.EccPointMulFp.Size()))
		n25, err := m.EccPointMulFp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *CryptoApiResponse_EcdsaSigGenFp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EcdsaSigGenFp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.EcdsaSigGenFp.Size()))
		n26, err := m.EcdsaSigGenFp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *CryptoApiResponse_RsaEncrypt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaEncrypt != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.RsaEncrypt.Size()))
		n27, err := m.RsaEncrypt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *CryptoApiResponse_RsaDecrypt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaDecrypt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.RsaDecrypt.Size()))
		n28, err := m.RsaDecrypt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *CryptoApiResponse_RsaCrtDecrypt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaCrtDecrypt != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.RsaCrtDecrypt.Size()))
		n29, err := m.RsaCrtDecrypt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *CryptoApiResponse_HashGenerate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashGenerate != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.HashGenerate.Size()))
		n30, err := m.HashGenerate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *CryptoApiResponse_RsaSigGen) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaSigGen != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.RsaSigGen.Size()))
		n31, err := m.RsaSigGen.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *CryptoApiResponse_SetupPrivKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetupPrivKey != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.SetupPrivKey.Size()))
		n32, err := m.SetupPrivKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *CryptoApiResponse_SetupCert) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetupCert != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCryptoApis(dAtA, i, uint64(m.SetupCert.Size()))
		n33, err := m.SetupCert.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *CryptoApiRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoApiRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCryptoApis(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoApiResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoApiResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCryptoApis(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintCryptoApis(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ECCPoint) Size() (n int) {
	var l int
	_ = l
	l = len(m.X)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.Y)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiECCDomainParamsFp) Size() (n int) {
	var l int
	_ = l
	if m.KeySize != 0 {
		n += 1 + sovCryptoApis(uint64(m.KeySize))
	}
	l = len(m.P)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.A)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.B)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	if m.G != nil {
		l = m.G.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.N)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiReqECCPointMulFp) Size() (n int) {
	var l int
	_ = l
	if m.EccDomainParams != nil {
		l = m.EccDomainParams.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	if m.EccPoint != nil {
		l = m.EccPoint.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.K)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiRespECCPointMulFp) Size() (n int) {
	var l int
	_ = l
	if m.Q != nil {
		l = m.Q.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) Size() (n int) {
	var l int
	_ = l
	if m.EccDomainParams != nil {
		l = m.EccDomainParams.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.Da)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.K)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.H)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	if m.KeyIdx != 0 {
		n += 1 + sovCryptoApis(uint64(m.KeyIdx))
	}
	if m.AsyncEn {
		n += 2
	}
	return n
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) Size() (n int) {
	var l int
	_ = l
	l = len(m.R)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) Size() (n int) {
	var l int
	_ = l
	if m.EccDomainParams != nil {
		l = m.EccDomainParams.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	if m.Q != nil {
		l = m.Q.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.R)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.H)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	if m.AsyncEn {
		n += 2
	}
	return n
}

func (m *CryptoAsymApiReqRSAEncrypt) Size() (n int) {
	var l int
	_ = l
	if m.KeySize != 0 {
		n += 1 + sovCryptoApis(uint64(m.KeySize))
	}
	l = len(m.ModN)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.E)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.PlainText)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	if m.AsyncEn {
		n += 2
	}
	return n
}

func (m *CryptoAsymApiRespRSAEncrypt) Size() (n int) {
	var l int
	_ = l
	l = len(m.CipherText)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiReqRSADecrypt) Size() (n int) {
	var l int
	_ = l
	if m.KeySize != 0 {
		n += 1 + sovCryptoApis(uint64(m.KeySize))
	}
	l = len(m.ModN)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.D)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.CipherText)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiRespRSADecrypt) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlainText)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiReqRSACRTDecrypt) Size() (n int) {
	var l int
	_ = l
	if m.KeySize != 0 {
		n += 1 + sovCryptoApis(uint64(m.KeySize))
	}
	l = len(m.P)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.Dp)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.Dq)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.Qinv)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.CipherText)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	if m.KeyIdx != 0 {
		n += 1 + sovCryptoApis(uint64(m.KeyIdx))
	}
	if m.AsyncEn {
		n += 2
	}
	return n
}

func (m *CryptoAsymApiRespRSACRTDecrypt) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlainText)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiReqSetupPrivateKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiRespECDSAKeyInfo) Size() (n int) {
	var l int
	_ = l
	if m.SignKeyIdx != 0 {
		n += 1 + sovCryptoApis(uint64(m.SignKeyIdx))
	}
	return n
}

func (m *CryptoAsymApiRespRSAKeyInfo) Size() (n int) {
	var l int
	_ = l
	if m.SignKeyIdx != 0 {
		n += 1 + sovCryptoApis(uint64(m.SignKeyIdx))
	}
	if m.DecryptKeyIdx != 0 {
		n += 1 + sovCryptoApis(uint64(m.DecryptKeyIdx))
	}
	return n
}

func (m *CryptoAsymApiRespSetupPrivateKey) Size() (n int) {
	var l int
	_ = l
	if m.KeyType != 0 {
		n += 1 + sovCryptoApis(uint64(m.KeyType))
	}
	if m.KeyInfo != nil {
		n += m.KeyInfo.Size()
	}
	return n
}

func (m *CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo) Size() (n int) {
	var l int
	_ = l
	if m.EcdsaKeyInfo != nil {
		l = m.EcdsaKeyInfo.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo) Size() (n int) {
	var l int
	_ = l
	if m.RsaKeyInfo != nil {
		l = m.RsaKeyInfo.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoAsymApiReqSetupCert) Size() (n int) {
	var l int
	_ = l
	if m.UpdateType != 0 {
		n += 1 + sovCryptoApis(uint64(m.UpdateType))
	}
	if m.CertId != 0 {
		n += 1 + sovCryptoApis(uint64(m.CertId))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	if m.NextCertId != 0 {
		n += 1 + sovCryptoApis(uint64(m.NextCertId))
	}
	return n
}

func (m *CryptoAsymApiRespSetupCert) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CryptoAsymApiReqRSASignatureGen) Size() (n int) {
	var l int
	_ = l
	if m.KeySize != 0 {
		n += 1 + sovCryptoApis(uint64(m.KeySize))
	}
	l = len(m.ModN)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.D)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.H)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	if m.KeyIdx != 0 {
		n += 1 + sovCryptoApis(uint64(m.KeyIdx))
	}
	if m.AsyncEn {
		n += 2
	}
	return n
}

func (m *CryptoAsymApiRespRSASignatureGen) Size() (n int) {
	var l int
	_ = l
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiReqRSASignatureVerify) Size() (n int) {
	var l int
	_ = l
	if m.KeySize != 0 {
		n += 1 + sovCryptoApis(uint64(m.KeySize))
	}
	l = len(m.ModN)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.E)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.H)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}

func (m *CryptoSymmApiReqHashGenerate) Size() (n int) {
	var l int
	_ = l
	if m.Hashtype != 0 {
		n += 1 + sovCryptoApis(uint64(m.Hashtype))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	if m.KeyLen != 0 {
		n += 1 + sovCryptoApis(uint64(m.KeyLen))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	if m.DataLen != 0 {
		n += 1 + sovCryptoApis(uint64(m.DataLen))
	}
	if m.DigestLen != 0 {
		n += 1 + sovCryptoApis(uint64(m.DigestLen))
	}
	return n
}

func (m *CryptoSymmApiRespHashGenerate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}

func (m *CryptoSymmApiReqHashVerify) Size() (n int) {
	var l int
	_ = l
	if m.Hashtype != 0 {
		n += 1 + sovCryptoApis(uint64(m.Hashtype))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	if m.KeyLen != 0 {
		n += 1 + sovCryptoApis(uint64(m.KeyLen))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	if m.DataLen != 0 {
		n += 1 + sovCryptoApis(uint64(m.DataLen))
	}
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	if m.DigestLen != 0 {
		n += 1 + sovCryptoApis(uint64(m.DigestLen))
	}
	return n
}

func (m *CryptoApiRequest) Size() (n int) {
	var l int
	_ = l
	if m.ApiType != 0 {
		n += 1 + sovCryptoApis(uint64(m.ApiType))
	}
	if m.CryptoApiReq != nil {
		n += m.CryptoApiReq.Size()
	}
	return n
}

func (m *CryptoApiRequest_EccPointMulFp) Size() (n int) {
	var l int
	_ = l
	if m.EccPointMulFp != nil {
		l = m.EccPointMulFp.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_EcdsaSigGenFp) Size() (n int) {
	var l int
	_ = l
	if m.EcdsaSigGenFp != nil {
		l = m.EcdsaSigGenFp.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_EcdsaSigVerifyFp) Size() (n int) {
	var l int
	_ = l
	if m.EcdsaSigVerifyFp != nil {
		l = m.EcdsaSigVerifyFp.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_RsaEncrypt) Size() (n int) {
	var l int
	_ = l
	if m.RsaEncrypt != nil {
		l = m.RsaEncrypt.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_RsaDecrypt) Size() (n int) {
	var l int
	_ = l
	if m.RsaDecrypt != nil {
		l = m.RsaDecrypt.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_RsaCrtDecrypt) Size() (n int) {
	var l int
	_ = l
	if m.RsaCrtDecrypt != nil {
		l = m.RsaCrtDecrypt.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_HashGenerate) Size() (n int) {
	var l int
	_ = l
	if m.HashGenerate != nil {
		l = m.HashGenerate.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_HashVerify) Size() (n int) {
	var l int
	_ = l
	if m.HashVerify != nil {
		l = m.HashVerify.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_RsaSigGen) Size() (n int) {
	var l int
	_ = l
	if m.RsaSigGen != nil {
		l = m.RsaSigGen.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_RsaSigVerify) Size() (n int) {
	var l int
	_ = l
	if m.RsaSigVerify != nil {
		l = m.RsaSigVerify.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_SetupPrivKey) Size() (n int) {
	var l int
	_ = l
	if m.SetupPrivKey != nil {
		l = m.SetupPrivKey.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_SetupCert) Size() (n int) {
	var l int
	_ = l
	if m.SetupCert != nil {
		l = m.SetupCert.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCryptoApis(uint64(m.ApiStatus))
	}
	if m.CryptoApiResp != nil {
		n += m.CryptoApiResp.Size()
	}
	return n
}

func (m *CryptoApiResponse_EccPointMulFp) Size() (n int) {
	var l int
	_ = l
	if m.EccPointMulFp != nil {
		l = m.EccPointMulFp.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_EcdsaSigGenFp) Size() (n int) {
	var l int
	_ = l
	if m.EcdsaSigGenFp != nil {
		l = m.EcdsaSigGenFp.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_RsaEncrypt) Size() (n int) {
	var l int
	_ = l
	if m.RsaEncrypt != nil {
		l = m.RsaEncrypt.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_RsaDecrypt) Size() (n int) {
	var l int
	_ = l
	if m.RsaDecrypt != nil {
		l = m.RsaDecrypt.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_RsaCrtDecrypt) Size() (n int) {
	var l int
	_ = l
	if m.RsaCrtDecrypt != nil {
		l = m.RsaCrtDecrypt.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_HashGenerate) Size() (n int) {
	var l int
	_ = l
	if m.HashGenerate != nil {
		l = m.HashGenerate.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_RsaSigGen) Size() (n int) {
	var l int
	_ = l
	if m.RsaSigGen != nil {
		l = m.RsaSigGen.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_SetupPrivKey) Size() (n int) {
	var l int
	_ = l
	if m.SetupPrivKey != nil {
		l = m.SetupPrivKey.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_SetupCert) Size() (n int) {
	var l int
	_ = l
	if m.SetupCert != nil {
		l = m.SetupCert.Size()
		n += 1 + l + sovCryptoApis(uint64(l))
	}
	return n
}
func (m *CryptoApiRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCryptoApis(uint64(l))
		}
	}
	return n
}

func (m *CryptoApiResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovCryptoApis(uint64(l))
		}
	}
	return n
}

func sovCryptoApis(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCryptoApis(x uint64) (n int) {
	return sovCryptoApis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ECCPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ECCPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ECCPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.X = append(m.X[:0], dAtA[iNdEx:postIndex]...)
			if m.X == nil {
				m.X = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Y = append(m.Y[:0], dAtA[iNdEx:postIndex]...)
			if m.Y == nil {
				m.Y = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiECCDomainParamsFp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiECCDomainParamsFp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiECCDomainParamsFp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySize", wireType)
			}
			m.KeySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P = append(m.P[:0], dAtA[iNdEx:postIndex]...)
			if m.P == nil {
				m.P = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A = append(m.A[:0], dAtA[iNdEx:postIndex]...)
			if m.A == nil {
				m.A = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.B = append(m.B[:0], dAtA[iNdEx:postIndex]...)
			if m.B == nil {
				m.B = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.G == nil {
				m.G = &ECCPoint{}
			}
			if err := m.G.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.N = append(m.N[:0], dAtA[iNdEx:postIndex]...)
			if m.N == nil {
				m.N = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqECCPointMulFp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqECCPointMulFp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqECCPointMulFp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EccDomainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EccDomainParams == nil {
				m.EccDomainParams = &CryptoAsymApiECCDomainParamsFp{}
			}
			if err := m.EccDomainParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EccPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EccPoint == nil {
				m.EccPoint = &ECCPoint{}
			}
			if err := m.EccPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K = append(m.K[:0], dAtA[iNdEx:postIndex]...)
			if m.K == nil {
				m.K = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespECCPointMulFp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespECCPointMulFp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespECCPointMulFp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Q == nil {
				m.Q = &ECCPoint{}
			}
			if err := m.Q.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqECDSASignatureGenFp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqECDSASignatureGenFp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqECDSASignatureGenFp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EccDomainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EccDomainParams == nil {
				m.EccDomainParams = &CryptoAsymApiECCDomainParamsFp{}
			}
			if err := m.EccDomainParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Da", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Da = append(m.Da[:0], dAtA[iNdEx:postIndex]...)
			if m.Da == nil {
				m.Da = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K = append(m.K[:0], dAtA[iNdEx:postIndex]...)
			if m.K == nil {
				m.K = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H = append(m.H[:0], dAtA[iNdEx:postIndex]...)
			if m.H == nil {
				m.H = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIdx", wireType)
			}
			m.KeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AsyncEn = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespECDSASignatureGenFp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespECDSASignatureGenFp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespECDSASignatureGenFp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.R = append(m.R[:0], dAtA[iNdEx:postIndex]...)
			if m.R == nil {
				m.R = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S[:0], dAtA[iNdEx:postIndex]...)
			if m.S == nil {
				m.S = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqECDSASignatureVerifyFp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqECDSASignatureVerifyFp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqECDSASignatureVerifyFp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EccDomainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EccDomainParams == nil {
				m.EccDomainParams = &CryptoAsymApiECCDomainParamsFp{}
			}
			if err := m.EccDomainParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Q == nil {
				m.Q = &ECCPoint{}
			}
			if err := m.Q.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.R = append(m.R[:0], dAtA[iNdEx:postIndex]...)
			if m.R == nil {
				m.R = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S[:0], dAtA[iNdEx:postIndex]...)
			if m.S == nil {
				m.S = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H = append(m.H[:0], dAtA[iNdEx:postIndex]...)
			if m.H == nil {
				m.H = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AsyncEn = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqRSAEncrypt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSAEncrypt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSAEncrypt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySize", wireType)
			}
			m.KeySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModN", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModN = append(m.ModN[:0], dAtA[iNdEx:postIndex]...)
			if m.ModN == nil {
				m.ModN = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E = append(m.E[:0], dAtA[iNdEx:postIndex]...)
			if m.E == nil {
				m.E = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlainText", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlainText = append(m.PlainText[:0], dAtA[iNdEx:postIndex]...)
			if m.PlainText == nil {
				m.PlainText = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AsyncEn = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespRSAEncrypt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSAEncrypt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSAEncrypt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherText", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CipherText = append(m.CipherText[:0], dAtA[iNdEx:postIndex]...)
			if m.CipherText == nil {
				m.CipherText = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqRSADecrypt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSADecrypt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSADecrypt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySize", wireType)
			}
			m.KeySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModN", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModN = append(m.ModN[:0], dAtA[iNdEx:postIndex]...)
			if m.ModN == nil {
				m.ModN = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.D = append(m.D[:0], dAtA[iNdEx:postIndex]...)
			if m.D == nil {
				m.D = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherText", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CipherText = append(m.CipherText[:0], dAtA[iNdEx:postIndex]...)
			if m.CipherText == nil {
				m.CipherText = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespRSADecrypt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSADecrypt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSADecrypt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlainText", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlainText = append(m.PlainText[:0], dAtA[iNdEx:postIndex]...)
			if m.PlainText == nil {
				m.PlainText = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqRSACRTDecrypt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSACRTDecrypt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSACRTDecrypt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySize", wireType)
			}
			m.KeySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P = append(m.P[:0], dAtA[iNdEx:postIndex]...)
			if m.P == nil {
				m.P = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = append(m.Q[:0], dAtA[iNdEx:postIndex]...)
			if m.Q == nil {
				m.Q = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dp", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dp = append(m.Dp[:0], dAtA[iNdEx:postIndex]...)
			if m.Dp == nil {
				m.Dp = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dq", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dq = append(m.Dq[:0], dAtA[iNdEx:postIndex]...)
			if m.Dq == nil {
				m.Dq = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qinv", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Qinv = append(m.Qinv[:0], dAtA[iNdEx:postIndex]...)
			if m.Qinv == nil {
				m.Qinv = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherText", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CipherText = append(m.CipherText[:0], dAtA[iNdEx:postIndex]...)
			if m.CipherText == nil {
				m.CipherText = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIdx", wireType)
			}
			m.KeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AsyncEn = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespRSACRTDecrypt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSACRTDecrypt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSACRTDecrypt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlainText", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlainText = append(m.PlainText[:0], dAtA[iNdEx:postIndex]...)
			if m.PlainText == nil {
				m.PlainText = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqSetupPrivateKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqSetupPrivateKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqSetupPrivateKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespECDSAKeyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespECDSAKeyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespECDSAKeyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignKeyIdx", wireType)
			}
			m.SignKeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignKeyIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespRSAKeyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSAKeyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSAKeyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignKeyIdx", wireType)
			}
			m.SignKeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignKeyIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptKeyIdx", wireType)
			}
			m.DecryptKeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecryptKeyIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespSetupPrivateKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespSetupPrivateKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespSetupPrivateKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= (CryptoAsymKeyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcdsaKeyInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespECDSAKeyInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.KeyInfo = &CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaKeyInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespRSAKeyInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.KeyInfo = &CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqSetupCert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqSetupCert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqSetupCert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateType", wireType)
			}
			m.UpdateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateType |= (UpdateType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertId", wireType)
			}
			m.CertId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextCertId", wireType)
			}
			m.NextCertId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextCertId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespSetupCert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespSetupCert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespSetupCert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqRSASignatureGen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSASignatureGen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSASignatureGen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySize", wireType)
			}
			m.KeySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModN", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModN = append(m.ModN[:0], dAtA[iNdEx:postIndex]...)
			if m.ModN == nil {
				m.ModN = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.D = append(m.D[:0], dAtA[iNdEx:postIndex]...)
			if m.D == nil {
				m.D = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H = append(m.H[:0], dAtA[iNdEx:postIndex]...)
			if m.H == nil {
				m.H = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIdx", wireType)
			}
			m.KeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AsyncEn = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespRSASignatureGen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSASignatureGen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSASignatureGen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S[:0], dAtA[iNdEx:postIndex]...)
			if m.S == nil {
				m.S = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqRSASignatureVerify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSASignatureVerify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSASignatureVerify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySize", wireType)
			}
			m.KeySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModN", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModN = append(m.ModN[:0], dAtA[iNdEx:postIndex]...)
			if m.ModN == nil {
				m.ModN = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E = append(m.E[:0], dAtA[iNdEx:postIndex]...)
			if m.E == nil {
				m.E = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H = append(m.H[:0], dAtA[iNdEx:postIndex]...)
			if m.H == nil {
				m.H = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S[:0], dAtA[iNdEx:postIndex]...)
			if m.S == nil {
				m.S = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoSymmApiReqHashGenerate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoSymmApiReqHashGenerate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoSymmApiReqHashGenerate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashtype", wireType)
			}
			m.Hashtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hashtype |= (CryptoApiHashType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyLen", wireType)
			}
			m.KeyLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyLen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLen", wireType)
			}
			m.DataLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataLen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DigestLen", wireType)
			}
			m.DigestLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DigestLen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoSymmApiRespHashGenerate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoSymmApiRespHashGenerate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoSymmApiRespHashGenerate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = append(m.Digest[:0], dAtA[iNdEx:postIndex]...)
			if m.Digest == nil {
				m.Digest = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoSymmApiReqHashVerify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoSymmApiReqHashVerify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoSymmApiReqHashVerify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashtype", wireType)
			}
			m.Hashtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hashtype |= (CryptoApiHashType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyLen", wireType)
			}
			m.KeyLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyLen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLen", wireType)
			}
			m.DataLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataLen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = append(m.Digest[:0], dAtA[iNdEx:postIndex]...)
			if m.Digest == nil {
				m.Digest = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DigestLen", wireType)
			}
			m.DigestLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DigestLen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoApiRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoApiRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoApiRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiType", wireType)
			}
			m.ApiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiType |= (CryptoApiType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EccPointMulFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqECCPointMulFp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_EccPointMulFp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcdsaSigGenFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqECDSASignatureGenFp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_EcdsaSigGenFp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcdsaSigVerifyFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqECDSASignatureVerifyFp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_EcdsaSigVerifyFp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaEncrypt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqRSAEncrypt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_RsaEncrypt{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaDecrypt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqRSADecrypt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_RsaDecrypt{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaCrtDecrypt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqRSACRTDecrypt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_RsaCrtDecrypt{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashGenerate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoSymmApiReqHashGenerate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_HashGenerate{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashVerify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoSymmApiReqHashVerify{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_HashVerify{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaSigGen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqRSASignatureGen{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_RsaSigGen{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaSigVerify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqRSASignatureVerify{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_RsaSigVerify{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetupPrivKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqSetupPrivateKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_SetupPrivKey{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetupCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqSetupCert{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_SetupCert{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoApiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoApiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoApiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EccPointMulFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespECCPointMulFp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_EccPointMulFp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcdsaSigGenFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespECDSASignatureGenFp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_EcdsaSigGenFp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaEncrypt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespRSAEncrypt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_RsaEncrypt{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaDecrypt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespRSADecrypt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_RsaDecrypt{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaCrtDecrypt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespRSACRTDecrypt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_RsaCrtDecrypt{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashGenerate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoSymmApiRespHashGenerate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_HashGenerate{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaSigGen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespRSASignatureGen{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_RsaSigGen{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetupPrivKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespSetupPrivateKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_SetupPrivKey{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetupCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespSetupCert{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_SetupCert{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoApiRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoApiRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoApiRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CryptoApiRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoApiResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoApiResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoApiResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoApis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CryptoApiResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoApis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoApis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCryptoApis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCryptoApis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCryptoApis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCryptoApis
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCryptoApis
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCryptoApis(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCryptoApis = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCryptoApis   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("crypto_apis.proto", fileDescriptorCryptoApis) }

var fileDescriptorCryptoApis = []byte{
	// 1993 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x5f, 0x4f, 0xe3, 0xd8,
	0x15, 0xc7, 0x81, 0xfc, 0x3b, 0x09, 0xe0, 0xb9, 0xb3, 0x65, 0x42, 0x06, 0x98, 0xc8, 0xdb, 0x9d,
	0xb2, 0xb4, 0x65, 0x96, 0x30, 0x61, 0x77, 0xa5, 0xaa, 0x55, 0x26, 0x31, 0x90, 0x65, 0xc2, 0x64,
	0xec, 0x80, 0xc4, 0xf6, 0xc1, 0xf2, 0xc4, 0x77, 0x82, 0x05, 0x38, 0xc6, 0x36, 0x88, 0xac, 0xd4,
	0x97, 0x3e, 0xf2, 0x5a, 0xa9, 0x6f, 0x48, 0x95, 0xfa, 0x25, 0x56, 0xfd, 0x04, 0x7d, 0xe8, 0x43,
	0xd5, 0xa7, 0xbe, 0xb4, 0xaa, 0xe6, 0xa9, 0xfd, 0x16, 0xd5, 0xbd, 0xd7, 0xd7, 0xd8, 0x8e, 0x93,
	0xa0, 0x8e, 0x56, 0xea, 0x13, 0x3e, 0xf7, 0x9e, 0xf3, 0xbb, 0xe7, 0xff, 0x39, 0x99, 0x81, 0x47,
	0x3d, 0x67, 0x68, 0x7b, 0x03, 0x4d, 0xb7, 0x4d, 0x77, 0xd3, 0x76, 0x06, 0xde, 0x00, 0x01, 0x3b,
	0x22, 0x27, 0xe5, 0x82, 0x37, 0xb4, 0xb1, 0x7f, 0x21, 0x3d, 0x87, 0x9c, 0xdc, 0x68, 0x74, 0x06,
	0xa6, 0xe5, 0xa1, 0x22, 0x08, 0x37, 0x25, 0xa1, 0x22, 0xac, 0x17, 0x15, 0xe1, 0x86, 0x50, 0xc3,
	0x52, 0x8a, 0x51, 0x43, 0xe9, 0xf7, 0x02, 0xac, 0x35, 0x28, 0x46, 0xdd, 0x1d, 0x5e, 0xd4, 0x6d,
	0x53, 0x6e, 0x34, 0x9a, 0x83, 0x0b, 0xdd, 0xb4, 0x3a, 0xba, 0xa3, 0x5f, 0xb8, 0xbb, 0x36, 0x2a,
	0x41, 0xf6, 0x00, 0x0f, 0x55, 0xf3, 0x3b, 0x4c, 0x41, 0xe6, 0x15, 0x4e, 0x12, 0x28, 0x9b, 0x43,
	0xd9, 0x84, 0xd2, 0x4b, 0xb3, 0x8c, 0xd2, 0x09, 0xf5, 0xae, 0x34, 0xc7, 0xa8, 0x77, 0x48, 0x02,
	0x61, 0xaf, 0x94, 0xae, 0x08, 0xeb, 0x85, 0xea, 0x27, 0x9b, 0xf7, 0x3a, 0x6f, 0x72, 0x1d, 0x15,
	0x61, 0x8f, 0x48, 0x58, 0xa5, 0x0c, 0x93, 0xb0, 0xa4, 0xef, 0x05, 0x58, 0x8d, 0x28, 0xa6, 0xe0,
	0x4b, 0xce, 0xdd, 0xbe, 0x3a, 0xdf, 0xb5, 0xd1, 0x31, 0x3c, 0xc2, 0xbd, 0x9e, 0x66, 0x50, 0x6d,
	0x35, 0x9b, 0xaa, 0x4b, 0x35, 0x2c, 0x54, 0x37, 0xc2, 0x6f, 0x4c, 0x36, 0x4f, 0x59, 0xc4, 0xbd,
	0x5e, 0xf8, 0x08, 0x6d, 0x41, 0x9e, 0xe0, 0xda, 0xe4, 0x25, 0x6a, 0xdd, 0x38, 0x9d, 0x73, 0xb8,
	0xd7, 0x0b, 0x3c, 0x7c, 0xc6, 0x4d, 0x3f, 0x93, 0x9a, 0x31, 0x97, 0x2a, 0xd8, 0xb5, 0xa3, 0xaa,
	0x4b, 0x20, 0xbc, 0xf5, 0x55, 0x1d, 0xe3, 0x8e, 0xb7, 0xd2, 0x3f, 0x04, 0xf8, 0x74, 0xd4, 0x01,
	0x4d, 0xb5, 0xae, 0x9a, 0x7d, 0x4b, 0xf7, 0xae, 0x1c, 0xbc, 0x87, 0xad, 0x1f, 0xd0, 0x0d, 0x0b,
	0x90, 0x32, 0x74, 0x3f, 0xba, 0x29, 0x43, 0x8f, 0xda, 0x48, 0xa8, 0x53, 0x1e, 0xde, 0x53, 0xf4,
	0x04, 0xb2, 0x67, 0x78, 0xa8, 0x99, 0xc6, 0x0d, 0x0d, 0x72, 0x5a, 0xc9, 0x9c, 0xe1, 0x61, 0xcb,
	0xb8, 0x41, 0xcb, 0x90, 0xd3, 0xdd, 0xa1, 0xd5, 0xd3, 0x30, 0x0b, 0x6d, 0x4e, 0xc9, 0x52, 0x5a,
	0xb6, 0xa4, 0x57, 0xf0, 0xe3, 0x04, 0x2f, 0x8d, 0xda, 0x57, 0x04, 0xc1, 0xe1, 0xd9, 0xeb, 0x10,
	0xca, 0xe5, 0x29, 0xe7, 0x4a, 0xff, 0x11, 0xe0, 0xf9, 0x64, 0x1f, 0x1d, 0x63, 0xc7, 0x7c, 0x3f,
	0xfc, 0x01, 0xdd, 0x44, 0x43, 0x99, 0x9a, 0x18, 0x4a, 0x66, 0xc2, 0x6c, 0xc4, 0x04, 0xdf, 0x75,
	0x2e, 0x73, 0x64, 0x9a, 0x3b, 0x72, 0x82, 0xbf, 0x7e, 0x27, 0x40, 0x39, 0x6e, 0xab, 0xa2, 0xd6,
	0x65, 0x8b, 0x3e, 0x3a, 0xa1, 0x4a, 0x1f, 0x43, 0xfa, 0x62, 0x60, 0x68, 0x96, 0xef, 0xb6, 0xb9,
	0x8b, 0x81, 0x71, 0x48, 0x9e, 0xc5, 0x5c, 0x25, 0x8c, 0x56, 0x01, 0xec, 0x73, 0xe2, 0x17, 0x0f,
	0xdf, 0x78, 0xbe, 0x6e, 0x79, 0x7a, 0xd2, 0xc5, 0x37, 0x5e, 0x44, 0xab, 0x74, 0x54, 0xab, 0x5f,
	0xc2, 0xd3, 0x91, 0x28, 0x86, 0xb4, 0x7a, 0x06, 0x85, 0x9e, 0x69, 0x9f, 0x62, 0x87, 0x21, 0xb3,
	0x30, 0x02, 0x3b, 0x22, 0xd0, 0xd2, 0x77, 0x89, 0x46, 0x35, 0xf1, 0xff, 0x6a, 0x94, 0xc1, 0x8d,
	0x32, 0xe2, 0x6f, 0xcf, 0x8d, 0xbc, 0xfd, 0x8b, 0x64, 0xdd, 0xf9, 0xe3, 0x51, 0xa7, 0x08, 0x31,
	0xa7, 0x48, 0xff, 0x4c, 0x68, 0x50, 0x8a, 0x5a, 0x6f, 0x28, 0xdd, 0xe9, 0xda, 0x8f, 0x34, 0xce,
	0x4b, 0xae, 0xf6, 0x25, 0xad, 0x3b, 0xdb, 0xd7, 0x36, 0x65, 0xd8, 0x94, 0xbe, 0xf4, 0x33, 0x24,
	0x65, 0x5c, 0x22, 0x04, 0x73, 0x97, 0xa6, 0x75, 0xed, 0x77, 0x4a, 0xfa, 0x1d, 0x37, 0x35, 0x1b,
	0x37, 0x35, 0x5c, 0xa0, 0xb9, 0xb1, 0x05, 0x9a, 0x8f, 0x86, 0xf6, 0x57, 0x09, 0x6d, 0x2c, 0x6a,
	0xe0, 0x14, 0x0f, 0x6d, 0xc3, 0xb3, 0xb8, 0x83, 0x54, 0xec, 0x5d, 0xd9, 0x1d, 0xc7, 0xbc, 0xd6,
	0x3d, 0x7c, 0x80, 0x87, 0x48, 0x84, 0xd9, 0x33, 0x3c, 0xa4, 0xa2, 0x79, 0x85, 0x7c, 0x4a, 0xf5,
	0x11, 0xaf, 0xfa, 0x6d, 0xe1, 0x00, 0x0f, 0x5b, 0xd6, 0xfb, 0x01, 0xaa, 0x40, 0xd1, 0x35, 0xfb,
	0x96, 0xc6, 0xed, 0x11, 0xa8, 0x3d, 0x40, 0xce, 0x0e, 0xa8, 0x4d, 0x52, 0x3f, 0x39, 0xae, 0x0f,
	0x06, 0x40, 0xcf, 0x61, 0xd1, 0x60, 0x26, 0x06, 0x4c, 0x29, 0xca, 0x34, 0xef, 0x1f, 0xfb, 0x0f,
	0xfd, 0x36, 0x05, 0x95, 0x91, 0x97, 0xe2, 0x26, 0x6e, 0x43, 0x8e, 0x80, 0x90, 0xe1, 0x4c, 0x9f,
	0x5a, 0xa8, 0x96, 0x36, 0xd9, 0xa4, 0xbe, 0x17, 0x3d, 0xc0, 0xc3, 0xee, 0xd0, 0xc6, 0x0a, 0x09,
	0x12, 0xf9, 0x40, 0x6f, 0x61, 0x01, 0xf7, 0x0c, 0x57, 0x67, 0xef, 0x5b, 0xef, 0x07, 0x7e, 0x8b,
	0xf9, 0x7c, 0x6c, 0xab, 0x8a, 0xfb, 0x69, 0x7f, 0x46, 0x29, 0x52, 0x08, 0x6e, 0xf6, 0x01, 0x14,
	0x9d, 0x30, 0xe0, 0x2c, 0x05, 0xfc, 0xc9, 0x44, 0x40, 0x25, 0x0c, 0x07, 0x4e, 0x00, 0xf6, 0x2a,
	0x4f, 0x53, 0x9b, 0x7c, 0x4a, 0x7f, 0x14, 0x60, 0x39, 0x31, 0xcc, 0x0d, 0xec, 0x78, 0xe8, 0x4b,
	0x28, 0x5c, 0xd9, 0x86, 0xee, 0xe1, 0xb0, 0x03, 0x96, 0xc2, 0x8f, 0x1e, 0xd1, 0x6b, 0x6a, 0x3e,
	0x5c, 0x05, 0xdf, 0x24, 0x63, 0x7b, 0xd8, 0xf1, 0x34, 0xd3, 0xf0, 0x7d, 0x9f, 0x21, 0x64, 0xcb,
	0x20, 0xf9, 0xff, 0x6e, 0x60, 0x0c, 0xa9, 0xfe, 0x79, 0x85, 0x7e, 0x93, 0x90, 0x5a, 0xf8, 0xc6,
	0xd3, 0xb8, 0x04, 0x1b, 0x42, 0x40, 0xce, 0x1a, 0x54, 0x4a, 0x5a, 0x19, 0xe9, 0x33, 0x7e, 0xa4,
	0xc8, 0xbd, 0xf4, 0x07, 0x61, 0x34, 0x55, 0x95, 0xe8, 0x24, 0xfa, 0xb8, 0x5e, 0xf4, 0xf1, 0xe3,
	0xf2, 0x8b, 0x84, 0x54, 0x8b, 0xab, 0x48, 0x27, 0x8b, 0xc0, 0x87, 0xe3, 0x6f, 0x40, 0x9a, 0x64,
	0x13, 0x9b, 0x8c, 0x1f, 0x37, 0x37, 0xa2, 0x66, 0xd1, 0xe7, 0xd3, 0xfc, 0xf9, 0xbf, 0x09, 0xb0,
	0xc2, 0xde, 0x57, 0x87, 0x17, 0xfe, 0xfb, 0xfb, 0xba, 0x7b, 0xba, 0x87, 0x2d, 0xec, 0xe8, 0x1e,
	0x46, 0x5f, 0x43, 0xee, 0x54, 0x77, 0x4f, 0x43, 0x79, 0xb1, 0x9a, 0x90, 0x8c, 0xb6, 0x49, 0x84,
	0x68, 0x7a, 0x04, 0xec, 0xbc, 0x6d, 0x30, 0xc5, 0xc8, 0x27, 0x77, 0xe9, 0x39, 0xb6, 0xa8, 0x76,
	0xcc, 0xa5, 0xaf, 0xb1, 0x45, 0xd2, 0xc5, 0xd0, 0x3d, 0xdd, 0xd7, 0x92, 0x7e, 0x13, 0x37, 0x93,
	0xbf, 0x94, 0x9b, 0x05, 0x20, 0x4b, 0x68, 0xc2, 0xbe, 0x0a, 0x60, 0x98, 0x7d, 0xec, 0x7a, 0xf4,
	0x32, 0x43, 0x2f, 0xf3, 0xec, 0xe4, 0x35, 0xb6, 0xa4, 0x2f, 0x79, 0x77, 0x0a, 0x6c, 0x72, 0xed,
	0x88, 0x51, 0x4b, 0x90, 0x61, 0xdc, 0x7e, 0x1c, 0x7c, 0x4a, 0xfa, 0x77, 0x30, 0xbd, 0xa3, 0xde,
	0xf0, 0xa3, 0xf0, 0x7f, 0xe9, 0x8b, 0x7b, 0x5b, 0x32, 0x61, 0x5b, 0x62, 0x3e, 0xca, 0xc6, 0x7d,
	0xf4, 0xa7, 0x1c, 0x88, 0x81, 0xc2, 0x0a, 0xbe, 0xbc, 0x22, 0x32, 0x2f, 0x21, 0xa7, 0xdb, 0x66,
	0xb8, 0x09, 0x2c, 0x27, 0x1a, 0xc8, 0xda, 0xa0, 0xce, 0x3e, 0x50, 0x17, 0xc4, 0x60, 0x15, 0xd7,
	0x2e, 0xae, 0xce, 0xb5, 0xf7, 0xf6, 0x03, 0x1a, 0x61, 0xf4, 0x77, 0xc2, 0xfe, 0x8c, 0x32, 0xcf,
	0x17, 0x75, 0xb6, 0x7d, 0x7f, 0x4b, 0x50, 0x49, 0x73, 0x75, 0xcd, 0xbe, 0xd6, 0xc7, 0x16, 0x41,
	0x65, 0xdd, 0xf0, 0xc5, 0x64, 0xd4, 0x91, 0xe5, 0x94, 0x61, 0x1b, 0xae, 0xae, 0x9a, 0x7d, 0xb6,
	0xad, 0xf6, 0xe0, 0xf1, 0x3d, 0xf6, 0x35, 0x0d, 0x2e, 0x81, 0x9f, 0xa3, 0xf0, 0xd5, 0x87, 0xc3,
	0xf3, 0xbd, 0x75, 0x7f, 0x46, 0x11, 0xf9, 0x0b, 0xc1, 0x2e, 0xdb, 0x82, 0x02, 0x69, 0xe5, 0x98,
	0x2d, 0x59, 0xfe, 0xef, 0xaa, 0xe7, 0x93, 0xc0, 0xef, 0x57, 0x32, 0xbf, 0x91, 0xf3, 0x05, 0xcd,
	0x87, 0xf2, 0xe7, 0x1a, 0x0d, 0xf4, 0x74, 0x28, 0x7f, 0xfe, 0xfb, 0x50, 0x7c, 0x1b, 0x50, 0x61,
	0x91, 0x40, 0xf5, 0x1c, 0x2f, 0x80, 0xcb, 0x4e, 0x8f, 0x55, 0x64, 0xa3, 0x20, 0xfe, 0x74, 0x5c,
	0xbd, 0xe1, 0x78, 0x1c, 0xf4, 0x0d, 0xcc, 0x93, 0x4c, 0x27, 0x61, 0xa2, 0x05, 0x46, 0xd7, 0x97,
	0x42, 0x75, 0x7d, 0x14, 0x32, 0xb9, 0xcb, 0x90, 0x31, 0x78, 0x1a, 0x2e, 0xd0, 0x16, 0x14, 0x28,
	0x20, 0x8b, 0x0d, 0xdd, 0x79, 0x12, 0x0d, 0x4e, 0x2a, 0x53, 0x62, 0xf0, 0xe9, 0x7d, 0xd1, 0xb6,
	0x99, 0xef, 0xfc, 0x2c, 0x2a, 0x01, 0x85, 0xfa, 0xe9, 0x14, 0x63, 0xc3, 0x09, 0xb4, 0x3f, 0xa3,
	0xe4, 0x1d, 0x9e, 0x3c, 0xe8, 0x18, 0x16, 0x9c, 0x48, 0xe2, 0x94, 0x0a, 0x14, 0x71, 0xf3, 0xa1,
	0x88, 0x81, 0x92, 0x45, 0x27, 0x94, 0x2f, 0x48, 0x85, 0x05, 0x97, 0x4c, 0x3a, 0xcd, 0x76, 0xcc,
	0x6b, 0x32, 0xff, 0x4b, 0xc5, 0xe9, 0x9a, 0xc6, 0xb6, 0x18, 0x02, 0xea, 0xf2, 0x23, 0xb2, 0xd5,
	0xec, 0x02, 0x30, 0x50, 0x32, 0x72, 0x4b, 0xf3, 0x14, 0xf0, 0xb3, 0xa9, 0x80, 0x64, 0xd8, 0x12,
	0xa3, 0x5d, 0x4e, 0xbc, 0x5a, 0x80, 0x62, 0xb8, 0x57, 0x48, 0xdf, 0x67, 0xe0, 0x51, 0xe8, 0xc0,
	0xb5, 0x07, 0x96, 0x8b, 0xd1, 0x0b, 0x00, 0xd2, 0x3d, 0x5c, 0x4f, 0xf7, 0xae, 0x5c, 0xbf, 0x7f,
	0x88, 0xfe, 0x16, 0x55, 0xb7, 0x4d, 0x95, 0x9e, 0x2b, 0x79, 0x9d, 0x7f, 0xa2, 0xa3, 0xb1, 0x8d,
	0x63, 0x63, 0xca, 0x06, 0x35, 0xb1, 0x73, 0xfc, 0x7a, 0x6c, 0xe7, 0xf8, 0x62, 0xfa, 0x62, 0x36,
	0xad, 0x75, 0x7c, 0x13, 0xad, 0xea, 0xb9, 0x87, 0xed, 0x67, 0xc9, 0x65, 0xfd, 0x4d, 0xb4, 0xac,
	0xd3, 0x0f, 0xc3, 0x4a, 0xae, 0xeb, 0xee, 0x68, 0x5d, 0x67, 0x1e, 0xe0, 0xca, 0x29, 0x85, 0xdd,
	0x89, 0x17, 0xf6, 0xd8, 0x5e, 0x31, 0x66, 0xd4, 0x8e, 0x54, 0xf6, 0x61, 0xb4, 0x1c, 0x59, 0xa3,
	0xf8, 0xd9, 0x34, 0x1d, 0xc7, 0xd7, 0x63, 0x77, 0xa4, 0x6e, 0xf2, 0x0f, 0x80, 0x9c, 0x56, 0x38,
	0x7b, 0x91, 0xc2, 0x81, 0xa9, 0xfd, 0x36, 0xb4, 0xa6, 0x46, 0x2b, 0x67, 0x11, 0xe6, 0x23, 0x85,
	0x22, 0xb5, 0xe1, 0x71, 0x7c, 0xec, 0xb6, 0xdd, 0x3e, 0xda, 0x81, 0xac, 0xc3, 0xa8, 0x92, 0x50,
	0x99, 0x5d, 0x2f, 0x54, 0x57, 0x12, 0x07, 0xaf, 0x2f, 0xa1, 0x70, 0x66, 0xe9, 0x2d, 0x7c, 0x32,
	0x52, 0x88, 0x04, 0xef, 0x6b, 0xc8, 0x39, 0x3e, 0xe9, 0x03, 0xae, 0x8e, 0x01, 0x64, 0x4c, 0x4a,
	0xc0, 0xbe, 0xf1, 0x97, 0x74, 0xa8, 0xb8, 0xf9, 0x2a, 0x83, 0x3e, 0x83, 0x27, 0x0d, 0xe5, 0xa4,
	0xd3, 0x7d, 0x53, 0xef, 0xb4, 0xb4, 0xfd, 0xba, 0xba, 0xdf, 0x3d, 0xe9, 0xc8, 0xda, 0xe1, 0x9b,
	0x43, 0x59, 0x9c, 0x29, 0xe7, 0x6e, 0xef, 0x2a, 0x73, 0xd6, 0xc0, 0xc2, 0xe8, 0x53, 0x58, 0x4a,
	0x60, 0x6b, 0x37, 0x6b, 0xa2, 0x50, 0xce, 0xde, 0xde, 0x55, 0x66, 0xdb, 0xcd, 0xda, 0x18, 0x2c,
	0x75, 0xbf, 0xbe, 0x25, 0xa6, 0x18, 0x16, 0xf9, 0x46, 0x9f, 0xc3, 0x72, 0x32, 0x5b, 0xb5, 0xfa,
	0x52, 0x9c, 0x2d, 0xc3, 0xed, 0x5d, 0x25, 0xc3, 0xa8, 0x09, 0xac, 0xb5, 0x1d, 0x71, 0xee, 0x9e,
	0xb5, 0xb6, 0x33, 0x9e, 0x75, 0xfb, 0xab, 0x97, 0x62, 0x3a, 0x60, 0xdd, 0xfe, 0x6a, 0x02, 0x6a,
	0x6d, 0xab, 0x2a, 0x66, 0x02, 0xd6, 0xda, 0x56, 0x15, 0x6d, 0xc1, 0xea, 0x58, 0x56, 0x8d, 0xe8,
	0x9b, 0x2d, 0x2f, 0xdc, 0xde, 0x55, 0xe0, 0xfe, 0x64, 0x8a, 0x48, 0x6d, 0x47, 0xcc, 0x45, 0x45,
	0x6a, 0x3b, 0xe8, 0xe7, 0xf0, 0x34, 0x41, 0x64, 0xbf, 0x5d, 0x6f, 0x50, 0x17, 0xe7, 0xcb, 0xc5,
	0xdb, 0xbb, 0x4a, 0x8e, 0xd3, 0xe8, 0x05, 0xac, 0x8c, 0x63, 0xa7, 0xce, 0x86, 0xf2, 0xfc, 0xed,
	0x5d, 0x25, 0x1f, 0x1c, 0xa0, 0x6d, 0x58, 0x9b, 0x20, 0x40, 0xcc, 0x28, 0x94, 0x17, 0x6f, 0xef,
	0x2a, 0x85, 0xd0, 0xd1, 0x34, 0xa1, 0xda, 0x8e, 0x58, 0x8c, 0x09, 0xd5, 0x76, 0xa6, 0x08, 0x91,
	0x50, 0xcc, 0x47, 0x85, 0x48, 0x3c, 0x26, 0x0b, 0x91, 0xa0, 0x2c, 0x44, 0x85, 0x6a, 0x5b, 0xd5,
	0x8d, 0xbf, 0xa7, 0x42, 0x25, 0x48, 0x53, 0x79, 0x05, 0x4a, 0x75, 0xf5, 0xa4, 0x4d, 0x40, 0xe4,
	0x46, 0x43, 0xeb, 0xbc, 0x69, 0x1d, 0x76, 0xb5, 0xf6, 0xd1, 0x6b, 0x6d, 0xb7, 0x23, 0xce, 0x44,
	0x6f, 0x9b, 0x6a, 0x5d, 0x53, 0x5b, 0x7b, 0xda, 0x9e, 0x7c, 0x48, 0x6e, 0x05, 0xf4, 0x0c, 0x9e,
	0x8e, 0xde, 0x1e, 0xcb, 0x4a, 0x6b, 0xf7, 0x84, 0x30, 0xa4, 0xd0, 0x13, 0x78, 0xcc, 0x19, 0x14,
	0xb5, 0xae, 0xc9, 0x87, 0x54, 0x63, 0x71, 0x36, 0x7e, 0xd1, 0x94, 0xd9, 0xc5, 0x1c, 0x7a, 0x0a,
	0x4f, 0xc2, 0x17, 0x0d, 0xa5, 0x1b, 0x5c, 0xa6, 0xd1, 0x32, 0xfc, 0x48, 0x3d, 0x69, 0xb7, 0xb9,
	0xc1, 0x44, 0x11, 0x59, 0xa9, 0x77, 0x65, 0x31, 0x43, 0x00, 0x23, 0x57, 0x4c, 0x0b, 0x31, 0x1b,
	0x7f, 0xc9, 0xd7, 0x5f, 0xcc, 0xa1, 0x32, 0x2c, 0xc5, 0x2f, 0x7c, 0xa1, 0x7c, 0xf8, 0x4e, 0x95,
	0xbb, 0x47, 0x1d, 0xad, 0xa3, 0xb4, 0x8e, 0xb5, 0x03, 0xf9, 0x44, 0x04, 0xb4, 0x04, 0x28, 0x7a,
	0xd7, 0x90, 0x95, 0xae, 0x58, 0xd8, 0x58, 0x07, 0xb8, 0xff, 0x77, 0x01, 0xb4, 0x00, 0x50, 0x6f,
	0x36, 0xb5, 0xa3, 0x4e, 0x93, 0xe8, 0x37, 0x83, 0x00, 0x32, 0x4d, 0xf9, 0xb5, 0xdc, 0x95, 0x45,
	0xa1, 0x6a, 0x00, 0x04, 0x31, 0x70, 0xd1, 0x31, 0x2c, 0x06, 0x54, 0xcb, 0xba, 0x1e, 0x9c, 0x61,
	0xf4, 0x6c, 0x52, 0xbb, 0x6b, 0xbb, 0xfd, 0x72, 0x65, 0x62, 0xfb, 0x6a, 0xbb, 0x7d, 0x69, 0xe6,
	0xd5, 0xd2, 0x9f, 0x3f, 0xac, 0x09, 0x7f, 0xfd, 0xb0, 0x26, 0xfc, 0xeb, 0xc3, 0x9a, 0xf0, 0x6d,
	0xee, 0x54, 0x3f, 0xa7, 0xff, 0xcd, 0xf2, 0x2e, 0x43, 0xff, 0x6c, 0xff, 0x37, 0x00, 0x00, 0xff,
	0xff, 0xfe, 0x17, 0x83, 0x7c, 0x9b, 0x19, 0x00, 0x00,
}
