// Code generated by MockGen. DO NOT EDIT.
// Source: rdma.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockRdmaClient is a mock of RdmaClient interface
type MockRdmaClient struct {
	ctrl     *gomock.Controller
	recorder *MockRdmaClientMockRecorder
}

// MockRdmaClientMockRecorder is the mock recorder for MockRdmaClient
type MockRdmaClientMockRecorder struct {
	mock *MockRdmaClient
}

// NewMockRdmaClient creates a new mock instance
func NewMockRdmaClient(ctrl *gomock.Controller) *MockRdmaClient {
	mock := &MockRdmaClient{ctrl: ctrl}
	mock.recorder = &MockRdmaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRdmaClient) EXPECT() *MockRdmaClientMockRecorder {
	return m.recorder
}

// RdmaAhCreate mocks base method
func (m *MockRdmaClient) RdmaAhCreate(ctx context.Context, in *RdmaAhRequestMsg, opts ...grpc.CallOption) (*RdmaAhResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RdmaAhCreate", varargs...)
	ret0, _ := ret[0].(*RdmaAhResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RdmaAhCreate indicates an expected call of RdmaAhCreate
func (mr *MockRdmaClientMockRecorder) RdmaAhCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RdmaAhCreate", reflect.TypeOf((*MockRdmaClient)(nil).RdmaAhCreate), varargs...)
}

// RdmaCqCreate mocks base method
func (m *MockRdmaClient) RdmaCqCreate(ctx context.Context, in *RdmaCqRequestMsg, opts ...grpc.CallOption) (*RdmaCqResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RdmaCqCreate", varargs...)
	ret0, _ := ret[0].(*RdmaCqResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RdmaCqCreate indicates an expected call of RdmaCqCreate
func (mr *MockRdmaClientMockRecorder) RdmaCqCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RdmaCqCreate", reflect.TypeOf((*MockRdmaClient)(nil).RdmaCqCreate), varargs...)
}

// RdmaEqCreate mocks base method
func (m *MockRdmaClient) RdmaEqCreate(ctx context.Context, in *RdmaEqRequestMsg, opts ...grpc.CallOption) (*RdmaEqResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RdmaEqCreate", varargs...)
	ret0, _ := ret[0].(*RdmaEqResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RdmaEqCreate indicates an expected call of RdmaEqCreate
func (mr *MockRdmaClientMockRecorder) RdmaEqCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RdmaEqCreate", reflect.TypeOf((*MockRdmaClient)(nil).RdmaEqCreate), varargs...)
}

// RdmaAqCreate mocks base method
func (m *MockRdmaClient) RdmaAqCreate(ctx context.Context, in *RdmaAqRequestMsg, opts ...grpc.CallOption) (*RdmaAqResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RdmaAqCreate", varargs...)
	ret0, _ := ret[0].(*RdmaAqResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RdmaAqCreate indicates an expected call of RdmaAqCreate
func (mr *MockRdmaClientMockRecorder) RdmaAqCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RdmaAqCreate", reflect.TypeOf((*MockRdmaClient)(nil).RdmaAqCreate), varargs...)
}

// MockRdmaServer is a mock of RdmaServer interface
type MockRdmaServer struct {
	ctrl     *gomock.Controller
	recorder *MockRdmaServerMockRecorder
}

// MockRdmaServerMockRecorder is the mock recorder for MockRdmaServer
type MockRdmaServerMockRecorder struct {
	mock *MockRdmaServer
}

// NewMockRdmaServer creates a new mock instance
func NewMockRdmaServer(ctrl *gomock.Controller) *MockRdmaServer {
	mock := &MockRdmaServer{ctrl: ctrl}
	mock.recorder = &MockRdmaServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRdmaServer) EXPECT() *MockRdmaServerMockRecorder {
	return m.recorder
}

// RdmaAhCreate mocks base method
func (m *MockRdmaServer) RdmaAhCreate(arg0 context.Context, arg1 *RdmaAhRequestMsg) (*RdmaAhResponseMsg, error) {
	ret := m.ctrl.Call(m, "RdmaAhCreate", arg0, arg1)
	ret0, _ := ret[0].(*RdmaAhResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RdmaAhCreate indicates an expected call of RdmaAhCreate
func (mr *MockRdmaServerMockRecorder) RdmaAhCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RdmaAhCreate", reflect.TypeOf((*MockRdmaServer)(nil).RdmaAhCreate), arg0, arg1)
}

// RdmaCqCreate mocks base method
func (m *MockRdmaServer) RdmaCqCreate(arg0 context.Context, arg1 *RdmaCqRequestMsg) (*RdmaCqResponseMsg, error) {
	ret := m.ctrl.Call(m, "RdmaCqCreate", arg0, arg1)
	ret0, _ := ret[0].(*RdmaCqResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RdmaCqCreate indicates an expected call of RdmaCqCreate
func (mr *MockRdmaServerMockRecorder) RdmaCqCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RdmaCqCreate", reflect.TypeOf((*MockRdmaServer)(nil).RdmaCqCreate), arg0, arg1)
}

// RdmaEqCreate mocks base method
func (m *MockRdmaServer) RdmaEqCreate(arg0 context.Context, arg1 *RdmaEqRequestMsg) (*RdmaEqResponseMsg, error) {
	ret := m.ctrl.Call(m, "RdmaEqCreate", arg0, arg1)
	ret0, _ := ret[0].(*RdmaEqResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RdmaEqCreate indicates an expected call of RdmaEqCreate
func (mr *MockRdmaServerMockRecorder) RdmaEqCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RdmaEqCreate", reflect.TypeOf((*MockRdmaServer)(nil).RdmaEqCreate), arg0, arg1)
}

// RdmaAqCreate mocks base method
func (m *MockRdmaServer) RdmaAqCreate(arg0 context.Context, arg1 *RdmaAqRequestMsg) (*RdmaAqResponseMsg, error) {
	ret := m.ctrl.Call(m, "RdmaAqCreate", arg0, arg1)
	ret0, _ := ret[0].(*RdmaAqResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RdmaAqCreate indicates an expected call of RdmaAqCreate
func (mr *MockRdmaServerMockRecorder) RdmaAqCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RdmaAqCreate", reflect.TypeOf((*MockRdmaServer)(nil).RdmaAqCreate), arg0, arg1)
}
