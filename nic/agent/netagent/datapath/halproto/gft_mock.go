// Code generated by MockGen. DO NOT EDIT.
// Source: gft.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisEncapOrTransportMatch_EncapOrTransport is a mock of isEncapOrTransportMatch_EncapOrTransport interface
type MockisEncapOrTransportMatch_EncapOrTransport struct {
	ctrl     *gomock.Controller
	recorder *MockisEncapOrTransportMatch_EncapOrTransportMockRecorder
}

// MockisEncapOrTransportMatch_EncapOrTransportMockRecorder is the mock recorder for MockisEncapOrTransportMatch_EncapOrTransport
type MockisEncapOrTransportMatch_EncapOrTransportMockRecorder struct {
	mock *MockisEncapOrTransportMatch_EncapOrTransport
}

// NewMockisEncapOrTransportMatch_EncapOrTransport creates a new mock instance
func NewMockisEncapOrTransportMatch_EncapOrTransport(ctrl *gomock.Controller) *MockisEncapOrTransportMatch_EncapOrTransport {
	mock := &MockisEncapOrTransportMatch_EncapOrTransport{ctrl: ctrl}
	mock.recorder = &MockisEncapOrTransportMatch_EncapOrTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisEncapOrTransportMatch_EncapOrTransport) EXPECT() *MockisEncapOrTransportMatch_EncapOrTransportMockRecorder {
	return m.recorder
}

// isEncapOrTransportMatch_EncapOrTransport mocks base method
func (m *MockisEncapOrTransportMatch_EncapOrTransport) isEncapOrTransportMatch_EncapOrTransport() {
	m.ctrl.Call(m, "isEncapOrTransportMatch_EncapOrTransport")
}

// isEncapOrTransportMatch_EncapOrTransport indicates an expected call of isEncapOrTransportMatch_EncapOrTransport
func (mr *MockisEncapOrTransportMatch_EncapOrTransportMockRecorder) isEncapOrTransportMatch_EncapOrTransport() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isEncapOrTransportMatch_EncapOrTransport", reflect.TypeOf((*MockisEncapOrTransportMatch_EncapOrTransport)(nil).isEncapOrTransportMatch_EncapOrTransport))
}

// MarshalTo mocks base method
func (m *MockisEncapOrTransportMatch_EncapOrTransport) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisEncapOrTransportMatch_EncapOrTransportMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisEncapOrTransportMatch_EncapOrTransport)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisEncapOrTransportMatch_EncapOrTransport) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisEncapOrTransportMatch_EncapOrTransportMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisEncapOrTransportMatch_EncapOrTransport)(nil).Size))
}

// MockisEncapOrTransportTransposition_EncapOrTransport is a mock of isEncapOrTransportTransposition_EncapOrTransport interface
type MockisEncapOrTransportTransposition_EncapOrTransport struct {
	ctrl     *gomock.Controller
	recorder *MockisEncapOrTransportTransposition_EncapOrTransportMockRecorder
}

// MockisEncapOrTransportTransposition_EncapOrTransportMockRecorder is the mock recorder for MockisEncapOrTransportTransposition_EncapOrTransport
type MockisEncapOrTransportTransposition_EncapOrTransportMockRecorder struct {
	mock *MockisEncapOrTransportTransposition_EncapOrTransport
}

// NewMockisEncapOrTransportTransposition_EncapOrTransport creates a new mock instance
func NewMockisEncapOrTransportTransposition_EncapOrTransport(ctrl *gomock.Controller) *MockisEncapOrTransportTransposition_EncapOrTransport {
	mock := &MockisEncapOrTransportTransposition_EncapOrTransport{ctrl: ctrl}
	mock.recorder = &MockisEncapOrTransportTransposition_EncapOrTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisEncapOrTransportTransposition_EncapOrTransport) EXPECT() *MockisEncapOrTransportTransposition_EncapOrTransportMockRecorder {
	return m.recorder
}

// isEncapOrTransportTransposition_EncapOrTransport mocks base method
func (m *MockisEncapOrTransportTransposition_EncapOrTransport) isEncapOrTransportTransposition_EncapOrTransport() {
	m.ctrl.Call(m, "isEncapOrTransportTransposition_EncapOrTransport")
}

// isEncapOrTransportTransposition_EncapOrTransport indicates an expected call of isEncapOrTransportTransposition_EncapOrTransport
func (mr *MockisEncapOrTransportTransposition_EncapOrTransportMockRecorder) isEncapOrTransportTransposition_EncapOrTransport() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isEncapOrTransportTransposition_EncapOrTransport", reflect.TypeOf((*MockisEncapOrTransportTransposition_EncapOrTransport)(nil).isEncapOrTransportTransposition_EncapOrTransport))
}

// MarshalTo mocks base method
func (m *MockisEncapOrTransportTransposition_EncapOrTransport) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisEncapOrTransportTransposition_EncapOrTransportMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisEncapOrTransportTransposition_EncapOrTransport)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisEncapOrTransportTransposition_EncapOrTransport) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisEncapOrTransportTransposition_EncapOrTransportMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisEncapOrTransportTransposition_EncapOrTransport)(nil).Size))
}

// MockGftClient is a mock of GftClient interface
type MockGftClient struct {
	ctrl     *gomock.Controller
	recorder *MockGftClientMockRecorder
}

// MockGftClientMockRecorder is the mock recorder for MockGftClient
type MockGftClientMockRecorder struct {
	mock *MockGftClient
}

// NewMockGftClient creates a new mock instance
func NewMockGftClient(ctrl *gomock.Controller) *MockGftClient {
	mock := &MockGftClient{ctrl: ctrl}
	mock.recorder = &MockGftClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGftClient) EXPECT() *MockGftClientMockRecorder {
	return m.recorder
}

// GftExactMatchProfileCreate mocks base method
func (m *MockGftClient) GftExactMatchProfileCreate(ctx context.Context, in *GftExactMatchProfileRequestMsg, opts ...grpc.CallOption) (*GftExactMatchProfileResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GftExactMatchProfileCreate", varargs...)
	ret0, _ := ret[0].(*GftExactMatchProfileResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GftExactMatchProfileCreate indicates an expected call of GftExactMatchProfileCreate
func (mr *MockGftClientMockRecorder) GftExactMatchProfileCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GftExactMatchProfileCreate", reflect.TypeOf((*MockGftClient)(nil).GftExactMatchProfileCreate), varargs...)
}

// GftHeaderTranspositionProfileCreate mocks base method
func (m *MockGftClient) GftHeaderTranspositionProfileCreate(ctx context.Context, in *GftHeaderTranspositionProfileRequestMsg, opts ...grpc.CallOption) (*GftHeaderTranspositionProfileResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GftHeaderTranspositionProfileCreate", varargs...)
	ret0, _ := ret[0].(*GftHeaderTranspositionProfileResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GftHeaderTranspositionProfileCreate indicates an expected call of GftHeaderTranspositionProfileCreate
func (mr *MockGftClientMockRecorder) GftHeaderTranspositionProfileCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GftHeaderTranspositionProfileCreate", reflect.TypeOf((*MockGftClient)(nil).GftHeaderTranspositionProfileCreate), varargs...)
}

// GftExactMatchFlowEntryCreate mocks base method
func (m *MockGftClient) GftExactMatchFlowEntryCreate(ctx context.Context, in *GftExactMatchFlowEntryRequestMsg, opts ...grpc.CallOption) (*GftExactMatchFlowEntryResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GftExactMatchFlowEntryCreate", varargs...)
	ret0, _ := ret[0].(*GftExactMatchFlowEntryResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GftExactMatchFlowEntryCreate indicates an expected call of GftExactMatchFlowEntryCreate
func (mr *MockGftClientMockRecorder) GftExactMatchFlowEntryCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GftExactMatchFlowEntryCreate", reflect.TypeOf((*MockGftClient)(nil).GftExactMatchFlowEntryCreate), varargs...)
}

// MockGftServer is a mock of GftServer interface
type MockGftServer struct {
	ctrl     *gomock.Controller
	recorder *MockGftServerMockRecorder
}

// MockGftServerMockRecorder is the mock recorder for MockGftServer
type MockGftServerMockRecorder struct {
	mock *MockGftServer
}

// NewMockGftServer creates a new mock instance
func NewMockGftServer(ctrl *gomock.Controller) *MockGftServer {
	mock := &MockGftServer{ctrl: ctrl}
	mock.recorder = &MockGftServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGftServer) EXPECT() *MockGftServerMockRecorder {
	return m.recorder
}

// GftExactMatchProfileCreate mocks base method
func (m *MockGftServer) GftExactMatchProfileCreate(arg0 context.Context, arg1 *GftExactMatchProfileRequestMsg) (*GftExactMatchProfileResponseMsg, error) {
	ret := m.ctrl.Call(m, "GftExactMatchProfileCreate", arg0, arg1)
	ret0, _ := ret[0].(*GftExactMatchProfileResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GftExactMatchProfileCreate indicates an expected call of GftExactMatchProfileCreate
func (mr *MockGftServerMockRecorder) GftExactMatchProfileCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GftExactMatchProfileCreate", reflect.TypeOf((*MockGftServer)(nil).GftExactMatchProfileCreate), arg0, arg1)
}

// GftHeaderTranspositionProfileCreate mocks base method
func (m *MockGftServer) GftHeaderTranspositionProfileCreate(arg0 context.Context, arg1 *GftHeaderTranspositionProfileRequestMsg) (*GftHeaderTranspositionProfileResponseMsg, error) {
	ret := m.ctrl.Call(m, "GftHeaderTranspositionProfileCreate", arg0, arg1)
	ret0, _ := ret[0].(*GftHeaderTranspositionProfileResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GftHeaderTranspositionProfileCreate indicates an expected call of GftHeaderTranspositionProfileCreate
func (mr *MockGftServerMockRecorder) GftHeaderTranspositionProfileCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GftHeaderTranspositionProfileCreate", reflect.TypeOf((*MockGftServer)(nil).GftHeaderTranspositionProfileCreate), arg0, arg1)
}

// GftExactMatchFlowEntryCreate mocks base method
func (m *MockGftServer) GftExactMatchFlowEntryCreate(arg0 context.Context, arg1 *GftExactMatchFlowEntryRequestMsg) (*GftExactMatchFlowEntryResponseMsg, error) {
	ret := m.ctrl.Call(m, "GftExactMatchFlowEntryCreate", arg0, arg1)
	ret0, _ := ret[0].(*GftExactMatchFlowEntryResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GftExactMatchFlowEntryCreate indicates an expected call of GftExactMatchFlowEntryCreate
func (mr *MockGftServerMockRecorder) GftExactMatchFlowEntryCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GftExactMatchFlowEntryCreate", reflect.TypeOf((*MockGftServer)(nil).GftExactMatchFlowEntryCreate), arg0, arg1)
}
