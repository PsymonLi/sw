// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: quiesce.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Quiesce service

type QuiesceClient interface {
	QuiesceMsgSnd(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type quiesceClient struct {
	cc *grpc.ClientConn
}

func NewQuiesceClient(cc *grpc.ClientConn) QuiesceClient {
	return &quiesceClient{cc}
}

func (c *quiesceClient) QuiesceMsgSnd(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/vmotion.Quiesce/QuiesceMsgSnd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Quiesce service

type QuiesceServer interface {
	QuiesceMsgSnd(context.Context, *Empty) (*Empty, error)
}

func RegisterQuiesceServer(s *grpc.Server, srv QuiesceServer) {
	s.RegisterService(&_Quiesce_serviceDesc, srv)
}

func _Quiesce_QuiesceMsgSnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuiesceServer).QuiesceMsgSnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vmotion.Quiesce/QuiesceMsgSnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuiesceServer).QuiesceMsgSnd(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Quiesce_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vmotion.Quiesce",
	HandlerType: (*QuiesceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QuiesceMsgSnd",
			Handler:    _Quiesce_QuiesceMsgSnd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quiesce.proto",
}

func init() { proto.RegisterFile("quiesce.proto", fileDescriptorQuiesce) }

var fileDescriptorQuiesce = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x2c, 0xcd, 0x4c,
	0x2d, 0x4e, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0xcb, 0xcd, 0x2f, 0xc9,
	0xcc, 0xcf, 0x93, 0xe2, 0x2e, 0xa9, 0x2c, 0x48, 0x2d, 0x86, 0x88, 0x1a, 0x59, 0x70, 0xb1, 0x07,
	0x42, 0x94, 0x09, 0xe9, 0x72, 0xf1, 0x42, 0x99, 0xbe, 0xc5, 0xe9, 0xc1, 0x79, 0x29, 0x42, 0x3c,
	0x7a, 0x10, 0x95, 0xae, 0xb9, 0x05, 0x25, 0x95, 0x52, 0x28, 0x3c, 0x25, 0x06, 0x27, 0xa9, 0x13,
	0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39, 0x86,
	0x28, 0x8e, 0x8c, 0xc4, 0x1c, 0xb0, 0xa9, 0x49, 0x6c, 0x60, 0xca, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0x2d, 0x56, 0x90, 0x74, 0x83, 0x00, 0x00, 0x00,
}
