// Code generated by MockGen. DO NOT EDIT.
// Source: vrf.pb.go

package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisVrfStatus_VrfInfo is a mock of isVrfStatus_VrfInfo interface
type MockisVrfStatus_VrfInfo struct {
	ctrl     *gomock.Controller
	recorder *MockisVrfStatus_VrfInfoMockRecorder
}

// MockisVrfStatus_VrfInfoMockRecorder is the mock recorder for MockisVrfStatus_VrfInfo
type MockisVrfStatus_VrfInfoMockRecorder struct {
	mock *MockisVrfStatus_VrfInfo
}

// NewMockisVrfStatus_VrfInfo creates a new mock instance
func NewMockisVrfStatus_VrfInfo(ctrl *gomock.Controller) *MockisVrfStatus_VrfInfo {
	mock := &MockisVrfStatus_VrfInfo{ctrl: ctrl}
	mock.recorder = &MockisVrfStatus_VrfInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockisVrfStatus_VrfInfo) EXPECT() *MockisVrfStatus_VrfInfoMockRecorder {
	return _m.recorder
}

// isVrfStatus_VrfInfo mocks base method
func (_m *MockisVrfStatus_VrfInfo) isVrfStatus_VrfInfo() {
	_m.ctrl.Call(_m, "isVrfStatus_VrfInfo")
}

// isVrfStatus_VrfInfo indicates an expected call of isVrfStatus_VrfInfo
func (_mr *MockisVrfStatus_VrfInfoMockRecorder) isVrfStatus_VrfInfo() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "isVrfStatus_VrfInfo", reflect.TypeOf((*MockisVrfStatus_VrfInfo)(nil).isVrfStatus_VrfInfo))
}

// MarshalTo mocks base method
func (_m *MockisVrfStatus_VrfInfo) MarshalTo(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "MarshalTo", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (_mr *MockisVrfStatus_VrfInfoMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarshalTo", reflect.TypeOf((*MockisVrfStatus_VrfInfo)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (_m *MockisVrfStatus_VrfInfo) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (_mr *MockisVrfStatus_VrfInfoMockRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Size", reflect.TypeOf((*MockisVrfStatus_VrfInfo)(nil).Size))
}

// MockVrfClient is a mock of VrfClient interface
type MockVrfClient struct {
	ctrl     *gomock.Controller
	recorder *MockVrfClientMockRecorder
}

// MockVrfClientMockRecorder is the mock recorder for MockVrfClient
type MockVrfClientMockRecorder struct {
	mock *MockVrfClient
}

// NewMockVrfClient creates a new mock instance
func NewMockVrfClient(ctrl *gomock.Controller) *MockVrfClient {
	mock := &MockVrfClient{ctrl: ctrl}
	mock.recorder = &MockVrfClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockVrfClient) EXPECT() *MockVrfClientMockRecorder {
	return _m.recorder
}

// VrfCreate mocks base method
func (_m *MockVrfClient) VrfCreate(ctx context.Context, in *VrfRequestMsg, opts ...grpc.CallOption) (*VrfResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "VrfCreate", _s...)
	ret0, _ := ret[0].(*VrfResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VrfCreate indicates an expected call of VrfCreate
func (_mr *MockVrfClientMockRecorder) VrfCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VrfCreate", reflect.TypeOf((*MockVrfClient)(nil).VrfCreate), _s...)
}

// VrfUpdate mocks base method
func (_m *MockVrfClient) VrfUpdate(ctx context.Context, in *VrfRequestMsg, opts ...grpc.CallOption) (*VrfResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "VrfUpdate", _s...)
	ret0, _ := ret[0].(*VrfResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VrfUpdate indicates an expected call of VrfUpdate
func (_mr *MockVrfClientMockRecorder) VrfUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VrfUpdate", reflect.TypeOf((*MockVrfClient)(nil).VrfUpdate), _s...)
}

// VrfDelete mocks base method
func (_m *MockVrfClient) VrfDelete(ctx context.Context, in *VrfDeleteRequestMsg, opts ...grpc.CallOption) (*VrfDeleteResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "VrfDelete", _s...)
	ret0, _ := ret[0].(*VrfDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VrfDelete indicates an expected call of VrfDelete
func (_mr *MockVrfClientMockRecorder) VrfDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VrfDelete", reflect.TypeOf((*MockVrfClient)(nil).VrfDelete), _s...)
}

// VrfGet mocks base method
func (_m *MockVrfClient) VrfGet(ctx context.Context, in *VrfGetRequestMsg, opts ...grpc.CallOption) (*VrfGetResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "VrfGet", _s...)
	ret0, _ := ret[0].(*VrfGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VrfGet indicates an expected call of VrfGet
func (_mr *MockVrfClientMockRecorder) VrfGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VrfGet", reflect.TypeOf((*MockVrfClient)(nil).VrfGet), _s...)
}

// MockVrfServer is a mock of VrfServer interface
type MockVrfServer struct {
	ctrl     *gomock.Controller
	recorder *MockVrfServerMockRecorder
}

// MockVrfServerMockRecorder is the mock recorder for MockVrfServer
type MockVrfServerMockRecorder struct {
	mock *MockVrfServer
}

// NewMockVrfServer creates a new mock instance
func NewMockVrfServer(ctrl *gomock.Controller) *MockVrfServer {
	mock := &MockVrfServer{ctrl: ctrl}
	mock.recorder = &MockVrfServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockVrfServer) EXPECT() *MockVrfServerMockRecorder {
	return _m.recorder
}

// VrfCreate mocks base method
func (_m *MockVrfServer) VrfCreate(_param0 context.Context, _param1 *VrfRequestMsg) (*VrfResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "VrfCreate", _param0, _param1)
	ret0, _ := ret[0].(*VrfResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VrfCreate indicates an expected call of VrfCreate
func (_mr *MockVrfServerMockRecorder) VrfCreate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VrfCreate", reflect.TypeOf((*MockVrfServer)(nil).VrfCreate), arg0, arg1)
}

// VrfUpdate mocks base method
func (_m *MockVrfServer) VrfUpdate(_param0 context.Context, _param1 *VrfRequestMsg) (*VrfResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "VrfUpdate", _param0, _param1)
	ret0, _ := ret[0].(*VrfResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VrfUpdate indicates an expected call of VrfUpdate
func (_mr *MockVrfServerMockRecorder) VrfUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VrfUpdate", reflect.TypeOf((*MockVrfServer)(nil).VrfUpdate), arg0, arg1)
}

// VrfDelete mocks base method
func (_m *MockVrfServer) VrfDelete(_param0 context.Context, _param1 *VrfDeleteRequestMsg) (*VrfDeleteResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "VrfDelete", _param0, _param1)
	ret0, _ := ret[0].(*VrfDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VrfDelete indicates an expected call of VrfDelete
func (_mr *MockVrfServerMockRecorder) VrfDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VrfDelete", reflect.TypeOf((*MockVrfServer)(nil).VrfDelete), arg0, arg1)
}

// VrfGet mocks base method
func (_m *MockVrfServer) VrfGet(_param0 context.Context, _param1 *VrfGetRequestMsg) (*VrfGetResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "VrfGet", _param0, _param1)
	ret0, _ := ret[0].(*VrfGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VrfGet indicates an expected call of VrfGet
func (_mr *MockVrfServerMockRecorder) VrfGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VrfGet", reflect.TypeOf((*MockVrfServer)(nil).VrfGet), arg0, arg1)
}
