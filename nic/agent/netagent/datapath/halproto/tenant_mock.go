// Code generated by MockGen. DO NOT EDIT.
// Source: tenant.pb.go

package halproto

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockisTenantKeyHandle_KeyOrHandle is a mock of isTenantKeyHandle_KeyOrHandle interface
type MockisTenantKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisTenantKeyHandle_KeyOrHandleMockRecorder
}

// MockisTenantKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisTenantKeyHandle_KeyOrHandle
type MockisTenantKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisTenantKeyHandle_KeyOrHandle
}

// NewMockisTenantKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisTenantKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisTenantKeyHandle_KeyOrHandle {
	mock := &MockisTenantKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisTenantKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockisTenantKeyHandle_KeyOrHandle) EXPECT() *MockisTenantKeyHandle_KeyOrHandleMockRecorder {
	return _m.recorder
}

// isTenantKeyHandle_KeyOrHandle mocks base method
func (_m *MockisTenantKeyHandle_KeyOrHandle) isTenantKeyHandle_KeyOrHandle() {
	_m.ctrl.Call(_m, "isTenantKeyHandle_KeyOrHandle")
}

// isTenantKeyHandle_KeyOrHandle indicates an expected call of isTenantKeyHandle_KeyOrHandle
func (_mr *MockisTenantKeyHandle_KeyOrHandleMockRecorder) isTenantKeyHandle_KeyOrHandle() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "isTenantKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisTenantKeyHandle_KeyOrHandle)(nil).isTenantKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (_m *MockisTenantKeyHandle_KeyOrHandle) MarshalTo(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "MarshalTo", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (_mr *MockisTenantKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarshalTo", reflect.TypeOf((*MockisTenantKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (_m *MockisTenantKeyHandle_KeyOrHandle) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (_mr *MockisTenantKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Size", reflect.TypeOf((*MockisTenantKeyHandle_KeyOrHandle)(nil).Size))
}

// MockTenantClient is a mock of TenantClient interface
type MockTenantClient struct {
	ctrl     *gomock.Controller
	recorder *MockTenantClientMockRecorder
}

// MockTenantClientMockRecorder is the mock recorder for MockTenantClient
type MockTenantClientMockRecorder struct {
	mock *MockTenantClient
}

// NewMockTenantClient creates a new mock instance
func NewMockTenantClient(ctrl *gomock.Controller) *MockTenantClient {
	mock := &MockTenantClient{ctrl: ctrl}
	mock.recorder = &MockTenantClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTenantClient) EXPECT() *MockTenantClientMockRecorder {
	return _m.recorder
}

// TenantCreate mocks base method
func (_m *MockTenantClient) TenantCreate(ctx context.Context, in *TenantRequestMsg, opts ...grpc.CallOption) (*TenantResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TenantCreate", _s...)
	ret0, _ := ret[0].(*TenantResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TenantCreate indicates an expected call of TenantCreate
func (_mr *MockTenantClientMockRecorder) TenantCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TenantCreate", reflect.TypeOf((*MockTenantClient)(nil).TenantCreate), _s...)
}

// TenantUpdate mocks base method
func (_m *MockTenantClient) TenantUpdate(ctx context.Context, in *TenantRequestMsg, opts ...grpc.CallOption) (*TenantResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TenantUpdate", _s...)
	ret0, _ := ret[0].(*TenantResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TenantUpdate indicates an expected call of TenantUpdate
func (_mr *MockTenantClientMockRecorder) TenantUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TenantUpdate", reflect.TypeOf((*MockTenantClient)(nil).TenantUpdate), _s...)
}

// TenantDelete mocks base method
func (_m *MockTenantClient) TenantDelete(ctx context.Context, in *TenantDeleteRequestMsg, opts ...grpc.CallOption) (*TenantDeleteResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TenantDelete", _s...)
	ret0, _ := ret[0].(*TenantDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TenantDelete indicates an expected call of TenantDelete
func (_mr *MockTenantClientMockRecorder) TenantDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TenantDelete", reflect.TypeOf((*MockTenantClient)(nil).TenantDelete), _s...)
}

// TenantGet mocks base method
func (_m *MockTenantClient) TenantGet(ctx context.Context, in *TenantGetRequestMsg, opts ...grpc.CallOption) (*TenantGetResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TenantGet", _s...)
	ret0, _ := ret[0].(*TenantGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TenantGet indicates an expected call of TenantGet
func (_mr *MockTenantClientMockRecorder) TenantGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TenantGet", reflect.TypeOf((*MockTenantClient)(nil).TenantGet), _s...)
}

// MockTenantServer is a mock of TenantServer interface
type MockTenantServer struct {
	ctrl     *gomock.Controller
	recorder *MockTenantServerMockRecorder
}

// MockTenantServerMockRecorder is the mock recorder for MockTenantServer
type MockTenantServerMockRecorder struct {
	mock *MockTenantServer
}

// NewMockTenantServer creates a new mock instance
func NewMockTenantServer(ctrl *gomock.Controller) *MockTenantServer {
	mock := &MockTenantServer{ctrl: ctrl}
	mock.recorder = &MockTenantServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTenantServer) EXPECT() *MockTenantServerMockRecorder {
	return _m.recorder
}

// TenantCreate mocks base method
func (_m *MockTenantServer) TenantCreate(_param0 context.Context, _param1 *TenantRequestMsg) (*TenantResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "TenantCreate", _param0, _param1)
	ret0, _ := ret[0].(*TenantResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TenantCreate indicates an expected call of TenantCreate
func (_mr *MockTenantServerMockRecorder) TenantCreate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TenantCreate", reflect.TypeOf((*MockTenantServer)(nil).TenantCreate), arg0, arg1)
}

// TenantUpdate mocks base method
func (_m *MockTenantServer) TenantUpdate(_param0 context.Context, _param1 *TenantRequestMsg) (*TenantResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "TenantUpdate", _param0, _param1)
	ret0, _ := ret[0].(*TenantResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TenantUpdate indicates an expected call of TenantUpdate
func (_mr *MockTenantServerMockRecorder) TenantUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TenantUpdate", reflect.TypeOf((*MockTenantServer)(nil).TenantUpdate), arg0, arg1)
}

// TenantDelete mocks base method
func (_m *MockTenantServer) TenantDelete(_param0 context.Context, _param1 *TenantDeleteRequestMsg) (*TenantDeleteResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "TenantDelete", _param0, _param1)
	ret0, _ := ret[0].(*TenantDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TenantDelete indicates an expected call of TenantDelete
func (_mr *MockTenantServerMockRecorder) TenantDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TenantDelete", reflect.TypeOf((*MockTenantServer)(nil).TenantDelete), arg0, arg1)
}

// TenantGet mocks base method
func (_m *MockTenantServer) TenantGet(_param0 context.Context, _param1 *TenantGetRequestMsg) (*TenantGetResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "TenantGet", _param0, _param1)
	ret0, _ := ret[0].(*TenantGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TenantGet indicates an expected call of TenantGet
func (_mr *MockTenantServerMockRecorder) TenantGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TenantGet", reflect.TypeOf((*MockTenantServer)(nil).TenantGet), arg0, arg1)
}
