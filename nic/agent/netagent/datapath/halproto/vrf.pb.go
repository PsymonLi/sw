// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vrf.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// VrfSpec captures all the vrf level configuration
type VrfSpec struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// key_or_handle is vrf's unique identifier
	KeyOrHandle       *VrfKeyHandle             `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
	SecurityKeyHandle *SecurityProfileKeyHandle `protobuf:"bytes,3,opt,name=security_key_handle,json=securityKeyHandle" json:"security_key_handle,omitempty" venice:ref`
	VrfType           VrfType                   `protobuf:"varint,4,opt,name=vrf_type,json=vrfType,proto3,enum=types.VrfType" json:"vrf_type,omitempty" venice:immutable`
	MytepIp           *IPAddress                `protobuf:"bytes,5,opt,name=mytep_ip,json=mytepIp" json:"mytep_ip,omitempty"`
	GipoPrefix        *IPPrefix                 `protobuf:"bytes,6,opt,name=gipo_prefix,json=gipoPrefix" json:"gipo_prefix,omitempty"`
}

func (m *VrfSpec) Reset()                    { *m = VrfSpec{} }
func (m *VrfSpec) String() string            { return proto.CompactTextString(m) }
func (*VrfSpec) ProtoMessage()               {}
func (*VrfSpec) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{0} }

func (m *VrfSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *VrfSpec) GetKeyOrHandle() *VrfKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *VrfSpec) GetSecurityKeyHandle() *SecurityProfileKeyHandle {
	if m != nil {
		return m.SecurityKeyHandle
	}
	return nil
}

func (m *VrfSpec) GetVrfType() VrfType {
	if m != nil {
		return m.VrfType
	}
	return VrfType_VRF_TYPE_NONE
}

func (m *VrfSpec) GetMytepIp() *IPAddress {
	if m != nil {
		return m.MytepIp
	}
	return nil
}

func (m *VrfSpec) GetGipoPrefix() *IPPrefix {
	if m != nil {
		return m.GipoPrefix
	}
	return nil
}

// VrfRequestMsg is batched add or modify vrf request
type VrfRequestMsg struct {
	Request []*VrfSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *VrfRequestMsg) Reset()                    { *m = VrfRequestMsg{} }
func (m *VrfRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*VrfRequestMsg) ProtoMessage()               {}
func (*VrfRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{1} }

func (m *VrfRequestMsg) GetRequest() []*VrfSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// Vrf oper state for enterprise pipeline
type VrfStatusEpd struct {
	HwVrfId       uint32 `protobuf:"varint,2,opt,name=hw_vrf_id,json=hwVrfId,proto3" json:"hw_vrf_id,omitempty"`
	VrfLookupId   uint32 `protobuf:"varint,3,opt,name=vrf_lookup_id,json=vrfLookupId,proto3" json:"vrf_lookup_id,omitempty"`
	VrfVlanIdCpu  uint32 `protobuf:"varint,4,opt,name=vrf_vlan_id_cpu,json=vrfVlanIdCpu,proto3" json:"vrf_vlan_id_cpu,omitempty"`
	InpPropCpuIdx uint32 `protobuf:"varint,5,opt,name=inp_prop_cpu_idx,json=inpPropCpuIdx,proto3" json:"inp_prop_cpu_idx,omitempty"`
	// for CPU TX packets with CPU injecting into a VRF
	GipoInpMapNatIdx []uint32 `protobuf:"varint,6,rep,packed,name=gipo_inp_map_nat_idx,json=gipoInpMapNatIdx" json:"gipo_inp_map_nat_idx,omitempty"`
	//  1. Inner IPv4, 2. Inner IPv6, 3. Inner MAC
	GipoInpMapTnlIdx []uint32 `protobuf:"varint,7,rep,packed,name=gipo_inp_map_tnl_idx,json=gipoInpMapTnlIdx" json:"gipo_inp_map_tnl_idx,omitempty"`
}

func (m *VrfStatusEpd) Reset()                    { *m = VrfStatusEpd{} }
func (m *VrfStatusEpd) String() string            { return proto.CompactTextString(m) }
func (*VrfStatusEpd) ProtoMessage()               {}
func (*VrfStatusEpd) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{2} }

func (m *VrfStatusEpd) GetHwVrfId() uint32 {
	if m != nil {
		return m.HwVrfId
	}
	return 0
}

func (m *VrfStatusEpd) GetVrfLookupId() uint32 {
	if m != nil {
		return m.VrfLookupId
	}
	return 0
}

func (m *VrfStatusEpd) GetVrfVlanIdCpu() uint32 {
	if m != nil {
		return m.VrfVlanIdCpu
	}
	return 0
}

func (m *VrfStatusEpd) GetInpPropCpuIdx() uint32 {
	if m != nil {
		return m.InpPropCpuIdx
	}
	return 0
}

func (m *VrfStatusEpd) GetGipoInpMapNatIdx() []uint32 {
	if m != nil {
		return m.GipoInpMapNatIdx
	}
	return nil
}

func (m *VrfStatusEpd) GetGipoInpMapTnlIdx() []uint32 {
	if m != nil {
		return m.GipoInpMapTnlIdx
	}
	return nil
}

// Vrf oper state for cloud pipeline
type VrfStatusCpd struct {
}

func (m *VrfStatusCpd) Reset()                    { *m = VrfStatusCpd{} }
func (m *VrfStatusCpd) String() string            { return proto.CompactTextString(m) }
func (*VrfStatusCpd) ProtoMessage()               {}
func (*VrfStatusCpd) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{3} }

// VrfStatus is the operational status of a given vrf
type VrfStatus struct {
	VrfHandle uint64 `protobuf:"fixed64,1,opt,name=vrf_handle,json=vrfHandle,proto3" json:"vrf_handle,omitempty"`
	// Types that are valid to be assigned to VrfPdStatus:
	//	*VrfStatus_EpdStatus
	//	*VrfStatus_CpdStatus
	VrfPdStatus isVrfStatus_VrfPdStatus `protobuf_oneof:"vrf_pd_status"`
}

func (m *VrfStatus) Reset()                    { *m = VrfStatus{} }
func (m *VrfStatus) String() string            { return proto.CompactTextString(m) }
func (*VrfStatus) ProtoMessage()               {}
func (*VrfStatus) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{4} }

type isVrfStatus_VrfPdStatus interface {
	isVrfStatus_VrfPdStatus()
	MarshalTo([]byte) (int, error)
	Size() int
}

type VrfStatus_EpdStatus struct {
	EpdStatus *VrfStatusEpd `protobuf:"bytes,2,opt,name=epd_status,json=epdStatus,oneof"`
}
type VrfStatus_CpdStatus struct {
	CpdStatus *VrfStatusCpd `protobuf:"bytes,3,opt,name=cpd_status,json=cpdStatus,oneof"`
}

func (*VrfStatus_EpdStatus) isVrfStatus_VrfPdStatus() {}
func (*VrfStatus_CpdStatus) isVrfStatus_VrfPdStatus() {}

func (m *VrfStatus) GetVrfPdStatus() isVrfStatus_VrfPdStatus {
	if m != nil {
		return m.VrfPdStatus
	}
	return nil
}

func (m *VrfStatus) GetVrfHandle() uint64 {
	if m != nil {
		return m.VrfHandle
	}
	return 0
}

func (m *VrfStatus) GetEpdStatus() *VrfStatusEpd {
	if x, ok := m.GetVrfPdStatus().(*VrfStatus_EpdStatus); ok {
		return x.EpdStatus
	}
	return nil
}

func (m *VrfStatus) GetCpdStatus() *VrfStatusCpd {
	if x, ok := m.GetVrfPdStatus().(*VrfStatus_CpdStatus); ok {
		return x.CpdStatus
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VrfStatus) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VrfStatus_OneofMarshaler, _VrfStatus_OneofUnmarshaler, _VrfStatus_OneofSizer, []interface{}{
		(*VrfStatus_EpdStatus)(nil),
		(*VrfStatus_CpdStatus)(nil),
	}
}

func _VrfStatus_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VrfStatus)
	// vrf_pd_status
	switch x := m.VrfPdStatus.(type) {
	case *VrfStatus_EpdStatus:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EpdStatus); err != nil {
			return err
		}
	case *VrfStatus_CpdStatus:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CpdStatus); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VrfStatus.VrfPdStatus has unexpected type %T", x)
	}
	return nil
}

func _VrfStatus_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VrfStatus)
	switch tag {
	case 2: // vrf_pd_status.epd_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VrfStatusEpd)
		err := b.DecodeMessage(msg)
		m.VrfPdStatus = &VrfStatus_EpdStatus{msg}
		return true, err
	case 3: // vrf_pd_status.cpd_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VrfStatusCpd)
		err := b.DecodeMessage(msg)
		m.VrfPdStatus = &VrfStatus_CpdStatus{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VrfStatus_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VrfStatus)
	// vrf_pd_status
	switch x := m.VrfPdStatus.(type) {
	case *VrfStatus_EpdStatus:
		s := proto.Size(x.EpdStatus)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VrfStatus_CpdStatus:
		s := proto.Size(x.CpdStatus)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// VrfResponse is response to VrfSpec
type VrfResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	VrfStatus *VrfStatus `protobuf:"bytes,2,opt,name=vrf_status,json=vrfStatus" json:"vrf_status,omitempty"`
}

func (m *VrfResponse) Reset()                    { *m = VrfResponse{} }
func (m *VrfResponse) String() string            { return proto.CompactTextString(m) }
func (*VrfResponse) ProtoMessage()               {}
func (*VrfResponse) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{5} }

func (m *VrfResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *VrfResponse) GetVrfStatus() *VrfStatus {
	if m != nil {
		return m.VrfStatus
	}
	return nil
}

// VrfResponseMsg is batched response to VrfRequestMsg
type VrfResponseMsg struct {
	Response []*VrfResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *VrfResponseMsg) Reset()                    { *m = VrfResponseMsg{} }
func (m *VrfResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*VrfResponseMsg) ProtoMessage()               {}
func (*VrfResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{6} }

func (m *VrfResponseMsg) GetResponse() []*VrfResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// VrfDeleteRequest is used to delete a vrf
type VrfDeleteRequest struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// key_or_handle is vrf's unique identifier
	KeyOrHandle *VrfKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
}

func (m *VrfDeleteRequest) Reset()                    { *m = VrfDeleteRequest{} }
func (m *VrfDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*VrfDeleteRequest) ProtoMessage()               {}
func (*VrfDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{7} }

func (m *VrfDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *VrfDeleteRequest) GetKeyOrHandle() *VrfKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// VrfDeleteResponse is response to VrfDeleteRequest
type VrfDeleteResponse struct {
	ApiStatus   ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	KeyOrHandle *VrfKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *VrfDeleteResponse) Reset()                    { *m = VrfDeleteResponse{} }
func (m *VrfDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*VrfDeleteResponse) ProtoMessage()               {}
func (*VrfDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{8} }

func (m *VrfDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *VrfDeleteResponse) GetKeyOrHandle() *VrfKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// VrfDeleteRequestMsg is used to delete a batch of vrfs
type VrfDeleteRequestMsg struct {
	Request []*VrfDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *VrfDeleteRequestMsg) Reset()                    { *m = VrfDeleteRequestMsg{} }
func (m *VrfDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*VrfDeleteRequestMsg) ProtoMessage()               {}
func (*VrfDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{9} }

func (m *VrfDeleteRequestMsg) GetRequest() []*VrfDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// VrfDeleteResponseMsg is batched response to VrfDeleteRequestMsg
type VrfDeleteResponseMsg struct {
	Response []*VrfDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *VrfDeleteResponseMsg) Reset()                    { *m = VrfDeleteResponseMsg{} }
func (m *VrfDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*VrfDeleteResponseMsg) ProtoMessage()               {}
func (*VrfDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{10} }

func (m *VrfDeleteResponseMsg) GetResponse() []*VrfDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// VrfGetRequest is used to get information about a vrf
type VrfGetRequest struct {
	Meta        *ObjectMeta   `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *VrfKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
}

func (m *VrfGetRequest) Reset()                    { *m = VrfGetRequest{} }
func (m *VrfGetRequest) String() string            { return proto.CompactTextString(m) }
func (*VrfGetRequest) ProtoMessage()               {}
func (*VrfGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{11} }

func (m *VrfGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *VrfGetRequest) GetKeyOrHandle() *VrfKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// VrfGetRequestMsg is batched GET requests for vrfs
type VrfGetRequestMsg struct {
	Request []*VrfGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *VrfGetRequestMsg) Reset()                    { *m = VrfGetRequestMsg{} }
func (m *VrfGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*VrfGetRequestMsg) ProtoMessage()               {}
func (*VrfGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{12} }

func (m *VrfGetRequestMsg) GetRequest() []*VrfGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// VrfStats is the statistics object for each vrf
type VrfStats struct {
	NumL2Segments     uint32 `protobuf:"varint,1,opt,name=num_l2_segments,json=numL2Segments,proto3" json:"num_l2_segments,omitempty"`
	NumSecurityGroups uint32 `protobuf:"varint,2,opt,name=num_security_groups,json=numSecurityGroups,proto3" json:"num_security_groups,omitempty"`
	NumL4LbServices   uint32 `protobuf:"varint,3,opt,name=num_l4lb_services,json=numL4lbServices,proto3" json:"num_l4lb_services,omitempty"`
	NumEndpoints      uint32 `protobuf:"varint,4,opt,name=num_endpoints,json=numEndpoints,proto3" json:"num_endpoints,omitempty"`
}

func (m *VrfStats) Reset()                    { *m = VrfStats{} }
func (m *VrfStats) String() string            { return proto.CompactTextString(m) }
func (*VrfStats) ProtoMessage()               {}
func (*VrfStats) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{13} }

func (m *VrfStats) GetNumL2Segments() uint32 {
	if m != nil {
		return m.NumL2Segments
	}
	return 0
}

func (m *VrfStats) GetNumSecurityGroups() uint32 {
	if m != nil {
		return m.NumSecurityGroups
	}
	return 0
}

func (m *VrfStats) GetNumL4LbServices() uint32 {
	if m != nil {
		return m.NumL4LbServices
	}
	return 0
}

func (m *VrfStats) GetNumEndpoints() uint32 {
	if m != nil {
		return m.NumEndpoints
	}
	return 0
}

// VrfGetResponse captures all the information about a vrf
// only if api_status indicates success, other fields are valid
type VrfGetResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *VrfSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *VrfStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *VrfStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *VrfGetResponse) Reset()                    { *m = VrfGetResponse{} }
func (m *VrfGetResponse) String() string            { return proto.CompactTextString(m) }
func (*VrfGetResponse) ProtoMessage()               {}
func (*VrfGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{14} }

func (m *VrfGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *VrfGetResponse) GetSpec() *VrfSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *VrfGetResponse) GetStatus() *VrfStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VrfGetResponse) GetStats() *VrfStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// VrfGetResponseMsg is batched response to VrfGetRequestMsg
type VrfGetResponseMsg struct {
	Response []*VrfGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *VrfGetResponseMsg) Reset()                    { *m = VrfGetResponseMsg{} }
func (m *VrfGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*VrfGetResponseMsg) ProtoMessage()               {}
func (*VrfGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{15} }

func (m *VrfGetResponseMsg) GetResponse() []*VrfGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*VrfSpec)(nil), "vrf.VrfSpec")
	proto.RegisterType((*VrfRequestMsg)(nil), "vrf.VrfRequestMsg")
	proto.RegisterType((*VrfStatusEpd)(nil), "vrf.VrfStatusEpd")
	proto.RegisterType((*VrfStatusCpd)(nil), "vrf.VrfStatusCpd")
	proto.RegisterType((*VrfStatus)(nil), "vrf.VrfStatus")
	proto.RegisterType((*VrfResponse)(nil), "vrf.VrfResponse")
	proto.RegisterType((*VrfResponseMsg)(nil), "vrf.VrfResponseMsg")
	proto.RegisterType((*VrfDeleteRequest)(nil), "vrf.VrfDeleteRequest")
	proto.RegisterType((*VrfDeleteResponse)(nil), "vrf.VrfDeleteResponse")
	proto.RegisterType((*VrfDeleteRequestMsg)(nil), "vrf.VrfDeleteRequestMsg")
	proto.RegisterType((*VrfDeleteResponseMsg)(nil), "vrf.VrfDeleteResponseMsg")
	proto.RegisterType((*VrfGetRequest)(nil), "vrf.VrfGetRequest")
	proto.RegisterType((*VrfGetRequestMsg)(nil), "vrf.VrfGetRequestMsg")
	proto.RegisterType((*VrfStats)(nil), "vrf.VrfStats")
	proto.RegisterType((*VrfGetResponse)(nil), "vrf.VrfGetResponse")
	proto.RegisterType((*VrfGetResponseMsg)(nil), "vrf.VrfGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Vrf service

type VrfClient interface {
	VrfCreate(ctx context.Context, in *VrfRequestMsg, opts ...grpc.CallOption) (*VrfResponseMsg, error)
	VrfUpdate(ctx context.Context, in *VrfRequestMsg, opts ...grpc.CallOption) (*VrfResponseMsg, error)
	VrfDelete(ctx context.Context, in *VrfDeleteRequestMsg, opts ...grpc.CallOption) (*VrfDeleteResponseMsg, error)
	VrfGet(ctx context.Context, in *VrfGetRequestMsg, opts ...grpc.CallOption) (*VrfGetResponseMsg, error)
}

type vrfClient struct {
	cc *grpc.ClientConn
}

func NewVrfClient(cc *grpc.ClientConn) VrfClient {
	return &vrfClient{cc}
}

func (c *vrfClient) VrfCreate(ctx context.Context, in *VrfRequestMsg, opts ...grpc.CallOption) (*VrfResponseMsg, error) {
	out := new(VrfResponseMsg)
	err := grpc.Invoke(ctx, "/vrf.Vrf/VrfCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vrfClient) VrfUpdate(ctx context.Context, in *VrfRequestMsg, opts ...grpc.CallOption) (*VrfResponseMsg, error) {
	out := new(VrfResponseMsg)
	err := grpc.Invoke(ctx, "/vrf.Vrf/VrfUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vrfClient) VrfDelete(ctx context.Context, in *VrfDeleteRequestMsg, opts ...grpc.CallOption) (*VrfDeleteResponseMsg, error) {
	out := new(VrfDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/vrf.Vrf/VrfDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vrfClient) VrfGet(ctx context.Context, in *VrfGetRequestMsg, opts ...grpc.CallOption) (*VrfGetResponseMsg, error) {
	out := new(VrfGetResponseMsg)
	err := grpc.Invoke(ctx, "/vrf.Vrf/VrfGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Vrf service

type VrfServer interface {
	VrfCreate(context.Context, *VrfRequestMsg) (*VrfResponseMsg, error)
	VrfUpdate(context.Context, *VrfRequestMsg) (*VrfResponseMsg, error)
	VrfDelete(context.Context, *VrfDeleteRequestMsg) (*VrfDeleteResponseMsg, error)
	VrfGet(context.Context, *VrfGetRequestMsg) (*VrfGetResponseMsg, error)
}

func RegisterVrfServer(s *grpc.Server, srv VrfServer) {
	s.RegisterService(&_Vrf_serviceDesc, srv)
}

func _Vrf_VrfCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VrfRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VrfServer).VrfCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrf.Vrf/VrfCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VrfServer).VrfCreate(ctx, req.(*VrfRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vrf_VrfUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VrfRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VrfServer).VrfUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrf.Vrf/VrfUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VrfServer).VrfUpdate(ctx, req.(*VrfRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vrf_VrfDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VrfDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VrfServer).VrfDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrf.Vrf/VrfDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VrfServer).VrfDelete(ctx, req.(*VrfDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vrf_VrfGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VrfGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VrfServer).VrfGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vrf.Vrf/VrfGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VrfServer).VrfGet(ctx, req.(*VrfGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vrf_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vrf.Vrf",
	HandlerType: (*VrfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VrfCreate",
			Handler:    _Vrf_VrfCreate_Handler,
		},
		{
			MethodName: "VrfUpdate",
			Handler:    _Vrf_VrfUpdate_Handler,
		},
		{
			MethodName: "VrfDelete",
			Handler:    _Vrf_VrfDelete_Handler,
		},
		{
			MethodName: "VrfGet",
			Handler:    _Vrf_VrfGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vrf.proto",
}

func (m *VrfSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.Meta.Size()))
		n1, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n2, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.SecurityKeyHandle != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.SecurityKeyHandle.Size()))
		n3, err := m.SecurityKeyHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.VrfType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.VrfType))
	}
	if m.MytepIp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.MytepIp.Size()))
		n4, err := m.MytepIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.GipoPrefix != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.GipoPrefix.Size()))
		n5, err := m.GipoPrefix.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *VrfRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVrf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VrfStatusEpd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfStatusEpd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HwVrfId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.HwVrfId))
	}
	if m.VrfLookupId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.VrfLookupId))
	}
	if m.VrfVlanIdCpu != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.VrfVlanIdCpu))
	}
	if m.InpPropCpuIdx != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.InpPropCpuIdx))
	}
	if len(m.GipoInpMapNatIdx) > 0 {
		dAtA7 := make([]byte, len(m.GipoInpMapNatIdx)*10)
		var j6 int
		for _, num := range m.GipoInpMapNatIdx {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintVrf(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if len(m.GipoInpMapTnlIdx) > 0 {
		dAtA9 := make([]byte, len(m.GipoInpMapTnlIdx)*10)
		var j8 int
		for _, num := range m.GipoInpMapTnlIdx {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintVrf(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	return i, nil
}

func (m *VrfStatusCpd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfStatusCpd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *VrfStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VrfHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.VrfHandle))
		i += 8
	}
	if m.VrfPdStatus != nil {
		nn10, err := m.VrfPdStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn10
	}
	return i, nil
}

func (m *VrfStatus_EpdStatus) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EpdStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.EpdStatus.Size()))
		n11, err := m.EpdStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *VrfStatus_CpdStatus) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CpdStatus != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.CpdStatus.Size()))
		n12, err := m.CpdStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *VrfResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.ApiStatus))
	}
	if m.VrfStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.VrfStatus.Size()))
		n13, err := m.VrfStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *VrfResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVrf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VrfDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.Meta.Size()))
		n14, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n15, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *VrfDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.ApiStatus))
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n16, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *VrfDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVrf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VrfDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVrf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VrfGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.Meta.Size()))
		n17, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n18, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *VrfGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVrf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VrfStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumL2Segments != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.NumL2Segments))
	}
	if m.NumSecurityGroups != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.NumSecurityGroups))
	}
	if m.NumL4LbServices != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.NumL4LbServices))
	}
	if m.NumEndpoints != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.NumEndpoints))
	}
	return i, nil
}

func (m *VrfGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.Spec.Size()))
		n19, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.Status.Size()))
		n20, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.Stats.Size()))
		n21, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *VrfGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVrf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintVrf(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VrfSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	if m.SecurityKeyHandle != nil {
		l = m.SecurityKeyHandle.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	if m.VrfType != 0 {
		n += 1 + sovVrf(uint64(m.VrfType))
	}
	if m.MytepIp != nil {
		l = m.MytepIp.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	if m.GipoPrefix != nil {
		l = m.GipoPrefix.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	return n
}

func (m *VrfRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovVrf(uint64(l))
		}
	}
	return n
}

func (m *VrfStatusEpd) Size() (n int) {
	var l int
	_ = l
	if m.HwVrfId != 0 {
		n += 1 + sovVrf(uint64(m.HwVrfId))
	}
	if m.VrfLookupId != 0 {
		n += 1 + sovVrf(uint64(m.VrfLookupId))
	}
	if m.VrfVlanIdCpu != 0 {
		n += 1 + sovVrf(uint64(m.VrfVlanIdCpu))
	}
	if m.InpPropCpuIdx != 0 {
		n += 1 + sovVrf(uint64(m.InpPropCpuIdx))
	}
	if len(m.GipoInpMapNatIdx) > 0 {
		l = 0
		for _, e := range m.GipoInpMapNatIdx {
			l += sovVrf(uint64(e))
		}
		n += 1 + sovVrf(uint64(l)) + l
	}
	if len(m.GipoInpMapTnlIdx) > 0 {
		l = 0
		for _, e := range m.GipoInpMapTnlIdx {
			l += sovVrf(uint64(e))
		}
		n += 1 + sovVrf(uint64(l)) + l
	}
	return n
}

func (m *VrfStatusCpd) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *VrfStatus) Size() (n int) {
	var l int
	_ = l
	if m.VrfHandle != 0 {
		n += 9
	}
	if m.VrfPdStatus != nil {
		n += m.VrfPdStatus.Size()
	}
	return n
}

func (m *VrfStatus_EpdStatus) Size() (n int) {
	var l int
	_ = l
	if m.EpdStatus != nil {
		l = m.EpdStatus.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	return n
}
func (m *VrfStatus_CpdStatus) Size() (n int) {
	var l int
	_ = l
	if m.CpdStatus != nil {
		l = m.CpdStatus.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	return n
}
func (m *VrfResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovVrf(uint64(m.ApiStatus))
	}
	if m.VrfStatus != nil {
		l = m.VrfStatus.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	return n
}

func (m *VrfResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovVrf(uint64(l))
		}
	}
	return n
}

func (m *VrfDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	return n
}

func (m *VrfDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovVrf(uint64(m.ApiStatus))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	return n
}

func (m *VrfDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovVrf(uint64(l))
		}
	}
	return n
}

func (m *VrfDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovVrf(uint64(l))
		}
	}
	return n
}

func (m *VrfGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	return n
}

func (m *VrfGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovVrf(uint64(l))
		}
	}
	return n
}

func (m *VrfStats) Size() (n int) {
	var l int
	_ = l
	if m.NumL2Segments != 0 {
		n += 1 + sovVrf(uint64(m.NumL2Segments))
	}
	if m.NumSecurityGroups != 0 {
		n += 1 + sovVrf(uint64(m.NumSecurityGroups))
	}
	if m.NumL4LbServices != 0 {
		n += 1 + sovVrf(uint64(m.NumL4LbServices))
	}
	if m.NumEndpoints != 0 {
		n += 1 + sovVrf(uint64(m.NumEndpoints))
	}
	return n
}

func (m *VrfGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovVrf(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	return n
}

func (m *VrfGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovVrf(uint64(l))
		}
	}
	return n
}

func sovVrf(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVrf(x uint64) (n int) {
	return sovVrf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VrfSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &VrfKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecurityKeyHandle == nil {
				m.SecurityKeyHandle = &SecurityProfileKeyHandle{}
			}
			if err := m.SecurityKeyHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfType", wireType)
			}
			m.VrfType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VrfType |= (VrfType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MytepIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MytepIp == nil {
				m.MytepIp = &IPAddress{}
			}
			if err := m.MytepIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GipoPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GipoPrefix == nil {
				m.GipoPrefix = &IPPrefix{}
			}
			if err := m.GipoPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &VrfSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfStatusEpd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfStatusEpd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfStatusEpd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HwVrfId", wireType)
			}
			m.HwVrfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HwVrfId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfLookupId", wireType)
			}
			m.VrfLookupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VrfLookupId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfVlanIdCpu", wireType)
			}
			m.VrfVlanIdCpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VrfVlanIdCpu |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InpPropCpuIdx", wireType)
			}
			m.InpPropCpuIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InpPropCpuIdx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVrf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GipoInpMapNatIdx = append(m.GipoInpMapNatIdx, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVrf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVrf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVrf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GipoInpMapNatIdx = append(m.GipoInpMapNatIdx, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GipoInpMapNatIdx", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVrf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GipoInpMapTnlIdx = append(m.GipoInpMapTnlIdx, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVrf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVrf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVrf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GipoInpMapTnlIdx = append(m.GipoInpMapTnlIdx, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GipoInpMapTnlIdx", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfStatusCpd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfStatusCpd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfStatusCpd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfHandle", wireType)
			}
			m.VrfHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpdStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VrfStatusEpd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VrfPdStatus = &VrfStatus_EpdStatus{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpdStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VrfStatusCpd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.VrfPdStatus = &VrfStatus_CpdStatus{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VrfStatus == nil {
				m.VrfStatus = &VrfStatus{}
			}
			if err := m.VrfStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &VrfResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &VrfKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &VrfKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &VrfDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &VrfDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &VrfKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &VrfGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumL2Segments", wireType)
			}
			m.NumL2Segments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumL2Segments |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSecurityGroups", wireType)
			}
			m.NumSecurityGroups = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSecurityGroups |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumL4LbServices", wireType)
			}
			m.NumL4LbServices = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumL4LbServices |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEndpoints", wireType)
			}
			m.NumEndpoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEndpoints |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &VrfSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &VrfStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &VrfStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &VrfGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVrf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVrf
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVrf
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVrf(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVrf = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVrf   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("vrf.proto", fileDescriptorVrf) }

var fileDescriptorVrf = []byte{
	// 1023 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcd, 0x6e, 0xe3, 0x54,
	0x14, 0xae, 0x27, 0x9d, 0xfc, 0x9c, 0xd4, 0x69, 0x72, 0xd3, 0x8e, 0x42, 0x04, 0x6d, 0xe4, 0xd1,
	0x94, 0x8a, 0x9f, 0x80, 0x4c, 0x05, 0x82, 0x05, 0x30, 0xc9, 0x4c, 0x67, 0x02, 0x2d, 0x53, 0xb9,
	0x43, 0x16, 0x08, 0xc9, 0x72, 0xe2, 0xeb, 0xc4, 0xc4, 0x3f, 0x97, 0x6b, 0x3b, 0xd3, 0x6c, 0x90,
	0x90, 0x78, 0x01, 0x76, 0xec, 0x79, 0x04, 0x1e, 0x02, 0x96, 0x3c, 0x41, 0x85, 0xca, 0x1b, 0x54,
	0x88, 0x25, 0x42, 0xf7, 0xc7, 0xf9, 0x71, 0xb3, 0x00, 0xa9, 0x82, 0x55, 0x9d, 0x73, 0xbe, 0xf3,
	0xf9, 0x7e, 0xe7, 0x7c, 0xf7, 0xb8, 0x50, 0x9a, 0x52, 0xa7, 0x4d, 0x68, 0x18, 0x87, 0x28, 0x37,
	0xa5, 0x4e, 0xb3, 0x1c, 0xcf, 0x08, 0x8e, 0x44, 0xa4, 0x59, 0x9c, 0x8c, 0xc5, 0x93, 0xf6, 0xe7,
	0x1d, 0x28, 0xf4, 0xa9, 0x73, 0x4e, 0xf0, 0x10, 0x3d, 0x80, 0x4d, 0x1f, 0xc7, 0x56, 0x43, 0x69,
	0x29, 0x87, 0x65, 0xbd, 0xd6, 0x16, 0x15, 0xcf, 0x06, 0x5f, 0xe1, 0x61, 0x7c, 0x8a, 0x63, 0xcb,
	0xe0, 0x69, 0x74, 0x0c, 0xea, 0x04, 0xcf, 0xcc, 0x90, 0x9a, 0x63, 0x2b, 0xb0, 0x3d, 0xdc, 0xb8,
	0xc3, 0xf1, 0xd5, 0xf6, 0x64, 0xdc, 0xee, 0x53, 0xe7, 0x53, 0x3c, 0x7b, 0xca, 0xe3, 0x9d, 0xea,
	0xf5, 0xe5, 0xfe, 0xd6, 0x14, 0x07, 0xee, 0x10, 0x7f, 0xa0, 0x4d, 0xf0, 0x4c, 0x33, 0xca, 0x13,
	0x3c, 0x7b, 0x46, 0x45, 0x1a, 0x7d, 0x09, 0xf5, 0x08, 0x0f, 0x13, 0xea, 0xc6, 0x33, 0x93, 0x11,
	0x4a, 0xb6, 0x1c, 0x67, 0x7b, 0x99, 0xb1, 0x9d, 0xcb, 0xf4, 0x19, 0x0d, 0x1d, 0xd7, 0xc3, 0x0b,
	0xe6, 0xca, 0xf5, 0xe5, 0x3e, 0x48, 0x66, 0x8a, 0x1d, 0xa3, 0x96, 0x12, 0xcd, 0x21, 0xe8, 0x23,
	0x28, 0x4e, 0xa9, 0x63, 0x32, 0x0d, 0x8d, 0xcd, 0x96, 0x72, 0x58, 0xd1, 0x2b, 0x52, 0x50, 0x9f,
	0x3a, 0xcf, 0x67, 0x04, 0x77, 0x76, 0xae, 0x2f, 0xf7, 0xab, 0x92, 0xc4, 0xf5, 0xfd, 0x24, 0xb6,
	0x06, 0x1e, 0x36, 0x0a, 0x53, 0x91, 0x46, 0xaf, 0x43, 0xd1, 0x9f, 0xc5, 0x98, 0x98, 0x2e, 0x69,
	0xdc, 0x95, 0x0a, 0x05, 0x41, 0xef, 0xec, 0xa1, 0x6d, 0x53, 0x1c, 0x45, 0x46, 0x81, 0x23, 0x7a,
	0x04, 0xbd, 0x0d, 0xe5, 0x91, 0x4b, 0x42, 0x93, 0x50, 0xec, 0xb8, 0x17, 0x8d, 0x3c, 0xc7, 0x6f,
	0xcf, 0xf1, 0x67, 0x3c, 0x6c, 0x00, 0xc3, 0x88, 0x67, 0xed, 0x3d, 0x50, 0xfb, 0xd4, 0x31, 0xf0,
	0xd7, 0x09, 0x8e, 0xe2, 0xd3, 0x68, 0x84, 0x0e, 0xa0, 0x40, 0xc5, 0xaf, 0x86, 0xd2, 0xca, 0x1d,
	0x96, 0xf5, 0xad, 0x36, 0x1b, 0xa1, 0x1c, 0x8e, 0x91, 0x26, 0xb5, 0xbf, 0x14, 0xd8, 0x62, 0xc1,
	0xd8, 0x8a, 0x93, 0xe8, 0x31, 0xb1, 0x51, 0x13, 0x4a, 0xe3, 0x17, 0x26, 0x13, 0xeb, 0xda, 0x7c,
	0x16, 0xaa, 0x51, 0x18, 0xbf, 0xe8, 0x53, 0xa7, 0x67, 0x23, 0x0d, 0x54, 0x96, 0xf0, 0xc2, 0x70,
	0x92, 0x10, 0x96, 0xcf, 0xf1, 0x7c, 0x79, 0x4a, 0x9d, 0x13, 0x1e, 0xeb, 0xd9, 0xe8, 0x01, 0x6c,
	0x33, 0xcc, 0xd4, 0xb3, 0x02, 0xd3, 0xb5, 0xcd, 0x21, 0x49, 0x78, 0xc3, 0x54, 0x63, 0x6b, 0x4a,
	0x9d, 0xbe, 0x67, 0x05, 0x3d, 0xbb, 0x4b, 0x12, 0xf4, 0x2a, 0x54, 0xdd, 0x80, 0x98, 0x84, 0x86,
	0x84, 0x61, 0x4c, 0xd7, 0xbe, 0xe0, 0x7d, 0x51, 0x0d, 0xd5, 0x0d, 0xc8, 0x19, 0x0d, 0x49, 0x97,
	0x24, 0x3d, 0xfb, 0x02, 0xb5, 0x61, 0x87, 0xf7, 0x82, 0xa1, 0x7d, 0x8b, 0x98, 0x81, 0x15, 0x73,
	0x70, 0xbe, 0x95, 0x3b, 0x54, 0x8d, 0x2a, 0xcb, 0xf5, 0x02, 0x72, 0x6a, 0x91, 0xcf, 0xac, 0x78,
	0x1d, 0x3e, 0x0e, 0x3c, 0x8e, 0x2f, 0x64, 0xf1, 0xcf, 0x03, 0xaf, 0x67, 0x5f, 0x68, 0x95, 0x25,
	0xfd, 0x5d, 0x62, 0x6b, 0x3f, 0x2a, 0x50, 0x9a, 0x07, 0xd0, 0x2b, 0x00, 0x4c, 0x8d, 0x34, 0x13,
	0xb3, 0x72, 0xde, 0x60, 0x77, 0x41, 0xda, 0x42, 0x07, 0xc0, 0xc4, 0x36, 0x23, 0x0e, 0x96, 0xce,
	0xad, 0xcd, 0x1b, 0x9d, 0xf6, 0xf4, 0xe9, 0x86, 0x51, 0xc2, 0xc4, 0x96, 0x94, 0x3a, 0xc0, 0x70,
	0x51, 0x93, 0x5b, 0x57, 0xd3, 0x15, 0x35, 0xc3, 0xb4, 0xa6, 0xb3, 0x2d, 0x1a, 0x3f, 0x2f, 0xd3,
	0xbe, 0x53, 0xa0, 0xcc, 0x07, 0x1e, 0x91, 0x30, 0x88, 0x30, 0x3a, 0x06, 0xb0, 0x88, 0x9b, 0x92,
	0x2a, 0xdc, 0xa1, 0xa9, 0xc1, 0x1e, 0x12, 0x57, 0xd2, 0xec, 0x5e, 0x5f, 0xee, 0xd7, 0xa4, 0x47,
	0x17, 0x70, 0xa3, 0x64, 0xa5, 0x08, 0xf4, 0xa6, 0xd0, 0xbb, 0x22, 0xa8, 0xb2, 0x7a, 0x38, 0xae,
	0x5f, 0x3c, 0x6a, 0x1f, 0x42, 0x65, 0xe9, 0x14, 0xcc, 0x77, 0x6f, 0x40, 0x91, 0xca, 0x9f, 0xd2,
	0x78, 0xd5, 0xb4, 0x3c, 0x85, 0x19, 0x73, 0x84, 0xf6, 0xad, 0x02, 0xd5, 0x3e, 0x75, 0x1e, 0x61,
	0x0f, 0xc7, 0x58, 0xba, 0xf7, 0x3f, 0x5e, 0x1c, 0xda, 0xf7, 0x0a, 0xd4, 0x96, 0xce, 0x70, 0xcb,
	0x0d, 0x3d, 0xfa, 0x87, 0xa7, 0x5c, 0x3d, 0xd3, 0x31, 0xd4, 0xb3, 0x6d, 0x61, 0xcd, 0x7d, 0x2b,
	0x7b, 0xa9, 0x77, 0xd3, 0xde, 0xae, 0x40, 0x17, 0xb7, 0xfb, 0x13, 0xd8, 0xb9, 0x21, 0x8d, 0x11,
	0xe9, 0x37, 0xa6, 0x74, 0x2f, 0xcb, 0x74, 0x63, 0x56, 0xdf, 0xf0, 0x15, 0xf3, 0x04, 0xc7, 0xff,
	0xd3, 0x9c, 0x3e, 0xe6, 0x56, 0x59, 0xbc, 0x5f, 0xb8, 0x2d, 0xd3, 0x10, 0x94, 0xca, 0x58, 0xe0,
	0x16, 0xdd, 0xf8, 0x49, 0x81, 0xa2, 0xb4, 0x71, 0x84, 0x0e, 0x60, 0x3b, 0x48, 0x7c, 0xd3, 0xd3,
	0xcd, 0x08, 0x8f, 0x7c, 0x1c, 0xc4, 0x62, 0xca, 0xaa, 0xa1, 0x06, 0x89, 0x7f, 0xa2, 0x9f, 0xcb,
	0x20, 0x6a, 0x43, 0x9d, 0xe1, 0xe6, 0xdf, 0x96, 0x11, 0x0d, 0x13, 0x12, 0xc9, 0xcd, 0x58, 0x0b,
	0x12, 0x3f, 0xfd, 0xac, 0x3c, 0xe1, 0x09, 0xf4, 0x1a, 0xd4, 0x38, 0xef, 0x91, 0x37, 0x30, 0x23,
	0x4c, 0xa7, 0xee, 0x10, 0x47, 0x72, 0x4f, 0xb2, 0x17, 0x9e, 0x1c, 0x79, 0x83, 0x73, 0x19, 0x46,
	0xf7, 0x81, 0xbd, 0xcc, 0xc4, 0x81, 0x4d, 0x42, 0x97, 0x9d, 0x40, 0x6e, 0xca, 0x20, 0xf1, 0x1f,
	0xa7, 0x31, 0xed, 0x67, 0x85, 0x5f, 0x32, 0x2e, 0xe8, 0x96, 0xcd, 0xd9, 0x82, 0xcd, 0x88, 0xe0,
	0xa1, 0x9c, 0xc8, 0xea, 0x17, 0x82, 0x67, 0xd0, 0x01, 0xe4, 0x57, 0x16, 0x55, 0x76, 0x17, 0xc8,
	0x2c, 0xba, 0x0f, 0x77, 0xd9, 0x93, 0x50, 0x50, 0xd6, 0xd5, 0x65, 0x58, 0x64, 0x88, 0x9c, 0xf6,
	0x88, 0x5f, 0xb4, 0x25, 0x21, 0xc2, 0xd3, 0x59, 0x2b, 0xd6, 0x57, 0x66, 0x98, 0xf5, 0xa1, 0xfe,
	0x87, 0x02, 0xb9, 0x3e, 0x75, 0xd0, 0xbb, 0x7c, 0x4f, 0x77, 0x29, 0xb6, 0x62, 0x8c, 0xd0, 0x62,
	0xc9, 0xa4, 0xe6, 0x68, 0xd6, 0xb3, 0x8b, 0xe7, 0x34, 0x1a, 0x69, 0x1b, 0xb2, 0xee, 0x73, 0x62,
	0xff, 0xcb, 0xba, 0x0e, 0xaf, 0x13, 0xd7, 0x03, 0x35, 0xd6, 0x5e, 0x3c, 0x56, 0xfd, 0xd2, 0xfa,
	0x8b, 0x24, 0x38, 0xde, 0x87, 0xbc, 0xd0, 0x85, 0x76, 0x6f, 0x1a, 0x95, 0x55, 0xdf, 0x5b, 0xa3,
	0x9d, 0x97, 0x76, 0x9a, 0xbf, 0x5c, 0xed, 0x29, 0xbf, 0x5e, 0xed, 0x29, 0xbf, 0x5d, 0xed, 0x29,
	0x3f, 0xfc, 0xbe, 0xb7, 0xf1, 0x45, 0x71, 0x6c, 0x79, 0xfc, 0xdf, 0xae, 0x41, 0x9e, 0xff, 0x79,
	0xe7, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x7a, 0xdd, 0x8f, 0xa6, 0x09, 0x00, 0x00,
}
