// Code generated by MockGen. DO NOT EDIT.
// Source: dos.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisDoSService_L4Info is a mock of isDoSService_L4Info interface
type MockisDoSService_L4Info struct {
	ctrl     *gomock.Controller
	recorder *MockisDoSService_L4InfoMockRecorder
}

// MockisDoSService_L4InfoMockRecorder is the mock recorder for MockisDoSService_L4Info
type MockisDoSService_L4InfoMockRecorder struct {
	mock *MockisDoSService_L4Info
}

// NewMockisDoSService_L4Info creates a new mock instance
func NewMockisDoSService_L4Info(ctrl *gomock.Controller) *MockisDoSService_L4Info {
	mock := &MockisDoSService_L4Info{ctrl: ctrl}
	mock.recorder = &MockisDoSService_L4InfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisDoSService_L4Info) EXPECT() *MockisDoSService_L4InfoMockRecorder {
	return m.recorder
}

// isDoSService_L4Info mocks base method
func (m *MockisDoSService_L4Info) isDoSService_L4Info() {
	m.ctrl.Call(m, "isDoSService_L4Info")
}

// isDoSService_L4Info indicates an expected call of isDoSService_L4Info
func (mr *MockisDoSService_L4InfoMockRecorder) isDoSService_L4Info() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isDoSService_L4Info", reflect.TypeOf((*MockisDoSService_L4Info)(nil).isDoSService_L4Info))
}

// MarshalTo mocks base method
func (m *MockisDoSService_L4Info) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisDoSService_L4InfoMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisDoSService_L4Info)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisDoSService_L4Info) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisDoSService_L4InfoMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisDoSService_L4Info)(nil).Size))
}

// MockDosClient is a mock of DosClient interface
type MockDosClient struct {
	ctrl     *gomock.Controller
	recorder *MockDosClientMockRecorder
}

// MockDosClientMockRecorder is the mock recorder for MockDosClient
type MockDosClientMockRecorder struct {
	mock *MockDosClient
}

// NewMockDosClient creates a new mock instance
func NewMockDosClient(ctrl *gomock.Controller) *MockDosClient {
	mock := &MockDosClient{ctrl: ctrl}
	mock.recorder = &MockDosClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDosClient) EXPECT() *MockDosClientMockRecorder {
	return m.recorder
}

// DoSPolicyCreate mocks base method
func (m *MockDosClient) DoSPolicyCreate(ctx context.Context, in *DoSPolicyRequestMsg, opts ...grpc.CallOption) (*DoSPolicyResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DoSPolicyCreate", varargs...)
	ret0, _ := ret[0].(*DoSPolicyResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoSPolicyCreate indicates an expected call of DoSPolicyCreate
func (mr *MockDosClientMockRecorder) DoSPolicyCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSPolicyCreate", reflect.TypeOf((*MockDosClient)(nil).DoSPolicyCreate), varargs...)
}

// DoSPolicyUpdate mocks base method
func (m *MockDosClient) DoSPolicyUpdate(ctx context.Context, in *DoSPolicyRequestMsg, opts ...grpc.CallOption) (*DoSPolicyResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DoSPolicyUpdate", varargs...)
	ret0, _ := ret[0].(*DoSPolicyResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoSPolicyUpdate indicates an expected call of DoSPolicyUpdate
func (mr *MockDosClientMockRecorder) DoSPolicyUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSPolicyUpdate", reflect.TypeOf((*MockDosClient)(nil).DoSPolicyUpdate), varargs...)
}

// DoSPolicyDelete mocks base method
func (m *MockDosClient) DoSPolicyDelete(ctx context.Context, in *DoSPolicyDeleteRequestMsg, opts ...grpc.CallOption) (*DoSPolicyDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DoSPolicyDelete", varargs...)
	ret0, _ := ret[0].(*DoSPolicyDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoSPolicyDelete indicates an expected call of DoSPolicyDelete
func (mr *MockDosClientMockRecorder) DoSPolicyDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSPolicyDelete", reflect.TypeOf((*MockDosClient)(nil).DoSPolicyDelete), varargs...)
}

// DoSPolicyGet mocks base method
func (m *MockDosClient) DoSPolicyGet(ctx context.Context, in *DoSPolicyGetRequestMsg, opts ...grpc.CallOption) (*DoSPolicyGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DoSPolicyGet", varargs...)
	ret0, _ := ret[0].(*DoSPolicyGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoSPolicyGet indicates an expected call of DoSPolicyGet
func (mr *MockDosClientMockRecorder) DoSPolicyGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSPolicyGet", reflect.TypeOf((*MockDosClient)(nil).DoSPolicyGet), varargs...)
}

// MockDosServer is a mock of DosServer interface
type MockDosServer struct {
	ctrl     *gomock.Controller
	recorder *MockDosServerMockRecorder
}

// MockDosServerMockRecorder is the mock recorder for MockDosServer
type MockDosServerMockRecorder struct {
	mock *MockDosServer
}

// NewMockDosServer creates a new mock instance
func NewMockDosServer(ctrl *gomock.Controller) *MockDosServer {
	mock := &MockDosServer{ctrl: ctrl}
	mock.recorder = &MockDosServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDosServer) EXPECT() *MockDosServerMockRecorder {
	return m.recorder
}

// DoSPolicyCreate mocks base method
func (m *MockDosServer) DoSPolicyCreate(arg0 context.Context, arg1 *DoSPolicyRequestMsg) (*DoSPolicyResponseMsg, error) {
	ret := m.ctrl.Call(m, "DoSPolicyCreate", arg0, arg1)
	ret0, _ := ret[0].(*DoSPolicyResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoSPolicyCreate indicates an expected call of DoSPolicyCreate
func (mr *MockDosServerMockRecorder) DoSPolicyCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSPolicyCreate", reflect.TypeOf((*MockDosServer)(nil).DoSPolicyCreate), arg0, arg1)
}

// DoSPolicyUpdate mocks base method
func (m *MockDosServer) DoSPolicyUpdate(arg0 context.Context, arg1 *DoSPolicyRequestMsg) (*DoSPolicyResponseMsg, error) {
	ret := m.ctrl.Call(m, "DoSPolicyUpdate", arg0, arg1)
	ret0, _ := ret[0].(*DoSPolicyResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoSPolicyUpdate indicates an expected call of DoSPolicyUpdate
func (mr *MockDosServerMockRecorder) DoSPolicyUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSPolicyUpdate", reflect.TypeOf((*MockDosServer)(nil).DoSPolicyUpdate), arg0, arg1)
}

// DoSPolicyDelete mocks base method
func (m *MockDosServer) DoSPolicyDelete(arg0 context.Context, arg1 *DoSPolicyDeleteRequestMsg) (*DoSPolicyDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "DoSPolicyDelete", arg0, arg1)
	ret0, _ := ret[0].(*DoSPolicyDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoSPolicyDelete indicates an expected call of DoSPolicyDelete
func (mr *MockDosServerMockRecorder) DoSPolicyDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSPolicyDelete", reflect.TypeOf((*MockDosServer)(nil).DoSPolicyDelete), arg0, arg1)
}

// DoSPolicyGet mocks base method
func (m *MockDosServer) DoSPolicyGet(arg0 context.Context, arg1 *DoSPolicyGetRequestMsg) (*DoSPolicyGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "DoSPolicyGet", arg0, arg1)
	ret0, _ := ret[0].(*DoSPolicyGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoSPolicyGet indicates an expected call of DoSPolicyGet
func (mr *MockDosServerMockRecorder) DoSPolicyGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSPolicyGet", reflect.TypeOf((*MockDosServer)(nil).DoSPolicyGet), arg0, arg1)
}
