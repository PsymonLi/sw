// Code generated by MockGen. DO NOT EDIT.
// Source: proxy.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisProxyKeyHandle_KeyOrHandle is a mock of isProxyKeyHandle_KeyOrHandle interface
type MockisProxyKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisProxyKeyHandle_KeyOrHandleMockRecorder
}

// MockisProxyKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisProxyKeyHandle_KeyOrHandle
type MockisProxyKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisProxyKeyHandle_KeyOrHandle
}

// NewMockisProxyKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisProxyKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisProxyKeyHandle_KeyOrHandle {
	mock := &MockisProxyKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisProxyKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisProxyKeyHandle_KeyOrHandle) EXPECT() *MockisProxyKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isProxyKeyHandle_KeyOrHandle mocks base method
func (m *MockisProxyKeyHandle_KeyOrHandle) isProxyKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isProxyKeyHandle_KeyOrHandle")
}

// isProxyKeyHandle_KeyOrHandle indicates an expected call of isProxyKeyHandle_KeyOrHandle
func (mr *MockisProxyKeyHandle_KeyOrHandleMockRecorder) isProxyKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isProxyKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisProxyKeyHandle_KeyOrHandle)(nil).isProxyKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisProxyKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisProxyKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisProxyKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisProxyKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisProxyKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisProxyKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisTlsProxyFlowConfig_Keys is a mock of isTlsProxyFlowConfig_Keys interface
type MockisTlsProxyFlowConfig_Keys struct {
	ctrl     *gomock.Controller
	recorder *MockisTlsProxyFlowConfig_KeysMockRecorder
}

// MockisTlsProxyFlowConfig_KeysMockRecorder is the mock recorder for MockisTlsProxyFlowConfig_Keys
type MockisTlsProxyFlowConfig_KeysMockRecorder struct {
	mock *MockisTlsProxyFlowConfig_Keys
}

// NewMockisTlsProxyFlowConfig_Keys creates a new mock instance
func NewMockisTlsProxyFlowConfig_Keys(ctrl *gomock.Controller) *MockisTlsProxyFlowConfig_Keys {
	mock := &MockisTlsProxyFlowConfig_Keys{ctrl: ctrl}
	mock.recorder = &MockisTlsProxyFlowConfig_KeysMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisTlsProxyFlowConfig_Keys) EXPECT() *MockisTlsProxyFlowConfig_KeysMockRecorder {
	return m.recorder
}

// isTlsProxyFlowConfig_Keys mocks base method
func (m *MockisTlsProxyFlowConfig_Keys) isTlsProxyFlowConfig_Keys() {
	m.ctrl.Call(m, "isTlsProxyFlowConfig_Keys")
}

// isTlsProxyFlowConfig_Keys indicates an expected call of isTlsProxyFlowConfig_Keys
func (mr *MockisTlsProxyFlowConfig_KeysMockRecorder) isTlsProxyFlowConfig_Keys() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isTlsProxyFlowConfig_Keys", reflect.TypeOf((*MockisTlsProxyFlowConfig_Keys)(nil).isTlsProxyFlowConfig_Keys))
}

// MarshalTo mocks base method
func (m *MockisTlsProxyFlowConfig_Keys) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisTlsProxyFlowConfig_KeysMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisTlsProxyFlowConfig_Keys)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisTlsProxyFlowConfig_Keys) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisTlsProxyFlowConfig_KeysMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisTlsProxyFlowConfig_Keys)(nil).Size))
}

// MockProxyClient is a mock of ProxyClient interface
type MockProxyClient struct {
	ctrl     *gomock.Controller
	recorder *MockProxyClientMockRecorder
}

// MockProxyClientMockRecorder is the mock recorder for MockProxyClient
type MockProxyClientMockRecorder struct {
	mock *MockProxyClient
}

// NewMockProxyClient creates a new mock instance
func NewMockProxyClient(ctrl *gomock.Controller) *MockProxyClient {
	mock := &MockProxyClient{ctrl: ctrl}
	mock.recorder = &MockProxyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProxyClient) EXPECT() *MockProxyClientMockRecorder {
	return m.recorder
}

// ProxyEnable mocks base method
func (m *MockProxyClient) ProxyEnable(ctx context.Context, in *ProxyRequestMsg, opts ...grpc.CallOption) (*ProxyResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxyEnable", varargs...)
	ret0, _ := ret[0].(*ProxyResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyEnable indicates an expected call of ProxyEnable
func (mr *MockProxyClientMockRecorder) ProxyEnable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyEnable", reflect.TypeOf((*MockProxyClient)(nil).ProxyEnable), varargs...)
}

// ProxyUpdate mocks base method
func (m *MockProxyClient) ProxyUpdate(ctx context.Context, in *ProxyRequestMsg, opts ...grpc.CallOption) (*ProxyResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxyUpdate", varargs...)
	ret0, _ := ret[0].(*ProxyResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyUpdate indicates an expected call of ProxyUpdate
func (mr *MockProxyClientMockRecorder) ProxyUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyUpdate", reflect.TypeOf((*MockProxyClient)(nil).ProxyUpdate), varargs...)
}

// ProxyDisable mocks base method
func (m *MockProxyClient) ProxyDisable(ctx context.Context, in *ProxyDisableRequestMsg, opts ...grpc.CallOption) (*ProxyDisableResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxyDisable", varargs...)
	ret0, _ := ret[0].(*ProxyDisableResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyDisable indicates an expected call of ProxyDisable
func (mr *MockProxyClientMockRecorder) ProxyDisable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyDisable", reflect.TypeOf((*MockProxyClient)(nil).ProxyDisable), varargs...)
}

// ProxyGet mocks base method
func (m *MockProxyClient) ProxyGet(ctx context.Context, in *ProxyGetRequestMsg, opts ...grpc.CallOption) (*ProxyGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxyGet", varargs...)
	ret0, _ := ret[0].(*ProxyGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyGet indicates an expected call of ProxyGet
func (mr *MockProxyClientMockRecorder) ProxyGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyGet", reflect.TypeOf((*MockProxyClient)(nil).ProxyGet), varargs...)
}

// ProxyFlowConfig mocks base method
func (m *MockProxyClient) ProxyFlowConfig(ctx context.Context, in *ProxyFlowConfigRequestMsg, opts ...grpc.CallOption) (*ProxyResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxyFlowConfig", varargs...)
	ret0, _ := ret[0].(*ProxyResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyFlowConfig indicates an expected call of ProxyFlowConfig
func (mr *MockProxyClientMockRecorder) ProxyFlowConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyFlowConfig", reflect.TypeOf((*MockProxyClient)(nil).ProxyFlowConfig), varargs...)
}

// ProxyGetFlowInfo mocks base method
func (m *MockProxyClient) ProxyGetFlowInfo(ctx context.Context, in *ProxyGetFlowInfoRequestMsg, opts ...grpc.CallOption) (*ProxyGetFlowInfoResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxyGetFlowInfo", varargs...)
	ret0, _ := ret[0].(*ProxyGetFlowInfoResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyGetFlowInfo indicates an expected call of ProxyGetFlowInfo
func (mr *MockProxyClientMockRecorder) ProxyGetFlowInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyGetFlowInfo", reflect.TypeOf((*MockProxyClient)(nil).ProxyGetFlowInfo), varargs...)
}

// ProxyGlobalCfg mocks base method
func (m *MockProxyClient) ProxyGlobalCfg(ctx context.Context, in *ProxyGlobalCfgRequestMsg, opts ...grpc.CallOption) (*ProxyGlobalCfgResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxyGlobalCfg", varargs...)
	ret0, _ := ret[0].(*ProxyGlobalCfgResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyGlobalCfg indicates an expected call of ProxyGlobalCfg
func (mr *MockProxyClientMockRecorder) ProxyGlobalCfg(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyGlobalCfg", reflect.TypeOf((*MockProxyClient)(nil).ProxyGlobalCfg), varargs...)
}

// MockProxyServer is a mock of ProxyServer interface
type MockProxyServer struct {
	ctrl     *gomock.Controller
	recorder *MockProxyServerMockRecorder
}

// MockProxyServerMockRecorder is the mock recorder for MockProxyServer
type MockProxyServerMockRecorder struct {
	mock *MockProxyServer
}

// NewMockProxyServer creates a new mock instance
func NewMockProxyServer(ctrl *gomock.Controller) *MockProxyServer {
	mock := &MockProxyServer{ctrl: ctrl}
	mock.recorder = &MockProxyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProxyServer) EXPECT() *MockProxyServerMockRecorder {
	return m.recorder
}

// ProxyEnable mocks base method
func (m *MockProxyServer) ProxyEnable(arg0 context.Context, arg1 *ProxyRequestMsg) (*ProxyResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxyEnable", arg0, arg1)
	ret0, _ := ret[0].(*ProxyResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyEnable indicates an expected call of ProxyEnable
func (mr *MockProxyServerMockRecorder) ProxyEnable(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyEnable", reflect.TypeOf((*MockProxyServer)(nil).ProxyEnable), arg0, arg1)
}

// ProxyUpdate mocks base method
func (m *MockProxyServer) ProxyUpdate(arg0 context.Context, arg1 *ProxyRequestMsg) (*ProxyResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxyUpdate", arg0, arg1)
	ret0, _ := ret[0].(*ProxyResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyUpdate indicates an expected call of ProxyUpdate
func (mr *MockProxyServerMockRecorder) ProxyUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyUpdate", reflect.TypeOf((*MockProxyServer)(nil).ProxyUpdate), arg0, arg1)
}

// ProxyDisable mocks base method
func (m *MockProxyServer) ProxyDisable(arg0 context.Context, arg1 *ProxyDisableRequestMsg) (*ProxyDisableResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxyDisable", arg0, arg1)
	ret0, _ := ret[0].(*ProxyDisableResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyDisable indicates an expected call of ProxyDisable
func (mr *MockProxyServerMockRecorder) ProxyDisable(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyDisable", reflect.TypeOf((*MockProxyServer)(nil).ProxyDisable), arg0, arg1)
}

// ProxyGet mocks base method
func (m *MockProxyServer) ProxyGet(arg0 context.Context, arg1 *ProxyGetRequestMsg) (*ProxyGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxyGet", arg0, arg1)
	ret0, _ := ret[0].(*ProxyGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyGet indicates an expected call of ProxyGet
func (mr *MockProxyServerMockRecorder) ProxyGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyGet", reflect.TypeOf((*MockProxyServer)(nil).ProxyGet), arg0, arg1)
}

// ProxyFlowConfig mocks base method
func (m *MockProxyServer) ProxyFlowConfig(arg0 context.Context, arg1 *ProxyFlowConfigRequestMsg) (*ProxyResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxyFlowConfig", arg0, arg1)
	ret0, _ := ret[0].(*ProxyResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyFlowConfig indicates an expected call of ProxyFlowConfig
func (mr *MockProxyServerMockRecorder) ProxyFlowConfig(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyFlowConfig", reflect.TypeOf((*MockProxyServer)(nil).ProxyFlowConfig), arg0, arg1)
}

// ProxyGetFlowInfo mocks base method
func (m *MockProxyServer) ProxyGetFlowInfo(arg0 context.Context, arg1 *ProxyGetFlowInfoRequestMsg) (*ProxyGetFlowInfoResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxyGetFlowInfo", arg0, arg1)
	ret0, _ := ret[0].(*ProxyGetFlowInfoResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyGetFlowInfo indicates an expected call of ProxyGetFlowInfo
func (mr *MockProxyServerMockRecorder) ProxyGetFlowInfo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyGetFlowInfo", reflect.TypeOf((*MockProxyServer)(nil).ProxyGetFlowInfo), arg0, arg1)
}

// ProxyGlobalCfg mocks base method
func (m *MockProxyServer) ProxyGlobalCfg(arg0 context.Context, arg1 *ProxyGlobalCfgRequestMsg) (*ProxyGlobalCfgResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxyGlobalCfg", arg0, arg1)
	ret0, _ := ret[0].(*ProxyGlobalCfgResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyGlobalCfg indicates an expected call of ProxyGlobalCfg
func (mr *MockProxyServerMockRecorder) ProxyGlobalCfg(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyGlobalCfg", reflect.TypeOf((*MockProxyServer)(nil).ProxyGlobalCfg), arg0, arg1)
}
