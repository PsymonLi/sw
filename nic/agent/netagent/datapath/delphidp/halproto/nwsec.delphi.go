// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nwsec.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// normalization feature actions upon detecting malformed packets
type NormalizationAction int32

const (
	NormalizationAction_NORM_ACTION_NONE  NormalizationAction = 0
	NormalizationAction_NORM_ACTION_ALLOW NormalizationAction = 1
	NormalizationAction_NORM_ACTION_DROP  NormalizationAction = 2
	NormalizationAction_NORM_ACTION_EDIT  NormalizationAction = 3
)

var NormalizationAction_name = map[int32]string{
	0: "NORM_ACTION_NONE",
	1: "NORM_ACTION_ALLOW",
	2: "NORM_ACTION_DROP",
	3: "NORM_ACTION_EDIT",
}
var NormalizationAction_value = map[string]int32{
	"NORM_ACTION_NONE":  0,
	"NORM_ACTION_ALLOW": 1,
	"NORM_ACTION_DROP":  2,
	"NORM_ACTION_EDIT":  3,
}

func (x NormalizationAction) String() string {
	return proto.EnumName(NormalizationAction_name, int32(x))
}
func (NormalizationAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor22, []int{0} }

// Applicaion Layer Gateway (ALG) names for invoking appropriate ALG
type ALGName int32

const (
	ALGName_APP_SVC_NONE       ALGName = 0
	ALGName_APP_SVC_TFTP       ALGName = 1
	ALGName_APP_SVC_FTP        ALGName = 2
	ALGName_APP_SVC_DNS        ALGName = 3
	ALGName_APP_SVC_SIP        ALGName = 4
	ALGName_APP_SVC_SUN_RPC    ALGName = 5
	ALGName_APP_SVC_MSFT_RPC   ALGName = 6
	ALGName_APP_SVC_RTSP       ALGName = 7
	ALGName_APP_SVC_TRACEROUTE ALGName = 8
	ALGName_APP_SVC_IP         ALGName = 9
	ALGName_APP_SVC_ANY        ALGName = 10
)

var ALGName_name = map[int32]string{
	0:  "APP_SVC_NONE",
	1:  "APP_SVC_TFTP",
	2:  "APP_SVC_FTP",
	3:  "APP_SVC_DNS",
	4:  "APP_SVC_SIP",
	5:  "APP_SVC_SUN_RPC",
	6:  "APP_SVC_MSFT_RPC",
	7:  "APP_SVC_RTSP",
	8:  "APP_SVC_TRACEROUTE",
	9:  "APP_SVC_IP",
	10: "APP_SVC_ANY",
}
var ALGName_value = map[string]int32{
	"APP_SVC_NONE":       0,
	"APP_SVC_TFTP":       1,
	"APP_SVC_FTP":        2,
	"APP_SVC_DNS":        3,
	"APP_SVC_SIP":        4,
	"APP_SVC_SUN_RPC":    5,
	"APP_SVC_MSFT_RPC":   6,
	"APP_SVC_RTSP":       7,
	"APP_SVC_TRACEROUTE": 8,
	"APP_SVC_IP":         9,
	"APP_SVC_ANY":        10,
}

func (x ALGName) String() string {
	return proto.EnumName(ALGName_name, int32(x))
}
func (ALGName) EnumDescriptor() ([]byte, []int) { return fileDescriptor22, []int{1} }

// Firewall policy actions
type FirewallAction int32

const (
	FirewallAction_FIREWALL_ACTION_NONE   FirewallAction = 0
	FirewallAction_FIREWALL_ACTION_ALLOW  FirewallAction = 1
	FirewallAction_FIREWALL_ACTION_DENY   FirewallAction = 2
	FirewallAction_FIREWALL_ACTION_REJECT FirewallAction = 3
)

var FirewallAction_name = map[int32]string{
	0: "FIREWALL_ACTION_NONE",
	1: "FIREWALL_ACTION_ALLOW",
	2: "FIREWALL_ACTION_DENY",
	3: "FIREWALL_ACTION_REJECT",
}
var FirewallAction_value = map[string]int32{
	"FIREWALL_ACTION_NONE":   0,
	"FIREWALL_ACTION_ALLOW":  1,
	"FIREWALL_ACTION_DENY":   2,
	"FIREWALL_ACTION_REJECT": 3,
}

func (x FirewallAction) String() string {
	return proto.EnumName(FirewallAction_name, int32(x))
}
func (FirewallAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor22, []int{2} }

// Action to be takn on hitting a rule
type SecurityAction int32

const (
	SecurityAction_SECURITY_RULE_ACTION_NONE          SecurityAction = 0
	SecurityAction_SECURITY_RULE_ACTION_ALLOW         SecurityAction = 1
	SecurityAction_SECURITY_RULE_ACTION_DENY          SecurityAction = 2
	SecurityAction_SECURITY_RULE_ACTION_REJECT        SecurityAction = 3
	SecurityAction_SECURITY_RULE_ACTION_IMPLICIT_DENY SecurityAction = 4
)

var SecurityAction_name = map[int32]string{
	0: "SECURITY_RULE_ACTION_NONE",
	1: "SECURITY_RULE_ACTION_ALLOW",
	2: "SECURITY_RULE_ACTION_DENY",
	3: "SECURITY_RULE_ACTION_REJECT",
	4: "SECURITY_RULE_ACTION_IMPLICIT_DENY",
}
var SecurityAction_value = map[string]int32{
	"SECURITY_RULE_ACTION_NONE":          0,
	"SECURITY_RULE_ACTION_ALLOW":         1,
	"SECURITY_RULE_ACTION_DENY":          2,
	"SECURITY_RULE_ACTION_REJECT":        3,
	"SECURITY_RULE_ACTION_IMPLICIT_DENY": 4,
}

func (x SecurityAction) String() string {
	return proto.EnumName(SecurityAction_name, int32(x))
}
func (SecurityAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor22, []int{3} }

type LogAction int32

const (
	LogAction_LOG_NONE                     LogAction = 0
	LogAction_LOG_ON_SESSION_START         LogAction = 1
	LogAction_LOG_ON_SESSION_END           LogAction = 2
	LogAction_LOG_ON_SESSION_START_AND_END LogAction = 3
)

var LogAction_name = map[int32]string{
	0: "LOG_NONE",
	1: "LOG_ON_SESSION_START",
	2: "LOG_ON_SESSION_END",
	3: "LOG_ON_SESSION_START_AND_END",
}
var LogAction_value = map[string]int32{
	"LOG_NONE":                     0,
	"LOG_ON_SESSION_START":         1,
	"LOG_ON_SESSION_END":           2,
	"LOG_ON_SESSION_START_AND_END": 3,
}

func (x LogAction) String() string {
	return proto.EnumName(LogAction_name, int32(x))
}
func (LogAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor22, []int{4} }

type AppData_TraceLevel int32

const (
	AppData_TRACE_LEVEL_NONE      AppData_TraceLevel = 0
	AppData_TRACE_LEVEL_BRIEF     AppData_TraceLevel = 1
	AppData_TRACE_LEVEL_DETAIL    AppData_TraceLevel = 2
	AppData_TRACE_LEVEL_EXTENSIVE AppData_TraceLevel = 3
	AppData_TRACE_LEVEL_VERBOSE   AppData_TraceLevel = 4
)

var AppData_TraceLevel_name = map[int32]string{
	0: "TRACE_LEVEL_NONE",
	1: "TRACE_LEVEL_BRIEF",
	2: "TRACE_LEVEL_DETAIL",
	3: "TRACE_LEVEL_EXTENSIVE",
	4: "TRACE_LEVEL_VERBOSE",
}
var AppData_TraceLevel_value = map[string]int32{
	"TRACE_LEVEL_NONE":      0,
	"TRACE_LEVEL_BRIEF":     1,
	"TRACE_LEVEL_DETAIL":    2,
	"TRACE_LEVEL_EXTENSIVE": 3,
	"TRACE_LEVEL_VERBOSE":   4,
}

func (x AppData_TraceLevel) String() string {
	return proto.EnumName(AppData_TraceLevel_name, int32(x))
}
func (AppData_TraceLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor22, []int{46, 0} }

// ------------------------------------------------------------------------------
// SecurityProfileSpec object captures feature knobs that are most likely
// shareable across L2 segments, vrfs, or even interfaces and most of the
// time operates on defaults. It is possible that there is only object of this
// kind in the system.
// NOTE: user is not expected to fill in all the fields explicitly, that job is
//       done by the agent. Agent will be exposing user visible knobs and fill
//       in the defaults when interacting with HAL.
//
// Expected defaults:
//
// 1. Any abnormal behavior w.r.t flags (IP or TCP), default action is drop
// 2. Anything to do with options, default behavior is to reset/trim
// 3. Any length related errors, default is truncate the pkt
//
// Semantics:
// tcp_cnxn_setup_timeout = Maximum time elapsed from first SYN to 3-way handshake completion.
//                          Session gets cleaned up if 3-way handshake is not done by
//                          this time.
// tcp_half_closed_timeout= Maximum time elapsed from first FIN to 3/4way close.
//                           Session gets cleaned up if this elapses. To support half-open
//                           connections, this needs to be configured with a high value.
// tcp_close_timeout      = Time wait after FIN/RST is seen from both sides to session cleanup.
//
// tcp/udp/icmp_timeout   = Maximum idle timeout allowed for tcp/upd/icmp sessions before they
//                           are aged out. For TCP sessions, 3 TCP tickles are sent with 3 seconds
//                           interval. If we dont see a response back, we age out the session after
//                           sending out TCP RST.
// session_idle_timeout   = Maximum idle timeout allowed for all other sessions.
//
//
// {
//     cnxn_tracking_en                    = true
//     tcp_non_syn_first_pkt_drop          = true
//
//     ip_normalization_en                 = true
//     {
//         ip_ttl_change_detect_en         = false
//         ip_rsvd_flags_action            = drop
//         ip_df_action                    = allow
//         ip_options_action               = allow
//         ip_invalid_len_action           = trim
//         ip_normalize_ttl                = 0 (applicable only for workload
//                                              generated traffic)
//     }
//
//     icmp_normalization_en               = true
//     {
//         icmp_invalid_code_action        = drop
//         icmp_deprecated_msgs_drop       = true
//         icmp_redirect_msg_drop          = true
//     }
//
//     tcp_normalization_en                = true
//     {
//         tcp_split_handshake_drop        = false
//         tcp_rsvd_flags_action           = drop
//         tcp_unexpected_mss_action       = strip
//         tcp_unexpected_win_scale_action = strip
//         tcp_urg_ptr_not_set_action      = reset
//         tcp_urg_flag_not_set_action     = reset
//         tcp_urg_payload_missing_action  = reset
//         tcp_rst_with_data_action        = drop
//         tcp_data_len_gt_mss_action      = trim  (if conntrack is enabled)
//         tcp_data_len_gt_win_size_action = trim  (if conntrack is enabled)
//         tcp_unexpected_ts_option_action = reset (if conntrack is enabled)
//         tcp_unexpected_echo_ts_action   = drop
//         tcp_ts_not_present_drop         = true  (if conntrack is enabled)
//         tcp_invalid_flags_drop          = true
//         tcp_nonsyn_noack_drop           = true
//         tcp_normalize_mss               = 0 (no tcp_mss normalization)
//     }
// }
// ------------------------------------------------------------------------------
type SecurityProfileSpec struct {
	KeyOrHandle          *SecurityProfileKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	SessionIdleTimeout   uint32                    `protobuf:"varint,2,opt,name=session_idle_timeout,json=sessionIdleTimeout" json:"session_idle_timeout,omitempty"`
	TcpCnxnSetupTimeout  uint32                    `protobuf:"varint,3,opt,name=tcp_cnxn_setup_timeout,json=tcpCnxnSetupTimeout" json:"tcp_cnxn_setup_timeout,omitempty"`
	TcpCloseTimeout      uint32                    `protobuf:"varint,4,opt,name=tcp_close_timeout,json=tcpCloseTimeout" json:"tcp_close_timeout,omitempty"`
	TcpHalfClosedTimeout uint32                    `protobuf:"varint,5,opt,name=tcp_half_closed_timeout,json=tcpHalfClosedTimeout" json:"tcp_half_closed_timeout,omitempty"`
	IpNormalizeTtl       uint32                    `protobuf:"varint,6,opt,name=ip_normalize_ttl,json=ipNormalizeTtl" json:"ip_normalize_ttl,omitempty"`
	TcpDropTimeout       uint32                    `protobuf:"varint,7,opt,name=tcp_drop_timeout,json=tcpDropTimeout" json:"tcp_drop_timeout,omitempty"`
	UdpDropTimeout       uint32                    `protobuf:"varint,8,opt,name=udp_drop_timeout,json=udpDropTimeout" json:"udp_drop_timeout,omitempty"`
	IcmpDropTimeout      uint32                    `protobuf:"varint,9,opt,name=icmp_drop_timeout,json=icmpDropTimeout" json:"icmp_drop_timeout,omitempty"`
	DropTimeout          uint32                    `protobuf:"varint,10,opt,name=drop_timeout,json=dropTimeout" json:"drop_timeout,omitempty"`
	TcpTimeout           uint32                    `protobuf:"varint,11,opt,name=tcp_timeout,json=tcpTimeout" json:"tcp_timeout,omitempty"`
	UdpTimeout           uint32                    `protobuf:"varint,12,opt,name=udp_timeout,json=udpTimeout" json:"udp_timeout,omitempty"`
	IcmpTimeout          uint32                    `protobuf:"varint,13,opt,name=icmp_timeout,json=icmpTimeout" json:"icmp_timeout,omitempty"`
	CnxnTrackingEn       bool                      `protobuf:"varint,14,opt,name=cnxn_tracking_en,json=cnxnTrackingEn" json:"cnxn_tracking_en,omitempty"`
	IpsgEn               bool                      `protobuf:"varint,15,opt,name=ipsg_en,json=ipsgEn" json:"ipsg_en,omitempty"`
	TcpRttEstimateEn     bool                      `protobuf:"varint,16,opt,name=tcp_rtt_estimate_en,json=tcpRttEstimateEn" json:"tcp_rtt_estimate_en,omitempty"`
	IpNormalizationEn    bool                      `protobuf:"varint,17,opt,name=ip_normalization_en,json=ipNormalizationEn" json:"ip_normalization_en,omitempty"`
	TcpNormalizationEn   bool                      `protobuf:"varint,18,opt,name=tcp_normalization_en,json=tcpNormalizationEn" json:"tcp_normalization_en,omitempty"`
	IcmpNormalizationEn  bool                      `protobuf:"varint,19,opt,name=icmp_normalization_en,json=icmpNormalizationEn" json:"icmp_normalization_en,omitempty"`
	IpReassemblyEn       bool                      `protobuf:"varint,20,opt,name=ip_reassembly_en,json=ipReassemblyEn" json:"ip_reassembly_en,omitempty"`
	// IP normalization knobs
	IpTtlChangeDetectEn        bool                `protobuf:"varint,21,opt,name=ip_ttl_change_detect_en,json=ipTtlChangeDetectEn" json:"ip_ttl_change_detect_en,omitempty"`
	IpSrcGuardEn               bool                `protobuf:"varint,22,opt,name=ip_src_guard_en,json=ipSrcGuardEn" json:"ip_src_guard_en,omitempty"`
	IpRsvdFlagsAction          NormalizationAction `protobuf:"varint,23,opt,name=ip_rsvd_flags_action,json=ipRsvdFlagsAction,enum=nwsec.NormalizationAction" json:"ip_rsvd_flags_action,omitempty"`
	IpDfAction                 NormalizationAction `protobuf:"varint,24,opt,name=ip_df_action,json=ipDfAction,enum=nwsec.NormalizationAction" json:"ip_df_action,omitempty"`
	IpOptionsAction            NormalizationAction `protobuf:"varint,25,opt,name=ip_options_action,json=ipOptionsAction,enum=nwsec.NormalizationAction" json:"ip_options_action,omitempty"`
	IpInvalidLenAction         NormalizationAction `protobuf:"varint,26,opt,name=ip_invalid_len_action,json=ipInvalidLenAction,enum=nwsec.NormalizationAction" json:"ip_invalid_len_action,omitempty"`
	IpSpoofPktDrop             bool                `protobuf:"varint,27,opt,name=ip_spoof_pkt_drop,json=ipSpoofPktDrop" json:"ip_spoof_pkt_drop,omitempty"`
	IpLooseSrcRoutingPktDrop   bool                `protobuf:"varint,28,opt,name=ip_loose_src_routing_pkt_drop,json=ipLooseSrcRoutingPktDrop" json:"ip_loose_src_routing_pkt_drop,omitempty"`
	IpMalformedOptionPktDrop   bool                `protobuf:"varint,29,opt,name=ip_malformed_option_pkt_drop,json=ipMalformedOptionPktDrop" json:"ip_malformed_option_pkt_drop,omitempty"`
	IpRecordRouteOptionPktDrop bool                `protobuf:"varint,30,opt,name=ip_record_route_option_pkt_drop,json=ipRecordRouteOptionPktDrop" json:"ip_record_route_option_pkt_drop,omitempty"`
	IpStrictSrcRoutingPktDrop  bool                `protobuf:"varint,31,opt,name=ip_strict_src_routing_pkt_drop,json=ipStrictSrcRoutingPktDrop" json:"ip_strict_src_routing_pkt_drop,omitempty"`
	IpTsOptionPktDrop          bool                `protobuf:"varint,32,opt,name=ip_ts_option_pkt_drop,json=ipTsOptionPktDrop" json:"ip_ts_option_pkt_drop,omitempty"`
	IpUnknownOptionPktDrop     bool                `protobuf:"varint,33,opt,name=ip_unknown_option_pkt_drop,json=ipUnknownOptionPktDrop" json:"ip_unknown_option_pkt_drop,omitempty"`
	IpStreamIdOptionPktDrop    bool                `protobuf:"varint,34,opt,name=ip_stream_id_option_pkt_drop,json=ipStreamIdOptionPktDrop" json:"ip_stream_id_option_pkt_drop,omitempty"`
	IpRsvdFldSetPktDrop        bool                `protobuf:"varint,35,opt,name=ip_rsvd_fld_set_pkt_drop,json=ipRsvdFldSetPktDrop" json:"ip_rsvd_fld_set_pkt_drop,omitempty"`
	IpClearDfBit               bool                `protobuf:"varint,36,opt,name=ip_clear_df_bit,json=ipClearDfBit" json:"ip_clear_df_bit,omitempty"`
	// IPv6 knobs
	Ipv6AnycastSrcDrop         bool `protobuf:"varint,40,opt,name=ipv6_anycast_src_drop,json=ipv6AnycastSrcDrop" json:"ipv6_anycast_src_drop,omitempty"`
	Ipv6V4CompatibleAddrDrop   bool `protobuf:"varint,41,opt,name=ipv6_v4_compatible_addr_drop,json=ipv6V4CompatibleAddrDrop" json:"ipv6_v4_compatible_addr_drop,omitempty"`
	Ipv6NeedlessIpFragHdrDrop  bool `protobuf:"varint,42,opt,name=ipv6_needless_ip_frag_hdr_drop,json=ipv6NeedlessIpFragHdrDrop" json:"ipv6_needless_ip_frag_hdr_drop,omitempty"`
	Ipv6InvalidOptionsPktDrop  bool `protobuf:"varint,43,opt,name=ipv6_invalid_options_pkt_drop,json=ipv6InvalidOptionsPktDrop" json:"ipv6_invalid_options_pkt_drop,omitempty"`
	Ipv6RsvdFldSetPktDrop      bool `protobuf:"varint,44,opt,name=ipv6_rsvd_fld_set_pkt_drop,json=ipv6RsvdFldSetPktDrop" json:"ipv6_rsvd_fld_set_pkt_drop,omitempty"`
	Ipv6RtgHdrPktDrop          bool `protobuf:"varint,45,opt,name=ipv6_rtg_hdr_pkt_drop,json=ipv6RtgHdrPktDrop" json:"ipv6_rtg_hdr_pkt_drop,omitempty"`
	Ipv6DstOptionsHdrPktDrop   bool `protobuf:"varint,46,opt,name=ipv6_dst_options_hdr_pkt_drop,json=ipv6DstOptionsHdrPktDrop" json:"ipv6_dst_options_hdr_pkt_drop,omitempty"`
	Ipv6HopByHopOptionsPktDrop bool `protobuf:"varint,47,opt,name=ipv6_hop_by_hop_options_pkt_drop,json=ipv6HopByHopOptionsPktDrop" json:"ipv6_hop_by_hop_options_pkt_drop,omitempty"`
	// ICMP/ICMPv6 normalization knobs
	IcmpInvalidCodeAction       NormalizationAction `protobuf:"varint,50,opt,name=icmp_invalid_code_action,json=icmpInvalidCodeAction,enum=nwsec.NormalizationAction" json:"icmp_invalid_code_action,omitempty"`
	IcmpDeprecatedMsgsDrop      bool                `protobuf:"varint,51,opt,name=icmp_deprecated_msgs_drop,json=icmpDeprecatedMsgsDrop" json:"icmp_deprecated_msgs_drop,omitempty"`
	IcmpRedirectMsgDrop         bool                `protobuf:"varint,52,opt,name=icmp_redirect_msg_drop,json=icmpRedirectMsgDrop" json:"icmp_redirect_msg_drop,omitempty"`
	IcmpDstUnreachIgnorePayload bool                `protobuf:"varint,53,opt,name=icmp_dst_unreach_ignore_payload,json=icmpDstUnreachIgnorePayload" json:"icmp_dst_unreach_ignore_payload,omitempty"`
	IcmpParamPrblmIgnorePayload bool                `protobuf:"varint,54,opt,name=icmp_param_prblm_ignore_payload,json=icmpParamPrblmIgnorePayload" json:"icmp_param_prblm_ignore_payload,omitempty"`
	IcmpPktTooBigIgnorePayload  bool                `protobuf:"varint,55,opt,name=icmp_pkt_too_big_ignore_payload,json=icmpPktTooBigIgnorePayload" json:"icmp_pkt_too_big_ignore_payload,omitempty"`
	IcmpRedirectIgnorePayload   bool                `protobuf:"varint,56,opt,name=icmp_redirect_ignore_payload,json=icmpRedirectIgnorePayload" json:"icmp_redirect_ignore_payload,omitempty"`
	IcmpTimeExceedIgnorePayload bool                `protobuf:"varint,57,opt,name=icmp_time_exceed_ignore_payload,json=icmpTimeExceedIgnorePayload" json:"icmp_time_exceed_ignore_payload,omitempty"`
	IcmpErrorDrop               bool                `protobuf:"varint,58,opt,name=icmp_error_drop,json=icmpErrorDrop" json:"icmp_error_drop,omitempty"`
	IcmpFragmentsDrop           bool                `protobuf:"varint,59,opt,name=icmp_fragments_drop,json=icmpFragmentsDrop" json:"icmp_fragments_drop,omitempty"`
	IcmpLargePktDrop            bool                `protobuf:"varint,60,opt,name=icmp_large_pkt_drop,json=icmpLargePktDrop" json:"icmp_large_pkt_drop,omitempty"`
	IcmpPingZeroIdDrop          bool                `protobuf:"varint,61,opt,name=icmp_ping_zero_id_drop,json=icmpPingZeroIdDrop" json:"icmp_ping_zero_id_drop,omitempty"`
	IcmpNeedFragSuppress        bool                `protobuf:"varint,62,opt,name=icmp_need_frag_suppress,json=icmpNeedFragSuppress" json:"icmp_need_frag_suppress,omitempty"`
	IcmpTimeExceedSuppress      bool                `protobuf:"varint,63,opt,name=icmp_time_exceed_suppress,json=icmpTimeExceedSuppress" json:"icmp_time_exceed_suppress,omitempty"`
	Icmpv6LargeMsgMtuSmallDrop  bool                `protobuf:"varint,64,opt,name=icmpv6_large_msg_mtu_small_drop,json=icmpv6LargeMsgMtuSmallDrop" json:"icmpv6_large_msg_mtu_small_drop,omitempty"`
	// TCP normalization knobs
	TcpSplitHandshakeDrop         bool                `protobuf:"varint,71,opt,name=tcp_split_handshake_drop,json=tcpSplitHandshakeDrop" json:"tcp_split_handshake_drop,omitempty"`
	TcpRsvdFlagsAction            NormalizationAction `protobuf:"varint,72,opt,name=tcp_rsvd_flags_action,json=tcpRsvdFlagsAction,enum=nwsec.NormalizationAction" json:"tcp_rsvd_flags_action,omitempty"`
	TcpUnexpectedMssAction        NormalizationAction `protobuf:"varint,73,opt,name=tcp_unexpected_mss_action,json=tcpUnexpectedMssAction,enum=nwsec.NormalizationAction" json:"tcp_unexpected_mss_action,omitempty"`
	TcpUnexpectedWinScaleAction   NormalizationAction `protobuf:"varint,74,opt,name=tcp_unexpected_win_scale_action,json=tcpUnexpectedWinScaleAction,enum=nwsec.NormalizationAction" json:"tcp_unexpected_win_scale_action,omitempty"`
	TcpUnexpectedSackPermAction   NormalizationAction `protobuf:"varint,75,opt,name=tcp_unexpected_sack_perm_action,json=tcpUnexpectedSackPermAction,enum=nwsec.NormalizationAction" json:"tcp_unexpected_sack_perm_action,omitempty"`
	TcpUrgPtrNotSetAction         NormalizationAction `protobuf:"varint,76,opt,name=tcp_urg_ptr_not_set_action,json=tcpUrgPtrNotSetAction,enum=nwsec.NormalizationAction" json:"tcp_urg_ptr_not_set_action,omitempty"`
	TcpUrgFlagNotSetAction        NormalizationAction `protobuf:"varint,77,opt,name=tcp_urg_flag_not_set_action,json=tcpUrgFlagNotSetAction,enum=nwsec.NormalizationAction" json:"tcp_urg_flag_not_set_action,omitempty"`
	TcpUrgPayloadMissingAction    NormalizationAction `protobuf:"varint,78,opt,name=tcp_urg_payload_missing_action,json=tcpUrgPayloadMissingAction,enum=nwsec.NormalizationAction" json:"tcp_urg_payload_missing_action,omitempty"`
	TcpRstWithDataAction          NormalizationAction `protobuf:"varint,79,opt,name=tcp_rst_with_data_action,json=tcpRstWithDataAction,enum=nwsec.NormalizationAction" json:"tcp_rst_with_data_action,omitempty"`
	TcpDataLenGtMssAction         NormalizationAction `protobuf:"varint,80,opt,name=tcp_data_len_gt_mss_action,json=tcpDataLenGtMssAction,enum=nwsec.NormalizationAction" json:"tcp_data_len_gt_mss_action,omitempty"`
	TcpDataLenGtWinSizeAction     NormalizationAction `protobuf:"varint,81,opt,name=tcp_data_len_gt_win_size_action,json=tcpDataLenGtWinSizeAction,enum=nwsec.NormalizationAction" json:"tcp_data_len_gt_win_size_action,omitempty"`
	TcpUnexpectedTsOptionAction   NormalizationAction `protobuf:"varint,82,opt,name=tcp_unexpected_ts_option_action,json=tcpUnexpectedTsOptionAction,enum=nwsec.NormalizationAction" json:"tcp_unexpected_ts_option_action,omitempty"`
	TcpUnexpectedEchoTsAction     NormalizationAction `protobuf:"varint,83,opt,name=tcp_unexpected_echo_ts_action,json=tcpUnexpectedEchoTsAction,enum=nwsec.NormalizationAction" json:"tcp_unexpected_echo_ts_action,omitempty"`
	TcpUnexpectedSackOptionAction NormalizationAction `protobuf:"varint,84,opt,name=tcp_unexpected_sack_option_action,json=tcpUnexpectedSackOptionAction,enum=nwsec.NormalizationAction" json:"tcp_unexpected_sack_option_action,omitempty"`
	TcpTsNotPresentDrop           bool                `protobuf:"varint,85,opt,name=tcp_ts_not_present_drop,json=tcpTsNotPresentDrop" json:"tcp_ts_not_present_drop,omitempty"`
	TcpNonSynFirstPktDrop         bool                `protobuf:"varint,86,opt,name=tcp_non_syn_first_pkt_drop,json=tcpNonSynFirstPktDrop" json:"tcp_non_syn_first_pkt_drop,omitempty"`
	// We will check for the following cases for invalid TCP flags
	// 1. SYN + FIN
	// 2. SYN + RST
	// 3. All TCP flags set (tcp_flags = 0xFF)
	// 4. No TCP flags set (tcp_flags = 0x0)
	TcpInvalidFlagsDrop         bool `protobuf:"varint,87,opt,name=tcp_invalid_flags_drop,json=tcpInvalidFlagsDrop" json:"tcp_invalid_flags_drop,omitempty"`
	TcpNonsynNoackDrop          bool `protobuf:"varint,88,opt,name=tcp_nonsyn_noack_drop,json=tcpNonsynNoackDrop" json:"tcp_nonsyn_noack_drop,omitempty"`
	TcpSynWithDataDrop          bool `protobuf:"varint,89,opt,name=tcp_syn_with_data_drop,json=tcpSynWithDataDrop" json:"tcp_syn_with_data_drop,omitempty"`
	TcpSynAckWithDataDrop       bool `protobuf:"varint,90,opt,name=tcp_syn_ack_with_data_drop,json=tcpSynAckWithDataDrop" json:"tcp_syn_ack_with_data_drop,omitempty"`
	TcpOverlappingSegmentsDrop  bool `protobuf:"varint,91,opt,name=tcp_overlapping_segments_drop,json=tcpOverlappingSegmentsDrop" json:"tcp_overlapping_segments_drop,omitempty"`
	TcpStripTimestampOption     bool `protobuf:"varint,92,opt,name=tcp_strip_timestamp_option,json=tcpStripTimestampOption" json:"tcp_strip_timestamp_option,omitempty"`
	TcpConnTrackBypassWindowErr bool `protobuf:"varint,93,opt,name=tcp_conn_track_bypass_window_err,json=tcpConnTrackBypassWindowErr" json:"tcp_conn_track_bypass_window_err,omitempty"`
	TcpConnTrackFinRstDisable   bool `protobuf:"varint,94,opt,name=tcp_conn_track_fin_rst_disable,json=tcpConnTrackFinRstDisable" json:"tcp_conn_track_fin_rst_disable,omitempty"`
	TcpUrgFlagPtrClear          bool `protobuf:"varint,95,opt,name=tcp_urg_flag_ptr_clear,json=tcpUrgFlagPtrClear" json:"tcp_urg_flag_ptr_clear,omitempty"`
	// Can we have zero as default but when configured the range is between 576 - 9216 ?
	TcpNormalizeMss  uint32 `protobuf:"varint,96,opt,name=tcp_normalize_mss,json=tcpNormalizeMss" json:"tcp_normalize_mss,omitempty"`
	MulticastSrcDrop bool   `protobuf:"varint,101,opt,name=multicast_src_drop,json=multicastSrcDrop" json:"multicast_src_drop,omitempty"`
}

func (m *SecurityProfileSpec) Reset()                    { *m = SecurityProfileSpec{} }
func (m *SecurityProfileSpec) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileSpec) ProtoMessage()               {}
func (*SecurityProfileSpec) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{0} }

func (m *SecurityProfileSpec) GetKeyOrHandle() *SecurityProfileKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *SecurityProfileSpec) GetSessionIdleTimeout() uint32 {
	if m != nil {
		return m.SessionIdleTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetTcpCnxnSetupTimeout() uint32 {
	if m != nil {
		return m.TcpCnxnSetupTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetTcpCloseTimeout() uint32 {
	if m != nil {
		return m.TcpCloseTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetTcpHalfClosedTimeout() uint32 {
	if m != nil {
		return m.TcpHalfClosedTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetIpNormalizeTtl() uint32 {
	if m != nil {
		return m.IpNormalizeTtl
	}
	return 0
}

func (m *SecurityProfileSpec) GetTcpDropTimeout() uint32 {
	if m != nil {
		return m.TcpDropTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetUdpDropTimeout() uint32 {
	if m != nil {
		return m.UdpDropTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetIcmpDropTimeout() uint32 {
	if m != nil {
		return m.IcmpDropTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetDropTimeout() uint32 {
	if m != nil {
		return m.DropTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetTcpTimeout() uint32 {
	if m != nil {
		return m.TcpTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetUdpTimeout() uint32 {
	if m != nil {
		return m.UdpTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetIcmpTimeout() uint32 {
	if m != nil {
		return m.IcmpTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetCnxnTrackingEn() bool {
	if m != nil {
		return m.CnxnTrackingEn
	}
	return false
}

func (m *SecurityProfileSpec) GetIpsgEn() bool {
	if m != nil {
		return m.IpsgEn
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpRttEstimateEn() bool {
	if m != nil {
		return m.TcpRttEstimateEn
	}
	return false
}

func (m *SecurityProfileSpec) GetIpNormalizationEn() bool {
	if m != nil {
		return m.IpNormalizationEn
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpNormalizationEn() bool {
	if m != nil {
		return m.TcpNormalizationEn
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpNormalizationEn() bool {
	if m != nil {
		return m.IcmpNormalizationEn
	}
	return false
}

func (m *SecurityProfileSpec) GetIpReassemblyEn() bool {
	if m != nil {
		return m.IpReassemblyEn
	}
	return false
}

func (m *SecurityProfileSpec) GetIpTtlChangeDetectEn() bool {
	if m != nil {
		return m.IpTtlChangeDetectEn
	}
	return false
}

func (m *SecurityProfileSpec) GetIpSrcGuardEn() bool {
	if m != nil {
		return m.IpSrcGuardEn
	}
	return false
}

func (m *SecurityProfileSpec) GetIpRsvdFlagsAction() NormalizationAction {
	if m != nil {
		return m.IpRsvdFlagsAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIpDfAction() NormalizationAction {
	if m != nil {
		return m.IpDfAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIpOptionsAction() NormalizationAction {
	if m != nil {
		return m.IpOptionsAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIpInvalidLenAction() NormalizationAction {
	if m != nil {
		return m.IpInvalidLenAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIpSpoofPktDrop() bool {
	if m != nil {
		return m.IpSpoofPktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIpLooseSrcRoutingPktDrop() bool {
	if m != nil {
		return m.IpLooseSrcRoutingPktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIpMalformedOptionPktDrop() bool {
	if m != nil {
		return m.IpMalformedOptionPktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIpRecordRouteOptionPktDrop() bool {
	if m != nil {
		return m.IpRecordRouteOptionPktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIpStrictSrcRoutingPktDrop() bool {
	if m != nil {
		return m.IpStrictSrcRoutingPktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIpTsOptionPktDrop() bool {
	if m != nil {
		return m.IpTsOptionPktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIpUnknownOptionPktDrop() bool {
	if m != nil {
		return m.IpUnknownOptionPktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIpStreamIdOptionPktDrop() bool {
	if m != nil {
		return m.IpStreamIdOptionPktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIpRsvdFldSetPktDrop() bool {
	if m != nil {
		return m.IpRsvdFldSetPktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIpClearDfBit() bool {
	if m != nil {
		return m.IpClearDfBit
	}
	return false
}

func (m *SecurityProfileSpec) GetIpv6AnycastSrcDrop() bool {
	if m != nil {
		return m.Ipv6AnycastSrcDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIpv6V4CompatibleAddrDrop() bool {
	if m != nil {
		return m.Ipv6V4CompatibleAddrDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIpv6NeedlessIpFragHdrDrop() bool {
	if m != nil {
		return m.Ipv6NeedlessIpFragHdrDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIpv6InvalidOptionsPktDrop() bool {
	if m != nil {
		return m.Ipv6InvalidOptionsPktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIpv6RsvdFldSetPktDrop() bool {
	if m != nil {
		return m.Ipv6RsvdFldSetPktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIpv6RtgHdrPktDrop() bool {
	if m != nil {
		return m.Ipv6RtgHdrPktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIpv6DstOptionsHdrPktDrop() bool {
	if m != nil {
		return m.Ipv6DstOptionsHdrPktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIpv6HopByHopOptionsPktDrop() bool {
	if m != nil {
		return m.Ipv6HopByHopOptionsPktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpInvalidCodeAction() NormalizationAction {
	if m != nil {
		return m.IcmpInvalidCodeAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIcmpDeprecatedMsgsDrop() bool {
	if m != nil {
		return m.IcmpDeprecatedMsgsDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpRedirectMsgDrop() bool {
	if m != nil {
		return m.IcmpRedirectMsgDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpDstUnreachIgnorePayload() bool {
	if m != nil {
		return m.IcmpDstUnreachIgnorePayload
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpParamPrblmIgnorePayload() bool {
	if m != nil {
		return m.IcmpParamPrblmIgnorePayload
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpPktTooBigIgnorePayload() bool {
	if m != nil {
		return m.IcmpPktTooBigIgnorePayload
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpRedirectIgnorePayload() bool {
	if m != nil {
		return m.IcmpRedirectIgnorePayload
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpTimeExceedIgnorePayload() bool {
	if m != nil {
		return m.IcmpTimeExceedIgnorePayload
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpErrorDrop() bool {
	if m != nil {
		return m.IcmpErrorDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpFragmentsDrop() bool {
	if m != nil {
		return m.IcmpFragmentsDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpLargePktDrop() bool {
	if m != nil {
		return m.IcmpLargePktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpPingZeroIdDrop() bool {
	if m != nil {
		return m.IcmpPingZeroIdDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpNeedFragSuppress() bool {
	if m != nil {
		return m.IcmpNeedFragSuppress
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpTimeExceedSuppress() bool {
	if m != nil {
		return m.IcmpTimeExceedSuppress
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpv6LargeMsgMtuSmallDrop() bool {
	if m != nil {
		return m.Icmpv6LargeMsgMtuSmallDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpSplitHandshakeDrop() bool {
	if m != nil {
		return m.TcpSplitHandshakeDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpRsvdFlagsAction() NormalizationAction {
	if m != nil {
		return m.TcpRsvdFlagsAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUnexpectedMssAction() NormalizationAction {
	if m != nil {
		return m.TcpUnexpectedMssAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUnexpectedWinScaleAction() NormalizationAction {
	if m != nil {
		return m.TcpUnexpectedWinScaleAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUnexpectedSackPermAction() NormalizationAction {
	if m != nil {
		return m.TcpUnexpectedSackPermAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUrgPtrNotSetAction() NormalizationAction {
	if m != nil {
		return m.TcpUrgPtrNotSetAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUrgFlagNotSetAction() NormalizationAction {
	if m != nil {
		return m.TcpUrgFlagNotSetAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUrgPayloadMissingAction() NormalizationAction {
	if m != nil {
		return m.TcpUrgPayloadMissingAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpRstWithDataAction() NormalizationAction {
	if m != nil {
		return m.TcpRstWithDataAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpDataLenGtMssAction() NormalizationAction {
	if m != nil {
		return m.TcpDataLenGtMssAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpDataLenGtWinSizeAction() NormalizationAction {
	if m != nil {
		return m.TcpDataLenGtWinSizeAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUnexpectedTsOptionAction() NormalizationAction {
	if m != nil {
		return m.TcpUnexpectedTsOptionAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUnexpectedEchoTsAction() NormalizationAction {
	if m != nil {
		return m.TcpUnexpectedEchoTsAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUnexpectedSackOptionAction() NormalizationAction {
	if m != nil {
		return m.TcpUnexpectedSackOptionAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpTsNotPresentDrop() bool {
	if m != nil {
		return m.TcpTsNotPresentDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpNonSynFirstPktDrop() bool {
	if m != nil {
		return m.TcpNonSynFirstPktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpInvalidFlagsDrop() bool {
	if m != nil {
		return m.TcpInvalidFlagsDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpNonsynNoackDrop() bool {
	if m != nil {
		return m.TcpNonsynNoackDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpSynWithDataDrop() bool {
	if m != nil {
		return m.TcpSynWithDataDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpSynAckWithDataDrop() bool {
	if m != nil {
		return m.TcpSynAckWithDataDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpOverlappingSegmentsDrop() bool {
	if m != nil {
		return m.TcpOverlappingSegmentsDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpStripTimestampOption() bool {
	if m != nil {
		return m.TcpStripTimestampOption
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpConnTrackBypassWindowErr() bool {
	if m != nil {
		return m.TcpConnTrackBypassWindowErr
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpConnTrackFinRstDisable() bool {
	if m != nil {
		return m.TcpConnTrackFinRstDisable
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpUrgFlagPtrClear() bool {
	if m != nil {
		return m.TcpUrgFlagPtrClear
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpNormalizeMss() uint32 {
	if m != nil {
		return m.TcpNormalizeMss
	}
	return 0
}

func (m *SecurityProfileSpec) GetMulticastSrcDrop() bool {
	if m != nil {
		return m.MulticastSrcDrop
	}
	return false
}

// SecurityProfileRequestMsg is batched add or modify profile request
type SecurityProfileRequestMsg struct {
	Request []*SecurityProfileSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityProfileRequestMsg) Reset()                    { *m = SecurityProfileRequestMsg{} }
func (m *SecurityProfileRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileRequestMsg) ProtoMessage()               {}
func (*SecurityProfileRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{1} }

func (m *SecurityProfileRequestMsg) GetRequest() []*SecurityProfileSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// Security profile oper state for enterprise pipeline
type SecurityProfileStatusEpd struct {
	HwSecProfileId uint32 `protobuf:"varint,1,opt,name=hw_sec_profile_id,json=hwSecProfileId" json:"hw_sec_profile_id,omitempty"`
}

func (m *SecurityProfileStatusEpd) Reset()                    { *m = SecurityProfileStatusEpd{} }
func (m *SecurityProfileStatusEpd) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileStatusEpd) ProtoMessage()               {}
func (*SecurityProfileStatusEpd) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{2} }

func (m *SecurityProfileStatusEpd) GetHwSecProfileId() uint32 {
	if m != nil {
		return m.HwSecProfileId
	}
	return 0
}

// Security profile oper state for cloud pipeline
type SecurityProfileStatusCpd struct {
}

func (m *SecurityProfileStatusCpd) Reset()                    { *m = SecurityProfileStatusCpd{} }
func (m *SecurityProfileStatusCpd) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileStatusCpd) ProtoMessage()               {}
func (*SecurityProfileStatusCpd) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{3} }

// SecurityProfile operational status
type SecurityProfileStatus struct {
	ProfileHandle uint64 `protobuf:"fixed64,1,opt,name=profile_handle,json=profileHandle" json:"profile_handle,omitempty"`
	// Types that are valid to be assigned to ProfilePdStatus:
	//	*SecurityProfileStatus_EpdStatus
	//	*SecurityProfileStatus_CpdStatus
	ProfilePdStatus isSecurityProfileStatus_ProfilePdStatus `protobuf_oneof:"profile_pd_status"`
}

func (m *SecurityProfileStatus) Reset()                    { *m = SecurityProfileStatus{} }
func (m *SecurityProfileStatus) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileStatus) ProtoMessage()               {}
func (*SecurityProfileStatus) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{4} }

type isSecurityProfileStatus_ProfilePdStatus interface{ isSecurityProfileStatus_ProfilePdStatus() }

type SecurityProfileStatus_EpdStatus struct {
	EpdStatus *SecurityProfileStatusEpd `protobuf:"bytes,2,opt,name=epd_status,json=epdStatus,oneof"`
}
type SecurityProfileStatus_CpdStatus struct {
	CpdStatus *SecurityProfileStatusCpd `protobuf:"bytes,3,opt,name=cpd_status,json=cpdStatus,oneof"`
}

func (*SecurityProfileStatus_EpdStatus) isSecurityProfileStatus_ProfilePdStatus() {}
func (*SecurityProfileStatus_CpdStatus) isSecurityProfileStatus_ProfilePdStatus() {}

func (m *SecurityProfileStatus) GetProfilePdStatus() isSecurityProfileStatus_ProfilePdStatus {
	if m != nil {
		return m.ProfilePdStatus
	}
	return nil
}

func (m *SecurityProfileStatus) GetProfileHandle() uint64 {
	if m != nil {
		return m.ProfileHandle
	}
	return 0
}

func (m *SecurityProfileStatus) GetEpdStatus() *SecurityProfileStatusEpd {
	if x, ok := m.GetProfilePdStatus().(*SecurityProfileStatus_EpdStatus); ok {
		return x.EpdStatus
	}
	return nil
}

func (m *SecurityProfileStatus) GetCpdStatus() *SecurityProfileStatusCpd {
	if x, ok := m.GetProfilePdStatus().(*SecurityProfileStatus_CpdStatus); ok {
		return x.CpdStatus
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SecurityProfileStatus) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SecurityProfileStatus_OneofMarshaler, _SecurityProfileStatus_OneofUnmarshaler, _SecurityProfileStatus_OneofSizer, []interface{}{
		(*SecurityProfileStatus_EpdStatus)(nil),
		(*SecurityProfileStatus_CpdStatus)(nil),
	}
}

func _SecurityProfileStatus_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SecurityProfileStatus)
	// profile_pd_status
	switch x := m.ProfilePdStatus.(type) {
	case *SecurityProfileStatus_EpdStatus:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EpdStatus); err != nil {
			return err
		}
	case *SecurityProfileStatus_CpdStatus:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CpdStatus); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SecurityProfileStatus.ProfilePdStatus has unexpected type %T", x)
	}
	return nil
}

func _SecurityProfileStatus_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SecurityProfileStatus)
	switch tag {
	case 2: // profile_pd_status.epd_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SecurityProfileStatusEpd)
		err := b.DecodeMessage(msg)
		m.ProfilePdStatus = &SecurityProfileStatus_EpdStatus{msg}
		return true, err
	case 3: // profile_pd_status.cpd_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SecurityProfileStatusCpd)
		err := b.DecodeMessage(msg)
		m.ProfilePdStatus = &SecurityProfileStatus_CpdStatus{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SecurityProfileStatus_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SecurityProfileStatus)
	// profile_pd_status
	switch x := m.ProfilePdStatus.(type) {
	case *SecurityProfileStatus_EpdStatus:
		s := proto.Size(x.EpdStatus)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SecurityProfileStatus_CpdStatus:
		s := proto.Size(x.CpdStatus)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// SecurityProfileResponse is response to SecurityProfileSpec
type SecurityProfileResponse struct {
	ApiStatus     ApiStatus              `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	ProfileStatus *SecurityProfileStatus `protobuf:"bytes,2,opt,name=profile_status,json=profileStatus" json:"profile_status,omitempty"`
}

func (m *SecurityProfileResponse) Reset()                    { *m = SecurityProfileResponse{} }
func (m *SecurityProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileResponse) ProtoMessage()               {}
func (*SecurityProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{5} }

func (m *SecurityProfileResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SecurityProfileResponse) GetProfileStatus() *SecurityProfileStatus {
	if m != nil {
		return m.ProfileStatus
	}
	return nil
}

// SecurityProfileResponseMsg is batched response to SecurityProfileRequestMsg
type SecurityProfileResponseMsg struct {
	Response []*SecurityProfileResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityProfileResponseMsg) Reset()                    { *m = SecurityProfileResponseMsg{} }
func (m *SecurityProfileResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileResponseMsg) ProtoMessage()               {}
func (*SecurityProfileResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{6} }

func (m *SecurityProfileResponseMsg) GetResponse() []*SecurityProfileResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SecurityProfileDeleteRequest is used to delete a SecurityProfile profile
type SecurityProfileDeleteRequest struct {
	// key_or_handle is to identify SecurityProfile being deleted
	KeyOrHandle *SecurityProfileKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *SecurityProfileDeleteRequest) Reset()                    { *m = SecurityProfileDeleteRequest{} }
func (m *SecurityProfileDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileDeleteRequest) ProtoMessage()               {}
func (*SecurityProfileDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{7} }

func (m *SecurityProfileDeleteRequest) GetKeyOrHandle() *SecurityProfileKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// SecurityProfileDeleteRequestMsg is used to delete a batch of SecurityProfile profiles
type SecurityProfileDeleteRequestMsg struct {
	Request []*SecurityProfileDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityProfileDeleteRequestMsg) Reset()         { *m = SecurityProfileDeleteRequestMsg{} }
func (m *SecurityProfileDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*SecurityProfileDeleteRequestMsg) ProtoMessage()    {}
func (*SecurityProfileDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor22, []int{8}
}

func (m *SecurityProfileDeleteRequestMsg) GetRequest() []*SecurityProfileDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SecurityProfileResponse is response to SecurityProfileSpec
type SecurityProfileDeleteResponse struct {
	ApiStatus     ApiStatus              `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	ProfileStatus *SecurityProfileStatus `protobuf:"bytes,2,opt,name=profile_status,json=profileStatus" json:"profile_status,omitempty"`
}

func (m *SecurityProfileDeleteResponse) Reset()                    { *m = SecurityProfileDeleteResponse{} }
func (m *SecurityProfileDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileDeleteResponse) ProtoMessage()               {}
func (*SecurityProfileDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{9} }

func (m *SecurityProfileDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SecurityProfileDeleteResponse) GetProfileStatus() *SecurityProfileStatus {
	if m != nil {
		return m.ProfileStatus
	}
	return nil
}

// SecurityProfileDeleteResponseMsg is batched response to SecurityProfileDeleteRequestMsg
type SecurityProfileDeleteResponseMsg struct {
	Response []*SecurityProfileDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityProfileDeleteResponseMsg) Reset()         { *m = SecurityProfileDeleteResponseMsg{} }
func (m *SecurityProfileDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*SecurityProfileDeleteResponseMsg) ProtoMessage()    {}
func (*SecurityProfileDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor22, []int{10}
}

func (m *SecurityProfileDeleteResponseMsg) GetResponse() []*SecurityProfileDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SecurityProfileGetRequest is used to get information about a L2 Segment
type SecurityProfileGetRequest struct {
	// key_or_handle is the security profile's identifier for retrieval
	KeyOrHandle *SecurityProfileKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *SecurityProfileGetRequest) Reset()                    { *m = SecurityProfileGetRequest{} }
func (m *SecurityProfileGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileGetRequest) ProtoMessage()               {}
func (*SecurityProfileGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{11} }

func (m *SecurityProfileGetRequest) GetKeyOrHandle() *SecurityProfileKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// SecurityProfileGetRequestMsg is batched GET request for SecurityProfile profiles
type SecurityProfileGetRequestMsg struct {
	Request []*SecurityProfileGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityProfileGetRequestMsg) Reset()                    { *m = SecurityProfileGetRequestMsg{} }
func (m *SecurityProfileGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileGetRequestMsg) ProtoMessage()               {}
func (*SecurityProfileGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{12} }

func (m *SecurityProfileGetRequestMsg) GetRequest() []*SecurityProfileGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SecurityProfileStats is the statistics object for each SecurityProfile profile
type SecurityProfileStats struct {
}

func (m *SecurityProfileStats) Reset()                    { *m = SecurityProfileStats{} }
func (m *SecurityProfileStats) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileStats) ProtoMessage()               {}
func (*SecurityProfileStats) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{13} }

// SecurityProfileGetResponse captures all the information about a SecurityProfile profile
type SecurityProfileGetResponse struct {
	ApiStatus ApiStatus              `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *SecurityProfileSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *SecurityProfileStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *SecurityProfileStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *SecurityProfileGetResponse) Reset()                    { *m = SecurityProfileGetResponse{} }
func (m *SecurityProfileGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileGetResponse) ProtoMessage()               {}
func (*SecurityProfileGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{14} }

func (m *SecurityProfileGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SecurityProfileGetResponse) GetSpec() *SecurityProfileSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *SecurityProfileGetResponse) GetStatus() *SecurityProfileStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SecurityProfileGetResponse) GetStats() *SecurityProfileStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// SecurityProfileGetResponseMsg is the batched response to SecurityProfileGetRequestMsg
type SecurityProfileGetResponseMsg struct {
	Response []*SecurityProfileGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityProfileGetResponseMsg) Reset()                    { *m = SecurityProfileGetResponseMsg{} }
func (m *SecurityProfileGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileGetResponseMsg) ProtoMessage()               {}
func (*SecurityProfileGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{15} }

func (m *SecurityProfileGetResponseMsg) GetResponse() []*SecurityProfileGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Service object identifies an app defined by IP protocol and TCP/UDP port
// in most cases. This object also can specify blanket apps like all TCP or
// UDP traffic, all IP traffic, ICMP type/code combinations etc.
type Service struct {
	IpProtocol IPProtocol `protobuf:"varint,1,opt,name=ip_protocol,json=ipProtocol,enum=types.IPProtocol" json:"ip_protocol,omitempty"`
	// Types that are valid to be assigned to L4Info:
	//	*Service_DstPort
	//	*Service_IcmpMsgType
	L4Info isService_L4Info `protobuf_oneof:"l4_info"`
	Alg    ALGName          `protobuf:"varint,4,opt,name=alg,enum=nwsec.ALGName" json:"alg,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{16} }

type isService_L4Info interface{ isService_L4Info() }

type Service_DstPort struct {
	DstPort uint32 `protobuf:"varint,2,opt,name=dst_port,json=dstPort,oneof"`
}
type Service_IcmpMsgType struct {
	IcmpMsgType ICMPMsgType `protobuf:"varint,3,opt,name=icmp_msg_type,json=icmpMsgType,enum=types.ICMPMsgType,oneof"`
}

func (*Service_DstPort) isService_L4Info()     {}
func (*Service_IcmpMsgType) isService_L4Info() {}

func (m *Service) GetL4Info() isService_L4Info {
	if m != nil {
		return m.L4Info
	}
	return nil
}

func (m *Service) GetIpProtocol() IPProtocol {
	if m != nil {
		return m.IpProtocol
	}
	return IPProtocol_IPPROTO_NONE
}

func (m *Service) GetDstPort() uint32 {
	if x, ok := m.GetL4Info().(*Service_DstPort); ok {
		return x.DstPort
	}
	return 0
}

func (m *Service) GetIcmpMsgType() ICMPMsgType {
	if x, ok := m.GetL4Info().(*Service_IcmpMsgType); ok {
		return x.IcmpMsgType
	}
	return ICMPMsgType_ICMP_MSG_TYPE_NONE
}

func (m *Service) GetAlg() ALGName {
	if m != nil {
		return m.Alg
	}
	return ALGName_APP_SVC_NONE
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Service) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Service_OneofMarshaler, _Service_OneofUnmarshaler, _Service_OneofSizer, []interface{}{
		(*Service_DstPort)(nil),
		(*Service_IcmpMsgType)(nil),
	}
}

func _Service_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Service)
	// l4_info
	switch x := m.L4Info.(type) {
	case *Service_DstPort:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.DstPort))
	case *Service_IcmpMsgType:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IcmpMsgType))
	case nil:
	default:
		return fmt.Errorf("Service.L4Info has unexpected type %T", x)
	}
	return nil
}

func _Service_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Service)
	switch tag {
	case 2: // l4_info.dst_port
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.L4Info = &Service_DstPort{uint32(x)}
		return true, err
	case 3: // l4_info.icmp_msg_type
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.L4Info = &Service_IcmpMsgType{ICMPMsgType(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Service_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Service)
	// l4_info
	switch x := m.L4Info.(type) {
	case *Service_DstPort:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.DstPort))
	case *Service_IcmpMsgType:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IcmpMsgType))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// FirewallRuleSpec defines a stateful firewall rule that is part of a
// SecurityGroupSpec
type FirewallRuleSpec struct {
	Svc    []*Service     `protobuf:"bytes,2,rep,name=svc" json:"svc,omitempty"`
	Apps   []string       `protobuf:"bytes,3,rep,name=apps" json:"apps,omitempty"`
	Action FirewallAction `protobuf:"varint,4,opt,name=action,enum=nwsec.FirewallAction" json:"action,omitempty"`
	Log    bool           `protobuf:"varint,5,opt,name=log" json:"log,omitempty"`
}

func (m *FirewallRuleSpec) Reset()                    { *m = FirewallRuleSpec{} }
func (m *FirewallRuleSpec) String() string            { return proto.CompactTextString(m) }
func (*FirewallRuleSpec) ProtoMessage()               {}
func (*FirewallRuleSpec) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{17} }

func (m *FirewallRuleSpec) GetSvc() []*Service {
	if m != nil {
		return m.Svc
	}
	return nil
}

func (m *FirewallRuleSpec) GetApps() []string {
	if m != nil {
		return m.Apps
	}
	return nil
}

func (m *FirewallRuleSpec) GetAction() FirewallAction {
	if m != nil {
		return m.Action
	}
	return FirewallAction_FIREWALL_ACTION_NONE
}

func (m *FirewallRuleSpec) GetLog() bool {
	if m != nil {
		return m.Log
	}
	return false
}

// ingress policy for the security group
type SGPolicy struct {
	InFwRules []*FirewallRuleSpec `protobuf:"bytes,1,rep,name=in_fw_rules,json=inFwRules" json:"in_fw_rules,omitempty"`
	EgFwRules []*FirewallRuleSpec `protobuf:"bytes,2,rep,name=eg_fw_rules,json=egFwRules" json:"eg_fw_rules,omitempty"`
}

func (m *SGPolicy) Reset()                    { *m = SGPolicy{} }
func (m *SGPolicy) String() string            { return proto.CompactTextString(m) }
func (*SGPolicy) ProtoMessage()               {}
func (*SGPolicy) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{18} }

func (m *SGPolicy) GetInFwRules() []*FirewallRuleSpec {
	if m != nil {
		return m.InFwRules
	}
	return nil
}

func (m *SGPolicy) GetEgFwRules() []*FirewallRuleSpec {
	if m != nil {
		return m.EgFwRules
	}
	return nil
}

// SecurityGroupPolicySpec captures the policy for a security group pair (aka. group of
// endpoints or enic interfaces) in both directions from workload's perspective.
// This policy will be attached to enic interface or an endpoint so it applies
// to the traffic from/to that workload. If no match is found for the new
// session in the slow path, either a drop flow will be installed or packet will
// be dropped without creating drop flow
type SecurityGroupPolicySpec struct {
	// key_or_handle is the security group's unique identifier
	KeyOrHandle *SecurityGroupPolicyKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	PolicyRules *SGPolicy                     `protobuf:"bytes,2,opt,name=policy_rules,json=policyRules" json:"policy_rules,omitempty"`
}

func (m *SecurityGroupPolicySpec) Reset()                    { *m = SecurityGroupPolicySpec{} }
func (m *SecurityGroupPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupPolicySpec) ProtoMessage()               {}
func (*SecurityGroupPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{19} }

func (m *SecurityGroupPolicySpec) GetKeyOrHandle() *SecurityGroupPolicyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *SecurityGroupPolicySpec) GetPolicyRules() *SGPolicy {
	if m != nil {
		return m.PolicyRules
	}
	return nil
}

// SecurityGroupPolicyRequestMsg is batched add or modify security group policy request
type SecurityGroupPolicyRequestMsg struct {
	Request []*SecurityGroupPolicySpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityGroupPolicyRequestMsg) Reset()                    { *m = SecurityGroupPolicyRequestMsg{} }
func (m *SecurityGroupPolicyRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupPolicyRequestMsg) ProtoMessage()               {}
func (*SecurityGroupPolicyRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{20} }

func (m *SecurityGroupPolicyRequestMsg) GetRequest() []*SecurityGroupPolicySpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// security group operational status
type SecurityGroupPolicyStatus struct {
	PolicyHandle uint64 `protobuf:"fixed64,1,opt,name=policy_handle,json=policyHandle" json:"policy_handle,omitempty"`
}

func (m *SecurityGroupPolicyStatus) Reset()                    { *m = SecurityGroupPolicyStatus{} }
func (m *SecurityGroupPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupPolicyStatus) ProtoMessage()               {}
func (*SecurityGroupPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{21} }

func (m *SecurityGroupPolicyStatus) GetPolicyHandle() uint64 {
	if m != nil {
		return m.PolicyHandle
	}
	return 0
}

// SecurityGroupResponse is the response to SecurityGroupPolicySpec
type SecurityGroupPolicyResponse struct {
	ApiStatus ApiStatus                  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *SecurityGroupPolicyStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *SecurityGroupPolicyResponse) Reset()                    { *m = SecurityGroupPolicyResponse{} }
func (m *SecurityGroupPolicyResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupPolicyResponse) ProtoMessage()               {}
func (*SecurityGroupPolicyResponse) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{22} }

func (m *SecurityGroupPolicyResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SecurityGroupPolicyResponse) GetStatus() *SecurityGroupPolicyStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// SecurityGroupResponseMsg is batched response to SecurityGroupPolicyRequestMsg
type SecurityGroupPolicyResponseMsg struct {
	Response []*SecurityGroupPolicyResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityGroupPolicyResponseMsg) Reset()         { *m = SecurityGroupPolicyResponseMsg{} }
func (m *SecurityGroupPolicyResponseMsg) String() string { return proto.CompactTextString(m) }
func (*SecurityGroupPolicyResponseMsg) ProtoMessage()    {}
func (*SecurityGroupPolicyResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor22, []int{23}
}

func (m *SecurityGroupPolicyResponseMsg) GetResponse() []*SecurityGroupPolicyResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SecurityGroupPolicyDeleteRequest is used to delete a security group policy
type SecurityGroupPolicyDeleteRequest struct {
	// key_or_handle is the security group's unique identifier
	KeyOrHandle *SecurityGroupPolicyKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *SecurityGroupPolicyDeleteRequest) Reset()         { *m = SecurityGroupPolicyDeleteRequest{} }
func (m *SecurityGroupPolicyDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*SecurityGroupPolicyDeleteRequest) ProtoMessage()    {}
func (*SecurityGroupPolicyDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor22, []int{24}
}

func (m *SecurityGroupPolicyDeleteRequest) GetKeyOrHandle() *SecurityGroupPolicyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// SecurityGroupDeleteRequestMsg is used to delete a batch of security group policies.
type SecurityGroupPolicyDeleteRequestMsg struct {
	Request []*SecurityGroupPolicyDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityGroupPolicyDeleteRequestMsg) Reset()         { *m = SecurityGroupPolicyDeleteRequestMsg{} }
func (m *SecurityGroupPolicyDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*SecurityGroupPolicyDeleteRequestMsg) ProtoMessage()    {}
func (*SecurityGroupPolicyDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor22, []int{25}
}

func (m *SecurityGroupPolicyDeleteRequestMsg) GetRequest() []*SecurityGroupPolicyDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type SecurityGroupPolicyDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *SecurityGroupPolicyDeleteResponse) Reset()         { *m = SecurityGroupPolicyDeleteResponse{} }
func (m *SecurityGroupPolicyDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*SecurityGroupPolicyDeleteResponse) ProtoMessage()    {}
func (*SecurityGroupPolicyDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor22, []int{26}
}

func (m *SecurityGroupPolicyDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// SecurityGroupPolicyDeleteResponseMsg is batched response to
// SecurityGroupPolicyDeleteRequestMsg
type SecurityGroupPolicyDeleteResponseMsg struct {
	Response []*SecurityGroupPolicyDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityGroupPolicyDeleteResponseMsg) Reset()         { *m = SecurityGroupPolicyDeleteResponseMsg{} }
func (m *SecurityGroupPolicyDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*SecurityGroupPolicyDeleteResponseMsg) ProtoMessage()    {}
func (*SecurityGroupPolicyDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor22, []int{27}
}

func (m *SecurityGroupPolicyDeleteResponseMsg) GetResponse() []*SecurityGroupPolicyDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SecurityGroupPolicyGetRequest is used to get information about a security group policy
type SecurityGroupPolicyGetRequest struct {
	// key_or_handle is the security group's unique identifier
	KeyOrHandle *SecurityGroupPolicyKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *SecurityGroupPolicyGetRequest) Reset()                    { *m = SecurityGroupPolicyGetRequest{} }
func (m *SecurityGroupPolicyGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupPolicyGetRequest) ProtoMessage()               {}
func (*SecurityGroupPolicyGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{28} }

func (m *SecurityGroupPolicyGetRequest) GetKeyOrHandle() *SecurityGroupPolicyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// SecurityGroupGetRequestMsg is batched GET request for security group policies
type SecurityGroupPolicyGetRequestMsg struct {
	Request []*SecurityGroupPolicyGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityGroupPolicyGetRequestMsg) Reset()         { *m = SecurityGroupPolicyGetRequestMsg{} }
func (m *SecurityGroupPolicyGetRequestMsg) String() string { return proto.CompactTextString(m) }
func (*SecurityGroupPolicyGetRequestMsg) ProtoMessage()    {}
func (*SecurityGroupPolicyGetRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor22, []int{29}
}

func (m *SecurityGroupPolicyGetRequestMsg) GetRequest() []*SecurityGroupPolicyGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SecurityGroupStats is the statistics object for a security group
type SecurityGroupPolicyStats struct {
}

func (m *SecurityGroupPolicyStats) Reset()                    { *m = SecurityGroupPolicyStats{} }
func (m *SecurityGroupPolicyStats) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupPolicyStats) ProtoMessage()               {}
func (*SecurityGroupPolicyStats) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{30} }

// SecurityGroupGetResponse captures all the information about a security group
type SecurityGroupPolicyGetResponse struct {
	ApiStatus ApiStatus                  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *SecurityGroupPolicySpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *SecurityGroupPolicyStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *SecurityGroupPolicyStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *SecurityGroupPolicyGetResponse) Reset()         { *m = SecurityGroupPolicyGetResponse{} }
func (m *SecurityGroupPolicyGetResponse) String() string { return proto.CompactTextString(m) }
func (*SecurityGroupPolicyGetResponse) ProtoMessage()    {}
func (*SecurityGroupPolicyGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor22, []int{31}
}

func (m *SecurityGroupPolicyGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SecurityGroupPolicyGetResponse) GetSpec() *SecurityGroupPolicySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *SecurityGroupPolicyGetResponse) GetStatus() *SecurityGroupPolicyStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SecurityGroupPolicyGetResponse) GetStats() *SecurityGroupPolicyStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// SecurityGroupPolicyGetResponseMsg is batched response to SecurityGroupGetRequestMsg
type SecurityGroupPolicyGetResponseMsg struct {
	Response  []*SecurityGroupPolicyGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
	ApiStatus ApiStatus                         `protobuf:"varint,2,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *SecurityGroupPolicyGetResponseMsg) Reset()         { *m = SecurityGroupPolicyGetResponseMsg{} }
func (m *SecurityGroupPolicyGetResponseMsg) String() string { return proto.CompactTextString(m) }
func (*SecurityGroupPolicyGetResponseMsg) ProtoMessage()    {}
func (*SecurityGroupPolicyGetResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor22, []int{32}
}

func (m *SecurityGroupPolicyGetResponseMsg) GetResponse() []*SecurityGroupPolicyGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *SecurityGroupPolicyGetResponseMsg) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type SecurityGroupSpec struct {
	Meta *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	// key_or_handle is the security group's unique identifier
	KeyOrHandle *SecurityGroupKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *SecurityGroupSpec) GetDelphiMessage() proto.Message {
	return m
}

func (m *SecurityGroupSpec) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *SecurityGroupSpec) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *SecurityGroupSpec) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *SecurityGroupSpec) GetDelphiKind() string {
	return "SecurityGroupSpec"
}

func (m *SecurityGroupSpec) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *SecurityGroupSpec) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*SecurityGroupSpec)
	return obj
}

func SecurityGroupSpecMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("SecurityGroupSpec", mode)
}

func SecurityGroupSpecMountKey(client clientApi.Client, key *SecurityGroupKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("SecurityGroupSpec", key.String(), mode)
}

func GetSecurityGroupSpec(client clientApi.Client, key *SecurityGroupKeyHandle) *SecurityGroupSpec {
	o := client.GetObject("SecurityGroupSpec", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*SecurityGroupSpec)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func (m *SecurityGroupSpec) IsPersistent() bool {
	return false
}
func SecurityGroupSpecFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg SecurityGroupSpec
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func SecurityGroupSpecWatch(client clientApi.Client, reactor SecurityGroupSpecReactor) {
	client.WatchKind("SecurityGroupSpec", reactor)
}
func SecurityGroupSpecList(client clientApi.Client) []*SecurityGroupSpec {
	bobjs := client.List("SecurityGroupSpec")
	objs := make([]*SecurityGroupSpec, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*SecurityGroupSpec)
		objs = append(objs, obj)
	}
	return objs
}
func (m *SecurityGroupSpec) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(SecurityGroupSpecReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnSecurityGroupSpecCreate(m)
			} else {
				oldObj, ok := old.(*SecurityGroupSpec)
				if ok == false {
					panic("Not an SecurityGroupSpec object")
				}
				rctr.OnSecurityGroupSpecUpdate(oldObj, m)
			}
		} else {
			rctr.OnSecurityGroupSpecDelete(m)
		}
	}
}

type SecurityGroupSpecReactor interface {
	OnSecurityGroupSpecCreate(obj *SecurityGroupSpec)
	OnSecurityGroupSpecUpdate(old *SecurityGroupSpec, obj *SecurityGroupSpec)
	OnSecurityGroupSpecDelete(obj *SecurityGroupSpec)
}

func (m *SecurityGroupSpec) Reset()                    { *m = SecurityGroupSpec{} }
func (m *SecurityGroupSpec) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupSpec) ProtoMessage()               {}
func (*SecurityGroupSpec) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{33} }

func (m *SecurityGroupSpec) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SecurityGroupSpec) GetKeyOrHandle() *SecurityGroupKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// SecurityGroupRequestMsg is batched add or modify security group policy request
type SecurityGroupRequestMsg struct {
	Request []*SecurityGroupSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityGroupRequestMsg) Reset()                    { *m = SecurityGroupRequestMsg{} }
func (m *SecurityGroupRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupRequestMsg) ProtoMessage()               {}
func (*SecurityGroupRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{34} }

func (m *SecurityGroupRequestMsg) GetRequest() []*SecurityGroupSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// security group operational status
type SecurityGroupStatus struct {
	Meta        *delphi.ObjectMeta      `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle *SecurityGroupKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *SecurityGroupStatus) GetDelphiMessage() proto.Message {
	return m
}

func (m *SecurityGroupStatus) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *SecurityGroupStatus) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *SecurityGroupStatus) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *SecurityGroupStatus) GetDelphiKind() string {
	return "SecurityGroupStatus"
}

func (m *SecurityGroupStatus) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *SecurityGroupStatus) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*SecurityGroupStatus)
	return obj
}

func SecurityGroupStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("SecurityGroupStatus", mode)
}

func SecurityGroupStatusMountKey(client clientApi.Client, key *SecurityGroupKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("SecurityGroupStatus", key.String(), mode)
}

func GetSecurityGroupStatus(client clientApi.Client, key *SecurityGroupKeyHandle) *SecurityGroupStatus {
	o := client.GetObject("SecurityGroupStatus", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*SecurityGroupStatus)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func (m *SecurityGroupStatus) IsPersistent() bool {
	return false
}
func SecurityGroupStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg SecurityGroupStatus
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func SecurityGroupStatusWatch(client clientApi.Client, reactor SecurityGroupStatusReactor) {
	client.WatchKind("SecurityGroupStatus", reactor)
}
func SecurityGroupStatusList(client clientApi.Client) []*SecurityGroupStatus {
	bobjs := client.List("SecurityGroupStatus")
	objs := make([]*SecurityGroupStatus, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*SecurityGroupStatus)
		objs = append(objs, obj)
	}
	return objs
}
func (m *SecurityGroupStatus) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(SecurityGroupStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnSecurityGroupStatusCreate(m)
			} else {
				oldObj, ok := old.(*SecurityGroupStatus)
				if ok == false {
					panic("Not an SecurityGroupStatus object")
				}
				rctr.OnSecurityGroupStatusUpdate(oldObj, m)
			}
		} else {
			rctr.OnSecurityGroupStatusDelete(m)
		}
	}
}

type SecurityGroupStatusReactor interface {
	OnSecurityGroupStatusCreate(obj *SecurityGroupStatus)
	OnSecurityGroupStatusUpdate(old *SecurityGroupStatus, obj *SecurityGroupStatus)
	OnSecurityGroupStatusDelete(obj *SecurityGroupStatus)
}

func (m *SecurityGroupStatus) Reset()                    { *m = SecurityGroupStatus{} }
func (m *SecurityGroupStatus) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupStatus) ProtoMessage()               {}
func (*SecurityGroupStatus) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{35} }

func (m *SecurityGroupStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SecurityGroupStatus) GetKeyOrHandle() *SecurityGroupKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// SecurityGroupResponse is the response to SecurityGroupSpec
type SecurityGroupResponse struct {
	ApiStatus ApiStatus            `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *SecurityGroupStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *SecurityGroupResponse) Reset()                    { *m = SecurityGroupResponse{} }
func (m *SecurityGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupResponse) ProtoMessage()               {}
func (*SecurityGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{36} }

func (m *SecurityGroupResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SecurityGroupResponse) GetStatus() *SecurityGroupStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// SecurityGroupResponseMsg is batched response to SecurityGroupRequestMsg
type SecurityGroupResponseMsg struct {
	Response []*SecurityGroupResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityGroupResponseMsg) Reset()                    { *m = SecurityGroupResponseMsg{} }
func (m *SecurityGroupResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupResponseMsg) ProtoMessage()               {}
func (*SecurityGroupResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{37} }

func (m *SecurityGroupResponseMsg) GetResponse() []*SecurityGroupResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SecurityGroupDeleteRequest is used to delete a security group
type SecurityGroupDeleteRequest struct {
	// key_or_handle is the security group's unique identifier
	KeyOrHandle *SecurityGroupKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *SecurityGroupDeleteRequest) Reset()                    { *m = SecurityGroupDeleteRequest{} }
func (m *SecurityGroupDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupDeleteRequest) ProtoMessage()               {}
func (*SecurityGroupDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{38} }

func (m *SecurityGroupDeleteRequest) GetKeyOrHandle() *SecurityGroupKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// SecurityGroupDeleteRequestMsg is used to delete a batch of security groups
type SecurityGroupDeleteRequestMsg struct {
	Request []*SecurityGroupDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityGroupDeleteRequestMsg) Reset()                    { *m = SecurityGroupDeleteRequestMsg{} }
func (m *SecurityGroupDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupDeleteRequestMsg) ProtoMessage()               {}
func (*SecurityGroupDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{39} }

func (m *SecurityGroupDeleteRequestMsg) GetRequest() []*SecurityGroupDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SecurityGroupDeleteResponseMsg is batched response to
// SecurityGroupDeleteRequestMsg
type SecurityGroupDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *SecurityGroupDeleteResponseMsg) Reset()         { *m = SecurityGroupDeleteResponseMsg{} }
func (m *SecurityGroupDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*SecurityGroupDeleteResponseMsg) ProtoMessage()    {}
func (*SecurityGroupDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor22, []int{40}
}

func (m *SecurityGroupDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// SecurityGroupGetRequest is used to get information about a security group
type SecurityGroupGetRequest struct {
	// key_or_handle is the security group's unique identifier
	KeyOrHandle *SecurityGroupKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *SecurityGroupGetRequest) Reset()                    { *m = SecurityGroupGetRequest{} }
func (m *SecurityGroupGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupGetRequest) ProtoMessage()               {}
func (*SecurityGroupGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{41} }

func (m *SecurityGroupGetRequest) GetKeyOrHandle() *SecurityGroupKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// SecurityGroupGetRequestMsg is batched GET request for security groups
type SecurityGroupGetRequestMsg struct {
	Request []*SecurityGroupGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityGroupGetRequestMsg) Reset()                    { *m = SecurityGroupGetRequestMsg{} }
func (m *SecurityGroupGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupGetRequestMsg) ProtoMessage()               {}
func (*SecurityGroupGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{42} }

func (m *SecurityGroupGetRequestMsg) GetRequest() []*SecurityGroupGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SecurityGroupStats is the statistics object for a security group
type SecurityGroupStats struct {
}

func (m *SecurityGroupStats) Reset()                    { *m = SecurityGroupStats{} }
func (m *SecurityGroupStats) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupStats) ProtoMessage()               {}
func (*SecurityGroupStats) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{43} }

// SecurityGroupGetResponse captures all the information about a security group
type SecurityGroupGetResponse struct {
	ApiStatus ApiStatus            `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *SecurityGroupSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *SecurityGroupStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *SecurityGroupStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *SecurityGroupGetResponse) Reset()                    { *m = SecurityGroupGetResponse{} }
func (m *SecurityGroupGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupGetResponse) ProtoMessage()               {}
func (*SecurityGroupGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{44} }

func (m *SecurityGroupGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SecurityGroupGetResponse) GetSpec() *SecurityGroupSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *SecurityGroupGetResponse) GetStatus() *SecurityGroupStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SecurityGroupGetResponse) GetStats() *SecurityGroupStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// SecurityGroupGetResponseMsg is batched response to SecurityGroupGetRequestMsg
type SecurityGroupGetResponseMsg struct {
	Response  []*SecurityGroupGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
	ApiStatus ApiStatus                   `protobuf:"varint,2,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *SecurityGroupGetResponseMsg) Reset()                    { *m = SecurityGroupGetResponseMsg{} }
func (m *SecurityGroupGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupGetResponseMsg) ProtoMessage()               {}
func (*SecurityGroupGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{45} }

func (m *SecurityGroupGetResponseMsg) GetResponse() []*SecurityGroupGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *SecurityGroupGetResponseMsg) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// AppData- identifies app data specific to security plugin
type AppData struct {
	Alg ALGName `protobuf:"varint,1,opt,name=alg,enum=nwsec.ALGName" json:"alg,omitempty"`
	// Types that are valid to be assigned to AppOptions:
	//	*AppData_FtpOptionInfo
	//	*AppData_DnsOptionInfo
	//	*AppData_MsrpcOptionInfo
	//	*AppData_SunRpcOptionInfo
	//	*AppData_SipOptions
	AppOptions  isAppData_AppOptions  `protobuf_oneof:"AppOptions"`
	IdleTimeout uint32                `protobuf:"varint,7,opt,name=idle_timeout,json=idleTimeout" json:"idle_timeout,omitempty"`
	TraceOpts   *AppData_TraceOptions `protobuf:"bytes,8,opt,name=trace_opts,json=traceOpts" json:"trace_opts,omitempty"`
}

func (m *AppData) Reset()                    { *m = AppData{} }
func (m *AppData) String() string            { return proto.CompactTextString(m) }
func (*AppData) ProtoMessage()               {}
func (*AppData) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{46} }

type isAppData_AppOptions interface{ isAppData_AppOptions() }

type AppData_FtpOptionInfo struct {
	FtpOptionInfo *AppData_FTPOptions `protobuf:"bytes,2,opt,name=ftp_option_info,json=ftpOptionInfo,oneof"`
}
type AppData_DnsOptionInfo struct {
	DnsOptionInfo *AppData_DNSOptions `protobuf:"bytes,3,opt,name=dns_option_info,json=dnsOptionInfo,oneof"`
}
type AppData_MsrpcOptionInfo struct {
	MsrpcOptionInfo *AppData_MSRPCOptions `protobuf:"bytes,4,opt,name=msrpc_option_info,json=msrpcOptionInfo,oneof"`
}
type AppData_SunRpcOptionInfo struct {
	SunRpcOptionInfo *AppData_SunRPCOptions `protobuf:"bytes,5,opt,name=sun_rpc_option_info,json=sunRpcOptionInfo,oneof"`
}
type AppData_SipOptions struct {
	SipOptions *AppData_SIPOptions `protobuf:"bytes,6,opt,name=sip_options,json=sipOptions,oneof"`
}

func (*AppData_FtpOptionInfo) isAppData_AppOptions()    {}
func (*AppData_DnsOptionInfo) isAppData_AppOptions()    {}
func (*AppData_MsrpcOptionInfo) isAppData_AppOptions()  {}
func (*AppData_SunRpcOptionInfo) isAppData_AppOptions() {}
func (*AppData_SipOptions) isAppData_AppOptions()       {}

func (m *AppData) GetAppOptions() isAppData_AppOptions {
	if m != nil {
		return m.AppOptions
	}
	return nil
}

func (m *AppData) GetAlg() ALGName {
	if m != nil {
		return m.Alg
	}
	return ALGName_APP_SVC_NONE
}

func (m *AppData) GetFtpOptionInfo() *AppData_FTPOptions {
	if x, ok := m.GetAppOptions().(*AppData_FtpOptionInfo); ok {
		return x.FtpOptionInfo
	}
	return nil
}

func (m *AppData) GetDnsOptionInfo() *AppData_DNSOptions {
	if x, ok := m.GetAppOptions().(*AppData_DnsOptionInfo); ok {
		return x.DnsOptionInfo
	}
	return nil
}

func (m *AppData) GetMsrpcOptionInfo() *AppData_MSRPCOptions {
	if x, ok := m.GetAppOptions().(*AppData_MsrpcOptionInfo); ok {
		return x.MsrpcOptionInfo
	}
	return nil
}

func (m *AppData) GetSunRpcOptionInfo() *AppData_SunRPCOptions {
	if x, ok := m.GetAppOptions().(*AppData_SunRpcOptionInfo); ok {
		return x.SunRpcOptionInfo
	}
	return nil
}

func (m *AppData) GetSipOptions() *AppData_SIPOptions {
	if x, ok := m.GetAppOptions().(*AppData_SipOptions); ok {
		return x.SipOptions
	}
	return nil
}

func (m *AppData) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *AppData) GetTraceOpts() *AppData_TraceOptions {
	if m != nil {
		return m.TraceOpts
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AppData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AppData_OneofMarshaler, _AppData_OneofUnmarshaler, _AppData_OneofSizer, []interface{}{
		(*AppData_FtpOptionInfo)(nil),
		(*AppData_DnsOptionInfo)(nil),
		(*AppData_MsrpcOptionInfo)(nil),
		(*AppData_SunRpcOptionInfo)(nil),
		(*AppData_SipOptions)(nil),
	}
}

func _AppData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AppData)
	// AppOptions
	switch x := m.AppOptions.(type) {
	case *AppData_FtpOptionInfo:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FtpOptionInfo); err != nil {
			return err
		}
	case *AppData_DnsOptionInfo:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DnsOptionInfo); err != nil {
			return err
		}
	case *AppData_MsrpcOptionInfo:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MsrpcOptionInfo); err != nil {
			return err
		}
	case *AppData_SunRpcOptionInfo:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SunRpcOptionInfo); err != nil {
			return err
		}
	case *AppData_SipOptions:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SipOptions); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AppData.AppOptions has unexpected type %T", x)
	}
	return nil
}

func _AppData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AppData)
	switch tag {
	case 2: // AppOptions.ftp_option_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AppData_FTPOptions)
		err := b.DecodeMessage(msg)
		m.AppOptions = &AppData_FtpOptionInfo{msg}
		return true, err
	case 3: // AppOptions.dns_option_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AppData_DNSOptions)
		err := b.DecodeMessage(msg)
		m.AppOptions = &AppData_DnsOptionInfo{msg}
		return true, err
	case 4: // AppOptions.msrpc_option_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AppData_MSRPCOptions)
		err := b.DecodeMessage(msg)
		m.AppOptions = &AppData_MsrpcOptionInfo{msg}
		return true, err
	case 5: // AppOptions.sun_rpc_option_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AppData_SunRPCOptions)
		err := b.DecodeMessage(msg)
		m.AppOptions = &AppData_SunRpcOptionInfo{msg}
		return true, err
	case 6: // AppOptions.sip_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AppData_SIPOptions)
		err := b.DecodeMessage(msg)
		m.AppOptions = &AppData_SipOptions{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AppData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AppData)
	// AppOptions
	switch x := m.AppOptions.(type) {
	case *AppData_FtpOptionInfo:
		s := proto.Size(x.FtpOptionInfo)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AppData_DnsOptionInfo:
		s := proto.Size(x.DnsOptionInfo)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AppData_MsrpcOptionInfo:
		s := proto.Size(x.MsrpcOptionInfo)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AppData_SunRpcOptionInfo:
		s := proto.Size(x.SunRpcOptionInfo)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AppData_SipOptions:
		s := proto.Size(x.SipOptions)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AppData_TraceOptions struct {
	Level AppData_TraceLevel `protobuf:"varint,1,opt,name=level,enum=nwsec.AppData_TraceLevel" json:"level,omitempty"`
}

func (m *AppData_TraceOptions) Reset()                    { *m = AppData_TraceOptions{} }
func (m *AppData_TraceOptions) String() string            { return proto.CompactTextString(m) }
func (*AppData_TraceOptions) ProtoMessage()               {}
func (*AppData_TraceOptions) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{46, 0} }

func (m *AppData_TraceOptions) GetLevel() AppData_TraceLevel {
	if m != nil {
		return m.Level
	}
	return AppData_TRACE_LEVEL_NONE
}

type AppData_FTPOptions struct {
	AllowMismatchIpAddress bool `protobuf:"varint,1,opt,name=allow_mismatch_ip_address,json=allowMismatchIpAddress" json:"allow_mismatch_ip_address,omitempty"`
}

func (m *AppData_FTPOptions) Reset()                    { *m = AppData_FTPOptions{} }
func (m *AppData_FTPOptions) String() string            { return proto.CompactTextString(m) }
func (*AppData_FTPOptions) ProtoMessage()               {}
func (*AppData_FTPOptions) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{46, 1} }

func (m *AppData_FTPOptions) GetAllowMismatchIpAddress() bool {
	if m != nil {
		return m.AllowMismatchIpAddress
	}
	return false
}

type AppData_DNSOptions struct {
	DropMultiQuestionPackets   bool   `protobuf:"varint,1,opt,name=drop_multi_question_packets,json=dropMultiQuestionPackets" json:"drop_multi_question_packets,omitempty"`
	DropLargeDomainNamePackets bool   `protobuf:"varint,2,opt,name=drop_large_domain_name_packets,json=dropLargeDomainNamePackets" json:"drop_large_domain_name_packets,omitempty"`
	DropLongLabelPackets       bool   `protobuf:"varint,3,opt,name=drop_long_label_packets,json=dropLongLabelPackets" json:"drop_long_label_packets,omitempty"`
	DropMultizonePackets       bool   `protobuf:"varint,4,opt,name=drop_multizone_packets,json=dropMultizonePackets" json:"drop_multizone_packets,omitempty"`
	MaxMsgLength               uint32 `protobuf:"varint,5,opt,name=max_msg_length,json=maxMsgLength" json:"max_msg_length,omitempty"`
	QueryResponseTimeout       uint32 `protobuf:"varint,6,opt,name=query_response_timeout,json=queryResponseTimeout" json:"query_response_timeout,omitempty"`
}

func (m *AppData_DNSOptions) Reset()                    { *m = AppData_DNSOptions{} }
func (m *AppData_DNSOptions) String() string            { return proto.CompactTextString(m) }
func (*AppData_DNSOptions) ProtoMessage()               {}
func (*AppData_DNSOptions) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{46, 2} }

func (m *AppData_DNSOptions) GetDropMultiQuestionPackets() bool {
	if m != nil {
		return m.DropMultiQuestionPackets
	}
	return false
}

func (m *AppData_DNSOptions) GetDropLargeDomainNamePackets() bool {
	if m != nil {
		return m.DropLargeDomainNamePackets
	}
	return false
}

func (m *AppData_DNSOptions) GetDropLongLabelPackets() bool {
	if m != nil {
		return m.DropLongLabelPackets
	}
	return false
}

func (m *AppData_DNSOptions) GetDropMultizonePackets() bool {
	if m != nil {
		return m.DropMultizonePackets
	}
	return false
}

func (m *AppData_DNSOptions) GetMaxMsgLength() uint32 {
	if m != nil {
		return m.MaxMsgLength
	}
	return 0
}

func (m *AppData_DNSOptions) GetQueryResponseTimeout() uint32 {
	if m != nil {
		return m.QueryResponseTimeout
	}
	return 0
}

type AppData_RPCData struct {
	ProgramId   string `protobuf:"bytes,1,opt,name=program_id,json=programId" json:"program_id,omitempty"`
	IdleTimeout uint32 `protobuf:"varint,2,opt,name=idle_timeout,json=idleTimeout" json:"idle_timeout,omitempty"`
}

func (m *AppData_RPCData) Reset()                    { *m = AppData_RPCData{} }
func (m *AppData_RPCData) String() string            { return proto.CompactTextString(m) }
func (*AppData_RPCData) ProtoMessage()               {}
func (*AppData_RPCData) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{46, 3} }

func (m *AppData_RPCData) GetProgramId() string {
	if m != nil {
		return m.ProgramId
	}
	return ""
}

func (m *AppData_RPCData) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

type AppData_MSRPCOptions struct {
	Data []*AppData_RPCData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *AppData_MSRPCOptions) Reset()                    { *m = AppData_MSRPCOptions{} }
func (m *AppData_MSRPCOptions) String() string            { return proto.CompactTextString(m) }
func (*AppData_MSRPCOptions) ProtoMessage()               {}
func (*AppData_MSRPCOptions) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{46, 4} }

func (m *AppData_MSRPCOptions) GetData() []*AppData_RPCData {
	if m != nil {
		return m.Data
	}
	return nil
}

type AppData_SunRPCOptions struct {
	Data []*AppData_RPCData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *AppData_SunRPCOptions) Reset()                    { *m = AppData_SunRPCOptions{} }
func (m *AppData_SunRPCOptions) String() string            { return proto.CompactTextString(m) }
func (*AppData_SunRPCOptions) ProtoMessage()               {}
func (*AppData_SunRPCOptions) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{46, 5} }

func (m *AppData_SunRPCOptions) GetData() []*AppData_RPCData {
	if m != nil {
		return m.Data
	}
	return nil
}

type AppData_SIPOptions struct {
	Ctimeout               uint32 `protobuf:"varint,1,opt,name=ctimeout" json:"ctimeout,omitempty"`
	DscpCodePoint          uint32 `protobuf:"varint,2,opt,name=dscp_code_point,json=dscpCodePoint" json:"dscp_code_point,omitempty"`
	MediaInactivityTimeout uint32 `protobuf:"varint,3,opt,name=media_inactivity_timeout,json=mediaInactivityTimeout" json:"media_inactivity_timeout,omitempty"`
	MaxCallDuration        uint32 `protobuf:"varint,4,opt,name=max_call_duration,json=maxCallDuration" json:"max_call_duration,omitempty"`
	T1TimerValue           uint32 `protobuf:"varint,5,opt,name=t1_timer_value,json=t1TimerValue" json:"t1_timer_value,omitempty"`
	T4TimerValue           uint32 `protobuf:"varint,6,opt,name=t4_timer_value,json=t4TimerValue" json:"t4_timer_value,omitempty"`
}

func (m *AppData_SIPOptions) Reset()                    { *m = AppData_SIPOptions{} }
func (m *AppData_SIPOptions) String() string            { return proto.CompactTextString(m) }
func (*AppData_SIPOptions) ProtoMessage()               {}
func (*AppData_SIPOptions) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{46, 6} }

func (m *AppData_SIPOptions) GetCtimeout() uint32 {
	if m != nil {
		return m.Ctimeout
	}
	return 0
}

func (m *AppData_SIPOptions) GetDscpCodePoint() uint32 {
	if m != nil {
		return m.DscpCodePoint
	}
	return 0
}

func (m *AppData_SIPOptions) GetMediaInactivityTimeout() uint32 {
	if m != nil {
		return m.MediaInactivityTimeout
	}
	return 0
}

func (m *AppData_SIPOptions) GetMaxCallDuration() uint32 {
	if m != nil {
		return m.MaxCallDuration
	}
	return 0
}

func (m *AppData_SIPOptions) GetT1TimerValue() uint32 {
	if m != nil {
		return m.T1TimerValue
	}
	return 0
}

func (m *AppData_SIPOptions) GetT4TimerValue() uint32 {
	if m != nil {
		return m.T4TimerValue
	}
	return 0
}

type SecurityRuleAction struct {
	SecAction SecurityAction `protobuf:"varint,1,opt,name=sec_action,json=secAction,enum=nwsec.SecurityAction" json:"sec_action,omitempty"`
	LogAction LogAction      `protobuf:"varint,2,opt,name=log_action,json=logAction,enum=nwsec.LogAction" json:"log_action,omitempty"`
	AppData   *AppData       `protobuf:"bytes,3,opt,name=app_data,json=appData" json:"app_data,omitempty"`
}

func (m *SecurityRuleAction) Reset()                    { *m = SecurityRuleAction{} }
func (m *SecurityRuleAction) String() string            { return proto.CompactTextString(m) }
func (*SecurityRuleAction) ProtoMessage()               {}
func (*SecurityRuleAction) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{47} }

func (m *SecurityRuleAction) GetSecAction() SecurityAction {
	if m != nil {
		return m.SecAction
	}
	return SecurityAction_SECURITY_RULE_ACTION_NONE
}

func (m *SecurityRuleAction) GetLogAction() LogAction {
	if m != nil {
		return m.LogAction
	}
	return LogAction_LOG_NONE
}

func (m *SecurityRuleAction) GetAppData() *AppData {
	if m != nil {
		return m.AppData
	}
	return nil
}

type SecurityRule struct {
	RuleId uint64              `protobuf:"varint,1,opt,name=rule_id,json=ruleId" json:"rule_id,omitempty"`
	Match  *RuleMatch          `protobuf:"bytes,2,opt,name=match" json:"match,omitempty"`
	Action *SecurityRuleAction `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`
	Appid  []string            `protobuf:"bytes,4,rep,name=appid" json:"appid,omitempty"`
}

func (m *SecurityRule) Reset()                    { *m = SecurityRule{} }
func (m *SecurityRule) String() string            { return proto.CompactTextString(m) }
func (*SecurityRule) ProtoMessage()               {}
func (*SecurityRule) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{48} }

func (m *SecurityRule) GetRuleId() uint64 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *SecurityRule) GetMatch() *RuleMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *SecurityRule) GetAction() *SecurityRuleAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *SecurityRule) GetAppid() []string {
	if m != nil {
		return m.Appid
	}
	return nil
}

// SecurityPolicySpec that contains set of SecurityRules
type SecurityPolicySpec struct {
	Meta        *delphi.ObjectMeta       `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle *SecurityPolicyKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Rule        []*SecurityRule          `protobuf:"bytes,3,rep,name=rule" json:"rule,omitempty"`
}

func (m *SecurityPolicySpec) GetDelphiMessage() proto.Message {
	return m
}

func (m *SecurityPolicySpec) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *SecurityPolicySpec) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *SecurityPolicySpec) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *SecurityPolicySpec) GetDelphiKind() string {
	return "SecurityPolicySpec"
}

func (m *SecurityPolicySpec) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *SecurityPolicySpec) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*SecurityPolicySpec)
	return obj
}

func SecurityPolicySpecMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("SecurityPolicySpec", mode)
}

func SecurityPolicySpecMountKey(client clientApi.Client, key *SecurityPolicyKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("SecurityPolicySpec", key.String(), mode)
}

func GetSecurityPolicySpec(client clientApi.Client, key *SecurityPolicyKeyHandle) *SecurityPolicySpec {
	o := client.GetObject("SecurityPolicySpec", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*SecurityPolicySpec)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func (m *SecurityPolicySpec) IsPersistent() bool {
	return false
}
func SecurityPolicySpecFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg SecurityPolicySpec
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func SecurityPolicySpecWatch(client clientApi.Client, reactor SecurityPolicySpecReactor) {
	client.WatchKind("SecurityPolicySpec", reactor)
}
func SecurityPolicySpecList(client clientApi.Client) []*SecurityPolicySpec {
	bobjs := client.List("SecurityPolicySpec")
	objs := make([]*SecurityPolicySpec, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*SecurityPolicySpec)
		objs = append(objs, obj)
	}
	return objs
}
func (m *SecurityPolicySpec) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(SecurityPolicySpecReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnSecurityPolicySpecCreate(m)
			} else {
				oldObj, ok := old.(*SecurityPolicySpec)
				if ok == false {
					panic("Not an SecurityPolicySpec object")
				}
				rctr.OnSecurityPolicySpecUpdate(oldObj, m)
			}
		} else {
			rctr.OnSecurityPolicySpecDelete(m)
		}
	}
}

type SecurityPolicySpecReactor interface {
	OnSecurityPolicySpecCreate(obj *SecurityPolicySpec)
	OnSecurityPolicySpecUpdate(old *SecurityPolicySpec, obj *SecurityPolicySpec)
	OnSecurityPolicySpecDelete(obj *SecurityPolicySpec)
}

func (m *SecurityPolicySpec) Reset()                    { *m = SecurityPolicySpec{} }
func (m *SecurityPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*SecurityPolicySpec) ProtoMessage()               {}
func (*SecurityPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{49} }

func (m *SecurityPolicySpec) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SecurityPolicySpec) GetKeyOrHandle() *SecurityPolicyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *SecurityPolicySpec) GetRule() []*SecurityRule {
	if m != nil {
		return m.Rule
	}
	return nil
}

// SecurityPolicyRequestMsg is batched add or modify security policy request
type SecurityPolicyRequestMsg struct {
	Request []*SecurityPolicySpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityPolicyRequestMsg) Reset()                    { *m = SecurityPolicyRequestMsg{} }
func (m *SecurityPolicyRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityPolicyRequestMsg) ProtoMessage()               {}
func (*SecurityPolicyRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{50} }

func (m *SecurityPolicyRequestMsg) GetRequest() []*SecurityPolicySpec {
	if m != nil {
		return m.Request
	}
	return nil
}

type SecurityRuleStatus struct {
	RuleId   uint64 `protobuf:"varint,1,opt,name=rule_id,json=ruleId" json:"rule_id,omitempty"`
	Priority uint64 `protobuf:"varint,2,opt,name=priority" json:"priority,omitempty"`
}

func (m *SecurityRuleStatus) Reset()                    { *m = SecurityRuleStatus{} }
func (m *SecurityRuleStatus) String() string            { return proto.CompactTextString(m) }
func (*SecurityRuleStatus) ProtoMessage()               {}
func (*SecurityRuleStatus) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{51} }

func (m *SecurityRuleStatus) GetRuleId() uint64 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *SecurityRuleStatus) GetPriority() uint64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type SecurityPolicyStatus struct {
	Meta        *delphi.ObjectMeta       `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle *SecurityPolicyKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	RuleStatus  []*SecurityRuleStatus    `protobuf:"bytes,3,rep,name=rule_status,json=ruleStatus" json:"rule_status,omitempty"`
}

func (m *SecurityPolicyStatus) GetDelphiMessage() proto.Message {
	return m
}

func (m *SecurityPolicyStatus) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *SecurityPolicyStatus) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *SecurityPolicyStatus) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *SecurityPolicyStatus) GetDelphiKind() string {
	return "SecurityPolicyStatus"
}

func (m *SecurityPolicyStatus) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *SecurityPolicyStatus) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*SecurityPolicyStatus)
	return obj
}

func SecurityPolicyStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("SecurityPolicyStatus", mode)
}

func SecurityPolicyStatusMountKey(client clientApi.Client, key *SecurityPolicyKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("SecurityPolicyStatus", key.String(), mode)
}

func GetSecurityPolicyStatus(client clientApi.Client, key *SecurityPolicyKeyHandle) *SecurityPolicyStatus {
	o := client.GetObject("SecurityPolicyStatus", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*SecurityPolicyStatus)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func (m *SecurityPolicyStatus) IsPersistent() bool {
	return false
}
func SecurityPolicyStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg SecurityPolicyStatus
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func SecurityPolicyStatusWatch(client clientApi.Client, reactor SecurityPolicyStatusReactor) {
	client.WatchKind("SecurityPolicyStatus", reactor)
}
func SecurityPolicyStatusList(client clientApi.Client) []*SecurityPolicyStatus {
	bobjs := client.List("SecurityPolicyStatus")
	objs := make([]*SecurityPolicyStatus, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*SecurityPolicyStatus)
		objs = append(objs, obj)
	}
	return objs
}
func (m *SecurityPolicyStatus) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(SecurityPolicyStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnSecurityPolicyStatusCreate(m)
			} else {
				oldObj, ok := old.(*SecurityPolicyStatus)
				if ok == false {
					panic("Not an SecurityPolicyStatus object")
				}
				rctr.OnSecurityPolicyStatusUpdate(oldObj, m)
			}
		} else {
			rctr.OnSecurityPolicyStatusDelete(m)
		}
	}
}

type SecurityPolicyStatusReactor interface {
	OnSecurityPolicyStatusCreate(obj *SecurityPolicyStatus)
	OnSecurityPolicyStatusUpdate(old *SecurityPolicyStatus, obj *SecurityPolicyStatus)
	OnSecurityPolicyStatusDelete(obj *SecurityPolicyStatus)
}

func (m *SecurityPolicyStatus) Reset()                    { *m = SecurityPolicyStatus{} }
func (m *SecurityPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*SecurityPolicyStatus) ProtoMessage()               {}
func (*SecurityPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{52} }

func (m *SecurityPolicyStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SecurityPolicyStatus) GetKeyOrHandle() *SecurityPolicyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *SecurityPolicyStatus) GetRuleStatus() []*SecurityRuleStatus {
	if m != nil {
		return m.RuleStatus
	}
	return nil
}

// SecurityPolicyResponse is the response to SecurityPolicyRequest
type SecurityPolicyResponse struct {
	ApiStatus    ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	PolicyStatus *SecurityPolicyStatus `protobuf:"bytes,2,opt,name=policy_status,json=policyStatus" json:"policy_status,omitempty"`
}

func (m *SecurityPolicyResponse) Reset()                    { *m = SecurityPolicyResponse{} }
func (m *SecurityPolicyResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityPolicyResponse) ProtoMessage()               {}
func (*SecurityPolicyResponse) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{53} }

func (m *SecurityPolicyResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SecurityPolicyResponse) GetPolicyStatus() *SecurityPolicyStatus {
	if m != nil {
		return m.PolicyStatus
	}
	return nil
}

type SecurityPolicyResponseMsg struct {
	Response []*SecurityPolicyResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityPolicyResponseMsg) Reset()                    { *m = SecurityPolicyResponseMsg{} }
func (m *SecurityPolicyResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityPolicyResponseMsg) ProtoMessage()               {}
func (*SecurityPolicyResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{54} }

func (m *SecurityPolicyResponseMsg) GetResponse() []*SecurityPolicyResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SecurityPolicyDeleteRequest is used to delete a security rule
type SecurityPolicyDeleteRequest struct {
	KeyOrHandle *SecurityPolicyKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *SecurityPolicyDeleteRequest) Reset()                    { *m = SecurityPolicyDeleteRequest{} }
func (m *SecurityPolicyDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*SecurityPolicyDeleteRequest) ProtoMessage()               {}
func (*SecurityPolicyDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{55} }

func (m *SecurityPolicyDeleteRequest) GetKeyOrHandle() *SecurityPolicyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// SecurityPolicyDeleteRequestMsg is used to delete a batch of security policy
type SecurityPolicyDeleteRequestMsg struct {
	Request []*SecurityPolicyDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityPolicyDeleteRequestMsg) Reset()         { *m = SecurityPolicyDeleteRequestMsg{} }
func (m *SecurityPolicyDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*SecurityPolicyDeleteRequestMsg) ProtoMessage()    {}
func (*SecurityPolicyDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor22, []int{56}
}

func (m *SecurityPolicyDeleteRequestMsg) GetRequest() []*SecurityPolicyDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type SecurityPolicyDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *SecurityPolicyDeleteResponse) Reset()                    { *m = SecurityPolicyDeleteResponse{} }
func (m *SecurityPolicyDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityPolicyDeleteResponse) ProtoMessage()               {}
func (*SecurityPolicyDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{57} }

func (m *SecurityPolicyDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// SecurityPolicyDeleteResponseMsg is batched response to SecurityPolicyDeleteRequestMsg
type SecurityPolicyDeleteResponseMsg struct {
	Response []*SecurityPolicyDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityPolicyDeleteResponseMsg) Reset()         { *m = SecurityPolicyDeleteResponseMsg{} }
func (m *SecurityPolicyDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*SecurityPolicyDeleteResponseMsg) ProtoMessage()    {}
func (*SecurityPolicyDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor22, []int{58}
}

func (m *SecurityPolicyDeleteResponseMsg) GetResponse() []*SecurityPolicyDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SecurityPolicyGet is used to get information about a security policy
type SecurityPolicyGetRequest struct {
	// key_or_handle is the security policy's unique identifier
	KeyOrHandle *SecurityPolicyKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *SecurityPolicyGetRequest) Reset()                    { *m = SecurityPolicyGetRequest{} }
func (m *SecurityPolicyGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SecurityPolicyGetRequest) ProtoMessage()               {}
func (*SecurityPolicyGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{59} }

func (m *SecurityPolicyGetRequest) GetKeyOrHandle() *SecurityPolicyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// SecurityPolicyGetRequestMsg is batched GET request for security policy
type SecurityPolicyGetRequestMsg struct {
	Request []*SecurityPolicyGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityPolicyGetRequestMsg) Reset()                    { *m = SecurityPolicyGetRequestMsg{} }
func (m *SecurityPolicyGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityPolicyGetRequestMsg) ProtoMessage()               {}
func (*SecurityPolicyGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{60} }

func (m *SecurityPolicyGetRequestMsg) GetRequest() []*SecurityPolicyGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SecurityRuleStats
type SecurityRuleStats struct {
	RuleId      uint64 `protobuf:"varint,1,opt,name=rule_id,json=ruleId" json:"rule_id,omitempty"`
	NumHits     uint64 `protobuf:"fixed64,2,opt,name=num_hits,json=numHits" json:"num_hits,omitempty"`
	NumTcpHits  uint64 `protobuf:"fixed64,3,opt,name=num_tcp_hits,json=numTcpHits" json:"num_tcp_hits,omitempty"`
	NumUdpHits  uint64 `protobuf:"fixed64,4,opt,name=num_udp_hits,json=numUdpHits" json:"num_udp_hits,omitempty"`
	NumIcmpHits uint64 `protobuf:"fixed64,5,opt,name=num_icmp_hits,json=numIcmpHits" json:"num_icmp_hits,omitempty"`
}

func (m *SecurityRuleStats) Reset()                    { *m = SecurityRuleStats{} }
func (m *SecurityRuleStats) String() string            { return proto.CompactTextString(m) }
func (*SecurityRuleStats) ProtoMessage()               {}
func (*SecurityRuleStats) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{61} }

func (m *SecurityRuleStats) GetRuleId() uint64 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *SecurityRuleStats) GetNumHits() uint64 {
	if m != nil {
		return m.NumHits
	}
	return 0
}

func (m *SecurityRuleStats) GetNumTcpHits() uint64 {
	if m != nil {
		return m.NumTcpHits
	}
	return 0
}

func (m *SecurityRuleStats) GetNumUdpHits() uint64 {
	if m != nil {
		return m.NumUdpHits
	}
	return 0
}

func (m *SecurityRuleStats) GetNumIcmpHits() uint64 {
	if m != nil {
		return m.NumIcmpHits
	}
	return 0
}

// SecurityPolicyStats
type SecurityPolicyStats struct {
	RuleStats []*SecurityRuleStats `protobuf:"bytes,1,rep,name=rule_stats,json=ruleStats" json:"rule_stats,omitempty"`
}

func (m *SecurityPolicyStats) Reset()                    { *m = SecurityPolicyStats{} }
func (m *SecurityPolicyStats) String() string            { return proto.CompactTextString(m) }
func (*SecurityPolicyStats) ProtoMessage()               {}
func (*SecurityPolicyStats) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{62} }

func (m *SecurityPolicyStats) GetRuleStats() []*SecurityRuleStats {
	if m != nil {
		return m.RuleStats
	}
	return nil
}

// only if api_status indicates success, other fields are valid
type SecurityPolicyGetResponse struct {
	ApiStatus ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *SecurityPolicySpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *SecurityPolicyStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	PolStats  *SecurityPolicyStats  `protobuf:"bytes,4,opt,name=pol_stats,json=polStats" json:"pol_stats,omitempty"`
}

func (m *SecurityPolicyGetResponse) Reset()                    { *m = SecurityPolicyGetResponse{} }
func (m *SecurityPolicyGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityPolicyGetResponse) ProtoMessage()               {}
func (*SecurityPolicyGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{63} }

func (m *SecurityPolicyGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SecurityPolicyGetResponse) GetSpec() *SecurityPolicySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *SecurityPolicyGetResponse) GetStatus() *SecurityPolicyStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SecurityPolicyGetResponse) GetPolStats() *SecurityPolicyStats {
	if m != nil {
		return m.PolStats
	}
	return nil
}

// SecurityPolicyGetResponse Msg is batched response to SecurityPolicyGetRequestMsg
type SecurityPolicyGetResponseMsg struct {
	Response []*SecurityPolicyGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityPolicyGetResponseMsg) Reset()                    { *m = SecurityPolicyGetResponseMsg{} }
func (m *SecurityPolicyGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityPolicyGetResponseMsg) ProtoMessage()               {}
func (*SecurityPolicyGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{64} }

func (m *SecurityPolicyGetResponseMsg) GetResponse() []*SecurityPolicyGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type SecurityFlowGateFilter struct {
	SrcIp   *IPAddress `protobuf:"bytes,1,opt,name=src_ip,json=srcIp" json:"src_ip,omitempty"`
	DstIp   *IPAddress `protobuf:"bytes,2,opt,name=dst_ip,json=dstIp" json:"dst_ip,omitempty"`
	SrcPort uint32     `protobuf:"varint,3,opt,name=src_port,json=srcPort" json:"src_port,omitempty"`
	DstPort uint32     `protobuf:"varint,4,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"`
	IpProto IPProtocol `protobuf:"varint,5,opt,name=ip_proto,json=ipProto,enum=types.IPProtocol" json:"ip_proto,omitempty"`
	VrfId   uint64     `protobuf:"fixed64,6,opt,name=vrf_id,json=vrfId" json:"vrf_id,omitempty"`
	Alg     ALGName    `protobuf:"varint,7,opt,name=alg,enum=nwsec.ALGName" json:"alg,omitempty"`
}

func (m *SecurityFlowGateFilter) Reset()                    { *m = SecurityFlowGateFilter{} }
func (m *SecurityFlowGateFilter) String() string            { return proto.CompactTextString(m) }
func (*SecurityFlowGateFilter) ProtoMessage()               {}
func (*SecurityFlowGateFilter) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{65} }

func (m *SecurityFlowGateFilter) GetSrcIp() *IPAddress {
	if m != nil {
		return m.SrcIp
	}
	return nil
}

func (m *SecurityFlowGateFilter) GetDstIp() *IPAddress {
	if m != nil {
		return m.DstIp
	}
	return nil
}

func (m *SecurityFlowGateFilter) GetSrcPort() uint32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *SecurityFlowGateFilter) GetDstPort() uint32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *SecurityFlowGateFilter) GetIpProto() IPProtocol {
	if m != nil {
		return m.IpProto
	}
	return IPProtocol_IPPROTO_NONE
}

func (m *SecurityFlowGateFilter) GetVrfId() uint64 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *SecurityFlowGateFilter) GetAlg() ALGName {
	if m != nil {
		return m.Alg
	}
	return ALGName_APP_SVC_NONE
}

type SecurityFlowGateGetRequest struct {
	Filter *SecurityFlowGateFilter `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
}

func (m *SecurityFlowGateGetRequest) Reset()                    { *m = SecurityFlowGateGetRequest{} }
func (m *SecurityFlowGateGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SecurityFlowGateGetRequest) ProtoMessage()               {}
func (*SecurityFlowGateGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{66} }

func (m *SecurityFlowGateGetRequest) GetFilter() *SecurityFlowGateFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type SecurityFlowGateGetRequestMsg struct {
	Request []*SecurityFlowGateGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityFlowGateGetRequestMsg) Reset()                    { *m = SecurityFlowGateGetRequestMsg{} }
func (m *SecurityFlowGateGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityFlowGateGetRequestMsg) ProtoMessage()               {}
func (*SecurityFlowGateGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{67} }

func (m *SecurityFlowGateGetRequestMsg) GetRequest() []*SecurityFlowGateGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type FlowGateKey struct {
	Direction FlowDirection `protobuf:"varint,1,opt,name=direction,enum=types.FlowDirection" json:"direction,omitempty"`
	SrcVrfId  uint64        `protobuf:"fixed64,2,opt,name=src_vrf_id,json=srcVrfId" json:"src_vrf_id,omitempty"`
	DstVrfId  uint64        `protobuf:"fixed64,3,opt,name=dst_vrf_id,json=dstVrfId" json:"dst_vrf_id,omitempty"`
	SrcIp     *IPAddress    `protobuf:"bytes,4,opt,name=src_ip,json=srcIp" json:"src_ip,omitempty"`
	DstIp     *IPAddress    `protobuf:"bytes,5,opt,name=dst_ip,json=dstIp" json:"dst_ip,omitempty"`
	IpProto   IPProtocol    `protobuf:"varint,6,opt,name=ip_proto,json=ipProto,enum=types.IPProtocol" json:"ip_proto,omitempty"`
	SrcPort   uint32        `protobuf:"varint,7,opt,name=src_port,json=srcPort" json:"src_port,omitempty"`
	DstPort   uint32        `protobuf:"varint,8,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"`
}

func (m *FlowGateKey) Reset()                    { *m = FlowGateKey{} }
func (m *FlowGateKey) String() string            { return proto.CompactTextString(m) }
func (*FlowGateKey) ProtoMessage()               {}
func (*FlowGateKey) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{68} }

func (m *FlowGateKey) GetDirection() FlowDirection {
	if m != nil {
		return m.Direction
	}
	return FlowDirection_FLOW_DIRECTION_NONE
}

func (m *FlowGateKey) GetSrcVrfId() uint64 {
	if m != nil {
		return m.SrcVrfId
	}
	return 0
}

func (m *FlowGateKey) GetDstVrfId() uint64 {
	if m != nil {
		return m.DstVrfId
	}
	return 0
}

func (m *FlowGateKey) GetSrcIp() *IPAddress {
	if m != nil {
		return m.SrcIp
	}
	return nil
}

func (m *FlowGateKey) GetDstIp() *IPAddress {
	if m != nil {
		return m.DstIp
	}
	return nil
}

func (m *FlowGateKey) GetIpProto() IPProtocol {
	if m != nil {
		return m.IpProto
	}
	return IPProtocol_IPPROTO_NONE
}

func (m *FlowGateKey) GetSrcPort() uint32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *FlowGateKey) GetDstPort() uint32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

type SecurityFlowGateGetResponse struct {
	ApiStatus    ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	FlowGateKey  *FlowGateKey `protobuf:"bytes,2,opt,name=flow_gate_key,json=flowGateKey" json:"flow_gate_key,omitempty"`
	Alg          ALGName      `protobuf:"varint,3,opt,name=alg,enum=nwsec.ALGName" json:"alg,omitempty"`
	DeleteMarked bool         `protobuf:"varint,4,opt,name=delete_marked,json=deleteMarked" json:"delete_marked,omitempty"`
	RefCount     uint32       `protobuf:"varint,5,opt,name=ref_count,json=refCount" json:"ref_count,omitempty"`
	TimeToAge    uint32       `protobuf:"varint,6,opt,name=time_to_age,json=timeToAge" json:"time_to_age,omitempty"`
}

func (m *SecurityFlowGateGetResponse) Reset()                    { *m = SecurityFlowGateGetResponse{} }
func (m *SecurityFlowGateGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityFlowGateGetResponse) ProtoMessage()               {}
func (*SecurityFlowGateGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{69} }

func (m *SecurityFlowGateGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SecurityFlowGateGetResponse) GetFlowGateKey() *FlowGateKey {
	if m != nil {
		return m.FlowGateKey
	}
	return nil
}

func (m *SecurityFlowGateGetResponse) GetAlg() ALGName {
	if m != nil {
		return m.Alg
	}
	return ALGName_APP_SVC_NONE
}

func (m *SecurityFlowGateGetResponse) GetDeleteMarked() bool {
	if m != nil {
		return m.DeleteMarked
	}
	return false
}

func (m *SecurityFlowGateGetResponse) GetRefCount() uint32 {
	if m != nil {
		return m.RefCount
	}
	return 0
}

func (m *SecurityFlowGateGetResponse) GetTimeToAge() uint32 {
	if m != nil {
		return m.TimeToAge
	}
	return 0
}

type SecurityFlowGateGetResponseMsg struct {
	ApiStatus ApiStatus                      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Response  []*SecurityFlowGateGetResponse `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityFlowGateGetResponseMsg) Reset()         { *m = SecurityFlowGateGetResponseMsg{} }
func (m *SecurityFlowGateGetResponseMsg) String() string { return proto.CompactTextString(m) }
func (*SecurityFlowGateGetResponseMsg) ProtoMessage()    {}
func (*SecurityFlowGateGetResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor22, []int{70}
}

func (m *SecurityFlowGateGetResponseMsg) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SecurityFlowGateGetResponseMsg) GetResponse() []*SecurityFlowGateGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type SecurityFlowGateDeleteRequest struct {
	Filter *SecurityFlowGateFilter `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
}

func (m *SecurityFlowGateDeleteRequest) Reset()                    { *m = SecurityFlowGateDeleteRequest{} }
func (m *SecurityFlowGateDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*SecurityFlowGateDeleteRequest) ProtoMessage()               {}
func (*SecurityFlowGateDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{71} }

func (m *SecurityFlowGateDeleteRequest) GetFilter() *SecurityFlowGateFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type SecurityFlowGateDeleteRequestMsg struct {
	Request []*SecurityFlowGateDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityFlowGateDeleteRequestMsg) Reset()         { *m = SecurityFlowGateDeleteRequestMsg{} }
func (m *SecurityFlowGateDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*SecurityFlowGateDeleteRequestMsg) ProtoMessage()    {}
func (*SecurityFlowGateDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor22, []int{72}
}

func (m *SecurityFlowGateDeleteRequestMsg) GetRequest() []*SecurityFlowGateDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type SecurityFlowGateDeleteResponseMsg struct {
}

func (m *SecurityFlowGateDeleteResponseMsg) Reset()         { *m = SecurityFlowGateDeleteResponseMsg{} }
func (m *SecurityFlowGateDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*SecurityFlowGateDeleteResponseMsg) ProtoMessage()    {}
func (*SecurityFlowGateDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor22, []int{73}
}

func init() {
	proto.RegisterType((*SecurityProfileSpec)(nil), "halproto.SecurityProfileSpec")
	proto.RegisterType((*SecurityProfileRequestMsg)(nil), "halproto.SecurityProfileRequestMsg")
	proto.RegisterType((*SecurityProfileStatusEpd)(nil), "halproto.SecurityProfileStatusEpd")
	proto.RegisterType((*SecurityProfileStatusCpd)(nil), "halproto.SecurityProfileStatusCpd")
	proto.RegisterType((*SecurityProfileStatus)(nil), "halproto.SecurityProfileStatus")
	proto.RegisterType((*SecurityProfileResponse)(nil), "halproto.SecurityProfileResponse")
	proto.RegisterType((*SecurityProfileResponseMsg)(nil), "halproto.SecurityProfileResponseMsg")
	proto.RegisterType((*SecurityProfileDeleteRequest)(nil), "halproto.SecurityProfileDeleteRequest")
	proto.RegisterType((*SecurityProfileDeleteRequestMsg)(nil), "halproto.SecurityProfileDeleteRequestMsg")
	proto.RegisterType((*SecurityProfileDeleteResponse)(nil), "halproto.SecurityProfileDeleteResponse")
	proto.RegisterType((*SecurityProfileDeleteResponseMsg)(nil), "halproto.SecurityProfileDeleteResponseMsg")
	proto.RegisterType((*SecurityProfileGetRequest)(nil), "halproto.SecurityProfileGetRequest")
	proto.RegisterType((*SecurityProfileGetRequestMsg)(nil), "halproto.SecurityProfileGetRequestMsg")
	proto.RegisterType((*SecurityProfileStats)(nil), "halproto.SecurityProfileStats")
	proto.RegisterType((*SecurityProfileGetResponse)(nil), "halproto.SecurityProfileGetResponse")
	proto.RegisterType((*SecurityProfileGetResponseMsg)(nil), "halproto.SecurityProfileGetResponseMsg")
	proto.RegisterType((*Service)(nil), "halproto.Service")
	proto.RegisterType((*FirewallRuleSpec)(nil), "halproto.FirewallRuleSpec")
	proto.RegisterType((*SGPolicy)(nil), "halproto.SGPolicy")
	proto.RegisterType((*SecurityGroupPolicySpec)(nil), "halproto.SecurityGroupPolicySpec")
	proto.RegisterType((*SecurityGroupPolicyRequestMsg)(nil), "halproto.SecurityGroupPolicyRequestMsg")
	proto.RegisterType((*SecurityGroupPolicyStatus)(nil), "halproto.SecurityGroupPolicyStatus")
	proto.RegisterType((*SecurityGroupPolicyResponse)(nil), "halproto.SecurityGroupPolicyResponse")
	proto.RegisterType((*SecurityGroupPolicyResponseMsg)(nil), "halproto.SecurityGroupPolicyResponseMsg")
	proto.RegisterType((*SecurityGroupPolicyDeleteRequest)(nil), "halproto.SecurityGroupPolicyDeleteRequest")
	proto.RegisterType((*SecurityGroupPolicyDeleteRequestMsg)(nil), "halproto.SecurityGroupPolicyDeleteRequestMsg")
	proto.RegisterType((*SecurityGroupPolicyDeleteResponse)(nil), "halproto.SecurityGroupPolicyDeleteResponse")
	proto.RegisterType((*SecurityGroupPolicyDeleteResponseMsg)(nil), "halproto.SecurityGroupPolicyDeleteResponseMsg")
	proto.RegisterType((*SecurityGroupPolicyGetRequest)(nil), "halproto.SecurityGroupPolicyGetRequest")
	proto.RegisterType((*SecurityGroupPolicyGetRequestMsg)(nil), "halproto.SecurityGroupPolicyGetRequestMsg")
	proto.RegisterType((*SecurityGroupPolicyStats)(nil), "halproto.SecurityGroupPolicyStats")
	proto.RegisterType((*SecurityGroupPolicyGetResponse)(nil), "halproto.SecurityGroupPolicyGetResponse")
	proto.RegisterType((*SecurityGroupPolicyGetResponseMsg)(nil), "halproto.SecurityGroupPolicyGetResponseMsg")
	clientApi.RegisterFactory("SecurityGroupSpec", SecurityGroupSpecFactory)
	proto.RegisterType((*SecurityGroupSpec)(nil), "halproto.SecurityGroupSpec")
	proto.RegisterType((*SecurityGroupRequestMsg)(nil), "halproto.SecurityGroupRequestMsg")
	clientApi.RegisterFactory("SecurityGroupStatus", SecurityGroupStatusFactory)
	proto.RegisterType((*SecurityGroupStatus)(nil), "halproto.SecurityGroupStatus")
	proto.RegisterType((*SecurityGroupResponse)(nil), "halproto.SecurityGroupResponse")
	proto.RegisterType((*SecurityGroupResponseMsg)(nil), "halproto.SecurityGroupResponseMsg")
	proto.RegisterType((*SecurityGroupDeleteRequest)(nil), "halproto.SecurityGroupDeleteRequest")
	proto.RegisterType((*SecurityGroupDeleteRequestMsg)(nil), "halproto.SecurityGroupDeleteRequestMsg")
	proto.RegisterType((*SecurityGroupDeleteResponseMsg)(nil), "halproto.SecurityGroupDeleteResponseMsg")
	proto.RegisterType((*SecurityGroupGetRequest)(nil), "halproto.SecurityGroupGetRequest")
	proto.RegisterType((*SecurityGroupGetRequestMsg)(nil), "halproto.SecurityGroupGetRequestMsg")
	proto.RegisterType((*SecurityGroupStats)(nil), "halproto.SecurityGroupStats")
	proto.RegisterType((*SecurityGroupGetResponse)(nil), "halproto.SecurityGroupGetResponse")
	proto.RegisterType((*SecurityGroupGetResponseMsg)(nil), "halproto.SecurityGroupGetResponseMsg")
	proto.RegisterType((*AppData)(nil), "halproto.AppData")
	proto.RegisterType((*AppData_TraceOptions)(nil), "halproto.AppData.TraceOptions")
	proto.RegisterType((*AppData_FTPOptions)(nil), "halproto.AppData.FTPOptions")
	proto.RegisterType((*AppData_DNSOptions)(nil), "halproto.AppData.DNSOptions")
	proto.RegisterType((*AppData_RPCData)(nil), "halproto.AppData.RPCData")
	proto.RegisterType((*AppData_MSRPCOptions)(nil), "halproto.AppData.MSRPCOptions")
	proto.RegisterType((*AppData_SunRPCOptions)(nil), "halproto.AppData.SunRPCOptions")
	proto.RegisterType((*AppData_SIPOptions)(nil), "halproto.AppData.SIPOptions")
	proto.RegisterType((*SecurityRuleAction)(nil), "halproto.SecurityRuleAction")
	proto.RegisterType((*SecurityRule)(nil), "halproto.SecurityRule")
	clientApi.RegisterFactory("SecurityPolicySpec", SecurityPolicySpecFactory)
	proto.RegisterType((*SecurityPolicySpec)(nil), "halproto.SecurityPolicySpec")
	proto.RegisterType((*SecurityPolicyRequestMsg)(nil), "halproto.SecurityPolicyRequestMsg")
	proto.RegisterType((*SecurityRuleStatus)(nil), "halproto.SecurityRuleStatus")
	clientApi.RegisterFactory("SecurityPolicyStatus", SecurityPolicyStatusFactory)
	proto.RegisterType((*SecurityPolicyStatus)(nil), "halproto.SecurityPolicyStatus")
	proto.RegisterType((*SecurityPolicyResponse)(nil), "halproto.SecurityPolicyResponse")
	proto.RegisterType((*SecurityPolicyResponseMsg)(nil), "halproto.SecurityPolicyResponseMsg")
	proto.RegisterType((*SecurityPolicyDeleteRequest)(nil), "halproto.SecurityPolicyDeleteRequest")
	proto.RegisterType((*SecurityPolicyDeleteRequestMsg)(nil), "halproto.SecurityPolicyDeleteRequestMsg")
	proto.RegisterType((*SecurityPolicyDeleteResponse)(nil), "halproto.SecurityPolicyDeleteResponse")
	proto.RegisterType((*SecurityPolicyDeleteResponseMsg)(nil), "halproto.SecurityPolicyDeleteResponseMsg")
	proto.RegisterType((*SecurityPolicyGetRequest)(nil), "halproto.SecurityPolicyGetRequest")
	proto.RegisterType((*SecurityPolicyGetRequestMsg)(nil), "halproto.SecurityPolicyGetRequestMsg")
	proto.RegisterType((*SecurityRuleStats)(nil), "halproto.SecurityRuleStats")
	proto.RegisterType((*SecurityPolicyStats)(nil), "halproto.SecurityPolicyStats")
	proto.RegisterType((*SecurityPolicyGetResponse)(nil), "halproto.SecurityPolicyGetResponse")
	proto.RegisterType((*SecurityPolicyGetResponseMsg)(nil), "halproto.SecurityPolicyGetResponseMsg")
	proto.RegisterType((*SecurityFlowGateFilter)(nil), "halproto.SecurityFlowGateFilter")
	proto.RegisterType((*SecurityFlowGateGetRequest)(nil), "halproto.SecurityFlowGateGetRequest")
	proto.RegisterType((*SecurityFlowGateGetRequestMsg)(nil), "halproto.SecurityFlowGateGetRequestMsg")
	proto.RegisterType((*FlowGateKey)(nil), "halproto.FlowGateKey")
	proto.RegisterType((*SecurityFlowGateGetResponse)(nil), "halproto.SecurityFlowGateGetResponse")
	proto.RegisterType((*SecurityFlowGateGetResponseMsg)(nil), "halproto.SecurityFlowGateGetResponseMsg")
	proto.RegisterType((*SecurityFlowGateDeleteRequest)(nil), "halproto.SecurityFlowGateDeleteRequest")
	proto.RegisterType((*SecurityFlowGateDeleteRequestMsg)(nil), "halproto.SecurityFlowGateDeleteRequestMsg")
	proto.RegisterType((*SecurityFlowGateDeleteResponseMsg)(nil), "halproto.SecurityFlowGateDeleteResponseMsg")
	proto.RegisterEnum("halproto.NormalizationAction", NormalizationAction_name, NormalizationAction_value)
	proto.RegisterEnum("halproto.ALGName", ALGName_name, ALGName_value)
	proto.RegisterEnum("halproto.FirewallAction", FirewallAction_name, FirewallAction_value)
	proto.RegisterEnum("halproto.SecurityAction", SecurityAction_name, SecurityAction_value)
	proto.RegisterEnum("halproto.LogAction", LogAction_name, LogAction_value)
	proto.RegisterEnum("halproto.AppData_TraceLevel", AppData_TraceLevel_name, AppData_TraceLevel_value)
}

func init() { proto.RegisterFile("nwsec.proto", fileDescriptor22) }

var fileDescriptor22 = []byte{
	// 5756 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x7c, 0x5b, 0x6f, 0x1b, 0x49,
	0x76, 0xbf, 0x29, 0xc9, 0xba, 0x1c, 0x5d, 0x4c, 0xb5, 0x65, 0x99, 0x92, 0x2f, 0x92, 0x69, 0x8f,
	0xc7, 0xeb, 0x1d, 0x7b, 0x64, 0xd9, 0xd6, 0xd8, 0x9e, 0x9b, 0x25, 0x8a, 0xb2, 0x39, 0x23, 0x52,
	0x9c, 0x26, 0x7d, 0x9b, 0xd9, 0x99, 0xde, 0x56, 0x77, 0x91, 0xea, 0x55, 0xb3, 0xbb, 0xb7, 0xab,
	0x48, 0x59, 0xf3, 0xdf, 0x87, 0xc5, 0x1f, 0x48, 0x82, 0xdc, 0x1e, 0x36, 0x9b, 0x60, 0x1f, 0x82,
	0x5c, 0x17, 0x58, 0x20, 0x40, 0x90, 0x00, 0xc9, 0x43, 0x5e, 0xf2, 0x92, 0x8f, 0x90, 0x97, 0x24,
	0x4f, 0xfa, 0x10, 0x02, 0xf2, 0x18, 0x20, 0xa8, 0xea, 0xaa, 0xbe, 0xb1, 0xc9, 0xe6, 0x4e, 0xa4,
	0x6c, 0x9e, 0xc4, 0xee, 0x3a, 0xe7, 0x57, 0xa7, 0xce, 0x39, 0x75, 0xea, 0x9c, 0xaa, 0x6a, 0xc1,
	0xa4, 0x75, 0x80, 0x91, 0x76, 0xd7, 0x71, 0x6d, 0x62, 0x4b, 0x67, 0xd9, 0xc3, 0xe2, 0x24, 0x39,
	0x74, 0x10, 0xf6, 0xde, 0x2d, 0x8e, 0xef, 0xef, 0xf1, 0x5f, 0x53, 0x3a, 0x32, 0x9d, 0x3d, 0xc3,
	0x7b, 0xca, 0x1f, 0x3f, 0x85, 0xf3, 0x35, 0xa4, 0xb5, 0x5d, 0x83, 0x1c, 0x56, 0x5d, 0xbb, 0x61,
	0x98, 0xa8, 0xe6, 0x20, 0x4d, 0xaa, 0xc2, 0xf4, 0x3e, 0x3a, 0x54, 0x6c, 0x57, 0xd9, 0x53, 0x2d,
	0xdd, 0x44, 0xb9, 0xcc, 0x72, 0xe6, 0xd6, 0xe4, 0xea, 0xe5, 0xbb, 0xfb, 0x7b, 0x77, 0x63, 0xf4,
	0x9f, 0xa3, 0xc3, 0xe7, 0x8c, 0x66, 0x63, 0xe6, 0xf8, 0x68, 0x09, 0x3a, 0xc8, 0x32, 0x34, 0xf4,
	0x64, 0x1f, 0x1d, 0xca, 0x93, 0xfb, 0xe8, 0x70, 0xc7, 0xf5, 0x1a, 0xa5, 0xd7, 0x30, 0x87, 0x11,
	0xc6, 0x86, 0x6d, 0x29, 0x86, 0x6e, 0x22, 0x85, 0x18, 0x2d, 0x64, 0xb7, 0x49, 0x6e, 0x68, 0x39,
	0x73, 0x6b, 0x7a, 0xe3, 0xe6, 0xf1, 0xd1, 0x52, 0xde, 0x55, 0xad, 0x26, 0x7a, 0x72, 0x7f, 0xe5,
	0xce, 0xbd, 0x0f, 0x56, 0x1f, 0xad, 0xac, 0xbc, 0xb7, 0xcc, 0xb1, 0x74, 0xd4, 0x50, 0xdb, 0x26,
	0xf9, 0xf8, 0xf1, 0x8a, 0x2c, 0x71, 0x8c, 0x92, 0x6e, 0xa2, 0xba, 0x87, 0x20, 0xbd, 0x84, 0x79,
	0xa2, 0x39, 0x8a, 0x66, 0xbd, 0xb5, 0x14, 0x8c, 0x48, 0xdb, 0xf1, 0xb1, 0x87, 0x19, 0xf6, 0xb5,
	0xe3, 0xa3, 0xa5, 0x2b, 0x1e, 0xf6, 0xbd, 0x3b, 0x6b, 0xdd, 0xb0, 0xf7, 0x57, 0xe4, 0xf3, 0x44,
	0x73, 0x0a, 0xd6, 0x5b, 0xab, 0x46, 0xd9, 0x05, 0x6e, 0x05, 0x66, 0x19, 0xae, 0x69, 0xe3, 0x40,
	0xdc, 0x11, 0x06, 0x99, 0x3f, 0x3e, 0x5a, 0xba, 0x2a, 0x20, 0xef, 0x27, 0x88, 0x7a, 0xef, 0xa1,
	0x7c, 0x8e, 0x62, 0x52, 0x5e, 0x81, 0xf7, 0x35, 0x5c, 0xa4, 0x78, 0x7b, 0xaa, 0xd9, 0xf0, 0x40,
	0x75, 0x1f, 0xf5, 0x6c, 0x5c, 0x09, 0xf7, 0x7a, 0xe9, 0xe0, 0xde, 0xea, 0x8a, 0x3c, 0x47, 0x34,
	0xe7, 0xb9, 0x6a, 0x36, 0x18, 0xba, 0x2e, 0xe0, 0x3f, 0x87, 0xac, 0xe1, 0x28, 0x96, 0xed, 0xb6,
	0x54, 0xd3, 0xf8, 0x16, 0x29, 0x84, 0x98, 0xb9, 0xd1, 0xb8, 0x02, 0x56, 0xee, 0xac, 0x3e, 0x7c,
	0xd8, 0x05, 0xba, 0x22, 0xcf, 0x18, 0x4e, 0x45, 0x70, 0xd6, 0x89, 0x29, 0x6d, 0x43, 0x96, 0xca,
	0xaa, 0xbb, 0x76, 0xa0, 0xcd, 0xb1, 0xc1, 0x86, 0xfe, 0x78, 0x45, 0x9e, 0x21, 0x9a, 0xb3, 0xe9,
	0xda, 0xbe, 0x26, 0x77, 0x20, 0xdb, 0xd6, 0x63, 0x68, 0xe3, 0x0c, 0xed, 0x9d, 0xe3, 0xa3, 0xa5,
	0x6b, 0x29, 0x43, 0x5e, 0x5b, 0x91, 0x67, 0xda, 0x7a, 0x04, 0xb0, 0x02, 0xb3, 0x86, 0xd6, 0x8a,
	0x21, 0x4e, 0x0c, 0x26, 0xdf, 0xda, 0x8a, 0x7c, 0x8e, 0x32, 0x87, 0xf1, 0x8a, 0x30, 0x15, 0x81,
	0x82, 0x81, 0xa1, 0x26, 0xf5, 0x10, 0xcc, 0x73, 0x98, 0xa4, 0x5a, 0x13, 0x28, 0x93, 0x0c, 0xe5,
	0xdd, 0xe3, 0xa3, 0xa5, 0xeb, 0x29, 0x43, 0xbc, 0xbf, 0xb6, 0xb2, 0x22, 0x03, 0xd1, 0x7c, 0xa4,
	0x2d, 0x98, 0xa4, 0x1a, 0x13, 0x48, 0x53, 0x03, 0x2b, 0xeb, 0xfe, 0x8a, 0x0c, 0x6d, 0xdd, 0xc7,
	0x79, 0x06, 0x53, 0x4c, 0x51, 0x02, 0x68, 0x9a, 0x01, 0xdd, 0x38, 0x3e, 0x5a, 0x5a, 0x4e, 0xd3,
	0xba, 0x3c, 0x49, 0x39, 0x05, 0xd0, 0x3a, 0x64, 0xd9, 0x04, 0x23, 0xae, 0xaa, 0xed, 0x1b, 0x56,
	0x53, 0x41, 0x56, 0x6e, 0x66, 0x39, 0x73, 0x6b, 0x7c, 0xe3, 0xe2, 0xf1, 0xd1, 0xd2, 0xf9, 0x18,
	0x33, 0x71, 0xdb, 0x48, 0x9e, 0xa1, 0x0c, 0x75, 0x4e, 0x5f, 0xb4, 0xa4, 0x7b, 0x30, 0x66, 0x38,
	0x98, 0x71, 0x9e, 0x63, 0x9c, 0xb9, 0xe3, 0xa3, 0xa5, 0xb9, 0x18, 0x67, 0x43, 0x35, 0x31, 0x92,
	0x47, 0x29, 0x61, 0xd1, 0x92, 0x9e, 0x01, 0x9d, 0x99, 0x8a, 0x4b, 0x88, 0x82, 0x30, 0x31, 0x5a,
	0x2a, 0x41, 0x94, 0x3d, 0x9b, 0xc2, 0x4e, 0x7d, 0x57, 0x26, 0xa4, 0xc8, 0x59, 0x3c, 0xa0, 0xd0,
	0xe4, 0x50, 0x09, 0x0d, 0x43, 0xc8, 0xca, 0xcd, 0xf6, 0x1f, 0xc1, 0x6c, 0x30, 0x2b, 0x18, 0x4b,
	0xd1, 0x92, 0x4a, 0x40, 0x67, 0x5f, 0x37, 0x92, 0xd4, 0x1f, 0x49, 0x22, 0x5a, 0x17, 0xd4, 0xe7,
	0x70, 0x81, 0xd9, 0xa6, 0x0b, 0xeb, 0x7c, 0x7f, 0xac, 0xf3, 0x94, 0x2b, 0x0e, 0xb6, 0xc1, 0x66,
	0xbf, 0x8b, 0x54, 0x8c, 0x51, 0x6b, 0xd7, 0x3c, 0xa4, 0x38, 0x73, 0x29, 0x6a, 0x9a, 0x31, 0x1c,
	0xd9, 0x67, 0x28, 0x5a, 0x52, 0x05, 0x2e, 0x1a, 0x0e, 0x8d, 0x1b, 0x8a, 0xb6, 0x47, 0x9d, 0x43,
	0xd1, 0x11, 0x41, 0x1a, 0xa1, 0x50, 0x17, 0x52, 0xa0, 0xce, 0x1b, 0x4e, 0x9d, 0x98, 0x05, 0xc6,
	0xb6, 0xc9, 0xb8, 0x8a, 0x96, 0xf4, 0x29, 0x9c, 0x33, 0x1c, 0x05, 0xbb, 0x9a, 0xd2, 0x6c, 0xab,
	0xae, 0x4e, 0x71, 0xe6, 0x53, 0x70, 0xa6, 0x0c, 0xa7, 0xe6, 0x6a, 0xcf, 0x28, 0x79, 0xd1, 0x92,
	0x7e, 0x2f, 0x03, 0x73, 0x74, 0x54, 0xb8, 0xa3, 0x2b, 0x0d, 0x53, 0x6d, 0x62, 0x45, 0xd5, 0xe8,
	0x78, 0x73, 0x17, 0x97, 0x33, 0xb7, 0x66, 0x56, 0x17, 0xef, 0x7a, 0xcb, 0x5e, 0x44, 0x17, 0xeb,
	0x8c, 0x62, 0xe3, 0xe3, 0xe3, 0xa3, 0xa5, 0xc7, 0xb1, 0x2e, 0x7a, 0x52, 0xdf, 0xad, 0xec, 0xc8,
	0x65, 0x65, 0xbd, 0x50, 0x2f, 0xed, 0x54, 0x94, 0x4d, 0x79, 0xa7, 0x4a, 0x2d, 0x2f, 0xe3, 0x8e,
	0xbe, 0x45, 0x3b, 0xf5, 0x68, 0xa4, 0x9f, 0xc0, 0x94, 0xe1, 0x28, 0x7a, 0x43, 0xc8, 0x90, 0x4b,
	0x95, 0xe1, 0x93, 0xe3, 0xa3, 0xa5, 0x27, 0xdf, 0x49, 0x86, 0xf5, 0xed, 0xed, 0x9d, 0x57, 0x32,
	0x18, 0xce, 0x66, 0x83, 0xf7, 0xfe, 0xdb, 0x19, 0x98, 0x35, 0x1c, 0xc5, 0x76, 0xe8, 0x93, 0xaf,
	0x87, 0x85, 0x53, 0x97, 0xe1, 0x9c, 0xe1, 0xec, 0x78, 0x7d, 0x72, 0x41, 0xfe, 0x20, 0x03, 0x17,
	0x0c, 0x47, 0x31, 0xac, 0x8e, 0x6a, 0x1a, 0xba, 0x62, 0x22, 0x4b, 0x08, 0xb3, 0x78, 0x8a, 0x46,
	0xa9, 0xcb, 0xa5, 0xb2, 0x2c, 0x19, 0x4e, 0xc9, 0xeb, 0x76, 0x1b, 0x71, 0x22, 0xa9, 0xc0, 0xd4,
	0x82, 0x1d, 0xdb, 0x6e, 0x28, 0xce, 0x3e, 0x61, 0x2b, 0x42, 0xee, 0x52, 0xba, 0xe3, 0xd7, 0x28,
	0x47, 0x75, 0x9f, 0xd0, 0x55, 0x40, 0x7a, 0x03, 0x57, 0x0c, 0x47, 0x31, 0x6d, 0xba, 0xd0, 0x53,
	0x77, 0x75, 0xed, 0x36, 0xa1, 0x31, 0xce, 0x07, 0xbc, 0x9c, 0x02, 0x98, 0x33, 0x9c, 0x6d, 0xca,
	0x5d, 0x73, 0x35, 0xd9, 0xe3, 0x15, 0xd0, 0xaf, 0xe1, 0xb2, 0xe1, 0x28, 0x2d, 0xd5, 0x6c, 0xd8,
	0x6e, 0x0b, 0xe9, 0xdc, 0x80, 0x01, 0xf2, 0x95, 0x74, 0xe4, 0xb2, 0x60, 0xf6, 0x0c, 0x21, 0x90,
	0xbf, 0x86, 0x25, 0x36, 0xe3, 0x35, 0xdb, 0xd5, 0x99, 0xc4, 0xa8, 0x0b, 0xfc, 0x6a, 0x0a, 0xf8,
	0x22, 0x0d, 0x00, 0x94, 0x9f, 0x0a, 0x8d, 0xa2, 0xf0, 0x5f, 0xc1, 0x55, 0xaa, 0x58, 0xe2, 0x1a,
	0x1a, 0x49, 0x56, 0xca, 0x52, 0x0a, 0xfa, 0x82, 0xe1, 0xd4, 0x18, 0x7b, 0xb7, 0x56, 0x3e, 0x63,
	0x3e, 0x44, 0x70, 0x97, 0xc4, 0xcb, 0x29, 0x98, 0xb3, 0x86, 0x53, 0xc7, 0x51, 0x41, 0xeb, 0xb0,
	0x68, 0x38, 0x4a, 0xdb, 0xda, 0xb7, 0xec, 0x03, 0xab, 0x0b, 0xf0, 0x5a, 0x0a, 0xe0, 0xbc, 0xe1,
	0xbc, 0xf0, 0x58, 0xa3, 0xa8, 0xaf, 0x98, 0xdd, 0x30, 0x71, 0x91, 0xda, 0x52, 0x8c, 0x6e, 0xbb,
	0xe5, 0x53, 0x70, 0x2f, 0xb2, 0xc1, 0x23, 0xb5, 0x55, 0x8a, 0x99, 0x6d, 0x07, 0x72, 0x41, 0x48,
	0xd3, 0x69, 0xc2, 0x1a, 0x80, 0x5e, 0x4f, 0x8f, 0xb2, 0x5e, 0x54, 0xd2, 0x6b, 0x88, 0x08, 0x40,
	0x2f, 0xca, 0x6a, 0x26, 0x52, 0x5d, 0x1a, 0x9d, 0x76, 0x0d, 0x92, 0xbb, 0x91, 0x1e, 0x65, 0x0b,
	0x94, 0x7e, 0xb3, 0xb1, 0x61, 0x10, 0xb6, 0x0e, 0x39, 0x9d, 0x35, 0x45, 0xb5, 0x0e, 0x35, 0x15,
	0x7b, 0xc6, 0x66, 0xe2, 0xdc, 0x4a, 0x81, 0x91, 0x28, 0xdb, 0xba, 0xc7, 0x55, 0x73, 0xb5, 0xc0,
	0xdf, 0x3b, 0x6b, 0x4a, 0xe7, 0x81, 0xa2, 0xd9, 0x2d, 0x47, 0x25, 0xc6, 0xae, 0x89, 0x14, 0x55,
	0xd7, 0x5d, 0x0f, 0xf3, 0x7b, 0xe9, 0xfe, 0xde, 0x59, 0x7b, 0xf9, 0xa0, 0xe0, 0xf3, 0xae, 0xeb,
	0xba, 0x1b, 0x38, 0x64, 0x67, 0x4d, 0xb1, 0x10, 0xd2, 0x4d, 0x84, 0xb1, 0x62, 0x38, 0x4a, 0xc3,
	0x55, 0x9b, 0xca, 0x9e, 0xc0, 0xbe, 0x9d, 0xee, 0x90, 0x9d, 0xb5, 0x0a, 0x67, 0x2f, 0x39, 0x5b,
	0xae, 0xda, 0x7c, 0xce, 0xc1, 0xbf, 0xa4, 0x11, 0xa0, 0xb3, 0xe6, 0x87, 0x35, 0x11, 0x67, 0x7d,
	0xd3, 0x7c, 0x7f, 0x10, 0x6c, 0x1e, 0x9d, 0x78, 0xc0, 0x14, 0x06, 0xaa, 0x51, 0x07, 0xed, 0xac,
	0xf5, 0xb0, 0xf9, 0x7b, 0x29, 0xc0, 0xcc, 0x36, 0xdd, 0x56, 0xff, 0x8c, 0x1b, 0xcd, 0x25, 0x9e,
	0x02, 0x7c, 0xbc, 0x3b, 0xe9, 0x33, 0xa8, 0xb3, 0x26, 0x13, 0x3a, 0xf2, 0x48, 0xf8, 0xeb, 0xac,
	0x29, 0x3a, 0x26, 0xfe, 0xc0, 0x23, 0x98, 0x77, 0x07, 0x31, 0xda, 0x26, 0x26, 0x7c, 0xe0, 0x21,
	0xe8, 0x6f, 0x60, 0x99, 0x41, 0xef, 0xd9, 0x8e, 0xb2, 0x7b, 0xc8, 0xfe, 0x74, 0xa9, 0xf6, 0xfd,
	0xf4, 0x28, 0xd5, 0x59, 0x7b, 0x6e, 0x3b, 0x1b, 0x87, 0xcf, 0x6d, 0x27, 0xa6, 0xdb, 0x3f, 0xca,
	0x40, 0x8e, 0x25, 0x51, 0xc2, 0x70, 0x9a, 0xad, 0x23, 0xb1, 0x20, 0xad, 0x9e, 0x76, 0x96, 0xc0,
	0xf2, 0x37, 0x6e, 0xf4, 0x82, 0xad, 0x23, 0xbe, 0x26, 0xc9, 0xb0, 0xe0, 0x55, 0x27, 0xc8, 0x71,
	0x91, 0xa6, 0x12, 0xa4, 0x2b, 0x2d, 0xdc, 0xc4, 0xde, 0x68, 0xef, 0xf7, 0x4f, 0xee, 0xe6, 0x59,
	0x69, 0xe2, 0x33, 0x96, 0x71, 0x13, 0xb3, 0x81, 0x6e, 0x03, 0x6b, 0x51, 0x5c, 0xa4, 0x1b, 0x2e,
	0x4d, 0xca, 0x5a, 0xb8, 0xe9, 0x01, 0x3e, 0x18, 0x20, 0x5b, 0x94, 0x39, 0x57, 0x19, 0x37, 0xb9,
	0x59, 0x96, 0x3c, 0x09, 0x31, 0x51, 0xda, 0x96, 0x8b, 0x54, 0x6d, 0x4f, 0x31, 0x9a, 0x96, 0xed,
	0x22, 0xc5, 0x51, 0x0f, 0x4d, 0x5b, 0xd5, 0x73, 0x0f, 0x53, 0xac, 0x72, 0x89, 0x09, 0x8a, 0xc9,
	0x0b, 0x8f, 0xbd, 0xc4, 0xb8, 0xab, 0x1e, 0xb3, 0x8f, 0xef, 0xa8, 0xae, 0xda, 0x52, 0x1c, 0x77,
	0xd7, 0x6c, 0xc5, 0xf1, 0xd7, 0x06, 0xc1, 0xaf, 0x52, 0xfe, 0x2a, 0x65, 0x8f, 0xe2, 0x7f, 0x2d,
	0xf0, 0xf7, 0x89, 0x42, 0x6c, 0x5b, 0xd9, 0x35, 0x9a, 0x71, 0xfc, 0x0f, 0x52, 0xbd, 0x8a, 0xe2,
	0xef, 0x93, 0xba, 0x6d, 0x6f, 0x18, 0xcd, 0x28, 0xfc, 0x1b, 0xb8, 0x1c, 0x55, 0x76, 0x0c, 0xfb,
	0x51, 0x6a, 0x30, 0x08, 0xe9, 0x3c, 0x59, 0x33, 0xb4, 0x20, 0x53, 0xd0, 0x5b, 0x0d, 0x21, 0x3d,
	0x8e, 0xfe, 0x78, 0x10, 0xcd, 0xd0, 0xba, 0xac, 0xc8, 0xd8, 0xa3, 0xf8, 0x4f, 0x81, 0x15, 0xb7,
	0x0a, 0x72, 0x5d, 0x9b, 0x87, 0xc5, 0x27, 0x29, 0x78, 0xd3, 0x94, 0xa1, 0x48, 0xe9, 0x99, 0x6f,
	0x3c, 0x07, 0xe6, 0x32, 0x2c, 0xb6, 0xb6, 0x90, 0x45, 0xb8, 0xdf, 0x7e, 0x98, 0x1a, 0x57, 0xb4,
	0x16, 0x0b, 0xa9, 0x8c, 0x87, 0x21, 0x3d, 0xe3, 0x48, 0xa6, 0xea, 0x36, 0x51, 0x30, 0xdf, 0x3f,
	0x4a, 0xab, 0xde, 0x28, 0xd3, 0x36, 0xe5, 0x11, 0xb3, 0x5c, 0x38, 0xbf, 0x43, 0xf3, 0x8f, 0x6f,
	0x91, 0x6b, 0xd3, 0x15, 0x99, 0x61, 0x7d, 0x9c, 0xba, 0x44, 0x51, 0x2b, 0x1b, 0x56, 0xf3, 0x4b,
	0xe4, 0xda, 0x25, 0x9d, 0xaf, 0xc0, 0x17, 0xbd, 0xba, 0x8b, 0xea, 0x9e, 0xad, 0x20, 0xb8, 0xed,
	0x38, 0x2e, 0xc2, 0x38, 0xf7, 0x49, 0x0a, 0xdc, 0x1c, 0x2b, 0xbd, 0x10, 0xd2, 0xe9, 0x40, 0x6b,
	0x9c, 0x4b, 0xaa, 0xf1, 0xf9, 0x1e, 0xb6, 0xa9, 0x0f, 0xf9, 0x69, 0x6a, 0x02, 0x12, 0xb1, 0xa6,
	0x0f, 0xca, 0x5d, 0xbc, 0xb3, 0xc6, 0xd5, 0x47, 0xe7, 0x7b, 0x8b, 0xb4, 0x15, 0xdc, 0x52, 0x4d,
	0xd3, 0x1b, 0xfc, 0xd3, 0x41, 0x5c, 0xbc, 0xb3, 0xc6, 0x54, 0x59, 0xc6, 0xcd, 0x32, 0x69, 0xd7,
	0x28, 0x33, 0x53, 0xc2, 0x17, 0x90, 0xa3, 0x75, 0x2c, 0x76, 0x4c, 0x83, 0xb0, 0x3d, 0x3e, 0xbc,
	0xa7, 0xee, 0x23, 0x0f, 0xf7, 0x59, 0xda, 0x92, 0x44, 0x34, 0xa7, 0x46, 0x19, 0x9f, 0x0b, 0x3e,
	0x06, 0x49, 0x2b, 0x03, 0x56, 0xad, 0x77, 0x95, 0x6b, 0xcf, 0x4f, 0x3b, 0x10, 0xd3, 0xf2, 0x3a,
	0x5e, 0xaf, 0xfd, 0x49, 0x06, 0x16, 0xa8, 0x38, 0x6d, 0x0b, 0xbd, 0x75, 0x90, 0xe6, 0x45, 0x61,
	0x5f, 0xa4, 0xd2, 0x29, 0x56, 0x4e, 0xb5, 0xba, 0x5c, 0xaa, 0xca, 0xf3, 0x44, 0x73, 0x5e, 0xf8,
	0x7d, 0x97, 0xb1, 0x90, 0xeb, 0x2f, 0x33, 0xb0, 0x14, 0x93, 0xeb, 0xc0, 0xb0, 0x14, 0xac, 0xa9,
	0xa6, 0xbf, 0x72, 0x7d, 0x76, 0xea, 0xd2, 0x5d, 0x8a, 0x48, 0xf7, 0xca, 0xb0, 0x6a, 0xb4, 0xff,
	0xde, 0x22, 0x62, 0x55, 0xdb, 0x57, 0x1c, 0xe4, 0xb6, 0x84, 0x88, 0x9f, 0xff, 0x2f, 0x8b, 0x58,
	0x53, 0xb5, 0xfd, 0x2a, 0x72, 0x5b, 0x81, 0x75, 0x17, 0x99, 0x88, 0x6e, 0x53, 0x71, 0x88, 0xab,
	0x58, 0x36, 0x61, 0x79, 0x15, 0x97, 0x6e, 0xfb, 0x14, 0xa5, 0x93, 0x8b, 0xb5, 0x62, 0x9d, 0x4d,
	0x82, 0x17, 0x6e, 0xb3, 0x4a, 0xdc, 0x8a, 0x4d, 0x6a, 0x88, 0x70, 0xb9, 0x7e, 0x91, 0x81, 0x4b,
	0x42, 0x2e, 0x3a, 0x07, 0xe2, 0x82, 0x95, 0x4f, 0x5d, 0xb0, 0x79, 0x4f, 0x30, 0x3a, 0x15, 0x22,
	0x92, 0xfd, 0x79, 0x06, 0xae, 0xfa, 0x1a, 0xf3, 0x56, 0x0b, 0xa5, 0x65, 0x60, 0x4c, 0x63, 0x2a,
	0x17, 0xae, 0x72, 0xea, 0xc2, 0x2d, 0x72, 0xad, 0x79, 0xfd, 0x97, 0xbd, 0xee, 0xb9, 0x80, 0x3f,
	0xcb, 0x78, 0x31, 0xc9, 0xc5, 0x44, 0x39, 0x30, 0xc8, 0x9e, 0xa2, 0xab, 0x44, 0x15, 0xa2, 0xed,
	0x9c, 0x76, 0x08, 0x99, 0x63, 0x21, 0x84, 0xbc, 0x32, 0xc8, 0xde, 0xa6, 0x4a, 0x54, 0x2e, 0xd3,
	0x1f, 0x73, 0x37, 0x63, 0xa2, 0x98, 0xc8, 0x52, 0x9a, 0x24, 0x1c, 0x45, 0xaa, 0xa7, 0xbd, 0xe5,
	0x41, 0xbd, 0x8c, 0x8a, 0xb3, 0x8d, 0xac, 0x67, 0x24, 0x88, 0x21, 0x7f, 0xc6, 0x27, 0x68, 0x58,
	0x2c, 0x16, 0x44, 0x8c, 0x6f, 0xfd, 0x18, 0xf2, 0xc5, 0x69, 0xcb, 0xb6, 0x10, 0x96, 0x8d, 0x46,
	0x10, 0xe3, 0xdb, 0x3e, 0x01, 0x24, 0x28, 0xf6, 0xb9, 0x7c, 0xf2, 0xa9, 0x3b, 0x5b, 0x34, 0x80,
	0x88, 0x7d, 0x03, 0x2e, 0xe2, 0x9f, 0x66, 0xe0, 0x4a, 0x4c, 0x44, 0xa4, 0xed, 0xd9, 0x54, 0x4e,
	0x2e, 0x60, 0xed, 0xb4, 0x5d, 0x6e, 0x21, 0x22, 0x5f, 0x51, 0xdb, 0xb3, 0xeb, 0xc2, 0xc0, 0xbf,
	0xcc, 0xc0, 0xb5, 0xa4, 0x08, 0x1c, 0x55, 0x61, 0xfd, 0xb4, 0x25, 0xbc, 0xd2, 0x15, 0x82, 0x23,
	0x3a, 0x2c, 0x7b, 0x27, 0x5a, 0x04, 0xb3, 0x28, 0x47, 0xf3, 0x16, 0x64, 0xf1, 0x24, 0xef, 0x45,
	0x4a, 0x55, 0x42, 0x34, 0xa7, 0x8e, 0x2b, 0x36, 0xa9, 0x7a, 0x4c, 0x2c, 0x81, 0x90, 0xbd, 0xb9,
	0x66, 0xd9, 0x96, 0x82, 0x0f, 0x2d, 0xa5, 0x61, 0xd0, 0x48, 0xe0, 0xa7, 0x8d, 0x2f, 0xfb, 0x23,
	0x5e, 0x60, 0x3b, 0xec, 0x56, 0xed, 0xd0, 0xda, 0xa2, 0x7c, 0xa1, 0xd4, 0x91, 0x62, 0x8a, 0xf2,
	0xd0, 0x4b, 0x4b, 0x18, 0xde, 0xab, 0x74, 0x09, 0x79, 0x69, 0xc7, 0xb2, 0x0a, 0x51, 0x75, 0x73,
	0x09, 0xa9, 0x80, 0x96, 0x4d, 0x4d, 0xc2, 0xc0, 0x5e, 0x0f, 0xb2, 0xfd, 0x4f, 0x99, 0x2a, 0x94,
	0x27, 0x2c, 0x19, 0x05, 0x0a, 0xa2, 0x1d, 0x03, 0x7b, 0x93, 0x96, 0xd4, 0xd2, 0xfc, 0xeb, 0xd0,
	0x12, 0xa1, 0x4a, 0x6c, 0x32, 0x08, 0x34, 0x2a, 0x54, 0x0c, 0xf1, 0xcb, 0x41, 0x32, 0xba, 0x43,
	0x6b, 0x5d, 0xdb, 0x8f, 0x80, 0x7e, 0xe5, 0x4d, 0x11, 0xbb, 0x83, 0x5c, 0x53, 0x75, 0x58, 0xf6,
	0x8d, 0x51, 0xb8, 0x28, 0xf8, 0x2a, 0x2d, 0x03, 0x25, 0x9a, 0xb3, 0x13, 0x70, 0xd7, 0x50, 0xa8,
	0x3a, 0x78, 0xc1, 0x25, 0x26, 0xae, 0xe1, 0xa5, 0xce, 0x98, 0xa8, 0x2d, 0xb1, 0x3d, 0x90, 0xfb,
	0x41, 0xda, 0xfe, 0x1a, 0x95, 0x98, 0xb2, 0xd6, 0x05, 0xa7, 0xe7, 0x99, 0x92, 0x02, 0xcb, 0xec,
	0xd4, 0xd6, 0xb6, 0xf8, 0x61, 0x95, 0xb2, 0x7b, 0xe8, 0xa8, 0x18, 0xd3, 0xf8, 0xa8, 0xdb, 0x07,
	0xb4, 0x30, 0xca, 0x7d, 0x9d, 0x56, 0x61, 0x11, 0xcd, 0x29, 0xd8, 0x96, 0x77, 0x78, 0xb5, 0xc1,
	0xd8, 0x5f, 0x31, 0xee, 0xa2, 0xeb, 0x4a, 0x5f, 0x79, 0xcb, 0x68, 0xa8, 0x83, 0x86, 0x61, 0xb1,
	0x45, 0x4b, 0x37, 0xb0, 0xba, 0x6b, 0xa2, 0xdc, 0x37, 0x69, 0xe5, 0x61, 0x18, 0x7e, 0xcb, 0xb0,
	0x64, 0x4c, 0x36, 0x3d, 0x56, 0xe1, 0x14, 0x7e, 0xf6, 0x40, 0x53, 0x1b, 0xb6, 0xb5, 0x97, 0x53,
	0x06, 0x70, 0x0a, 0xbe, 0xec, 0x57, 0x89, 0xcb, 0xb6, 0xf7, 0xc4, 0x09, 0x76, 0x70, 0x26, 0xdc,
	0xc2, 0x38, 0xf7, 0xc3, 0xf8, 0xd9, 0xe6, 0xca, 0x9d, 0xc7, 0xab, 0xf7, 0xd6, 0x12, 0x0e, 0x85,
	0xcf, 0x85, 0x0e, 0xad, 0x50, 0x19, 0x63, 0xa9, 0x08, 0x52, 0xab, 0x6d, 0x12, 0x23, 0xba, 0x4d,
	0x88, 0xfa, 0xfb, 0x7e, 0xd6, 0x67, 0xe1, 0x7b, 0x84, 0xf9, 0x2f, 0x60, 0x21, 0x76, 0x87, 0x40,
	0x46, 0x3f, 0x6e, 0x23, 0x4c, 0xca, 0xb8, 0x29, 0x3d, 0x80, 0x31, 0xd7, 0x7b, 0xca, 0x65, 0x96,
	0x87, 0x6f, 0x4d, 0xfa, 0xe1, 0x2d, 0xe1, 0x9a, 0x82, 0x2c, 0x48, 0xf3, 0x45, 0xc8, 0xc5, 0xdb,
	0x89, 0x4a, 0xda, 0xb8, 0xe8, 0xe8, 0xd2, 0xf7, 0x60, 0x76, 0xef, 0x40, 0xc1, 0x48, 0x53, 0x1c,
	0xaf, 0x49, 0x31, 0x74, 0x76, 0x9f, 0x61, 0x5a, 0x9e, 0xd9, 0x3b, 0xa8, 0x21, 0x8d, 0x73, 0x94,
	0xf4, 0xfc, 0x62, 0x0f, 0x98, 0x82, 0xa3, 0xe7, 0xff, 0x3d, 0x03, 0x17, 0x12, 0x1b, 0xa5, 0x77,
	0x60, 0x46, 0x20, 0x87, 0x6e, 0x4b, 0x8c, 0xca, 0xd3, 0xfc, 0x2d, 0xbf, 0x01, 0xf1, 0x14, 0x00,
	0x39, 0xba, 0x82, 0x19, 0x13, 0xbb, 0xf7, 0x30, 0xb9, 0xba, 0xd4, 0x63, 0x70, 0x42, 0xf8, 0xe7,
	0x67, 0xe4, 0x09, 0xe4, 0xe8, 0xbc, 0xa3, 0xa7, 0x00, 0x5a, 0x80, 0x30, 0x9c, 0x8e, 0x50, 0xf0,
	0x10, 0x34, 0x81, 0xb0, 0x71, 0x1e, 0x66, 0x85, 0xa8, 0x3e, 0x50, 0xfe, 0x57, 0x19, 0xb8, 0xd8,
	0x65, 0x10, 0xec, 0xd8, 0x16, 0x46, 0xd2, 0x16, 0x80, 0xea, 0x18, 0xa2, 0xcb, 0x0c, 0x5b, 0x70,
	0xb2, 0x77, 0xbd, 0xab, 0x25, 0xeb, 0x8e, 0xc1, 0x61, 0x2f, 0x1c, 0x1f, 0x2d, 0xcd, 0x72, 0xe3,
	0x07, 0xe4, 0xf2, 0x84, 0x2a, 0x28, 0xa4, 0x42, 0xa0, 0xa3, 0x88, 0x02, 0x2e, 0xf7, 0x13, 0xdf,
	0xd7, 0xa0, 0xf7, 0x98, 0x7f, 0x0d, 0x8b, 0x3d, 0xe4, 0xa4, 0x9e, 0xf3, 0x04, 0xc6, 0x5d, 0xfe,
	0xc8, 0x5d, 0xe7, 0x6a, 0x32, 0xb8, 0x60, 0x92, 0x7d, 0xfa, 0xbc, 0x03, 0x97, 0x63, 0x44, 0x9b,
	0xc8, 0x44, 0x44, 0x38, 0xe6, 0xc9, 0xdf, 0x87, 0xc9, 0xff, 0x10, 0x96, 0xfa, 0xf5, 0x48, 0x07,
	0xf4, 0x71, 0x7c, 0x2a, 0x5c, 0x4f, 0x1e, 0x4f, 0x84, 0x31, 0x98, 0x13, 0x7f, 0x9b, 0x81, 0x2b,
	0x3d, 0x28, 0xff, 0x2f, 0x1a, 0x57, 0x87, 0xe5, 0xbe, 0xd2, 0x52, 0x8d, 0x3c, 0xed, 0x32, 0xf1,
	0x8d, 0xfe, 0x2a, 0xe9, 0x32, 0x74, 0xab, 0x2b, 0xf6, 0x3c, 0x43, 0xe4, 0xf4, 0xac, 0xfc, 0x65,
	0x97, 0x5f, 0x05, 0xdd, 0x79, 0x3e, 0x1b, 0x33, 0xf1, 0x72, 0xf2, 0x78, 0x02, 0xae, 0xc0, 0xbe,
	0xf3, 0x30, 0x97, 0xa0, 0x58, 0x9c, 0xff, 0xaf, 0x4c, 0xd7, 0x34, 0x61, 0xec, 0x27, 0x6c, 0xf4,
	0xbb, 0x30, 0x82, 0x1d, 0xa4, 0x71, 0x53, 0xf7, 0x8b, 0xd2, 0x8c, 0x4e, 0x7a, 0x00, 0xa3, 0x91,
	0xc0, 0xd5, 0xdf, 0x39, 0x38, 0xad, 0x74, 0x0f, 0xce, 0xd2, 0x5f, 0x98, 0x5d, 0xbc, 0x9a, 0x5c,
	0xbd, 0xd4, 0x9b, 0x09, 0xcb, 0x1e, 0x65, 0xfe, 0x9b, 0x2e, 0xb7, 0x0f, 0x0d, 0xdf, 0x9b, 0x57,
	0x71, 0x2f, 0xba, 0xd6, 0x47, 0xeb, 0x5d, 0x2e, 0xf4, 0x2f, 0x19, 0x18, 0xab, 0x21, 0xb7, 0x63,
	0x68, 0x48, 0x5a, 0x85, 0x49, 0xc3, 0x51, 0xd8, 0x5d, 0x3a, 0xcd, 0x36, 0xb9, 0x36, 0x67, 0xb9,
	0x36, 0x4b, 0xd5, 0x2a, 0x6f, 0x90, 0xc1, 0x70, 0xc4, 0x6f, 0xe9, 0x12, 0x8c, 0xeb, 0x34, 0xb1,
	0xb5, 0x5d, 0x7e, 0xfb, 0xed, 0xf9, 0x19, 0x79, 0x4c, 0xc7, 0xa4, 0x6a, 0xbb, 0x44, 0x7a, 0x04,
	0x6c, 0x3b, 0x96, 0x6d, 0xf7, 0x51, 0x14, 0xa6, 0xac, 0x99, 0x55, 0x49, 0x40, 0x16, 0xca, 0xd5,
	0x32, 0x6e, 0xd6, 0x0f, 0x1d, 0xf4, 0xfc, 0x8c, 0x77, 0x43, 0x87, 0x3f, 0x4a, 0xcb, 0x30, 0xac,
	0x9a, 0x4d, 0xa6, 0xa7, 0x99, 0xd5, 0x19, 0x3e, 0xa0, 0xf5, 0xed, 0x67, 0x15, 0xb5, 0x85, 0x64,
	0xda, 0xb4, 0x31, 0x01, 0x63, 0xe6, 0x03, 0xc5, 0xb0, 0x1a, 0x76, 0xfe, 0x77, 0x33, 0x90, 0xdd,
	0x32, 0x5c, 0x74, 0xa0, 0x9a, 0xa6, 0xdc, 0xe6, 0x97, 0xfe, 0x96, 0x61, 0x18, 0x77, 0xa8, 0x41,
	0xa9, 0x4a, 0x66, 0x7c, 0x95, 0xb0, 0x91, 0xca, 0xb4, 0x49, 0x92, 0x60, 0x44, 0x75, 0x1c, 0x6a,
	0xc1, 0xe1, 0x5b, 0x13, 0x32, 0xfb, 0x2d, 0xdd, 0x81, 0x51, 0x5e, 0x8e, 0x78, 0x5d, 0x5f, 0xe0,
	0x8c, 0x02, 0xde, 0xab, 0x15, 0x64, 0x4e, 0x24, 0x65, 0x61, 0xd8, 0xb4, 0x9b, 0xec, 0xc6, 0xdb,
	0xb8, 0x4c, 0x7f, 0xe6, 0x7f, 0x02, 0xe3, 0xb5, 0x67, 0x55, 0xdb, 0x34, 0xb4, 0x43, 0xe9, 0x03,
	0x98, 0x34, 0x2c, 0xa5, 0x71, 0xa0, 0xb8, 0x6d, 0x13, 0x61, 0x6e, 0x9d, 0x8b, 0x31, 0x44, 0x21,
	0xb0, 0x3c, 0x61, 0x58, 0x5b, 0x07, 0xf4, 0x09, 0x53, 0x46, 0xd4, 0x0c, 0x18, 0x87, 0x52, 0x18,
	0x51, 0x93, 0x33, 0xe6, 0x7f, 0x19, 0x5a, 0xfc, 0x9e, 0xb9, 0x76, 0xdb, 0xf1, 0x24, 0x61, 0x0a,
	0xa9, 0x27, 0xc7, 0x83, 0xe5, 0x70, 0x3c, 0x08, 0xf1, 0x0c, 0x78, 0x13, 0x72, 0x15, 0xa6, 0x1c,
	0x46, 0xef, 0xcb, 0x4a, 0x41, 0xcf, 0x09, 0x7d, 0x73, 0x55, 0xc8, 0x93, 0x1e, 0x91, 0x27, 0xe5,
	0x9b, 0xc0, 0xa7, 0x43, 0x1d, 0x86, 0x02, 0xc9, 0xa3, 0x78, 0x20, 0x89, 0xaf, 0x7d, 0xb1, 0xb1,
	0x05, 0x61, 0xe4, 0x69, 0x10, 0x11, 0xc3, 0x34, 0xde, 0xf4, 0xbb, 0x0e, 0xd3, 0x5c, 0xd6, 0x48,
	0x66, 0xc3, 0x07, 0xc0, 0x83, 0xdc, 0x5f, 0x64, 0xe0, 0x52, 0xa2, 0x74, 0x27, 0x1c, 0x71, 0x1e,
	0xf9, 0x11, 0x64, 0x88, 0xdb, 0xa1, 0xf7, 0x10, 0x23, 0x51, 0x24, 0xff, 0x43, 0xb8, 0xda, 0x47,
	0x40, 0xaa, 0xbf, 0x4f, 0xba, 0x62, 0x42, 0xbe, 0x37, 0x7a, 0x42, 0x50, 0x78, 0x1b, 0xac, 0x5e,
	0x21, 0xc2, 0x68, 0x12, 0x71, 0x2a, 0xee, 0x94, 0xdf, 0x83, 0xeb, 0x69, 0x3d, 0xd3, 0x01, 0xae,
	0xc7, 0x1d, 0xe4, 0xdd, 0xde, 0xe3, 0xeb, 0x91, 0x50, 0xec, 0xc3, 0xb5, 0x3e, 0xc4, 0x27, 0x6b,
	0xec, 0xbc, 0x09, 0x37, 0x52, 0x3b, 0xa3, 0xe3, 0xda, 0xec, 0x32, 0xdc, 0xad, 0xf4, 0x81, 0x75,
	0x99, 0xaf, 0x9d, 0x38, 0xbf, 0x42, 0xa9, 0xc1, 0xe9, 0xd8, 0x6e, 0x37, 0xd1, 0x6b, 0xa2, 0x29,
	0xc2, 0x27, 0x71, 0xc3, 0xdd, 0xe8, 0x3d, 0xbe, 0xa4, 0x34, 0x21, 0x54, 0xd3, 0xc4, 0x26, 0x08,
	0xce, 0xff, 0xe1, 0x50, 0xe2, 0xc4, 0x38, 0x8d, 0x74, 0x61, 0x35, 0x92, 0x2e, 0xa4, 0x45, 0x27,
	0x2f, 0x65, 0x78, 0x14, 0x4b, 0x19, 0x06, 0x9e, 0xf0, 0xd2, 0xc3, 0x68, 0xda, 0xb0, 0xd4, 0x9f,
	0xd1, 0x4f, 0x1d, 0x7e, 0x91, 0x49, 0x74, 0xf1, 0x58, 0xfe, 0xb0, 0xde, 0xe5, 0x72, 0xef, 0xa4,
	0x98, 0x24, 0xee, 0x6f, 0xd2, 0xfb, 0x11, 0xad, 0x0e, 0x25, 0x6b, 0x35, 0x3c, 0x1d, 0x7e, 0x96,
	0x81, 0xd9, 0x08, 0x3a, 0x5b, 0xa0, 0x6e, 0xc2, 0x48, 0x19, 0x11, 0x95, 0x3b, 0xa3, 0x74, 0x97,
	0xdf, 0xed, 0xdf, 0xd9, 0xfd, 0x11, 0xd2, 0x08, 0x6d, 0x91, 0x59, 0xbb, 0x54, 0x89, 0x7b, 0xaf,
	0x48, 0xda, 0xe2, 0xde, 0x3b, 0x98, 0xdf, 0x3e, 0x19, 0xf9, 0xe9, 0x2f, 0xf2, 0x99, 0x7c, 0x39,
	0xb6, 0x72, 0x86, 0x9c, 0x76, 0x35, 0xee, 0xb4, 0xb9, 0x24, 0x0d, 0x45, 0x17, 0xa2, 0x9f, 0x67,
	0x82, 0x6f, 0x11, 0xbc, 0x66, 0xcf, 0x96, 0xbf, 0xd9, 0x41, 0xfe, 0x3c, 0x54, 0xf6, 0xf3, 0x51,
	0x9e, 0xf8, 0xcc, 0x88, 0x2e, 0x6b, 0x8b, 0x89, 0xaa, 0x8a, 0x2e, 0x68, 0xf5, 0xd8, 0xa4, 0x0e,
	0xbb, 0xe7, 0xa3, 0x2e, 0xf7, 0xbc, 0x9c, 0x84, 0x98, 0x10, 0x05, 0xcd, 0xa0, 0x70, 0x60, 0x24,
	0xd1, 0xe5, 0xab, 0x92, 0x1c, 0x02, 0xbf, 0xab, 0x7e, 0xf3, 0x3f, 0x88, 0xc5, 0xdc, 0xae, 0x25,
	0xeb, 0xc3, 0xb8, 0x13, 0x5d, 0x4b, 0x1a, 0x47, 0x8f, 0xc5, 0x6a, 0x2f, 0x16, 0xd9, 0xba, 0x57,
	0x8e, 0xb8, 0xfd, 0x86, 0xbf, 0xe3, 0x4a, 0x65, 0xc4, 0xa6, 0x41, 0x68, 0xd5, 0x38, 0x69, 0x95,
	0xbd, 0x8c, 0x19, 0x28, 0xba, 0x52, 0x0c, 0x96, 0x03, 0x26, 0xad, 0x11, 0x73, 0x20, 0x75, 0x79,
	0x1b, 0xce, 0xff, 0x67, 0x26, 0xe6, 0x65, 0xa7, 0xb1, 0x2e, 0xbc, 0x17, 0x59, 0x17, 0x7a, 0x87,
	0x09, 0x6f, 0x45, 0x58, 0x8d, 0xad, 0x08, 0x03, 0xcc, 0x15, 0xe9, 0xfd, 0xe8, 0x5a, 0xb0, 0xd0,
	0x8b, 0xc5, 0x5f, 0x05, 0x7e, 0x3f, 0x9e, 0xcf, 0xc6, 0xe2, 0xff, 0x87, 0x5d, 0x13, 0x6c, 0xa9,
	0xa7, 0xa2, 0xff, 0xe7, 0x91, 0xff, 0x1f, 0xa6, 0x60, 0x6c, 0xdd, 0x61, 0x27, 0x6d, 0xa2, 0xc6,
	0xcb, 0xf4, 0xac, 0xf1, 0xa4, 0x02, 0x9c, 0x6b, 0x10, 0xb1, 0x8b, 0xce, 0x6a, 0x3d, 0xae, 0x59,
	0x31, 0x6c, 0x0e, 0x75, 0x77, 0xab, 0x5e, 0x15, 0xd7, 0xf5, 0xce, 0xc8, 0xd3, 0x0d, 0xc2, 0xf7,
	0xcf, 0x4b, 0x56, 0xc3, 0xa6, 0x20, 0xba, 0x85, 0x23, 0x20, 0xc3, 0x89, 0x20, 0x9b, 0x95, 0x5a,
	0x08, 0x44, 0xb7, 0x70, 0x08, 0xa4, 0x04, 0xb3, 0x2d, 0xec, 0x3a, 0x5a, 0x04, 0x26, 0x5a, 0xc5,
	0x0b, 0x98, 0x72, 0x4d, 0xae, 0x16, 0x02, 0xa0, 0x73, 0x8c, 0x2f, 0x04, 0x55, 0x86, 0xf3, 0xb8,
	0x6d, 0x29, 0x71, 0xb0, 0xb3, 0x91, 0x7d, 0x04, 0x01, 0x56, 0x6b, 0x5b, 0x11, 0xb4, 0x2c, 0x6e,
	0x5b, 0x72, 0x04, 0xee, 0x23, 0x98, 0xc4, 0xc1, 0x5d, 0x7a, 0xf6, 0x91, 0x54, 0xf7, 0xd0, 0x6a,
	0xa5, 0x90, 0x7e, 0x00, 0xfb, 0xd7, 0xe0, 0xa5, 0x6b, 0x30, 0x15, 0xf9, 0x80, 0x8d, 0x7d, 0x16,
	0x25, 0x4f, 0x1a, 0xa1, 0x2f, 0xd2, 0x9e, 0x00, 0x10, 0x57, 0xd5, 0xd8, 0x85, 0x6c, 0xcc, 0xbe,
	0x74, 0xea, 0x1e, 0x73, 0x9d, 0x12, 0x70, 0x4c, 0x79, 0x82, 0xf0, 0x27, 0xbc, 0xf8, 0x29, 0x4c,
	0x85, 0x9b, 0xa8, 0xf7, 0x9a, 0xa8, 0x83, 0xc4, 0xde, 0xc2, 0x42, 0x12, 0xcc, 0x36, 0x25, 0x90,
	0x3d, 0xba, 0xc5, 0x67, 0x00, 0x81, 0x6d, 0xa5, 0xc7, 0xb0, 0xa0, 0x9a, 0xa6, 0x7d, 0xa0, 0xb4,
	0x0c, 0xdc, 0x52, 0x89, 0xb6, 0xa7, 0x18, 0x0e, 0xbb, 0x8e, 0x8b, 0xb0, 0x37, 0x6b, 0xc7, 0xe5,
	0x79, 0x46, 0x50, 0xe6, 0xed, 0x25, 0x67, 0xdd, 0x6b, 0x5d, 0xfc, 0x8f, 0x21, 0x80, 0xc0, 0xc0,
	0xd2, 0xc7, 0x70, 0x89, 0x7d, 0x23, 0xc5, 0xb6, 0xf3, 0x15, 0x16, 0x37, 0xd8, 0x8d, 0x68, 0x55,
	0xdb, 0x47, 0x44, 0x60, 0xe5, 0x28, 0x49, 0x99, 0x52, 0x7c, 0xc1, 0x09, 0xaa, 0x5e, 0xbb, 0xb4,
	0x01, 0x57, 0x19, 0xbb, 0x77, 0x9b, 0x49, 0xb7, 0x5b, 0xaa, 0x61, 0x29, 0x96, 0xda, 0x42, 0x3e,
	0xc2, 0x10, 0x43, 0x58, 0xa4, 0x54, 0xec, 0xca, 0xd2, 0x26, 0xa3, 0xa1, 0xae, 0x2d, 0x30, 0x1e,
	0xc2, 0x45, 0x0f, 0xc3, 0xb6, 0x9a, 0x8a, 0xa9, 0xee, 0x22, 0xd3, 0x67, 0x1e, 0x66, 0xcc, 0x73,
	0x8c, 0xd9, 0xb6, 0x9a, 0xdb, 0xb4, 0x51, 0xb0, 0x3d, 0x80, 0xf9, 0x40, 0xf2, 0x6f, 0x6d, 0x2b,
	0xe8, 0x72, 0x24, 0xe0, 0x2a, 0x8b, 0x46, 0xc1, 0x75, 0x03, 0x66, 0x5a, 0xea, 0x5b, 0xb6, 0x11,
	0x63, 0x22, 0xab, 0x49, 0xf6, 0xbc, 0xaf, 0xf4, 0xe4, 0xa9, 0x96, 0xfa, 0xb6, 0x8c, 0x9b, 0xdb,
	0xec, 0x1d, 0xc5, 0xfe, 0x71, 0x1b, 0xb9, 0x87, 0x8a, 0x98, 0xe0, 0xbe, 0x5f, 0xb0, 0x6f, 0xef,
	0xe4, 0x39, 0xd6, 0x2a, 0xe2, 0x00, 0x77, 0x90, 0xc5, 0xcf, 0x61, 0x4c, 0xae, 0x16, 0xd8, 0x94,
	0xbe, 0x02, 0xe0, 0xb8, 0x76, 0xd3, 0x65, 0xd7, 0xcc, 0x99, 0x16, 0x27, 0xe4, 0x09, 0xfe, 0xa6,
	0xa4, 0x77, 0x79, 0xdb, 0x50, 0x97, 0xb7, 0x2d, 0x3e, 0x81, 0xa9, 0xf0, 0x04, 0x92, 0x6e, 0xc3,
	0x88, 0xae, 0xb2, 0x7c, 0x89, 0x86, 0xa6, 0xf9, 0x98, 0xc3, 0xf0, 0x7e, 0x65, 0x46, 0xb3, 0xf8,
	0x21, 0x4c, 0x47, 0xe6, 0xcb, 0xaf, 0xc5, 0xfc, 0xff, 0x87, 0x00, 0x82, 0x69, 0x22, 0x2d, 0xc2,
	0xb8, 0x26, 0xc4, 0xf4, 0x8e, 0x57, 0xfc, 0x67, 0xe9, 0x26, 0x9c, 0xd3, 0x31, 0x3b, 0x35, 0xd3,
	0x91, 0xe2, 0xd8, 0x86, 0x25, 0x46, 0x32, 0x4d, 0x5f, 0x17, 0x6c, 0x1d, 0x55, 0xe9, 0x4b, 0xe9,
	0x11, 0xe4, 0x5a, 0x48, 0x37, 0x54, 0xc5, 0xb0, 0x54, 0x8d, 0x18, 0x1d, 0x83, 0x1c, 0x46, 0xbf,
	0xe6, 0x94, 0xe7, 0x59, 0x7b, 0xc9, 0x6f, 0x16, 0x73, 0xee, 0x36, 0xcc, 0x52, 0x73, 0x69, 0xec,
	0x76, 0x5c, 0xdb, 0x55, 0xfd, 0x1d, 0xa9, 0x69, 0xf9, 0x5c, 0x4b, 0x7d, 0x5b, 0x50, 0x4d, 0x73,
	0x93, 0xbf, 0xa6, 0xa6, 0x25, 0xf7, 0x18, 0xae, 0xab, 0x74, 0x54, 0xb3, 0x8d, 0x84, 0x69, 0xc9,
	0x3d, 0x0a, 0xe7, 0xbe, 0xa4, 0xef, 0x18, 0xd5, 0x83, 0x08, 0xd5, 0x28, 0xa7, 0x7a, 0x10, 0x50,
	0xe5, 0x7f, 0x2b, 0x03, 0x10, 0x4c, 0x42, 0x69, 0x0e, 0xb2, 0x75, 0x79, 0xbd, 0x50, 0x54, 0xb6,
	0x8b, 0x2f, 0x8b, 0xdb, 0x4a, 0x65, 0xa7, 0x52, 0xcc, 0x9e, 0x91, 0x2e, 0xc0, 0x6c, 0xf8, 0xed,
	0x86, 0x5c, 0x2a, 0x6e, 0x65, 0x33, 0xd2, 0x3c, 0x48, 0xe1, 0xd7, 0x9b, 0xc5, 0xfa, 0x7a, 0x69,
	0x3b, 0x3b, 0x24, 0x2d, 0xc0, 0x85, 0xf0, 0xfb, 0xe2, 0xeb, 0x7a, 0xb1, 0x52, 0x2b, 0xbd, 0x2c,
	0x66, 0x87, 0xa5, 0x8b, 0x70, 0x3e, 0xdc, 0xf4, 0xb2, 0x28, 0x6f, 0xec, 0xd4, 0x8a, 0xd9, 0x91,
	0x8d, 0x29, 0x80, 0x75, 0x47, 0x04, 0xa9, 0xfc, 0xaf, 0x32, 0xc1, 0x8a, 0x2e, 0xb7, 0xfd, 0x8b,
	0x5d, 0x0f, 0x00, 0x30, 0xd2, 0xc4, 0xf5, 0x81, 0x4c, 0x64, 0xbf, 0x4e, 0x90, 0xf3, 0xfd, 0xba,
	0x09, 0x8c, 0x34, 0xce, 0xf5, 0x3e, 0x80, 0x69, 0xfb, 0x97, 0x84, 0xc4, 0x92, 0xe5, 0x71, 0x6d,
	0xdb, 0x4d, 0xc1, 0x60, 0x8a, 0x9f, 0xd2, 0xf7, 0x60, 0x5c, 0x75, 0xbc, 0xdb, 0x29, 0x7c, 0xe1,
	0x98, 0x89, 0x3a, 0x92, 0x3c, 0xa6, 0x7a, 0x3f, 0xf2, 0x7f, 0x97, 0x81, 0xa9, 0xb0, 0xa0, 0xd2,
	0x1d, 0x18, 0x73, 0xdb, 0xc1, 0x19, 0xdd, 0xc8, 0xc6, 0xdc, 0xf1, 0xd1, 0x52, 0x96, 0xa7, 0x10,
	0x2d, 0xd5, 0xd2, 0x55, 0x62, 0xbb, 0x87, 0xf2, 0x28, 0x25, 0x2a, 0xe9, 0xd2, 0x4d, 0x38, 0xcb,
	0xc2, 0x16, 0x5f, 0xe5, 0xc4, 0x4a, 0x4a, 0xa1, 0xca, 0xf4, 0xbd, 0xec, 0x35, 0x4b, 0xf7, 0xfc,
	0x5d, 0xca, 0xe1, 0xc4, 0x2c, 0x20, 0x50, 0x92, 0xbf, 0x53, 0x39, 0x07, 0x67, 0x55, 0xc7, 0x31,
	0xf4, 0xdc, 0x08, 0xdb, 0xed, 0xf4, 0x1e, 0xf2, 0xff, 0x1c, 0xd2, 0x6c, 0x68, 0xab, 0x70, 0xd0,
	0x22, 0x65, 0x27, 0xb9, 0x48, 0xb9, 0x14, 0x39, 0x62, 0xf8, 0x75, 0x76, 0x13, 0xdf, 0x85, 0x11,
	0xaa, 0x0a, 0xb6, 0x25, 0x3b, 0xb9, 0x7a, 0x3e, 0x61, 0x58, 0x32, 0x23, 0xe0, 0xe5, 0xcc, 0x4e,
	0xe8, 0x84, 0x33, 0xbe, 0x87, 0x78, 0x3f, 0x9e, 0x3f, 0xc6, 0x95, 0x94, 0xb4, 0x7d, 0x58, 0x8a,
	0x3a, 0x1a, 0xcf, 0xea, 0x2e, 0xc6, 0xac, 0xe8, 0xdb, 0x6b, 0x11, 0xc6, 0x1d, 0xd7, 0xb0, 0x29,
	0x39, 0x1b, 0xfa, 0x88, 0xec, 0x3f, 0xe7, 0xff, 0x35, 0x13, 0x3a, 0xd1, 0x08, 0xef, 0x42, 0xfe,
	0xc6, 0x94, 0xfb, 0x04, 0x26, 0xd9, 0x30, 0xfc, 0x9c, 0x73, 0xb8, 0x87, 0xeb, 0xf0, 0xb4, 0x0d,
	0x5c, 0xff, 0x37, 0xd7, 0xf7, 0x5f, 0x67, 0x60, 0x3e, 0xae, 0xf0, 0x13, 0xce, 0xa0, 0x9f, 0xfa,
	0x7b, 0xb4, 0x91, 0x32, 0xf2, 0x52, 0xb2, 0xf1, 0x3c, 0x76, 0xbe, 0x81, 0xcb, 0x53, 0xcc, 0x97,
	0xa1, 0x43, 0xb1, 0xae, 0x9d, 0xd1, 0xc7, 0x5d, 0xd9, 0xee, 0x95, 0x44, 0xe4, 0x84, 0x7a, 0xd2,
	0x0a, 0xf2, 0xe8, 0xa4, 0xfd, 0xd0, 0x9d, 0xe4, 0xea, 0xe8, 0x3b, 0x9b, 0x2b, 0xff, 0x4d, 0x50,
	0xf3, 0xf5, 0xd8, 0x05, 0xfd, 0x28, 0xee, 0xe2, 0xf9, 0xc4, 0xb1, 0xf4, 0xa8, 0x29, 0x1b, 0xa1,
	0xd3, 0xbc, 0xd3, 0xdc, 0xfb, 0xdc, 0x0d, 0x9d, 0x0d, 0xf7, 0xd8, 0xf6, 0xfc, 0xb4, 0xcb, 0x2a,
	0xd7, 0xfb, 0x8e, 0xa4, 0xcb, 0x36, 0xfb, 0xf1, 0x40, 0x10, 0x2a, 0x5b, 0x4f, 0xdc, 0x30, 0xaf,
	0xe3, 0x8e, 0x10, 0x2d, 0x5c, 0x1f, 0xc7, 0xad, 0xb2, 0x94, 0x38, 0x96, 0xa4, 0xca, 0xf5, 0xef,
	0x43, 0xfb, 0x62, 0x62, 0x22, 0xf6, 0x09, 0x3f, 0x0b, 0x30, 0x6e, 0xb5, 0x5b, 0xca, 0x9e, 0xc1,
	0xf3, 0xcd, 0x51, 0x79, 0xcc, 0x6a, 0xb7, 0x9e, 0x1b, 0x04, 0x4b, 0xcb, 0x30, 0x45, 0x9b, 0xd8,
	0xbf, 0x68, 0x30, 0x78, 0x46, 0x39, 0x2a, 0x83, 0xd5, 0x6e, 0xd5, 0x35, 0x27, 0x4c, 0xd1, 0xd6,
	0x39, 0xc5, 0x88, 0x4f, 0xf1, 0x42, 0xf7, 0x28, 0xf2, 0x30, 0x4d, 0x29, 0xd8, 0x09, 0x1e, 0x23,
	0x39, 0xcb, 0x48, 0x26, 0xad, 0x76, 0xab, 0xa4, 0xb5, 0x18, 0x4d, 0xbe, 0x12, 0xfa, 0x8f, 0x1b,
	0xc1, 0x0e, 0xa4, 0xf4, 0x01, 0x80, 0x1f, 0x6a, 0x70, 0x8f, 0x4d, 0x33, 0x7f, 0x80, 0xf2, 0x84,
	0x08, 0x34, 0x38, 0xff, 0xd3, 0xa1, 0xf8, 0xec, 0x3d, 0x8d, 0x32, 0xfd, 0x4e, 0xa4, 0x4c, 0xef,
	0xb3, 0x30, 0x78, 0x75, 0xfa, 0xfd, 0x58, 0x9d, 0xde, 0x37, 0x18, 0x89, 0x42, 0xfd, 0x03, 0x98,
	0x70, 0x6c, 0x53, 0x09, 0x17, 0xeb, 0x8b, 0x3d, 0xf9, 0xb0, 0x3c, 0xee, 0xd8, 0xa6, 0xa7, 0x82,
	0x1f, 0xc4, 0xe7, 0x65, 0xac, 0x60, 0xff, 0xa8, 0x6b, 0xb2, 0x2c, 0xf7, 0x76, 0xb0, 0xae, 0x99,
	0xf2, 0x3b, 0x43, 0x41, 0x08, 0xdf, 0x32, 0xed, 0x83, 0x67, 0x2a, 0x41, 0x5b, 0x86, 0x49, 0x90,
	0x2b, 0xbd, 0x0b, 0xa3, 0xd8, 0xd5, 0x14, 0xc3, 0xe1, 0x33, 0x24, 0xeb, 0x9f, 0xfc, 0xf2, 0x22,
	0x4a, 0x3e, 0x8b, 0x5d, 0xad, 0xe4, 0x50, 0x42, 0x1d, 0x13, 0x4a, 0x38, 0xd4, 0x8b, 0x50, 0xc7,
	0xa4, 0xe4, 0x50, 0x07, 0xa5, 0x88, 0xec, 0x70, 0xd8, 0x4b, 0x78, 0xc7, 0xb0, 0xab, 0xb1, 0xa3,
	0xe1, 0x85, 0xd0, 0xb9, 0xb1, 0x97, 0xd8, 0xfa, 0xa7, 0xc6, 0xef, 0xc1, 0xb8, 0x38, 0x86, 0x66,
	0x2e, 0x97, 0x78, 0x06, 0x3d, 0xc6, 0xcf, 0xa0, 0xa5, 0x0b, 0x30, 0xda, 0x71, 0x1b, 0x74, 0x72,
	0x8c, 0x32, 0xf7, 0x3c, 0xdb, 0x71, 0x1b, 0x25, 0x5d, 0x6c, 0x2e, 0x8c, 0xf5, 0xdc, 0x5c, 0xc8,
	0xd7, 0x82, 0xed, 0x27, 0xa1, 0x88, 0x50, 0xd4, 0x78, 0x08, 0xa3, 0x0d, 0xa6, 0x16, 0xae, 0x8c,
	0xf8, 0x32, 0x11, 0xd5, 0x9d, 0xcc, 0x89, 0xc3, 0xdb, 0x80, 0xdd, 0xa0, 0x03, 0x6d, 0x03, 0x76,
	0xb3, 0x05, 0xf1, 0xe1, 0x1f, 0x87, 0x60, 0x52, 0xb4, 0x7f, 0x8e, 0x0e, 0xa5, 0x55, 0x98, 0xf0,
	0x3e, 0xcb, 0x0a, 0x12, 0xe0, 0x39, 0xae, 0x2a, 0x4a, 0xb6, 0x29, 0xda, 0xe4, 0x80, 0x4c, 0xba,
	0x0c, 0x40, 0x6d, 0xc2, 0x75, 0xe6, 0x85, 0x0d, 0x6a, 0xa5, 0x97, 0x4c, 0x6d, 0x97, 0x01, 0xa8,
	0x59, 0x78, 0xab, 0x17, 0x35, 0xa8, 0xa1, 0xbc, 0xd6, 0xc0, 0x43, 0x46, 0x06, 0xf5, 0x90, 0xb3,
	0xfd, 0x3d, 0x24, 0x6c, 0xeb, 0xd1, 0x54, 0x5b, 0x87, 0xfd, 0x69, 0xac, 0xb7, 0x3f, 0x8d, 0x47,
	0xfc, 0x29, 0xff, 0x57, 0x43, 0x41, 0xc0, 0x8e, 0x68, 0xf7, 0x84, 0xa3, 0xca, 0x1a, 0x4c, 0x37,
	0x4c, 0xfb, 0x40, 0x69, 0xaa, 0x04, 0x29, 0xfb, 0xe8, 0x90, 0xcf, 0x0e, 0x49, 0x9c, 0xdb, 0x07,
	0x86, 0x93, 0x27, 0x1b, 0x21, 0x2b, 0x72, 0x57, 0x1d, 0xee, 0xbd, 0x0f, 0x76, 0x1d, 0xa6, 0x75,
	0xb6, 0xf4, 0x29, 0x2d, 0xd5, 0xdd, 0x47, 0x3a, 0x2f, 0xf5, 0xa7, 0xbc, 0x97, 0x65, 0xf6, 0x4e,
	0xba, 0x04, 0x13, 0x2e, 0x6a, 0x28, 0x9a, 0xdd, 0xb6, 0xf8, 0xff, 0xe0, 0xa1, 0xd3, 0xbe, 0x51,
	0xa0, 0xcf, 0xd2, 0x55, 0x98, 0x64, 0x1f, 0x74, 0x11, 0x5b, 0x51, 0x9b, 0xa2, 0xf6, 0x9b, 0xa0,
	0xaf, 0xea, 0xf6, 0x7a, 0x13, 0xe5, 0x7f, 0x96, 0x09, 0xb2, 0x8d, 0x04, 0x1d, 0x51, 0xcf, 0x7d,
	0x7f, 0x10, 0x35, 0x85, 0xf5, 0x11, 0x3e, 0x85, 0x1e, 0x4a, 0xcc, 0x4f, 0x12, 0x7a, 0x0a, 0x85,
	0xaa, 0x97, 0xdd, 0x73, 0x29, 0x9a, 0x72, 0x7d, 0xc7, 0x39, 0x1a, 0x3a, 0xa7, 0x4c, 0xc4, 0x1d,
	0xe8, 0x9c, 0x32, 0x91, 0x33, 0x98, 0xa9, 0xd7, 0x83, 0xa3, 0xb7, 0x38, 0xa5, 0xaf, 0xd1, 0xdb,
	0x16, 0x9c, 0x4f, 0xb8, 0xb8, 0x4e, 0xab, 0xee, 0xf0, 0xdd, 0xf5, 0xa0, 0xea, 0xee, 0xfa, 0x87,
	0x16, 0xd9, 0x4c, 0x9c, 0x78, 0x53, 0xde, 0xa9, 0x66, 0x87, 0xe2, 0x6f, 0x8b, 0x9b, 0xa5, 0x7a,
	0x76, 0xf8, 0xf6, 0xbf, 0x65, 0x60, 0x8c, 0xfb, 0x95, 0x94, 0x85, 0xa9, 0xf5, 0x6a, 0x55, 0xa9,
	0xbd, 0x2c, 0x88, 0x0e, 0x42, 0x6f, 0xea, 0x5b, 0xf5, 0x6a, 0x36, 0x23, 0x9d, 0x83, 0x49, 0xf1,
	0x86, 0xbe, 0x18, 0x0a, 0xbf, 0xd8, 0xac, 0xd4, 0xb2, 0xc3, 0xe1, 0x17, 0xb5, 0x52, 0x35, 0x3b,
	0x22, 0x9d, 0x87, 0x73, 0xfe, 0x8b, 0x17, 0x15, 0x45, 0xae, 0x16, 0xb2, 0x67, 0xa9, 0x34, 0xe2,
	0x65, 0xb9, 0xb6, 0x55, 0x67, 0x6f, 0x47, 0xc3, 0xfd, 0xc9, 0xf5, 0x5a, 0x35, 0x3b, 0x26, 0xcd,
	0x83, 0xe4, 0x4b, 0x20, 0xaf, 0x17, 0x8a, 0xf2, 0xce, 0x8b, 0x7a, 0x31, 0x3b, 0x2e, 0xcd, 0x00,
	0x88, 0xf7, 0xa5, 0x6a, 0x76, 0x22, 0xdc, 0xeb, 0x7a, 0xe5, 0x4d, 0x16, 0x6e, 0xff, 0x3f, 0x98,
	0x89, 0x5e, 0xd0, 0x91, 0x72, 0x30, 0xb7, 0x55, 0x92, 0x8b, 0xaf, 0xd6, 0xb7, 0xb7, 0x63, 0x7a,
	0x5c, 0x80, 0x0b, 0xf1, 0x16, 0xa1, 0xcb, 0x04, 0xa6, 0xcd, 0x62, 0xe5, 0x4d, 0x76, 0x48, 0x5a,
	0x84, 0xf9, 0x78, 0x8b, 0x5c, 0xfc, 0xac, 0x58, 0xa0, 0x5a, 0xfd, 0xa7, 0x0c, 0xcc, 0x44, 0xb7,
	0x1b, 0xa4, 0x2b, 0xb0, 0x50, 0x2b, 0x16, 0x5e, 0xc8, 0xa5, 0xfa, 0x1b, 0x45, 0x7e, 0xb1, 0x5d,
	0x8c, 0x89, 0x70, 0x15, 0x16, 0x13, 0x9b, 0x85, 0x1c, 0xbd, 0xd8, 0xb9, 0x30, 0x4b, 0x70, 0x29,
	0xb1, 0x59, 0x48, 0x24, 0xdd, 0x84, 0x7c, 0x22, 0x41, 0xa9, 0x5c, 0xdd, 0x2e, 0x15, 0x4a, 0x75,
	0x0f, 0x68, 0xe4, 0x76, 0x0b, 0x26, 0xfc, 0x1d, 0x0f, 0x69, 0x0a, 0xc6, 0xb7, 0x77, 0x9e, 0x09,
	0x11, 0x73, 0x30, 0x47, 0x9f, 0x76, 0x2a, 0x4a, 0xad, 0x58, 0xab, 0x79, 0x9f, 0xb1, 0xad, 0xcb,
	0x75, 0x6f, 0x9b, 0x27, 0xd6, 0x52, 0xac, 0x6c, 0x66, 0x87, 0xa4, 0x65, 0xb8, 0x9c, 0xc4, 0xa1,
	0xac, 0x57, 0x36, 0x19, 0xc5, 0xf0, 0xea, 0xdf, 0xcc, 0x00, 0x54, 0x0e, 0x84, 0xaa, 0xa4, 0x6f,
	0xba, 0x6e, 0x20, 0x17, 0x5c, 0xa4, 0x12, 0x24, 0x2d, 0xf7, 0xba, 0xe8, 0x2a, 0x66, 0xe7, 0xe2,
	0xb5, 0xfe, 0x57, 0x61, 0xcb, 0xb8, 0x99, 0x3f, 0x93, 0x80, 0xff, 0xc2, 0xd1, 0x4f, 0x10, 0xff,
	0x47, 0x5d, 0xf8, 0xde, 0x0c, 0x97, 0x6e, 0x0e, 0x70, 0xb1, 0x95, 0xf6, 0xf2, 0xee, 0x20, 0xb7,
	0x3d, 0xbd, 0xbe, 0xd4, 0xd0, 0x36, 0x8d, 0x7f, 0x9b, 0x4f, 0xba, 0x9e, 0x76, 0xbd, 0x92, 0xf6,
	0x72, 0x23, 0xf5, 0x36, 0xa0, 0x18, 0x4e, 0xd2, 0xcd, 0x29, 0x6e, 0x92, 0x1b, 0xfd, 0xae, 0x0f,
	0xf9, 0x5d, 0xbd, 0x93, 0x7e, 0xc9, 0xa8, 0x5f, 0x5f, 0xdc, 0x3c, 0x27, 0xdc, 0x57, 0x27, 0xb1,
	0x2f, 0x6e, 0xaa, 0xdb, 0x03, 0x5e, 0x1b, 0xa2, 0x3d, 0x7e, 0x7f, 0xd0, 0x9b, 0x38, 0x5e, 0xbf,
	0xad, 0x20, 0xcf, 0x8e, 0x5e, 0xa0, 0x90, 0xde, 0x1d, 0xe4, 0xca, 0x0b, 0xed, 0xf1, 0xd6, 0x40,
	0x17, 0x31, 0xbc, 0xee, 0x5e, 0xc7, 0xae, 0x1b, 0x70, 0xc3, 0x5d, 0x4d, 0x3e, 0x2c, 0xf7, 0xbb,
	0x58, 0xea, 0x77, 0x98, 0x9e, 0x8c, 0xcc, 0xcd, 0x74, 0x02, 0xc8, 0x7a, 0x0c, 0x99, 0x1b, 0xe5,
	0x46, 0xea, 0xc1, 0x78, 0x4f, 0x07, 0x48, 0x32, 0xc4, 0x57, 0x90, 0x8d, 0x9f, 0x64, 0x4a, 0xd7,
	0xfa, 0x9f, 0x25, 0x53, 0xfc, 0x7c, 0xca, 0x29, 0xa8, 0x00, 0x8f, 0x6d, 0xf2, 0x71, 0xbd, 0x2f,
	0xf5, 0xd8, 0x55, 0xf2, 0xe1, 0x97, 0xfb, 0x6e, 0x3b, 0xf5, 0x00, 0xe7, 0xaa, 0x3f, 0x11, 0xf0,
	0x66, 0x1c, 0x9c, 0x6b, 0xff, 0x9d, 0xf4, 0x3d, 0x24, 0xda, 0xc5, 0xcd, 0x01, 0x36, 0x68, 0x44,
	0x1c, 0x9e, 0xed, 0x2a, 0x4c, 0xa5, 0x7c, 0xca, 0x9e, 0x08, 0xed, 0xe2, 0x7a, 0x5a, 0x59, 0xdb,
	0xe5, 0x45, 0xa1, 0x7c, 0x52, 0xba, 0x91, 0x5a, 0x57, 0x25, 0x79, 0x51, 0x72, 0xee, 0x1b, 0x9d,
	0xce, 0xd1, 0x84, 0xae, 0x6b, 0x3a, 0xf7, 0xca, 0x29, 0xbb, 0xa6, 0x73, 0xcf, 0xc4, 0x30, 0x7f,
	0x66, 0x03, 0xbe, 0x1c, 0xdf, 0x53, 0x4d, 0x56, 0x17, 0xed, 0x8e, 0xb2, 0x3f, 0xf7, 0xff, 0x3b,
	0x00, 0x00, 0xff, 0xff, 0x3e, 0xce, 0xd0, 0x0c, 0x18, 0x55, 0x00, 0x00,
}
