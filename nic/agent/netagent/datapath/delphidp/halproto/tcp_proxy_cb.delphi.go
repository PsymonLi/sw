// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tcp_proxy_cb.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TcpCbKeyHandle is used to operate on a tcp_cb either by its key or handle
type TcpCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*TcpCbKeyHandle_TcpcbId
	//	*TcpCbKeyHandle_TcpcbHandle
	KeyOrHandle isTcpCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *TcpCbKeyHandle) Reset()                    { *m = TcpCbKeyHandle{} }
func (m *TcpCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*TcpCbKeyHandle) ProtoMessage()               {}
func (*TcpCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{0} }

type isTcpCbKeyHandle_KeyOrHandle interface{ isTcpCbKeyHandle_KeyOrHandle() }

type TcpCbKeyHandle_TcpcbId struct {
	TcpcbId uint32 `protobuf:"varint,1,opt,name=tcpcb_id,json=tcpcbId,oneof"`
}
type TcpCbKeyHandle_TcpcbHandle struct {
	TcpcbHandle uint64 `protobuf:"fixed64,2,opt,name=tcpcb_handle,json=tcpcbHandle,oneof"`
}

func (*TcpCbKeyHandle_TcpcbId) isTcpCbKeyHandle_KeyOrHandle()     {}
func (*TcpCbKeyHandle_TcpcbHandle) isTcpCbKeyHandle_KeyOrHandle() {}

func (m *TcpCbKeyHandle) GetKeyOrHandle() isTcpCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TcpCbKeyHandle) GetTcpcbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*TcpCbKeyHandle_TcpcbId); ok {
		return x.TcpcbId
	}
	return 0
}

func (m *TcpCbKeyHandle) GetTcpcbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*TcpCbKeyHandle_TcpcbHandle); ok {
		return x.TcpcbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TcpCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TcpCbKeyHandle_OneofMarshaler, _TcpCbKeyHandle_OneofUnmarshaler, _TcpCbKeyHandle_OneofSizer, []interface{}{
		(*TcpCbKeyHandle_TcpcbId)(nil),
		(*TcpCbKeyHandle_TcpcbHandle)(nil),
	}
}

func _TcpCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TcpCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TcpCbKeyHandle_TcpcbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TcpcbId))
	case *TcpCbKeyHandle_TcpcbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.TcpcbHandle))
	case nil:
	default:
		return fmt.Errorf("TcpCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _TcpCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TcpCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.tcpcb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &TcpCbKeyHandle_TcpcbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.tcpcb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &TcpCbKeyHandle_TcpcbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _TcpCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TcpCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TcpCbKeyHandle_TcpcbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TcpcbId))
	case *TcpCbKeyHandle_TcpcbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TcpCbSpec captures all the tcp_cb level configuration
type TcpCbSpec struct {
	KeyOrHandle        *TcpCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	RcvNxt             uint32          `protobuf:"varint,2,opt,name=rcv_nxt,json=rcvNxt" json:"rcv_nxt,omitempty"`
	SndNxt             uint32          `protobuf:"varint,3,opt,name=snd_nxt,json=sndNxt" json:"snd_nxt,omitempty"`
	SndUna             uint32          `protobuf:"varint,4,opt,name=snd_una,json=sndUna" json:"snd_una,omitempty"`
	RcvTsval           uint32          `protobuf:"varint,5,opt,name=rcv_tsval,json=rcvTsval" json:"rcv_tsval,omitempty"`
	TsRecent           uint32          `protobuf:"varint,6,opt,name=ts_recent,json=tsRecent" json:"ts_recent,omitempty"`
	SerqBase           uint64          `protobuf:"fixed64,7,opt,name=serq_base,json=serqBase" json:"serq_base,omitempty"`
	DebugDol           uint32          `protobuf:"varint,8,opt,name=debug_dol,json=debugDol" json:"debug_dol,omitempty"`
	SesqBase           uint64          `protobuf:"fixed64,9,opt,name=sesq_base,json=sesqBase" json:"sesq_base,omitempty"`
	SesqPi             uint32          `protobuf:"varint,10,opt,name=sesq_pi,json=sesqPi" json:"sesq_pi,omitempty"`
	SesqCi             uint32          `protobuf:"varint,11,opt,name=sesq_ci,json=sesqCi" json:"sesq_ci,omitempty"`
	SndWnd             uint32          `protobuf:"varint,12,opt,name=snd_wnd,json=sndWnd" json:"snd_wnd,omitempty"`
	SndCwnd            uint32          `protobuf:"varint,13,opt,name=snd_cwnd,json=sndCwnd" json:"snd_cwnd,omitempty"`
	RcvMss             uint32          `protobuf:"varint,14,opt,name=rcv_mss,json=rcvMss" json:"rcv_mss,omitempty"`
	SourcePort         uint32          `protobuf:"varint,15,opt,name=source_port,json=sourcePort" json:"source_port,omitempty"`
	DestPort           uint32          `protobuf:"varint,16,opt,name=dest_port,json=destPort" json:"dest_port,omitempty"`
	HeaderTemplate     []byte          `protobuf:"bytes,17,opt,name=header_template,json=headerTemplate,proto3" json:"header_template,omitempty"`
	State              uint32          `protobuf:"varint,18,opt,name=state" json:"state,omitempty"`
	SourceLif          uint32          `protobuf:"varint,19,opt,name=source_lif,json=sourceLif" json:"source_lif,omitempty"`
	AsesqBase          uint64          `protobuf:"fixed64,20,opt,name=asesq_base,json=asesqBase" json:"asesq_base,omitempty"`
	AsesqPi            uint32          `protobuf:"varint,21,opt,name=asesq_pi,json=asesqPi" json:"asesq_pi,omitempty"`
	AsesqCi            uint32          `protobuf:"varint,22,opt,name=asesq_ci,json=asesqCi" json:"asesq_ci,omitempty"`
	DebugDolTx         uint32          `protobuf:"varint,23,opt,name=debug_dol_tx,json=debugDolTx" json:"debug_dol_tx,omitempty"`
	HeaderLen          uint32          `protobuf:"varint,24,opt,name=header_len,json=headerLen" json:"header_len,omitempty"`
	PendingAckSend     bool            `protobuf:"varint,25,opt,name=pending_ack_send,json=pendingAckSend" json:"pending_ack_send,omitempty"`
	L7ProxyType        AppRedirType    `protobuf:"varint,26,opt,name=l7_proxy_type,json=l7ProxyType,enum=types.AppRedirType" json:"l7_proxy_type,omitempty"`
	SesqRetxCi         uint32          `protobuf:"varint,27,opt,name=sesq_retx_ci,json=sesqRetxCi" json:"sesq_retx_ci,omitempty"`
	RetxSndUna         uint64          `protobuf:"varint,28,opt,name=retx_snd_una,json=retxSndUna" json:"retx_snd_una,omitempty"`
	RxTs               uint64          `protobuf:"varint,29,opt,name=rx_ts,json=rxTs" json:"rx_ts,omitempty"`
	Rto                uint64          `protobuf:"varint,30,opt,name=rto" json:"rto,omitempty"`
	SndCwndCnt         uint32          `protobuf:"varint,31,opt,name=snd_cwnd_cnt,json=sndCwndCnt" json:"snd_cwnd_cnt,omitempty"`
	DebugDolTblsetaddr uint32          `protobuf:"varint,32,opt,name=debug_dol_tblsetaddr,json=debugDolTblsetaddr" json:"debug_dol_tblsetaddr,omitempty"`
	SerqPi             uint32          `protobuf:"varint,33,opt,name=serq_pi,json=serqPi" json:"serq_pi,omitempty"`
	PredFlags          uint32          `protobuf:"varint,34,opt,name=pred_flags,json=predFlags" json:"pred_flags,omitempty"`
	OtherQid           uint32          `protobuf:"varint,35,opt,name=other_qid,json=otherQid" json:"other_qid,omitempty"`
	PacketsOut         uint32          `protobuf:"varint,36,opt,name=packets_out,json=packetsOut" json:"packets_out,omitempty"`
	RtoPi              uint32          `protobuf:"varint,37,opt,name=rto_pi,json=rtoPi" json:"rto_pi,omitempty"`
	RetxTimerCi        uint32          `protobuf:"varint,38,opt,name=retx_timer_ci,json=retxTimerCi" json:"retx_timer_ci,omitempty"`
	RtoBackoff         uint32          `protobuf:"varint,39,opt,name=rto_backoff,json=rtoBackoff" json:"rto_backoff,omitempty"`
	CpuId              uint32          `protobuf:"varint,40,opt,name=cpu_id,json=cpuId" json:"cpu_id,omitempty"`
	SerqCi             uint32          `protobuf:"varint,41,opt,name=serq_ci,json=serqCi" json:"serq_ci,omitempty"`
}

func (m *TcpCbSpec) Reset()                    { *m = TcpCbSpec{} }
func (m *TcpCbSpec) String() string            { return proto.CompactTextString(m) }
func (*TcpCbSpec) ProtoMessage()               {}
func (*TcpCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{1} }

func (m *TcpCbSpec) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TcpCbSpec) GetRcvNxt() uint32 {
	if m != nil {
		return m.RcvNxt
	}
	return 0
}

func (m *TcpCbSpec) GetSndNxt() uint32 {
	if m != nil {
		return m.SndNxt
	}
	return 0
}

func (m *TcpCbSpec) GetSndUna() uint32 {
	if m != nil {
		return m.SndUna
	}
	return 0
}

func (m *TcpCbSpec) GetRcvTsval() uint32 {
	if m != nil {
		return m.RcvTsval
	}
	return 0
}

func (m *TcpCbSpec) GetTsRecent() uint32 {
	if m != nil {
		return m.TsRecent
	}
	return 0
}

func (m *TcpCbSpec) GetSerqBase() uint64 {
	if m != nil {
		return m.SerqBase
	}
	return 0
}

func (m *TcpCbSpec) GetDebugDol() uint32 {
	if m != nil {
		return m.DebugDol
	}
	return 0
}

func (m *TcpCbSpec) GetSesqBase() uint64 {
	if m != nil {
		return m.SesqBase
	}
	return 0
}

func (m *TcpCbSpec) GetSesqPi() uint32 {
	if m != nil {
		return m.SesqPi
	}
	return 0
}

func (m *TcpCbSpec) GetSesqCi() uint32 {
	if m != nil {
		return m.SesqCi
	}
	return 0
}

func (m *TcpCbSpec) GetSndWnd() uint32 {
	if m != nil {
		return m.SndWnd
	}
	return 0
}

func (m *TcpCbSpec) GetSndCwnd() uint32 {
	if m != nil {
		return m.SndCwnd
	}
	return 0
}

func (m *TcpCbSpec) GetRcvMss() uint32 {
	if m != nil {
		return m.RcvMss
	}
	return 0
}

func (m *TcpCbSpec) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *TcpCbSpec) GetDestPort() uint32 {
	if m != nil {
		return m.DestPort
	}
	return 0
}

func (m *TcpCbSpec) GetHeaderTemplate() []byte {
	if m != nil {
		return m.HeaderTemplate
	}
	return nil
}

func (m *TcpCbSpec) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *TcpCbSpec) GetSourceLif() uint32 {
	if m != nil {
		return m.SourceLif
	}
	return 0
}

func (m *TcpCbSpec) GetAsesqBase() uint64 {
	if m != nil {
		return m.AsesqBase
	}
	return 0
}

func (m *TcpCbSpec) GetAsesqPi() uint32 {
	if m != nil {
		return m.AsesqPi
	}
	return 0
}

func (m *TcpCbSpec) GetAsesqCi() uint32 {
	if m != nil {
		return m.AsesqCi
	}
	return 0
}

func (m *TcpCbSpec) GetDebugDolTx() uint32 {
	if m != nil {
		return m.DebugDolTx
	}
	return 0
}

func (m *TcpCbSpec) GetHeaderLen() uint32 {
	if m != nil {
		return m.HeaderLen
	}
	return 0
}

func (m *TcpCbSpec) GetPendingAckSend() bool {
	if m != nil {
		return m.PendingAckSend
	}
	return false
}

func (m *TcpCbSpec) GetL7ProxyType() AppRedirType {
	if m != nil {
		return m.L7ProxyType
	}
	return AppRedirType_APP_REDIR_TYPE_NONE
}

func (m *TcpCbSpec) GetSesqRetxCi() uint32 {
	if m != nil {
		return m.SesqRetxCi
	}
	return 0
}

func (m *TcpCbSpec) GetRetxSndUna() uint64 {
	if m != nil {
		return m.RetxSndUna
	}
	return 0
}

func (m *TcpCbSpec) GetRxTs() uint64 {
	if m != nil {
		return m.RxTs
	}
	return 0
}

func (m *TcpCbSpec) GetRto() uint64 {
	if m != nil {
		return m.Rto
	}
	return 0
}

func (m *TcpCbSpec) GetSndCwndCnt() uint32 {
	if m != nil {
		return m.SndCwndCnt
	}
	return 0
}

func (m *TcpCbSpec) GetDebugDolTblsetaddr() uint32 {
	if m != nil {
		return m.DebugDolTblsetaddr
	}
	return 0
}

func (m *TcpCbSpec) GetSerqPi() uint32 {
	if m != nil {
		return m.SerqPi
	}
	return 0
}

func (m *TcpCbSpec) GetPredFlags() uint32 {
	if m != nil {
		return m.PredFlags
	}
	return 0
}

func (m *TcpCbSpec) GetOtherQid() uint32 {
	if m != nil {
		return m.OtherQid
	}
	return 0
}

func (m *TcpCbSpec) GetPacketsOut() uint32 {
	if m != nil {
		return m.PacketsOut
	}
	return 0
}

func (m *TcpCbSpec) GetRtoPi() uint32 {
	if m != nil {
		return m.RtoPi
	}
	return 0
}

func (m *TcpCbSpec) GetRetxTimerCi() uint32 {
	if m != nil {
		return m.RetxTimerCi
	}
	return 0
}

func (m *TcpCbSpec) GetRtoBackoff() uint32 {
	if m != nil {
		return m.RtoBackoff
	}
	return 0
}

func (m *TcpCbSpec) GetCpuId() uint32 {
	if m != nil {
		return m.CpuId
	}
	return 0
}

func (m *TcpCbSpec) GetSerqCi() uint32 {
	if m != nil {
		return m.SerqCi
	}
	return 0
}

// TcpCbRequestMsg is batched add or modify tcpcb request
type TcpCbRequestMsg struct {
	Request []*TcpCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbRequestMsg) Reset()                    { *m = TcpCbRequestMsg{} }
func (m *TcpCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbRequestMsg) ProtoMessage()               {}
func (*TcpCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{2} }

func (m *TcpCbRequestMsg) GetRequest() []*TcpCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpCbStatus is the operational status of a given tcpcb
type TcpCbStatus struct {
	TcpcbHandle uint64 `protobuf:"fixed64,1,opt,name=tcpcb_handle,json=tcpcbHandle" json:"tcpcb_handle,omitempty"`
}

func (m *TcpCbStatus) Reset()                    { *m = TcpCbStatus{} }
func (m *TcpCbStatus) String() string            { return proto.CompactTextString(m) }
func (*TcpCbStatus) ProtoMessage()               {}
func (*TcpCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{3} }

func (m *TcpCbStatus) GetTcpcbHandle() uint64 {
	if m != nil {
		return m.TcpcbHandle
	}
	return 0
}

// TcpCbResponse is response to TcpCbSpec
type TcpCbResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	TcpcbStatus *TcpCbStatus `protobuf:"bytes,2,opt,name=tcpcb_status,json=tcpcbStatus" json:"tcpcb_status,omitempty"`
}

func (m *TcpCbResponse) Reset()                    { *m = TcpCbResponse{} }
func (m *TcpCbResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpCbResponse) ProtoMessage()               {}
func (*TcpCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{4} }

func (m *TcpCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpCbResponse) GetTcpcbStatus() *TcpCbStatus {
	if m != nil {
		return m.TcpcbStatus
	}
	return nil
}

// TcpCbResponseMsg is batched response to TcpCbRequestMsg
type TcpCbResponseMsg struct {
	Response []*TcpCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TcpCbResponseMsg) Reset()                    { *m = TcpCbResponseMsg{} }
func (m *TcpCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbResponseMsg) ProtoMessage()               {}
func (*TcpCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{5} }

func (m *TcpCbResponseMsg) GetResponse() []*TcpCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TcpCbDeleteRequest is used to delete a tcpcb
type TcpCbDeleteRequest struct {
	KeyOrHandle *TcpCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TcpCbDeleteRequest) Reset()                    { *m = TcpCbDeleteRequest{} }
func (m *TcpCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteRequest) ProtoMessage()               {}
func (*TcpCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{6} }

func (m *TcpCbDeleteRequest) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TcpCbDeleteRequestMsg is used to delete a batch of tcpcbs
type TcpCbDeleteRequestMsg struct {
	Request []*TcpCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbDeleteRequestMsg) Reset()                    { *m = TcpCbDeleteRequestMsg{} }
func (m *TcpCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteRequestMsg) ProtoMessage()               {}
func (*TcpCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{7} }

func (m *TcpCbDeleteRequestMsg) GetRequest() []*TcpCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpCbDeleteResponseMsg is batched response to TcpCbDeleteRequestMsg
type TcpCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *TcpCbDeleteResponseMsg) Reset()                    { *m = TcpCbDeleteResponseMsg{} }
func (m *TcpCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteResponseMsg) ProtoMessage()               {}
func (*TcpCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{8} }

func (m *TcpCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// TcpCbGetRequest is used to get information about a tcpcb
type TcpCbGetRequest struct {
	KeyOrHandle *TcpCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TcpCbGetRequest) Reset()                    { *m = TcpCbGetRequest{} }
func (m *TcpCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetRequest) ProtoMessage()               {}
func (*TcpCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{9} }

func (m *TcpCbGetRequest) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TcpCbGetRequestMsg is batched GET requests for tcpcbs
type TcpCbGetRequestMsg struct {
	Request []*TcpCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbGetRequestMsg) Reset()                    { *m = TcpCbGetRequestMsg{} }
func (m *TcpCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetRequestMsg) ProtoMessage()               {}
func (*TcpCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{10} }

func (m *TcpCbGetRequestMsg) GetRequest() []*TcpCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpCbStats is the statistics object for each tcpcb
type TcpCbStats struct {
	BytesRcvd            uint64 `protobuf:"varint,1,opt,name=bytes_rcvd,json=bytesRcvd" json:"bytes_rcvd,omitempty"`
	PktsRcvd             uint64 `protobuf:"varint,2,opt,name=pkts_rcvd,json=pktsRcvd" json:"pkts_rcvd,omitempty"`
	PagesAlloced         uint64 `protobuf:"varint,3,opt,name=pages_alloced,json=pagesAlloced" json:"pages_alloced,omitempty"`
	DescAlloced          uint64 `protobuf:"varint,4,opt,name=desc_alloced,json=descAlloced" json:"desc_alloced,omitempty"`
	DebugNumPktToMem     uint64 `protobuf:"varint,5,opt,name=debug_num_pkt_to_mem,json=debugNumPktToMem" json:"debug_num_pkt_to_mem,omitempty"`
	DebugNumPhvToMem     uint64 `protobuf:"varint,6,opt,name=debug_num_phv_to_mem,json=debugNumPhvToMem" json:"debug_num_phv_to_mem,omitempty"`
	DebugAtomicDelta     uint32 `protobuf:"varint,8,opt,name=debug_atomic_delta,json=debugAtomicDelta" json:"debug_atomic_delta,omitempty"`
	DebugAtomic0Incr1247 uint32 `protobuf:"varint,9,opt,name=debug_atomic0_incr1247,json=debugAtomic0Incr1247" json:"debug_atomic0_incr1247,omitempty"`
	DebugAtomic1Incr247  uint32 `protobuf:"varint,10,opt,name=debug_atomic1_incr247,json=debugAtomic1Incr247" json:"debug_atomic1_incr247,omitempty"`
	DebugAtomic2Incr47   uint32 `protobuf:"varint,11,opt,name=debug_atomic2_incr47,json=debugAtomic2Incr47" json:"debug_atomic2_incr47,omitempty"`
	DebugAtomic3Incr47   uint32 `protobuf:"varint,12,opt,name=debug_atomic3_incr47,json=debugAtomic3Incr47" json:"debug_atomic3_incr47,omitempty"`
	DebugAtomic4Incr7    uint32 `protobuf:"varint,13,opt,name=debug_atomic4_incr7,json=debugAtomic4Incr7" json:"debug_atomic4_incr7,omitempty"`
	DebugAtomic5Incr7    uint32 `protobuf:"varint,14,opt,name=debug_atomic5_incr7,json=debugAtomic5Incr7" json:"debug_atomic5_incr7,omitempty"`
	DebugAtomic6Incr7    uint32 `protobuf:"varint,15,opt,name=debug_atomic6_incr7,json=debugAtomic6Incr7" json:"debug_atomic6_incr7,omitempty"`
	BytesAcked           uint64 `protobuf:"varint,16,opt,name=bytes_acked,json=bytesAcked" json:"bytes_acked,omitempty"`
	SlowPathCnt          uint64 `protobuf:"varint,17,opt,name=slow_path_cnt,json=slowPathCnt" json:"slow_path_cnt,omitempty"`
	SerqFullCnt          uint64 `protobuf:"varint,18,opt,name=serq_full_cnt,json=serqFullCnt" json:"serq_full_cnt,omitempty"`
	OooCnt               uint64 `protobuf:"varint,19,opt,name=ooo_cnt,json=oooCnt" json:"ooo_cnt,omitempty"`
	BytesSent            uint64 `protobuf:"varint,10001,opt,name=bytes_sent,json=bytesSent" json:"bytes_sent,omitempty"`
	PktsSent             uint64 `protobuf:"varint,10002,opt,name=pkts_sent,json=pktsSent" json:"pkts_sent,omitempty"`
	DebugNumPhvToPkt     uint64 `protobuf:"varint,10003,opt,name=debug_num_phv_to_pkt,json=debugNumPhvToPkt" json:"debug_num_phv_to_pkt,omitempty"`
	DebugNumMemToPkt     uint64 `protobuf:"varint,10004,opt,name=debug_num_mem_to_pkt,json=debugNumMemToPkt" json:"debug_num_mem_to_pkt,omitempty"`
	SesqPi               uint32 `protobuf:"varint,10005,opt,name=sesq_pi,json=sesqPi" json:"sesq_pi,omitempty"`
	SesqCi               uint32 `protobuf:"varint,10006,opt,name=sesq_ci,json=sesqCi" json:"sesq_ci,omitempty"`
	SendAckPi            uint32 `protobuf:"varint,10007,opt,name=send_ack_pi,json=sendAckPi" json:"send_ack_pi,omitempty"`
	SendAckCi            uint32 `protobuf:"varint,10008,opt,name=send_ack_ci,json=sendAckCi" json:"send_ack_ci,omitempty"`
	DelAckPi             uint32 `protobuf:"varint,10009,opt,name=del_ack_pi,json=delAckPi" json:"del_ack_pi,omitempty"`
	DelAckCi             uint32 `protobuf:"varint,10010,opt,name=del_ack_ci,json=delAckCi" json:"del_ack_ci,omitempty"`
	RetxTimerPi          uint32 `protobuf:"varint,10011,opt,name=retx_timer_pi,json=retxTimerPi" json:"retx_timer_pi,omitempty"`
	RetxTimerCi          uint32 `protobuf:"varint,10012,opt,name=retx_timer_ci,json=retxTimerCi" json:"retx_timer_ci,omitempty"`
	AsesqPi              uint32 `protobuf:"varint,10013,opt,name=asesq_pi,json=asesqPi" json:"asesq_pi,omitempty"`
	AsesqCi              uint32 `protobuf:"varint,10014,opt,name=asesq_ci,json=asesqCi" json:"asesq_ci,omitempty"`
	PendingTxPi          uint32 `protobuf:"varint,10015,opt,name=pending_tx_pi,json=pendingTxPi" json:"pending_tx_pi,omitempty"`
	PendingTxCi          uint32 `protobuf:"varint,10016,opt,name=pending_tx_ci,json=pendingTxCi" json:"pending_tx_ci,omitempty"`
	FastRetransPi        uint32 `protobuf:"varint,10017,opt,name=fast_retrans_pi,json=fastRetransPi" json:"fast_retrans_pi,omitempty"`
	FastRetransCi        uint32 `protobuf:"varint,10018,opt,name=fast_retrans_ci,json=fastRetransCi" json:"fast_retrans_ci,omitempty"`
	CleanRetxPi          uint32 `protobuf:"varint,10019,opt,name=clean_retx_pi,json=cleanRetxPi" json:"clean_retx_pi,omitempty"`
	CleanRetxCi          uint32 `protobuf:"varint,10020,opt,name=clean_retx_ci,json=cleanRetxCi" json:"clean_retx_ci,omitempty"`
	PacketsOut           uint32 `protobuf:"varint,10021,opt,name=packets_out,json=packetsOut" json:"packets_out,omitempty"`
	RtoPi                uint32 `protobuf:"varint,10022,opt,name=rto_pi,json=rtoPi" json:"rto_pi,omitempty"`
	SesqRetxCi           uint32 `protobuf:"varint,10023,opt,name=sesq_retx_ci,json=sesqRetxCi" json:"sesq_retx_ci,omitempty"`
	AsesqRetxCi          uint32 `protobuf:"varint,10024,opt,name=asesq_retx_ci,json=asesqRetxCi" json:"asesq_retx_ci,omitempty"`
	TxRingPi             uint32 `protobuf:"varint,10025,opt,name=tx_ring_pi,json=txRingPi" json:"tx_ring_pi,omitempty"`
	PartialAckCnt        uint32 `protobuf:"varint,10026,opt,name=partial_ack_cnt,json=partialAckCnt" json:"partial_ack_cnt,omitempty"`
}

func (m *TcpCbStats) Reset()                    { *m = TcpCbStats{} }
func (m *TcpCbStats) String() string            { return proto.CompactTextString(m) }
func (*TcpCbStats) ProtoMessage()               {}
func (*TcpCbStats) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{11} }

func (m *TcpCbStats) GetBytesRcvd() uint64 {
	if m != nil {
		return m.BytesRcvd
	}
	return 0
}

func (m *TcpCbStats) GetPktsRcvd() uint64 {
	if m != nil {
		return m.PktsRcvd
	}
	return 0
}

func (m *TcpCbStats) GetPagesAlloced() uint64 {
	if m != nil {
		return m.PagesAlloced
	}
	return 0
}

func (m *TcpCbStats) GetDescAlloced() uint64 {
	if m != nil {
		return m.DescAlloced
	}
	return 0
}

func (m *TcpCbStats) GetDebugNumPktToMem() uint64 {
	if m != nil {
		return m.DebugNumPktToMem
	}
	return 0
}

func (m *TcpCbStats) GetDebugNumPhvToMem() uint64 {
	if m != nil {
		return m.DebugNumPhvToMem
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomicDelta() uint32 {
	if m != nil {
		return m.DebugAtomicDelta
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic0Incr1247() uint32 {
	if m != nil {
		return m.DebugAtomic0Incr1247
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic1Incr247() uint32 {
	if m != nil {
		return m.DebugAtomic1Incr247
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic2Incr47() uint32 {
	if m != nil {
		return m.DebugAtomic2Incr47
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic3Incr47() uint32 {
	if m != nil {
		return m.DebugAtomic3Incr47
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic4Incr7() uint32 {
	if m != nil {
		return m.DebugAtomic4Incr7
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic5Incr7() uint32 {
	if m != nil {
		return m.DebugAtomic5Incr7
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic6Incr7() uint32 {
	if m != nil {
		return m.DebugAtomic6Incr7
	}
	return 0
}

func (m *TcpCbStats) GetBytesAcked() uint64 {
	if m != nil {
		return m.BytesAcked
	}
	return 0
}

func (m *TcpCbStats) GetSlowPathCnt() uint64 {
	if m != nil {
		return m.SlowPathCnt
	}
	return 0
}

func (m *TcpCbStats) GetSerqFullCnt() uint64 {
	if m != nil {
		return m.SerqFullCnt
	}
	return 0
}

func (m *TcpCbStats) GetOooCnt() uint64 {
	if m != nil {
		return m.OooCnt
	}
	return 0
}

func (m *TcpCbStats) GetBytesSent() uint64 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

func (m *TcpCbStats) GetPktsSent() uint64 {
	if m != nil {
		return m.PktsSent
	}
	return 0
}

func (m *TcpCbStats) GetDebugNumPhvToPkt() uint64 {
	if m != nil {
		return m.DebugNumPhvToPkt
	}
	return 0
}

func (m *TcpCbStats) GetDebugNumMemToPkt() uint64 {
	if m != nil {
		return m.DebugNumMemToPkt
	}
	return 0
}

func (m *TcpCbStats) GetSesqPi() uint32 {
	if m != nil {
		return m.SesqPi
	}
	return 0
}

func (m *TcpCbStats) GetSesqCi() uint32 {
	if m != nil {
		return m.SesqCi
	}
	return 0
}

func (m *TcpCbStats) GetSendAckPi() uint32 {
	if m != nil {
		return m.SendAckPi
	}
	return 0
}

func (m *TcpCbStats) GetSendAckCi() uint32 {
	if m != nil {
		return m.SendAckCi
	}
	return 0
}

func (m *TcpCbStats) GetDelAckPi() uint32 {
	if m != nil {
		return m.DelAckPi
	}
	return 0
}

func (m *TcpCbStats) GetDelAckCi() uint32 {
	if m != nil {
		return m.DelAckCi
	}
	return 0
}

func (m *TcpCbStats) GetRetxTimerPi() uint32 {
	if m != nil {
		return m.RetxTimerPi
	}
	return 0
}

func (m *TcpCbStats) GetRetxTimerCi() uint32 {
	if m != nil {
		return m.RetxTimerCi
	}
	return 0
}

func (m *TcpCbStats) GetAsesqPi() uint32 {
	if m != nil {
		return m.AsesqPi
	}
	return 0
}

func (m *TcpCbStats) GetAsesqCi() uint32 {
	if m != nil {
		return m.AsesqCi
	}
	return 0
}

func (m *TcpCbStats) GetPendingTxPi() uint32 {
	if m != nil {
		return m.PendingTxPi
	}
	return 0
}

func (m *TcpCbStats) GetPendingTxCi() uint32 {
	if m != nil {
		return m.PendingTxCi
	}
	return 0
}

func (m *TcpCbStats) GetFastRetransPi() uint32 {
	if m != nil {
		return m.FastRetransPi
	}
	return 0
}

func (m *TcpCbStats) GetFastRetransCi() uint32 {
	if m != nil {
		return m.FastRetransCi
	}
	return 0
}

func (m *TcpCbStats) GetCleanRetxPi() uint32 {
	if m != nil {
		return m.CleanRetxPi
	}
	return 0
}

func (m *TcpCbStats) GetCleanRetxCi() uint32 {
	if m != nil {
		return m.CleanRetxCi
	}
	return 0
}

func (m *TcpCbStats) GetPacketsOut() uint32 {
	if m != nil {
		return m.PacketsOut
	}
	return 0
}

func (m *TcpCbStats) GetRtoPi() uint32 {
	if m != nil {
		return m.RtoPi
	}
	return 0
}

func (m *TcpCbStats) GetSesqRetxCi() uint32 {
	if m != nil {
		return m.SesqRetxCi
	}
	return 0
}

func (m *TcpCbStats) GetAsesqRetxCi() uint32 {
	if m != nil {
		return m.AsesqRetxCi
	}
	return 0
}

func (m *TcpCbStats) GetTxRingPi() uint32 {
	if m != nil {
		return m.TxRingPi
	}
	return 0
}

func (m *TcpCbStats) GetPartialAckCnt() uint32 {
	if m != nil {
		return m.PartialAckCnt
	}
	return 0
}

// TcpCbGetResponse captures all the information about a tcpcb
// only if api_status indicates success, other fields are valid
type TcpCbGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *TcpCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *TcpCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *TcpCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *TcpCbGetResponse) Reset()                    { *m = TcpCbGetResponse{} }
func (m *TcpCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetResponse) ProtoMessage()               {}
func (*TcpCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{12} }

func (m *TcpCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpCbGetResponse) GetSpec() *TcpCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TcpCbGetResponse) GetStatus() *TcpCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TcpCbGetResponse) GetStats() *TcpCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// TcpCbGetResponseMsg is batched response to TcpCbGetRequestMsg
type TcpCbGetResponseMsg struct {
	Response []*TcpCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TcpCbGetResponseMsg) Reset()                    { *m = TcpCbGetResponseMsg{} }
func (m *TcpCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetResponseMsg) ProtoMessage()               {}
func (*TcpCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{13} }

func (m *TcpCbGetResponseMsg) GetResponse() []*TcpCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*TcpCbKeyHandle)(nil), "halproto.TcpCbKeyHandle")
	proto.RegisterType((*TcpCbSpec)(nil), "halproto.TcpCbSpec")
	proto.RegisterType((*TcpCbRequestMsg)(nil), "halproto.TcpCbRequestMsg")
	proto.RegisterType((*TcpCbStatus)(nil), "halproto.TcpCbStatus")
	proto.RegisterType((*TcpCbResponse)(nil), "halproto.TcpCbResponse")
	proto.RegisterType((*TcpCbResponseMsg)(nil), "halproto.TcpCbResponseMsg")
	proto.RegisterType((*TcpCbDeleteRequest)(nil), "halproto.TcpCbDeleteRequest")
	proto.RegisterType((*TcpCbDeleteRequestMsg)(nil), "halproto.TcpCbDeleteRequestMsg")
	proto.RegisterType((*TcpCbDeleteResponseMsg)(nil), "halproto.TcpCbDeleteResponseMsg")
	proto.RegisterType((*TcpCbGetRequest)(nil), "halproto.TcpCbGetRequest")
	proto.RegisterType((*TcpCbGetRequestMsg)(nil), "halproto.TcpCbGetRequestMsg")
	proto.RegisterType((*TcpCbStats)(nil), "halproto.TcpCbStats")
	proto.RegisterType((*TcpCbGetResponse)(nil), "halproto.TcpCbGetResponse")
	proto.RegisterType((*TcpCbGetResponseMsg)(nil), "halproto.TcpCbGetResponseMsg")
}

func init() { proto.RegisterFile("tcp_proxy_cb.proto", fileDescriptor18) }

var fileDescriptor18 = []byte{
	// 1768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5b, 0x6f, 0x1b, 0xb9,
	0x15, 0x8e, 0x62, 0xd9, 0x96, 0x28, 0xcb, 0x76, 0xe8, 0x1b, 0xed, 0xc4, 0x1b, 0x45, 0xd9, 0x36,
	0xea, 0xa2, 0xf0, 0x3a, 0x8a, 0xb3, 0x46, 0x1f, 0x0a, 0xd4, 0x51, 0x90, 0xc6, 0xad, 0xad, 0xa8,
	0x13, 0x2d, 0x0a, 0xf4, 0x65, 0x40, 0x71, 0x68, 0x9b, 0xd0, 0x68, 0x66, 0x4c, 0x52, 0x8a, 0xfc,
	0xde, 0x3f, 0xd0, 0xfb, 0x7d, 0x7b, 0xbf, 0xfe, 0x88, 0xfe, 0xad, 0xbe, 0x16, 0x87, 0xe4, 0x48,
	0xa3, 0x91, 0x83, 0x02, 0xe9, 0x3e, 0xc5, 0xf3, 0x7d, 0xdf, 0x39, 0xe4, 0x39, 0x73, 0x86, 0xfc,
	0x14, 0x84, 0x35, 0x4b, 0xfc, 0x44, 0xc6, 0xe3, 0x1b, 0x9f, 0xf5, 0x0e, 0x12, 0x19, 0xeb, 0x18,
	0x2f, 0x6a, 0x96, 0xb0, 0xde, 0x5e, 0x45, 0xdf, 0x24, 0x5c, 0x59, 0xac, 0xce, 0xd0, 0x6a, 0x97,
	0x25, 0xad, 0xde, 0x77, 0xf9, 0xcd, 0x6b, 0x1a, 0x05, 0x21, 0xc7, 0xf7, 0x51, 0xc9, 0xe8, 0x7c,
	0x11, 0x90, 0x42, 0xad, 0xd0, 0xa8, 0xbe, 0xbe, 0xe3, 0x2d, 0x1b, 0xe4, 0x34, 0xc0, 0x8f, 0xd1,
	0x8a, 0x25, 0xaf, 0x8c, 0x98, 0xdc, 0xad, 0x15, 0x1a, 0x4b, 0xaf, 0xef, 0x78, 0x15, 0x83, 0xda,
	0x0c, 0x2f, 0xd6, 0x50, 0xb5, 0xcf, 0x6f, 0xfc, 0x58, 0x3a, 0x55, 0xfd, 0x3f, 0x65, 0x54, 0x36,
	0xab, 0xbc, 0x4d, 0x38, 0xc3, 0xdf, 0xc8, 0xd1, 0x66, 0x95, 0x4a, 0x73, 0xeb, 0xc0, 0xe4, 0x38,
	0x98, 0xdd, 0x8e, 0x57, 0xe9, 0xf3, 0x9b, 0x37, 0xd2, 0xed, 0x6d, 0x07, 0x2d, 0x4b, 0x36, 0xf2,
	0xa3, 0xb1, 0x36, 0x2b, 0x57, 0xbd, 0x25, 0xc9, 0x46, 0xed, 0xb1, 0x06, 0x42, 0x45, 0x81, 0x21,
	0x16, 0x2c, 0xa1, 0xa2, 0x20, 0x43, 0x0c, 0x23, 0x4a, 0x8a, 0x13, 0xe2, 0xf3, 0x88, 0xe2, 0xfb,
	0xa8, 0x0c, 0xa9, 0xb4, 0x1a, 0xd1, 0x90, 0x2c, 0x1a, 0xaa, 0x24, 0xd9, 0xa8, 0x0b, 0xcf, 0x40,
	0x6a, 0xe5, 0x4b, 0xce, 0x78, 0xa4, 0xc9, 0x92, 0x25, 0xb5, 0xf2, 0xcc, 0x33, 0x90, 0x8a, 0xcb,
	0x6b, 0xbf, 0x47, 0x15, 0x27, 0xcb, 0xd0, 0x00, 0xaf, 0x04, 0xc0, 0x0b, 0xaa, 0xa0, 0x7b, 0xe5,
	0x80, 0xf7, 0x86, 0x97, 0x7e, 0x10, 0x87, 0xa4, 0x64, 0x23, 0x0d, 0xf0, 0x32, 0x0e, 0x6d, 0xa4,
	0x72, 0x91, 0xe5, 0x34, 0x52, 0xd9, 0x48, 0xd8, 0x29, 0x90, 0x89, 0x20, 0xc8, 0xed, 0x94, 0xab,
	0xeb, 0x8e, 0x98, 0x10, 0x4c, 0x90, 0xca, 0x94, 0x68, 0x89, 0xb4, 0xb6, 0x77, 0x51, 0x40, 0x56,
	0x26, 0xb5, 0x7d, 0x3f, 0x0a, 0xf0, 0x2e, 0x2a, 0x01, 0xc1, 0x80, 0xa9, 0x1a, 0x06, 0x84, 0xad,
	0x77, 0x51, 0x90, 0x76, 0x70, 0xa0, 0x14, 0x59, 0x9d, 0x74, 0xf0, 0x5c, 0x29, 0xfc, 0x10, 0x55,
	0x54, 0x3c, 0x94, 0x8c, 0xfb, 0x49, 0x2c, 0x35, 0x59, 0x33, 0x24, 0xb2, 0x50, 0x27, 0x96, 0xda,
	0x56, 0xa6, 0xb4, 0xa5, 0xd7, 0xd3, 0xca, 0x94, 0x36, 0xe4, 0x13, 0xb4, 0x76, 0xc5, 0x69, 0xc0,
	0xa5, 0xaf, 0xf9, 0x20, 0x09, 0xa9, 0xe6, 0xe4, 0x5e, 0xad, 0xd0, 0x58, 0xf1, 0x56, 0x2d, 0xdc,
	0x75, 0x28, 0xde, 0x44, 0x8b, 0x4a, 0x03, 0x8d, 0x4d, 0x06, 0xfb, 0x80, 0xf7, 0x91, 0x5b, 0xc9,
	0x0f, 0xc5, 0x05, 0xd9, 0x30, 0x54, 0xd9, 0x22, 0x67, 0xe2, 0x02, 0x68, 0x3a, 0x6d, 0xdc, 0xa6,
	0x69, 0x5c, 0x99, 0x4e, 0x3a, 0xb7, 0x8b, 0x4a, 0x34, 0x6d, 0xdd, 0x96, 0x2d, 0x97, 0xba, 0xde,
	0x4d, 0x28, 0x26, 0xc8, 0x76, 0x86, 0x6a, 0x09, 0x5c, 0x43, 0x2b, 0x93, 0x37, 0xe5, 0xeb, 0x31,
	0xd9, 0xb1, 0x15, 0xa7, 0x2f, 0xab, 0x3b, 0x86, 0x65, 0x5d, 0x51, 0x21, 0x8f, 0x08, 0xb1, 0xbb,
	0xb2, 0xc8, 0x19, 0x8f, 0x70, 0x03, 0xad, 0x27, 0x3c, 0x0a, 0x44, 0x74, 0xe9, 0x53, 0xd6, 0xf7,
	0x15, 0x8f, 0x02, 0xb2, 0x5b, 0x2b, 0x34, 0x4a, 0xde, 0xaa, 0xc3, 0x4f, 0x58, 0xff, 0x2d, 0x8f,
	0x02, 0x7c, 0x8c, 0xaa, 0xe1, 0xb1, 0xfb, 0x1a, 0xe1, 0xe3, 0x23, 0x7b, 0xb5, 0x42, 0x63, 0xb5,
	0xb9, 0x71, 0x60, 0xbf, 0xc4, 0x93, 0x24, 0xf1, 0x78, 0x20, 0x64, 0xf7, 0x26, 0xe1, 0x5e, 0x25,
	0x3c, 0xee, 0x80, 0x10, 0x1e, 0x60, 0x8f, 0x66, 0xf7, 0x92, 0xeb, 0x31, 0x94, 0x70, 0xdf, 0xbd,
	0x15, 0xae, 0xae, 0x3d, 0xae, 0xc7, 0xb6, 0x0a, 0x43, 0xa6, 0x43, 0xfe, 0xa0, 0x56, 0x68, 0x14,
	0x3d, 0x04, 0xd8, 0x5b, 0x3b, 0xe8, 0x1b, 0x68, 0x51, 0x8e, 0x7d, 0xad, 0xc8, 0xbe, 0xa1, 0x8a,
	0x72, 0xdc, 0x55, 0x78, 0x1d, 0x2d, 0x48, 0x1d, 0x93, 0x8f, 0x0c, 0x04, 0x7f, 0x9a, 0xa5, 0xdc,
	0xcc, 0xf8, 0x2c, 0xd2, 0xe4, 0xa1, 0x5b, 0xca, 0xce, 0x4d, 0x2b, 0xd2, 0xf8, 0x10, 0x6d, 0x66,
	0x1a, 0xd6, 0x0b, 0x15, 0xd7, 0x34, 0x08, 0x24, 0xa9, 0x19, 0x25, 0x9e, 0x34, 0x6e, 0xc2, 0xd8,
	0xc9, 0x95, 0xe6, 0xbd, 0x3c, 0x4a, 0x27, 0x57, 0xc2, 0x6b, 0xd9, 0x47, 0x28, 0x91, 0x3c, 0xf0,
	0x2f, 0x42, 0x7a, 0xa9, 0x48, 0xdd, 0x76, 0x16, 0x90, 0x57, 0x00, 0xc0, 0xa8, 0xc5, 0xfa, 0x8a,
	0x4b, 0xff, 0x5a, 0x04, 0xe4, 0xb1, 0x1d, 0x35, 0x03, 0x7c, 0x4f, 0x04, 0x30, 0xa8, 0x09, 0x65,
	0x7d, 0xae, 0x95, 0x1f, 0x0f, 0x35, 0xf9, 0xd8, 0xee, 0xd3, 0x41, 0x6f, 0x86, 0x1a, 0x6f, 0xa1,
	0x25, 0xa9, 0x63, 0x58, 0xf4, 0x2b, 0x76, 0xc6, 0xa4, 0x8e, 0x3b, 0x02, 0xd7, 0x51, 0xd5, 0x74,
	0x4a, 0x8b, 0x01, 0x97, 0xd0, 0xcc, 0xaf, 0x1a, 0xb6, 0x02, 0x60, 0x17, 0xb0, 0x96, 0x80, 0xdc,
	0x10, 0xda, 0xa3, 0xac, 0x1f, 0x5f, 0x5c, 0x90, 0x27, 0x36, 0xb7, 0xd4, 0xf1, 0x0b, 0x8b, 0x40,
	0x6e, 0x96, 0x0c, 0xe1, 0x68, 0x6c, 0xd8, 0xdc, 0x2c, 0x19, 0x9e, 0x06, 0x93, 0x42, 0x99, 0x20,
	0x5f, 0x9b, 0x16, 0xda, 0x12, 0xf5, 0x6f, 0xa2, 0x35, 0x73, 0x9e, 0x79, 0xfc, 0x7a, 0xc8, 0x95,
	0x3e, 0x57, 0x97, 0xf8, 0x13, 0xb4, 0x2c, 0xed, 0x13, 0x29, 0xd4, 0x16, 0x1a, 0x95, 0xe6, 0x7a,
	0xf6, 0xe0, 0x83, 0x13, 0xd2, 0x4b, 0x05, 0xf5, 0x43, 0x54, 0xb1, 0xa8, 0xa6, 0x7a, 0xa8, 0xf0,
	0xa3, 0xdc, 0xe9, 0x5b, 0x30, 0x5f, 0x42, 0xf6, 0xec, 0xad, 0xbf, 0x43, 0x55, 0xb7, 0xa0, 0x4a,
	0xe2, 0x48, 0x71, 0xfc, 0x29, 0x42, 0x34, 0x11, 0xbe, 0x32, 0x19, 0x4c, 0xc4, 0x2a, 0xac, 0xe8,
	0x06, 0x4f, 0xd8, 0xcc, 0x5e, 0x99, 0xa6, 0x7f, 0xe2, 0xe7, 0xe9, 0x22, 0x2e, 0xe4, 0xae, 0x39,
	0x9d, 0xf1, 0xcc, 0x26, 0x6d, 0x90, 0x5d, 0xd8, 0x3e, 0xd4, 0x5f, 0xa2, 0xf5, 0x99, 0x85, 0xa1,
	0xd4, 0x43, 0x54, 0x92, 0xee, 0xd1, 0xd5, 0xba, 0x99, 0x4d, 0x93, 0x4a, 0xbd, 0x89, 0xaa, 0xfe,
	0x06, 0x61, 0x43, 0xbd, 0xe4, 0x21, 0xd7, 0xdc, 0x75, 0xed, 0xff, 0xb8, 0x31, 0xea, 0x67, 0x68,
	0x6b, 0x3e, 0x21, 0xec, 0xed, 0x59, 0xfe, 0x35, 0xec, 0x66, 0xb3, 0xcd, 0xc8, 0xa7, 0xef, 0xe3,
	0x14, 0x6d, 0xcf, 0xd0, 0xd3, 0x52, 0xf3, 0x6d, 0x5e, 0xf8, 0x1f, 0x6d, 0xae, 0x9f, 0xb9, 0xc9,
	0xf8, 0x36, 0xd7, 0x5f, 0x42, 0x99, 0xaf, 0x5c, 0xdf, 0xa6, 0xd9, 0x6c, 0xff, 0x73, 0x35, 0x6e,
	0x67, 0x53, 0x4d, 0xb5, 0xd3, 0x02, 0x7f, 0x58, 0x45, 0x68, 0xf2, 0x8a, 0x15, 0x7c, 0xa7, 0xbd,
	0x1b, 0xcd, 0x95, 0x2f, 0xd9, 0xc8, 0xba, 0x81, 0xa2, 0x57, 0x36, 0x88, 0xc7, 0x46, 0x01, 0x7c,
	0xa7, 0x49, 0x5f, 0x3b, 0xf6, 0xae, 0x61, 0x4b, 0x00, 0x18, 0xf2, 0x31, 0xaa, 0x26, 0xf4, 0x92,
	0x2b, 0x9f, 0x86, 0x61, 0xcc, 0x78, 0x60, 0x2e, 0xe6, 0xa2, 0xb7, 0x62, 0xc0, 0x13, 0x8b, 0xc1,
	0x44, 0x07, 0x5c, 0xb1, 0x89, 0xa6, 0x68, 0x34, 0x15, 0xc0, 0x52, 0xc9, 0x41, 0x7a, 0xec, 0x44,
	0xc3, 0x81, 0x9f, 0xf4, 0xb5, 0xaf, 0x63, 0x7f, 0xc0, 0x07, 0xe6, 0xce, 0x2e, 0x7a, 0xeb, 0x86,
	0x6b, 0x0f, 0x07, 0x9d, 0xbe, 0xee, 0xc6, 0xe7, 0x7c, 0x90, 0xd3, 0x5f, 0x8d, 0x52, 0xfd, 0x52,
	0x4e, 0x7f, 0x35, 0xb2, 0xfa, 0xaf, 0x23, 0x7b, 0x74, 0xf9, 0x54, 0xc7, 0x03, 0xc1, 0xfc, 0x80,
	0x87, 0x9a, 0xba, 0xab, 0xdb, 0xaa, 0x4f, 0x0c, 0xf1, 0x12, 0x70, 0x7c, 0x84, 0xb6, 0xb3, 0xea,
	0x43, 0x5f, 0x44, 0x4c, 0x3e, 0x6d, 0x1e, 0x1d, 0x9b, 0xfb, 0xbc, 0xea, 0x6d, 0x66, 0x22, 0x0e,
	0x4f, 0x1d, 0x87, 0x9b, 0x68, 0x2b, 0x1b, 0xf5, 0xd4, 0x44, 0x41, 0x90, 0xbd, 0xe9, 0x37, 0x32,
	0x41, 0x4f, 0x4f, 0x2d, 0x35, 0x3d, 0x6e, 0x6d, 0x4c, 0xd3, 0xc4, 0x1c, 0x1d, 0x3b, 0x0f, 0x80,
	0x33, 0x21, 0xcd, 0x53, 0xc3, 0xe4, 0x23, 0x9e, 0xa5, 0x11, 0x2b, 0x73, 0x11, 0xcf, 0x5c, 0xc4,
	0x01, 0xda, 0xc8, 0x46, 0x1c, 0x99, 0x88, 0x63, 0xe7, 0x19, 0xee, 0x65, 0x02, 0x8e, 0x20, 0x60,
	0x4e, 0xff, 0xdc, 0xe9, 0x57, 0xe7, 0xf4, 0xcf, 0x6f, 0xd5, 0x7f, 0xe6, 0xf4, 0x6b, 0x73, 0xfa,
	0xcf, 0xac, 0xfe, 0x21, 0xaa, 0xd8, 0x79, 0x83, 0xd3, 0x3c, 0x30, 0x2e, 0xa3, 0xe8, 0xd9, 0x11,
	0x3c, 0x01, 0x04, 0x0e, 0x71, 0x15, 0xc6, 0xef, 0xfc, 0x84, 0xea, 0x2b, 0x73, 0x4d, 0xdd, 0xb3,
	0x03, 0x03, 0x60, 0x87, 0xea, 0x2b, 0xb8, 0xa7, 0x40, 0x03, 0x87, 0xf1, 0xc5, 0x30, 0x0c, 0x8d,
	0x06, 0x3b, 0x0d, 0x97, 0xd7, 0xaf, 0x86, 0x61, 0x08, 0x9a, 0x1d, 0xb4, 0x1c, 0xc7, 0xb1, 0x61,
	0x37, 0x0c, 0xbb, 0x14, 0xc7, 0x31, 0x10, 0x1f, 0xa5, 0x13, 0xaf, 0xc0, 0xfa, 0xfd, 0xa8, 0x9d,
	0x19, 0xf9, 0xb7, 0x60, 0xfe, 0x1e, 0xb8, 0x91, 0x37, 0xf4, 0x8f, 0xdb, 0xd3, 0x99, 0x37, 0xec,
	0xa7, 0xb7, 0xcc, 0x5e, 0xd2, 0xd7, 0xe4, 0x27, 0xed, 0x5b, 0x86, 0xaf, 0xd3, 0xcf, 0x05, 0x0c,
	0xf8, 0x20, 0x0d, 0xf8, 0x69, 0x2e, 0xe0, 0x9c, 0x0f, 0x6c, 0x00, 0x99, 0xba, 0xc4, 0x9f, 0xb5,
	0x67, 0x6c, 0x22, 0x99, 0xda, 0xc4, 0x9f, 0xb7, 0x67, 0x7c, 0x22, 0x58, 0x3b, 0x1e, 0x05, 0xc6,
	0xa5, 0x24, 0x82, 0xfc, 0xa2, 0xed, 0xfc, 0x15, 0x8f, 0x82, 0x13, 0xd6, 0xef, 0xcc, 0x0a, 0x98,
	0x20, 0xbf, 0x9c, 0x15, 0xb4, 0xcc, 0x7d, 0x1d, 0xf0, 0x30, 0x4d, 0xf0, 0xab, 0x76, 0xea, 0xfe,
	0x42, 0x1b, 0x9f, 0xa1, 0x99, 0x20, 0xbf, 0x9e, 0xa1, 0x5b, 0x02, 0x4e, 0x82, 0xcc, 0xcd, 0x9b,
	0x08, 0xf2, 0x9b, 0x76, 0xee, 0xea, 0xed, 0xe4, 0x45, 0x4c, 0x90, 0xdf, 0xb6, 0xe7, 0xef, 0xe7,
	0xbd, 0x8c, 0xd3, 0xfb, 0x5d, 0x7b, 0xd6, 0xea, 0xed, 0x65, 0xac, 0xde, 0x17, 0xed, 0x59, 0xaf,
	0x07, 0x67, 0x91, 0xb3, 0x6a, 0x7a, 0x0c, 0xc1, 0xbf, 0x77, 0xc9, 0x1d, 0xda, 0x1d, 0x77, 0xf2,
	0x22, 0x26, 0xc8, 0x1f, 0xf2, 0xa2, 0x96, 0x00, 0xa3, 0x7b, 0x41, 0x95, 0x06, 0x47, 0x26, 0x69,
	0xa4, 0x20, 0xd7, 0x1f, 0xad, 0xac, 0x0a, 0xb8, 0x67, 0xe1, 0xce, 0xbc, 0x90, 0x09, 0xf2, 0xa7,
	0x79, 0xa1, 0xdd, 0x1b, 0x0b, 0x39, 0x8d, 0xac, 0xc9, 0x4b, 0x04, 0xf9, 0xb3, 0x5b, 0xd6, 0xa0,
	0x60, 0xf3, 0x3a, 0x79, 0x11, 0x13, 0xe4, 0x2f, 0x79, 0x91, 0xf1, 0x82, 0x33, 0xce, 0xe8, 0xaf,
	0xed, 0x39, 0x6b, 0xb4, 0x3d, 0xb1, 0x46, 0x7f, 0x6b, 0x67, 0xbd, 0xd1, 0xa3, 0x9c, 0xcf, 0xfc,
	0x7b, 0x7b, 0xce, 0x68, 0x3e, 0x46, 0x55, 0x3a, 0xa3, 0xf9, 0x87, 0xdb, 0x01, 0xcd, 0x88, 0xf6,
	0x11, 0xd2, 0x63, 0x5f, 0x42, 0x0b, 0x13, 0x41, 0xfe, 0xe9, 0x06, 0x41, 0x8f, 0x3d, 0x11, 0x5d,
	0xda, 0x9e, 0x24, 0x54, 0x6a, 0x41, 0xdd, 0xac, 0x44, 0x9a, 0xfc, 0xcb, 0xf5, 0xc4, 0xe1, 0x30,
	0x30, 0x91, 0xae, 0xff, 0xbb, 0xe0, 0xdc, 0x84, 0xb9, 0xa3, 0x3e, 0xd4, 0xc9, 0x7c, 0x8c, 0x8a,
	0x2a, 0xe1, 0xcc, 0x39, 0x98, 0x79, 0x9b, 0x65, 0x58, 0xfc, 0x09, 0x5a, 0x72, 0x29, 0x17, 0xde,
	0xeb, 0x74, 0x9c, 0x02, 0x3f, 0xb1, 0xbf, 0x5e, 0x94, 0xb9, 0xa7, 0x2a, 0xcd, 0x7b, 0x79, 0xa9,
	0xb2, 0x3f, 0x68, 0x54, 0xfd, 0x3b, 0x68, 0x23, 0xbf, 0x7f, 0x6b, 0x3a, 0xf2, 0x86, 0x68, 0x67,
	0xee, 0x46, 0xce, 0x7b, 0xa2, 0xe6, 0x17, 0x77, 0xd1, 0xa2, 0xa1, 0xf1, 0xb7, 0x9c, 0x1d, 0x6c,
	0x49, 0x0e, 0xbf, 0x9a, 0xb6, 0x67, 0xcd, 0x54, 0x7a, 0xed, 0xef, 0xed, 0xdc, 0x66, 0xb2, 0xce,
	0xd5, 0x65, 0xfd, 0xce, 0x24, 0xc3, 0xe7, 0x49, 0xf0, 0x81, 0x19, 0xce, 0x5c, 0x06, 0x6b, 0x81,
	0xf0, 0x83, 0xf7, 0xba, 0x26, 0xc8, 0xb3, 0x7f, 0x1b, 0x9b, 0xcd, 0xd6, 0x42, 0xa5, 0xb4, 0x72,
	0xbc, 0x7b, 0xbb, 0x39, 0x81, 0x3c, 0x7b, 0xef, 0xe9, 0x92, 0x49, 0xf2, 0x02, 0xfd, 0xa0, 0x74,
	0x45, 0x43, 0xf3, 0xff, 0x19, 0xbd, 0x25, 0xf3, 0xcf, 0xb3, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff,
	0xd7, 0x41, 0x68, 0x58, 0x00, 0x11, 0x00, 0x00,
}
