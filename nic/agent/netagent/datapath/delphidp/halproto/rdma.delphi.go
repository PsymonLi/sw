// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rdma.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// types of interfaces
type RdmaServiceType int32

const (
	RdmaServiceType_RDMA_SERV_TYPE_RC     RdmaServiceType = 0
	RdmaServiceType_RDMA_SERV_TYPE_UC     RdmaServiceType = 1
	RdmaServiceType_RDMA_SERV_TYPE_RD     RdmaServiceType = 2
	RdmaServiceType_RDMA_SERV_TYPE_UD     RdmaServiceType = 3
	RdmaServiceType_RDMA_SERV_TYPE_CNP    RdmaServiceType = 4
	RdmaServiceType_RDMA_SERV_TYPE_XRC    RdmaServiceType = 5
	RdmaServiceType_RDMA_SERV_TYPE_VEND_1 RdmaServiceType = 6
	RdmaServiceType_RDMA_SERV_TYPE_VEND_2 RdmaServiceType = 7
)

var RdmaServiceType_name = map[int32]string{
	0: "RDMA_SERV_TYPE_RC",
	1: "RDMA_SERV_TYPE_UC",
	2: "RDMA_SERV_TYPE_RD",
	3: "RDMA_SERV_TYPE_UD",
	4: "RDMA_SERV_TYPE_CNP",
	5: "RDMA_SERV_TYPE_XRC",
	6: "RDMA_SERV_TYPE_VEND_1",
	7: "RDMA_SERV_TYPE_VEND_2",
}
var RdmaServiceType_value = map[string]int32{
	"RDMA_SERV_TYPE_RC":     0,
	"RDMA_SERV_TYPE_UC":     1,
	"RDMA_SERV_TYPE_RD":     2,
	"RDMA_SERV_TYPE_UD":     3,
	"RDMA_SERV_TYPE_CNP":    4,
	"RDMA_SERV_TYPE_XRC":    5,
	"RDMA_SERV_TYPE_VEND_1": 6,
	"RDMA_SERV_TYPE_VEND_2": 7,
}

func (x RdmaServiceType) String() string {
	return proto.EnumName(RdmaServiceType_name, int32(x))
}
func (RdmaServiceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

// types of Update QP operations
type RdmaQpUpdateOper int32

const (
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_STATE               RdmaQpUpdateOper = 0
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_CUR_STATE           RdmaQpUpdateOper = 1
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_EN_SQD_ASYNC_NOTIFY RdmaQpUpdateOper = 2
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_ACCESS_FLAGS        RdmaQpUpdateOper = 3
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_PKEY_INDEX          RdmaQpUpdateOper = 4
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_PORT                RdmaQpUpdateOper = 5
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_QKEY                RdmaQpUpdateOper = 6
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_AV                  RdmaQpUpdateOper = 7
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_PATH_MTU            RdmaQpUpdateOper = 8
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_TIMEOUT             RdmaQpUpdateOper = 9
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_RETRY_CNT           RdmaQpUpdateOper = 10
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_RNR_RETRY           RdmaQpUpdateOper = 11
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_RQ_PSN              RdmaQpUpdateOper = 12
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_MAX_QP_RD_ATOMIC    RdmaQpUpdateOper = 13
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_ALT_PATH            RdmaQpUpdateOper = 14
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_MIN_RNR_TIMER       RdmaQpUpdateOper = 15
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_SQ_PSN              RdmaQpUpdateOper = 16
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_MAX_DEST_RD_ATOMIC  RdmaQpUpdateOper = 17
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_PATH_MIG_STATE      RdmaQpUpdateOper = 18
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_CAP                 RdmaQpUpdateOper = 19
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_DEST_QPN            RdmaQpUpdateOper = 20
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_RESERVED1           RdmaQpUpdateOper = 21
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_RESERVED2           RdmaQpUpdateOper = 22
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_RESERVED3           RdmaQpUpdateOper = 23
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_RESERVED4           RdmaQpUpdateOper = 24
	RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_RATE_LIMIT          RdmaQpUpdateOper = 25
)

var RdmaQpUpdateOper_name = map[int32]string{
	0:  "RDMA_UPDATE_QP_OPER_SET_STATE",
	1:  "RDMA_UPDATE_QP_OPER_SET_CUR_STATE",
	2:  "RDMA_UPDATE_QP_OPER_SET_EN_SQD_ASYNC_NOTIFY",
	3:  "RDMA_UPDATE_QP_OPER_SET_ACCESS_FLAGS",
	4:  "RDMA_UPDATE_QP_OPER_SET_PKEY_INDEX",
	5:  "RDMA_UPDATE_QP_OPER_SET_PORT",
	6:  "RDMA_UPDATE_QP_OPER_SET_QKEY",
	7:  "RDMA_UPDATE_QP_OPER_SET_AV",
	8:  "RDMA_UPDATE_QP_OPER_SET_PATH_MTU",
	9:  "RDMA_UPDATE_QP_OPER_SET_TIMEOUT",
	10: "RDMA_UPDATE_QP_OPER_SET_RETRY_CNT",
	11: "RDMA_UPDATE_QP_OPER_SET_RNR_RETRY",
	12: "RDMA_UPDATE_QP_OPER_SET_RQ_PSN",
	13: "RDMA_UPDATE_QP_OPER_SET_MAX_QP_RD_ATOMIC",
	14: "RDMA_UPDATE_QP_OPER_SET_ALT_PATH",
	15: "RDMA_UPDATE_QP_OPER_SET_MIN_RNR_TIMER",
	16: "RDMA_UPDATE_QP_OPER_SET_SQ_PSN",
	17: "RDMA_UPDATE_QP_OPER_SET_MAX_DEST_RD_ATOMIC",
	18: "RDMA_UPDATE_QP_OPER_SET_PATH_MIG_STATE",
	19: "RDMA_UPDATE_QP_OPER_SET_CAP",
	20: "RDMA_UPDATE_QP_OPER_SET_DEST_QPN",
	21: "RDMA_UPDATE_QP_OPER_SET_RESERVED1",
	22: "RDMA_UPDATE_QP_OPER_SET_RESERVED2",
	23: "RDMA_UPDATE_QP_OPER_SET_RESERVED3",
	24: "RDMA_UPDATE_QP_OPER_SET_RESERVED4",
	25: "RDMA_UPDATE_QP_OPER_SET_RATE_LIMIT",
}
var RdmaQpUpdateOper_value = map[string]int32{
	"RDMA_UPDATE_QP_OPER_SET_STATE":               0,
	"RDMA_UPDATE_QP_OPER_SET_CUR_STATE":           1,
	"RDMA_UPDATE_QP_OPER_SET_EN_SQD_ASYNC_NOTIFY": 2,
	"RDMA_UPDATE_QP_OPER_SET_ACCESS_FLAGS":        3,
	"RDMA_UPDATE_QP_OPER_SET_PKEY_INDEX":          4,
	"RDMA_UPDATE_QP_OPER_SET_PORT":                5,
	"RDMA_UPDATE_QP_OPER_SET_QKEY":                6,
	"RDMA_UPDATE_QP_OPER_SET_AV":                  7,
	"RDMA_UPDATE_QP_OPER_SET_PATH_MTU":            8,
	"RDMA_UPDATE_QP_OPER_SET_TIMEOUT":             9,
	"RDMA_UPDATE_QP_OPER_SET_RETRY_CNT":           10,
	"RDMA_UPDATE_QP_OPER_SET_RNR_RETRY":           11,
	"RDMA_UPDATE_QP_OPER_SET_RQ_PSN":              12,
	"RDMA_UPDATE_QP_OPER_SET_MAX_QP_RD_ATOMIC":    13,
	"RDMA_UPDATE_QP_OPER_SET_ALT_PATH":            14,
	"RDMA_UPDATE_QP_OPER_SET_MIN_RNR_TIMER":       15,
	"RDMA_UPDATE_QP_OPER_SET_SQ_PSN":              16,
	"RDMA_UPDATE_QP_OPER_SET_MAX_DEST_RD_ATOMIC":  17,
	"RDMA_UPDATE_QP_OPER_SET_PATH_MIG_STATE":      18,
	"RDMA_UPDATE_QP_OPER_SET_CAP":                 19,
	"RDMA_UPDATE_QP_OPER_SET_DEST_QPN":            20,
	"RDMA_UPDATE_QP_OPER_SET_RESERVED1":           21,
	"RDMA_UPDATE_QP_OPER_SET_RESERVED2":           22,
	"RDMA_UPDATE_QP_OPER_SET_RESERVED3":           23,
	"RDMA_UPDATE_QP_OPER_SET_RESERVED4":           24,
	"RDMA_UPDATE_QP_OPER_SET_RATE_LIMIT":          25,
}

func (x RdmaQpUpdateOper) String() string {
	return proto.EnumName(RdmaQpUpdateOper_name, int32(x))
}
func (RdmaQpUpdateOper) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

// **********************   Memory Window(MW)  *********************//
// RdmaMemWindow object
type RdmaMemoryWindowType int32

const (
	RdmaMemoryWindowType_RDMA_MEMORY_WINDOW_TYPE_NONE RdmaMemoryWindowType = 0
	RdmaMemoryWindowType_RDMA_MEMORY_WINDOW_TYPE1     RdmaMemoryWindowType = 1
	RdmaMemoryWindowType_RDMA_MEMORY_WINDOW_TYPE2     RdmaMemoryWindowType = 2
)

var RdmaMemoryWindowType_name = map[int32]string{
	0: "RDMA_MEMORY_WINDOW_TYPE_NONE",
	1: "RDMA_MEMORY_WINDOW_TYPE1",
	2: "RDMA_MEMORY_WINDOW_TYPE2",
}
var RdmaMemoryWindowType_value = map[string]int32{
	"RDMA_MEMORY_WINDOW_TYPE_NONE": 0,
	"RDMA_MEMORY_WINDOW_TYPE1":     1,
	"RDMA_MEMORY_WINDOW_TYPE2":     2,
}

func (x RdmaMemoryWindowType) String() string {
	return proto.EnumName(RdmaMemoryWindowType_name, int32(x))
}
func (RdmaMemoryWindowType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

// **********************    Queue Pair  ********************************//
// RdmaQp object
type RdmaQpSpec struct {
	QpNum         uint32          `protobuf:"varint,1,opt,name=qp_num,json=qpNum" json:"qp_num,omitempty"`
	HwLifId       uint32          `protobuf:"varint,2,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
	SqWqeSize     uint32          `protobuf:"varint,3,opt,name=sq_wqe_size,json=sqWqeSize" json:"sq_wqe_size,omitempty"`
	RqWqeSize     uint32          `protobuf:"varint,4,opt,name=rq_wqe_size,json=rqWqeSize" json:"rq_wqe_size,omitempty"`
	NumSqWqes     uint32          `protobuf:"varint,5,opt,name=num_sq_wqes,json=numSqWqes" json:"num_sq_wqes,omitempty"`
	NumRqWqes     uint32          `protobuf:"varint,6,opt,name=num_rq_wqes,json=numRqWqes" json:"num_rq_wqes,omitempty"`
	NumRsqWqes    uint32          `protobuf:"varint,7,opt,name=num_rsq_wqes,json=numRsqWqes" json:"num_rsq_wqes,omitempty"`
	NumRrqWqes    uint32          `protobuf:"varint,8,opt,name=num_rrq_wqes,json=numRrqWqes" json:"num_rrq_wqes,omitempty"`
	Pd            uint32          `protobuf:"varint,9,opt,name=pd" json:"pd,omitempty"`
	Pmtu          uint32          `protobuf:"varint,10,opt,name=pmtu" json:"pmtu,omitempty"`
	HostmemPgSize uint32          `protobuf:"varint,11,opt,name=hostmem_pg_size,json=hostmemPgSize" json:"hostmem_pg_size,omitempty"`
	Svc           RdmaServiceType `protobuf:"varint,12,opt,name=svc,enum=rdma.RdmaServiceType" json:"svc,omitempty"`
	AtomicEnabled bool            `protobuf:"varint,13,opt,name=atomic_enabled,json=atomicEnabled" json:"atomic_enabled,omitempty"`
	SqLkey        uint32          `protobuf:"varint,14,opt,name=sq_lkey,json=sqLkey" json:"sq_lkey,omitempty"`
	RqLkey        uint32          `protobuf:"varint,15,opt,name=rq_lkey,json=rqLkey" json:"rq_lkey,omitempty"`
	RqCqNum       uint32          `protobuf:"varint,16,opt,name=rq_cq_num,json=rqCqNum" json:"rq_cq_num,omitempty"`
	SqCqNum       uint32          `protobuf:"varint,17,opt,name=sq_cq_num,json=sqCqNum" json:"sq_cq_num,omitempty"`
	ImmdtAsDbell  bool            `protobuf:"varint,18,opt,name=immdt_as_dbell,json=immdtAsDbell" json:"immdt_as_dbell,omitempty"`
	SqInNicMemory bool            `protobuf:"varint,19,opt,name=sq_in_nic_memory,json=sqInNicMemory" json:"sq_in_nic_memory,omitempty"`
	// if sq_in_nic_memory and sq_base_addr == NULL, HAL will allocate
	SqBaseAddr    uint64 `protobuf:"varint,20,opt,name=sq_base_addr,json=sqBaseAddr" json:"sq_base_addr,omitempty"`
	RqInNicMemory bool   `protobuf:"varint,21,opt,name=rq_in_nic_memory,json=rqInNicMemory" json:"rq_in_nic_memory,omitempty"`
	// if rq_in_nic_memory and rq_base_addr == NULL, HAL will allocate
	RqBaseAddr uint64 `protobuf:"varint,22,opt,name=rq_base_addr,json=rqBaseAddr" json:"rq_base_addr,omitempty"`
	IfHandle   uint64 `protobuf:"fixed64,23,opt,name=if_handle,json=ifHandle" json:"if_handle,omitempty"`
	// handle
	VaPagesPhyAddr []uint64 `protobuf:"varint,24,rep,packed,name=va_pages_phy_addr,json=vaPagesPhyAddr" json:"va_pages_phy_addr,omitempty"`
	// phy addr
	NumSqPages uint32 `protobuf:"varint,25,opt,name=num_sq_pages,json=numSqPages" json:"num_sq_pages,omitempty"`
}

func (m *RdmaQpSpec) Reset()                    { *m = RdmaQpSpec{} }
func (m *RdmaQpSpec) String() string            { return proto.CompactTextString(m) }
func (*RdmaQpSpec) ProtoMessage()               {}
func (*RdmaQpSpec) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *RdmaQpSpec) GetQpNum() uint32 {
	if m != nil {
		return m.QpNum
	}
	return 0
}

func (m *RdmaQpSpec) GetHwLifId() uint32 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *RdmaQpSpec) GetSqWqeSize() uint32 {
	if m != nil {
		return m.SqWqeSize
	}
	return 0
}

func (m *RdmaQpSpec) GetRqWqeSize() uint32 {
	if m != nil {
		return m.RqWqeSize
	}
	return 0
}

func (m *RdmaQpSpec) GetNumSqWqes() uint32 {
	if m != nil {
		return m.NumSqWqes
	}
	return 0
}

func (m *RdmaQpSpec) GetNumRqWqes() uint32 {
	if m != nil {
		return m.NumRqWqes
	}
	return 0
}

func (m *RdmaQpSpec) GetNumRsqWqes() uint32 {
	if m != nil {
		return m.NumRsqWqes
	}
	return 0
}

func (m *RdmaQpSpec) GetNumRrqWqes() uint32 {
	if m != nil {
		return m.NumRrqWqes
	}
	return 0
}

func (m *RdmaQpSpec) GetPd() uint32 {
	if m != nil {
		return m.Pd
	}
	return 0
}

func (m *RdmaQpSpec) GetPmtu() uint32 {
	if m != nil {
		return m.Pmtu
	}
	return 0
}

func (m *RdmaQpSpec) GetHostmemPgSize() uint32 {
	if m != nil {
		return m.HostmemPgSize
	}
	return 0
}

func (m *RdmaQpSpec) GetSvc() RdmaServiceType {
	if m != nil {
		return m.Svc
	}
	return RdmaServiceType_RDMA_SERV_TYPE_RC
}

func (m *RdmaQpSpec) GetAtomicEnabled() bool {
	if m != nil {
		return m.AtomicEnabled
	}
	return false
}

func (m *RdmaQpSpec) GetSqLkey() uint32 {
	if m != nil {
		return m.SqLkey
	}
	return 0
}

func (m *RdmaQpSpec) GetRqLkey() uint32 {
	if m != nil {
		return m.RqLkey
	}
	return 0
}

func (m *RdmaQpSpec) GetRqCqNum() uint32 {
	if m != nil {
		return m.RqCqNum
	}
	return 0
}

func (m *RdmaQpSpec) GetSqCqNum() uint32 {
	if m != nil {
		return m.SqCqNum
	}
	return 0
}

func (m *RdmaQpSpec) GetImmdtAsDbell() bool {
	if m != nil {
		return m.ImmdtAsDbell
	}
	return false
}

func (m *RdmaQpSpec) GetSqInNicMemory() bool {
	if m != nil {
		return m.SqInNicMemory
	}
	return false
}

func (m *RdmaQpSpec) GetSqBaseAddr() uint64 {
	if m != nil {
		return m.SqBaseAddr
	}
	return 0
}

func (m *RdmaQpSpec) GetRqInNicMemory() bool {
	if m != nil {
		return m.RqInNicMemory
	}
	return false
}

func (m *RdmaQpSpec) GetRqBaseAddr() uint64 {
	if m != nil {
		return m.RqBaseAddr
	}
	return 0
}

func (m *RdmaQpSpec) GetIfHandle() uint64 {
	if m != nil {
		return m.IfHandle
	}
	return 0
}

func (m *RdmaQpSpec) GetVaPagesPhyAddr() []uint64 {
	if m != nil {
		return m.VaPagesPhyAddr
	}
	return nil
}

func (m *RdmaQpSpec) GetNumSqPages() uint32 {
	if m != nil {
		return m.NumSqPages
	}
	return 0
}

// RdmaQpRequestMsg is batched request used to create/update of Rdma QPs
type RdmaQpRequestMsg struct {
	Request []*RdmaQpSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RdmaQpRequestMsg) Reset()                    { *m = RdmaQpRequestMsg{} }
func (m *RdmaQpRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaQpRequestMsg) ProtoMessage()               {}
func (*RdmaQpRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *RdmaQpRequestMsg) GetRequest() []*RdmaQpSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RdmaQpResponse response to one RdmaQpSpec
type RdmaQpResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	// RdmaQpStatus        status           = 2;    // operational status
	RsqBaseAddr       uint64 `protobuf:"varint,3,opt,name=rsq_base_addr,json=rsqBaseAddr" json:"rsq_base_addr,omitempty"`
	RrqBaseAddr       uint64 `protobuf:"varint,4,opt,name=rrq_base_addr,json=rrqBaseAddr" json:"rrq_base_addr,omitempty"`
	NicSqBaseAddr     uint64 `protobuf:"varint,5,opt,name=nic_sq_base_addr,json=nicSqBaseAddr" json:"nic_sq_base_addr,omitempty"`
	NicRqBaseAddr     uint64 `protobuf:"varint,6,opt,name=nic_rq_base_addr,json=nicRqBaseAddr" json:"nic_rq_base_addr,omitempty"`
	RdmaAtomicResAddr uint64 `protobuf:"varint,7,opt,name=rdma_atomic_res_addr,json=rdmaAtomicResAddr" json:"rdma_atomic_res_addr,omitempty"`
}

func (m *RdmaQpResponse) Reset()                    { *m = RdmaQpResponse{} }
func (m *RdmaQpResponse) String() string            { return proto.CompactTextString(m) }
func (*RdmaQpResponse) ProtoMessage()               {}
func (*RdmaQpResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *RdmaQpResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RdmaQpResponse) GetRsqBaseAddr() uint64 {
	if m != nil {
		return m.RsqBaseAddr
	}
	return 0
}

func (m *RdmaQpResponse) GetRrqBaseAddr() uint64 {
	if m != nil {
		return m.RrqBaseAddr
	}
	return 0
}

func (m *RdmaQpResponse) GetNicSqBaseAddr() uint64 {
	if m != nil {
		return m.NicSqBaseAddr
	}
	return 0
}

func (m *RdmaQpResponse) GetNicRqBaseAddr() uint64 {
	if m != nil {
		return m.NicRqBaseAddr
	}
	return 0
}

func (m *RdmaQpResponse) GetRdmaAtomicResAddr() uint64 {
	if m != nil {
		return m.RdmaAtomicResAddr
	}
	return 0
}

// RdmaQpResponseMsg is response to RdmaQpRequestMsg
type RdmaQpResponseMsg struct {
	Response []*RdmaQpResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RdmaQpResponseMsg) Reset()                    { *m = RdmaQpResponseMsg{} }
func (m *RdmaQpResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaQpResponseMsg) ProtoMessage()               {}
func (*RdmaQpResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *RdmaQpResponseMsg) GetResponse() []*RdmaQpResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// ****************   Update Queue Pair  ********************************//
// RdmaQpUpdate object
type RdmaQpUpdateSpec struct {
	QpNum          uint32           `protobuf:"varint,1,opt,name=qp_num,json=qpNum" json:"qp_num,omitempty"`
	HwLifId        uint32           `protobuf:"varint,2,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
	Oper           RdmaQpUpdateOper `protobuf:"varint,3,opt,name=oper,enum=rdma.RdmaQpUpdateOper" json:"oper,omitempty"`
	DstQpNum       uint32           `protobuf:"varint,4,opt,name=dst_qp_num,json=dstQpNum" json:"dst_qp_num,omitempty"`
	HeaderTemplate []byte           `protobuf:"bytes,5,opt,name=header_template,json=headerTemplate,proto3" json:"header_template,omitempty"`
	QKey           uint32           `protobuf:"varint,6,opt,name=q_key,json=qKey" json:"q_key,omitempty"`
	EPsn           uint32           `protobuf:"varint,7,opt,name=e_psn,json=ePsn" json:"e_psn,omitempty"`
	TxPsn          uint32           `protobuf:"varint,8,opt,name=tx_psn,json=txPsn" json:"tx_psn,omitempty"`
	Ahid           uint32           `protobuf:"varint,9,opt,name=ahid" json:"ahid,omitempty"`
	Pmtu           uint32           `protobuf:"varint,10,opt,name=pmtu" json:"pmtu,omitempty"`
	Qstate         uint32           `protobuf:"varint,11,opt,name=qstate" json:"qstate,omitempty"`
}

func (m *RdmaQpUpdateSpec) Reset()                    { *m = RdmaQpUpdateSpec{} }
func (m *RdmaQpUpdateSpec) String() string            { return proto.CompactTextString(m) }
func (*RdmaQpUpdateSpec) ProtoMessage()               {}
func (*RdmaQpUpdateSpec) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *RdmaQpUpdateSpec) GetQpNum() uint32 {
	if m != nil {
		return m.QpNum
	}
	return 0
}

func (m *RdmaQpUpdateSpec) GetHwLifId() uint32 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *RdmaQpUpdateSpec) GetOper() RdmaQpUpdateOper {
	if m != nil {
		return m.Oper
	}
	return RdmaQpUpdateOper_RDMA_UPDATE_QP_OPER_SET_STATE
}

func (m *RdmaQpUpdateSpec) GetDstQpNum() uint32 {
	if m != nil {
		return m.DstQpNum
	}
	return 0
}

func (m *RdmaQpUpdateSpec) GetHeaderTemplate() []byte {
	if m != nil {
		return m.HeaderTemplate
	}
	return nil
}

func (m *RdmaQpUpdateSpec) GetQKey() uint32 {
	if m != nil {
		return m.QKey
	}
	return 0
}

func (m *RdmaQpUpdateSpec) GetEPsn() uint32 {
	if m != nil {
		return m.EPsn
	}
	return 0
}

func (m *RdmaQpUpdateSpec) GetTxPsn() uint32 {
	if m != nil {
		return m.TxPsn
	}
	return 0
}

func (m *RdmaQpUpdateSpec) GetAhid() uint32 {
	if m != nil {
		return m.Ahid
	}
	return 0
}

func (m *RdmaQpUpdateSpec) GetPmtu() uint32 {
	if m != nil {
		return m.Pmtu
	}
	return 0
}

func (m *RdmaQpUpdateSpec) GetQstate() uint32 {
	if m != nil {
		return m.Qstate
	}
	return 0
}

// RdmaQpRequestMsg is batched request used to create/update of Rdma QPs
type RdmaQpUpdateRequestMsg struct {
	Request []*RdmaQpUpdateSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RdmaQpUpdateRequestMsg) Reset()                    { *m = RdmaQpUpdateRequestMsg{} }
func (m *RdmaQpUpdateRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaQpUpdateRequestMsg) ProtoMessage()               {}
func (*RdmaQpUpdateRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *RdmaQpUpdateRequestMsg) GetRequest() []*RdmaQpUpdateSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RdmaQpResponse response to one RdmaQpSpec
type RdmaQpUpdateResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *RdmaQpUpdateResponse) Reset()                    { *m = RdmaQpUpdateResponse{} }
func (m *RdmaQpUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*RdmaQpUpdateResponse) ProtoMessage()               {}
func (*RdmaQpUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *RdmaQpUpdateResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// RdmaQpUpdateResponseMsg is response to RdmaQpUpdateRequestMsg
type RdmaQpUpdateResponseMsg struct {
	Response []*RdmaQpUpdateResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RdmaQpUpdateResponseMsg) Reset()                    { *m = RdmaQpUpdateResponseMsg{} }
func (m *RdmaQpUpdateResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaQpUpdateResponseMsg) ProtoMessage()               {}
func (*RdmaQpUpdateResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *RdmaQpUpdateResponseMsg) GetResponse() []*RdmaQpUpdateResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// **********************    Address Handle  ********************************//
// RdmaAh object
type RdmaAhSpec struct {
	Ahid           uint64 `protobuf:"varint,1,opt,name=ahid" json:"ahid,omitempty"`
	HwLifId        uint32 `protobuf:"varint,2,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
	HeaderTemplate []byte `protobuf:"bytes,3,opt,name=header_template,json=headerTemplate,proto3" json:"header_template,omitempty"`
}

func (m *RdmaAhSpec) Reset()                    { *m = RdmaAhSpec{} }
func (m *RdmaAhSpec) String() string            { return proto.CompactTextString(m) }
func (*RdmaAhSpec) ProtoMessage()               {}
func (*RdmaAhSpec) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *RdmaAhSpec) GetAhid() uint64 {
	if m != nil {
		return m.Ahid
	}
	return 0
}

func (m *RdmaAhSpec) GetHwLifId() uint32 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *RdmaAhSpec) GetHeaderTemplate() []byte {
	if m != nil {
		return m.HeaderTemplate
	}
	return nil
}

// RdmaAhRequestmsg is batched request used to create/update of Rdma QPs
type RdmaAhRequestMsg struct {
	Request []*RdmaAhSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RdmaAhRequestMsg) Reset()                    { *m = RdmaAhRequestMsg{} }
func (m *RdmaAhRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaAhRequestMsg) ProtoMessage()               {}
func (*RdmaAhRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *RdmaAhRequestMsg) GetRequest() []*RdmaAhSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RdmaAhResponse to one RdmaAhSpec
type RdmaAhResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *RdmaAhResponse) Reset()                    { *m = RdmaAhResponse{} }
func (m *RdmaAhResponse) String() string            { return proto.CompactTextString(m) }
func (*RdmaAhResponse) ProtoMessage()               {}
func (*RdmaAhResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *RdmaAhResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// RdmaAhResponseMsg is response to RdmaAhRequestmsg
type RdmaAhResponseMsg struct {
	Response []*RdmaAhResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RdmaAhResponseMsg) Reset()                    { *m = RdmaAhResponseMsg{} }
func (m *RdmaAhResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaAhResponseMsg) ProtoMessage()               {}
func (*RdmaAhResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *RdmaAhResponseMsg) GetResponse() []*RdmaAhResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// **********************   Completion Queue  *****************************//
// RdmaCq object
type RdmaCqSpec struct {
	CqNum            uint32   `protobuf:"varint,1,opt,name=cq_num,json=cqNum" json:"cq_num,omitempty"`
	HwLifId          uint32   `protobuf:"varint,2,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
	CqWqeSize        uint32   `protobuf:"varint,3,opt,name=cq_wqe_size,json=cqWqeSize" json:"cq_wqe_size,omitempty"`
	NumCqWqes        uint32   `protobuf:"varint,4,opt,name=num_cq_wqes,json=numCqWqes" json:"num_cq_wqes,omitempty"`
	HostmemPgSize    uint32   `protobuf:"varint,5,opt,name=hostmem_pg_size,json=hostmemPgSize" json:"hostmem_pg_size,omitempty"`
	CqLkey           uint32   `protobuf:"varint,6,opt,name=cq_lkey,json=cqLkey" json:"cq_lkey,omitempty"`
	EqId             uint32   `protobuf:"varint,7,opt,name=eq_id,json=eqId" json:"eq_id,omitempty"`
	WakeupDpath      bool     `protobuf:"varint,8,opt,name=wakeup_dpath,json=wakeupDpath" json:"wakeup_dpath,omitempty"`
	WakeupLif        uint32   `protobuf:"varint,9,opt,name=wakeup_lif,json=wakeupLif" json:"wakeup_lif,omitempty"`
	WakeupQtype      uint32   `protobuf:"varint,10,opt,name=wakeup_qtype,json=wakeupQtype" json:"wakeup_qtype,omitempty"`
	WakeupQid        uint32   `protobuf:"varint,11,opt,name=wakeup_qid,json=wakeupQid" json:"wakeup_qid,omitempty"`
	WakeupRingId     uint32   `protobuf:"varint,12,opt,name=wakeup_ring_id,json=wakeupRingId" json:"wakeup_ring_id,omitempty"`
	HostAddr         bool     `protobuf:"varint,13,opt,name=host_addr,json=hostAddr" json:"host_addr,omitempty"`
	CqVaPagesPhyAddr []uint64 `protobuf:"varint,14,rep,packed,name=cq_va_pages_phy_addr,json=cqVaPagesPhyAddr" json:"cq_va_pages_phy_addr,omitempty"`
}

func (m *RdmaCqSpec) Reset()                    { *m = RdmaCqSpec{} }
func (m *RdmaCqSpec) String() string            { return proto.CompactTextString(m) }
func (*RdmaCqSpec) ProtoMessage()               {}
func (*RdmaCqSpec) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *RdmaCqSpec) GetCqNum() uint32 {
	if m != nil {
		return m.CqNum
	}
	return 0
}

func (m *RdmaCqSpec) GetHwLifId() uint32 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *RdmaCqSpec) GetCqWqeSize() uint32 {
	if m != nil {
		return m.CqWqeSize
	}
	return 0
}

func (m *RdmaCqSpec) GetNumCqWqes() uint32 {
	if m != nil {
		return m.NumCqWqes
	}
	return 0
}

func (m *RdmaCqSpec) GetHostmemPgSize() uint32 {
	if m != nil {
		return m.HostmemPgSize
	}
	return 0
}

func (m *RdmaCqSpec) GetCqLkey() uint32 {
	if m != nil {
		return m.CqLkey
	}
	return 0
}

func (m *RdmaCqSpec) GetEqId() uint32 {
	if m != nil {
		return m.EqId
	}
	return 0
}

func (m *RdmaCqSpec) GetWakeupDpath() bool {
	if m != nil {
		return m.WakeupDpath
	}
	return false
}

func (m *RdmaCqSpec) GetWakeupLif() uint32 {
	if m != nil {
		return m.WakeupLif
	}
	return 0
}

func (m *RdmaCqSpec) GetWakeupQtype() uint32 {
	if m != nil {
		return m.WakeupQtype
	}
	return 0
}

func (m *RdmaCqSpec) GetWakeupQid() uint32 {
	if m != nil {
		return m.WakeupQid
	}
	return 0
}

func (m *RdmaCqSpec) GetWakeupRingId() uint32 {
	if m != nil {
		return m.WakeupRingId
	}
	return 0
}

func (m *RdmaCqSpec) GetHostAddr() bool {
	if m != nil {
		return m.HostAddr
	}
	return false
}

func (m *RdmaCqSpec) GetCqVaPagesPhyAddr() []uint64 {
	if m != nil {
		return m.CqVaPagesPhyAddr
	}
	return nil
}

// RdmaCqRequestMsg is batched request used to create/update of Rdma QPs
type RdmaCqRequestMsg struct {
	Request []*RdmaCqSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RdmaCqRequestMsg) Reset()                    { *m = RdmaCqRequestMsg{} }
func (m *RdmaCqRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaCqRequestMsg) ProtoMessage()               {}
func (*RdmaCqRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *RdmaCqRequestMsg) GetRequest() []*RdmaCqSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RdmaCqResponse response to one RdmaCqSpec
type RdmaCqResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *RdmaCqResponse) Reset()                    { *m = RdmaCqResponse{} }
func (m *RdmaCqResponse) String() string            { return proto.CompactTextString(m) }
func (*RdmaCqResponse) ProtoMessage()               {}
func (*RdmaCqResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *RdmaCqResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// RdmaCqResponseMsg is response to RdmaCqRequestMsg
type RdmaCqResponseMsg struct {
	Response []*RdmaCqResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RdmaCqResponseMsg) Reset()                    { *m = RdmaCqResponseMsg{} }
func (m *RdmaCqResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaCqResponseMsg) ProtoMessage()               {}
func (*RdmaCqResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *RdmaCqResponseMsg) GetResponse() []*RdmaCqResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// **********************   Event Queue  *****************************//
// RdmaEq object
type RdmaEqSpec struct {
	EqId           uint32 `protobuf:"varint,1,opt,name=eq_id,json=eqId" json:"eq_id,omitempty"`
	HwLifId        uint32 `protobuf:"varint,2,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
	EqWqeSize      uint32 `protobuf:"varint,3,opt,name=eq_wqe_size,json=eqWqeSize" json:"eq_wqe_size,omitempty"`
	NumEqWqes      uint32 `protobuf:"varint,4,opt,name=num_eq_wqes,json=numEqWqes" json:"num_eq_wqes,omitempty"`
	EqeBaseAddrPhy uint64 `protobuf:"varint,5,opt,name=eqe_base_addr_phy,json=eqeBaseAddrPhy" json:"eqe_base_addr_phy,omitempty"`
	IntNum         uint32 `protobuf:"varint,6,opt,name=int_num,json=intNum" json:"int_num,omitempty"`
}

func (m *RdmaEqSpec) Reset()                    { *m = RdmaEqSpec{} }
func (m *RdmaEqSpec) String() string            { return proto.CompactTextString(m) }
func (*RdmaEqSpec) ProtoMessage()               {}
func (*RdmaEqSpec) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *RdmaEqSpec) GetEqId() uint32 {
	if m != nil {
		return m.EqId
	}
	return 0
}

func (m *RdmaEqSpec) GetHwLifId() uint32 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *RdmaEqSpec) GetEqWqeSize() uint32 {
	if m != nil {
		return m.EqWqeSize
	}
	return 0
}

func (m *RdmaEqSpec) GetNumEqWqes() uint32 {
	if m != nil {
		return m.NumEqWqes
	}
	return 0
}

func (m *RdmaEqSpec) GetEqeBaseAddrPhy() uint64 {
	if m != nil {
		return m.EqeBaseAddrPhy
	}
	return 0
}

func (m *RdmaEqSpec) GetIntNum() uint32 {
	if m != nil {
		return m.IntNum
	}
	return 0
}

// RdmaEqRequestMsg is batched request used to create/update of Rdma QPs
type RdmaEqRequestMsg struct {
	Request []*RdmaEqSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RdmaEqRequestMsg) Reset()                    { *m = RdmaEqRequestMsg{} }
func (m *RdmaEqRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaEqRequestMsg) ProtoMessage()               {}
func (*RdmaEqRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

func (m *RdmaEqRequestMsg) GetRequest() []*RdmaEqSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RdmaEqResponse response to one RdmaEqSpec
type RdmaEqResponse struct {
	ApiStatus     ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	EqIntrTblAddr uint32    `protobuf:"varint,2,opt,name=eq_intr_tbl_addr,json=eqIntrTblAddr" json:"eq_intr_tbl_addr,omitempty"`
}

func (m *RdmaEqResponse) Reset()                    { *m = RdmaEqResponse{} }
func (m *RdmaEqResponse) String() string            { return proto.CompactTextString(m) }
func (*RdmaEqResponse) ProtoMessage()               {}
func (*RdmaEqResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *RdmaEqResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RdmaEqResponse) GetEqIntrTblAddr() uint32 {
	if m != nil {
		return m.EqIntrTblAddr
	}
	return 0
}

// RdmaEqResponseMsg is response to RdmaEqRequestMsg
type RdmaEqResponseMsg struct {
	Response []*RdmaEqResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RdmaEqResponseMsg) Reset()                    { *m = RdmaEqResponseMsg{} }
func (m *RdmaEqResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaEqResponseMsg) ProtoMessage()               {}
func (*RdmaEqResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *RdmaEqResponseMsg) GetResponse() []*RdmaEqResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// **********************   Memory Registratin(MR)  *********************//
// RdmaMemReg object
type RdmaMemRegSpec struct {
	HwLifId        uint64   `protobuf:"varint,1,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
	Pd             uint32   `protobuf:"varint,2,opt,name=pd" json:"pd,omitempty"`
	Va             uint64   `protobuf:"varint,3,opt,name=va" json:"va,omitempty"`
	Len            uint32   `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	AcLocalWr      bool     `protobuf:"varint,5,opt,name=ac_local_wr,json=acLocalWr" json:"ac_local_wr,omitempty"`
	AcRemoteWr     bool     `protobuf:"varint,6,opt,name=ac_remote_wr,json=acRemoteWr" json:"ac_remote_wr,omitempty"`
	AcRemoteRd     bool     `protobuf:"varint,7,opt,name=ac_remote_rd,json=acRemoteRd" json:"ac_remote_rd,omitempty"`
	AcRemoteAtomic bool     `protobuf:"varint,8,opt,name=ac_remote_atomic,json=acRemoteAtomic" json:"ac_remote_atomic,omitempty"`
	Lkey           uint32   `protobuf:"varint,9,opt,name=lkey" json:"lkey,omitempty"`
	Rkey           uint32   `protobuf:"varint,10,opt,name=rkey" json:"rkey,omitempty"`
	HostmemPgSize  uint32   `protobuf:"varint,11,opt,name=hostmem_pg_size,json=hostmemPgSize" json:"hostmem_pg_size,omitempty"`
	OverrideLif    uint32   `protobuf:"varint,12,opt,name=override_lif,json=overrideLif" json:"override_lif,omitempty"`
	OverrideLifVld bool     `protobuf:"varint,13,opt,name=override_lif_vld,json=overrideLifVld" json:"override_lif_vld,omitempty"`
	HostAddr       bool     `protobuf:"varint,14,opt,name=host_addr,json=hostAddr" json:"host_addr,omitempty"`
	VaPagesPhyAddr []uint64 `protobuf:"varint,15,rep,packed,name=va_pages_phy_addr,json=vaPagesPhyAddr" json:"va_pages_phy_addr,omitempty"`
}

func (m *RdmaMemRegSpec) Reset()                    { *m = RdmaMemRegSpec{} }
func (m *RdmaMemRegSpec) String() string            { return proto.CompactTextString(m) }
func (*RdmaMemRegSpec) ProtoMessage()               {}
func (*RdmaMemRegSpec) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

func (m *RdmaMemRegSpec) GetHwLifId() uint64 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *RdmaMemRegSpec) GetPd() uint32 {
	if m != nil {
		return m.Pd
	}
	return 0
}

func (m *RdmaMemRegSpec) GetVa() uint64 {
	if m != nil {
		return m.Va
	}
	return 0
}

func (m *RdmaMemRegSpec) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *RdmaMemRegSpec) GetAcLocalWr() bool {
	if m != nil {
		return m.AcLocalWr
	}
	return false
}

func (m *RdmaMemRegSpec) GetAcRemoteWr() bool {
	if m != nil {
		return m.AcRemoteWr
	}
	return false
}

func (m *RdmaMemRegSpec) GetAcRemoteRd() bool {
	if m != nil {
		return m.AcRemoteRd
	}
	return false
}

func (m *RdmaMemRegSpec) GetAcRemoteAtomic() bool {
	if m != nil {
		return m.AcRemoteAtomic
	}
	return false
}

func (m *RdmaMemRegSpec) GetLkey() uint32 {
	if m != nil {
		return m.Lkey
	}
	return 0
}

func (m *RdmaMemRegSpec) GetRkey() uint32 {
	if m != nil {
		return m.Rkey
	}
	return 0
}

func (m *RdmaMemRegSpec) GetHostmemPgSize() uint32 {
	if m != nil {
		return m.HostmemPgSize
	}
	return 0
}

func (m *RdmaMemRegSpec) GetOverrideLif() uint32 {
	if m != nil {
		return m.OverrideLif
	}
	return 0
}

func (m *RdmaMemRegSpec) GetOverrideLifVld() bool {
	if m != nil {
		return m.OverrideLifVld
	}
	return false
}

func (m *RdmaMemRegSpec) GetHostAddr() bool {
	if m != nil {
		return m.HostAddr
	}
	return false
}

func (m *RdmaMemRegSpec) GetVaPagesPhyAddr() []uint64 {
	if m != nil {
		return m.VaPagesPhyAddr
	}
	return nil
}

// RdmaMemRegRequestMsg is batched request used to create/update of Rdma QPs
type RdmaMemRegRequestMsg struct {
	Request []*RdmaMemRegSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RdmaMemRegRequestMsg) Reset()                    { *m = RdmaMemRegRequestMsg{} }
func (m *RdmaMemRegRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaMemRegRequestMsg) ProtoMessage()               {}
func (*RdmaMemRegRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21} }

func (m *RdmaMemRegRequestMsg) GetRequest() []*RdmaMemRegSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RdmaMemRegResponse response to one RdmaMemRegSpec
type RdmaMemRegResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *RdmaMemRegResponse) Reset()                    { *m = RdmaMemRegResponse{} }
func (m *RdmaMemRegResponse) String() string            { return proto.CompactTextString(m) }
func (*RdmaMemRegResponse) ProtoMessage()               {}
func (*RdmaMemRegResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{22} }

func (m *RdmaMemRegResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// RdmaMemRegResponseMsg is response to RdmaMemRegRequestMsg
type RdmaMemRegResponseMsg struct {
	Response []*RdmaMemRegResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RdmaMemRegResponseMsg) Reset()                    { *m = RdmaMemRegResponseMsg{} }
func (m *RdmaMemRegResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaMemRegResponseMsg) ProtoMessage()               {}
func (*RdmaMemRegResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{23} }

func (m *RdmaMemRegResponseMsg) GetResponse() []*RdmaMemRegResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// **********************   Allocate L_Key  *********************//
// RdmaAllocLkey object
type RdmaAllocLkeySpec struct {
	HwLifId          uint64 `protobuf:"varint,1,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
	Pd               uint32 `protobuf:"varint,2,opt,name=pd" json:"pd,omitempty"`
	RemoteAccess     bool   `protobuf:"varint,3,opt,name=remote_access,json=remoteAccess" json:"remote_access,omitempty"`
	Lkey             uint32 `protobuf:"varint,4,opt,name=lkey" json:"lkey,omitempty"`
	Rkey             uint32 `protobuf:"varint,5,opt,name=rkey" json:"rkey,omitempty"`
	NumPtEntriesRsvd uint32 `protobuf:"varint,6,opt,name=num_pt_entries_rsvd,json=numPtEntriesRsvd" json:"num_pt_entries_rsvd,omitempty"`
	HostAddr         bool   `protobuf:"varint,7,opt,name=host_addr,json=hostAddr" json:"host_addr,omitempty"`
}

func (m *RdmaAllocLkeySpec) Reset()                    { *m = RdmaAllocLkeySpec{} }
func (m *RdmaAllocLkeySpec) String() string            { return proto.CompactTextString(m) }
func (*RdmaAllocLkeySpec) ProtoMessage()               {}
func (*RdmaAllocLkeySpec) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{24} }

func (m *RdmaAllocLkeySpec) GetHwLifId() uint64 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *RdmaAllocLkeySpec) GetPd() uint32 {
	if m != nil {
		return m.Pd
	}
	return 0
}

func (m *RdmaAllocLkeySpec) GetRemoteAccess() bool {
	if m != nil {
		return m.RemoteAccess
	}
	return false
}

func (m *RdmaAllocLkeySpec) GetLkey() uint32 {
	if m != nil {
		return m.Lkey
	}
	return 0
}

func (m *RdmaAllocLkeySpec) GetRkey() uint32 {
	if m != nil {
		return m.Rkey
	}
	return 0
}

func (m *RdmaAllocLkeySpec) GetNumPtEntriesRsvd() uint32 {
	if m != nil {
		return m.NumPtEntriesRsvd
	}
	return 0
}

func (m *RdmaAllocLkeySpec) GetHostAddr() bool {
	if m != nil {
		return m.HostAddr
	}
	return false
}

// RdmaAllocLkeyRequestMsg is batched request used to create/update of Rdma QPs
type RdmaAllocLkeyRequestMsg struct {
	Request []*RdmaAllocLkeySpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RdmaAllocLkeyRequestMsg) Reset()                    { *m = RdmaAllocLkeyRequestMsg{} }
func (m *RdmaAllocLkeyRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaAllocLkeyRequestMsg) ProtoMessage()               {}
func (*RdmaAllocLkeyRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{25} }

func (m *RdmaAllocLkeyRequestMsg) GetRequest() []*RdmaAllocLkeySpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RdmaAllocLkeyResponse response to one RdmaAllocLkeySpec
type RdmaAllocLkeyResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *RdmaAllocLkeyResponse) Reset()                    { *m = RdmaAllocLkeyResponse{} }
func (m *RdmaAllocLkeyResponse) String() string            { return proto.CompactTextString(m) }
func (*RdmaAllocLkeyResponse) ProtoMessage()               {}
func (*RdmaAllocLkeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{26} }

func (m *RdmaAllocLkeyResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// RdmaAllocLkeyResponseMsg is response to RdmaAllocLkeyRequestMsg
type RdmaAllocLkeyResponseMsg struct {
	Response []*RdmaAllocLkeyResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RdmaAllocLkeyResponseMsg) Reset()                    { *m = RdmaAllocLkeyResponseMsg{} }
func (m *RdmaAllocLkeyResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaAllocLkeyResponseMsg) ProtoMessage()               {}
func (*RdmaAllocLkeyResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{27} }

func (m *RdmaAllocLkeyResponseMsg) GetResponse() []*RdmaAllocLkeyResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type RdmaMemWindowSpec struct {
	HwLifId        uint64               `protobuf:"varint,1,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
	Pd             uint32               `protobuf:"varint,2,opt,name=pd" json:"pd,omitempty"`
	MwType         RdmaMemoryWindowType `protobuf:"varint,3,opt,name=mw_type,json=mwType,enum=rdma.RdmaMemoryWindowType" json:"mw_type,omitempty"`
	AcRemoteWr     bool                 `protobuf:"varint,4,opt,name=ac_remote_wr,json=acRemoteWr" json:"ac_remote_wr,omitempty"`
	AcRemoteRd     bool                 `protobuf:"varint,5,opt,name=ac_remote_rd,json=acRemoteRd" json:"ac_remote_rd,omitempty"`
	AcRemoteAtomic bool                 `protobuf:"varint,6,opt,name=ac_remote_atomic,json=acRemoteAtomic" json:"ac_remote_atomic,omitempty"`
	Rkey           uint32               `protobuf:"varint,7,opt,name=rkey" json:"rkey,omitempty"`
	OverrideLif    uint32               `protobuf:"varint,8,opt,name=override_lif,json=overrideLif" json:"override_lif,omitempty"`
	OverrideLifVld bool                 `protobuf:"varint,9,opt,name=override_lif_vld,json=overrideLifVld" json:"override_lif_vld,omitempty"`
}

func (m *RdmaMemWindowSpec) Reset()                    { *m = RdmaMemWindowSpec{} }
func (m *RdmaMemWindowSpec) String() string            { return proto.CompactTextString(m) }
func (*RdmaMemWindowSpec) ProtoMessage()               {}
func (*RdmaMemWindowSpec) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{28} }

func (m *RdmaMemWindowSpec) GetHwLifId() uint64 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *RdmaMemWindowSpec) GetPd() uint32 {
	if m != nil {
		return m.Pd
	}
	return 0
}

func (m *RdmaMemWindowSpec) GetMwType() RdmaMemoryWindowType {
	if m != nil {
		return m.MwType
	}
	return RdmaMemoryWindowType_RDMA_MEMORY_WINDOW_TYPE_NONE
}

func (m *RdmaMemWindowSpec) GetAcRemoteWr() bool {
	if m != nil {
		return m.AcRemoteWr
	}
	return false
}

func (m *RdmaMemWindowSpec) GetAcRemoteRd() bool {
	if m != nil {
		return m.AcRemoteRd
	}
	return false
}

func (m *RdmaMemWindowSpec) GetAcRemoteAtomic() bool {
	if m != nil {
		return m.AcRemoteAtomic
	}
	return false
}

func (m *RdmaMemWindowSpec) GetRkey() uint32 {
	if m != nil {
		return m.Rkey
	}
	return 0
}

func (m *RdmaMemWindowSpec) GetOverrideLif() uint32 {
	if m != nil {
		return m.OverrideLif
	}
	return 0
}

func (m *RdmaMemWindowSpec) GetOverrideLifVld() bool {
	if m != nil {
		return m.OverrideLifVld
	}
	return false
}

// RdmaMemWindowRequestMsg is batched request used to create/update of Rdma QPs
type RdmaMemWindowRequestMsg struct {
	Request []*RdmaMemWindowSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RdmaMemWindowRequestMsg) Reset()                    { *m = RdmaMemWindowRequestMsg{} }
func (m *RdmaMemWindowRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaMemWindowRequestMsg) ProtoMessage()               {}
func (*RdmaMemWindowRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{29} }

func (m *RdmaMemWindowRequestMsg) GetRequest() []*RdmaMemWindowSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RdmaMemWindowResponse response to one RdmaMemWindowSpec
type RdmaMemWindowResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *RdmaMemWindowResponse) Reset()                    { *m = RdmaMemWindowResponse{} }
func (m *RdmaMemWindowResponse) String() string            { return proto.CompactTextString(m) }
func (*RdmaMemWindowResponse) ProtoMessage()               {}
func (*RdmaMemWindowResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{30} }

func (m *RdmaMemWindowResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// RdmaMemWindowResponseMsg is response to RdmaMemWindowRequestMsg
type RdmaMemWindowResponseMsg struct {
	Response []*RdmaMemWindowResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RdmaMemWindowResponseMsg) Reset()                    { *m = RdmaMemWindowResponseMsg{} }
func (m *RdmaMemWindowResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaMemWindowResponseMsg) ProtoMessage()               {}
func (*RdmaMemWindowResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{31} }

func (m *RdmaMemWindowResponseMsg) GetResponse() []*RdmaMemWindowResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type RdmaAqSpec struct {
	AqNum       uint32 `protobuf:"varint,1,opt,name=aq_num,json=aqNum" json:"aq_num,omitempty"`
	HwLifId     uint32 `protobuf:"varint,2,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
	LogWqeSize  uint32 `protobuf:"varint,3,opt,name=log_wqe_size,json=logWqeSize" json:"log_wqe_size,omitempty"`
	LogNumWqes  uint32 `protobuf:"varint,4,opt,name=log_num_wqes,json=logNumWqes" json:"log_num_wqes,omitempty"`
	CqNum       uint32 `protobuf:"varint,5,opt,name=cq_num,json=cqNum" json:"cq_num,omitempty"`
	PhyBaseAddr uint64 `protobuf:"varint,6,opt,name=phy_base_addr,json=phyBaseAddr" json:"phy_base_addr,omitempty"`
}

func (m *RdmaAqSpec) Reset()                    { *m = RdmaAqSpec{} }
func (m *RdmaAqSpec) String() string            { return proto.CompactTextString(m) }
func (*RdmaAqSpec) ProtoMessage()               {}
func (*RdmaAqSpec) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{32} }

func (m *RdmaAqSpec) GetAqNum() uint32 {
	if m != nil {
		return m.AqNum
	}
	return 0
}

func (m *RdmaAqSpec) GetHwLifId() uint32 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *RdmaAqSpec) GetLogWqeSize() uint32 {
	if m != nil {
		return m.LogWqeSize
	}
	return 0
}

func (m *RdmaAqSpec) GetLogNumWqes() uint32 {
	if m != nil {
		return m.LogNumWqes
	}
	return 0
}

func (m *RdmaAqSpec) GetCqNum() uint32 {
	if m != nil {
		return m.CqNum
	}
	return 0
}

func (m *RdmaAqSpec) GetPhyBaseAddr() uint64 {
	if m != nil {
		return m.PhyBaseAddr
	}
	return 0
}

// RdmaAQRequestMsg is batched request used to create of Rdma AQs
type RdmaAqRequestMsg struct {
	Request []*RdmaAqSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RdmaAqRequestMsg) Reset()                    { *m = RdmaAqRequestMsg{} }
func (m *RdmaAqRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaAqRequestMsg) ProtoMessage()               {}
func (*RdmaAqRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{33} }

func (m *RdmaAqRequestMsg) GetRequest() []*RdmaAqSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RdmaQpResponse response to one RdmaAQSpec
type RdmaAqResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *RdmaAqResponse) Reset()                    { *m = RdmaAqResponse{} }
func (m *RdmaAqResponse) String() string            { return proto.CompactTextString(m) }
func (*RdmaAqResponse) ProtoMessage()               {}
func (*RdmaAqResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{34} }

func (m *RdmaAqResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// RdmaAQResponseMsg is response to RdmaAQRequestMsg
type RdmaAqResponseMsg struct {
	Response []*RdmaAqResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RdmaAqResponseMsg) Reset()                    { *m = RdmaAqResponseMsg{} }
func (m *RdmaAqResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaAqResponseMsg) ProtoMessage()               {}
func (*RdmaAqResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{35} }

func (m *RdmaAqResponseMsg) GetResponse() []*RdmaAqResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*RdmaQpSpec)(nil), "halproto.RdmaQpSpec")
	proto.RegisterType((*RdmaQpRequestMsg)(nil), "halproto.RdmaQpRequestMsg")
	proto.RegisterType((*RdmaQpResponse)(nil), "halproto.RdmaQpResponse")
	proto.RegisterType((*RdmaQpResponseMsg)(nil), "halproto.RdmaQpResponseMsg")
	proto.RegisterType((*RdmaQpUpdateSpec)(nil), "halproto.RdmaQpUpdateSpec")
	proto.RegisterType((*RdmaQpUpdateRequestMsg)(nil), "halproto.RdmaQpUpdateRequestMsg")
	proto.RegisterType((*RdmaQpUpdateResponse)(nil), "halproto.RdmaQpUpdateResponse")
	proto.RegisterType((*RdmaQpUpdateResponseMsg)(nil), "halproto.RdmaQpUpdateResponseMsg")
	proto.RegisterType((*RdmaAhSpec)(nil), "halproto.RdmaAhSpec")
	proto.RegisterType((*RdmaAhRequestMsg)(nil), "halproto.RdmaAhRequestMsg")
	proto.RegisterType((*RdmaAhResponse)(nil), "halproto.RdmaAhResponse")
	proto.RegisterType((*RdmaAhResponseMsg)(nil), "halproto.RdmaAhResponseMsg")
	proto.RegisterType((*RdmaCqSpec)(nil), "halproto.RdmaCqSpec")
	proto.RegisterType((*RdmaCqRequestMsg)(nil), "halproto.RdmaCqRequestMsg")
	proto.RegisterType((*RdmaCqResponse)(nil), "halproto.RdmaCqResponse")
	proto.RegisterType((*RdmaCqResponseMsg)(nil), "halproto.RdmaCqResponseMsg")
	proto.RegisterType((*RdmaEqSpec)(nil), "halproto.RdmaEqSpec")
	proto.RegisterType((*RdmaEqRequestMsg)(nil), "halproto.RdmaEqRequestMsg")
	proto.RegisterType((*RdmaEqResponse)(nil), "halproto.RdmaEqResponse")
	proto.RegisterType((*RdmaEqResponseMsg)(nil), "halproto.RdmaEqResponseMsg")
	proto.RegisterType((*RdmaMemRegSpec)(nil), "halproto.RdmaMemRegSpec")
	proto.RegisterType((*RdmaMemRegRequestMsg)(nil), "halproto.RdmaMemRegRequestMsg")
	proto.RegisterType((*RdmaMemRegResponse)(nil), "halproto.RdmaMemRegResponse")
	proto.RegisterType((*RdmaMemRegResponseMsg)(nil), "halproto.RdmaMemRegResponseMsg")
	proto.RegisterType((*RdmaAllocLkeySpec)(nil), "halproto.RdmaAllocLkeySpec")
	proto.RegisterType((*RdmaAllocLkeyRequestMsg)(nil), "halproto.RdmaAllocLkeyRequestMsg")
	proto.RegisterType((*RdmaAllocLkeyResponse)(nil), "halproto.RdmaAllocLkeyResponse")
	proto.RegisterType((*RdmaAllocLkeyResponseMsg)(nil), "halproto.RdmaAllocLkeyResponseMsg")
	proto.RegisterType((*RdmaMemWindowSpec)(nil), "halproto.RdmaMemWindowSpec")
	proto.RegisterType((*RdmaMemWindowRequestMsg)(nil), "halproto.RdmaMemWindowRequestMsg")
	proto.RegisterType((*RdmaMemWindowResponse)(nil), "halproto.RdmaMemWindowResponse")
	proto.RegisterType((*RdmaMemWindowResponseMsg)(nil), "halproto.RdmaMemWindowResponseMsg")
	proto.RegisterType((*RdmaAqSpec)(nil), "halproto.RdmaAqSpec")
	proto.RegisterType((*RdmaAqRequestMsg)(nil), "halproto.RdmaAqRequestMsg")
	proto.RegisterType((*RdmaAqResponse)(nil), "halproto.RdmaAqResponse")
	proto.RegisterType((*RdmaAqResponseMsg)(nil), "halproto.RdmaAqResponseMsg")
	proto.RegisterEnum("halproto.RdmaServiceType", RdmaServiceType_name, RdmaServiceType_value)
	proto.RegisterEnum("halproto.RdmaQpUpdateOper", RdmaQpUpdateOper_name, RdmaQpUpdateOper_value)
	proto.RegisterEnum("halproto.RdmaMemoryWindowType", RdmaMemoryWindowType_name, RdmaMemoryWindowType_value)
}

func init() { proto.RegisterFile("rdma.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 2305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x59, 0x4b, 0x73, 0xdb, 0xc8,
	0x11, 0x5e, 0x52, 0x24, 0x45, 0xb5, 0x48, 0x6a, 0x34, 0xd6, 0x83, 0x96, 0x1f, 0x4b, 0x73, 0xfd,
	0xa0, 0x95, 0x44, 0x5e, 0xcb, 0x5b, 0xc9, 0x2d, 0x55, 0x58, 0x12, 0xb6, 0x19, 0x8b, 0x14, 0x05,
	0x52, 0xb6, 0x95, 0xcb, 0x14, 0x04, 0x8c, 0x44, 0xc4, 0x04, 0x88, 0x17, 0xa5, 0xd5, 0xfe, 0x84,
	0x54, 0x2e, 0xf9, 0x25, 0x39, 0xe7, 0x92, 0xaa, 0x54, 0xae, 0xb9, 0xa4, 0x72, 0xc9, 0xcf, 0x49,
	0xcd, 0x0c, 0x40, 0x02, 0x24, 0x48, 0x71, 0xe5, 0x93, 0xc0, 0xee, 0x0f, 0x1f, 0x66, 0xba, 0xbf,
	0xe9, 0x6e, 0x40, 0x00, 0xae, 0x6e, 0xaa, 0x07, 0xb6, 0x3b, 0xf4, 0x87, 0x38, 0xc3, 0xae, 0xf7,
	0xd6, 0xfd, 0x1b, 0x9b, 0x7a, 0xc2, 0x54, 0xfd, 0x5b, 0x0e, 0x40, 0xd1, 0x4d, 0xf5, 0xc4, 0xee,
	0xda, 0x54, 0xc3, 0xdb, 0x90, 0x73, 0x6c, 0x62, 0x8d, 0xcc, 0x72, 0xaa, 0x92, 0xaa, 0x15, 0x95,
	0xac, 0x63, 0xb7, 0x47, 0x26, 0xde, 0x83, 0xb5, 0xfe, 0x35, 0x19, 0x18, 0x17, 0xc4, 0xd0, 0xcb,
	0x69, 0xee, 0x59, 0xed, 0x5f, 0x1f, 0x19, 0x17, 0x4d, 0x1d, 0x3f, 0x86, 0x75, 0xcf, 0x21, 0xd7,
	0x0e, 0x25, 0x9e, 0xf1, 0x33, 0x2d, 0xaf, 0x70, 0xef, 0x9a, 0xe7, 0x7c, 0x72, 0x68, 0xd7, 0xf8,
	0x99, 0x32, 0xbf, 0x1b, 0xf1, 0x67, 0x84, 0xdf, 0x8d, 0xfa, 0xad, 0x91, 0x49, 0x04, 0x87, 0x57,
	0xce, 0x0a, 0xbf, 0x35, 0x32, 0xbb, 0x0c, 0xe2, 0x85, 0x7e, 0x37, 0xf0, 0xe7, 0xc6, 0x7e, 0x45,
	0xf8, 0x2b, 0x50, 0xe0, 0xfe, 0x90, 0x60, 0x95, 0x03, 0x80, 0x01, 0xbc, 0x38, 0x22, 0xa4, 0xc8,
	0x4f, 0x10, 0xae, 0x40, 0x94, 0x20, 0x6d, 0xeb, 0xe5, 0x35, 0x6e, 0x4f, 0xdb, 0x3a, 0xc6, 0x90,
	0xb1, 0x4d, 0x7f, 0x54, 0x06, 0x6e, 0xe1, 0xd7, 0xf8, 0x39, 0x6c, 0xf4, 0x87, 0x9e, 0x6f, 0x52,
	0x93, 0xd8, 0x97, 0x62, 0x2f, 0xeb, 0xdc, 0x5d, 0x0c, 0xcc, 0x9d, 0x4b, 0xbe, 0x9f, 0x17, 0xb0,
	0xe2, 0x5d, 0x69, 0xe5, 0x42, 0x25, 0x55, 0x2b, 0x1d, 0x6e, 0x1f, 0xf0, 0xf0, 0xb3, 0x08, 0x77,
	0xa9, 0x7b, 0x65, 0x68, 0xb4, 0x77, 0x63, 0x53, 0x85, 0x21, 0xf0, 0x33, 0x28, 0xa9, 0xfe, 0xd0,
	0x34, 0x34, 0x42, 0x2d, 0xf5, 0x7c, 0x40, 0xf5, 0x72, 0xb1, 0x92, 0xaa, 0xe5, 0x95, 0xa2, 0xb0,
	0xca, 0xc2, 0x88, 0x77, 0x61, 0xd5, 0x73, 0xc8, 0xe0, 0x0b, 0xbd, 0x29, 0x97, 0xf8, 0xf3, 0x72,
	0x9e, 0x73, 0xf4, 0x85, 0xde, 0x30, 0x87, 0x1b, 0x38, 0x36, 0x84, 0xc3, 0x15, 0x8e, 0x3d, 0x58,
	0x73, 0x1d, 0xa2, 0x39, 0x3c, 0x8f, 0x48, 0x64, 0xcb, 0x75, 0xea, 0x4e, 0x90, 0x49, 0x6f, 0xec,
	0xdb, 0x14, 0x3e, 0x2f, 0xf0, 0x3d, 0x85, 0x92, 0x61, 0x9a, 0xba, 0x4f, 0x54, 0x8f, 0xe8, 0xe7,
	0x74, 0x30, 0x28, 0x63, 0xbe, 0xa0, 0x02, 0xb7, 0x4a, 0x5e, 0x83, 0xd9, 0xf0, 0x0b, 0x40, 0x9e,
	0x43, 0x0c, 0x8b, 0x58, 0x86, 0x46, 0x4c, 0x6a, 0x0e, 0xdd, 0x9b, 0xf2, 0x3d, 0xb1, 0x70, 0xcf,
	0x69, 0x5a, 0x6d, 0x43, 0x6b, 0x71, 0x23, 0x0b, 0xbb, 0xe7, 0x90, 0x73, 0xd5, 0xa3, 0x44, 0xd5,
	0x75, 0xb7, 0xbc, 0x55, 0x49, 0xd5, 0x32, 0x0a, 0x78, 0xce, 0x8f, 0xaa, 0x47, 0x25, 0x5d, 0x77,
	0x19, 0x95, 0x3b, 0x4d, 0xb5, 0x2d, 0xa8, 0xdc, 0x69, 0x2a, 0x37, 0x4a, 0xb5, 0x23, 0xa8, 0xdc,
	0x09, 0xd5, 0x03, 0x58, 0x33, 0x2e, 0x48, 0x5f, 0xb5, 0xf4, 0x01, 0x2d, 0xef, 0x56, 0x52, 0xb5,
	0x9c, 0x92, 0x37, 0x2e, 0xde, 0xf3, 0xdf, 0xf8, 0x25, 0x6c, 0x5e, 0xa9, 0xc4, 0x56, 0x2f, 0xa9,
	0x47, 0xec, 0xfe, 0x8d, 0xe0, 0x28, 0x57, 0x56, 0x6a, 0x19, 0xa5, 0x74, 0xa5, 0x76, 0x98, 0xbd,
	0xd3, 0xbf, 0xe1, 0x3c, 0x81, 0x56, 0x3c, 0x47, 0xc0, 0xcb, 0xf7, 0xc7, 0x5a, 0xe9, 0x3a, 0x1c,
	0x58, 0xfd, 0x3d, 0x20, 0x71, 0x60, 0x14, 0xea, 0x8c, 0xa8, 0xe7, 0xb7, 0xbc, 0x4b, 0xbc, 0x0f,
	0xab, 0xae, 0xf8, 0x55, 0x4e, 0x55, 0x56, 0x6a, 0xeb, 0x87, 0x68, 0x92, 0x77, 0x71, 0xb2, 0x94,
	0x10, 0x50, 0xfd, 0x4b, 0x1a, 0x4a, 0x21, 0x81, 0x67, 0x0f, 0x2d, 0x8f, 0xe2, 0x57, 0x00, 0xaa,
	0x6d, 0x10, 0xcf, 0x57, 0xfd, 0x91, 0xc7, 0x4f, 0x5e, 0xe9, 0x10, 0x1d, 0x88, 0x63, 0x2a, 0xd9,
	0x46, 0x97, 0xdb, 0x95, 0x35, 0x35, 0xbc, 0xc4, 0x55, 0x28, 0xba, 0xb1, 0xd8, 0xae, 0xf0, 0x80,
	0xac, 0xbb, 0x91, 0xe0, 0x32, 0x4c, 0x2c, 0x68, 0x99, 0x00, 0xe3, 0xc6, 0x12, 0xc0, 0x42, 0x1f,
	0xa3, 0xca, 0x72, 0x58, 0xd1, 0x32, 0xb4, 0xee, 0x0c, 0x30, 0xc6, 0x97, 0x1b, 0x03, 0x95, 0x09,
	0xf0, 0x15, 0x6c, 0xb1, 0x9d, 0x93, 0x40, 0xd9, 0x2e, 0xf5, 0x04, 0x78, 0x95, 0x83, 0x37, 0x99,
	0x4f, 0xe2, 0x2e, 0x85, 0x7a, 0xec, 0x86, 0xaa, 0x0c, 0x9b, 0xf1, 0x68, 0xb0, 0x78, 0x7e, 0x0f,
	0x79, 0x37, 0xf8, 0x19, 0x04, 0x74, 0x2b, 0x1a, 0xd0, 0x10, 0xaa, 0x8c, 0x51, 0xd5, 0xbf, 0xa7,
	0xc3, 0xb4, 0x9c, 0xda, 0xba, 0xea, 0xd3, 0xbb, 0x56, 0xb3, 0x7d, 0xc8, 0x0c, 0x6d, 0x2a, 0x02,
	0x5a, 0x3a, 0xdc, 0x89, 0x3e, 0x55, 0x10, 0x1f, 0xdb, 0xd4, 0x55, 0x38, 0x06, 0x3f, 0x04, 0xd0,
	0x3d, 0x9f, 0x04, 0x8f, 0x10, 0x85, 0x2d, 0xaf, 0x7b, 0xfe, 0x09, 0x7f, 0xca, 0x0b, 0xd8, 0xe8,
	0x53, 0x55, 0xa7, 0x2e, 0xf1, 0xa9, 0x69, 0x0f, 0x54, 0x9f, 0xf2, 0xd0, 0x16, 0x94, 0x92, 0x30,
	0xf7, 0x02, 0x2b, 0xbe, 0x07, 0x59, 0x87, 0xb0, 0x53, 0x2c, 0x4a, 0x5b, 0xc6, 0xf9, 0x40, 0x6f,
	0x98, 0x91, 0x12, 0xdb, 0xb3, 0x82, 0x72, 0x96, 0xa1, 0x1d, 0xcf, 0x62, 0xfb, 0xf1, 0x7f, 0xe2,
	0x56, 0x51, 0xc2, 0xb2, 0xfe, 0x4f, 0xcc, 0x8c, 0x21, 0xa3, 0xf6, 0x8d, 0xb0, 0x7e, 0xf1, 0xeb,
	0xc4, 0x0a, 0xb6, 0x03, 0x39, 0x87, 0x69, 0x2c, 0x2c, 0x5c, 0xc1, 0xaf, 0xea, 0x1f, 0x60, 0x27,
	0xba, 0xc3, 0x88, 0xae, 0xbf, 0x9f, 0xd6, 0x75, 0x42, 0x40, 0xe2, 0xea, 0x7e, 0x07, 0x5b, 0x71,
	0xae, 0x3b, 0x4a, 0xbc, 0x7a, 0x02, 0xbb, 0x49, 0x44, 0x6c, 0x55, 0xbf, 0x9d, 0x51, 0xc7, 0xde,
	0xec, 0xb2, 0x12, 0x34, 0x42, 0x45, 0xab, 0x93, 0xfa, 0x5c, 0x1c, 0x61, 0xd4, 0x52, 0x5c, 0x99,
	0x22, 0x6a, 0x8b, 0x94, 0x91, 0x90, 0xcf, 0x95, 0xa4, 0x7c, 0x86, 0x05, 0x42, 0xea, 0x2f, 0x59,
	0x20, 0xc4, 0x7a, 0x26, 0x21, 0x94, 0x44, 0x7d, 0x60, 0xf7, 0xdf, 0x35, 0x78, 0xc1, 0xa1, 0x9a,
	0x50, 0xdc, 0x7a, 0xa8, 0x26, 0xd0, 0x48, 0xc0, 0xfe, 0xbd, 0x22, 0x22, 0x56, 0x77, 0xc2, 0xe3,
	0x14, 0x34, 0x8e, 0xe0, 0x38, 0x69, 0xce, 0x12, 0xc3, 0x81, 0x36, 0x3b, 0x1c, 0x68, 0xd3, 0xcd,
	0x5f, 0x0b, 0x3a, 0x73, 0x66, 0xdc, 0xdc, 0xeb, 0xa2, 0x31, 0x27, 0x34, 0xdd, 0x6c, 0x52, 0xd3,
	0xdd, 0x85, 0x55, 0x2d, 0xe8, 0x85, 0xe2, 0x14, 0xe5, 0x34, 0xd1, 0x0b, 0xd9, 0x39, 0x72, 0xd8,
	0xc2, 0xc2, 0x73, 0xe4, 0x34, 0x75, 0xfc, 0x04, 0x0a, 0xd7, 0xea, 0x17, 0x3a, 0xb2, 0x89, 0x6e,
	0xab, 0x7e, 0x9f, 0x9f, 0xa6, 0xbc, 0xb2, 0x2e, 0x6c, 0x0d, 0x66, 0xc2, 0x8f, 0x00, 0x02, 0xc8,
	0xc0, 0xb8, 0x08, 0x4e, 0xd6, 0x9a, 0xb0, 0x1c, 0x19, 0x17, 0x11, 0x06, 0x87, 0xa5, 0x21, 0x38,
	0x66, 0x01, 0xc3, 0x09, 0x33, 0x45, 0x18, 0x1c, 0x43, 0x0f, 0x4e, 0x5c, 0xc0, 0x70, 0x62, 0xe8,
	0xac, 0xd9, 0x06, 0x6e, 0xd7, 0xb0, 0x2e, 0xd9, 0x0a, 0x0b, 0x1c, 0x12, 0xf0, 0x2a, 0x86, 0x75,
	0xd9, 0xd4, 0x59, 0x5b, 0x63, 0x1b, 0x15, 0x35, 0x54, 0x8c, 0x07, 0x79, 0x66, 0xe0, 0xb5, 0xf6,
	0x00, 0xb6, 0x34, 0x87, 0xcc, 0x76, 0xb6, 0x12, 0xef, 0x6c, 0x48, 0x73, 0x3e, 0xc6, 0x7a, 0x5b,
	0x28, 0xcc, 0xba, 0xb3, 0xa4, 0x30, 0x45, 0xda, 0x67, 0x84, 0xc9, 0xee, 0xff, 0x4a, 0x61, 0x4e,
	0x28, 0x6e, 0x15, 0xe6, 0x04, 0x1a, 0x11, 0xe6, 0x3f, 0x53, 0x42, 0x98, 0xb2, 0x10, 0xe6, 0x38,
	0xc9, 0xa9, 0x48, 0x92, 0x6f, 0x91, 0x25, 0x9d, 0x95, 0x25, 0x9d, 0x96, 0x25, 0x9d, 0x91, 0xa5,
	0x2c, 0x64, 0xf9, 0x12, 0x36, 0xa9, 0x43, 0x27, 0xbd, 0x90, 0xc5, 0x3e, 0x68, 0x9c, 0x25, 0xea,
	0xd0, 0xb0, 0x1b, 0x76, 0xfa, 0x7c, 0x4a, 0x33, 0x2c, 0x9f, 0x9f, 0x9a, 0x40, 0x99, 0x86, 0xe5,
	0xb7, 0x47, 0x66, 0x98, 0x0d, 0x79, 0xd9, 0x6c, 0xc8, 0x53, 0xd9, 0xf8, 0x93, 0xc8, 0x86, 0x7c,
	0xf7, 0x6c, 0xb0, 0xae, 0xce, 0xe2, 0x66, 0xf9, 0x2e, 0xf1, 0xcf, 0x07, 0x42, 0x3c, 0x22, 0x52,
	0x45, 0xea, 0x34, 0x2d, 0xdf, 0xed, 0x9d, 0x0f, 0xa2, 0x4d, 0x5a, 0x5e, 0x3e, 0x6d, 0x72, 0x52,
	0xda, 0xfe, 0xb3, 0x22, 0xd6, 0xdc, 0xa2, 0xa6, 0x42, 0x2f, 0x79, 0xea, 0x62, 0x59, 0x12, 0xa5,
	0x78, 0x9c, 0x25, 0x31, 0x95, 0xa7, 0xc7, 0x53, 0x79, 0x09, 0xd2, 0x57, 0x6a, 0x30, 0xea, 0xa4,
	0xaf, 0x54, 0x8c, 0x60, 0x65, 0x40, 0xad, 0x20, 0x3b, 0xec, 0x92, 0xe5, 0x4d, 0xd5, 0xc8, 0x60,
	0xa8, 0xa9, 0x03, 0x72, 0x2d, 0x46, 0x99, 0xbc, 0xb2, 0xa6, 0x6a, 0x47, 0xcc, 0xf2, 0x89, 0x4f,
	0x77, 0x2a, 0x1b, 0x4a, 0xcc, 0xa1, 0x4f, 0x19, 0x20, 0xc7, 0x01, 0xa0, 0x6a, 0x0a, 0x37, 0x4d,
	0x23, 0x5c, 0x51, 0x36, 0x22, 0x08, 0x45, 0xc7, 0x35, 0x40, 0x13, 0x84, 0x18, 0x73, 0x82, 0x02,
	0x52, 0x0a, 0x51, 0x62, 0xc2, 0x61, 0x1d, 0x86, 0x57, 0xa4, 0xa0, 0x2f, 0xb3, 0x6b, 0x66, 0x73,
	0x99, 0x2d, 0xe8, 0xcb, 0xec, 0x7a, 0xe9, 0x37, 0x8b, 0x27, 0x50, 0x18, 0x5e, 0x51, 0xd7, 0x35,
	0x74, 0xca, 0xab, 0x92, 0x28, 0x18, 0xeb, 0xa1, 0x8d, 0xd5, 0xa5, 0x1a, 0xa0, 0x28, 0x84, 0x5c,
	0x0d, 0xc2, 0xb7, 0x8a, 0x52, 0x04, 0xf6, 0x71, 0x30, 0x55, 0x59, 0x4a, 0x53, 0x95, 0x25, 0x71,
	0x60, 0xde, 0x48, 0x1a, 0x98, 0xab, 0x6f, 0x45, 0xc3, 0x17, 0x29, 0x8d, 0x48, 0xf9, 0x60, 0x5a,
	0xca, 0x11, 0x71, 0x4c, 0xf2, 0x3f, 0x91, 0xb3, 0x0c, 0x38, 0xca, 0x73, 0xd7, 0x02, 0xd3, 0x82,
	0xed, 0x59, 0x1a, 0xb6, 0x9e, 0x1f, 0x66, 0xd4, 0x5a, 0x9e, 0x5e, 0x50, 0x82, 0x62, 0xff, 0x97,
	0x0a, 0x3a, 0xe9, 0x60, 0x30, 0xd4, 0x58, 0x43, 0xf9, 0xc5, 0xa2, 0xfd, 0x0e, 0x8a, 0xa1, 0x56,
	0x34, 0x8d, 0x7a, 0x1e, 0xd7, 0x6f, 0x5e, 0x29, 0x08, 0xa3, 0xc4, 0x6d, 0x63, 0xa5, 0x64, 0x12,
	0x94, 0x92, 0x8d, 0x28, 0xe5, 0x37, 0x70, 0x8f, 0xd5, 0x25, 0xdb, 0x27, 0xd4, 0xf2, 0x5d, 0x83,
	0x7a, 0xc4, 0xf5, 0xae, 0xf4, 0xa0, 0xb0, 0x20, 0x6b, 0x64, 0x76, 0x7c, 0x59, 0x38, 0x14, 0xef,
	0x6a, 0x2a, 0xc7, 0xab, 0xf1, 0x1c, 0x57, 0x8f, 0xc4, 0x80, 0x35, 0xde, 0x59, 0x24, 0x77, 0xaf,
	0xa7, 0x73, 0xb7, 0x1b, 0x19, 0x14, 0xa2, 0x91, 0x98, 0xa4, 0xef, 0xbd, 0x88, 0x7b, 0x84, 0xed,
	0xae, 0x19, 0xec, 0x42, 0x39, 0x91, 0x89, 0x2d, 0xec, 0x77, 0x33, 0x49, 0x7c, 0x90, 0xb0, 0xb2,
	0x84, 0x3c, 0xfe, 0x2b, 0x2d, 0xf2, 0xd8, 0xa2, 0xe6, 0x27, 0xc3, 0xd2, 0x87, 0xd7, 0xbf, 0x38,
	0x8f, 0x6f, 0x60, 0xd5, 0xbc, 0x26, 0xbc, 0xd9, 0x8b, 0x77, 0x83, 0xbd, 0x98, 0x7c, 0x86, 0xee,
	0x8d, 0x20, 0xe6, 0xef, 0xf7, 0x39, 0x93, 0xff, 0x9d, 0xa9, 0x37, 0x99, 0x5b, 0xeb, 0x4d, 0x76,
	0xa9, 0x7a, 0x93, 0x9b, 0x57, 0x6f, 0xb8, 0x62, 0x56, 0x23, 0x8a, 0x99, 0xae, 0x19, 0xf9, 0xe5,
	0x6a, 0xc6, 0x5a, 0x52, 0xcd, 0x08, 0x25, 0x33, 0x0e, 0xe2, 0x92, 0x92, 0x89, 0x05, 0x7d, 0x46,
	0x32, 0x11, 0xb6, 0xaf, 0x94, 0xcc, 0x0c, 0xd3, 0xad, 0x92, 0x99, 0xb9, 0x23, 0x22, 0x99, 0x7f,
	0x04, 0x33, 0x86, 0x34, 0x1e, 0x7e, 0xd5, 0xd8, 0xf0, 0xab, 0xde, 0x3a, 0xfc, 0x56, 0xa0, 0x30,
	0x18, 0x5e, 0x4e, 0x8f, 0x19, 0x30, 0x18, 0x5e, 0x86, 0x73, 0x46, 0x80, 0x60, 0x67, 0x3a, 0x32,
	0x68, 0x30, 0x44, 0x7b, 0x64, 0xf2, 0x49, 0x63, 0x32, 0x73, 0x67, 0xa3, 0x33, 0x77, 0x15, 0x8a,
	0xac, 0x2e, 0x4f, 0xbf, 0x8c, 0xaf, 0xdb, 0xfd, 0x9b, 0x70, 0xf8, 0x18, 0xbf, 0x87, 0x2c, 0x3b,
	0x60, 0x48, 0xc9, 0xe3, 0x9e, 0xf4, 0xf5, 0xe3, 0x9e, 0xb4, 0xfc, 0xdc, 0x20, 0x25, 0xcc, 0x0d,
	0xfb, 0xff, 0x4d, 0xc1, 0xc6, 0xd4, 0x27, 0x34, 0xbc, 0x0d, 0x9b, 0x4a, 0xa3, 0x25, 0x91, 0xae,
	0xac, 0x7c, 0x24, 0xbd, 0xb3, 0x8e, 0x4c, 0x94, 0x3a, 0xfa, 0x26, 0xc1, 0x7c, 0x5a, 0x47, 0xa9,
	0x24, 0x74, 0x03, 0xa5, 0x93, 0xd0, 0x0d, 0xb4, 0x82, 0x77, 0x00, 0x4f, 0x99, 0xeb, 0xed, 0x0e,
	0xca, 0x24, 0xd8, 0x3f, 0x2b, 0x75, 0x94, 0xc5, 0xf7, 0x61, 0x7b, 0xca, 0xfe, 0x51, 0x6e, 0x37,
	0xc8, 0x6b, 0x94, 0x9b, 0xe7, 0x3a, 0x44, 0xab, 0xfb, 0x7f, 0xce, 0xc7, 0x3f, 0x59, 0x1c, 0xdb,
	0xd4, 0xc5, 0x4f, 0xe0, 0x11, 0xc7, 0x9f, 0x76, 0x1a, 0x52, 0x4f, 0x26, 0x27, 0x1d, 0x72, 0xdc,
	0x91, 0x15, 0xd2, 0x95, 0x7b, 0xa4, 0xdb, 0x93, 0x7a, 0x32, 0xfa, 0x06, 0x3f, 0x83, 0x27, 0xf3,
	0x20, 0xf5, 0x53, 0x25, 0x80, 0xa5, 0xf0, 0x2b, 0xf8, 0xd5, 0x3c, 0x98, 0xdc, 0x26, 0xdd, 0x93,
	0x06, 0x91, 0xba, 0x67, 0xed, 0x3a, 0x69, 0x1f, 0xf7, 0x9a, 0x6f, 0xcf, 0x50, 0x1a, 0xd7, 0xe0,
	0xe9, 0xbc, 0x1b, 0xa4, 0x7a, 0x5d, 0xee, 0x76, 0xc9, 0xdb, 0x23, 0xe9, 0x5d, 0x17, 0xad, 0xe0,
	0xe7, 0x50, 0x9d, 0x87, 0xec, 0x7c, 0x90, 0xcf, 0x48, 0xb3, 0xdd, 0x90, 0x3f, 0xa3, 0x0c, 0xae,
	0xc0, 0xc3, 0xb9, 0xb8, 0x63, 0xa5, 0x87, 0xb2, 0x8b, 0x10, 0x27, 0x1f, 0xe4, 0x33, 0x94, 0xc3,
	0x8f, 0x61, 0x6f, 0xee, 0xaa, 0x3e, 0xa2, 0x55, 0xfc, 0x14, 0x2a, 0x73, 0x9f, 0x21, 0xf5, 0xde,
	0x93, 0x56, 0xef, 0x14, 0xe5, 0xf1, 0x77, 0xf0, 0xed, 0x3c, 0x54, 0xaf, 0xd9, 0x92, 0x8f, 0x4f,
	0x7b, 0x68, 0x6d, 0x51, 0x60, 0x15, 0xb9, 0xa7, 0x9c, 0x91, 0x7a, 0xbb, 0x87, 0x60, 0x21, 0xac,
	0xad, 0x08, 0x28, 0x5a, 0xc7, 0x55, 0x78, 0x3c, 0x17, 0x76, 0x42, 0x3a, 0xdd, 0x36, 0x2a, 0xe0,
	0x5f, 0x43, 0x6d, 0x1e, 0xa6, 0x25, 0x7d, 0x66, 0xbf, 0x95, 0x06, 0x91, 0x7a, 0xc7, 0xad, 0x66,
	0x1d, 0x15, 0x17, 0x6d, 0x55, 0x3a, 0x12, 0xdb, 0x45, 0x25, 0xfc, 0x12, 0x9e, 0xcd, 0xe5, 0x6c,
	0xb6, 0xf9, 0x12, 0xd9, 0x96, 0x15, 0xb4, 0xb1, 0x68, 0x89, 0x5d, 0xb1, 0x44, 0x84, 0x0f, 0x60,
	0x7f, 0xd1, 0x12, 0x1b, 0x72, 0xb7, 0x17, 0x59, 0xe4, 0x26, 0xde, 0x87, 0xe7, 0x8b, 0xf3, 0xd1,
	0x7c, 0x17, 0x48, 0x14, 0xe3, 0x6f, 0xe1, 0xc1, 0x5c, 0x25, 0x4b, 0x1d, 0x74, 0x6f, 0xd1, 0x8e,
	0xf9, 0x83, 0x4f, 0x3a, 0x6d, 0xb4, 0xb5, 0x38, 0x6f, 0xec, 0xe0, 0xc9, 0x8d, 0xd7, 0x68, 0x7b,
	0x19, 0xd8, 0x21, 0xda, 0x59, 0x06, 0xf6, 0x06, 0xed, 0x2e, 0x03, 0xfb, 0x01, 0x95, 0x17, 0x1d,
	0x15, 0x85, 0x19, 0x8e, 0x9a, 0xad, 0x66, 0x0f, 0xdd, 0xdf, 0xf7, 0xc7, 0x63, 0x74, 0x6c, 0x92,
	0x18, 0x1f, 0x90, 0x96, 0xdc, 0x3a, 0x56, 0xce, 0xc8, 0xa7, 0x66, 0xbb, 0x71, 0xfc, 0x49, 0x14,
	0x92, 0xf6, 0x71, 0x9b, 0x95, 0x83, 0x87, 0x50, 0x9e, 0x83, 0x78, 0x8d, 0x52, 0x0b, 0xbc, 0x87,
	0x28, 0x7d, 0xf8, 0xd7, 0x2c, 0x64, 0xd8, 0x63, 0xb1, 0x04, 0x05, 0x51, 0x8a, 0xea, 0x2e, 0x55,
	0x7d, 0x8a, 0x77, 0xe2, 0x9f, 0x5b, 0xc3, 0xfe, 0xb1, 0xb7, 0x9b, 0xf4, 0x19, 0xb6, 0xe5, 0x5d,
	0x56, 0xbf, 0xc1, 0xad, 0x90, 0x42, 0x54, 0x33, 0xfc, 0x30, 0xe9, 0x9b, 0xdc, 0x98, 0xe8, 0xd1,
	0xfc, 0x2f, 0x76, 0x82, 0x2e, 0x58, 0x91, 0xd4, 0x9f, 0x5d, 0x51, 0xf4, 0xcb, 0x5a, 0x74, 0x45,
	0xb1, 0xcf, 0x5d, 0x13, 0x8a, 0xba, 0x33, 0x4b, 0x11, 0xfd, 0x06, 0x12, 0xa5, 0x88, 0x7d, 0x98,
	0x98, 0x50, 0xc8, 0x09, 0x14, 0xf2, 0x1c, 0x0a, 0x79, 0x8a, 0xe2, 0x9d, 0x18, 0x23, 0xc4, 0x2b,
	0x06, 0xde, 0x9b, 0x7d, 0xe9, 0x18, 0x93, 0x3c, 0x98, 0xf7, 0x42, 0x22, 0x88, 0x3a, 0x50, 0x8c,
	0x8d, 0xb9, 0xf8, 0x51, 0xe2, 0xec, 0x3b, 0xa6, 0x7b, 0xbc, 0x60, 0x34, 0x8e, 0x31, 0x8e, 0xa7,
	0xa0, 0x28, 0x63, 0xc2, 0x90, 0x17, 0x65, 0x4c, 0x9a, 0xb5, 0x22, 0x59, 0x4b, 0x88, 0x97, 0x34,
	0x27, 0x5e, 0x52, 0x3c, 0x5e, 0x3f, 0xc2, 0x1f, 0xf3, 0x7d, 0x75, 0xc0, 0xff, 0x3b, 0x79, 0x9e,
	0xe3, 0x7f, 0xde, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x96, 0xd9, 0xe3, 0xad, 0xc5, 0x1c, 0x00,
	0x00,
}
