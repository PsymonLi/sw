// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gft.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GftTableType int32

const (
	GftTableType_GFT_TABLE_TYPE_NONE                GftTableType = 0
	GftTableType_GFT_TABLE_TYPE_WILDCARD_INGRESS    GftTableType = 1
	GftTableType_GFT_TABLE_TYPE_WILDCARD_EGRESS     GftTableType = 2
	GftTableType_GFT_TABLE_TYPE_EXACT_MATCH_INGRESS GftTableType = 3
	GftTableType_GFT_TABLE_TYPE_EXACT_MATCH_EGRESS  GftTableType = 4
)

var GftTableType_name = map[int32]string{
	0: "GFT_TABLE_TYPE_NONE",
	1: "GFT_TABLE_TYPE_WILDCARD_INGRESS",
	2: "GFT_TABLE_TYPE_WILDCARD_EGRESS",
	3: "GFT_TABLE_TYPE_EXACT_MATCH_INGRESS",
	4: "GFT_TABLE_TYPE_EXACT_MATCH_EGRESS",
}
var GftTableType_value = map[string]int32{
	"GFT_TABLE_TYPE_NONE":                0,
	"GFT_TABLE_TYPE_WILDCARD_INGRESS":    1,
	"GFT_TABLE_TYPE_WILDCARD_EGRESS":     2,
	"GFT_TABLE_TYPE_EXACT_MATCH_INGRESS": 3,
	"GFT_TABLE_TYPE_EXACT_MATCH_EGRESS":  4,
}

func (x GftTableType) String() string {
	return proto.EnumName(GftTableType_name, int32(x))
}
func (GftTableType) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type GftHeaderGroupTranspostionAction int32

const (
	GftHeaderGroupTranspostionAction_TRANSPOSITION_ACTION_NONE   GftHeaderGroupTranspostionAction = 0
	GftHeaderGroupTranspostionAction_TRANSPOSITION_ACTION_MODIFY GftHeaderGroupTranspostionAction = 1
	GftHeaderGroupTranspostionAction_TRANSPOSITION_ACTION_IGNORE GftHeaderGroupTranspostionAction = 2
	GftHeaderGroupTranspostionAction_TRANSPOSITION_ACTION_PUSH   GftHeaderGroupTranspostionAction = 3
	GftHeaderGroupTranspostionAction_TRANSPOSITION_ACTION_POP    GftHeaderGroupTranspostionAction = 4
)

var GftHeaderGroupTranspostionAction_name = map[int32]string{
	0: "TRANSPOSITION_ACTION_NONE",
	1: "TRANSPOSITION_ACTION_MODIFY",
	2: "TRANSPOSITION_ACTION_IGNORE",
	3: "TRANSPOSITION_ACTION_PUSH",
	4: "TRANSPOSITION_ACTION_POP",
}
var GftHeaderGroupTranspostionAction_value = map[string]int32{
	"TRANSPOSITION_ACTION_NONE":   0,
	"TRANSPOSITION_ACTION_MODIFY": 1,
	"TRANSPOSITION_ACTION_IGNORE": 2,
	"TRANSPOSITION_ACTION_PUSH":   3,
	"TRANSPOSITION_ACTION_POP":    4,
}

func (x GftHeaderGroupTranspostionAction) String() string {
	return proto.EnumName(GftHeaderGroupTranspostionAction_name, int32(x))
}
func (GftHeaderGroupTranspostionAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor4, []int{1}
}

type GftEthFields struct {
	DstMacAddr     uint64 `protobuf:"varint,1,opt,name=dst_mac_addr,json=dstMacAddr" json:"dst_mac_addr,omitempty"`
	SrcMacAddr     uint64 `protobuf:"varint,2,opt,name=src_mac_addr,json=srcMacAddr" json:"src_mac_addr,omitempty"`
	EthType        uint32 `protobuf:"varint,3,opt,name=eth_type,json=ethType" json:"eth_type,omitempty"`
	CustomerVlanId uint32 `protobuf:"varint,4,opt,name=customer_vlan_id,json=customerVlanId" json:"customer_vlan_id,omitempty"`
	ProviderVlanId uint32 `protobuf:"varint,5,opt,name=provider_vlan_id,json=providerVlanId" json:"provider_vlan_id,omitempty"`
	Priority       uint32 `protobuf:"varint,6,opt,name=priority" json:"priority,omitempty"`
}

func (m *GftEthFields) Reset()                    { *m = GftEthFields{} }
func (m *GftEthFields) String() string            { return proto.CompactTextString(m) }
func (*GftEthFields) ProtoMessage()               {}
func (*GftEthFields) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *GftEthFields) GetDstMacAddr() uint64 {
	if m != nil {
		return m.DstMacAddr
	}
	return 0
}

func (m *GftEthFields) GetSrcMacAddr() uint64 {
	if m != nil {
		return m.SrcMacAddr
	}
	return 0
}

func (m *GftEthFields) GetEthType() uint32 {
	if m != nil {
		return m.EthType
	}
	return 0
}

func (m *GftEthFields) GetCustomerVlanId() uint32 {
	if m != nil {
		return m.CustomerVlanId
	}
	return 0
}

func (m *GftEthFields) GetProviderVlanId() uint32 {
	if m != nil {
		return m.ProviderVlanId
	}
	return 0
}

func (m *GftEthFields) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type GftHeaders struct {
	EthernetHeader bool `protobuf:"varint,1,opt,name=ethernet_header,json=ethernetHeader" json:"ethernet_header,omitempty"`
	Ipv4Header     bool `protobuf:"varint,2,opt,name=ipv4_header,json=ipv4Header" json:"ipv4_header,omitempty"`
	Ipv6Header     bool `protobuf:"varint,3,opt,name=ipv6_header,json=ipv6Header" json:"ipv6_header,omitempty"`
	TcpHeader      bool `protobuf:"varint,4,opt,name=tcp_header,json=tcpHeader" json:"tcp_header,omitempty"`
	UdpHeader      bool `protobuf:"varint,5,opt,name=udp_header,json=udpHeader" json:"udp_header,omitempty"`
	IcmpHeader     bool `protobuf:"varint,6,opt,name=icmp_header,json=icmpHeader" json:"icmp_header,omitempty"`
	NoEncap        bool `protobuf:"varint,7,opt,name=no_encap,json=noEncap" json:"no_encap,omitempty"`
	IpInIpEncap    bool `protobuf:"varint,8,opt,name=ip_in_ip_encap,json=ipInIpEncap" json:"ip_in_ip_encap,omitempty"`
	IpInGreEncap   bool `protobuf:"varint,9,opt,name=ip_in_gre_encap,json=ipInGreEncap" json:"ip_in_gre_encap,omitempty"`
	NvgreEncap     bool `protobuf:"varint,10,opt,name=nvgre_encap,json=nvgreEncap" json:"nvgre_encap,omitempty"`
	VxlanEncap     bool `protobuf:"varint,11,opt,name=vxlan_encap,json=vxlanEncap" json:"vxlan_encap,omitempty"`
}

func (m *GftHeaders) Reset()                    { *m = GftHeaders{} }
func (m *GftHeaders) String() string            { return proto.CompactTextString(m) }
func (*GftHeaders) ProtoMessage()               {}
func (*GftHeaders) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *GftHeaders) GetEthernetHeader() bool {
	if m != nil {
		return m.EthernetHeader
	}
	return false
}

func (m *GftHeaders) GetIpv4Header() bool {
	if m != nil {
		return m.Ipv4Header
	}
	return false
}

func (m *GftHeaders) GetIpv6Header() bool {
	if m != nil {
		return m.Ipv6Header
	}
	return false
}

func (m *GftHeaders) GetTcpHeader() bool {
	if m != nil {
		return m.TcpHeader
	}
	return false
}

func (m *GftHeaders) GetUdpHeader() bool {
	if m != nil {
		return m.UdpHeader
	}
	return false
}

func (m *GftHeaders) GetIcmpHeader() bool {
	if m != nil {
		return m.IcmpHeader
	}
	return false
}

func (m *GftHeaders) GetNoEncap() bool {
	if m != nil {
		return m.NoEncap
	}
	return false
}

func (m *GftHeaders) GetIpInIpEncap() bool {
	if m != nil {
		return m.IpInIpEncap
	}
	return false
}

func (m *GftHeaders) GetIpInGreEncap() bool {
	if m != nil {
		return m.IpInGreEncap
	}
	return false
}

func (m *GftHeaders) GetNvgreEncap() bool {
	if m != nil {
		return m.NvgreEncap
	}
	return false
}

func (m *GftHeaders) GetVxlanEncap() bool {
	if m != nil {
		return m.VxlanEncap
	}
	return false
}

type GftHeaderFields struct {
	DstMacAddr     bool `protobuf:"varint,1,opt,name=dst_mac_addr,json=dstMacAddr" json:"dst_mac_addr,omitempty"`
	SrcMacAddr     bool `protobuf:"varint,2,opt,name=src_mac_addr,json=srcMacAddr" json:"src_mac_addr,omitempty"`
	EthType        bool `protobuf:"varint,3,opt,name=eth_type,json=ethType" json:"eth_type,omitempty"`
	CustomerVlanId bool `protobuf:"varint,4,opt,name=customer_vlan_id,json=customerVlanId" json:"customer_vlan_id,omitempty"`
	ProviderVlanId bool `protobuf:"varint,5,opt,name=provider_vlan_id,json=providerVlanId" json:"provider_vlan_id,omitempty"`
	Dot1PPriority  bool `protobuf:"varint,6,opt,name=dot1p_priority,json=dot1pPriority" json:"dot1p_priority,omitempty"`
	SrcIpAddr      bool `protobuf:"varint,7,opt,name=src_ip_addr,json=srcIpAddr" json:"src_ip_addr,omitempty"`
	DstIpAddr      bool `protobuf:"varint,8,opt,name=dst_ip_addr,json=dstIpAddr" json:"dst_ip_addr,omitempty"`
	IpTtl          bool `protobuf:"varint,9,opt,name=ip_ttl,json=ipTtl" json:"ip_ttl,omitempty"`
	IpProtocol     bool `protobuf:"varint,10,opt,name=ip_protocol,json=ipProtocol" json:"ip_protocol,omitempty"`
	IpDscp         bool `protobuf:"varint,11,opt,name=ip_dscp,json=ipDscp" json:"ip_dscp,omitempty"`
	SrcPort        bool `protobuf:"varint,12,opt,name=src_port,json=srcPort" json:"src_port,omitempty"`
	DstPort        bool `protobuf:"varint,13,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"`
	TcpFlags       bool `protobuf:"varint,14,opt,name=tcp_flags,json=tcpFlags" json:"tcp_flags,omitempty"`
	TenantId       bool `protobuf:"varint,15,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	IcmpType       bool `protobuf:"varint,16,opt,name=icmp_type,json=icmpType" json:"icmp_type,omitempty"`
	IcmpCode       bool `protobuf:"varint,17,opt,name=icmp_code,json=icmpCode" json:"icmp_code,omitempty"`
	OobVlan        bool `protobuf:"varint,18,opt,name=oob_vlan,json=oobVlan" json:"oob_vlan,omitempty"`
	OobTenantId    bool `protobuf:"varint,19,opt,name=oob_tenant_id,json=oobTenantId" json:"oob_tenant_id,omitempty"`
	GreProtocol    bool `protobuf:"varint,20,opt,name=gre_protocol,json=greProtocol" json:"gre_protocol,omitempty"`
}

func (m *GftHeaderFields) Reset()                    { *m = GftHeaderFields{} }
func (m *GftHeaderFields) String() string            { return proto.CompactTextString(m) }
func (*GftHeaderFields) ProtoMessage()               {}
func (*GftHeaderFields) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *GftHeaderFields) GetDstMacAddr() bool {
	if m != nil {
		return m.DstMacAddr
	}
	return false
}

func (m *GftHeaderFields) GetSrcMacAddr() bool {
	if m != nil {
		return m.SrcMacAddr
	}
	return false
}

func (m *GftHeaderFields) GetEthType() bool {
	if m != nil {
		return m.EthType
	}
	return false
}

func (m *GftHeaderFields) GetCustomerVlanId() bool {
	if m != nil {
		return m.CustomerVlanId
	}
	return false
}

func (m *GftHeaderFields) GetProviderVlanId() bool {
	if m != nil {
		return m.ProviderVlanId
	}
	return false
}

func (m *GftHeaderFields) GetDot1PPriority() bool {
	if m != nil {
		return m.Dot1PPriority
	}
	return false
}

func (m *GftHeaderFields) GetSrcIpAddr() bool {
	if m != nil {
		return m.SrcIpAddr
	}
	return false
}

func (m *GftHeaderFields) GetDstIpAddr() bool {
	if m != nil {
		return m.DstIpAddr
	}
	return false
}

func (m *GftHeaderFields) GetIpTtl() bool {
	if m != nil {
		return m.IpTtl
	}
	return false
}

func (m *GftHeaderFields) GetIpProtocol() bool {
	if m != nil {
		return m.IpProtocol
	}
	return false
}

func (m *GftHeaderFields) GetIpDscp() bool {
	if m != nil {
		return m.IpDscp
	}
	return false
}

func (m *GftHeaderFields) GetSrcPort() bool {
	if m != nil {
		return m.SrcPort
	}
	return false
}

func (m *GftHeaderFields) GetDstPort() bool {
	if m != nil {
		return m.DstPort
	}
	return false
}

func (m *GftHeaderFields) GetTcpFlags() bool {
	if m != nil {
		return m.TcpFlags
	}
	return false
}

func (m *GftHeaderFields) GetTenantId() bool {
	if m != nil {
		return m.TenantId
	}
	return false
}

func (m *GftHeaderFields) GetIcmpType() bool {
	if m != nil {
		return m.IcmpType
	}
	return false
}

func (m *GftHeaderFields) GetIcmpCode() bool {
	if m != nil {
		return m.IcmpCode
	}
	return false
}

func (m *GftHeaderFields) GetOobVlan() bool {
	if m != nil {
		return m.OobVlan
	}
	return false
}

func (m *GftHeaderFields) GetOobTenantId() bool {
	if m != nil {
		return m.OobTenantId
	}
	return false
}

func (m *GftHeaderFields) GetGreProtocol() bool {
	if m != nil {
		return m.GreProtocol
	}
	return false
}

type GftHeaderGroupExactMatchProfile struct {
	Headers     *GftHeaders      `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	MatchFields *GftHeaderFields `protobuf:"bytes,2,opt,name=match_fields,json=matchFields" json:"match_fields,omitempty"`
}

func (m *GftHeaderGroupExactMatchProfile) Reset()                    { *m = GftHeaderGroupExactMatchProfile{} }
func (m *GftHeaderGroupExactMatchProfile) String() string            { return proto.CompactTextString(m) }
func (*GftHeaderGroupExactMatchProfile) ProtoMessage()               {}
func (*GftHeaderGroupExactMatchProfile) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *GftHeaderGroupExactMatchProfile) GetHeaders() *GftHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *GftHeaderGroupExactMatchProfile) GetMatchFields() *GftHeaderFields {
	if m != nil {
		return m.MatchFields
	}
	return nil
}

type GftExactMatchProfileSpec struct {
	KeyOrHandle        *GftExactMatchProfileKeyHandle     `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	RdmaFlow           bool                               `protobuf:"varint,2,opt,name=rdma_flow,json=rdmaFlow" json:"rdma_flow,omitempty"`
	TableType          GftTableType                       `protobuf:"varint,3,opt,name=table_type,json=tableType,enum=gft.GftTableType" json:"table_type,omitempty"`
	ExactMatchProfiles []*GftHeaderGroupExactMatchProfile `protobuf:"bytes,4,rep,name=exact_match_profiles,json=exactMatchProfiles" json:"exact_match_profiles,omitempty"`
}

func (m *GftExactMatchProfileSpec) Reset()                    { *m = GftExactMatchProfileSpec{} }
func (m *GftExactMatchProfileSpec) String() string            { return proto.CompactTextString(m) }
func (*GftExactMatchProfileSpec) ProtoMessage()               {}
func (*GftExactMatchProfileSpec) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *GftExactMatchProfileSpec) GetKeyOrHandle() *GftExactMatchProfileKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *GftExactMatchProfileSpec) GetRdmaFlow() bool {
	if m != nil {
		return m.RdmaFlow
	}
	return false
}

func (m *GftExactMatchProfileSpec) GetTableType() GftTableType {
	if m != nil {
		return m.TableType
	}
	return GftTableType_GFT_TABLE_TYPE_NONE
}

func (m *GftExactMatchProfileSpec) GetExactMatchProfiles() []*GftHeaderGroupExactMatchProfile {
	if m != nil {
		return m.ExactMatchProfiles
	}
	return nil
}

// GftExactMatchProfileRequestMsg is used to do batched add or modify of GFT
// exact match profile
type GftExactMatchProfileRequestMsg struct {
	Request []*GftExactMatchProfileSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *GftExactMatchProfileRequestMsg) Reset()                    { *m = GftExactMatchProfileRequestMsg{} }
func (m *GftExactMatchProfileRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*GftExactMatchProfileRequestMsg) ProtoMessage()               {}
func (*GftExactMatchProfileRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *GftExactMatchProfileRequestMsg) GetRequest() []*GftExactMatchProfileSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// GftExactMatchProfileStatus represents the current status of GFT exact match profile
type GftExactMatchProfileStatus struct {
	ProfileHandle uint64 `protobuf:"fixed64,1,opt,name=profile_handle,json=profileHandle" json:"profile_handle,omitempty"`
}

func (m *GftExactMatchProfileStatus) Reset()                    { *m = GftExactMatchProfileStatus{} }
func (m *GftExactMatchProfileStatus) String() string            { return proto.CompactTextString(m) }
func (*GftExactMatchProfileStatus) ProtoMessage()               {}
func (*GftExactMatchProfileStatus) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *GftExactMatchProfileStatus) GetProfileHandle() uint64 {
	if m != nil {
		return m.ProfileHandle
	}
	return 0
}

// GftExactMatchProfileResponse is response to GftExactMatchProfileSpec
type GftExactMatchProfileResponse struct {
	ApiStatus ApiStatus                   `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *GftExactMatchProfileStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *GftExactMatchProfileResponse) Reset()                    { *m = GftExactMatchProfileResponse{} }
func (m *GftExactMatchProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*GftExactMatchProfileResponse) ProtoMessage()               {}
func (*GftExactMatchProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *GftExactMatchProfileResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *GftExactMatchProfileResponse) GetStatus() *GftExactMatchProfileStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// GftExactMatchProfileResponseMsg is batched response to GftExactMatchProfileRequestMsg
type GftExactMatchProfileResponseMsg struct {
	Response []*GftExactMatchProfileResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *GftExactMatchProfileResponseMsg) Reset()                    { *m = GftExactMatchProfileResponseMsg{} }
func (m *GftExactMatchProfileResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*GftExactMatchProfileResponseMsg) ProtoMessage()               {}
func (*GftExactMatchProfileResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *GftExactMatchProfileResponseMsg) GetResponse() []*GftExactMatchProfileResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type UdpMatchFields struct {
	Sport uint32 `protobuf:"varint,1,opt,name=sport" json:"sport,omitempty"`
	Dport uint32 `protobuf:"varint,2,opt,name=dport" json:"dport,omitempty"`
}

func (m *UdpMatchFields) Reset()                    { *m = UdpMatchFields{} }
func (m *UdpMatchFields) String() string            { return proto.CompactTextString(m) }
func (*UdpMatchFields) ProtoMessage()               {}
func (*UdpMatchFields) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *UdpMatchFields) GetSport() uint32 {
	if m != nil {
		return m.Sport
	}
	return 0
}

func (m *UdpMatchFields) GetDport() uint32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

type TcpMatchFields struct {
	Sport    uint32 `protobuf:"varint,1,opt,name=sport" json:"sport,omitempty"`
	Dport    uint32 `protobuf:"varint,2,opt,name=dport" json:"dport,omitempty"`
	TcpFlags uint32 `protobuf:"varint,3,opt,name=tcp_flags,json=tcpFlags" json:"tcp_flags,omitempty"`
}

func (m *TcpMatchFields) Reset()                    { *m = TcpMatchFields{} }
func (m *TcpMatchFields) String() string            { return proto.CompactTextString(m) }
func (*TcpMatchFields) ProtoMessage()               {}
func (*TcpMatchFields) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *TcpMatchFields) GetSport() uint32 {
	if m != nil {
		return m.Sport
	}
	return 0
}

func (m *TcpMatchFields) GetDport() uint32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

func (m *TcpMatchFields) GetTcpFlags() uint32 {
	if m != nil {
		return m.TcpFlags
	}
	return 0
}

type IcmpMatchFields struct {
	Type uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Code uint32 `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
}

func (m *IcmpMatchFields) Reset()                    { *m = IcmpMatchFields{} }
func (m *IcmpMatchFields) String() string            { return proto.CompactTextString(m) }
func (*IcmpMatchFields) ProtoMessage()               {}
func (*IcmpMatchFields) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

func (m *IcmpMatchFields) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *IcmpMatchFields) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type EncapMatchFields struct {
	TenantId    uint32 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	GreProtocol uint32 `protobuf:"varint,2,opt,name=gre_protocol,json=greProtocol" json:"gre_protocol,omitempty"`
}

func (m *EncapMatchFields) Reset()                    { *m = EncapMatchFields{} }
func (m *EncapMatchFields) String() string            { return proto.CompactTextString(m) }
func (*EncapMatchFields) ProtoMessage()               {}
func (*EncapMatchFields) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{12} }

func (m *EncapMatchFields) GetTenantId() uint32 {
	if m != nil {
		return m.TenantId
	}
	return 0
}

func (m *EncapMatchFields) GetGreProtocol() uint32 {
	if m != nil {
		return m.GreProtocol
	}
	return 0
}

type GftHeaderGroupTranspositionProfile struct {
	Action      GftHeaderGroupTranspostionAction `protobuf:"varint,1,opt,name=action,enum=gft.GftHeaderGroupTranspostionAction" json:"action,omitempty"`
	Headers     *GftHeaders                      `protobuf:"bytes,2,opt,name=headers" json:"headers,omitempty"`
	MatchFields *GftHeaderFields                 `protobuf:"bytes,3,opt,name=match_fields,json=matchFields" json:"match_fields,omitempty"`
}

func (m *GftHeaderGroupTranspositionProfile) Reset()         { *m = GftHeaderGroupTranspositionProfile{} }
func (m *GftHeaderGroupTranspositionProfile) String() string { return proto.CompactTextString(m) }
func (*GftHeaderGroupTranspositionProfile) ProtoMessage()    {}
func (*GftHeaderGroupTranspositionProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{13}
}

func (m *GftHeaderGroupTranspositionProfile) GetAction() GftHeaderGroupTranspostionAction {
	if m != nil {
		return m.Action
	}
	return GftHeaderGroupTranspostionAction_TRANSPOSITION_ACTION_NONE
}

func (m *GftHeaderGroupTranspositionProfile) GetHeaders() *GftHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *GftHeaderGroupTranspositionProfile) GetMatchFields() *GftHeaderFields {
	if m != nil {
		return m.MatchFields
	}
	return nil
}

type GftHeaderTranspositionProfileSpec struct {
	KeyOrHandle                           *GftHeaderTranspositionProfileKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	RedirectToVportIngressQueue           bool                                    `protobuf:"varint,2,opt,name=redirect_to_vport_ingress_queue,json=redirectToVportIngressQueue" json:"redirect_to_vport_ingress_queue,omitempty"`
	RedirectToVportEgressQueue            bool                                    `protobuf:"varint,3,opt,name=redirect_to_vport_egress_queue,json=redirectToVportEgressQueue" json:"redirect_to_vport_egress_queue,omitempty"`
	RedirectToVportIngressQueueIfTtlIsOne bool                                    `protobuf:"varint,4,opt,name=redirect_to_vport_ingress_queue_if_ttl_is_one,json=redirectToVportIngressQueueIfTtlIsOne" json:"redirect_to_vport_ingress_queue_if_ttl_is_one,omitempty"`
	RedirectToVportEgressQueueIfTtlIsOne  bool                                    `protobuf:"varint,5,opt,name=redirect_to_vport_egress_queue_if_ttl_is_one,json=redirectToVportEgressQueueIfTtlIsOne" json:"redirect_to_vport_egress_queue_if_ttl_is_one,omitempty"`
	CopyAllPackets                        bool                                    `protobuf:"varint,6,opt,name=copy_all_packets,json=copyAllPackets" json:"copy_all_packets,omitempty"`
	CopyFirstPacket                       bool                                    `protobuf:"varint,7,opt,name=copy_first_packet,json=copyFirstPacket" json:"copy_first_packet,omitempty"`
	CopyWhenTcpFlagSet                    bool                                    `protobuf:"varint,8,opt,name=copy_when_tcp_flag_set,json=copyWhenTcpFlagSet" json:"copy_when_tcp_flag_set,omitempty"`
	CustomActionPresent                   bool                                    `protobuf:"varint,9,opt,name=custom_action_present,json=customActionPresent" json:"custom_action_present,omitempty"`
	MetaActionBeforeTransposition         bool                                    `protobuf:"varint,10,opt,name=meta_action_before_transposition,json=metaActionBeforeTransposition" json:"meta_action_before_transposition,omitempty"`
	TableType                             GftTableType                            `protobuf:"varint,11,opt,name=table_type,json=tableType,enum=gft.GftTableType" json:"table_type,omitempty"`
	TranspositionProfiles                 []*GftHeaderGroupTranspositionProfile   `protobuf:"bytes,12,rep,name=transposition_profiles,json=transpositionProfiles" json:"transposition_profiles,omitempty"`
}

func (m *GftHeaderTranspositionProfileSpec) Reset()         { *m = GftHeaderTranspositionProfileSpec{} }
func (m *GftHeaderTranspositionProfileSpec) String() string { return proto.CompactTextString(m) }
func (*GftHeaderTranspositionProfileSpec) ProtoMessage()    {}
func (*GftHeaderTranspositionProfileSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{14}
}

func (m *GftHeaderTranspositionProfileSpec) GetKeyOrHandle() *GftHeaderTranspositionProfileKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *GftHeaderTranspositionProfileSpec) GetRedirectToVportIngressQueue() bool {
	if m != nil {
		return m.RedirectToVportIngressQueue
	}
	return false
}

func (m *GftHeaderTranspositionProfileSpec) GetRedirectToVportEgressQueue() bool {
	if m != nil {
		return m.RedirectToVportEgressQueue
	}
	return false
}

func (m *GftHeaderTranspositionProfileSpec) GetRedirectToVportIngressQueueIfTtlIsOne() bool {
	if m != nil {
		return m.RedirectToVportIngressQueueIfTtlIsOne
	}
	return false
}

func (m *GftHeaderTranspositionProfileSpec) GetRedirectToVportEgressQueueIfTtlIsOne() bool {
	if m != nil {
		return m.RedirectToVportEgressQueueIfTtlIsOne
	}
	return false
}

func (m *GftHeaderTranspositionProfileSpec) GetCopyAllPackets() bool {
	if m != nil {
		return m.CopyAllPackets
	}
	return false
}

func (m *GftHeaderTranspositionProfileSpec) GetCopyFirstPacket() bool {
	if m != nil {
		return m.CopyFirstPacket
	}
	return false
}

func (m *GftHeaderTranspositionProfileSpec) GetCopyWhenTcpFlagSet() bool {
	if m != nil {
		return m.CopyWhenTcpFlagSet
	}
	return false
}

func (m *GftHeaderTranspositionProfileSpec) GetCustomActionPresent() bool {
	if m != nil {
		return m.CustomActionPresent
	}
	return false
}

func (m *GftHeaderTranspositionProfileSpec) GetMetaActionBeforeTransposition() bool {
	if m != nil {
		return m.MetaActionBeforeTransposition
	}
	return false
}

func (m *GftHeaderTranspositionProfileSpec) GetTableType() GftTableType {
	if m != nil {
		return m.TableType
	}
	return GftTableType_GFT_TABLE_TYPE_NONE
}

func (m *GftHeaderTranspositionProfileSpec) GetTranspositionProfiles() []*GftHeaderGroupTranspositionProfile {
	if m != nil {
		return m.TranspositionProfiles
	}
	return nil
}

// GftHeaderTranspositionProfileRequestMsg is used to do batched add or modify of GFT
// header transposition profile
type GftHeaderTranspositionProfileRequestMsg struct {
	Request []*GftHeaderTranspositionProfileSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *GftHeaderTranspositionProfileRequestMsg) Reset() {
	*m = GftHeaderTranspositionProfileRequestMsg{}
}
func (m *GftHeaderTranspositionProfileRequestMsg) String() string { return proto.CompactTextString(m) }
func (*GftHeaderTranspositionProfileRequestMsg) ProtoMessage()    {}
func (*GftHeaderTranspositionProfileRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{15}
}

func (m *GftHeaderTranspositionProfileRequestMsg) GetRequest() []*GftHeaderTranspositionProfileSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// GftHeaderTranspositionProfileStatus represents the current status of GFT header transposition profile
type GftHeaderTranspositionProfileStatus struct {
	ProfileHandle uint64 `protobuf:"fixed64,1,opt,name=profile_handle,json=profileHandle" json:"profile_handle,omitempty"`
}

func (m *GftHeaderTranspositionProfileStatus) Reset()         { *m = GftHeaderTranspositionProfileStatus{} }
func (m *GftHeaderTranspositionProfileStatus) String() string { return proto.CompactTextString(m) }
func (*GftHeaderTranspositionProfileStatus) ProtoMessage()    {}
func (*GftHeaderTranspositionProfileStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{16}
}

func (m *GftHeaderTranspositionProfileStatus) GetProfileHandle() uint64 {
	if m != nil {
		return m.ProfileHandle
	}
	return 0
}

// GftHeaderTranspositionProfileResponse is response to GftHeaderTranspositionProfileSpec
type GftHeaderTranspositionProfileResponse struct {
	ApiStatus ApiStatus                            `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *GftHeaderTranspositionProfileStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *GftHeaderTranspositionProfileResponse) Reset()         { *m = GftHeaderTranspositionProfileResponse{} }
func (m *GftHeaderTranspositionProfileResponse) String() string { return proto.CompactTextString(m) }
func (*GftHeaderTranspositionProfileResponse) ProtoMessage()    {}
func (*GftHeaderTranspositionProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{17}
}

func (m *GftHeaderTranspositionProfileResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *GftHeaderTranspositionProfileResponse) GetStatus() *GftHeaderTranspositionProfileStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// GftHeaderTranspositionProfileResponseMsg is batched response to GftHeaderTranspositionProfileRequestMsg
type GftHeaderTranspositionProfileResponseMsg struct {
	Response []*GftHeaderTranspositionProfileResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *GftHeaderTranspositionProfileResponseMsg) Reset() {
	*m = GftHeaderTranspositionProfileResponseMsg{}
}
func (m *GftHeaderTranspositionProfileResponseMsg) String() string { return proto.CompactTextString(m) }
func (*GftHeaderTranspositionProfileResponseMsg) ProtoMessage()    {}
func (*GftHeaderTranspositionProfileResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{18}
}

func (m *GftHeaderTranspositionProfileResponseMsg) GetResponse() []*GftHeaderTranspositionProfileResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type EncapOrTransportMatch struct {
	// Types that are valid to be assigned to EncapOrTransport:
	//	*EncapOrTransportMatch_UdpFields
	//	*EncapOrTransportMatch_TcpFields
	//	*EncapOrTransportMatch_IcmpFields
	//	*EncapOrTransportMatch_EncapFields
	EncapOrTransport isEncapOrTransportMatch_EncapOrTransport `protobuf_oneof:"encap_or_transport"`
}

func (m *EncapOrTransportMatch) Reset()                    { *m = EncapOrTransportMatch{} }
func (m *EncapOrTransportMatch) String() string            { return proto.CompactTextString(m) }
func (*EncapOrTransportMatch) ProtoMessage()               {}
func (*EncapOrTransportMatch) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{19} }

type isEncapOrTransportMatch_EncapOrTransport interface{ isEncapOrTransportMatch_EncapOrTransport() }

type EncapOrTransportMatch_UdpFields struct {
	UdpFields *UdpMatchFields `protobuf:"bytes,1,opt,name=udp_fields,json=udpFields,oneof"`
}
type EncapOrTransportMatch_TcpFields struct {
	TcpFields *TcpMatchFields `protobuf:"bytes,2,opt,name=tcp_fields,json=tcpFields,oneof"`
}
type EncapOrTransportMatch_IcmpFields struct {
	IcmpFields *IcmpMatchFields `protobuf:"bytes,3,opt,name=icmp_fields,json=icmpFields,oneof"`
}
type EncapOrTransportMatch_EncapFields struct {
	EncapFields *EncapMatchFields `protobuf:"bytes,4,opt,name=encap_fields,json=encapFields,oneof"`
}

func (*EncapOrTransportMatch_UdpFields) isEncapOrTransportMatch_EncapOrTransport()   {}
func (*EncapOrTransportMatch_TcpFields) isEncapOrTransportMatch_EncapOrTransport()   {}
func (*EncapOrTransportMatch_IcmpFields) isEncapOrTransportMatch_EncapOrTransport()  {}
func (*EncapOrTransportMatch_EncapFields) isEncapOrTransportMatch_EncapOrTransport() {}

func (m *EncapOrTransportMatch) GetEncapOrTransport() isEncapOrTransportMatch_EncapOrTransport {
	if m != nil {
		return m.EncapOrTransport
	}
	return nil
}

func (m *EncapOrTransportMatch) GetUdpFields() *UdpMatchFields {
	if x, ok := m.GetEncapOrTransport().(*EncapOrTransportMatch_UdpFields); ok {
		return x.UdpFields
	}
	return nil
}

func (m *EncapOrTransportMatch) GetTcpFields() *TcpMatchFields {
	if x, ok := m.GetEncapOrTransport().(*EncapOrTransportMatch_TcpFields); ok {
		return x.TcpFields
	}
	return nil
}

func (m *EncapOrTransportMatch) GetIcmpFields() *IcmpMatchFields {
	if x, ok := m.GetEncapOrTransport().(*EncapOrTransportMatch_IcmpFields); ok {
		return x.IcmpFields
	}
	return nil
}

func (m *EncapOrTransportMatch) GetEncapFields() *EncapMatchFields {
	if x, ok := m.GetEncapOrTransport().(*EncapOrTransportMatch_EncapFields); ok {
		return x.EncapFields
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EncapOrTransportMatch) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EncapOrTransportMatch_OneofMarshaler, _EncapOrTransportMatch_OneofUnmarshaler, _EncapOrTransportMatch_OneofSizer, []interface{}{
		(*EncapOrTransportMatch_UdpFields)(nil),
		(*EncapOrTransportMatch_TcpFields)(nil),
		(*EncapOrTransportMatch_IcmpFields)(nil),
		(*EncapOrTransportMatch_EncapFields)(nil),
	}
}

func _EncapOrTransportMatch_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EncapOrTransportMatch)
	// encap_or_transport
	switch x := m.EncapOrTransport.(type) {
	case *EncapOrTransportMatch_UdpFields:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UdpFields); err != nil {
			return err
		}
	case *EncapOrTransportMatch_TcpFields:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcpFields); err != nil {
			return err
		}
	case *EncapOrTransportMatch_IcmpFields:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IcmpFields); err != nil {
			return err
		}
	case *EncapOrTransportMatch_EncapFields:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EncapFields); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EncapOrTransportMatch.EncapOrTransport has unexpected type %T", x)
	}
	return nil
}

func _EncapOrTransportMatch_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EncapOrTransportMatch)
	switch tag {
	case 1: // encap_or_transport.udp_fields
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UdpMatchFields)
		err := b.DecodeMessage(msg)
		m.EncapOrTransport = &EncapOrTransportMatch_UdpFields{msg}
		return true, err
	case 2: // encap_or_transport.tcp_fields
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TcpMatchFields)
		err := b.DecodeMessage(msg)
		m.EncapOrTransport = &EncapOrTransportMatch_TcpFields{msg}
		return true, err
	case 3: // encap_or_transport.icmp_fields
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IcmpMatchFields)
		err := b.DecodeMessage(msg)
		m.EncapOrTransport = &EncapOrTransportMatch_IcmpFields{msg}
		return true, err
	case 4: // encap_or_transport.encap_fields
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EncapMatchFields)
		err := b.DecodeMessage(msg)
		m.EncapOrTransport = &EncapOrTransportMatch_EncapFields{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EncapOrTransportMatch_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EncapOrTransportMatch)
	// encap_or_transport
	switch x := m.EncapOrTransport.(type) {
	case *EncapOrTransportMatch_UdpFields:
		s := proto.Size(x.UdpFields)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EncapOrTransportMatch_TcpFields:
		s := proto.Size(x.TcpFields)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EncapOrTransportMatch_IcmpFields:
		s := proto.Size(x.IcmpFields)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EncapOrTransportMatch_EncapFields:
		s := proto.Size(x.EncapFields)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GftHeaderGroupExactMatch struct {
	Headers          *GftHeaders            `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	MatchFields      *GftHeaderFields       `protobuf:"bytes,2,opt,name=match_fields,json=matchFields" json:"match_fields,omitempty"`
	EthFields        *GftEthFields          `protobuf:"bytes,3,opt,name=eth_fields,json=ethFields" json:"eth_fields,omitempty"`
	SrcIpAddr        *IPAddress             `protobuf:"bytes,4,opt,name=src_ip_addr,json=srcIpAddr" json:"src_ip_addr,omitempty"`
	DstIpAddr        *IPAddress             `protobuf:"bytes,5,opt,name=dst_ip_addr,json=dstIpAddr" json:"dst_ip_addr,omitempty"`
	IpTtl            uint32                 `protobuf:"varint,6,opt,name=ip_ttl,json=ipTtl" json:"ip_ttl,omitempty"`
	IpDscp           uint32                 `protobuf:"varint,7,opt,name=ip_dscp,json=ipDscp" json:"ip_dscp,omitempty"`
	IpProtocol       uint32                 `protobuf:"varint,8,opt,name=ip_protocol,json=ipProtocol" json:"ip_protocol,omitempty"`
	EncapOrTransport *EncapOrTransportMatch `protobuf:"bytes,9,opt,name=encap_or_transport,json=encapOrTransport" json:"encap_or_transport,omitempty"`
}

func (m *GftHeaderGroupExactMatch) Reset()                    { *m = GftHeaderGroupExactMatch{} }
func (m *GftHeaderGroupExactMatch) String() string            { return proto.CompactTextString(m) }
func (*GftHeaderGroupExactMatch) ProtoMessage()               {}
func (*GftHeaderGroupExactMatch) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{20} }

func (m *GftHeaderGroupExactMatch) GetHeaders() *GftHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *GftHeaderGroupExactMatch) GetMatchFields() *GftHeaderFields {
	if m != nil {
		return m.MatchFields
	}
	return nil
}

func (m *GftHeaderGroupExactMatch) GetEthFields() *GftEthFields {
	if m != nil {
		return m.EthFields
	}
	return nil
}

func (m *GftHeaderGroupExactMatch) GetSrcIpAddr() *IPAddress {
	if m != nil {
		return m.SrcIpAddr
	}
	return nil
}

func (m *GftHeaderGroupExactMatch) GetDstIpAddr() *IPAddress {
	if m != nil {
		return m.DstIpAddr
	}
	return nil
}

func (m *GftHeaderGroupExactMatch) GetIpTtl() uint32 {
	if m != nil {
		return m.IpTtl
	}
	return 0
}

func (m *GftHeaderGroupExactMatch) GetIpDscp() uint32 {
	if m != nil {
		return m.IpDscp
	}
	return 0
}

func (m *GftHeaderGroupExactMatch) GetIpProtocol() uint32 {
	if m != nil {
		return m.IpProtocol
	}
	return 0
}

func (m *GftHeaderGroupExactMatch) GetEncapOrTransport() *EncapOrTransportMatch {
	if m != nil {
		return m.EncapOrTransport
	}
	return nil
}

type UdpTranspositionFields struct {
	Sport uint32 `protobuf:"varint,1,opt,name=sport" json:"sport,omitempty"`
	Dport uint32 `protobuf:"varint,2,opt,name=dport" json:"dport,omitempty"`
}

func (m *UdpTranspositionFields) Reset()                    { *m = UdpTranspositionFields{} }
func (m *UdpTranspositionFields) String() string            { return proto.CompactTextString(m) }
func (*UdpTranspositionFields) ProtoMessage()               {}
func (*UdpTranspositionFields) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{21} }

func (m *UdpTranspositionFields) GetSport() uint32 {
	if m != nil {
		return m.Sport
	}
	return 0
}

func (m *UdpTranspositionFields) GetDport() uint32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

type TcpTranspositionFields struct {
	Sport uint32 `protobuf:"varint,1,opt,name=sport" json:"sport,omitempty"`
	Dport uint32 `protobuf:"varint,2,opt,name=dport" json:"dport,omitempty"`
}

func (m *TcpTranspositionFields) Reset()                    { *m = TcpTranspositionFields{} }
func (m *TcpTranspositionFields) String() string            { return proto.CompactTextString(m) }
func (*TcpTranspositionFields) ProtoMessage()               {}
func (*TcpTranspositionFields) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{22} }

func (m *TcpTranspositionFields) GetSport() uint32 {
	if m != nil {
		return m.Sport
	}
	return 0
}

func (m *TcpTranspositionFields) GetDport() uint32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

type IcmpTranspositionFields struct {
	Type uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Code uint32 `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
}

func (m *IcmpTranspositionFields) Reset()                    { *m = IcmpTranspositionFields{} }
func (m *IcmpTranspositionFields) String() string            { return proto.CompactTextString(m) }
func (*IcmpTranspositionFields) ProtoMessage()               {}
func (*IcmpTranspositionFields) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{23} }

func (m *IcmpTranspositionFields) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *IcmpTranspositionFields) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type EncapTranspositionFields struct {
	TenantId    uint32 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	GreProtocol uint32 `protobuf:"varint,2,opt,name=gre_protocol,json=greProtocol" json:"gre_protocol,omitempty"`
}

func (m *EncapTranspositionFields) Reset()                    { *m = EncapTranspositionFields{} }
func (m *EncapTranspositionFields) String() string            { return proto.CompactTextString(m) }
func (*EncapTranspositionFields) ProtoMessage()               {}
func (*EncapTranspositionFields) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{24} }

func (m *EncapTranspositionFields) GetTenantId() uint32 {
	if m != nil {
		return m.TenantId
	}
	return 0
}

func (m *EncapTranspositionFields) GetGreProtocol() uint32 {
	if m != nil {
		return m.GreProtocol
	}
	return 0
}

type EncapOrTransportTransposition struct {
	// Types that are valid to be assigned to EncapOrTransport:
	//	*EncapOrTransportTransposition_UdpFields
	//	*EncapOrTransportTransposition_TcpFields
	//	*EncapOrTransportTransposition_IcmpFields
	//	*EncapOrTransportTransposition_EncapFields
	EncapOrTransport isEncapOrTransportTransposition_EncapOrTransport `protobuf_oneof:"encap_or_transport"`
}

func (m *EncapOrTransportTransposition) Reset()                    { *m = EncapOrTransportTransposition{} }
func (m *EncapOrTransportTransposition) String() string            { return proto.CompactTextString(m) }
func (*EncapOrTransportTransposition) ProtoMessage()               {}
func (*EncapOrTransportTransposition) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{25} }

type isEncapOrTransportTransposition_EncapOrTransport interface{ isEncapOrTransportTransposition_EncapOrTransport() }

type EncapOrTransportTransposition_UdpFields struct {
	UdpFields *UdpTranspositionFields `protobuf:"bytes,1,opt,name=udp_fields,json=udpFields,oneof"`
}
type EncapOrTransportTransposition_TcpFields struct {
	TcpFields *TcpTranspositionFields `protobuf:"bytes,2,opt,name=tcp_fields,json=tcpFields,oneof"`
}
type EncapOrTransportTransposition_IcmpFields struct {
	IcmpFields *IcmpTranspositionFields `protobuf:"bytes,3,opt,name=icmp_fields,json=icmpFields,oneof"`
}
type EncapOrTransportTransposition_EncapFields struct {
	EncapFields *EncapTranspositionFields `protobuf:"bytes,4,opt,name=encap_fields,json=encapFields,oneof"`
}

func (*EncapOrTransportTransposition_UdpFields) isEncapOrTransportTransposition_EncapOrTransport()   {}
func (*EncapOrTransportTransposition_TcpFields) isEncapOrTransportTransposition_EncapOrTransport()   {}
func (*EncapOrTransportTransposition_IcmpFields) isEncapOrTransportTransposition_EncapOrTransport()  {}
func (*EncapOrTransportTransposition_EncapFields) isEncapOrTransportTransposition_EncapOrTransport() {}

func (m *EncapOrTransportTransposition) GetEncapOrTransport() isEncapOrTransportTransposition_EncapOrTransport {
	if m != nil {
		return m.EncapOrTransport
	}
	return nil
}

func (m *EncapOrTransportTransposition) GetUdpFields() *UdpTranspositionFields {
	if x, ok := m.GetEncapOrTransport().(*EncapOrTransportTransposition_UdpFields); ok {
		return x.UdpFields
	}
	return nil
}

func (m *EncapOrTransportTransposition) GetTcpFields() *TcpTranspositionFields {
	if x, ok := m.GetEncapOrTransport().(*EncapOrTransportTransposition_TcpFields); ok {
		return x.TcpFields
	}
	return nil
}

func (m *EncapOrTransportTransposition) GetIcmpFields() *IcmpTranspositionFields {
	if x, ok := m.GetEncapOrTransport().(*EncapOrTransportTransposition_IcmpFields); ok {
		return x.IcmpFields
	}
	return nil
}

func (m *EncapOrTransportTransposition) GetEncapFields() *EncapTranspositionFields {
	if x, ok := m.GetEncapOrTransport().(*EncapOrTransportTransposition_EncapFields); ok {
		return x.EncapFields
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EncapOrTransportTransposition) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EncapOrTransportTransposition_OneofMarshaler, _EncapOrTransportTransposition_OneofUnmarshaler, _EncapOrTransportTransposition_OneofSizer, []interface{}{
		(*EncapOrTransportTransposition_UdpFields)(nil),
		(*EncapOrTransportTransposition_TcpFields)(nil),
		(*EncapOrTransportTransposition_IcmpFields)(nil),
		(*EncapOrTransportTransposition_EncapFields)(nil),
	}
}

func _EncapOrTransportTransposition_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EncapOrTransportTransposition)
	// encap_or_transport
	switch x := m.EncapOrTransport.(type) {
	case *EncapOrTransportTransposition_UdpFields:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UdpFields); err != nil {
			return err
		}
	case *EncapOrTransportTransposition_TcpFields:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcpFields); err != nil {
			return err
		}
	case *EncapOrTransportTransposition_IcmpFields:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IcmpFields); err != nil {
			return err
		}
	case *EncapOrTransportTransposition_EncapFields:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EncapFields); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EncapOrTransportTransposition.EncapOrTransport has unexpected type %T", x)
	}
	return nil
}

func _EncapOrTransportTransposition_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EncapOrTransportTransposition)
	switch tag {
	case 1: // encap_or_transport.udp_fields
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UdpTranspositionFields)
		err := b.DecodeMessage(msg)
		m.EncapOrTransport = &EncapOrTransportTransposition_UdpFields{msg}
		return true, err
	case 2: // encap_or_transport.tcp_fields
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TcpTranspositionFields)
		err := b.DecodeMessage(msg)
		m.EncapOrTransport = &EncapOrTransportTransposition_TcpFields{msg}
		return true, err
	case 3: // encap_or_transport.icmp_fields
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IcmpTranspositionFields)
		err := b.DecodeMessage(msg)
		m.EncapOrTransport = &EncapOrTransportTransposition_IcmpFields{msg}
		return true, err
	case 4: // encap_or_transport.encap_fields
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EncapTranspositionFields)
		err := b.DecodeMessage(msg)
		m.EncapOrTransport = &EncapOrTransportTransposition_EncapFields{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EncapOrTransportTransposition_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EncapOrTransportTransposition)
	// encap_or_transport
	switch x := m.EncapOrTransport.(type) {
	case *EncapOrTransportTransposition_UdpFields:
		s := proto.Size(x.UdpFields)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EncapOrTransportTransposition_TcpFields:
		s := proto.Size(x.TcpFields)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EncapOrTransportTransposition_IcmpFields:
		s := proto.Size(x.IcmpFields)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EncapOrTransportTransposition_EncapFields:
		s := proto.Size(x.EncapFields)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GftHeaderGroupTransposition struct {
	Action           GftHeaderGroupTranspostionAction `protobuf:"varint,1,opt,name=action,enum=gft.GftHeaderGroupTranspostionAction" json:"action,omitempty"`
	Headers          *GftHeaders                      `protobuf:"bytes,2,opt,name=headers" json:"headers,omitempty"`
	HeaderFields     *GftHeaderFields                 `protobuf:"bytes,3,opt,name=header_fields,json=headerFields" json:"header_fields,omitempty"`
	EthFields        *GftEthFields                    `protobuf:"bytes,4,opt,name=eth_fields,json=ethFields" json:"eth_fields,omitempty"`
	SrcIpAddr        *IPAddress                       `protobuf:"bytes,5,opt,name=src_ip_addr,json=srcIpAddr" json:"src_ip_addr,omitempty"`
	DstIpAddr        *IPAddress                       `protobuf:"bytes,6,opt,name=dst_ip_addr,json=dstIpAddr" json:"dst_ip_addr,omitempty"`
	IpTtl            uint32                           `protobuf:"varint,7,opt,name=ip_ttl,json=ipTtl" json:"ip_ttl,omitempty"`
	IpDscp           uint32                           `protobuf:"varint,8,opt,name=ip_dscp,json=ipDscp" json:"ip_dscp,omitempty"`
	IpProtocol       uint32                           `protobuf:"varint,9,opt,name=ip_protocol,json=ipProtocol" json:"ip_protocol,omitempty"`
	EncapOrTransport *EncapOrTransportTransposition   `protobuf:"bytes,10,opt,name=encap_or_transport,json=encapOrTransport" json:"encap_or_transport,omitempty"`
}

func (m *GftHeaderGroupTransposition) Reset()                    { *m = GftHeaderGroupTransposition{} }
func (m *GftHeaderGroupTransposition) String() string            { return proto.CompactTextString(m) }
func (*GftHeaderGroupTransposition) ProtoMessage()               {}
func (*GftHeaderGroupTransposition) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{26} }

func (m *GftHeaderGroupTransposition) GetAction() GftHeaderGroupTranspostionAction {
	if m != nil {
		return m.Action
	}
	return GftHeaderGroupTranspostionAction_TRANSPOSITION_ACTION_NONE
}

func (m *GftHeaderGroupTransposition) GetHeaders() *GftHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *GftHeaderGroupTransposition) GetHeaderFields() *GftHeaderFields {
	if m != nil {
		return m.HeaderFields
	}
	return nil
}

func (m *GftHeaderGroupTransposition) GetEthFields() *GftEthFields {
	if m != nil {
		return m.EthFields
	}
	return nil
}

func (m *GftHeaderGroupTransposition) GetSrcIpAddr() *IPAddress {
	if m != nil {
		return m.SrcIpAddr
	}
	return nil
}

func (m *GftHeaderGroupTransposition) GetDstIpAddr() *IPAddress {
	if m != nil {
		return m.DstIpAddr
	}
	return nil
}

func (m *GftHeaderGroupTransposition) GetIpTtl() uint32 {
	if m != nil {
		return m.IpTtl
	}
	return 0
}

func (m *GftHeaderGroupTransposition) GetIpDscp() uint32 {
	if m != nil {
		return m.IpDscp
	}
	return 0
}

func (m *GftHeaderGroupTransposition) GetIpProtocol() uint32 {
	if m != nil {
		return m.IpProtocol
	}
	return 0
}

func (m *GftHeaderGroupTransposition) GetEncapOrTransport() *EncapOrTransportTransposition {
	if m != nil {
		return m.EncapOrTransport
	}
	return nil
}

type GftExactMatchFlowEntrySpec struct {
	TableType                             GftTableType                            `protobuf:"varint,1,opt,name=table_type,json=tableType,enum=gft.GftTableType" json:"table_type,omitempty"`
	KeyOrHandle                           *GftExactMatchFlowEntryKeyHandle        `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	ExactMatchProfile                     *GftExactMatchProfileKeyHandle          `protobuf:"bytes,3,opt,name=exact_match_profile,json=exactMatchProfile" json:"exact_match_profile,omitempty"`
	TranspositionProfile                  *GftHeaderTranspositionProfileKeyHandle `protobuf:"bytes,4,opt,name=transposition_profile,json=transpositionProfile" json:"transposition_profile,omitempty"`
	AddInActivatedState                   bool                                    `protobuf:"varint,5,opt,name=add_in_activated_state,json=addInActivatedState" json:"add_in_activated_state,omitempty"`
	RdmaFlow                              bool                                    `protobuf:"varint,6,opt,name=rdma_flow,json=rdmaFlow" json:"rdma_flow,omitempty"`
	RedirectToVportIngressQueue           bool                                    `protobuf:"varint,7,opt,name=redirect_to_vport_ingress_queue,json=redirectToVportIngressQueue" json:"redirect_to_vport_ingress_queue,omitempty"`
	RedirectToVportEgressQueue            bool                                    `protobuf:"varint,8,opt,name=redirect_to_vport_egress_queue,json=redirectToVportEgressQueue" json:"redirect_to_vport_egress_queue,omitempty"`
	RedirectToVportIngressQueueIfTtlIsOne bool                                    `protobuf:"varint,9,opt,name=redirect_to_vport_ingress_queue_if_ttl_is_one,json=redirectToVportIngressQueueIfTtlIsOne" json:"redirect_to_vport_ingress_queue_if_ttl_is_one,omitempty"`
	RedirectToVportEgressQueueIfTtlIsOne  bool                                    `protobuf:"varint,10,opt,name=redirect_to_vport_egress_queue_if_ttl_is_one,json=redirectToVportEgressQueueIfTtlIsOne" json:"redirect_to_vport_egress_queue_if_ttl_is_one,omitempty"`
	CopyAllPackets                        bool                                    `protobuf:"varint,11,opt,name=copy_all_packets,json=copyAllPackets" json:"copy_all_packets,omitempty"`
	CopyFirstPacket                       bool                                    `protobuf:"varint,12,opt,name=copy_first_packet,json=copyFirstPacket" json:"copy_first_packet,omitempty"`
	CopyWhenTcpFlagSet                    bool                                    `protobuf:"varint,13,opt,name=copy_when_tcp_flag_set,json=copyWhenTcpFlagSet" json:"copy_when_tcp_flag_set,omitempty"`
	CustomActionPresent                   bool                                    `protobuf:"varint,14,opt,name=custom_action_present,json=customActionPresent" json:"custom_action_present,omitempty"`
	MetaActionBeforeTransposition         bool                                    `protobuf:"varint,15,opt,name=meta_action_before_transposition,json=metaActionBeforeTransposition" json:"meta_action_before_transposition,omitempty"`
	CopyAfterTcpFinFlagSet                bool                                    `protobuf:"varint,16,opt,name=copy_after_tcp_fin_flag_set,json=copyAfterTcpFinFlagSet" json:"copy_after_tcp_fin_flag_set,omitempty"`
	CopyAfterTcpRstFlagSet                bool                                    `protobuf:"varint,17,opt,name=copy_after_tcp_rst_flag_set,json=copyAfterTcpRstFlagSet" json:"copy_after_tcp_rst_flag_set,omitempty"`
	VportId                               uint32                                  `protobuf:"varint,18,opt,name=vport_id,json=vportId" json:"vport_id,omitempty"`
	RedirectVportId                       uint32                                  `protobuf:"varint,19,opt,name=redirect_vport_id,json=redirectVportId" json:"redirect_vport_id,omitempty"`
	TtlOneRedirectVportId                 uint32                                  `protobuf:"varint,20,opt,name=ttl_one_redirect_vport_id,json=ttlOneRedirectVportId" json:"ttl_one_redirect_vport_id,omitempty"`
	ExactMatches                          []*GftHeaderGroupExactMatch             `protobuf:"bytes,21,rep,name=exact_matches,json=exactMatches" json:"exact_matches,omitempty"`
	Transpositions                        []*GftHeaderGroupTransposition          `protobuf:"bytes,22,rep,name=transpositions" json:"transpositions,omitempty"`
}

func (m *GftExactMatchFlowEntrySpec) Reset()                    { *m = GftExactMatchFlowEntrySpec{} }
func (m *GftExactMatchFlowEntrySpec) String() string            { return proto.CompactTextString(m) }
func (*GftExactMatchFlowEntrySpec) ProtoMessage()               {}
func (*GftExactMatchFlowEntrySpec) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{27} }

func (m *GftExactMatchFlowEntrySpec) GetTableType() GftTableType {
	if m != nil {
		return m.TableType
	}
	return GftTableType_GFT_TABLE_TYPE_NONE
}

func (m *GftExactMatchFlowEntrySpec) GetKeyOrHandle() *GftExactMatchFlowEntryKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *GftExactMatchFlowEntrySpec) GetExactMatchProfile() *GftExactMatchProfileKeyHandle {
	if m != nil {
		return m.ExactMatchProfile
	}
	return nil
}

func (m *GftExactMatchFlowEntrySpec) GetTranspositionProfile() *GftHeaderTranspositionProfileKeyHandle {
	if m != nil {
		return m.TranspositionProfile
	}
	return nil
}

func (m *GftExactMatchFlowEntrySpec) GetAddInActivatedState() bool {
	if m != nil {
		return m.AddInActivatedState
	}
	return false
}

func (m *GftExactMatchFlowEntrySpec) GetRdmaFlow() bool {
	if m != nil {
		return m.RdmaFlow
	}
	return false
}

func (m *GftExactMatchFlowEntrySpec) GetRedirectToVportIngressQueue() bool {
	if m != nil {
		return m.RedirectToVportIngressQueue
	}
	return false
}

func (m *GftExactMatchFlowEntrySpec) GetRedirectToVportEgressQueue() bool {
	if m != nil {
		return m.RedirectToVportEgressQueue
	}
	return false
}

func (m *GftExactMatchFlowEntrySpec) GetRedirectToVportIngressQueueIfTtlIsOne() bool {
	if m != nil {
		return m.RedirectToVportIngressQueueIfTtlIsOne
	}
	return false
}

func (m *GftExactMatchFlowEntrySpec) GetRedirectToVportEgressQueueIfTtlIsOne() bool {
	if m != nil {
		return m.RedirectToVportEgressQueueIfTtlIsOne
	}
	return false
}

func (m *GftExactMatchFlowEntrySpec) GetCopyAllPackets() bool {
	if m != nil {
		return m.CopyAllPackets
	}
	return false
}

func (m *GftExactMatchFlowEntrySpec) GetCopyFirstPacket() bool {
	if m != nil {
		return m.CopyFirstPacket
	}
	return false
}

func (m *GftExactMatchFlowEntrySpec) GetCopyWhenTcpFlagSet() bool {
	if m != nil {
		return m.CopyWhenTcpFlagSet
	}
	return false
}

func (m *GftExactMatchFlowEntrySpec) GetCustomActionPresent() bool {
	if m != nil {
		return m.CustomActionPresent
	}
	return false
}

func (m *GftExactMatchFlowEntrySpec) GetMetaActionBeforeTransposition() bool {
	if m != nil {
		return m.MetaActionBeforeTransposition
	}
	return false
}

func (m *GftExactMatchFlowEntrySpec) GetCopyAfterTcpFinFlagSet() bool {
	if m != nil {
		return m.CopyAfterTcpFinFlagSet
	}
	return false
}

func (m *GftExactMatchFlowEntrySpec) GetCopyAfterTcpRstFlagSet() bool {
	if m != nil {
		return m.CopyAfterTcpRstFlagSet
	}
	return false
}

func (m *GftExactMatchFlowEntrySpec) GetVportId() uint32 {
	if m != nil {
		return m.VportId
	}
	return 0
}

func (m *GftExactMatchFlowEntrySpec) GetRedirectVportId() uint32 {
	if m != nil {
		return m.RedirectVportId
	}
	return 0
}

func (m *GftExactMatchFlowEntrySpec) GetTtlOneRedirectVportId() uint32 {
	if m != nil {
		return m.TtlOneRedirectVportId
	}
	return 0
}

func (m *GftExactMatchFlowEntrySpec) GetExactMatches() []*GftHeaderGroupExactMatch {
	if m != nil {
		return m.ExactMatches
	}
	return nil
}

func (m *GftExactMatchFlowEntrySpec) GetTranspositions() []*GftHeaderGroupTransposition {
	if m != nil {
		return m.Transpositions
	}
	return nil
}

// GftExactMatchFlowEntryRequestMsg is used to do batched add or modify of GFT
// exact match flow entry
type GftExactMatchFlowEntryRequestMsg struct {
	Request []*GftExactMatchFlowEntrySpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *GftExactMatchFlowEntryRequestMsg) Reset()         { *m = GftExactMatchFlowEntryRequestMsg{} }
func (m *GftExactMatchFlowEntryRequestMsg) String() string { return proto.CompactTextString(m) }
func (*GftExactMatchFlowEntryRequestMsg) ProtoMessage()    {}
func (*GftExactMatchFlowEntryRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{28}
}

func (m *GftExactMatchFlowEntryRequestMsg) GetRequest() []*GftExactMatchFlowEntrySpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// GftExactMatchFlowEntryStatus represents the current status of GFT exact match flow entry
type GftExactMatchFlowEntryStatus struct {
	FlowEntryHandle uint64 `protobuf:"fixed64,1,opt,name=flow_entry_handle,json=flowEntryHandle" json:"flow_entry_handle,omitempty"`
	FlowIndex       uint64 `protobuf:"varint,2,opt,name=flow_index,json=flowIndex" json:"flow_index,omitempty"`
	FlowInfoIndex   uint64 `protobuf:"varint,3,opt,name=flow_info_index,json=flowInfoIndex" json:"flow_info_index,omitempty"`
}

func (m *GftExactMatchFlowEntryStatus) Reset()                    { *m = GftExactMatchFlowEntryStatus{} }
func (m *GftExactMatchFlowEntryStatus) String() string            { return proto.CompactTextString(m) }
func (*GftExactMatchFlowEntryStatus) ProtoMessage()               {}
func (*GftExactMatchFlowEntryStatus) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{29} }

func (m *GftExactMatchFlowEntryStatus) GetFlowEntryHandle() uint64 {
	if m != nil {
		return m.FlowEntryHandle
	}
	return 0
}

func (m *GftExactMatchFlowEntryStatus) GetFlowIndex() uint64 {
	if m != nil {
		return m.FlowIndex
	}
	return 0
}

func (m *GftExactMatchFlowEntryStatus) GetFlowInfoIndex() uint64 {
	if m != nil {
		return m.FlowInfoIndex
	}
	return 0
}

// GftExactMatchFlowEntryResponse is response to GftExactMatchFlowEntrySpec
type GftExactMatchFlowEntryResponse struct {
	ApiStatus ApiStatus                     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *GftExactMatchFlowEntryStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *GftExactMatchFlowEntryResponse) Reset()                    { *m = GftExactMatchFlowEntryResponse{} }
func (m *GftExactMatchFlowEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*GftExactMatchFlowEntryResponse) ProtoMessage()               {}
func (*GftExactMatchFlowEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{30} }

func (m *GftExactMatchFlowEntryResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *GftExactMatchFlowEntryResponse) GetStatus() *GftExactMatchFlowEntryStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// GftExactMatchFlowEntryResponseMsg is batched response to GftExactMatchFlowEntryRequestMsg
type GftExactMatchFlowEntryResponseMsg struct {
	Response []*GftExactMatchFlowEntryResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *GftExactMatchFlowEntryResponseMsg) Reset()         { *m = GftExactMatchFlowEntryResponseMsg{} }
func (m *GftExactMatchFlowEntryResponseMsg) String() string { return proto.CompactTextString(m) }
func (*GftExactMatchFlowEntryResponseMsg) ProtoMessage()    {}
func (*GftExactMatchFlowEntryResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{31}
}

func (m *GftExactMatchFlowEntryResponseMsg) GetResponse() []*GftExactMatchFlowEntryResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*GftEthFields)(nil), "halproto.GftEthFields")
	proto.RegisterType((*GftHeaders)(nil), "halproto.GftHeaders")
	proto.RegisterType((*GftHeaderFields)(nil), "halproto.GftHeaderFields")
	proto.RegisterType((*GftHeaderGroupExactMatchProfile)(nil), "halproto.GftHeaderGroupExactMatchProfile")
	proto.RegisterType((*GftExactMatchProfileSpec)(nil), "halproto.GftExactMatchProfileSpec")
	proto.RegisterType((*GftExactMatchProfileRequestMsg)(nil), "halproto.GftExactMatchProfileRequestMsg")
	proto.RegisterType((*GftExactMatchProfileStatus)(nil), "halproto.GftExactMatchProfileStatus")
	proto.RegisterType((*GftExactMatchProfileResponse)(nil), "halproto.GftExactMatchProfileResponse")
	proto.RegisterType((*GftExactMatchProfileResponseMsg)(nil), "halproto.GftExactMatchProfileResponseMsg")
	proto.RegisterType((*UdpMatchFields)(nil), "halproto.UdpMatchFields")
	proto.RegisterType((*TcpMatchFields)(nil), "halproto.TcpMatchFields")
	proto.RegisterType((*IcmpMatchFields)(nil), "halproto.IcmpMatchFields")
	proto.RegisterType((*EncapMatchFields)(nil), "halproto.EncapMatchFields")
	proto.RegisterType((*GftHeaderGroupTranspositionProfile)(nil), "halproto.GftHeaderGroupTranspositionProfile")
	proto.RegisterType((*GftHeaderTranspositionProfileSpec)(nil), "halproto.GftHeaderTranspositionProfileSpec")
	proto.RegisterType((*GftHeaderTranspositionProfileRequestMsg)(nil), "halproto.GftHeaderTranspositionProfileRequestMsg")
	proto.RegisterType((*GftHeaderTranspositionProfileStatus)(nil), "halproto.GftHeaderTranspositionProfileStatus")
	proto.RegisterType((*GftHeaderTranspositionProfileResponse)(nil), "halproto.GftHeaderTranspositionProfileResponse")
	proto.RegisterType((*GftHeaderTranspositionProfileResponseMsg)(nil), "halproto.GftHeaderTranspositionProfileResponseMsg")
	proto.RegisterType((*EncapOrTransportMatch)(nil), "halproto.EncapOrTransportMatch")
	proto.RegisterType((*GftHeaderGroupExactMatch)(nil), "halproto.GftHeaderGroupExactMatch")
	proto.RegisterType((*UdpTranspositionFields)(nil), "halproto.UdpTranspositionFields")
	proto.RegisterType((*TcpTranspositionFields)(nil), "halproto.TcpTranspositionFields")
	proto.RegisterType((*IcmpTranspositionFields)(nil), "halproto.IcmpTranspositionFields")
	proto.RegisterType((*EncapTranspositionFields)(nil), "halproto.EncapTranspositionFields")
	proto.RegisterType((*EncapOrTransportTransposition)(nil), "halproto.EncapOrTransportTransposition")
	proto.RegisterType((*GftHeaderGroupTransposition)(nil), "halproto.GftHeaderGroupTransposition")
	proto.RegisterType((*GftExactMatchFlowEntrySpec)(nil), "halproto.GftExactMatchFlowEntrySpec")
	proto.RegisterType((*GftExactMatchFlowEntryRequestMsg)(nil), "halproto.GftExactMatchFlowEntryRequestMsg")
	proto.RegisterType((*GftExactMatchFlowEntryStatus)(nil), "halproto.GftExactMatchFlowEntryStatus")
	proto.RegisterType((*GftExactMatchFlowEntryResponse)(nil), "halproto.GftExactMatchFlowEntryResponse")
	proto.RegisterType((*GftExactMatchFlowEntryResponseMsg)(nil), "halproto.GftExactMatchFlowEntryResponseMsg")
	proto.RegisterEnum("halproto.GftTableType", GftTableType_name, GftTableType_value)
	proto.RegisterEnum("halproto.GftHeaderGroupTranspostionAction", GftHeaderGroupTranspostionAction_name, GftHeaderGroupTranspostionAction_value)
}

func init() { proto.RegisterFile("gft.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 2436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xcd, 0x53, 0x1b, 0xc9,
	0x15, 0xb7, 0x24, 0x10, 0xd2, 0xd3, 0x27, 0xc3, 0x87, 0x65, 0x30, 0x06, 0x06, 0x63, 0x13, 0x6a,
	0x97, 0xda, 0xb0, 0xae, 0x75, 0xbc, 0xf1, 0xd6, 0xae, 0x00, 0x01, 0xaa, 0x18, 0x50, 0x06, 0xd9,
	0x8e, 0x5d, 0xc9, 0x76, 0x86, 0x99, 0x16, 0x9a, 0x42, 0xcc, 0xcc, 0x4e, 0x37, 0xd8, 0xdc, 0x93,
	0xaa, 0x9c, 0x52, 0x95, 0x5b, 0x6e, 0xa9, 0x54, 0xfe, 0x80, 0x54, 0x2e, 0xb9, 0x26, 0xb7, 0xfc,
	0x15, 0xd9, 0xca, 0x31, 0xe7, 0xbd, 0xe6, 0x90, 0x54, 0x7f, 0xcc, 0x48, 0x33, 0x1a, 0x09, 0x61,
	0x3b, 0x7b, 0x42, 0xf3, 0xde, 0xef, 0x75, 0xbf, 0xee, 0x7e, 0xfd, 0x7b, 0xef, 0x35, 0x90, 0x3d,
	0x6d, 0xd1, 0x0d, 0xd7, 0x73, 0xa8, 0xa3, 0xa4, 0x4e, 0x5b, 0x74, 0x2e, 0x47, 0xaf, 0x5c, 0x4c,
	0x84, 0x64, 0x2e, 0x73, 0xd6, 0x16, 0xbf, 0xd4, 0x7f, 0x26, 0x20, 0xbf, 0xd7, 0xa2, 0x35, 0xda,
	0xde, 0xb5, 0x70, 0xc7, 0x24, 0xca, 0x12, 0xe4, 0x4d, 0x42, 0xd1, 0xb9, 0x6e, 0x20, 0xdd, 0x34,
	0xbd, 0x4a, 0x62, 0x29, 0xb1, 0x36, 0xa6, 0x81, 0x49, 0xe8, 0x81, 0x6e, 0x54, 0x4d, 0xd3, 0x63,
	0x08, 0xe2, 0x19, 0x5d, 0x44, 0x52, 0x20, 0x88, 0x67, 0xf8, 0x88, 0x3b, 0x90, 0xc1, 0xb4, 0x8d,
	0xd8, 0x8c, 0x95, 0xd4, 0x52, 0x62, 0xad, 0xa0, 0x4d, 0x60, 0xda, 0x6e, 0x5e, 0xb9, 0x58, 0x59,
	0x83, 0xb2, 0x71, 0x41, 0xa8, 0x73, 0x8e, 0x3d, 0x74, 0xd9, 0xd1, 0x6d, 0x64, 0x99, 0x95, 0x31,
	0x0e, 0x29, 0xfa, 0xf2, 0x17, 0x1d, 0xdd, 0xae, 0x9b, 0x0c, 0xe9, 0x7a, 0xce, 0xa5, 0x65, 0xf6,
	0x20, 0xc7, 0x05, 0xd2, 0x97, 0x4b, 0xe4, 0x1c, 0x64, 0x5c, 0xcf, 0x72, 0x3c, 0x8b, 0x5e, 0x55,
	0xd2, 0x1c, 0x11, 0x7c, 0xab, 0xff, 0x4d, 0x02, 0xec, 0xb5, 0xe8, 0x3e, 0xd6, 0x4d, 0xec, 0x11,
	0xe5, 0x21, 0x94, 0x30, 0x6d, 0x63, 0xcf, 0xc6, 0x14, 0xb5, 0xb9, 0x8c, 0x2f, 0x30, 0xa3, 0x15,
	0x7d, 0xb1, 0x40, 0x2a, 0x8b, 0x90, 0xb3, 0xdc, 0xcb, 0x47, 0x3e, 0x28, 0xc9, 0x41, 0xc0, 0x44,
	0x21, 0xc0, 0x67, 0x3e, 0x20, 0x15, 0x00, 0x3e, 0x93, 0x80, 0x05, 0x00, 0x6a, 0xb8, 0xbe, 0x7e,
	0x8c, 0xeb, 0xb3, 0xd4, 0x70, 0xbb, 0xea, 0x0b, 0x33, 0x50, 0x8f, 0x0b, 0xf5, 0x85, 0xe9, 0xf6,
	0x0c, 0x6f, 0x9c, 0x07, 0xfa, 0xb4, 0x1c, 0xde, 0x38, 0xf7, 0x01, 0x77, 0x20, 0x63, 0x3b, 0x08,
	0xdb, 0x86, 0xee, 0x56, 0x26, 0xb8, 0x76, 0xc2, 0x76, 0x6a, 0xec, 0x53, 0x59, 0x81, 0xa2, 0xe5,
	0x22, 0xcb, 0x46, 0x96, 0x2b, 0x01, 0x19, 0x0e, 0xc8, 0x59, 0x6e, 0xdd, 0xae, 0xbb, 0x02, 0xb4,
	0x0a, 0x25, 0x01, 0x3a, 0xf5, 0xb0, 0x44, 0x65, 0x39, 0x2a, 0xcf, 0x50, 0x7b, 0x1e, 0x16, 0xb0,
	0x45, 0xc8, 0xd9, 0x97, 0x5d, 0x08, 0x08, 0x3f, 0xb8, 0x28, 0x00, 0x5c, 0xbe, 0x65, 0xc7, 0x23,
	0x00, 0x39, 0x01, 0xe0, 0x22, 0x0e, 0x50, 0x7f, 0x33, 0x0e, 0xa5, 0xe0, 0x04, 0x86, 0x04, 0x59,
	0xe6, 0xda, 0x20, 0xcb, 0x0c, 0x0d, 0xb2, 0xcc, 0xf5, 0x41, 0x96, 0x19, 0x39, 0xc8, 0x32, 0x7d,
	0x41, 0xb6, 0x0a, 0x45, 0xd3, 0xa1, 0x3f, 0x74, 0x51, 0x28, 0xd4, 0x32, 0x5a, 0x81, 0x4b, 0x1b,
	0x52, 0xa8, 0xdc, 0x83, 0x1c, 0xf3, 0xdb, 0x72, 0x85, 0xdb, 0xe2, 0x64, 0xb2, 0xc4, 0x33, 0xea,
	0x2e, 0xf7, 0xfa, 0x1e, 0xe4, 0xd8, 0xca, 0x7d, 0xbd, 0x38, 0x98, 0xac, 0x49, 0xa8, 0xd4, 0xcf,
	0x40, 0xda, 0x72, 0x11, 0xa5, 0x1d, 0x79, 0x1a, 0xe3, 0x96, 0xdb, 0xa4, 0x1d, 0x11, 0x6d, 0x88,
	0x5f, 0x59, 0xc3, 0xe9, 0xf8, 0xc7, 0x60, 0xb9, 0x0d, 0x29, 0x51, 0x6e, 0xc3, 0x84, 0xe5, 0x22,
	0x93, 0x18, 0xfe, 0x11, 0xa4, 0x2d, 0x77, 0x87, 0x18, 0x2e, 0xdb, 0x26, 0xe6, 0x90, 0xeb, 0x78,
	0xb4, 0x92, 0x17, 0xdb, 0x44, 0x3c, 0xa3, 0xe1, 0x78, 0x94, 0xa9, 0x98, 0x2f, 0x5c, 0x55, 0x10,
	0x2a, 0x93, 0x50, 0xae, 0x9a, 0x07, 0x16, 0xaa, 0xa8, 0xd5, 0xd1, 0x4f, 0x49, 0xa5, 0xc8, 0x75,
	0x19, 0x6a, 0xb8, 0xbb, 0xec, 0x9b, 0x2b, 0xb1, 0xad, 0xdb, 0x94, 0xed, 0x56, 0x49, 0x2a, 0xb9,
	0xa0, 0x6e, 0x32, 0x25, 0x0f, 0x5c, 0x7e, 0x2e, 0x65, 0xa1, 0x64, 0x02, 0x7e, 0x30, 0xbe, 0xd2,
	0x70, 0x4c, 0x5c, 0x99, 0xec, 0x2a, 0xb7, 0x1d, 0x13, 0x33, 0x77, 0x1c, 0xe7, 0x84, 0x1f, 0x43,
	0x45, 0x11, 0xee, 0x38, 0xce, 0x09, 0xdb, 0x7e, 0x45, 0x85, 0x02, 0x53, 0x75, 0x67, 0x9d, 0x12,
	0x01, 0xed, 0x38, 0x27, 0x4d, 0x7f, 0xe2, 0x65, 0xc8, 0xb3, 0x38, 0x0d, 0xf6, 0x68, 0x5a, 0x40,
	0x4e, 0x3d, 0xec, 0x6f, 0x92, 0xfa, 0xeb, 0x04, 0x2c, 0x06, 0xa1, 0xb8, 0xe7, 0x39, 0x17, 0x6e,
	0xed, 0xad, 0x6e, 0xd0, 0x03, 0x9d, 0x1a, 0xed, 0x86, 0xe7, 0xb4, 0xac, 0x0e, 0x56, 0x7e, 0x00,
	0x13, 0xe2, 0xce, 0x11, 0x1e, 0x95, 0xb9, 0xcd, 0xd2, 0x06, 0x63, 0xd2, 0x2e, 0x87, 0x68, 0xbe,
	0x5e, 0x79, 0x0c, 0xf9, 0x73, 0x66, 0x8a, 0x5a, 0x3c, 0xaa, 0x79, 0x8c, 0xe6, 0x36, 0xa7, 0xc3,
	0x78, 0x11, 0xf1, 0x5a, 0x8e, 0x23, 0xc5, 0x87, 0xfa, 0xfb, 0x24, 0x54, 0x18, 0xe9, 0x46, 0x27,
	0x3f, 0x76, 0xb1, 0xa1, 0x3c, 0x87, 0xc2, 0x19, 0xbe, 0x42, 0x8e, 0x87, 0xda, 0xba, 0x6d, 0x76,
	0xb0, 0x74, 0x63, 0x79, 0xe3, 0xac, 0xbd, 0x11, 0x67, 0xf4, 0x13, 0x7c, 0xb5, 0xcf, 0x81, 0x5b,
	0xc5, 0xef, 0xbe, 0x5d, 0x84, 0x4b, 0x6c, 0x5b, 0x06, 0xfe, 0xfc, 0x0c, 0x5f, 0x69, 0xb9, 0x33,
	0x7c, 0x75, 0xe4, 0x09, 0x25, 0xdb, 0x7a, 0xcf, 0x3c, 0xd7, 0x51, 0xab, 0xe3, 0xbc, 0x91, 0xb7,
	0x29, 0xc3, 0x04, 0xbb, 0x1d, 0xe7, 0x8d, 0xf2, 0x09, 0x00, 0xd5, 0x4f, 0x3a, 0xb8, 0x7b, 0x9b,
	0x8a, 0x9b, 0x93, 0xfe, 0x3a, 0x9a, 0x4c, 0xc3, 0x8e, 0x4f, 0xcb, 0x52, 0xff, 0xa7, 0xf2, 0x02,
	0xa6, 0x31, 0xf3, 0x04, 0x89, 0x1d, 0x70, 0x85, 0x2f, 0xa4, 0x32, 0xb6, 0x94, 0x5a, 0xcb, 0x6d,
	0xde, 0x0f, 0xef, 0x41, 0xfc, 0x56, 0x6b, 0x0a, 0x8e, 0x8a, 0x88, 0xfa, 0x0a, 0xee, 0xc5, 0x2d,
	0x52, 0xc3, 0xdf, 0x5c, 0x60, 0x42, 0x0f, 0xc8, 0xa9, 0xf2, 0x18, 0x26, 0x3c, 0xf1, 0x55, 0x49,
	0xf0, 0xc9, 0x16, 0xfc, 0xc9, 0x62, 0xf7, 0x53, 0xf3, 0xd1, 0xea, 0x36, 0xcc, 0xc5, 0x82, 0xa8,
	0x4e, 0x2f, 0x08, 0xbb, 0xdf, 0x72, 0x11, 0xbd, 0xfb, 0x9e, 0xd6, 0x0a, 0x52, 0x2a, 0xb6, 0x51,
	0xfd, 0x43, 0x02, 0xee, 0xc6, 0x3b, 0x48, 0x5c, 0xc7, 0x26, 0x58, 0xd9, 0x05, 0xd0, 0x5d, 0x0b,
	0x11, 0x3e, 0x2a, 0x1f, 0xa3, 0xb8, 0x59, 0xde, 0x10, 0xc9, 0xb7, 0xea, 0x5a, 0x62, 0xb6, 0xad,
	0x99, 0xef, 0xbe, 0x5d, 0x9c, 0x94, 0x47, 0xd5, 0x85, 0x6b, 0x59, 0xdd, 0x47, 0x28, 0x8f, 0x21,
	0x2d, 0xc7, 0x10, 0x61, 0xb5, 0x38, 0x78, 0x95, 0xc2, 0x56, 0xc2, 0xd5, 0x5f, 0xf2, 0x18, 0x1f,
	0xe8, 0x20, 0xdb, 0xc2, 0x2f, 0x20, 0xe3, 0xc9, 0x4f, 0xb9, 0x87, 0xcb, 0x03, 0x47, 0xf7, 0xed,
	0xb4, 0xc0, 0x44, 0x7d, 0x0a, 0xc5, 0xe7, 0xa6, 0x7b, 0xd0, 0x0d, 0x68, 0x65, 0x1a, 0xc6, 0x09,
	0xa7, 0x91, 0x04, 0x4f, 0xbf, 0xe2, 0x83, 0x49, 0x4d, 0x2e, 0x4d, 0x0a, 0x29, 0xff, 0x50, 0x5f,
	0x41, 0xb1, 0x69, 0xbc, 0xab, 0x75, 0x98, 0x98, 0x44, 0x6d, 0x11, 0x10, 0x93, 0xfa, 0x04, 0x4a,
	0x75, 0xe3, 0x3c, 0x34, 0xb6, 0x02, 0x63, 0x3c, 0xa6, 0xc5, 0xd0, 0xfc, 0x37, 0x93, 0x71, 0x02,
	0x12, 0x03, 0xf3, 0xdf, 0xaa, 0x06, 0x65, 0x9e, 0xae, 0x7a, 0x6d, 0x43, 0x3c, 0x97, 0x90, 0x73,
	0x0d, 0xa2, 0x1b, 0x31, 0x58, 0x88, 0x6e, 0xfe, 0x91, 0x00, 0x35, 0x7c, 0x07, 0x9a, 0x9e, 0x6e,
	0x13, 0xd7, 0x21, 0x16, 0xb5, 0x1c, 0xdb, 0x67, 0x9c, 0x2f, 0x20, 0xad, 0x1b, 0x4c, 0x20, 0xa3,
	0x65, 0x35, 0xe6, 0xf2, 0xf8, 0x86, 0x0c, 0x56, 0xe5, 0x60, 0x4d, 0x1a, 0xf5, 0x12, 0x56, 0xf2,
	0x86, 0x84, 0x95, 0x1a, 0x95, 0xb0, 0xfe, 0x95, 0x86, 0xe5, 0x00, 0x10, 0xb7, 0x08, 0xce, 0x5c,
	0x5f, 0xc7, 0x33, 0xd7, 0xba, 0x64, 0xae, 0xc1, 0xd6, 0x23, 0x52, 0xd8, 0x0e, 0x2c, 0x7a, 0xd8,
	0xb4, 0x3c, 0x6c, 0x50, 0x44, 0x1d, 0x74, 0xc9, 0x02, 0x02, 0x59, 0xf6, 0xa9, 0x87, 0x09, 0x41,
	0xdf, 0x5c, 0xe0, 0x0b, 0x2c, 0x89, 0x6d, 0xde, 0x87, 0x35, 0x9d, 0x17, 0x0c, 0x54, 0x17, 0x98,
	0x9f, 0x32, 0x88, 0xb2, 0x05, 0xf7, 0xfa, 0x47, 0xc1, 0xbd, 0x83, 0x88, 0x6a, 0x62, 0x2e, 0x32,
	0x48, 0xad, 0x67, 0x8c, 0x9f, 0xc3, 0xc7, 0xd7, 0x78, 0x82, 0xac, 0x16, 0xcb, 0xe2, 0xc8, 0x22,
	0xc8, 0xb1, 0xb1, 0xac, 0x3e, 0x56, 0x87, 0xf8, 0x55, 0x6f, 0x35, 0x69, 0xa7, 0x4e, 0x8e, 0x6c,
	0xac, 0xbc, 0x86, 0x8f, 0x86, 0x7b, 0x18, 0x19, 0x5c, 0x14, 0x2c, 0xf7, 0x07, 0xfb, 0xdb, 0x33,
	0x36, 0x2b, 0x8d, 0x1c, 0xf7, 0x0a, 0xe9, 0x9d, 0x0e, 0x72, 0x75, 0xe3, 0x0c, 0x53, 0x22, 0x0b,
	0x99, 0x22, 0x93, 0x57, 0x3b, 0x9d, 0x86, 0x90, 0x2a, 0xeb, 0x30, 0xc9, 0x91, 0x2d, 0xcb, 0x63,
	0x45, 0x02, 0x97, 0xca, 0x7a, 0xa6, 0xc4, 0x14, 0xbb, 0x4c, 0x2e, 0xc0, 0xca, 0x26, 0xcc, 0x72,
	0xec, 0x9b, 0x36, 0xb6, 0x91, 0x7f, 0x3f, 0x11, 0xc1, 0x54, 0x16, 0x38, 0x0a, 0xd3, 0xbe, 0x6c,
	0x63, 0xbb, 0x29, 0xae, 0xea, 0x31, 0xb7, 0x99, 0x11, 0xc5, 0x18, 0x12, 0x81, 0x8c, 0x5c, 0x0f,
	0x13, 0x6c, 0x53, 0x59, 0xf8, 0x4c, 0x09, 0xa5, 0x08, 0xf6, 0x86, 0x50, 0x29, 0x7b, 0xb0, 0x74,
	0x8e, 0xa9, 0xee, 0x5b, 0x9c, 0xe0, 0x96, 0xe3, 0x61, 0x44, 0x7b, 0x43, 0x4a, 0xd6, 0x46, 0x0b,
	0x0c, 0x27, 0x8c, 0xb7, 0x38, 0x2a, 0x14, 0x77, 0x91, 0x84, 0x97, 0x1b, 0x21, 0xe1, 0x7d, 0x0d,
	0xb3, 0xa1, 0x79, 0xba, 0x29, 0x2f, 0xcf, 0x19, 0xf4, 0xe1, 0x90, 0x5b, 0xdb, 0x1b, 0xeb, 0xda,
	0x0c, 0x8d, 0x91, 0x12, 0xf5, 0x0c, 0x1e, 0x0e, 0xbd, 0x23, 0x3d, 0x19, 0xf0, 0xab, 0x68, 0x06,
	0x7c, 0x10, 0x9e, 0x7b, 0xd0, 0x05, 0xed, 0xa6, 0xc2, 0x67, 0xb0, 0x32, 0x1c, 0x7d, 0xa3, 0x9c,
	0xf8, 0x97, 0x04, 0xac, 0x5e, 0xe3, 0xfb, 0x07, 0x4e, 0x8e, 0x5f, 0x45, 0x92, 0xe3, 0xda, 0x08,
	0x1b, 0x10, 0xce, 0x92, 0x1e, 0xac, 0x8d, 0xe4, 0x32, 0xdb, 0xef, 0xdd, 0xbe, 0x74, 0xb9, 0x7e,
	0xfd, 0x7c, 0x31, 0x79, 0xf3, 0xb7, 0x49, 0x98, 0xe1, 0x49, 0xe6, 0xc8, 0xb7, 0xf0, 0x44, 0xaa,
	0x55, 0x1e, 0x89, 0x66, 0x50, 0xd2, 0xb2, 0xa0, 0xcd, 0x29, 0x3e, 0x47, 0x38, 0xd1, 0xee, 0xdf,
	0xe2, 0x3d, 0xa2, 0xcc, 0x4f, 0x8f, 0x44, 0x87, 0x19, 0xaa, 0x3e, 0x85, 0x55, 0x38, 0xc1, 0x32,
	0x2b, 0x96, 0x23, 0x85, 0xd5, 0x63, 0xd9, 0x59, 0xc6, 0xe4, 0x80, 0x48, 0xf2, 0xdc, 0xbf, 0x25,
	0x3a, 0x4e, 0x69, 0xf8, 0x39, 0xe4, 0x79, 0x8f, 0xe7, 0x5b, 0x8e, 0x71, 0xcb, 0x19, 0x6e, 0x19,
	0xcd, 0x9d, 0xfb, 0xb7, 0xb4, 0x1c, 0x07, 0x8b, 0xcf, 0xad, 0x69, 0x50, 0x84, 0xad, 0xe3, 0xf9,
	0xd7, 0xd5, 0xa3, 0xea, 0x9f, 0x53, 0xbc, 0x0e, 0x8e, 0x2d, 0x12, 0xbf, 0x8f, 0x42, 0x9c, 0xd1,
	0x00, 0xeb, 0x21, 0x43, 0x5b, 0x11, 0xd0, 0x40, 0xf0, 0x26, 0xa2, 0x65, 0x31, 0xed, 0x5a, 0x84,
	0xfa, 0x3b, 0xb1, 0x07, 0x7e, 0x08, 0xd7, 0x1b, 0xac, 0x87, 0xc3, 0x84, 0xf4, 0x76, 0x7c, 0x9f,
	0x84, 0x3b, 0xbe, 0xf1, 0x41, 0x16, 0x71, 0x3d, 0xa0, 0x78, 0xcd, 0x90, 0x3d, 0x60, 0x4f, 0x8b,
	0x37, 0xc1, 0xe5, 0x7e, 0x8b, 0x17, 0x69, 0x0e, 0x33, 0x5c, 0xd9, 0xdb, 0x1c, 0xee, 0xc7, 0xed,
	0x3e, 0xe7, 0xd9, 0xdc, 0xe6, 0x5c, 0xf7, 0xfc, 0xa2, 0x61, 0xa9, 0x95, 0x71, 0x44, 0xac, 0xee,
	0xc0, 0xec, 0x73, 0x33, 0xcc, 0x6b, 0xef, 0x50, 0x02, 0xee, 0xc0, 0x6c, 0xd3, 0x78, 0xef, 0x51,
	0xaa, 0x70, 0x9b, 0x05, 0x6c, 0xdc, 0x30, 0xa3, 0x56, 0x7d, 0xaf, 0xa1, 0xc2, 0x57, 0x1e, 0x37,
	0xc6, 0xfb, 0x56, 0x7f, 0x7f, 0x4d, 0xc2, 0x42, 0x74, 0x5b, 0xc3, 0x49, 0xe8, 0x69, 0xcc, 0xad,
	0x9f, 0xf7, 0x6f, 0x7d, 0x8c, 0x4b, 0xe1, 0xdb, 0xff, 0x34, 0xe6, 0xf6, 0xcf, 0xfb, 0xb7, 0x7f,
	0x80, 0x75, 0x97, 0x05, 0xbe, 0x8c, 0x63, 0x81, 0xbb, 0x01, 0x0b, 0xc4, 0xdb, 0xf7, 0xb2, 0xc1,
	0x56, 0x2c, 0x1b, 0x2c, 0x74, 0xa3, 0x29, 0x7e, 0x88, 0x11, 0x58, 0xe1, 0x3f, 0x29, 0x98, 0x1f,
	0x92, 0x47, 0xbf, 0xc7, 0x7a, 0xf9, 0x09, 0x14, 0xc4, 0xcf, 0x51, 0x0a, 0xe6, 0x7c, 0xbb, 0xf7,
	0x85, 0x2b, 0xcc, 0x2c, 0x63, 0x37, 0x67, 0x96, 0xf1, 0x1b, 0x33, 0x4b, 0xfa, 0x26, 0xcc, 0x32,
	0x31, 0x80, 0x59, 0x32, 0xc3, 0x98, 0x25, 0xdb, 0xc7, 0x2c, 0x8d, 0x58, 0x66, 0x01, 0xee, 0x89,
	0x1a, 0xcb, 0x2c, 0xa1, 0xb3, 0x8c, 0x61, 0x98, 0x3f, 0xe6, 0x22, 0x6d, 0xfa, 0x6e, 0xc7, 0x79,
	0x53, 0xb3, 0xa9, 0x77, 0xc5, 0x7b, 0x8c, 0x70, 0xe1, 0x96, 0x18, 0xa1, 0x70, 0x7b, 0x19, 0xed,
	0x4a, 0xc4, 0xa9, 0xaf, 0xf4, 0xbd, 0xa7, 0x04, 0x13, 0x8d, 0xd8, 0x8e, 0xe8, 0x30, 0x15, 0xf3,
	0x04, 0x22, 0x63, 0xe4, 0x86, 0xcf, 0x35, 0x1e, 0x6e, 0x69, 0x93, 0x7d, 0xcf, 0x21, 0x8a, 0x03,
	0x33, 0xb1, 0x45, 0xa7, 0x0c, 0xa8, 0x77, 0xed, 0xac, 0xd8, 0x6c, 0xd3, 0x71, 0x65, 0xa8, 0xf2,
	0x29, 0xcc, 0xea, 0xa6, 0x89, 0x2c, 0x9b, 0x97, 0xd8, 0x97, 0x3a, 0xc5, 0x26, 0x2f, 0xbf, 0xfc,
	0x26, 0x63, 0x4a, 0x37, 0xcd, 0x3a, 0xbf, 0x51, 0x5c, 0xc7, 0x8a, 0xaa, 0xc8, 0xd3, 0x52, 0x3a,
	0xf2, 0xb4, 0x34, 0x42, 0xd3, 0x36, 0xf1, 0x21, 0x9a, 0xb6, 0xcc, 0x87, 0x6f, 0xda, 0xb2, 0xff,
	0xcf, 0xa6, 0x0d, 0xde, 0xb3, 0x69, 0xcb, 0x8d, 0xde, 0xb4, 0xe5, 0x6f, 0xda, 0xb4, 0x15, 0x6e,
	0xde, 0xb4, 0x15, 0xdf, 0xaf, 0x69, 0x2b, 0x8d, 0xd2, 0xb4, 0xfd, 0x18, 0xe6, 0xc5, 0x36, 0xb4,
	0x28, 0xf6, 0x84, 0xc7, 0x96, 0xdd, 0xf5, 0x5a, 0x3c, 0x36, 0xf3, 0x35, 0x55, 0x19, 0x82, 0xb9,
	0x6d, 0xd9, 0xbe, 0xe7, 0xfd, 0xc6, 0x6c, 0x87, 0x02, 0xe3, 0xc9, 0x7e, 0x63, 0x8d, 0x50, 0xdf,
	0xf8, 0x0e, 0x64, 0x64, 0xb8, 0x98, 0xfc, 0x69, 0xba, 0xa0, 0x4d, 0xf0, 0xef, 0xba, 0xc9, 0x76,
	0x3c, 0x38, 0xf7, 0x00, 0x33, 0xc5, 0x31, 0x25, 0x5f, 0xf1, 0x42, 0x62, 0x7f, 0x04, 0x77, 0x58,
	0x04, 0x38, 0x36, 0x46, 0xfd, 0x36, 0xd3, 0xdc, 0x66, 0x86, 0xd2, 0xce, 0x91, 0x8d, 0xb5, 0x88,
	0xe5, 0x16, 0x14, 0x7a, 0xb8, 0x06, 0x93, 0xca, 0x4c, 0xf8, 0xe9, 0x33, 0xb6, 0x84, 0xd6, 0xf2,
	0x5d, 0x46, 0xc1, 0x44, 0xd9, 0x87, 0x62, 0x68, 0xd3, 0x49, 0x65, 0x96, 0x0f, 0xb2, 0x74, 0x5d,
	0xe7, 0xaa, 0x45, 0xec, 0xd4, 0x5f, 0xc0, 0x52, 0x3c, 0x73, 0xf6, 0x34, 0xa9, 0x4f, 0xa2, 0x4d,
	0x6a, 0xcc, 0x03, 0x66, 0x88, 0xda, 0xbb, 0xdd, 0xe9, 0xef, 0xa2, 0x6f, 0xac, 0x5d, 0x9c, 0x68,
	0xff, 0xd6, 0x61, 0x92, 0x71, 0x0d, 0xc2, 0x4c, 0x16, 0x6e, 0x4d, 0x4b, 0x2d, 0x1f, 0x2b, 0x59,
	0x7a, 0x01, 0x80, 0x63, 0x2d, 0xdb, 0xc4, 0x6f, 0xe5, 0xff, 0x2a, 0xb3, 0x4c, 0x52, 0x67, 0x02,
	0xe5, 0x01, 0x94, 0xa4, 0xba, 0xe5, 0x48, 0x4c, 0x8a, 0x63, 0x0a, 0x02, 0xd3, 0x72, 0x38, 0x4e,
	0xfd, 0x53, 0x22, 0xf2, 0x30, 0xdd, 0xb3, 0xe6, 0x0f, 0xdc, 0xdc, 0x3e, 0x89, 0x34, 0xb7, 0xcb,
	0xc3, 0x36, 0x2e, 0xdc, 0xd5, 0x9a, 0xfc, 0x99, 0x6e, 0x88, 0x93, 0xec, 0x64, 0xbe, 0xec, 0x6b,
	0x67, 0x57, 0x86, 0xcc, 0xd0, 0xdf, 0xc7, 0xae, 0xff, 0x4d, 0xfc, 0xcf, 0x38, 0xc8, 0xb6, 0xca,
	0x6d, 0x98, 0xda, 0xdb, 0x6d, 0xa2, 0x66, 0x75, 0xeb, 0x59, 0x0d, 0x35, 0x5f, 0x35, 0x6a, 0xe8,
	0xf0, 0xe8, 0xb0, 0x56, 0xbe, 0xa5, 0xac, 0xc0, 0x62, 0x44, 0xf1, 0xb2, 0xfe, 0x6c, 0x67, 0xbb,
	0xaa, 0xed, 0xa0, 0xfa, 0xe1, 0x9e, 0x56, 0x3b, 0x3e, 0x2e, 0x27, 0x14, 0x15, 0xee, 0x0d, 0x02,
	0xd5, 0x04, 0x26, 0xa9, 0x3c, 0x00, 0x35, 0x82, 0xa9, 0xfd, 0xac, 0xba, 0xdd, 0x44, 0x07, 0xd5,
	0xe6, 0xf6, 0x7e, 0x30, 0x56, 0x4a, 0x59, 0x85, 0xe5, 0x21, 0x38, 0x39, 0xdc, 0xd8, 0xfa, 0xdf,
	0x13, 0x3c, 0x82, 0x87, 0x16, 0x8c, 0xca, 0x02, 0xdc, 0x69, 0x6a, 0xd5, 0xc3, 0xe3, 0xc6, 0xd1,
	0x71, 0xbd, 0x59, 0x3f, 0x3a, 0x44, 0xd5, 0x6d, 0xfe, 0x47, 0xae, 0x6d, 0x11, 0xe6, 0x63, 0xd5,
	0x07, 0x47, 0x3b, 0xf5, 0xdd, 0x57, 0xe5, 0xc4, 0x40, 0x40, 0x7d, 0xef, 0xf0, 0x48, 0xab, 0x95,
	0x93, 0x03, 0x27, 0x68, 0x3c, 0x3f, 0xde, 0x2f, 0xa7, 0x94, 0xbb, 0x50, 0x89, 0x57, 0x1f, 0x35,
	0xca, 0x63, 0x9b, 0xff, 0x4e, 0x42, 0x6a, 0xaf, 0x45, 0x15, 0x2b, 0xfe, 0xbf, 0x1a, 0xdb, 0x1e,
	0x66, 0xa9, 0x79, 0x65, 0xc8, 0xbb, 0xbe, 0x7f, 0x55, 0xe7, 0xee, 0x5f, 0xfb, 0xf8, 0x7f, 0x40,
	0x4e, 0xd5, 0x5b, 0xca, 0xaf, 0x12, 0xd7, 0x3c, 0x1b, 0xc9, 0x49, 0x3f, 0x1a, 0xe5, 0x75, 0x24,
	0x98, 0xfd, 0xe3, 0xd1, 0xdf, 0x52, 0x84, 0x1b, 0xce, 0x20, 0x76, 0x90, 0xd3, 0xaf, 0x0e, 0x8d,
	0xe6, 0x60, 0xde, 0x07, 0x23, 0x04, 0x3d, 0x9f, 0x70, 0x0b, 0x5e, 0x67, 0xda, 0x7a, 0x87, 0x57,
	0xc1, 0x27, 0x69, 0xfe, 0xe7, 0xd3, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x87, 0x81, 0x8f, 0xf3,
	0x5f, 0x21, 0x00, 0x00,
}
