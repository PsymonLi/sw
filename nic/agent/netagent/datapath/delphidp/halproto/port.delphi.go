// Code generated by protoc-gen-go. DO NOT EDIT.
// source: port.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Port breakout modes
type PortBreakoutMode int32

const (
	PortBreakoutMode_PORT_BREAKOUT_MODE_NONE  PortBreakoutMode = 0
	PortBreakoutMode_PORT_BREAKOUT_MODE_4x25G PortBreakoutMode = 1
	PortBreakoutMode_PORT_BREAKOUT_MODE_4x10G PortBreakoutMode = 2
	PortBreakoutMode_PORT_BREAKOUT_MODE_2x50G PortBreakoutMode = 3
)

var PortBreakoutMode_name = map[int32]string{
	0: "PORT_BREAKOUT_MODE_NONE",
	1: "PORT_BREAKOUT_MODE_4x25G",
	2: "PORT_BREAKOUT_MODE_4x10G",
	3: "PORT_BREAKOUT_MODE_2x50G",
}
var PortBreakoutMode_value = map[string]int32{
	"PORT_BREAKOUT_MODE_NONE":  0,
	"PORT_BREAKOUT_MODE_4x25G": 1,
	"PORT_BREAKOUT_MODE_4x10G": 2,
	"PORT_BREAKOUT_MODE_2x50G": 3,
}

func (x PortBreakoutMode) String() string {
	return proto.EnumName(PortBreakoutMode_name, int32(x))
}
func (PortBreakoutMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor23, []int{0} }

// PortOperStatus reflects the current status of the port
type PortOperStatus int32

const (
	PortOperStatus_PORT_OPER_STATUS_NONE PortOperStatus = 0
	PortOperStatus_PORT_OPER_STATUS_UP   PortOperStatus = 1
	PortOperStatus_PORT_OPER_STATUS_DOWN PortOperStatus = 2
)

var PortOperStatus_name = map[int32]string{
	0: "PORT_OPER_STATUS_NONE",
	1: "PORT_OPER_STATUS_UP",
	2: "PORT_OPER_STATUS_DOWN",
}
var PortOperStatus_value = map[string]int32{
	"PORT_OPER_STATUS_NONE": 0,
	"PORT_OPER_STATUS_UP":   1,
	"PORT_OPER_STATUS_DOWN": 2,
}

func (x PortOperStatus) String() string {
	return proto.EnumName(PortOperStatus_name, int32(x))
}
func (PortOperStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor23, []int{1} }

// PortAdminState specifies if the port is enabled (admin up) or disabled (admin down)
type PortAdminState int32

const (
	PortAdminState_PORT_ADMIN_STATE_NONE PortAdminState = 0
	PortAdminState_PORT_ADMIN_STATE_DOWN PortAdminState = 1
	PortAdminState_PORT_ADMIN_STATE_UP   PortAdminState = 2
)

var PortAdminState_name = map[int32]string{
	0: "PORT_ADMIN_STATE_NONE",
	1: "PORT_ADMIN_STATE_DOWN",
	2: "PORT_ADMIN_STATE_UP",
}
var PortAdminState_value = map[string]int32{
	"PORT_ADMIN_STATE_NONE": 0,
	"PORT_ADMIN_STATE_DOWN": 1,
	"PORT_ADMIN_STATE_UP":   2,
}

func (x PortAdminState) String() string {
	return proto.EnumName(PortAdminState_name, int32(x))
}
func (PortAdminState) EnumDescriptor() ([]byte, []int) { return fileDescriptor23, []int{2} }

// PortType specifies the type of port
type PortType int32

const (
	PortType_PORT_TYPE_NONE PortType = 0
	PortType_PORT_TYPE_ETH  PortType = 1
	PortType_PORT_TYPE_MGMT PortType = 2
)

var PortType_name = map[int32]string{
	0: "PORT_TYPE_NONE",
	1: "PORT_TYPE_ETH",
	2: "PORT_TYPE_MGMT",
}
var PortType_value = map[string]int32{
	"PORT_TYPE_NONE": 0,
	"PORT_TYPE_ETH":  1,
	"PORT_TYPE_MGMT": 2,
}

func (x PortType) String() string {
	return proto.EnumName(PortType_name, int32(x))
}
func (PortType) EnumDescriptor() ([]byte, []int) { return fileDescriptor23, []int{3} }

// PortSpeed specifies the speed of the port
type PortSpeed int32

const (
	PortSpeed_PORT_SPEED_NONE PortSpeed = 0
	PortSpeed_PORT_SPEED_1G   PortSpeed = 1
	PortSpeed_PORT_SPEED_10G  PortSpeed = 2
	PortSpeed_PORT_SPEED_25G  PortSpeed = 3
	PortSpeed_PORT_SPEED_40G  PortSpeed = 4
	PortSpeed_PORT_SPEED_50G  PortSpeed = 5
	PortSpeed_PORT_SPEED_100G PortSpeed = 6
)

var PortSpeed_name = map[int32]string{
	0: "PORT_SPEED_NONE",
	1: "PORT_SPEED_1G",
	2: "PORT_SPEED_10G",
	3: "PORT_SPEED_25G",
	4: "PORT_SPEED_40G",
	5: "PORT_SPEED_50G",
	6: "PORT_SPEED_100G",
}
var PortSpeed_value = map[string]int32{
	"PORT_SPEED_NONE": 0,
	"PORT_SPEED_1G":   1,
	"PORT_SPEED_10G":  2,
	"PORT_SPEED_25G":  3,
	"PORT_SPEED_40G":  4,
	"PORT_SPEED_50G":  5,
	"PORT_SPEED_100G": 6,
}

func (x PortSpeed) String() string {
	return proto.EnumName(PortSpeed_name, int32(x))
}
func (PortSpeed) EnumDescriptor() ([]byte, []int) { return fileDescriptor23, []int{4} }

type PortFecType int32

const (
	PortFecType_PORT_FEC_TYPE_NONE PortFecType = 0
	PortFecType_PORT_FEC_TYPE_FC   PortFecType = 1
	PortFecType_PORT_FEC_TYPE_RS   PortFecType = 2
)

var PortFecType_name = map[int32]string{
	0: "PORT_FEC_TYPE_NONE",
	1: "PORT_FEC_TYPE_FC",
	2: "PORT_FEC_TYPE_RS",
}
var PortFecType_value = map[string]int32{
	"PORT_FEC_TYPE_NONE": 0,
	"PORT_FEC_TYPE_FC":   1,
	"PORT_FEC_TYPE_RS":   2,
}

func (x PortFecType) String() string {
	return proto.EnumName(PortFecType_name, int32(x))
}
func (PortFecType) EnumDescriptor() ([]byte, []int) { return fileDescriptor23, []int{5} }

type PortXcvrState int32

const (
	PortXcvrState_XCVR_STATE_REMOVED        PortXcvrState = 0
	PortXcvrState_XCVR_STATE_INSERTED       PortXcvrState = 1
	PortXcvrState_XCVR_STATE_PENDING        PortXcvrState = 2
	PortXcvrState_XCVR_STATE_SPROM_READ     PortXcvrState = 3
	PortXcvrState_XCVR_STATE_SPROM_READ_ERR PortXcvrState = 4
)

var PortXcvrState_name = map[int32]string{
	0: "XCVR_STATE_REMOVED",
	1: "XCVR_STATE_INSERTED",
	2: "XCVR_STATE_PENDING",
	3: "XCVR_STATE_SPROM_READ",
	4: "XCVR_STATE_SPROM_READ_ERR",
}
var PortXcvrState_value = map[string]int32{
	"XCVR_STATE_REMOVED":        0,
	"XCVR_STATE_INSERTED":       1,
	"XCVR_STATE_PENDING":        2,
	"XCVR_STATE_SPROM_READ":     3,
	"XCVR_STATE_SPROM_READ_ERR": 4,
}

func (x PortXcvrState) String() string {
	return proto.EnumName(PortXcvrState_name, int32(x))
}
func (PortXcvrState) EnumDescriptor() ([]byte, []int) { return fileDescriptor23, []int{6} }

type PortXcvrPid int32

const (
	PortXcvrPid_XCVR_PID_UNKNOWN       PortXcvrPid = 0
	PortXcvrPid_XCVR_PID_SFP_10G_CR    PortXcvrPid = 1
	PortXcvrPid_XCVR_PID_QSFP_100G_CR4 PortXcvrPid = 2
)

var PortXcvrPid_name = map[int32]string{
	0: "XCVR_PID_UNKNOWN",
	1: "XCVR_PID_SFP_10G_CR",
	2: "XCVR_PID_QSFP_100G_CR4",
}
var PortXcvrPid_value = map[string]int32{
	"XCVR_PID_UNKNOWN":       0,
	"XCVR_PID_SFP_10G_CR":    1,
	"XCVR_PID_QSFP_100G_CR4": 2,
}

func (x PortXcvrPid) String() string {
	return proto.EnumName(PortXcvrPid_name, int32(x))
}
func (PortXcvrPid) EnumDescriptor() ([]byte, []int) { return fileDescriptor23, []int{7} }

type PortPauseType int32

const (
	PortPauseType_PORT_PAUSE_TYPE_NONE PortPauseType = 0
	PortPauseType_PORT_PAUSE_TYPE_LINK PortPauseType = 1
	PortPauseType_PORT_PAUSE_TYPE_PFC  PortPauseType = 2
)

var PortPauseType_name = map[int32]string{
	0: "PORT_PAUSE_TYPE_NONE",
	1: "PORT_PAUSE_TYPE_LINK",
	2: "PORT_PAUSE_TYPE_PFC",
}
var PortPauseType_value = map[string]int32{
	"PORT_PAUSE_TYPE_NONE": 0,
	"PORT_PAUSE_TYPE_LINK": 1,
	"PORT_PAUSE_TYPE_PFC":  2,
}

func (x PortPauseType) String() string {
	return proto.EnumName(PortPauseType_name, int32(x))
}
func (PortPauseType) EnumDescriptor() ([]byte, []int) { return fileDescriptor23, []int{8} }

// ------------------------------------------------------------------------------
// MacStats consists of MacStatsType and count
// ------------------------------------------------------------------------------
type MacStatsType int32

const (
	MacStatsType_FRAMES_RX_OK            MacStatsType = 0
	MacStatsType_FRAMES_RX_ALL           MacStatsType = 1
	MacStatsType_FRAMES_RX_BAD_FCS       MacStatsType = 2
	MacStatsType_FRAMES_RX_BAD_ALL       MacStatsType = 3
	MacStatsType_OCTETS_RX_OK            MacStatsType = 4
	MacStatsType_OCTETS_RX_ALL           MacStatsType = 5
	MacStatsType_FRAMES_RX_UNICAST       MacStatsType = 6
	MacStatsType_FRAMES_RX_MULTICAST     MacStatsType = 7
	MacStatsType_FRAMES_RX_BROADCAST     MacStatsType = 8
	MacStatsType_FRAMES_RX_PAUSE         MacStatsType = 9
	MacStatsType_FRAMES_RX_BAD_LENGTH    MacStatsType = 10
	MacStatsType_FRAMES_RX_UNDERSIZED    MacStatsType = 11
	MacStatsType_FRAMES_RX_OVERSIZED     MacStatsType = 12
	MacStatsType_FRAMES_RX_FRAGMENTS     MacStatsType = 13
	MacStatsType_FRAMES_RX_JABBER        MacStatsType = 14
	MacStatsType_FRAMES_RX_PRIPAUSE      MacStatsType = 15
	MacStatsType_FRAMES_RX_STOMPED_CRC   MacStatsType = 16
	MacStatsType_FRAMES_RX_TOO_LONG      MacStatsType = 17
	MacStatsType_FRAMES_RX_VLAN_GOOD     MacStatsType = 18
	MacStatsType_FRAMES_RX_DROPPED       MacStatsType = 19
	MacStatsType_FRAMES_RX_LESS_THAN_64B MacStatsType = 20
	MacStatsType_FRAMES_RX_64B           MacStatsType = 21
	MacStatsType_FRAMES_RX_65B_127B      MacStatsType = 22
	MacStatsType_FRAMES_RX_128B_255B     MacStatsType = 23
	MacStatsType_FRAMES_RX_256B_511B     MacStatsType = 24
	MacStatsType_FRAMES_RX_512B_1023B    MacStatsType = 25
	MacStatsType_FRAMES_RX_1024B_1518B   MacStatsType = 26
	MacStatsType_FRAMES_RX_1519B_2047B   MacStatsType = 27
	MacStatsType_FRAMES_RX_2048B_4095B   MacStatsType = 28
	MacStatsType_FRAMES_RX_4096B_8191B   MacStatsType = 29
	MacStatsType_FRAMES_RX_8192B_9215B   MacStatsType = 30
	MacStatsType_FRAMES_RX_OTHER         MacStatsType = 31
	MacStatsType_FRAMES_TX_OK            MacStatsType = 32
	MacStatsType_FRAMES_TX_ALL           MacStatsType = 33
	MacStatsType_FRAMES_TX_BAD           MacStatsType = 34
	MacStatsType_OCTETS_TX_OK            MacStatsType = 35
	MacStatsType_OCTETS_TX_TOTAL         MacStatsType = 36
	MacStatsType_FRAMES_TX_UNICAST       MacStatsType = 37
	MacStatsType_FRAMES_TX_MULTICAST     MacStatsType = 38
	MacStatsType_FRAMES_TX_BROADCAST     MacStatsType = 39
	MacStatsType_FRAMES_TX_PAUSE         MacStatsType = 40
	MacStatsType_FRAMES_TX_PRIPAUSE      MacStatsType = 41
	MacStatsType_FRAMES_TX_VLAN          MacStatsType = 42
	MacStatsType_FRAMES_TX_LESS_THAN_64B MacStatsType = 43
	MacStatsType_FRAMES_TX_64B           MacStatsType = 44
	MacStatsType_FRAMES_TX_65B_127B      MacStatsType = 45
	MacStatsType_FRAMES_TX_128B_255B     MacStatsType = 46
	MacStatsType_FRAMES_TX_256B_511B     MacStatsType = 47
	MacStatsType_FRAMES_TX_512B_1023B    MacStatsType = 48
	MacStatsType_FRAMES_TX_1024B_1518B   MacStatsType = 49
	MacStatsType_FRAMES_TX_1519B_2047B   MacStatsType = 50
	MacStatsType_FRAMES_TX_2048B_4095B   MacStatsType = 51
	MacStatsType_FRAMES_TX_4096B_8191B   MacStatsType = 52
	MacStatsType_FRAMES_TX_8192B_9215B   MacStatsType = 53
	MacStatsType_FRAMES_TX_OTHER         MacStatsType = 54
	MacStatsType_FRAMES_TX_PRI_0         MacStatsType = 55
	MacStatsType_FRAMES_TX_PRI_1         MacStatsType = 56
	MacStatsType_FRAMES_TX_PRI_2         MacStatsType = 57
	MacStatsType_FRAMES_TX_PRI_3         MacStatsType = 58
	MacStatsType_FRAMES_TX_PRI_4         MacStatsType = 59
	MacStatsType_FRAMES_TX_PRI_5         MacStatsType = 60
	MacStatsType_FRAMES_TX_PRI_6         MacStatsType = 61
	MacStatsType_FRAMES_TX_PRI_7         MacStatsType = 62
	MacStatsType_FRAMES_RX_PRI_0         MacStatsType = 63
	MacStatsType_FRAMES_RX_PRI_1         MacStatsType = 64
	MacStatsType_FRAMES_RX_PRI_2         MacStatsType = 65
	MacStatsType_FRAMES_RX_PRI_3         MacStatsType = 66
	MacStatsType_FRAMES_RX_PRI_4         MacStatsType = 67
	MacStatsType_FRAMES_RX_PRI_5         MacStatsType = 68
	MacStatsType_FRAMES_RX_PRI_6         MacStatsType = 69
	MacStatsType_FRAMES_RX_PRI_7         MacStatsType = 70
	MacStatsType_TX_PRIPAUSE_0_1US_COUNT MacStatsType = 71
	MacStatsType_TX_PRIPAUSE_1_1US_COUNT MacStatsType = 72
	MacStatsType_TX_PRIPAUSE_2_1US_COUNT MacStatsType = 73
	MacStatsType_TX_PRIPAUSE_3_1US_COUNT MacStatsType = 74
	MacStatsType_TX_PRIPAUSE_4_1US_COUNT MacStatsType = 75
	MacStatsType_TX_PRIPAUSE_5_1US_COUNT MacStatsType = 76
	MacStatsType_TX_PRIPAUSE_6_1US_COUNT MacStatsType = 77
	MacStatsType_TX_PRIPAUSE_7_1US_COUNT MacStatsType = 78
	MacStatsType_RX_PRIPAUSE_0_1US_COUNT MacStatsType = 79
	MacStatsType_RX_PRIPAUSE_1_1US_COUNT MacStatsType = 80
	MacStatsType_RX_PRIPAUSE_2_1US_COUNT MacStatsType = 81
	MacStatsType_RX_PRIPAUSE_3_1US_COUNT MacStatsType = 82
	MacStatsType_RX_PRIPAUSE_4_1US_COUNT MacStatsType = 83
	MacStatsType_RX_PRIPAUSE_5_1US_COUNT MacStatsType = 84
	MacStatsType_RX_PRIPAUSE_6_1US_COUNT MacStatsType = 85
	MacStatsType_RX_PRIPAUSE_7_1US_COUNT MacStatsType = 86
	MacStatsType_RX_PAUSE_1US_COUNT      MacStatsType = 87
	MacStatsType_FRAMES_TX_TRUNCATED     MacStatsType = 88
)

var MacStatsType_name = map[int32]string{
	0:  "FRAMES_RX_OK",
	1:  "FRAMES_RX_ALL",
	2:  "FRAMES_RX_BAD_FCS",
	3:  "FRAMES_RX_BAD_ALL",
	4:  "OCTETS_RX_OK",
	5:  "OCTETS_RX_ALL",
	6:  "FRAMES_RX_UNICAST",
	7:  "FRAMES_RX_MULTICAST",
	8:  "FRAMES_RX_BROADCAST",
	9:  "FRAMES_RX_PAUSE",
	10: "FRAMES_RX_BAD_LENGTH",
	11: "FRAMES_RX_UNDERSIZED",
	12: "FRAMES_RX_OVERSIZED",
	13: "FRAMES_RX_FRAGMENTS",
	14: "FRAMES_RX_JABBER",
	15: "FRAMES_RX_PRIPAUSE",
	16: "FRAMES_RX_STOMPED_CRC",
	17: "FRAMES_RX_TOO_LONG",
	18: "FRAMES_RX_VLAN_GOOD",
	19: "FRAMES_RX_DROPPED",
	20: "FRAMES_RX_LESS_THAN_64B",
	21: "FRAMES_RX_64B",
	22: "FRAMES_RX_65B_127B",
	23: "FRAMES_RX_128B_255B",
	24: "FRAMES_RX_256B_511B",
	25: "FRAMES_RX_512B_1023B",
	26: "FRAMES_RX_1024B_1518B",
	27: "FRAMES_RX_1519B_2047B",
	28: "FRAMES_RX_2048B_4095B",
	29: "FRAMES_RX_4096B_8191B",
	30: "FRAMES_RX_8192B_9215B",
	31: "FRAMES_RX_OTHER",
	32: "FRAMES_TX_OK",
	33: "FRAMES_TX_ALL",
	34: "FRAMES_TX_BAD",
	35: "OCTETS_TX_OK",
	36: "OCTETS_TX_TOTAL",
	37: "FRAMES_TX_UNICAST",
	38: "FRAMES_TX_MULTICAST",
	39: "FRAMES_TX_BROADCAST",
	40: "FRAMES_TX_PAUSE",
	41: "FRAMES_TX_PRIPAUSE",
	42: "FRAMES_TX_VLAN",
	43: "FRAMES_TX_LESS_THAN_64B",
	44: "FRAMES_TX_64B",
	45: "FRAMES_TX_65B_127B",
	46: "FRAMES_TX_128B_255B",
	47: "FRAMES_TX_256B_511B",
	48: "FRAMES_TX_512B_1023B",
	49: "FRAMES_TX_1024B_1518B",
	50: "FRAMES_TX_1519B_2047B",
	51: "FRAMES_TX_2048B_4095B",
	52: "FRAMES_TX_4096B_8191B",
	53: "FRAMES_TX_8192B_9215B",
	54: "FRAMES_TX_OTHER",
	55: "FRAMES_TX_PRI_0",
	56: "FRAMES_TX_PRI_1",
	57: "FRAMES_TX_PRI_2",
	58: "FRAMES_TX_PRI_3",
	59: "FRAMES_TX_PRI_4",
	60: "FRAMES_TX_PRI_5",
	61: "FRAMES_TX_PRI_6",
	62: "FRAMES_TX_PRI_7",
	63: "FRAMES_RX_PRI_0",
	64: "FRAMES_RX_PRI_1",
	65: "FRAMES_RX_PRI_2",
	66: "FRAMES_RX_PRI_3",
	67: "FRAMES_RX_PRI_4",
	68: "FRAMES_RX_PRI_5",
	69: "FRAMES_RX_PRI_6",
	70: "FRAMES_RX_PRI_7",
	71: "TX_PRIPAUSE_0_1US_COUNT",
	72: "TX_PRIPAUSE_1_1US_COUNT",
	73: "TX_PRIPAUSE_2_1US_COUNT",
	74: "TX_PRIPAUSE_3_1US_COUNT",
	75: "TX_PRIPAUSE_4_1US_COUNT",
	76: "TX_PRIPAUSE_5_1US_COUNT",
	77: "TX_PRIPAUSE_6_1US_COUNT",
	78: "TX_PRIPAUSE_7_1US_COUNT",
	79: "RX_PRIPAUSE_0_1US_COUNT",
	80: "RX_PRIPAUSE_1_1US_COUNT",
	81: "RX_PRIPAUSE_2_1US_COUNT",
	82: "RX_PRIPAUSE_3_1US_COUNT",
	83: "RX_PRIPAUSE_4_1US_COUNT",
	84: "RX_PRIPAUSE_5_1US_COUNT",
	85: "RX_PRIPAUSE_6_1US_COUNT",
	86: "RX_PRIPAUSE_7_1US_COUNT",
	87: "RX_PAUSE_1US_COUNT",
	88: "FRAMES_TX_TRUNCATED",
}
var MacStatsType_value = map[string]int32{
	"FRAMES_RX_OK":            0,
	"FRAMES_RX_ALL":           1,
	"FRAMES_RX_BAD_FCS":       2,
	"FRAMES_RX_BAD_ALL":       3,
	"OCTETS_RX_OK":            4,
	"OCTETS_RX_ALL":           5,
	"FRAMES_RX_UNICAST":       6,
	"FRAMES_RX_MULTICAST":     7,
	"FRAMES_RX_BROADCAST":     8,
	"FRAMES_RX_PAUSE":         9,
	"FRAMES_RX_BAD_LENGTH":    10,
	"FRAMES_RX_UNDERSIZED":    11,
	"FRAMES_RX_OVERSIZED":     12,
	"FRAMES_RX_FRAGMENTS":     13,
	"FRAMES_RX_JABBER":        14,
	"FRAMES_RX_PRIPAUSE":      15,
	"FRAMES_RX_STOMPED_CRC":   16,
	"FRAMES_RX_TOO_LONG":      17,
	"FRAMES_RX_VLAN_GOOD":     18,
	"FRAMES_RX_DROPPED":       19,
	"FRAMES_RX_LESS_THAN_64B": 20,
	"FRAMES_RX_64B":           21,
	"FRAMES_RX_65B_127B":      22,
	"FRAMES_RX_128B_255B":     23,
	"FRAMES_RX_256B_511B":     24,
	"FRAMES_RX_512B_1023B":    25,
	"FRAMES_RX_1024B_1518B":   26,
	"FRAMES_RX_1519B_2047B":   27,
	"FRAMES_RX_2048B_4095B":   28,
	"FRAMES_RX_4096B_8191B":   29,
	"FRAMES_RX_8192B_9215B":   30,
	"FRAMES_RX_OTHER":         31,
	"FRAMES_TX_OK":            32,
	"FRAMES_TX_ALL":           33,
	"FRAMES_TX_BAD":           34,
	"OCTETS_TX_OK":            35,
	"OCTETS_TX_TOTAL":         36,
	"FRAMES_TX_UNICAST":       37,
	"FRAMES_TX_MULTICAST":     38,
	"FRAMES_TX_BROADCAST":     39,
	"FRAMES_TX_PAUSE":         40,
	"FRAMES_TX_PRIPAUSE":      41,
	"FRAMES_TX_VLAN":          42,
	"FRAMES_TX_LESS_THAN_64B": 43,
	"FRAMES_TX_64B":           44,
	"FRAMES_TX_65B_127B":      45,
	"FRAMES_TX_128B_255B":     46,
	"FRAMES_TX_256B_511B":     47,
	"FRAMES_TX_512B_1023B":    48,
	"FRAMES_TX_1024B_1518B":   49,
	"FRAMES_TX_1519B_2047B":   50,
	"FRAMES_TX_2048B_4095B":   51,
	"FRAMES_TX_4096B_8191B":   52,
	"FRAMES_TX_8192B_9215B":   53,
	"FRAMES_TX_OTHER":         54,
	"FRAMES_TX_PRI_0":         55,
	"FRAMES_TX_PRI_1":         56,
	"FRAMES_TX_PRI_2":         57,
	"FRAMES_TX_PRI_3":         58,
	"FRAMES_TX_PRI_4":         59,
	"FRAMES_TX_PRI_5":         60,
	"FRAMES_TX_PRI_6":         61,
	"FRAMES_TX_PRI_7":         62,
	"FRAMES_RX_PRI_0":         63,
	"FRAMES_RX_PRI_1":         64,
	"FRAMES_RX_PRI_2":         65,
	"FRAMES_RX_PRI_3":         66,
	"FRAMES_RX_PRI_4":         67,
	"FRAMES_RX_PRI_5":         68,
	"FRAMES_RX_PRI_6":         69,
	"FRAMES_RX_PRI_7":         70,
	"TX_PRIPAUSE_0_1US_COUNT": 71,
	"TX_PRIPAUSE_1_1US_COUNT": 72,
	"TX_PRIPAUSE_2_1US_COUNT": 73,
	"TX_PRIPAUSE_3_1US_COUNT": 74,
	"TX_PRIPAUSE_4_1US_COUNT": 75,
	"TX_PRIPAUSE_5_1US_COUNT": 76,
	"TX_PRIPAUSE_6_1US_COUNT": 77,
	"TX_PRIPAUSE_7_1US_COUNT": 78,
	"RX_PRIPAUSE_0_1US_COUNT": 79,
	"RX_PRIPAUSE_1_1US_COUNT": 80,
	"RX_PRIPAUSE_2_1US_COUNT": 81,
	"RX_PRIPAUSE_3_1US_COUNT": 82,
	"RX_PRIPAUSE_4_1US_COUNT": 83,
	"RX_PRIPAUSE_5_1US_COUNT": 84,
	"RX_PRIPAUSE_6_1US_COUNT": 85,
	"RX_PRIPAUSE_7_1US_COUNT": 86,
	"RX_PAUSE_1US_COUNT":      87,
	"FRAMES_TX_TRUNCATED":     88,
}

func (x MacStatsType) String() string {
	return proto.EnumName(MacStatsType_name, int32(x))
}
func (MacStatsType) EnumDescriptor() ([]byte, []int) { return fileDescriptor23, []int{9} }

type PortXcvrStatus struct {
	Port  int32         `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
	State PortXcvrState `protobuf:"varint,2,opt,name=state,enum=port.PortXcvrState" json:"state,omitempty"`
	Pid   PortXcvrPid   `protobuf:"varint,3,opt,name=pid,enum=port.PortXcvrPid" json:"pid,omitempty"`
}

func (m *PortXcvrStatus) Reset()                    { *m = PortXcvrStatus{} }
func (m *PortXcvrStatus) String() string            { return proto.CompactTextString(m) }
func (*PortXcvrStatus) ProtoMessage()               {}
func (*PortXcvrStatus) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{0} }

func (m *PortXcvrStatus) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PortXcvrStatus) GetState() PortXcvrState {
	if m != nil {
		return m.State
	}
	return PortXcvrState_XCVR_STATE_REMOVED
}

func (m *PortXcvrStatus) GetPid() PortXcvrPid {
	if m != nil {
		return m.Pid
	}
	return PortXcvrPid_XCVR_PID_UNKNOWN
}

// PortSpec message is used to do add/mod properties of a port
type PortSpec struct {
	Meta *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	// key_or_handle is the port number
	KeyOrHandle   *PortKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	PortType      PortType       `protobuf:"varint,3,opt,name=port_type,json=portType,enum=port.PortType" json:"port_type,omitempty"`
	AdminState    PortAdminState `protobuf:"varint,4,opt,name=admin_state,json=adminState,enum=port.PortAdminState" json:"admin_state,omitempty"`
	PortSpeed     PortSpeed      `protobuf:"varint,5,opt,name=port_speed,json=portSpeed,enum=port.PortSpeed" json:"port_speed,omitempty"`
	MacId         uint32         `protobuf:"varint,6,opt,name=mac_id,json=macId" json:"mac_id,omitempty"`
	MacCh         uint32         `protobuf:"varint,7,opt,name=mac_ch,json=macCh" json:"mac_ch,omitempty"`
	NumLanes      uint32         `protobuf:"varint,8,opt,name=num_lanes,json=numLanes" json:"num_lanes,omitempty"`
	FecType       PortFecType    `protobuf:"varint,9,opt,name=fec_type,json=fecType,enum=port.PortFecType" json:"fec_type,omitempty"`
	AutoNegEnable bool           `protobuf:"varint,10,opt,name=auto_neg_enable,json=autoNegEnable" json:"auto_neg_enable,omitempty"`
	DebounceTime  uint32         `protobuf:"varint,11,opt,name=debounce_time,json=debounceTime" json:"debounce_time,omitempty"`
	Mtu           uint32         `protobuf:"varint,12,opt,name=mtu" json:"mtu,omitempty"`
	Pause         PortPauseType  `protobuf:"varint,13,opt,name=pause,enum=port.PortPauseType" json:"pause,omitempty"`
	MacStatsReset bool           `protobuf:"varint,14,opt,name=mac_stats_reset,json=macStatsReset" json:"mac_stats_reset,omitempty"`
}

func (m *PortSpec) GetDelphiMessage() proto.Message {
	return m
}

func (m *PortSpec) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *PortSpec) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *PortSpec) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *PortSpec) GetDelphiKind() string {
	return "PortSpec"
}

func (m *PortSpec) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *PortSpec) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*PortSpec)
	return obj
}

func PortSpecMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("PortSpec", mode)
}

func PortSpecMountKey(client clientApi.Client, key *PortKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("PortSpec", key.String(), mode)
}

func GetPortSpec(client clientApi.Client, key *PortKeyHandle) *PortSpec {
	o := client.GetObject("PortSpec", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*PortSpec)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func PortSpecFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg PortSpec
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func PortSpecWatch(client clientApi.Client, reactor PortSpecReactor) {
	client.WatchKind("PortSpec", reactor)
}
func PortSpecList(client clientApi.Client) []*PortSpec {
	bobjs := client.List("PortSpec")
	objs := make([]*PortSpec, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*PortSpec)
		objs = append(objs, obj)
	}
	return objs
}
func (m *PortSpec) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(PortSpecReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnPortSpecCreate(m)
			} else {
				oldObj, ok := old.(*PortSpec)
				if ok == false {
					panic("Not an PortSpec object")
				}
				rctr.OnPortSpecUpdate(oldObj, m)
			}
		} else {
			rctr.OnPortSpecDelete(m)
		}
	}
}

type PortSpecReactor interface {
	OnPortSpecCreate(obj *PortSpec)
	OnPortSpecUpdate(old *PortSpec, obj *PortSpec)
	OnPortSpecDelete(obj *PortSpec)
}

func (m *PortSpec) Reset()                    { *m = PortSpec{} }
func (m *PortSpec) String() string            { return proto.CompactTextString(m) }
func (*PortSpec) ProtoMessage()               {}
func (*PortSpec) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{1} }

func (m *PortSpec) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PortSpec) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *PortSpec) GetPortType() PortType {
	if m != nil {
		return m.PortType
	}
	return PortType_PORT_TYPE_NONE
}

func (m *PortSpec) GetAdminState() PortAdminState {
	if m != nil {
		return m.AdminState
	}
	return PortAdminState_PORT_ADMIN_STATE_NONE
}

func (m *PortSpec) GetPortSpeed() PortSpeed {
	if m != nil {
		return m.PortSpeed
	}
	return PortSpeed_PORT_SPEED_NONE
}

func (m *PortSpec) GetMacId() uint32 {
	if m != nil {
		return m.MacId
	}
	return 0
}

func (m *PortSpec) GetMacCh() uint32 {
	if m != nil {
		return m.MacCh
	}
	return 0
}

func (m *PortSpec) GetNumLanes() uint32 {
	if m != nil {
		return m.NumLanes
	}
	return 0
}

func (m *PortSpec) GetFecType() PortFecType {
	if m != nil {
		return m.FecType
	}
	return PortFecType_PORT_FEC_TYPE_NONE
}

func (m *PortSpec) GetAutoNegEnable() bool {
	if m != nil {
		return m.AutoNegEnable
	}
	return false
}

func (m *PortSpec) GetDebounceTime() uint32 {
	if m != nil {
		return m.DebounceTime
	}
	return 0
}

func (m *PortSpec) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *PortSpec) GetPause() PortPauseType {
	if m != nil {
		return m.Pause
	}
	return PortPauseType_PORT_PAUSE_TYPE_NONE
}

func (m *PortSpec) GetMacStatsReset() bool {
	if m != nil {
		return m.MacStatsReset
	}
	return false
}

type PortStatus struct {
	Meta        *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle *PortKeyHandle     `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	OperStatus  PortOperStatus     `protobuf:"varint,3,opt,name=oper_status,json=operStatus,enum=port.PortOperStatus" json:"oper_status,omitempty"`
	XcvrStatus  *PortXcvrStatus    `protobuf:"bytes,4,opt,name=xcvr_status,json=xcvrStatus" json:"xcvr_status,omitempty"`
	PortSpeed   PortSpeed          `protobuf:"varint,5,opt,name=port_speed,json=portSpeed,enum=port.PortSpeed" json:"port_speed,omitempty"`
}

func (m *PortStatus) GetDelphiMessage() proto.Message {
	return m
}

func (m *PortStatus) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *PortStatus) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *PortStatus) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *PortStatus) GetDelphiKind() string {
	return "PortStatus"
}

func (m *PortStatus) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *PortStatus) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*PortStatus)
	return obj
}

func PortStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("PortStatus", mode)
}

func PortStatusMountKey(client clientApi.Client, key *PortKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("PortStatus", key.String(), mode)
}

func GetPortStatus(client clientApi.Client, key *PortKeyHandle) *PortStatus {
	o := client.GetObject("PortStatus", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*PortStatus)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func PortStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg PortStatus
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func PortStatusWatch(client clientApi.Client, reactor PortStatusReactor) {
	client.WatchKind("PortStatus", reactor)
}
func PortStatusList(client clientApi.Client) []*PortStatus {
	bobjs := client.List("PortStatus")
	objs := make([]*PortStatus, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*PortStatus)
		objs = append(objs, obj)
	}
	return objs
}
func (m *PortStatus) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(PortStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnPortStatusCreate(m)
			} else {
				oldObj, ok := old.(*PortStatus)
				if ok == false {
					panic("Not an PortStatus object")
				}
				rctr.OnPortStatusUpdate(oldObj, m)
			}
		} else {
			rctr.OnPortStatusDelete(m)
		}
	}
}

type PortStatusReactor interface {
	OnPortStatusCreate(obj *PortStatus)
	OnPortStatusUpdate(old *PortStatus, obj *PortStatus)
	OnPortStatusDelete(obj *PortStatus)
}

func (m *PortStatus) Reset()                    { *m = PortStatus{} }
func (m *PortStatus) String() string            { return proto.CompactTextString(m) }
func (*PortStatus) ProtoMessage()               {}
func (*PortStatus) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{2} }

func (m *PortStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PortStatus) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *PortStatus) GetOperStatus() PortOperStatus {
	if m != nil {
		return m.OperStatus
	}
	return PortOperStatus_PORT_OPER_STATUS_NONE
}

func (m *PortStatus) GetXcvrStatus() *PortXcvrStatus {
	if m != nil {
		return m.XcvrStatus
	}
	return nil
}

func (m *PortStatus) GetPortSpeed() PortSpeed {
	if m != nil {
		return m.PortSpeed
	}
	return PortSpeed_PORT_SPEED_NONE
}

// ------------------------------------------------------------------------------
// PortRequestMsg is batched add or modify port request
// ------------------------------------------------------------------------------
type PortRequestMsg struct {
	Request []*PortSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *PortRequestMsg) Reset()                    { *m = PortRequestMsg{} }
func (m *PortRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*PortRequestMsg) ProtoMessage()               {}
func (*PortRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{3} }

func (m *PortRequestMsg) GetRequest() []*PortSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// PortResponse is response to PortSpec
type PortResponse struct {
	ApiStatus ApiStatus   `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *PortStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *PortResponse) Reset()                    { *m = PortResponse{} }
func (m *PortResponse) String() string            { return proto.CompactTextString(m) }
func (*PortResponse) ProtoMessage()               {}
func (*PortResponse) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{4} }

func (m *PortResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *PortResponse) GetStatus() *PortStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// ------------------------------------------------------------------------------
// PortResponseMsg is batched response to PortRequestMsg
// ------------------------------------------------------------------------------
type PortResponseMsg struct {
	Response []*PortResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *PortResponseMsg) Reset()                    { *m = PortResponseMsg{} }
func (m *PortResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*PortResponseMsg) ProtoMessage()               {}
func (*PortResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{5} }

func (m *PortResponseMsg) GetResponse() []*PortResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// PortDeleteRequest is used to delete a port
type PortDeleteRequest struct {
	// key_or_handle is the port number
	KeyOrHandle *PortKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *PortDeleteRequest) Reset()                    { *m = PortDeleteRequest{} }
func (m *PortDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*PortDeleteRequest) ProtoMessage()               {}
func (*PortDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{6} }

func (m *PortDeleteRequest) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ------------------------------------------------------------------------------
// PortDeleteRequestMsg is used to delete a batch of ports
// ------------------------------------------------------------------------------
type PortDeleteRequestMsg struct {
	Request []*PortDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *PortDeleteRequestMsg) Reset()                    { *m = PortDeleteRequestMsg{} }
func (m *PortDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*PortDeleteRequestMsg) ProtoMessage()               {}
func (*PortDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{7} }

func (m *PortDeleteRequestMsg) GetRequest() []*PortDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ------------------------------------------------------------------------------
// PortDeleteResponse is response to PortDeleteRequest
// ------------------------------------------------------------------------------
type PortDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *PortDeleteResponse) Reset()                    { *m = PortDeleteResponse{} }
func (m *PortDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*PortDeleteResponse) ProtoMessage()               {}
func (*PortDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{8} }

func (m *PortDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// ------------------------------------------------------------------------------
// PortDeleteResponseMsg is batched response to PortDeleteRequestMsg
// ------------------------------------------------------------------------------
type PortDeleteResponseMsg struct {
	Response []*PortDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *PortDeleteResponseMsg) Reset()                    { *m = PortDeleteResponseMsg{} }
func (m *PortDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*PortDeleteResponseMsg) ProtoMessage()               {}
func (*PortDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{9} }

func (m *PortDeleteResponseMsg) GetResponse() []*PortDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type MacStats struct {
	Type  MacStatsType `protobuf:"varint,1,opt,name=type,enum=port.MacStatsType" json:"type,omitempty"`
	Count uint64       `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *MacStats) Reset()                    { *m = MacStats{} }
func (m *MacStats) String() string            { return proto.CompactTextString(m) }
func (*MacStats) ProtoMessage()               {}
func (*MacStats) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{10} }

func (m *MacStats) GetType() MacStatsType {
	if m != nil {
		return m.Type
	}
	return MacStatsType_FRAMES_RX_OK
}

func (m *MacStats) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// PortStats captures all the statistics of given Port
type PortStats struct {
	MacStats []*MacStats `protobuf:"bytes,1,rep,name=mac_stats,json=macStats" json:"mac_stats,omitempty"`
}

func (m *PortStats) Reset()                    { *m = PortStats{} }
func (m *PortStats) String() string            { return proto.CompactTextString(m) }
func (*PortStats) ProtoMessage()               {}
func (*PortStats) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{11} }

func (m *PortStats) GetMacStats() []*MacStats {
	if m != nil {
		return m.MacStats
	}
	return nil
}

// PortGetRequest is used to get information about a port
type PortGetRequest struct {
	// key_or_handle is the port number
	KeyOrHandle *PortKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *PortGetRequest) Reset()                    { *m = PortGetRequest{} }
func (m *PortGetRequest) String() string            { return proto.CompactTextString(m) }
func (*PortGetRequest) ProtoMessage()               {}
func (*PortGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{12} }

func (m *PortGetRequest) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ------------------------------------------------------------------------------
// PortGetRequestMsg is batched GET request for ports
// ------------------------------------------------------------------------------
type PortGetRequestMsg struct {
	Request []*PortGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *PortGetRequestMsg) Reset()                    { *m = PortGetRequestMsg{} }
func (m *PortGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*PortGetRequestMsg) ProtoMessage()               {}
func (*PortGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{13} }

func (m *PortGetRequestMsg) GetRequest() []*PortGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// PortGetResponse captures all the information about a port
// only if api_status indicates success, other fields are valid
type PortGetResponse struct {
	ApiStatus ApiStatus   `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *PortSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *PortStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *PortStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *PortGetResponse) Reset()                    { *m = PortGetResponse{} }
func (m *PortGetResponse) String() string            { return proto.CompactTextString(m) }
func (*PortGetResponse) ProtoMessage()               {}
func (*PortGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{14} }

func (m *PortGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *PortGetResponse) GetSpec() *PortSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PortGetResponse) GetStatus() *PortStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PortGetResponse) GetStats() *PortStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// ------------------------------------------------------------------------------
// PortGetResponseMsg is the batched response to PortGetRequestMsg
// ------------------------------------------------------------------------------
type PortGetResponseMsg struct {
	Response []*PortGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *PortGetResponseMsg) Reset()                    { *m = PortGetResponseMsg{} }
func (m *PortGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*PortGetResponseMsg) ProtoMessage()               {}
func (*PortGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{15} }

func (m *PortGetResponseMsg) GetResponse() []*PortGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type PortInfoGetRequest struct {
	// key_or_handle is the port number
	KeyOrHandle *PortKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *PortInfoGetRequest) Reset()                    { *m = PortInfoGetRequest{} }
func (m *PortInfoGetRequest) String() string            { return proto.CompactTextString(m) }
func (*PortInfoGetRequest) ProtoMessage()               {}
func (*PortInfoGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{16} }

func (m *PortInfoGetRequest) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

type PortInfoGetRequestMsg struct {
	Request []*PortInfoGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *PortInfoGetRequestMsg) Reset()                    { *m = PortInfoGetRequestMsg{} }
func (m *PortInfoGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*PortInfoGetRequestMsg) ProtoMessage()               {}
func (*PortInfoGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{17} }

func (m *PortInfoGetRequestMsg) GetRequest() []*PortInfoGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type PortInfoSpec struct {
	// key_or_handle is the port number
	KeyOrHandle   *PortKeyHandle     `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	PortType      PortType           `protobuf:"varint,3,opt,name=port_type,json=portType,enum=port.PortType" json:"port_type,omitempty"`
	NumLanes      uint32             `protobuf:"varint,4,opt,name=num_lanes,json=numLanes" json:"num_lanes,omitempty"`
	BreakoutModes []PortBreakoutMode `protobuf:"varint,5,rep,packed,name=breakout_modes,json=breakoutModes,enum=port.PortBreakoutMode" json:"breakout_modes,omitempty"`
}

func (m *PortInfoSpec) Reset()                    { *m = PortInfoSpec{} }
func (m *PortInfoSpec) String() string            { return proto.CompactTextString(m) }
func (*PortInfoSpec) ProtoMessage()               {}
func (*PortInfoSpec) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{18} }

func (m *PortInfoSpec) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *PortInfoSpec) GetPortType() PortType {
	if m != nil {
		return m.PortType
	}
	return PortType_PORT_TYPE_NONE
}

func (m *PortInfoSpec) GetNumLanes() uint32 {
	if m != nil {
		return m.NumLanes
	}
	return 0
}

func (m *PortInfoSpec) GetBreakoutModes() []PortBreakoutMode {
	if m != nil {
		return m.BreakoutModes
	}
	return nil
}

type PortInfoGetResponse struct {
	ApiStatus ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *PortInfoSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *PortInfoGetResponse) Reset()                    { *m = PortInfoGetResponse{} }
func (m *PortInfoGetResponse) String() string            { return proto.CompactTextString(m) }
func (*PortInfoGetResponse) ProtoMessage()               {}
func (*PortInfoGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{19} }

func (m *PortInfoGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *PortInfoGetResponse) GetSpec() *PortInfoSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type PortInfoGetResponseMsg struct {
	Response []*PortInfoGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *PortInfoGetResponseMsg) Reset()                    { *m = PortInfoGetResponseMsg{} }
func (m *PortInfoGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*PortInfoGetResponseMsg) ProtoMessage()               {}
func (*PortInfoGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{20} }

func (m *PortInfoGetResponseMsg) GetResponse() []*PortInfoGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// ------------------------------------------------------------------------------
// port related events
// ------------------------------------------------------------------------------
type PortEvent struct {
	KeyOrHandle *PortKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	OperStatus  PortOperStatus `protobuf:"varint,2,opt,name=oper_status,json=operStatus,enum=port.PortOperStatus" json:"oper_status,omitempty"`
	AdminStatus PortAdminState `protobuf:"varint,3,opt,name=admin_status,json=adminStatus,enum=port.PortAdminState" json:"admin_status,omitempty"`
	Msg         string         `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
}

func (m *PortEvent) Reset()                    { *m = PortEvent{} }
func (m *PortEvent) String() string            { return proto.CompactTextString(m) }
func (*PortEvent) ProtoMessage()               {}
func (*PortEvent) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{21} }

func (m *PortEvent) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *PortEvent) GetOperStatus() PortOperStatus {
	if m != nil {
		return m.OperStatus
	}
	return PortOperStatus_PORT_OPER_STATUS_NONE
}

func (m *PortEvent) GetAdminStatus() PortAdminState {
	if m != nil {
		return m.AdminStatus
	}
	return PortAdminState_PORT_ADMIN_STATE_NONE
}

func (m *PortEvent) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*PortXcvrStatus)(nil), "halproto.PortXcvrStatus")
	clientApi.RegisterFactory("PortSpec", PortSpecFactory)
	proto.RegisterType((*PortSpec)(nil), "halproto.PortSpec")
	clientApi.RegisterFactory("PortStatus", PortStatusFactory)
	proto.RegisterType((*PortStatus)(nil), "halproto.PortStatus")
	proto.RegisterType((*PortRequestMsg)(nil), "halproto.PortRequestMsg")
	proto.RegisterType((*PortResponse)(nil), "halproto.PortResponse")
	proto.RegisterType((*PortResponseMsg)(nil), "halproto.PortResponseMsg")
	proto.RegisterType((*PortDeleteRequest)(nil), "halproto.PortDeleteRequest")
	proto.RegisterType((*PortDeleteRequestMsg)(nil), "halproto.PortDeleteRequestMsg")
	proto.RegisterType((*PortDeleteResponse)(nil), "halproto.PortDeleteResponse")
	proto.RegisterType((*PortDeleteResponseMsg)(nil), "halproto.PortDeleteResponseMsg")
	proto.RegisterType((*MacStats)(nil), "halproto.MacStats")
	proto.RegisterType((*PortStats)(nil), "halproto.PortStats")
	proto.RegisterType((*PortGetRequest)(nil), "halproto.PortGetRequest")
	proto.RegisterType((*PortGetRequestMsg)(nil), "halproto.PortGetRequestMsg")
	proto.RegisterType((*PortGetResponse)(nil), "halproto.PortGetResponse")
	proto.RegisterType((*PortGetResponseMsg)(nil), "halproto.PortGetResponseMsg")
	proto.RegisterType((*PortInfoGetRequest)(nil), "halproto.PortInfoGetRequest")
	proto.RegisterType((*PortInfoGetRequestMsg)(nil), "halproto.PortInfoGetRequestMsg")
	proto.RegisterType((*PortInfoSpec)(nil), "halproto.PortInfoSpec")
	proto.RegisterType((*PortInfoGetResponse)(nil), "halproto.PortInfoGetResponse")
	proto.RegisterType((*PortInfoGetResponseMsg)(nil), "halproto.PortInfoGetResponseMsg")
	proto.RegisterType((*PortEvent)(nil), "halproto.PortEvent")
	proto.RegisterEnum("halproto.PortBreakoutMode", PortBreakoutMode_name, PortBreakoutMode_value)
	proto.RegisterEnum("halproto.PortOperStatus", PortOperStatus_name, PortOperStatus_value)
	proto.RegisterEnum("halproto.PortAdminState", PortAdminState_name, PortAdminState_value)
	proto.RegisterEnum("halproto.PortType", PortType_name, PortType_value)
	proto.RegisterEnum("halproto.PortSpeed", PortSpeed_name, PortSpeed_value)
	proto.RegisterEnum("halproto.PortFecType", PortFecType_name, PortFecType_value)
	proto.RegisterEnum("halproto.PortXcvrState", PortXcvrState_name, PortXcvrState_value)
	proto.RegisterEnum("halproto.PortXcvrPid", PortXcvrPid_name, PortXcvrPid_value)
	proto.RegisterEnum("halproto.PortPauseType", PortPauseType_name, PortPauseType_value)
	proto.RegisterEnum("halproto.MacStatsType", MacStatsType_name, MacStatsType_value)
}

func init() { proto.RegisterFile("port.proto", fileDescriptor23) }

var fileDescriptor23 = []byte{
	// 2198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xcd, 0x73, 0xdb, 0xb8,
	0x15, 0x0f, 0x65, 0xd9, 0x91, 0xe1, 0x2f, 0x18, 0xb1, 0x13, 0xc5, 0xc9, 0x26, 0xae, 0xd2, 0x4d,
	0xbd, 0xca, 0xd6, 0x15, 0x69, 0xc9, 0x1f, 0xd9, 0xee, 0xb6, 0xa4, 0x44, 0xcb, 0x8a, 0x25, 0x51,
	0x81, 0xa8, 0x24, 0x4d, 0x77, 0x06, 0x23, 0x4b, 0x48, 0xac, 0xda, 0xfa, 0xa8, 0x28, 0x65, 0xe2,
	0xdb, 0x5e, 0x7a, 0xe8, 0xb5, 0x87, 0xb6, 0xb7, 0x5e, 0xf6, 0xd0, 0x63, 0xff, 0x92, 0x9e, 0xda,
	0x6b, 0xfe, 0x88, 0xcc, 0xf4, 0xde, 0x01, 0x40, 0x89, 0x00, 0x69, 0xef, 0xb6, 0x3b, 0x9e, 0x3d,
	0x99, 0xfa, 0xfd, 0xde, 0x7b, 0x78, 0x78, 0xef, 0x07, 0x10, 0x84, 0x01, 0x18, 0xf4, 0x87, 0xa3,
	0xed, 0xc1, 0xb0, 0x3f, 0xea, 0xa3, 0x38, 0x7b, 0xde, 0x58, 0x18, 0x5d, 0x0c, 0xa8, 0x27, 0xa0,
	0x8d, 0xc4, 0xd9, 0xa9, 0xff, 0xb4, 0xd8, 0xa6, 0xe7, 0x83, 0xd3, 0x8e, 0xf8, 0x95, 0x1a, 0x81,
	0xe5, 0x5a, 0x7f, 0x38, 0x7a, 0xd5, 0x7a, 0x37, 0xac, 0x8f, 0x9a, 0xa3, 0xb1, 0x87, 0x10, 0xe0,
	0xee, 0x49, 0x6d, 0x53, 0xdb, 0x9a, 0xc5, 0xfc, 0x19, 0x7d, 0x06, 0x66, 0xbd, 0x51, 0x73, 0x44,
	0x93, 0xb1, 0x4d, 0x6d, 0x6b, 0xd9, 0xb8, 0xb5, 0xcd, 0x07, 0x93, 0x1d, 0x29, 0x16, 0x16, 0xe8,
	0x11, 0x98, 0x19, 0x74, 0xda, 0xc9, 0x19, 0x6e, 0xb8, 0xaa, 0x1a, 0xd6, 0x3a, 0x6d, 0xcc, 0xd8,
	0xd4, 0x9f, 0x67, 0x41, 0x82, 0x81, 0xf5, 0x01, 0x6d, 0xa1, 0xc7, 0x20, 0x5e, 0xa1, 0xa3, 0x26,
	0x1f, 0x70, 0xc1, 0x40, 0xdb, 0x7e, 0x7e, 0xce, 0xc9, 0xef, 0x68, 0x6b, 0xc4, 0x18, 0xcc, 0x79,
	0x64, 0x83, 0xa5, 0x33, 0x7a, 0x41, 0xfa, 0x43, 0x72, 0xda, 0xec, 0xb5, 0xcf, 0x45, 0x32, 0x0b,
	0xc6, 0xea, 0xf6, 0xd9, 0x29, 0x1f, 0xe1, 0x98, 0x5e, 0x1c, 0x71, 0xc2, 0x5a, 0xfe, 0xf8, 0xe1,
	0x21, 0x78, 0x47, 0x7b, 0x9d, 0x16, 0x7d, 0x7a, 0x46, 0x2f, 0xf0, 0xc2, 0x19, 0xbd, 0x70, 0x86,
	0x82, 0x44, 0x26, 0x98, 0x67, 0x49, 0x11, 0x56, 0x1d, 0x3f, 0xcd, 0xe5, 0x20, 0x4d, 0xf7, 0x62,
	0x40, 0xad, 0xb5, 0x8f, 0x1f, 0x1e, 0x42, 0xdf, 0xbf, 0xd3, 0xed, 0x8e, 0x47, 0xcd, 0x93, 0x73,
	0x8a, 0x13, 0x03, 0x9f, 0x47, 0x39, 0xb0, 0xd0, 0x6c, 0x77, 0x3b, 0x3d, 0x22, 0x8a, 0x12, 0xe7,
	0x41, 0xd6, 0x82, 0x20, 0x26, 0x23, 0x45, 0x55, 0x40, 0x73, 0xfa, 0x8c, 0xb6, 0x45, 0x93, 0x88,
	0x37, 0xa0, 0xb4, 0x9d, 0x9c, 0xe5, 0x5e, 0x2b, 0x81, 0x57, 0x9d, 0xc1, 0x98, 0x27, 0xc7, 0x1f,
	0xd1, 0x13, 0x30, 0xd7, 0x6d, 0xb6, 0x48, 0xa7, 0x9d, 0x9c, 0xdb, 0xd4, 0xb6, 0x96, 0xae, 0x48,
	0x6b, 0xb6, 0xdb, 0x6c, 0x95, 0xa6, 0xc6, 0xad, 0xd3, 0xe4, 0xcd, 0xef, 0x31, 0xce, 0x9f, 0x22,
	0x1d, 0xcc, 0xf7, 0xc6, 0x5d, 0x72, 0xde, 0xec, 0x51, 0x2f, 0x99, 0xf8, 0x0e, 0xfb, 0x44, 0x6f,
	0xdc, 0x2d, 0x33, 0x2b, 0xf4, 0x39, 0x48, 0xbc, 0xa1, 0x2d, 0x51, 0xb5, 0xf9, 0x70, 0x73, 0x0f,
	0x69, 0x8b, 0x15, 0x06, 0xdf, 0x7c, 0x23, 0x1e, 0xd0, 0x63, 0xb0, 0xd2, 0x1c, 0x8f, 0xfa, 0xa4,
	0x47, 0xdf, 0x12, 0xda, 0x63, 0xa1, 0x92, 0x60, 0x53, 0xdb, 0x4a, 0xe0, 0x25, 0x06, 0x57, 0xe9,
	0x5b, 0x9b, 0x83, 0xe8, 0x11, 0x58, 0x6a, 0xd3, 0x93, 0xfe, 0xb8, 0xd7, 0xa2, 0x64, 0xd4, 0xe9,
	0xd2, 0xe4, 0x02, 0x4b, 0x06, 0x2f, 0x4e, 0x40, 0xb7, 0xd3, 0xa5, 0x08, 0x82, 0x99, 0xee, 0x68,
	0x9c, 0x5c, 0xe4, 0x14, 0x7b, 0x64, 0x7a, 0x1c, 0x34, 0xc7, 0x1e, 0x4d, 0x2e, 0x85, 0xf5, 0x58,
	0x63, 0x30, 0xcf, 0x45, 0x58, 0xb0, 0x4c, 0x58, 0x5d, 0x58, 0xa7, 0x3c, 0x32, 0xa4, 0x1e, 0x1d,
	0x25, 0x97, 0x45, 0x26, 0xdd, 0x66, 0x8b, 0xf5, 0xc5, 0xc3, 0x0c, 0x7c, 0x1a, 0xff, 0xe6, 0x2f,
	0x29, 0x2d, 0xf5, 0xb7, 0x18, 0x00, 0xbc, 0x17, 0x62, 0x2d, 0xfc, 0xc8, 0xd2, 0xcc, 0x81, 0x85,
	0xfe, 0x80, 0x0e, 0x79, 0xb2, 0x63, 0xcf, 0x17, 0xa7, 0xa4, 0x2b, 0x67, 0x40, 0xfd, 0x55, 0x8a,
	0x41, 0x7f, 0xfa, 0xcc, 0xdc, 0xde, 0xb7, 0xde, 0x4d, 0xdd, 0xe2, 0x7c, 0xec, 0xb5, 0xe8, 0x1a,
	0x65, 0x6e, 0xef, 0x83, 0x85, 0xfe, 0x7f, 0xca, 0xd1, 0xaf, 0xd0, 0x53, 0xb1, 0x61, 0x60, 0xfa,
	0xfb, 0x31, 0xf5, 0x46, 0x15, 0xef, 0x2d, 0xda, 0x02, 0x37, 0x87, 0xe2, 0x57, 0x52, 0xdb, 0x9c,
	0xd9, 0x5a, 0x90, 0x97, 0x13, 0x5b, 0xe0, 0x78, 0x42, 0xa7, 0xbe, 0xd1, 0xc0, 0xa2, 0x70, 0xf6,
	0x06, 0xfd, 0x9e, 0x47, 0xd1, 0x21, 0x00, 0xcd, 0x41, 0x67, 0x92, 0xb8, 0xc6, 0x53, 0x80, 0xdb,
	0x62, 0xdf, 0x32, 0x07, 0x1d, 0x91, 0xa8, 0xb5, 0xfe, 0xf1, 0xc3, 0xc3, 0x55, 0xbf, 0x66, 0x81,
	0x39, 0x9e, 0x6f, 0x4e, 0x2c, 0xd0, 0x16, 0x98, 0xf3, 0x63, 0x88, 0xc2, 0x43, 0x29, 0x03, 0x61,
	0xec, 0xf3, 0x29, 0x13, 0xac, 0xc8, 0x19, 0xb0, 0xfc, 0xb7, 0x41, 0x62, 0xe8, 0xff, 0xf4, 0x27,
	0x80, 0x02, 0xf7, 0x89, 0x21, 0x9e, 0xda, 0xa4, 0x5e, 0x83, 0x55, 0xc6, 0x14, 0xe8, 0x39, 0x1d,
	0x51, 0xbf, 0x0e, 0x51, 0x05, 0x68, 0x3f, 0x44, 0x01, 0xa9, 0x12, 0x58, 0x8b, 0xc4, 0x66, 0x39,
	0xea, 0xe1, 0x1a, 0xdf, 0x09, 0x52, 0x54, 0x8c, 0x83, 0x62, 0x7f, 0x0d, 0x90, 0xcc, 0x5e, 0x6f,
	0xc5, 0x53, 0x15, 0xb0, 0x1e, 0x8d, 0xce, 0x32, 0xcd, 0x46, 0xaa, 0x99, 0x8c, 0xa6, 0x1a, 0xa9,
	0xe9, 0x11, 0x48, 0x54, 0xfc, 0xe5, 0xc8, 0x16, 0x1d, 0xdf, 0x65, 0x44, 0x72, 0x7e, 0x2f, 0x26,
	0x2c, 0x5f, 0xda, 0x9c, 0x47, 0x6b, 0x60, 0xb6, 0xd5, 0x1f, 0xf7, 0x46, 0xbc, 0xe7, 0x71, 0x2c,
	0x7e, 0xa4, 0xf6, 0xc1, 0xfc, 0xa4, 0xed, 0x1e, 0x7a, 0x02, 0xe6, 0xa7, 0x8b, 0x5f, 0x15, 0xe7,
	0x24, 0x1e, 0x4e, 0x4c, 0xb6, 0x81, 0xd4, 0x4b, 0xa1, 0xec, 0x22, 0x1d, 0x5d, 0x73, 0x53, 0xf3,
	0x42, 0x30, 0x41, 0x60, 0xa1, 0xba, 0x50, 0x47, 0xa5, 0x05, 0x1b, 0x58, 0x06, 0xed, 0xfc, 0xa7,
	0x26, 0x94, 0xcb, 0xb9, 0x6b, 0x5e, 0x3e, 0x29, 0x10, 0xf7, 0x06, 0xb4, 0xe5, 0x2f, 0x9e, 0xf0,
	0xf2, 0xe5, 0x9c, 0xb4, 0xc4, 0x66, 0xbe, 0x7b, 0x89, 0xa1, 0x4f, 0xc5, 0x61, 0x61, 0xb2, 0x11,
	0xad, 0xa8, 0x86, 0x9e, 0x38, 0x28, 0x78, 0xa9, 0xa2, 0xd0, 0xa7, 0x34, 0x1f, 0x21, 0xf4, 0xb0,
	0x7c, 0xd6, 0x43, 0x75, 0x89, 0x68, 0xe7, 0xb7, 0x22, 0x50, 0xa9, 0xf7, 0xa6, 0x7f, 0xfd, 0xbd,
	0x3b, 0x16, 0x3a, 0x57, 0x83, 0xb3, 0x44, 0x8d, 0x70, 0xff, 0x24, 0x99, 0xab, 0xd6, 0x41, 0x0f,
	0x3f, 0xf8, 0xfb, 0x1f, 0xe3, 0xf9, 0xd1, 0xe7, 0x7a, 0x92, 0x64, 0x32, 0xff, 0x9e, 0x23, 0x8d,
	0x74, 0x78, 0xb9, 0x27, 0xbf, 0xfb, 0xe3, 0xfc, 0x9d, 0x1a, 0xbc, 0xe5, 0xbf, 0x04, 0xcb, 0x27,
	0x43, 0xda, 0x3c, 0xeb, 0x8f, 0x47, 0xa4, 0xdb, 0x6f, 0x53, 0x2f, 0x39, 0xbb, 0x39, 0xb3, 0xb5,
	0x6c, 0xdc, 0x0e, 0xc2, 0x59, 0x3e, 0x5f, 0xe9, 0xb7, 0x29, 0x5e, 0x3a, 0x91, 0x7e, 0x79, 0xa9,
	0x3f, 0x68, 0xe0, 0x96, 0x52, 0x80, 0x6b, 0x16, 0xea, 0x63, 0x45, 0xa8, 0x48, 0xad, 0x78, 0x20,
	0xd6, 0x94, 0x03, 0x6e, 0x5f, 0x92, 0x06, 0x6b, 0x5b, 0x2e, 0xa2, 0xaf, 0xbb, 0x97, 0xf4, 0x2d,
	0xa2, 0xb1, 0x7f, 0x69, 0x62, 0x5b, 0xb1, 0xdf, 0xd1, 0xde, 0x75, 0x69, 0x2b, 0xfc, 0xba, 0x8f,
	0xfd, 0x8f, 0xaf, 0xfb, 0x3d, 0xb0, 0x18, 0x9c, 0x3e, 0x2f, 0x3b, 0x26, 0x48, 0xc7, 0xcf, 0x85,
	0xe9, 0xf1, 0x73, 0xec, 0xf1, 0x73, 0x94, 0xf7, 0x96, 0xf7, 0x7c, 0x1e, 0xb3, 0xc7, 0xf4, 0x1f,
	0x35, 0x00, 0xc3, 0x3d, 0x45, 0xf7, 0xc0, 0x9d, 0x9a, 0x83, 0x5d, 0x62, 0x61, 0xdb, 0x3c, 0x76,
	0x1a, 0x2e, 0xa9, 0x38, 0x05, 0x9b, 0x54, 0x9d, 0xaa, 0x0d, 0x6f, 0xa0, 0xfb, 0x20, 0x79, 0x09,
	0x99, 0x7d, 0x6f, 0xe4, 0x8a, 0x50, 0xbb, 0x92, 0xd5, 0x33, 0x45, 0x18, 0xbb, 0x82, 0x35, 0xde,
	0xe7, 0x32, 0x45, 0x38, 0x93, 0xee, 0x88, 0xed, 0x37, 0x98, 0x34, 0xba, 0x0b, 0xd6, 0xb9, 0xbd,
	0x53, 0xb3, 0x31, 0xa9, 0xbb, 0xa6, 0xdb, 0xa8, 0x4f, 0xd2, 0xb8, 0x03, 0x6e, 0x45, 0xa8, 0x46,
	0x0d, 0x6a, 0x97, 0xfa, 0x14, 0x9c, 0x97, 0x55, 0x18, 0xdb, 0x48, 0xfc, 0xfd, 0xdb, 0x07, 0x37,
	0xfe, 0xf1, 0xed, 0x03, 0x2d, 0x4d, 0xc4, 0x50, 0x41, 0x9d, 0xa6, 0x6e, 0x66, 0xa1, 0x52, 0xaa,
	0x72, 0xbf, 0xe9, 0x8c, 0x2f, 0xa3, 0x78, 0x44, 0x6d, 0x9a, 0x85, 0x4c, 0x35, 0x6a, 0x30, 0x96,
	0xb6, 0xc5, 0xe7, 0x0d, 0x5f, 0x6f, 0x08, 0x2c, 0x73, 0x23, 0xf7, 0x37, 0xb5, 0x69, 0xcc, 0x55,
	0xb0, 0x14, 0x60, 0xb6, 0x7b, 0x04, 0x35, 0xd5, 0xac, 0x52, 0xac, 0xb8, 0x30, 0x96, 0xfe, 0xab,
	0xaf, 0x3a, 0xf1, 0x39, 0x70, 0x0b, 0xac, 0x70, 0x8b, 0x7a, 0xcd, 0xb6, 0x0b, 0xe1, 0x48, 0x02,
	0xd4, 0x8b, 0x52, 0x24, 0x1f, 0xe2, 0xa5, 0x57, 0x31, 0xd6, 0xac, 0x99, 0x10, 0x96, 0xcd, 0x14,
	0x61, 0x3c, 0x84, 0xb1, 0xc6, 0xcc, 0x86, 0xc6, 0xd5, 0x33, 0x99, 0x22, 0x9c, 0x4b, 0x3f, 0x07,
	0x0b, 0xd2, 0xc1, 0x1f, 0xdd, 0x06, 0x88, 0xdb, 0x1c, 0xda, 0x79, 0x65, 0xa2, 0x6b, 0x00, 0xaa,
	0xf8, 0x61, 0x1e, 0x6a, 0x51, 0x14, 0xd7, 0x61, 0x2c, 0xfd, 0x27, 0x0d, 0x2c, 0x29, 0x9f, 0x94,
	0x2c, 0xea, 0xab, 0xfc, 0x0b, 0xec, 0x57, 0x16, 0xdb, 0x15, 0xe7, 0x85, 0x5d, 0x10, 0xdd, 0x97,
	0xf0, 0x52, 0xb5, 0x6e, 0x63, 0xd7, 0x2e, 0x40, 0x2d, 0xe4, 0x50, 0xb3, 0xab, 0x85, 0x52, 0x95,
	0x4d, 0xff, 0x2e, 0x58, 0x97, 0xf0, 0x7a, 0x0d, 0x3b, 0x15, 0x82, 0x6d, 0xb3, 0x00, 0x67, 0xd0,
	0x27, 0xe0, 0xee, 0xa5, 0x14, 0xb1, 0x31, 0x86, 0xf1, 0xf4, 0x2b, 0x31, 0x4f, 0xff, 0xeb, 0x95,
	0x65, 0xce, 0xad, 0x6b, 0xa5, 0x02, 0x69, 0x54, 0x8f, 0xab, 0x4c, 0x07, 0x41, 0x3e, 0x0c, 0xad,
	0x1f, 0xd6, 0x58, 0xcd, 0x49, 0x1e, 0x43, 0x0d, 0x6d, 0x80, 0xdb, 0x53, 0xe2, 0xb9, 0x60, 0x38,
	0x95, 0x85, 0xb1, 0xf4, 0xd7, 0x62, 0xb6, 0xd3, 0x0f, 0x16, 0x94, 0x04, 0x6b, 0xbc, 0x2a, 0x35,
	0xb3, 0x51, 0xb7, 0x95, 0x2a, 0x5e, 0xc2, 0x94, 0x4b, 0xd5, 0x63, 0x49, 0x81, 0x12, 0x53, 0x3b,
	0xcc, 0xc3, 0x58, 0xfa, 0x3f, 0x10, 0x2c, 0xca, 0x67, 0x26, 0x04, 0xc1, 0xe2, 0x21, 0x36, 0x2b,
	0x76, 0x9d, 0xe0, 0x57, 0xc4, 0x39, 0x16, 0xd2, 0x09, 0x10, 0xb3, 0x5c, 0x86, 0x1a, 0x5a, 0x07,
	0xab, 0x01, 0x64, 0x99, 0x05, 0x72, 0x98, 0xaf, 0xc3, 0x58, 0x14, 0x66, 0xd6, 0x33, 0x2c, 0xa4,
	0x93, 0x77, 0x6d, 0x77, 0x12, 0x32, 0xce, 0x42, 0x06, 0x08, 0x33, 0x9a, 0x55, 0x7d, 0x1b, 0xd5,
	0x52, 0xde, 0xac, 0xbb, 0x70, 0x8e, 0x25, 0x1e, 0xc0, 0x95, 0x46, 0xd9, 0x15, 0xc4, 0x4d, 0x95,
	0xb0, 0xb0, 0x63, 0x16, 0x38, 0x91, 0x60, 0x32, 0x0c, 0x08, 0x3e, 0x5f, 0x38, 0xcf, 0x2a, 0xa3,
	0x66, 0x56, 0xb6, 0xab, 0x45, 0xf7, 0x08, 0x02, 0x95, 0x69, 0x54, 0x0b, 0x36, 0xae, 0x97, 0x5e,
	0xdb, 0x05, 0xb8, 0xa0, 0x8e, 0xe0, 0xbc, 0x98, 0x10, 0x8b, 0x2a, 0x71, 0x88, 0xcd, 0x62, 0xc5,
	0xae, 0xba, 0x75, 0xb8, 0xc4, 0xba, 0x1e, 0x10, 0xcf, 0x4c, 0xcb, 0xb2, 0x31, 0x5c, 0x66, 0x62,
	0x93, 0x12, 0xc2, 0x25, 0x91, 0xd3, 0x0a, 0x13, 0x5b, 0x80, 0xd7, 0x5d, 0xa7, 0x52, 0xb3, 0x0b,
	0x24, 0x8f, 0xf3, 0x10, 0xaa, 0x2e, 0xae, 0xe3, 0x90, 0xb2, 0x53, 0x2d, 0xc2, 0x55, 0x75, 0xe4,
	0x17, 0x65, 0xb3, 0x4a, 0x8a, 0x8e, 0x53, 0x80, 0x48, 0xad, 0x5e, 0x01, 0x3b, 0xb5, 0x9a, 0x5d,
	0x80, 0xb7, 0xd8, 0x16, 0x1d, 0xc0, 0x65, 0xbb, 0x5e, 0x27, 0xee, 0x91, 0x59, 0x25, 0xbb, 0x59,
	0x0b, 0xae, 0xa9, 0x7d, 0x65, 0xd0, 0xba, 0x3a, 0xee, 0x6e, 0xce, 0x22, 0xba, 0xb1, 0x67, 0xc1,
	0xdb, 0xea, 0xb8, 0xba, 0xb1, 0x6f, 0x11, 0x23, 0x97, 0xb3, 0xe0, 0x1d, 0x95, 0x30, 0x72, 0xbb,
	0x16, 0xc9, 0xe9, 0xba, 0x05, 0x93, 0x6a, 0x59, 0x73, 0xba, 0x61, 0x11, 0x3d, 0x63, 0xec, 0x58,
	0xf0, 0xae, 0x3a, 0x6d, 0x3d, 0x63, 0x64, 0x2d, 0xa2, 0xe7, 0xf4, 0x7d, 0x0b, 0x6e, 0x84, 0xa8,
	0x9c, 0x7e, 0x60, 0x11, 0x23, 0x93, 0xdd, 0xb3, 0xe0, 0x3d, 0x95, 0x32, 0x32, 0xd9, 0x7d, 0x8b,
	0x64, 0x33, 0x07, 0x39, 0x0b, 0xde, 0x57, 0xa9, 0x6c, 0xe6, 0x60, 0xd7, 0x22, 0xfb, 0xfa, 0x81,
	0x6e, 0xc1, 0x4f, 0x54, 0x6a, 0x5f, 0x3f, 0x30, 0x2c, 0x72, 0x60, 0xe8, 0x39, 0x0b, 0x3e, 0x50,
	0x65, 0xe2, 0xb8, 0x47, 0x36, 0x86, 0x0f, 0x25, 0xf1, 0xbb, 0x5c, 0xa9, 0x9b, 0x52, 0x91, 0x5c,
	0xa1, 0xd4, 0x9f, 0xa8, 0x90, 0x65, 0x16, 0x60, 0x4a, 0x52, 0xb8, 0xf0, 0x7b, 0xc4, 0xc2, 0x07,
	0x88, 0xeb, 0xb8, 0x66, 0x19, 0xfe, 0x54, 0xea, 0x92, 0x1b, 0x68, 0xfc, 0x53, 0xa9, 0x88, 0xae,
	0xac, 0xf1, 0xc7, 0x2a, 0x11, 0x68, 0xfc, 0x67, 0x52, 0xf2, 0xee, 0x44, 0xe3, 0x5b, 0x52, 0xf3,
	0x5c, 0x49, 0x67, 0x9f, 0xb1, 0xbd, 0x3a, 0xc0, 0x99, 0x68, 0x60, 0x5a, 0x12, 0x86, 0x1b, 0x16,
	0xc6, 0x13, 0x75, 0x82, 0x0c, 0xfa, 0x5c, 0x8d, 0x3d, 0x15, 0xc6, 0xcf, 0xd5, 0x0c, 0x03, 0x61,
	0x6c, 0xab, 0x44, 0x20, 0x8c, 0x5f, 0x48, 0xc2, 0x70, 0x15, 0x61, 0x64, 0xa4, 0x66, 0xb9, 0xaa,
	0x30, 0xf4, 0x10, 0x25, 0x09, 0xc3, 0x50, 0x29, 0x59, 0x18, 0x3b, 0x2a, 0x25, 0x0b, 0x23, 0xab,
	0x52, 0xb2, 0x30, 0x72, 0x6a, 0x6d, 0x85, 0x30, 0x76, 0x43, 0x05, 0xc7, 0x25, 0x92, 0x81, 0x7b,
	0x51, 0x50, 0x87, 0xfb, 0x51, 0xd0, 0x80, 0x07, 0x51, 0x70, 0x07, 0x3e, 0x8d, 0x82, 0x59, 0xf8,
	0x45, 0x14, 0xcc, 0xc1, 0x5f, 0x46, 0xc1, 0x5d, 0xf8, 0x65, 0x14, 0xdc, 0x83, 0x5f, 0x85, 0x36,
	0x3f, 0x9e, 0xe7, 0xaf, 0xa2, 0xa0, 0x0e, 0x7f, 0x1d, 0x05, 0x0d, 0x68, 0x46, 0xc1, 0x1d, 0x68,
	0x45, 0xc1, 0x2c, 0xcc, 0x47, 0xc1, 0x1c, 0x2c, 0x44, 0xc1, 0x5d, 0x68, 0x47, 0xc1, 0x3d, 0x78,
	0xc8, 0xf4, 0x27, 0x89, 0x94, 0x64, 0x88, 0xde, 0xa8, 0x93, 0xbc, 0xd3, 0xa8, 0xba, 0xb0, 0x18,
	0x26, 0x75, 0x89, 0x3c, 0x0a, 0x93, 0x86, 0x44, 0x96, 0xc2, 0xe4, 0x8e, 0x44, 0x3e, 0x0b, 0x93,
	0x59, 0x89, 0x3c, 0x0e, 0x93, 0x39, 0x89, 0x2c, 0x87, 0xc9, 0x5d, 0x89, 0xac, 0x84, 0xc9, 0x3d,
	0x89, 0xac, 0x32, 0x12, 0x5f, 0x31, 0x4f, 0x27, 0x4c, 0xca, 0xf3, 0xac, 0x85, 0x49, 0x79, 0x9e,
	0xcf, 0xc3, 0xa4, 0x3c, 0x4f, 0x1c, 0x26, 0xe5, 0x79, 0xd6, 0xc3, 0xa4, 0x3c, 0x4f, 0x37, 0x4c,
	0xca, 0xf3, 0x6c, 0x84, 0x49, 0x79, 0x9e, 0x2f, 0xd8, 0xfe, 0x30, 0x79, 0xdb, 0x4a, 0xf8, 0x4b,
	0x75, 0x1b, 0x70, 0x71, 0xa3, 0x9a, 0x37, 0xd9, 0x09, 0xec, 0x95, 0xf1, 0xef, 0x18, 0x88, 0xb3,
	0x63, 0x0d, 0xfa, 0x42, 0x5c, 0xa4, 0xe6, 0x87, 0x94, 0x9d, 0xe4, 0xd6, 0xe4, 0x1b, 0xb5, 0xc9,
	0x37, 0xf4, 0xc6, 0x7a, 0xf4, 0x9e, 0xad, 0xe2, 0xbd, 0x4d, 0xdd, 0x98, 0x38, 0x37, 0x06, 0xed,
	0x1f, 0xe0, 0x5c, 0x14, 0xce, 0xe2, 0xae, 0x09, 0x6d, 0x5c, 0x71, 0x51, 0xc6, 0x42, 0xdc, 0xbb,
	0xea, 0x66, 0x4a, 0x04, 0xfa, 0x0a, 0xdc, 0xf4, 0x6f, 0x1d, 0xd0, 0x9d, 0xcb, 0x2e, 0x67, 0x58,
	0x88, 0xe4, 0xa5, 0xb7, 0x13, 0xc2, 0xff, 0x99, 0x38, 0x3b, 0xfa, 0x5f, 0x95, 0xe8, 0xde, 0x55,
	0x17, 0x04, 0x2c, 0xce, 0xfd, 0x2b, 0xbf, 0x42, 0x79, 0x2c, 0x0b, 0xbc, 0x4e, 0x9c, 0x36, 0xcf,
	0xf9, 0xff, 0x6c, 0x4e, 0xe6, 0xf8, 0x9f, 0x9d, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x79,
	0xf9, 0xb1, 0xf3, 0x19, 0x00, 0x00,
}
