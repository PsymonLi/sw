// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nat.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// types of NAT actions supported
type NatAction int32

const (
	NatAction_NAT_TYPE_NONE                 NatAction = 0
	NatAction_NAT_TYPE_STATIC_ADDRESS       NatAction = 1
	NatAction_NAT_TYPE_DYNAMIC_ADDRESS      NatAction = 2
	NatAction_NAT_TYPE_DYNAMIC_ADDRESS_PORT NatAction = 3
)

var NatAction_name = map[int32]string{
	0: "NAT_TYPE_NONE",
	1: "NAT_TYPE_STATIC_ADDRESS",
	2: "NAT_TYPE_DYNAMIC_ADDRESS",
	3: "NAT_TYPE_DYNAMIC_ADDRESS_PORT",
}
var NatAction_value = map[string]int32{
	"NAT_TYPE_NONE":                 0,
	"NAT_TYPE_STATIC_ADDRESS":       1,
	"NAT_TYPE_DYNAMIC_ADDRESS":      2,
	"NAT_TYPE_DYNAMIC_ADDRESS_PORT": 3,
}

func (x NatAction) String() string {
	return proto.EnumName(NatAction_name, int32(x))
}
func (NatAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor20, []int{0} }

// NAT pool configuration
// NOTE: addresses inside the NAT pool are "owned" by the device, so device is
// expected to advertise the routes for the same and respond to ARP requests
type NatPoolSpec struct {
	KeyOrHandle *NatPoolKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Address     []*Address        `protobuf:"bytes,2,rep,name=address" json:"address,omitempty"`
	PortRange   *L4PortRange      `protobuf:"bytes,3,opt,name=port_range,json=portRange" json:"port_range,omitempty"`
}

func (m *NatPoolSpec) Reset()                    { *m = NatPoolSpec{} }
func (m *NatPoolSpec) String() string            { return proto.CompactTextString(m) }
func (*NatPoolSpec) ProtoMessage()               {}
func (*NatPoolSpec) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{0} }

func (m *NatPoolSpec) GetKeyOrHandle() *NatPoolKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *NatPoolSpec) GetAddress() []*Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *NatPoolSpec) GetPortRange() *L4PortRange {
	if m != nil {
		return m.PortRange
	}
	return nil
}

type NatPoolRequestMsg struct {
	Request []*NatPoolSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NatPoolRequestMsg) Reset()                    { *m = NatPoolRequestMsg{} }
func (m *NatPoolRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPoolRequestMsg) ProtoMessage()               {}
func (*NatPoolRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{1} }

func (m *NatPoolRequestMsg) GetRequest() []*NatPoolSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// NatPoolStatus is the operational status of a given NAT pool
// TODO: Add NAT mappings here
type NatPoolStatus struct {
	PoolHandle uint64 `protobuf:"fixed64,1,opt,name=pool_handle,json=poolHandle" json:"pool_handle,omitempty"`
}

func (m *NatPoolStatus) Reset()                    { *m = NatPoolStatus{} }
func (m *NatPoolStatus) String() string            { return proto.CompactTextString(m) }
func (*NatPoolStatus) ProtoMessage()               {}
func (*NatPoolStatus) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{2} }

func (m *NatPoolStatus) GetPoolHandle() uint64 {
	if m != nil {
		return m.PoolHandle
	}
	return 0
}

// NatPoolResponse is response to NatPoolSpec
type NatPoolResponse struct {
	ApiStatus  ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	PoolStatus *NatPoolStatus `protobuf:"bytes,2,opt,name=pool_status,json=poolStatus" json:"pool_status,omitempty"`
}

func (m *NatPoolResponse) Reset()                    { *m = NatPoolResponse{} }
func (m *NatPoolResponse) String() string            { return proto.CompactTextString(m) }
func (*NatPoolResponse) ProtoMessage()               {}
func (*NatPoolResponse) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{3} }

func (m *NatPoolResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NatPoolResponse) GetPoolStatus() *NatPoolStatus {
	if m != nil {
		return m.PoolStatus
	}
	return nil
}

// NatPoolResponseMsg is batched response to NatPoolRequestMsg
type NatPoolResponseMsg struct {
	Response []*NatPoolResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NatPoolResponseMsg) Reset()                    { *m = NatPoolResponseMsg{} }
func (m *NatPoolResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPoolResponseMsg) ProtoMessage()               {}
func (*NatPoolResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{4} }

func (m *NatPoolResponseMsg) GetResponse() []*NatPoolResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NatPoolDeleteRequest is used to delete a NAT pool
type NatPoolDeleteRequest struct {
	KeyOrHandle *NatPoolKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *NatPoolDeleteRequest) Reset()                    { *m = NatPoolDeleteRequest{} }
func (m *NatPoolDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*NatPoolDeleteRequest) ProtoMessage()               {}
func (*NatPoolDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{5} }

func (m *NatPoolDeleteRequest) GetKeyOrHandle() *NatPoolKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// NatPoolDeleteRequestMsg is used to delete batch of NAT pools
type NatPoolDeleteRequestMsg struct {
	Request []*NatPoolDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NatPoolDeleteRequestMsg) Reset()                    { *m = NatPoolDeleteRequestMsg{} }
func (m *NatPoolDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPoolDeleteRequestMsg) ProtoMessage()               {}
func (*NatPoolDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{6} }

func (m *NatPoolDeleteRequestMsg) GetRequest() []*NatPoolDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// NatPoolDeleteResponse is response to NatPoolDeleteRequest
type NatPoolDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *NatPoolDeleteResponse) Reset()                    { *m = NatPoolDeleteResponse{} }
func (m *NatPoolDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*NatPoolDeleteResponse) ProtoMessage()               {}
func (*NatPoolDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{7} }

func (m *NatPoolDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// NatPoolDeleteResponseMsg is batched response to NatPoolDeleteRequestMsg
type NatPoolDeleteResponseMsg struct {
	Response []*NatPoolDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NatPoolDeleteResponseMsg) Reset()                    { *m = NatPoolDeleteResponseMsg{} }
func (m *NatPoolDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPoolDeleteResponseMsg) ProtoMessage()               {}
func (*NatPoolDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{8} }

func (m *NatPoolDeleteResponseMsg) GetResponse() []*NatPoolDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NatPoolGetRequest is used to get all the information about a pool
type NatPoolGetRequest struct {
	KeyOrHandle *NatPoolKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *NatPoolGetRequest) Reset()                    { *m = NatPoolGetRequest{} }
func (m *NatPoolGetRequest) String() string            { return proto.CompactTextString(m) }
func (*NatPoolGetRequest) ProtoMessage()               {}
func (*NatPoolGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{9} }

func (m *NatPoolGetRequest) GetKeyOrHandle() *NatPoolKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// NatPoolGetRequestMsg is batched GET requests for NAT pools
type NatPoolGetRequestMsg struct {
	Request []*NatPoolGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NatPoolGetRequestMsg) Reset()                    { *m = NatPoolGetRequestMsg{} }
func (m *NatPoolGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPoolGetRequestMsg) ProtoMessage()               {}
func (*NatPoolGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{10} }

func (m *NatPoolGetRequestMsg) GetRequest() []*NatPoolGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// NatPoolStats is the statistics object for NAT pool
type NatPoolStats struct {
}

func (m *NatPoolStats) Reset()                    { *m = NatPoolStats{} }
func (m *NatPoolStats) String() string            { return proto.CompactTextString(m) }
func (*NatPoolStats) ProtoMessage()               {}
func (*NatPoolStats) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{11} }

// NatPoolGetResponse captures all the information for a given NAT pool
type NatPoolGetResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *NatPoolSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *NatPoolStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *NatPoolStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *NatPoolGetResponse) Reset()                    { *m = NatPoolGetResponse{} }
func (m *NatPoolGetResponse) String() string            { return proto.CompactTextString(m) }
func (*NatPoolGetResponse) ProtoMessage()               {}
func (*NatPoolGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{12} }

func (m *NatPoolGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NatPoolGetResponse) GetSpec() *NatPoolSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *NatPoolGetResponse) GetStatus() *NatPoolStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *NatPoolGetResponse) GetStats() *NatPoolStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// NatPoolGetResponseMsg is the batched response to NatPoolGetRequestMsg
type NatPoolGetResponseMsg struct {
	Response []*NatPoolGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NatPoolGetResponseMsg) Reset()                    { *m = NatPoolGetResponseMsg{} }
func (m *NatPoolGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPoolGetResponseMsg) ProtoMessage()               {}
func (*NatPoolGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{13} }

func (m *NatPoolGetResponseMsg) GetResponse() []*NatPoolGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type NatRuleAction struct {
	SrcNatAction NatAction         `protobuf:"varint,1,opt,name=src_nat_action,json=srcNatAction,enum=nat.NatAction" json:"src_nat_action,omitempty"`
	DstNatAction NatAction         `protobuf:"varint,2,opt,name=dst_nat_action,json=dstNatAction,enum=nat.NatAction" json:"dst_nat_action,omitempty"`
	SrcNatPool   *NatPoolKeyHandle `protobuf:"bytes,3,opt,name=src_nat_pool,json=srcNatPool" json:"src_nat_pool,omitempty"`
	DstNatPool   *NatPoolKeyHandle `protobuf:"bytes,4,opt,name=dst_nat_pool,json=dstNatPool" json:"dst_nat_pool,omitempty"`
}

func (m *NatRuleAction) Reset()                    { *m = NatRuleAction{} }
func (m *NatRuleAction) String() string            { return proto.CompactTextString(m) }
func (*NatRuleAction) ProtoMessage()               {}
func (*NatRuleAction) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{14} }

func (m *NatRuleAction) GetSrcNatAction() NatAction {
	if m != nil {
		return m.SrcNatAction
	}
	return NatAction_NAT_TYPE_NONE
}

func (m *NatRuleAction) GetDstNatAction() NatAction {
	if m != nil {
		return m.DstNatAction
	}
	return NatAction_NAT_TYPE_NONE
}

func (m *NatRuleAction) GetSrcNatPool() *NatPoolKeyHandle {
	if m != nil {
		return m.SrcNatPool
	}
	return nil
}

func (m *NatRuleAction) GetDstNatPool() *NatPoolKeyHandle {
	if m != nil {
		return m.DstNatPool
	}
	return nil
}

// NatRuleSpec is the user intent for the NAT rule
type NatRuleSpec struct {
	RuleId uint64         `protobuf:"varint,1,opt,name=rule_id,json=ruleId" json:"rule_id,omitempty"`
	Match  *RuleMatch     `protobuf:"bytes,2,opt,name=match" json:"match,omitempty"`
	Action *NatRuleAction `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`
}

func (m *NatRuleSpec) Reset()                    { *m = NatRuleSpec{} }
func (m *NatRuleSpec) String() string            { return proto.CompactTextString(m) }
func (*NatRuleSpec) ProtoMessage()               {}
func (*NatRuleSpec) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{15} }

func (m *NatRuleSpec) GetRuleId() uint64 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *NatRuleSpec) GetMatch() *RuleMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *NatRuleSpec) GetAction() *NatRuleAction {
	if m != nil {
		return m.Action
	}
	return nil
}

// NatPolicySpec captures the NAT policy which is a group of NAT rules
type NatPolicySpec struct {
	KeyOrHandle *NatPolicyKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Rules       []*NatRuleSpec      `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
}

func (m *NatPolicySpec) Reset()                    { *m = NatPolicySpec{} }
func (m *NatPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*NatPolicySpec) ProtoMessage()               {}
func (*NatPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{16} }

func (m *NatPolicySpec) GetKeyOrHandle() *NatPolicyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *NatPolicySpec) GetRules() []*NatRuleSpec {
	if m != nil {
		return m.Rules
	}
	return nil
}

// NatPolicyRequestMsg is the batched NAT policy
type NatPolicyRequestMsg struct {
	Request []*NatPolicySpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NatPolicyRequestMsg) Reset()                    { *m = NatPolicyRequestMsg{} }
func (m *NatPolicyRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyRequestMsg) ProtoMessage()               {}
func (*NatPolicyRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{17} }

func (m *NatPolicyRequestMsg) GetRequest() []*NatPolicySpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// NatPolicyStatus is the operational status of NatPolicySpec
type NatPolicyStatus struct {
	NatPolicyHandle uint64 `protobuf:"fixed64,1,opt,name=nat_policy_handle,json=natPolicyHandle" json:"nat_policy_handle,omitempty"`
}

func (m *NatPolicyStatus) Reset()                    { *m = NatPolicyStatus{} }
func (m *NatPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyStatus) ProtoMessage()               {}
func (*NatPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{18} }

func (m *NatPolicyStatus) GetNatPolicyHandle() uint64 {
	if m != nil {
		return m.NatPolicyHandle
	}
	return 0
}

// NatPolicyResponse is response to NatPolicySpec
type NatPolicyResponse struct {
	ApiStatus    ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	PolicyStatus *NatPolicyStatus `protobuf:"bytes,2,opt,name=policy_status,json=policyStatus" json:"policy_status,omitempty"`
}

func (m *NatPolicyResponse) Reset()                    { *m = NatPolicyResponse{} }
func (m *NatPolicyResponse) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyResponse) ProtoMessage()               {}
func (*NatPolicyResponse) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{19} }

func (m *NatPolicyResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NatPolicyResponse) GetPolicyStatus() *NatPolicyStatus {
	if m != nil {
		return m.PolicyStatus
	}
	return nil
}

// NatPolicyResponseMsg is the batched NatPolicyResponse
type NatPolicyResponseMsg struct {
	Response []*NatPolicyResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NatPolicyResponseMsg) Reset()                    { *m = NatPolicyResponseMsg{} }
func (m *NatPolicyResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyResponseMsg) ProtoMessage()               {}
func (*NatPolicyResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{20} }

func (m *NatPolicyResponseMsg) GetResponse() []*NatPolicyResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NatPolicyDeleteRequest is used to delete a NAT policy
type NatPolicyDeleteRequest struct {
	KeyOrHandle *NatPolicyKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *NatPolicyDeleteRequest) Reset()                    { *m = NatPolicyDeleteRequest{} }
func (m *NatPolicyDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyDeleteRequest) ProtoMessage()               {}
func (*NatPolicyDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{21} }

func (m *NatPolicyDeleteRequest) GetKeyOrHandle() *NatPolicyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// NatPolicyDeleteRequestMsg is batched NatPolicyDeleteRequest
type NatPolicyDeleteRequestMsg struct {
	Request []*NatPolicyDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NatPolicyDeleteRequestMsg) Reset()                    { *m = NatPolicyDeleteRequestMsg{} }
func (m *NatPolicyDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyDeleteRequestMsg) ProtoMessage()               {}
func (*NatPolicyDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{22} }

func (m *NatPolicyDeleteRequestMsg) GetRequest() []*NatPolicyDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// NatPolicyDeleteResponse is response to NatPolicyDeleteRequest
type NatPolicyDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *NatPolicyDeleteResponse) Reset()                    { *m = NatPolicyDeleteResponse{} }
func (m *NatPolicyDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyDeleteResponse) ProtoMessage()               {}
func (*NatPolicyDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{23} }

func (m *NatPolicyDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// NatPolicyDeleteResponseMsg is batched response to NatPolicyDeleteRequestMsg
type NatPolicyDeleteResponseMsg struct {
	Response []*NatPolicyDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NatPolicyDeleteResponseMsg) Reset()                    { *m = NatPolicyDeleteResponseMsg{} }
func (m *NatPolicyDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyDeleteResponseMsg) ProtoMessage()               {}
func (*NatPolicyDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{24} }

func (m *NatPolicyDeleteResponseMsg) GetResponse() []*NatPolicyDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NatPolicyGetRequest is used to get information about a NAT policy
type NatPolicyGetRequest struct {
	KeyOrHandle *NatPolicyKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *NatPolicyGetRequest) Reset()                    { *m = NatPolicyGetRequest{} }
func (m *NatPolicyGetRequest) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyGetRequest) ProtoMessage()               {}
func (*NatPolicyGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{25} }

func (m *NatPolicyGetRequest) GetKeyOrHandle() *NatPolicyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// NatPolicyGetRequestMsg is batched GET request
type NatPolicyGetRequestMsg struct {
	Request []*NatPolicyGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NatPolicyGetRequestMsg) Reset()                    { *m = NatPolicyGetRequestMsg{} }
func (m *NatPolicyGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyGetRequestMsg) ProtoMessage()               {}
func (*NatPolicyGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{26} }

func (m *NatPolicyGetRequestMsg) GetRequest() []*NatPolicyGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// per rule stats
type NatRuleStats struct {
	NumTcpSessions   uint32 `protobuf:"varint,1,opt,name=num_tcp_sessions,json=numTcpSessions" json:"num_tcp_sessions,omitempty"`
	NumUdpSessions   uint32 `protobuf:"varint,2,opt,name=num_udp_sessions,json=numUdpSessions" json:"num_udp_sessions,omitempty"`
	NumOtherSessions uint32 `protobuf:"varint,3,opt,name=num_other_sessions,json=numOtherSessions" json:"num_other_sessions,omitempty"`
}

func (m *NatRuleStats) Reset()                    { *m = NatRuleStats{} }
func (m *NatRuleStats) String() string            { return proto.CompactTextString(m) }
func (*NatRuleStats) ProtoMessage()               {}
func (*NatRuleStats) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{27} }

func (m *NatRuleStats) GetNumTcpSessions() uint32 {
	if m != nil {
		return m.NumTcpSessions
	}
	return 0
}

func (m *NatRuleStats) GetNumUdpSessions() uint32 {
	if m != nil {
		return m.NumUdpSessions
	}
	return 0
}

func (m *NatRuleStats) GetNumOtherSessions() uint32 {
	if m != nil {
		return m.NumOtherSessions
	}
	return 0
}

// per policy stats
type NatPolicyStats struct {
	Stats []*NatRuleStats `protobuf:"bytes,1,rep,name=stats" json:"stats,omitempty"`
}

func (m *NatPolicyStats) Reset()                    { *m = NatPolicyStats{} }
func (m *NatPolicyStats) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyStats) ProtoMessage()               {}
func (*NatPolicyStats) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{28} }

func (m *NatPolicyStats) GetStats() []*NatRuleStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// NatPolicyGetResponse catpures all information about NAT policy
type NatPolicyGetResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *NatPolicySpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *NatPolicyStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *NatPolicyStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *NatPolicyGetResponse) Reset()                    { *m = NatPolicyGetResponse{} }
func (m *NatPolicyGetResponse) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyGetResponse) ProtoMessage()               {}
func (*NatPolicyGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{29} }

func (m *NatPolicyGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NatPolicyGetResponse) GetSpec() *NatPolicySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *NatPolicyGetResponse) GetStatus() *NatPolicyStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *NatPolicyGetResponse) GetStats() *NatPolicyStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// NatPolicyGetResponseMsg is batched response to NatPolicyGetRequestMsg
type NatPolicyGetResponseMsg struct {
	Response []*NatPolicyGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NatPolicyGetResponseMsg) Reset()                    { *m = NatPolicyGetResponseMsg{} }
func (m *NatPolicyGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyGetResponseMsg) ProtoMessage()               {}
func (*NatPolicyGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{30} }

func (m *NatPolicyGetResponseMsg) GetResponse() []*NatPolicyGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NatMappingSpec is the user intent for the NAT mapping
type NatMappingSpec struct {
	KeyOrHandle *NatMappingKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	NatPool     *NatPoolKeyHandle    `protobuf:"bytes,2,opt,name=nat_pool,json=natPool" json:"nat_pool,omitempty"`
	Bidir       bool                 `protobuf:"varint,3,opt,name=bidir" json:"bidir,omitempty"`
}

func (m *NatMappingSpec) Reset()                    { *m = NatMappingSpec{} }
func (m *NatMappingSpec) String() string            { return proto.CompactTextString(m) }
func (*NatMappingSpec) ProtoMessage()               {}
func (*NatMappingSpec) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{31} }

func (m *NatMappingSpec) GetKeyOrHandle() *NatMappingKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *NatMappingSpec) GetNatPool() *NatPoolKeyHandle {
	if m != nil {
		return m.NatPool
	}
	return nil
}

func (m *NatMappingSpec) GetBidir() bool {
	if m != nil {
		return m.Bidir
	}
	return false
}

// NatMappingRequestMsg is the batched add or modify of NAT mapping request
type NatMappingRequestMsg struct {
	Request []*NatMappingSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NatMappingRequestMsg) Reset()                    { *m = NatMappingRequestMsg{} }
func (m *NatMappingRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NatMappingRequestMsg) ProtoMessage()               {}
func (*NatMappingRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{32} }

func (m *NatMappingRequestMsg) GetRequest() []*NatMappingSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// NatMappingStatus reflects the current operational status of a NAT mapping
type NatMappingStatus struct {
	Handle     uint64     `protobuf:"fixed64,1,opt,name=handle" json:"handle,omitempty"`
	MappedIp   *IPAddress `protobuf:"bytes,2,opt,name=mapped_ip,json=mappedIp" json:"mapped_ip,omitempty"`
	Configured bool       `protobuf:"varint,3,opt,name=configured" json:"configured,omitempty"`
	FlowCount  uint32     `protobuf:"varint,4,opt,name=flow_count,json=flowCount" json:"flow_count,omitempty"`
}

func (m *NatMappingStatus) Reset()                    { *m = NatMappingStatus{} }
func (m *NatMappingStatus) String() string            { return proto.CompactTextString(m) }
func (*NatMappingStatus) ProtoMessage()               {}
func (*NatMappingStatus) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{33} }

func (m *NatMappingStatus) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func (m *NatMappingStatus) GetMappedIp() *IPAddress {
	if m != nil {
		return m.MappedIp
	}
	return nil
}

func (m *NatMappingStatus) GetConfigured() bool {
	if m != nil {
		return m.Configured
	}
	return false
}

func (m *NatMappingStatus) GetFlowCount() uint32 {
	if m != nil {
		return m.FlowCount
	}
	return 0
}

// NatMappingResponse is the response to NatMappingSpec
type NatMappingResponse struct {
	ApiStatus ApiStatus         `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *NatMappingStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *NatMappingResponse) Reset()                    { *m = NatMappingResponse{} }
func (m *NatMappingResponse) String() string            { return proto.CompactTextString(m) }
func (*NatMappingResponse) ProtoMessage()               {}
func (*NatMappingResponse) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{34} }

func (m *NatMappingResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NatMappingResponse) GetStatus() *NatMappingStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// NatMappingResponseMsg is batched response to NatMappingRequestMsg
type NatMappingResponseMsg struct {
	Response []*NatMappingResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NatMappingResponseMsg) Reset()                    { *m = NatMappingResponseMsg{} }
func (m *NatMappingResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NatMappingResponseMsg) ProtoMessage()               {}
func (*NatMappingResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{35} }

func (m *NatMappingResponseMsg) GetResponse() []*NatMappingResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NatMappingDeleteRequest is used to delete a NAT mapping
type NatMappingDeleteRequest struct {
	KeyOrHandle *NatMappingKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *NatMappingDeleteRequest) Reset()                    { *m = NatMappingDeleteRequest{} }
func (m *NatMappingDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*NatMappingDeleteRequest) ProtoMessage()               {}
func (*NatMappingDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{36} }

func (m *NatMappingDeleteRequest) GetKeyOrHandle() *NatMappingKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// NatMappingDeleteRequestMsg is used to delete batch of NAT mappings
type NatMappingDeleteRequestMsg struct {
	Request []*NatMappingDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NatMappingDeleteRequestMsg) Reset()                    { *m = NatMappingDeleteRequestMsg{} }
func (m *NatMappingDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NatMappingDeleteRequestMsg) ProtoMessage()               {}
func (*NatMappingDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{37} }

func (m *NatMappingDeleteRequestMsg) GetRequest() []*NatMappingDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// NatMappingDeleteResponse is response to NatMappingDeleteRequest
type NatMappingDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *NatMappingDeleteResponse) Reset()                    { *m = NatMappingDeleteResponse{} }
func (m *NatMappingDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*NatMappingDeleteResponse) ProtoMessage()               {}
func (*NatMappingDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{38} }

func (m *NatMappingDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// NatMappingDeleteResponseMsg is batched response to NatMappingDeleteRequestMsg
type NatMappingDeleteResponseMsg struct {
	Response []*NatMappingDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NatMappingDeleteResponseMsg) Reset()                    { *m = NatMappingDeleteResponseMsg{} }
func (m *NatMappingDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NatMappingDeleteResponseMsg) ProtoMessage()               {}
func (*NatMappingDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{39} }

func (m *NatMappingDeleteResponseMsg) GetResponse() []*NatMappingDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NatMappingGetRequest is used to get information about a NAT mapping
type NatMappingGetRequest struct {
	KeyOrHandle *NatMappingKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *NatMappingGetRequest) Reset()                    { *m = NatMappingGetRequest{} }
func (m *NatMappingGetRequest) String() string            { return proto.CompactTextString(m) }
func (*NatMappingGetRequest) ProtoMessage()               {}
func (*NatMappingGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{40} }

func (m *NatMappingGetRequest) GetKeyOrHandle() *NatMappingKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// NatMappingGetRequestMsg is batched GET request for NAT mappings
type NatMappingGetRequestMsg struct {
	Request []*NatMappingGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NatMappingGetRequestMsg) Reset()                    { *m = NatMappingGetRequestMsg{} }
func (m *NatMappingGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NatMappingGetRequestMsg) ProtoMessage()               {}
func (*NatMappingGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{41} }

func (m *NatMappingGetRequestMsg) GetRequest() []*NatMappingGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// NatMappingStats is the statistics object for each NAT mapping
type NatMappingStats struct {
	NumTcpSessions   uint32 `protobuf:"varint,1,opt,name=num_tcp_sessions,json=numTcpSessions" json:"num_tcp_sessions,omitempty"`
	NumUdpSessions   uint32 `protobuf:"varint,2,opt,name=num_udp_sessions,json=numUdpSessions" json:"num_udp_sessions,omitempty"`
	NumOtherSessions uint32 `protobuf:"varint,3,opt,name=num_other_sessions,json=numOtherSessions" json:"num_other_sessions,omitempty"`
}

func (m *NatMappingStats) Reset()                    { *m = NatMappingStats{} }
func (m *NatMappingStats) String() string            { return proto.CompactTextString(m) }
func (*NatMappingStats) ProtoMessage()               {}
func (*NatMappingStats) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{42} }

func (m *NatMappingStats) GetNumTcpSessions() uint32 {
	if m != nil {
		return m.NumTcpSessions
	}
	return 0
}

func (m *NatMappingStats) GetNumUdpSessions() uint32 {
	if m != nil {
		return m.NumUdpSessions
	}
	return 0
}

func (m *NatMappingStats) GetNumOtherSessions() uint32 {
	if m != nil {
		return m.NumOtherSessions
	}
	return 0
}

// NatMappingGetResponse reflects all the information about a NAT mapping
type NatMappingGetResponse struct {
	ApiStatus ApiStatus         `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *NatMappingSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *NatMappingStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *NatMappingStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *NatMappingGetResponse) Reset()                    { *m = NatMappingGetResponse{} }
func (m *NatMappingGetResponse) String() string            { return proto.CompactTextString(m) }
func (*NatMappingGetResponse) ProtoMessage()               {}
func (*NatMappingGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{43} }

func (m *NatMappingGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NatMappingGetResponse) GetSpec() *NatMappingSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *NatMappingGetResponse) GetStatus() *NatMappingStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *NatMappingGetResponse) GetStats() *NatMappingStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// NatMappingGetResponseMsg is batched response to NatMappingGetRequestMsg
type NatMappingGetResponseMsg struct {
	Response []*NatMappingGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NatMappingGetResponseMsg) Reset()                    { *m = NatMappingGetResponseMsg{} }
func (m *NatMappingGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NatMappingGetResponseMsg) ProtoMessage()               {}
func (*NatMappingGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{44} }

func (m *NatMappingGetResponseMsg) GetResponse() []*NatMappingGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*NatPoolSpec)(nil), "halproto.NatPoolSpec")
	proto.RegisterType((*NatPoolRequestMsg)(nil), "halproto.NatPoolRequestMsg")
	proto.RegisterType((*NatPoolStatus)(nil), "halproto.NatPoolStatus")
	proto.RegisterType((*NatPoolResponse)(nil), "halproto.NatPoolResponse")
	proto.RegisterType((*NatPoolResponseMsg)(nil), "halproto.NatPoolResponseMsg")
	proto.RegisterType((*NatPoolDeleteRequest)(nil), "halproto.NatPoolDeleteRequest")
	proto.RegisterType((*NatPoolDeleteRequestMsg)(nil), "halproto.NatPoolDeleteRequestMsg")
	proto.RegisterType((*NatPoolDeleteResponse)(nil), "halproto.NatPoolDeleteResponse")
	proto.RegisterType((*NatPoolDeleteResponseMsg)(nil), "halproto.NatPoolDeleteResponseMsg")
	proto.RegisterType((*NatPoolGetRequest)(nil), "halproto.NatPoolGetRequest")
	proto.RegisterType((*NatPoolGetRequestMsg)(nil), "halproto.NatPoolGetRequestMsg")
	proto.RegisterType((*NatPoolStats)(nil), "halproto.NatPoolStats")
	proto.RegisterType((*NatPoolGetResponse)(nil), "halproto.NatPoolGetResponse")
	proto.RegisterType((*NatPoolGetResponseMsg)(nil), "halproto.NatPoolGetResponseMsg")
	proto.RegisterType((*NatRuleAction)(nil), "halproto.NatRuleAction")
	proto.RegisterType((*NatRuleSpec)(nil), "halproto.NatRuleSpec")
	proto.RegisterType((*NatPolicySpec)(nil), "halproto.NatPolicySpec")
	proto.RegisterType((*NatPolicyRequestMsg)(nil), "halproto.NatPolicyRequestMsg")
	proto.RegisterType((*NatPolicyStatus)(nil), "halproto.NatPolicyStatus")
	proto.RegisterType((*NatPolicyResponse)(nil), "halproto.NatPolicyResponse")
	proto.RegisterType((*NatPolicyResponseMsg)(nil), "halproto.NatPolicyResponseMsg")
	proto.RegisterType((*NatPolicyDeleteRequest)(nil), "halproto.NatPolicyDeleteRequest")
	proto.RegisterType((*NatPolicyDeleteRequestMsg)(nil), "halproto.NatPolicyDeleteRequestMsg")
	proto.RegisterType((*NatPolicyDeleteResponse)(nil), "halproto.NatPolicyDeleteResponse")
	proto.RegisterType((*NatPolicyDeleteResponseMsg)(nil), "halproto.NatPolicyDeleteResponseMsg")
	proto.RegisterType((*NatPolicyGetRequest)(nil), "halproto.NatPolicyGetRequest")
	proto.RegisterType((*NatPolicyGetRequestMsg)(nil), "halproto.NatPolicyGetRequestMsg")
	proto.RegisterType((*NatRuleStats)(nil), "halproto.NatRuleStats")
	proto.RegisterType((*NatPolicyStats)(nil), "halproto.NatPolicyStats")
	proto.RegisterType((*NatPolicyGetResponse)(nil), "halproto.NatPolicyGetResponse")
	proto.RegisterType((*NatPolicyGetResponseMsg)(nil), "halproto.NatPolicyGetResponseMsg")
	proto.RegisterType((*NatMappingSpec)(nil), "halproto.NatMappingSpec")
	proto.RegisterType((*NatMappingRequestMsg)(nil), "halproto.NatMappingRequestMsg")
	proto.RegisterType((*NatMappingStatus)(nil), "halproto.NatMappingStatus")
	proto.RegisterType((*NatMappingResponse)(nil), "halproto.NatMappingResponse")
	proto.RegisterType((*NatMappingResponseMsg)(nil), "halproto.NatMappingResponseMsg")
	proto.RegisterType((*NatMappingDeleteRequest)(nil), "halproto.NatMappingDeleteRequest")
	proto.RegisterType((*NatMappingDeleteRequestMsg)(nil), "halproto.NatMappingDeleteRequestMsg")
	proto.RegisterType((*NatMappingDeleteResponse)(nil), "halproto.NatMappingDeleteResponse")
	proto.RegisterType((*NatMappingDeleteResponseMsg)(nil), "halproto.NatMappingDeleteResponseMsg")
	proto.RegisterType((*NatMappingGetRequest)(nil), "halproto.NatMappingGetRequest")
	proto.RegisterType((*NatMappingGetRequestMsg)(nil), "halproto.NatMappingGetRequestMsg")
	proto.RegisterType((*NatMappingStats)(nil), "halproto.NatMappingStats")
	proto.RegisterType((*NatMappingGetResponse)(nil), "halproto.NatMappingGetResponse")
	proto.RegisterType((*NatMappingGetResponseMsg)(nil), "halproto.NatMappingGetResponseMsg")
	proto.RegisterEnum("halproto.NatAction", NatAction_name, NatAction_value)
}

func init() { proto.RegisterFile("nat.proto", fileDescriptor20) }

var fileDescriptor20 = []byte{
	// 1631 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x4b, 0x6f, 0xdb, 0xc6,
	0x16, 0x36, 0x2d, 0x3f, 0x8f, 0x6d, 0x45, 0x9e, 0x28, 0xb6, 0x6c, 0xcb, 0x91, 0x43, 0x5c, 0x24,
	0xb9, 0x86, 0x2d, 0xe4, 0x2a, 0x37, 0xc1, 0xcd, 0x05, 0xd2, 0xc0, 0xaf, 0xd4, 0x4e, 0x62, 0xd9,
	0xa5, 0x95, 0xa6, 0x69, 0x51, 0xb0, 0x34, 0x39, 0xb6, 0x09, 0x4b, 0x24, 0x4b, 0x52, 0x2d, 0xd4,
	0xc7, 0xae, 0xeb, 0xa2, 0x40, 0x80, 0xa2, 0xbf, 0xa8, 0x8b, 0xee, 0x8a, 0x2e, 0xba, 0x73, 0x17,
	0xdd, 0x75, 0xe9, 0x5f, 0x50, 0xcc, 0x83, 0xe4, 0xf0, 0xa5, 0xa6, 0x81, 0x02, 0x74, 0x65, 0x71,
	0xe6, 0xcc, 0x99, 0x6f, 0xce, 0x7c, 0xe7, 0x7c, 0x33, 0x63, 0x98, 0xb4, 0x34, 0xbf, 0xee, 0xb8,
	0xb6, 0x6f, 0xa3, 0x82, 0xa5, 0xf9, 0x8b, 0x53, 0x7e, 0xcf, 0xc1, 0x1e, 0x6b, 0x59, 0x9c, 0x38,
	0x3f, 0x63, 0xbf, 0xe4, 0x9f, 0x24, 0x98, 0x6a, 0x6a, 0xfe, 0xa1, 0x6d, 0xb7, 0x8f, 0x1c, 0xac,
	0xa3, 0x5d, 0x98, 0x39, 0xc7, 0x3d, 0xd5, 0x76, 0xd5, 0x33, 0xcd, 0x32, 0xda, 0xb8, 0x22, 0xad,
	0x48, 0xb7, 0xa7, 0x1a, 0xe5, 0xfa, 0xf9, 0x59, 0x9d, 0xdb, 0x3d, 0xc5, 0xbd, 0x5d, 0xda, 0xb7,
	0x59, 0xbc, 0xbc, 0xa8, 0xc1, 0x67, 0xd8, 0x32, 0x75, 0xfc, 0xff, 0x73, 0xdc, 0x53, 0xa6, 0xce,
	0x71, 0xef, 0xc0, 0x65, 0x9d, 0xe8, 0x1d, 0x18, 0xd7, 0x0c, 0xc3, 0xc5, 0x9e, 0x57, 0x19, 0x5e,
	0x29, 0xdc, 0x9e, 0x6a, 0x14, 0xeb, 0x0c, 0xc2, 0x06, 0x6b, 0xdd, 0x2c, 0x5f, 0x5e, 0xd4, 0x4a,
	0x7c, 0x74, 0x47, 0xb3, 0x0c, 0xcd, 0xb7, 0xdd, 0x9e, 0x12, 0x0c, 0x42, 0xff, 0x01, 0x70, 0x6c,
	0xd7, 0x57, 0x5d, 0xcd, 0x3a, 0xc5, 0x95, 0x02, 0x85, 0x81, 0xb8, 0x8b, 0x67, 0xff, 0x3d, 0xb4,
	0x5d, 0x5f, 0x21, 0x3d, 0xca, 0xa4, 0x13, 0xfc, 0x94, 0x1f, 0xc1, 0x2c, 0xc7, 0xa8, 0xe0, 0x4f,
	0xbb, 0xd8, 0xf3, 0xf7, 0xbd, 0x53, 0xb4, 0x0a, 0xe3, 0x2e, 0xfb, 0xaa, 0x48, 0x14, 0x47, 0xa9,
	0x4e, 0x42, 0x23, 0x2c, 0x5a, 0x09, 0x0c, 0xe4, 0x3b, 0x30, 0x13, 0xb4, 0xfb, 0x9a, 0xdf, 0xf5,
	0x50, 0x0d, 0xa6, 0x1c, 0xdb, 0x6e, 0x8b, 0xc1, 0x18, 0x53, 0x80, 0x34, 0xb1, 0x55, 0xca, 0xdf,
	0x4a, 0x70, 0x25, 0x9c, 0xd3, 0x73, 0x6c, 0xcb, 0xc3, 0xe8, 0x31, 0x80, 0xe6, 0x98, 0xaa, 0x47,
	0x5d, 0xd0, 0x31, 0xc5, 0x46, 0x29, 0x58, 0xbc, 0x63, 0x32, 0xd7, 0x9b, 0xd7, 0x2e, 0x2f, 0x6a,
	0xb3, 0x7c, 0xf9, 0x91, 0xb9, 0x32, 0xa9, 0x05, 0x16, 0xe8, 0x2e, 0x9f, 0x9c, 0x3b, 0x1a, 0xe6,
	0x21, 0x10, 0xd1, 0xb3, 0x31, 0x14, 0x10, 0xfb, 0x2d, 0x3f, 0x06, 0x94, 0xc0, 0x43, 0x82, 0x70,
	0x07, 0x26, 0x5c, 0xfe, 0xc9, 0xa3, 0x50, 0x16, 0xfd, 0x04, 0xa6, 0x4a, 0x68, 0x25, 0x7f, 0x02,
	0x65, 0xde, 0xb9, 0x8d, 0xdb, 0xd8, 0xc7, 0x3c, 0xa2, 0x83, 0x23, 0x88, 0xdc, 0x84, 0xf9, 0xac,
	0x19, 0x08, 0xdc, 0xbb, 0xc9, 0x3d, 0x5b, 0x10, 0xd1, 0xc6, 0xcc, 0xa3, 0xcd, 0x53, 0xe1, 0x5a,
	0xc2, 0x60, 0xb0, 0xfb, 0x21, 0x2b, 0x50, 0xc9, 0x9c, 0x80, 0x20, 0xbe, 0x9f, 0x0a, 0xf0, 0x62,
	0x16, 0xe4, 0x54, 0x98, 0x3f, 0x0e, 0x29, 0xfb, 0x2e, 0xf6, 0x07, 0x1f, 0xe3, 0xdd, 0x70, 0x17,
	0x23, 0xf7, 0x8c, 0x0f, 0x89, 0x00, 0xcf, 0x89, 0x68, 0x23, 0xdb, 0x28, 0xba, 0x45, 0x98, 0x16,
	0x48, 0xe7, 0xc9, 0xbf, 0x4a, 0x21, 0xd1, 0xa8, 0xf9, 0x80, 0xb9, 0xff, 0x2f, 0x18, 0xf1, 0x1c,
	0xac, 0x73, 0xd2, 0xa7, 0x53, 0x96, 0xf6, 0xa2, 0x55, 0x18, 0xe3, 0x33, 0x15, 0x72, 0x93, 0x83,
	0x5b, 0xa0, 0x5b, 0x30, 0x4a, 0x7e, 0x79, 0x95, 0x11, 0x6a, 0x3a, 0x9b, 0x34, 0xf5, 0x14, 0xd6,
	0x2f, 0x3f, 0x0b, 0x79, 0x24, 0x2c, 0x8c, 0xb1, 0x32, 0xb9, 0xc7, 0xf3, 0xa9, 0xa8, 0xa5, 0x36,
	0xf8, 0x97, 0x02, 0xad, 0x29, 0x4a, 0xb7, 0x8d, 0x37, 0x74, 0xdf, 0xb4, 0x2d, 0xf4, 0x04, 0x8a,
	0x9e, 0xab, 0xab, 0x96, 0xe6, 0xab, 0x1a, 0x6d, 0xe1, 0x61, 0x2a, 0x06, 0xce, 0x98, 0x5d, 0xac,
	0x3e, 0x9a, 0x9d, 0x4e, 0xd7, 0xd7, 0x8e, 0xdb, 0x58, 0x99, 0xf6, 0x5c, 0x3d, 0xb4, 0x21, 0xbe,
	0x0c, 0xcf, 0x17, 0x7d, 0x0d, 0xff, 0x1d, 0x5f, 0x86, 0xe7, 0x47, 0xbe, 0x5e, 0x49, 0x30, 0x1d,
	0x00, 0x23, 0x05, 0x85, 0xc7, 0x34, 0x9b, 0x75, 0x1f, 0x5d, 0x5e, 0xd4, 0x5e, 0x70, 0x87, 0x2e,
	0x3e, 0x59, 0xe3, 0x3f, 0x75, 0xdb, 0xf2, 0x7c, 0x57, 0x33, 0x2d, 0xdf, 0x7b, 0xf8, 0x25, 0x87,
	0x10, 0x2d, 0xbd, 0x1e, 0x5f, 0xf7, 0x8d, 0x87, 0x74, 0xaa, 0xe3, 0x46, 0xbd, 0xb9, 0xd1, 0x52,
	0x5b, 0x2f, 0x0f, 0x77, 0xd4, 0xe6, 0x41, 0x73, 0xe7, 0x6b, 0x05, 0xd8, 0x1a, 0xc9, 0x8c, 0x14,
	0x55, 0xb0, 0x44, 0x8a, 0x6a, 0x64, 0xe0, 0xa8, 0xe2, 0x11, 0xcc, 0x47, 0xc5, 0xa2, 0x45, 0x66,
	0x94, 0xbf, 0xa0, 0xaa, 0x49, 0x7c, 0x50, 0xd5, 0x9c, 0x87, 0x71, 0xb7, 0xdb, 0xc6, 0xaa, 0x69,
	0xd0, 0xbd, 0x1c, 0x51, 0xc6, 0xc8, 0xe7, 0x9e, 0x81, 0x6e, 0xc2, 0x68, 0x47, 0xf3, 0xf5, 0xb3,
	0x90, 0xc7, 0x2c, 0x13, 0xc8, 0xc0, 0x7d, 0xd2, 0xae, 0xb0, 0x6e, 0x42, 0x64, 0xbe, 0x7f, 0x09,
	0x22, 0x47, 0x30, 0x15, 0x6e, 0x21, 0xbf, 0x92, 0xb8, 0x4a, 0xb5, 0x4d, 0xbd, 0x47, 0xa7, 0x7f,
	0x92, 0x5d, 0x2f, 0xe6, 0xc2, 0x18, 0x11, 0xcb, 0xd7, 0x94, 0xed, 0xfb, 0x30, 0x4a, 0xb0, 0x07,
	0xa2, 0x5d, 0x12, 0x81, 0x90, 0xc9, 0x62, 0xa3, 0x5d, 0x7c, 0xa2, 0x30, 0x73, 0x79, 0x0b, 0xae,
	0x86, 0x53, 0x09, 0x85, 0x66, 0x2d, 0x59, 0x68, 0x84, 0x14, 0x0d, 0xf0, 0x47, 0x45, 0xe6, 0x21,
	0x17, 0x53, 0xda, 0xc3, 0xd2, 0x76, 0x15, 0x66, 0xd9, 0xd6, 0x93, 0xb6, 0xb8, 0x0e, 0x5f, 0xb1,
	0x02, 0x5b, 0x5e, 0xed, 0xbe, 0x97, 0x78, 0x35, 0x65, 0x20, 0x06, 0x5c, 0x92, 0x1e, 0xc0, 0x0c,
	0x47, 0x11, 0x13, 0xe4, 0x72, 0x62, 0x41, 0x6c, 0xdc, 0xb4, 0x23, 0x7c, 0xc9, 0x4f, 0x78, 0x19,
	0x16, 0x71, 0x91, 0xe8, 0x34, 0x52, 0x15, 0x65, 0x2e, 0xee, 0x2d, 0xa3, 0xa0, 0x18, 0x30, 0x17,
	0x76, 0xc7, 0xa5, 0x79, 0x80, 0x34, 0x90, 0x15, 0x58, 0xc8, 0x9e, 0x85, 0xc0, 0xbe, 0x97, 0xdc,
	0xd4, 0xa5, 0x38, 0xea, 0x1c, 0x81, 0xd6, 0xb8, 0xe0, 0x8b, 0x26, 0x03, 0x96, 0xe8, 0xf7, 0x61,
	0x31, 0x67, 0x0a, 0x82, 0xfb, 0x7f, 0xa9, 0x70, 0x57, 0xb3, 0x81, 0xa7, 0x82, 0xae, 0x09, 0xec,
	0x16, 0x84, 0x7a, 0x90, 0x11, 0x7f, 0x26, 0xec, 0x6b, 0x5c, 0xac, 0x1b, 0xc9, 0x70, 0x57, 0xe2,
	0xa8, 0xb3, 0xe4, 0xfa, 0x3b, 0x89, 0xea, 0x35, 0xcd, 0x5a, 0xa2, 0x6a, 0xe8, 0x36, 0x94, 0xac,
	0x6e, 0x47, 0xf5, 0x75, 0x47, 0xf5, 0xb0, 0xe7, 0x99, 0xb6, 0xc5, 0xe2, 0x3c, 0xa3, 0x14, 0xad,
	0x6e, 0xa7, 0xa5, 0x3b, 0x47, 0xbc, 0x35, 0xb0, 0xec, 0x1a, 0x82, 0xe5, 0x70, 0x68, 0xf9, 0xdc,
	0x88, 0x2c, 0xd7, 0x00, 0x11, 0x4b, 0xdb, 0x3f, 0xc3, 0x6e, 0x64, 0x5b, 0xa0, 0xb6, 0xc4, 0xc7,
	0x01, 0xe9, 0x08, 0xac, 0xe5, 0x07, 0x50, 0x8c, 0x65, 0x89, 0x20, 0xc9, 0x6c, 0x59, 0xb3, 0xb1,
	0x5a, 0x23, 0x4a, 0xf2, 0x6f, 0x92, 0x90, 0x40, 0x6f, 0xe3, 0xb8, 0x71, 0x33, 0x76, 0xdc, 0xc8,
	0xaa, 0x51, 0xec, 0xc0, 0xb1, 0x96, 0x38, 0x70, 0x64, 0x27, 0x7f, 0x70, 0xe4, 0xf8, 0x77, 0xfc,
	0xc8, 0x71, 0x35, 0x6d, 0x1c, 0xae, 0xf0, 0x50, 0xc8, 0x8d, 0xc4, 0xb1, 0xe3, 0x5e, 0x8a, 0xb5,
	0x0b, 0x19, 0xfb, 0x9f, 0xa2, 0xec, 0x8f, 0x12, 0x8d, 0xf7, 0xbe, 0xe6, 0x38, 0xa6, 0x75, 0x4a,
	0x75, 0xe2, 0x69, 0x36, 0x5d, 0xe7, 0x39, 0x5d, 0xb9, 0xe9, 0x6b, 0x0a, 0xc5, 0x7b, 0x30, 0x11,
	0x6a, 0xf2, 0x70, 0x1f, 0x4d, 0x5e, 0xb9, 0xbc, 0xa8, 0x55, 0x93, 0xd7, 0xbc, 0xb5, 0x15, 0x41,
	0x41, 0xc6, 0x2d, 0xae, 0xf5, 0x65, 0x18, 0x3d, 0x36, 0x0d, 0xd3, 0xa5, 0xc1, 0x9d, 0x50, 0xd8,
	0x87, 0xbc, 0x43, 0xf7, 0x9e, 0x83, 0x13, 0xd2, 0x62, 0x3d, 0x99, 0x16, 0x61, 0x7c, 0x85, 0x35,
	0x47, 0x19, 0xf1, 0x83, 0x04, 0x25, 0xa1, 0x8f, 0xed, 0xd0, 0x1c, 0x8c, 0xc5, 0x24, 0x85, 0x7f,
	0xa1, 0x75, 0x98, 0xec, 0x68, 0x8e, 0x83, 0x0d, 0xd5, 0x74, 0x12, 0xda, 0xbd, 0x77, 0xc8, 0x2f,
	0xb0, 0xca, 0x04, 0x33, 0xd9, 0x73, 0xd0, 0x75, 0x00, 0xdd, 0xb6, 0x4e, 0xcc, 0xd3, 0xae, 0x8b,
	0x0d, 0x8e, 0x5e, 0x68, 0x41, 0xcb, 0x00, 0x27, 0x6d, 0xfb, 0x73, 0x55, 0xb7, 0xbb, 0x96, 0x4f,
	0xd9, 0x30, 0xa3, 0x4c, 0x92, 0x96, 0x2d, 0xd2, 0x20, 0x7f, 0xc3, 0xce, 0xd2, 0xe1, 0x12, 0x39,
	0xb9, 0x1f, 0xbd, 0x16, 0xb9, 0x8b, 0x7f, 0x5c, 0xd4, 0x20, 0x9b, 0xd5, 0xeb, 0x21, 0x5b, 0xd9,
	0x12, 0xae, 0x25, 0x03, 0x14, 0xa3, 0x2b, 0x3f, 0xf8, 0x26, 0x50, 0xfc, 0xc5, 0xc1, 0x37, 0x61,
	0x2d, 0xf0, 0xef, 0x84, 0x32, 0x9a, 0xf7, 0xc7, 0x85, 0x6a, 0x90, 0x3c, 0x94, 0x5b, 0xb4, 0xe4,
	0x67, 0xcd, 0xc3, 0xee, 0x65, 0x09, 0x92, 0x54, 0x13, 0xc8, 0x73, 0xb4, 0xea, 0x98, 0xde, 0xf5,
	0x12, 0x36, 0x03, 0x16, 0xab, 0x0f, 0x60, 0x29, 0x6f, 0x0e, 0x02, 0xfd, 0x41, 0x2a, 0xea, 0xcb,
	0x39, 0xd8, 0x53, 0xb1, 0xd7, 0xc5, 0x94, 0x11, 0xf4, 0x6a, 0xa0, 0x81, 0x6f, 0x8a, 0x1b, 0x1c,
	0x57, 0xac, 0xfc, 0xfb, 0x7b, 0xca, 0x3c, 0x0a, 0xf9, 0x2b, 0xf6, 0x94, 0x22, 0x70, 0xf3, 0x9f,
	0xa0, 0x5a, 0xbf, 0x4b, 0x62, 0x56, 0xbc, 0x0d, 0xed, 0xb9, 0x15, 0xd3, 0x9e, 0xcc, 0x22, 0xc6,
	0xc4, 0x67, 0x3d, 0x21, 0x3e, 0xfd, 0xd3, 0x19, 0xad, 0xc6, 0xd5, 0xa7, 0x9c, 0x61, 0x1d, 0xca,
	0x8f, 0x22, 0xd2, 0x3d, 0xa1, 0x3f, 0x7d, 0x9e, 0x36, 0xd2, 0x03, 0x22, 0x12, 0xae, 0x7e, 0x05,
	0x93, 0xd1, 0xe5, 0x72, 0x16, 0x66, 0x62, 0xd7, 0xa9, 0xd2, 0x10, 0x5a, 0x82, 0xf9, 0xb0, 0xe9,
	0xa8, 0xb5, 0xd1, 0xda, 0xdb, 0x52, 0x37, 0xb6, 0xb7, 0x95, 0x9d, 0xa3, 0xa3, 0x92, 0x84, 0xaa,
	0x50, 0x09, 0x3b, 0xb7, 0x5f, 0x36, 0x37, 0xf6, 0x85, 0xde, 0x61, 0x74, 0x03, 0x96, 0xf3, 0x7a,
	0xd5, 0xc3, 0x03, 0xa5, 0x55, 0x2a, 0x34, 0x7e, 0x1e, 0x83, 0x42, 0x53, 0xf3, 0xd1, 0x66, 0xf8,
	0xa4, 0xb7, 0xe5, 0x62, 0xcd, 0xc7, 0x68, 0x2e, 0xfe, 0xf0, 0x15, 0x70, 0x76, 0x71, 0x3e, 0xeb,
	0x41, 0x6c, 0xdf, 0x3b, 0x95, 0x87, 0x04, 0x1f, 0xcf, 0x1d, 0xe3, 0x0d, 0x7d, 0x34, 0x43, 0x1f,
	0x2c, 0x6b, 0x51, 0x35, 0xf7, 0x49, 0x8b, 0x78, 0x5a, 0xce, 0x7f, 0x3d, 0x62, 0xfe, 0x76, 0x00,
	0xa2, 0x77, 0x07, 0xb4, 0x90, 0xfd, 0x7c, 0x43, 0x3c, 0x2d, 0xe6, 0xbc, 0x51, 0x30, 0x37, 0xbb,
	0xc2, 0x8d, 0x8b, 0x07, 0xa8, 0x92, 0xbc, 0x82, 0x84, 0xae, 0x16, 0xb2, 0x2f, 0x27, 0x69, 0x4f,
	0x3c, 0x4c, 0x6f, 0xe8, 0xa9, 0x25, 0x78, 0xe2, 0xc1, 0xba, 0xde, 0xe7, 0x82, 0x41, 0xfc, 0xd5,
	0xfa, 0x9d, 0xe3, 0x99, 0xd7, 0xa7, 0xfc, 0x01, 0x8b, 0x9f, 0x98, 0xd0, 0x52, 0xde, 0x21, 0x9a,
	0xf8, 0xab, 0xe6, 0x9e, 0xb0, 0x02, 0x67, 0xc2, 0x59, 0x82, 0xc7, 0x6d, 0x21, 0xa5, 0x89, 0xe9,
	0x3d, 0x48, 0x8b, 0xab, 0x3c, 0x84, 0x5e, 0x88, 0xce, 0xf8, 0x82, 0x6b, 0xfd, 0x64, 0x8a, 0xb8,
	0x5c, 0xe9, 0xab, 0x05, 0x22, 0xe7, 0xa2, 0x24, 0x45, 0xd5, 0xdc, 0x32, 0x1c, 0xe3, 0x5c, 0x66,
	0x1d, 0x90, 0x87, 0x36, 0xe1, 0xc3, 0x89, 0x33, 0xad, 0x4d, 0xff, 0x71, 0x70, 0x3c, 0x46, 0xff,
	0xdc, 0xfd, 0x33, 0x00, 0x00, 0xff, 0xff, 0x25, 0xdf, 0x71, 0x61, 0x68, 0x18, 0x00, 0x00,
}
