// Code generated by protoc-gen-go. DO NOT EDIT.
// source: endpoint.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MigrationState int32

const (
	MigrationState_NONE        MigrationState = 0
	MigrationState_IN_PROGRESS MigrationState = 1
	MigrationState_SUCCESS     MigrationState = 2
	MigrationState_FAILED      MigrationState = 3
	MigrationState_ABORTED     MigrationState = 4
)

var MigrationState_name = map[int32]string{
	0: "NONE",
	1: "IN_PROGRESS",
	2: "SUCCESS",
	3: "FAILED",
	4: "ABORTED",
}
var MigrationState_value = map[string]int32{
	"NONE":        0,
	"IN_PROGRESS": 1,
	"SUCCESS":     2,
	"FAILED":      3,
	"ABORTED":     4,
}

func (x MigrationState) String() string {
	return proto.EnumName(MigrationState_name, int32(x))
}
func (MigrationState) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type EndpointAttributes struct {
	InterfaceKeyHandle *InterfaceKeyHandle       `protobuf:"bytes,1,opt,name=interface_key_handle,json=interfaceKeyHandle" json:"interface_key_handle,omitempty"`
	UsegVlan           uint32                    `protobuf:"varint,2,opt,name=useg_vlan,json=usegVlan" json:"useg_vlan,omitempty"`
	IpAddress          []*IPAddress              `protobuf:"bytes,3,rep,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	SgKeyHandle        []*SecurityGroupKeyHandle `protobuf:"bytes,4,rep,name=sg_key_handle,json=sgKeyHandle" json:"sg_key_handle,omitempty"`
	OldHomingHostIp    *IPAddress                `protobuf:"bytes,5,opt,name=old_homing_host_ip,json=oldHomingHostIp" json:"old_homing_host_ip,omitempty"`
	VmotionState       MigrationState            `protobuf:"varint,6,opt,name=vmotion_state,json=vmotionState,enum=endpoint.MigrationState" json:"vmotion_state,omitempty"`
}

func (m *EndpointAttributes) Reset()                    { *m = EndpointAttributes{} }
func (m *EndpointAttributes) String() string            { return proto.CompactTextString(m) }
func (*EndpointAttributes) ProtoMessage()               {}
func (*EndpointAttributes) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *EndpointAttributes) GetInterfaceKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.InterfaceKeyHandle
	}
	return nil
}

func (m *EndpointAttributes) GetUsegVlan() uint32 {
	if m != nil {
		return m.UsegVlan
	}
	return 0
}

func (m *EndpointAttributes) GetIpAddress() []*IPAddress {
	if m != nil {
		return m.IpAddress
	}
	return nil
}

func (m *EndpointAttributes) GetSgKeyHandle() []*SecurityGroupKeyHandle {
	if m != nil {
		return m.SgKeyHandle
	}
	return nil
}

func (m *EndpointAttributes) GetOldHomingHostIp() *IPAddress {
	if m != nil {
		return m.OldHomingHostIp
	}
	return nil
}

func (m *EndpointAttributes) GetVmotionState() MigrationState {
	if m != nil {
		return m.VmotionState
	}
	return MigrationState_NONE
}

// EndpointSpec is used to add or update an endpoint
type EndpointSpec struct {
	Meta          *delphi.ObjectMeta  `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle   *EndpointKeyHandle  `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	VrfKeyHandle  *VrfKeyHandle       `protobuf:"bytes,3,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
	EndpointAttrs *EndpointAttributes `protobuf:"bytes,4,opt,name=endpoint_attrs,json=endpointAttrs" json:"endpoint_attrs,omitempty"`
}

func (m *EndpointSpec) GetDelphiMessage() proto.Message {
	return m
}

func (m *EndpointSpec) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *EndpointSpec) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *EndpointSpec) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *EndpointSpec) GetDelphiKind() string {
	return "EndpointSpec"
}

func (m *EndpointSpec) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *EndpointSpec) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*EndpointSpec)
	return obj
}

func EndpointSpecMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("EndpointSpec", mode)
}

func EndpointSpecMountKey(client clientApi.Client, key *EndpointKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("EndpointSpec", key.String(), mode)
}

func GetEndpointSpec(client clientApi.Client, key *EndpointKeyHandle) *EndpointSpec {
	o := client.GetObject("EndpointSpec", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*EndpointSpec)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func (m *EndpointSpec) IsPersistent() bool {
	return false
}
func EndpointSpecFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg EndpointSpec
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func EndpointSpecWatch(client clientApi.Client, reactor EndpointSpecReactor) {
	client.WatchKind("EndpointSpec", reactor)
}
func EndpointSpecList(client clientApi.Client) []*EndpointSpec {
	bobjs := client.List("EndpointSpec")
	objs := make([]*EndpointSpec, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*EndpointSpec)
		objs = append(objs, obj)
	}
	return objs
}
func (m *EndpointSpec) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(EndpointSpecReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnEndpointSpecCreate(m)
			} else {
				oldObj, ok := old.(*EndpointSpec)
				if ok == false {
					panic("Not an EndpointSpec object")
				}
				rctr.OnEndpointSpecUpdate(oldObj, m)
			}
		} else {
			rctr.OnEndpointSpecDelete(m)
		}
	}
}

type EndpointSpecReactor interface {
	OnEndpointSpecCreate(obj *EndpointSpec)
	OnEndpointSpecUpdate(old *EndpointSpec, obj *EndpointSpec)
	OnEndpointSpecDelete(obj *EndpointSpec)
}

func (m *EndpointSpec) Reset()                    { *m = EndpointSpec{} }
func (m *EndpointSpec) String() string            { return proto.CompactTextString(m) }
func (*EndpointSpec) ProtoMessage()               {}
func (*EndpointSpec) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *EndpointSpec) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *EndpointSpec) GetKeyOrHandle() *EndpointKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *EndpointSpec) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

func (m *EndpointSpec) GetEndpointAttrs() *EndpointAttributes {
	if m != nil {
		return m.EndpointAttrs
	}
	return nil
}

// EndpointRequestMsg is batched add or modify endpoint request
type EndpointRequestMsg struct {
	Request []*EndpointSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *EndpointRequestMsg) Reset()                    { *m = EndpointRequestMsg{} }
func (m *EndpointRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*EndpointRequestMsg) ProtoMessage()               {}
func (*EndpointRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *EndpointRequestMsg) GetRequest() []*EndpointSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// Endpoint IP address information.
type EndpointIpAddress struct {
	IpAddress         *IPAddress     `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	LearnSourceDhcp   bool           `protobuf:"varint,2,opt,name=learn_source_dhcp,json=learnSourceDhcp" json:"learn_source_dhcp,omitempty"`
	LearnSourceArp    bool           `protobuf:"varint,3,opt,name=learn_source_arp,json=learnSourceArp" json:"learn_source_arp,omitempty"`
	LearnSourceRarp   bool           `protobuf:"varint,4,opt,name=learn_source_rarp,json=learnSourceRarp" json:"learn_source_rarp,omitempty"`
	LearnSourceConfig bool           `protobuf:"varint,5,opt,name=learn_source_config,json=learnSourceConfig" json:"learn_source_config,omitempty"`
	LearnStatus       *EplearnStatus `protobuf:"bytes,6,opt,name=learn_status,json=learnStatus" json:"learn_status,omitempty"`
	IpsgTblIdx        uint32         `protobuf:"varint,7,opt,name=ipsg_tbl_idx,json=ipsgTblIdx" json:"ipsg_tbl_idx,omitempty"`
}

func (m *EndpointIpAddress) Reset()                    { *m = EndpointIpAddress{} }
func (m *EndpointIpAddress) String() string            { return proto.CompactTextString(m) }
func (*EndpointIpAddress) ProtoMessage()               {}
func (*EndpointIpAddress) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *EndpointIpAddress) GetIpAddress() *IPAddress {
	if m != nil {
		return m.IpAddress
	}
	return nil
}

func (m *EndpointIpAddress) GetLearnSourceDhcp() bool {
	if m != nil {
		return m.LearnSourceDhcp
	}
	return false
}

func (m *EndpointIpAddress) GetLearnSourceArp() bool {
	if m != nil {
		return m.LearnSourceArp
	}
	return false
}

func (m *EndpointIpAddress) GetLearnSourceRarp() bool {
	if m != nil {
		return m.LearnSourceRarp
	}
	return false
}

func (m *EndpointIpAddress) GetLearnSourceConfig() bool {
	if m != nil {
		return m.LearnSourceConfig
	}
	return false
}

func (m *EndpointIpAddress) GetLearnStatus() *EplearnStatus {
	if m != nil {
		return m.LearnStatus
	}
	return nil
}

func (m *EndpointIpAddress) GetIpsgTblIdx() uint32 {
	if m != nil {
		return m.IpsgTblIdx
	}
	return 0
}

type EndpointStatusEpd struct {
	RegMacTblIdx uint32   `protobuf:"varint,1,opt,name=reg_mac_tbl_idx,json=regMacTblIdx" json:"reg_mac_tbl_idx,omitempty"`
	RwTblIdx     []uint32 `protobuf:"varint,2,rep,packed,name=rw_tbl_idx,json=rwTblIdx" json:"rw_tbl_idx,omitempty"`
}

func (m *EndpointStatusEpd) Reset()                    { *m = EndpointStatusEpd{} }
func (m *EndpointStatusEpd) String() string            { return proto.CompactTextString(m) }
func (*EndpointStatusEpd) ProtoMessage()               {}
func (*EndpointStatusEpd) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *EndpointStatusEpd) GetRegMacTblIdx() uint32 {
	if m != nil {
		return m.RegMacTblIdx
	}
	return 0
}

func (m *EndpointStatusEpd) GetRwTblIdx() []uint32 {
	if m != nil {
		return m.RwTblIdx
	}
	return nil
}

type EndpointStatusCpd struct {
}

func (m *EndpointStatusCpd) Reset()                    { *m = EndpointStatusCpd{} }
func (m *EndpointStatusCpd) String() string            { return proto.CompactTextString(m) }
func (*EndpointStatusCpd) ProtoMessage()               {}
func (*EndpointStatusCpd) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

// EndpointStatus has the current status of an endpoint
// TODO: capturing aging information, if any
type EndpointStatus struct {
	Meta                        *delphi.ObjectMeta   `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle                 *EndpointKeyHandle   `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	EnicPinnedUplinkIfKeyHandle *InterfaceKeyHandle  `protobuf:"bytes,3,opt,name=enic_pinned_uplink_if_key_handle,json=enicPinnedUplinkIfKeyHandle" json:"enic_pinned_uplink_if_key_handle,omitempty"`
	IpAddress                   []*EndpointIpAddress `protobuf:"bytes,4,rep,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	IsEndpointLocal             bool                 `protobuf:"varint,5,opt,name=is_endpoint_local,json=isEndpointLocal" json:"is_endpoint_local,omitempty"`
	LearnSourceConfig           bool                 `protobuf:"varint,6,opt,name=learn_source_config,json=learnSourceConfig" json:"learn_source_config,omitempty"`
	// Types that are valid to be assigned to EpPdStatus:
	//	*EndpointStatus_EpdStatus
	//	*EndpointStatus_CpdStatus
	EpPdStatus isEndpointStatus_EpPdStatus `protobuf_oneof:"ep_pd_status"`
}

func (m *EndpointStatus) GetDelphiMessage() proto.Message {
	return m
}

func (m *EndpointStatus) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *EndpointStatus) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *EndpointStatus) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *EndpointStatus) GetDelphiKind() string {
	return "EndpointStatus"
}

func (m *EndpointStatus) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *EndpointStatus) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*EndpointStatus)
	return obj
}

func EndpointStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("EndpointStatus", mode)
}

func EndpointStatusMountKey(client clientApi.Client, key *EndpointKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("EndpointStatus", key.String(), mode)
}

func GetEndpointStatus(client clientApi.Client, key *EndpointKeyHandle) *EndpointStatus {
	o := client.GetObject("EndpointStatus", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*EndpointStatus)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func (m *EndpointStatus) IsPersistent() bool {
	return false
}
func EndpointStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg EndpointStatus
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func EndpointStatusWatch(client clientApi.Client, reactor EndpointStatusReactor) {
	client.WatchKind("EndpointStatus", reactor)
}
func EndpointStatusList(client clientApi.Client) []*EndpointStatus {
	bobjs := client.List("EndpointStatus")
	objs := make([]*EndpointStatus, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*EndpointStatus)
		objs = append(objs, obj)
	}
	return objs
}
func (m *EndpointStatus) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(EndpointStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnEndpointStatusCreate(m)
			} else {
				oldObj, ok := old.(*EndpointStatus)
				if ok == false {
					panic("Not an EndpointStatus object")
				}
				rctr.OnEndpointStatusUpdate(oldObj, m)
			}
		} else {
			rctr.OnEndpointStatusDelete(m)
		}
	}
}

type EndpointStatusReactor interface {
	OnEndpointStatusCreate(obj *EndpointStatus)
	OnEndpointStatusUpdate(old *EndpointStatus, obj *EndpointStatus)
	OnEndpointStatusDelete(obj *EndpointStatus)
}

func (m *EndpointStatus) Reset()                    { *m = EndpointStatus{} }
func (m *EndpointStatus) String() string            { return proto.CompactTextString(m) }
func (*EndpointStatus) ProtoMessage()               {}
func (*EndpointStatus) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

type isEndpointStatus_EpPdStatus interface{ isEndpointStatus_EpPdStatus() }

type EndpointStatus_EpdStatus struct {
	EpdStatus *EndpointStatusEpd `protobuf:"bytes,7,opt,name=epd_status,json=epdStatus,oneof"`
}
type EndpointStatus_CpdStatus struct {
	CpdStatus *EndpointStatusCpd `protobuf:"bytes,8,opt,name=cpd_status,json=cpdStatus,oneof"`
}

func (*EndpointStatus_EpdStatus) isEndpointStatus_EpPdStatus() {}
func (*EndpointStatus_CpdStatus) isEndpointStatus_EpPdStatus() {}

func (m *EndpointStatus) GetEpPdStatus() isEndpointStatus_EpPdStatus {
	if m != nil {
		return m.EpPdStatus
	}
	return nil
}

func (m *EndpointStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *EndpointStatus) GetKeyOrHandle() *EndpointKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *EndpointStatus) GetEnicPinnedUplinkIfKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.EnicPinnedUplinkIfKeyHandle
	}
	return nil
}

func (m *EndpointStatus) GetIpAddress() []*EndpointIpAddress {
	if m != nil {
		return m.IpAddress
	}
	return nil
}

func (m *EndpointStatus) GetIsEndpointLocal() bool {
	if m != nil {
		return m.IsEndpointLocal
	}
	return false
}

func (m *EndpointStatus) GetLearnSourceConfig() bool {
	if m != nil {
		return m.LearnSourceConfig
	}
	return false
}

func (m *EndpointStatus) GetEpdStatus() *EndpointStatusEpd {
	if x, ok := m.GetEpPdStatus().(*EndpointStatus_EpdStatus); ok {
		return x.EpdStatus
	}
	return nil
}

func (m *EndpointStatus) GetCpdStatus() *EndpointStatusCpd {
	if x, ok := m.GetEpPdStatus().(*EndpointStatus_CpdStatus); ok {
		return x.CpdStatus
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EndpointStatus) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EndpointStatus_OneofMarshaler, _EndpointStatus_OneofUnmarshaler, _EndpointStatus_OneofSizer, []interface{}{
		(*EndpointStatus_EpdStatus)(nil),
		(*EndpointStatus_CpdStatus)(nil),
	}
}

func _EndpointStatus_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EndpointStatus)
	// ep_pd_status
	switch x := m.EpPdStatus.(type) {
	case *EndpointStatus_EpdStatus:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EpdStatus); err != nil {
			return err
		}
	case *EndpointStatus_CpdStatus:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CpdStatus); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EndpointStatus.EpPdStatus has unexpected type %T", x)
	}
	return nil
}

func _EndpointStatus_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EndpointStatus)
	switch tag {
	case 7: // ep_pd_status.epd_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EndpointStatusEpd)
		err := b.DecodeMessage(msg)
		m.EpPdStatus = &EndpointStatus_EpdStatus{msg}
		return true, err
	case 8: // ep_pd_status.cpd_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EndpointStatusCpd)
		err := b.DecodeMessage(msg)
		m.EpPdStatus = &EndpointStatus_CpdStatus{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EndpointStatus_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EndpointStatus)
	// ep_pd_status
	switch x := m.EpPdStatus.(type) {
	case *EndpointStatus_EpdStatus:
		s := proto.Size(x.EpdStatus)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EndpointStatus_CpdStatus:
		s := proto.Size(x.CpdStatus)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// EndpointResponse is response to EndpointSpec
type EndpointResponse struct {
	ApiStatus      ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	EndpointStatus *EndpointStatus `protobuf:"bytes,2,opt,name=endpoint_status,json=endpointStatus" json:"endpoint_status,omitempty"`
}

func (m *EndpointResponse) Reset()                    { *m = EndpointResponse{} }
func (m *EndpointResponse) String() string            { return proto.CompactTextString(m) }
func (*EndpointResponse) ProtoMessage()               {}
func (*EndpointResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *EndpointResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *EndpointResponse) GetEndpointStatus() *EndpointStatus {
	if m != nil {
		return m.EndpointStatus
	}
	return nil
}

// EndpointResponseMsg is batched response to EndpointRequestMsg
type EndpointResponseMsg struct {
	Response []*EndpointResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *EndpointResponseMsg) Reset()                    { *m = EndpointResponseMsg{} }
func (m *EndpointResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*EndpointResponseMsg) ProtoMessage()               {}
func (*EndpointResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *EndpointResponseMsg) GetResponse() []*EndpointResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Endpoint Update message
type EndpointUpdateRequest struct {
	// key_or_handle is used to identify an endpoint uniquely
	KeyOrHandle   *EndpointKeyHandle  `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	VrfKeyHandle  *VrfKeyHandle       `protobuf:"bytes,2,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
	EndpointAttrs *EndpointAttributes `protobuf:"bytes,3,opt,name=endpoint_attrs,json=endpointAttrs" json:"endpoint_attrs,omitempty"`
}

func (m *EndpointUpdateRequest) Reset()                    { *m = EndpointUpdateRequest{} }
func (m *EndpointUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*EndpointUpdateRequest) ProtoMessage()               {}
func (*EndpointUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *EndpointUpdateRequest) GetKeyOrHandle() *EndpointKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *EndpointUpdateRequest) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

func (m *EndpointUpdateRequest) GetEndpointAttrs() *EndpointAttributes {
	if m != nil {
		return m.EndpointAttrs
	}
	return nil
}

// EndpointUpdateRequestMsg is batched endpoint update request
type EndpointUpdateRequestMsg struct {
	Request []*EndpointUpdateRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *EndpointUpdateRequestMsg) Reset()                    { *m = EndpointUpdateRequestMsg{} }
func (m *EndpointUpdateRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*EndpointUpdateRequestMsg) ProtoMessage()               {}
func (*EndpointUpdateRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *EndpointUpdateRequestMsg) GetRequest() []*EndpointUpdateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// EndpointUpdateResponseMsg is used to update a batch of Endpoints
type EndpointUpdateResponseMsg struct {
	Response []*EndpointResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *EndpointUpdateResponseMsg) Reset()                    { *m = EndpointUpdateResponseMsg{} }
func (m *EndpointUpdateResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*EndpointUpdateResponseMsg) ProtoMessage()               {}
func (*EndpointUpdateResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *EndpointUpdateResponseMsg) GetResponse() []*EndpointResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// EndpointFilter is attributes by which endpoints can be manipulated
// or queried. As the endpoint database can be huge, this is provided
// so that agent and HAL are less chatty when doing bulk deletes (e.g.
// when a L2 segment is deleted or interfae goes down etc.)
type EndpointFilter struct {
	VrfKeyHandle       *VrfKeyHandle       `protobuf:"bytes,1,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
	InterfaceKeyHandle *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=interface_key_handle,json=interfaceKeyHandle" json:"interface_key_handle,omitempty"`
	L2SegmentKeyHandle *L2SegmentKeyHandle `protobuf:"bytes,3,opt,name=l2Segment_key_handle,json=l2SegmentKeyHandle" json:"l2Segment_key_handle,omitempty"`
}

func (m *EndpointFilter) Reset()                    { *m = EndpointFilter{} }
func (m *EndpointFilter) String() string            { return proto.CompactTextString(m) }
func (*EndpointFilter) ProtoMessage()               {}
func (*EndpointFilter) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *EndpointFilter) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

func (m *EndpointFilter) GetInterfaceKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.InterfaceKeyHandle
	}
	return nil
}

func (m *EndpointFilter) GetL2SegmentKeyHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.L2SegmentKeyHandle
	}
	return nil
}

// EndpointDeleteRequest is used to delete an endpoint
type EndpointDeleteRequest struct {
	// Types that are valid to be assigned to DeleteBy:
	//	*EndpointDeleteRequest_KeyOrHandle
	//	*EndpointDeleteRequest_Filter
	DeleteBy     isEndpointDeleteRequest_DeleteBy `protobuf_oneof:"delete_by"`
	VrfKeyHandle *VrfKeyHandle                    `protobuf:"bytes,3,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
}

func (m *EndpointDeleteRequest) Reset()                    { *m = EndpointDeleteRequest{} }
func (m *EndpointDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*EndpointDeleteRequest) ProtoMessage()               {}
func (*EndpointDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

type isEndpointDeleteRequest_DeleteBy interface{ isEndpointDeleteRequest_DeleteBy() }

type EndpointDeleteRequest_KeyOrHandle struct {
	KeyOrHandle *EndpointKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle,oneof"`
}
type EndpointDeleteRequest_Filter struct {
	Filter *EndpointFilter `protobuf:"bytes,2,opt,name=filter,oneof"`
}

func (*EndpointDeleteRequest_KeyOrHandle) isEndpointDeleteRequest_DeleteBy() {}
func (*EndpointDeleteRequest_Filter) isEndpointDeleteRequest_DeleteBy()      {}

func (m *EndpointDeleteRequest) GetDeleteBy() isEndpointDeleteRequest_DeleteBy {
	if m != nil {
		return m.DeleteBy
	}
	return nil
}

func (m *EndpointDeleteRequest) GetKeyOrHandle() *EndpointKeyHandle {
	if x, ok := m.GetDeleteBy().(*EndpointDeleteRequest_KeyOrHandle); ok {
		return x.KeyOrHandle
	}
	return nil
}

func (m *EndpointDeleteRequest) GetFilter() *EndpointFilter {
	if x, ok := m.GetDeleteBy().(*EndpointDeleteRequest_Filter); ok {
		return x.Filter
	}
	return nil
}

func (m *EndpointDeleteRequest) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EndpointDeleteRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EndpointDeleteRequest_OneofMarshaler, _EndpointDeleteRequest_OneofUnmarshaler, _EndpointDeleteRequest_OneofSizer, []interface{}{
		(*EndpointDeleteRequest_KeyOrHandle)(nil),
		(*EndpointDeleteRequest_Filter)(nil),
	}
}

func _EndpointDeleteRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EndpointDeleteRequest)
	// delete_by
	switch x := m.DeleteBy.(type) {
	case *EndpointDeleteRequest_KeyOrHandle:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KeyOrHandle); err != nil {
			return err
		}
	case *EndpointDeleteRequest_Filter:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Filter); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EndpointDeleteRequest.DeleteBy has unexpected type %T", x)
	}
	return nil
}

func _EndpointDeleteRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EndpointDeleteRequest)
	switch tag {
	case 1: // delete_by.key_or_handle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EndpointKeyHandle)
		err := b.DecodeMessage(msg)
		m.DeleteBy = &EndpointDeleteRequest_KeyOrHandle{msg}
		return true, err
	case 2: // delete_by.filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EndpointFilter)
		err := b.DecodeMessage(msg)
		m.DeleteBy = &EndpointDeleteRequest_Filter{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EndpointDeleteRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EndpointDeleteRequest)
	// delete_by
	switch x := m.DeleteBy.(type) {
	case *EndpointDeleteRequest_KeyOrHandle:
		s := proto.Size(x.KeyOrHandle)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EndpointDeleteRequest_Filter:
		s := proto.Size(x.Filter)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// EndpointDeleteRequestMsg is batched endpoint delete request
type EndpointDeleteRequestMsg struct {
	Request []*EndpointDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *EndpointDeleteRequestMsg) Reset()                    { *m = EndpointDeleteRequestMsg{} }
func (m *EndpointDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*EndpointDeleteRequestMsg) ProtoMessage()               {}
func (*EndpointDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *EndpointDeleteRequestMsg) GetRequest() []*EndpointDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type EndpointDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *EndpointDeleteResponse) Reset()                    { *m = EndpointDeleteResponse{} }
func (m *EndpointDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*EndpointDeleteResponse) ProtoMessage()               {}
func (*EndpointDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *EndpointDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// EndpointDeleteResponseMsg is used to delete a batch of Endpoints
type EndpointDeleteResponseMsg struct {
	Response []*EndpointDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *EndpointDeleteResponseMsg) Reset()                    { *m = EndpointDeleteResponseMsg{} }
func (m *EndpointDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*EndpointDeleteResponseMsg) ProtoMessage()               {}
func (*EndpointDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *EndpointDeleteResponseMsg) GetResponse() []*EndpointDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// EndpointGetRequest is used to get information about an endpoint
type EndpointGetRequest struct {
	// key_or_handle is the endpoint's identifier for retrieval
	KeyOrHandle  *EndpointKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	VrfKeyHandle *VrfKeyHandle      `protobuf:"bytes,2,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
}

func (m *EndpointGetRequest) Reset()                    { *m = EndpointGetRequest{} }
func (m *EndpointGetRequest) String() string            { return proto.CompactTextString(m) }
func (*EndpointGetRequest) ProtoMessage()               {}
func (*EndpointGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

func (m *EndpointGetRequest) GetKeyOrHandle() *EndpointKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *EndpointGetRequest) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

// EndpointGetRequestMsg is batched GET request for endpoints
type EndpointGetRequestMsg struct {
	Request []*EndpointGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *EndpointGetRequestMsg) Reset()                    { *m = EndpointGetRequestMsg{} }
func (m *EndpointGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*EndpointGetRequestMsg) ProtoMessage()               {}
func (*EndpointGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *EndpointGetRequestMsg) GetRequest() []*EndpointGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type EndpointGetByInterfaceRequest struct {
	VrfKeyHandle       *VrfKeyHandle       `protobuf:"bytes,1,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
	InterfaceKeyHandle *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=interface_key_handle,json=interfaceKeyHandle" json:"interface_key_handle,omitempty"`
}

func (m *EndpointGetByInterfaceRequest) Reset()                    { *m = EndpointGetByInterfaceRequest{} }
func (m *EndpointGetByInterfaceRequest) String() string            { return proto.CompactTextString(m) }
func (*EndpointGetByInterfaceRequest) ProtoMessage()               {}
func (*EndpointGetByInterfaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *EndpointGetByInterfaceRequest) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

func (m *EndpointGetByInterfaceRequest) GetInterfaceKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.InterfaceKeyHandle
	}
	return nil
}

// EndpointGetByInterfaceRequestMsg is used to GET endpoints by interface
type EndpointGetByInterfaceRequestMsg struct {
	Request []*EndpointGetByInterfaceRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *EndpointGetByInterfaceRequestMsg) Reset()         { *m = EndpointGetByInterfaceRequestMsg{} }
func (m *EndpointGetByInterfaceRequestMsg) String() string { return proto.CompactTextString(m) }
func (*EndpointGetByInterfaceRequestMsg) ProtoMessage()    {}
func (*EndpointGetByInterfaceRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{20}
}

func (m *EndpointGetByInterfaceRequestMsg) GetRequest() []*EndpointGetByInterfaceRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// EndpointGetAllRequestMsg is used to GET all the endpoints
type EndpointGetAllRequestMsg struct {
}

func (m *EndpointGetAllRequestMsg) Reset()                    { *m = EndpointGetAllRequestMsg{} }
func (m *EndpointGetAllRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*EndpointGetAllRequestMsg) ProtoMessage()               {}
func (*EndpointGetAllRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21} }

// EndpointStats is the statistics object for each Endpoint
type EndpointStats struct {
	EpLearnStats *EplearnStats `protobuf:"bytes,1,opt,name=ep_learn_stats,json=epLearnStats" json:"ep_learn_stats,omitempty"`
}

func (m *EndpointStats) Reset()                    { *m = EndpointStats{} }
func (m *EndpointStats) String() string            { return proto.CompactTextString(m) }
func (*EndpointStats) ProtoMessage()               {}
func (*EndpointStats) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{22} }

func (m *EndpointStats) GetEpLearnStats() *EplearnStats {
	if m != nil {
		return m.EpLearnStats
	}
	return nil
}

// EndpointGetResponse captures all the information about one Endpoint
type EndpointGetResponse struct {
	ApiStatus ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *EndpointSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *EndpointStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *EndpointStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *EndpointGetResponse) Reset()                    { *m = EndpointGetResponse{} }
func (m *EndpointGetResponse) String() string            { return proto.CompactTextString(m) }
func (*EndpointGetResponse) ProtoMessage()               {}
func (*EndpointGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{23} }

func (m *EndpointGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *EndpointGetResponse) GetSpec() *EndpointSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *EndpointGetResponse) GetStatus() *EndpointStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *EndpointGetResponse) GetStats() *EndpointStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// EndpointGetResponseMsg is batched response to EndpointGetRequestMsg
type EndpointGetResponseMsg struct {
	ApiStatus ApiStatus              `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Response  []*EndpointGetResponse `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
}

func (m *EndpointGetResponseMsg) Reset()                    { *m = EndpointGetResponseMsg{} }
func (m *EndpointGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*EndpointGetResponseMsg) ProtoMessage()               {}
func (*EndpointGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{24} }

func (m *EndpointGetResponseMsg) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *EndpointGetResponseMsg) GetResponse() []*EndpointGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type MigrationResponse struct {
	Spec           *EndpointSpec  `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	MigrationState MigrationState `protobuf:"varint,2,opt,name=migration_state,json=migrationState,enum=endpoint.MigrationState" json:"migration_state,omitempty"`
}

func (m *MigrationResponse) Reset()                    { *m = MigrationResponse{} }
func (m *MigrationResponse) String() string            { return proto.CompactTextString(m) }
func (*MigrationResponse) ProtoMessage()               {}
func (*MigrationResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{25} }

func (m *MigrationResponse) GetSpec() *EndpointSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *MigrationResponse) GetMigrationState() MigrationState {
	if m != nil {
		return m.MigrationState
	}
	return MigrationState_NONE
}

// Filter Spec
type FilterSpec struct {
	KeyOrHandle *FilterKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *FilterSpec) Reset()                    { *m = FilterSpec{} }
func (m *FilterSpec) String() string            { return proto.CompactTextString(m) }
func (*FilterSpec) ProtoMessage()               {}
func (*FilterSpec) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{26} }

func (m *FilterSpec) GetKeyOrHandle() *FilterKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// Filter Request Message
type FilterRequestMsg struct {
	Request []*FilterSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *FilterRequestMsg) Reset()                    { *m = FilterRequestMsg{} }
func (m *FilterRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*FilterRequestMsg) ProtoMessage()               {}
func (*FilterRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{27} }

func (m *FilterRequestMsg) GetRequest() []*FilterSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// FilterStatus has the current status of an endpoint
type FilterStatus struct {
	FilterHandle uint64 `protobuf:"fixed64,1,opt,name=filter_handle,json=filterHandle" json:"filter_handle,omitempty"`
}

func (m *FilterStatus) Reset()                    { *m = FilterStatus{} }
func (m *FilterStatus) String() string            { return proto.CompactTextString(m) }
func (*FilterStatus) ProtoMessage()               {}
func (*FilterStatus) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{28} }

func (m *FilterStatus) GetFilterHandle() uint64 {
	if m != nil {
		return m.FilterHandle
	}
	return 0
}

// FilterResponse is response to FilterSpec
type FilterResponse struct {
	ApiStatus    ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	FilterStatus *FilterStatus `protobuf:"bytes,2,opt,name=filter_status,json=filterStatus" json:"filter_status,omitempty"`
}

func (m *FilterResponse) Reset()                    { *m = FilterResponse{} }
func (m *FilterResponse) String() string            { return proto.CompactTextString(m) }
func (*FilterResponse) ProtoMessage()               {}
func (*FilterResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{29} }

func (m *FilterResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *FilterResponse) GetFilterStatus() *FilterStatus {
	if m != nil {
		return m.FilterStatus
	}
	return nil
}

// FilterResponseMsg is batched response to FilterRequestMsg
type FilterResponseMsg struct {
	Response []*FilterResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *FilterResponseMsg) Reset()                    { *m = FilterResponseMsg{} }
func (m *FilterResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*FilterResponseMsg) ProtoMessage()               {}
func (*FilterResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{30} }

func (m *FilterResponseMsg) GetResponse() []*FilterResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// FilterDeleteRequest is used to delete an filter
type FilterDeleteRequest struct {
	KeyOrHandle *FilterKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *FilterDeleteRequest) Reset()                    { *m = FilterDeleteRequest{} }
func (m *FilterDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*FilterDeleteRequest) ProtoMessage()               {}
func (*FilterDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{31} }

func (m *FilterDeleteRequest) GetKeyOrHandle() *FilterKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// FilterDeleteRequestMsg is batched filter delete request
type FilterDeleteRequestMsg struct {
	Request []*FilterDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *FilterDeleteRequestMsg) Reset()                    { *m = FilterDeleteRequestMsg{} }
func (m *FilterDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*FilterDeleteRequestMsg) ProtoMessage()               {}
func (*FilterDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{32} }

func (m *FilterDeleteRequestMsg) GetRequest() []*FilterDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type FilterDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *FilterDeleteResponse) Reset()                    { *m = FilterDeleteResponse{} }
func (m *FilterDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*FilterDeleteResponse) ProtoMessage()               {}
func (*FilterDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{33} }

func (m *FilterDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// FilterDeleteResponseMsg is used to delete a batch of Filters
type FilterDeleteResponseMsg struct {
	Response []*FilterDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *FilterDeleteResponseMsg) Reset()                    { *m = FilterDeleteResponseMsg{} }
func (m *FilterDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*FilterDeleteResponseMsg) ProtoMessage()               {}
func (*FilterDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{34} }

func (m *FilterDeleteResponseMsg) GetResponse() []*FilterDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// FilterGetRequest is used to get information about an filter
type FilterGetRequest struct {
	// key_or_handle is the filter's identifier for retrieval
	KeyOrHandle *FilterKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *FilterGetRequest) Reset()                    { *m = FilterGetRequest{} }
func (m *FilterGetRequest) String() string            { return proto.CompactTextString(m) }
func (*FilterGetRequest) ProtoMessage()               {}
func (*FilterGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{35} }

func (m *FilterGetRequest) GetKeyOrHandle() *FilterKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// FilterGetRequestMsg is batched GET request for filters
type FilterGetRequestMsg struct {
	Request []*FilterGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *FilterGetRequestMsg) Reset()                    { *m = FilterGetRequestMsg{} }
func (m *FilterGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*FilterGetRequestMsg) ProtoMessage()               {}
func (*FilterGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{36} }

func (m *FilterGetRequestMsg) GetRequest() []*FilterGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// FilterGetResponse captures all the information about one Filter
type FilterGetResponse struct {
	ApiStatus ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *FilterSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *FilterStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *FilterGetResponse) Reset()                    { *m = FilterGetResponse{} }
func (m *FilterGetResponse) String() string            { return proto.CompactTextString(m) }
func (*FilterGetResponse) ProtoMessage()               {}
func (*FilterGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{37} }

func (m *FilterGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *FilterGetResponse) GetSpec() *FilterSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *FilterGetResponse) GetStatus() *FilterStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// FilterGetResponseMsg is batched response to FilterGetRequestMsg
type FilterGetResponseMsg struct {
	ApiStatus ApiStatus            `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Response  []*FilterGetResponse `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
}

func (m *FilterGetResponseMsg) Reset()                    { *m = FilterGetResponseMsg{} }
func (m *FilterGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*FilterGetResponseMsg) ProtoMessage()               {}
func (*FilterGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{38} }

func (m *FilterGetResponseMsg) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *FilterGetResponseMsg) GetResponse() []*FilterGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*EndpointAttributes)(nil), "halproto.EndpointAttributes")
	clientApi.RegisterFactory("EndpointSpec", EndpointSpecFactory)
	proto.RegisterType((*EndpointSpec)(nil), "halproto.EndpointSpec")
	proto.RegisterType((*EndpointRequestMsg)(nil), "halproto.EndpointRequestMsg")
	proto.RegisterType((*EndpointIpAddress)(nil), "halproto.EndpointIpAddress")
	proto.RegisterType((*EndpointStatusEpd)(nil), "halproto.EndpointStatusEpd")
	proto.RegisterType((*EndpointStatusCpd)(nil), "halproto.EndpointStatusCpd")
	clientApi.RegisterFactory("EndpointStatus", EndpointStatusFactory)
	proto.RegisterType((*EndpointStatus)(nil), "halproto.EndpointStatus")
	proto.RegisterType((*EndpointResponse)(nil), "halproto.EndpointResponse")
	proto.RegisterType((*EndpointResponseMsg)(nil), "halproto.EndpointResponseMsg")
	proto.RegisterType((*EndpointUpdateRequest)(nil), "halproto.EndpointUpdateRequest")
	proto.RegisterType((*EndpointUpdateRequestMsg)(nil), "halproto.EndpointUpdateRequestMsg")
	proto.RegisterType((*EndpointUpdateResponseMsg)(nil), "halproto.EndpointUpdateResponseMsg")
	proto.RegisterType((*EndpointFilter)(nil), "halproto.EndpointFilter")
	proto.RegisterType((*EndpointDeleteRequest)(nil), "halproto.EndpointDeleteRequest")
	proto.RegisterType((*EndpointDeleteRequestMsg)(nil), "halproto.EndpointDeleteRequestMsg")
	proto.RegisterType((*EndpointDeleteResponse)(nil), "halproto.EndpointDeleteResponse")
	proto.RegisterType((*EndpointDeleteResponseMsg)(nil), "halproto.EndpointDeleteResponseMsg")
	proto.RegisterType((*EndpointGetRequest)(nil), "halproto.EndpointGetRequest")
	proto.RegisterType((*EndpointGetRequestMsg)(nil), "halproto.EndpointGetRequestMsg")
	proto.RegisterType((*EndpointGetByInterfaceRequest)(nil), "halproto.EndpointGetByInterfaceRequest")
	proto.RegisterType((*EndpointGetByInterfaceRequestMsg)(nil), "halproto.EndpointGetByInterfaceRequestMsg")
	proto.RegisterType((*EndpointGetAllRequestMsg)(nil), "halproto.EndpointGetAllRequestMsg")
	proto.RegisterType((*EndpointStats)(nil), "halproto.EndpointStats")
	proto.RegisterType((*EndpointGetResponse)(nil), "halproto.EndpointGetResponse")
	proto.RegisterType((*EndpointGetResponseMsg)(nil), "halproto.EndpointGetResponseMsg")
	proto.RegisterType((*MigrationResponse)(nil), "halproto.MigrationResponse")
	proto.RegisterType((*FilterSpec)(nil), "halproto.FilterSpec")
	proto.RegisterType((*FilterRequestMsg)(nil), "halproto.FilterRequestMsg")
	proto.RegisterType((*FilterStatus)(nil), "halproto.FilterStatus")
	proto.RegisterType((*FilterResponse)(nil), "halproto.FilterResponse")
	proto.RegisterType((*FilterResponseMsg)(nil), "halproto.FilterResponseMsg")
	proto.RegisterType((*FilterDeleteRequest)(nil), "halproto.FilterDeleteRequest")
	proto.RegisterType((*FilterDeleteRequestMsg)(nil), "halproto.FilterDeleteRequestMsg")
	proto.RegisterType((*FilterDeleteResponse)(nil), "halproto.FilterDeleteResponse")
	proto.RegisterType((*FilterDeleteResponseMsg)(nil), "halproto.FilterDeleteResponseMsg")
	proto.RegisterType((*FilterGetRequest)(nil), "halproto.FilterGetRequest")
	proto.RegisterType((*FilterGetRequestMsg)(nil), "halproto.FilterGetRequestMsg")
	proto.RegisterType((*FilterGetResponse)(nil), "halproto.FilterGetResponse")
	proto.RegisterType((*FilterGetResponseMsg)(nil), "halproto.FilterGetResponseMsg")
	proto.RegisterEnum("halproto.MigrationState", MigrationState_name, MigrationState_value)
}

func init() { proto.RegisterFile("endpoint.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1685 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0xcb, 0x6e, 0xdb, 0x46,
	0x17, 0x36, 0x25, 0xc5, 0x96, 0x8f, 0x2e, 0x96, 0xc7, 0x8e, 0xa3, 0x5f, 0x8e, 0x63, 0xfd, 0x0c,
	0xfe, 0xbf, 0x46, 0x80, 0xaa, 0x81, 0x13, 0x34, 0x88, 0x93, 0x2c, 0x24, 0x5f, 0x85, 0xf8, 0x92,
	0x50, 0x71, 0x90, 0x36, 0x40, 0x58, 0x5a, 0x1c, 0x4b, 0xac, 0x69, 0x92, 0x25, 0x29, 0x27, 0xda,
	0x15, 0x5d, 0x16, 0x5d, 0xb6, 0xc8, 0xa2, 0xed, 0xba, 0x4f, 0xd0, 0x07, 0xe8, 0x33, 0x74, 0xd5,
	0x4d, 0x1e, 0xa0, 0x40, 0x51, 0x20, 0x4f, 0x50, 0xcc, 0x0c, 0xef, 0x17, 0xc5, 0x6d, 0x14, 0x34,
	0x2b, 0x6b, 0x66, 0xce, 0x7c, 0x3c, 0x73, 0xce, 0x77, 0xbe, 0x33, 0x03, 0x43, 0x19, 0x6b, 0xb2,
	0xa1, 0x2b, 0x9a, 0xdd, 0x30, 0x4c, 0xdd, 0xd6, 0x51, 0xde, 0x1d, 0xd7, 0x0a, 0xf6, 0xd0, 0xc0,
	0x16, 0x9b, 0xae, 0xe5, 0x4f, 0xfa, 0xce, 0xaf, 0x12, 0x36, 0x54, 0x2c, 0x99, 0x9a, 0x33, 0x2c,
	0xca, 0x58, 0x35, 0xfa, 0x0a, 0x1b, 0xf1, 0x5f, 0x67, 0x01, 0x6d, 0x3a, 0x00, 0x4d, 0xdb, 0x36,
	0x95, 0xa3, 0x81, 0x8d, 0x2d, 0xf4, 0x04, 0xe6, 0x15, 0xcd, 0xc6, 0xe6, 0xb1, 0xd4, 0xc5, 0xe2,
	0x09, 0x1e, 0x8a, 0x7d, 0x49, 0x93, 0x55, 0x5c, 0xe5, 0xea, 0xdc, 0x4a, 0x61, 0x75, 0xa1, 0x71,
	0xd2, 0x6f, 0xb4, 0xdd, 0xf5, 0xfb, 0x78, 0xb8, 0x43, 0x57, 0x5b, 0xe5, 0xd7, 0xaf, 0x96, 0xe1,
	0x0c, 0x6b, 0x4a, 0x17, 0xaf, 0x99, 0xf8, 0x58, 0x40, 0x4a, 0xcc, 0x06, 0x2d, 0xc2, 0xf4, 0xc0,
	0xc2, 0x3d, 0xf1, 0x4c, 0x95, 0xb4, 0x6a, 0xa6, 0xce, 0xad, 0x94, 0x84, 0x3c, 0x99, 0x78, 0xac,
	0x4a, 0x1a, 0xfa, 0x08, 0x40, 0x31, 0x44, 0x49, 0x96, 0x4d, 0x6c, 0x59, 0xd5, 0x6c, 0x3d, 0xbb,
	0x52, 0x58, 0xad, 0x34, 0xd8, 0xb1, 0xda, 0x0f, 0x9a, 0x6c, 0x5e, 0x98, 0x56, 0x0c, 0xe7, 0x27,
	0xda, 0x87, 0x92, 0xd5, 0x0b, 0x3a, 0x98, 0xa3, 0x7b, 0x6a, 0xc4, 0xc1, 0x0e, 0xee, 0x0e, 0x4c,
	0xc5, 0x1e, 0x6e, 0x9b, 0xfa, 0xc0, 0x48, 0x77, 0xb2, 0x60, 0xf5, 0x7c, 0xef, 0xee, 0x01, 0xd2,
	0x55, 0x59, 0xec, 0xeb, 0xa7, 0x8a, 0xd6, 0x13, 0xfb, 0xba, 0x65, 0x8b, 0x8a, 0x51, 0xbd, 0x40,
	0x4f, 0x1d, 0x77, 0x64, 0x46, 0x57, 0xe5, 0x1d, 0x6a, 0xba, 0xa3, 0x5b, 0x76, 0xdb, 0x40, 0xf7,
	0xa0, 0x74, 0x76, 0xaa, 0xdb, 0x8a, 0xae, 0x89, 0x96, 0x2d, 0xd9, 0xb8, 0x3a, 0x59, 0xe7, 0x56,
	0xca, 0xab, 0xd5, 0x86, 0x97, 0xb3, 0x3d, 0xa5, 0x67, 0x4a, 0xc4, 0xa0, 0x43, 0xd6, 0x85, 0xa2,
	0x63, 0x4e, 0x47, 0xfc, 0xb7, 0x19, 0x28, 0xba, 0xc9, 0xe8, 0x18, 0xb8, 0x8b, 0xfe, 0x0f, 0xb9,
	0x3d, 0x6c, 0x4b, 0x4e, 0xd8, 0x51, 0xc3, 0x49, 0xdd, 0xc1, 0xd1, 0xe7, 0xb8, 0x6b, 0x93, 0x15,
	0x81, 0xae, 0xa3, 0x36, 0x94, 0x48, 0x0c, 0x74, 0xd3, 0x0d, 0x43, 0x86, 0x6e, 0xb8, 0x48, 0xc2,
	0xe0, 0x02, 0x26, 0x47, 0xe0, 0x04, 0x0f, 0x85, 0xc2, 0x09, 0x1e, 0x1e, 0x98, 0x4e, 0x04, 0xb6,
	0xa0, 0x7c, 0x66, 0x1e, 0x07, 0x43, 0x9a, 0x75, 0x4e, 0x7f, 0xd2, 0x6f, 0x3c, 0x36, 0x8f, 0xd3,
	0x03, 0x59, 0x3c, 0x0b, 0xac, 0xa2, 0x75, 0x9f, 0xa8, 0xa2, 0x64, 0xdb, 0xa6, 0x55, 0xcd, 0x51,
	0x9c, 0xcb, 0x7e, 0x2c, 0xe2, 0xbc, 0x13, 0x4a, 0x38, 0x30, 0x67, 0xad, 0xe5, 0xbe, 0x7c, 0xc9,
	0x73, 0xfc, 0x96, 0x4f, 0x51, 0x01, 0x7f, 0x31, 0xc0, 0x96, 0xbd, 0x67, 0xf5, 0xd0, 0x75, 0x98,
	0x32, 0xd9, 0xa8, 0xca, 0xd1, 0xa4, 0x2f, 0xc4, 0x91, 0x49, 0x10, 0x05, 0xd7, 0x8c, 0xff, 0x35,
	0x03, 0xb3, 0xee, 0x4a, 0xdb, 0xa3, 0x50, 0x98, 0x73, 0x5c, 0x4a, 0xaa, 0x03, 0x9c, 0xbb, 0x06,
	0xb3, 0xb4, 0x9e, 0x44, 0x4b, 0x1f, 0x98, 0x5d, 0x2c, 0xca, 0xfd, 0xae, 0x41, 0x03, 0x9e, 0x17,
	0x66, 0xe8, 0x42, 0x87, 0xce, 0x6f, 0xf4, 0xbb, 0x06, 0x5a, 0x81, 0x4a, 0xc8, 0x56, 0x32, 0x0d,
	0x1a, 0xcf, 0xbc, 0x50, 0x0e, 0x98, 0x36, 0x4d, 0x23, 0x86, 0x6a, 0x12, 0xd3, 0x5c, 0x0c, 0x55,
	0x90, 0x4c, 0x03, 0x35, 0x60, 0x2e, 0x64, 0xdb, 0xd5, 0xb5, 0x63, 0xa5, 0x47, 0x69, 0x9a, 0x17,
	0x66, 0x03, 0xd6, 0xeb, 0x74, 0x01, 0xdd, 0x86, 0xa2, 0x63, 0x6f, 0x4b, 0xf6, 0xc0, 0xa2, 0xac,
	0xa4, 0xf1, 0x72, 0x84, 0x61, 0x93, 0xfd, 0xed, 0xd0, 0x55, 0xa1, 0x10, 0x18, 0xa0, 0x3a, 0x14,
	0x15, 0xc3, 0xea, 0x89, 0xf6, 0x91, 0x2a, 0x2a, 0xf2, 0x8b, 0xea, 0x14, 0xad, 0x58, 0x20, 0x73,
	0x8f, 0x8e, 0xd4, 0xb6, 0xfc, 0x82, 0x7f, 0xe2, 0x07, 0x95, 0xed, 0xd9, 0x34, 0x64, 0xf4, 0x3f,
	0x98, 0x31, 0x71, 0x4f, 0x3c, 0x95, 0xba, 0xde, 0x4e, 0x8e, 0xee, 0x2c, 0x9a, 0xb8, 0xb7, 0x27,
	0x75, 0xd9, 0x5e, 0x74, 0x19, 0xc0, 0x7c, 0xee, 0x59, 0x64, 0xea, 0x59, 0xa2, 0x06, 0xe6, 0x73,
	0x07, 0x79, 0x2e, 0x8a, 0xbc, 0x6e, 0xc8, 0xfc, 0x0f, 0x39, 0x28, 0x87, 0x67, 0xff, 0x8d, 0x2a,
	0x39, 0x85, 0x3a, 0x59, 0x11, 0x0d, 0x45, 0xd3, 0xb0, 0x2c, 0x0e, 0x0c, 0x55, 0xd1, 0x4e, 0x44,
	0x25, 0xa1, 0x6e, 0xce, 0xab, 0x95, 0x8b, 0xe4, 0xe7, 0x03, 0x0a, 0x77, 0x48, 0xd1, 0xda, 0x81,
	0x62, 0x5a, 0x0b, 0x71, 0x94, 0x69, 0xdc, 0x62, 0x9c, 0xee, 0x1e, 0xa9, 0x23, 0x74, 0x55, 0x2c,
	0xd1, 0xab, 0x45, 0x55, 0xef, 0x4a, 0xaa, 0x43, 0x95, 0x19, 0xc5, 0x72, 0xb7, 0xee, 0x92, 0xe9,
	0x34, 0x62, 0x4d, 0xa6, 0x11, 0xeb, 0x2e, 0x00, 0x36, 0x64, 0x97, 0x56, 0x53, 0xf4, 0xc0, 0x09,
	0x7e, 0x79, 0xbc, 0xd8, 0x99, 0x10, 0xa6, 0xb1, 0x21, 0x3b, 0x79, 0xbb, 0x0b, 0xd0, 0xf5, 0x77,
	0xe7, 0x47, 0xef, 0x5e, 0x67, 0xbb, 0xbb, 0xee, 0x6e, 0xa6, 0x0d, 0xad, 0x32, 0x14, 0xb1, 0x21,
	0x7a, 0x28, 0xfc, 0x8f, 0x1c, 0x54, 0x7c, 0xb1, 0xb0, 0x0c, 0x5d, 0xb3, 0x88, 0xa6, 0x81, 0x64,
	0x28, 0xee, 0x87, 0x38, 0xaa, 0xc9, 0x6e, 0x89, 0x37, 0x0d, 0x85, 0x01, 0xb6, 0x2e, 0xbe, 0x7e,
	0xb5, 0x3c, 0xeb, 0x64, 0xc4, 0x37, 0x17, 0xa6, 0x25, 0xd7, 0x02, 0x35, 0x61, 0xc6, 0x8b, 0xa3,
	0x03, 0xc6, 0x28, 0x54, 0x4d, 0xf3, 0x5a, 0xf0, 0x44, 0x90, 0x8d, 0xf9, 0x3d, 0x98, 0x8b, 0xba,
	0x47, 0xc4, 0xec, 0x63, 0xc8, 0x9b, 0xce, 0xd0, 0x51, 0xb3, 0x5a, 0x1c, 0xd2, 0xdd, 0x20, 0x78,
	0xb6, 0xfc, 0x9f, 0x1c, 0x5c, 0x74, 0x97, 0x0f, 0x0d, 0x99, 0xb4, 0x14, 0x26, 0x76, 0x71, 0xb2,
	0x73, 0x63, 0x6c, 0x09, 0x99, 0x31, 0xb5, 0x84, 0xec, 0xdf, 0x6e, 0x09, 0xfc, 0x21, 0x54, 0x13,
	0x0f, 0x4c, 0xa2, 0x78, 0x3b, 0xda, 0x12, 0x96, 0xe3, 0xc8, 0xa1, 0x4d, 0x7e, 0x6f, 0xe8, 0xc0,
	0x7f, 0xa2, 0x16, 0x6f, 0x9f, 0x9d, 0x6f, 0x32, 0xbe, 0x56, 0x6d, 0x29, 0xaa, 0x8d, 0xcd, 0x84,
	0x58, 0x72, 0xff, 0x28, 0x96, 0x69, 0x17, 0xb4, 0xcc, 0x5b, 0x5f, 0xd0, 0x9e, 0xc0, 0xbc, 0xba,
	0xda, 0xc1, 0xbd, 0x53, 0xac, 0xd9, 0x29, 0x72, 0xb6, 0xeb, 0xae, 0x8f, 0x40, 0x56, 0x63, 0x36,
	0xfc, 0x1f, 0x01, 0xb2, 0x6e, 0x60, 0x15, 0xfb, 0x64, 0xbd, 0xff, 0x36, 0x64, 0xdd, 0x99, 0x08,
	0xd3, 0x75, 0x15, 0x26, 0x8f, 0x69, 0xb0, 0xd3, 0x8b, 0x93, 0x25, 0x63, 0x67, 0x42, 0x70, 0x2c,
	0xc7, 0x75, 0xeb, 0x69, 0x15, 0x60, 0x5a, 0xa6, 0x27, 0x13, 0x8f, 0x86, 0x41, 0xaa, 0x86, 0x8e,
	0x7b, 0x5e, 0xaa, 0x86, 0x36, 0xf9, 0x54, 0xfd, 0x0c, 0x16, 0xa2, 0x16, 0xe3, 0xd5, 0x39, 0xfe,
	0x13, 0xbf, 0x18, 0xc2, 0x5f, 0x20, 0x9e, 0xdf, 0x8d, 0x15, 0x43, 0x3d, 0xdd, 0xf5, 0x58, 0x49,
	0xfc, 0xc4, 0xf9, 0x97, 0xb9, 0x6d, 0x6c, 0xbf, 0xbf, 0x6a, 0xc5, 0x1f, 0xf8, 0x64, 0xf5, 0x1d,
	0x65, 0x6a, 0x10, 0x49, 0x5d, 0x82, 0x7e, 0xf9, 0x3b, 0xfc, 0xbc, 0xfd, 0xc2, 0xc1, 0x52, 0x60,
	0xbd, 0x35, 0xf4, 0x0a, 0xd4, 0x8d, 0xc2, 0x7b, 0x2f, 0x0e, 0x3c, 0x86, 0xfa, 0xc8, 0x23, 0x90,
	0xf8, 0x34, 0xa3, 0xf1, 0xf9, 0x20, 0x31, 0x3e, 0xf1, 0xcd, 0x7e, 0xa8, 0x6a, 0x7e, 0xe5, 0x6c,
	0x63, 0xbb, 0xa9, 0xaa, 0x3e, 0x3c, 0xbf, 0x0b, 0xa5, 0x60, 0x8f, 0xb5, 0xd0, 0x1d, 0x28, 0x63,
	0x43, 0xf4, 0x2f, 0xb8, 0x96, 0x47, 0x9e, 0x84, 0xfb, 0xad, 0x25, 0x14, 0xb1, 0xb1, 0xeb, 0x8d,
	0xf8, 0xdf, 0x39, 0xbf, 0x21, 0xd3, 0xa4, 0x8d, 0xf9, 0xca, 0x70, 0x0d, 0x72, 0x96, 0x81, 0xbb,
	0x5e, 0xe8, 0x93, 0x9f, 0x28, 0xd4, 0x06, 0x5d, 0x87, 0x49, 0xe7, 0x7b, 0xd9, 0x37, 0xdc, 0x2a,
	0x1c, 0x3b, 0xf4, 0x21, 0x5c, 0x60, 0x27, 0x66, 0x6f, 0xab, 0x4b, 0xc9, 0x1b, 0x2c, 0x81, 0x59,
	0xf1, 0xdf, 0x73, 0xbe, 0x74, 0x04, 0x0e, 0x4b, 0x92, 0x36, 0xae, 0xf3, 0xde, 0x0e, 0xa8, 0x43,
	0x86, 0x66, 0x7f, 0x29, 0xa5, 0x3a, 0x62, 0xd2, 0xf0, 0x15, 0x07, 0xb3, 0xde, 0xf3, 0xd8, 0x4b,
	0x84, 0x1b, 0x40, 0xee, 0x1c, 0x01, 0x6c, 0xc2, 0xcc, 0xa9, 0x0b, 0xe0, 0x3c, 0xc0, 0x33, 0x6f,
	0x78, 0x80, 0x97, 0x4f, 0x43, 0x63, 0xfe, 0x10, 0x80, 0x35, 0x07, 0xfa, 0xfe, 0xde, 0x4e, 0x96,
	0xa5, 0x39, 0x52, 0x41, 0xcc, 0xec, 0x7c, 0xa2, 0xc4, 0xb7, 0xa0, 0xc2, 0xec, 0x03, 0x75, 0xd2,
	0x88, 0xd6, 0xc9, 0xbc, 0xef, 0xa5, 0xef, 0x83, 0x5f, 0x14, 0x37, 0xa0, 0xe8, 0x4c, 0xb3, 0x50,
	0x5f, 0x85, 0x12, 0xeb, 0x5e, 0x41, 0xe7, 0x26, 0x85, 0x22, 0x9b, 0x74, 0x3e, 0xfc, 0x1d, 0x07,
	0x65, 0xf7, 0xcb, 0x63, 0xa6, 0xf6, 0x1d, 0xef, 0xfb, 0xa1, 0xbb, 0xf0, 0x42, 0xec, 0x14, 0x6c,
	0xa7, 0xe3, 0x97, 0xd3, 0x62, 0xda, 0x30, 0x1b, 0x76, 0x8b, 0x44, 0xe4, 0x66, 0xac, 0xb5, 0x54,
	0xa3, 0x60, 0x09, 0xbc, 0x79, 0x06, 0x73, 0x6c, 0x2d, 0x7c, 0xa7, 0x18, 0x5b, 0xee, 0x1e, 0xc2,
	0x42, 0x02, 0x3e, 0xf1, 0xf7, 0x56, 0x34, 0x83, 0x4b, 0x51, 0x77, 0x53, 0x5a, 0xf8, 0x33, 0x98,
	0x0f, 0xaf, 0x8f, 0xb9, 0x81, 0x1f, 0xc2, 0xa5, 0x24, 0x7c, 0xe2, 0xf3, 0x5a, 0x2c, 0xc6, 0x57,
	0xd2, 0x9c, 0x8e, 0x45, 0xfa, 0xa9, 0xcb, 0xe2, 0x40, 0xe7, 0x1e, 0x5b, 0x98, 0xef, 0xbb, 0x69,
	0x0c, 0x77, 0xdb, 0x9b, 0xd1, 0x18, 0xd7, 0xa2, 0xee, 0x26, 0xf5, 0xda, 0x9f, 0x39, 0x97, 0x5f,
	0xef, 0x42, 0xd4, 0x57, 0x42, 0xa2, 0x9e, 0x5c, 0xb6, 0x4c, 0x91, 0x1a, 0x11, 0x49, 0x4f, 0x2b,
	0x0e, 0xc7, 0x8a, 0x7f, 0xc9, 0xb9, 0xcc, 0x78, 0x47, 0xfa, 0x7c, 0x2b, 0xa6, 0xcf, 0x8b, 0x89,
	0xf1, 0x8c, 0xe6, 0xfe, 0xda, 0x43, 0x28, 0x87, 0xa5, 0x13, 0xe5, 0x21, 0xb7, 0x7f, 0xb0, 0xbf,
	0x59, 0x99, 0x40, 0x33, 0x50, 0x68, 0xef, 0x8b, 0x0f, 0x84, 0x83, 0x6d, 0x61, 0xb3, 0xd3, 0xa9,
	0x70, 0xa8, 0x00, 0x53, 0x9d, 0xc3, 0xf5, 0x75, 0x32, 0xc8, 0x20, 0x80, 0xc9, 0xad, 0x66, 0x7b,
	0x77, 0x73, 0xa3, 0x92, 0x25, 0x0b, 0xcd, 0xd6, 0x81, 0xf0, 0x68, 0x73, 0xa3, 0x92, 0x5b, 0xfd,
	0x2d, 0x07, 0x79, 0x57, 0xc5, 0xd1, 0x81, 0xff, 0x54, 0x5a, 0x37, 0x31, 0xc1, 0xbf, 0x9c, 0xf4,
	0xc6, 0x72, 0x79, 0x51, 0x5b, 0x4a, 0x7f, 0x81, 0x91, 0x5b, 0xc2, 0x04, 0x7a, 0xea, 0x03, 0xb2,
	0x17, 0x1d, 0xe2, 0xdf, 0xf0, 0x1a, 0x24, 0xb0, 0x57, 0xd3, 0x6d, 0x52, 0xc0, 0x59, 0xb5, 0x24,
	0x81, 0x47, 0xf5, 0x22, 0x09, 0x3c, 0x56, 0xa0, 0xfc, 0x04, 0x12, 0xa0, 0x10, 0xe8, 0x94, 0x68,
	0x79, 0xd4, 0xf5, 0x92, 0xc0, 0xd6, 0x47, 0x76, 0x58, 0x86, 0xd9, 0x76, 0x9b, 0x87, 0x13, 0xdc,
	0x5a, 0x5c, 0x58, 0x3d, 0xbc, 0xc5, 0x34, 0xd1, 0x65, 0x50, 0x87, 0x2e, 0x94, 0x73, 0xf2, 0xfa,
	0x48, 0xd1, 0x23, 0x80, 0xff, 0x1d, 0xad, 0x30, 0x0c, 0x76, 0x17, 0xa6, 0x3d, 0xfe, 0xa1, 0xa5,
	0xf4, 0x22, 0x27, 0x80, 0x57, 0x46, 0x70, 0x96, 0xa2, 0xb5, 0xe0, 0xd3, 0x7c, 0x5f, 0x52, 0xe9,
	0xff, 0x38, 0x8e, 0x26, 0xe9, 0x9f, 0x1b, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x68, 0x13,
	0xc6, 0x3a, 0x19, 0x00, 0x00,
}
