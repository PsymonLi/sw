// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2segment.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// BroadcastFwdPolicy defines various forwarding options to deal with
// broadcast traffic
type BroadcastFwdPolicy int32

const (
	BroadcastFwdPolicy_BROADCAST_FWD_POLICY_NONE  BroadcastFwdPolicy = 0
	BroadcastFwdPolicy_BROADCAST_FWD_POLICY_DROP  BroadcastFwdPolicy = 1
	BroadcastFwdPolicy_BROADCAST_FWD_POLICY_FLOOD BroadcastFwdPolicy = 2
)

var BroadcastFwdPolicy_name = map[int32]string{
	0: "BROADCAST_FWD_POLICY_NONE",
	1: "BROADCAST_FWD_POLICY_DROP",
	2: "BROADCAST_FWD_POLICY_FLOOD",
}
var BroadcastFwdPolicy_value = map[string]int32{
	"BROADCAST_FWD_POLICY_NONE":  0,
	"BROADCAST_FWD_POLICY_DROP":  1,
	"BROADCAST_FWD_POLICY_FLOOD": 2,
}

func (x BroadcastFwdPolicy) String() string {
	return proto.EnumName(BroadcastFwdPolicy_name, int32(x))
}
func (BroadcastFwdPolicy) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

// MulticastFwdPolicy defines various forwarding options to deal with
// multicast traffic
type MulticastFwdPolicy int32

const (
	MulticastFwdPolicy_MULTICAST_FWD_POLICY_NONE      MulticastFwdPolicy = 0
	MulticastFwdPolicy_MULTICAST_FWD_POLICY_FLOOD     MulticastFwdPolicy = 1
	MulticastFwdPolicy_MULTICAST_FWD_POLICY_REPLICATE MulticastFwdPolicy = 2
	MulticastFwdPolicy_MULTICAST_FWD_POLICY_DROP      MulticastFwdPolicy = 3
)

var MulticastFwdPolicy_name = map[int32]string{
	0: "MULTICAST_FWD_POLICY_NONE",
	1: "MULTICAST_FWD_POLICY_FLOOD",
	2: "MULTICAST_FWD_POLICY_REPLICATE",
	3: "MULTICAST_FWD_POLICY_DROP",
}
var MulticastFwdPolicy_value = map[string]int32{
	"MULTICAST_FWD_POLICY_NONE":      0,
	"MULTICAST_FWD_POLICY_FLOOD":     1,
	"MULTICAST_FWD_POLICY_REPLICATE": 2,
	"MULTICAST_FWD_POLICY_DROP":      3,
}

func (x MulticastFwdPolicy) String() string {
	return proto.EnumName(MulticastFwdPolicy_name, int32(x))
}
func (MulticastFwdPolicy) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

// L2SegmentSpec message is used to do add/mod of vlan
type L2SegmentSpec struct {
	Meta *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	// key_or_handle is L2 segment's unique identifier
	KeyOrHandle             *L2SegmentKeyHandle   `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	NetworkKeyHandle        []*NetworkKeyHandle   `protobuf:"bytes,3,rep,name=network_key_handle,json=networkKeyHandle" json:"network_key_handle,omitempty"`
	VrfKeyHandle            *VrfKeyHandle         `protobuf:"bytes,4,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
	SegmentType             L2SegmentType         `protobuf:"varint,5,opt,name=segment_type,json=segmentType,enum=types.L2SegmentType" json:"segment_type,omitempty"`
	McastFwdPolicy          MulticastFwdPolicy    `protobuf:"varint,6,opt,name=mcast_fwd_policy,json=mcastFwdPolicy,enum=l2segment.MulticastFwdPolicy" json:"mcast_fwd_policy,omitempty"`
	BcastFwdPolicy          BroadcastFwdPolicy    `protobuf:"varint,7,opt,name=bcast_fwd_policy,json=bcastFwdPolicy,enum=l2segment.BroadcastFwdPolicy" json:"bcast_fwd_policy,omitempty"`
	WireEncap               *EncapInfo            `protobuf:"bytes,8,opt,name=wire_encap,json=wireEncap" json:"wire_encap,omitempty"`
	TunnelEncap             *EncapInfo            `protobuf:"bytes,9,opt,name=tunnel_encap,json=tunnelEncap" json:"tunnel_encap,omitempty"`
	Gipo                    *IPAddress            `protobuf:"bytes,10,opt,name=gipo" json:"gipo,omitempty"`
	EplearnCfg              *EplearnCfg           `protobuf:"bytes,11,opt,name=eplearn_cfg,json=eplearnCfg" json:"eplearn_cfg,omitempty"`
	PinnedUplinkIfKeyHandle *InterfaceKeyHandle   `protobuf:"bytes,12,opt,name=pinned_uplink_if_key_handle,json=pinnedUplinkIfKeyHandle" json:"pinned_uplink_if_key_handle,omitempty"`
	ProxyArpEnabled         bool                  `protobuf:"varint,13,opt,name=proxy_arp_enabled,json=proxyArpEnabled" json:"proxy_arp_enabled,omitempty"`
	SingleWireManagement    bool                  `protobuf:"varint,14,opt,name=single_wire_management,json=singleWireManagement" json:"single_wire_management,omitempty"`
	IfKeyHandle             []*InterfaceKeyHandle `protobuf:"bytes,15,rep,name=if_key_handle,json=ifKeyHandle" json:"if_key_handle,omitempty"`
}

func (m *L2SegmentSpec) GetDelphiMessage() proto.Message {
	return m
}

func (m *L2SegmentSpec) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *L2SegmentSpec) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *L2SegmentSpec) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *L2SegmentSpec) GetDelphiKind() string {
	return "L2SegmentSpec"
}

func (m *L2SegmentSpec) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *L2SegmentSpec) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*L2SegmentSpec)
	return obj
}

func L2SegmentSpecMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("L2SegmentSpec", mode)
}

func L2SegmentSpecMountKey(client clientApi.Client, key *L2SegmentKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("L2SegmentSpec", key.String(), mode)
}

func GetL2SegmentSpec(client clientApi.Client, key *L2SegmentKeyHandle) *L2SegmentSpec {
	o := client.GetObject("L2SegmentSpec", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*L2SegmentSpec)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func (m *L2SegmentSpec) IsPersistent() bool {
	return false
}
func L2SegmentSpecFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg L2SegmentSpec
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func L2SegmentSpecWatch(client clientApi.Client, reactor L2SegmentSpecReactor) {
	client.WatchKind("L2SegmentSpec", reactor)
}
func L2SegmentSpecList(client clientApi.Client) []*L2SegmentSpec {
	bobjs := client.List("L2SegmentSpec")
	objs := make([]*L2SegmentSpec, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*L2SegmentSpec)
		objs = append(objs, obj)
	}
	return objs
}
func (m *L2SegmentSpec) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(L2SegmentSpecReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnL2SegmentSpecCreate(m)
			} else {
				oldObj, ok := old.(*L2SegmentSpec)
				if ok == false {
					panic("Not an L2SegmentSpec object")
				}
				rctr.OnL2SegmentSpecUpdate(oldObj, m)
			}
		} else {
			rctr.OnL2SegmentSpecDelete(m)
		}
	}
}

type L2SegmentSpecReactor interface {
	OnL2SegmentSpecCreate(obj *L2SegmentSpec)
	OnL2SegmentSpecUpdate(old *L2SegmentSpec, obj *L2SegmentSpec)
	OnL2SegmentSpecDelete(obj *L2SegmentSpec)
}

func (m *L2SegmentSpec) Reset()                    { *m = L2SegmentSpec{} }
func (m *L2SegmentSpec) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentSpec) ProtoMessage()               {}
func (*L2SegmentSpec) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

func (m *L2SegmentSpec) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *L2SegmentSpec) GetKeyOrHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *L2SegmentSpec) GetNetworkKeyHandle() []*NetworkKeyHandle {
	if m != nil {
		return m.NetworkKeyHandle
	}
	return nil
}

func (m *L2SegmentSpec) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

func (m *L2SegmentSpec) GetSegmentType() L2SegmentType {
	if m != nil {
		return m.SegmentType
	}
	return L2SegmentType_L2_SEGMENT_TYPE_NONE
}

func (m *L2SegmentSpec) GetMcastFwdPolicy() MulticastFwdPolicy {
	if m != nil {
		return m.McastFwdPolicy
	}
	return MulticastFwdPolicy_MULTICAST_FWD_POLICY_NONE
}

func (m *L2SegmentSpec) GetBcastFwdPolicy() BroadcastFwdPolicy {
	if m != nil {
		return m.BcastFwdPolicy
	}
	return BroadcastFwdPolicy_BROADCAST_FWD_POLICY_NONE
}

func (m *L2SegmentSpec) GetWireEncap() *EncapInfo {
	if m != nil {
		return m.WireEncap
	}
	return nil
}

func (m *L2SegmentSpec) GetTunnelEncap() *EncapInfo {
	if m != nil {
		return m.TunnelEncap
	}
	return nil
}

func (m *L2SegmentSpec) GetGipo() *IPAddress {
	if m != nil {
		return m.Gipo
	}
	return nil
}

func (m *L2SegmentSpec) GetEplearnCfg() *EplearnCfg {
	if m != nil {
		return m.EplearnCfg
	}
	return nil
}

func (m *L2SegmentSpec) GetPinnedUplinkIfKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.PinnedUplinkIfKeyHandle
	}
	return nil
}

func (m *L2SegmentSpec) GetProxyArpEnabled() bool {
	if m != nil {
		return m.ProxyArpEnabled
	}
	return false
}

func (m *L2SegmentSpec) GetSingleWireManagement() bool {
	if m != nil {
		return m.SingleWireManagement
	}
	return false
}

func (m *L2SegmentSpec) GetIfKeyHandle() []*InterfaceKeyHandle {
	if m != nil {
		return m.IfKeyHandle
	}
	return nil
}

// L2SegmentRequestMsg is batched add or modify L2 segment request
type L2SegmentRequestMsg struct {
	Request []*L2SegmentSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *L2SegmentRequestMsg) Reset()                    { *m = L2SegmentRequestMsg{} }
func (m *L2SegmentRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentRequestMsg) ProtoMessage()               {}
func (*L2SegmentRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

func (m *L2SegmentRequestMsg) GetRequest() []*L2SegmentSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// L2segment oper state for enterprise pipeline
type L2SegmentStatusEpd struct {
	HwL2SegId      uint32 `protobuf:"varint,3,opt,name=hw_l2seg_id,json=hwL2segId" json:"hw_l2seg_id,omitempty"`
	L2SegLookupId  uint32 `protobuf:"varint,4,opt,name=l2seg_lookup_id,json=l2segLookupId" json:"l2seg_lookup_id,omitempty"`
	L2SegVlanIdCpu uint32 `protobuf:"varint,5,opt,name=l2seg_vlan_id_cpu,json=l2segVlanIdCpu" json:"l2seg_vlan_id_cpu,omitempty"`
	InpPropCpuIdx  uint32 `protobuf:"varint,6,opt,name=inp_prop_cpu_idx,json=inpPropCpuIdx" json:"inp_prop_cpu_idx,omitempty"`
	// for CPU TX packets with CPU injecting into a VRF.
	InpPropIdx []uint32 `protobuf:"varint,7,rep,packed,name=inp_prop_idx,json=inpPropIdx" json:"inp_prop_idx,omitempty"`
	// for .1q tagged packets
	InpPropIdxPrTag []uint32 `protobuf:"varint,8,rep,packed,name=inp_prop_idx_pr_tag,json=inpPropIdxPrTag" json:"inp_prop_idx_pr_tag,omitempty"`
}

func (m *L2SegmentStatusEpd) Reset()                    { *m = L2SegmentStatusEpd{} }
func (m *L2SegmentStatusEpd) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentStatusEpd) ProtoMessage()               {}
func (*L2SegmentStatusEpd) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

func (m *L2SegmentStatusEpd) GetHwL2SegId() uint32 {
	if m != nil {
		return m.HwL2SegId
	}
	return 0
}

func (m *L2SegmentStatusEpd) GetL2SegLookupId() uint32 {
	if m != nil {
		return m.L2SegLookupId
	}
	return 0
}

func (m *L2SegmentStatusEpd) GetL2SegVlanIdCpu() uint32 {
	if m != nil {
		return m.L2SegVlanIdCpu
	}
	return 0
}

func (m *L2SegmentStatusEpd) GetInpPropCpuIdx() uint32 {
	if m != nil {
		return m.InpPropCpuIdx
	}
	return 0
}

func (m *L2SegmentStatusEpd) GetInpPropIdx() []uint32 {
	if m != nil {
		return m.InpPropIdx
	}
	return nil
}

func (m *L2SegmentStatusEpd) GetInpPropIdxPrTag() []uint32 {
	if m != nil {
		return m.InpPropIdxPrTag
	}
	return nil
}

// L2segment oper state for cloud pipeline
type L2SegmentStatusCpd struct {
}

func (m *L2SegmentStatusCpd) Reset()                    { *m = L2SegmentStatusCpd{} }
func (m *L2SegmentStatusCpd) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentStatusCpd) ProtoMessage()               {}
func (*L2SegmentStatusCpd) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{3} }

// L2SegmentStatus represents the current status of the L2 segment
type L2SegmentStatus struct {
	Meta        *delphi.ObjectMeta  `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle *L2SegmentKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	VrfId       uint32              `protobuf:"varint,3,opt,name=vrf_id,json=vrfId" json:"vrf_id,omitempty"`
	BcastLst    *OifList            `protobuf:"bytes,4,opt,name=bcast_lst,json=bcastLst" json:"bcast_lst,omitempty"`
	McastLst    *OifList            `protobuf:"bytes,5,opt,name=mcast_lst,json=mcastLst" json:"mcast_lst,omitempty"`
	PromLst     *OifList            `protobuf:"bytes,6,opt,name=prom_lst,json=promLst" json:"prom_lst,omitempty"`
	// TODO - add vNICs/uplinks this vlan is up on
	//
	// Types that are valid to be assigned to L2SegStatus:
	//	*L2SegmentStatus_EpdInfo
	//	*L2SegmentStatus_CpdInfo
	L2SegStatus isL2SegmentStatus_L2SegStatus `protobuf_oneof:"l2seg_status"`
}

func (m *L2SegmentStatus) GetDelphiMessage() proto.Message {
	return m
}

func (m *L2SegmentStatus) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *L2SegmentStatus) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *L2SegmentStatus) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *L2SegmentStatus) GetDelphiKind() string {
	return "L2SegmentStatus"
}

func (m *L2SegmentStatus) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *L2SegmentStatus) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*L2SegmentStatus)
	return obj
}

func L2SegmentStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("L2SegmentStatus", mode)
}

func L2SegmentStatusMountKey(client clientApi.Client, key *L2SegmentKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("L2SegmentStatus", key.String(), mode)
}

func GetL2SegmentStatus(client clientApi.Client, key *L2SegmentKeyHandle) *L2SegmentStatus {
	o := client.GetObject("L2SegmentStatus", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*L2SegmentStatus)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func (m *L2SegmentStatus) IsPersistent() bool {
	return false
}
func L2SegmentStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg L2SegmentStatus
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func L2SegmentStatusWatch(client clientApi.Client, reactor L2SegmentStatusReactor) {
	client.WatchKind("L2SegmentStatus", reactor)
}
func L2SegmentStatusList(client clientApi.Client) []*L2SegmentStatus {
	bobjs := client.List("L2SegmentStatus")
	objs := make([]*L2SegmentStatus, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*L2SegmentStatus)
		objs = append(objs, obj)
	}
	return objs
}
func (m *L2SegmentStatus) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(L2SegmentStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnL2SegmentStatusCreate(m)
			} else {
				oldObj, ok := old.(*L2SegmentStatus)
				if ok == false {
					panic("Not an L2SegmentStatus object")
				}
				rctr.OnL2SegmentStatusUpdate(oldObj, m)
			}
		} else {
			rctr.OnL2SegmentStatusDelete(m)
		}
	}
}

type L2SegmentStatusReactor interface {
	OnL2SegmentStatusCreate(obj *L2SegmentStatus)
	OnL2SegmentStatusUpdate(old *L2SegmentStatus, obj *L2SegmentStatus)
	OnL2SegmentStatusDelete(obj *L2SegmentStatus)
}

func (m *L2SegmentStatus) Reset()                    { *m = L2SegmentStatus{} }
func (m *L2SegmentStatus) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentStatus) ProtoMessage()               {}
func (*L2SegmentStatus) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{4} }

type isL2SegmentStatus_L2SegStatus interface{ isL2SegmentStatus_L2SegStatus() }

type L2SegmentStatus_EpdInfo struct {
	EpdInfo *L2SegmentStatusEpd `protobuf:"bytes,7,opt,name=epd_info,json=epdInfo,oneof"`
}
type L2SegmentStatus_CpdInfo struct {
	CpdInfo *L2SegmentStatusCpd `protobuf:"bytes,8,opt,name=cpd_info,json=cpdInfo,oneof"`
}

func (*L2SegmentStatus_EpdInfo) isL2SegmentStatus_L2SegStatus() {}
func (*L2SegmentStatus_CpdInfo) isL2SegmentStatus_L2SegStatus() {}

func (m *L2SegmentStatus) GetL2SegStatus() isL2SegmentStatus_L2SegStatus {
	if m != nil {
		return m.L2SegStatus
	}
	return nil
}

func (m *L2SegmentStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *L2SegmentStatus) GetKeyOrHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *L2SegmentStatus) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *L2SegmentStatus) GetBcastLst() *OifList {
	if m != nil {
		return m.BcastLst
	}
	return nil
}

func (m *L2SegmentStatus) GetMcastLst() *OifList {
	if m != nil {
		return m.McastLst
	}
	return nil
}

func (m *L2SegmentStatus) GetPromLst() *OifList {
	if m != nil {
		return m.PromLst
	}
	return nil
}

func (m *L2SegmentStatus) GetEpdInfo() *L2SegmentStatusEpd {
	if x, ok := m.GetL2SegStatus().(*L2SegmentStatus_EpdInfo); ok {
		return x.EpdInfo
	}
	return nil
}

func (m *L2SegmentStatus) GetCpdInfo() *L2SegmentStatusCpd {
	if x, ok := m.GetL2SegStatus().(*L2SegmentStatus_CpdInfo); ok {
		return x.CpdInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*L2SegmentStatus) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _L2SegmentStatus_OneofMarshaler, _L2SegmentStatus_OneofUnmarshaler, _L2SegmentStatus_OneofSizer, []interface{}{
		(*L2SegmentStatus_EpdInfo)(nil),
		(*L2SegmentStatus_CpdInfo)(nil),
	}
}

func _L2SegmentStatus_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*L2SegmentStatus)
	// l2seg_status
	switch x := m.L2SegStatus.(type) {
	case *L2SegmentStatus_EpdInfo:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EpdInfo); err != nil {
			return err
		}
	case *L2SegmentStatus_CpdInfo:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CpdInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("L2SegmentStatus.L2SegStatus has unexpected type %T", x)
	}
	return nil
}

func _L2SegmentStatus_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*L2SegmentStatus)
	switch tag {
	case 7: // l2seg_status.epd_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(L2SegmentStatusEpd)
		err := b.DecodeMessage(msg)
		m.L2SegStatus = &L2SegmentStatus_EpdInfo{msg}
		return true, err
	case 8: // l2seg_status.cpd_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(L2SegmentStatusCpd)
		err := b.DecodeMessage(msg)
		m.L2SegStatus = &L2SegmentStatus_CpdInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _L2SegmentStatus_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*L2SegmentStatus)
	// l2seg_status
	switch x := m.L2SegStatus.(type) {
	case *L2SegmentStatus_EpdInfo:
		s := proto.Size(x.EpdInfo)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *L2SegmentStatus_CpdInfo:
		s := proto.Size(x.CpdInfo)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// L2SegmentResponse is response to L2SegmentSpec
type L2SegmentResponse struct {
	ApiStatus       ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	L2SegmentStatus *L2SegmentStatus `protobuf:"bytes,2,opt,name=l2segment_status,json=l2segmentStatus" json:"l2segment_status,omitempty"`
}

func (m *L2SegmentResponse) Reset()                    { *m = L2SegmentResponse{} }
func (m *L2SegmentResponse) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentResponse) ProtoMessage()               {}
func (*L2SegmentResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{5} }

func (m *L2SegmentResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *L2SegmentResponse) GetL2SegmentStatus() *L2SegmentStatus {
	if m != nil {
		return m.L2SegmentStatus
	}
	return nil
}

// L2SegmentResponseMsg is batched response to L2SegmentRequestMsg
type L2SegmentResponseMsg struct {
	Response []*L2SegmentResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *L2SegmentResponseMsg) Reset()                    { *m = L2SegmentResponseMsg{} }
func (m *L2SegmentResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentResponseMsg) ProtoMessage()               {}
func (*L2SegmentResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{6} }

func (m *L2SegmentResponseMsg) GetResponse() []*L2SegmentResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// L2SegmentDeleteRequest is used to delete a L2 segment
type L2SegmentDeleteRequest struct {
	// key_or_handle is L2 segment's unique identifier
	KeyOrHandle  *L2SegmentKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	VrfKeyHandle *VrfKeyHandle       `protobuf:"bytes,2,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
}

func (m *L2SegmentDeleteRequest) Reset()                    { *m = L2SegmentDeleteRequest{} }
func (m *L2SegmentDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentDeleteRequest) ProtoMessage()               {}
func (*L2SegmentDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{7} }

func (m *L2SegmentDeleteRequest) GetKeyOrHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *L2SegmentDeleteRequest) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

// L2SegmentDeleteRequestMsg is used to delete a batch of L2 segments
type L2SegmentDeleteRequestMsg struct {
	Request []*L2SegmentDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *L2SegmentDeleteRequestMsg) Reset()                    { *m = L2SegmentDeleteRequestMsg{} }
func (m *L2SegmentDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentDeleteRequestMsg) ProtoMessage()               {}
func (*L2SegmentDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{8} }

func (m *L2SegmentDeleteRequestMsg) GetRequest() []*L2SegmentDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// L2SegmentDeleteResponse is response to L2SegmentDeleteRequest
type L2SegmentDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *L2SegmentDeleteResponse) Reset()                    { *m = L2SegmentDeleteResponse{} }
func (m *L2SegmentDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentDeleteResponse) ProtoMessage()               {}
func (*L2SegmentDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{9} }

func (m *L2SegmentDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// L2SegmentDeleteResponseMsg is batched response to L2SegmentDeleteRequestMsg
type L2SegmentDeleteResponseMsg struct {
	Response []*L2SegmentDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *L2SegmentDeleteResponseMsg) Reset()                    { *m = L2SegmentDeleteResponseMsg{} }
func (m *L2SegmentDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentDeleteResponseMsg) ProtoMessage()               {}
func (*L2SegmentDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{10} }

func (m *L2SegmentDeleteResponseMsg) GetResponse() []*L2SegmentDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// L2SegmentGetRequest is used to get information about a L2 Segment
type L2SegmentGetRequest struct {
	KeyOrHandle  *L2SegmentKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	VrfKeyHandle *VrfKeyHandle       `protobuf:"bytes,2,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
}

func (m *L2SegmentGetRequest) Reset()                    { *m = L2SegmentGetRequest{} }
func (m *L2SegmentGetRequest) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentGetRequest) ProtoMessage()               {}
func (*L2SegmentGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{11} }

func (m *L2SegmentGetRequest) GetKeyOrHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *L2SegmentGetRequest) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

// L2SegmentGetRequestMsg is batched GET request for L2 segments
type L2SegmentGetRequestMsg struct {
	Request []*L2SegmentGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *L2SegmentGetRequestMsg) Reset()                    { *m = L2SegmentGetRequestMsg{} }
func (m *L2SegmentGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentGetRequestMsg) ProtoMessage()               {}
func (*L2SegmentGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{12} }

func (m *L2SegmentGetRequestMsg) GetRequest() []*L2SegmentGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// L2SegmentStats is the statistics object for each L2 segment
type L2SegmentStats struct {
	NumEndpoints uint32          `protobuf:"varint,1,opt,name=num_endpoints,json=numEndpoints" json:"num_endpoints,omitempty"`
	EplearnStats *L2EplearnStats `protobuf:"bytes,2,opt,name=eplearn_stats,json=eplearnStats" json:"eplearn_stats,omitempty"`
}

func (m *L2SegmentStats) Reset()                    { *m = L2SegmentStats{} }
func (m *L2SegmentStats) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentStats) ProtoMessage()               {}
func (*L2SegmentStats) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{13} }

func (m *L2SegmentStats) GetNumEndpoints() uint32 {
	if m != nil {
		return m.NumEndpoints
	}
	return 0
}

func (m *L2SegmentStats) GetEplearnStats() *L2EplearnStats {
	if m != nil {
		return m.EplearnStats
	}
	return nil
}

// L2SegmentGetResponse captures all the information about a L2 segment
// only if api_status indicates success, other fields are valid
type L2SegmentGetResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *L2SegmentSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *L2SegmentStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *L2SegmentStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *L2SegmentGetResponse) Reset()                    { *m = L2SegmentGetResponse{} }
func (m *L2SegmentGetResponse) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentGetResponse) ProtoMessage()               {}
func (*L2SegmentGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{14} }

func (m *L2SegmentGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *L2SegmentGetResponse) GetSpec() *L2SegmentSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *L2SegmentGetResponse) GetStatus() *L2SegmentStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *L2SegmentGetResponse) GetStats() *L2SegmentStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// L2SegmentGetResponseMsg is the batched response to L2SegmentGetRequestMsg
type L2SegmentGetResponseMsg struct {
	Response []*L2SegmentGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *L2SegmentGetResponseMsg) Reset()                    { *m = L2SegmentGetResponseMsg{} }
func (m *L2SegmentGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentGetResponseMsg) ProtoMessage()               {}
func (*L2SegmentGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{15} }

func (m *L2SegmentGetResponseMsg) GetResponse() []*L2SegmentGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	clientApi.RegisterFactory("L2SegmentSpec", L2SegmentSpecFactory)
	proto.RegisterType((*L2SegmentSpec)(nil), "halproto.L2SegmentSpec")
	proto.RegisterType((*L2SegmentRequestMsg)(nil), "halproto.L2SegmentRequestMsg")
	proto.RegisterType((*L2SegmentStatusEpd)(nil), "halproto.L2segmentStatusEpd")
	proto.RegisterType((*L2SegmentStatusCpd)(nil), "halproto.L2segmentStatusCpd")
	clientApi.RegisterFactory("L2SegmentStatus", L2SegmentStatusFactory)
	proto.RegisterType((*L2SegmentStatus)(nil), "halproto.L2SegmentStatus")
	proto.RegisterType((*L2SegmentResponse)(nil), "halproto.L2SegmentResponse")
	proto.RegisterType((*L2SegmentResponseMsg)(nil), "halproto.L2SegmentResponseMsg")
	proto.RegisterType((*L2SegmentDeleteRequest)(nil), "halproto.L2SegmentDeleteRequest")
	proto.RegisterType((*L2SegmentDeleteRequestMsg)(nil), "halproto.L2SegmentDeleteRequestMsg")
	proto.RegisterType((*L2SegmentDeleteResponse)(nil), "halproto.L2SegmentDeleteResponse")
	proto.RegisterType((*L2SegmentDeleteResponseMsg)(nil), "halproto.L2SegmentDeleteResponseMsg")
	proto.RegisterType((*L2SegmentGetRequest)(nil), "halproto.L2SegmentGetRequest")
	proto.RegisterType((*L2SegmentGetRequestMsg)(nil), "halproto.L2SegmentGetRequestMsg")
	proto.RegisterType((*L2SegmentStats)(nil), "halproto.L2SegmentStats")
	proto.RegisterType((*L2SegmentGetResponse)(nil), "halproto.L2SegmentGetResponse")
	proto.RegisterType((*L2SegmentGetResponseMsg)(nil), "halproto.L2SegmentGetResponseMsg")
	proto.RegisterEnum("halproto.BroadcastFwdPolicy", BroadcastFwdPolicy_name, BroadcastFwdPolicy_value)
	proto.RegisterEnum("halproto.MulticastFwdPolicy", MulticastFwdPolicy_name, MulticastFwdPolicy_value)
}

func init() { proto.RegisterFile("l2segment.proto", fileDescriptor15) }

var fileDescriptor15 = []byte{
	// 1436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xee, 0xe6, 0xd7, 0x39, 0xfe, 0x89, 0x33, 0x4d, 0x5b, 0x37, 0xa5, 0x71, 0xba, 0x40, 0x09,
	0x55, 0x71, 0x25, 0xd3, 0x0b, 0x14, 0x28, 0x52, 0xe2, 0x38, 0xed, 0x52, 0x27, 0xb6, 0x36, 0x4e,
	0xd3, 0x22, 0xa4, 0x61, 0xe3, 0x1d, 0x3b, 0x8b, 0xd7, 0xb3, 0xc3, 0xee, 0x3a, 0xa9, 0x85, 0x90,
	0xfa, 0x10, 0x08, 0xee, 0xb9, 0x43, 0xe2, 0x0d, 0x78, 0x97, 0xbc, 0x03, 0xb9, 0xe4, 0x0a, 0xcd,
	0xcc, 0xfe, 0xf9, 0xaf, 0x11, 0xa8, 0x12, 0x5c, 0xc5, 0x3b, 0xe7, 0xfb, 0xbe, 0x3d, 0x33, 0xe7,
	0x9c, 0x6f, 0x27, 0xb0, 0x6c, 0x97, 0x3d, 0xd2, 0xe9, 0x11, 0xea, 0x97, 0x98, 0xeb, 0xf8, 0x0e,
	0x5a, 0x8a, 0x16, 0xd6, 0xd2, 0xfe, 0x80, 0x11, 0x4f, 0xae, 0xaf, 0xa5, 0xba, 0xa7, 0xc1, 0xaf,
	0x2c, 0x61, 0x36, 0x31, 0x5c, 0x1a, 0x3c, 0x66, 0x4c, 0x62, 0xb3, 0x53, 0x2b, 0x78, 0x5a, 0xee,
	0xf5, 0x6d, 0xdf, 0x6a, 0x19, 0x5e, 0xa0, 0xa7, 0xfe, 0x95, 0x82, 0x6c, 0xad, 0x7c, 0x28, 0x25,
	0x0f, 0x19, 0x69, 0xa1, 0xfb, 0x30, 0xb7, 0x4f, 0x7c, 0xa3, 0xa0, 0x6c, 0x28, 0x9b, 0xe9, 0x32,
	0x2a, 0x05, 0xfc, 0xfa, 0xc9, 0x77, 0xa4, 0xe5, 0xf3, 0x88, 0x2e, 0xe2, 0xe8, 0x2b, 0xc8, 0x76,
	0xc9, 0x00, 0x3b, 0x2e, 0x3e, 0x35, 0xa8, 0x69, 0x93, 0xc2, 0x8c, 0x20, 0xdc, 0x2c, 0x75, 0x4f,
	0x4b, 0x91, 0xe2, 0x73, 0x32, 0x78, 0x26, 0xa2, 0x3b, 0xb9, 0xcb, 0x8b, 0x22, 0x9c, 0x11, 0x6a,
	0xb5, 0xc8, 0x56, 0x97, 0x0c, 0xf4, 0x74, 0x97, 0x0c, 0xea, 0xae, 0x0c, 0x22, 0x1d, 0x10, 0x25,
	0xfe, 0xb9, 0xe3, 0x76, 0x31, 0xd7, 0x0c, 0x04, 0x67, 0x37, 0x66, 0x37, 0xd3, 0xe5, 0x55, 0x2e,
	0x78, 0x20, 0xa3, 0x93, 0xe5, 0x5c, 0xd2, 0xd6, 0xf3, 0x74, 0x04, 0x81, 0x8e, 0x21, 0x77, 0xe6,
	0xb6, 0x93, 0x7a, 0x73, 0x22, 0xc1, 0x3c, 0xd7, 0x7b, 0xe1, 0xb6, 0x63, 0xad, 0xe2, 0xe5, 0x45,
	0xf1, 0x4e, 0xa0, 0x65, 0xf5, 0x7a, 0x7d, 0xdf, 0x38, 0xb1, 0xc9, 0xc3, 0x84, 0x78, 0xe6, 0x2c,
	0x01, 0x47, 0xfb, 0x90, 0x09, 0x4a, 0x80, 0x79, 0x05, 0x0a, 0xf3, 0x1b, 0xca, 0x66, 0xae, 0xbc,
	0x5a, 0x92, 0xe5, 0x88, 0xb6, 0xde, 0x1c, 0x30, 0xb2, 0xb3, 0x7a, 0x79, 0x51, 0xcc, 0x8f, 0x4a,
	0xeb, 0x69, 0x2f, 0x86, 0xa0, 0xa7, 0x90, 0xef, 0xf1, 0x82, 0xe0, 0xf6, 0xb9, 0x89, 0x99, 0x63,
	0x5b, 0xad, 0x41, 0x61, 0x41, 0x48, 0xde, 0x2d, 0xc5, 0xd5, 0xdf, 0x0f, 0xeb, 0xb6, 0x77, 0x6e,
	0x36, 0x04, 0x48, 0xcf, 0xf5, 0x86, 0x9e, 0xb9, 0xd0, 0xc9, 0xa8, 0xd0, 0xe2, 0x98, 0xd0, 0x8e,
	0xeb, 0x18, 0xe6, 0x88, 0xd0, 0xc9, 0xb0, 0x50, 0x15, 0xe0, 0xdc, 0x72, 0x09, 0x26, 0xb4, 0x65,
	0xb0, 0x42, 0x2a, 0x38, 0x35, 0xb9, 0xbd, 0x2a, 0x5f, 0xd3, 0x68, 0xdb, 0x99, 0xb2, 0xb5, 0x25,
	0xce, 0x14, 0x20, 0xa4, 0x41, 0xc6, 0xef, 0x53, 0x4a, 0xec, 0x40, 0x68, 0xe9, 0x1f, 0x09, 0xa5,
	0x25, 0x57, 0x4a, 0x6d, 0xc1, 0x5c, 0xc7, 0x62, 0x4e, 0x01, 0x86, 0x24, 0xb4, 0xc6, 0xb6, 0x69,
	0xba, 0xc4, 0xf3, 0xa6, 0x48, 0x08, 0x0e, 0x7a, 0x0c, 0xe9, 0x60, 0x22, 0x70, 0xab, 0xdd, 0x29,
	0xa4, 0x85, 0xc4, 0xf5, 0x52, 0x38, 0x25, 0x55, 0xf9, 0xb7, 0xd2, 0xee, 0xe8, 0x40, 0xa2, 0xdf,
	0xc8, 0x84, 0x3b, 0xcc, 0xa2, 0x94, 0x98, 0xb8, 0xcf, 0x6c, 0x8b, 0x76, 0xb1, 0x35, 0xd4, 0x4a,
	0x99, 0xb8, 0xd7, 0x35, 0xea, 0x13, 0xb7, 0x6d, 0xb4, 0xc8, 0xf4, 0xe6, 0xbc, 0x25, 0xa5, 0x8e,
	0x84, 0x92, 0x96, 0x68, 0xa5, 0x07, 0xb0, 0xc2, 0x5c, 0xe7, 0xf5, 0x00, 0x1b, 0x2e, 0xc3, 0x84,
	0xf2, 0xac, 0xcd, 0x42, 0x76, 0x43, 0xd9, 0x4c, 0xe9, 0xcb, 0x22, 0xb0, 0xed, 0xb2, 0xaa, 0x5c,
	0x46, 0x8f, 0xe1, 0xa6, 0x67, 0xd1, 0x8e, 0x4d, 0xb0, 0x28, 0x4e, 0xcf, 0xa0, 0x46, 0x87, 0xf0,
	0x92, 0x16, 0x72, 0x82, 0xb0, 0x2a, 0xa3, 0xc7, 0x96, 0x4b, 0xf6, 0xa3, 0x18, 0xfa, 0x49, 0x81,
	0xec, 0x70, 0xea, 0xcb, 0x62, 0xaa, 0xa6, 0xa5, 0xfe, 0xf2, 0xf2, 0xa2, 0xd8, 0x8c, 0x53, 0x0f,
	0xa7, 0xa0, 0xe5, 0x50, 0xcf, 0x77, 0x0d, 0x8b, 0xfa, 0xde, 0x93, 0x1f, 0x2c, 0xea, 0xb7, 0x63,
	0x2e, 0x37, 0x0d, 0x51, 0x90, 0x27, 0x56, 0xb8, 0x84, 0xd9, 0x49, 0xb9, 0xa4, 0xed, 0xe1, 0xe6,
	0xab, 0x46, 0x15, 0x1f, 0x35, 0x6a, 0xda, 0xc1, 0xf3, 0x1f, 0xf5, 0xb4, 0x15, 0x6f, 0x7c, 0x6b,
	0xee, 0xcd, 0x2f, 0xaa, 0xa2, 0x6a, 0x70, 0x3d, 0x1a, 0x17, 0x9d, 0x7c, 0xdf, 0x27, 0x9e, 0xbf,
	0xef, 0x75, 0x50, 0x19, 0x16, 0x5d, 0xf9, 0x54, 0x50, 0x44, 0xb2, 0x85, 0x44, 0xff, 0x0e, 0x99,
	0x95, 0x1e, 0x02, 0xd5, 0x37, 0x33, 0x80, 0x6a, 0x21, 0xe8, 0xd0, 0x37, 0xfc, 0xbe, 0x57, 0x65,
	0x26, 0x5a, 0x87, 0xf4, 0xe9, 0x39, 0x16, 0x6c, 0x6c, 0x99, 0x85, 0xd9, 0x0d, 0x65, 0x33, 0xab,
	0x2f, 0x9d, 0x9e, 0x0b, 0xa8, 0x66, 0xa2, 0xfb, 0x81, 0xc3, 0x62, 0xdb, 0x71, 0xba, 0x7d, 0xc6,
	0x31, 0x73, 0x02, 0x93, 0x15, 0xcb, 0x35, 0xb1, 0xaa, 0x99, 0xe8, 0x63, 0x58, 0x91, 0xb8, 0x33,
	0xdb, 0xa0, 0xd8, 0x32, 0x71, 0x8b, 0xf5, 0xc5, 0xe0, 0x67, 0xf5, 0x9c, 0x08, 0xbc, 0xb0, 0x0d,
	0xaa, 0x99, 0x15, 0xd6, 0x47, 0x1f, 0x41, 0xde, 0xa2, 0x0c, 0x33, 0xd7, 0x61, 0x1c, 0x85, 0x2d,
	0xf3, 0xb5, 0x98, 0xe7, 0xac, 0x9e, 0xb5, 0x28, 0x6b, 0xb8, 0x0e, 0xab, 0xb0, 0xbe, 0x66, 0xbe,
	0x46, 0x1b, 0x90, 0x89, 0x80, 0x1c, 0xb4, 0xb8, 0x31, 0xbb, 0x99, 0xd5, 0x21, 0x00, 0x71, 0xc4,
	0x43, 0xb8, 0x9e, 0x44, 0x60, 0xe6, 0x62, 0xdf, 0xe8, 0x14, 0x52, 0x02, 0xb8, 0x1c, 0x03, 0x1b,
	0x6e, 0xd3, 0xe8, 0xa8, 0xab, 0x63, 0x27, 0x50, 0x61, 0xa6, 0xfa, 0xc7, 0x2c, 0x2c, 0xc7, 0x67,
	0x26, 0x96, 0xff, 0x13, 0x8b, 0xbf, 0x01, 0x0b, 0xdc, 0x8e, 0xa3, 0x22, 0xcc, 0x9f, 0xb9, 0x6d,
	0xcd, 0x44, 0x8f, 0x60, 0x49, 0x9a, 0x96, 0xed, 0xf9, 0x81, 0x41, 0xa3, 0x52, 0xfc, 0x91, 0xaa,
	0x5b, 0xed, 0x9a, 0xe5, 0xf9, 0x7a, 0x4a, 0x80, 0x6a, 0x9e, 0xcf, 0x09, 0xbd, 0x88, 0x30, 0x3f,
	0x9d, 0xd0, 0x0b, 0x09, 0x9f, 0x40, 0x8a, 0xb9, 0x4e, 0x4f, 0xe0, 0x17, 0xa6, 0xe2, 0x17, 0x39,
	0x86, 0xc3, 0xb7, 0x20, 0x45, 0x98, 0x89, 0x2d, 0xda, 0x76, 0x84, 0x7b, 0xa6, 0x87, 0xdc, 0x73,
	0xbc, 0xc5, 0x9e, 0x5d, 0xd3, 0x17, 0x09, 0x33, 0xb9, 0x93, 0x71, 0x6e, 0x2b, 0xe4, 0xa6, 0xae,
	0xe2, 0x56, 0x24, 0xb7, 0x25, 0xb9, 0x72, 0x22, 0x76, 0x72, 0x90, 0x91, 0x7d, 0xe6, 0x09, 0x8c,
	0xfa, 0xab, 0x02, 0x2b, 0x89, 0x11, 0xf1, 0x98, 0x43, 0x3d, 0x82, 0xf6, 0x00, 0x0c, 0x66, 0x05,
	0x18, 0x51, 0xc5, 0x5c, 0x64, 0x8a, 0xdb, 0xcc, 0x92, 0xfa, 0x3b, 0x37, 0x2e, 0x2f, 0x8a, 0x2b,
	0x41, 0x39, 0x62, 0xb8, 0xbe, 0x64, 0x84, 0x08, 0x54, 0x85, 0x7c, 0x94, 0x5e, 0xa8, 0x26, 0x4b,
	0xbc, 0x36, 0x71, 0xe2, 0xa4, 0x40, 0x7c, 0x27, 0x91, 0x0b, 0x6a, 0x03, 0x56, 0xc7, 0x72, 0xe4,
	0x73, 0xfc, 0x19, 0xa4, 0xdc, 0xe0, 0x31, 0x18, 0xe4, 0xf7, 0x26, 0xc9, 0x86, 0x14, 0x3d, 0x42,
	0xab, 0xbf, 0x2b, 0x70, 0x33, 0x8a, 0xef, 0x12, 0x9b, 0xf8, 0x24, 0xf0, 0x87, 0xf1, 0x9e, 0x54,
	0xfe, 0x7d, 0x4f, 0xee, 0x8d, 0x5d, 0x11, 0x66, 0xa6, 0x5c, 0x11, 0x46, 0x1d, 0x7d, 0xe8, 0x46,
	0xa0, 0xbe, 0x84, 0xdb, 0x93, 0xb3, 0xe5, 0xa7, 0xf0, 0xf9, 0xa8, 0x9b, 0xdd, 0x9b, 0x74, 0x08,
	0x43, 0xb4, 0xd8, 0xd6, 0x0c, 0xb8, 0x35, 0x06, 0x79, 0xb7, 0x4d, 0xa0, 0x7e, 0x03, 0x6b, 0x53,
	0x5e, 0xc1, 0xb3, 0xff, 0x72, 0xac, 0x86, 0xea, 0xdb, 0xd2, 0x1f, 0xab, 0xe4, 0x6f, 0x4a, 0xc2,
	0xe3, 0x9f, 0x12, 0xff, 0xff, 0x5c, 0x46, 0x3d, 0xd1, 0x74, 0x71, 0xaa, 0xb2, 0x93, 0x47, 0x6a,
	0xb8, 0x3e, 0xe9, 0x10, 0x62, 0x4e, 0x5c, 0x40, 0x0f, 0x72, 0x43, 0xf3, 0xe3, 0xa1, 0xf7, 0x21,
	0x4b, 0xfb, 0x3d, 0x4c, 0xa8, 0xc9, 0x1c, 0xfe, 0x3d, 0x15, 0x3b, 0xcf, 0xea, 0x19, 0xda, 0xef,
	0x55, 0xc3, 0x35, 0xf4, 0x05, 0x84, 0xd7, 0x78, 0x51, 0xb1, 0x70, 0x2c, 0x6f, 0x45, 0xd7, 0x96,
	0x5a, 0x39, 0xb8, 0xb8, 0x08, 0x51, 0x3d, 0x43, 0x12, 0x4f, 0xea, 0x9f, 0x4a, 0x62, 0x22, 0x45,
	0x56, 0xef, 0xd8, 0x38, 0x1e, 0xc2, 0x9c, 0xc7, 0x48, 0x2b, 0xc8, 0x6a, 0xfa, 0xe7, 0x59, 0xa0,
	0x50, 0x19, 0x16, 0x82, 0x37, 0xce, 0x5e, 0x69, 0x2e, 0x01, 0x12, 0x3d, 0x82, 0x79, 0xb9, 0x71,
	0xf9, 0x4d, 0xb8, 0x3d, 0x8d, 0xe2, 0xe9, 0x12, 0xa7, 0xbe, 0x48, 0x4c, 0x4a, 0x62, 0xcb, 0x72,
	0x02, 0x47, 0x7b, 0xb8, 0x38, 0xb5, 0x7c, 0xa3, 0x0d, 0xfc, 0xc0, 0x05, 0x34, 0x7e, 0x65, 0x46,
	0x77, 0xe1, 0xf6, 0x8e, 0x5e, 0xdf, 0xde, 0xad, 0x6c, 0x1f, 0x36, 0xf1, 0xde, 0xf1, 0x2e, 0x6e,
	0xd4, 0x6b, 0x5a, 0xe5, 0x15, 0x3e, 0xa8, 0x1f, 0x54, 0xf3, 0xd7, 0xa6, 0x86, 0x77, 0xf5, 0x7a,
	0x23, 0xaf, 0xa0, 0x75, 0x58, 0x9b, 0x18, 0xde, 0xab, 0xd5, 0xeb, 0xbb, 0xf9, 0x99, 0x07, 0x3f,
	0x2b, 0x80, 0xc6, 0x2f, 0xfc, 0x5c, 0x75, 0xff, 0xa8, 0xd6, 0xd4, 0xa6, 0xbc, 0x74, 0x1d, 0xd6,
	0x26, 0x86, 0xa5, 0xaa, 0x82, 0x54, 0x58, 0x9f, 0x18, 0xd7, 0xab, 0x8d, 0x9a, 0x56, 0xd9, 0x6e,
	0x56, 0xf3, 0x33, 0x53, 0x5f, 0x21, 0x12, 0x9f, 0x2d, 0x5f, 0xce, 0xc0, 0x52, 0x74, 0x5e, 0xa8,
	0x99, 0xb8, 0x59, 0x54, 0x5c, 0x62, 0xf8, 0x04, 0xad, 0x4f, 0x36, 0xf8, 0x70, 0x90, 0xd6, 0x8a,
	0x6f, 0xfb, 0x00, 0xec, 0x7b, 0x1d, 0xf5, 0xda, 0x90, 0xea, 0x11, 0x33, 0xdf, 0x91, 0xea, 0xb7,
	0x09, 0x55, 0x69, 0x56, 0xe8, 0x83, 0x2b, 0x7d, 0x98, 0x6b, 0x7f, 0x78, 0xb5, 0xdd, 0xc9, 0x37,
	0x1c, 0x43, 0x26, 0xd9, 0x4a, 0xe8, 0xde, 0xdb, 0x2d, 0x82, 0x6b, 0xab, 0x57, 0xb4, 0xa1, 0x10,
	0xde, 0x81, 0xaf, 0x53, 0xa7, 0x86, 0x2d, 0xfe, 0x5d, 0x3f, 0x59, 0x10, 0x7f, 0x3e, 0xfd, 0x3b,
	0x00, 0x00, 0xff, 0xff, 0xf4, 0x2d, 0x2e, 0x34, 0x18, 0x10, 0x00, 0x00,
}
