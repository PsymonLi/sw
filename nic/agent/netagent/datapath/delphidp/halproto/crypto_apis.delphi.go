// Code generated by protoc-gen-go. DO NOT EDIT.
// source: crypto_apis.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Types of Crypto Hash algos
type CryptoApiHashType int32

const (
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_NONE        CryptoApiHashType = 0
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_MD5         CryptoApiHashType = 1
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA1        CryptoApiHashType = 2
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA224      CryptoApiHashType = 3
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA256      CryptoApiHashType = 4
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA384      CryptoApiHashType = 5
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA512      CryptoApiHashType = 6
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA512_224  CryptoApiHashType = 7
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA512_256  CryptoApiHashType = 8
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_HMAC_MD5    CryptoApiHashType = 9
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_HMAC_SHA1   CryptoApiHashType = 10
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_HMAC_SHA224 CryptoApiHashType = 11
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_HMAC_SHA256 CryptoApiHashType = 12
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_HMAC_SHA384 CryptoApiHashType = 13
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_HMAC_SHA512 CryptoApiHashType = 14
)

var CryptoApiHashType_name = map[int32]string{
	0:  "CRYPTOAPI_HASHTYPE_NONE",
	1:  "CRYPTOAPI_HASHTYPE_MD5",
	2:  "CRYPTOAPI_HASHTYPE_SHA1",
	3:  "CRYPTOAPI_HASHTYPE_SHA224",
	4:  "CRYPTOAPI_HASHTYPE_SHA256",
	5:  "CRYPTOAPI_HASHTYPE_SHA384",
	6:  "CRYPTOAPI_HASHTYPE_SHA512",
	7:  "CRYPTOAPI_HASHTYPE_SHA512_224",
	8:  "CRYPTOAPI_HASHTYPE_SHA512_256",
	9:  "CRYPTOAPI_HASHTYPE_HMAC_MD5",
	10: "CRYPTOAPI_HASHTYPE_HMAC_SHA1",
	11: "CRYPTOAPI_HASHTYPE_HMAC_SHA224",
	12: "CRYPTOAPI_HASHTYPE_HMAC_SHA256",
	13: "CRYPTOAPI_HASHTYPE_HMAC_SHA384",
	14: "CRYPTOAPI_HASHTYPE_HMAC_SHA512",
}
var CryptoApiHashType_value = map[string]int32{
	"CRYPTOAPI_HASHTYPE_NONE":        0,
	"CRYPTOAPI_HASHTYPE_MD5":         1,
	"CRYPTOAPI_HASHTYPE_SHA1":        2,
	"CRYPTOAPI_HASHTYPE_SHA224":      3,
	"CRYPTOAPI_HASHTYPE_SHA256":      4,
	"CRYPTOAPI_HASHTYPE_SHA384":      5,
	"CRYPTOAPI_HASHTYPE_SHA512":      6,
	"CRYPTOAPI_HASHTYPE_SHA512_224":  7,
	"CRYPTOAPI_HASHTYPE_SHA512_256":  8,
	"CRYPTOAPI_HASHTYPE_HMAC_MD5":    9,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA1":   10,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA224": 11,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA256": 12,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA384": 13,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA512": 14,
}

func (x CryptoApiHashType) String() string {
	return proto.EnumName(CryptoApiHashType_name, int32(x))
}
func (CryptoApiHashType) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

type CryptoApiType int32

const (
	CryptoApiType_ASYMAPI_ECC_POINT_MUL_FP    CryptoApiType = 0
	CryptoApiType_ASYMAPI_ECDSA_SIG_GEN_FP    CryptoApiType = 1
	CryptoApiType_ASYMAPI_ECDSA_SIG_VERIFY_FP CryptoApiType = 2
	CryptoApiType_ASYMAPI_RSA_ENCRYPT         CryptoApiType = 3
	CryptoApiType_ASYMAPI_RSA_DECRYPT         CryptoApiType = 4
	CryptoApiType_ASYMAPI_RSA_CRT_DECRYPT     CryptoApiType = 5
	CryptoApiType_SYMMAPI_HASH_GENERATE       CryptoApiType = 6
	CryptoApiType_SYMMAPI_HASH_VERIFY         CryptoApiType = 7
	CryptoApiType_ASYMAPI_RSA_SIG_GEN         CryptoApiType = 8
	CryptoApiType_ASYMAPI_RSA_SIG_VERIFY      CryptoApiType = 9
	CryptoApiType_ASYMAPI_SETUP_PRIV_KEY      CryptoApiType = 10
	CryptoApiType_ASYMAPI_SETUP_CERT          CryptoApiType = 11
)

var CryptoApiType_name = map[int32]string{
	0:  "ASYMAPI_ECC_POINT_MUL_FP",
	1:  "ASYMAPI_ECDSA_SIG_GEN_FP",
	2:  "ASYMAPI_ECDSA_SIG_VERIFY_FP",
	3:  "ASYMAPI_RSA_ENCRYPT",
	4:  "ASYMAPI_RSA_DECRYPT",
	5:  "ASYMAPI_RSA_CRT_DECRYPT",
	6:  "SYMMAPI_HASH_GENERATE",
	7:  "SYMMAPI_HASH_VERIFY",
	8:  "ASYMAPI_RSA_SIG_GEN",
	9:  "ASYMAPI_RSA_SIG_VERIFY",
	10: "ASYMAPI_SETUP_PRIV_KEY",
	11: "ASYMAPI_SETUP_CERT",
}
var CryptoApiType_value = map[string]int32{
	"ASYMAPI_ECC_POINT_MUL_FP":    0,
	"ASYMAPI_ECDSA_SIG_GEN_FP":    1,
	"ASYMAPI_ECDSA_SIG_VERIFY_FP": 2,
	"ASYMAPI_RSA_ENCRYPT":         3,
	"ASYMAPI_RSA_DECRYPT":         4,
	"ASYMAPI_RSA_CRT_DECRYPT":     5,
	"SYMMAPI_HASH_GENERATE":       6,
	"SYMMAPI_HASH_VERIFY":         7,
	"ASYMAPI_RSA_SIG_GEN":         8,
	"ASYMAPI_RSA_SIG_VERIFY":      9,
	"ASYMAPI_SETUP_PRIV_KEY":      10,
	"ASYMAPI_SETUP_CERT":          11,
}

func (x CryptoApiType) String() string {
	return proto.EnumName(CryptoApiType_name, int32(x))
}
func (CryptoApiType) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{1} }

type UpdateType int32

const (
	UpdateType_ADD_UPDATE UpdateType = 0
	UpdateType_DELETE     UpdateType = 1
)

var UpdateType_name = map[int32]string{
	0: "ADD_UPDATE",
	1: "DELETE",
}
var UpdateType_value = map[string]int32{
	"ADD_UPDATE": 0,
	"DELETE":     1,
}

func (x UpdateType) String() string {
	return proto.EnumName(UpdateType_name, int32(x))
}
func (UpdateType) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{2} }

type ECCPoint struct {
	X []byte `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y []byte `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *ECCPoint) Reset()                    { *m = ECCPoint{} }
func (m *ECCPoint) String() string            { return proto.CompactTextString(m) }
func (*ECCPoint) ProtoMessage()               {}
func (*ECCPoint) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

func (m *ECCPoint) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *ECCPoint) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

type CryptoAsymApiECCDomainParamsFp struct {
	KeySize uint32    `protobuf:"varint,1,opt,name=KeySize" json:"KeySize,omitempty"`
	P       []byte    `protobuf:"bytes,2,opt,name=p,proto3" json:"p,omitempty"`
	A       []byte    `protobuf:"bytes,3,opt,name=a,proto3" json:"a,omitempty"`
	B       []byte    `protobuf:"bytes,4,opt,name=b,proto3" json:"b,omitempty"`
	G       *ECCPoint `protobuf:"bytes,5,opt,name=G" json:"G,omitempty"`
	N       []byte    `protobuf:"bytes,6,opt,name=n,proto3" json:"n,omitempty"`
}

func (m *CryptoAsymApiECCDomainParamsFp) Reset()                    { *m = CryptoAsymApiECCDomainParamsFp{} }
func (m *CryptoAsymApiECCDomainParamsFp) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiECCDomainParamsFp) ProtoMessage()               {}
func (*CryptoAsymApiECCDomainParamsFp) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{1} }

func (m *CryptoAsymApiECCDomainParamsFp) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiECCDomainParamsFp) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *CryptoAsymApiECCDomainParamsFp) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *CryptoAsymApiECCDomainParamsFp) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *CryptoAsymApiECCDomainParamsFp) GetG() *ECCPoint {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *CryptoAsymApiECCDomainParamsFp) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

type CryptoAsymApiReqECCPointMulFp struct {
	EccDomainParams *CryptoAsymApiECCDomainParamsFp `protobuf:"bytes,1,opt,name=ecc_domain_params,json=eccDomainParams" json:"ecc_domain_params,omitempty"`
	EccPoint        *ECCPoint                       `protobuf:"bytes,2,opt,name=ecc_point,json=eccPoint" json:"ecc_point,omitempty"`
	K               []byte                          `protobuf:"bytes,3,opt,name=k,proto3" json:"k,omitempty"`
}

func (m *CryptoAsymApiReqECCPointMulFp) Reset()                    { *m = CryptoAsymApiReqECCPointMulFp{} }
func (m *CryptoAsymApiReqECCPointMulFp) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqECCPointMulFp) ProtoMessage()               {}
func (*CryptoAsymApiReqECCPointMulFp) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{2} }

func (m *CryptoAsymApiReqECCPointMulFp) GetEccDomainParams() *CryptoAsymApiECCDomainParamsFp {
	if m != nil {
		return m.EccDomainParams
	}
	return nil
}

func (m *CryptoAsymApiReqECCPointMulFp) GetEccPoint() *ECCPoint {
	if m != nil {
		return m.EccPoint
	}
	return nil
}

func (m *CryptoAsymApiReqECCPointMulFp) GetK() []byte {
	if m != nil {
		return m.K
	}
	return nil
}

type CryptoAsymApiRespECCPointMulFp struct {
	Q *ECCPoint `protobuf:"bytes,1,opt,name=Q" json:"Q,omitempty"`
}

func (m *CryptoAsymApiRespECCPointMulFp) Reset()                    { *m = CryptoAsymApiRespECCPointMulFp{} }
func (m *CryptoAsymApiRespECCPointMulFp) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespECCPointMulFp) ProtoMessage()               {}
func (*CryptoAsymApiRespECCPointMulFp) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{3} }

func (m *CryptoAsymApiRespECCPointMulFp) GetQ() *ECCPoint {
	if m != nil {
		return m.Q
	}
	return nil
}

// ESCDA Signature Generation
type CryptoAsymApiReqECDSASignatureGenFp struct {
	EccDomainParams *CryptoAsymApiECCDomainParamsFp `protobuf:"bytes,1,opt,name=ecc_domain_params,json=eccDomainParams" json:"ecc_domain_params,omitempty"`
	Da              []byte                          `protobuf:"bytes,2,opt,name=da,proto3" json:"da,omitempty"`
	K               []byte                          `protobuf:"bytes,3,opt,name=k,proto3" json:"k,omitempty"`
	H               []byte                          `protobuf:"bytes,4,opt,name=h,proto3" json:"h,omitempty"`
	KeyIdx          int32                           `protobuf:"varint,5,opt,name=key_idx,json=keyIdx" json:"key_idx,omitempty"`
	AsyncEn         bool                            `protobuf:"varint,6,opt,name=async_en,json=asyncEn" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) Reset()         { *m = CryptoAsymApiReqECDSASignatureGenFp{} }
func (m *CryptoAsymApiReqECDSASignatureGenFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqECDSASignatureGenFp) ProtoMessage()    {}
func (*CryptoAsymApiReqECDSASignatureGenFp) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{4}
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetEccDomainParams() *CryptoAsymApiECCDomainParamsFp {
	if m != nil {
		return m.EccDomainParams
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetDa() []byte {
	if m != nil {
		return m.Da
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetK() []byte {
	if m != nil {
		return m.K
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetKeyIdx() int32 {
	if m != nil {
		return m.KeyIdx
	}
	return 0
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

type CryptoAsymApiRespECDSASignatureGenFp struct {
	R []byte `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) Reset()         { *m = CryptoAsymApiRespECDSASignatureGenFp{} }
func (m *CryptoAsymApiRespECDSASignatureGenFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespECDSASignatureGenFp) ProtoMessage()    {}
func (*CryptoAsymApiRespECDSASignatureGenFp) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{5}
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// ECDSA Signature Verification
type CryptoAsymApiReqECDSASignatureVerifyFp struct {
	EccDomainParams *CryptoAsymApiECCDomainParamsFp `protobuf:"bytes,1,opt,name=ecc_domain_params,json=eccDomainParams" json:"ecc_domain_params,omitempty"`
	Q               *ECCPoint                       `protobuf:"bytes,2,opt,name=Q" json:"Q,omitempty"`
	R               []byte                          `protobuf:"bytes,3,opt,name=r,proto3" json:"r,omitempty"`
	S               []byte                          `protobuf:"bytes,4,opt,name=s,proto3" json:"s,omitempty"`
	H               []byte                          `protobuf:"bytes,5,opt,name=h,proto3" json:"h,omitempty"`
	AsyncEn         bool                            `protobuf:"varint,6,opt,name=async_en,json=asyncEn" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) Reset() {
	*m = CryptoAsymApiReqECDSASignatureVerifyFp{}
}
func (m *CryptoAsymApiReqECDSASignatureVerifyFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqECDSASignatureVerifyFp) ProtoMessage()    {}
func (*CryptoAsymApiReqECDSASignatureVerifyFp) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{6}
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetEccDomainParams() *CryptoAsymApiECCDomainParamsFp {
	if m != nil {
		return m.EccDomainParams
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetQ() *ECCPoint {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

// RSA Encryption
type CryptoAsymApiReqRSAEncrypt struct {
	KeySize   uint32 `protobuf:"varint,1,opt,name=KeySize" json:"KeySize,omitempty"`
	ModN      []byte `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	E         []byte `protobuf:"bytes,3,opt,name=e,proto3" json:"e,omitempty"`
	PlainText []byte `protobuf:"bytes,4,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty"`
	AsyncEn   bool   `protobuf:"varint,5,opt,name=async_en,json=asyncEn" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqRSAEncrypt) Reset()                    { *m = CryptoAsymApiReqRSAEncrypt{} }
func (m *CryptoAsymApiReqRSAEncrypt) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSAEncrypt) ProtoMessage()               {}
func (*CryptoAsymApiReqRSAEncrypt) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{7} }

func (m *CryptoAsymApiReqRSAEncrypt) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSAEncrypt) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqRSAEncrypt) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *CryptoAsymApiReqRSAEncrypt) GetPlainText() []byte {
	if m != nil {
		return m.PlainText
	}
	return nil
}

func (m *CryptoAsymApiReqRSAEncrypt) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

type CryptoAsymApiRespRSAEncrypt struct {
	CipherText []byte `protobuf:"bytes,1,opt,name=cipher_text,json=cipherText,proto3" json:"cipher_text,omitempty"`
}

func (m *CryptoAsymApiRespRSAEncrypt) Reset()                    { *m = CryptoAsymApiRespRSAEncrypt{} }
func (m *CryptoAsymApiRespRSAEncrypt) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSAEncrypt) ProtoMessage()               {}
func (*CryptoAsymApiRespRSAEncrypt) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{8} }

func (m *CryptoAsymApiRespRSAEncrypt) GetCipherText() []byte {
	if m != nil {
		return m.CipherText
	}
	return nil
}

// RSA Decryption
type CryptoAsymApiReqRSADecrypt struct {
	KeySize    uint32 `protobuf:"varint,1,opt,name=KeySize" json:"KeySize,omitempty"`
	ModN       []byte `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	D          []byte `protobuf:"bytes,3,opt,name=d,proto3" json:"d,omitempty"`
	CipherText []byte `protobuf:"bytes,4,opt,name=cipher_text,json=cipherText,proto3" json:"cipher_text,omitempty"`
}

func (m *CryptoAsymApiReqRSADecrypt) Reset()                    { *m = CryptoAsymApiReqRSADecrypt{} }
func (m *CryptoAsymApiReqRSADecrypt) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSADecrypt) ProtoMessage()               {}
func (*CryptoAsymApiReqRSADecrypt) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{9} }

func (m *CryptoAsymApiReqRSADecrypt) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSADecrypt) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqRSADecrypt) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *CryptoAsymApiReqRSADecrypt) GetCipherText() []byte {
	if m != nil {
		return m.CipherText
	}
	return nil
}

type CryptoAsymApiRespRSADecrypt struct {
	PlainText []byte `protobuf:"bytes,1,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty"`
}

func (m *CryptoAsymApiRespRSADecrypt) Reset()                    { *m = CryptoAsymApiRespRSADecrypt{} }
func (m *CryptoAsymApiRespRSADecrypt) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSADecrypt) ProtoMessage()               {}
func (*CryptoAsymApiRespRSADecrypt) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{10} }

func (m *CryptoAsymApiRespRSADecrypt) GetPlainText() []byte {
	if m != nil {
		return m.PlainText
	}
	return nil
}

// RSA CRT Decryption
type CryptoAsymApiReqRSACRTDecrypt struct {
	KeySize    uint32 `protobuf:"varint,1,opt,name=KeySize" json:"KeySize,omitempty"`
	P          []byte `protobuf:"bytes,2,opt,name=p,proto3" json:"p,omitempty"`
	Q          []byte `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Dp         []byte `protobuf:"bytes,4,opt,name=dp,proto3" json:"dp,omitempty"`
	Dq         []byte `protobuf:"bytes,5,opt,name=dq,proto3" json:"dq,omitempty"`
	Qinv       []byte `protobuf:"bytes,6,opt,name=qinv,proto3" json:"qinv,omitempty"`
	CipherText []byte `protobuf:"bytes,7,opt,name=cipher_text,json=cipherText,proto3" json:"cipher_text,omitempty"`
	KeyIdx     int32  `protobuf:"varint,8,opt,name=key_idx,json=keyIdx" json:"key_idx,omitempty"`
	AsyncEn    bool   `protobuf:"varint,9,opt,name=async_en,json=asyncEn" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqRSACRTDecrypt) Reset()                    { *m = CryptoAsymApiReqRSACRTDecrypt{} }
func (m *CryptoAsymApiReqRSACRTDecrypt) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSACRTDecrypt) ProtoMessage()               {}
func (*CryptoAsymApiReqRSACRTDecrypt) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{11} }

func (m *CryptoAsymApiReqRSACRTDecrypt) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetDp() []byte {
	if m != nil {
		return m.Dp
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetDq() []byte {
	if m != nil {
		return m.Dq
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetQinv() []byte {
	if m != nil {
		return m.Qinv
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetCipherText() []byte {
	if m != nil {
		return m.CipherText
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetKeyIdx() int32 {
	if m != nil {
		return m.KeyIdx
	}
	return 0
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

type CryptoAsymApiRespRSACRTDecrypt struct {
	PlainText []byte `protobuf:"bytes,1,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty"`
}

func (m *CryptoAsymApiRespRSACRTDecrypt) Reset()         { *m = CryptoAsymApiRespRSACRTDecrypt{} }
func (m *CryptoAsymApiRespRSACRTDecrypt) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSACRTDecrypt) ProtoMessage()    {}
func (*CryptoAsymApiRespRSACRTDecrypt) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{12}
}

func (m *CryptoAsymApiRespRSACRTDecrypt) GetPlainText() []byte {
	if m != nil {
		return m.PlainText
	}
	return nil
}

// Asymmetric Private Key Setup
// Temp API as a workaround until securemon is ready
type CryptoAsymApiReqSetupPrivateKey struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *CryptoAsymApiReqSetupPrivateKey) Reset()         { *m = CryptoAsymApiReqSetupPrivateKey{} }
func (m *CryptoAsymApiReqSetupPrivateKey) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqSetupPrivateKey) ProtoMessage()    {}
func (*CryptoAsymApiReqSetupPrivateKey) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{13}
}

func (m *CryptoAsymApiReqSetupPrivateKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type CryptoAsymApiRespECDSAKeyInfo struct {
	SignKeyIdx int32 `protobuf:"varint,1,opt,name=sign_key_idx,json=signKeyIdx" json:"sign_key_idx,omitempty"`
}

func (m *CryptoAsymApiRespECDSAKeyInfo) Reset()                    { *m = CryptoAsymApiRespECDSAKeyInfo{} }
func (m *CryptoAsymApiRespECDSAKeyInfo) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespECDSAKeyInfo) ProtoMessage()               {}
func (*CryptoAsymApiRespECDSAKeyInfo) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{14} }

func (m *CryptoAsymApiRespECDSAKeyInfo) GetSignKeyIdx() int32 {
	if m != nil {
		return m.SignKeyIdx
	}
	return 0
}

type CryptoAsymApiRespRSAKeyInfo struct {
	SignKeyIdx    int32 `protobuf:"varint,1,opt,name=sign_key_idx,json=signKeyIdx" json:"sign_key_idx,omitempty"`
	DecryptKeyIdx int32 `protobuf:"varint,2,opt,name=decrypt_key_idx,json=decryptKeyIdx" json:"decrypt_key_idx,omitempty"`
}

func (m *CryptoAsymApiRespRSAKeyInfo) Reset()                    { *m = CryptoAsymApiRespRSAKeyInfo{} }
func (m *CryptoAsymApiRespRSAKeyInfo) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSAKeyInfo) ProtoMessage()               {}
func (*CryptoAsymApiRespRSAKeyInfo) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{15} }

func (m *CryptoAsymApiRespRSAKeyInfo) GetSignKeyIdx() int32 {
	if m != nil {
		return m.SignKeyIdx
	}
	return 0
}

func (m *CryptoAsymApiRespRSAKeyInfo) GetDecryptKeyIdx() int32 {
	if m != nil {
		return m.DecryptKeyIdx
	}
	return 0
}

type CryptoAsymApiRespSetupPrivateKey struct {
	KeyType CryptoAsymKeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,enum=types.CryptoAsymKeyType" json:"key_type,omitempty"`
	// Types that are valid to be assigned to KeyInfo:
	//	*CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo
	//	*CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo
	KeyInfo isCryptoAsymApiRespSetupPrivateKey_KeyInfo `protobuf_oneof:"KeyInfo"`
}

func (m *CryptoAsymApiRespSetupPrivateKey) Reset()         { *m = CryptoAsymApiRespSetupPrivateKey{} }
func (m *CryptoAsymApiRespSetupPrivateKey) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespSetupPrivateKey) ProtoMessage()    {}
func (*CryptoAsymApiRespSetupPrivateKey) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{16}
}

type isCryptoAsymApiRespSetupPrivateKey_KeyInfo interface{ isCryptoAsymApiRespSetupPrivateKey_KeyInfo() }

type CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo struct {
	EcdsaKeyInfo *CryptoAsymApiRespECDSAKeyInfo `protobuf:"bytes,2,opt,name=ecdsa_key_info,json=ecdsaKeyInfo,oneof"`
}
type CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo struct {
	RsaKeyInfo *CryptoAsymApiRespRSAKeyInfo `protobuf:"bytes,3,opt,name=rsa_key_info,json=rsaKeyInfo,oneof"`
}

func (*CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo) isCryptoAsymApiRespSetupPrivateKey_KeyInfo() {}
func (*CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo) isCryptoAsymApiRespSetupPrivateKey_KeyInfo()   {}

func (m *CryptoAsymApiRespSetupPrivateKey) GetKeyInfo() isCryptoAsymApiRespSetupPrivateKey_KeyInfo {
	if m != nil {
		return m.KeyInfo
	}
	return nil
}

func (m *CryptoAsymApiRespSetupPrivateKey) GetKeyType() CryptoAsymKeyType {
	if m != nil {
		return m.KeyType
	}
	return CryptoAsymKeyType_CRYPTO_ASYM_KEY_TYPE_ECDSA
}

func (m *CryptoAsymApiRespSetupPrivateKey) GetEcdsaKeyInfo() *CryptoAsymApiRespECDSAKeyInfo {
	if x, ok := m.GetKeyInfo().(*CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo); ok {
		return x.EcdsaKeyInfo
	}
	return nil
}

func (m *CryptoAsymApiRespSetupPrivateKey) GetRsaKeyInfo() *CryptoAsymApiRespRSAKeyInfo {
	if x, ok := m.GetKeyInfo().(*CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo); ok {
		return x.RsaKeyInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CryptoAsymApiRespSetupPrivateKey) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CryptoAsymApiRespSetupPrivateKey_OneofMarshaler, _CryptoAsymApiRespSetupPrivateKey_OneofUnmarshaler, _CryptoAsymApiRespSetupPrivateKey_OneofSizer, []interface{}{
		(*CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo)(nil),
		(*CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo)(nil),
	}
}

func _CryptoAsymApiRespSetupPrivateKey_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CryptoAsymApiRespSetupPrivateKey)
	// KeyInfo
	switch x := m.KeyInfo.(type) {
	case *CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaKeyInfo); err != nil {
			return err
		}
	case *CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaKeyInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CryptoAsymApiRespSetupPrivateKey.KeyInfo has unexpected type %T", x)
	}
	return nil
}

func _CryptoAsymApiRespSetupPrivateKey_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CryptoAsymApiRespSetupPrivateKey)
	switch tag {
	case 2: // KeyInfo.ecdsa_key_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespECDSAKeyInfo)
		err := b.DecodeMessage(msg)
		m.KeyInfo = &CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo{msg}
		return true, err
	case 3: // KeyInfo.rsa_key_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSAKeyInfo)
		err := b.DecodeMessage(msg)
		m.KeyInfo = &CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CryptoAsymApiRespSetupPrivateKey_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CryptoAsymApiRespSetupPrivateKey)
	// KeyInfo
	switch x := m.KeyInfo.(type) {
	case *CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo:
		s := proto.Size(x.EcdsaKeyInfo)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo:
		s := proto.Size(x.RsaKeyInfo)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Certificate Setup
type CryptoAsymApiReqSetupCert struct {
	UpdateType UpdateType `protobuf:"varint,1,opt,name=update_type,json=updateType,enum=cryptoapis.UpdateType" json:"update_type,omitempty"`
	CertId     int32      `protobuf:"varint,2,opt,name=cert_id,json=certId" json:"cert_id,omitempty"`
	Body       string     `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	NextCertId int32      `protobuf:"varint,5,opt,name=next_cert_id,json=nextCertId" json:"next_cert_id,omitempty"`
}

func (m *CryptoAsymApiReqSetupCert) Reset()                    { *m = CryptoAsymApiReqSetupCert{} }
func (m *CryptoAsymApiReqSetupCert) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqSetupCert) ProtoMessage()               {}
func (*CryptoAsymApiReqSetupCert) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{17} }

func (m *CryptoAsymApiReqSetupCert) GetUpdateType() UpdateType {
	if m != nil {
		return m.UpdateType
	}
	return UpdateType_ADD_UPDATE
}

func (m *CryptoAsymApiReqSetupCert) GetCertId() int32 {
	if m != nil {
		return m.CertId
	}
	return 0
}

func (m *CryptoAsymApiReqSetupCert) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *CryptoAsymApiReqSetupCert) GetNextCertId() int32 {
	if m != nil {
		return m.NextCertId
	}
	return 0
}

type CryptoAsymApiRespSetupCert struct {
}

func (m *CryptoAsymApiRespSetupCert) Reset()                    { *m = CryptoAsymApiRespSetupCert{} }
func (m *CryptoAsymApiRespSetupCert) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespSetupCert) ProtoMessage()               {}
func (*CryptoAsymApiRespSetupCert) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{18} }

// RSA Signature Generation
type CryptoAsymApiReqRSASignatureGen struct {
	KeySize uint32 `protobuf:"varint,1,opt,name=KeySize" json:"KeySize,omitempty"`
	ModN    []byte `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	D       []byte `protobuf:"bytes,3,opt,name=d,proto3" json:"d,omitempty"`
	H       []byte `protobuf:"bytes,4,opt,name=h,proto3" json:"h,omitempty"`
	KeyIdx  int32  `protobuf:"varint,5,opt,name=key_idx,json=keyIdx" json:"key_idx,omitempty"`
	AsyncEn bool   `protobuf:"varint,6,opt,name=async_en,json=asyncEn" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqRSASignatureGen) Reset()         { *m = CryptoAsymApiReqRSASignatureGen{} }
func (m *CryptoAsymApiReqRSASignatureGen) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSASignatureGen) ProtoMessage()    {}
func (*CryptoAsymApiReqRSASignatureGen) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{19}
}

func (m *CryptoAsymApiReqRSASignatureGen) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSASignatureGen) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureGen) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureGen) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureGen) GetKeyIdx() int32 {
	if m != nil {
		return m.KeyIdx
	}
	return 0
}

func (m *CryptoAsymApiReqRSASignatureGen) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

type CryptoAsymApiRespRSASignatureGen struct {
	S []byte `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *CryptoAsymApiRespRSASignatureGen) Reset()         { *m = CryptoAsymApiRespRSASignatureGen{} }
func (m *CryptoAsymApiRespRSASignatureGen) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSASignatureGen) ProtoMessage()    {}
func (*CryptoAsymApiRespRSASignatureGen) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{20}
}

func (m *CryptoAsymApiRespRSASignatureGen) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// RSA Signature Verification
type CryptoAsymApiReqRSASignatureVerify struct {
	KeySize uint32 `protobuf:"varint,1,opt,name=KeySize" json:"KeySize,omitempty"`
	ModN    []byte `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	E       []byte `protobuf:"bytes,3,opt,name=e,proto3" json:"e,omitempty"`
	H       []byte `protobuf:"bytes,4,opt,name=h,proto3" json:"h,omitempty"`
	S       []byte `protobuf:"bytes,5,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *CryptoAsymApiReqRSASignatureVerify) Reset()         { *m = CryptoAsymApiReqRSASignatureVerify{} }
func (m *CryptoAsymApiReqRSASignatureVerify) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSASignatureVerify) ProtoMessage()    {}
func (*CryptoAsymApiReqRSASignatureVerify) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{21}
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// Crypto Hash digest generate request
type CryptoSymmApiReqHashGenerate struct {
	Hashtype  CryptoApiHashType `protobuf:"varint,1,opt,name=hashtype,enum=cryptoapis.CryptoApiHashType" json:"hashtype,omitempty"`
	Key       []byte            `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	KeyLen    int32             `protobuf:"varint,3,opt,name=key_len,json=keyLen" json:"key_len,omitempty"`
	Data      []byte            `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	DataLen   int32             `protobuf:"varint,5,opt,name=data_len,json=dataLen" json:"data_len,omitempty"`
	DigestLen int32             `protobuf:"varint,6,opt,name=digest_len,json=digestLen" json:"digest_len,omitempty"`
}

func (m *CryptoSymmApiReqHashGenerate) Reset()                    { *m = CryptoSymmApiReqHashGenerate{} }
func (m *CryptoSymmApiReqHashGenerate) String() string            { return proto.CompactTextString(m) }
func (*CryptoSymmApiReqHashGenerate) ProtoMessage()               {}
func (*CryptoSymmApiReqHashGenerate) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{22} }

func (m *CryptoSymmApiReqHashGenerate) GetHashtype() CryptoApiHashType {
	if m != nil {
		return m.Hashtype
	}
	return CryptoApiHashType_CRYPTOAPI_HASHTYPE_NONE
}

func (m *CryptoSymmApiReqHashGenerate) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CryptoSymmApiReqHashGenerate) GetKeyLen() int32 {
	if m != nil {
		return m.KeyLen
	}
	return 0
}

func (m *CryptoSymmApiReqHashGenerate) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CryptoSymmApiReqHashGenerate) GetDataLen() int32 {
	if m != nil {
		return m.DataLen
	}
	return 0
}

func (m *CryptoSymmApiReqHashGenerate) GetDigestLen() int32 {
	if m != nil {
		return m.DigestLen
	}
	return 0
}

type CryptoSymmApiRespHashGenerate struct {
	Digest []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *CryptoSymmApiRespHashGenerate) Reset()                    { *m = CryptoSymmApiRespHashGenerate{} }
func (m *CryptoSymmApiRespHashGenerate) String() string            { return proto.CompactTextString(m) }
func (*CryptoSymmApiRespHashGenerate) ProtoMessage()               {}
func (*CryptoSymmApiRespHashGenerate) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{23} }

func (m *CryptoSymmApiRespHashGenerate) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

// Crypto Hash digest verify request
type CryptoSymmApiReqHashVerify struct {
	Hashtype  CryptoApiHashType `protobuf:"varint,1,opt,name=hashtype,enum=cryptoapis.CryptoApiHashType" json:"hashtype,omitempty"`
	Key       []byte            `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	KeyLen    int32             `protobuf:"varint,3,opt,name=key_len,json=keyLen" json:"key_len,omitempty"`
	Data      []byte            `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	DataLen   int32             `protobuf:"varint,5,opt,name=data_len,json=dataLen" json:"data_len,omitempty"`
	Digest    []byte            `protobuf:"bytes,6,opt,name=digest,proto3" json:"digest,omitempty"`
	DigestLen int32             `protobuf:"varint,7,opt,name=digest_len,json=digestLen" json:"digest_len,omitempty"`
}

func (m *CryptoSymmApiReqHashVerify) Reset()                    { *m = CryptoSymmApiReqHashVerify{} }
func (m *CryptoSymmApiReqHashVerify) String() string            { return proto.CompactTextString(m) }
func (*CryptoSymmApiReqHashVerify) ProtoMessage()               {}
func (*CryptoSymmApiReqHashVerify) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{24} }

func (m *CryptoSymmApiReqHashVerify) GetHashtype() CryptoApiHashType {
	if m != nil {
		return m.Hashtype
	}
	return CryptoApiHashType_CRYPTOAPI_HASHTYPE_NONE
}

func (m *CryptoSymmApiReqHashVerify) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CryptoSymmApiReqHashVerify) GetKeyLen() int32 {
	if m != nil {
		return m.KeyLen
	}
	return 0
}

func (m *CryptoSymmApiReqHashVerify) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CryptoSymmApiReqHashVerify) GetDataLen() int32 {
	if m != nil {
		return m.DataLen
	}
	return 0
}

func (m *CryptoSymmApiReqHashVerify) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *CryptoSymmApiReqHashVerify) GetDigestLen() int32 {
	if m != nil {
		return m.DigestLen
	}
	return 0
}

type CryptoApiRequest struct {
	ApiType CryptoApiType `protobuf:"varint,1,opt,name=api_type,json=apiType,enum=cryptoapis.CryptoApiType" json:"api_type,omitempty"`
	// Types that are valid to be assigned to CryptoApiReq:
	//	*CryptoApiRequest_EccPointMulFp
	//	*CryptoApiRequest_EcdsaSigGenFp
	//	*CryptoApiRequest_EcdsaSigVerifyFp
	//	*CryptoApiRequest_RsaEncrypt
	//	*CryptoApiRequest_RsaDecrypt
	//	*CryptoApiRequest_RsaCrtDecrypt
	//	*CryptoApiRequest_HashGenerate
	//	*CryptoApiRequest_HashVerify
	//	*CryptoApiRequest_RsaSigGen
	//	*CryptoApiRequest_RsaSigVerify
	//	*CryptoApiRequest_SetupPrivKey
	//	*CryptoApiRequest_SetupCert
	CryptoApiReq isCryptoApiRequest_CryptoApiReq `protobuf_oneof:"CryptoApiReq"`
}

func (m *CryptoApiRequest) Reset()                    { *m = CryptoApiRequest{} }
func (m *CryptoApiRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoApiRequest) ProtoMessage()               {}
func (*CryptoApiRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{25} }

type isCryptoApiRequest_CryptoApiReq interface{ isCryptoApiRequest_CryptoApiReq() }

type CryptoApiRequest_EccPointMulFp struct {
	EccPointMulFp *CryptoAsymApiReqECCPointMulFp `protobuf:"bytes,2,opt,name=ecc_point_mul_fp,json=eccPointMulFp,oneof"`
}
type CryptoApiRequest_EcdsaSigGenFp struct {
	EcdsaSigGenFp *CryptoAsymApiReqECDSASignatureGenFp `protobuf:"bytes,3,opt,name=ecdsa_sig_gen_fp,json=ecdsaSigGenFp,oneof"`
}
type CryptoApiRequest_EcdsaSigVerifyFp struct {
	EcdsaSigVerifyFp *CryptoAsymApiReqECDSASignatureVerifyFp `protobuf:"bytes,4,opt,name=ecdsa_sig_verify_fp,json=ecdsaSigVerifyFp,oneof"`
}
type CryptoApiRequest_RsaEncrypt struct {
	RsaEncrypt *CryptoAsymApiReqRSAEncrypt `protobuf:"bytes,5,opt,name=rsa_encrypt,json=rsaEncrypt,oneof"`
}
type CryptoApiRequest_RsaDecrypt struct {
	RsaDecrypt *CryptoAsymApiReqRSADecrypt `protobuf:"bytes,6,opt,name=rsa_decrypt,json=rsaDecrypt,oneof"`
}
type CryptoApiRequest_RsaCrtDecrypt struct {
	RsaCrtDecrypt *CryptoAsymApiReqRSACRTDecrypt `protobuf:"bytes,7,opt,name=rsa_crt_decrypt,json=rsaCrtDecrypt,oneof"`
}
type CryptoApiRequest_HashGenerate struct {
	HashGenerate *CryptoSymmApiReqHashGenerate `protobuf:"bytes,8,opt,name=hash_generate,json=hashGenerate,oneof"`
}
type CryptoApiRequest_HashVerify struct {
	HashVerify *CryptoSymmApiReqHashVerify `protobuf:"bytes,9,opt,name=hash_verify,json=hashVerify,oneof"`
}
type CryptoApiRequest_RsaSigGen struct {
	RsaSigGen *CryptoAsymApiReqRSASignatureGen `protobuf:"bytes,10,opt,name=rsa_sig_gen,json=rsaSigGen,oneof"`
}
type CryptoApiRequest_RsaSigVerify struct {
	RsaSigVerify *CryptoAsymApiReqRSASignatureVerify `protobuf:"bytes,11,opt,name=rsa_sig_verify,json=rsaSigVerify,oneof"`
}
type CryptoApiRequest_SetupPrivKey struct {
	SetupPrivKey *CryptoAsymApiReqSetupPrivateKey `protobuf:"bytes,12,opt,name=setup_priv_key,json=setupPrivKey,oneof"`
}
type CryptoApiRequest_SetupCert struct {
	SetupCert *CryptoAsymApiReqSetupCert `protobuf:"bytes,13,opt,name=setup_cert,json=setupCert,oneof"`
}

func (*CryptoApiRequest_EccPointMulFp) isCryptoApiRequest_CryptoApiReq()    {}
func (*CryptoApiRequest_EcdsaSigGenFp) isCryptoApiRequest_CryptoApiReq()    {}
func (*CryptoApiRequest_EcdsaSigVerifyFp) isCryptoApiRequest_CryptoApiReq() {}
func (*CryptoApiRequest_RsaEncrypt) isCryptoApiRequest_CryptoApiReq()       {}
func (*CryptoApiRequest_RsaDecrypt) isCryptoApiRequest_CryptoApiReq()       {}
func (*CryptoApiRequest_RsaCrtDecrypt) isCryptoApiRequest_CryptoApiReq()    {}
func (*CryptoApiRequest_HashGenerate) isCryptoApiRequest_CryptoApiReq()     {}
func (*CryptoApiRequest_HashVerify) isCryptoApiRequest_CryptoApiReq()       {}
func (*CryptoApiRequest_RsaSigGen) isCryptoApiRequest_CryptoApiReq()        {}
func (*CryptoApiRequest_RsaSigVerify) isCryptoApiRequest_CryptoApiReq()     {}
func (*CryptoApiRequest_SetupPrivKey) isCryptoApiRequest_CryptoApiReq()     {}
func (*CryptoApiRequest_SetupCert) isCryptoApiRequest_CryptoApiReq()        {}

func (m *CryptoApiRequest) GetCryptoApiReq() isCryptoApiRequest_CryptoApiReq {
	if m != nil {
		return m.CryptoApiReq
	}
	return nil
}

func (m *CryptoApiRequest) GetApiType() CryptoApiType {
	if m != nil {
		return m.ApiType
	}
	return CryptoApiType_ASYMAPI_ECC_POINT_MUL_FP
}

func (m *CryptoApiRequest) GetEccPointMulFp() *CryptoAsymApiReqECCPointMulFp {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_EccPointMulFp); ok {
		return x.EccPointMulFp
	}
	return nil
}

func (m *CryptoApiRequest) GetEcdsaSigGenFp() *CryptoAsymApiReqECDSASignatureGenFp {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_EcdsaSigGenFp); ok {
		return x.EcdsaSigGenFp
	}
	return nil
}

func (m *CryptoApiRequest) GetEcdsaSigVerifyFp() *CryptoAsymApiReqECDSASignatureVerifyFp {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_EcdsaSigVerifyFp); ok {
		return x.EcdsaSigVerifyFp
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaEncrypt() *CryptoAsymApiReqRSAEncrypt {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaEncrypt); ok {
		return x.RsaEncrypt
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaDecrypt() *CryptoAsymApiReqRSADecrypt {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaDecrypt); ok {
		return x.RsaDecrypt
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaCrtDecrypt() *CryptoAsymApiReqRSACRTDecrypt {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaCrtDecrypt); ok {
		return x.RsaCrtDecrypt
	}
	return nil
}

func (m *CryptoApiRequest) GetHashGenerate() *CryptoSymmApiReqHashGenerate {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_HashGenerate); ok {
		return x.HashGenerate
	}
	return nil
}

func (m *CryptoApiRequest) GetHashVerify() *CryptoSymmApiReqHashVerify {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_HashVerify); ok {
		return x.HashVerify
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaSigGen() *CryptoAsymApiReqRSASignatureGen {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaSigGen); ok {
		return x.RsaSigGen
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaSigVerify() *CryptoAsymApiReqRSASignatureVerify {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaSigVerify); ok {
		return x.RsaSigVerify
	}
	return nil
}

func (m *CryptoApiRequest) GetSetupPrivKey() *CryptoAsymApiReqSetupPrivateKey {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_SetupPrivKey); ok {
		return x.SetupPrivKey
	}
	return nil
}

func (m *CryptoApiRequest) GetSetupCert() *CryptoAsymApiReqSetupCert {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_SetupCert); ok {
		return x.SetupCert
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CryptoApiRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CryptoApiRequest_OneofMarshaler, _CryptoApiRequest_OneofUnmarshaler, _CryptoApiRequest_OneofSizer, []interface{}{
		(*CryptoApiRequest_EccPointMulFp)(nil),
		(*CryptoApiRequest_EcdsaSigGenFp)(nil),
		(*CryptoApiRequest_EcdsaSigVerifyFp)(nil),
		(*CryptoApiRequest_RsaEncrypt)(nil),
		(*CryptoApiRequest_RsaDecrypt)(nil),
		(*CryptoApiRequest_RsaCrtDecrypt)(nil),
		(*CryptoApiRequest_HashGenerate)(nil),
		(*CryptoApiRequest_HashVerify)(nil),
		(*CryptoApiRequest_RsaSigGen)(nil),
		(*CryptoApiRequest_RsaSigVerify)(nil),
		(*CryptoApiRequest_SetupPrivKey)(nil),
		(*CryptoApiRequest_SetupCert)(nil),
	}
}

func _CryptoApiRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CryptoApiRequest)
	// CryptoApiReq
	switch x := m.CryptoApiReq.(type) {
	case *CryptoApiRequest_EccPointMulFp:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EccPointMulFp); err != nil {
			return err
		}
	case *CryptoApiRequest_EcdsaSigGenFp:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaSigGenFp); err != nil {
			return err
		}
	case *CryptoApiRequest_EcdsaSigVerifyFp:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaSigVerifyFp); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaEncrypt:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaEncrypt); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaDecrypt:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaDecrypt); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaCrtDecrypt:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaCrtDecrypt); err != nil {
			return err
		}
	case *CryptoApiRequest_HashGenerate:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashGenerate); err != nil {
			return err
		}
	case *CryptoApiRequest_HashVerify:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashVerify); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaSigGen:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaSigGen); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaSigVerify:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaSigVerify); err != nil {
			return err
		}
	case *CryptoApiRequest_SetupPrivKey:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupPrivKey); err != nil {
			return err
		}
	case *CryptoApiRequest_SetupCert:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupCert); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CryptoApiRequest.CryptoApiReq has unexpected type %T", x)
	}
	return nil
}

func _CryptoApiRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CryptoApiRequest)
	switch tag {
	case 2: // CryptoApiReq.ecc_point_mul_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqECCPointMulFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_EccPointMulFp{msg}
		return true, err
	case 3: // CryptoApiReq.ecdsa_sig_gen_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqECDSASignatureGenFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_EcdsaSigGenFp{msg}
		return true, err
	case 4: // CryptoApiReq.ecdsa_sig_verify_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqECDSASignatureVerifyFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_EcdsaSigVerifyFp{msg}
		return true, err
	case 5: // CryptoApiReq.rsa_encrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSAEncrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaEncrypt{msg}
		return true, err
	case 6: // CryptoApiReq.rsa_decrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSADecrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaDecrypt{msg}
		return true, err
	case 7: // CryptoApiReq.rsa_crt_decrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSACRTDecrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaCrtDecrypt{msg}
		return true, err
	case 8: // CryptoApiReq.hash_generate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoSymmApiReqHashGenerate)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_HashGenerate{msg}
		return true, err
	case 9: // CryptoApiReq.hash_verify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoSymmApiReqHashVerify)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_HashVerify{msg}
		return true, err
	case 10: // CryptoApiReq.rsa_sig_gen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSASignatureGen)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaSigGen{msg}
		return true, err
	case 11: // CryptoApiReq.rsa_sig_verify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSASignatureVerify)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaSigVerify{msg}
		return true, err
	case 12: // CryptoApiReq.setup_priv_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqSetupPrivateKey)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_SetupPrivKey{msg}
		return true, err
	case 13: // CryptoApiReq.setup_cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqSetupCert)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_SetupCert{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CryptoApiRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CryptoApiRequest)
	// CryptoApiReq
	switch x := m.CryptoApiReq.(type) {
	case *CryptoApiRequest_EccPointMulFp:
		s := proto.Size(x.EccPointMulFp)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_EcdsaSigGenFp:
		s := proto.Size(x.EcdsaSigGenFp)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_EcdsaSigVerifyFp:
		s := proto.Size(x.EcdsaSigVerifyFp)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaEncrypt:
		s := proto.Size(x.RsaEncrypt)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaDecrypt:
		s := proto.Size(x.RsaDecrypt)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaCrtDecrypt:
		s := proto.Size(x.RsaCrtDecrypt)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_HashGenerate:
		s := proto.Size(x.HashGenerate)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_HashVerify:
		s := proto.Size(x.HashVerify)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaSigGen:
		s := proto.Size(x.RsaSigGen)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaSigVerify:
		s := proto.Size(x.RsaSigVerify)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_SetupPrivKey:
		s := proto.Size(x.SetupPrivKey)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_SetupCert:
		s := proto.Size(x.SetupCert)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CryptoApiResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	// Types that are valid to be assigned to CryptoApiResp:
	//	*CryptoApiResponse_EccPointMulFp
	//	*CryptoApiResponse_EcdsaSigGenFp
	//	*CryptoApiResponse_RsaEncrypt
	//	*CryptoApiResponse_RsaDecrypt
	//	*CryptoApiResponse_RsaCrtDecrypt
	//	*CryptoApiResponse_HashGenerate
	//	*CryptoApiResponse_RsaSigGen
	//	*CryptoApiResponse_SetupPrivKey
	//	*CryptoApiResponse_SetupCert
	CryptoApiResp isCryptoApiResponse_CryptoApiResp `protobuf_oneof:"CryptoApiResp"`
}

func (m *CryptoApiResponse) Reset()                    { *m = CryptoApiResponse{} }
func (m *CryptoApiResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoApiResponse) ProtoMessage()               {}
func (*CryptoApiResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{26} }

type isCryptoApiResponse_CryptoApiResp interface{ isCryptoApiResponse_CryptoApiResp() }

type CryptoApiResponse_EccPointMulFp struct {
	EccPointMulFp *CryptoAsymApiRespECCPointMulFp `protobuf:"bytes,2,opt,name=ecc_point_mul_fp,json=eccPointMulFp,oneof"`
}
type CryptoApiResponse_EcdsaSigGenFp struct {
	EcdsaSigGenFp *CryptoAsymApiRespECDSASignatureGenFp `protobuf:"bytes,3,opt,name=ecdsa_sig_gen_fp,json=ecdsaSigGenFp,oneof"`
}
type CryptoApiResponse_RsaEncrypt struct {
	RsaEncrypt *CryptoAsymApiRespRSAEncrypt `protobuf:"bytes,4,opt,name=rsa_encrypt,json=rsaEncrypt,oneof"`
}
type CryptoApiResponse_RsaDecrypt struct {
	RsaDecrypt *CryptoAsymApiRespRSADecrypt `protobuf:"bytes,5,opt,name=rsa_decrypt,json=rsaDecrypt,oneof"`
}
type CryptoApiResponse_RsaCrtDecrypt struct {
	RsaCrtDecrypt *CryptoAsymApiRespRSACRTDecrypt `protobuf:"bytes,6,opt,name=rsa_crt_decrypt,json=rsaCrtDecrypt,oneof"`
}
type CryptoApiResponse_HashGenerate struct {
	HashGenerate *CryptoSymmApiRespHashGenerate `protobuf:"bytes,7,opt,name=hash_generate,json=hashGenerate,oneof"`
}
type CryptoApiResponse_RsaSigGen struct {
	RsaSigGen *CryptoAsymApiRespRSASignatureGen `protobuf:"bytes,8,opt,name=rsa_sig_gen,json=rsaSigGen,oneof"`
}
type CryptoApiResponse_SetupPrivKey struct {
	SetupPrivKey *CryptoAsymApiRespSetupPrivateKey `protobuf:"bytes,9,opt,name=setup_priv_key,json=setupPrivKey,oneof"`
}
type CryptoApiResponse_SetupCert struct {
	SetupCert *CryptoAsymApiRespSetupCert `protobuf:"bytes,10,opt,name=setup_cert,json=setupCert,oneof"`
}

func (*CryptoApiResponse_EccPointMulFp) isCryptoApiResponse_CryptoApiResp() {}
func (*CryptoApiResponse_EcdsaSigGenFp) isCryptoApiResponse_CryptoApiResp() {}
func (*CryptoApiResponse_RsaEncrypt) isCryptoApiResponse_CryptoApiResp()    {}
func (*CryptoApiResponse_RsaDecrypt) isCryptoApiResponse_CryptoApiResp()    {}
func (*CryptoApiResponse_RsaCrtDecrypt) isCryptoApiResponse_CryptoApiResp() {}
func (*CryptoApiResponse_HashGenerate) isCryptoApiResponse_CryptoApiResp()  {}
func (*CryptoApiResponse_RsaSigGen) isCryptoApiResponse_CryptoApiResp()     {}
func (*CryptoApiResponse_SetupPrivKey) isCryptoApiResponse_CryptoApiResp()  {}
func (*CryptoApiResponse_SetupCert) isCryptoApiResponse_CryptoApiResp()     {}

func (m *CryptoApiResponse) GetCryptoApiResp() isCryptoApiResponse_CryptoApiResp {
	if m != nil {
		return m.CryptoApiResp
	}
	return nil
}

func (m *CryptoApiResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoApiResponse) GetEccPointMulFp() *CryptoAsymApiRespECCPointMulFp {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_EccPointMulFp); ok {
		return x.EccPointMulFp
	}
	return nil
}

func (m *CryptoApiResponse) GetEcdsaSigGenFp() *CryptoAsymApiRespECDSASignatureGenFp {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_EcdsaSigGenFp); ok {
		return x.EcdsaSigGenFp
	}
	return nil
}

func (m *CryptoApiResponse) GetRsaEncrypt() *CryptoAsymApiRespRSAEncrypt {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_RsaEncrypt); ok {
		return x.RsaEncrypt
	}
	return nil
}

func (m *CryptoApiResponse) GetRsaDecrypt() *CryptoAsymApiRespRSADecrypt {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_RsaDecrypt); ok {
		return x.RsaDecrypt
	}
	return nil
}

func (m *CryptoApiResponse) GetRsaCrtDecrypt() *CryptoAsymApiRespRSACRTDecrypt {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_RsaCrtDecrypt); ok {
		return x.RsaCrtDecrypt
	}
	return nil
}

func (m *CryptoApiResponse) GetHashGenerate() *CryptoSymmApiRespHashGenerate {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_HashGenerate); ok {
		return x.HashGenerate
	}
	return nil
}

func (m *CryptoApiResponse) GetRsaSigGen() *CryptoAsymApiRespRSASignatureGen {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_RsaSigGen); ok {
		return x.RsaSigGen
	}
	return nil
}

func (m *CryptoApiResponse) GetSetupPrivKey() *CryptoAsymApiRespSetupPrivateKey {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_SetupPrivKey); ok {
		return x.SetupPrivKey
	}
	return nil
}

func (m *CryptoApiResponse) GetSetupCert() *CryptoAsymApiRespSetupCert {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_SetupCert); ok {
		return x.SetupCert
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CryptoApiResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CryptoApiResponse_OneofMarshaler, _CryptoApiResponse_OneofUnmarshaler, _CryptoApiResponse_OneofSizer, []interface{}{
		(*CryptoApiResponse_EccPointMulFp)(nil),
		(*CryptoApiResponse_EcdsaSigGenFp)(nil),
		(*CryptoApiResponse_RsaEncrypt)(nil),
		(*CryptoApiResponse_RsaDecrypt)(nil),
		(*CryptoApiResponse_RsaCrtDecrypt)(nil),
		(*CryptoApiResponse_HashGenerate)(nil),
		(*CryptoApiResponse_RsaSigGen)(nil),
		(*CryptoApiResponse_SetupPrivKey)(nil),
		(*CryptoApiResponse_SetupCert)(nil),
	}
}

func _CryptoApiResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CryptoApiResponse)
	// CryptoApiResp
	switch x := m.CryptoApiResp.(type) {
	case *CryptoApiResponse_EccPointMulFp:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EccPointMulFp); err != nil {
			return err
		}
	case *CryptoApiResponse_EcdsaSigGenFp:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaSigGenFp); err != nil {
			return err
		}
	case *CryptoApiResponse_RsaEncrypt:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaEncrypt); err != nil {
			return err
		}
	case *CryptoApiResponse_RsaDecrypt:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaDecrypt); err != nil {
			return err
		}
	case *CryptoApiResponse_RsaCrtDecrypt:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaCrtDecrypt); err != nil {
			return err
		}
	case *CryptoApiResponse_HashGenerate:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashGenerate); err != nil {
			return err
		}
	case *CryptoApiResponse_RsaSigGen:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaSigGen); err != nil {
			return err
		}
	case *CryptoApiResponse_SetupPrivKey:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupPrivKey); err != nil {
			return err
		}
	case *CryptoApiResponse_SetupCert:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupCert); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CryptoApiResponse.CryptoApiResp has unexpected type %T", x)
	}
	return nil
}

func _CryptoApiResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CryptoApiResponse)
	switch tag {
	case 2: // CryptoApiResp.ecc_point_mul_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespECCPointMulFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_EccPointMulFp{msg}
		return true, err
	case 3: // CryptoApiResp.ecdsa_sig_gen_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespECDSASignatureGenFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_EcdsaSigGenFp{msg}
		return true, err
	case 4: // CryptoApiResp.rsa_encrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSAEncrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_RsaEncrypt{msg}
		return true, err
	case 5: // CryptoApiResp.rsa_decrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSADecrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_RsaDecrypt{msg}
		return true, err
	case 6: // CryptoApiResp.rsa_crt_decrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSACRTDecrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_RsaCrtDecrypt{msg}
		return true, err
	case 7: // CryptoApiResp.hash_generate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoSymmApiRespHashGenerate)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_HashGenerate{msg}
		return true, err
	case 8: // CryptoApiResp.rsa_sig_gen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSASignatureGen)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_RsaSigGen{msg}
		return true, err
	case 9: // CryptoApiResp.setup_priv_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespSetupPrivateKey)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_SetupPrivKey{msg}
		return true, err
	case 10: // CryptoApiResp.setup_cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespSetupCert)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_SetupCert{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CryptoApiResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CryptoApiResponse)
	// CryptoApiResp
	switch x := m.CryptoApiResp.(type) {
	case *CryptoApiResponse_EccPointMulFp:
		s := proto.Size(x.EccPointMulFp)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_EcdsaSigGenFp:
		s := proto.Size(x.EcdsaSigGenFp)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_RsaEncrypt:
		s := proto.Size(x.RsaEncrypt)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_RsaDecrypt:
		s := proto.Size(x.RsaDecrypt)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_RsaCrtDecrypt:
		s := proto.Size(x.RsaCrtDecrypt)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_HashGenerate:
		s := proto.Size(x.HashGenerate)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_RsaSigGen:
		s := proto.Size(x.RsaSigGen)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_SetupPrivKey:
		s := proto.Size(x.SetupPrivKey)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_SetupCert:
		s := proto.Size(x.SetupCert)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CryptoApiRequestMsg struct {
	Request []*CryptoApiRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoApiRequestMsg) Reset()                    { *m = CryptoApiRequestMsg{} }
func (m *CryptoApiRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoApiRequestMsg) ProtoMessage()               {}
func (*CryptoApiRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{27} }

func (m *CryptoApiRequestMsg) GetRequest() []*CryptoApiRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoApiResponseMsg struct {
	Response []*CryptoApiResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoApiResponseMsg) Reset()                    { *m = CryptoApiResponseMsg{} }
func (m *CryptoApiResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoApiResponseMsg) ProtoMessage()               {}
func (*CryptoApiResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{28} }

func (m *CryptoApiResponseMsg) GetResponse() []*CryptoApiResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*ECCPoint)(nil), "halproto.ECCPoint")
	proto.RegisterType((*CryptoAsymApiECCDomainParamsFp)(nil), "halproto.CryptoAsymApiECCDomainParamsFp")
	proto.RegisterType((*CryptoAsymApiReqECCPointMulFp)(nil), "halproto.CryptoAsymApiReqECCPointMulFp")
	proto.RegisterType((*CryptoAsymApiRespECCPointMulFp)(nil), "halproto.CryptoAsymApiRespECCPointMulFp")
	proto.RegisterType((*CryptoAsymApiReqECDSASignatureGenFp)(nil), "halproto.CryptoAsymApiReqECDSASignatureGenFp")
	proto.RegisterType((*CryptoAsymApiRespECDSASignatureGenFp)(nil), "halproto.CryptoAsymApiRespECDSASignatureGenFp")
	proto.RegisterType((*CryptoAsymApiReqECDSASignatureVerifyFp)(nil), "halproto.CryptoAsymApiReqECDSASignatureVerifyFp")
	proto.RegisterType((*CryptoAsymApiReqRSAEncrypt)(nil), "halproto.CryptoAsymApiReqRSAEncrypt")
	proto.RegisterType((*CryptoAsymApiRespRSAEncrypt)(nil), "halproto.CryptoAsymApiRespRSAEncrypt")
	proto.RegisterType((*CryptoAsymApiReqRSADecrypt)(nil), "halproto.CryptoAsymApiReqRSADecrypt")
	proto.RegisterType((*CryptoAsymApiRespRSADecrypt)(nil), "halproto.CryptoAsymApiRespRSADecrypt")
	proto.RegisterType((*CryptoAsymApiReqRSACRTDecrypt)(nil), "halproto.CryptoAsymApiReqRSACRTDecrypt")
	proto.RegisterType((*CryptoAsymApiRespRSACRTDecrypt)(nil), "halproto.CryptoAsymApiRespRSACRTDecrypt")
	proto.RegisterType((*CryptoAsymApiReqSetupPrivateKey)(nil), "halproto.CryptoAsymApiReqSetupPrivateKey")
	proto.RegisterType((*CryptoAsymApiRespECDSAKeyInfo)(nil), "halproto.CryptoAsymApiRespECDSAKeyInfo")
	proto.RegisterType((*CryptoAsymApiRespRSAKeyInfo)(nil), "halproto.CryptoAsymApiRespRSAKeyInfo")
	proto.RegisterType((*CryptoAsymApiRespSetupPrivateKey)(nil), "halproto.CryptoAsymApiRespSetupPrivateKey")
	proto.RegisterType((*CryptoAsymApiReqSetupCert)(nil), "halproto.CryptoAsymApiReqSetupCert")
	proto.RegisterType((*CryptoAsymApiRespSetupCert)(nil), "halproto.CryptoAsymApiRespSetupCert")
	proto.RegisterType((*CryptoAsymApiReqRSASignatureGen)(nil), "halproto.CryptoAsymApiReqRSASignatureGen")
	proto.RegisterType((*CryptoAsymApiRespRSASignatureGen)(nil), "halproto.CryptoAsymApiRespRSASignatureGen")
	proto.RegisterType((*CryptoAsymApiReqRSASignatureVerify)(nil), "halproto.CryptoAsymApiReqRSASignatureVerify")
	proto.RegisterType((*CryptoSymmApiReqHashGenerate)(nil), "halproto.CryptoSymmApiReqHashGenerate")
	proto.RegisterType((*CryptoSymmApiRespHashGenerate)(nil), "halproto.CryptoSymmApiRespHashGenerate")
	proto.RegisterType((*CryptoSymmApiReqHashVerify)(nil), "halproto.CryptoSymmApiReqHashVerify")
	proto.RegisterType((*CryptoApiRequest)(nil), "halproto.CryptoApiRequest")
	proto.RegisterType((*CryptoApiResponse)(nil), "halproto.CryptoApiResponse")
	proto.RegisterType((*CryptoApiRequestMsg)(nil), "halproto.CryptoApiRequestMsg")
	proto.RegisterType((*CryptoApiResponseMsg)(nil), "halproto.CryptoApiResponseMsg")
	proto.RegisterEnum("halproto.CryptoApiHashType", CryptoApiHashType_name, CryptoApiHashType_value)
	proto.RegisterEnum("halproto.CryptoApiType", CryptoApiType_name, CryptoApiType_value)
	proto.RegisterEnum("halproto.UpdateType", UpdateType_name, UpdateType_value)
}

func init() { proto.RegisterFile("crypto_apis.proto", fileDescriptor16) }

var fileDescriptor16 = []byte{
	// 1976 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x4f, 0x6f, 0xdb, 0xc8,
	0x15, 0x37, 0x65, 0xeb, 0xdf, 0x93, 0x6c, 0x33, 0x93, 0x6d, 0x22, 0x2b, 0xf6, 0x46, 0xe0, 0x76,
	0x53, 0xaf, 0xdb, 0x3a, 0x6b, 0x39, 0xf2, 0xee, 0x02, 0x45, 0x0b, 0x45, 0xa2, 0x6d, 0xad, 0x23,
	0x47, 0x21, 0x65, 0x03, 0xde, 0x1e, 0x08, 0x46, 0x9c, 0x48, 0x84, 0x6d, 0x8a, 0x26, 0x69, 0xc3,
	0x5a, 0xa0, 0x97, 0x1e, 0x7d, 0x2d, 0xd0, 0x9b, 0x81, 0x02, 0xfd, 0x12, 0x8b, 0x7e, 0x86, 0x9e,
	0x7a, 0xea, 0xa5, 0x3d, 0xb7, 0xdf, 0xa2, 0x98, 0x19, 0x0e, 0x45, 0x52, 0x94, 0x64, 0x34, 0x58,
	0x60, 0x4f, 0xe6, 0x9b, 0x79, 0xef, 0x37, 0xef, 0xff, 0x7b, 0x4a, 0xe0, 0x51, 0xcf, 0x19, 0xd9,
	0xde, 0x50, 0xd3, 0x6d, 0xd3, 0xdd, 0xb6, 0x9d, 0xa1, 0x37, 0x44, 0xc0, 0x8e, 0xc8, 0x49, 0xb9,
	0xe0, 0x8d, 0x6c, 0xec, 0x5f, 0x48, 0x2f, 0x20, 0x27, 0x37, 0x1a, 0x9d, 0xa1, 0x69, 0x79, 0xa8,
	0x08, 0xc2, 0x6d, 0x49, 0xa8, 0x08, 0x9b, 0x45, 0x45, 0xb8, 0x25, 0xd4, 0xa8, 0x94, 0x62, 0xd4,
	0x48, 0xfa, 0xb3, 0x00, 0x9f, 0x36, 0x28, 0x46, 0xdd, 0x1d, 0x5d, 0xd6, 0x6d, 0x53, 0x6e, 0x34,
	0x9a, 0xc3, 0x4b, 0xdd, 0xb4, 0x3a, 0xba, 0xa3, 0x5f, 0xba, 0xfb, 0x36, 0x2a, 0x41, 0xf6, 0x08,
	0x8f, 0x54, 0xf3, 0x7b, 0x4c, 0x41, 0x96, 0x15, 0x4e, 0x12, 0x28, 0x9b, 0x43, 0xd9, 0x84, 0xd2,
	0x4b, 0x8b, 0x8c, 0xd2, 0x09, 0xf5, 0xbe, 0xb4, 0xc4, 0xa8, 0xf7, 0x48, 0x02, 0xe1, 0xa0, 0x94,
	0xae, 0x08, 0x9b, 0x85, 0xea, 0x27, 0xdb, 0x63, 0x9d, 0xb7, 0xb9, 0x8e, 0x8a, 0x70, 0x40, 0x24,
	0xac, 0x52, 0x86, 0x49, 0x58, 0xd2, 0x0f, 0x02, 0x6c, 0x44, 0x14, 0x53, 0xf0, 0x15, 0xe7, 0x6e,
	0x5f, 0x5f, 0xec, 0xdb, 0xe8, 0x14, 0x1e, 0xe1, 0x5e, 0x4f, 0x33, 0xa8, 0xb6, 0x9a, 0x4d, 0xd5,
	0xa5, 0x1a, 0x16, 0xaa, 0x5b, 0xe1, 0x37, 0x66, 0x9b, 0xa7, 0xac, 0xe2, 0x5e, 0x2f, 0x7c, 0x84,
	0x76, 0x20, 0x4f, 0x70, 0x6d, 0xf2, 0x12, 0xb5, 0x6e, 0x9a, 0xce, 0x39, 0xdc, 0xeb, 0x05, 0x1e,
	0x3e, 0xe7, 0xa6, 0x9f, 0x4b, 0xcd, 0x98, 0x4b, 0x15, 0xec, 0xda, 0x51, 0xd5, 0x25, 0x10, 0xde,
	0xf9, 0xaa, 0x4e, 0x71, 0xc7, 0x3b, 0xe9, 0x5f, 0x02, 0x7c, 0x36, 0xe9, 0x80, 0xa6, 0x5a, 0x57,
	0xcd, 0xbe, 0xa5, 0x7b, 0xd7, 0x0e, 0x3e, 0xc0, 0xd6, 0x8f, 0xe8, 0x86, 0x15, 0x48, 0x19, 0xba,
	0x1f, 0xdd, 0x94, 0xa1, 0x47, 0x6d, 0x24, 0xd4, 0x80, 0x87, 0x77, 0x80, 0x9e, 0x42, 0xf6, 0x1c,
	0x8f, 0x34, 0xd3, 0xb8, 0xa5, 0x41, 0x4e, 0x2b, 0x99, 0x73, 0x3c, 0x6a, 0x19, 0xb7, 0x68, 0x0d,
	0x72, 0xba, 0x3b, 0xb2, 0x7a, 0x1a, 0x66, 0xa1, 0xcd, 0x29, 0x59, 0x4a, 0xcb, 0x96, 0xf4, 0x1a,
	0x7e, 0x9e, 0xe0, 0xa5, 0x49, 0xfb, 0x8a, 0x20, 0x38, 0x3c, 0x7b, 0x1d, 0x42, 0xb9, 0x3c, 0xe5,
	0x5c, 0xe9, 0xbf, 0x02, 0xbc, 0x98, 0xed, 0xa3, 0x53, 0xec, 0x98, 0x1f, 0x46, 0x3f, 0xa2, 0x9b,
	0x68, 0x28, 0x53, 0x33, 0x43, 0xc9, 0x4c, 0x58, 0x8c, 0x98, 0xe0, 0xbb, 0xce, 0x65, 0x8e, 0x4c,
	0x73, 0x47, 0xce, 0xf0, 0xd7, 0x9f, 0x04, 0x28, 0xc7, 0x6d, 0x55, 0xd4, 0xba, 0x6c, 0xd1, 0x47,
	0x67, 0x54, 0xe9, 0x63, 0x48, 0x5f, 0x0e, 0x0d, 0xcd, 0xf2, 0xdd, 0xb6, 0x74, 0x39, 0x34, 0x8e,
	0xc9, 0xb3, 0x98, 0xab, 0x84, 0xd1, 0x06, 0x80, 0x7d, 0x41, 0xfc, 0xe2, 0xe1, 0x5b, 0xcf, 0xd7,
	0x2d, 0x4f, 0x4f, 0xba, 0xf8, 0xd6, 0x8b, 0x68, 0x95, 0x8e, 0x6a, 0xf5, 0x5b, 0x78, 0x36, 0x11,
	0xc5, 0x90, 0x56, 0xcf, 0xa1, 0xd0, 0x33, 0xed, 0x01, 0x76, 0x18, 0x32, 0x0b, 0x23, 0xb0, 0x23,
	0x02, 0x2d, 0x7d, 0x9f, 0x68, 0x54, 0x13, 0xff, 0xbf, 0x46, 0x19, 0xdc, 0x28, 0x23, 0xfe, 0xf6,
	0xd2, 0xc4, 0xdb, 0xbf, 0x49, 0xd6, 0x9d, 0x3f, 0x1e, 0x75, 0x8a, 0x10, 0x73, 0x8a, 0xf4, 0xef,
	0x84, 0x06, 0xa5, 0xa8, 0xf5, 0x86, 0xd2, 0x9d, 0xaf, 0xfd, 0x44, 0xe3, 0xbc, 0xe2, 0x6a, 0x5f,
	0xd1, 0xba, 0xb3, 0x7d, 0x6d, 0x53, 0x86, 0x4d, 0xe9, 0x2b, 0x3f, 0x43, 0x52, 0xc6, 0x15, 0x42,
	0xb0, 0x74, 0x65, 0x5a, 0x37, 0x7e, 0xa7, 0xa4, 0xdf, 0x71, 0x53, 0xb3, 0x71, 0x53, 0xc3, 0x05,
	0x9a, 0x9b, 0x5a, 0xa0, 0xf9, 0x68, 0x68, 0x7f, 0x97, 0xd0, 0xc6, 0xa2, 0x06, 0xce, 0xf1, 0xd0,
	0x2e, 0x3c, 0x8f, 0x3b, 0x48, 0xc5, 0xde, 0xb5, 0xdd, 0x71, 0xcc, 0x1b, 0xdd, 0xc3, 0x47, 0x78,
	0x84, 0x44, 0x58, 0x3c, 0xc7, 0x23, 0x2a, 0x9a, 0x57, 0xc8, 0xa7, 0x54, 0x9f, 0xf0, 0xaa, 0xdf,
	0x16, 0x8e, 0xf0, 0xa8, 0x65, 0x7d, 0x18, 0xa2, 0x0a, 0x14, 0x5d, 0xb3, 0x6f, 0x69, 0xdc, 0x1e,
	0x81, 0xda, 0x03, 0xe4, 0xec, 0x88, 0xda, 0x24, 0xf5, 0x93, 0xe3, 0xfa, 0x60, 0x00, 0xf4, 0x02,
	0x56, 0x0d, 0x66, 0x62, 0xc0, 0x94, 0xa2, 0x4c, 0xcb, 0xfe, 0xb1, 0xff, 0xd0, 0x1f, 0x53, 0x50,
	0x99, 0x78, 0x29, 0x6e, 0xe2, 0x2e, 0xe4, 0x08, 0x08, 0x19, 0xce, 0xf4, 0xa9, 0x95, 0x6a, 0x69,
	0x9b, 0x4d, 0xea, 0xb1, 0xe8, 0x11, 0x1e, 0x75, 0x47, 0x36, 0x56, 0x48, 0x90, 0xc8, 0x07, 0x7a,
	0x07, 0x2b, 0xb8, 0x67, 0xb8, 0x3a, 0x7b, 0xdf, 0xfa, 0x30, 0xf4, 0x5b, 0xcc, 0x17, 0x53, 0x5b,
	0x55, 0xdc, 0x4f, 0x87, 0x0b, 0x4a, 0x91, 0x42, 0x70, 0xb3, 0x8f, 0xa0, 0xe8, 0x84, 0x01, 0x17,
	0x29, 0xe0, 0x2f, 0x66, 0x02, 0x2a, 0x61, 0x38, 0x70, 0x02, 0xb0, 0xd7, 0x79, 0x9a, 0xda, 0xe4,
	0x53, 0xfa, 0xab, 0x00, 0x6b, 0x89, 0x61, 0x6e, 0x60, 0xc7, 0x43, 0x5f, 0x41, 0xe1, 0xda, 0x36,
	0x74, 0x0f, 0x87, 0x1d, 0xf0, 0x24, 0xfc, 0xe8, 0x09, 0xbd, 0xa6, 0xe6, 0xc3, 0x75, 0xf0, 0x4d,
	0x32, 0xb6, 0x87, 0x1d, 0x4f, 0x33, 0x0d, 0xdf, 0xf7, 0x19, 0x42, 0xb6, 0x0c, 0x92, 0xff, 0xef,
	0x87, 0xc6, 0x88, 0xea, 0x9f, 0x57, 0xe8, 0x37, 0x09, 0xa9, 0x85, 0x6f, 0x3d, 0x8d, 0x4b, 0xb0,
	0x21, 0x04, 0xe4, 0xac, 0x41, 0xa5, 0xa4, 0xf5, 0x89, 0x3e, 0xe3, 0x47, 0x8a, 0xdc, 0x4b, 0x7f,
	0x11, 0x26, 0x53, 0x55, 0x89, 0x4e, 0xa2, 0x8f, 0xeb, 0x45, 0x1f, 0x3f, 0x2e, 0xbf, 0x4c, 0x48,
	0xb5, 0xb8, 0x8a, 0x74, 0xb2, 0x08, 0x7c, 0x38, 0xfe, 0x01, 0xa4, 0x59, 0x36, 0xb1, 0xc9, 0xf8,
	0x71, 0x73, 0x23, 0x6a, 0x16, 0x7d, 0x3e, 0xcd, 0x9f, 0xff, 0x87, 0x00, 0xeb, 0xec, 0x7d, 0x75,
	0x74, 0xe9, 0xbf, 0x7f, 0xa8, 0xbb, 0x83, 0x03, 0x6c, 0x61, 0x47, 0xf7, 0x30, 0xfa, 0x06, 0x72,
	0x03, 0xdd, 0x1d, 0x84, 0xf2, 0x62, 0x23, 0x21, 0x19, 0x6d, 0x93, 0x08, 0xd1, 0xf4, 0x08, 0xd8,
	0x79, 0xdb, 0x60, 0x8a, 0x91, 0x4f, 0xee, 0xd2, 0x0b, 0x6c, 0x51, 0xed, 0x98, 0x4b, 0xdf, 0x60,
	0x8b, 0xa4, 0x8b, 0xa1, 0x7b, 0xba, 0xaf, 0x25, 0xfd, 0x26, 0x6e, 0x26, 0x7f, 0x29, 0x37, 0x0b,
	0x40, 0x96, 0xd0, 0x84, 0x7d, 0x03, 0xc0, 0x30, 0xfb, 0xd8, 0xf5, 0xe8, 0x65, 0x86, 0x5e, 0xe6,
	0xd9, 0xc9, 0x1b, 0x6c, 0x49, 0x5f, 0xf1, 0xee, 0x14, 0xd8, 0xe4, 0xda, 0x11, 0xa3, 0x9e, 0x40,
	0x86, 0x71, 0xfb, 0x71, 0xf0, 0x29, 0xe9, 0x3f, 0xc1, 0xf4, 0x8e, 0x7a, 0xc3, 0x8f, 0xc2, 0x4f,
	0xd2, 0x17, 0x63, 0x5b, 0x32, 0x61, 0x5b, 0x62, 0x3e, 0xca, 0xc6, 0x7d, 0xf4, 0xb7, 0x1c, 0x88,
	0x81, 0xc2, 0x0a, 0xbe, 0xba, 0x26, 0x32, 0xaf, 0x20, 0xa7, 0xdb, 0x66, 0xb8, 0x09, 0xac, 0x25,
	0x1a, 0xc8, 0xda, 0xa0, 0xce, 0x3e, 0x50, 0x17, 0xc4, 0x60, 0x15, 0xd7, 0x2e, 0xaf, 0x2f, 0xb4,
	0x0f, 0xf6, 0x03, 0x1a, 0x61, 0xf4, 0x77, 0xc2, 0xe1, 0x82, 0xb2, 0xcc, 0x17, 0x75, 0xb6, 0x7d,
	0x7f, 0x47, 0x50, 0x49, 0x73, 0x75, 0xcd, 0xbe, 0xd6, 0xc7, 0x16, 0x41, 0x65, 0xdd, 0xf0, 0xe5,
	0x6c, 0xd4, 0x89, 0xe5, 0x94, 0x61, 0x1b, 0xae, 0xae, 0x9a, 0x7d, 0xb6, 0xad, 0xf6, 0xe0, 0xf1,
	0x18, 0xfb, 0x86, 0x06, 0x97, 0xc0, 0x2f, 0x51, 0xf8, 0xea, 0xc3, 0xe1, 0xf9, 0xde, 0x7a, 0xb8,
	0xa0, 0x88, 0xfc, 0x85, 0x60, 0x97, 0x6d, 0x41, 0x81, 0xb4, 0x72, 0xcc, 0x96, 0x2c, 0xff, 0x77,
	0xd5, 0x8b, 0x59, 0xe0, 0xe3, 0x95, 0xcc, 0x6f, 0xe4, 0x7c, 0x41, 0xf3, 0xa1, 0xfc, 0xb9, 0x46,
	0x03, 0x3d, 0x1f, 0xca, 0x9f, 0xff, 0x3e, 0x14, 0xdf, 0x06, 0x54, 0x58, 0x25, 0x50, 0x3d, 0xc7,
	0x0b, 0xe0, 0xb2, 0xf3, 0x63, 0x15, 0xd9, 0x28, 0x88, 0x3f, 0x1d, 0x57, 0x6f, 0x38, 0x1e, 0x07,
	0x7d, 0x0b, 0xcb, 0x24, 0xd3, 0x49, 0x98, 0x68, 0x81, 0xd1, 0xf5, 0xa5, 0x50, 0xdd, 0x9c, 0x84,
	0x4c, 0xee, 0x32, 0x64, 0x0c, 0x0e, 0xc2, 0x05, 0xda, 0x82, 0x02, 0x05, 0x64, 0xb1, 0xa1, 0x3b,
	0x4f, 0xa2, 0xc1, 0x49, 0x65, 0x4a, 0x0c, 0x1e, 0x8c, 0x8b, 0xb6, 0xcd, 0x7c, 0xe7, 0x67, 0x51,
	0x09, 0x28, 0xd4, 0x2f, 0xe7, 0x18, 0x1b, 0x4e, 0xa0, 0xc3, 0x05, 0x25, 0xef, 0xf0, 0xe4, 0x41,
	0xa7, 0xb0, 0xe2, 0x44, 0x12, 0xa7, 0x54, 0xa0, 0x88, 0xdb, 0x0f, 0x45, 0x0c, 0x94, 0x2c, 0x3a,
	0xa1, 0x7c, 0x41, 0x2a, 0xac, 0xb8, 0x64, 0xd2, 0x69, 0xb6, 0x63, 0xde, 0x90, 0xf9, 0x5f, 0x2a,
	0xce, 0xd7, 0x34, 0xb6, 0xc5, 0x10, 0x50, 0x97, 0x1f, 0x91, 0xad, 0x66, 0x1f, 0x80, 0x81, 0x92,
	0x91, 0x5b, 0x5a, 0xa6, 0x80, 0x9f, 0xcf, 0x05, 0x24, 0xc3, 0x96, 0x18, 0xed, 0x72, 0xe2, 0xf5,
	0x0a, 0x14, 0xc3, 0xbd, 0x42, 0xfa, 0x21, 0x03, 0x8f, 0x42, 0x07, 0xae, 0x3d, 0xb4, 0x5c, 0x8c,
	0x5e, 0x02, 0x90, 0xee, 0xe1, 0x7a, 0xba, 0x77, 0xed, 0xfa, 0xfd, 0x43, 0xf4, 0xb7, 0xa8, 0xba,
	0x6d, 0xaa, 0xf4, 0x5c, 0xc9, 0xeb, 0xfc, 0x13, 0x9d, 0x4c, 0x6d, 0x1c, 0x5b, 0x73, 0x36, 0xa8,
	0x99, 0x9d, 0xe3, 0xf7, 0x53, 0x3b, 0xc7, 0x97, 0xf3, 0x17, 0xb3, 0x79, 0xad, 0xe3, 0xdb, 0x68,
	0x55, 0x2f, 0x3d, 0x6c, 0x3f, 0x4b, 0x2e, 0xeb, 0x6f, 0xa3, 0x65, 0x9d, 0x7e, 0x18, 0x56, 0x72,
	0x5d, 0x77, 0x27, 0xeb, 0x3a, 0xf3, 0x00, 0x57, 0xce, 0x29, 0xec, 0x4e, 0xbc, 0xb0, 0xa7, 0xf6,
	0x8a, 0x29, 0xa3, 0x76, 0xa2, 0xb2, 0x8f, 0xa3, 0xe5, 0xc8, 0x1a, 0xc5, 0xaf, 0xe6, 0xe9, 0x38,
	0xbd, 0x1e, 0xbb, 0x13, 0x75, 0x93, 0x7f, 0x00, 0xe4, 0xbc, 0xc2, 0x39, 0x88, 0x14, 0x0e, 0xcc,
	0xed, 0xb7, 0xa1, 0x35, 0x35, 0x5a, 0x39, 0xab, 0xb0, 0x1c, 0x29, 0x14, 0xa9, 0x0d, 0x8f, 0xe3,
	0x63, 0xb7, 0xed, 0xf6, 0xd1, 0x1e, 0x64, 0x1d, 0x46, 0x95, 0x84, 0xca, 0xe2, 0x66, 0xa1, 0xba,
	0x9e, 0x38, 0x78, 0x7d, 0x09, 0x85, 0x33, 0x4b, 0xef, 0xe0, 0x93, 0x89, 0x42, 0x24, 0x78, 0xdf,
	0x40, 0xce, 0xf1, 0x49, 0x1f, 0x70, 0x63, 0x0a, 0x20, 0x63, 0x52, 0x02, 0xf6, 0xad, 0xbf, 0xa7,
	0x43, 0xc5, 0xcd, 0x57, 0x19, 0xf4, 0x39, 0x3c, 0x6d, 0x28, 0x67, 0x9d, 0xee, 0xdb, 0x7a, 0xa7,
	0xa5, 0x1d, 0xd6, 0xd5, 0xc3, 0xee, 0x59, 0x47, 0xd6, 0x8e, 0xdf, 0x1e, 0xcb, 0xe2, 0x42, 0x39,
	0x77, 0x77, 0x5f, 0x59, 0xb2, 0x86, 0x16, 0x46, 0x9f, 0xc1, 0x93, 0x04, 0xb6, 0x76, 0xb3, 0x26,
	0x0a, 0xe5, 0xec, 0xdd, 0x7d, 0x65, 0xb1, 0xdd, 0xac, 0x4d, 0xc1, 0x52, 0x0f, 0xeb, 0x3b, 0x62,
	0x8a, 0x61, 0x91, 0x6f, 0xf4, 0x05, 0xac, 0x25, 0xb3, 0x55, 0xab, 0xaf, 0xc4, 0xc5, 0x32, 0xdc,
	0xdd, 0x57, 0x32, 0x8c, 0x9a, 0xc1, 0x5a, 0xdb, 0x13, 0x97, 0xc6, 0xac, 0xb5, 0xbd, 0xe9, 0xac,
	0xbb, 0x5f, 0xbf, 0x12, 0xd3, 0x01, 0xeb, 0xee, 0xd7, 0x33, 0x50, 0x6b, 0x3b, 0x55, 0x31, 0x13,
	0xb0, 0xd6, 0x76, 0xaa, 0x68, 0x07, 0x36, 0xa6, 0xb2, 0x6a, 0x44, 0xdf, 0x6c, 0x79, 0xe5, 0xee,
	0xbe, 0x02, 0xe3, 0x93, 0x39, 0x22, 0xb5, 0x3d, 0x31, 0x17, 0x15, 0xa9, 0xed, 0xa1, 0x5f, 0xc3,
	0xb3, 0x04, 0x91, 0xc3, 0x76, 0xbd, 0x41, 0x5d, 0x9c, 0x2f, 0x17, 0xef, 0xee, 0x2b, 0x39, 0x4e,
	0xa3, 0x97, 0xb0, 0x3e, 0x8d, 0x9d, 0x3a, 0x1b, 0xca, 0xcb, 0x77, 0xf7, 0x95, 0x7c, 0x70, 0x80,
	0x76, 0xe1, 0xd3, 0x19, 0x02, 0xc4, 0x8c, 0x42, 0x79, 0xf5, 0xee, 0xbe, 0x52, 0x08, 0x1d, 0xcd,
	0x13, 0xaa, 0xed, 0x89, 0xc5, 0x98, 0x50, 0x6d, 0x6f, 0x8e, 0x10, 0x09, 0xc5, 0x72, 0x54, 0x88,
	0xc4, 0x63, 0xb6, 0x10, 0x09, 0xca, 0x4a, 0x54, 0xa8, 0xb6, 0x53, 0xdd, 0xfa, 0x67, 0x2a, 0x54,
	0x82, 0x34, 0x95, 0xd7, 0xa1, 0x54, 0x57, 0xcf, 0xda, 0x04, 0x44, 0x6e, 0x34, 0xb4, 0xce, 0xdb,
	0xd6, 0x71, 0x57, 0x6b, 0x9f, 0xbc, 0xd1, 0xf6, 0x3b, 0xe2, 0x42, 0xf4, 0xb6, 0xa9, 0xd6, 0x35,
	0xb5, 0x75, 0xa0, 0x1d, 0xc8, 0xc7, 0xe4, 0x56, 0x40, 0xcf, 0xe1, 0xd9, 0xe4, 0xed, 0xa9, 0xac,
	0xb4, 0xf6, 0xcf, 0x08, 0x43, 0x0a, 0x3d, 0x85, 0xc7, 0x9c, 0x41, 0x51, 0xeb, 0x9a, 0x7c, 0x4c,
	0x35, 0x16, 0x17, 0xe3, 0x17, 0x4d, 0x99, 0x5d, 0x2c, 0xa1, 0x67, 0xf0, 0x34, 0x7c, 0xd1, 0x50,
	0xba, 0xc1, 0x65, 0x1a, 0xad, 0xc1, 0xcf, 0xd4, 0xb3, 0x76, 0x9b, 0x1b, 0x4c, 0x14, 0x91, 0x95,
	0x7a, 0x57, 0x16, 0x33, 0x04, 0x30, 0x72, 0xc5, 0xb4, 0x10, 0xb3, 0xf1, 0x97, 0x7c, 0xfd, 0xc5,
	0x1c, 0x2a, 0xc3, 0x93, 0xf8, 0x85, 0x2f, 0x94, 0x0f, 0xdf, 0xa9, 0x72, 0xf7, 0xa4, 0xa3, 0x75,
	0x94, 0xd6, 0xa9, 0x76, 0x24, 0x9f, 0x89, 0x80, 0x9e, 0x00, 0x8a, 0xde, 0x35, 0x64, 0xa5, 0x2b,
	0x16, 0xb6, 0x36, 0x01, 0xc6, 0xff, 0x2e, 0x80, 0x56, 0x00, 0xea, 0xcd, 0xa6, 0x76, 0xd2, 0x69,
	0x12, 0xfd, 0x16, 0x10, 0x40, 0xa6, 0x29, 0xbf, 0x91, 0xbb, 0xb2, 0x28, 0x54, 0x0d, 0x80, 0x20,
	0x06, 0x2e, 0x3a, 0x85, 0xd5, 0x80, 0x6a, 0x59, 0x37, 0xc3, 0x73, 0x8c, 0x9e, 0xcf, 0x6a, 0x77,
	0x6d, 0xb7, 0x5f, 0xae, 0xcc, 0x6c, 0x5f, 0x6d, 0xb7, 0x2f, 0x2d, 0xbc, 0x86, 0xef, 0x72, 0x03,
	0xfd, 0x82, 0xfe, 0xd7, 0xca, 0xfb, 0x0c, 0xfd, 0xb3, 0xfb, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x98, 0xc7, 0x84, 0x3f, 0x8f, 0x19, 0x00, 0x00,
}
