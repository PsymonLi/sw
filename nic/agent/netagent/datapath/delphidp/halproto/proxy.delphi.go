// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proxy.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ProxyKeyHandle is used to operate on a proxy either by its key or handle
type ProxyKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*ProxyKeyHandle_ProxyId
	//	*ProxyKeyHandle_ProxyHandle
	KeyOrHandle isProxyKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *ProxyKeyHandle) Reset()                    { *m = ProxyKeyHandle{} }
func (m *ProxyKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*ProxyKeyHandle) ProtoMessage()               {}
func (*ProxyKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{0} }

type isProxyKeyHandle_KeyOrHandle interface{ isProxyKeyHandle_KeyOrHandle() }

type ProxyKeyHandle_ProxyId struct {
	ProxyId uint32 `protobuf:"varint,1,opt,name=proxy_id,json=proxyId,oneof"`
}
type ProxyKeyHandle_ProxyHandle struct {
	ProxyHandle uint64 `protobuf:"fixed64,2,opt,name=proxy_handle,json=proxyHandle,oneof"`
}

func (*ProxyKeyHandle_ProxyId) isProxyKeyHandle_KeyOrHandle()     {}
func (*ProxyKeyHandle_ProxyHandle) isProxyKeyHandle_KeyOrHandle() {}

func (m *ProxyKeyHandle) GetKeyOrHandle() isProxyKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *ProxyKeyHandle) GetProxyId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*ProxyKeyHandle_ProxyId); ok {
		return x.ProxyId
	}
	return 0
}

func (m *ProxyKeyHandle) GetProxyHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*ProxyKeyHandle_ProxyHandle); ok {
		return x.ProxyHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProxyKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProxyKeyHandle_OneofMarshaler, _ProxyKeyHandle_OneofUnmarshaler, _ProxyKeyHandle_OneofSizer, []interface{}{
		(*ProxyKeyHandle_ProxyId)(nil),
		(*ProxyKeyHandle_ProxyHandle)(nil),
	}
}

func _ProxyKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProxyKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *ProxyKeyHandle_ProxyId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ProxyId))
	case *ProxyKeyHandle_ProxyHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.ProxyHandle))
	case nil:
	default:
		return fmt.Errorf("ProxyKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _ProxyKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProxyKeyHandle)
	switch tag {
	case 1: // key_or_handle.proxy_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &ProxyKeyHandle_ProxyId{uint32(x)}
		return true, err
	case 2: // key_or_handle.proxy_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &ProxyKeyHandle_ProxyHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _ProxyKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProxyKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *ProxyKeyHandle_ProxyId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ProxyId))
	case *ProxyKeyHandle_ProxyHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ProxySpec captures all the proxy level configuration
type ProxySpec struct {
	VrfKeyHandle *VrfKeyHandle   `protobuf:"bytes,1,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
	KeyOrHandle  *ProxyKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	ProxyType    ProxyType       `protobuf:"varint,3,opt,name=proxy_type,json=proxyType,enum=types.ProxyType" json:"proxy_type,omitempty"`
	ProxyQtype   uint32          `protobuf:"varint,4,opt,name=proxy_qtype,json=proxyQtype" json:"proxy_qtype,omitempty"`
}

func (m *ProxySpec) Reset()                    { *m = ProxySpec{} }
func (m *ProxySpec) String() string            { return proto.CompactTextString(m) }
func (*ProxySpec) ProtoMessage()               {}
func (*ProxySpec) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{1} }

func (m *ProxySpec) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

func (m *ProxySpec) GetKeyOrHandle() *ProxyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *ProxySpec) GetProxyType() ProxyType {
	if m != nil {
		return m.ProxyType
	}
	return ProxyType_PROXY_TYPE_NONE
}

func (m *ProxySpec) GetProxyQtype() uint32 {
	if m != nil {
		return m.ProxyQtype
	}
	return 0
}

// ProxyRequestMsg is batched add or modify proxy request
type ProxyRequestMsg struct {
	Request []*ProxySpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyRequestMsg) Reset()                    { *m = ProxyRequestMsg{} }
func (m *ProxyRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyRequestMsg) ProtoMessage()               {}
func (*ProxyRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{2} }

func (m *ProxyRequestMsg) GetRequest() []*ProxySpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxyStatus is the operational status of a given proxy
type ProxyStatus struct {
	ProxyHandle uint64 `protobuf:"fixed64,1,opt,name=proxy_handle,json=proxyHandle" json:"proxy_handle,omitempty"`
}

func (m *ProxyStatus) Reset()                    { *m = ProxyStatus{} }
func (m *ProxyStatus) String() string            { return proto.CompactTextString(m) }
func (*ProxyStatus) ProtoMessage()               {}
func (*ProxyStatus) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{3} }

func (m *ProxyStatus) GetProxyHandle() uint64 {
	if m != nil {
		return m.ProxyHandle
	}
	return 0
}

// ProxyResponse is response to ProxySpec
type ProxyResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	ProxyStatus *ProxyStatus `protobuf:"bytes,2,opt,name=proxy_status,json=proxyStatus" json:"proxy_status,omitempty"`
}

func (m *ProxyResponse) Reset()                    { *m = ProxyResponse{} }
func (m *ProxyResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxyResponse) ProtoMessage()               {}
func (*ProxyResponse) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{4} }

func (m *ProxyResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxyResponse) GetProxyStatus() *ProxyStatus {
	if m != nil {
		return m.ProxyStatus
	}
	return nil
}

// ProxyResponseMsg is batched response to ProxyRequestMsg
type ProxyResponseMsg struct {
	Response []*ProxyResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxyResponseMsg) Reset()                    { *m = ProxyResponseMsg{} }
func (m *ProxyResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyResponseMsg) ProtoMessage()               {}
func (*ProxyResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{5} }

func (m *ProxyResponseMsg) GetResponse() []*ProxyResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// ProxyDisableRequest is used to delete a proxy
type ProxyDisableRequest struct {
	KeyOrHandle *ProxyKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *ProxyDisableRequest) Reset()                    { *m = ProxyDisableRequest{} }
func (m *ProxyDisableRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxyDisableRequest) ProtoMessage()               {}
func (*ProxyDisableRequest) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{6} }

func (m *ProxyDisableRequest) GetKeyOrHandle() *ProxyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ProxyDisableRequestMsg is used to delete a batch of proxy
type ProxyDisableRequestMsg struct {
	Request []*ProxyDisableRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyDisableRequestMsg) Reset()                    { *m = ProxyDisableRequestMsg{} }
func (m *ProxyDisableRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyDisableRequestMsg) ProtoMessage()               {}
func (*ProxyDisableRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{7} }

func (m *ProxyDisableRequestMsg) GetRequest() []*ProxyDisableRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxyDisableResponseMsg is batched response to ProxyDisableRequestMsg
type ProxyDisableResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *ProxyDisableResponseMsg) Reset()                    { *m = ProxyDisableResponseMsg{} }
func (m *ProxyDisableResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyDisableResponseMsg) ProtoMessage()               {}
func (*ProxyDisableResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{8} }

func (m *ProxyDisableResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// ProxyGetRequest is used to get information about a proxy
type ProxyGetRequest struct {
	KeyOrHandle *ProxyKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *ProxyGetRequest) Reset()                    { *m = ProxyGetRequest{} }
func (m *ProxyGetRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxyGetRequest) ProtoMessage()               {}
func (*ProxyGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{9} }

func (m *ProxyGetRequest) GetKeyOrHandle() *ProxyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ProxyGetRequestMsg is batched GET requests for proxys
type ProxyGetRequestMsg struct {
	Request []*ProxyGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyGetRequestMsg) Reset()                    { *m = ProxyGetRequestMsg{} }
func (m *ProxyGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyGetRequestMsg) ProtoMessage()               {}
func (*ProxyGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{10} }

func (m *ProxyGetRequestMsg) GetRequest() []*ProxyGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxyStats is the statistics object for each proxy
type ProxyStats struct {
}

func (m *ProxyStats) Reset()                    { *m = ProxyStats{} }
func (m *ProxyStats) String() string            { return proto.CompactTextString(m) }
func (*ProxyStats) ProtoMessage()               {}
func (*ProxyStats) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{11} }

// ProxyGetResponse captures all the information about a proxy
// only if api_status indicates success, other fields are valid
type ProxyGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *ProxySpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *ProxyStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *ProxyStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *ProxyGetResponse) Reset()                    { *m = ProxyGetResponse{} }
func (m *ProxyGetResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxyGetResponse) ProtoMessage()               {}
func (*ProxyGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{12} }

func (m *ProxyGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxyGetResponse) GetSpec() *ProxySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProxyGetResponse) GetStatus() *ProxyStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ProxyGetResponse) GetStats() *ProxyStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// ProxyGetResponseMsg is batched response to ProxyGetRequestMsg
type ProxyGetResponseMsg struct {
	Response []*ProxyGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxyGetResponseMsg) Reset()                    { *m = ProxyGetResponseMsg{} }
func (m *ProxyGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyGetResponseMsg) ProtoMessage()               {}
func (*ProxyGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{13} }

func (m *ProxyGetResponseMsg) GetResponse() []*ProxyGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type IpsecFlowConfig struct {
	Encrypt    bool     `protobuf:"varint,1,opt,name=encrypt" json:"encrypt,omitempty"`
	EspFlowKey *FlowKey `protobuf:"bytes,2,opt,name=esp_flow_key,json=espFlowKey" json:"esp_flow_key,omitempty"`
}

func (m *IpsecFlowConfig) Reset()                    { *m = IpsecFlowConfig{} }
func (m *IpsecFlowConfig) String() string            { return proto.CompactTextString(m) }
func (*IpsecFlowConfig) ProtoMessage()               {}
func (*IpsecFlowConfig) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{14} }

func (m *IpsecFlowConfig) GetEncrypt() bool {
	if m != nil {
		return m.Encrypt
	}
	return false
}

func (m *IpsecFlowConfig) GetEspFlowKey() *FlowKey {
	if m != nil {
		return m.EspFlowKey
	}
	return nil
}

type TlsProxyECDSAKeys struct {
	SignKeyIdx uint32 `protobuf:"varint,1,opt,name=sign_key_idx,json=signKeyIdx" json:"sign_key_idx,omitempty"`
}

func (m *TlsProxyECDSAKeys) Reset()                    { *m = TlsProxyECDSAKeys{} }
func (m *TlsProxyECDSAKeys) String() string            { return proto.CompactTextString(m) }
func (*TlsProxyECDSAKeys) ProtoMessage()               {}
func (*TlsProxyECDSAKeys) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{15} }

func (m *TlsProxyECDSAKeys) GetSignKeyIdx() uint32 {
	if m != nil {
		return m.SignKeyIdx
	}
	return 0
}

type TlsProxyRSAKeys struct {
	SignKeyIdx    uint32 `protobuf:"varint,1,opt,name=sign_key_idx,json=signKeyIdx" json:"sign_key_idx,omitempty"`
	DecryptKeyIdx uint32 `protobuf:"varint,2,opt,name=decrypt_key_idx,json=decryptKeyIdx" json:"decrypt_key_idx,omitempty"`
}

func (m *TlsProxyRSAKeys) Reset()                    { *m = TlsProxyRSAKeys{} }
func (m *TlsProxyRSAKeys) String() string            { return proto.CompactTextString(m) }
func (*TlsProxyRSAKeys) ProtoMessage()               {}
func (*TlsProxyRSAKeys) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{16} }

func (m *TlsProxyRSAKeys) GetSignKeyIdx() uint32 {
	if m != nil {
		return m.SignKeyIdx
	}
	return 0
}

func (m *TlsProxyRSAKeys) GetDecryptKeyIdx() uint32 {
	if m != nil {
		return m.DecryptKeyIdx
	}
	return 0
}

type TlsProxyFlowConfig struct {
	CertId      uint32            `protobuf:"varint,1,opt,name=cert_id,json=certId" json:"cert_id,omitempty"`
	TrustRootId uint32            `protobuf:"varint,2,opt,name=trust_root_id,json=trustRootId" json:"trust_root_id,omitempty"`
	Ciphers     string            `protobuf:"bytes,3,opt,name=ciphers" json:"ciphers,omitempty"`
	KeyType     CryptoAsymKeyType `protobuf:"varint,4,opt,name=key_type,json=keyType,enum=types.CryptoAsymKeyType" json:"key_type,omitempty"`
	// Types that are valid to be assigned to Keys:
	//	*TlsProxyFlowConfig_EcdsaKeys
	//	*TlsProxyFlowConfig_RsaKeys
	Keys isTlsProxyFlowConfig_Keys `protobuf_oneof:"Keys"`
}

func (m *TlsProxyFlowConfig) Reset()                    { *m = TlsProxyFlowConfig{} }
func (m *TlsProxyFlowConfig) String() string            { return proto.CompactTextString(m) }
func (*TlsProxyFlowConfig) ProtoMessage()               {}
func (*TlsProxyFlowConfig) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{17} }

type isTlsProxyFlowConfig_Keys interface{ isTlsProxyFlowConfig_Keys() }

type TlsProxyFlowConfig_EcdsaKeys struct {
	EcdsaKeys *TlsProxyECDSAKeys `protobuf:"bytes,5,opt,name=ecdsa_keys,json=ecdsaKeys,oneof"`
}
type TlsProxyFlowConfig_RsaKeys struct {
	RsaKeys *TlsProxyRSAKeys `protobuf:"bytes,6,opt,name=rsa_keys,json=rsaKeys,oneof"`
}

func (*TlsProxyFlowConfig_EcdsaKeys) isTlsProxyFlowConfig_Keys() {}
func (*TlsProxyFlowConfig_RsaKeys) isTlsProxyFlowConfig_Keys()   {}

func (m *TlsProxyFlowConfig) GetKeys() isTlsProxyFlowConfig_Keys {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *TlsProxyFlowConfig) GetCertId() uint32 {
	if m != nil {
		return m.CertId
	}
	return 0
}

func (m *TlsProxyFlowConfig) GetTrustRootId() uint32 {
	if m != nil {
		return m.TrustRootId
	}
	return 0
}

func (m *TlsProxyFlowConfig) GetCiphers() string {
	if m != nil {
		return m.Ciphers
	}
	return ""
}

func (m *TlsProxyFlowConfig) GetKeyType() CryptoAsymKeyType {
	if m != nil {
		return m.KeyType
	}
	return CryptoAsymKeyType_CRYPTO_ASYM_KEY_TYPE_ECDSA
}

func (m *TlsProxyFlowConfig) GetEcdsaKeys() *TlsProxyECDSAKeys {
	if x, ok := m.GetKeys().(*TlsProxyFlowConfig_EcdsaKeys); ok {
		return x.EcdsaKeys
	}
	return nil
}

func (m *TlsProxyFlowConfig) GetRsaKeys() *TlsProxyRSAKeys {
	if x, ok := m.GetKeys().(*TlsProxyFlowConfig_RsaKeys); ok {
		return x.RsaKeys
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TlsProxyFlowConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TlsProxyFlowConfig_OneofMarshaler, _TlsProxyFlowConfig_OneofUnmarshaler, _TlsProxyFlowConfig_OneofSizer, []interface{}{
		(*TlsProxyFlowConfig_EcdsaKeys)(nil),
		(*TlsProxyFlowConfig_RsaKeys)(nil),
	}
}

func _TlsProxyFlowConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TlsProxyFlowConfig)
	// Keys
	switch x := m.Keys.(type) {
	case *TlsProxyFlowConfig_EcdsaKeys:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaKeys); err != nil {
			return err
		}
	case *TlsProxyFlowConfig_RsaKeys:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaKeys); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TlsProxyFlowConfig.Keys has unexpected type %T", x)
	}
	return nil
}

func _TlsProxyFlowConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TlsProxyFlowConfig)
	switch tag {
	case 5: // Keys.ecdsa_keys
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TlsProxyECDSAKeys)
		err := b.DecodeMessage(msg)
		m.Keys = &TlsProxyFlowConfig_EcdsaKeys{msg}
		return true, err
	case 6: // Keys.rsa_keys
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TlsProxyRSAKeys)
		err := b.DecodeMessage(msg)
		m.Keys = &TlsProxyFlowConfig_RsaKeys{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TlsProxyFlowConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TlsProxyFlowConfig)
	// Keys
	switch x := m.Keys.(type) {
	case *TlsProxyFlowConfig_EcdsaKeys:
		s := proto.Size(x.EcdsaKeys)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TlsProxyFlowConfig_RsaKeys:
		s := proto.Size(x.RsaKeys)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ProxyFlowConfigRequest struct {
	Spec           *ProxySpec          `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	FlowKey        *FlowKey            `protobuf:"bytes,2,opt,name=flow_key,json=flowKey" json:"flow_key,omitempty"`
	ProxyEn        bool                `protobuf:"varint,3,opt,name=proxy_en,json=proxyEn" json:"proxy_en,omitempty"`
	FlowData       *FlowData           `protobuf:"bytes,4,opt,name=flow_data,json=flowData" json:"flow_data,omitempty"`
	AllocQid       bool                `protobuf:"varint,5,opt,name=alloc_qid,json=allocQid" json:"alloc_qid,omitempty"`
	IpsecConfig    *IpsecFlowConfig    `protobuf:"bytes,6,opt,name=ipsec_config,json=ipsecConfig" json:"ipsec_config,omitempty"`
	TlsProxyConfig *TlsProxyFlowConfig `protobuf:"bytes,7,opt,name=tls_proxy_config,json=tlsProxyConfig" json:"tls_proxy_config,omitempty"`
}

func (m *ProxyFlowConfigRequest) Reset()                    { *m = ProxyFlowConfigRequest{} }
func (m *ProxyFlowConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxyFlowConfigRequest) ProtoMessage()               {}
func (*ProxyFlowConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{18} }

func (m *ProxyFlowConfigRequest) GetSpec() *ProxySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProxyFlowConfigRequest) GetFlowKey() *FlowKey {
	if m != nil {
		return m.FlowKey
	}
	return nil
}

func (m *ProxyFlowConfigRequest) GetProxyEn() bool {
	if m != nil {
		return m.ProxyEn
	}
	return false
}

func (m *ProxyFlowConfigRequest) GetFlowData() *FlowData {
	if m != nil {
		return m.FlowData
	}
	return nil
}

func (m *ProxyFlowConfigRequest) GetAllocQid() bool {
	if m != nil {
		return m.AllocQid
	}
	return false
}

func (m *ProxyFlowConfigRequest) GetIpsecConfig() *IpsecFlowConfig {
	if m != nil {
		return m.IpsecConfig
	}
	return nil
}

func (m *ProxyFlowConfigRequest) GetTlsProxyConfig() *TlsProxyFlowConfig {
	if m != nil {
		return m.TlsProxyConfig
	}
	return nil
}

type ProxyFlowConfigRequestMsg struct {
	Request []*ProxyFlowConfigRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyFlowConfigRequestMsg) Reset()                    { *m = ProxyFlowConfigRequestMsg{} }
func (m *ProxyFlowConfigRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyFlowConfigRequestMsg) ProtoMessage()               {}
func (*ProxyFlowConfigRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{19} }

func (m *ProxyFlowConfigRequestMsg) GetRequest() []*ProxyFlowConfigRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type ProxyGetFlowInfoRequest struct {
	Spec     *ProxySpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	FlowKey  *FlowKey   `protobuf:"bytes,2,opt,name=flow_key,json=flowKey" json:"flow_key,omitempty"`
	FlowData *FlowData  `protobuf:"bytes,3,opt,name=flow_data,json=flowData" json:"flow_data,omitempty"`
}

func (m *ProxyGetFlowInfoRequest) Reset()                    { *m = ProxyGetFlowInfoRequest{} }
func (m *ProxyGetFlowInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxyGetFlowInfoRequest) ProtoMessage()               {}
func (*ProxyGetFlowInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{20} }

func (m *ProxyGetFlowInfoRequest) GetSpec() *ProxySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProxyGetFlowInfoRequest) GetFlowKey() *FlowKey {
	if m != nil {
		return m.FlowKey
	}
	return nil
}

func (m *ProxyGetFlowInfoRequest) GetFlowData() *FlowData {
	if m != nil {
		return m.FlowData
	}
	return nil
}

type ProxyGetFlowInfoRequestMsg struct {
	Request []*ProxyGetFlowInfoRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyGetFlowInfoRequestMsg) Reset()                    { *m = ProxyGetFlowInfoRequestMsg{} }
func (m *ProxyGetFlowInfoRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyGetFlowInfoRequestMsg) ProtoMessage()               {}
func (*ProxyGetFlowInfoRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{21} }

func (m *ProxyGetFlowInfoRequestMsg) GetRequest() []*ProxyGetFlowInfoRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type ProxyGetFlowInfoResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	ProxyType ProxyType `protobuf:"varint,2,opt,name=proxy_type,json=proxyType,enum=types.ProxyType" json:"proxy_type,omitempty"`
	FlowKey   *FlowKey  `protobuf:"bytes,3,opt,name=flow_key,json=flowKey" json:"flow_key,omitempty"`
	LifId     uint32    `protobuf:"varint,4,opt,name=lif_id,json=lifId" json:"lif_id,omitempty"`
	Qtype     uint32    `protobuf:"varint,5,opt,name=qtype" json:"qtype,omitempty"`
	Qid1      uint32    `protobuf:"varint,6,opt,name=qid1" json:"qid1,omitempty"`
	Qid2      uint32    `protobuf:"varint,7,opt,name=qid2" json:"qid2,omitempty"`
}

func (m *ProxyGetFlowInfoResponse) Reset()                    { *m = ProxyGetFlowInfoResponse{} }
func (m *ProxyGetFlowInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxyGetFlowInfoResponse) ProtoMessage()               {}
func (*ProxyGetFlowInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{22} }

func (m *ProxyGetFlowInfoResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxyGetFlowInfoResponse) GetProxyType() ProxyType {
	if m != nil {
		return m.ProxyType
	}
	return ProxyType_PROXY_TYPE_NONE
}

func (m *ProxyGetFlowInfoResponse) GetFlowKey() *FlowKey {
	if m != nil {
		return m.FlowKey
	}
	return nil
}

func (m *ProxyGetFlowInfoResponse) GetLifId() uint32 {
	if m != nil {
		return m.LifId
	}
	return 0
}

func (m *ProxyGetFlowInfoResponse) GetQtype() uint32 {
	if m != nil {
		return m.Qtype
	}
	return 0
}

func (m *ProxyGetFlowInfoResponse) GetQid1() uint32 {
	if m != nil {
		return m.Qid1
	}
	return 0
}

func (m *ProxyGetFlowInfoResponse) GetQid2() uint32 {
	if m != nil {
		return m.Qid2
	}
	return 0
}

type ProxyGetFlowInfoResponseMsg struct {
	Response []*ProxyGetFlowInfoResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxyGetFlowInfoResponseMsg) Reset()                    { *m = ProxyGetFlowInfoResponseMsg{} }
func (m *ProxyGetFlowInfoResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyGetFlowInfoResponseMsg) ProtoMessage()               {}
func (*ProxyGetFlowInfoResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{23} }

func (m *ProxyGetFlowInfoResponseMsg) GetResponse() []*ProxyGetFlowInfoResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// ProxyGlobalCfgRequest - to configure global settings for proxy features
type ProxyGlobalCfgRequest struct {
	ProxyType  ProxyType `protobuf:"varint,1,opt,name=proxy_type,json=proxyType,enum=types.ProxyType" json:"proxy_type,omitempty"`
	BypassMode bool      `protobuf:"varint,2,opt,name=bypass_mode,json=bypassMode" json:"bypass_mode,omitempty"`
}

func (m *ProxyGlobalCfgRequest) Reset()                    { *m = ProxyGlobalCfgRequest{} }
func (m *ProxyGlobalCfgRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxyGlobalCfgRequest) ProtoMessage()               {}
func (*ProxyGlobalCfgRequest) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{24} }

func (m *ProxyGlobalCfgRequest) GetProxyType() ProxyType {
	if m != nil {
		return m.ProxyType
	}
	return ProxyType_PROXY_TYPE_NONE
}

func (m *ProxyGlobalCfgRequest) GetBypassMode() bool {
	if m != nil {
		return m.BypassMode
	}
	return false
}

// ProxyGlobalCfgRequestMsg - is batched global config request
type ProxyGlobalCfgRequestMsg struct {
	Request []*ProxyGlobalCfgRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyGlobalCfgRequestMsg) Reset()                    { *m = ProxyGlobalCfgRequestMsg{} }
func (m *ProxyGlobalCfgRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyGlobalCfgRequestMsg) ProtoMessage()               {}
func (*ProxyGlobalCfgRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{25} }

func (m *ProxyGlobalCfgRequestMsg) GetRequest() []*ProxyGlobalCfgRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxyGlobalCfgResponseMsg is batched response to ProxyGlobalCfgRequestMsg
type ProxyGlobalCfgResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *ProxyGlobalCfgResponseMsg) Reset()                    { *m = ProxyGlobalCfgResponseMsg{} }
func (m *ProxyGlobalCfgResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyGlobalCfgResponseMsg) ProtoMessage()               {}
func (*ProxyGlobalCfgResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{26} }

func (m *ProxyGlobalCfgResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*ProxyKeyHandle)(nil), "halproto.ProxyKeyHandle")
	proto.RegisterType((*ProxySpec)(nil), "halproto.ProxySpec")
	proto.RegisterType((*ProxyRequestMsg)(nil), "halproto.ProxyRequestMsg")
	proto.RegisterType((*ProxyStatus)(nil), "halproto.ProxyStatus")
	proto.RegisterType((*ProxyResponse)(nil), "halproto.ProxyResponse")
	proto.RegisterType((*ProxyResponseMsg)(nil), "halproto.ProxyResponseMsg")
	proto.RegisterType((*ProxyDisableRequest)(nil), "halproto.ProxyDisableRequest")
	proto.RegisterType((*ProxyDisableRequestMsg)(nil), "halproto.ProxyDisableRequestMsg")
	proto.RegisterType((*ProxyDisableResponseMsg)(nil), "halproto.ProxyDisableResponseMsg")
	proto.RegisterType((*ProxyGetRequest)(nil), "halproto.ProxyGetRequest")
	proto.RegisterType((*ProxyGetRequestMsg)(nil), "halproto.ProxyGetRequestMsg")
	proto.RegisterType((*ProxyStats)(nil), "halproto.ProxyStats")
	proto.RegisterType((*ProxyGetResponse)(nil), "halproto.ProxyGetResponse")
	proto.RegisterType((*ProxyGetResponseMsg)(nil), "halproto.ProxyGetResponseMsg")
	proto.RegisterType((*IpsecFlowConfig)(nil), "halproto.IpsecFlowConfig")
	proto.RegisterType((*TlsProxyECDSAKeys)(nil), "halproto.TlsProxyECDSAKeys")
	proto.RegisterType((*TlsProxyRSAKeys)(nil), "halproto.TlsProxyRSAKeys")
	proto.RegisterType((*TlsProxyFlowConfig)(nil), "halproto.TlsProxyFlowConfig")
	proto.RegisterType((*ProxyFlowConfigRequest)(nil), "halproto.ProxyFlowConfigRequest")
	proto.RegisterType((*ProxyFlowConfigRequestMsg)(nil), "halproto.ProxyFlowConfigRequestMsg")
	proto.RegisterType((*ProxyGetFlowInfoRequest)(nil), "halproto.ProxyGetFlowInfoRequest")
	proto.RegisterType((*ProxyGetFlowInfoRequestMsg)(nil), "halproto.ProxyGetFlowInfoRequestMsg")
	proto.RegisterType((*ProxyGetFlowInfoResponse)(nil), "halproto.ProxyGetFlowInfoResponse")
	proto.RegisterType((*ProxyGetFlowInfoResponseMsg)(nil), "halproto.ProxyGetFlowInfoResponseMsg")
	proto.RegisterType((*ProxyGlobalCfgRequest)(nil), "halproto.ProxyGlobalCfgRequest")
	proto.RegisterType((*ProxyGlobalCfgRequestMsg)(nil), "halproto.ProxyGlobalCfgRequestMsg")
	proto.RegisterType((*ProxyGlobalCfgResponseMsg)(nil), "halproto.ProxyGlobalCfgResponseMsg")
}

func init() { proto.RegisterFile("proxy.proto", fileDescriptor24) }

var fileDescriptor24 = []byte{
	// 1222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x6f, 0x53, 0xdb, 0x46,
	0x13, 0x47, 0x18, 0xdb, 0xf2, 0xda, 0x06, 0x72, 0x4f, 0x02, 0xc6, 0x3c, 0x09, 0x8e, 0xda, 0x69,
	0x99, 0x74, 0xc6, 0x4d, 0x9d, 0x26, 0x2d, 0xd3, 0xe9, 0x4c, 0xc1, 0x90, 0xe0, 0x10, 0xf2, 0xe7,
	0x42, 0xf2, 0x22, 0x79, 0xa1, 0x11, 0xd6, 0x19, 0x34, 0x28, 0x96, 0xd0, 0x89, 0x80, 0xbe, 0x49,
	0x5f, 0xf4, 0x6d, 0xbf, 0x46, 0x3f, 0x43, 0x67, 0xfa, 0x7d, 0x3a, 0x9d, 0xdb, 0x3b, 0xc9, 0x92,
	0x8c, 0x31, 0xc3, 0xb4, 0xaf, 0x7c, 0xb7, 0xb7, 0xfb, 0xbb, 0xdd, 0xdf, 0xee, 0xad, 0xd6, 0x50,
	0xf5, 0x03, 0xef, 0x22, 0x6a, 0xfb, 0x81, 0x17, 0x7a, 0xa4, 0x88, 0x9b, 0x66, 0x35, 0x8c, 0x7c,
	0xc6, 0xa5, 0xac, 0xa9, 0x9f, 0x1c, 0xab, 0x55, 0x9d, 0x33, 0xce, 0x1d, 0x6f, 0x28, 0xb7, 0x46,
	0x1f, 0xe6, 0x5f, 0x0b, 0xf5, 0x3d, 0x16, 0xed, 0x5a, 0x43, 0xdb, 0x65, 0x64, 0x15, 0x74, 0x04,
	0x30, 0x1d, 0xbb, 0xa1, 0xb5, 0xb4, 0xf5, 0xfa, 0xee, 0x0c, 0x2d, 0xa3, 0xa4, 0x67, 0x93, 0x2f,
	0xa0, 0x26, 0x0f, 0x8f, 0x51, 0xb9, 0x31, 0xdb, 0xd2, 0xd6, 0x4b, 0xbb, 0x33, 0x54, 0x3a, 0x20,
	0x11, 0xb6, 0x16, 0xa0, 0x7e, 0xc2, 0x22, 0xd3, 0x0b, 0x94, 0x96, 0xf1, 0xa7, 0x06, 0x15, 0xbc,
	0xe5, 0xad, 0xcf, 0xfa, 0xe4, 0x09, 0xcc, 0x7f, 0x0e, 0x06, 0xa6, 0x50, 0x51, 0x28, 0xe2, 0x9a,
	0x6a, 0x67, 0xb1, 0x7d, 0x72, 0xdc, 0x7e, 0x1f, 0x0c, 0x12, 0x57, 0x68, 0xed, 0x73, 0x6a, 0x47,
	0x36, 0x72, 0xb0, 0x78, 0x79, 0xb5, 0x73, 0xa7, 0x2d, 0x83, 0xcf, 0x86, 0x41, 0xab, 0x27, 0x2c,
	0x7a, 0x15, 0x28, 0xd3, 0x6f, 0x01, 0xa4, 0xdb, 0x82, 0x93, 0x46, 0xa1, 0xa5, 0xad, 0xcf, 0x77,
	0x16, 0xdb, 0x92, 0x20, 0xb4, 0x3b, 0x88, 0x7c, 0x46, 0x2b, 0x7e, 0xbc, 0x24, 0x6b, 0x8a, 0x52,
	0xf3, 0x14, 0x2d, 0xe6, 0x04, 0x0f, 0x54, 0x62, 0xbc, 0x11, 0x12, 0xe3, 0x67, 0x58, 0x40, 0x43,
	0xca, 0x4e, 0xcf, 0x18, 0x0f, 0xf7, 0xf9, 0x11, 0x79, 0x00, 0xe5, 0x40, 0xee, 0x1a, 0x5a, 0xab,
	0x80, 0x01, 0xa5, 0x3c, 0x13, 0xa1, 0xd3, 0x58, 0xc1, 0x78, 0x08, 0x55, 0x29, 0x0d, 0xad, 0xf0,
	0x8c, 0x93, 0xfb, 0x39, 0x5a, 0x05, 0x21, 0xa5, 0x0c, 0xa9, 0xc6, 0x39, 0xd4, 0xd5, 0x85, 0xdc,
	0xf7, 0x86, 0x1c, 0x63, 0xb2, 0x7c, 0xc7, 0xe4, 0x88, 0x80, 0x16, 0xa3, 0x98, 0x36, 0x7d, 0x47,
	0x22, 0xd3, 0x8a, 0x15, 0x2f, 0xc9, 0xe3, 0xf8, 0x12, 0x65, 0x22, 0xe9, 0x23, 0x19, 0x27, 0xa5,
	0x91, 0xbc, 0x58, 0x6e, 0x8c, 0x6d, 0x58, 0xcc, 0x5c, 0x2c, 0x42, 0x7d, 0x08, 0x7a, 0xa0, 0xb6,
	0x2a, 0xd6, 0xdb, 0x69, 0x98, 0x58, 0x95, 0x26, 0x5a, 0xc6, 0x6b, 0xf8, 0x1f, 0x1e, 0x6d, 0x3b,
	0xdc, 0x3a, 0x74, 0x99, 0xa2, 0x6d, 0x3c, 0xa7, 0xda, 0x75, 0x73, 0x6a, 0xbc, 0x84, 0xa5, 0x4b,
	0x10, 0x85, 0x77, 0xdf, 0xe7, 0x13, 0xd1, 0x4c, 0xc3, 0x65, 0xf5, 0x47, 0x29, 0x79, 0x0e, 0xcb,
	0xd9, 0xf3, 0x51, 0xb8, 0x79, 0xaa, 0x0b, 0x53, 0xa8, 0x36, 0x5e, 0xa8, 0xea, 0x78, 0xc6, 0xc2,
	0x7f, 0x21, 0xd2, 0xa7, 0x40, 0x72, 0x68, 0x32, 0x07, 0xb9, 0x28, 0x97, 0xd2, 0x50, 0x23, 0xdd,
	0x51, 0x84, 0x35, 0x80, 0x24, 0xcb, 0xdc, 0xf8, 0x43, 0x53, 0x89, 0x45, 0xd5, 0x9b, 0x16, 0xd5,
	0x97, 0x30, 0xc7, 0x7d, 0xd6, 0x57, 0xc5, 0x34, 0x5e, 0xf1, 0x78, 0x4a, 0x1e, 0x40, 0x49, 0x41,
	0x16, 0x26, 0x16, 0x9d, 0xd2, 0x20, 0x5f, 0x43, 0x51, 0xac, 0x38, 0x3e, 0xba, 0x6a, 0xe7, 0x56,
	0x5e, 0x95, 0x53, 0x79, 0x6e, 0x3c, 0x57, 0x25, 0x95, 0xf2, 0x5f, 0xf0, 0xf2, 0x68, 0xac, 0x36,
	0x97, 0xc7, 0x88, 0x19, 0x2b, 0x4f, 0x13, 0x16, 0x7a, 0x3e, 0x67, 0xfd, 0xa7, 0xae, 0x77, 0xde,
	0xf5, 0x86, 0x03, 0xe7, 0x88, 0x34, 0xa0, 0xcc, 0x86, 0xfd, 0x20, 0xf2, 0x43, 0xe4, 0x41, 0xa7,
	0xf1, 0x96, 0x74, 0xa0, 0xc6, 0xb8, 0x6f, 0x0e, 0x5c, 0xef, 0x5c, 0x74, 0xb1, 0x24, 0xf6, 0xb8,
	0xb3, 0x0a, 0x90, 0x3d, 0x16, 0x51, 0x60, 0xdc, 0x57, 0x6b, 0xe3, 0x31, 0xdc, 0x3a, 0x70, 0x39,
	0x7a, 0xb0, 0xd3, 0xdd, 0x7e, 0xbb, 0xb9, 0xc7, 0x22, 0x4e, 0x5a, 0x50, 0xe3, 0xce, 0xd1, 0x10,
	0x5b, 0xa1, 0x63, 0x5f, 0xc8, 0x76, 0x4b, 0x41, 0xc8, 0xf6, 0x58, 0xd4, 0xb3, 0x2f, 0x8c, 0x8f,
	0xb0, 0x10, 0x9b, 0xd1, 0xeb, 0x1a, 0x91, 0xaf, 0x60, 0xc1, 0x66, 0xe8, 0x6a, 0xa2, 0x34, 0x8b,
	0x4a, 0x75, 0x25, 0x56, 0xe0, 0xbf, 0xce, 0x02, 0x89, 0xd1, 0x53, 0x81, 0x2f, 0x43, 0xb9, 0xcf,
	0x82, 0x30, 0xe9, 0xff, 0xb4, 0x24, 0xb6, 0x3d, 0x9b, 0x18, 0x50, 0x0f, 0x83, 0x33, 0x1e, 0x9a,
	0x81, 0xe7, 0xe1, 0xb1, 0x44, 0xad, 0xa2, 0x90, 0x7a, 0x9e, 0xd0, 0x69, 0x40, 0xb9, 0xef, 0xf8,
	0xc7, 0x2c, 0x90, 0xa9, 0xae, 0xd0, 0x78, 0x2b, 0xf2, 0x22, 0xbc, 0x49, 0xfa, 0xe9, 0x7c, 0xa7,
	0xa1, 0x0a, 0xab, 0x2b, 0x7c, 0xf2, 0x36, 0x79, 0xf4, 0x69, 0x8f, 0xc9, 0x4e, 0x5c, 0x3e, 0x91,
	0x0b, 0xb2, 0x01, 0xc0, 0xfa, 0x36, 0xb7, 0x44, 0x20, 0xbc, 0x51, 0x44, 0xa2, 0x1b, 0x2a, 0x9d,
	0x63, 0x7c, 0xee, 0xce, 0xd0, 0x0a, 0x6a, 0x23, 0x4f, 0xa2, 0x0e, 0x62, 0xc3, 0x12, 0x1a, 0x2e,
	0xe5, 0x0c, 0x69, 0x62, 0x56, 0x0e, 0xa4, 0xd1, 0x56, 0x09, 0xe6, 0xc4, 0xaf, 0xf1, 0xd7, 0xac,
	0xea, 0x2e, 0x23, 0x5e, 0xe2, 0x87, 0x1c, 0x57, 0xbc, 0x76, 0x65, 0xc5, 0x7f, 0x03, 0xfa, 0xd4,
	0xfa, 0x28, 0x0f, 0xe4, 0x82, 0xac, 0xc4, 0x9f, 0x5c, 0x36, 0x44, 0xd6, 0x74, 0xf5, 0xc1, 0xdd,
	0x19, 0x92, 0x36, 0x54, 0x10, 0xc7, 0xb6, 0x42, 0x2b, 0x79, 0x11, 0x69, 0xa0, 0x6d, 0x2b, 0xb4,
	0x28, 0xde, 0x25, 0x56, 0x64, 0x15, 0x2a, 0x96, 0xeb, 0x7a, 0x7d, 0xf3, 0xd4, 0xb1, 0x91, 0x2f,
	0x9d, 0xea, 0x28, 0x78, 0xe3, 0xd8, 0x64, 0x03, 0x6a, 0x8e, 0xa8, 0x72, 0xb3, 0x8f, 0x11, 0xe5,
	0x68, 0xc9, 0x3d, 0x00, 0x5a, 0x45, 0x5d, 0x55, 0x14, 0x5d, 0x58, 0x0c, 0x5d, 0x6e, 0x4a, 0x37,
	0x95, 0x79, 0x19, 0xcd, 0x57, 0x72, 0xac, 0xa6, 0x10, 0xe6, 0x43, 0x25, 0x93, 0x7b, 0xe3, 0x00,
	0x56, 0x2e, 0x27, 0x55, 0xbc, 0xdb, 0x1f, 0xf2, 0xfd, 0xec, 0x6e, 0x9a, 0xda, 0x31, 0x93, 0x51,
	0x5b, 0xfb, 0x4d, 0x53, 0x9d, 0xfb, 0x19, 0x0b, 0x85, 0x5a, 0x6f, 0x38, 0xf0, 0xfe, 0xc3, 0x64,
	0x65, 0x32, 0x52, 0x98, 0x9a, 0x11, 0xe3, 0x3d, 0x34, 0x27, 0x78, 0x27, 0xa2, 0xfe, 0x31, 0x1f,
	0xf5, 0xbd, 0x5c, 0xb3, 0xca, 0xd9, 0x8c, 0xc2, 0xfe, 0x5b, 0x83, 0xc6, 0xb8, 0xd2, 0x4d, 0xfb,
	0x78, 0x76, 0x42, 0x9a, 0x9d, 0x3e, 0x21, 0xa5, 0x39, 0x2b, 0x4c, 0xe3, 0xec, 0x0e, 0x94, 0x5c,
	0x67, 0x20, 0x5a, 0x86, 0x9c, 0xa4, 0x8a, 0xae, 0x33, 0xe8, 0xd9, 0xe4, 0x36, 0x14, 0xe5, 0x7c,
	0x55, 0x94, 0x52, 0xdc, 0x10, 0x02, 0x73, 0xa7, 0x8e, 0xfd, 0x1d, 0x56, 0x67, 0x9d, 0xe2, 0x5a,
	0xc9, 0x3a, 0x58, 0x72, 0x52, 0xd6, 0x31, 0x3e, 0xc0, 0xea, 0xa4, 0xf8, 0x05, 0xb3, 0x3f, 0x8d,
	0x7d, 0x07, 0xd6, 0x26, 0x52, 0x3b, 0xf6, 0x3d, 0x70, 0xe0, 0x8e, 0xd4, 0x72, 0xbd, 0x43, 0xcb,
	0xed, 0x0e, 0x92, 0xd7, 0x9f, 0xe5, 0x49, 0xbb, 0xd6, 0x24, 0x79, 0x18, 0xf9, 0x16, 0xe7, 0xe6,
	0x27, 0xcf, 0x96, 0xcc, 0xea, 0x14, 0xa4, 0x68, 0xdf, 0xb3, 0x99, 0x41, 0xe3, 0x34, 0xe6, 0xae,
	0x12, 0x31, 0x3c, 0xc9, 0x57, 0xc7, 0xff, 0x33, 0x21, 0xe4, 0x2c, 0x46, 0xb5, 0xf1, 0x42, 0x3d,
	0xb4, 0x94, 0xc6, 0xcd, 0xa7, 0x99, 0xce, 0xef, 0x73, 0x50, 0x44, 0x38, 0xf2, 0x8b, 0x1a, 0x5b,
	0x77, 0x86, 0x62, 0x44, 0x22, 0x4b, 0xd9, 0xa1, 0x2f, 0x76, 0xbb, 0xb9, 0x7c, 0xd9, 0x30, 0xb8,
	0xcf, 0x8f, 0x8c, 0x99, 0x04, 0xe1, 0x9d, 0x6f, 0x5b, 0xe1, 0x8d, 0x10, 0x5e, 0x41, 0x2d, 0x3d,
	0xa7, 0x91, 0xbb, 0x93, 0x87, 0x3b, 0x81, 0x74, 0xef, 0xd2, 0xe3, 0x34, 0x60, 0x17, 0xf4, 0xb8,
	0x22, 0xc8, 0xca, 0xe5, 0x33, 0x94, 0x00, 0x6a, 0x4e, 0x98, 0x22, 0x24, 0xc8, 0x4b, 0x35, 0xf1,
	0xa5, 0xbe, 0xa3, 0xad, 0x2b, 0xfb, 0xd7, 0x94, 0x28, 0x3f, 0x8e, 0x86, 0xb3, 0xb8, 0x4c, 0xc9,
	0xfd, 0xab, 0x5b, 0x83, 0x40, 0x34, 0xa6, 0x94, 0xb8, 0x04, 0x7f, 0xa7, 0xfe, 0xf4, 0x25, 0xe5,
	0x41, 0xd6, 0xae, 0xaa, 0x2b, 0x01, 0xdc, 0x9a, 0xa0, 0x90, 0x82, 0xdd, 0x82, 0x0f, 0xfa, 0xb1,
	0xe5, 0xe2, 0xff, 0xca, 0xc3, 0x12, 0xfe, 0x3c, 0xfa, 0x27, 0x00, 0x00, 0xff, 0xff, 0x44, 0x8f,
	0xcc, 0xaf, 0x9a, 0x0e, 0x00, 0x00,
}
