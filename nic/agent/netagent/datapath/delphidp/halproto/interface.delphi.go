// Code generated by protoc-gen-go. DO NOT EDIT.
// source: interface.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// IfStatus status reflects the current status of Interface
type IfStatus int32

const (
	IfStatus_IF_STATUS_NONE IfStatus = 0
	IfStatus_IF_STATUS_UP   IfStatus = 1
	IfStatus_IF_STATUS_DOWN IfStatus = 2
)

var IfStatus_name = map[int32]string{
	0: "IF_STATUS_NONE",
	1: "IF_STATUS_UP",
	2: "IF_STATUS_DOWN",
}
var IfStatus_value = map[string]int32{
	"IF_STATUS_NONE": 0,
	"IF_STATUS_UP":   1,
	"IF_STATUS_DOWN": 2,
}

func (x IfStatus) String() string {
	return proto.EnumName(IfStatus_name, int32(x))
}
func (IfStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

// Types of LIF ports
type LifPortType int32

const (
	LifPortType_LIF_PORT_TYPE_NONE       LifPortType = 0
	LifPortType_LIF_PORT_TYPE_DMA        LifPortType = 1
	LifPortType_LIF_PORT_TYPE_P4_INGRESS LifPortType = 2
	LifPortType_LIF_PORT_TYPE_P4_EGRESS  LifPortType = 3
	LifPortType_LIF_PORT_TYPE_NCSI       LifPortType = 4
)

var LifPortType_name = map[int32]string{
	0: "LIF_PORT_TYPE_NONE",
	1: "LIF_PORT_TYPE_DMA",
	2: "LIF_PORT_TYPE_P4_INGRESS",
	3: "LIF_PORT_TYPE_P4_EGRESS",
	4: "LIF_PORT_TYPE_NCSI",
}
var LifPortType_value = map[string]int32{
	"LIF_PORT_TYPE_NONE":       0,
	"LIF_PORT_TYPE_DMA":        1,
	"LIF_PORT_TYPE_P4_INGRESS": 2,
	"LIF_PORT_TYPE_P4_EGRESS":  3,
	"LIF_PORT_TYPE_NCSI":       4,
}

func (x LifPortType) String() string {
	return proto.EnumName(LifPortType_name, int32(x))
}
func (LifPortType) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{1} }

// Different purposes of LIF queues. This is not the same as
// Queue type (type_num field in LifQStateMapEntry). This is
// application (e.g. TCP, RDMA, Storage) specific and is specified
// on a per LIF per Queue Type bases. In other words, for one LIF
// type 0 can be TX Queue and for another LIF type 0 can be RX Queue.
type LifQPurpose int32

const (
	LifQPurpose_LIF_QUEUE_PURPOSE_NONE      LifQPurpose = 0
	LifQPurpose_LIF_QUEUE_PURPOSE_ADMIN     LifQPurpose = 1
	LifQPurpose_LIF_QUEUE_PURPOSE_TX        LifQPurpose = 2
	LifQPurpose_LIF_QUEUE_PURPOSE_RX        LifQPurpose = 3
	LifQPurpose_LIF_QUEUE_PURPOSE_RDMA_SEND LifQPurpose = 4
	LifQPurpose_LIF_QUEUE_PURPOSE_RDMA_RECV LifQPurpose = 5
	LifQPurpose_LIF_QUEUE_PURPOSE_CQ        LifQPurpose = 6
	LifQPurpose_LIF_QUEUE_PURPOSE_EQ        LifQPurpose = 7
	LifQPurpose_LIF_QUEUE_PURPOSE_NVME      LifQPurpose = 8
	LifQPurpose_LIF_QUEUE_PURPOSE_STORAGE   LifQPurpose = 9
	LifQPurpose_LIF_QUEUE_PURPOSE_VIRTIO_TX LifQPurpose = 10
	LifQPurpose_LIF_QUEUE_PURPOSE_VIRTIO_RX LifQPurpose = 11
	LifQPurpose_LIF_QUEUE_PURPOSE_SVC       LifQPurpose = 12
)

var LifQPurpose_name = map[int32]string{
	0:  "LIF_QUEUE_PURPOSE_NONE",
	1:  "LIF_QUEUE_PURPOSE_ADMIN",
	2:  "LIF_QUEUE_PURPOSE_TX",
	3:  "LIF_QUEUE_PURPOSE_RX",
	4:  "LIF_QUEUE_PURPOSE_RDMA_SEND",
	5:  "LIF_QUEUE_PURPOSE_RDMA_RECV",
	6:  "LIF_QUEUE_PURPOSE_CQ",
	7:  "LIF_QUEUE_PURPOSE_EQ",
	8:  "LIF_QUEUE_PURPOSE_NVME",
	9:  "LIF_QUEUE_PURPOSE_STORAGE",
	10: "LIF_QUEUE_PURPOSE_VIRTIO_TX",
	11: "LIF_QUEUE_PURPOSE_VIRTIO_RX",
	12: "LIF_QUEUE_PURPOSE_SVC",
}
var LifQPurpose_value = map[string]int32{
	"LIF_QUEUE_PURPOSE_NONE":      0,
	"LIF_QUEUE_PURPOSE_ADMIN":     1,
	"LIF_QUEUE_PURPOSE_TX":        2,
	"LIF_QUEUE_PURPOSE_RX":        3,
	"LIF_QUEUE_PURPOSE_RDMA_SEND": 4,
	"LIF_QUEUE_PURPOSE_RDMA_RECV": 5,
	"LIF_QUEUE_PURPOSE_CQ":        6,
	"LIF_QUEUE_PURPOSE_EQ":        7,
	"LIF_QUEUE_PURPOSE_NVME":      8,
	"LIF_QUEUE_PURPOSE_STORAGE":   9,
	"LIF_QUEUE_PURPOSE_VIRTIO_TX": 10,
	"LIF_QUEUE_PURPOSE_VIRTIO_RX": 11,
	"LIF_QUEUE_PURPOSE_SVC":       12,
}

func (x LifQPurpose) String() string {
	return proto.EnumName(LifQPurpose_name, int32(x))
}
func (LifQPurpose) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{2} }

// types of interfaces
type IfType int32

const (
	IfType_IF_TYPE_NONE      IfType = 0
	IfType_IF_TYPE_ENIC      IfType = 1
	IfType_IF_TYPE_UPLINK    IfType = 2
	IfType_IF_TYPE_UPLINK_PC IfType = 3
	IfType_IF_TYPE_TUNNEL    IfType = 4
	IfType_IF_TYPE_CPU       IfType = 5
	IfType_IF_TYPE_APP_REDIR IfType = 6
)

var IfType_name = map[int32]string{
	0: "IF_TYPE_NONE",
	1: "IF_TYPE_ENIC",
	2: "IF_TYPE_UPLINK",
	3: "IF_TYPE_UPLINK_PC",
	4: "IF_TYPE_TUNNEL",
	5: "IF_TYPE_CPU",
	6: "IF_TYPE_APP_REDIR",
}
var IfType_value = map[string]int32{
	"IF_TYPE_NONE":      0,
	"IF_TYPE_ENIC":      1,
	"IF_TYPE_UPLINK":    2,
	"IF_TYPE_UPLINK_PC": 3,
	"IF_TYPE_TUNNEL":    4,
	"IF_TYPE_CPU":       5,
	"IF_TYPE_APP_REDIR": 6,
}

func (x IfType) String() string {
	return proto.EnumName(IfType_name, int32(x))
}
func (IfType) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{3} }

// RSS Type
type LifRssType int32

const (
	LifRssType_RSS_TYPE_NONE        LifRssType = 0
	LifRssType_RSS_TYPE_IPV4        LifRssType = 1
	LifRssType_RSS_TYPE_IPV4_TCP    LifRssType = 2
	LifRssType_RSS_TYPE_IPV4_UDP    LifRssType = 4
	LifRssType_RSS_TYPE_IPV6        LifRssType = 8
	LifRssType_RSS_TYPE_IPV6_TCP    LifRssType = 16
	LifRssType_RSS_TYPE_IPV6_UDP    LifRssType = 32
	LifRssType_RSS_TYPE_IPV6_EX     LifRssType = 64
	LifRssType_RSS_TYPE_IPV6_TCP_EX LifRssType = 128
	LifRssType_RSS_TYPE_IPV6_UDP_EX LifRssType = 256
)

var LifRssType_name = map[int32]string{
	0:   "RSS_TYPE_NONE",
	1:   "RSS_TYPE_IPV4",
	2:   "RSS_TYPE_IPV4_TCP",
	4:   "RSS_TYPE_IPV4_UDP",
	8:   "RSS_TYPE_IPV6",
	16:  "RSS_TYPE_IPV6_TCP",
	32:  "RSS_TYPE_IPV6_UDP",
	64:  "RSS_TYPE_IPV6_EX",
	128: "RSS_TYPE_IPV6_TCP_EX",
	256: "RSS_TYPE_IPV6_UDP_EX",
}
var LifRssType_value = map[string]int32{
	"RSS_TYPE_NONE":        0,
	"RSS_TYPE_IPV4":        1,
	"RSS_TYPE_IPV4_TCP":    2,
	"RSS_TYPE_IPV4_UDP":    4,
	"RSS_TYPE_IPV6":        8,
	"RSS_TYPE_IPV6_TCP":    16,
	"RSS_TYPE_IPV6_UDP":    32,
	"RSS_TYPE_IPV6_EX":     64,
	"RSS_TYPE_IPV6_TCP_EX": 128,
	"RSS_TYPE_IPV6_UDP_EX": 256,
}

func (x LifRssType) String() string {
	return proto.EnumName(LifRssType_name, int32(x))
}
func (LifRssType) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{4} }

// ------------------------------------------------------------------------------
// if interface type is IF_TYPE_ENIC, one of the following vnic types must be
// set. IF_ENIC_TYPE_XXX identifies how a workload is attached to asic
// ------------------------------------------------------------------------------
type IfEnicType int32

const (
	IfEnicType_IF_ENIC_TYPE_NONE   IfEnicType = 0
	IfEnicType_IF_ENIC_TYPE_USEG   IfEnicType = 1
	IfEnicType_IF_ENIC_TYPE_PVLAN  IfEnicType = 2
	IfEnicType_IF_ENIC_TYPE_DIRECT IfEnicType = 3
	// VSS/DVS connectivity etc.
	IfEnicType_IF_ENIC_TYPE_CLASSIC IfEnicType = 4
	IfEnicType_IF_ENIC_TYPE_GFT     IfEnicType = 5
)

var IfEnicType_name = map[int32]string{
	0: "IF_ENIC_TYPE_NONE",
	1: "IF_ENIC_TYPE_USEG",
	2: "IF_ENIC_TYPE_PVLAN",
	3: "IF_ENIC_TYPE_DIRECT",
	4: "IF_ENIC_TYPE_CLASSIC",
	5: "IF_ENIC_TYPE_GFT",
}
var IfEnicType_value = map[string]int32{
	"IF_ENIC_TYPE_NONE":    0,
	"IF_ENIC_TYPE_USEG":    1,
	"IF_ENIC_TYPE_PVLAN":   2,
	"IF_ENIC_TYPE_DIRECT":  3,
	"IF_ENIC_TYPE_CLASSIC": 4,
	"IF_ENIC_TYPE_GFT":     5,
}

func (x IfEnicType) String() string {
	return proto.EnumName(IfEnicType_name, int32(x))
}
func (IfEnicType) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{5} }

// ------------------------------------------------------------------------------
// if interface type is IF_TYPE_TUNNEL, one of the following encap types must be
// set.
// ------------------------------------------------------------------------------
type IfTunnelEncapType int32

const (
	IfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_NONE  IfTunnelEncapType = 0
	IfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_VXLAN IfTunnelEncapType = 1
	IfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_GRE   IfTunnelEncapType = 2
)

var IfTunnelEncapType_name = map[int32]string{
	0: "IF_TUNNEL_ENCAP_TYPE_NONE",
	1: "IF_TUNNEL_ENCAP_TYPE_VXLAN",
	2: "IF_TUNNEL_ENCAP_TYPE_GRE",
}
var IfTunnelEncapType_value = map[string]int32{
	"IF_TUNNEL_ENCAP_TYPE_NONE":  0,
	"IF_TUNNEL_ENCAP_TYPE_VXLAN": 1,
	"IF_TUNNEL_ENCAP_TYPE_GRE":   2,
}

func (x IfTunnelEncapType) String() string {
	return proto.EnumName(IfTunnelEncapType_name, int32(x))
}
func (IfTunnelEncapType) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{6} }

// A single entry in the LIF to Qstate map.
// This entry represents a single type.
// Everything except type puspose is used by the hardware.
type LifQStateMapEntry struct {
	// type_num is the type as defined by Capri hardware in the
	// LIF -> Qstate array entry. There are 8 types numbered 0-7.
	// There can be at most one entry per type_num.
	// TODO: How does a user know what number to use here unless
	// it is enumerated or purpose is clear ???
	TypeNum uint32 `protobuf:"varint,1,opt,name=type_num,json=typeNum" json:"type_num,omitempty"`
	// This entry represents the size of the Q state
	// used by this type. This number represents the size
	// as 2^(5+size). e.g. for a size of 64, the size field
	// would be 1 i.e. 2^(5+1) = 64.
	// Max value for size today is 7 i.e. 4096 bytes.
	Size uint32 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	// entries field represent number of queues as a
	// power of 2. So a value of 3 means 8 queues.
	// Max value for entries today is 24 i.e. 16M queues.
	Entries uint32 `protobuf:"varint,3,opt,name=entries" json:"entries,omitempty"`
	// Queue purpose is not needed by the hardware. It is used
	// internally by the HAL/FTE.
	Purpose LifQPurpose `protobuf:"varint,4,opt,name=purpose,enum=intf.LifQPurpose" json:"purpose,omitempty"`
}

func (m *LifQStateMapEntry) Reset()                    { *m = LifQStateMapEntry{} }
func (m *LifQStateMapEntry) String() string            { return proto.CompactTextString(m) }
func (*LifQStateMapEntry) ProtoMessage()               {}
func (*LifQStateMapEntry) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

func (m *LifQStateMapEntry) GetTypeNum() uint32 {
	if m != nil {
		return m.TypeNum
	}
	return 0
}

func (m *LifQStateMapEntry) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *LifQStateMapEntry) GetEntries() uint32 {
	if m != nil {
		return m.Entries
	}
	return 0
}

func (m *LifQStateMapEntry) GetPurpose() LifQPurpose {
	if m != nil {
		return m.Purpose
	}
	return LifQPurpose_LIF_QUEUE_PURPOSE_NONE
}

// Packet filters to receive traffic
type PktFilter struct {
	ReceiveBroadcast    bool `protobuf:"varint,1,opt,name=receive_broadcast,json=receiveBroadcast" json:"receive_broadcast,omitempty"`
	ReceiveAllMulticast bool `protobuf:"varint,2,opt,name=receive_all_multicast,json=receiveAllMulticast" json:"receive_all_multicast,omitempty"`
	ReceivePromiscuous  bool `protobuf:"varint,3,opt,name=receive_promiscuous,json=receivePromiscuous" json:"receive_promiscuous,omitempty"`
}

func (m *PktFilter) Reset()                    { *m = PktFilter{} }
func (m *PktFilter) String() string            { return proto.CompactTextString(m) }
func (*PktFilter) ProtoMessage()               {}
func (*PktFilter) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{1} }

func (m *PktFilter) GetReceiveBroadcast() bool {
	if m != nil {
		return m.ReceiveBroadcast
	}
	return false
}

func (m *PktFilter) GetReceiveAllMulticast() bool {
	if m != nil {
		return m.ReceiveAllMulticast
	}
	return false
}

func (m *PktFilter) GetReceivePromiscuous() bool {
	if m != nil {
		return m.ReceivePromiscuous
	}
	return false
}

// LIF object
type LifSpec struct {
	Meta *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	// key_or_handle is LIF's key or handle
	KeyOrHandle             *LifKeyHandle        `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	PinnedUplinkIfKeyHandle *InterfaceKeyHandle  `protobuf:"bytes,3,opt,name=pinned_uplink_if_key_handle,json=pinnedUplinkIfKeyHandle" json:"pinned_uplink_if_key_handle,omitempty"`
	Name                    string               `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	AdminStatus             IfStatus             `protobuf:"varint,5,opt,name=admin_status,json=adminStatus,enum=intf.IfStatus" json:"admin_status,omitempty"`
	Type                    LifType              `protobuf:"varint,6,opt,name=type,enum=types.LifType" json:"type,omitempty"`
	LifQstateMap            []*LifQStateMapEntry `protobuf:"bytes,7,rep,name=lif_qstate_map,json=lifQstateMap" json:"lif_qstate_map,omitempty"`
	VlanStripEn             bool                 `protobuf:"varint,8,opt,name=vlan_strip_en,json=vlanStripEn" json:"vlan_strip_en,omitempty"`
	VlanInsertEn            bool                 `protobuf:"varint,9,opt,name=vlan_insert_en,json=vlanInsertEn" json:"vlan_insert_en,omitempty"`
	EnableRdma              bool                 `protobuf:"varint,10,opt,name=enable_rdma,json=enableRdma" json:"enable_rdma,omitempty"`
	IsManagement            bool                 `protobuf:"varint,11,opt,name=is_management,json=isManagement" json:"is_management,omitempty"`
	PacketFilter            *PktFilter           `protobuf:"bytes,12,opt,name=packet_filter,json=packetFilter" json:"packet_filter,omitempty"`
	HwLifId                 uint32               `protobuf:"varint,13,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
	RdmaMaxKeys             uint32               `protobuf:"varint,14,opt,name=rdma_max_keys,json=rdmaMaxKeys" json:"rdma_max_keys,omitempty"`
	RdmaMaxAhs              uint32               `protobuf:"varint,15,opt,name=rdma_max_ahs,json=rdmaMaxAhs" json:"rdma_max_ahs,omitempty"`
	RdmaMaxPtEntries        uint32               `protobuf:"varint,16,opt,name=rdma_max_pt_entries,json=rdmaMaxPtEntries" json:"rdma_max_pt_entries,omitempty"`
	LifQstate               []*QStateSetReq      `protobuf:"bytes,17,rep,name=lif_qstate,json=lifQstate" json:"lif_qstate,omitempty"`
	Rss                     *LifRssSpec          `protobuf:"bytes,18,opt,name=rss" json:"rss,omitempty"`
	TxPolicer               *PolicerSpec         `protobuf:"bytes,19,opt,name=tx_policer,json=txPolicer" json:"tx_policer,omitempty"`
	RxPolicer               *PolicerSpec         `protobuf:"bytes,20,opt,name=rx_policer,json=rxPolicer" json:"rx_policer,omitempty"`
	RxQosClass              *QosClassKeyHandle   `protobuf:"bytes,21,opt,name=rx_qos_class,json=rxQosClass" json:"rx_qos_class,omitempty"`
	TxQosClass              *QosClassKeyHandle   `protobuf:"bytes,22,opt,name=tx_qos_class,json=txQosClass" json:"tx_qos_class,omitempty"`
	RdmaBarmapSize          uint32               `protobuf:"varint,23,opt,name=rdma_barmap_size,json=rdmaBarmapSize" json:"rdma_barmap_size,omitempty"`
}

func (m *LifSpec) GetDelphiMessage() proto.Message {
	return m
}

func (m *LifSpec) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *LifSpec) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *LifSpec) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *LifSpec) GetDelphiKind() string {
	return "LifSpec"
}

func (m *LifSpec) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *LifSpec) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*LifSpec)
	return obj
}

func LifSpecMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("LifSpec", mode)
}

func LifSpecMountKey(client clientApi.Client, key *LifKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("LifSpec", key.String(), mode)
}

func GetLifSpec(client clientApi.Client, key *LifKeyHandle) *LifSpec {
	o := client.GetObject("LifSpec", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*LifSpec)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func LifSpecFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg LifSpec
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func LifSpecWatch(client clientApi.Client, reactor LifSpecReactor) {
	client.WatchKind("LifSpec", reactor)
}
func LifSpecList(client clientApi.Client) []*LifSpec {
	bobjs := client.List("LifSpec")
	objs := make([]*LifSpec, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*LifSpec)
		objs = append(objs, obj)
	}
	return objs
}
func (m *LifSpec) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(LifSpecReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnLifSpecCreate(m)
			} else {
				oldObj, ok := old.(*LifSpec)
				if ok == false {
					panic("Not an LifSpec object")
				}
				rctr.OnLifSpecUpdate(oldObj, m)
			}
		} else {
			rctr.OnLifSpecDelete(m)
		}
	}
}

type LifSpecReactor interface {
	OnLifSpecCreate(obj *LifSpec)
	OnLifSpecUpdate(old *LifSpec, obj *LifSpec)
	OnLifSpecDelete(obj *LifSpec)
}

func (m *LifSpec) Reset()                    { *m = LifSpec{} }
func (m *LifSpec) String() string            { return proto.CompactTextString(m) }
func (*LifSpec) ProtoMessage()               {}
func (*LifSpec) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{2} }

func (m *LifSpec) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *LifSpec) GetKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *LifSpec) GetPinnedUplinkIfKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.PinnedUplinkIfKeyHandle
	}
	return nil
}

func (m *LifSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LifSpec) GetAdminStatus() IfStatus {
	if m != nil {
		return m.AdminStatus
	}
	return IfStatus_IF_STATUS_NONE
}

func (m *LifSpec) GetType() LifType {
	if m != nil {
		return m.Type
	}
	return LifType_LIF_TYPE_NONE
}

func (m *LifSpec) GetLifQstateMap() []*LifQStateMapEntry {
	if m != nil {
		return m.LifQstateMap
	}
	return nil
}

func (m *LifSpec) GetVlanStripEn() bool {
	if m != nil {
		return m.VlanStripEn
	}
	return false
}

func (m *LifSpec) GetVlanInsertEn() bool {
	if m != nil {
		return m.VlanInsertEn
	}
	return false
}

func (m *LifSpec) GetEnableRdma() bool {
	if m != nil {
		return m.EnableRdma
	}
	return false
}

func (m *LifSpec) GetIsManagement() bool {
	if m != nil {
		return m.IsManagement
	}
	return false
}

func (m *LifSpec) GetPacketFilter() *PktFilter {
	if m != nil {
		return m.PacketFilter
	}
	return nil
}

func (m *LifSpec) GetHwLifId() uint32 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *LifSpec) GetRdmaMaxKeys() uint32 {
	if m != nil {
		return m.RdmaMaxKeys
	}
	return 0
}

func (m *LifSpec) GetRdmaMaxAhs() uint32 {
	if m != nil {
		return m.RdmaMaxAhs
	}
	return 0
}

func (m *LifSpec) GetRdmaMaxPtEntries() uint32 {
	if m != nil {
		return m.RdmaMaxPtEntries
	}
	return 0
}

func (m *LifSpec) GetLifQstate() []*QStateSetReq {
	if m != nil {
		return m.LifQstate
	}
	return nil
}

func (m *LifSpec) GetRss() *LifRssSpec {
	if m != nil {
		return m.Rss
	}
	return nil
}

func (m *LifSpec) GetTxPolicer() *PolicerSpec {
	if m != nil {
		return m.TxPolicer
	}
	return nil
}

func (m *LifSpec) GetRxPolicer() *PolicerSpec {
	if m != nil {
		return m.RxPolicer
	}
	return nil
}

func (m *LifSpec) GetRxQosClass() *QosClassKeyHandle {
	if m != nil {
		return m.RxQosClass
	}
	return nil
}

func (m *LifSpec) GetTxQosClass() *QosClassKeyHandle {
	if m != nil {
		return m.TxQosClass
	}
	return nil
}

func (m *LifSpec) GetRdmaBarmapSize() uint32 {
	if m != nil {
		return m.RdmaBarmapSize
	}
	return 0
}

// LifRequestMsg is batched request used to create/update of LIFs
type LifRequestMsg struct {
	Request []*LifSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LifRequestMsg) Reset()                    { *m = LifRequestMsg{} }
func (m *LifRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LifRequestMsg) ProtoMessage()               {}
func (*LifRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{3} }

func (m *LifRequestMsg) GetRequest() []*LifSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// LifStatus represents the operational status of LIF
type LifStatus struct {
	Meta        *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle *LifKeyHandle      `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	LifStatus   IfStatus           `protobuf:"varint,3,opt,name=lif_status,json=lifStatus,enum=intf.IfStatus" json:"lif_status,omitempty"`
	LifHandle   uint64             `protobuf:"fixed64,4,opt,name=lif_handle,json=lifHandle" json:"lif_handle,omitempty"`
	HwLifId     uint64             `protobuf:"varint,5,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
}

func (m *LifStatus) GetDelphiMessage() proto.Message {
	return m
}

func (m *LifStatus) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *LifStatus) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *LifStatus) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *LifStatus) GetDelphiKind() string {
	return "LifStatus"
}

func (m *LifStatus) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *LifStatus) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*LifStatus)
	return obj
}

func LifStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("LifStatus", mode)
}

func LifStatusMountKey(client clientApi.Client, key *LifKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("LifStatus", key.String(), mode)
}

func GetLifStatus(client clientApi.Client, key *LifKeyHandle) *LifStatus {
	o := client.GetObject("LifStatus", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*LifStatus)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func LifStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg LifStatus
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func LifStatusWatch(client clientApi.Client, reactor LifStatusReactor) {
	client.WatchKind("LifStatus", reactor)
}
func LifStatusList(client clientApi.Client) []*LifStatus {
	bobjs := client.List("LifStatus")
	objs := make([]*LifStatus, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*LifStatus)
		objs = append(objs, obj)
	}
	return objs
}
func (m *LifStatus) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(LifStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnLifStatusCreate(m)
			} else {
				oldObj, ok := old.(*LifStatus)
				if ok == false {
					panic("Not an LifStatus object")
				}
				rctr.OnLifStatusUpdate(oldObj, m)
			}
		} else {
			rctr.OnLifStatusDelete(m)
		}
	}
}

type LifStatusReactor interface {
	OnLifStatusCreate(obj *LifStatus)
	OnLifStatusUpdate(old *LifStatus, obj *LifStatus)
	OnLifStatusDelete(obj *LifStatus)
}

func (m *LifStatus) Reset()                    { *m = LifStatus{} }
func (m *LifStatus) String() string            { return proto.CompactTextString(m) }
func (*LifStatus) ProtoMessage()               {}
func (*LifStatus) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{4} }

func (m *LifStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *LifStatus) GetKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *LifStatus) GetLifStatus() IfStatus {
	if m != nil {
		return m.LifStatus
	}
	return IfStatus_IF_STATUS_NONE
}

func (m *LifStatus) GetLifHandle() uint64 {
	if m != nil {
		return m.LifHandle
	}
	return 0
}

func (m *LifStatus) GetHwLifId() uint64 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

// LifQstate entries
type LifQState struct {
	TypeNum uint32 `protobuf:"varint,1,opt,name=type_num,json=typeNum" json:"type_num,omitempty"`
	Addr    uint64 `protobuf:"varint,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *LifQState) Reset()                    { *m = LifQState{} }
func (m *LifQState) String() string            { return proto.CompactTextString(m) }
func (*LifQState) ProtoMessage()               {}
func (*LifQState) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{5} }

func (m *LifQState) GetTypeNum() uint32 {
	if m != nil {
		return m.TypeNum
	}
	return 0
}

func (m *LifQState) GetAddr() uint64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

// LifRdmaData entries
type LifRdmaData struct {
	PtBaseAddr     uint64 `protobuf:"varint,1,opt,name=pt_base_addr,json=ptBaseAddr" json:"pt_base_addr,omitempty"`
	KtBaseAddr     uint64 `protobuf:"varint,2,opt,name=kt_base_addr,json=ktBaseAddr" json:"kt_base_addr,omitempty"`
	AtBaseAddr     uint64 `protobuf:"varint,3,opt,name=at_base_addr,json=atBaseAddr" json:"at_base_addr,omitempty"`
	BarmapBaseAddr uint64 `protobuf:"varint,4,opt,name=barmap_base_addr,json=barmapBaseAddr" json:"barmap_base_addr,omitempty"`
}

func (m *LifRdmaData) Reset()                    { *m = LifRdmaData{} }
func (m *LifRdmaData) String() string            { return proto.CompactTextString(m) }
func (*LifRdmaData) ProtoMessage()               {}
func (*LifRdmaData) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{6} }

func (m *LifRdmaData) GetPtBaseAddr() uint64 {
	if m != nil {
		return m.PtBaseAddr
	}
	return 0
}

func (m *LifRdmaData) GetKtBaseAddr() uint64 {
	if m != nil {
		return m.KtBaseAddr
	}
	return 0
}

func (m *LifRdmaData) GetAtBaseAddr() uint64 {
	if m != nil {
		return m.AtBaseAddr
	}
	return 0
}

func (m *LifRdmaData) GetBarmapBaseAddr() uint64 {
	if m != nil {
		return m.BarmapBaseAddr
	}
	return 0
}

// LifResponse response to one LifSpec
type LifResponse struct {
	ApiStatus     ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status        *LifStatus   `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Qstate        []*LifQState `protobuf:"bytes,3,rep,name=qstate" json:"qstate,omitempty"`
	RdmaDataValid bool         `protobuf:"varint,4,opt,name=rdma_data_valid,json=rdmaDataValid" json:"rdma_data_valid,omitempty"`
	RdmaData      *LifRdmaData `protobuf:"bytes,5,opt,name=rdma_data,json=rdmaData" json:"rdma_data,omitempty"`
}

func (m *LifResponse) Reset()                    { *m = LifResponse{} }
func (m *LifResponse) String() string            { return proto.CompactTextString(m) }
func (*LifResponse) ProtoMessage()               {}
func (*LifResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{7} }

func (m *LifResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *LifResponse) GetStatus() *LifStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *LifResponse) GetQstate() []*LifQState {
	if m != nil {
		return m.Qstate
	}
	return nil
}

func (m *LifResponse) GetRdmaDataValid() bool {
	if m != nil {
		return m.RdmaDataValid
	}
	return false
}

func (m *LifResponse) GetRdmaData() *LifRdmaData {
	if m != nil {
		return m.RdmaData
	}
	return nil
}

// LifResponseMsg is response to LifRequestMsg
type LifResponseMsg struct {
	Response []*LifResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LifResponseMsg) Reset()                    { *m = LifResponseMsg{} }
func (m *LifResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LifResponseMsg) ProtoMessage()               {}
func (*LifResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{8} }

func (m *LifResponseMsg) GetResponse() []*LifResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type QStateGetReq struct {
	LifHandle uint64 `protobuf:"varint,1,opt,name=lif_handle,json=lifHandle" json:"lif_handle,omitempty"`
	TypeNum   uint32 `protobuf:"varint,2,opt,name=type_num,json=typeNum" json:"type_num,omitempty"`
	Qid       uint32 `protobuf:"varint,3,opt,name=qid" json:"qid,omitempty"`
	// Amount of data to return in the corresponding
	// QStateGetResp::queue_state buffer. By default
	// All the data is returned (based on the size of this
	// queue type_num). But can be limited by the caller.
	// Setting this value to be greater than the actual
	// size has no effect.
	RetDataSize uint32 `protobuf:"varint,4,opt,name=ret_data_size,json=retDataSize" json:"ret_data_size,omitempty"`
}

func (m *QStateGetReq) Reset()                    { *m = QStateGetReq{} }
func (m *QStateGetReq) String() string            { return proto.CompactTextString(m) }
func (*QStateGetReq) ProtoMessage()               {}
func (*QStateGetReq) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{9} }

func (m *QStateGetReq) GetLifHandle() uint64 {
	if m != nil {
		return m.LifHandle
	}
	return 0
}

func (m *QStateGetReq) GetTypeNum() uint32 {
	if m != nil {
		return m.TypeNum
	}
	return 0
}

func (m *QStateGetReq) GetQid() uint32 {
	if m != nil {
		return m.Qid
	}
	return 0
}

func (m *QStateGetReq) GetRetDataSize() uint32 {
	if m != nil {
		return m.RetDataSize
	}
	return 0
}

type GetQStateRequestMsg struct {
	Reqs []*QStateGetReq `protobuf:"bytes,1,rep,name=reqs" json:"reqs,omitempty"`
}

func (m *GetQStateRequestMsg) Reset()                    { *m = GetQStateRequestMsg{} }
func (m *GetQStateRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*GetQStateRequestMsg) ProtoMessage()               {}
func (*GetQStateRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{10} }

func (m *GetQStateRequestMsg) GetReqs() []*QStateGetReq {
	if m != nil {
		return m.Reqs
	}
	return nil
}

type QStateGetResp struct {
	// TODO: what is user to make out of this error_code if it is non-zero ??
	//       why this is not using types.ApiStatus ???
	ErrorCode  int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	QAddr      uint64 `protobuf:"varint,2,opt,name=q_addr,json=qAddr" json:"q_addr,omitempty"`
	QueueState []byte `protobuf:"bytes,3,opt,name=queue_state,json=queueState,proto3" json:"queue_state,omitempty"`
}

func (m *QStateGetResp) Reset()                    { *m = QStateGetResp{} }
func (m *QStateGetResp) String() string            { return proto.CompactTextString(m) }
func (*QStateGetResp) ProtoMessage()               {}
func (*QStateGetResp) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{11} }

func (m *QStateGetResp) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *QStateGetResp) GetQAddr() uint64 {
	if m != nil {
		return m.QAddr
	}
	return 0
}

func (m *QStateGetResp) GetQueueState() []byte {
	if m != nil {
		return m.QueueState
	}
	return nil
}

type GetQStateResponseMsg struct {
	Resps []*QStateGetResp `protobuf:"bytes,1,rep,name=resps" json:"resps,omitempty"`
}

func (m *GetQStateResponseMsg) Reset()                    { *m = GetQStateResponseMsg{} }
func (m *GetQStateResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*GetQStateResponseMsg) ProtoMessage()               {}
func (*GetQStateResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{12} }

func (m *GetQStateResponseMsg) GetResps() []*QStateGetResp {
	if m != nil {
		return m.Resps
	}
	return nil
}

// A P4ProgLabel is used to get the PC offset for
// Queue state.
type P4ProgLabel struct {
	Handle   string `protobuf:"bytes,1,opt,name=handle" json:"handle,omitempty"`
	ProgName string `protobuf:"bytes,2,opt,name=prog_name,json=progName" json:"prog_name,omitempty"`
	Label    string `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
}

func (m *P4ProgLabel) Reset()                    { *m = P4ProgLabel{} }
func (m *P4ProgLabel) String() string            { return proto.CompactTextString(m) }
func (*P4ProgLabel) ProtoMessage()               {}
func (*P4ProgLabel) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{13} }

func (m *P4ProgLabel) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

func (m *P4ProgLabel) GetProgName() string {
	if m != nil {
		return m.ProgName
	}
	return ""
}

func (m *P4ProgLabel) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type QStateSetReq struct {
	LifHandle uint64 `protobuf:"varint,1,opt,name=lif_handle,json=lifHandle" json:"lif_handle,omitempty"`
	TypeNum   uint32 `protobuf:"varint,2,opt,name=type_num,json=typeNum" json:"type_num,omitempty"`
	Qid       uint32 `protobuf:"varint,3,opt,name=qid" json:"qid,omitempty"`
	// If present, PC Offset is filled by the implementation
	// based on the label.
	Label *P4ProgLabel `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
	// Actual queue state to be written. Can be less than the
	// actual qstate size. But has to be greater than 0.
	QueueState []byte `protobuf:"bytes,5,opt,name=queue_state,json=queueState,proto3" json:"queue_state,omitempty"`
}

func (m *QStateSetReq) Reset()                    { *m = QStateSetReq{} }
func (m *QStateSetReq) String() string            { return proto.CompactTextString(m) }
func (*QStateSetReq) ProtoMessage()               {}
func (*QStateSetReq) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{14} }

func (m *QStateSetReq) GetLifHandle() uint64 {
	if m != nil {
		return m.LifHandle
	}
	return 0
}

func (m *QStateSetReq) GetTypeNum() uint32 {
	if m != nil {
		return m.TypeNum
	}
	return 0
}

func (m *QStateSetReq) GetQid() uint32 {
	if m != nil {
		return m.Qid
	}
	return 0
}

func (m *QStateSetReq) GetLabel() *P4ProgLabel {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *QStateSetReq) GetQueueState() []byte {
	if m != nil {
		return m.QueueState
	}
	return nil
}

type SetQStateRequestMsg struct {
	Reqs []*QStateSetReq `protobuf:"bytes,1,rep,name=reqs" json:"reqs,omitempty"`
}

func (m *SetQStateRequestMsg) Reset()                    { *m = SetQStateRequestMsg{} }
func (m *SetQStateRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SetQStateRequestMsg) ProtoMessage()               {}
func (*SetQStateRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{15} }

func (m *SetQStateRequestMsg) GetReqs() []*QStateSetReq {
	if m != nil {
		return m.Reqs
	}
	return nil
}

type QStateSetResp struct {
	// TODO: what is user to make out of this error_code if it is non-zero ??
	//       why this is not using types.ApiStatus ??
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *QStateSetResp) Reset()                    { *m = QStateSetResp{} }
func (m *QStateSetResp) String() string            { return proto.CompactTextString(m) }
func (*QStateSetResp) ProtoMessage()               {}
func (*QStateSetResp) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{16} }

func (m *QStateSetResp) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type SetQStateResponseMsg struct {
	Resps []*QStateSetResp `protobuf:"bytes,1,rep,name=resps" json:"resps,omitempty"`
}

func (m *SetQStateResponseMsg) Reset()                    { *m = SetQStateResponseMsg{} }
func (m *SetQStateResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SetQStateResponseMsg) ProtoMessage()               {}
func (*SetQStateResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{17} }

func (m *SetQStateResponseMsg) GetResps() []*QStateSetResp {
	if m != nil {
		return m.Resps
	}
	return nil
}

// LifDeleteRequest  is used to delete a LIF object
type LifDeleteRequest struct {
	// key_or_handle is LIF's unique identifier for deletion
	KeyOrHandle *LifKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *LifDeleteRequest) Reset()                    { *m = LifDeleteRequest{} }
func (m *LifDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteRequest) ProtoMessage()               {}
func (*LifDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{18} }

func (m *LifDeleteRequest) GetKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// LifDeleteRequestMsg is used to delete a batch of LIFs
type LifDeleteRequestMsg struct {
	Request []*LifDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LifDeleteRequestMsg) Reset()                    { *m = LifDeleteRequestMsg{} }
func (m *LifDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteRequestMsg) ProtoMessage()               {}
func (*LifDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{19} }

func (m *LifDeleteRequestMsg) GetRequest() []*LifDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// LifDeleteResponse is response to LIF delete request
type LifDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *LifDeleteResponse) Reset()                    { *m = LifDeleteResponse{} }
func (m *LifDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteResponse) ProtoMessage()               {}
func (*LifDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{20} }

func (m *LifDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// LifDeleteResponseMsg is batched response to LifDeleteRequestMsg
type LifDeleteResponseMsg struct {
	Response []*LifDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LifDeleteResponseMsg) Reset()                    { *m = LifDeleteResponseMsg{} }
func (m *LifDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteResponseMsg) ProtoMessage()               {}
func (*LifDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{21} }

func (m *LifDeleteResponseMsg) GetResponse() []*LifDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// check which stats will be done by p4 and which will be done by p4+
type LifTxStats struct {
	FramesOk            uint64 `protobuf:"varint,1,opt,name=frames_ok,json=framesOk" json:"frames_ok,omitempty"`
	UnicastFramesOk     uint64 `protobuf:"varint,2,opt,name=unicast_frames_ok,json=unicastFramesOk" json:"unicast_frames_ok,omitempty"`
	UnicastFramesDrop   uint64 `protobuf:"varint,3,opt,name=unicast_frames_drop,json=unicastFramesDrop" json:"unicast_frames_drop,omitempty"`
	MulticastFramesOk   uint64 `protobuf:"varint,4,opt,name=multicast_frames_ok,json=multicastFramesOk" json:"multicast_frames_ok,omitempty"`
	MulticastFramesDrop uint64 `protobuf:"varint,5,opt,name=multicast_frames_drop,json=multicastFramesDrop" json:"multicast_frames_drop,omitempty"`
	BroadcastFramesOk   uint64 `protobuf:"varint,6,opt,name=broadcast_frames_ok,json=broadcastFramesOk" json:"broadcast_frames_ok,omitempty"`
	BroadcastFramesDrop uint64 `protobuf:"varint,7,opt,name=broadcast_frames_drop,json=broadcastFramesDrop" json:"broadcast_frames_drop,omitempty"`
	BytesOk             uint64 `protobuf:"varint,8,opt,name=bytes_ok,json=bytesOk" json:"bytes_ok,omitempty"`
	UnicastBytesOk      uint64 `protobuf:"varint,9,opt,name=unicast_bytes_ok,json=unicastBytesOk" json:"unicast_bytes_ok,omitempty"`
	MulticastBytesOk    uint64 `protobuf:"varint,10,opt,name=multicast_bytes_ok,json=multicastBytesOk" json:"multicast_bytes_ok,omitempty"`
	BroadcastBytesOk    uint64 `protobuf:"varint,11,opt,name=broadcast_bytes_ok,json=broadcastBytesOk" json:"broadcast_bytes_ok,omitempty"`
	Tso                 uint64 `protobuf:"varint,12,opt,name=tso" json:"tso,omitempty"`
}

func (m *LifTxStats) Reset()                    { *m = LifTxStats{} }
func (m *LifTxStats) String() string            { return proto.CompactTextString(m) }
func (*LifTxStats) ProtoMessage()               {}
func (*LifTxStats) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{22} }

func (m *LifTxStats) GetFramesOk() uint64 {
	if m != nil {
		return m.FramesOk
	}
	return 0
}

func (m *LifTxStats) GetUnicastFramesOk() uint64 {
	if m != nil {
		return m.UnicastFramesOk
	}
	return 0
}

func (m *LifTxStats) GetUnicastFramesDrop() uint64 {
	if m != nil {
		return m.UnicastFramesDrop
	}
	return 0
}

func (m *LifTxStats) GetMulticastFramesOk() uint64 {
	if m != nil {
		return m.MulticastFramesOk
	}
	return 0
}

func (m *LifTxStats) GetMulticastFramesDrop() uint64 {
	if m != nil {
		return m.MulticastFramesDrop
	}
	return 0
}

func (m *LifTxStats) GetBroadcastFramesOk() uint64 {
	if m != nil {
		return m.BroadcastFramesOk
	}
	return 0
}

func (m *LifTxStats) GetBroadcastFramesDrop() uint64 {
	if m != nil {
		return m.BroadcastFramesDrop
	}
	return 0
}

func (m *LifTxStats) GetBytesOk() uint64 {
	if m != nil {
		return m.BytesOk
	}
	return 0
}

func (m *LifTxStats) GetUnicastBytesOk() uint64 {
	if m != nil {
		return m.UnicastBytesOk
	}
	return 0
}

func (m *LifTxStats) GetMulticastBytesOk() uint64 {
	if m != nil {
		return m.MulticastBytesOk
	}
	return 0
}

func (m *LifTxStats) GetBroadcastBytesOk() uint64 {
	if m != nil {
		return m.BroadcastBytesOk
	}
	return 0
}

func (m *LifTxStats) GetTso() uint64 {
	if m != nil {
		return m.Tso
	}
	return 0
}

type LifRxStats struct {
	FramesTotal         uint64        `protobuf:"varint,1,opt,name=frames_total,json=framesTotal" json:"frames_total,omitempty"`
	FramesOk            uint64        `protobuf:"varint,2,opt,name=frames_ok,json=framesOk" json:"frames_ok,omitempty"`
	UnicastFramesOk     uint64        `protobuf:"varint,3,opt,name=unicast_frames_ok,json=unicastFramesOk" json:"unicast_frames_ok,omitempty"`
	UnicastFramesDrop   uint64        `protobuf:"varint,4,opt,name=unicast_frames_drop,json=unicastFramesDrop" json:"unicast_frames_drop,omitempty"`
	MulticastFramesOk   uint64        `protobuf:"varint,5,opt,name=multicast_frames_ok,json=multicastFramesOk" json:"multicast_frames_ok,omitempty"`
	MulticastFramesDrop uint64        `protobuf:"varint,6,opt,name=multicast_frames_drop,json=multicastFramesDrop" json:"multicast_frames_drop,omitempty"`
	BroadcastFramesOk   uint64        `protobuf:"varint,7,opt,name=broadcast_frames_ok,json=broadcastFramesOk" json:"broadcast_frames_ok,omitempty"`
	BroadcastFramesDrop uint64        `protobuf:"varint,8,opt,name=broadcast_frames_drop,json=broadcastFramesDrop" json:"broadcast_frames_drop,omitempty"`
	BytesOk             uint64        `protobuf:"varint,9,opt,name=bytes_ok,json=bytesOk" json:"bytes_ok,omitempty"`
	UnicastBytesOk      uint64        `protobuf:"varint,10,opt,name=unicast_bytes_ok,json=unicastBytesOk" json:"unicast_bytes_ok,omitempty"`
	MulticastBytesOk    uint64        `protobuf:"varint,11,opt,name=multicast_bytes_ok,json=multicastBytesOk" json:"multicast_bytes_ok,omitempty"`
	BroadcastBytesOk    uint64        `protobuf:"varint,12,opt,name=broadcast_bytes_ok,json=broadcastBytesOk" json:"broadcast_bytes_ok,omitempty"`
	Drops               uint64        `protobuf:"varint,13,opt,name=drops" json:"drops,omitempty"`
	NoBufs              uint64        `protobuf:"varint,14,opt,name=no_bufs,json=noBufs" json:"no_bufs,omitempty"`
	Errors              uint64        `protobuf:"varint,15,opt,name=errors" json:"errors,omitempty"`
	Rss                 uint64        `protobuf:"varint,16,opt,name=rss" json:"rss,omitempty"`
	CrcErrors           uint64        `protobuf:"varint,17,opt,name=crc_errors,json=crcErrors" json:"crc_errors,omitempty"`
	Frames_64           uint64        `protobuf:"varint,18,opt,name=frames_64,json=frames64" json:"frames_64,omitempty"`
	Frames_127          uint64        `protobuf:"varint,19,opt,name=frames_127,json=frames127" json:"frames_127,omitempty"`
	Frames_255          uint64        `protobuf:"varint,20,opt,name=frames_255,json=frames255" json:"frames_255,omitempty"`
	Frames_511          uint64        `protobuf:"varint,21,opt,name=frames_511,json=frames511" json:"frames_511,omitempty"`
	Frames_1024         uint64        `protobuf:"varint,22,opt,name=frames_1024,json=frames1024" json:"frames_1024,omitempty"`
	Frames_1518         uint64        `protobuf:"varint,23,opt,name=frames_1518,json=frames1518" json:"frames_1518,omitempty"`
	FramesToMax         uint64        `protobuf:"varint,24,opt,name=frames_to_max,json=framesToMax" json:"frames_to_max,omitempty"`
	PolicerStats        *PolicerStats `protobuf:"bytes,25,opt,name=policer_stats,json=policerStats" json:"policer_stats,omitempty"`
}

func (m *LifRxStats) Reset()                    { *m = LifRxStats{} }
func (m *LifRxStats) String() string            { return proto.CompactTextString(m) }
func (*LifRxStats) ProtoMessage()               {}
func (*LifRxStats) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{23} }

func (m *LifRxStats) GetFramesTotal() uint64 {
	if m != nil {
		return m.FramesTotal
	}
	return 0
}

func (m *LifRxStats) GetFramesOk() uint64 {
	if m != nil {
		return m.FramesOk
	}
	return 0
}

func (m *LifRxStats) GetUnicastFramesOk() uint64 {
	if m != nil {
		return m.UnicastFramesOk
	}
	return 0
}

func (m *LifRxStats) GetUnicastFramesDrop() uint64 {
	if m != nil {
		return m.UnicastFramesDrop
	}
	return 0
}

func (m *LifRxStats) GetMulticastFramesOk() uint64 {
	if m != nil {
		return m.MulticastFramesOk
	}
	return 0
}

func (m *LifRxStats) GetMulticastFramesDrop() uint64 {
	if m != nil {
		return m.MulticastFramesDrop
	}
	return 0
}

func (m *LifRxStats) GetBroadcastFramesOk() uint64 {
	if m != nil {
		return m.BroadcastFramesOk
	}
	return 0
}

func (m *LifRxStats) GetBroadcastFramesDrop() uint64 {
	if m != nil {
		return m.BroadcastFramesDrop
	}
	return 0
}

func (m *LifRxStats) GetBytesOk() uint64 {
	if m != nil {
		return m.BytesOk
	}
	return 0
}

func (m *LifRxStats) GetUnicastBytesOk() uint64 {
	if m != nil {
		return m.UnicastBytesOk
	}
	return 0
}

func (m *LifRxStats) GetMulticastBytesOk() uint64 {
	if m != nil {
		return m.MulticastBytesOk
	}
	return 0
}

func (m *LifRxStats) GetBroadcastBytesOk() uint64 {
	if m != nil {
		return m.BroadcastBytesOk
	}
	return 0
}

func (m *LifRxStats) GetDrops() uint64 {
	if m != nil {
		return m.Drops
	}
	return 0
}

func (m *LifRxStats) GetNoBufs() uint64 {
	if m != nil {
		return m.NoBufs
	}
	return 0
}

func (m *LifRxStats) GetErrors() uint64 {
	if m != nil {
		return m.Errors
	}
	return 0
}

func (m *LifRxStats) GetRss() uint64 {
	if m != nil {
		return m.Rss
	}
	return 0
}

func (m *LifRxStats) GetCrcErrors() uint64 {
	if m != nil {
		return m.CrcErrors
	}
	return 0
}

func (m *LifRxStats) GetFrames_64() uint64 {
	if m != nil {
		return m.Frames_64
	}
	return 0
}

func (m *LifRxStats) GetFrames_127() uint64 {
	if m != nil {
		return m.Frames_127
	}
	return 0
}

func (m *LifRxStats) GetFrames_255() uint64 {
	if m != nil {
		return m.Frames_255
	}
	return 0
}

func (m *LifRxStats) GetFrames_511() uint64 {
	if m != nil {
		return m.Frames_511
	}
	return 0
}

func (m *LifRxStats) GetFrames_1024() uint64 {
	if m != nil {
		return m.Frames_1024
	}
	return 0
}

func (m *LifRxStats) GetFrames_1518() uint64 {
	if m != nil {
		return m.Frames_1518
	}
	return 0
}

func (m *LifRxStats) GetFramesToMax() uint64 {
	if m != nil {
		return m.FramesToMax
	}
	return 0
}

func (m *LifRxStats) GetPolicerStats() *PolicerStats {
	if m != nil {
		return m.PolicerStats
	}
	return nil
}

type DataLifStats struct {
	TxStats *LifTxStats `protobuf:"bytes,1,opt,name=tx_stats,json=txStats" json:"tx_stats,omitempty"`
	RxStats *LifRxStats `protobuf:"bytes,2,opt,name=rx_stats,json=rxStats" json:"rx_stats,omitempty"`
}

func (m *DataLifStats) Reset()                    { *m = DataLifStats{} }
func (m *DataLifStats) String() string            { return proto.CompactTextString(m) }
func (*DataLifStats) ProtoMessage()               {}
func (*DataLifStats) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{24} }

func (m *DataLifStats) GetTxStats() *LifTxStats {
	if m != nil {
		return m.TxStats
	}
	return nil
}

func (m *DataLifStats) GetRxStats() *LifRxStats {
	if m != nil {
		return m.RxStats
	}
	return nil
}

type CpuQueueStats struct {
	CpucbId           CpucbId `protobuf:"varint,1,opt,name=cpucb_id,json=cpucbId,enum=types.CpucbId" json:"cpucb_id,omitempty"`
	NumTxPackets      uint32  `protobuf:"fixed32,2,opt,name=num_tx_packets,json=numTxPackets" json:"num_tx_packets,omitempty"`
	NumRxPackets      uint32  `protobuf:"fixed32,3,opt,name=num_rx_packets,json=numRxPackets" json:"num_rx_packets,omitempty"`
	RxQfullDropErrors uint64  `protobuf:"varint,4,opt,name=rx_qfull_drop_errors,json=rxQfullDropErrors" json:"rx_qfull_drop_errors,omitempty"`
	TxSemFullDrops    uint64  `protobuf:"varint,5,opt,name=tx_sem_full_drops,json=txSemFullDrops" json:"tx_sem_full_drops,omitempty"`
	TxFreeRequests    uint64  `protobuf:"varint,6,opt,name=tx_free_requests,json=txFreeRequests" json:"tx_free_requests,omitempty"`
	RxSemFullDrops    uint64  `protobuf:"varint,7,opt,name=rx_sem_full_drops,json=rxSemFullDrops" json:"rx_sem_full_drops,omitempty"`
	RxQueue0Pkts      uint64  `protobuf:"varint,8,opt,name=rx_queue0_pkts,json=rxQueue0Pkts" json:"rx_queue0_pkts,omitempty"`
	RxQueue1Pkts      uint64  `protobuf:"varint,9,opt,name=rx_queue1_pkts,json=rxQueue1Pkts" json:"rx_queue1_pkts,omitempty"`
	RxQueue2Pkts      uint64  `protobuf:"varint,10,opt,name=rx_queue2_pkts,json=rxQueue2Pkts" json:"rx_queue2_pkts,omitempty"`
}

func (m *CpuQueueStats) Reset()                    { *m = CpuQueueStats{} }
func (m *CpuQueueStats) String() string            { return proto.CompactTextString(m) }
func (*CpuQueueStats) ProtoMessage()               {}
func (*CpuQueueStats) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{25} }

func (m *CpuQueueStats) GetCpucbId() CpucbId {
	if m != nil {
		return m.CpucbId
	}
	return CpucbId_CPUCB_ID_FLOWMISS
}

func (m *CpuQueueStats) GetNumTxPackets() uint32 {
	if m != nil {
		return m.NumTxPackets
	}
	return 0
}

func (m *CpuQueueStats) GetNumRxPackets() uint32 {
	if m != nil {
		return m.NumRxPackets
	}
	return 0
}

func (m *CpuQueueStats) GetRxQfullDropErrors() uint64 {
	if m != nil {
		return m.RxQfullDropErrors
	}
	return 0
}

func (m *CpuQueueStats) GetTxSemFullDrops() uint64 {
	if m != nil {
		return m.TxSemFullDrops
	}
	return 0
}

func (m *CpuQueueStats) GetTxFreeRequests() uint64 {
	if m != nil {
		return m.TxFreeRequests
	}
	return 0
}

func (m *CpuQueueStats) GetRxSemFullDrops() uint64 {
	if m != nil {
		return m.RxSemFullDrops
	}
	return 0
}

func (m *CpuQueueStats) GetRxQueue0Pkts() uint64 {
	if m != nil {
		return m.RxQueue0Pkts
	}
	return 0
}

func (m *CpuQueueStats) GetRxQueue1Pkts() uint64 {
	if m != nil {
		return m.RxQueue1Pkts
	}
	return 0
}

func (m *CpuQueueStats) GetRxQueue2Pkts() uint64 {
	if m != nil {
		return m.RxQueue2Pkts
	}
	return 0
}

type CpuLifStats struct {
	CpuQueueStats []*CpuQueueStats `protobuf:"bytes,1,rep,name=cpu_queue_stats,json=cpuQueueStats" json:"cpu_queue_stats,omitempty"`
}

func (m *CpuLifStats) Reset()                    { *m = CpuLifStats{} }
func (m *CpuLifStats) String() string            { return proto.CompactTextString(m) }
func (*CpuLifStats) ProtoMessage()               {}
func (*CpuLifStats) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{26} }

func (m *CpuLifStats) GetCpuQueueStats() []*CpuQueueStats {
	if m != nil {
		return m.CpuQueueStats
	}
	return nil
}

// LifStats captures all the statistics of given LIF
type LifStats struct {
	// Types that are valid to be assigned to Lifs:
	//	*LifStats_DataLifStats
	//	*LifStats_CpuLifStats
	Lifs isLifStats_Lifs `protobuf_oneof:"Lifs"`
}

func (m *LifStats) Reset()                    { *m = LifStats{} }
func (m *LifStats) String() string            { return proto.CompactTextString(m) }
func (*LifStats) ProtoMessage()               {}
func (*LifStats) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{27} }

type isLifStats_Lifs interface{ isLifStats_Lifs() }

type LifStats_DataLifStats struct {
	DataLifStats *DataLifStats `protobuf:"bytes,1,opt,name=data_lif_stats,json=dataLifStats,oneof"`
}
type LifStats_CpuLifStats struct {
	CpuLifStats *CpuLifStats `protobuf:"bytes,2,opt,name=cpu_lif_stats,json=cpuLifStats,oneof"`
}

func (*LifStats_DataLifStats) isLifStats_Lifs() {}
func (*LifStats_CpuLifStats) isLifStats_Lifs()  {}

func (m *LifStats) GetLifs() isLifStats_Lifs {
	if m != nil {
		return m.Lifs
	}
	return nil
}

func (m *LifStats) GetDataLifStats() *DataLifStats {
	if x, ok := m.GetLifs().(*LifStats_DataLifStats); ok {
		return x.DataLifStats
	}
	return nil
}

func (m *LifStats) GetCpuLifStats() *CpuLifStats {
	if x, ok := m.GetLifs().(*LifStats_CpuLifStats); ok {
		return x.CpuLifStats
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LifStats) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LifStats_OneofMarshaler, _LifStats_OneofUnmarshaler, _LifStats_OneofSizer, []interface{}{
		(*LifStats_DataLifStats)(nil),
		(*LifStats_CpuLifStats)(nil),
	}
}

func _LifStats_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LifStats)
	// Lifs
	switch x := m.Lifs.(type) {
	case *LifStats_DataLifStats:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DataLifStats); err != nil {
			return err
		}
	case *LifStats_CpuLifStats:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CpuLifStats); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LifStats.Lifs has unexpected type %T", x)
	}
	return nil
}

func _LifStats_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LifStats)
	switch tag {
	case 1: // Lifs.data_lif_stats
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataLifStats)
		err := b.DecodeMessage(msg)
		m.Lifs = &LifStats_DataLifStats{msg}
		return true, err
	case 2: // Lifs.cpu_lif_stats
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CpuLifStats)
		err := b.DecodeMessage(msg)
		m.Lifs = &LifStats_CpuLifStats{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LifStats_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LifStats)
	// Lifs
	switch x := m.Lifs.(type) {
	case *LifStats_DataLifStats:
		s := proto.Size(x.DataLifStats)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LifStats_CpuLifStats:
		s := proto.Size(x.CpuLifStats)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// LifGetRequest is used to get information about a LIF
type LifGetRequest struct {
	// key_or_handle  is lif's unique identifier for retrieval
	KeyOrHandle *LifKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *LifGetRequest) Reset()                    { *m = LifGetRequest{} }
func (m *LifGetRequest) String() string            { return proto.CompactTextString(m) }
func (*LifGetRequest) ProtoMessage()               {}
func (*LifGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{28} }

func (m *LifGetRequest) GetKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

type LifGetRequestMsg struct {
	Request []*LifGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LifGetRequestMsg) Reset()                    { *m = LifGetRequestMsg{} }
func (m *LifGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LifGetRequestMsg) ProtoMessage()               {}
func (*LifGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{29} }

func (m *LifGetRequestMsg) GetRequest() []*LifGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// LifGetResponse captures all the information about a LIF
type LifGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *LifSpec     `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *LifStatus   `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *LifStats    `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
	Qstate    []*LifQState `protobuf:"bytes,5,rep,name=qstate" json:"qstate,omitempty"`
}

func (m *LifGetResponse) Reset()                    { *m = LifGetResponse{} }
func (m *LifGetResponse) String() string            { return proto.CompactTextString(m) }
func (*LifGetResponse) ProtoMessage()               {}
func (*LifGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{30} }

func (m *LifGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *LifGetResponse) GetSpec() *LifSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *LifGetResponse) GetStatus() *LifStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *LifGetResponse) GetStats() *LifStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *LifGetResponse) GetQstate() []*LifQState {
	if m != nil {
		return m.Qstate
	}
	return nil
}

// LifGetResponseMsg is response to LifGetRequestMsg
type LifGetResponseMsg struct {
	Response []*LifGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LifGetResponseMsg) Reset()                    { *m = LifGetResponseMsg{} }
func (m *LifGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LifGetResponseMsg) ProtoMessage()               {}
func (*LifGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{31} }

func (m *LifGetResponseMsg) GetResponse() []*LifGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// LifRssConfig is used to set Lif's RSS configuration
type LifRssSpec struct {
	Type  uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Key   []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Indir []byte `protobuf:"bytes,3,opt,name=indir,proto3" json:"indir,omitempty"`
}

func (m *LifRssSpec) Reset()                    { *m = LifRssSpec{} }
func (m *LifRssSpec) String() string            { return proto.CompactTextString(m) }
func (*LifRssSpec) ProtoMessage()               {}
func (*LifRssSpec) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{32} }

func (m *LifRssSpec) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *LifRssSpec) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *LifRssSpec) GetIndir() []byte {
	if m != nil {
		return m.Indir
	}
	return nil
}

type EnicInfo struct {
	L2SegmentKeyHandle *L2SegmentKeyHandle `protobuf:"bytes,1,opt,name=l2segment_key_handle,json=l2segmentKeyHandle" json:"l2segment_key_handle,omitempty"`
	MacAddress         uint64              `protobuf:"fixed64,2,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	EncapVlanId        uint32              `protobuf:"varint,3,opt,name=encap_vlan_id,json=encapVlanId" json:"encap_vlan_id,omitempty"`
}

func (m *EnicInfo) Reset()                    { *m = EnicInfo{} }
func (m *EnicInfo) String() string            { return proto.CompactTextString(m) }
func (*EnicInfo) ProtoMessage()               {}
func (*EnicInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{33} }

func (m *EnicInfo) GetL2SegmentKeyHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.L2SegmentKeyHandle
	}
	return nil
}

func (m *EnicInfo) GetMacAddress() uint64 {
	if m != nil {
		return m.MacAddress
	}
	return 0
}

func (m *EnicInfo) GetEncapVlanId() uint32 {
	if m != nil {
		return m.EncapVlanId
	}
	return 0
}

type EnicClassicInfo struct {
	L2SegmentKeyHandle []*L2SegmentKeyHandle `protobuf:"bytes,1,rep,name=l2segment_key_handle,json=l2segmentKeyHandle" json:"l2segment_key_handle,omitempty"`
	NativeL2SegmentId  uint64                `protobuf:"varint,2,opt,name=native_l2segment_id,json=nativeL2segmentId" json:"native_l2segment_id,omitempty"`
}

func (m *EnicClassicInfo) Reset()                    { *m = EnicClassicInfo{} }
func (m *EnicClassicInfo) String() string            { return proto.CompactTextString(m) }
func (*EnicClassicInfo) ProtoMessage()               {}
func (*EnicClassicInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{34} }

func (m *EnicClassicInfo) GetL2SegmentKeyHandle() []*L2SegmentKeyHandle {
	if m != nil {
		return m.L2SegmentKeyHandle
	}
	return nil
}

func (m *EnicClassicInfo) GetNativeL2SegmentId() uint64 {
	if m != nil {
		return m.NativeL2SegmentId
	}
	return 0
}

// mandatory attributes expected if interface type is IF_TYPE_ENIC
type IfEnicInfo struct {
	EnicType                IfEnicType          `protobuf:"varint,1,opt,name=enic_type,json=enicType,enum=intf.IfEnicType" json:"enic_type,omitempty"`
	LifKeyOrHandle          *LifKeyHandle       `protobuf:"bytes,2,opt,name=lif_key_or_handle,json=lifKeyOrHandle" json:"lif_key_or_handle,omitempty"`
	PinnedUplinkIfKeyHandle *InterfaceKeyHandle `protobuf:"bytes,3,opt,name=pinned_uplink_if_key_handle,json=pinnedUplinkIfKeyHandle" json:"pinned_uplink_if_key_handle,omitempty"`
	// Types that are valid to be assigned to EnicTypeInfo:
	//	*IfEnicInfo_EnicInfo
	//	*IfEnicInfo_ClassicEnicInfo
	EnicTypeInfo isIfEnicInfo_EnicTypeInfo `protobuf_oneof:"enic_type_info"`
}

func (m *IfEnicInfo) Reset()                    { *m = IfEnicInfo{} }
func (m *IfEnicInfo) String() string            { return proto.CompactTextString(m) }
func (*IfEnicInfo) ProtoMessage()               {}
func (*IfEnicInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{35} }

type isIfEnicInfo_EnicTypeInfo interface{ isIfEnicInfo_EnicTypeInfo() }

type IfEnicInfo_EnicInfo struct {
	EnicInfo *EnicInfo `protobuf:"bytes,4,opt,name=enic_info,json=enicInfo,oneof"`
}
type IfEnicInfo_ClassicEnicInfo struct {
	ClassicEnicInfo *EnicClassicInfo `protobuf:"bytes,5,opt,name=classic_enic_info,json=classicEnicInfo,oneof"`
}

func (*IfEnicInfo_EnicInfo) isIfEnicInfo_EnicTypeInfo()        {}
func (*IfEnicInfo_ClassicEnicInfo) isIfEnicInfo_EnicTypeInfo() {}

func (m *IfEnicInfo) GetEnicTypeInfo() isIfEnicInfo_EnicTypeInfo {
	if m != nil {
		return m.EnicTypeInfo
	}
	return nil
}

func (m *IfEnicInfo) GetEnicType() IfEnicType {
	if m != nil {
		return m.EnicType
	}
	return IfEnicType_IF_ENIC_TYPE_NONE
}

func (m *IfEnicInfo) GetLifKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.LifKeyOrHandle
	}
	return nil
}

func (m *IfEnicInfo) GetPinnedUplinkIfKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.PinnedUplinkIfKeyHandle
	}
	return nil
}

func (m *IfEnicInfo) GetEnicInfo() *EnicInfo {
	if x, ok := m.GetEnicTypeInfo().(*IfEnicInfo_EnicInfo); ok {
		return x.EnicInfo
	}
	return nil
}

func (m *IfEnicInfo) GetClassicEnicInfo() *EnicClassicInfo {
	if x, ok := m.GetEnicTypeInfo().(*IfEnicInfo_ClassicEnicInfo); ok {
		return x.ClassicEnicInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IfEnicInfo) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IfEnicInfo_OneofMarshaler, _IfEnicInfo_OneofUnmarshaler, _IfEnicInfo_OneofSizer, []interface{}{
		(*IfEnicInfo_EnicInfo)(nil),
		(*IfEnicInfo_ClassicEnicInfo)(nil),
	}
}

func _IfEnicInfo_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IfEnicInfo)
	// enic_type_info
	switch x := m.EnicTypeInfo.(type) {
	case *IfEnicInfo_EnicInfo:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnicInfo); err != nil {
			return err
		}
	case *IfEnicInfo_ClassicEnicInfo:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClassicEnicInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IfEnicInfo.EnicTypeInfo has unexpected type %T", x)
	}
	return nil
}

func _IfEnicInfo_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IfEnicInfo)
	switch tag {
	case 4: // enic_type_info.enic_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EnicInfo)
		err := b.DecodeMessage(msg)
		m.EnicTypeInfo = &IfEnicInfo_EnicInfo{msg}
		return true, err
	case 5: // enic_type_info.classic_enic_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EnicClassicInfo)
		err := b.DecodeMessage(msg)
		m.EnicTypeInfo = &IfEnicInfo_ClassicEnicInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IfEnicInfo_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IfEnicInfo)
	// enic_type_info
	switch x := m.EnicTypeInfo.(type) {
	case *IfEnicInfo_EnicInfo:
		s := proto.Size(x.EnicInfo)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IfEnicInfo_ClassicEnicInfo:
		s := proto.Size(x.ClassicEnicInfo)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// mandatory attributes expected if interface type is IF_TYPE_UPLINK
type IfUplinkInfo struct {
	PortNum           uint32 `protobuf:"varint,1,opt,name=port_num,json=portNum" json:"port_num,omitempty"`
	NativeL2SegmentId uint64 `protobuf:"varint,2,opt,name=native_l2segment_id,json=nativeL2segmentId" json:"native_l2segment_id,omitempty"`
	IsOobManagement   bool   `protobuf:"varint,3,opt,name=is_oob_management,json=isOobManagement" json:"is_oob_management,omitempty"`
}

func (m *IfUplinkInfo) Reset()                    { *m = IfUplinkInfo{} }
func (m *IfUplinkInfo) String() string            { return proto.CompactTextString(m) }
func (*IfUplinkInfo) ProtoMessage()               {}
func (*IfUplinkInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{36} }

func (m *IfUplinkInfo) GetPortNum() uint32 {
	if m != nil {
		return m.PortNum
	}
	return 0
}

func (m *IfUplinkInfo) GetNativeL2SegmentId() uint64 {
	if m != nil {
		return m.NativeL2SegmentId
	}
	return 0
}

func (m *IfUplinkInfo) GetIsOobManagement() bool {
	if m != nil {
		return m.IsOobManagement
	}
	return false
}

type IfUplinkPCInfo struct {
	// mandatory attributes expected if interface type is IF_TYPE_UPLINK_PC
	NativeL2SegmentId uint64                `protobuf:"varint,1,opt,name=native_l2segment_id,json=nativeL2segmentId" json:"native_l2segment_id,omitempty"`
	MemberIfKeyHandle []*InterfaceKeyHandle `protobuf:"bytes,2,rep,name=member_if_key_handle,json=memberIfKeyHandle" json:"member_if_key_handle,omitempty"`
}

func (m *IfUplinkPCInfo) Reset()                    { *m = IfUplinkPCInfo{} }
func (m *IfUplinkPCInfo) String() string            { return proto.CompactTextString(m) }
func (*IfUplinkPCInfo) ProtoMessage()               {}
func (*IfUplinkPCInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{37} }

func (m *IfUplinkPCInfo) GetNativeL2SegmentId() uint64 {
	if m != nil {
		return m.NativeL2SegmentId
	}
	return 0
}

func (m *IfUplinkPCInfo) GetMemberIfKeyHandle() []*InterfaceKeyHandle {
	if m != nil {
		return m.MemberIfKeyHandle
	}
	return nil
}

type IfTunnelVxlanInfo struct {
	LocalTep  *IPAddress `protobuf:"bytes,1,opt,name=local_tep,json=localTep" json:"local_tep,omitempty"`
	RemoteTep *IPAddress `protobuf:"bytes,2,opt,name=remote_tep,json=remoteTep" json:"remote_tep,omitempty"`
}

func (m *IfTunnelVxlanInfo) Reset()                    { *m = IfTunnelVxlanInfo{} }
func (m *IfTunnelVxlanInfo) String() string            { return proto.CompactTextString(m) }
func (*IfTunnelVxlanInfo) ProtoMessage()               {}
func (*IfTunnelVxlanInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{38} }

func (m *IfTunnelVxlanInfo) GetLocalTep() *IPAddress {
	if m != nil {
		return m.LocalTep
	}
	return nil
}

func (m *IfTunnelVxlanInfo) GetRemoteTep() *IPAddress {
	if m != nil {
		return m.RemoteTep
	}
	return nil
}

type IfTunnelGREInfo struct {
	Source      *IPAddress `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Destination *IPAddress `protobuf:"bytes,2,opt,name=destination" json:"destination,omitempty"`
	Mtu         uint32     `protobuf:"varint,3,opt,name=mtu" json:"mtu,omitempty"`
	Ttl         uint32     `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *IfTunnelGREInfo) Reset()                    { *m = IfTunnelGREInfo{} }
func (m *IfTunnelGREInfo) String() string            { return proto.CompactTextString(m) }
func (*IfTunnelGREInfo) ProtoMessage()               {}
func (*IfTunnelGREInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{39} }

func (m *IfTunnelGREInfo) GetSource() *IPAddress {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *IfTunnelGREInfo) GetDestination() *IPAddress {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *IfTunnelGREInfo) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *IfTunnelGREInfo) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type IfTunnelInfo struct {
	EncapType IfTunnelEncapType `protobuf:"varint,1,opt,name=encap_type,json=encapType,enum=intf.IfTunnelEncapType" json:"encap_type,omitempty"`
	// Types that are valid to be assigned to EncapInfo:
	//	*IfTunnelInfo_VxlanInfo
	//	*IfTunnelInfo_GreInfo
	EncapInfo    isIfTunnelInfo_EncapInfo `protobuf_oneof:"encap_info"`
	VrfKeyHandle *VrfKeyHandle            `protobuf:"bytes,4,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
}

func (m *IfTunnelInfo) Reset()                    { *m = IfTunnelInfo{} }
func (m *IfTunnelInfo) String() string            { return proto.CompactTextString(m) }
func (*IfTunnelInfo) ProtoMessage()               {}
func (*IfTunnelInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{40} }

type isIfTunnelInfo_EncapInfo interface{ isIfTunnelInfo_EncapInfo() }

type IfTunnelInfo_VxlanInfo struct {
	VxlanInfo *IfTunnelVxlanInfo `protobuf:"bytes,2,opt,name=vxlan_info,json=vxlanInfo,oneof"`
}
type IfTunnelInfo_GreInfo struct {
	GreInfo *IfTunnelGREInfo `protobuf:"bytes,3,opt,name=gre_info,json=greInfo,oneof"`
}

func (*IfTunnelInfo_VxlanInfo) isIfTunnelInfo_EncapInfo() {}
func (*IfTunnelInfo_GreInfo) isIfTunnelInfo_EncapInfo()   {}

func (m *IfTunnelInfo) GetEncapInfo() isIfTunnelInfo_EncapInfo {
	if m != nil {
		return m.EncapInfo
	}
	return nil
}

func (m *IfTunnelInfo) GetEncapType() IfTunnelEncapType {
	if m != nil {
		return m.EncapType
	}
	return IfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_NONE
}

func (m *IfTunnelInfo) GetVxlanInfo() *IfTunnelVxlanInfo {
	if x, ok := m.GetEncapInfo().(*IfTunnelInfo_VxlanInfo); ok {
		return x.VxlanInfo
	}
	return nil
}

func (m *IfTunnelInfo) GetGreInfo() *IfTunnelGREInfo {
	if x, ok := m.GetEncapInfo().(*IfTunnelInfo_GreInfo); ok {
		return x.GreInfo
	}
	return nil
}

func (m *IfTunnelInfo) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IfTunnelInfo) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IfTunnelInfo_OneofMarshaler, _IfTunnelInfo_OneofUnmarshaler, _IfTunnelInfo_OneofSizer, []interface{}{
		(*IfTunnelInfo_VxlanInfo)(nil),
		(*IfTunnelInfo_GreInfo)(nil),
	}
}

func _IfTunnelInfo_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IfTunnelInfo)
	// encap_info
	switch x := m.EncapInfo.(type) {
	case *IfTunnelInfo_VxlanInfo:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VxlanInfo); err != nil {
			return err
		}
	case *IfTunnelInfo_GreInfo:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GreInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IfTunnelInfo.EncapInfo has unexpected type %T", x)
	}
	return nil
}

func _IfTunnelInfo_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IfTunnelInfo)
	switch tag {
	case 2: // encap_info.vxlan_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfTunnelVxlanInfo)
		err := b.DecodeMessage(msg)
		m.EncapInfo = &IfTunnelInfo_VxlanInfo{msg}
		return true, err
	case 3: // encap_info.gre_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfTunnelGREInfo)
		err := b.DecodeMessage(msg)
		m.EncapInfo = &IfTunnelInfo_GreInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IfTunnelInfo_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IfTunnelInfo)
	// encap_info
	switch x := m.EncapInfo.(type) {
	case *IfTunnelInfo_VxlanInfo:
		s := proto.Size(x.VxlanInfo)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IfTunnelInfo_GreInfo:
		s := proto.Size(x.GreInfo)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// attributes for CPU If
type IfCPUInfo struct {
	LifKeyOrHandle *LifKeyHandle `protobuf:"bytes,2,opt,name=lif_key_or_handle,json=lifKeyOrHandle" json:"lif_key_or_handle,omitempty"`
}

func (m *IfCPUInfo) Reset()                    { *m = IfCPUInfo{} }
func (m *IfCPUInfo) String() string            { return proto.CompactTextString(m) }
func (*IfCPUInfo) ProtoMessage()               {}
func (*IfCPUInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{41} }

func (m *IfCPUInfo) GetLifKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.LifKeyOrHandle
	}
	return nil
}

// attributes for App Redirect If
type IfAppRedirInfo struct {
	LifKeyOrHandle *LifKeyHandle `protobuf:"bytes,2,opt,name=lif_key_or_handle,json=lifKeyOrHandle" json:"lif_key_or_handle,omitempty"`
}

func (m *IfAppRedirInfo) Reset()                    { *m = IfAppRedirInfo{} }
func (m *IfAppRedirInfo) String() string            { return proto.CompactTextString(m) }
func (*IfAppRedirInfo) ProtoMessage()               {}
func (*IfAppRedirInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{42} }

func (m *IfAppRedirInfo) GetLifKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.LifKeyOrHandle
	}
	return nil
}

// InterfaceSpec is used to add or update of an interface
type InterfaceSpec struct {
	Meta        *delphi.ObjectMeta  `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Type        IfType              `protobuf:"varint,3,opt,name=type,enum=intf.IfType" json:"type,omitempty"`
	AdminStatus IfStatus            `protobuf:"varint,4,opt,name=admin_status,json=adminStatus,enum=intf.IfStatus" json:"admin_status,omitempty"`
	// Types that are valid to be assigned to IfInfo:
	//	*InterfaceSpec_IfEnicInfo
	//	*InterfaceSpec_IfUplinkInfo
	//	*InterfaceSpec_IfUplinkPcInfo
	//	*InterfaceSpec_IfTunnelInfo
	//	*InterfaceSpec_IfCpuInfo
	//	*InterfaceSpec_IfAppRedirInfo
	IfInfo isInterfaceSpec_IfInfo `protobuf_oneof:"if_info"`
}

func (m *InterfaceSpec) GetDelphiMessage() proto.Message {
	return m
}

func (m *InterfaceSpec) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *InterfaceSpec) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *InterfaceSpec) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *InterfaceSpec) GetDelphiKind() string {
	return "InterfaceSpec"
}

func (m *InterfaceSpec) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *InterfaceSpec) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*InterfaceSpec)
	return obj
}

func InterfaceSpecMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("InterfaceSpec", mode)
}

func InterfaceSpecMountKey(client clientApi.Client, key *InterfaceKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("InterfaceSpec", key.String(), mode)
}

func GetInterfaceSpec(client clientApi.Client, key *InterfaceKeyHandle) *InterfaceSpec {
	o := client.GetObject("InterfaceSpec", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*InterfaceSpec)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func InterfaceSpecFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg InterfaceSpec
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func InterfaceSpecWatch(client clientApi.Client, reactor InterfaceSpecReactor) {
	client.WatchKind("InterfaceSpec", reactor)
}
func InterfaceSpecList(client clientApi.Client) []*InterfaceSpec {
	bobjs := client.List("InterfaceSpec")
	objs := make([]*InterfaceSpec, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*InterfaceSpec)
		objs = append(objs, obj)
	}
	return objs
}
func (m *InterfaceSpec) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(InterfaceSpecReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnInterfaceSpecCreate(m)
			} else {
				oldObj, ok := old.(*InterfaceSpec)
				if ok == false {
					panic("Not an InterfaceSpec object")
				}
				rctr.OnInterfaceSpecUpdate(oldObj, m)
			}
		} else {
			rctr.OnInterfaceSpecDelete(m)
		}
	}
}

type InterfaceSpecReactor interface {
	OnInterfaceSpecCreate(obj *InterfaceSpec)
	OnInterfaceSpecUpdate(old *InterfaceSpec, obj *InterfaceSpec)
	OnInterfaceSpecDelete(obj *InterfaceSpec)
}

func (m *InterfaceSpec) Reset()                    { *m = InterfaceSpec{} }
func (m *InterfaceSpec) String() string            { return proto.CompactTextString(m) }
func (*InterfaceSpec) ProtoMessage()               {}
func (*InterfaceSpec) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{43} }

type isInterfaceSpec_IfInfo interface{ isInterfaceSpec_IfInfo() }

type InterfaceSpec_IfEnicInfo struct {
	IfEnicInfo *IfEnicInfo `protobuf:"bytes,5,opt,name=if_enic_info,json=ifEnicInfo,oneof"`
}
type InterfaceSpec_IfUplinkInfo struct {
	IfUplinkInfo *IfUplinkInfo `protobuf:"bytes,6,opt,name=if_uplink_info,json=ifUplinkInfo,oneof"`
}
type InterfaceSpec_IfUplinkPcInfo struct {
	IfUplinkPcInfo *IfUplinkPCInfo `protobuf:"bytes,7,opt,name=if_uplink_pc_info,json=ifUplinkPcInfo,oneof"`
}
type InterfaceSpec_IfTunnelInfo struct {
	IfTunnelInfo *IfTunnelInfo `protobuf:"bytes,8,opt,name=if_tunnel_info,json=ifTunnelInfo,oneof"`
}
type InterfaceSpec_IfCpuInfo struct {
	IfCpuInfo *IfCPUInfo `protobuf:"bytes,9,opt,name=if_cpu_info,json=ifCpuInfo,oneof"`
}
type InterfaceSpec_IfAppRedirInfo struct {
	IfAppRedirInfo *IfAppRedirInfo `protobuf:"bytes,10,opt,name=if_app_redir_info,json=ifAppRedirInfo,oneof"`
}

func (*InterfaceSpec_IfEnicInfo) isInterfaceSpec_IfInfo()     {}
func (*InterfaceSpec_IfUplinkInfo) isInterfaceSpec_IfInfo()   {}
func (*InterfaceSpec_IfUplinkPcInfo) isInterfaceSpec_IfInfo() {}
func (*InterfaceSpec_IfTunnelInfo) isInterfaceSpec_IfInfo()   {}
func (*InterfaceSpec_IfCpuInfo) isInterfaceSpec_IfInfo()      {}
func (*InterfaceSpec_IfAppRedirInfo) isInterfaceSpec_IfInfo() {}

func (m *InterfaceSpec) GetIfInfo() isInterfaceSpec_IfInfo {
	if m != nil {
		return m.IfInfo
	}
	return nil
}

func (m *InterfaceSpec) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *InterfaceSpec) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *InterfaceSpec) GetType() IfType {
	if m != nil {
		return m.Type
	}
	return IfType_IF_TYPE_NONE
}

func (m *InterfaceSpec) GetAdminStatus() IfStatus {
	if m != nil {
		return m.AdminStatus
	}
	return IfStatus_IF_STATUS_NONE
}

func (m *InterfaceSpec) GetIfEnicInfo() *IfEnicInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfEnicInfo); ok {
		return x.IfEnicInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfUplinkInfo() *IfUplinkInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfUplinkInfo); ok {
		return x.IfUplinkInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfUplinkPcInfo() *IfUplinkPCInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfUplinkPcInfo); ok {
		return x.IfUplinkPcInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfTunnelInfo() *IfTunnelInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfTunnelInfo); ok {
		return x.IfTunnelInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfCpuInfo() *IfCPUInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfCpuInfo); ok {
		return x.IfCpuInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfAppRedirInfo() *IfAppRedirInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfAppRedirInfo); ok {
		return x.IfAppRedirInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InterfaceSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InterfaceSpec_OneofMarshaler, _InterfaceSpec_OneofUnmarshaler, _InterfaceSpec_OneofSizer, []interface{}{
		(*InterfaceSpec_IfEnicInfo)(nil),
		(*InterfaceSpec_IfUplinkInfo)(nil),
		(*InterfaceSpec_IfUplinkPcInfo)(nil),
		(*InterfaceSpec_IfTunnelInfo)(nil),
		(*InterfaceSpec_IfCpuInfo)(nil),
		(*InterfaceSpec_IfAppRedirInfo)(nil),
	}
}

func _InterfaceSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InterfaceSpec)
	// if_info
	switch x := m.IfInfo.(type) {
	case *InterfaceSpec_IfEnicInfo:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfEnicInfo); err != nil {
			return err
		}
	case *InterfaceSpec_IfUplinkInfo:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfUplinkInfo); err != nil {
			return err
		}
	case *InterfaceSpec_IfUplinkPcInfo:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfUplinkPcInfo); err != nil {
			return err
		}
	case *InterfaceSpec_IfTunnelInfo:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfTunnelInfo); err != nil {
			return err
		}
	case *InterfaceSpec_IfCpuInfo:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfCpuInfo); err != nil {
			return err
		}
	case *InterfaceSpec_IfAppRedirInfo:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfAppRedirInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InterfaceSpec.IfInfo has unexpected type %T", x)
	}
	return nil
}

func _InterfaceSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InterfaceSpec)
	switch tag {
	case 5: // if_info.if_enic_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfEnicInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfEnicInfo{msg}
		return true, err
	case 6: // if_info.if_uplink_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfUplinkInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfUplinkInfo{msg}
		return true, err
	case 7: // if_info.if_uplink_pc_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfUplinkPCInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfUplinkPcInfo{msg}
		return true, err
	case 8: // if_info.if_tunnel_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfTunnelInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfTunnelInfo{msg}
		return true, err
	case 9: // if_info.if_cpu_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfCPUInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfCpuInfo{msg}
		return true, err
	case 10: // if_info.if_app_redir_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfAppRedirInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfAppRedirInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InterfaceSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InterfaceSpec)
	// if_info
	switch x := m.IfInfo.(type) {
	case *InterfaceSpec_IfEnicInfo:
		s := proto.Size(x.IfEnicInfo)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceSpec_IfUplinkInfo:
		s := proto.Size(x.IfUplinkInfo)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceSpec_IfUplinkPcInfo:
		s := proto.Size(x.IfUplinkPcInfo)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceSpec_IfTunnelInfo:
		s := proto.Size(x.IfTunnelInfo)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceSpec_IfCpuInfo:
		s := proto.Size(x.IfCpuInfo)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceSpec_IfAppRedirInfo:
		s := proto.Size(x.IfAppRedirInfo)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// InterfaceRequestMsg is batched request message that is used to do
// create/update of interface(s)
type InterfaceRequestMsg struct {
	Request []*InterfaceSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *InterfaceRequestMsg) Reset()                    { *m = InterfaceRequestMsg{} }
func (m *InterfaceRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceRequestMsg) ProtoMessage()               {}
func (*InterfaceRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{44} }

func (m *InterfaceRequestMsg) GetRequest() []*InterfaceSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// Uplink/Uplink PC's response
type UplinkResponseInfo struct {
	UplinkLportId uint32 `protobuf:"varint,1,opt,name=uplink_lport_id,json=uplinkLportId" json:"uplink_lport_id,omitempty"`
	HwLifId       uint32 `protobuf:"varint,2,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
	UplinkIdx     uint32 `protobuf:"varint,3,opt,name=uplink_idx,json=uplinkIdx" json:"uplink_idx,omitempty"`
	NumL2Segs     uint32 `protobuf:"varint,4,opt,name=num_l2segs,json=numL2segs" json:"num_l2segs,omitempty"`
	HwPortNum     uint32 `protobuf:"varint,5,opt,name=hw_port_num,json=hwPortNum" json:"hw_port_num,omitempty"`
}

func (m *UplinkResponseInfo) Reset()                    { *m = UplinkResponseInfo{} }
func (m *UplinkResponseInfo) String() string            { return proto.CompactTextString(m) }
func (*UplinkResponseInfo) ProtoMessage()               {}
func (*UplinkResponseInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{45} }

func (m *UplinkResponseInfo) GetUplinkLportId() uint32 {
	if m != nil {
		return m.UplinkLportId
	}
	return 0
}

func (m *UplinkResponseInfo) GetHwLifId() uint32 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *UplinkResponseInfo) GetUplinkIdx() uint32 {
	if m != nil {
		return m.UplinkIdx
	}
	return 0
}

func (m *UplinkResponseInfo) GetNumL2Segs() uint32 {
	if m != nil {
		return m.NumL2Segs
	}
	return 0
}

func (m *UplinkResponseInfo) GetHwPortNum() uint32 {
	if m != nil {
		return m.HwPortNum
	}
	return 0
}

// Enic <-> L2seg membership info
type EnicL2SegInfo struct {
	L2SegmentKeyOrHandle *L2SegmentKeyHandle `protobuf:"bytes,1,opt,name=l2segment_key_or_handle,json=l2segmentKeyOrHandle" json:"l2segment_key_or_handle,omitempty"`
	InpPropIdx           uint32              `protobuf:"varint,2,opt,name=inp_prop_idx,json=inpPropIdx" json:"inp_prop_idx,omitempty"`
}

func (m *EnicL2SegInfo) Reset()                    { *m = EnicL2SegInfo{} }
func (m *EnicL2SegInfo) String() string            { return proto.CompactTextString(m) }
func (*EnicL2SegInfo) ProtoMessage()               {}
func (*EnicL2SegInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{46} }

func (m *EnicL2SegInfo) GetL2SegmentKeyOrHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.L2SegmentKeyOrHandle
	}
	return nil
}

func (m *EnicL2SegInfo) GetInpPropIdx() uint32 {
	if m != nil {
		return m.InpPropIdx
	}
	return 0
}

type SmartEnicInfo struct {
	InpPropMacVlanIdxHost uint32 `protobuf:"varint,1,opt,name=inp_prop_mac_vlan_idx_host,json=inpPropMacVlanIdxHost" json:"inp_prop_mac_vlan_idx_host,omitempty"`
	InpPropMacVlanIdxNet  uint32 `protobuf:"varint,2,opt,name=inp_prop_mac_vlan_idx_net,json=inpPropMacVlanIdxNet" json:"inp_prop_mac_vlan_idx_net,omitempty"`
}

func (m *SmartEnicInfo) Reset()                    { *m = SmartEnicInfo{} }
func (m *SmartEnicInfo) String() string            { return proto.CompactTextString(m) }
func (*SmartEnicInfo) ProtoMessage()               {}
func (*SmartEnicInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{47} }

func (m *SmartEnicInfo) GetInpPropMacVlanIdxHost() uint32 {
	if m != nil {
		return m.InpPropMacVlanIdxHost
	}
	return 0
}

func (m *SmartEnicInfo) GetInpPropMacVlanIdxNet() uint32 {
	if m != nil {
		return m.InpPropMacVlanIdxNet
	}
	return 0
}

type ClassicEnicInfo struct {
	InpPropNatL2SegClassic uint32           `protobuf:"varint,1,opt,name=inp_prop_nat_l2seg_classic,json=inpPropNatL2segClassic" json:"inp_prop_nat_l2seg_classic,omitempty"`
	MembershipInfo         []*EnicL2SegInfo `protobuf:"bytes,2,rep,name=membership_info,json=membershipInfo" json:"membership_info,omitempty"`
}

func (m *ClassicEnicInfo) Reset()                    { *m = ClassicEnicInfo{} }
func (m *ClassicEnicInfo) String() string            { return proto.CompactTextString(m) }
func (*ClassicEnicInfo) ProtoMessage()               {}
func (*ClassicEnicInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{48} }

func (m *ClassicEnicInfo) GetInpPropNatL2SegClassic() uint32 {
	if m != nil {
		return m.InpPropNatL2SegClassic
	}
	return 0
}

func (m *ClassicEnicInfo) GetMembershipInfo() []*EnicL2SegInfo {
	if m != nil {
		return m.MembershipInfo
	}
	return nil
}

// Enic's response
type EnicResponseInfo struct {
	EnicLportId    uint32 `protobuf:"varint,1,opt,name=enic_lport_id,json=enicLportId" json:"enic_lport_id,omitempty"`
	UplinkIfHandle uint32 `protobuf:"varint,2,opt,name=uplink_if_handle,json=uplinkIfHandle" json:"uplink_if_handle,omitempty"`
	// Types that are valid to be assigned to EnicTypeInfo:
	//	*EnicResponseInfo_SmartEnicInfo
	//	*EnicResponseInfo_ClassicEnicInfo
	EnicTypeInfo isEnicResponseInfo_EnicTypeInfo `protobuf_oneof:"EnicTypeInfo"`
}

func (m *EnicResponseInfo) Reset()                    { *m = EnicResponseInfo{} }
func (m *EnicResponseInfo) String() string            { return proto.CompactTextString(m) }
func (*EnicResponseInfo) ProtoMessage()               {}
func (*EnicResponseInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{49} }

type isEnicResponseInfo_EnicTypeInfo interface{ isEnicResponseInfo_EnicTypeInfo() }

type EnicResponseInfo_SmartEnicInfo struct {
	SmartEnicInfo *SmartEnicInfo `protobuf:"bytes,3,opt,name=smart_enic_info,json=smartEnicInfo,oneof"`
}
type EnicResponseInfo_ClassicEnicInfo struct {
	ClassicEnicInfo *ClassicEnicInfo `protobuf:"bytes,4,opt,name=classic_enic_info,json=classicEnicInfo,oneof"`
}

func (*EnicResponseInfo_SmartEnicInfo) isEnicResponseInfo_EnicTypeInfo()   {}
func (*EnicResponseInfo_ClassicEnicInfo) isEnicResponseInfo_EnicTypeInfo() {}

func (m *EnicResponseInfo) GetEnicTypeInfo() isEnicResponseInfo_EnicTypeInfo {
	if m != nil {
		return m.EnicTypeInfo
	}
	return nil
}

func (m *EnicResponseInfo) GetEnicLportId() uint32 {
	if m != nil {
		return m.EnicLportId
	}
	return 0
}

func (m *EnicResponseInfo) GetUplinkIfHandle() uint32 {
	if m != nil {
		return m.UplinkIfHandle
	}
	return 0
}

func (m *EnicResponseInfo) GetSmartEnicInfo() *SmartEnicInfo {
	if x, ok := m.GetEnicTypeInfo().(*EnicResponseInfo_SmartEnicInfo); ok {
		return x.SmartEnicInfo
	}
	return nil
}

func (m *EnicResponseInfo) GetClassicEnicInfo() *ClassicEnicInfo {
	if x, ok := m.GetEnicTypeInfo().(*EnicResponseInfo_ClassicEnicInfo); ok {
		return x.ClassicEnicInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EnicResponseInfo) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EnicResponseInfo_OneofMarshaler, _EnicResponseInfo_OneofUnmarshaler, _EnicResponseInfo_OneofSizer, []interface{}{
		(*EnicResponseInfo_SmartEnicInfo)(nil),
		(*EnicResponseInfo_ClassicEnicInfo)(nil),
	}
}

func _EnicResponseInfo_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EnicResponseInfo)
	// EnicTypeInfo
	switch x := m.EnicTypeInfo.(type) {
	case *EnicResponseInfo_SmartEnicInfo:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SmartEnicInfo); err != nil {
			return err
		}
	case *EnicResponseInfo_ClassicEnicInfo:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClassicEnicInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EnicResponseInfo.EnicTypeInfo has unexpected type %T", x)
	}
	return nil
}

func _EnicResponseInfo_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EnicResponseInfo)
	switch tag {
	case 3: // EnicTypeInfo.smart_enic_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SmartEnicInfo)
		err := b.DecodeMessage(msg)
		m.EnicTypeInfo = &EnicResponseInfo_SmartEnicInfo{msg}
		return true, err
	case 4: // EnicTypeInfo.classic_enic_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClassicEnicInfo)
		err := b.DecodeMessage(msg)
		m.EnicTypeInfo = &EnicResponseInfo_ClassicEnicInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EnicResponseInfo_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EnicResponseInfo)
	// EnicTypeInfo
	switch x := m.EnicTypeInfo.(type) {
	case *EnicResponseInfo_SmartEnicInfo:
		s := proto.Size(x.SmartEnicInfo)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EnicResponseInfo_ClassicEnicInfo:
		s := proto.Size(x.ClassicEnicInfo)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CPU If's response
type CpuIfResponseInfo struct {
	CpuLportId uint32 `protobuf:"varint,1,opt,name=cpu_lport_id,json=cpuLportId" json:"cpu_lport_id,omitempty"`
}

func (m *CpuIfResponseInfo) Reset()                    { *m = CpuIfResponseInfo{} }
func (m *CpuIfResponseInfo) String() string            { return proto.CompactTextString(m) }
func (*CpuIfResponseInfo) ProtoMessage()               {}
func (*CpuIfResponseInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{50} }

func (m *CpuIfResponseInfo) GetCpuLportId() uint32 {
	if m != nil {
		return m.CpuLportId
	}
	return 0
}

// Tunnel If's response
type TunnelIfResponseInfo struct {
	InpMapNatIdx []uint32 `protobuf:"varint,1,rep,packed,name=inp_map_nat_idx,json=inpMapNatIdx" json:"inp_map_nat_idx,omitempty"`
	//  1. Inner IPv4
	//  2. Inner IPv6
	//  3. Inner MAC
	InpMapTnlIdx []uint32 `protobuf:"varint,2,rep,packed,name=inp_map_tnl_idx,json=inpMapTnlIdx" json:"inp_map_tnl_idx,omitempty"`
	//  1. Inner IPv4
	//  2. Inner IPv6
	//  3. Inner MAC
	TunnelRwIdx uint32 `protobuf:"varint,3,opt,name=tunnel_rw_idx,json=tunnelRwIdx" json:"tunnel_rw_idx,omitempty"`
}

func (m *TunnelIfResponseInfo) Reset()                    { *m = TunnelIfResponseInfo{} }
func (m *TunnelIfResponseInfo) String() string            { return proto.CompactTextString(m) }
func (*TunnelIfResponseInfo) ProtoMessage()               {}
func (*TunnelIfResponseInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{51} }

func (m *TunnelIfResponseInfo) GetInpMapNatIdx() []uint32 {
	if m != nil {
		return m.InpMapNatIdx
	}
	return nil
}

func (m *TunnelIfResponseInfo) GetInpMapTnlIdx() []uint32 {
	if m != nil {
		return m.InpMapTnlIdx
	}
	return nil
}

func (m *TunnelIfResponseInfo) GetTunnelRwIdx() uint32 {
	if m != nil {
		return m.TunnelRwIdx
	}
	return 0
}

// App redir if's response
type AppRedirIfInfo struct {
	LportId uint32 `protobuf:"varint,1,opt,name=lport_id,json=lportId" json:"lport_id,omitempty"`
}

func (m *AppRedirIfInfo) Reset()                    { *m = AppRedirIfInfo{} }
func (m *AppRedirIfInfo) String() string            { return proto.CompactTextString(m) }
func (*AppRedirIfInfo) ProtoMessage()               {}
func (*AppRedirIfInfo) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{52} }

func (m *AppRedirIfInfo) GetLportId() uint32 {
	if m != nil {
		return m.LportId
	}
	return 0
}

// InterfaceStatus represents the current status of the interface
type InterfaceStatus struct {
	Meta        *delphi.ObjectMeta  `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	IfStatus    IfStatus            `protobuf:"varint,3,opt,name=if_status,json=ifStatus,enum=intf.IfStatus" json:"if_status,omitempty"`
	IfHandle    uint64              `protobuf:"fixed64,4,opt,name=if_handle,json=ifHandle" json:"if_handle,omitempty"`
	// Types that are valid to be assigned to IfResponseInfo:
	//	*InterfaceStatus_UplinkInfo
	//	*InterfaceStatus_EnicInfo
	//	*InterfaceStatus_CpuInfo
	//	*InterfaceStatus_TunnelInfo
	//	*InterfaceStatus_AppRedirInfo
	IfResponseInfo isInterfaceStatus_IfResponseInfo `protobuf_oneof:"if_response_info"`
}

func (m *InterfaceStatus) GetDelphiMessage() proto.Message {
	return m
}

func (m *InterfaceStatus) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *InterfaceStatus) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *InterfaceStatus) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *InterfaceStatus) GetDelphiKind() string {
	return "InterfaceStatus"
}

func (m *InterfaceStatus) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *InterfaceStatus) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*InterfaceStatus)
	return obj
}

func InterfaceStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("InterfaceStatus", mode)
}

func InterfaceStatusMountKey(client clientApi.Client, key *InterfaceKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("InterfaceStatus", key.String(), mode)
}

func GetInterfaceStatus(client clientApi.Client, key *InterfaceKeyHandle) *InterfaceStatus {
	o := client.GetObject("InterfaceStatus", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*InterfaceStatus)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func InterfaceStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg InterfaceStatus
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func InterfaceStatusWatch(client clientApi.Client, reactor InterfaceStatusReactor) {
	client.WatchKind("InterfaceStatus", reactor)
}
func InterfaceStatusList(client clientApi.Client) []*InterfaceStatus {
	bobjs := client.List("InterfaceStatus")
	objs := make([]*InterfaceStatus, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*InterfaceStatus)
		objs = append(objs, obj)
	}
	return objs
}
func (m *InterfaceStatus) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(InterfaceStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnInterfaceStatusCreate(m)
			} else {
				oldObj, ok := old.(*InterfaceStatus)
				if ok == false {
					panic("Not an InterfaceStatus object")
				}
				rctr.OnInterfaceStatusUpdate(oldObj, m)
			}
		} else {
			rctr.OnInterfaceStatusDelete(m)
		}
	}
}

type InterfaceStatusReactor interface {
	OnInterfaceStatusCreate(obj *InterfaceStatus)
	OnInterfaceStatusUpdate(old *InterfaceStatus, obj *InterfaceStatus)
	OnInterfaceStatusDelete(obj *InterfaceStatus)
}

func (m *InterfaceStatus) Reset()                    { *m = InterfaceStatus{} }
func (m *InterfaceStatus) String() string            { return proto.CompactTextString(m) }
func (*InterfaceStatus) ProtoMessage()               {}
func (*InterfaceStatus) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{53} }

type isInterfaceStatus_IfResponseInfo interface{ isInterfaceStatus_IfResponseInfo() }

type InterfaceStatus_UplinkInfo struct {
	UplinkInfo *UplinkResponseInfo `protobuf:"bytes,5,opt,name=uplink_info,json=uplinkInfo,oneof"`
}
type InterfaceStatus_EnicInfo struct {
	EnicInfo *EnicResponseInfo `protobuf:"bytes,6,opt,name=enic_info,json=enicInfo,oneof"`
}
type InterfaceStatus_CpuInfo struct {
	CpuInfo *CpuIfResponseInfo `protobuf:"bytes,7,opt,name=cpu_info,json=cpuInfo,oneof"`
}
type InterfaceStatus_TunnelInfo struct {
	TunnelInfo *TunnelIfResponseInfo `protobuf:"bytes,8,opt,name=tunnel_info,json=tunnelInfo,oneof"`
}
type InterfaceStatus_AppRedirInfo struct {
	AppRedirInfo *AppRedirIfInfo `protobuf:"bytes,9,opt,name=app_redir_info,json=appRedirInfo,oneof"`
}

func (*InterfaceStatus_UplinkInfo) isInterfaceStatus_IfResponseInfo()   {}
func (*InterfaceStatus_EnicInfo) isInterfaceStatus_IfResponseInfo()     {}
func (*InterfaceStatus_CpuInfo) isInterfaceStatus_IfResponseInfo()      {}
func (*InterfaceStatus_TunnelInfo) isInterfaceStatus_IfResponseInfo()   {}
func (*InterfaceStatus_AppRedirInfo) isInterfaceStatus_IfResponseInfo() {}

func (m *InterfaceStatus) GetIfResponseInfo() isInterfaceStatus_IfResponseInfo {
	if m != nil {
		return m.IfResponseInfo
	}
	return nil
}

func (m *InterfaceStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *InterfaceStatus) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *InterfaceStatus) GetIfStatus() IfStatus {
	if m != nil {
		return m.IfStatus
	}
	return IfStatus_IF_STATUS_NONE
}

func (m *InterfaceStatus) GetIfHandle() uint64 {
	if m != nil {
		return m.IfHandle
	}
	return 0
}

func (m *InterfaceStatus) GetUplinkInfo() *UplinkResponseInfo {
	if x, ok := m.GetIfResponseInfo().(*InterfaceStatus_UplinkInfo); ok {
		return x.UplinkInfo
	}
	return nil
}

func (m *InterfaceStatus) GetEnicInfo() *EnicResponseInfo {
	if x, ok := m.GetIfResponseInfo().(*InterfaceStatus_EnicInfo); ok {
		return x.EnicInfo
	}
	return nil
}

func (m *InterfaceStatus) GetCpuInfo() *CpuIfResponseInfo {
	if x, ok := m.GetIfResponseInfo().(*InterfaceStatus_CpuInfo); ok {
		return x.CpuInfo
	}
	return nil
}

func (m *InterfaceStatus) GetTunnelInfo() *TunnelIfResponseInfo {
	if x, ok := m.GetIfResponseInfo().(*InterfaceStatus_TunnelInfo); ok {
		return x.TunnelInfo
	}
	return nil
}

func (m *InterfaceStatus) GetAppRedirInfo() *AppRedirIfInfo {
	if x, ok := m.GetIfResponseInfo().(*InterfaceStatus_AppRedirInfo); ok {
		return x.AppRedirInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InterfaceStatus) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InterfaceStatus_OneofMarshaler, _InterfaceStatus_OneofUnmarshaler, _InterfaceStatus_OneofSizer, []interface{}{
		(*InterfaceStatus_UplinkInfo)(nil),
		(*InterfaceStatus_EnicInfo)(nil),
		(*InterfaceStatus_CpuInfo)(nil),
		(*InterfaceStatus_TunnelInfo)(nil),
		(*InterfaceStatus_AppRedirInfo)(nil),
	}
}

func _InterfaceStatus_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InterfaceStatus)
	// if_response_info
	switch x := m.IfResponseInfo.(type) {
	case *InterfaceStatus_UplinkInfo:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UplinkInfo); err != nil {
			return err
		}
	case *InterfaceStatus_EnicInfo:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnicInfo); err != nil {
			return err
		}
	case *InterfaceStatus_CpuInfo:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CpuInfo); err != nil {
			return err
		}
	case *InterfaceStatus_TunnelInfo:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TunnelInfo); err != nil {
			return err
		}
	case *InterfaceStatus_AppRedirInfo:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AppRedirInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InterfaceStatus.IfResponseInfo has unexpected type %T", x)
	}
	return nil
}

func _InterfaceStatus_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InterfaceStatus)
	switch tag {
	case 5: // if_response_info.uplink_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UplinkResponseInfo)
		err := b.DecodeMessage(msg)
		m.IfResponseInfo = &InterfaceStatus_UplinkInfo{msg}
		return true, err
	case 6: // if_response_info.enic_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EnicResponseInfo)
		err := b.DecodeMessage(msg)
		m.IfResponseInfo = &InterfaceStatus_EnicInfo{msg}
		return true, err
	case 7: // if_response_info.cpu_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CpuIfResponseInfo)
		err := b.DecodeMessage(msg)
		m.IfResponseInfo = &InterfaceStatus_CpuInfo{msg}
		return true, err
	case 8: // if_response_info.tunnel_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TunnelIfResponseInfo)
		err := b.DecodeMessage(msg)
		m.IfResponseInfo = &InterfaceStatus_TunnelInfo{msg}
		return true, err
	case 9: // if_response_info.app_redir_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AppRedirIfInfo)
		err := b.DecodeMessage(msg)
		m.IfResponseInfo = &InterfaceStatus_AppRedirInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InterfaceStatus_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InterfaceStatus)
	// if_response_info
	switch x := m.IfResponseInfo.(type) {
	case *InterfaceStatus_UplinkInfo:
		s := proto.Size(x.UplinkInfo)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceStatus_EnicInfo:
		s := proto.Size(x.EnicInfo)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceStatus_CpuInfo:
		s := proto.Size(x.CpuInfo)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceStatus_TunnelInfo:
		s := proto.Size(x.TunnelInfo)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceStatus_AppRedirInfo:
		s := proto.Size(x.AppRedirInfo)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// InterfaceResponse is response to one InterfaceSpec
type InterfaceResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *InterfaceStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *InterfaceResponse) Reset()                    { *m = InterfaceResponse{} }
func (m *InterfaceResponse) String() string            { return proto.CompactTextString(m) }
func (*InterfaceResponse) ProtoMessage()               {}
func (*InterfaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{54} }

func (m *InterfaceResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *InterfaceResponse) GetStatus() *InterfaceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// InterfaceResponseMsg is response to InterfaceRequestMsg
type InterfaceResponseMsg struct {
	Response []*InterfaceResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *InterfaceResponseMsg) Reset()                    { *m = InterfaceResponseMsg{} }
func (m *InterfaceResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceResponseMsg) ProtoMessage()               {}
func (*InterfaceResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{55} }

func (m *InterfaceResponseMsg) GetResponse() []*InterfaceResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// InterfaceDeleteRequest is used to delete a interface object
type InterfaceDeleteRequest struct {
	KeyOrHandle *InterfaceKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *InterfaceDeleteRequest) Reset()                    { *m = InterfaceDeleteRequest{} }
func (m *InterfaceDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*InterfaceDeleteRequest) ProtoMessage()               {}
func (*InterfaceDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{56} }

func (m *InterfaceDeleteRequest) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// InterfaceDeleteRequestMsg is used to delete a batch of interfaces
type InterfaceDeleteRequestMsg struct {
	Request []*InterfaceDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *InterfaceDeleteRequestMsg) Reset()                    { *m = InterfaceDeleteRequestMsg{} }
func (m *InterfaceDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceDeleteRequestMsg) ProtoMessage()               {}
func (*InterfaceDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{57} }

func (m *InterfaceDeleteRequestMsg) GetRequest() []*InterfaceDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// InterfaceDeleteResponse is batched response to InterfaceDeleteRequest
type InterfaceDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *InterfaceDeleteResponse) Reset()                    { *m = InterfaceDeleteResponse{} }
func (m *InterfaceDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*InterfaceDeleteResponse) ProtoMessage()               {}
func (*InterfaceDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{58} }

func (m *InterfaceDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// InterfaceDeleteResponseMsg is batched response to InterfaceDeleteRequestMsg
type InterfaceDeleteResponseMsg struct {
	Response []*InterfaceDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *InterfaceDeleteResponseMsg) Reset()                    { *m = InterfaceDeleteResponseMsg{} }
func (m *InterfaceDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceDeleteResponseMsg) ProtoMessage()               {}
func (*InterfaceDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{59} }

func (m *InterfaceDeleteResponseMsg) GetResponse() []*InterfaceDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// InterfaceStats captures all the statistics of given interface
type InterfaceStats struct {
	NumTxPackets uint32 `protobuf:"fixed32,1,opt,name=num_tx_packets,json=numTxPackets" json:"num_tx_packets,omitempty"`
	NumTxBytes   uint32 `protobuf:"fixed32,2,opt,name=num_tx_bytes,json=numTxBytes" json:"num_tx_bytes,omitempty"`
	NumRxPackets uint32 `protobuf:"fixed32,3,opt,name=num_rx_packets,json=numRxPackets" json:"num_rx_packets,omitempty"`
	NumRxBytes   uint32 `protobuf:"fixed32,4,opt,name=num_rx_bytes,json=numRxBytes" json:"num_rx_bytes,omitempty"`
}

func (m *InterfaceStats) Reset()                    { *m = InterfaceStats{} }
func (m *InterfaceStats) String() string            { return proto.CompactTextString(m) }
func (*InterfaceStats) ProtoMessage()               {}
func (*InterfaceStats) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{60} }

func (m *InterfaceStats) GetNumTxPackets() uint32 {
	if m != nil {
		return m.NumTxPackets
	}
	return 0
}

func (m *InterfaceStats) GetNumTxBytes() uint32 {
	if m != nil {
		return m.NumTxBytes
	}
	return 0
}

func (m *InterfaceStats) GetNumRxPackets() uint32 {
	if m != nil {
		return m.NumRxPackets
	}
	return 0
}

func (m *InterfaceStats) GetNumRxBytes() uint32 {
	if m != nil {
		return m.NumRxBytes
	}
	return 0
}

// InterfaceGetRequest is used to get information about a interface
type InterfaceGetRequest struct {
	KeyOrHandle *InterfaceKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *InterfaceGetRequest) Reset()                    { *m = InterfaceGetRequest{} }
func (m *InterfaceGetRequest) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetRequest) ProtoMessage()               {}
func (*InterfaceGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{61} }

func (m *InterfaceGetRequest) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// InterfaceGetRequestMsg is batched GET request for interfaces
type InterfaceGetRequestMsg struct {
	Request []*InterfaceGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *InterfaceGetRequestMsg) Reset()                    { *m = InterfaceGetRequestMsg{} }
func (m *InterfaceGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetRequestMsg) ProtoMessage()               {}
func (*InterfaceGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{62} }

func (m *InterfaceGetRequestMsg) GetRequest() []*InterfaceGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// InterfaceGetResponse captures all the information about a interface
type InterfaceGetResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *InterfaceSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *InterfaceStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *InterfaceStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *InterfaceGetResponse) Reset()                    { *m = InterfaceGetResponse{} }
func (m *InterfaceGetResponse) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetResponse) ProtoMessage()               {}
func (*InterfaceGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{63} }

func (m *InterfaceGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *InterfaceGetResponse) GetSpec() *InterfaceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *InterfaceGetResponse) GetStatus() *InterfaceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *InterfaceGetResponse) GetStats() *InterfaceStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// InterfaceGetResponseMsg is response to InterfaceGetRequestMsg
type InterfaceGetResponseMsg struct {
	ApiStatus ApiStatus               `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Response  []*InterfaceGetResponse `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
}

func (m *InterfaceGetResponseMsg) Reset()                    { *m = InterfaceGetResponseMsg{} }
func (m *InterfaceGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetResponseMsg) ProtoMessage()               {}
func (*InterfaceGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{64} }

func (m *InterfaceGetResponseMsg) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *InterfaceGetResponseMsg) GetResponse() []*InterfaceGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// InterfaceL2SegmentSpec carries the user vlan that is being added or deleted
// on an uplink interface or uplink PC
type InterfaceL2SegmentSpec struct {
	L2SegmentKeyOrHandle *L2SegmentKeyHandle `protobuf:"bytes,1,opt,name=l2segment_key_or_handle,json=l2segmentKeyOrHandle" json:"l2segment_key_or_handle,omitempty"`
	IfKeyHandle          *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=if_key_handle,json=ifKeyHandle" json:"if_key_handle,omitempty"`
}

func (m *InterfaceL2SegmentSpec) Reset()                    { *m = InterfaceL2SegmentSpec{} }
func (m *InterfaceL2SegmentSpec) String() string            { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentSpec) ProtoMessage()               {}
func (*InterfaceL2SegmentSpec) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{65} }

func (m *InterfaceL2SegmentSpec) GetL2SegmentKeyOrHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.L2SegmentKeyOrHandle
	}
	return nil
}

func (m *InterfaceL2SegmentSpec) GetIfKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.IfKeyHandle
	}
	return nil
}

// InterfaceL2SegmentRequestMsg is batched request message to bring vlans
// on interfaces
type InterfaceL2SegmentRequestMsg struct {
	Request []*InterfaceL2SegmentSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *InterfaceL2SegmentRequestMsg) Reset()                    { *m = InterfaceL2SegmentRequestMsg{} }
func (m *InterfaceL2SegmentRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentRequestMsg) ProtoMessage()               {}
func (*InterfaceL2SegmentRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{66} }

func (m *InterfaceL2SegmentRequestMsg) GetRequest() []*InterfaceL2SegmentSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// InterfaceL2SegmentResponse is response to InterfaceL2SegmentSpec
type InterfaceL2SegmentResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *InterfaceL2SegmentResponse) Reset()                    { *m = InterfaceL2SegmentResponse{} }
func (m *InterfaceL2SegmentResponse) String() string            { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentResponse) ProtoMessage()               {}
func (*InterfaceL2SegmentResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{67} }

func (m *InterfaceL2SegmentResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// InterfaceL2SegmentResponseMsg is batched response to InterfaceL2SegmentResponse
type InterfaceL2SegmentResponseMsg struct {
	Response []*InterfaceL2SegmentResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *InterfaceL2SegmentResponseMsg) Reset()                    { *m = InterfaceL2SegmentResponseMsg{} }
func (m *InterfaceL2SegmentResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentResponseMsg) ProtoMessage()               {}
func (*InterfaceL2SegmentResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{68} }

func (m *InterfaceL2SegmentResponseMsg) GetResponse() []*InterfaceL2SegmentResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*LifQStateMapEntry)(nil), "halproto.LifQStateMapEntry")
	proto.RegisterType((*PktFilter)(nil), "halproto.PktFilter")
	clientApi.RegisterFactory("LifSpec", LifSpecFactory)
	proto.RegisterType((*LifSpec)(nil), "halproto.LifSpec")
	proto.RegisterType((*LifRequestMsg)(nil), "halproto.LifRequestMsg")
	clientApi.RegisterFactory("LifStatus", LifStatusFactory)
	proto.RegisterType((*LifStatus)(nil), "halproto.LifStatus")
	proto.RegisterType((*LifQState)(nil), "halproto.LifQState")
	proto.RegisterType((*LifRdmaData)(nil), "halproto.LifRdmaData")
	proto.RegisterType((*LifResponse)(nil), "halproto.LifResponse")
	proto.RegisterType((*LifResponseMsg)(nil), "halproto.LifResponseMsg")
	proto.RegisterType((*QStateGetReq)(nil), "halproto.QStateGetReq")
	proto.RegisterType((*GetQStateRequestMsg)(nil), "halproto.GetQStateRequestMsg")
	proto.RegisterType((*QStateGetResp)(nil), "halproto.QStateGetResp")
	proto.RegisterType((*GetQStateResponseMsg)(nil), "halproto.GetQStateResponseMsg")
	proto.RegisterType((*P4ProgLabel)(nil), "halproto.P4ProgLabel")
	proto.RegisterType((*QStateSetReq)(nil), "halproto.QStateSetReq")
	proto.RegisterType((*SetQStateRequestMsg)(nil), "halproto.SetQStateRequestMsg")
	proto.RegisterType((*QStateSetResp)(nil), "halproto.QStateSetResp")
	proto.RegisterType((*SetQStateResponseMsg)(nil), "halproto.SetQStateResponseMsg")
	proto.RegisterType((*LifDeleteRequest)(nil), "halproto.LifDeleteRequest")
	proto.RegisterType((*LifDeleteRequestMsg)(nil), "halproto.LifDeleteRequestMsg")
	proto.RegisterType((*LifDeleteResponse)(nil), "halproto.LifDeleteResponse")
	proto.RegisterType((*LifDeleteResponseMsg)(nil), "halproto.LifDeleteResponseMsg")
	proto.RegisterType((*LifTxStats)(nil), "halproto.LifTxStats")
	proto.RegisterType((*LifRxStats)(nil), "halproto.LifRxStats")
	proto.RegisterType((*DataLifStats)(nil), "halproto.DataLifStats")
	proto.RegisterType((*CpuQueueStats)(nil), "halproto.CpuQueueStats")
	proto.RegisterType((*CpuLifStats)(nil), "halproto.CpuLifStats")
	proto.RegisterType((*LifStats)(nil), "halproto.LifStats")
	proto.RegisterType((*LifGetRequest)(nil), "halproto.LifGetRequest")
	proto.RegisterType((*LifGetRequestMsg)(nil), "halproto.LifGetRequestMsg")
	proto.RegisterType((*LifGetResponse)(nil), "halproto.LifGetResponse")
	proto.RegisterType((*LifGetResponseMsg)(nil), "halproto.LifGetResponseMsg")
	proto.RegisterType((*LifRssSpec)(nil), "halproto.LifRssSpec")
	proto.RegisterType((*EnicInfo)(nil), "halproto.EnicInfo")
	proto.RegisterType((*EnicClassicInfo)(nil), "halproto.EnicClassicInfo")
	proto.RegisterType((*IfEnicInfo)(nil), "halproto.IfEnicInfo")
	proto.RegisterType((*IfUplinkInfo)(nil), "halproto.IfUplinkInfo")
	proto.RegisterType((*IfUplinkPCInfo)(nil), "halproto.IfUplinkPCInfo")
	proto.RegisterType((*IfTunnelVxlanInfo)(nil), "halproto.IfTunnelVxlanInfo")
	proto.RegisterType((*IfTunnelGREInfo)(nil), "halproto.IfTunnelGREInfo")
	proto.RegisterType((*IfTunnelInfo)(nil), "halproto.IfTunnelInfo")
	proto.RegisterType((*IfCPUInfo)(nil), "halproto.IfCPUInfo")
	proto.RegisterType((*IfAppRedirInfo)(nil), "halproto.IfAppRedirInfo")
	clientApi.RegisterFactory("InterfaceSpec", InterfaceSpecFactory)
	proto.RegisterType((*InterfaceSpec)(nil), "halproto.InterfaceSpec")
	proto.RegisterType((*InterfaceRequestMsg)(nil), "halproto.InterfaceRequestMsg")
	proto.RegisterType((*UplinkResponseInfo)(nil), "halproto.UplinkResponseInfo")
	proto.RegisterType((*EnicL2SegInfo)(nil), "halproto.EnicL2SegInfo")
	proto.RegisterType((*SmartEnicInfo)(nil), "halproto.SmartEnicInfo")
	proto.RegisterType((*ClassicEnicInfo)(nil), "halproto.ClassicEnicInfo")
	proto.RegisterType((*EnicResponseInfo)(nil), "halproto.EnicResponseInfo")
	proto.RegisterType((*CpuIfResponseInfo)(nil), "halproto.CpuIfResponseInfo")
	proto.RegisterType((*TunnelIfResponseInfo)(nil), "halproto.TunnelIfResponseInfo")
	proto.RegisterType((*AppRedirIfInfo)(nil), "halproto.AppRedirIfInfo")
	clientApi.RegisterFactory("InterfaceStatus", InterfaceStatusFactory)
	proto.RegisterType((*InterfaceStatus)(nil), "halproto.InterfaceStatus")
	proto.RegisterType((*InterfaceResponse)(nil), "halproto.InterfaceResponse")
	proto.RegisterType((*InterfaceResponseMsg)(nil), "halproto.InterfaceResponseMsg")
	proto.RegisterType((*InterfaceDeleteRequest)(nil), "halproto.InterfaceDeleteRequest")
	proto.RegisterType((*InterfaceDeleteRequestMsg)(nil), "halproto.InterfaceDeleteRequestMsg")
	proto.RegisterType((*InterfaceDeleteResponse)(nil), "halproto.InterfaceDeleteResponse")
	proto.RegisterType((*InterfaceDeleteResponseMsg)(nil), "halproto.InterfaceDeleteResponseMsg")
	proto.RegisterType((*InterfaceStats)(nil), "halproto.InterfaceStats")
	proto.RegisterType((*InterfaceGetRequest)(nil), "halproto.InterfaceGetRequest")
	proto.RegisterType((*InterfaceGetRequestMsg)(nil), "halproto.InterfaceGetRequestMsg")
	proto.RegisterType((*InterfaceGetResponse)(nil), "halproto.InterfaceGetResponse")
	proto.RegisterType((*InterfaceGetResponseMsg)(nil), "halproto.InterfaceGetResponseMsg")
	proto.RegisterType((*InterfaceL2SegmentSpec)(nil), "halproto.InterfaceL2SegmentSpec")
	proto.RegisterType((*InterfaceL2SegmentRequestMsg)(nil), "halproto.InterfaceL2SegmentRequestMsg")
	proto.RegisterType((*InterfaceL2SegmentResponse)(nil), "halproto.InterfaceL2SegmentResponse")
	proto.RegisterType((*InterfaceL2SegmentResponseMsg)(nil), "halproto.InterfaceL2SegmentResponseMsg")
	proto.RegisterEnum("halproto.IfStatus", IfStatus_name, IfStatus_value)
	proto.RegisterEnum("halproto.LifPortType", LifPortType_name, LifPortType_value)
	proto.RegisterEnum("halproto.LifQPurpose", LifQPurpose_name, LifQPurpose_value)
	proto.RegisterEnum("halproto.IfType", IfType_name, IfType_value)
	proto.RegisterEnum("halproto.LifRssType", LifRssType_name, LifRssType_value)
	proto.RegisterEnum("halproto.IfEnicType", IfEnicType_name, IfEnicType_value)
	proto.RegisterEnum("halproto.IfTunnelEncapType", IfTunnelEncapType_name, IfTunnelEncapType_value)
}

func init() { proto.RegisterFile("interface.proto", fileDescriptor11) }

var fileDescriptor11 = []byte{
	// 4718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5b, 0xcd, 0x6f, 0x23, 0xc9,
	0x75, 0x9f, 0x16, 0x29, 0x91, 0x7c, 0xfc, 0x50, 0xb3, 0x44, 0x8d, 0x28, 0xed, 0x8e, 0x35, 0xee,
	0x6c, 0x76, 0x67, 0x67, 0x3d, 0xda, 0x95, 0x76, 0x34, 0xfb, 0x39, 0x88, 0x25, 0x8a, 0xd2, 0x70,
	0x46, 0xa2, 0x38, 0x4d, 0x4a, 0x1e, 0xc7, 0x58, 0x34, 0x5a, 0x64, 0x71, 0xd4, 0x11, 0xd9, 0xdd,
	0xea, 0x6e, 0xce, 0x50, 0x0e, 0x6c, 0x2c, 0x36, 0x87, 0x38, 0xce, 0x21, 0x0e, 0x1c, 0x20, 0x70,
	0x16, 0x01, 0x62, 0x20, 0x17, 0x5f, 0x02, 0xe4, 0x12, 0x20, 0xe7, 0x5c, 0xfd, 0x37, 0xe8, 0x10,
	0xe4, 0x92, 0x43, 0x2e, 0x4a, 0xee, 0x31, 0xea, 0xa3, 0xbb, 0xab, 0x9b, 0xa4, 0x66, 0xb4, 0xd6,
	0xfa, 0x24, 0xf6, 0x7b, 0xbf, 0x7a, 0xfd, 0xea, 0xd5, 0xab, 0xf7, 0x51, 0xd5, 0x82, 0x59, 0xc3,
	0xf4, 0xb0, 0xd3, 0xd5, 0xdb, 0x78, 0xc5, 0x76, 0x2c, 0xcf, 0x42, 0x49, 0xc3, 0xf4, 0xba, 0x4b,
	0x59, 0xef, 0xcc, 0xc6, 0x2e, 0x23, 0x2d, 0x65, 0x4e, 0x2d, 0xff, 0x67, 0xfa, 0xe4, 0x98, 0xff,
	0xca, 0x75, 0x70, 0xcf, 0x3e, 0x36, 0xd8, 0x93, 0xf2, 0x57, 0x12, 0x14, 0x77, 0x8d, 0xee, 0xd3,
	0xa6, 0xa7, 0x7b, 0x78, 0x4f, 0xb7, 0xab, 0xa6, 0xe7, 0x9c, 0xa1, 0x45, 0x48, 0x13, 0x39, 0x9a,
	0x39, 0xe8, 0x97, 0xa5, 0xdb, 0xd2, 0x9d, 0xbc, 0x9a, 0x22, 0xcf, 0xf5, 0x41, 0x1f, 0x21, 0x48,
	0xba, 0xc6, 0x8f, 0x71, 0x79, 0x8a, 0x92, 0xe9, 0x6f, 0x54, 0x86, 0x14, 0x36, 0x3d, 0xc7, 0xc0,
	0x6e, 0x39, 0xc1, 0xd0, 0xfc, 0x11, 0xbd, 0x07, 0x29, 0x7b, 0xe0, 0xd8, 0x96, 0x8b, 0xcb, 0xc9,
	0xdb, 0xd2, 0x9d, 0xc2, 0x5a, 0x71, 0x85, 0xa8, 0xb9, 0x42, 0x5e, 0xd9, 0x60, 0x0c, 0xd5, 0x47,
	0x28, 0xff, 0x28, 0x41, 0xa6, 0x71, 0xe2, 0x6d, 0x1b, 0x3d, 0x0f, 0x3b, 0xe8, 0x3d, 0x28, 0x3a,
	0xb8, 0x8d, 0x8d, 0x17, 0x58, 0x3b, 0x72, 0x2c, 0xbd, 0xd3, 0xd6, 0x5d, 0x8f, 0x2a, 0x93, 0x56,
	0x65, 0xce, 0xd8, 0xf4, 0xe9, 0x68, 0x0d, 0xe6, 0x7d, 0xb0, 0xde, 0xeb, 0x69, 0xfd, 0x41, 0xcf,
	0x33, 0xe8, 0x80, 0x29, 0x3a, 0x60, 0x8e, 0x33, 0x37, 0x7a, 0xbd, 0x3d, 0x9f, 0x85, 0xde, 0x07,
	0x9f, 0xac, 0xd9, 0x8e, 0xd5, 0x37, 0xdc, 0xf6, 0xc0, 0x1a, 0xb0, 0x19, 0xa4, 0x55, 0xc4, 0x59,
	0x8d, 0x90, 0xa3, 0xfc, 0x43, 0x06, 0x52, 0xbb, 0x46, 0xb7, 0x69, 0xe3, 0x36, 0x7a, 0x1b, 0x92,
	0x7b, 0xd8, 0xd3, 0xa9, 0x42, 0xd9, 0x35, 0xb4, 0xc2, 0x8d, 0xba, 0x7f, 0xf4, 0x67, 0xb8, 0xed,
	0x11, 0x8e, 0x4a, 0xf9, 0x68, 0x0b, 0xf2, 0x27, 0xf8, 0x4c, 0xb3, 0x1c, 0xed, 0x58, 0x37, 0x3b,
	0x3d, 0x66, 0xb7, 0xec, 0x9a, 0xbc, 0x72, 0x72, 0x4c, 0x8c, 0xf0, 0x04, 0x9f, 0x3d, 0xa2, 0xf4,
	0xcd, 0xc2, 0xc5, 0xf9, 0x32, 0xbc, 0xc0, 0xa6, 0xd1, 0xc6, 0x9f, 0x9e, 0xe0, 0x33, 0x35, 0x7b,
	0x82, 0xcf, 0xf6, 0x1d, 0xc6, 0x44, 0xff, 0x22, 0xc1, 0x1b, 0xb6, 0x61, 0x9a, 0xb8, 0xa3, 0x0d,
	0xec, 0x9e, 0x61, 0x9e, 0x68, 0x46, 0x57, 0x23, 0x72, 0xb9, 0xd0, 0x04, 0x15, 0x7a, 0x93, 0x08,
	0xad, 0xf9, 0x6e, 0x11, 0x8a, 0x7e, 0x76, 0x71, 0xbe, 0xdc, 0xe2, 0xa2, 0x1d, 0xdc, 0xfd, 0x1e,
	0xff, 0xd9, 0xb6, 0x4c, 0xd7, 0x73, 0x74, 0xc3, 0xf4, 0xdc, 0x87, 0x7f, 0x4e, 0x57, 0x25, 0x18,
	0x4b, 0xa6, 0xb8, 0x42, 0x56, 0xfc, 0x61, 0xe0, 0x65, 0x9a, 0x7d, 0xb4, 0xb6, 0x52, 0xdb, 0xd6,
	0x5a, 0x3f, 0x6c, 0x54, 0xb5, 0x83, 0xc6, 0x6e, 0xad, 0xfe, 0xe4, 0x27, 0xea, 0x02, 0x53, 0xea,
	0x80, 0xea, 0x54, 0x0b, 0x67, 0x43, 0xbc, 0xc4, 0xd4, 0xfb, 0x6c, 0xd1, 0x33, 0x2a, 0xfd, 0x8d,
	0x56, 0x21, 0xa7, 0x77, 0xfa, 0x86, 0xa9, 0xb9, 0x9e, 0xee, 0x0d, 0xdc, 0xf2, 0x34, 0x75, 0x88,
	0x02, 0x73, 0x88, 0x5a, 0xb7, 0x49, 0xa9, 0x6a, 0x96, 0x62, 0xd8, 0x03, 0x52, 0x20, 0x49, 0xb4,
	0x28, 0xcf, 0x70, 0x28, 0x73, 0xee, 0x5d, 0xa3, 0xdb, 0x3a, 0xb3, 0xb1, 0x4a, 0x79, 0xe8, 0x21,
	0x14, 0x7a, 0x46, 0x57, 0x3b, 0x25, 0x52, 0xb1, 0xd6, 0xd7, 0xed, 0x72, 0xea, 0x76, 0xe2, 0x4e,
	0x76, 0x6d, 0x21, 0xf4, 0xb4, 0x88, 0x73, 0xab, 0xb9, 0x9e, 0xd1, 0x7d, 0xea, 0x72, 0x12, 0x52,
	0x20, 0xff, 0xa2, 0xa7, 0x13, 0xa5, 0x1c, 0xc3, 0xd6, 0xb0, 0x59, 0x4e, 0xd3, 0xf5, 0xcf, 0x12,
	0x62, 0x93, 0xd0, 0xaa, 0x26, 0x7a, 0x0b, 0x0a, 0x14, 0x63, 0x98, 0x2e, 0x76, 0x3c, 0x02, 0xca,
	0x50, 0x50, 0x8e, 0x50, 0x6b, 0x94, 0x58, 0x35, 0xd1, 0x32, 0x64, 0xb1, 0xa9, 0x1f, 0xf5, 0xb0,
	0xe6, 0x74, 0xfa, 0x7a, 0x19, 0x28, 0x04, 0x18, 0x49, 0xed, 0xf4, 0x75, 0xf4, 0x09, 0xe4, 0x0d,
	0x57, 0xeb, 0xeb, 0xa6, 0xfe, 0x1c, 0xf7, 0xb1, 0xe9, 0x95, 0xb3, 0x04, 0xb2, 0x59, 0xba, 0x38,
	0x5f, 0x96, 0xf9, 0x9a, 0x18, 0xfd, 0xfe, 0xc0, 0xa3, 0x03, 0x72, 0x86, 0xbb, 0x17, 0x20, 0xd1,
	0x7d, 0xc8, 0xdb, 0x7a, 0xfb, 0x04, 0x7b, 0x5a, 0x97, 0xee, 0x8e, 0x72, 0x8e, 0xae, 0xf8, 0x2c,
	0x9b, 0x63, 0xb0, 0x69, 0xd4, 0x1c, 0x43, 0xf1, 0x2d, 0xb4, 0x04, 0x99, 0xe3, 0x97, 0x1a, 0xb1,
	0x8e, 0xd1, 0x29, 0xe7, 0xd9, 0xce, 0x3c, 0x7e, 0xb9, 0x6b, 0x74, 0x6b, 0x1d, 0x32, 0x6f, 0xa2,
	0xa6, 0xd6, 0xd7, 0x87, 0xc4, 0x93, 0xdc, 0x72, 0x81, 0xf2, 0xb3, 0x84, 0xb8, 0xa7, 0x0f, 0x9f,
	0xe0, 0x33, 0x17, 0xdd, 0x86, 0x5c, 0x80, 0xd1, 0x8f, 0xdd, 0xf2, 0x2c, 0x85, 0x00, 0x87, 0x6c,
	0x1c, 0xbb, 0xe8, 0x1e, 0xcc, 0x05, 0x08, 0x9b, 0x58, 0x86, 0x45, 0x01, 0x99, 0x02, 0x65, 0x0e,
	0x6c, 0x78, 0x55, 0x1e, 0x0e, 0x56, 0x01, 0xc2, 0xb5, 0x2a, 0x17, 0xe9, 0x3a, 0x21, 0x36, 0x07,
	0xb6, 0x48, 0x4d, 0xec, 0xa9, 0xf8, 0x54, 0xcd, 0x04, 0x4b, 0x84, 0x14, 0x48, 0x38, 0xae, 0x5b,
	0x46, 0x7c, 0xdb, 0xf8, 0x6b, 0xaa, 0xba, 0x2e, 0x71, 0x52, 0x95, 0x30, 0xd1, 0xfb, 0x00, 0xde,
	0x50, 0xb3, 0xad, 0x9e, 0xd1, 0xc6, 0x4e, 0x79, 0x8e, 0x43, 0x49, 0xf0, 0x6b, 0x30, 0x1a, 0x85,
	0x66, 0xbc, 0x21, 0x7f, 0x24, 0x03, 0x9c, 0x70, 0x40, 0x69, 0xd2, 0x00, 0x27, 0x18, 0xf0, 0x11,
	0xe4, 0x9c, 0xa1, 0x76, 0x6a, 0xb9, 0x5a, 0xbb, 0xa7, 0xbb, 0x6e, 0x79, 0x9e, 0x0e, 0x99, 0x27,
	0x1b, 0xee, 0xa9, 0xe5, 0x56, 0x08, 0x2d, 0x70, 0x7e, 0x15, 0x9c, 0xa1, 0x4f, 0x24, 0x03, 0x3d,
	0x71, 0xe0, 0xcd, 0x4b, 0x07, 0x7a, 0xe1, 0xc0, 0x3b, 0x40, 0xcd, 0xa7, 0x1d, 0xe9, 0x4e, 0x5f,
	0xb7, 0x35, 0x1a, 0x73, 0x17, 0xa8, 0x59, 0x0b, 0x84, 0xbe, 0x49, 0xc9, 0x4d, 0xe3, 0xc7, 0xf8,
	0xd3, 0xe4, 0x97, 0x7f, 0xaf, 0x48, 0xca, 0xc7, 0x90, 0x27, 0x66, 0xc1, 0xa7, 0x03, 0xec, 0x7a,
	0x7b, 0xee, 0x73, 0xf4, 0x0e, 0xa4, 0x1c, 0xf6, 0x54, 0x96, 0xa8, 0xa1, 0xf3, 0x81, 0xf1, 0xe8,
	0xec, 0x7c, 0xae, 0xf2, 0xdf, 0x12, 0x64, 0x08, 0x91, 0x6d, 0xb9, 0x3f, 0x6c, 0x60, 0xbb, 0xc7,
	0x1c, 0x82, 0x47, 0x84, 0xc4, 0xd8, 0x88, 0x40, 0x9c, 0x81, 0x2b, 0x77, 0x8b, 0xc1, 0xf9, 0x1b,
	0x49, 0x70, 0x99, 0xa1, 0x6c, 0x2e, 0x2d, 0xe2, 0xef, 0x24, 0xbc, 0x24, 0x03, 0x7f, 0xe7, 0x56,
	0xfa, 0x94, 0x4e, 0x95, 0xf9, 0xda, 0x2b, 0xb2, 0x9c, 0xde, 0xe9, 0x38, 0x74, 0x52, 0x49, 0x95,
	0xfe, 0x26, 0xe9, 0x29, 0x4b, 0x4c, 0xdc, 0xe9, 0xeb, 0x5b, 0xba, 0xa7, 0x93, 0xdd, 0x61, 0x7b,
	0xda, 0x91, 0xee, 0x62, 0x8d, 0x62, 0x25, 0x8a, 0x05, 0xdb, 0xdb, 0xd4, 0x5d, 0xbc, 0xd1, 0xe9,
	0x38, 0x04, 0x71, 0x22, 0x22, 0x98, 0x34, 0x38, 0x89, 0x20, 0x74, 0x11, 0x91, 0x60, 0x08, 0x3d,
	0x44, 0xdc, 0x01, 0x99, 0xbb, 0x40, 0x88, 0x4a, 0x52, 0x54, 0x81, 0xd1, 0x7d, 0xa4, 0xf2, 0xff,
	0x5c, 0x3f, 0xec, 0xda, 0x96, 0xe9, 0x62, 0xb4, 0x0d, 0xa0, 0xdb, 0x86, 0x6f, 0x5b, 0x89, 0xda,
	0x56, 0xe6, 0x21, 0x74, 0xc3, 0x36, 0x98, 0x49, 0x37, 0xe7, 0x2f, 0xce, 0x97, 0x8b, 0x7c, 0x79,
	0x42, 0xb8, 0x9a, 0xd1, 0x7d, 0x04, 0x7a, 0x07, 0x66, 0xb8, 0x8c, 0x29, 0x31, 0xe8, 0x04, 0x2e,
	0xa3, 0x72, 0x36, 0x01, 0xf2, 0x9d, 0x9d, 0xa0, 0x0e, 0x37, 0x1b, 0x8b, 0xc0, 0x2a, 0x67, 0xa3,
	0xb7, 0x61, 0x96, 0xfa, 0x76, 0x47, 0xf7, 0x74, 0xed, 0x85, 0xde, 0x33, 0x3a, 0x74, 0x4a, 0x69,
	0x95, 0x86, 0x24, 0x62, 0xdc, 0x43, 0x42, 0x44, 0x2b, 0x90, 0x09, 0x70, 0x74, 0x3d, 0xb3, 0x42,
	0xfd, 0xe0, 0xaf, 0x83, 0x9a, 0xf6, 0x07, 0x29, 0x7f, 0x02, 0x05, 0xc1, 0x00, 0x64, 0x13, 0xdc,
	0x83, 0xb4, 0xc3, 0x1f, 0xf9, 0x2e, 0x10, 0x04, 0x70, 0x86, 0x1a, 0x40, 0x94, 0x9f, 0x42, 0x8e,
	0xa9, 0xba, 0x43, 0xe3, 0x50, 0xcc, 0xdf, 0xd8, 0x02, 0x0b, 0xfe, 0x26, 0x3a, 0xd0, 0x54, 0xd4,
	0x81, 0x64, 0x48, 0x9c, 0x1a, 0x1d, 0x5e, 0x0e, 0x91, 0x9f, 0x34, 0xe0, 0x62, 0x8f, 0xcd, 0x99,
	0xee, 0xe6, 0x24, 0x0f, 0xb8, 0xd8, 0x23, 0xca, 0x93, 0xad, 0xac, 0x3c, 0x84, 0xb9, 0x1d, 0xec,
	0x71, 0x6b, 0x85, 0x5b, 0xf9, 0x6d, 0x48, 0x3a, 0xf8, 0xd4, 0xe5, 0x33, 0x88, 0x04, 0x4c, 0xa6,
	0xa8, 0x4a, 0xf9, 0x4a, 0x17, 0xf2, 0x02, 0xd5, 0xb5, 0x89, 0xfe, 0xd8, 0x71, 0x2c, 0x47, 0x6b,
	0x5b, 0x1d, 0xa6, 0xff, 0xb4, 0x9a, 0xa1, 0x94, 0x8a, 0xd5, 0xc1, 0x68, 0x1e, 0x66, 0x4e, 0x45,
	0xcf, 0x9c, 0x3e, 0xa5, 0x2e, 0xb7, 0x0c, 0xd9, 0xd3, 0x01, 0x1e, 0x60, 0xcd, 0x5f, 0x4c, 0xe9,
	0x4e, 0x4e, 0x05, 0x4a, 0xa2, 0xd2, 0x95, 0x0d, 0x28, 0x09, 0x6a, 0x86, 0xd6, 0x7e, 0x17, 0xa6,
	0x89, 0x29, 0x7d, 0x45, 0xe7, 0x46, 0x14, 0x75, 0x6d, 0x95, 0x21, 0x94, 0x67, 0x90, 0x6d, 0xdc,
	0x6f, 0x38, 0xd6, 0xf3, 0x5d, 0xfd, 0x08, 0xf7, 0xd0, 0x4d, 0x98, 0x11, 0x8c, 0x9c, 0x51, 0xf9,
	0x13, 0x7a, 0x03, 0x32, 0xb6, 0x63, 0x3d, 0xd7, 0x68, 0x31, 0x31, 0x45, 0x59, 0x69, 0x42, 0xa8,
	0x93, 0x82, 0xa2, 0x04, 0xd3, 0x3d, 0x32, 0x9a, 0x6a, 0x98, 0x51, 0xd9, 0x83, 0xf2, 0xcf, 0x92,
	0xbf, 0x88, 0xcd, 0xeb, 0x5f, 0xc4, 0x77, 0xfc, 0x57, 0x26, 0x45, 0x6f, 0x14, 0x66, 0xc2, 0xb5,
	0x88, 0xdb, 0x70, 0x7a, 0xc4, 0x86, 0x0f, 0x61, 0xae, 0x79, 0xb5, 0xa5, 0x6e, 0x8a, 0x4b, 0xbd,
	0xe2, 0x2f, 0x75, 0xf3, 0xb5, 0x96, 0x9a, 0x2c, 0x59, 0xf3, 0xaa, 0x4b, 0xd6, 0x8c, 0x2f, 0x99,
	0xbc, 0x6b, 0x74, 0xb7, 0x70, 0x0f, 0x07, 0x1a, 0x8f, 0x66, 0x01, 0xe9, 0x1b, 0x64, 0x01, 0x65,
	0x07, 0xe6, 0xe2, 0x92, 0x89, 0x6e, 0x1f, 0xc4, 0x33, 0xd8, 0xcd, 0x60, 0xef, 0x46, 0xb0, 0x61,
	0x2a, 0xfb, 0x11, 0x6d, 0x66, 0x7c, 0xe6, 0xf5, 0xc6, 0x41, 0xe5, 0x09, 0x94, 0x46, 0x84, 0x13,
	0x35, 0x3f, 0x1c, 0x89, 0x31, 0x0b, 0x23, 0x7a, 0x8e, 0x44, 0x9a, 0x2f, 0x93, 0x00, 0xa4, 0x8e,
	0x1d, 0x12, 0xe1, 0x2e, 0xf1, 0xf3, 0xae, 0xa3, 0xf7, 0xb1, 0xab, 0x59, 0x27, 0xdc, 0x45, 0xd3,
	0x8c, 0xb0, 0x7f, 0x82, 0xee, 0x42, 0x71, 0x60, 0xd2, 0x9e, 0x45, 0x0b, 0x41, 0x6c, 0xc7, 0xce,
	0x72, 0xc6, 0xb6, 0x8f, 0x5d, 0x81, 0xb9, 0x18, 0xb6, 0xe3, 0x58, 0x36, 0xcf, 0x2b, 0xc5, 0x08,
	0x7a, 0xcb, 0xb1, 0x6c, 0x82, 0x0f, 0x9a, 0x25, 0x41, 0x3a, 0xcb, 0x30, 0xc5, 0x80, 0x15, 0xc8,
	0x5f, 0x83, 0xf9, 0x11, 0x3c, 0x7d, 0x03, 0x4b, 0xb7, 0x73, 0xb1, 0x11, 0xfe, 0x3b, 0x82, 0x0e,
	0x4e, 0x78, 0xc7, 0x0c, 0x7b, 0x47, 0xc0, 0x12, 0xdf, 0x31, 0x82, 0xa7, 0xef, 0x48, 0xb1, 0x77,
	0xc4, 0x46, 0xd0, 0x77, 0x2c, 0x42, 0xfa, 0xe8, 0xcc, 0x63, 0x82, 0xd3, 0x2c, 0xf3, 0xd3, 0xe7,
	0xfd, 0x13, 0x92, 0x41, 0x7d, 0x93, 0x04, 0x90, 0x0c, 0xcb, 0xa0, 0x9c, 0xbe, 0xc9, 0x91, 0xdf,
	0x03, 0x14, 0x4e, 0x2e, 0xc0, 0x02, 0xc5, 0xca, 0x01, 0x47, 0x40, 0x87, 0x6a, 0x06, 0xe8, 0x2c,
	0x43, 0x07, 0x1c, 0x1f, 0x2d, 0x43, 0xc2, 0x73, 0x2d, 0x5a, 0xb7, 0x27, 0x55, 0xf2, 0x53, 0xf9,
	0x75, 0x8a, 0xba, 0x80, 0xca, 0x5d, 0xe0, 0xbb, 0x90, 0xe3, 0x73, 0xf5, 0x2c, 0x4f, 0xef, 0x71,
	0x2f, 0xc8, 0x32, 0x5a, 0x8b, 0x90, 0xa2, 0x5e, 0x32, 0xf5, 0x3a, 0x5e, 0x92, 0xb8, 0x92, 0x97,
	0x24, 0xaf, 0xe8, 0x25, 0xd3, 0x57, 0xf6, 0x92, 0x99, 0x2b, 0x7b, 0x49, 0xea, 0xca, 0x5e, 0x92,
	0x7e, 0x3d, 0x2f, 0xc9, 0xbc, 0xda, 0x4b, 0xe0, 0x0a, 0x5e, 0x92, 0xbd, 0x92, 0x97, 0xe4, 0x26,
	0x78, 0x49, 0x09, 0xa6, 0xc9, 0x1c, 0x5c, 0xda, 0xad, 0x25, 0x55, 0xf6, 0x80, 0x16, 0x20, 0x65,
	0x5a, 0xda, 0xd1, 0xa0, 0xcb, 0xba, 0xb4, 0xa4, 0x3a, 0x63, 0x5a, 0x9b, 0x83, 0xae, 0x4b, 0xd2,
	0x26, 0x0d, 0xf1, 0xac, 0x35, 0x4b, 0xaa, 0xfc, 0x89, 0x38, 0x1b, 0x69, 0x9a, 0x64, 0xe6, 0x6c,
	0xa4, 0x45, 0xba, 0x05, 0xd0, 0x76, 0xda, 0x1a, 0x47, 0x17, 0x59, 0x12, 0x6c, 0x3b, 0xed, 0x2a,
	0x1b, 0x10, 0x7a, 0xd6, 0x83, 0xfb, 0xb4, 0xd7, 0x0a, 0x3c, 0xeb, 0xc1, 0x7d, 0x32, 0x96, 0x33,
	0x57, 0xd7, 0x3e, 0xa2, 0xed, 0x55, 0x52, 0xe5, 0xf0, 0xd5, 0xb5, 0x8f, 0x04, 0xf6, 0xda, 0xfa,
	0x3a, 0x6d, 0xa6, 0x02, 0xf6, 0xda, 0xfa, 0xba, 0xc0, 0x5e, 0x5f, 0x5d, 0xa5, 0x8d, 0x53, 0xc0,
	0x5e, 0x5f, 0x5d, 0x25, 0x89, 0xd2, 0x17, 0xfe, 0xc1, 0xda, 0x7d, 0xda, 0x1f, 0x25, 0x55, 0x3e,
	0x82, 0x50, 0x44, 0xc0, 0xfa, 0xea, 0xc7, 0xb4, 0x07, 0x0a, 0x01, 0xeb, 0xab, 0x1f, 0x93, 0xc2,
	0x2a, 0xd8, 0x38, 0xa4, 0x11, 0x2d, 0x97, 0xa3, 0x3b, 0x67, 0x4f, 0x1f, 0xa2, 0x07, 0x90, 0xe7,
	0xdd, 0x1e, 0x0d, 0xec, 0x6e, 0x79, 0x91, 0xe7, 0x6f, 0xb1, 0xe7, 0x23, 0x0c, 0x35, 0x67, 0x0b,
	0x4f, 0xca, 0x31, 0xe4, 0x48, 0x71, 0xc6, 0x6b, 0x5d, 0x17, 0xbd, 0x07, 0x69, 0x6f, 0xc8, 0x45,
	0x48, 0xb1, 0x96, 0x94, 0xc7, 0x72, 0x35, 0xe5, 0x0d, 0x03, 0xb0, 0xe3, 0x83, 0xa7, 0xe2, 0xfd,
	0xab, 0x0f, 0x76, 0xd8, 0x0f, 0xe5, 0x37, 0x09, 0xc8, 0x57, 0xec, 0xc1, 0x53, 0xbf, 0x42, 0x70,
	0xd1, 0xbb, 0x90, 0x6e, 0xdb, 0x83, 0xf6, 0x11, 0x69, 0x66, 0xa4, 0xc8, 0x01, 0x48, 0x85, 0x90,
	0x6b, 0x1d, 0x35, 0xd5, 0x66, 0x3f, 0xd0, 0x5b, 0x50, 0x30, 0x07, 0x7d, 0x8d, 0x34, 0xc1, 0xb4,
	0xff, 0x67, 0xef, 0x4b, 0xa9, 0x39, 0x73, 0xd0, 0x6f, 0x0d, 0x1b, 0x8c, 0xe6, 0xa3, 0x9c, 0x10,
	0x95, 0x08, 0x50, 0x6a, 0x80, 0x7a, 0x1f, 0x4a, 0xa4, 0xd5, 0xed, 0x0e, 0x7a, 0x3d, 0xba, 0x9f,
	0x7c, 0x9f, 0xe1, 0xc1, 0xc1, 0x19, 0x3e, 0x25, 0x2c, 0xb2, 0x9d, 0xb8, 0xef, 0xbc, 0x0b, 0x45,
	0x62, 0x13, 0xdc, 0xd7, 0x82, 0x31, 0x2e, 0x0f, 0x0d, 0x05, 0x6f, 0xd8, 0xc4, 0xfd, 0x6d, 0x8e,
	0xa7, 0x4d, 0xad, 0x37, 0xd4, 0xba, 0x0e, 0xc6, 0x1a, 0x4f, 0xd9, 0x2e, 0x0f, 0x09, 0x05, 0x6f,
	0xb8, 0xed, 0x60, 0x3f, 0xa3, 0x53, 0xa1, 0xce, 0x88, 0x50, 0x16, 0x0b, 0x0a, 0x4e, 0x54, 0xe8,
	0x5b, 0x50, 0x20, 0x0a, 0x13, 0xc3, 0x7d, 0xa0, 0xd9, 0x27, 0x9e, 0xcb, 0x23, 0x40, 0xce, 0x19,
	0x52, 0x6b, 0x7e, 0xd0, 0x38, 0xf1, 0x22, 0xa8, 0x55, 0x86, 0xca, 0x44, 0x50, 0xab, 0x71, 0xd4,
	0x1a, 0x43, 0x41, 0x04, 0xb5, 0x46, 0x50, 0xca, 0x63, 0xc8, 0x56, 0xec, 0x41, 0xe0, 0x14, 0x9f,
	0xc1, 0x6c, 0xdb, 0x1e, 0x68, 0x61, 0xbd, 0x17, 0xab, 0xa6, 0x22, 0xcb, 0xaa, 0xe6, 0xdb, 0xe2,
	0xa3, 0xf2, 0x97, 0x12, 0xa4, 0x03, 0x49, 0x9f, 0x42, 0x81, 0xf6, 0x07, 0x7e, 0x4f, 0xec, 0x06,
	0x6d, 0x38, 0x15, 0x24, 0xba, 0xe2, 0xa3, 0x1b, 0x6a, 0xae, 0x23, 0xba, 0xe6, 0x47, 0x40, 0x24,
	0x0b, 0x43, 0xa7, 0xc4, 0x12, 0x55, 0xd0, 0xf7, 0xd1, 0x0d, 0x35, 0xdb, 0x0e, 0x1f, 0x37, 0x67,
	0x20, 0xb9, 0x6b, 0x74, 0x5d, 0xe5, 0x80, 0x9e, 0x20, 0xb0, 0x86, 0xe2, 0x1a, 0x8b, 0xbb, 0x0d,
	0x5a, 0x36, 0x86, 0x62, 0x59, 0x5b, 0x16, 0xab, 0xec, 0xe6, 0x82, 0x8d, 0x11, 0x02, 0xc3, 0xb2,
	0xee, 0x7f, 0x25, 0xda, 0xd8, 0xf1, 0x16, 0xe2, 0x5a, 0x9b, 0xdb, 0xef, 0x42, 0xd2, 0xb5, 0x71,
	0x9b, 0x1b, 0x2b, 0x76, 0x44, 0x42, 0x59, 0x42, 0xff, 0x9b, 0xb8, 0xbc, 0xff, 0x7d, 0x0b, 0xa6,
	0x99, 0xe5, 0x59, 0x73, 0x50, 0x88, 0xe0, 0x5c, 0x95, 0x31, 0x85, 0x2e, 0x79, 0xfa, 0xd2, 0x2e,
	0x59, 0xa9, 0xd2, 0x62, 0x56, 0x98, 0x34, 0xab, 0x89, 0xe3, 0xc5, 0x66, 0x29, 0x6a, 0xba, 0x91,
	0x4a, 0xf3, 0x11, 0xab, 0x32, 0xd8, 0x79, 0x19, 0x42, 0xfc, 0x44, 0x95, 0x9d, 0x77, 0xb0, 0x13,
	0x54, 0x19, 0x12, 0x27, 0xf8, 0x8c, 0x9a, 0x20, 0xa7, 0x92, 0x9f, 0x24, 0x0d, 0x19, 0x66, 0xc7,
	0x70, 0x78, 0xef, 0xc7, 0x1e, 0x94, 0xdf, 0x48, 0x90, 0xae, 0x9a, 0x46, 0xbb, 0x66, 0x76, 0x2d,
	0xf4, 0x0c, 0x4a, 0xbd, 0x35, 0x17, 0x3f, 0xef, 0x63, 0xd3, 0x13, 0x8f, 0xa2, 0xa5, 0xf0, 0x28,
	0x7a, 0x77, 0xad, 0xc9, 0xf8, 0xe3, 0x3d, 0xc5, 0xc1, 0x5d, 0x15, 0x05, 0x32, 0xc2, 0xb3, 0xe3,
	0x65, 0xc8, 0xf6, 0xf5, 0x36, 0xed, 0x4b, 0xb1, 0xcb, 0xdc, 0x78, 0x46, 0x85, 0xbe, 0xde, 0xde,
	0x60, 0x14, 0x12, 0xf0, 0xb1, 0xd9, 0xd6, 0x6d, 0x8d, 0x1d, 0xca, 0xfa, 0x0d, 0x5a, 0x96, 0x12,
	0x0f, 0x7b, 0xba, 0x59, 0xeb, 0x28, 0x5f, 0x4b, 0x30, 0x4b, 0x74, 0xa5, 0x87, 0x69, 0xaf, 0x54,
	0x39, 0xf1, 0x7b, 0xaa, 0xbc, 0x02, 0x73, 0xa6, 0xee, 0x19, 0x2f, 0xb0, 0x16, 0xbe, 0xc0, 0xe8,
	0xf0, 0x12, 0xad, 0xc8, 0x58, 0xbb, 0x3e, 0xa7, 0xd6, 0x51, 0xfe, 0x3d, 0x09, 0x50, 0xeb, 0x06,
	0xb6, 0xac, 0x40, 0x86, 0xc8, 0xd7, 0x82, 0x95, 0x29, 0xf8, 0x99, 0x82, 0x81, 0x5a, 0x67, 0x36,
	0x8e, 0x1c, 0x13, 0xf7, 0x75, 0xb3, 0xa3, 0x7b, 0x96, 0x73, 0xa6, 0xa6, 0x31, 0xe7, 0xa3, 0x27,
	0x50, 0xec, 0xf1, 0x5b, 0x81, 0xab, 0x1d, 0xca, 0x91, 0x49, 0x15, 0x7a, 0x94, 0x1b, 0x9c, 0xcb,
	0x75, 0x7e, 0x9f, 0xfb, 0x86, 0xb8, 0xf0, 0x89, 0xb7, 0x04, 0x5f, 0x49, 0x7c, 0xe2, 0x86, 0xd9,
	0xb5, 0xa2, 0xbb, 0xc6, 0xb7, 0xcd, 0x66, 0xf3, 0xe2, 0x7c, 0x79, 0x7f, 0xf2, 0x8d, 0x45, 0x60,
	0xc4, 0x95, 0xc0, 0x82, 0x0f, 0x47, 0x2f, 0x2d, 0xaa, 0xf5, 0x5a, 0x85, 0xdf, 0x5c, 0x34, 0xab,
	0x3b, 0x3f, 0x79, 0x74, 0x83, 0xd9, 0x8d, 0x1a, 0xff, 0x6b, 0x09, 0x8a, 0x6d, 0xe6, 0x25, 0x5a,
	0xa8, 0xcc, 0x34, 0x3f, 0xa7, 0x0d, 0x94, 0x11, 0x1c, 0x69, 0xf3, 0xf0, 0xe2, 0x7c, 0x59, 0xbd,
	0x3e, 0x9d, 0x2a, 0xbb, 0x1b, 0xcd, 0x66, 0xad, 0x42, 0xd4, 0x9a, 0xe5, 0x9a, 0x04, 0xd3, 0x97,
	0xa1, 0x10, 0x08, 0xa1, 0x9a, 0x29, 0xff, 0x2a, 0x41, 0xae, 0xd6, 0xe5, 0xc6, 0x24, 0x13, 0x78,
	0x1f, 0xd2, 0xb6, 0xe5, 0x78, 0xe1, 0x31, 0xe6, 0x04, 0x57, 0x49, 0x11, 0x54, 0x7d, 0xd0, 0xbf,
	0xaa, 0xb7, 0xa2, 0xef, 0x43, 0xd1, 0x70, 0x35, 0xcb, 0x3a, 0x12, 0xef, 0x2e, 0x12, 0x97, 0xdc,
	0x5d, 0xcc, 0x1a, 0xee, 0xbe, 0x75, 0x14, 0x5e, 0x5f, 0x28, 0xff, 0x25, 0x41, 0xc1, 0xd7, 0xb9,
	0x51, 0xa1, 0x5a, 0x4f, 0x50, 0x42, 0x9a, 0xa4, 0xc4, 0xaf, 0x25, 0x28, 0xf5, 0x71, 0xff, 0x08,
	0x3b, 0x31, 0x5f, 0x9c, 0x0a, 0x77, 0xef, 0x1f, 0xf4, 0xee, 0xab, 0xc8, 0xb4, 0x11, 0xfc, 0x59,
	0x71, 0xa1, 0x58, 0xeb, 0xb6, 0x06, 0xa6, 0x89, 0x7b, 0x87, 0x43, 0x7a, 0x35, 0xd4, 0xb5, 0xd0,
	0x3d, 0xc8, 0xf4, 0xac, 0xb6, 0xde, 0xd3, 0x3c, 0x6c, 0x07, 0x19, 0x94, 0x25, 0xaa, 0x5a, 0x83,
	0x87, 0x34, 0x35, 0x4d, 0x21, 0x2d, 0x6c, 0xd3, 0xab, 0x09, 0xdc, 0xb7, 0x3c, 0x4c, 0xf1, 0x53,
	0x13, 0xf0, 0x19, 0x86, 0x69, 0x61, 0x5b, 0xf9, 0xa5, 0x04, 0xb3, 0xfe, 0x5b, 0x77, 0xd4, 0x2a,
	0x7d, 0xe7, 0x1d, 0x98, 0x71, 0xad, 0x81, 0xd3, 0xc6, 0x13, 0x5f, 0xc8, 0xf9, 0x68, 0x0d, 0xb2,
	0x1d, 0xec, 0x7a, 0x06, 0x31, 0xb8, 0x65, 0x4e, 0x7c, 0x9f, 0x08, 0x22, 0xf9, 0xa2, 0xef, 0x0d,
	0xfc, 0x63, 0xb1, 0xbe, 0x37, 0xa0, 0xcd, 0xad, 0xd7, 0xe3, 0x27, 0x9a, 0xe4, 0xa7, 0xf2, 0xdb,
	0x04, 0xf1, 0x52, 0xa6, 0x15, 0x55, 0xe9, 0x01, 0x00, 0x0b, 0xda, 0x42, 0x90, 0x5b, 0xf0, 0x83,
	0x1c, 0xc3, 0x55, 0x09, 0x9f, 0xde, 0xec, 0x65, 0xb0, 0xff, 0x13, 0xfd, 0x4a, 0x02, 0x78, 0x31,
	0x64, 0xb7, 0x6f, 0x5d, 0x8b, 0x2b, 0x18, 0x1b, 0x18, 0x18, 0x7b, 0x53, 0xbb, 0x38, 0x5f, 0xfe,
	0xd1, 0x25, 0x3b, 0x33, 0x54, 0x68, 0x25, 0xd4, 0x66, 0xcc, 0xe6, 0x6c, 0x1d, 0xd4, 0xeb, 0xd5,
	0x5d, 0xad, 0x5a, 0xaf, 0x6c, 0x34, 0xd8, 0xb2, 0x1f, 0x3e, 0xdb, 0xdd, 0xa8, 0x93, 0x2d, 0x9a,
	0x79, 0x11, 0x2c, 0xed, 0xdf, 0x4a, 0x90, 0x7e, 0xee, 0xb0, 0x7d, 0xc9, 0x63, 0xe2, 0x7c, 0x54,
	0x33, 0xbe, 0x20, 0x9b, 0x5f, 0x5c, 0x9c, 0x2f, 0xff, 0xf0, 0x5b, 0xd1, 0x6b, 0x47, 0xad, 0x12,
	0xad, 0x52, 0xcf, 0x1d, 0x4c, 0x75, 0xda, 0x86, 0xc2, 0x0b, 0x27, 0xb2, 0x41, 0x92, 0x61, 0x0e,
	0x38, 0x74, 0x2e, 0xc9, 0x01, 0xb9, 0x17, 0x22, 0x37, 0xe7, 0xaf, 0x17, 0x0d, 0x3a, 0xcf, 0x20,
	0x53, 0xeb, 0x56, 0x1a, 0x07, 0xf4, 0x15, 0xd7, 0x99, 0x69, 0x94, 0x2f, 0x48, 0x64, 0xd8, 0xb0,
	0x6d, 0x15, 0x77, 0x0c, 0xe7, 0xfa, 0xc5, 0xff, 0x36, 0x0d, 0xf9, 0xc8, 0xd6, 0x7e, 0xed, 0x0b,
	0xae, 0xc7, 0xe3, 0x2f, 0xb8, 0x5e, 0x27, 0xe9, 0x8d, 0x5c, 0x73, 0x3d, 0xe0, 0x55, 0x17, 0xbb,
	0xe0, 0xca, 0x05, 0x3e, 0x12, 0xcf, 0xeb, 0x61, 0x08, 0x65, 0x95, 0x59, 0xfc, 0xca, 0x3c, 0xf9,
	0xea, 0x2b, 0xf3, 0xaf, 0x24, 0xc8, 0x19, 0xdd, 0x91, 0x4c, 0x16, 0xa9, 0x27, 0xa8, 0x4b, 0xee,
	0x5e, 0x9c, 0x2f, 0x3f, 0xba, 0x4a, 0x38, 0x9c, 0x10, 0x0f, 0x49, 0x1e, 0x23, 0x1e, 0x08, 0x46,
	0x58, 0xd0, 0xfc, 0x5c, 0x82, 0x82, 0xd1, 0x0d, 0x6a, 0x07, 0xa2, 0xc6, 0x8c, 0xd8, 0xc8, 0x88,
	0xf9, 0x6b, 0xb3, 0x7e, 0x71, 0xbe, 0xfc, 0xf8, 0x1a, 0x14, 0xe1, 0x81, 0x99, 0x34, 0x46, 0x86,
	0x98, 0x1f, 0xff, 0x4e, 0x82, 0x62, 0xa8, 0x8c, 0xcd, 0xcd, 0x92, 0xa2, 0xfa, 0x94, 0xa2, 0xfa,
	0xb0, 0xdc, 0xb4, 0xf9, 0xf4, 0xe2, 0x7c, 0x79, 0xef, 0xda, 0x34, 0xd2, 0x1a, 0xd4, 0x3e, 0x05,
	0x5f, 0xa9, 0x46, 0xc4, 0x46, 0x1e, 0xdd, 0xf9, 0x4c, 0xa7, 0x74, 0xd4, 0x46, 0x61, 0x50, 0xb8,
	0x36, 0x1b, 0xb1, 0xf8, 0xc1, 0x6d, 0x24, 0x44, 0xe7, 0x9f, 0x42, 0xd6, 0xe8, 0x6a, 0xa4, 0x7f,
	0xa4, 0x8a, 0x64, 0xc4, 0x46, 0x27, 0xd8, 0xf8, 0x9b, 0x4f, 0x2e, 0xce, 0x97, 0x77, 0xae, 0x41,
	0x8b, 0x4a, 0xe3, 0x80, 0x46, 0x52, 0xa3, 0x5b, 0xb1, 0x07, 0xe2, 0x1a, 0xe9, 0xb6, 0xad, 0x39,
	0x24, 0x10, 0x30, 0x35, 0x20, 0xba, 0x46, 0x62, 0x94, 0xb8, 0xb6, 0x35, 0xda, 0x68, 0x34, 0x34,
	0xb5, 0xba, 0x55, 0x53, 0xf9, 0x1a, 0x89, 0x2f, 0x61, 0x97, 0xc6, 0x9b, 0x19, 0x48, 0x19, 0x5d,
	0x16, 0x07, 0xb7, 0x60, 0x2e, 0x10, 0xfd, 0x1a, 0xfd, 0x6c, 0x44, 0x8d, 0xb0, 0x9f, 0xfd, 0x37,
	0x09, 0x10, 0xf3, 0x05, 0xbf, 0x5f, 0xa3, 0x46, 0x78, 0x1b, 0x66, 0xb9, 0x93, 0xf6, 0x68, 0x41,
	0xc7, 0xcb, 0xa1, 0xbc, 0x9a, 0x67, 0xe4, 0x5d, 0x42, 0xad, 0x75, 0xa2, 0xd7, 0xdc, 0x53, 0xd1,
	0xcf, 0x3a, 0x6e, 0x01, 0xf8, 0xbb, 0xae, 0x33, 0xe4, 0x29, 0x3a, 0xc3, 0x28, 0xb5, 0xce, 0x90,
	0xb0, 0xcd, 0x41, 0x9f, 0x95, 0x5c, 0x2e, 0xcf, 0xd7, 0x19, 0x73, 0xd0, 0xa7, 0x95, 0x96, 0x8b,
	0xbe, 0x03, 0xd9, 0xe3, 0x97, 0x5a, 0x50, 0x4d, 0x4e, 0x33, 0xfe, 0xf1, 0xcb, 0x06, 0xab, 0x1c,
	0x95, 0x5f, 0x48, 0x90, 0x27, 0x9b, 0x9c, 0xb6, 0x49, 0x54, 0xe7, 0x2f, 0x60, 0x21, 0xda, 0x53,
	0xc5, 0x4f, 0x0b, 0x5e, 0xb7, 0xad, 0x2a, 0x89, 0x6d, 0x55, 0x10, 0x38, 0x6f, 0x43, 0xce, 0x30,
	0x6d, 0xcd, 0x76, 0x2c, 0x9b, 0x4e, 0x88, 0xcd, 0x16, 0x0c, 0xd3, 0x6e, 0x38, 0x96, 0x5d, 0xeb,
	0x0c, 0x95, 0xbf, 0x90, 0x20, 0xdf, 0xec, 0xeb, 0x8e, 0x17, 0x04, 0x9f, 0x4f, 0x60, 0x29, 0x18,
	0x43, 0x1a, 0x49, 0xde, 0x25, 0x0e, 0xb5, 0x63, 0x8b, 0x7f, 0x41, 0x96, 0x57, 0xe7, 0xb9, 0x84,
	0x3d, 0xbd, 0xcd, 0x1a, 0xc6, 0xe1, 0x23, 0xcb, 0xf5, 0xd0, 0x47, 0xb0, 0x38, 0x7e, 0xa8, 0x89,
	0x3d, 0xfe, 0xee, 0xd2, 0xc8, 0xc8, 0x3a, 0xf6, 0x94, 0xbf, 0x96, 0x60, 0xb6, 0x12, 0x2d, 0xdd,
	0xd1, 0xa7, 0x82, 0x1e, 0xa6, 0xee, 0x31, 0xa3, 0x6b, 0xbc, 0xc0, 0xe7, 0x7a, 0xdc, 0xe4, 0xd2,
	0xea, 0xba, 0x47, 0x97, 0x80, 0xcb, 0x40, 0x9f, 0xc3, 0x2c, 0x2b, 0x2f, 0xdd, 0x63, 0xc3, 0xf6,
	0x2b, 0x1f, 0xc1, 0xb1, 0x22, 0x8b, 0xa0, 0x16, 0x42, 0x2c, 0x79, 0x56, 0xfe, 0x4f, 0x02, 0x99,
	0x20, 0x22, 0xde, 0x45, 0xbb, 0x66, 0xa3, 0x1d, 0xf7, 0xad, 0x2c, 0x21, 0xfa, 0x9e, 0x75, 0x07,
	0xe4, 0xb0, 0xdf, 0x13, 0xd2, 0x5e, 0x5e, 0x2d, 0x70, 0x1f, 0xf2, 0x6f, 0x4d, 0x1f, 0xc2, 0xac,
	0x4b, 0xac, 0x2e, 0x24, 0x1a, 0x56, 0x00, 0x71, 0x05, 0x23, 0x4b, 0xf2, 0xe8, 0x86, 0x9a, 0x77,
	0x23, 0x6b, 0x54, 0x19, 0xd7, 0x73, 0x25, 0xc5, 0x0a, 0x2a, 0x66, 0xcd, 0x71, 0xbd, 0x51, 0x01,
	0x72, 0x7e, 0x77, 0x4c, 0xa7, 0xbd, 0x0e, 0x45, 0x12, 0x4f, 0xba, 0x91, 0x69, 0xdf, 0x86, 0x1c,
	0x3d, 0x16, 0x8b, 0xce, 0x1a, 0xda, 0xf6, 0x80, 0x4f, 0x5a, 0xf9, 0x99, 0x04, 0x25, 0x1e, 0x0a,
	0xa3, 0x43, 0xff, 0x18, 0x66, 0xc9, 0x02, 0xf6, 0x75, 0xb6, 0x7e, 0xc4, 0xff, 0xc8, 0xee, 0xce,
	0xab, 0xc4, 0x27, 0xf7, 0x74, 0xb2, 0x68, 0x64, 0x4f, 0x09, 0x30, 0xcf, 0xec, 0x71, 0x37, 0x15,
	0x60, 0x2d, 0xb3, 0x47, 0x60, 0x0a, 0xe4, 0x79, 0xac, 0x77, 0x5e, 0x0a, 0x9b, 0x33, 0xcb, 0x88,
	0xea, 0x4b, 0xe2, 0xcc, 0xef, 0x41, 0x21, 0x88, 0x3f, 0x5d, 0xaa, 0xc3, 0x22, 0xa4, 0x63, 0xaa,
	0xa7, 0x7a, 0x5c, 0xef, 0x5f, 0x24, 0x61, 0x36, 0x0c, 0x30, 0x57, 0xfb, 0x7a, 0xe7, 0x3a, 0x8b,
	0x9b, 0xf7, 0x20, 0xf3, 0xaa, 0x4f, 0x78, 0xd2, 0xc1, 0x17, 0x3c, 0x6f, 0x50, 0x70, 0xe4, 0x03,
	0x9e, 0x74, 0x70, 0x15, 0xff, 0x19, 0x64, 0xc5, 0x92, 0x81, 0x55, 0x2e, 0x65, 0x26, 0x6b, 0x34,
	0x5e, 0x92, 0x9a, 0x63, 0x10, 0xa6, 0xf9, 0x75, 0xf1, 0x2c, 0x61, 0x86, 0x4f, 0x27, 0xd8, 0x2c,
	0xb1, 0x81, 0x61, 0xfb, 0x7f, 0x9f, 0x9e, 0xb2, 0x8b, 0x35, 0xc1, 0x42, 0x70, 0x62, 0x1a, 0xf5,
	0x07, 0x52, 0x65, 0xb7, 0x79, 0xbe, 0x7a, 0x08, 0xd9, 0xd1, 0xc4, 0xbd, 0xc4, 0x06, 0x8e, 0xf3,
	0x25, 0xa2, 0xab, 0x17, 0xa6, 0xdb, 0xcf, 0xa1, 0x10, 0x4b, 0x75, 0x19, 0x31, 0xd5, 0x45, 0x7d,
	0x80, 0x24, 0x6b, 0x7d, 0x34, 0x2b, 0x21, 0x90, 0x8d, 0xae, 0xe6, 0x1f, 0xf3, 0xb1, 0xf4, 0xf4,
	0x73, 0x09, 0x8a, 0x42, 0x7e, 0xba, 0xe6, 0xb3, 0xd2, 0x7b, 0xb1, 0x0f, 0x81, 0xe6, 0xe3, 0x49,
	0x2e, 0x72, 0x1c, 0xaa, 0x3c, 0x81, 0xd2, 0x88, 0x2e, 0x97, 0xde, 0x97, 0x8f, 0xa0, 0x85, 0x53,
	0xcc, 0x0e, 0xdc, 0x0c, 0xd8, 0xd1, 0x4f, 0x10, 0x1e, 0x8f, 0x3f, 0xa5, 0xfe, 0x26, 0xae, 0xac,
	0x34, 0x61, 0x71, 0xfc, 0x5b, 0x88, 0xde, 0x0f, 0xe2, 0x49, 0xfe, 0xcd, 0x98, 0xda, 0x13, 0x3e,
	0x4a, 0xd0, 0x61, 0x61, 0x04, 0x72, 0xcd, 0x9f, 0x26, 0xfc, 0x00, 0x96, 0x26, 0xbc, 0x82, 0x28,
	0xfe, 0xc9, 0x88, 0xc1, 0x6f, 0x4d, 0xd0, 0x7c, 0xc4, 0xec, 0xff, 0x24, 0x41, 0x21, 0xb2, 0xbe,
	0xee, 0x98, 0xbb, 0x26, 0x69, 0xcc, 0x5d, 0xd3, 0x6d, 0xc8, 0x71, 0x14, 0xbd, 0xf3, 0xe4, 0xf7,
	0x51, 0x40, 0x31, 0xf4, 0xb2, 0xf3, 0x35, 0x6f, 0xa3, 0xb8, 0x1c, 0xc7, 0x97, 0x93, 0x0c, 0xe4,
	0xa8, 0x4c, 0x8e, 0xa2, 0x0b, 0x25, 0x99, 0x70, 0x79, 0x71, 0x9d, 0x6e, 0xb1, 0x27, 0x38, 0x5f,
	0xf4, 0x22, 0xe3, 0xc3, 0xb8, 0x4f, 0x2c, 0xc6, 0x2c, 0x3b, 0xee, 0x3a, 0xe3, 0x3f, 0x25, 0x61,
	0x67, 0x7c, 0x1b, 0x97, 0x1a, 0xef, 0x44, 0x2e, 0x35, 0xc6, 0xd6, 0xa2, 0xec, 0x6a, 0xe3, 0x5e,
	0xec, 0x6a, 0xe3, 0xf2, 0x1d, 0x8d, 0xee, 0x46, 0x2f, 0x38, 0x4a, 0x63, 0xd0, 0xfe, 0x35, 0x87,
	0xf2, 0x95, 0x24, 0xb8, 0x7d, 0xec, 0x12, 0xe3, 0xfd, 0xd7, 0x99, 0xa7, 0x38, 0xa1, 0x07, 0x82,
	0x07, 0xb3, 0x3a, 0x68, 0x69, 0x9c, 0x9d, 0x47, 0xdc, 0xf7, 0x3f, 0x24, 0x61, 0xe5, 0x82, 0x22,
	0x94, 0x1e, 0x03, 0x7c, 0xcb, 0x85, 0xeb, 0x63, 0xc8, 0xc7, 0x8f, 0x29, 0xaf, 0x72, 0x64, 0x9e,
	0x15, 0xce, 0x38, 0x94, 0x43, 0x78, 0x73, 0x74, 0x12, 0x57, 0x09, 0x4c, 0x91, 0x99, 0x87, 0x7e,
	0xd8, 0x11, 0xa2, 0x86, 0x20, 0xf7, 0x9a, 0x63, 0xd3, 0x17, 0x70, 0x6b, 0xf2, 0x5b, 0x88, 0xfa,
	0x9f, 0x8f, 0x84, 0xa7, 0xdb, 0x93, 0xf4, 0x1f, 0x5d, 0xe2, 0xbb, 0x5b, 0x90, 0xf6, 0xcb, 0x0c,
	0x84, 0xa0, 0x50, 0xdb, 0xd6, 0x9a, 0xad, 0x8d, 0xd6, 0x41, 0x53, 0xab, 0xef, 0xd7, 0xab, 0xf2,
	0x0d, 0x24, 0x43, 0x2e, 0xa4, 0x1d, 0x34, 0x64, 0x29, 0x8a, 0xda, 0xda, 0xff, 0x41, 0x5d, 0x9e,
	0xba, 0xfb, 0x37, 0xec, 0xdb, 0x59, 0xd2, 0xe7, 0xd0, 0x53, 0xc7, 0x9b, 0x80, 0x76, 0x6b, 0xdb,
	0x5a, 0x63, 0x5f, 0x6d, 0xb1, 0x36, 0x91, 0x4b, 0x9b, 0x87, 0x62, 0x94, 0xbe, 0xb5, 0xb7, 0x21,
	0x4b, 0xe8, 0x4d, 0x28, 0x47, 0xc9, 0x8d, 0xfb, 0x5a, 0xad, 0xbe, 0xa3, 0x56, 0x9b, 0x4d, 0x79,
	0x0a, 0xbd, 0x01, 0x0b, 0x23, 0xdc, 0x2a, 0x63, 0x26, 0xc6, 0xbc, 0xa9, 0xd2, 0xac, 0xc9, 0xc9,
	0xbb, 0x3f, 0x4b, 0x50, 0x8d, 0xfc, 0xff, 0x92, 0x41, 0x4b, 0x70, 0x93, 0xe0, 0x9e, 0x1e, 0x54,
	0x0f, 0xaa, 0x5a, 0xe3, 0x40, 0x6d, 0xec, 0x37, 0x03, 0xad, 0xf8, 0x0b, 0xa2, 0xbc, 0x8d, 0xad,
	0xbd, 0x5a, 0x5d, 0x96, 0x50, 0x19, 0x4a, 0xa3, 0xcc, 0xd6, 0x33, 0x79, 0x6a, 0x3c, 0x47, 0x7d,
	0x26, 0x27, 0xd0, 0x32, 0xbc, 0x31, 0x86, 0xb3, 0xb5, 0xb7, 0xa1, 0x35, 0xab, 0xf5, 0x2d, 0x39,
	0x79, 0x09, 0x40, 0xad, 0x56, 0x0e, 0xe5, 0xe9, 0xf1, 0xb2, 0x2b, 0x4f, 0xe5, 0x99, 0xf1, 0x9c,
	0xea, 0x53, 0x39, 0x35, 0x61, 0x8a, 0x87, 0x7b, 0x55, 0x39, 0x8d, 0x6e, 0xc1, 0xe2, 0x28, 0xaf,
	0xd9, 0xda, 0x57, 0x37, 0x76, 0xaa, 0x72, 0x66, 0xbc, 0x3e, 0x87, 0x35, 0xb5, 0x55, 0xdb, 0x27,
	0x73, 0x85, 0x4b, 0x01, 0xea, 0x33, 0x39, 0x8b, 0x16, 0x61, 0x7e, 0xcc, 0x0b, 0x0e, 0x2b, 0x72,
	0xee, 0xee, 0x2f, 0x25, 0x98, 0x61, 0x87, 0x75, 0xdc, 0x9b, 0x44, 0x8f, 0x10, 0x28, 0xd5, 0x7a,
	0xad, 0x12, 0xf8, 0x97, 0x70, 0x00, 0x24, 0x4f, 0x11, 0xbf, 0x19, 0x39, 0x14, 0x92, 0x13, 0x22,
	0x94, 0x9d, 0xcc, 0xc8, 0x49, 0x34, 0x0b, 0x59, 0xe1, 0x9c, 0x44, 0x9e, 0x16, 0xc7, 0x06, 0x87,
	0x15, 0xf2, 0xcc, 0xdd, 0xff, 0x91, 0xfc, 0x8b, 0x5d, 0xaa, 0x59, 0x11, 0xf2, 0x6a, 0xb3, 0x19,
	0x51, 0x4d, 0x24, 0xd5, 0x1a, 0x87, 0xf7, 0x65, 0x89, 0xc8, 0x8a, 0x90, 0xb4, 0x56, 0xa5, 0xc1,
	0xd4, 0x8b, 0x92, 0x0f, 0xb6, 0x1a, 0x72, 0x32, 0x2e, 0xe0, 0x81, 0x9c, 0x8e, 0x23, 0x1f, 0x50,
	0x01, 0xf2, 0x28, 0x99, 0x08, 0xb8, 0x8d, 0x4a, 0x20, 0x47, 0xc9, 0xd5, 0x67, 0xf2, 0xf7, 0xd1,
	0x22, 0x94, 0x46, 0x64, 0x10, 0xce, 0x97, 0xd2, 0x28, 0xeb, 0x60, 0x8b, 0xb1, 0xa6, 0xee, 0x7e,
	0x2d, 0xf9, 0x77, 0xa6, 0x74, 0xbe, 0xcc, 0x2a, 0xe1, 0x25, 0x5a, 0xb8, 0x41, 0x47, 0xee, 0xfb,
	0x64, 0x89, 0xec, 0xb2, 0x08, 0xb9, 0x71, 0xb8, 0xbb, 0x51, 0x97, 0xa7, 0xd0, 0x02, 0xcc, 0x45,
	0xe8, 0x5b, 0x35, 0xb5, 0x5a, 0x69, 0xc9, 0x09, 0xe2, 0xa5, 0xe3, 0xee, 0xe8, 0xe4, 0x24, 0x99,
	0x53, 0x84, 0xb3, 0xb3, 0xdd, 0x92, 0xa7, 0xef, 0xda, 0xe1, 0xd5, 0x4f, 0x70, 0x8d, 0x41, 0x9c,
	0x76, 0xec, 0x99, 0x3d, 0xd7, 0xf5, 0x3b, 0xb0, 0x34, 0xf9, 0xaa, 0x81, 0x45, 0x95, 0x49, 0x47,
	0xfe, 0xf2, 0xd4, 0xda, 0xaf, 0x52, 0x90, 0x09, 0x22, 0x24, 0xfa, 0x98, 0xfe, 0x63, 0x43, 0xc5,
	0xc1, 0xba, 0x87, 0xd1, 0x9c, 0xf0, 0x8d, 0xbb, 0x9f, 0x25, 0x96, 0x4a, 0x23, 0x1f, 0xbe, 0xef,
	0xb9, 0xcf, 0x95, 0x1b, 0x7c, 0xe4, 0x81, 0xdd, 0xb9, 0xf2, 0xc8, 0x2d, 0x3a, 0x92, 0xd5, 0x8e,
	0x68, 0x71, 0xfc, 0xb7, 0xb9, 0x64, 0xfc, 0xd2, 0x84, 0xcf, 0x61, 0x99, 0x94, 0xcf, 0x60, 0x86,
	0x7d, 0xbb, 0x80, 0x6e, 0x8e, 0xf9, 0x08, 0x84, 0x8c, 0x5f, 0x18, 0xf7, 0x85, 0x03, 0x1b, 0xbc,
	0x03, 0x39, 0x46, 0xf6, 0xff, 0xa5, 0x83, 0x41, 0xc7, 0x7c, 0x44, 0xef, 0x6b, 0x31, 0xee, 0xc3,
	0xf5, 0x40, 0x50, 0x33, 0x2e, 0xa8, 0x39, 0x59, 0x50, 0x73, 0xbc, 0xa0, 0xc7, 0x42, 0x53, 0xce,
	0x97, 0x63, 0x71, 0xa4, 0xbd, 0x89, 0xcb, 0x1a, 0xd7, 0x27, 0xc5, 0x64, 0xf1, 0x05, 0xfa, 0xc6,
	0xb2, 0x0e, 0x05, 0x59, 0x7c, 0xc9, 0x96, 0x2f, 0xeb, 0x5f, 0x88, 0xc4, 0xdb, 0x97, 0xb6, 0x09,
	0x4c, 0xee, 0x1e, 0xe4, 0xc4, 0x22, 0x0c, 0xbd, 0x39, 0xb1, 0x00, 0x26, 0x12, 0x6f, 0x4d, 0x2e,
	0xdb, 0x98, 0x38, 0x1d, 0x4a, 0x1b, 0x9d, 0x4e, 0x90, 0xf0, 0xf7, 0x4d, 0xd6, 0xf7, 0x23, 0x65,
	0x72, 0x49, 0x10, 0x08, 0xff, 0xa3, 0x57, 0x95, 0x0d, 0xc1, 0x2b, 0xb6, 0x70, 0xef, 0xdb, 0x7c,
	0xc5, 0x26, 0xfc, 0x69, 0xfa, 0x58, 0xef, 0xd1, 0xff, 0xb0, 0x3d, 0x9a, 0xa1, 0x7f, 0x3e, 0xfc,
	0x5d, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x3b, 0xdf, 0xa6, 0xb1, 0x3b, 0x00, 0x00,
}
