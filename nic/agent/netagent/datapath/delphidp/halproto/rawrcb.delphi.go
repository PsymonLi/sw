// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rawrcb.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// RawrCbKeyHandle is used to operate on a rawrcb either by its key or handle
type RawrCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*RawrCbKeyHandle_RawrcbId
	//	*RawrCbKeyHandle_RawrcbHandle
	KeyOrHandle isRawrCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *RawrCbKeyHandle) Reset()                    { *m = RawrCbKeyHandle{} }
func (m *RawrCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*RawrCbKeyHandle) ProtoMessage()               {}
func (*RawrCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{0} }

type isRawrCbKeyHandle_KeyOrHandle interface{ isRawrCbKeyHandle_KeyOrHandle() }

type RawrCbKeyHandle_RawrcbId struct {
	RawrcbId uint32 `protobuf:"varint,1,opt,name=rawrcb_id,json=rawrcbId,oneof"`
}
type RawrCbKeyHandle_RawrcbHandle struct {
	RawrcbHandle uint64 `protobuf:"fixed64,2,opt,name=rawrcb_handle,json=rawrcbHandle,oneof"`
}

func (*RawrCbKeyHandle_RawrcbId) isRawrCbKeyHandle_KeyOrHandle()     {}
func (*RawrCbKeyHandle_RawrcbHandle) isRawrCbKeyHandle_KeyOrHandle() {}

func (m *RawrCbKeyHandle) GetKeyOrHandle() isRawrCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *RawrCbKeyHandle) GetRawrcbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*RawrCbKeyHandle_RawrcbId); ok {
		return x.RawrcbId
	}
	return 0
}

func (m *RawrCbKeyHandle) GetRawrcbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*RawrCbKeyHandle_RawrcbHandle); ok {
		return x.RawrcbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RawrCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RawrCbKeyHandle_OneofMarshaler, _RawrCbKeyHandle_OneofUnmarshaler, _RawrCbKeyHandle_OneofSizer, []interface{}{
		(*RawrCbKeyHandle_RawrcbId)(nil),
		(*RawrCbKeyHandle_RawrcbHandle)(nil),
	}
}

func _RawrCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RawrCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *RawrCbKeyHandle_RawrcbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.RawrcbId))
	case *RawrCbKeyHandle_RawrcbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.RawrcbHandle))
	case nil:
	default:
		return fmt.Errorf("RawrCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _RawrCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RawrCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.rawrcb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &RawrCbKeyHandle_RawrcbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.rawrcb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &RawrCbKeyHandle_RawrcbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _RawrCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RawrCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *RawrCbKeyHandle_RawrcbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.RawrcbId))
	case *RawrCbKeyHandle_RawrcbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RawrCbSpec captures all the rawrcb level configuration
type RawrCbSpec struct {
	Meta                    *ObjectMeta      `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle             *RawrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	RawrcbFlags             uint32           `protobuf:"varint,3,opt,name=rawrcb_flags,json=rawrcbFlags" json:"rawrcb_flags,omitempty"`
	ChainRxqBase            uint64           `protobuf:"varint,4,opt,name=chain_rxq_base,json=chainRxqBase" json:"chain_rxq_base,omitempty"`
	ChainRxqRingIndicesAddr uint64           `protobuf:"varint,5,opt,name=chain_rxq_ring_indices_addr,json=chainRxqRingIndicesAddr" json:"chain_rxq_ring_indices_addr,omitempty"`
	ChainRxqRingSizeShift   uint32           `protobuf:"varint,6,opt,name=chain_rxq_ring_size_shift,json=chainRxqRingSizeShift" json:"chain_rxq_ring_size_shift,omitempty"`
	ChainRxqEntrySizeShift  uint32           `protobuf:"varint,7,opt,name=chain_rxq_entry_size_shift,json=chainRxqEntrySizeShift" json:"chain_rxq_entry_size_shift,omitempty"`
	ChainRxqRingIndexSelect uint32           `protobuf:"varint,8,opt,name=chain_rxq_ring_index_select,json=chainRxqRingIndexSelect" json:"chain_rxq_ring_index_select,omitempty"`
	ChainTxqBase            uint64           `protobuf:"varint,9,opt,name=chain_txq_base,json=chainTxqBase" json:"chain_txq_base,omitempty"`
	ChainTxqRingIndicesAddr uint64           `protobuf:"varint,10,opt,name=chain_txq_ring_indices_addr,json=chainTxqRingIndicesAddr" json:"chain_txq_ring_indices_addr,omitempty"`
	ChainTxqRingSizeShift   uint32           `protobuf:"varint,11,opt,name=chain_txq_ring_size_shift,json=chainTxqRingSizeShift" json:"chain_txq_ring_size_shift,omitempty"`
	ChainTxqEntrySizeShift  uint32           `protobuf:"varint,12,opt,name=chain_txq_entry_size_shift,json=chainTxqEntrySizeShift" json:"chain_txq_entry_size_shift,omitempty"`
	ChainTxqRingIndexSelect uint32           `protobuf:"varint,13,opt,name=chain_txq_ring_index_select,json=chainTxqRingIndexSelect" json:"chain_txq_ring_index_select,omitempty"`
	ChainTxqLif             uint32           `protobuf:"varint,14,opt,name=chain_txq_lif,json=chainTxqLif" json:"chain_txq_lif,omitempty"`
	ChainTxqQtype           uint32           `protobuf:"varint,15,opt,name=chain_txq_qtype,json=chainTxqQtype" json:"chain_txq_qtype,omitempty"`
	ChainTxqQid             uint32           `protobuf:"varint,16,opt,name=chain_txq_qid,json=chainTxqQid" json:"chain_txq_qid,omitempty"`
	//
	// 64-bit statistic counters
	StatPktsRedir   uint64 `protobuf:"varint,17,opt,name=stat_pkts_redir,json=statPktsRedir" json:"stat_pkts_redir,omitempty"`
	StatPktsDiscard uint64 `protobuf:"varint,18,opt,name=stat_pkts_discard,json=statPktsDiscard" json:"stat_pkts_discard,omitempty"`
	//
	// 32-bit saturating statistic counters
	StatCbNotReady        uint32 `protobuf:"varint,19,opt,name=stat_cb_not_ready,json=statCbNotReady" json:"stat_cb_not_ready,omitempty"`
	StatQstateCfgErr      uint32 `protobuf:"varint,20,opt,name=stat_qstate_cfg_err,json=statQstateCfgErr" json:"stat_qstate_cfg_err,omitempty"`
	StatPktLenErr         uint32 `protobuf:"varint,21,opt,name=stat_pkt_len_err,json=statPktLenErr" json:"stat_pkt_len_err,omitempty"`
	StatRxqFull           uint32 `protobuf:"varint,22,opt,name=stat_rxq_full,json=statRxqFull" json:"stat_rxq_full,omitempty"`
	StatTxqFull           uint32 `protobuf:"varint,23,opt,name=stat_txq_full,json=statTxqFull" json:"stat_txq_full,omitempty"`
	StatDescSemAllocFull  uint32 `protobuf:"varint,24,opt,name=stat_desc_sem_alloc_full,json=statDescSemAllocFull" json:"stat_desc_sem_alloc_full,omitempty"`
	StatMpageSemAllocFull uint32 `protobuf:"varint,25,opt,name=stat_mpage_sem_alloc_full,json=statMpageSemAllocFull" json:"stat_mpage_sem_alloc_full,omitempty"`
	StatPpageSemAllocFull uint32 `protobuf:"varint,26,opt,name=stat_ppage_sem_alloc_full,json=statPpageSemAllocFull" json:"stat_ppage_sem_alloc_full,omitempty"`
	StatSemFreeFull       uint32 `protobuf:"varint,27,opt,name=stat_sem_free_full,json=statSemFreeFull" json:"stat_sem_free_full,omitempty"`
}

func (m *RawrCbSpec) Reset()                    { *m = RawrCbSpec{} }
func (m *RawrCbSpec) String() string            { return proto.CompactTextString(m) }
func (*RawrCbSpec) ProtoMessage()               {}
func (*RawrCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{1} }

func (m *RawrCbSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RawrCbSpec) GetKeyOrHandle() *RawrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *RawrCbSpec) GetRawrcbFlags() uint32 {
	if m != nil {
		return m.RawrcbFlags
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqBase() uint64 {
	if m != nil {
		return m.ChainRxqBase
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqRingIndicesAddr() uint64 {
	if m != nil {
		return m.ChainRxqRingIndicesAddr
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqRingSizeShift() uint32 {
	if m != nil {
		return m.ChainRxqRingSizeShift
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqEntrySizeShift() uint32 {
	if m != nil {
		return m.ChainRxqEntrySizeShift
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqRingIndexSelect() uint32 {
	if m != nil {
		return m.ChainRxqRingIndexSelect
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqBase() uint64 {
	if m != nil {
		return m.ChainTxqBase
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqRingIndicesAddr() uint64 {
	if m != nil {
		return m.ChainTxqRingIndicesAddr
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqRingSizeShift() uint32 {
	if m != nil {
		return m.ChainTxqRingSizeShift
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.ChainTxqEntrySizeShift
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqRingIndexSelect() uint32 {
	if m != nil {
		return m.ChainTxqRingIndexSelect
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqLif() uint32 {
	if m != nil {
		return m.ChainTxqLif
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqQtype() uint32 {
	if m != nil {
		return m.ChainTxqQtype
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqQid() uint32 {
	if m != nil {
		return m.ChainTxqQid
	}
	return 0
}

func (m *RawrCbSpec) GetStatPktsRedir() uint64 {
	if m != nil {
		return m.StatPktsRedir
	}
	return 0
}

func (m *RawrCbSpec) GetStatPktsDiscard() uint64 {
	if m != nil {
		return m.StatPktsDiscard
	}
	return 0
}

func (m *RawrCbSpec) GetStatCbNotReady() uint32 {
	if m != nil {
		return m.StatCbNotReady
	}
	return 0
}

func (m *RawrCbSpec) GetStatQstateCfgErr() uint32 {
	if m != nil {
		return m.StatQstateCfgErr
	}
	return 0
}

func (m *RawrCbSpec) GetStatPktLenErr() uint32 {
	if m != nil {
		return m.StatPktLenErr
	}
	return 0
}

func (m *RawrCbSpec) GetStatRxqFull() uint32 {
	if m != nil {
		return m.StatRxqFull
	}
	return 0
}

func (m *RawrCbSpec) GetStatTxqFull() uint32 {
	if m != nil {
		return m.StatTxqFull
	}
	return 0
}

func (m *RawrCbSpec) GetStatDescSemAllocFull() uint32 {
	if m != nil {
		return m.StatDescSemAllocFull
	}
	return 0
}

func (m *RawrCbSpec) GetStatMpageSemAllocFull() uint32 {
	if m != nil {
		return m.StatMpageSemAllocFull
	}
	return 0
}

func (m *RawrCbSpec) GetStatPpageSemAllocFull() uint32 {
	if m != nil {
		return m.StatPpageSemAllocFull
	}
	return 0
}

func (m *RawrCbSpec) GetStatSemFreeFull() uint32 {
	if m != nil {
		return m.StatSemFreeFull
	}
	return 0
}

// RawrCbRequestMsg is batched add or modify rawrcb request
type RawrCbRequestMsg struct {
	Request []*RawrCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawrCbRequestMsg) Reset()                    { *m = RawrCbRequestMsg{} }
func (m *RawrCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbRequestMsg) ProtoMessage()               {}
func (*RawrCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{2} }

func (m *RawrCbRequestMsg) GetRequest() []*RawrCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawrCbStatus is the operational status of a given rawrcb
type RawrCbStatus struct {
	RawrcbHandle uint64 `protobuf:"fixed64,1,opt,name=rawrcb_handle,json=rawrcbHandle" json:"rawrcb_handle,omitempty"`
}

func (m *RawrCbStatus) Reset()                    { *m = RawrCbStatus{} }
func (m *RawrCbStatus) String() string            { return proto.CompactTextString(m) }
func (*RawrCbStatus) ProtoMessage()               {}
func (*RawrCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{3} }

func (m *RawrCbStatus) GetRawrcbHandle() uint64 {
	if m != nil {
		return m.RawrcbHandle
	}
	return 0
}

// RawrCbResponse is response to RawrCbSpec
type RawrCbResponse struct {
	ApiStatus    ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	RawrcbStatus *RawrCbStatus `protobuf:"bytes,2,opt,name=rawrcb_status,json=rawrcbStatus" json:"rawrcb_status,omitempty"`
}

func (m *RawrCbResponse) Reset()                    { *m = RawrCbResponse{} }
func (m *RawrCbResponse) String() string            { return proto.CompactTextString(m) }
func (*RawrCbResponse) ProtoMessage()               {}
func (*RawrCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{4} }

func (m *RawrCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RawrCbResponse) GetRawrcbStatus() *RawrCbStatus {
	if m != nil {
		return m.RawrcbStatus
	}
	return nil
}

// RawrCbResponseMsg is batched response to RawrCbRequestMsg
type RawrCbResponseMsg struct {
	Response []*RawrCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RawrCbResponseMsg) Reset()                    { *m = RawrCbResponseMsg{} }
func (m *RawrCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbResponseMsg) ProtoMessage()               {}
func (*RawrCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{5} }

func (m *RawrCbResponseMsg) GetResponse() []*RawrCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RawrCbDeleteRequest is used to delete a rawrcb
type RawrCbDeleteRequest struct {
	Meta        *ObjectMeta      `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *RawrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *RawrCbDeleteRequest) Reset()                    { *m = RawrCbDeleteRequest{} }
func (m *RawrCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*RawrCbDeleteRequest) ProtoMessage()               {}
func (*RawrCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{6} }

func (m *RawrCbDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RawrCbDeleteRequest) GetKeyOrHandle() *RawrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// RawrCbDeleteRequestMsg is used to delete a batch of rawrcbs
type RawrCbDeleteRequestMsg struct {
	Request []*RawrCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawrCbDeleteRequestMsg) Reset()                    { *m = RawrCbDeleteRequestMsg{} }
func (m *RawrCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbDeleteRequestMsg) ProtoMessage()               {}
func (*RawrCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{7} }

func (m *RawrCbDeleteRequestMsg) GetRequest() []*RawrCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawrCbDeleteResponseMsg is batched response to RawrCbDeleteRequestMsg
type RawrCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *RawrCbDeleteResponseMsg) Reset()                    { *m = RawrCbDeleteResponseMsg{} }
func (m *RawrCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbDeleteResponseMsg) ProtoMessage()               {}
func (*RawrCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{8} }

func (m *RawrCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// RawrCbGetRequest is used to get information about a rawrcb
type RawrCbGetRequest struct {
	Meta        *ObjectMeta      `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *RawrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *RawrCbGetRequest) Reset()                    { *m = RawrCbGetRequest{} }
func (m *RawrCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*RawrCbGetRequest) ProtoMessage()               {}
func (*RawrCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{9} }

func (m *RawrCbGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RawrCbGetRequest) GetKeyOrHandle() *RawrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// RawrCbGetRequestMsg is batched GET requests for rawrcbs
type RawrCbGetRequestMsg struct {
	Request []*RawrCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawrCbGetRequestMsg) Reset()                    { *m = RawrCbGetRequestMsg{} }
func (m *RawrCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbGetRequestMsg) ProtoMessage()               {}
func (*RawrCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{10} }

func (m *RawrCbGetRequestMsg) GetRequest() []*RawrCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawrCbStats is the statistics object for each rawrcb
type RawrCbStats struct {
}

func (m *RawrCbStats) Reset()                    { *m = RawrCbStats{} }
func (m *RawrCbStats) String() string            { return proto.CompactTextString(m) }
func (*RawrCbStats) ProtoMessage()               {}
func (*RawrCbStats) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{11} }

// RawrCbGetResponse captures all the information about a rawrcb
// only if api_status indicates success, other fields are valid
type RawrCbGetResponse struct {
	ApiStatus ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *RawrCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *RawrCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *RawrCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *RawrCbGetResponse) Reset()                    { *m = RawrCbGetResponse{} }
func (m *RawrCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*RawrCbGetResponse) ProtoMessage()               {}
func (*RawrCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{12} }

func (m *RawrCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RawrCbGetResponse) GetSpec() *RawrCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *RawrCbGetResponse) GetStatus() *RawrCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RawrCbGetResponse) GetStats() *RawrCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// RawrCbGetResponseMsg is batched response to RawrCbGetRequestMsg
type RawrCbGetResponseMsg struct {
	Response []*RawrCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RawrCbGetResponseMsg) Reset()                    { *m = RawrCbGetResponseMsg{} }
func (m *RawrCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbGetResponseMsg) ProtoMessage()               {}
func (*RawrCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{13} }

func (m *RawrCbGetResponseMsg) GetResponse() []*RawrCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*RawrCbKeyHandle)(nil), "halproto.RawrCbKeyHandle")
	proto.RegisterType((*RawrCbSpec)(nil), "halproto.RawrCbSpec")
	proto.RegisterType((*RawrCbRequestMsg)(nil), "halproto.RawrCbRequestMsg")
	proto.RegisterType((*RawrCbStatus)(nil), "halproto.RawrCbStatus")
	proto.RegisterType((*RawrCbResponse)(nil), "halproto.RawrCbResponse")
	proto.RegisterType((*RawrCbResponseMsg)(nil), "halproto.RawrCbResponseMsg")
	proto.RegisterType((*RawrCbDeleteRequest)(nil), "halproto.RawrCbDeleteRequest")
	proto.RegisterType((*RawrCbDeleteRequestMsg)(nil), "halproto.RawrCbDeleteRequestMsg")
	proto.RegisterType((*RawrCbDeleteResponseMsg)(nil), "halproto.RawrCbDeleteResponseMsg")
	proto.RegisterType((*RawrCbGetRequest)(nil), "halproto.RawrCbGetRequest")
	proto.RegisterType((*RawrCbGetRequestMsg)(nil), "halproto.RawrCbGetRequestMsg")
	proto.RegisterType((*RawrCbStats)(nil), "halproto.RawrCbStats")
	proto.RegisterType((*RawrCbGetResponse)(nil), "halproto.RawrCbGetResponse")
	proto.RegisterType((*RawrCbGetResponseMsg)(nil), "halproto.RawrCbGetResponseMsg")
}

func init() { proto.RegisterFile("rawrcb.proto", fileDescriptor30) }

var fileDescriptor30 = []byte{
	// 1020 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x5b, 0x73, 0xdb, 0x44,
	0x14, 0xae, 0x9b, 0xd4, 0x4d, 0x8e, 0xe3, 0x4b, 0x36, 0x69, 0xb2, 0x4e, 0xb8, 0x04, 0x41, 0x4b,
	0x0a, 0x25, 0xcc, 0xb8, 0x03, 0x53, 0x2e, 0x0f, 0xe4, 0xda, 0x04, 0x6a, 0xd2, 0xc8, 0xe6, 0x85,
	0x17, 0xcd, 0x5a, 0x3a, 0xb6, 0x45, 0x64, 0x59, 0xde, 0xdd, 0x50, 0xbb, 0xc3, 0x3f, 0xe2, 0x91,
	0xdf, 0xc0, 0xff, 0x62, 0x76, 0x57, 0x8a, 0x2c, 0x45, 0x09, 0x33, 0x30, 0xd3, 0x97, 0xc4, 0x3a,
	0xe7, 0xfb, 0xbe, 0xb3, 0xe7, 0xdb, 0xa3, 0x63, 0xc3, 0x0a, 0x67, 0x6f, 0xb8, 0xdb, 0xdb, 0x8b,
	0xf8, 0x58, 0x8e, 0x49, 0xd9, 0x3c, 0x6d, 0x55, 0xe4, 0x2c, 0x42, 0x61, 0x82, 0xd6, 0x10, 0xea,
	0x36, 0x7b, 0xc3, 0x0f, 0x7b, 0x3f, 0xe1, 0xec, 0x94, 0x85, 0x5e, 0x80, 0xe4, 0x7d, 0x58, 0x36,
	0x48, 0xc7, 0xf7, 0x68, 0x69, 0xa7, 0xb4, 0x5b, 0x3d, 0xbd, 0x67, 0x2f, 0x99, 0xd0, 0x99, 0x47,
	0x1e, 0x43, 0x35, 0x4e, 0x0f, 0x35, 0x9e, 0xde, 0xdf, 0x29, 0xed, 0x96, 0x4f, 0xef, 0xd9, 0x71,
	0x35, 0xa3, 0x72, 0x50, 0x87, 0xea, 0x25, 0xce, 0x9c, 0x31, 0x8f, 0x61, 0xd6, 0x9f, 0x00, 0x60,
	0x4a, 0x75, 0x22, 0x74, 0xc9, 0x63, 0x58, 0x1c, 0xa1, 0x64, 0xba, 0x40, 0xa5, 0xb5, 0xba, 0x67,
	0x0e, 0x75, 0xde, 0xfb, 0x0d, 0x5d, 0xd9, 0x46, 0xc9, 0x6c, 0x9d, 0x26, 0xdf, 0xe5, 0x64, 0x74,
	0xb5, 0x4a, 0x6b, 0x73, 0x2f, 0x6e, 0x2d, 0x77, 0x78, 0xbb, 0x72, 0x89, 0xb3, 0x73, 0x1e, 0x77,
	0xf2, 0x51, 0xe2, 0x80, 0xd3, 0x0f, 0xd8, 0x40, 0xd0, 0x05, 0xd5, 0x8c, 0x5d, 0x31, 0xb1, 0x13,
	0x15, 0x22, 0x9f, 0x40, 0xcd, 0x1d, 0x32, 0x3f, 0x74, 0xf8, 0x74, 0xe2, 0xf4, 0x98, 0x40, 0xba,
	0xb8, 0x53, 0xda, 0x5d, 0xb4, 0x57, 0x74, 0xd4, 0x9e, 0x4e, 0x0e, 0x98, 0x40, 0xf2, 0x3d, 0x6c,
	0xa7, 0x28, 0xee, 0x87, 0x03, 0xc7, 0x0f, 0x3d, 0xdf, 0x45, 0xe1, 0x30, 0xcf, 0xe3, 0xf4, 0x81,
	0xa6, 0x6c, 0x26, 0x14, 0xdb, 0x0f, 0x07, 0x67, 0x26, 0xbf, 0xef, 0x79, 0x9c, 0xbc, 0x80, 0x66,
	0x8e, 0x2d, 0xfc, 0xb7, 0xe8, 0x88, 0xa1, 0xdf, 0x97, 0xb4, 0xac, 0xcf, 0xf4, 0x68, 0x9e, 0xdb,
	0xf1, 0xdf, 0x62, 0x47, 0x25, 0xc9, 0xb7, 0xb0, 0x95, 0x32, 0x31, 0x94, 0x7c, 0x36, 0x4f, 0x7d,
	0xa8, 0xa9, 0x1b, 0x09, 0xf5, 0x58, 0xe5, 0x53, 0x6e, 0xe1, 0x99, 0x71, 0xea, 0x08, 0x0c, 0xd0,
	0x95, 0x74, 0x49, 0x93, 0xf3, 0x67, 0xc6, 0x69, 0x47, 0xa7, 0x53, 0x5f, 0x64, 0xe2, 0xcb, 0xf2,
	0x9c, 0x2f, 0xdd, 0xbc, 0x2f, 0xb2, 0xd0, 0x17, 0x98, 0xf3, 0xa5, 0x7b, 0x87, 0x2f, 0xb2, 0xc0,
	0x97, 0xca, 0x9c, 0x2f, 0xdd, 0x5b, 0x7d, 0x91, 0x45, 0xbe, 0xac, 0xcc, 0xf9, 0xd2, 0xbd, 0xdd,
	0x17, 0x59, 0xe8, 0x4b, 0x75, 0xce, 0x97, 0xee, 0x4d, 0x5f, 0x2c, 0xa8, 0xa6, 0xec, 0xc0, 0xef,
	0xd3, 0x9a, 0x99, 0xa9, 0x04, 0xff, 0xca, 0xef, 0x93, 0x27, 0x50, 0x4f, 0x31, 0x13, 0x35, 0xd8,
	0xb4, 0xae, 0x51, 0xd5, 0x04, 0x75, 0xa1, 0x82, 0x59, 0xad, 0x89, 0xef, 0xd1, 0x46, 0x56, 0xeb,
	0xc2, 0xf7, 0x94, 0x96, 0x90, 0x4c, 0x3a, 0xd1, 0xa5, 0x14, 0x0e, 0x47, 0xcf, 0xe7, 0x74, 0x55,
	0xbb, 0x5a, 0x55, 0xe1, 0xd7, 0x97, 0x52, 0xd8, 0x2a, 0x48, 0x3e, 0x83, 0xd5, 0x14, 0xe7, 0xf9,
	0xc2, 0x65, 0xdc, 0xa3, 0x44, 0x23, 0xeb, 0x09, 0xf2, 0xc8, 0x84, 0xc9, 0xd3, 0x18, 0xeb, 0xf6,
	0x9c, 0x70, 0x2c, 0x1d, 0x8e, 0xcc, 0x9b, 0xd1, 0x35, 0x5d, 0xbb, 0xa6, 0x12, 0x87, 0xbd, 0x9f,
	0xc7, 0xd2, 0x56, 0x51, 0xf2, 0x05, 0xac, 0x69, 0xe8, 0x44, 0xfd, 0x45, 0xc7, 0xed, 0x0f, 0x1c,
	0xe4, 0x9c, 0xae, 0x6b, 0x70, 0x43, 0x05, 0x2f, 0x74, 0xe6, 0xb0, 0x3f, 0x38, 0xe6, 0x9c, 0x7c,
	0x0a, 0x8d, 0xe4, 0x14, 0x4e, 0x80, 0xa1, 0xc6, 0x3e, 0x32, 0xad, 0xc7, 0x87, 0x78, 0x85, 0xa1,
	0x02, 0x5a, 0xa0, 0x03, 0x7a, 0x36, 0xfb, 0x57, 0x41, 0x40, 0x37, 0x4c, 0xeb, 0x2a, 0x68, 0x4f,
	0x27, 0x27, 0x57, 0x41, 0x70, 0x8d, 0x91, 0x09, 0x66, 0x33, 0xc5, 0x74, 0x63, 0xcc, 0xd7, 0x40,
	0x35, 0xc6, 0x43, 0xe1, 0x3a, 0x02, 0x47, 0x0e, 0x0b, 0x82, 0xb1, 0x6b, 0xe0, 0x54, 0xc3, 0xd7,
	0x55, 0xfe, 0x08, 0x85, 0xdb, 0xc1, 0xd1, 0xbe, 0x4a, 0x6a, 0xde, 0x0b, 0x68, 0x6a, 0xde, 0x28,
	0x62, 0x03, 0xcc, 0x13, 0x9b, 0x66, 0xf4, 0x14, 0xa0, 0xad, 0xf2, 0x85, 0xcc, 0xa8, 0x88, 0xb9,
	0x95, 0x32, 0x5f, 0xdf, 0x60, 0x7e, 0x0e, 0x44, 0x33, 0x15, 0xa7, 0xcf, 0x11, 0x0d, 0x65, 0x5b,
	0x53, 0xf4, 0x1d, 0x75, 0x70, 0x74, 0xc2, 0x11, 0x15, 0xd8, 0xfa, 0x01, 0x1a, 0x66, 0xb5, 0xd9,
	0x38, 0xb9, 0x42, 0x21, 0xdb, 0x62, 0x40, 0x9e, 0xc1, 0x43, 0x6e, 0x9e, 0x68, 0x69, 0x67, 0x61,
	0xb7, 0xd2, 0x22, 0xd9, 0x2d, 0xa8, 0xf6, 0xaa, 0x9d, 0x40, 0xac, 0xe7, 0xb0, 0x12, 0x87, 0x25,
	0x93, 0x57, 0x82, 0x7c, 0x9c, 0xdf, 0xdb, 0x6a, 0xf3, 0x96, 0xb3, 0x5b, 0xdb, 0xfa, 0x03, 0x6a,
	0x49, 0x59, 0x11, 0x8d, 0x43, 0x81, 0xe4, 0x4b, 0x00, 0x16, 0xf9, 0x8e, 0xd0, 0x22, 0x9a, 0x53,
	0x6b, 0x35, 0xe2, 0x6d, 0xbd, 0x1f, 0xf9, 0x46, 0xdc, 0x5e, 0x66, 0xc9, 0x47, 0xf2, 0xcd, 0x75,
	0x9d, 0x98, 0x63, 0x36, 0xf6, 0x7a, 0xee, 0xac, 0x86, 0x17, 0x57, 0x37, 0x4f, 0xd6, 0x4b, 0x58,
	0xcd, 0x56, 0x57, 0x5d, 0xb7, 0x60, 0x89, 0xc7, 0x8f, 0x71, 0xdb, 0x1b, 0x59, 0xa9, 0x04, 0x6c,
	0x5f, 0xe3, 0xac, 0x19, 0xac, 0x99, 0xdc, 0x11, 0x06, 0x28, 0x31, 0xf6, 0xf0, 0x5d, 0x7c, 0xe7,
	0x58, 0xe7, 0xb0, 0x51, 0x50, 0x5a, 0x35, 0xf2, 0x55, 0xfe, 0xfa, 0xb6, 0xb3, 0x82, 0x19, 0x42,
	0x7a, 0x8f, 0x3f, 0xc2, 0x66, 0x36, 0x9f, 0x5a, 0x93, 0xbf, 0x9b, 0x85, 0x7f, 0xb9, 0x1b, 0xeb,
	0xf7, 0x64, 0xaa, 0x5e, 0xa2, 0x7c, 0x97, 0xa6, 0x9c, 0x25, 0xf7, 0x91, 0xd6, 0x35, 0x57, 0x9b,
	0x73, 0x84, 0x66, 0xd5, 0x52, 0x74, 0x6a, 0x47, 0x15, 0x2a, 0xe9, 0x04, 0x09, 0xeb, 0xef, 0x52,
	0x32, 0x33, 0x1a, 0xfc, 0x5f, 0x87, 0xf6, 0x09, 0x2c, 0x8a, 0x08, 0xdd, 0xb8, 0xa9, 0xa2, 0xf7,
	0x4a, 0xe7, 0xc9, 0x33, 0x28, 0xc7, 0xa2, 0x0b, 0x77, 0x4c, 0x75, 0x8c, 0x21, 0x4f, 0xe1, 0x81,
	0xfa, 0x24, 0xf4, 0x6f, 0x8a, 0x4a, 0x6b, 0xed, 0x26, 0x58, 0xd8, 0x06, 0x61, 0xb5, 0x61, 0xfd,
	0x46, 0x1b, 0x66, 0x68, 0xf2, 0xd3, 0xdf, 0x2c, 0xf0, 0x28, 0xff, 0x02, 0xb4, 0xfe, 0xba, 0x0f,
	0x65, 0x93, 0x27, 0xc7, 0xc9, 0x1e, 0x38, 0xe4, 0xc8, 0x24, 0x12, 0x9a, 0x7f, 0x7b, 0x92, 0xeb,
	0xd8, 0x6a, 0x16, 0xbf, 0x57, 0x6d, 0x31, 0xb0, 0xee, 0xa5, 0x32, 0xbf, 0x44, 0xde, 0xff, 0x90,
	0xb9, 0x48, 0x64, 0xcc, 0x34, 0x93, 0x0f, 0xee, 0x78, 0x07, 0x94, 0xd8, 0x87, 0xc5, 0xf9, 0x79,
	0xc9, 0x53, 0x58, 0xbe, 0xb6, 0x82, 0x6c, 0xdf, 0x36, 0x41, 0x4a, 0xec, 0xbd, 0x5b, 0xad, 0xd3,
	0x4a, 0x07, 0xf0, 0xeb, 0xd2, 0x90, 0x05, 0xfa, 0x87, 0x71, 0xaf, 0xac, 0xff, 0x3d, 0xff, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x45, 0xac, 0x27, 0x02, 0x44, 0x0b, 0x00, 0x00,
}
