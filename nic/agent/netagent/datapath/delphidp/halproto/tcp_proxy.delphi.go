// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tcp_proxy.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TcpProxyActionType int32

const (
	TcpProxyActionType_TCP_PROXY_ACTION_TYPE_NONE    TcpProxyActionType = 0
	TcpProxyActionType_TCP_PROXY_ACTION_TYPE_ENABLE  TcpProxyActionType = 1
	TcpProxyActionType_TCP_PROXY_ACTION_TYPE_DISABLE TcpProxyActionType = 2
)

var TcpProxyActionType_name = map[int32]string{
	0: "TCP_PROXY_ACTION_TYPE_NONE",
	1: "TCP_PROXY_ACTION_TYPE_ENABLE",
	2: "TCP_PROXY_ACTION_TYPE_DISABLE",
}
var TcpProxyActionType_value = map[string]int32{
	"TCP_PROXY_ACTION_TYPE_NONE":    0,
	"TCP_PROXY_ACTION_TYPE_ENABLE":  1,
	"TCP_PROXY_ACTION_TYPE_DISABLE": 2,
}

func (x TcpProxyActionType) String() string {
	return proto.EnumName(TcpProxyActionType_name, int32(x))
}
func (TcpProxyActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor30, []int{0} }

type TlsProxySide int32

const (
	TlsProxySide_TLS_PROXY_SIDE_NONE   TlsProxySide = 0
	TlsProxySide_TLS_PROXY_SIDE_CLIENT TlsProxySide = 1
	TlsProxySide_TLS_PROXY_SIDE_SERVER TlsProxySide = 2
)

var TlsProxySide_name = map[int32]string{
	0: "TLS_PROXY_SIDE_NONE",
	1: "TLS_PROXY_SIDE_CLIENT",
	2: "TLS_PROXY_SIDE_SERVER",
}
var TlsProxySide_value = map[string]int32{
	"TLS_PROXY_SIDE_NONE":   0,
	"TLS_PROXY_SIDE_CLIENT": 1,
	"TLS_PROXY_SIDE_SERVER": 2,
}

func (x TlsProxySide) String() string {
	return proto.EnumName(TlsProxySide_name, int32(x))
}
func (TlsProxySide) EnumDescriptor() ([]byte, []int) { return fileDescriptor30, []int{1} }

type TcpProxySessionFilter struct {
	SrcIp    *IPAddress `protobuf:"bytes,1,opt,name=src_ip,json=srcIp" json:"src_ip,omitempty"`
	DstIp    *IPAddress `protobuf:"bytes,2,opt,name=dst_ip,json=dstIp" json:"dst_ip,omitempty"`
	SrcPort  uint32     `protobuf:"varint,3,opt,name=src_port,json=srcPort" json:"src_port,omitempty"`
	DstPort  uint32     `protobuf:"varint,4,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"`
	MatchAll bool       `protobuf:"varint,5,opt,name=match_all,json=matchAll" json:"match_all,omitempty"`
}

func (m *TcpProxySessionFilter) Reset()                    { *m = TcpProxySessionFilter{} }
func (m *TcpProxySessionFilter) String() string            { return proto.CompactTextString(m) }
func (*TcpProxySessionFilter) ProtoMessage()               {}
func (*TcpProxySessionFilter) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{0} }

func (m *TcpProxySessionFilter) GetSrcIp() *IPAddress {
	if m != nil {
		return m.SrcIp
	}
	return nil
}

func (m *TcpProxySessionFilter) GetDstIp() *IPAddress {
	if m != nil {
		return m.DstIp
	}
	return nil
}

func (m *TcpProxySessionFilter) GetSrcPort() uint32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *TcpProxySessionFilter) GetDstPort() uint32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *TcpProxySessionFilter) GetMatchAll() bool {
	if m != nil {
		return m.MatchAll
	}
	return false
}

type TcpProxySessionGetRequest struct {
	SessionFilter *TcpProxySessionFilter `protobuf:"bytes,1,opt,name=session_filter,json=sessionFilter" json:"session_filter,omitempty"`
}

func (m *TcpProxySessionGetRequest) Reset()                    { *m = TcpProxySessionGetRequest{} }
func (m *TcpProxySessionGetRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpProxySessionGetRequest) ProtoMessage()               {}
func (*TcpProxySessionGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{1} }

func (m *TcpProxySessionGetRequest) GetSessionFilter() *TcpProxySessionFilter {
	if m != nil {
		return m.SessionFilter
	}
	return nil
}

type TcpproxyFlow struct {
	Qid1     uint64     `protobuf:"varint,1,opt,name=qid1" json:"qid1,omitempty"`
	Qid2     uint64     `protobuf:"varint,2,opt,name=qid2" json:"qid2,omitempty"`
	SrcIp    *IPAddress `protobuf:"bytes,3,opt,name=src_ip,json=srcIp" json:"src_ip,omitempty"`
	DstIp    *IPAddress `protobuf:"bytes,4,opt,name=dst_ip,json=dstIp" json:"dst_ip,omitempty"`
	Sport    uint32     `protobuf:"varint,5,opt,name=sport" json:"sport,omitempty"`
	Dport    uint32     `protobuf:"varint,6,opt,name=dport" json:"dport,omitempty"`
	FlowType uint32     `protobuf:"varint,7,opt,name=flow_type,json=flowType" json:"flow_type,omitempty"`
}

func (m *TcpproxyFlow) Reset()                    { *m = TcpproxyFlow{} }
func (m *TcpproxyFlow) String() string            { return proto.CompactTextString(m) }
func (*TcpproxyFlow) ProtoMessage()               {}
func (*TcpproxyFlow) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{2} }

func (m *TcpproxyFlow) GetQid1() uint64 {
	if m != nil {
		return m.Qid1
	}
	return 0
}

func (m *TcpproxyFlow) GetQid2() uint64 {
	if m != nil {
		return m.Qid2
	}
	return 0
}

func (m *TcpproxyFlow) GetSrcIp() *IPAddress {
	if m != nil {
		return m.SrcIp
	}
	return nil
}

func (m *TcpproxyFlow) GetDstIp() *IPAddress {
	if m != nil {
		return m.DstIp
	}
	return nil
}

func (m *TcpproxyFlow) GetSport() uint32 {
	if m != nil {
		return m.Sport
	}
	return 0
}

func (m *TcpproxyFlow) GetDport() uint32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

func (m *TcpproxyFlow) GetFlowType() uint32 {
	if m != nil {
		return m.FlowType
	}
	return 0
}

// TcpProxySessionGetRequestMsg is batched get request
type TcpProxySessionGetRequestMsg struct {
	Request []*TcpProxySessionGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpProxySessionGetRequestMsg) Reset()                    { *m = TcpProxySessionGetRequestMsg{} }
func (m *TcpProxySessionGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpProxySessionGetRequestMsg) ProtoMessage()               {}
func (*TcpProxySessionGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{3} }

func (m *TcpProxySessionGetRequestMsg) GetRequest() []*TcpProxySessionGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type TcpProxySessionGetResponse struct {
	ApiStatus    ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	TcpproxyFlow *TcpproxyFlow `protobuf:"bytes,2,opt,name=tcpproxy_flow,json=tcpproxyFlow" json:"tcpproxy_flow,omitempty"`
}

func (m *TcpProxySessionGetResponse) Reset()                    { *m = TcpProxySessionGetResponse{} }
func (m *TcpProxySessionGetResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpProxySessionGetResponse) ProtoMessage()               {}
func (*TcpProxySessionGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{4} }

func (m *TcpProxySessionGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpProxySessionGetResponse) GetTcpproxyFlow() *TcpproxyFlow {
	if m != nil {
		return m.TcpproxyFlow
	}
	return nil
}

type TcpProxySessionGetResponseMsg struct {
	ApiStatus ApiStatus                     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Response  []*TcpProxySessionGetResponse `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
}

func (m *TcpProxySessionGetResponseMsg) Reset()                    { *m = TcpProxySessionGetResponseMsg{} }
func (m *TcpProxySessionGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpProxySessionGetResponseMsg) ProtoMessage()               {}
func (*TcpProxySessionGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{5} }

func (m *TcpProxySessionGetResponseMsg) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpProxySessionGetResponseMsg) GetResponse() []*TcpProxySessionGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type TlsProxyECDSAKey struct {
	SignKeyIdx uint32 `protobuf:"varint,1,opt,name=sign_key_idx,json=signKeyIdx" json:"sign_key_idx,omitempty"`
}

func (m *TlsProxyECDSAKey) Reset()                    { *m = TlsProxyECDSAKey{} }
func (m *TlsProxyECDSAKey) String() string            { return proto.CompactTextString(m) }
func (*TlsProxyECDSAKey) ProtoMessage()               {}
func (*TlsProxyECDSAKey) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{6} }

func (m *TlsProxyECDSAKey) GetSignKeyIdx() uint32 {
	if m != nil {
		return m.SignKeyIdx
	}
	return 0
}

type TlsProxyRSAKey struct {
	SignKeyIdx    uint32 `protobuf:"varint,1,opt,name=sign_key_idx,json=signKeyIdx" json:"sign_key_idx,omitempty"`
	DecryptKeyIdx uint32 `protobuf:"varint,2,opt,name=decrypt_key_idx,json=decryptKeyIdx" json:"decrypt_key_idx,omitempty"`
}

func (m *TlsProxyRSAKey) Reset()                    { *m = TlsProxyRSAKey{} }
func (m *TlsProxyRSAKey) String() string            { return proto.CompactTextString(m) }
func (*TlsProxyRSAKey) ProtoMessage()               {}
func (*TlsProxyRSAKey) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{7} }

func (m *TlsProxyRSAKey) GetSignKeyIdx() uint32 {
	if m != nil {
		return m.SignKeyIdx
	}
	return 0
}

func (m *TlsProxyRSAKey) GetDecryptKeyIdx() uint32 {
	if m != nil {
		return m.DecryptKeyIdx
	}
	return 0
}

type TlsProxyAction struct {
	AsymKeyType  CryptoAsymKeyType `protobuf:"varint,1,opt,name=asym_key_type,json=asymKeyType,enum=types.CryptoAsymKeyType" json:"asym_key_type,omitempty"`
	CertId       uint32            `protobuf:"varint,2,opt,name=cert_id,json=certId" json:"cert_id,omitempty"`
	TrustRootId  uint32            `protobuf:"varint,3,opt,name=trust_root_id,json=trustRootId" json:"trust_root_id,omitempty"`
	Ciphers      string            `protobuf:"bytes,4,opt,name=ciphers" json:"ciphers,omitempty"`
	TlsProxySide TlsProxySide      `protobuf:"varint,5,opt,name=tls_proxy_side,json=tlsProxySide,enum=tcp_proxy.TlsProxySide" json:"tls_proxy_side,omitempty"`
	// Types that are valid to be assigned to Keys:
	//	*TlsProxyAction_EcdsaKey
	//	*TlsProxyAction_RsaKey
	Keys isTlsProxyAction_Keys `protobuf_oneof:"Keys"`
}

func (m *TlsProxyAction) Reset()                    { *m = TlsProxyAction{} }
func (m *TlsProxyAction) String() string            { return proto.CompactTextString(m) }
func (*TlsProxyAction) ProtoMessage()               {}
func (*TlsProxyAction) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{8} }

type isTlsProxyAction_Keys interface{ isTlsProxyAction_Keys() }

type TlsProxyAction_EcdsaKey struct {
	EcdsaKey *TlsProxyECDSAKey `protobuf:"bytes,6,opt,name=ecdsa_key,json=ecdsaKey,oneof"`
}
type TlsProxyAction_RsaKey struct {
	RsaKey *TlsProxyRSAKey `protobuf:"bytes,7,opt,name=rsa_key,json=rsaKey,oneof"`
}

func (*TlsProxyAction_EcdsaKey) isTlsProxyAction_Keys() {}
func (*TlsProxyAction_RsaKey) isTlsProxyAction_Keys()   {}

func (m *TlsProxyAction) GetKeys() isTlsProxyAction_Keys {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *TlsProxyAction) GetAsymKeyType() CryptoAsymKeyType {
	if m != nil {
		return m.AsymKeyType
	}
	return CryptoAsymKeyType_CRYPTO_ASYM_KEY_TYPE_ECDSA
}

func (m *TlsProxyAction) GetCertId() uint32 {
	if m != nil {
		return m.CertId
	}
	return 0
}

func (m *TlsProxyAction) GetTrustRootId() uint32 {
	if m != nil {
		return m.TrustRootId
	}
	return 0
}

func (m *TlsProxyAction) GetCiphers() string {
	if m != nil {
		return m.Ciphers
	}
	return ""
}

func (m *TlsProxyAction) GetTlsProxySide() TlsProxySide {
	if m != nil {
		return m.TlsProxySide
	}
	return TlsProxySide_TLS_PROXY_SIDE_NONE
}

func (m *TlsProxyAction) GetEcdsaKey() *TlsProxyECDSAKey {
	if x, ok := m.GetKeys().(*TlsProxyAction_EcdsaKey); ok {
		return x.EcdsaKey
	}
	return nil
}

func (m *TlsProxyAction) GetRsaKey() *TlsProxyRSAKey {
	if x, ok := m.GetKeys().(*TlsProxyAction_RsaKey); ok {
		return x.RsaKey
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TlsProxyAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TlsProxyAction_OneofMarshaler, _TlsProxyAction_OneofUnmarshaler, _TlsProxyAction_OneofSizer, []interface{}{
		(*TlsProxyAction_EcdsaKey)(nil),
		(*TlsProxyAction_RsaKey)(nil),
	}
}

func _TlsProxyAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TlsProxyAction)
	// Keys
	switch x := m.Keys.(type) {
	case *TlsProxyAction_EcdsaKey:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaKey); err != nil {
			return err
		}
	case *TlsProxyAction_RsaKey:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaKey); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TlsProxyAction.Keys has unexpected type %T", x)
	}
	return nil
}

func _TlsProxyAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TlsProxyAction)
	switch tag {
	case 6: // Keys.ecdsa_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TlsProxyECDSAKey)
		err := b.DecodeMessage(msg)
		m.Keys = &TlsProxyAction_EcdsaKey{msg}
		return true, err
	case 7: // Keys.rsa_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TlsProxyRSAKey)
		err := b.DecodeMessage(msg)
		m.Keys = &TlsProxyAction_RsaKey{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TlsProxyAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TlsProxyAction)
	// Keys
	switch x := m.Keys.(type) {
	case *TlsProxyAction_EcdsaKey:
		s := proto.Size(x.EcdsaKey)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TlsProxyAction_RsaKey:
		s := proto.Size(x.RsaKey)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TcpProxyAction struct {
	TcpProxyActionType TcpProxyActionType `protobuf:"varint,1,opt,name=tcp_proxy_action_type,json=tcpProxyActionType,enum=tcp_proxy.TcpProxyActionType" json:"tcp_proxy_action_type,omitempty"`
	ProxyType          ProxyType          `protobuf:"varint,2,opt,name=proxy_type,json=proxyType,enum=types.ProxyType" json:"proxy_type,omitempty"`
	// Types that are valid to be assigned to ProxyConfig:
	//	*TcpProxyAction_Tls
	ProxyConfig isTcpProxyAction_ProxyConfig `protobuf_oneof:"proxy_config"`
}

func (m *TcpProxyAction) Reset()                    { *m = TcpProxyAction{} }
func (m *TcpProxyAction) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyAction) ProtoMessage()               {}
func (*TcpProxyAction) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{9} }

type isTcpProxyAction_ProxyConfig interface{ isTcpProxyAction_ProxyConfig() }

type TcpProxyAction_Tls struct {
	Tls *TlsProxyAction `protobuf:"bytes,3,opt,name=tls,oneof"`
}

func (*TcpProxyAction_Tls) isTcpProxyAction_ProxyConfig() {}

func (m *TcpProxyAction) GetProxyConfig() isTcpProxyAction_ProxyConfig {
	if m != nil {
		return m.ProxyConfig
	}
	return nil
}

func (m *TcpProxyAction) GetTcpProxyActionType() TcpProxyActionType {
	if m != nil {
		return m.TcpProxyActionType
	}
	return TcpProxyActionType_TCP_PROXY_ACTION_TYPE_NONE
}

func (m *TcpProxyAction) GetProxyType() ProxyType {
	if m != nil {
		return m.ProxyType
	}
	return ProxyType_PROXY_TYPE_NONE
}

func (m *TcpProxyAction) GetTls() *TlsProxyAction {
	if x, ok := m.GetProxyConfig().(*TcpProxyAction_Tls); ok {
		return x.Tls
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TcpProxyAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TcpProxyAction_OneofMarshaler, _TcpProxyAction_OneofUnmarshaler, _TcpProxyAction_OneofSizer, []interface{}{
		(*TcpProxyAction_Tls)(nil),
	}
}

func _TcpProxyAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TcpProxyAction)
	// proxy_config
	switch x := m.ProxyConfig.(type) {
	case *TcpProxyAction_Tls:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tls); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TcpProxyAction.ProxyConfig has unexpected type %T", x)
	}
	return nil
}

func _TcpProxyAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TcpProxyAction)
	switch tag {
	case 3: // proxy_config.tls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TlsProxyAction)
		err := b.DecodeMessage(msg)
		m.ProxyConfig = &TcpProxyAction_Tls{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TcpProxyAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TcpProxyAction)
	// proxy_config
	switch x := m.ProxyConfig.(type) {
	case *TcpProxyAction_Tls:
		s := proto.Size(x.Tls)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TcpProxyRuleMatchSpec struct {
	RuleId         uint64          `protobuf:"varint,1,opt,name=rule_id,json=ruleId" json:"rule_id,omitempty"`
	Match          *RuleMatch      `protobuf:"bytes,2,opt,name=match" json:"match,omitempty"`
	TcpProxyAction *TcpProxyAction `protobuf:"bytes,3,opt,name=tcp_proxy_action,json=tcpProxyAction" json:"tcp_proxy_action,omitempty"`
}

func (m *TcpProxyRuleMatchSpec) Reset()                    { *m = TcpProxyRuleMatchSpec{} }
func (m *TcpProxyRuleMatchSpec) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyRuleMatchSpec) ProtoMessage()               {}
func (*TcpProxyRuleMatchSpec) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{10} }

func (m *TcpProxyRuleMatchSpec) GetRuleId() uint64 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *TcpProxyRuleMatchSpec) GetMatch() *RuleMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *TcpProxyRuleMatchSpec) GetTcpProxyAction() *TcpProxyAction {
	if m != nil {
		return m.TcpProxyAction
	}
	return nil
}

// TcpProxyRuleSpec is the user intent for the TcpProxy rule
type TcpProxyRuleSpec struct {
	KeyOrHandle  *TcpProxyRuleKeyHandle   `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	VrfKeyHandle *VrfKeyHandle            `protobuf:"bytes,2,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
	Rules        []*TcpProxyRuleMatchSpec `protobuf:"bytes,3,rep,name=rules" json:"rules,omitempty"`
}

func (m *TcpProxyRuleSpec) Reset()                    { *m = TcpProxyRuleSpec{} }
func (m *TcpProxyRuleSpec) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyRuleSpec) ProtoMessage()               {}
func (*TcpProxyRuleSpec) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{11} }

func (m *TcpProxyRuleSpec) GetKeyOrHandle() *TcpProxyRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TcpProxyRuleSpec) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

func (m *TcpProxyRuleSpec) GetRules() []*TcpProxyRuleMatchSpec {
	if m != nil {
		return m.Rules
	}
	return nil
}

// TcpProxyRuleRequestMsg is the batched add or modify of NAT rule request
type TcpProxyRuleRequestMsg struct {
	Request []*TcpProxyRuleSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpProxyRuleRequestMsg) Reset()                    { *m = TcpProxyRuleRequestMsg{} }
func (m *TcpProxyRuleRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyRuleRequestMsg) ProtoMessage()               {}
func (*TcpProxyRuleRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{12} }

func (m *TcpProxyRuleRequestMsg) GetRequest() []*TcpProxyRuleSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpProxyRuleStatus reflects the current operational status of the TcpProxy rule
type TcpProxyRuleStatus struct {
	Handle uint64 `protobuf:"fixed64,1,opt,name=handle" json:"handle,omitempty"`
}

func (m *TcpProxyRuleStatus) Reset()                    { *m = TcpProxyRuleStatus{} }
func (m *TcpProxyRuleStatus) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyRuleStatus) ProtoMessage()               {}
func (*TcpProxyRuleStatus) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{13} }

func (m *TcpProxyRuleStatus) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// TcpProxyRuleResponse is the response to TcpProxyRuleSpec
type TcpProxyRuleResponse struct {
	ApiStatus ApiStatus           `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *TcpProxyRuleStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *TcpProxyRuleResponse) Reset()                    { *m = TcpProxyRuleResponse{} }
func (m *TcpProxyRuleResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyRuleResponse) ProtoMessage()               {}
func (*TcpProxyRuleResponse) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{14} }

func (m *TcpProxyRuleResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpProxyRuleResponse) GetStatus() *TcpProxyRuleStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// TcpProxyRuleResponseMsg is batched response to TcpProxyRuleRequestMsg
type TcpProxyRuleResponseMsg struct {
	Response []*TcpProxyRuleResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TcpProxyRuleResponseMsg) Reset()                    { *m = TcpProxyRuleResponseMsg{} }
func (m *TcpProxyRuleResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyRuleResponseMsg) ProtoMessage()               {}
func (*TcpProxyRuleResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{15} }

func (m *TcpProxyRuleResponseMsg) GetResponse() []*TcpProxyRuleResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TcpProxyRuleDeleteRequest is used to delete a policy rule
type TcpProxyRuleDeleteRequest struct {
	KeyOrHandle *TcpProxyRuleKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TcpProxyRuleDeleteRequest) Reset()                    { *m = TcpProxyRuleDeleteRequest{} }
func (m *TcpProxyRuleDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyRuleDeleteRequest) ProtoMessage()               {}
func (*TcpProxyRuleDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{16} }

func (m *TcpProxyRuleDeleteRequest) GetKeyOrHandle() *TcpProxyRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TcpProxyRuleDeleteRequestMsg is used to delete a batch of tcp_proxy rules
type TcpProxyRuleDeleteRequestMsg struct {
	Request []*TcpProxyRuleDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpProxyRuleDeleteRequestMsg) Reset()                    { *m = TcpProxyRuleDeleteRequestMsg{} }
func (m *TcpProxyRuleDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyRuleDeleteRequestMsg) ProtoMessage()               {}
func (*TcpProxyRuleDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{17} }

func (m *TcpProxyRuleDeleteRequestMsg) GetRequest() []*TcpProxyRuleDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpProxyRuleDeleteResponse is response to TcpProxyRuleDeleteRequest
type TcpProxyRuleDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *TcpProxyRuleDeleteResponse) Reset()                    { *m = TcpProxyRuleDeleteResponse{} }
func (m *TcpProxyRuleDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyRuleDeleteResponse) ProtoMessage()               {}
func (*TcpProxyRuleDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{18} }

func (m *TcpProxyRuleDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// TcpProxyRuleDeleteResponseMsg is batched response to TcpProxyRuleDeleteRequestMsg
type TcpProxyRuleDeleteResponseMsg struct {
	Response []*TcpProxyRuleDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TcpProxyRuleDeleteResponseMsg) Reset()                    { *m = TcpProxyRuleDeleteResponseMsg{} }
func (m *TcpProxyRuleDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyRuleDeleteResponseMsg) ProtoMessage()               {}
func (*TcpProxyRuleDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{19} }

func (m *TcpProxyRuleDeleteResponseMsg) GetResponse() []*TcpProxyRuleDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TcpProxyRuleGetRequest is used to get information about a tcp_proxy rule
type TcpProxyRuleGetRequest struct {
	KeyOrHandle *TcpProxyRuleKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TcpProxyRuleGetRequest) Reset()                    { *m = TcpProxyRuleGetRequest{} }
func (m *TcpProxyRuleGetRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyRuleGetRequest) ProtoMessage()               {}
func (*TcpProxyRuleGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{20} }

func (m *TcpProxyRuleGetRequest) GetKeyOrHandle() *TcpProxyRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TcpProxyRuleGetRequestMsg is batched GET requests for tcp_proxy rule
type TcpProxyRuleGetRequestMsg struct {
	Request []*TcpProxyRuleGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpProxyRuleGetRequestMsg) Reset()                    { *m = TcpProxyRuleGetRequestMsg{} }
func (m *TcpProxyRuleGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyRuleGetRequestMsg) ProtoMessage()               {}
func (*TcpProxyRuleGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{21} }

func (m *TcpProxyRuleGetRequestMsg) GetRequest() []*TcpProxyRuleGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// per rule stats
type TcpProxyRuleEntryStats struct {
	NumTcpSessions   uint32 `protobuf:"varint,1,opt,name=num_tcp_sessions,json=numTcpSessions" json:"num_tcp_sessions,omitempty"`
	NumOtherSessions uint32 `protobuf:"varint,2,opt,name=num_other_sessions,json=numOtherSessions" json:"num_other_sessions,omitempty"`
}

func (m *TcpProxyRuleEntryStats) Reset()                    { *m = TcpProxyRuleEntryStats{} }
func (m *TcpProxyRuleEntryStats) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyRuleEntryStats) ProtoMessage()               {}
func (*TcpProxyRuleEntryStats) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{22} }

func (m *TcpProxyRuleEntryStats) GetNumTcpSessions() uint32 {
	if m != nil {
		return m.NumTcpSessions
	}
	return 0
}

func (m *TcpProxyRuleEntryStats) GetNumOtherSessions() uint32 {
	if m != nil {
		return m.NumOtherSessions
	}
	return 0
}

// per policy stats
type TcpProxyRuleStats struct {
	Stats []*TcpProxyRuleEntryStats `protobuf:"bytes,1,rep,name=stats" json:"stats,omitempty"`
}

func (m *TcpProxyRuleStats) Reset()                    { *m = TcpProxyRuleStats{} }
func (m *TcpProxyRuleStats) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyRuleStats) ProtoMessage()               {}
func (*TcpProxyRuleStats) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{23} }

func (m *TcpProxyRuleStats) GetStats() []*TcpProxyRuleEntryStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// TcpProxyRuleGetResponse catpures all information about TcpProxy policy
type TcpProxyRuleGetResponse struct {
	ApiStatus ApiStatus           `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *TcpProxyRuleSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *TcpProxyRuleStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *TcpProxyRuleStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *TcpProxyRuleGetResponse) Reset()                    { *m = TcpProxyRuleGetResponse{} }
func (m *TcpProxyRuleGetResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyRuleGetResponse) ProtoMessage()               {}
func (*TcpProxyRuleGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{24} }

func (m *TcpProxyRuleGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpProxyRuleGetResponse) GetSpec() *TcpProxyRuleSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TcpProxyRuleGetResponse) GetStatus() *TcpProxyRuleStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TcpProxyRuleGetResponse) GetStats() *TcpProxyRuleStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// TcpProxyRuleGetResponseMsg is batched response to TcpProxyRuleGetRequestMsg
type TcpProxyRuleGetResponseMsg struct {
	Response []*TcpProxyRuleGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TcpProxyRuleGetResponseMsg) Reset()                    { *m = TcpProxyRuleGetResponseMsg{} }
func (m *TcpProxyRuleGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyRuleGetResponseMsg) ProtoMessage()               {}
func (*TcpProxyRuleGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{25} }

func (m *TcpProxyRuleGetResponseMsg) GetResponse() []*TcpProxyRuleGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TcpProxyCbKeyHandle is used to operate on a tcp_cb either by its key or handle
type TcpProxyCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*TcpProxyCbKeyHandle_TcpcbId
	//	*TcpProxyCbKeyHandle_TcpcbHandle
	KeyOrHandle isTcpProxyCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *TcpProxyCbKeyHandle) Reset()                    { *m = TcpProxyCbKeyHandle{} }
func (m *TcpProxyCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyCbKeyHandle) ProtoMessage()               {}
func (*TcpProxyCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{26} }

type isTcpProxyCbKeyHandle_KeyOrHandle interface{ isTcpProxyCbKeyHandle_KeyOrHandle() }

type TcpProxyCbKeyHandle_TcpcbId struct {
	TcpcbId uint32 `protobuf:"varint,1,opt,name=tcpcb_id,json=tcpcbId,oneof"`
}
type TcpProxyCbKeyHandle_TcpcbHandle struct {
	TcpcbHandle uint64 `protobuf:"fixed64,2,opt,name=tcpcb_handle,json=tcpcbHandle,oneof"`
}

func (*TcpProxyCbKeyHandle_TcpcbId) isTcpProxyCbKeyHandle_KeyOrHandle()     {}
func (*TcpProxyCbKeyHandle_TcpcbHandle) isTcpProxyCbKeyHandle_KeyOrHandle() {}

func (m *TcpProxyCbKeyHandle) GetKeyOrHandle() isTcpProxyCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TcpProxyCbKeyHandle) GetTcpcbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*TcpProxyCbKeyHandle_TcpcbId); ok {
		return x.TcpcbId
	}
	return 0
}

func (m *TcpProxyCbKeyHandle) GetTcpcbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*TcpProxyCbKeyHandle_TcpcbHandle); ok {
		return x.TcpcbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TcpProxyCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TcpProxyCbKeyHandle_OneofMarshaler, _TcpProxyCbKeyHandle_OneofUnmarshaler, _TcpProxyCbKeyHandle_OneofSizer, []interface{}{
		(*TcpProxyCbKeyHandle_TcpcbId)(nil),
		(*TcpProxyCbKeyHandle_TcpcbHandle)(nil),
	}
}

func _TcpProxyCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TcpProxyCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TcpProxyCbKeyHandle_TcpcbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TcpcbId))
	case *TcpProxyCbKeyHandle_TcpcbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.TcpcbHandle))
	case nil:
	default:
		return fmt.Errorf("TcpProxyCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _TcpProxyCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TcpProxyCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.tcpcb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &TcpProxyCbKeyHandle_TcpcbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.tcpcb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &TcpProxyCbKeyHandle_TcpcbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _TcpProxyCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TcpProxyCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TcpProxyCbKeyHandle_TcpcbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TcpcbId))
	case *TcpProxyCbKeyHandle_TcpcbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TcpProxyCbSpec captures all the tcp_cb level configuration
type TcpProxyCbSpec struct {
	KeyOrHandle        *TcpProxyCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	RcvNxt             uint32               `protobuf:"varint,2,opt,name=rcv_nxt,json=rcvNxt" json:"rcv_nxt,omitempty"`
	SndNxt             uint32               `protobuf:"varint,3,opt,name=snd_nxt,json=sndNxt" json:"snd_nxt,omitempty"`
	SndUna             uint32               `protobuf:"varint,4,opt,name=snd_una,json=sndUna" json:"snd_una,omitempty"`
	RcvTsval           uint32               `protobuf:"varint,5,opt,name=rcv_tsval,json=rcvTsval" json:"rcv_tsval,omitempty"`
	TsRecent           uint32               `protobuf:"varint,6,opt,name=ts_recent,json=tsRecent" json:"ts_recent,omitempty"`
	SerqBase           uint64               `protobuf:"fixed64,7,opt,name=serq_base,json=serqBase" json:"serq_base,omitempty"`
	DebugDol           uint32               `protobuf:"varint,8,opt,name=debug_dol,json=debugDol" json:"debug_dol,omitempty"`
	SesqBase           uint64               `protobuf:"fixed64,9,opt,name=sesq_base,json=sesqBase" json:"sesq_base,omitempty"`
	SesqPi             uint32               `protobuf:"varint,10,opt,name=sesq_pi,json=sesqPi" json:"sesq_pi,omitempty"`
	SesqCi             uint32               `protobuf:"varint,11,opt,name=sesq_ci,json=sesqCi" json:"sesq_ci,omitempty"`
	SndWnd             uint32               `protobuf:"varint,12,opt,name=snd_wnd,json=sndWnd" json:"snd_wnd,omitempty"`
	SndCwnd            uint32               `protobuf:"varint,13,opt,name=snd_cwnd,json=sndCwnd" json:"snd_cwnd,omitempty"`
	RcvMss             uint32               `protobuf:"varint,14,opt,name=rcv_mss,json=rcvMss" json:"rcv_mss,omitempty"`
	SourcePort         uint32               `protobuf:"varint,15,opt,name=source_port,json=sourcePort" json:"source_port,omitempty"`
	DestPort           uint32               `protobuf:"varint,16,opt,name=dest_port,json=destPort" json:"dest_port,omitempty"`
	HeaderTemplate     []byte               `protobuf:"bytes,17,opt,name=header_template,json=headerTemplate,proto3" json:"header_template,omitempty"`
	State              uint32               `protobuf:"varint,18,opt,name=state" json:"state,omitempty"`
	SourceLif          uint32               `protobuf:"varint,19,opt,name=source_lif,json=sourceLif" json:"source_lif,omitempty"`
	AsesqBase          uint64               `protobuf:"fixed64,20,opt,name=asesq_base,json=asesqBase" json:"asesq_base,omitempty"`
	AsesqPi            uint32               `protobuf:"varint,21,opt,name=asesq_pi,json=asesqPi" json:"asesq_pi,omitempty"`
	AsesqCi            uint32               `protobuf:"varint,22,opt,name=asesq_ci,json=asesqCi" json:"asesq_ci,omitempty"`
	DebugDolTx         uint32               `protobuf:"varint,23,opt,name=debug_dol_tx,json=debugDolTx" json:"debug_dol_tx,omitempty"`
	HeaderLen          uint32               `protobuf:"varint,24,opt,name=header_len,json=headerLen" json:"header_len,omitempty"`
	PendingAckSend     bool                 `protobuf:"varint,25,opt,name=pending_ack_send,json=pendingAckSend" json:"pending_ack_send,omitempty"`
	L7ProxyType        AppRedirType         `protobuf:"varint,26,opt,name=l7_proxy_type,json=l7ProxyType,enum=types.AppRedirType" json:"l7_proxy_type,omitempty"`
	SesqRetxCi         uint32               `protobuf:"varint,27,opt,name=sesq_retx_ci,json=sesqRetxCi" json:"sesq_retx_ci,omitempty"`
	RetxSndUna         uint64               `protobuf:"varint,28,opt,name=retx_snd_una,json=retxSndUna" json:"retx_snd_una,omitempty"`
	RxTs               uint64               `protobuf:"varint,29,opt,name=rx_ts,json=rxTs" json:"rx_ts,omitempty"`
	Rto                uint64               `protobuf:"varint,30,opt,name=rto" json:"rto,omitempty"`
	SndCwndCnt         uint32               `protobuf:"varint,31,opt,name=snd_cwnd_cnt,json=sndCwndCnt" json:"snd_cwnd_cnt,omitempty"`
	DebugDolTblsetaddr uint32               `protobuf:"varint,32,opt,name=debug_dol_tblsetaddr,json=debugDolTblsetaddr" json:"debug_dol_tblsetaddr,omitempty"`
	SerqPi             uint32               `protobuf:"varint,33,opt,name=serq_pi,json=serqPi" json:"serq_pi,omitempty"`
	PredFlags          uint32               `protobuf:"varint,34,opt,name=pred_flags,json=predFlags" json:"pred_flags,omitempty"`
	OtherQid           uint32               `protobuf:"varint,35,opt,name=other_qid,json=otherQid" json:"other_qid,omitempty"`
	PacketsOut         uint32               `protobuf:"varint,36,opt,name=packets_out,json=packetsOut" json:"packets_out,omitempty"`
	RtoPi              uint32               `protobuf:"varint,37,opt,name=rto_pi,json=rtoPi" json:"rto_pi,omitempty"`
	RetxTimerCi        uint32               `protobuf:"varint,38,opt,name=retx_timer_ci,json=retxTimerCi" json:"retx_timer_ci,omitempty"`
	RtoBackoff         uint32               `protobuf:"varint,39,opt,name=rto_backoff,json=rtoBackoff" json:"rto_backoff,omitempty"`
	CpuId              uint32               `protobuf:"varint,40,opt,name=cpu_id,json=cpuId" json:"cpu_id,omitempty"`
	SerqCi             uint32               `protobuf:"varint,41,opt,name=serq_ci,json=serqCi" json:"serq_ci,omitempty"`
	RcvWnd             uint32               `protobuf:"varint,42,opt,name=rcv_wnd,json=rcvWnd" json:"rcv_wnd,omitempty"`
	SndWscale          uint32               `protobuf:"varint,43,opt,name=snd_wscale,json=sndWscale" json:"snd_wscale,omitempty"`
	RcvWscale          uint32               `protobuf:"varint,44,opt,name=rcv_wscale,json=rcvWscale" json:"rcv_wscale,omitempty"`
	SesqTxCi           uint32               `protobuf:"varint,45,opt,name=sesq_tx_ci,json=sesqTxCi" json:"sesq_tx_ci,omitempty"`
}

func (m *TcpProxyCbSpec) Reset()                    { *m = TcpProxyCbSpec{} }
func (m *TcpProxyCbSpec) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyCbSpec) ProtoMessage()               {}
func (*TcpProxyCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{27} }

func (m *TcpProxyCbSpec) GetKeyOrHandle() *TcpProxyCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TcpProxyCbSpec) GetRcvNxt() uint32 {
	if m != nil {
		return m.RcvNxt
	}
	return 0
}

func (m *TcpProxyCbSpec) GetSndNxt() uint32 {
	if m != nil {
		return m.SndNxt
	}
	return 0
}

func (m *TcpProxyCbSpec) GetSndUna() uint32 {
	if m != nil {
		return m.SndUna
	}
	return 0
}

func (m *TcpProxyCbSpec) GetRcvTsval() uint32 {
	if m != nil {
		return m.RcvTsval
	}
	return 0
}

func (m *TcpProxyCbSpec) GetTsRecent() uint32 {
	if m != nil {
		return m.TsRecent
	}
	return 0
}

func (m *TcpProxyCbSpec) GetSerqBase() uint64 {
	if m != nil {
		return m.SerqBase
	}
	return 0
}

func (m *TcpProxyCbSpec) GetDebugDol() uint32 {
	if m != nil {
		return m.DebugDol
	}
	return 0
}

func (m *TcpProxyCbSpec) GetSesqBase() uint64 {
	if m != nil {
		return m.SesqBase
	}
	return 0
}

func (m *TcpProxyCbSpec) GetSesqPi() uint32 {
	if m != nil {
		return m.SesqPi
	}
	return 0
}

func (m *TcpProxyCbSpec) GetSesqCi() uint32 {
	if m != nil {
		return m.SesqCi
	}
	return 0
}

func (m *TcpProxyCbSpec) GetSndWnd() uint32 {
	if m != nil {
		return m.SndWnd
	}
	return 0
}

func (m *TcpProxyCbSpec) GetSndCwnd() uint32 {
	if m != nil {
		return m.SndCwnd
	}
	return 0
}

func (m *TcpProxyCbSpec) GetRcvMss() uint32 {
	if m != nil {
		return m.RcvMss
	}
	return 0
}

func (m *TcpProxyCbSpec) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *TcpProxyCbSpec) GetDestPort() uint32 {
	if m != nil {
		return m.DestPort
	}
	return 0
}

func (m *TcpProxyCbSpec) GetHeaderTemplate() []byte {
	if m != nil {
		return m.HeaderTemplate
	}
	return nil
}

func (m *TcpProxyCbSpec) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *TcpProxyCbSpec) GetSourceLif() uint32 {
	if m != nil {
		return m.SourceLif
	}
	return 0
}

func (m *TcpProxyCbSpec) GetAsesqBase() uint64 {
	if m != nil {
		return m.AsesqBase
	}
	return 0
}

func (m *TcpProxyCbSpec) GetAsesqPi() uint32 {
	if m != nil {
		return m.AsesqPi
	}
	return 0
}

func (m *TcpProxyCbSpec) GetAsesqCi() uint32 {
	if m != nil {
		return m.AsesqCi
	}
	return 0
}

func (m *TcpProxyCbSpec) GetDebugDolTx() uint32 {
	if m != nil {
		return m.DebugDolTx
	}
	return 0
}

func (m *TcpProxyCbSpec) GetHeaderLen() uint32 {
	if m != nil {
		return m.HeaderLen
	}
	return 0
}

func (m *TcpProxyCbSpec) GetPendingAckSend() bool {
	if m != nil {
		return m.PendingAckSend
	}
	return false
}

func (m *TcpProxyCbSpec) GetL7ProxyType() AppRedirType {
	if m != nil {
		return m.L7ProxyType
	}
	return AppRedirType_APP_REDIR_TYPE_NONE
}

func (m *TcpProxyCbSpec) GetSesqRetxCi() uint32 {
	if m != nil {
		return m.SesqRetxCi
	}
	return 0
}

func (m *TcpProxyCbSpec) GetRetxSndUna() uint64 {
	if m != nil {
		return m.RetxSndUna
	}
	return 0
}

func (m *TcpProxyCbSpec) GetRxTs() uint64 {
	if m != nil {
		return m.RxTs
	}
	return 0
}

func (m *TcpProxyCbSpec) GetRto() uint64 {
	if m != nil {
		return m.Rto
	}
	return 0
}

func (m *TcpProxyCbSpec) GetSndCwndCnt() uint32 {
	if m != nil {
		return m.SndCwndCnt
	}
	return 0
}

func (m *TcpProxyCbSpec) GetDebugDolTblsetaddr() uint32 {
	if m != nil {
		return m.DebugDolTblsetaddr
	}
	return 0
}

func (m *TcpProxyCbSpec) GetSerqPi() uint32 {
	if m != nil {
		return m.SerqPi
	}
	return 0
}

func (m *TcpProxyCbSpec) GetPredFlags() uint32 {
	if m != nil {
		return m.PredFlags
	}
	return 0
}

func (m *TcpProxyCbSpec) GetOtherQid() uint32 {
	if m != nil {
		return m.OtherQid
	}
	return 0
}

func (m *TcpProxyCbSpec) GetPacketsOut() uint32 {
	if m != nil {
		return m.PacketsOut
	}
	return 0
}

func (m *TcpProxyCbSpec) GetRtoPi() uint32 {
	if m != nil {
		return m.RtoPi
	}
	return 0
}

func (m *TcpProxyCbSpec) GetRetxTimerCi() uint32 {
	if m != nil {
		return m.RetxTimerCi
	}
	return 0
}

func (m *TcpProxyCbSpec) GetRtoBackoff() uint32 {
	if m != nil {
		return m.RtoBackoff
	}
	return 0
}

func (m *TcpProxyCbSpec) GetCpuId() uint32 {
	if m != nil {
		return m.CpuId
	}
	return 0
}

func (m *TcpProxyCbSpec) GetSerqCi() uint32 {
	if m != nil {
		return m.SerqCi
	}
	return 0
}

func (m *TcpProxyCbSpec) GetRcvWnd() uint32 {
	if m != nil {
		return m.RcvWnd
	}
	return 0
}

func (m *TcpProxyCbSpec) GetSndWscale() uint32 {
	if m != nil {
		return m.SndWscale
	}
	return 0
}

func (m *TcpProxyCbSpec) GetRcvWscale() uint32 {
	if m != nil {
		return m.RcvWscale
	}
	return 0
}

func (m *TcpProxyCbSpec) GetSesqTxCi() uint32 {
	if m != nil {
		return m.SesqTxCi
	}
	return 0
}

// TcpProxyCbRequestMsg is batched add or modify tcpcb request
type TcpProxyCbRequestMsg struct {
	Request []*TcpProxyCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpProxyCbRequestMsg) Reset()                    { *m = TcpProxyCbRequestMsg{} }
func (m *TcpProxyCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyCbRequestMsg) ProtoMessage()               {}
func (*TcpProxyCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{28} }

func (m *TcpProxyCbRequestMsg) GetRequest() []*TcpProxyCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpProxyCbStatus is the operational status of a given tcpcb
type TcpProxyCbStatus struct {
	TcpcbHandle uint64 `protobuf:"fixed64,1,opt,name=tcpcb_handle,json=tcpcbHandle" json:"tcpcb_handle,omitempty"`
}

func (m *TcpProxyCbStatus) Reset()                    { *m = TcpProxyCbStatus{} }
func (m *TcpProxyCbStatus) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyCbStatus) ProtoMessage()               {}
func (*TcpProxyCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{29} }

func (m *TcpProxyCbStatus) GetTcpcbHandle() uint64 {
	if m != nil {
		return m.TcpcbHandle
	}
	return 0
}

// TcpProxyCbResponse is response to TcpProxyCbSpec
type TcpProxyCbResponse struct {
	ApiStatus   ApiStatus         `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	TcpcbStatus *TcpProxyCbStatus `protobuf:"bytes,2,opt,name=tcpcb_status,json=tcpcbStatus" json:"tcpcb_status,omitempty"`
}

func (m *TcpProxyCbResponse) Reset()                    { *m = TcpProxyCbResponse{} }
func (m *TcpProxyCbResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyCbResponse) ProtoMessage()               {}
func (*TcpProxyCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{30} }

func (m *TcpProxyCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpProxyCbResponse) GetTcpcbStatus() *TcpProxyCbStatus {
	if m != nil {
		return m.TcpcbStatus
	}
	return nil
}

// TcpProxyCbResponseMsg is batched response to TcpProxyCbRequestMsg
type TcpProxyCbResponseMsg struct {
	Response []*TcpProxyCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TcpProxyCbResponseMsg) Reset()                    { *m = TcpProxyCbResponseMsg{} }
func (m *TcpProxyCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyCbResponseMsg) ProtoMessage()               {}
func (*TcpProxyCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{31} }

func (m *TcpProxyCbResponseMsg) GetResponse() []*TcpProxyCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TcpProxyCbDeleteRequest is used to delete a tcpcb
type TcpProxyCbDeleteRequest struct {
	KeyOrHandle *TcpProxyCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TcpProxyCbDeleteRequest) Reset()                    { *m = TcpProxyCbDeleteRequest{} }
func (m *TcpProxyCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyCbDeleteRequest) ProtoMessage()               {}
func (*TcpProxyCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{32} }

func (m *TcpProxyCbDeleteRequest) GetKeyOrHandle() *TcpProxyCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TcpProxyCbDeleteRequestMsg is used to delete a batch of tcpcbs
type TcpProxyCbDeleteRequestMsg struct {
	Request []*TcpProxyCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpProxyCbDeleteRequestMsg) Reset()                    { *m = TcpProxyCbDeleteRequestMsg{} }
func (m *TcpProxyCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyCbDeleteRequestMsg) ProtoMessage()               {}
func (*TcpProxyCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{33} }

func (m *TcpProxyCbDeleteRequestMsg) GetRequest() []*TcpProxyCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpProxyCbDeleteResponseMsg is batched response to TcpProxyCbDeleteRequestMsg
type TcpProxyCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *TcpProxyCbDeleteResponseMsg) Reset()                    { *m = TcpProxyCbDeleteResponseMsg{} }
func (m *TcpProxyCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyCbDeleteResponseMsg) ProtoMessage()               {}
func (*TcpProxyCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{34} }

func (m *TcpProxyCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// TcpProxyCbGetRequest is used to get information about a tcpcb
type TcpProxyCbGetRequest struct {
	KeyOrHandle *TcpProxyCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TcpProxyCbGetRequest) Reset()                    { *m = TcpProxyCbGetRequest{} }
func (m *TcpProxyCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyCbGetRequest) ProtoMessage()               {}
func (*TcpProxyCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{35} }

func (m *TcpProxyCbGetRequest) GetKeyOrHandle() *TcpProxyCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TcpProxyCbGetRequestMsg is batched GET requests for tcpcbs
type TcpProxyCbGetRequestMsg struct {
	Request []*TcpProxyCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpProxyCbGetRequestMsg) Reset()                    { *m = TcpProxyCbGetRequestMsg{} }
func (m *TcpProxyCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyCbGetRequestMsg) ProtoMessage()               {}
func (*TcpProxyCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{36} }

func (m *TcpProxyCbGetRequestMsg) GetRequest() []*TcpProxyCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpProxyCbStats is the statistics object for each tcpcb
type TcpProxyCbStats struct {
	BytesRcvd            uint64 `protobuf:"varint,1,opt,name=bytes_rcvd,json=bytesRcvd" json:"bytes_rcvd,omitempty"`
	PktsRcvd             uint64 `protobuf:"varint,2,opt,name=pkts_rcvd,json=pktsRcvd" json:"pkts_rcvd,omitempty"`
	PagesAlloced         uint64 `protobuf:"varint,3,opt,name=pages_alloced,json=pagesAlloced" json:"pages_alloced,omitempty"`
	DescAlloced          uint64 `protobuf:"varint,4,opt,name=desc_alloced,json=descAlloced" json:"desc_alloced,omitempty"`
	DebugNumPktToMem     uint64 `protobuf:"varint,5,opt,name=debug_num_pkt_to_mem,json=debugNumPktToMem" json:"debug_num_pkt_to_mem,omitempty"`
	DebugNumPhvToMem     uint64 `protobuf:"varint,6,opt,name=debug_num_phv_to_mem,json=debugNumPhvToMem" json:"debug_num_phv_to_mem,omitempty"`
	DebugAtomicDelta     uint32 `protobuf:"varint,8,opt,name=debug_atomic_delta,json=debugAtomicDelta" json:"debug_atomic_delta,omitempty"`
	DebugAtomic0Incr1247 uint32 `protobuf:"varint,9,opt,name=debug_atomic0_incr1247,json=debugAtomic0Incr1247" json:"debug_atomic0_incr1247,omitempty"`
	DebugAtomic1Incr247  uint32 `protobuf:"varint,10,opt,name=debug_atomic1_incr247,json=debugAtomic1Incr247" json:"debug_atomic1_incr247,omitempty"`
	DebugAtomic2Incr47   uint32 `protobuf:"varint,11,opt,name=debug_atomic2_incr47,json=debugAtomic2Incr47" json:"debug_atomic2_incr47,omitempty"`
	DebugAtomic3Incr47   uint32 `protobuf:"varint,12,opt,name=debug_atomic3_incr47,json=debugAtomic3Incr47" json:"debug_atomic3_incr47,omitempty"`
	DebugAtomic4Incr7    uint32 `protobuf:"varint,13,opt,name=debug_atomic4_incr7,json=debugAtomic4Incr7" json:"debug_atomic4_incr7,omitempty"`
	DebugAtomic5Incr7    uint32 `protobuf:"varint,14,opt,name=debug_atomic5_incr7,json=debugAtomic5Incr7" json:"debug_atomic5_incr7,omitempty"`
	DebugAtomic6Incr7    uint32 `protobuf:"varint,15,opt,name=debug_atomic6_incr7,json=debugAtomic6Incr7" json:"debug_atomic6_incr7,omitempty"`
	BytesAcked           uint64 `protobuf:"varint,16,opt,name=bytes_acked,json=bytesAcked" json:"bytes_acked,omitempty"`
	SlowPathCnt          uint64 `protobuf:"varint,17,opt,name=slow_path_cnt,json=slowPathCnt" json:"slow_path_cnt,omitempty"`
	SerqFullCnt          uint64 `protobuf:"varint,18,opt,name=serq_full_cnt,json=serqFullCnt" json:"serq_full_cnt,omitempty"`
	OooCnt               uint64 `protobuf:"varint,19,opt,name=ooo_cnt,json=oooCnt" json:"ooo_cnt,omitempty"`
	BytesSent            uint64 `protobuf:"varint,10001,opt,name=bytes_sent,json=bytesSent" json:"bytes_sent,omitempty"`
	PktsSent             uint64 `protobuf:"varint,10002,opt,name=pkts_sent,json=pktsSent" json:"pkts_sent,omitempty"`
	DebugNumPhvToPkt     uint64 `protobuf:"varint,10003,opt,name=debug_num_phv_to_pkt,json=debugNumPhvToPkt" json:"debug_num_phv_to_pkt,omitempty"`
	DebugNumMemToPkt     uint64 `protobuf:"varint,10004,opt,name=debug_num_mem_to_pkt,json=debugNumMemToPkt" json:"debug_num_mem_to_pkt,omitempty"`
}

func (m *TcpProxyCbStats) Reset()                    { *m = TcpProxyCbStats{} }
func (m *TcpProxyCbStats) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyCbStats) ProtoMessage()               {}
func (*TcpProxyCbStats) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{37} }

func (m *TcpProxyCbStats) GetBytesRcvd() uint64 {
	if m != nil {
		return m.BytesRcvd
	}
	return 0
}

func (m *TcpProxyCbStats) GetPktsRcvd() uint64 {
	if m != nil {
		return m.PktsRcvd
	}
	return 0
}

func (m *TcpProxyCbStats) GetPagesAlloced() uint64 {
	if m != nil {
		return m.PagesAlloced
	}
	return 0
}

func (m *TcpProxyCbStats) GetDescAlloced() uint64 {
	if m != nil {
		return m.DescAlloced
	}
	return 0
}

func (m *TcpProxyCbStats) GetDebugNumPktToMem() uint64 {
	if m != nil {
		return m.DebugNumPktToMem
	}
	return 0
}

func (m *TcpProxyCbStats) GetDebugNumPhvToMem() uint64 {
	if m != nil {
		return m.DebugNumPhvToMem
	}
	return 0
}

func (m *TcpProxyCbStats) GetDebugAtomicDelta() uint32 {
	if m != nil {
		return m.DebugAtomicDelta
	}
	return 0
}

func (m *TcpProxyCbStats) GetDebugAtomic0Incr1247() uint32 {
	if m != nil {
		return m.DebugAtomic0Incr1247
	}
	return 0
}

func (m *TcpProxyCbStats) GetDebugAtomic1Incr247() uint32 {
	if m != nil {
		return m.DebugAtomic1Incr247
	}
	return 0
}

func (m *TcpProxyCbStats) GetDebugAtomic2Incr47() uint32 {
	if m != nil {
		return m.DebugAtomic2Incr47
	}
	return 0
}

func (m *TcpProxyCbStats) GetDebugAtomic3Incr47() uint32 {
	if m != nil {
		return m.DebugAtomic3Incr47
	}
	return 0
}

func (m *TcpProxyCbStats) GetDebugAtomic4Incr7() uint32 {
	if m != nil {
		return m.DebugAtomic4Incr7
	}
	return 0
}

func (m *TcpProxyCbStats) GetDebugAtomic5Incr7() uint32 {
	if m != nil {
		return m.DebugAtomic5Incr7
	}
	return 0
}

func (m *TcpProxyCbStats) GetDebugAtomic6Incr7() uint32 {
	if m != nil {
		return m.DebugAtomic6Incr7
	}
	return 0
}

func (m *TcpProxyCbStats) GetBytesAcked() uint64 {
	if m != nil {
		return m.BytesAcked
	}
	return 0
}

func (m *TcpProxyCbStats) GetSlowPathCnt() uint64 {
	if m != nil {
		return m.SlowPathCnt
	}
	return 0
}

func (m *TcpProxyCbStats) GetSerqFullCnt() uint64 {
	if m != nil {
		return m.SerqFullCnt
	}
	return 0
}

func (m *TcpProxyCbStats) GetOooCnt() uint64 {
	if m != nil {
		return m.OooCnt
	}
	return 0
}

func (m *TcpProxyCbStats) GetBytesSent() uint64 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

func (m *TcpProxyCbStats) GetPktsSent() uint64 {
	if m != nil {
		return m.PktsSent
	}
	return 0
}

func (m *TcpProxyCbStats) GetDebugNumPhvToPkt() uint64 {
	if m != nil {
		return m.DebugNumPhvToPkt
	}
	return 0
}

func (m *TcpProxyCbStats) GetDebugNumMemToPkt() uint64 {
	if m != nil {
		return m.DebugNumMemToPkt
	}
	return 0
}

// TcpProxyCbGetResponse captures all the information about a tcpcb
// only if api_status indicates success, other fields are valid
type TcpProxyCbGetResponse struct {
	ApiStatus ApiStatus         `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *TcpProxyCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *TcpProxyCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *TcpProxyCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *TcpProxyCbGetResponse) Reset()                    { *m = TcpProxyCbGetResponse{} }
func (m *TcpProxyCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyCbGetResponse) ProtoMessage()               {}
func (*TcpProxyCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{38} }

func (m *TcpProxyCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpProxyCbGetResponse) GetSpec() *TcpProxyCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TcpProxyCbGetResponse) GetStatus() *TcpProxyCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TcpProxyCbGetResponse) GetStats() *TcpProxyCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// TcpProxyCbGetResponseMsg is batched response to TcpProxyCbGetRequestMsg
type TcpProxyCbGetResponseMsg struct {
	Response []*TcpProxyCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TcpProxyCbGetResponseMsg) Reset()                    { *m = TcpProxyCbGetResponseMsg{} }
func (m *TcpProxyCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyCbGetResponseMsg) ProtoMessage()               {}
func (*TcpProxyCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{39} }

func (m *TcpProxyCbGetResponseMsg) GetResponse() []*TcpProxyCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TcpProxyGlobalStatsGetRequest is used to get global TCP stats
type TcpProxyGlobalStatsGetRequest struct {
	Dummy uint32 `protobuf:"varint,1,opt,name=dummy" json:"dummy,omitempty"`
}

func (m *TcpProxyGlobalStatsGetRequest) Reset()                    { *m = TcpProxyGlobalStatsGetRequest{} }
func (m *TcpProxyGlobalStatsGetRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyGlobalStatsGetRequest) ProtoMessage()               {}
func (*TcpProxyGlobalStatsGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{40} }

func (m *TcpProxyGlobalStatsGetRequest) GetDummy() uint32 {
	if m != nil {
		return m.Dummy
	}
	return 0
}

// TcpProxyCbGetRequestMsg is batched GET requests for tcp global stats
type TcpProxyGlobalStatsGetRequestMsg struct {
	Request []*TcpProxyGlobalStatsGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpProxyGlobalStatsGetRequestMsg) Reset()         { *m = TcpProxyGlobalStatsGetRequestMsg{} }
func (m *TcpProxyGlobalStatsGetRequestMsg) String() string { return proto.CompactTextString(m) }
func (*TcpProxyGlobalStatsGetRequestMsg) ProtoMessage()    {}
func (*TcpProxyGlobalStatsGetRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor30, []int{41}
}

func (m *TcpProxyGlobalStatsGetRequestMsg) GetRequest() []*TcpProxyGlobalStatsGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// Only if api_status indicates success, other fields are valid
type TcpProxyGlobalStatsGetResponseMsg struct {
	ApiStatus   ApiStatus            `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	GlobalStats *TcpProxyGlobalStats `protobuf:"bytes,2,opt,name=global_stats,json=globalStats" json:"global_stats,omitempty"`
}

func (m *TcpProxyGlobalStatsGetResponseMsg) Reset()         { *m = TcpProxyGlobalStatsGetResponseMsg{} }
func (m *TcpProxyGlobalStatsGetResponseMsg) String() string { return proto.CompactTextString(m) }
func (*TcpProxyGlobalStatsGetResponseMsg) ProtoMessage()    {}
func (*TcpProxyGlobalStatsGetResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor30, []int{42}
}

func (m *TcpProxyGlobalStatsGetResponseMsg) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpProxyGlobalStatsGetResponseMsg) GetGlobalStats() *TcpProxyGlobalStats {
	if m != nil {
		return m.GlobalStats
	}
	return nil
}

// TcpProxyGlobalStats captures global TCP statistics
type TcpProxyGlobalStats struct {
	RnmdrFull            uint64 `protobuf:"varint,1,opt,name=rnmdr_full,json=rnmdrFull" json:"rnmdr_full,omitempty"`
	InvalidSesqDescr     uint64 `protobuf:"varint,2,opt,name=invalid_sesq_descr,json=invalidSesqDescr" json:"invalid_sesq_descr,omitempty"`
	InvalidRetxSesqDescr uint64 `protobuf:"varint,3,opt,name=invalid_retx_sesq_descr,json=invalidRetxSesqDescr" json:"invalid_retx_sesq_descr,omitempty"`
	StretchAck           uint64 `protobuf:"varint,4,opt,name=stretch_ack,json=stretchAck" json:"stretch_ack,omitempty"`
	RetxNopSchedule      uint64 `protobuf:"varint,5,opt,name=retx_nop_schedule,json=retxNopSchedule" json:"retx_nop_schedule,omitempty"`
	GcFull               uint64 `protobuf:"varint,6,opt,name=gc_full,json=gcFull" json:"gc_full,omitempty"`
	TlsGcFull            uint64 `protobuf:"varint,7,opt,name=tls_gc_full,json=tlsGcFull" json:"tls_gc_full,omitempty"`
}

func (m *TcpProxyGlobalStats) Reset()                    { *m = TcpProxyGlobalStats{} }
func (m *TcpProxyGlobalStats) String() string            { return proto.CompactTextString(m) }
func (*TcpProxyGlobalStats) ProtoMessage()               {}
func (*TcpProxyGlobalStats) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{43} }

func (m *TcpProxyGlobalStats) GetRnmdrFull() uint64 {
	if m != nil {
		return m.RnmdrFull
	}
	return 0
}

func (m *TcpProxyGlobalStats) GetInvalidSesqDescr() uint64 {
	if m != nil {
		return m.InvalidSesqDescr
	}
	return 0
}

func (m *TcpProxyGlobalStats) GetInvalidRetxSesqDescr() uint64 {
	if m != nil {
		return m.InvalidRetxSesqDescr
	}
	return 0
}

func (m *TcpProxyGlobalStats) GetStretchAck() uint64 {
	if m != nil {
		return m.StretchAck
	}
	return 0
}

func (m *TcpProxyGlobalStats) GetRetxNopSchedule() uint64 {
	if m != nil {
		return m.RetxNopSchedule
	}
	return 0
}

func (m *TcpProxyGlobalStats) GetGcFull() uint64 {
	if m != nil {
		return m.GcFull
	}
	return 0
}

func (m *TcpProxyGlobalStats) GetTlsGcFull() uint64 {
	if m != nil {
		return m.TlsGcFull
	}
	return 0
}

func init() {
	proto.RegisterType((*TcpProxySessionFilter)(nil), "halproto.TcpProxySessionFilter")
	proto.RegisterType((*TcpProxySessionGetRequest)(nil), "halproto.TcpProxySessionGetRequest")
	proto.RegisterType((*TcpproxyFlow)(nil), "halproto.tcpproxy_flow")
	proto.RegisterType((*TcpProxySessionGetRequestMsg)(nil), "halproto.TcpProxySessionGetRequestMsg")
	proto.RegisterType((*TcpProxySessionGetResponse)(nil), "halproto.TcpProxySessionGetResponse")
	proto.RegisterType((*TcpProxySessionGetResponseMsg)(nil), "halproto.TcpProxySessionGetResponseMsg")
	proto.RegisterType((*TlsProxyECDSAKey)(nil), "halproto.TlsProxyECDSAKey")
	proto.RegisterType((*TlsProxyRSAKey)(nil), "halproto.TlsProxyRSAKey")
	proto.RegisterType((*TlsProxyAction)(nil), "halproto.TlsProxyAction")
	proto.RegisterType((*TcpProxyAction)(nil), "halproto.TcpProxyAction")
	proto.RegisterType((*TcpProxyRuleMatchSpec)(nil), "halproto.TcpProxyRuleMatchSpec")
	proto.RegisterType((*TcpProxyRuleSpec)(nil), "halproto.TcpProxyRuleSpec")
	proto.RegisterType((*TcpProxyRuleRequestMsg)(nil), "halproto.TcpProxyRuleRequestMsg")
	proto.RegisterType((*TcpProxyRuleStatus)(nil), "halproto.TcpProxyRuleStatus")
	proto.RegisterType((*TcpProxyRuleResponse)(nil), "halproto.TcpProxyRuleResponse")
	proto.RegisterType((*TcpProxyRuleResponseMsg)(nil), "halproto.TcpProxyRuleResponseMsg")
	proto.RegisterType((*TcpProxyRuleDeleteRequest)(nil), "halproto.TcpProxyRuleDeleteRequest")
	proto.RegisterType((*TcpProxyRuleDeleteRequestMsg)(nil), "halproto.TcpProxyRuleDeleteRequestMsg")
	proto.RegisterType((*TcpProxyRuleDeleteResponse)(nil), "halproto.TcpProxyRuleDeleteResponse")
	proto.RegisterType((*TcpProxyRuleDeleteResponseMsg)(nil), "halproto.TcpProxyRuleDeleteResponseMsg")
	proto.RegisterType((*TcpProxyRuleGetRequest)(nil), "halproto.TcpProxyRuleGetRequest")
	proto.RegisterType((*TcpProxyRuleGetRequestMsg)(nil), "halproto.TcpProxyRuleGetRequestMsg")
	proto.RegisterType((*TcpProxyRuleEntryStats)(nil), "halproto.TcpProxyRuleEntryStats")
	proto.RegisterType((*TcpProxyRuleStats)(nil), "halproto.TcpProxyRuleStats")
	proto.RegisterType((*TcpProxyRuleGetResponse)(nil), "halproto.TcpProxyRuleGetResponse")
	proto.RegisterType((*TcpProxyRuleGetResponseMsg)(nil), "halproto.TcpProxyRuleGetResponseMsg")
	proto.RegisterType((*TcpProxyCbKeyHandle)(nil), "halproto.TcpProxyCbKeyHandle")
	proto.RegisterType((*TcpProxyCbSpec)(nil), "halproto.TcpProxyCbSpec")
	proto.RegisterType((*TcpProxyCbRequestMsg)(nil), "halproto.TcpProxyCbRequestMsg")
	proto.RegisterType((*TcpProxyCbStatus)(nil), "halproto.TcpProxyCbStatus")
	proto.RegisterType((*TcpProxyCbResponse)(nil), "halproto.TcpProxyCbResponse")
	proto.RegisterType((*TcpProxyCbResponseMsg)(nil), "halproto.TcpProxyCbResponseMsg")
	proto.RegisterType((*TcpProxyCbDeleteRequest)(nil), "halproto.TcpProxyCbDeleteRequest")
	proto.RegisterType((*TcpProxyCbDeleteRequestMsg)(nil), "halproto.TcpProxyCbDeleteRequestMsg")
	proto.RegisterType((*TcpProxyCbDeleteResponseMsg)(nil), "halproto.TcpProxyCbDeleteResponseMsg")
	proto.RegisterType((*TcpProxyCbGetRequest)(nil), "halproto.TcpProxyCbGetRequest")
	proto.RegisterType((*TcpProxyCbGetRequestMsg)(nil), "halproto.TcpProxyCbGetRequestMsg")
	proto.RegisterType((*TcpProxyCbStats)(nil), "halproto.TcpProxyCbStats")
	proto.RegisterType((*TcpProxyCbGetResponse)(nil), "halproto.TcpProxyCbGetResponse")
	proto.RegisterType((*TcpProxyCbGetResponseMsg)(nil), "halproto.TcpProxyCbGetResponseMsg")
	proto.RegisterType((*TcpProxyGlobalStatsGetRequest)(nil), "halproto.TcpProxyGlobalStatsGetRequest")
	proto.RegisterType((*TcpProxyGlobalStatsGetRequestMsg)(nil), "halproto.TcpProxyGlobalStatsGetRequestMsg")
	proto.RegisterType((*TcpProxyGlobalStatsGetResponseMsg)(nil), "halproto.TcpProxyGlobalStatsGetResponseMsg")
	proto.RegisterType((*TcpProxyGlobalStats)(nil), "halproto.TcpProxyGlobalStats")
	proto.RegisterEnum("halproto.TcpProxyActionType", TcpProxyActionType_name, TcpProxyActionType_value)
	proto.RegisterEnum("halproto.TlsProxySide", TlsProxySide_name, TlsProxySide_value)
}

func init() { proto.RegisterFile("tcp_proxy.proto", fileDescriptor30) }

var fileDescriptor30 = []byte{
	// 2967 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x5a, 0xdd, 0x6e, 0xdb, 0xc8,
	0xf5, 0xb7, 0xfc, 0x21, 0xcb, 0x23, 0x4b, 0x76, 0xc6, 0x76, 0x4c, 0xdb, 0x71, 0xec, 0x30, 0x9b,
	0xc4, 0xff, 0x6c, 0xd6, 0x9b, 0x38, 0xf6, 0x1a, 0xfb, 0xf9, 0x87, 0x2c, 0x3b, 0x89, 0x90, 0xf8,
	0xa3, 0x94, 0x76, 0xb3, 0x1b, 0x74, 0xcb, 0x52, 0xe4, 0xc8, 0x22, 0x44, 0x91, 0x34, 0x67, 0xe4,
	0x58, 0x0f, 0xd0, 0xbb, 0xa2, 0x40, 0xbb, 0x05, 0x7a, 0x55, 0xf4, 0xa2, 0xaf, 0xd1, 0xa7, 0xe8,
	0x03, 0x04, 0xe8, 0xed, 0x5e, 0xee, 0x65, 0x81, 0x02, 0xc5, 0x99, 0x19, 0x8a, 0xa4, 0x44, 0xd9,
	0xde, 0x6e, 0xae, 0xac, 0x39, 0xe7, 0xfc, 0xce, 0xcc, 0x9c, 0x39, 0x73, 0x3e, 0x86, 0x46, 0x33,
	0xcc, 0xf4, 0x75, 0x3f, 0xf0, 0x2e, 0xba, 0x9b, 0x7e, 0xe0, 0x31, 0x0f, 0x4f, 0xf5, 0x08, 0xcb,
	0x79, 0xd6, 0xf5, 0x09, 0x15, 0xf4, 0xe5, 0x5c, 0xab, 0x29, 0x7e, 0xa9, 0xff, 0xc8, 0xa0, 0x85,
	0x9a, 0xe9, 0x9f, 0x80, 0x4c, 0x95, 0x50, 0x6a, 0x7b, 0xee, 0x33, 0xdb, 0x61, 0x24, 0xc0, 0x0f,
	0x50, 0x96, 0x06, 0xa6, 0x6e, 0xfb, 0x4a, 0x66, 0x3d, 0xb3, 0x91, 0xdf, 0x9a, 0xdd, 0x14, 0x1a,
	0x2a, 0x27, 0x25, 0xcb, 0x0a, 0x08, 0xa5, 0xda, 0x04, 0x0d, 0xcc, 0x8a, 0x0f, 0x82, 0x16, 0x65,
	0x20, 0x38, 0x3a, 0x4c, 0xd0, 0xa2, 0xac, 0xe2, 0xe3, 0x25, 0x94, 0x03, 0x8d, 0xbe, 0x17, 0x30,
	0x65, 0x6c, 0x3d, 0xb3, 0x51, 0xd0, 0x26, 0x69, 0x60, 0x9e, 0x78, 0x01, 0x03, 0x16, 0xe8, 0xe0,
	0xac, 0x71, 0xc1, 0xb2, 0x28, 0xe3, 0xac, 0x15, 0x34, 0xd5, 0x36, 0x98, 0xd9, 0xd4, 0x0d, 0xc7,
	0x51, 0x26, 0xd6, 0x33, 0x1b, 0x39, 0x2d, 0xc7, 0x09, 0x25, 0xc7, 0x51, 0x2d, 0xb4, 0xd4, 0xb7,
	0xfa, 0xe7, 0x84, 0x69, 0xe4, 0xac, 0x43, 0x28, 0xc3, 0xcf, 0x51, 0x91, 0x0a, 0xa2, 0xde, 0xe0,
	0x7b, 0x92, 0x3b, 0x59, 0xdf, 0x8c, 0xec, 0x94, 0xba, 0x77, 0xad, 0x40, 0xe3, 0x43, 0xf5, 0x9f,
	0x19, 0x54, 0x60, 0xa6, 0xcf, 0x11, 0x7a, 0xc3, 0xf1, 0xde, 0x62, 0x8c, 0xc6, 0xcf, 0x6c, 0xeb,
	0x09, 0x57, 0x38, 0xae, 0xf1, 0xdf, 0x92, 0xb6, 0xc5, 0xad, 0x20, 0x68, 0x5b, 0x31, 0x23, 0x8e,
	0x5d, 0xd7, 0x88, 0xe3, 0x97, 0x1b, 0x71, 0x1e, 0x4d, 0x50, 0x6e, 0xa6, 0x09, 0x6e, 0x26, 0x31,
	0x00, 0xaa, 0xc5, 0xa9, 0x59, 0x41, 0xe5, 0x03, 0x30, 0x1d, 0xac, 0x56, 0x07, 0x55, 0xca, 0x24,
	0xe7, 0xe4, 0x80, 0x50, 0xeb, 0xfa, 0x44, 0xfd, 0x0d, 0xba, 0x35, 0xd4, 0x74, 0x87, 0xf4, 0x14,
	0x7f, 0x85, 0x26, 0x03, 0x31, 0x52, 0x32, 0xeb, 0x63, 0x1b, 0xf9, 0xad, 0x0f, 0x86, 0x9b, 0x2d,
	0x42, 0x6a, 0x21, 0x48, 0xfd, 0x7d, 0x06, 0x2d, 0xa7, 0x89, 0x51, 0xdf, 0x73, 0x29, 0xc1, 0x1f,
	0x23, 0x64, 0xf8, 0xb6, 0x4e, 0x99, 0xc1, 0x3a, 0x94, 0xdb, 0xb1, 0xd8, 0xdb, 0x74, 0xc9, 0xb7,
	0xab, 0x9c, 0xae, 0x4d, 0x19, 0xe1, 0x4f, 0xfc, 0x65, 0xdf, 0x19, 0x48, 0x6f, 0x53, 0x62, 0xab,
	0x4a, 0xf0, 0xb5, 0xe9, 0x70, 0xf8, 0xcc, 0xf1, 0xde, 0xaa, 0x3f, 0x64, 0xd0, 0xea, 0xf0, 0xe5,
	0xc0, 0x86, 0x7f, 0xf6, 0x8a, 0x4a, 0x28, 0x17, 0x48, 0xbc, 0x32, 0xca, 0x4d, 0x74, 0xef, 0x0a,
	0x13, 0x09, 0x61, 0xad, 0x07, 0x53, 0xb7, 0xd1, 0x6c, 0xcd, 0xa1, 0x5c, 0xee, 0xa0, 0xbc, 0x5f,
	0x2d, 0xbd, 0x24, 0x5d, 0xbc, 0x8e, 0xa6, 0xa9, 0x7d, 0xea, 0xea, 0x2d, 0xd2, 0xd5, 0x6d, 0xeb,
	0x82, 0xaf, 0xa4, 0xa0, 0x21, 0xa0, 0xbd, 0x24, 0xdd, 0x8a, 0x75, 0xa1, 0xbe, 0x41, 0xc5, 0x10,
	0xa5, 0x5d, 0x13, 0x83, 0xef, 0xa3, 0x19, 0x8b, 0x98, 0x41, 0xd7, 0x67, 0x3d, 0xa1, 0x51, 0x2e,
	0x54, 0x90, 0x64, 0xa9, 0xfb, 0xdd, 0x68, 0xa4, 0xbc, 0x64, 0x32, 0xdb, 0x73, 0xf1, 0x17, 0xa8,
	0x60, 0xd0, 0x6e, 0x9b, 0xe3, 0xb8, 0x2b, 0x09, 0xdb, 0x28, 0xd2, 0x36, 0x65, 0x40, 0x7b, 0x25,
	0xda, 0x6d, 0xbf, 0x24, 0x5d, 0x70, 0x2d, 0x2d, 0x6f, 0x44, 0x03, 0xbc, 0x88, 0x26, 0x4d, 0x12,
	0x30, 0xdd, 0xb6, 0xe4, 0x84, 0x59, 0x18, 0x56, 0x2c, 0xac, 0xa2, 0x02, 0x0b, 0x3a, 0x94, 0xe9,
	0x81, 0xe7, 0x71, 0xb6, 0x88, 0x09, 0x79, 0x4e, 0xd4, 0x3c, 0x0f, 0x64, 0x14, 0x34, 0x69, 0xda,
	0x7e, 0x93, 0x04, 0x94, 0xdf, 0x8b, 0x29, 0x2d, 0x1c, 0xe2, 0x2f, 0x51, 0x91, 0x39, 0x54, 0xd8,
	0x5a, 0xa7, 0xb6, 0x45, 0xf8, 0x85, 0x28, 0x6e, 0x2d, 0xc6, 0x8f, 0x40, 0xee, 0xa3, 0x6a, 0x5b,
	0x44, 0x9b, 0x66, 0xb1, 0x11, 0xfe, 0x0c, 0x4d, 0x11, 0xd3, 0xa2, 0x06, 0x6c, 0x8a, 0x5f, 0x9a,
	0xfc, 0xd6, 0x4a, 0x0a, 0x32, 0x3c, 0x94, 0x17, 0x23, 0x5a, 0x8e, 0xcb, 0x83, 0xb1, 0xb7, 0xd1,
	0x64, 0x20, 0x91, 0x93, 0x1c, 0xb9, 0x94, 0x82, 0xd4, 0x42, 0x5c, 0x36, 0xe0, 0xa8, 0xbd, 0x2c,
	0x1a, 0x7f, 0x49, 0xba, 0x14, 0x82, 0x49, 0x31, 0xf4, 0x0d, 0x69, 0xe0, 0x13, 0xb4, 0xd0, 0x53,
	0xa0, 0x1b, 0x9c, 0x16, 0x37, 0xf4, 0x6a, 0x8a, 0x57, 0x09, 0x24, 0xb7, 0x36, 0x66, 0x03, 0x34,
	0xf0, 0x65, 0xa1, 0x8d, 0xab, 0x19, 0x4d, 0xf8, 0x32, 0x97, 0xe5, 0xc8, 0x29, 0x3f, 0xfc, 0x89,
	0x3f, 0x42, 0x63, 0xcc, 0xa1, 0x32, 0x4a, 0xa5, 0xed, 0x47, 0x28, 0x7f, 0x31, 0xa2, 0x81, 0xdc,
	0x5e, 0x11, 0x4d, 0x0b, 0xfd, 0xa6, 0xe7, 0x36, 0xec, 0x53, 0xf5, 0xaf, 0xb1, 0x34, 0xa2, 0x75,
	0x1c, 0x72, 0x08, 0x01, 0xba, 0xea, 0x13, 0x13, 0x8e, 0x3f, 0xe8, 0x38, 0x04, 0xce, 0x57, 0x04,
	0xcb, 0x2c, 0x0c, 0x2b, 0x16, 0xbe, 0x8f, 0x26, 0x78, 0x18, 0xef, 0xcb, 0x1a, 0x3d, 0xb4, 0x26,
	0xd8, 0xb8, 0x8c, 0x66, 0xfb, 0x8d, 0x93, 0xb6, 0xcc, 0x84, 0x0d, 0xb4, 0x62, 0xd2, 0x26, 0xea,
	0xbf, 0x32, 0x68, 0x36, 0xbe, 0x3e, 0xbe, 0xb4, 0x43, 0x54, 0x00, 0x97, 0xf6, 0x02, 0xbd, 0x69,
	0xb8, 0x96, 0x43, 0x64, 0x7a, 0x58, 0xda, 0x6c, 0x35, 0x37, 0xe3, 0xc2, 0x70, 0x8e, 0x5c, 0x60,
	0xaf, 0xf8, 0xd3, 0xbb, 0x35, 0x74, 0x4e, 0x5c, 0xdb, 0x24, 0x9f, 0xb5, 0x48, 0x57, 0xcb, 0xb7,
	0x48, 0xf7, 0x38, 0x10, 0x4c, 0xfc, 0x0c, 0x15, 0xcf, 0x83, 0x06, 0xbf, 0x25, 0x52, 0x5f, 0xb8,
	0xb3, 0x56, 0x73, 0xf3, 0x9b, 0xa0, 0x91, 0xae, 0x26, 0x20, 0x0d, 0x6d, 0xfa, 0x3c, 0xc6, 0xc5,
	0x9f, 0xa0, 0x09, 0x30, 0x11, 0x1c, 0xc6, 0xd8, 0x90, 0x6c, 0x95, 0x30, 0xb1, 0x26, 0xc4, 0xd5,
	0x63, 0x74, 0x33, 0xce, 0x8f, 0x85, 0xf2, 0x9d, 0xfe, 0x50, 0xbe, 0x32, 0x44, 0x27, 0x57, 0xd7,
	0x8b, 0xe0, 0x8f, 0x10, 0x4e, 0x30, 0x45, 0xd4, 0xbb, 0x89, 0xb2, 0x31, 0x73, 0x65, 0x35, 0x39,
	0x52, 0xff, 0x90, 0x41, 0xf3, 0xc9, 0xf9, 0x65, 0xa4, 0xff, 0xff, 0xeb, 0xc4, 0xd5, 0xbd, 0xe2,
	0x8f, 0xef, 0xd6, 0x62, 0x72, 0xf1, 0x38, 0xbb, 0x83, 0xb2, 0x12, 0x2c, 0x0c, 0xba, 0x3a, 0x6c,
	0xf5, 0x02, 0x29, 0x85, 0xd5, 0x6f, 0xd0, 0x62, 0xda, 0x7a, 0xc0, 0x20, 0x9f, 0xc7, 0x22, 0xb7,
	0xb0, 0xc8, 0xda, 0x10, 0x9d, 0x29, 0x31, 0xfb, 0x4d, 0x54, 0x73, 0x80, 0xc4, 0x3e, 0x71, 0x08,
	0x0b, 0xad, 0x0d, 0x59, 0xea, 0xe7, 0xf9, 0x54, 0xc2, 0x87, 0xe2, 0x49, 0x79, 0x40, 0xf7, 0xb5,
	0x93, 0xf2, 0x00, 0x32, 0x3a, 0x52, 0x2b, 0xca, 0xc9, 0x71, 0x29, 0x79, 0x52, 0xcf, 0xae, 0x75,
	0x52, 0x0b, 0x3f, 0xbd, 0x5b, 0xbb, 0x21, 0xbd, 0x37, 0xf5, 0xc0, 0xd4, 0x7a, 0x94, 0x6a, 0x07,
	0x67, 0x81, 0x6d, 0x94, 0x06, 0xec, 0x7f, 0xef, 0x8a, 0x7d, 0x0c, 0x9c, 0xc2, 0xeb, 0xa4, 0xb7,
	0xc7, 0xca, 0xbe, 0x5f, 0x78, 0x04, 0xdf, 0x26, 0x8f, 0x37, 0x59, 0x14, 0x7d, 0xde, 0x6f, 0xff,
	0x3b, 0x43, 0xd6, 0x9d, 0x56, 0x11, 0xf9, 0xc9, 0x25, 0x1f, 0xb8, 0x2c, 0xe8, 0x82, 0xc5, 0x28,
	0xde, 0x40, 0xb3, 0x6e, 0xa7, 0xad, 0x83, 0x2a, 0x59, 0x79, 0x52, 0x99, 0xc2, 0x8b, 0x6e, 0xa7,
	0x5d, 0x33, 0x7d, 0x59, 0x44, 0x50, 0xfc, 0x08, 0x61, 0x90, 0xf4, 0x58, 0x93, 0x04, 0x91, 0xac,
	0x48, 0xac, 0xa0, 0xe3, 0x18, 0x18, 0xa1, 0xb4, 0xfa, 0x0a, 0xdd, 0xe8, 0xbf, 0x20, 0x14, 0xef,
	0xa2, 0x09, 0x38, 0x32, 0x7a, 0xc5, 0x0e, 0xa2, 0xe5, 0x69, 0x42, 0x5e, 0xfd, 0x4f, 0x26, 0x79,
	0xa3, 0xe2, 0xe5, 0xdc, 0x7b, 0x72, 0x1d, 0xfc, 0x31, 0x1a, 0xa7, 0x3e, 0x31, 0xe5, 0x4d, 0xbf,
	0x34, 0x4e, 0x71, 0xc1, 0x58, 0x70, 0x18, 0xfb, 0x19, 0xc1, 0x01, 0x6f, 0x85, 0x46, 0x10, 0xe5,
	0xf6, 0xad, 0x4b, 0x50, 0xbd, 0xfd, 0xff, 0x3a, 0x79, 0x79, 0xfa, 0xca, 0xc7, 0xaf, 0x06, 0x7c,
	0x5a, 0xbd, 0xcc, 0x37, 0x06, 0x1c, 0xba, 0x89, 0xe6, 0x42, 0xa1, 0x72, 0x3d, 0xca, 0x06, 0x2b,
	0x28, 0xc7, 0x4c, 0xdf, 0xac, 0x87, 0x09, 0xb4, 0xf0, 0x62, 0x44, 0x9b, 0xe4, 0x94, 0x8a, 0x85,
	0xef, 0xa2, 0x69, 0xc1, 0x8c, 0x25, 0x9c, 0xec, 0x8b, 0x11, 0x2d, 0xcf, 0xa9, 0x32, 0xdb, 0xcc,
	0xf4, 0xdd, 0x07, 0xf5, 0xdf, 0x28, 0xaa, 0x40, 0xca, 0x75, 0x9e, 0x0a, 0xf7, 0xd2, 0xef, 0xcc,
	0xed, 0x94, 0x1d, 0xc4, 0x16, 0x97, 0xcc, 0x7f, 0x90, 0xe9, 0xcd, 0x73, 0xdd, 0xbd, 0x60, 0x61,
	0xa1, 0x17, 0x98, 0xe7, 0x47, 0x17, 0x0c, 0x18, 0xd4, 0xb5, 0x38, 0x43, 0x94, 0x78, 0x59, 0xea,
	0x5a, 0x31, 0x46, 0xc7, 0x35, 0x64, 0xd3, 0x07, 0x8c, 0xaf, 0x5d, 0x03, 0x1a, 0x17, 0x50, 0xc5,
	0xe8, 0xb9, 0xe1, 0xc8, 0x46, 0x27, 0x17, 0x98, 0xe7, 0x35, 0x18, 0x03, 0x93, 0x51, 0x3d, 0x20,
	0x26, 0x71, 0xc3, 0x7e, 0x27, 0xc7, 0xa8, 0xc6, 0xc7, 0xc0, 0xa4, 0x24, 0x38, 0xd3, 0xeb, 0x06,
	0x15, 0x2d, 0x4f, 0x56, 0xcb, 0x01, 0x61, 0xcf, 0xa0, 0x60, 0xcb, 0x29, 0x8b, 0xd4, 0x3b, 0xa7,
	0xba, 0xe5, 0x39, 0x4a, 0x4e, 0x20, 0x39, 0x61, 0xdf, 0x73, 0x04, 0x92, 0x4a, 0xe4, 0x54, 0x88,
	0xa4, 0x02, 0x09, 0x2b, 0x05, 0xa6, 0x6f, 0x2b, 0x48, 0xae, 0x94, 0xd0, 0xb3, 0x13, 0xbb, 0xc7,
	0x30, 0x6d, 0x25, 0x1f, 0x31, 0xca, 0x76, 0xb8, 0xb7, 0xb7, 0xae, 0xa5, 0x4c, 0xf7, 0xf6, 0xf6,
	0xda, 0xb5, 0x78, 0x17, 0xec, 0x5a, 0xba, 0x09, 0x9c, 0x82, 0xec, 0x82, 0x5d, 0xab, 0xfc, 0xd6,
	0xb5, 0x42, 0x0b, 0xb6, 0x29, 0x55, 0x8a, 0x3d, 0x0b, 0x1e, 0x52, 0x8a, 0xd7, 0x50, 0x9e, 0x7a,
	0x9d, 0xc0, 0x24, 0xa2, 0x43, 0x9e, 0x91, 0xd5, 0x3d, 0x27, 0x85, 0x4d, 0xb2, 0x45, 0xc2, 0x06,
	0x7a, 0x36, 0xdc, 0x99, 0xec, 0xa0, 0x1f, 0xa0, 0x99, 0x26, 0x31, 0x2c, 0x12, 0xe8, 0x8c, 0xb4,
	0x7d, 0xc7, 0x60, 0x44, 0xb9, 0xb1, 0x9e, 0xd9, 0x98, 0xd6, 0x8a, 0x82, 0x5c, 0x93, 0x54, 0xde,
	0x5b, 0x32, 0x60, 0x63, 0xd9, 0x5b, 0xc2, 0x00, 0xaf, 0x22, 0x39, 0x93, 0xee, 0xd8, 0x0d, 0x65,
	0x8e, 0xb3, 0xa6, 0x04, 0xe5, 0x95, 0xdd, 0x00, 0xb6, 0x11, 0x19, 0x6e, 0x9e, 0x1b, 0x6e, 0xca,
	0xe8, 0x59, 0x6e, 0x09, 0xe5, 0x8c, 0xd0, 0x74, 0x0b, 0x62, 0xbb, 0x86, 0xb4, 0x5d, 0x8f, 0x65,
	0xda, 0xca, 0xcd, 0x18, 0xab, 0x6c, 0x43, 0x3f, 0xd3, 0x3b, 0x29, 0x9d, 0x5d, 0x28, 0x8b, 0x62,
	0xc7, 0xe1, 0x61, 0xd5, 0x2e, 0x60, 0x5a, 0xb9, 0x29, 0x87, 0xb8, 0x8a, 0x22, 0x56, 0x25, 0x28,
	0xaf, 0x88, 0x0b, 0x11, 0xd5, 0x27, 0xae, 0x65, 0xbb, 0xa7, 0xba, 0x61, 0xb6, 0x74, 0x4a, 0x5c,
	0x4b, 0x59, 0xe2, 0x8f, 0x07, 0x45, 0x49, 0x2f, 0x99, 0xad, 0x2a, 0x71, 0x2d, 0xbc, 0x8b, 0x0a,
	0xce, 0xae, 0x1e, 0xab, 0x96, 0x97, 0x79, 0xf0, 0x9a, 0xeb, 0x05, 0x2f, 0x5f, 0x23, 0x96, 0x1d,
	0x88, 0xc6, 0xc6, 0xd9, 0xed, 0x55, 0xcf, 0xbc, 0xe7, 0x82, 0xd5, 0x07, 0x84, 0x5d, 0xc0, 0x16,
	0x56, 0xe4, 0xa9, 0x10, 0x7a, 0xa6, 0x11, 0x76, 0x21, 0x76, 0xc1, 0x99, 0xa1, 0x93, 0xdf, 0xe2,
	0x05, 0x30, 0x02, 0x5a, 0x55, 0x38, 0xfa, 0x1c, 0x9a, 0x08, 0x2e, 0x74, 0x46, 0x95, 0x55, 0xf1,
	0x68, 0x10, 0x5c, 0xd4, 0x28, 0x9e, 0x45, 0x63, 0x01, 0xf3, 0x94, 0xdb, 0x9c, 0x04, 0x3f, 0xf9,
	0x54, 0xd2, 0x67, 0x74, 0xd3, 0x65, 0xca, 0x9a, 0x9c, 0x4a, 0xf8, 0x4d, 0xd9, 0x65, 0xf8, 0x31,
	0x9a, 0x8f, 0x19, 0xac, 0xee, 0x50, 0xc2, 0x0c, 0xcb, 0x0a, 0x94, 0x75, 0x2e, 0x89, 0x7b, 0x86,
	0xeb, 0x71, 0x84, 0xe7, 0x06, 0xfc, 0x5c, 0xee, 0x84, 0x9e, 0x1b, 0xc0, 0xb1, 0xac, 0x42, 0xef,
	0x40, 0x2c, 0xbd, 0xe1, 0x18, 0xa7, 0x54, 0x51, 0x85, 0x65, 0x81, 0xf2, 0x0c, 0x08, 0xe0, 0x6a,
	0x22, 0xfb, 0x9c, 0xd9, 0x96, 0x72, 0x57, 0xb8, 0x1a, 0x27, 0xfc, 0xca, 0xb6, 0xc0, 0x51, 0x7d,
	0xc3, 0x6c, 0x11, 0x46, 0x75, 0xaf, 0xc3, 0x94, 0x0f, 0xc4, 0x3a, 0x25, 0xe9, 0xb8, 0xc3, 0xf0,
	0x02, 0xca, 0x06, 0xcc, 0x83, 0x49, 0xef, 0x09, 0x1f, 0x0b, 0x98, 0x77, 0x62, 0x43, 0x2f, 0xc8,
	0x2d, 0xc5, 0xec, 0x36, 0x09, 0xc0, 0x98, 0xf7, 0x45, 0x2f, 0x08, 0xc4, 0x1a, 0xd0, 0xca, 0x36,
	0xe8, 0x06, 0x68, 0xdd, 0x30, 0x5b, 0x5e, 0xa3, 0xa1, 0x3c, 0x10, 0xba, 0x03, 0xe6, 0xed, 0x09,
	0x0a, 0xe8, 0x36, 0xfd, 0x0e, 0x04, 0xca, 0x0d, 0xa1, 0xdb, 0xf4, 0x3b, 0x15, 0xab, 0xb7, 0x51,
	0xd3, 0x56, 0xfe, 0x2f, 0xda, 0xa8, 0xb8, 0xa2, 0x70, 0xdd, 0xe0, 0x22, 0x3e, 0xec, 0x5d, 0x37,
	0xb8, 0xa2, 0xe0, 0xf1, 0x70, 0x77, 0xa9, 0x69, 0x38, 0x44, 0xf9, 0x50, 0x7a, 0xbc, 0x6b, 0xbd,
	0xe6, 0x04, 0x60, 0x73, 0x9c, 0x60, 0x3f, 0x12, 0x6c, 0x80, 0x0a, 0xf6, 0x2d, 0xc4, 0x7d, 0x40,
	0x17, 0x5e, 0xf1, 0x91, 0xb0, 0x10, 0x50, 0x6a, 0x17, 0x65, 0x5b, 0x7d, 0x19, 0x55, 0xc9, 0xe5,
	0x7a, 0xac, 0xb2, 0x78, 0xda, 0x5f, 0x59, 0x2c, 0xa5, 0xc6, 0xde, 0x64, 0x85, 0xbe, 0x13, 0x75,
	0x35, 0xe5, 0xba, 0xcc, 0xa0, 0x77, 0xfa, 0x72, 0x82, 0xa8, 0xd2, 0xe3, 0x19, 0x41, 0xfd, 0x5d,
	0x26, 0xaa, 0xec, 0x61, 0x11, 0xff, 0xeb, 0x93, 0xcc, 0x57, 0xe1, 0x54, 0x89, 0xf2, 0x7c, 0x25,
	0x7d, 0xe1, 0x02, 0x2d, 0xd6, 0x21, 0xeb, 0x44, 0x2d, 0x6a, 0x1a, 0xa3, 0x65, 0x80, 0x31, 0x3e,
	0x1d, 0xc8, 0xa5, 0xab, 0xa9, 0x4a, 0x53, 0xd2, 0xe8, 0xf7, 0x51, 0x8d, 0x52, 0xae, 0x27, 0x6b,
	0xf3, 0xf7, 0x90, 0xe4, 0xd4, 0x37, 0x51, 0x0d, 0xd0, 0xa7, 0x1e, 0xd6, 0xfd, 0x45, 0xff, 0x21,
	0xaa, 0xa9, 0xba, 0x87, 0x14, 0xe7, 0x47, 0x68, 0x65, 0x50, 0x66, 0xf8, 0xfb, 0xd4, 0xd8, 0x15,
	0xc7, 0xa3, 0xbe, 0x89, 0xbb, 0x5a, 0xac, 0x40, 0x7e, 0x1f, 0x76, 0xa8, 0xc5, 0xcd, 0x9c, 0xac,
	0x91, 0x3f, 0xed, 0x37, 0xc2, 0x5a, 0xaa, 0xe2, 0xb4, 0x0a, 0xf9, 0xef, 0x93, 0x68, 0x26, 0xe9,
	0x32, 0x14, 0x6e, 0x5b, 0xbd, 0xcb, 0x08, 0xd5, 0x03, 0xf3, 0x3c, 0x7c, 0x43, 0x98, 0xe2, 0x14,
	0xcd, 0x3c, 0xb7, 0x20, 0x1c, 0xf9, 0x2d, 0x26, 0xb9, 0xe2, 0xe9, 0x35, 0x07, 0x04, 0xce, 0xbc,
	0x8b, 0x0a, 0xbe, 0x71, 0x4a, 0xa8, 0x6e, 0x38, 0x8e, 0x67, 0x12, 0xf1, 0xc4, 0x34, 0xae, 0x4d,
	0x73, 0x62, 0x49, 0xd0, 0xe0, 0xc2, 0x58, 0x84, 0x9a, 0x3d, 0x99, 0x71, 0x2e, 0x93, 0x07, 0x5a,
	0x28, 0xb2, 0x19, 0x46, 0x57, 0xa8, 0xbd, 0xfd, 0x16, 0xd3, 0x99, 0xa7, 0xb7, 0x49, 0x9b, 0x97,
	0x26, 0xe3, 0xda, 0x2c, 0xe7, 0x1d, 0x75, 0xda, 0x27, 0x2d, 0x56, 0xf3, 0x0e, 0x49, 0xbb, 0x4f,
	0xbe, 0x79, 0x1e, 0xca, 0x67, 0xfb, 0xe4, 0x9b, 0xe7, 0x42, 0xfe, 0x11, 0x12, 0x11, 0x5a, 0x37,
	0x98, 0xd7, 0xb6, 0x4d, 0xdd, 0x22, 0x0e, 0x33, 0x64, 0x85, 0x22, 0xa4, 0x4b, 0x9c, 0xb1, 0x0f,
	0x74, 0xbc, 0x8d, 0x6e, 0xc6, 0xa5, 0x1f, 0xeb, 0xb6, 0x6b, 0x06, 0x4f, 0xb6, 0xb6, 0x77, 0x79,
	0xd9, 0x52, 0xd0, 0xe6, 0x63, 0x88, 0xc7, 0x15, 0xc9, 0xc3, 0x5b, 0x68, 0x21, 0x8e, 0x7a, 0xc2,
	0x51, 0x00, 0x12, 0x05, 0xcd, 0x5c, 0x0c, 0xf4, 0xa4, 0x22, 0x58, 0x51, 0x56, 0x11, 0x98, 0x2d,
	0x8e, 0xd9, 0xde, 0x95, 0xa5, 0x0e, 0x8e, 0x41, 0xb6, 0x2a, 0x9c, 0xd3, 0x8f, 0x78, 0x1a, 0x22,
	0xa6, 0x07, 0x10, 0x4f, 0x25, 0x62, 0x13, 0xcd, 0xc5, 0x11, 0xdb, 0x1c, 0xb1, 0x2b, 0x4b, 0xa3,
	0x1b, 0x31, 0xc0, 0x36, 0x00, 0x06, 0xe4, 0x77, 0xa4, 0x7c, 0x71, 0x40, 0x7e, 0x27, 0x55, 0xfe,
	0x13, 0x29, 0x3f, 0x33, 0x20, 0xff, 0x89, 0x90, 0x5f, 0x43, 0x79, 0xe1, 0x6f, 0x90, 0xb4, 0x2c,
	0x5e, 0x4c, 0x8d, 0x6b, 0xc2, 0x05, 0x4b, 0x40, 0x81, 0x5c, 0x45, 0x1d, 0xef, 0xad, 0xee, 0x1b,
	0xac, 0xc9, 0xb3, 0xf1, 0x0d, 0xe1, 0x30, 0x40, 0x3c, 0x31, 0x58, 0x13, 0xd2, 0x31, 0xc8, 0x40,
	0xce, 0x69, 0x74, 0x1c, 0x87, 0xcb, 0x60, 0x29, 0x43, 0x82, 0xb3, 0x67, 0x1d, 0xc7, 0x01, 0x99,
	0x45, 0x34, 0xe9, 0x79, 0x1e, 0xe7, 0xce, 0x89, 0x97, 0x31, 0xcf, 0xf3, 0x80, 0x71, 0x3b, 0xf4,
	0x78, 0x0a, 0x15, 0xee, 0x1f, 0x8f, 0x62, 0x2e, 0x5f, 0x85, 0x1a, 0xf7, 0x96, 0x74, 0x79, 0xce,
	0xfe, 0xd3, 0x51, 0xe4, 0xf3, 0x9c, 0xfb, 0x71, 0x8a, 0xef, 0xf9, 0x2d, 0xa6, 0xfc, 0x70, 0x94,
	0xe2, 0x7c, 0x27, 0xad, 0x3e, 0x40, 0x9b, 0xb4, 0x43, 0xc0, 0x9f, 0xfb, 0x00, 0x87, 0xa4, 0xcd,
	0x01, 0xea, 0xbb, 0x4c, 0x3c, 0x6e, 0xff, 0xa2, 0x47, 0xfd, 0x8f, 0x12, 0xed, 0xde, 0x25, 0x29,
	0x4f, 0x34, 0x7b, 0x4f, 0xfb, 0x9a, 0xbd, 0x4b, 0x53, 0x4d, 0xd8, 0xea, 0x3d, 0x4e, 0xb6, 0x7a,
	0xcb, 0x43, 0x31, 0xbd, 0x46, 0xef, 0x5b, 0xa4, 0xa4, 0xee, 0x4f, 0x84, 0xf8, 0xfe, 0xd4, 0xb4,
	0x3e, 0x3c, 0xbc, 0x0d, 0x64, 0xa7, 0x9d, 0xe8, 0x65, 0xe4, 0xb9, 0xe3, 0xd5, 0x0d, 0x87, 0xcf,
	0x1b, 0x8b, 0xcd, 0xf3, 0x68, 0xc2, 0xea, 0xb4, 0xdb, 0x5d, 0xd9, 0xfe, 0x8b, 0x81, 0xda, 0x40,
	0xeb, 0x97, 0xc2, 0x60, 0x61, 0x7b, 0xfd, 0x61, 0x77, 0x23, 0x65, 0x5d, 0xa9, 0xe8, 0x28, 0xfe,
	0xfe, 0x25, 0x83, 0xee, 0x0c, 0x13, 0xfd, 0x45, 0x1f, 0x4a, 0xa6, 0x4f, 0xb9, 0x36, 0x5d, 0x1c,
	0xc4, 0xe8, 0xd0, 0x7c, 0x13, 0x9b, 0x54, 0xcb, 0x9f, 0x46, 0x03, 0xf5, 0x6f, 0xa3, 0x51, 0x7b,
	0x1c, 0x13, 0xe2, 0xb5, 0x98, 0xdb, 0xb6, 0x02, 0x7e, 0xd3, 0xc2, 0xec, 0xc0, 0x29, 0x70, 0xcd,
	0x20, 0xb0, 0xda, 0xee, 0xb9, 0xe1, 0xd8, 0x96, 0xce, 0x6b, 0x32, 0x08, 0xea, 0x81, 0x4c, 0x13,
	0xb3, 0x92, 0x53, 0x25, 0xf4, 0x6c, 0x1f, 0xe8, 0x78, 0x07, 0x2d, 0x86, 0xd2, 0xa2, 0x6e, 0x8f,
	0x20, 0x22, 0x71, 0xcc, 0x4b, 0x36, 0xd4, 0xf7, 0x11, 0x0c, 0xba, 0x33, 0x16, 0x10, 0xfe, 0x8d,
	0xd2, 0x6c, 0xc9, 0xfc, 0x81, 0x24, 0xa9, 0x64, 0xb6, 0xf0, 0x43, 0x74, 0x83, 0xeb, 0x73, 0x3d,
	0x5f, 0xa7, 0x66, 0x93, 0x58, 0x1d, 0x87, 0xc8, 0xdc, 0x31, 0x03, 0x8c, 0x23, 0xcf, 0xaf, 0x4a,
	0x32, 0x44, 0x85, 0x53, 0x53, 0xec, 0x46, 0x64, 0x8b, 0xec, 0xa9, 0xc9, 0xb7, 0x72, 0x1b, 0xe5,
	0x99, 0x43, 0xf5, 0x90, 0x39, 0x29, 0xb6, 0xca, 0x1c, 0xfa, 0x9c, 0xf3, 0x1f, 0x76, 0xa3, 0x9a,
	0x2e, 0xf6, 0x21, 0xe0, 0x36, 0x5a, 0xae, 0x95, 0x4f, 0xf4, 0x13, 0xed, 0xf8, 0xdb, 0xef, 0xf4,
	0x52, 0xb9, 0x56, 0x39, 0x3e, 0xd2, 0x6b, 0xdf, 0x9d, 0x1c, 0xe8, 0x47, 0xc7, 0x47, 0x07, 0xb3,
	0x23, 0x78, 0x1d, 0xdd, 0x4a, 0xe7, 0x1f, 0x1c, 0x95, 0xf6, 0x5e, 0x1d, 0xcc, 0x66, 0xf0, 0x1d,
	0xb4, 0x9a, 0x2e, 0xb1, 0x5f, 0xa9, 0x72, 0x91, 0xd1, 0x87, 0xdf, 0xa3, 0xe9, 0xf8, 0xa7, 0x16,
	0xbc, 0x88, 0xe6, 0x6a, 0xaf, 0xaa, 0x12, 0x52, 0xad, 0xec, 0xf7, 0x66, 0x5b, 0x42, 0x0b, 0x7d,
	0x8c, 0xf2, 0xab, 0xca, 0xc1, 0x51, 0x6d, 0x36, 0x93, 0xc2, 0xaa, 0x1e, 0x68, 0xdf, 0x1c, 0x68,
	0xb3, 0xa3, 0x5b, 0x3f, 0x4e, 0xa2, 0x5c, 0xb8, 0x35, 0xfc, 0x7d, 0xf2, 0x51, 0xba, 0x1c, 0x10,
	0xe8, 0x51, 0xef, 0x0c, 0x7d, 0xbe, 0x0d, 0xef, 0xc7, 0xb2, 0x7a, 0xc5, 0x0b, 0xef, 0x21, 0x3d,
	0x55, 0x47, 0xfa, 0xd5, 0x7f, 0xed, 0x5b, 0xef, 0x55, 0xbd, 0x9d, 0x54, 0x2f, 0x8a, 0x3c, 0xfc,
	0xe0, 0x3a, 0x8f, 0xb8, 0x30, 0xc9, 0xc6, 0xb5, 0x5e, 0x49, 0xc5, 0x54, 0xbf, 0x8d, 0x4a, 0x29,
	0xf9, 0xe8, 0x84, 0x3f, 0xb8, 0xf2, 0xb1, 0x12, 0x26, 0xb9, 0x77, 0xf5, 0xb3, 0x95, 0x98, 0xe1,
	0x75, 0xbc, 0xfb, 0x90, 0x07, 0xb1, 0x36, 0xa4, 0x4e, 0xef, 0x69, 0x5f, 0xbf, 0xb4, 0x90, 0x4f,
	0x51, 0x2c, 0x8f, 0xe0, 0xbd, 0x28, 0x36, 0xe3, 0x8a, 0xa5, 0xf1, 0xef, 0x5d, 0x5d, 0xa2, 0x83,
	0xfa, 0xfb, 0x97, 0x8a, 0xc5, 0x27, 0x79, 0x83, 0x0a, 0x89, 0x34, 0x80, 0xd5, 0x2b, 0xea, 0x5f,
	0x50, 0x7f, 0xf7, 0xaa, 0x24, 0x32, 0xe0, 0x3f, 0xd1, 0x77, 0xe5, 0x54, 0xff, 0x49, 0xfb, 0xa6,
	0x9f, 0xea, 0x3f, 0xa9, 0x1f, 0xc3, 0xd5, 0x11, 0xdc, 0x89, 0x5e, 0xab, 0x93, 0xa9, 0x00, 0x7f,
	0x78, 0xdd, 0xc4, 0x02, 0x53, 0x3e, 0xba, 0x86, 0x70, 0x6c, 0xda, 0x3d, 0xf4, 0x26, 0xd7, 0x34,
	0x1c, 0xfe, 0xcf, 0x29, 0xf5, 0x2c, 0xff, 0xf3, 0xf4, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x95,
	0xc4, 0xff, 0xcd, 0xd8, 0x22, 0x00, 0x00,
}
