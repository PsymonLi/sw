// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipsec.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// IPSec protocols
type IpsecProtocol int32

const (
	IpsecProtocol_IPSEC_PROTOCOL_NONE IpsecProtocol = 0
	IpsecProtocol_IPSEC_PROTOCOL_AH   IpsecProtocol = 1
	IpsecProtocol_IPSEC_PROTOCOL_ESP  IpsecProtocol = 2
)

var IpsecProtocol_name = map[int32]string{
	0: "IPSEC_PROTOCOL_NONE",
	1: "IPSEC_PROTOCOL_AH",
	2: "IPSEC_PROTOCOL_ESP",
}
var IpsecProtocol_value = map[string]int32{
	"IPSEC_PROTOCOL_NONE": 0,
	"IPSEC_PROTOCOL_AH":   1,
	"IPSEC_PROTOCOL_ESP":  2,
}

func (x IpsecProtocol) String() string {
	return proto.EnumName(IpsecProtocol_name, int32(x))
}
func (IpsecProtocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

// Encryption algorithms
type EncryptionAlgorithm int32

const (
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE        EncryptionAlgorithm = 0
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_GCM_128 EncryptionAlgorithm = 1
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_GCM_256 EncryptionAlgorithm = 2
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CCM_128 EncryptionAlgorithm = 3
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CCM_192 EncryptionAlgorithm = 4
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CCM_256 EncryptionAlgorithm = 5
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CBC_128 EncryptionAlgorithm = 6
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CBC_192 EncryptionAlgorithm = 7
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CBC_256 EncryptionAlgorithm = 8
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_DES3        EncryptionAlgorithm = 9
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_CHA_CHA     EncryptionAlgorithm = 10
)

var EncryptionAlgorithm_name = map[int32]string{
	0:  "ENCRYPTION_ALGORITHM_NONE",
	1:  "ENCRYPTION_ALGORITHM_AES_GCM_128",
	2:  "ENCRYPTION_ALGORITHM_AES_GCM_256",
	3:  "ENCRYPTION_ALGORITHM_AES_CCM_128",
	4:  "ENCRYPTION_ALGORITHM_AES_CCM_192",
	5:  "ENCRYPTION_ALGORITHM_AES_CCM_256",
	6:  "ENCRYPTION_ALGORITHM_AES_CBC_128",
	7:  "ENCRYPTION_ALGORITHM_AES_CBC_192",
	8:  "ENCRYPTION_ALGORITHM_AES_CBC_256",
	9:  "ENCRYPTION_ALGORITHM_DES3",
	10: "ENCRYPTION_ALGORITHM_CHA_CHA",
}
var EncryptionAlgorithm_value = map[string]int32{
	"ENCRYPTION_ALGORITHM_NONE":        0,
	"ENCRYPTION_ALGORITHM_AES_GCM_128": 1,
	"ENCRYPTION_ALGORITHM_AES_GCM_256": 2,
	"ENCRYPTION_ALGORITHM_AES_CCM_128": 3,
	"ENCRYPTION_ALGORITHM_AES_CCM_192": 4,
	"ENCRYPTION_ALGORITHM_AES_CCM_256": 5,
	"ENCRYPTION_ALGORITHM_AES_CBC_128": 6,
	"ENCRYPTION_ALGORITHM_AES_CBC_192": 7,
	"ENCRYPTION_ALGORITHM_AES_CBC_256": 8,
	"ENCRYPTION_ALGORITHM_DES3":        9,
	"ENCRYPTION_ALGORITHM_CHA_CHA":     10,
}

func (x EncryptionAlgorithm) String() string {
	return proto.EnumName(EncryptionAlgorithm_name, int32(x))
}
func (EncryptionAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

// Authentication algorithms
type AuthenticationAlgorithm int32

const (
	AuthenticationAlgorithm_AUTHENTICATION_ALGORITHM_NONE AuthenticationAlgorithm = 0
	AuthenticationAlgorithm_AUTHENTICATION_AES_GCM        AuthenticationAlgorithm = 1
	AuthenticationAlgorithm_AUTHENTICATION_AES_CCM        AuthenticationAlgorithm = 2
	AuthenticationAlgorithm_AUTHENTICATION_HMAC           AuthenticationAlgorithm = 3
	AuthenticationAlgorithm_AUTHENTICATION_AES_CBC_SHA    AuthenticationAlgorithm = 4
)

var AuthenticationAlgorithm_name = map[int32]string{
	0: "AUTHENTICATION_ALGORITHM_NONE",
	1: "AUTHENTICATION_AES_GCM",
	2: "AUTHENTICATION_AES_CCM",
	3: "AUTHENTICATION_HMAC",
	4: "AUTHENTICATION_AES_CBC_SHA",
}
var AuthenticationAlgorithm_value = map[string]int32{
	"AUTHENTICATION_ALGORITHM_NONE": 0,
	"AUTHENTICATION_AES_GCM":        1,
	"AUTHENTICATION_AES_CCM":        2,
	"AUTHENTICATION_HMAC":           3,
	"AUTHENTICATION_AES_CBC_SHA":    4,
}

func (x AuthenticationAlgorithm) String() string {
	return proto.EnumName(AuthenticationAlgorithm_name, int32(x))
}
func (AuthenticationAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

type IpsecSAActionType int32

const (
	IpsecSAActionType_IPSEC_SA_ACTION_TYPE_NONE    IpsecSAActionType = 0
	IpsecSAActionType_IPSEC_SA_ACTION_TYPE_ENCRYPT IpsecSAActionType = 1
	IpsecSAActionType_IPSEC_SA_ACTION_TYPE_DECRYPT IpsecSAActionType = 2
	IpsecSAActionType_IPSEC_SA_ACTION_TYPE_DROP    IpsecSAActionType = 3
)

var IpsecSAActionType_name = map[int32]string{
	0: "IPSEC_SA_ACTION_TYPE_NONE",
	1: "IPSEC_SA_ACTION_TYPE_ENCRYPT",
	2: "IPSEC_SA_ACTION_TYPE_DECRYPT",
	3: "IPSEC_SA_ACTION_TYPE_DROP",
}
var IpsecSAActionType_value = map[string]int32{
	"IPSEC_SA_ACTION_TYPE_NONE":    0,
	"IPSEC_SA_ACTION_TYPE_ENCRYPT": 1,
	"IPSEC_SA_ACTION_TYPE_DECRYPT": 2,
	"IPSEC_SA_ACTION_TYPE_DROP":    3,
}

func (x IpsecSAActionType) String() string {
	return proto.EnumName(IpsecSAActionType_name, int32(x))
}
func (IpsecSAActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

// Key object
type Key struct {
	// Types that are valid to be assigned to KeyInfo:
	//	*Key_Key
	//	*Key_KeyLocation
	KeyInfo isKey_KeyInfo `protobuf_oneof:"key_info"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

type isKey_KeyInfo interface{ isKey_KeyInfo() }

type Key_Key struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3,oneof"`
}
type Key_KeyLocation struct {
	KeyLocation uint32 `protobuf:"varint,2,opt,name=key_location,json=keyLocation,oneof"`
}

func (*Key_Key) isKey_KeyInfo()         {}
func (*Key_KeyLocation) isKey_KeyInfo() {}

func (m *Key) GetKeyInfo() isKey_KeyInfo {
	if m != nil {
		return m.KeyInfo
	}
	return nil
}

func (m *Key) GetKey() []byte {
	if x, ok := m.GetKeyInfo().(*Key_Key); ok {
		return x.Key
	}
	return nil
}

func (m *Key) GetKeyLocation() uint32 {
	if x, ok := m.GetKeyInfo().(*Key_KeyLocation); ok {
		return x.KeyLocation
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Key) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Key_OneofMarshaler, _Key_OneofUnmarshaler, _Key_OneofSizer, []interface{}{
		(*Key_Key)(nil),
		(*Key_KeyLocation)(nil),
	}
}

func _Key_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Key)
	// key_info
	switch x := m.KeyInfo.(type) {
	case *Key_Key:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Key)
	case *Key_KeyLocation:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.KeyLocation))
	case nil:
	default:
		return fmt.Errorf("Key.KeyInfo has unexpected type %T", x)
	}
	return nil
}

func _Key_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Key)
	switch tag {
	case 1: // key_info.key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.KeyInfo = &Key_Key{x}
		return true, err
	case 2: // key_info.key_location
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyInfo = &Key_KeyLocation{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Key_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Key)
	// key_info
	switch x := m.KeyInfo.(type) {
	case *Key_Key:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Key)))
		n += len(x.Key)
	case *Key_KeyLocation:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.KeyLocation))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// IPSec security association object
type IpsecSAEncrypt struct {
	KeyOrHandle             *IpsecSAEncryptKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Protocol                IpsecProtocol            `protobuf:"varint,2,opt,name=protocol,enum=ipsec.IpsecProtocol" json:"protocol,omitempty"`
	AuthenticationAlgorithm AuthenticationAlgorithm  `protobuf:"varint,3,opt,name=authentication_algorithm,json=authenticationAlgorithm,enum=ipsec.AuthenticationAlgorithm" json:"authentication_algorithm,omitempty"`
	AuthenticationKey       *Key                     `protobuf:"bytes,4,opt,name=authentication_key,json=authenticationKey" json:"authentication_key,omitempty"`
	EncryptionAlgorithm     EncryptionAlgorithm      `protobuf:"varint,5,opt,name=encryption_algorithm,json=encryptionAlgorithm,enum=ipsec.EncryptionAlgorithm" json:"encryption_algorithm,omitempty"`
	EncryptionKey           *Key                     `protobuf:"bytes,6,opt,name=encryption_key,json=encryptionKey" json:"encryption_key,omitempty"`
	LocalGatewayIp          *IPAddress               `protobuf:"bytes,7,opt,name=local_gateway_ip,json=localGatewayIp" json:"local_gateway_ip,omitempty"`
	RemoteGatewayIp         *IPAddress               `protobuf:"bytes,8,opt,name=remote_gateway_ip,json=remoteGatewayIp" json:"remote_gateway_ip,omitempty"`
	Spi                     uint32                   `protobuf:"varint,9,opt,name=spi" json:"spi,omitempty"`
	NatTraversalPort        uint32                   `protobuf:"varint,10,opt,name=nat_traversal_port,json=natTraversalPort" json:"nat_traversal_port,omitempty"`
	Salt                    uint32                   `protobuf:"varint,11,opt,name=salt" json:"salt,omitempty"`
	Iv                      uint64                   `protobuf:"varint,12,opt,name=iv" json:"iv,omitempty"`
	TepVrf                  *VrfKeyHandle            `protobuf:"bytes,13,opt,name=tep_vrf,json=tepVrf" json:"tep_vrf,omitempty"`
}

func (m *IpsecSAEncrypt) Reset()                    { *m = IpsecSAEncrypt{} }
func (m *IpsecSAEncrypt) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncrypt) ProtoMessage()               {}
func (*IpsecSAEncrypt) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *IpsecSAEncrypt) GetKeyOrHandle() *IpsecSAEncryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecSAEncrypt) GetProtocol() IpsecProtocol {
	if m != nil {
		return m.Protocol
	}
	return IpsecProtocol_IPSEC_PROTOCOL_NONE
}

func (m *IpsecSAEncrypt) GetAuthenticationAlgorithm() AuthenticationAlgorithm {
	if m != nil {
		return m.AuthenticationAlgorithm
	}
	return AuthenticationAlgorithm_AUTHENTICATION_ALGORITHM_NONE
}

func (m *IpsecSAEncrypt) GetAuthenticationKey() *Key {
	if m != nil {
		return m.AuthenticationKey
	}
	return nil
}

func (m *IpsecSAEncrypt) GetEncryptionAlgorithm() EncryptionAlgorithm {
	if m != nil {
		return m.EncryptionAlgorithm
	}
	return EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE
}

func (m *IpsecSAEncrypt) GetEncryptionKey() *Key {
	if m != nil {
		return m.EncryptionKey
	}
	return nil
}

func (m *IpsecSAEncrypt) GetLocalGatewayIp() *IPAddress {
	if m != nil {
		return m.LocalGatewayIp
	}
	return nil
}

func (m *IpsecSAEncrypt) GetRemoteGatewayIp() *IPAddress {
	if m != nil {
		return m.RemoteGatewayIp
	}
	return nil
}

func (m *IpsecSAEncrypt) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

func (m *IpsecSAEncrypt) GetNatTraversalPort() uint32 {
	if m != nil {
		return m.NatTraversalPort
	}
	return 0
}

func (m *IpsecSAEncrypt) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *IpsecSAEncrypt) GetIv() uint64 {
	if m != nil {
		return m.Iv
	}
	return 0
}

func (m *IpsecSAEncrypt) GetTepVrf() *VrfKeyHandle {
	if m != nil {
		return m.TepVrf
	}
	return nil
}

// IPSec security association object
type IpsecSADecrypt struct {
	KeyOrHandle             *IpsecSADecryptKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Protocol                IpsecProtocol            `protobuf:"varint,2,opt,name=protocol,enum=ipsec.IpsecProtocol" json:"protocol,omitempty"`
	AuthenticationAlgorithm AuthenticationAlgorithm  `protobuf:"varint,3,opt,name=authentication_algorithm,json=authenticationAlgorithm,enum=ipsec.AuthenticationAlgorithm" json:"authentication_algorithm,omitempty"`
	AuthenticationKey       *Key                     `protobuf:"bytes,4,opt,name=authentication_key,json=authenticationKey" json:"authentication_key,omitempty"`
	DecryptionAlgorithm     EncryptionAlgorithm      `protobuf:"varint,5,opt,name=decryption_algorithm,json=decryptionAlgorithm,enum=ipsec.EncryptionAlgorithm" json:"decryption_algorithm,omitempty"`
	RekeyDecAlgorithm       EncryptionAlgorithm      `protobuf:"varint,6,opt,name=rekey_dec_algorithm,json=rekeyDecAlgorithm,enum=ipsec.EncryptionAlgorithm" json:"rekey_dec_algorithm,omitempty"`
	DecryptionKey           *Key                     `protobuf:"bytes,7,opt,name=decryption_key,json=decryptionKey" json:"decryption_key,omitempty"`
	RekeyAuthenticationKey  *Key                     `protobuf:"bytes,8,opt,name=rekey_authentication_key,json=rekeyAuthenticationKey" json:"rekey_authentication_key,omitempty"`
	RekeyDecryptionKey      *Key                     `protobuf:"bytes,9,opt,name=rekey_decryption_key,json=rekeyDecryptionKey" json:"rekey_decryption_key,omitempty"`
	Spi                     uint32                   `protobuf:"varint,10,opt,name=spi" json:"spi,omitempty"`
	RekeyActive             uint32                   `protobuf:"varint,11,opt,name=rekey_active,json=rekeyActive" json:"rekey_active,omitempty"`
	RekeySpi                uint32                   `protobuf:"varint,12,opt,name=rekey_spi,json=rekeySpi" json:"rekey_spi,omitempty"`
	Salt                    uint32                   `protobuf:"varint,13,opt,name=salt" json:"salt,omitempty"`
	TepVrf                  *VrfKeyHandle            `protobuf:"bytes,14,opt,name=tep_vrf,json=tepVrf" json:"tep_vrf,omitempty"`
}

func (m *IpsecSADecrypt) Reset()                    { *m = IpsecSADecrypt{} }
func (m *IpsecSADecrypt) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecrypt) ProtoMessage()               {}
func (*IpsecSADecrypt) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

func (m *IpsecSADecrypt) GetKeyOrHandle() *IpsecSADecryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecSADecrypt) GetProtocol() IpsecProtocol {
	if m != nil {
		return m.Protocol
	}
	return IpsecProtocol_IPSEC_PROTOCOL_NONE
}

func (m *IpsecSADecrypt) GetAuthenticationAlgorithm() AuthenticationAlgorithm {
	if m != nil {
		return m.AuthenticationAlgorithm
	}
	return AuthenticationAlgorithm_AUTHENTICATION_ALGORITHM_NONE
}

func (m *IpsecSADecrypt) GetAuthenticationKey() *Key {
	if m != nil {
		return m.AuthenticationKey
	}
	return nil
}

func (m *IpsecSADecrypt) GetDecryptionAlgorithm() EncryptionAlgorithm {
	if m != nil {
		return m.DecryptionAlgorithm
	}
	return EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE
}

func (m *IpsecSADecrypt) GetRekeyDecAlgorithm() EncryptionAlgorithm {
	if m != nil {
		return m.RekeyDecAlgorithm
	}
	return EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE
}

func (m *IpsecSADecrypt) GetDecryptionKey() *Key {
	if m != nil {
		return m.DecryptionKey
	}
	return nil
}

func (m *IpsecSADecrypt) GetRekeyAuthenticationKey() *Key {
	if m != nil {
		return m.RekeyAuthenticationKey
	}
	return nil
}

func (m *IpsecSADecrypt) GetRekeyDecryptionKey() *Key {
	if m != nil {
		return m.RekeyDecryptionKey
	}
	return nil
}

func (m *IpsecSADecrypt) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

func (m *IpsecSADecrypt) GetRekeyActive() uint32 {
	if m != nil {
		return m.RekeyActive
	}
	return 0
}

func (m *IpsecSADecrypt) GetRekeySpi() uint32 {
	if m != nil {
		return m.RekeySpi
	}
	return 0
}

func (m *IpsecSADecrypt) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *IpsecSADecrypt) GetTepVrf() *VrfKeyHandle {
	if m != nil {
		return m.TepVrf
	}
	return nil
}

type IPSecSAEncryptGetSpec struct {
	KeyOrHandle             *IpsecSAEncryptKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Protocol                IpsecProtocol            `protobuf:"varint,2,opt,name=protocol,enum=ipsec.IpsecProtocol" json:"protocol,omitempty"`
	AuthenticationAlgorithm AuthenticationAlgorithm  `protobuf:"varint,3,opt,name=authentication_algorithm,json=authenticationAlgorithm,enum=ipsec.AuthenticationAlgorithm" json:"authentication_algorithm,omitempty"`
	AuthenticationKey       *Key                     `protobuf:"bytes,4,opt,name=authentication_key,json=authenticationKey" json:"authentication_key,omitempty"`
	EncryptionAlgorithm     EncryptionAlgorithm      `protobuf:"varint,5,opt,name=encryption_algorithm,json=encryptionAlgorithm,enum=ipsec.EncryptionAlgorithm" json:"encryption_algorithm,omitempty"`
	EncryptionKey           *Key                     `protobuf:"bytes,6,opt,name=encryption_key,json=encryptionKey" json:"encryption_key,omitempty"`
	LocalGatewayIp          *IPAddress               `protobuf:"bytes,7,opt,name=local_gateway_ip,json=localGatewayIp" json:"local_gateway_ip,omitempty"`
	RemoteGatewayIp         *IPAddress               `protobuf:"bytes,8,opt,name=remote_gateway_ip,json=remoteGatewayIp" json:"remote_gateway_ip,omitempty"`
	Spi                     uint32                   `protobuf:"varint,9,opt,name=spi" json:"spi,omitempty"`
	NatTraversalPort        uint32                   `protobuf:"varint,10,opt,name=nat_traversal_port,json=natTraversalPort" json:"nat_traversal_port,omitempty"`
	Salt                    uint32                   `protobuf:"varint,11,opt,name=salt" json:"salt,omitempty"`
	Iv                      uint64                   `protobuf:"varint,12,opt,name=iv" json:"iv,omitempty"`
	KeyIndex                uint32                   `protobuf:"varint,13,opt,name=key_index,json=keyIndex" json:"key_index,omitempty"`
	IvSize                  uint32                   `protobuf:"varint,14,opt,name=iv_size,json=ivSize" json:"iv_size,omitempty"`
	IcvSize                 uint32                   `protobuf:"varint,15,opt,name=icv_size,json=icvSize" json:"icv_size,omitempty"`
	SeqNo                   uint64                   `protobuf:"varint,16,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	TotalPkts               uint64                   `protobuf:"varint,17,opt,name=total_pkts,json=totalPkts" json:"total_pkts,omitempty"`
	TotalBytes              uint64                   `protobuf:"varint,18,opt,name=total_bytes,json=totalBytes" json:"total_bytes,omitempty"`
	TotalDrops              uint64                   `protobuf:"varint,19,opt,name=total_drops,json=totalDrops" json:"total_drops,omitempty"`
	TotalRxPkts             uint64                   `protobuf:"varint,20,opt,name=total_rx_pkts,json=totalRxPkts" json:"total_rx_pkts,omitempty"`
	TotalRxBytes            uint64                   `protobuf:"varint,21,opt,name=total_rx_bytes,json=totalRxBytes" json:"total_rx_bytes,omitempty"`
	TotalRxDrops            uint64                   `protobuf:"varint,22,opt,name=total_rx_drops,json=totalRxDrops" json:"total_rx_drops,omitempty"`
	TepVrf                  *VrfKeyHandle            `protobuf:"bytes,23,opt,name=tep_vrf,json=tepVrf" json:"tep_vrf,omitempty"`
}

func (m *IPSecSAEncryptGetSpec) Reset()                    { *m = IPSecSAEncryptGetSpec{} }
func (m *IPSecSAEncryptGetSpec) String() string            { return proto.CompactTextString(m) }
func (*IPSecSAEncryptGetSpec) ProtoMessage()               {}
func (*IPSecSAEncryptGetSpec) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

func (m *IPSecSAEncryptGetSpec) GetKeyOrHandle() *IpsecSAEncryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IPSecSAEncryptGetSpec) GetProtocol() IpsecProtocol {
	if m != nil {
		return m.Protocol
	}
	return IpsecProtocol_IPSEC_PROTOCOL_NONE
}

func (m *IPSecSAEncryptGetSpec) GetAuthenticationAlgorithm() AuthenticationAlgorithm {
	if m != nil {
		return m.AuthenticationAlgorithm
	}
	return AuthenticationAlgorithm_AUTHENTICATION_ALGORITHM_NONE
}

func (m *IPSecSAEncryptGetSpec) GetAuthenticationKey() *Key {
	if m != nil {
		return m.AuthenticationKey
	}
	return nil
}

func (m *IPSecSAEncryptGetSpec) GetEncryptionAlgorithm() EncryptionAlgorithm {
	if m != nil {
		return m.EncryptionAlgorithm
	}
	return EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE
}

func (m *IPSecSAEncryptGetSpec) GetEncryptionKey() *Key {
	if m != nil {
		return m.EncryptionKey
	}
	return nil
}

func (m *IPSecSAEncryptGetSpec) GetLocalGatewayIp() *IPAddress {
	if m != nil {
		return m.LocalGatewayIp
	}
	return nil
}

func (m *IPSecSAEncryptGetSpec) GetRemoteGatewayIp() *IPAddress {
	if m != nil {
		return m.RemoteGatewayIp
	}
	return nil
}

func (m *IPSecSAEncryptGetSpec) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetNatTraversalPort() uint32 {
	if m != nil {
		return m.NatTraversalPort
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetIv() uint64 {
	if m != nil {
		return m.Iv
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetKeyIndex() uint32 {
	if m != nil {
		return m.KeyIndex
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetIvSize() uint32 {
	if m != nil {
		return m.IvSize
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetIcvSize() uint32 {
	if m != nil {
		return m.IcvSize
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetTotalPkts() uint64 {
	if m != nil {
		return m.TotalPkts
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetTotalBytes() uint64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetTotalDrops() uint64 {
	if m != nil {
		return m.TotalDrops
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetTotalRxPkts() uint64 {
	if m != nil {
		return m.TotalRxPkts
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetTotalRxBytes() uint64 {
	if m != nil {
		return m.TotalRxBytes
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetTotalRxDrops() uint64 {
	if m != nil {
		return m.TotalRxDrops
	}
	return 0
}

func (m *IPSecSAEncryptGetSpec) GetTepVrf() *VrfKeyHandle {
	if m != nil {
		return m.TepVrf
	}
	return nil
}

type IPSecSADecryptGetSpec struct {
	KeyOrHandle             *IpsecSADecryptKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Protocol                IpsecProtocol            `protobuf:"varint,2,opt,name=protocol,enum=ipsec.IpsecProtocol" json:"protocol,omitempty"`
	AuthenticationAlgorithm AuthenticationAlgorithm  `protobuf:"varint,3,opt,name=authentication_algorithm,json=authenticationAlgorithm,enum=ipsec.AuthenticationAlgorithm" json:"authentication_algorithm,omitempty"`
	AuthenticationKey       *Key                     `protobuf:"bytes,4,opt,name=authentication_key,json=authenticationKey" json:"authentication_key,omitempty"`
	DecryptionAlgorithm     EncryptionAlgorithm      `protobuf:"varint,5,opt,name=decryption_algorithm,json=decryptionAlgorithm,enum=ipsec.EncryptionAlgorithm" json:"decryption_algorithm,omitempty"`
	RekeyDecAlgorithm       EncryptionAlgorithm      `protobuf:"varint,6,opt,name=rekey_dec_algorithm,json=rekeyDecAlgorithm,enum=ipsec.EncryptionAlgorithm" json:"rekey_dec_algorithm,omitempty"`
	DecryptionKey           *Key                     `protobuf:"bytes,7,opt,name=decryption_key,json=decryptionKey" json:"decryption_key,omitempty"`
	RekeyAuthenticationKey  *Key                     `protobuf:"bytes,8,opt,name=rekey_authentication_key,json=rekeyAuthenticationKey" json:"rekey_authentication_key,omitempty"`
	RekeyDecryptionKey      *Key                     `protobuf:"bytes,9,opt,name=rekey_decryption_key,json=rekeyDecryptionKey" json:"rekey_decryption_key,omitempty"`
	LocalGatewayIp          *IPAddress               `protobuf:"bytes,10,opt,name=local_gateway_ip,json=localGatewayIp" json:"local_gateway_ip,omitempty"`
	RemoteGatewayIp         *IPAddress               `protobuf:"bytes,11,opt,name=remote_gateway_ip,json=remoteGatewayIp" json:"remote_gateway_ip,omitempty"`
	Spi                     uint32                   `protobuf:"varint,12,opt,name=spi" json:"spi,omitempty"`
	RekeyActive             uint32                   `protobuf:"varint,13,opt,name=rekey_active,json=rekeyActive" json:"rekey_active,omitempty"`
	RekeySpi                uint32                   `protobuf:"varint,14,opt,name=rekey_spi,json=rekeySpi" json:"rekey_spi,omitempty"`
	Salt                    uint32                   `protobuf:"varint,15,opt,name=salt" json:"salt,omitempty"`
	KeyIndex                uint32                   `protobuf:"varint,16,opt,name=key_index,json=keyIndex" json:"key_index,omitempty"`
	NewKeyIndex             uint32                   `protobuf:"varint,17,opt,name=new_key_index,json=newKeyIndex" json:"new_key_index,omitempty"`
	IvSize                  uint32                   `protobuf:"varint,18,opt,name=iv_size,json=ivSize" json:"iv_size,omitempty"`
	IcvSize                 uint32                   `protobuf:"varint,19,opt,name=icv_size,json=icvSize" json:"icv_size,omitempty"`
	SeqNo                   uint64                   `protobuf:"varint,20,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	TotalPkts               uint64                   `protobuf:"varint,21,opt,name=total_pkts,json=totalPkts" json:"total_pkts,omitempty"`
	TotalBytes              uint64                   `protobuf:"varint,22,opt,name=total_bytes,json=totalBytes" json:"total_bytes,omitempty"`
	TotalDrops              uint64                   `protobuf:"varint,23,opt,name=total_drops,json=totalDrops" json:"total_drops,omitempty"`
	TotalRxPkts             uint64                   `protobuf:"varint,24,opt,name=total_rx_pkts,json=totalRxPkts" json:"total_rx_pkts,omitempty"`
	TotalRxBytes            uint64                   `protobuf:"varint,25,opt,name=total_rx_bytes,json=totalRxBytes" json:"total_rx_bytes,omitempty"`
	TotalRxDrops            uint64                   `protobuf:"varint,26,opt,name=total_rx_drops,json=totalRxDrops" json:"total_rx_drops,omitempty"`
	TepVrf                  *VrfKeyHandle            `protobuf:"bytes,27,opt,name=tep_vrf,json=tepVrf" json:"tep_vrf,omitempty"`
	SeqNoBmp                uint64                   `protobuf:"varint,28,opt,name=seq_no_bmp,json=seqNoBmp" json:"seq_no_bmp,omitempty"`
	LastReplaySeqNo         uint64                   `protobuf:"varint,29,opt,name=last_replay_seq_no,json=lastReplaySeqNo" json:"last_replay_seq_no,omitempty"`
}

func (m *IPSecSADecryptGetSpec) Reset()                    { *m = IPSecSADecryptGetSpec{} }
func (m *IPSecSADecryptGetSpec) String() string            { return proto.CompactTextString(m) }
func (*IPSecSADecryptGetSpec) ProtoMessage()               {}
func (*IPSecSADecryptGetSpec) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{4} }

func (m *IPSecSADecryptGetSpec) GetKeyOrHandle() *IpsecSADecryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IPSecSADecryptGetSpec) GetProtocol() IpsecProtocol {
	if m != nil {
		return m.Protocol
	}
	return IpsecProtocol_IPSEC_PROTOCOL_NONE
}

func (m *IPSecSADecryptGetSpec) GetAuthenticationAlgorithm() AuthenticationAlgorithm {
	if m != nil {
		return m.AuthenticationAlgorithm
	}
	return AuthenticationAlgorithm_AUTHENTICATION_ALGORITHM_NONE
}

func (m *IPSecSADecryptGetSpec) GetAuthenticationKey() *Key {
	if m != nil {
		return m.AuthenticationKey
	}
	return nil
}

func (m *IPSecSADecryptGetSpec) GetDecryptionAlgorithm() EncryptionAlgorithm {
	if m != nil {
		return m.DecryptionAlgorithm
	}
	return EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE
}

func (m *IPSecSADecryptGetSpec) GetRekeyDecAlgorithm() EncryptionAlgorithm {
	if m != nil {
		return m.RekeyDecAlgorithm
	}
	return EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE
}

func (m *IPSecSADecryptGetSpec) GetDecryptionKey() *Key {
	if m != nil {
		return m.DecryptionKey
	}
	return nil
}

func (m *IPSecSADecryptGetSpec) GetRekeyAuthenticationKey() *Key {
	if m != nil {
		return m.RekeyAuthenticationKey
	}
	return nil
}

func (m *IPSecSADecryptGetSpec) GetRekeyDecryptionKey() *Key {
	if m != nil {
		return m.RekeyDecryptionKey
	}
	return nil
}

func (m *IPSecSADecryptGetSpec) GetLocalGatewayIp() *IPAddress {
	if m != nil {
		return m.LocalGatewayIp
	}
	return nil
}

func (m *IPSecSADecryptGetSpec) GetRemoteGatewayIp() *IPAddress {
	if m != nil {
		return m.RemoteGatewayIp
	}
	return nil
}

func (m *IPSecSADecryptGetSpec) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetRekeyActive() uint32 {
	if m != nil {
		return m.RekeyActive
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetRekeySpi() uint32 {
	if m != nil {
		return m.RekeySpi
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetKeyIndex() uint32 {
	if m != nil {
		return m.KeyIndex
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetNewKeyIndex() uint32 {
	if m != nil {
		return m.NewKeyIndex
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetIvSize() uint32 {
	if m != nil {
		return m.IvSize
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetIcvSize() uint32 {
	if m != nil {
		return m.IcvSize
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetTotalPkts() uint64 {
	if m != nil {
		return m.TotalPkts
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetTotalBytes() uint64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetTotalDrops() uint64 {
	if m != nil {
		return m.TotalDrops
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetTotalRxPkts() uint64 {
	if m != nil {
		return m.TotalRxPkts
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetTotalRxBytes() uint64 {
	if m != nil {
		return m.TotalRxBytes
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetTotalRxDrops() uint64 {
	if m != nil {
		return m.TotalRxDrops
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetTepVrf() *VrfKeyHandle {
	if m != nil {
		return m.TepVrf
	}
	return nil
}

func (m *IPSecSADecryptGetSpec) GetSeqNoBmp() uint64 {
	if m != nil {
		return m.SeqNoBmp
	}
	return 0
}

func (m *IPSecSADecryptGetSpec) GetLastReplaySeqNo() uint64 {
	if m != nil {
		return m.LastReplaySeqNo
	}
	return 0
}

type IPSecGlobalStatisticsGetSpec struct {
	EncryptInputDescErrors       uint64 `protobuf:"varint,1,opt,name=encrypt_input_desc_errors,json=encryptInputDescErrors" json:"encrypt_input_desc_errors,omitempty"`
	EncryptOutputDescErrors      uint64 `protobuf:"varint,2,opt,name=encrypt_output_desc_errors,json=encryptOutputDescErrors" json:"encrypt_output_desc_errors,omitempty"`
	EncryptCbRingBaseErrors      uint64 `protobuf:"varint,3,opt,name=encrypt_cb_ring_base_errors,json=encryptCbRingBaseErrors" json:"encrypt_cb_ring_base_errors,omitempty"`
	EncryptInputPageErrors       uint64 `protobuf:"varint,4,opt,name=encrypt_input_page_errors,json=encryptInputPageErrors" json:"encrypt_input_page_errors,omitempty"`
	EncryptBarcoReqAddrErrors    uint64 `protobuf:"varint,5,opt,name=encrypt_barco_req_addr_errors,json=encryptBarcoReqAddrErrors" json:"encrypt_barco_req_addr_errors,omitempty"`
	EncryptBarcoCbBaseErrors     uint64 `protobuf:"varint,6,opt,name=encrypt_barco_cb_base_errors,json=encryptBarcoCbBaseErrors" json:"encrypt_barco_cb_base_errors,omitempty"`
	EncryptPadAddrErrors         uint64 `protobuf:"varint,7,opt,name=encrypt_pad_addr_errors,json=encryptPadAddrErrors" json:"encrypt_pad_addr_errors,omitempty"`
	EncryptTailBytesErrors       uint64 `protobuf:"varint,8,opt,name=encrypt_tail_bytes_errors,json=encryptTailBytesErrors" json:"encrypt_tail_bytes_errors,omitempty"`
	EncryptOutputPageErrors      uint64 `protobuf:"varint,9,opt,name=encrypt_output_page_errors,json=encryptOutputPageErrors" json:"encrypt_output_page_errors,omitempty"`
	EncryptStage4InpageErrors    uint64 `protobuf:"varint,10,opt,name=encrypt_stage4_inpage_errors,json=encryptStage4InpageErrors" json:"encrypt_stage4_inpage_errors,omitempty"`
	EncryptTable0InpageErrors    uint64 `protobuf:"varint,11,opt,name=encrypt_table0_inpage_errors,json=encryptTable0InpageErrors" json:"encrypt_table0_inpage_errors,omitempty"`
	EncryptTable2InpageErrors    uint64 `protobuf:"varint,12,opt,name=encrypt_table2_inpage_errors,json=encryptTable2InpageErrors" json:"encrypt_table2_inpage_errors,omitempty"`
	EncryptTable3InpageErrors    uint64 `protobuf:"varint,13,opt,name=encrypt_table3_inpage_errors,json=encryptTable3InpageErrors" json:"encrypt_table3_inpage_errors,omitempty"`
	EncryptBadBarcoAddrErrors    uint64 `protobuf:"varint,14,opt,name=encrypt_bad_barco_addr_errors,json=encryptBadBarcoAddrErrors" json:"encrypt_bad_barco_addr_errors,omitempty"`
	EncryptBarcoFullErrors       uint64 `protobuf:"varint,15,opt,name=encrypt_barco_full_errors,json=encryptBarcoFullErrors" json:"encrypt_barco_full_errors,omitempty"`
	EncryptCbRingDmaErrors       uint64 `protobuf:"varint,16,opt,name=encrypt_cb_ring_dma_errors,json=encryptCbRingDmaErrors" json:"encrypt_cb_ring_dma_errors,omitempty"`
	EncryptDescExhaustErrors     uint64 `protobuf:"varint,17,opt,name=encrypt_desc_exhaust_errors,json=encryptDescExhaustErrors" json:"encrypt_desc_exhaust_errors,omitempty"`
	EncryptTxdma1EnterCounters   uint64 `protobuf:"varint,18,opt,name=encrypt_txdma1_enter_counters,json=encryptTxdma1EnterCounters" json:"encrypt_txdma1_enter_counters,omitempty"`
	EncryptTxdma2EnterCounters   uint64 `protobuf:"varint,19,opt,name=encrypt_txdma2_enter_counters,json=encryptTxdma2EnterCounters" json:"encrypt_txdma2_enter_counters,omitempty"`
	EncryptTxdma1DummyErrors     uint64 `protobuf:"varint,20,opt,name=encrypt_txdma1_dummy_errors,json=encryptTxdma1DummyErrors" json:"encrypt_txdma1_dummy_errors,omitempty"`
	EncryptRxdmaDummyDescErrors  uint64 `protobuf:"varint,21,opt,name=encrypt_rxdma_dummy_desc_errors,json=encryptRxdmaDummyDescErrors" json:"encrypt_rxdma_dummy_desc_errors,omitempty"`
	EncryptRxdmaEnterCounters    uint64 `protobuf:"varint,22,opt,name=encrypt_rxdma_enter_counters,json=encryptRxdmaEnterCounters" json:"encrypt_rxdma_enter_counters,omitempty"`
	EncryptBarcoBadIndescErrors  uint64 `protobuf:"varint,23,opt,name=encrypt_barco_bad_indesc_errors,json=encryptBarcoBadIndescErrors" json:"encrypt_barco_bad_indesc_errors,omitempty"`
	EncryptBarcoBadOutdescErrors uint64 `protobuf:"varint,24,opt,name=encrypt_barco_bad_outdesc_errors,json=encryptBarcoBadOutdescErrors" json:"encrypt_barco_bad_outdesc_errors,omitempty"`
	DecryptInputDescErrors       uint64 `protobuf:"varint,25,opt,name=decrypt_input_desc_errors,json=decryptInputDescErrors" json:"decrypt_input_desc_errors,omitempty"`
	DecryptOutputDescErrors      uint64 `protobuf:"varint,26,opt,name=decrypt_output_desc_errors,json=decryptOutputDescErrors" json:"decrypt_output_desc_errors,omitempty"`
	DecryptCbRingBaseErrors      uint64 `protobuf:"varint,27,opt,name=decrypt_cb_ring_base_errors,json=decryptCbRingBaseErrors" json:"decrypt_cb_ring_base_errors,omitempty"`
	DecryptInputPageErrors       uint64 `protobuf:"varint,28,opt,name=decrypt_input_page_errors,json=decryptInputPageErrors" json:"decrypt_input_page_errors,omitempty"`
	DecryptBarcoReqAddrErrors    uint64 `protobuf:"varint,29,opt,name=decrypt_barco_req_addr_errors,json=decryptBarcoReqAddrErrors" json:"decrypt_barco_req_addr_errors,omitempty"`
	DecryptBarcoCbAddrErrors     uint64 `protobuf:"varint,30,opt,name=decrypt_barco_cb_addr_errors,json=decryptBarcoCbAddrErrors" json:"decrypt_barco_cb_addr_errors,omitempty"`
	DecryptStage4InpageErrors    uint64 `protobuf:"varint,31,opt,name=decrypt_stage4_inpage_errors,json=decryptStage4InpageErrors" json:"decrypt_stage4_inpage_errors,omitempty"`
	DecryptOutputPageErrors      uint64 `protobuf:"varint,32,opt,name=decrypt_output_page_errors,json=decryptOutputPageErrors" json:"decrypt_output_page_errors,omitempty"`
	DecryptTxdma1EnterCounters   uint64 `protobuf:"varint,33,opt,name=decrypt_txdma1_enter_counters,json=decryptTxdma1EnterCounters" json:"decrypt_txdma1_enter_counters,omitempty"`
	DecryptTxdma2EnterCounters   uint64 `protobuf:"varint,34,opt,name=decrypt_txdma2_enter_counters,json=decryptTxdma2EnterCounters" json:"decrypt_txdma2_enter_counters,omitempty"`
	DecryptTxdma1DropCounters    uint64 `protobuf:"varint,35,opt,name=decrypt_txdma1_drop_counters,json=decryptTxdma1DropCounters" json:"decrypt_txdma1_drop_counters,omitempty"`
	DecryptDescExhaustErrors     uint64 `protobuf:"varint,36,opt,name=decrypt_desc_exhaust_errors,json=decryptDescExhaustErrors" json:"decrypt_desc_exhaust_errors,omitempty"`
	DecryptLoadIpsecIntErrors    uint64 `protobuf:"varint,37,opt,name=decrypt_load_ipsec_int_errors,json=decryptLoadIpsecIntErrors" json:"decrypt_load_ipsec_int_errors,omitempty"`
	DecryptTxdma1DummyErrors     uint64 `protobuf:"varint,38,opt,name=decrypt_txdma1_dummy_errors,json=decryptTxdma1DummyErrors" json:"decrypt_txdma1_dummy_errors,omitempty"`
	DecryptTxdma2DummyFree       uint64 `protobuf:"varint,39,opt,name=decrypt_txdma2_dummy_free,json=decryptTxdma2DummyFree" json:"decrypt_txdma2_dummy_free,omitempty"`
	DecryptRxdmaDummyDescErrors  uint64 `protobuf:"varint,40,opt,name=decrypt_rxdma_dummy_desc_errors,json=decryptRxdmaDummyDescErrors" json:"decrypt_rxdma_dummy_desc_errors,omitempty"`
	DecryptRxdmaEnterCounters    uint64 `protobuf:"varint,41,opt,name=decrypt_rxdma_enter_counters,json=decryptRxdmaEnterCounters" json:"decrypt_rxdma_enter_counters,omitempty"`
	DecryptBarcoBadIndescErrors  uint64 `protobuf:"varint,42,opt,name=decrypt_barco_bad_indesc_errors,json=decryptBarcoBadIndescErrors" json:"decrypt_barco_bad_indesc_errors,omitempty"`
	DecryptBarcoBadOutdescErrors uint64 `protobuf:"varint,43,opt,name=decrypt_barco_bad_outdesc_errors,json=decryptBarcoBadOutdescErrors" json:"decrypt_barco_bad_outdesc_errors,omitempty"`
}

func (m *IPSecGlobalStatisticsGetSpec) Reset()                    { *m = IPSecGlobalStatisticsGetSpec{} }
func (m *IPSecGlobalStatisticsGetSpec) String() string            { return proto.CompactTextString(m) }
func (*IPSecGlobalStatisticsGetSpec) ProtoMessage()               {}
func (*IPSecGlobalStatisticsGetSpec) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{5} }

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptInputDescErrors() uint64 {
	if m != nil {
		return m.EncryptInputDescErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptOutputDescErrors() uint64 {
	if m != nil {
		return m.EncryptOutputDescErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptCbRingBaseErrors() uint64 {
	if m != nil {
		return m.EncryptCbRingBaseErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptInputPageErrors() uint64 {
	if m != nil {
		return m.EncryptInputPageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptBarcoReqAddrErrors() uint64 {
	if m != nil {
		return m.EncryptBarcoReqAddrErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptBarcoCbBaseErrors() uint64 {
	if m != nil {
		return m.EncryptBarcoCbBaseErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptPadAddrErrors() uint64 {
	if m != nil {
		return m.EncryptPadAddrErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptTailBytesErrors() uint64 {
	if m != nil {
		return m.EncryptTailBytesErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptOutputPageErrors() uint64 {
	if m != nil {
		return m.EncryptOutputPageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptStage4InpageErrors() uint64 {
	if m != nil {
		return m.EncryptStage4InpageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptTable0InpageErrors() uint64 {
	if m != nil {
		return m.EncryptTable0InpageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptTable2InpageErrors() uint64 {
	if m != nil {
		return m.EncryptTable2InpageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptTable3InpageErrors() uint64 {
	if m != nil {
		return m.EncryptTable3InpageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptBadBarcoAddrErrors() uint64 {
	if m != nil {
		return m.EncryptBadBarcoAddrErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptBarcoFullErrors() uint64 {
	if m != nil {
		return m.EncryptBarcoFullErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptCbRingDmaErrors() uint64 {
	if m != nil {
		return m.EncryptCbRingDmaErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptDescExhaustErrors() uint64 {
	if m != nil {
		return m.EncryptDescExhaustErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptTxdma1EnterCounters() uint64 {
	if m != nil {
		return m.EncryptTxdma1EnterCounters
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptTxdma2EnterCounters() uint64 {
	if m != nil {
		return m.EncryptTxdma2EnterCounters
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptTxdma1DummyErrors() uint64 {
	if m != nil {
		return m.EncryptTxdma1DummyErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptRxdmaDummyDescErrors() uint64 {
	if m != nil {
		return m.EncryptRxdmaDummyDescErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptRxdmaEnterCounters() uint64 {
	if m != nil {
		return m.EncryptRxdmaEnterCounters
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptBarcoBadIndescErrors() uint64 {
	if m != nil {
		return m.EncryptBarcoBadIndescErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetEncryptBarcoBadOutdescErrors() uint64 {
	if m != nil {
		return m.EncryptBarcoBadOutdescErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptInputDescErrors() uint64 {
	if m != nil {
		return m.DecryptInputDescErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptOutputDescErrors() uint64 {
	if m != nil {
		return m.DecryptOutputDescErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptCbRingBaseErrors() uint64 {
	if m != nil {
		return m.DecryptCbRingBaseErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptInputPageErrors() uint64 {
	if m != nil {
		return m.DecryptInputPageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptBarcoReqAddrErrors() uint64 {
	if m != nil {
		return m.DecryptBarcoReqAddrErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptBarcoCbAddrErrors() uint64 {
	if m != nil {
		return m.DecryptBarcoCbAddrErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptStage4InpageErrors() uint64 {
	if m != nil {
		return m.DecryptStage4InpageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptOutputPageErrors() uint64 {
	if m != nil {
		return m.DecryptOutputPageErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptTxdma1EnterCounters() uint64 {
	if m != nil {
		return m.DecryptTxdma1EnterCounters
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptTxdma2EnterCounters() uint64 {
	if m != nil {
		return m.DecryptTxdma2EnterCounters
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptTxdma1DropCounters() uint64 {
	if m != nil {
		return m.DecryptTxdma1DropCounters
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptDescExhaustErrors() uint64 {
	if m != nil {
		return m.DecryptDescExhaustErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptLoadIpsecIntErrors() uint64 {
	if m != nil {
		return m.DecryptLoadIpsecIntErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptTxdma1DummyErrors() uint64 {
	if m != nil {
		return m.DecryptTxdma1DummyErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptTxdma2DummyFree() uint64 {
	if m != nil {
		return m.DecryptTxdma2DummyFree
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptRxdmaDummyDescErrors() uint64 {
	if m != nil {
		return m.DecryptRxdmaDummyDescErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptRxdmaEnterCounters() uint64 {
	if m != nil {
		return m.DecryptRxdmaEnterCounters
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptBarcoBadIndescErrors() uint64 {
	if m != nil {
		return m.DecryptBarcoBadIndescErrors
	}
	return 0
}

func (m *IPSecGlobalStatisticsGetSpec) GetDecryptBarcoBadOutdescErrors() uint64 {
	if m != nil {
		return m.DecryptBarcoBadOutdescErrors
	}
	return 0
}

type IpsecSAAction struct {
	SaActionType IpsecSAActionType `protobuf:"varint,1,opt,name=sa_action_type,json=saActionType,enum=ipsec.IpsecSAActionType" json:"sa_action_type,omitempty"`
	// Types that are valid to be assigned to SaHandle:
	//	*IpsecSAAction_EncHandle
	//	*IpsecSAAction_DecHandle
	SaHandle isIpsecSAAction_SaHandle `protobuf_oneof:"sa_handle"`
}

func (m *IpsecSAAction) Reset()                    { *m = IpsecSAAction{} }
func (m *IpsecSAAction) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAAction) ProtoMessage()               {}
func (*IpsecSAAction) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{6} }

type isIpsecSAAction_SaHandle interface{ isIpsecSAAction_SaHandle() }

type IpsecSAAction_EncHandle struct {
	EncHandle *IpsecSAEncryptKeyHandle `protobuf:"bytes,2,opt,name=enc_handle,json=encHandle,oneof"`
}
type IpsecSAAction_DecHandle struct {
	DecHandle *IpsecSADecryptKeyHandle `protobuf:"bytes,3,opt,name=dec_handle,json=decHandle,oneof"`
}

func (*IpsecSAAction_EncHandle) isIpsecSAAction_SaHandle() {}
func (*IpsecSAAction_DecHandle) isIpsecSAAction_SaHandle() {}

func (m *IpsecSAAction) GetSaHandle() isIpsecSAAction_SaHandle {
	if m != nil {
		return m.SaHandle
	}
	return nil
}

func (m *IpsecSAAction) GetSaActionType() IpsecSAActionType {
	if m != nil {
		return m.SaActionType
	}
	return IpsecSAActionType_IPSEC_SA_ACTION_TYPE_NONE
}

func (m *IpsecSAAction) GetEncHandle() *IpsecSAEncryptKeyHandle {
	if x, ok := m.GetSaHandle().(*IpsecSAAction_EncHandle); ok {
		return x.EncHandle
	}
	return nil
}

func (m *IpsecSAAction) GetDecHandle() *IpsecSADecryptKeyHandle {
	if x, ok := m.GetSaHandle().(*IpsecSAAction_DecHandle); ok {
		return x.DecHandle
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IpsecSAAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IpsecSAAction_OneofMarshaler, _IpsecSAAction_OneofUnmarshaler, _IpsecSAAction_OneofSizer, []interface{}{
		(*IpsecSAAction_EncHandle)(nil),
		(*IpsecSAAction_DecHandle)(nil),
	}
}

func _IpsecSAAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IpsecSAAction)
	// sa_handle
	switch x := m.SaHandle.(type) {
	case *IpsecSAAction_EncHandle:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EncHandle); err != nil {
			return err
		}
	case *IpsecSAAction_DecHandle:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DecHandle); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IpsecSAAction.SaHandle has unexpected type %T", x)
	}
	return nil
}

func _IpsecSAAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IpsecSAAction)
	switch tag {
	case 2: // sa_handle.enc_handle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IpsecSAEncryptKeyHandle)
		err := b.DecodeMessage(msg)
		m.SaHandle = &IpsecSAAction_EncHandle{msg}
		return true, err
	case 3: // sa_handle.dec_handle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IpsecSADecryptKeyHandle)
		err := b.DecodeMessage(msg)
		m.SaHandle = &IpsecSAAction_DecHandle{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IpsecSAAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IpsecSAAction)
	// sa_handle
	switch x := m.SaHandle.(type) {
	case *IpsecSAAction_EncHandle:
		s := proto.Size(x.EncHandle)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IpsecSAAction_DecHandle:
		s := proto.Size(x.DecHandle)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type IpsecRuleMatchSpec struct {
	RuleId   uint64         `protobuf:"varint,1,opt,name=rule_id,json=ruleId" json:"rule_id,omitempty"`
	Match    *RuleMatch     `protobuf:"bytes,2,opt,name=match" json:"match,omitempty"`
	SaAction *IpsecSAAction `protobuf:"bytes,3,opt,name=sa_action,json=saAction" json:"sa_action,omitempty"`
}

func (m *IpsecRuleMatchSpec) Reset()                    { *m = IpsecRuleMatchSpec{} }
func (m *IpsecRuleMatchSpec) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleMatchSpec) ProtoMessage()               {}
func (*IpsecRuleMatchSpec) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{7} }

func (m *IpsecRuleMatchSpec) GetRuleId() uint64 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *IpsecRuleMatchSpec) GetMatch() *RuleMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *IpsecRuleMatchSpec) GetSaAction() *IpsecSAAction {
	if m != nil {
		return m.SaAction
	}
	return nil
}

// IpsecRuleSpec is the user intent for the IPSec rule
type IpsecRuleSpec struct {
	KeyOrHandle  *IpsecRuleKeyHandle   `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	VrfKeyHandle *VrfKeyHandle         `protobuf:"bytes,2,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
	Rules        []*IpsecRuleMatchSpec `protobuf:"bytes,3,rep,name=rules" json:"rules,omitempty"`
}

func (m *IpsecRuleSpec) Reset()                    { *m = IpsecRuleSpec{} }
func (m *IpsecRuleSpec) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleSpec) ProtoMessage()               {}
func (*IpsecRuleSpec) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{8} }

func (m *IpsecRuleSpec) GetKeyOrHandle() *IpsecRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecRuleSpec) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

func (m *IpsecRuleSpec) GetRules() []*IpsecRuleMatchSpec {
	if m != nil {
		return m.Rules
	}
	return nil
}

// IpsecRuleRequestMsg is the batched add or modify of NAT rule request
type IpsecRuleRequestMsg struct {
	Request []*IpsecRuleSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecRuleRequestMsg) Reset()                    { *m = IpsecRuleRequestMsg{} }
func (m *IpsecRuleRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleRequestMsg) ProtoMessage()               {}
func (*IpsecRuleRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{9} }

func (m *IpsecRuleRequestMsg) GetRequest() []*IpsecRuleSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecRuleStatus reflects the current operational status of the IPSec rule
type IpsecRuleStatus struct {
	Handle uint64 `protobuf:"fixed64,1,opt,name=handle" json:"handle,omitempty"`
}

func (m *IpsecRuleStatus) Reset()                    { *m = IpsecRuleStatus{} }
func (m *IpsecRuleStatus) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleStatus) ProtoMessage()               {}
func (*IpsecRuleStatus) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{10} }

func (m *IpsecRuleStatus) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// IpsecRuleResponse is the response to IpsecRuleSpec
type IpsecRuleResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *IpsecRuleStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *IpsecRuleResponse) Reset()                    { *m = IpsecRuleResponse{} }
func (m *IpsecRuleResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleResponse) ProtoMessage()               {}
func (*IpsecRuleResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{11} }

func (m *IpsecRuleResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecRuleResponse) GetStatus() *IpsecRuleStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// IpsecRuleResponseMsg is batched response to IpsecRuleRequestMsg
type IpsecRuleResponseMsg struct {
	Response []*IpsecRuleResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecRuleResponseMsg) Reset()                    { *m = IpsecRuleResponseMsg{} }
func (m *IpsecRuleResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleResponseMsg) ProtoMessage()               {}
func (*IpsecRuleResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{12} }

func (m *IpsecRuleResponseMsg) GetResponse() []*IpsecRuleResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecRuleDeleteRequest is used to delete a policy rule
type IpsecRuleDeleteRequest struct {
	KeyOrHandle *IpsecRuleKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecRuleDeleteRequest) Reset()                    { *m = IpsecRuleDeleteRequest{} }
func (m *IpsecRuleDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleDeleteRequest) ProtoMessage()               {}
func (*IpsecRuleDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{13} }

func (m *IpsecRuleDeleteRequest) GetKeyOrHandle() *IpsecRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecRuleDeleteRequestMsg is used to delete a batch of ipsec rules
type IpsecRuleDeleteRequestMsg struct {
	Request []*IpsecRuleDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecRuleDeleteRequestMsg) Reset()                    { *m = IpsecRuleDeleteRequestMsg{} }
func (m *IpsecRuleDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleDeleteRequestMsg) ProtoMessage()               {}
func (*IpsecRuleDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{14} }

func (m *IpsecRuleDeleteRequestMsg) GetRequest() []*IpsecRuleDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecRuleDeleteResponse is response to IpsecRuleDeleteRequest
type IpsecRuleDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *IpsecRuleDeleteResponse) Reset()                    { *m = IpsecRuleDeleteResponse{} }
func (m *IpsecRuleDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleDeleteResponse) ProtoMessage()               {}
func (*IpsecRuleDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{15} }

func (m *IpsecRuleDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// IpsecRuleDeleteResponseMsg is batched response to IpsecRuleDeleteRequestMsg
type IpsecRuleDeleteResponseMsg struct {
	Response []*IpsecRuleDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecRuleDeleteResponseMsg) Reset()                    { *m = IpsecRuleDeleteResponseMsg{} }
func (m *IpsecRuleDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleDeleteResponseMsg) ProtoMessage()               {}
func (*IpsecRuleDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{16} }

func (m *IpsecRuleDeleteResponseMsg) GetResponse() []*IpsecRuleDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecRuleGetRequest is used to get information about a ipsec rule
type IpsecRuleGetRequest struct {
	KeyOrHandle *IpsecRuleKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecRuleGetRequest) Reset()                    { *m = IpsecRuleGetRequest{} }
func (m *IpsecRuleGetRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleGetRequest) ProtoMessage()               {}
func (*IpsecRuleGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{17} }

func (m *IpsecRuleGetRequest) GetKeyOrHandle() *IpsecRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecRuleGetRequestMsg is batched GET requests for ipsec rule
type IpsecRuleGetRequestMsg struct {
	Request []*IpsecRuleGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecRuleGetRequestMsg) Reset()                    { *m = IpsecRuleGetRequestMsg{} }
func (m *IpsecRuleGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleGetRequestMsg) ProtoMessage()               {}
func (*IpsecRuleGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{18} }

func (m *IpsecRuleGetRequestMsg) GetRequest() []*IpsecRuleGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// per rule stats
type IpsecRuleEntryStats struct {
	NumTcpSessions   uint32 `protobuf:"varint,1,opt,name=num_tcp_sessions,json=numTcpSessions" json:"num_tcp_sessions,omitempty"`
	NumUdpSessions   uint32 `protobuf:"varint,2,opt,name=num_udp_sessions,json=numUdpSessions" json:"num_udp_sessions,omitempty"`
	NumOtherSessions uint32 `protobuf:"varint,3,opt,name=num_other_sessions,json=numOtherSessions" json:"num_other_sessions,omitempty"`
}

func (m *IpsecRuleEntryStats) Reset()                    { *m = IpsecRuleEntryStats{} }
func (m *IpsecRuleEntryStats) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleEntryStats) ProtoMessage()               {}
func (*IpsecRuleEntryStats) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{19} }

func (m *IpsecRuleEntryStats) GetNumTcpSessions() uint32 {
	if m != nil {
		return m.NumTcpSessions
	}
	return 0
}

func (m *IpsecRuleEntryStats) GetNumUdpSessions() uint32 {
	if m != nil {
		return m.NumUdpSessions
	}
	return 0
}

func (m *IpsecRuleEntryStats) GetNumOtherSessions() uint32 {
	if m != nil {
		return m.NumOtherSessions
	}
	return 0
}

// per policy stats
type IpsecRuleStats struct {
	Stats []*IpsecRuleEntryStats `protobuf:"bytes,1,rep,name=stats" json:"stats,omitempty"`
}

func (m *IpsecRuleStats) Reset()                    { *m = IpsecRuleStats{} }
func (m *IpsecRuleStats) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleStats) ProtoMessage()               {}
func (*IpsecRuleStats) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{20} }

func (m *IpsecRuleStats) GetStats() []*IpsecRuleEntryStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// IpsecRuleGetResponse catpures all information about IPSec policy
type IpsecRuleGetResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *IpsecRuleSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *IpsecRuleStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *IpsecRuleStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *IpsecRuleGetResponse) Reset()                    { *m = IpsecRuleGetResponse{} }
func (m *IpsecRuleGetResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleGetResponse) ProtoMessage()               {}
func (*IpsecRuleGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{21} }

func (m *IpsecRuleGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecRuleGetResponse) GetSpec() *IpsecRuleSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *IpsecRuleGetResponse) GetStatus() *IpsecRuleStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *IpsecRuleGetResponse) GetStats() *IpsecRuleStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// IpsecRuleGetResponseMsg is batched response to IpsecRuleGetRequestMsg
type IpsecRuleGetResponseMsg struct {
	Response []*IpsecRuleGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecRuleGetResponseMsg) Reset()                    { *m = IpsecRuleGetResponseMsg{} }
func (m *IpsecRuleGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleGetResponseMsg) ProtoMessage()               {}
func (*IpsecRuleGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{22} }

func (m *IpsecRuleGetResponseMsg) GetResponse() []*IpsecRuleGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecSAEncryptRequestMsg is batched add or modify ipsec_sa request
type IpsecSAEncryptRequestMsg struct {
	Request []*IpsecSAEncrypt `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSAEncryptRequestMsg) Reset()                    { *m = IpsecSAEncryptRequestMsg{} }
func (m *IpsecSAEncryptRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptRequestMsg) ProtoMessage()               {}
func (*IpsecSAEncryptRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{23} }

func (m *IpsecSAEncryptRequestMsg) GetRequest() []*IpsecSAEncrypt {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecSAEncryptStatus is the operational status of a given ipsec_sa
type IpsecSAEncryptStatus struct {
	IpsecSaHandle uint64 `protobuf:"fixed64,1,opt,name=ipsec_sa_handle,json=ipsecSaHandle" json:"ipsec_sa_handle,omitempty"`
}

func (m *IpsecSAEncryptStatus) Reset()                    { *m = IpsecSAEncryptStatus{} }
func (m *IpsecSAEncryptStatus) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptStatus) ProtoMessage()               {}
func (*IpsecSAEncryptStatus) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{24} }

func (m *IpsecSAEncryptStatus) GetIpsecSaHandle() uint64 {
	if m != nil {
		return m.IpsecSaHandle
	}
	return 0
}

// IpsecSAEncryptResponse is response to IpsecSA
type IpsecSAEncryptResponse struct {
	ApiStatus     ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	IpsecSaStatus *IpsecSAEncryptStatus `protobuf:"bytes,2,opt,name=ipsec_sa_status,json=ipsecSaStatus" json:"ipsec_sa_status,omitempty"`
}

func (m *IpsecSAEncryptResponse) Reset()                    { *m = IpsecSAEncryptResponse{} }
func (m *IpsecSAEncryptResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptResponse) ProtoMessage()               {}
func (*IpsecSAEncryptResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{25} }

func (m *IpsecSAEncryptResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecSAEncryptResponse) GetIpsecSaStatus() *IpsecSAEncryptStatus {
	if m != nil {
		return m.IpsecSaStatus
	}
	return nil
}

// IpsecSAEncryptResponseMsg is batched response to IpsecSAEncryptRequestMsg
type IpsecSAEncryptResponseMsg struct {
	Response []*IpsecSAEncryptResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecSAEncryptResponseMsg) Reset()                    { *m = IpsecSAEncryptResponseMsg{} }
func (m *IpsecSAEncryptResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptResponseMsg) ProtoMessage()               {}
func (*IpsecSAEncryptResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{26} }

func (m *IpsecSAEncryptResponseMsg) GetResponse() []*IpsecSAEncryptResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecSAEncryptDeleteRequest is used to delete a ipsec_sa
type IpsecSAEncryptDeleteRequest struct {
	KeyOrHandle *IpsecSAEncryptKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecSAEncryptDeleteRequest) Reset()                    { *m = IpsecSAEncryptDeleteRequest{} }
func (m *IpsecSAEncryptDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptDeleteRequest) ProtoMessage()               {}
func (*IpsecSAEncryptDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{27} }

func (m *IpsecSAEncryptDeleteRequest) GetKeyOrHandle() *IpsecSAEncryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecSAEncryptDeleteRequestMsg is used to delete a batch of ipsec_sas
type IpsecSAEncryptDeleteRequestMsg struct {
	Request []*IpsecSAEncryptDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSAEncryptDeleteRequestMsg) Reset()         { *m = IpsecSAEncryptDeleteRequestMsg{} }
func (m *IpsecSAEncryptDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSAEncryptDeleteRequestMsg) ProtoMessage()    {}
func (*IpsecSAEncryptDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{28}
}

func (m *IpsecSAEncryptDeleteRequestMsg) GetRequest() []*IpsecSAEncryptDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecSAEncryptDeleteResponse is response to delete a ipsec_sa
type IpsecSAEncryptDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *IpsecSAEncryptDeleteResponse) Reset()                    { *m = IpsecSAEncryptDeleteResponse{} }
func (m *IpsecSAEncryptDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptDeleteResponse) ProtoMessage()               {}
func (*IpsecSAEncryptDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{29} }

func (m *IpsecSAEncryptDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// IpsecSAEncryptDeleteResponseMsg is batched response to IpsecSADeleteRequestMsg
type IpsecSAEncryptDeleteResponseMsg struct {
	Response []*IpsecSAEncryptDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecSAEncryptDeleteResponseMsg) Reset()         { *m = IpsecSAEncryptDeleteResponseMsg{} }
func (m *IpsecSAEncryptDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSAEncryptDeleteResponseMsg) ProtoMessage()    {}
func (*IpsecSAEncryptDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{30}
}

func (m *IpsecSAEncryptDeleteResponseMsg) GetResponse() []*IpsecSAEncryptDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecSAEncryptGetRequest is used to get information about a ipsec_sa
type IpsecSAEncryptGetRequest struct {
	KeyOrHandle *IpsecSAEncryptKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecSAEncryptGetRequest) Reset()                    { *m = IpsecSAEncryptGetRequest{} }
func (m *IpsecSAEncryptGetRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptGetRequest) ProtoMessage()               {}
func (*IpsecSAEncryptGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{31} }

func (m *IpsecSAEncryptGetRequest) GetKeyOrHandle() *IpsecSAEncryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecSAEncryptGetRequestMsg is batched GET requests for ipsec_sas
type IpsecSAEncryptGetRequestMsg struct {
	Request []*IpsecSAEncryptGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSAEncryptGetRequestMsg) Reset()                    { *m = IpsecSAEncryptGetRequestMsg{} }
func (m *IpsecSAEncryptGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptGetRequestMsg) ProtoMessage()               {}
func (*IpsecSAEncryptGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{32} }

func (m *IpsecSAEncryptGetRequestMsg) GetRequest() []*IpsecSAEncryptGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type IpsecSAEncryptGetResponse struct {
	ApiStatus ApiStatus              `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *IPSecSAEncryptGetSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *IpsecSAEncryptStatus  `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *IpsecSAEncryptGetResponse) Reset()                    { *m = IpsecSAEncryptGetResponse{} }
func (m *IpsecSAEncryptGetResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptGetResponse) ProtoMessage()               {}
func (*IpsecSAEncryptGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{33} }

func (m *IpsecSAEncryptGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecSAEncryptGetResponse) GetSpec() *IPSecSAEncryptGetSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *IpsecSAEncryptGetResponse) GetStatus() *IpsecSAEncryptStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type IpsecSAEncryptGetResponseMsg struct {
	Response []*IpsecSAEncryptGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecSAEncryptGetResponseMsg) Reset()                    { *m = IpsecSAEncryptGetResponseMsg{} }
func (m *IpsecSAEncryptGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecSAEncryptGetResponseMsg) ProtoMessage()               {}
func (*IpsecSAEncryptGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{34} }

func (m *IpsecSAEncryptGetResponseMsg) GetResponse() []*IpsecSAEncryptGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecSADecryptRequestMsg is batched add or modify ipsec_sa request
type IpsecSADecryptRequestMsg struct {
	Request []*IpsecSADecrypt `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSADecryptRequestMsg) Reset()                    { *m = IpsecSADecryptRequestMsg{} }
func (m *IpsecSADecryptRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptRequestMsg) ProtoMessage()               {}
func (*IpsecSADecryptRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{35} }

func (m *IpsecSADecryptRequestMsg) GetRequest() []*IpsecSADecrypt {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecSADecryptStatus is the operational status of a given ipsec_sa
type IpsecSADecryptStatus struct {
	IpsecSaHandle uint64 `protobuf:"fixed64,1,opt,name=ipsec_sa_handle,json=ipsecSaHandle" json:"ipsec_sa_handle,omitempty"`
}

func (m *IpsecSADecryptStatus) Reset()                    { *m = IpsecSADecryptStatus{} }
func (m *IpsecSADecryptStatus) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptStatus) ProtoMessage()               {}
func (*IpsecSADecryptStatus) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{36} }

func (m *IpsecSADecryptStatus) GetIpsecSaHandle() uint64 {
	if m != nil {
		return m.IpsecSaHandle
	}
	return 0
}

// IpsecSADecryptResponse is response to IpsecSA
type IpsecSADecryptResponse struct {
	ApiStatus     ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	IpsecSaStatus *IpsecSADecryptStatus `protobuf:"bytes,2,opt,name=ipsec_sa_status,json=ipsecSaStatus" json:"ipsec_sa_status,omitempty"`
}

func (m *IpsecSADecryptResponse) Reset()                    { *m = IpsecSADecryptResponse{} }
func (m *IpsecSADecryptResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptResponse) ProtoMessage()               {}
func (*IpsecSADecryptResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{37} }

func (m *IpsecSADecryptResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecSADecryptResponse) GetIpsecSaStatus() *IpsecSADecryptStatus {
	if m != nil {
		return m.IpsecSaStatus
	}
	return nil
}

// IpsecSADecryptResponseMsg is batched response to IpsecSADecryptRequestMsg
type IpsecSADecryptResponseMsg struct {
	Response []*IpsecSADecryptResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecSADecryptResponseMsg) Reset()                    { *m = IpsecSADecryptResponseMsg{} }
func (m *IpsecSADecryptResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptResponseMsg) ProtoMessage()               {}
func (*IpsecSADecryptResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{38} }

func (m *IpsecSADecryptResponseMsg) GetResponse() []*IpsecSADecryptResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecSADecryptDeleteRequest is used to delete a ipsec_sa
type IpsecSADecryptDeleteRequest struct {
	KeyOrHandle *IpsecSADecryptKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecSADecryptDeleteRequest) Reset()                    { *m = IpsecSADecryptDeleteRequest{} }
func (m *IpsecSADecryptDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptDeleteRequest) ProtoMessage()               {}
func (*IpsecSADecryptDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{39} }

func (m *IpsecSADecryptDeleteRequest) GetKeyOrHandle() *IpsecSADecryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecSADecryptDeleteRequestMsg is used to delete a batch of ipsec_sas
type IpsecSADecryptDeleteRequestMsg struct {
	Request []*IpsecSADecryptDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSADecryptDeleteRequestMsg) Reset()         { *m = IpsecSADecryptDeleteRequestMsg{} }
func (m *IpsecSADecryptDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSADecryptDeleteRequestMsg) ProtoMessage()    {}
func (*IpsecSADecryptDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{40}
}

func (m *IpsecSADecryptDeleteRequestMsg) GetRequest() []*IpsecSADecryptDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecSADecryptDeleteResponse is response to delete a ipsec_sa
type IpsecSADecryptDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *IpsecSADecryptDeleteResponse) Reset()                    { *m = IpsecSADecryptDeleteResponse{} }
func (m *IpsecSADecryptDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptDeleteResponse) ProtoMessage()               {}
func (*IpsecSADecryptDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{41} }

func (m *IpsecSADecryptDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// IpsecSADecryptDeleteResponseMsg is batched response to IpsecSADeleteRequestMsg
type IpsecSADecryptDeleteResponseMsg struct {
	Response []*IpsecSADecryptDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecSADecryptDeleteResponseMsg) Reset()         { *m = IpsecSADecryptDeleteResponseMsg{} }
func (m *IpsecSADecryptDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecSADecryptDeleteResponseMsg) ProtoMessage()    {}
func (*IpsecSADecryptDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{42}
}

func (m *IpsecSADecryptDeleteResponseMsg) GetResponse() []*IpsecSADecryptDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecSADecryptGetRequest is used to get information about a ipsec_sa
type IpsecSADecryptGetRequest struct {
	KeyOrHandle *IpsecSADecryptKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecSADecryptGetRequest) Reset()                    { *m = IpsecSADecryptGetRequest{} }
func (m *IpsecSADecryptGetRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptGetRequest) ProtoMessage()               {}
func (*IpsecSADecryptGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{43} }

func (m *IpsecSADecryptGetRequest) GetKeyOrHandle() *IpsecSADecryptKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecSADecryptGetRequestMsg is batched GET requests for ipsec_sas
type IpsecSADecryptGetRequestMsg struct {
	Request []*IpsecSADecryptGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecSADecryptGetRequestMsg) Reset()                    { *m = IpsecSADecryptGetRequestMsg{} }
func (m *IpsecSADecryptGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptGetRequestMsg) ProtoMessage()               {}
func (*IpsecSADecryptGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{44} }

func (m *IpsecSADecryptGetRequestMsg) GetRequest() []*IpsecSADecryptGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type IpsecSADecryptGetResponse struct {
	ApiStatus ApiStatus              `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *IPSecSADecryptGetSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *IpsecSADecryptStatus  `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *IpsecSADecryptGetResponse) Reset()                    { *m = IpsecSADecryptGetResponse{} }
func (m *IpsecSADecryptGetResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptGetResponse) ProtoMessage()               {}
func (*IpsecSADecryptGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{45} }

func (m *IpsecSADecryptGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecSADecryptGetResponse) GetSpec() *IPSecSADecryptGetSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *IpsecSADecryptGetResponse) GetStatus() *IpsecSADecryptStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type IpsecSADecryptGetResponseMsg struct {
	Response []*IpsecSADecryptGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecSADecryptGetResponseMsg) Reset()                    { *m = IpsecSADecryptGetResponseMsg{} }
func (m *IpsecSADecryptGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecSADecryptGetResponseMsg) ProtoMessage()               {}
func (*IpsecSADecryptGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{46} }

func (m *IpsecSADecryptGetResponseMsg) GetResponse() []*IpsecSADecryptGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type IpsecGlobalStatisticsGetRequest struct {
	ClearOnRead uint32 `protobuf:"varint,1,opt,name=clear_on_read,json=clearOnRead" json:"clear_on_read,omitempty"`
}

func (m *IpsecGlobalStatisticsGetRequest) Reset()         { *m = IpsecGlobalStatisticsGetRequest{} }
func (m *IpsecGlobalStatisticsGetRequest) String() string { return proto.CompactTextString(m) }
func (*IpsecGlobalStatisticsGetRequest) ProtoMessage()    {}
func (*IpsecGlobalStatisticsGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{47}
}

func (m *IpsecGlobalStatisticsGetRequest) GetClearOnRead() uint32 {
	if m != nil {
		return m.ClearOnRead
	}
	return 0
}

type IpsecGlobalStatisticsGetRequestMsg struct {
	Request []*IpsecGlobalStatisticsGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecGlobalStatisticsGetRequestMsg) Reset()         { *m = IpsecGlobalStatisticsGetRequestMsg{} }
func (m *IpsecGlobalStatisticsGetRequestMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecGlobalStatisticsGetRequestMsg) ProtoMessage()    {}
func (*IpsecGlobalStatisticsGetRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{48}
}

func (m *IpsecGlobalStatisticsGetRequestMsg) GetRequest() []*IpsecGlobalStatisticsGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type IpsecGlobalStatisticsGetResponse struct {
	ApiStatus ApiStatus                     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *IPSecGlobalStatisticsGetSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *IpsecGlobalStatisticsGetResponse) Reset()         { *m = IpsecGlobalStatisticsGetResponse{} }
func (m *IpsecGlobalStatisticsGetResponse) String() string { return proto.CompactTextString(m) }
func (*IpsecGlobalStatisticsGetResponse) ProtoMessage()    {}
func (*IpsecGlobalStatisticsGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{49}
}

func (m *IpsecGlobalStatisticsGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecGlobalStatisticsGetResponse) GetSpec() *IPSecGlobalStatisticsGetSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type IpsecGlobalStatisticsGetResponseMsg struct {
	Response []*IpsecGlobalStatisticsGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecGlobalStatisticsGetResponseMsg) Reset()         { *m = IpsecGlobalStatisticsGetResponseMsg{} }
func (m *IpsecGlobalStatisticsGetResponseMsg) String() string { return proto.CompactTextString(m) }
func (*IpsecGlobalStatisticsGetResponseMsg) ProtoMessage()    {}
func (*IpsecGlobalStatisticsGetResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{50}
}

func (m *IpsecGlobalStatisticsGetResponseMsg) GetResponse() []*IpsecGlobalStatisticsGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*Key)(nil), "halproto.Key")
	proto.RegisterType((*IpsecSAEncrypt)(nil), "halproto.IpsecSAEncrypt")
	proto.RegisterType((*IpsecSADecrypt)(nil), "halproto.IpsecSADecrypt")
	proto.RegisterType((*IPSecSAEncryptGetSpec)(nil), "halproto.IPSecSAEncryptGetSpec")
	proto.RegisterType((*IPSecSADecryptGetSpec)(nil), "halproto.IPSecSADecryptGetSpec")
	proto.RegisterType((*IPSecGlobalStatisticsGetSpec)(nil), "halproto.IPSecGlobalStatisticsGetSpec")
	proto.RegisterType((*IpsecSAAction)(nil), "halproto.IpsecSAAction")
	proto.RegisterType((*IpsecRuleMatchSpec)(nil), "halproto.IpsecRuleMatchSpec")
	proto.RegisterType((*IpsecRuleSpec)(nil), "halproto.IpsecRuleSpec")
	proto.RegisterType((*IpsecRuleRequestMsg)(nil), "halproto.IpsecRuleRequestMsg")
	proto.RegisterType((*IpsecRuleStatus)(nil), "halproto.IpsecRuleStatus")
	proto.RegisterType((*IpsecRuleResponse)(nil), "halproto.IpsecRuleResponse")
	proto.RegisterType((*IpsecRuleResponseMsg)(nil), "halproto.IpsecRuleResponseMsg")
	proto.RegisterType((*IpsecRuleDeleteRequest)(nil), "halproto.IpsecRuleDeleteRequest")
	proto.RegisterType((*IpsecRuleDeleteRequestMsg)(nil), "halproto.IpsecRuleDeleteRequestMsg")
	proto.RegisterType((*IpsecRuleDeleteResponse)(nil), "halproto.IpsecRuleDeleteResponse")
	proto.RegisterType((*IpsecRuleDeleteResponseMsg)(nil), "halproto.IpsecRuleDeleteResponseMsg")
	proto.RegisterType((*IpsecRuleGetRequest)(nil), "halproto.IpsecRuleGetRequest")
	proto.RegisterType((*IpsecRuleGetRequestMsg)(nil), "halproto.IpsecRuleGetRequestMsg")
	proto.RegisterType((*IpsecRuleEntryStats)(nil), "halproto.IpsecRuleEntryStats")
	proto.RegisterType((*IpsecRuleStats)(nil), "halproto.IpsecRuleStats")
	proto.RegisterType((*IpsecRuleGetResponse)(nil), "halproto.IpsecRuleGetResponse")
	proto.RegisterType((*IpsecRuleGetResponseMsg)(nil), "halproto.IpsecRuleGetResponseMsg")
	proto.RegisterType((*IpsecSAEncryptRequestMsg)(nil), "halproto.IpsecSAEncryptRequestMsg")
	proto.RegisterType((*IpsecSAEncryptStatus)(nil), "halproto.IpsecSAEncryptStatus")
	proto.RegisterType((*IpsecSAEncryptResponse)(nil), "halproto.IpsecSAEncryptResponse")
	proto.RegisterType((*IpsecSAEncryptResponseMsg)(nil), "halproto.IpsecSAEncryptResponseMsg")
	proto.RegisterType((*IpsecSAEncryptDeleteRequest)(nil), "halproto.IpsecSAEncryptDeleteRequest")
	proto.RegisterType((*IpsecSAEncryptDeleteRequestMsg)(nil), "halproto.IpsecSAEncryptDeleteRequestMsg")
	proto.RegisterType((*IpsecSAEncryptDeleteResponse)(nil), "halproto.IpsecSAEncryptDeleteResponse")
	proto.RegisterType((*IpsecSAEncryptDeleteResponseMsg)(nil), "halproto.IpsecSAEncryptDeleteResponseMsg")
	proto.RegisterType((*IpsecSAEncryptGetRequest)(nil), "halproto.IpsecSAEncryptGetRequest")
	proto.RegisterType((*IpsecSAEncryptGetRequestMsg)(nil), "halproto.IpsecSAEncryptGetRequestMsg")
	proto.RegisterType((*IpsecSAEncryptGetResponse)(nil), "halproto.IpsecSAEncryptGetResponse")
	proto.RegisterType((*IpsecSAEncryptGetResponseMsg)(nil), "halproto.IpsecSAEncryptGetResponseMsg")
	proto.RegisterType((*IpsecSADecryptRequestMsg)(nil), "halproto.IpsecSADecryptRequestMsg")
	proto.RegisterType((*IpsecSADecryptStatus)(nil), "halproto.IpsecSADecryptStatus")
	proto.RegisterType((*IpsecSADecryptResponse)(nil), "halproto.IpsecSADecryptResponse")
	proto.RegisterType((*IpsecSADecryptResponseMsg)(nil), "halproto.IpsecSADecryptResponseMsg")
	proto.RegisterType((*IpsecSADecryptDeleteRequest)(nil), "halproto.IpsecSADecryptDeleteRequest")
	proto.RegisterType((*IpsecSADecryptDeleteRequestMsg)(nil), "halproto.IpsecSADecryptDeleteRequestMsg")
	proto.RegisterType((*IpsecSADecryptDeleteResponse)(nil), "halproto.IpsecSADecryptDeleteResponse")
	proto.RegisterType((*IpsecSADecryptDeleteResponseMsg)(nil), "halproto.IpsecSADecryptDeleteResponseMsg")
	proto.RegisterType((*IpsecSADecryptGetRequest)(nil), "halproto.IpsecSADecryptGetRequest")
	proto.RegisterType((*IpsecSADecryptGetRequestMsg)(nil), "halproto.IpsecSADecryptGetRequestMsg")
	proto.RegisterType((*IpsecSADecryptGetResponse)(nil), "halproto.IpsecSADecryptGetResponse")
	proto.RegisterType((*IpsecSADecryptGetResponseMsg)(nil), "halproto.IpsecSADecryptGetResponseMsg")
	proto.RegisterType((*IpsecGlobalStatisticsGetRequest)(nil), "halproto.IpsecGlobalStatisticsGetRequest")
	proto.RegisterType((*IpsecGlobalStatisticsGetRequestMsg)(nil), "halproto.IpsecGlobalStatisticsGetRequestMsg")
	proto.RegisterType((*IpsecGlobalStatisticsGetResponse)(nil), "halproto.IpsecGlobalStatisticsGetResponse")
	proto.RegisterType((*IpsecGlobalStatisticsGetResponseMsg)(nil), "halproto.IpsecGlobalStatisticsGetResponseMsg")
	proto.RegisterEnum("halproto.IpsecProtocol", IpsecProtocol_name, IpsecProtocol_value)
	proto.RegisterEnum("halproto.EncryptionAlgorithm", EncryptionAlgorithm_name, EncryptionAlgorithm_value)
	proto.RegisterEnum("halproto.AuthenticationAlgorithm", AuthenticationAlgorithm_name, AuthenticationAlgorithm_value)
	proto.RegisterEnum("halproto.IpsecSAActionType", IpsecSAActionType_name, IpsecSAActionType_value)
}

func init() { proto.RegisterFile("ipsec.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 3134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x4d, 0x73, 0xdb, 0xc6,
	0x19, 0x36, 0xf5, 0xad, 0x57, 0x12, 0x4d, 0xad, 0xbe, 0x68, 0x7d, 0x58, 0x32, 0x9c, 0x38, 0xb6,
	0x93, 0x51, 0x6c, 0x39, 0x69, 0x6a, 0xd7, 0x8d, 0x43, 0x91, 0xb4, 0xc5, 0xd8, 0x32, 0x55, 0x90,
	0x49, 0x9d, 0xa6, 0x13, 0x0c, 0x48, 0xae, 0x24, 0x54, 0x14, 0x00, 0x03, 0xa0, 0x62, 0xe6, 0xdc,
	0x43, 0x0f, 0x99, 0xde, 0x3a, 0xfd, 0x05, 0x3d, 0xf6, 0xd4, 0xf6, 0x47, 0xf4, 0xde, 0x43, 0x4f,
	0xbe, 0xf5, 0xd2, 0x63, 0xa6, 0x3f, 0xa0, 0xb3, 0x1f, 0x20, 0x76, 0x81, 0x05, 0x49, 0xd9, 0xce,
	0xf4, 0x50, 0x1f, 0x3c, 0x16, 0xb1, 0xcf, 0xfb, 0xec, 0xbb, 0xef, 0xc7, 0xb3, 0xbb, 0x20, 0x61,
	0xc6, 0x72, 0x7d, 0xdc, 0xdc, 0x76, 0x3d, 0x27, 0x70, 0xd0, 0x38, 0xfd, 0xb0, 0x3a, 0x13, 0x74,
	0x5d, 0xec, 0xb3, 0x67, 0xab, 0x53, 0x27, 0xc7, 0xec, 0x2f, 0xed, 0x73, 0x18, 0x7d, 0x8c, 0xbb,
	0x08, 0xc1, 0xe8, 0x09, 0xee, 0xe6, 0x33, 0x5b, 0x99, 0xeb, 0xb3, 0x7b, 0x17, 0x74, 0xf2, 0x01,
	0x5d, 0x85, 0xd9, 0x13, 0xdc, 0x35, 0xda, 0x4e, 0xd3, 0x0c, 0x2c, 0xc7, 0xce, 0x8f, 0x6c, 0x65,
	0xae, 0xcf, 0xed, 0x5d, 0xd0, 0x67, 0x4e, 0x70, 0xf7, 0x09, 0x7f, 0xb8, 0x0b, 0x30, 0x45, 0x40,
	0x96, 0x7d, 0xe8, 0x68, 0x7f, 0x1d, 0x87, 0x6c, 0x85, 0x4c, 0x56, 0x2b, 0x94, 0xed, 0xa6, 0xd7,
	0x75, 0x03, 0x54, 0x85, 0x39, 0x32, 0xec, 0x78, 0xc6, 0xb1, 0x69, 0xb7, 0xda, 0x98, 0xce, 0x30,
	0xb3, 0xb3, 0xb6, 0x7d, 0x72, 0xbc, 0x2d, 0x43, 0x1f, 0xe3, 0xee, 0x1e, 0x85, 0xec, 0x66, 0x7f,
	0x78, 0xb9, 0x09, 0x67, 0xd8, 0xb6, 0x9a, 0xf8, 0xde, 0x09, 0xee, 0xd2, 0xf9, 0xaa, 0x1e, 0x1b,
	0x44, 0xb7, 0x60, 0x8a, 0x3a, 0xde, 0x74, 0xda, 0xd4, 0xa1, 0xec, 0xce, 0xe2, 0x36, 0x5b, 0x2d,
	0xa5, 0x3b, 0xe0, 0x63, 0x7a, 0x0f, 0x85, 0xbe, 0x82, 0xbc, 0xd9, 0x09, 0x8e, 0xb1, 0x1d, 0x58,
	0xcc, 0x67, 0xc3, 0x6c, 0x1f, 0x39, 0x9e, 0x15, 0x1c, 0x9f, 0xe6, 0x47, 0x29, 0xc3, 0x65, 0xce,
	0x50, 0x90, 0x60, 0x85, 0x10, 0xa5, 0xaf, 0x98, 0xea, 0x01, 0x74, 0x17, 0x50, 0x8c, 0x9a, 0x04,
	0x71, 0x8c, 0x2e, 0x11, 0x38, 0xe9, 0x63, 0xdc, 0xd5, 0xe7, 0x65, 0x14, 0x09, 0xf8, 0x3e, 0x2c,
	0x62, 0xb6, 0x70, 0xd9, 0xa3, 0x71, 0xea, 0xd1, 0x2a, 0x37, 0x2e, 0xf7, 0x20, 0x91, 0x37, 0x0b,
	0x38, 0xf9, 0x10, 0xdd, 0x86, 0xac, 0x40, 0x47, 0xbc, 0x98, 0x48, 0x78, 0x31, 0x17, 0x21, 0x88,
	0x07, 0xf7, 0x20, 0x47, 0x52, 0xdb, 0x36, 0x8e, 0xcc, 0x00, 0x7f, 0x6b, 0x76, 0x0d, 0xcb, 0xcd,
	0x4f, 0x52, 0xa3, 0xdc, 0x36, 0xab, 0x95, 0xca, 0x41, 0xa1, 0xd5, 0xf2, 0xb0, 0xef, 0xeb, 0x59,
	0x8a, 0x7c, 0xc4, 0x80, 0x15, 0x17, 0xdd, 0x87, 0x79, 0x0f, 0x9f, 0x3a, 0x01, 0x16, 0x8d, 0xa7,
	0x52, 0x8c, 0x2f, 0x32, 0x68, 0x64, 0x9d, 0x83, 0x51, 0xdf, 0xb5, 0xf2, 0xd3, 0xa4, 0x9e, 0x74,
	0xf2, 0x27, 0xfa, 0x00, 0x90, 0x6d, 0x06, 0x46, 0xe0, 0x99, 0x67, 0xd8, 0xf3, 0xcd, 0xb6, 0xe1,
	0x3a, 0x5e, 0x90, 0x07, 0x0a, 0xc8, 0xd9, 0x66, 0x50, 0x0f, 0x07, 0x0e, 0x1c, 0x2f, 0x40, 0x08,
	0xc6, 0x7c, 0xb3, 0x1d, 0xe4, 0x67, 0xe8, 0x38, 0xfd, 0x1b, 0x65, 0x61, 0xc4, 0x3a, 0xcb, 0xcf,
	0x6e, 0x65, 0xae, 0x8f, 0xe9, 0x23, 0xd6, 0x19, 0xba, 0x01, 0x93, 0x01, 0x76, 0x8d, 0x33, 0xef,
	0x30, 0x3f, 0xc7, 0xfd, 0x3a, 0x39, 0xde, 0xfe, 0xd2, 0x3b, 0xec, 0xd5, 0x99, 0x3e, 0x11, 0x60,
	0xf7, 0x4b, 0xef, 0x50, 0xfb, 0x7e, 0xa2, 0x57, 0xb6, 0x25, 0x3c, 0x74, 0xd9, 0x72, 0xe8, 0xff,
	0x5f, 0xd9, 0xb6, 0xf0, 0xab, 0x95, 0x6d, 0x64, 0x17, 0x79, 0xf2, 0x39, 0x2c, 0x78, 0x98, 0x44,
	0xba, 0x85, 0x9b, 0x02, 0xdb, 0xc4, 0x40, 0xb6, 0x79, 0x6a, 0x56, 0xc2, 0x4d, 0xa9, 0x05, 0x04,
	0xd7, 0xc8, 0x8a, 0x26, 0x93, 0x2d, 0x10, 0x21, 0xc8, 0x6a, 0x4a, 0x90, 0x67, 0xd3, 0x2b, 0xc2,
	0x31, 0x95, 0x30, 0x5e, 0xa6, 0xd8, 0x42, 0x22, 0x26, 0xf7, 0x61, 0xb1, 0xb7, 0x08, 0x71, 0xfa,
	0xe9, 0x04, 0x03, 0x0a, 0xbd, 0x16, 0x7c, 0xe0, 0xcd, 0x00, 0x51, 0x33, 0x5c, 0x81, 0x59, 0xee,
	0x55, 0x33, 0xb0, 0xce, 0x30, 0x2f, 0xf3, 0x19, 0x36, 0x3b, 0x7d, 0x84, 0xd6, 0x60, 0x9a, 0x41,
	0x88, 0xe9, 0x2c, 0x1d, 0x9f, 0xa2, 0x0f, 0x6a, 0xae, 0xd5, 0x6b, 0x8f, 0x39, 0xa1, 0x3d, 0x84,
	0x76, 0xc8, 0x0e, 0x68, 0x87, 0xff, 0x4c, 0xc2, 0x52, 0xe5, 0xa0, 0x26, 0x48, 0xf3, 0x23, 0x1c,
	0xd4, 0x5c, 0xdc, 0x7c, 0x2b, 0xe6, 0x6f, 0xc5, 0xfc, 0x7f, 0x23, 0xe6, 0x6b, 0x30, 0xcd, 0x0e,
	0x19, 0x2d, 0xfc, 0x82, 0x97, 0x35, 0x39, 0x75, 0x54, 0xc8, 0x67, 0xb4, 0x02, 0x93, 0xd6, 0x99,
	0xe1, 0x5b, 0xdf, 0x61, 0x5a, 0xda, 0x73, 0xfa, 0x84, 0x75, 0x56, 0xb3, 0xbe, 0xc3, 0xe8, 0x12,
	0x4c, 0x59, 0x4d, 0x3e, 0x72, 0x91, 0x8e, 0x4c, 0x5a, 0x4d, 0x36, 0xb4, 0x04, 0x13, 0x3e, 0x7e,
	0x6e, 0xd8, 0x4e, 0x3e, 0x47, 0x27, 0x19, 0xf7, 0xf1, 0xf3, 0xa7, 0x0e, 0xda, 0x00, 0x08, 0x9c,
	0x80, 0x78, 0x7c, 0x12, 0xf8, 0xf9, 0x79, 0x3a, 0x34, 0x4d, 0x9f, 0x1c, 0x9c, 0x04, 0x3e, 0xda,
	0x84, 0x19, 0x36, 0xdc, 0xe8, 0x06, 0xd8, 0xcf, 0x23, 0x3a, 0xce, 0x2c, 0x76, 0xc9, 0x93, 0x08,
	0xd0, 0xf2, 0x1c, 0xd7, 0xcf, 0x2f, 0x08, 0x80, 0x12, 0x79, 0x82, 0x34, 0x98, 0x63, 0x00, 0xef,
	0x05, 0x9b, 0x63, 0x91, 0x42, 0x98, 0x95, 0xfe, 0x82, 0xce, 0xf2, 0x0e, 0x64, 0x7b, 0x18, 0x36,
	0xd1, 0x12, 0x05, 0xcd, 0x72, 0x10, 0x9b, 0x4a, 0x44, 0xb1, 0xd9, 0x96, 0x25, 0x14, 0x9b, 0x4f,
	0x68, 0xfb, 0x95, 0x01, 0x6d, 0xff, 0x37, 0xe8, 0xb5, 0x3d, 0x17, 0xa8, 0x73, 0xb4, 0xfd, 0xdb,
	0xcd, 0xf0, 0xed, 0x66, 0xf8, 0x26, 0x36, 0x43, 0x95, 0x8c, 0xc1, 0xeb, 0xc8, 0xd8, 0xcc, 0x39,
	0x65, 0x6c, 0x36, 0x7d, 0x1b, 0x9e, 0x1b, 0xb0, 0x0d, 0x67, 0x53, 0xb6, 0xe1, 0x8b, 0x82, 0xb0,
	0x49, 0x42, 0x96, 0x8b, 0x09, 0x99, 0x06, 0x73, 0x36, 0xfe, 0xd6, 0x88, 0x00, 0xf3, 0x6c, 0x46,
	0x1b, 0x7f, 0xfb, 0x58, 0x21, 0x76, 0x28, 0x55, 0xec, 0x16, 0xd2, 0xc4, 0x6e, 0x31, 0x5d, 0xec,
	0x96, 0x06, 0x88, 0xdd, 0xf2, 0x20, 0xb1, 0x5b, 0x19, 0x2c, 0x76, 0xf9, 0x61, 0xc4, 0xee, 0xd2,
	0x50, 0x62, 0xb7, 0xda, 0x5f, 0xec, 0xd6, 0xfa, 0x8b, 0x1d, 0x5a, 0x07, 0x60, 0x21, 0x31, 0x1a,
	0xa7, 0x6e, 0x7e, 0x9d, 0x92, 0x4d, 0xd1, 0xb0, 0xec, 0x9e, 0xba, 0xe8, 0x7d, 0x40, 0x6d, 0xd3,
	0x0f, 0x0c, 0x0f, 0xbb, 0x6d, 0xb3, 0x6b, 0xf0, 0xe0, 0x6d, 0x50, 0xd4, 0x45, 0x32, 0xa2, 0xd3,
	0x81, 0x1a, 0xc1, 0x6b, 0x2f, 0x97, 0x60, 0x9d, 0xea, 0xe6, 0xa3, 0xb6, 0xd3, 0x30, 0xdb, 0xb5,
	0xc0, 0x0c, 0x2c, 0x3f, 0xb0, 0x9a, 0x7e, 0x28, 0x9f, 0x77, 0xe1, 0x12, 0xdf, 0xab, 0x0d, 0xcb,
	0x76, 0x3b, 0x81, 0xd1, 0xc2, 0x7e, 0xd3, 0xc0, 0x9e, 0xe7, 0x78, 0x3e, 0x95, 0xd2, 0x31, 0x7d,
	0x99, 0x03, 0x2a, 0x64, 0xbc, 0x84, 0xfd, 0x66, 0x99, 0x8e, 0xa2, 0x9f, 0xc1, 0x6a, 0x68, 0xea,
	0x74, 0x82, 0xb8, 0xed, 0x08, 0xb5, 0x5d, 0xe1, 0x88, 0x2a, 0x05, 0x08, 0xc6, 0xf7, 0x61, 0x2d,
	0x34, 0x6e, 0x36, 0x0c, 0xcf, 0xb2, 0x8f, 0x8c, 0x86, 0xe9, 0xe3, 0xd0, 0x7a, 0x54, 0xb2, 0x2e,
	0x36, 0x74, 0xcb, 0x3e, 0xda, 0x35, 0x7d, 0xcc, 0xad, 0x13, 0x5e, 0xbb, 0xe6, 0x51, 0xcf, 0x76,
	0x2c, 0xe9, 0xf5, 0x81, 0x79, 0x14, 0x9a, 0x7e, 0x06, 0x1b, 0xa1, 0x69, 0xc3, 0xf4, 0x9a, 0x8e,
	0xe1, 0xe1, 0xe7, 0x86, 0xd9, 0x6a, 0x79, 0xa1, 0xf9, 0x38, 0x35, 0x0f, 0xf9, 0x77, 0x09, 0x46,
	0xc7, 0xcf, 0x49, 0x6b, 0x72, 0x86, 0x4f, 0x61, 0x5d, 0x66, 0x68, 0x36, 0x24, 0xdf, 0x27, 0x28,
	0x41, 0x5e, 0x24, 0x28, 0x36, 0x04, 0xe7, 0x3f, 0x86, 0x70, 0x5d, 0x86, 0x6b, 0xb6, 0xa4, 0xb9,
	0x27, 0xa9, 0x69, 0x78, 0x5c, 0x3b, 0x30, 0x5b, 0xc2, 0xb4, 0xc2, 0x9a, 0x03, 0xd3, 0xe2, 0x95,
	0x1f, 0x1a, 0x4e, 0x49, 0x6b, 0xae, 0x9b, 0x16, 0x6b, 0x83, 0xd4, 0x4c, 0x89, 0xf1, 0x9a, 0x56,
	0x64, 0x4a, 0x08, 0xd8, 0x83, 0x68, 0xb9, 0x7e, 0x60, 0x1e, 0xe1, 0x8f, 0x48, 0xc8, 0x05, 0x73,
	0x90, 0xe2, 0x55, 0xa3, 0x90, 0x0a, 0x45, 0x24, 0x09, 0x02, 0xb3, 0xd1, 0xc6, 0xb7, 0x62, 0x04,
	0x33, 0x12, 0x41, 0x9d, 0x42, 0xfa, 0x12, 0xec, 0xc4, 0x08, 0x66, 0x93, 0x04, 0x3b, 0x7d, 0x09,
	0xee, 0xc4, 0x08, 0xe6, 0x92, 0x04, 0x77, 0x24, 0x02, 0xa9, 0x68, 0x5a, 0x3c, 0xed, 0x62, 0xe2,
	0xb2, 0xb1, 0xa2, 0x69, 0xd1, 0xb4, 0xab, 0xb3, 0xc7, 0xac, 0x0f, 0x3b, 0xed, 0x76, 0x68, 0x7d,
	0x51, 0xca, 0x1e, 0x35, 0x7d, 0xd8, 0x69, 0xb7, 0xb9, 0xe9, 0xbd, 0x28, 0x7b, 0x61, 0xab, 0xb4,
	0x4e, 0xcd, 0xd0, 0x36, 0x27, 0xd9, 0xb2, 0x4e, 0x29, 0x9d, 0x9a, 0xdc, 0xf6, 0xe7, 0x51, 0x9b,
	0xb1, 0xe6, 0x7c, 0x71, 0x6c, 0x76, 0xfc, 0x20, 0x34, 0x9e, 0x97, 0x4a, 0x95, 0xb6, 0x27, 0x03,
	0x70, 0xf3, 0x42, 0xb4, 0xee, 0xe0, 0x45, 0xeb, 0xd4, 0xbc, 0x6d, 0x60, 0x3b, 0xc0, 0x9e, 0xd1,
	0x74, 0x3a, 0xe4, 0xff, 0xf0, 0x94, 0x19, 0xfa, 0x57, 0xa7, 0x98, 0x32, 0x19, 0x2a, 0x72, 0x44,
	0x82, 0x62, 0x27, 0x4e, 0xb1, 0x90, 0xa4, 0xd8, 0x91, 0x29, 0x84, 0x45, 0x70, 0x2f, 0x5a, 0x9d,
	0xd3, 0xd3, 0x6e, 0xb8, 0x88, 0x45, 0x69, 0x11, 0xcc, 0x87, 0x12, 0x01, 0xf0, 0x45, 0x94, 0x60,
	0x33, 0x34, 0xf7, 0xc8, 0x20, 0xb7, 0x16, 0xc5, 0x8a, 0xed, 0x2f, 0xe1, 0x2c, 0x3a, 0x41, 0x51,
	0x06, 0x41, 0xb0, 0x84, 0x1a, 0x62, 0x2c, 0xb1, 0x65, 0x2c, 0x4b, 0x15, 0x40, 0x29, 0xe4, 0x55,
	0x08, 0x6e, 0xb0, 0x0a, 0x20, 0x95, 0x44, 0xb6, 0xd2, 0xc8, 0x8d, 0x15, 0xc9, 0x0d, 0x5a, 0x07,
	0xbb, 0x66, 0xab, 0x42, 0x31, 0xdc, 0x8d, 0x87, 0xb0, 0x95, 0x64, 0x71, 0x3a, 0x81, 0x48, 0xc3,
	0x76, 0xb2, 0xf5, 0x18, 0x4d, 0x95, 0x81, 0xa2, 0x7a, 0xe4, 0x67, 0x20, 0x85, 0xee, 0xb3, 0x5d,
	0x6e, 0x99, 0x03, 0x14, 0xba, 0x1f, 0x9a, 0x2a, 0x74, 0x9f, 0xed, 0x7d, 0x2b, 0x1c, 0xa1, 0xd2,
	0xfd, 0xd0, 0x58, 0xa5, 0xfb, 0x6b, 0x92, 0xb5, 0x4a, 0xf7, 0x65, 0xaf, 0xc5, 0x2e, 0x5e, 0x4f,
	0x7a, 0x2d, 0xeb, 0x7e, 0x68, 0xaa, 0xd6, 0x7d, 0xb6, 0x83, 0x86, 0xfc, 0x6a, 0xdd, 0x97, 0x19,
	0x9a, 0x0d, 0x89, 0xe0, 0x32, 0xab, 0x43, 0x91, 0xa0, 0xd8, 0x10, 0xec, 0x1f, 0x44, 0xf6, 0x4a,
	0x21, 0xdd, 0x94, 0x1c, 0x50, 0x08, 0x69, 0x32, 0xf0, 0xa2, 0xf9, 0x96, 0x22, 0xf0, 0xc2, 0xfa,
	0x0b, 0xd1, 0xfa, 0xd5, 0xad, 0x7c, 0x85, 0xf5, 0x21, 0x07, 0xa5, 0xb4, 0xb2, 0x44, 0x91, 0x68,
	0x65, 0x2d, 0x49, 0x11, 0x6b, 0x65, 0x21, 0x06, 0x61, 0x2b, 0x7b, 0x8e, 0x1b, 0x31, 0x5c, 0x95,
	0x62, 0xc0, 0x7b, 0xd9, 0x73, 0x5c, 0x51, 0x0b, 0x42, 0x02, 0x95, 0xa0, 0xbd, 0x23, 0xe5, 0x20,
	0x29, 0x68, 0x42, 0x15, 0xb4, 0x1d, 0xd2, 0x7f, 0xe4, 0xc0, 0x6f, 0x58, 0x76, 0x8f, 0xe0, 0x5d,
	0xc9, 0x81, 0x27, 0x8e, 0xd9, 0xa2, 0xb7, 0xbe, 0x8a, 0x1d, 0x44, 0x8a, 0x1a, 0x5f, 0x81, 0x28,
	0x46, 0xd7, 0x24, 0x07, 0x92, 0x62, 0x24, 0x54, 0x30, 0x8f, 0x21, 0x33, 0x3f, 0xf4, 0x30, 0xce,
	0xbf, 0x27, 0x55, 0x30, 0x8b, 0x1f, 0x35, 0x7e, 0xe8, 0x61, 0x4c, 0x04, 0x24, 0x34, 0x4d, 0xd3,
	0xb1, 0xeb, 0x4c, 0x40, 0x38, 0x2c, 0x4d, 0xc7, 0x64, 0x96, 0x58, 0x0e, 0x6f, 0x48, 0x01, 0x50,
	0xeb, 0x98, 0xdc, 0x06, 0x49, 0x1d, 0xbb, 0x29, 0xb9, 0x91, 0xa6, 0x63, 0x49, 0x96, 0x98, 0x8e,
	0xbd, 0xcf, 0x74, 0x2c, 0x46, 0x23, 0xe9, 0x98, 0xf6, 0xcf, 0x0c, 0xcc, 0xf1, 0x6b, 0x3e, 0xb9,
	0xf6, 0x38, 0x36, 0xfa, 0x14, 0xb2, 0xbe, 0x49, 0xaf, 0x45, 0x8e, 0x6d, 0x90, 0x9b, 0x15, 0x3d,
	0xc6, 0x66, 0x77, 0xf2, 0xe2, 0x2d, 0x3e, 0x44, 0xd7, 0xbb, 0x2e, 0xd6, 0x67, 0x7d, 0x33, 0xfa,
	0x84, 0xee, 0x03, 0x60, 0xbb, 0x19, 0xbe, 0x4d, 0x18, 0x19, 0xf8, 0x12, 0x71, 0xef, 0x82, 0x3e,
	0x8d, 0xed, 0x26, 0x7f, 0x7b, 0x70, 0x1f, 0x80, 0x5c, 0x90, 0xb9, 0xf5, 0xe8, 0xc0, 0x77, 0x11,
	0xc4, 0xba, 0x85, 0xb9, 0xf5, 0xee, 0x0c, 0x4c, 0xfb, 0x26, 0x37, 0xd6, 0x7e, 0x97, 0x01, 0x44,
	0xad, 0xf4, 0x4e, 0x1b, 0xef, 0x9b, 0x41, 0xf3, 0x98, 0x9e, 0xd8, 0x57, 0x60, 0xd2, 0xeb, 0xb4,
	0xb1, 0x61, 0xb5, 0xf8, 0xf9, 0x7c, 0x82, 0x7c, 0xac, 0xb4, 0xd0, 0x35, 0x18, 0x3f, 0x25, 0x28,
	0xee, 0x73, 0x78, 0xad, 0xec, 0x59, 0xeb, 0x6c, 0x18, 0xdd, 0xa6, 0x93, 0xb0, 0x00, 0x71, 0x0f,
	0x17, 0x55, 0xb1, 0xd1, 0xa7, 0xc2, 0xb8, 0x68, 0xff, 0x08, 0xa3, 0x4c, 0xc8, 0xa8, 0x17, 0x9f,
	0xab, 0x5f, 0xbb, 0x2c, 0xf7, 0x96, 0x4a, 0x90, 0x43, 0xbe, 0x71, 0x79, 0x08, 0xd9, 0x33, 0xef,
	0x90, 0x5e, 0x2d, 0xa5, 0xa8, 0x27, 0x6e, 0x48, 0x12, 0x8d, 0x87, 0x0f, 0xf5, 0xd9, 0x33, 0x61,
	0x14, 0x7d, 0x08, 0xe3, 0x24, 0x14, 0xe4, 0xf6, 0x30, 0x7a, 0x7d, 0x66, 0xe7, 0x92, 0xb8, 0x28,
	0x29, 0x86, 0x3a, 0xc3, 0x69, 0x65, 0x58, 0xe8, 0x0d, 0xea, 0xf8, 0x79, 0x07, 0xfb, 0xc1, 0xbe,
	0x7f, 0x84, 0xb6, 0x61, 0xd2, 0x63, 0x9f, 0xf2, 0x19, 0xca, 0xb4, 0x18, 0x67, 0xa2, 0x24, 0x21,
	0x48, 0xbb, 0x01, 0x17, 0xa3, 0x91, 0xc0, 0x0c, 0x3a, 0x3e, 0x5a, 0x86, 0x09, 0x21, 0x2e, 0x13,
	0x3a, 0xff, 0xa4, 0xfd, 0x36, 0x03, 0xf3, 0xc2, 0x94, 0xbe, 0xeb, 0xd8, 0x3e, 0x46, 0x0f, 0x00,
	0x4c, 0xd7, 0x22, 0xbb, 0x42, 0xd0, 0xf1, 0x79, 0xb9, 0x86, 0xe9, 0x2b, 0xb8, 0x16, 0xe3, 0xdc,
	0xcd, 0xfe, 0xfb, 0xe5, 0xa6, 0x80, 0xd3, 0xa7, 0xcd, 0x70, 0x08, 0x6d, 0xc3, 0x04, 0x37, 0x1e,
	0xe1, 0x69, 0x88, 0x3b, 0xcc, 0x4c, 0x38, 0x4a, 0x7b, 0x02, 0x8b, 0x09, 0x2f, 0xc8, 0xca, 0x3f,
	0x82, 0x29, 0x8f, 0x7f, 0xe4, 0x4b, 0xcf, 0xc7, 0x99, 0x42, 0xb8, 0xde, 0x43, 0x6a, 0x75, 0x58,
	0xee, 0x0d, 0x97, 0x70, 0x1b, 0x07, 0x61, 0x30, 0xd1, 0xbd, 0x73, 0x55, 0x89, 0x54, 0x15, 0x5a,
	0x1d, 0x2e, 0xa9, 0x59, 0x89, 0xa3, 0x9f, 0xc4, 0x53, 0xb4, 0x11, 0xf7, 0x53, 0x32, 0x89, 0x72,
	0x65, 0xc2, 0x4a, 0x02, 0xc2, 0xb3, 0xf0, 0x70, 0xa8, 0x2c, 0x2c, 0xfd, 0xf0, 0x72, 0x73, 0x9e,
	0x97, 0xa0, 0x32, 0x19, 0xda, 0x33, 0x58, 0x4d, 0x99, 0x82, 0x78, 0x7e, 0x2f, 0x11, 0xe2, 0xcb,
	0x69, 0xae, 0x27, 0x02, 0xfd, 0x0b, 0xa1, 0x5e, 0x1f, 0xe1, 0xe0, 0x4d, 0x44, 0xf9, 0xa9, 0x90,
	0xbb, 0x88, 0x92, 0xd5, 0x42, 0x2c, 0xc4, 0xab, 0x71, 0x3f, 0x23, 0x7c, 0x14, 0xdf, 0x3f, 0x66,
	0x04, 0x1f, 0xcb, 0x76, 0xe0, 0x75, 0x49, 0x54, 0x7c, 0x74, 0x1d, 0x72, 0x76, 0xe7, 0xd4, 0x08,
	0x9a, 0xae, 0xe1, 0x63, 0xdf, 0xb7, 0x1c, 0x9b, 0x85, 0x78, 0x4e, 0xcf, 0xda, 0x9d, 0xd3, 0x7a,
	0xd3, 0xad, 0xf1, 0xa7, 0x21, 0xb2, 0xd3, 0x12, 0x90, 0x23, 0x3d, 0xe4, 0x17, 0xad, 0x08, 0xf9,
	0x01, 0x20, 0x82, 0x74, 0x82, 0x63, 0xec, 0x45, 0xd8, 0x51, 0xfe, 0x2a, 0xbf, 0x73, 0x5a, 0x25,
	0x03, 0x21, 0x5a, 0xdb, 0xe5, 0xdf, 0xa3, 0x86, 0xed, 0xe0, 0xa3, 0x5b, 0x30, 0x4e, 0xb2, 0xe7,
	0xa7, 0xad, 0x2f, 0x72, 0x5f, 0x67, 0x40, 0xed, 0x5f, 0x19, 0xa1, 0x71, 0xe8, 0xf2, 0xdf, 0x6c,
	0xed, 0xa0, 0xeb, 0x30, 0xe6, 0xbb, 0xb8, 0xc9, 0xdb, 0x58, 0xad, 0x3b, 0x14, 0x21, 0xb4, 0xfc,
	0xe8, 0x30, 0x2d, 0x8f, 0xde, 0x0f, 0x17, 0xcb, 0x5e, 0x1e, 0x2f, 0xa9, 0xe0, 0xbd, 0x75, 0xea,
	0x42, 0x97, 0x08, 0xcb, 0x64, 0x9d, 0x17, 0xaf, 0xdf, 0x35, 0x65, 0x5d, 0x24, 0x8a, 0xf7, 0x31,
	0xe4, 0xe5, 0x1d, 0x54, 0xa8, 0xb5, 0x0f, 0xe3, 0xb5, 0xb6, 0x24, 0x6f, 0x48, 0xa1, 0x45, 0xaf,
	0xcc, 0x3e, 0xe5, 0x79, 0xe8, 0x0d, 0xf1, 0xf8, 0x5d, 0x83, 0x8b, 0xec, 0x48, 0xd7, 0xdb, 0x46,
	0xb9, 0x00, 0xcf, 0xd1, 0xc7, 0x35, 0x93, 0x97, 0xfd, 0xef, 0x33, 0xbc, 0xee, 0x05, 0x6f, 0x78,
	0x2a, 0x3f, 0x1c, 0x26, 0x95, 0x62, 0xce, 0x8a, 0xc2, 0x9c, 0x92, 0x0a, 0xaf, 0x29, 0x17, 0xc1,
	0x09, 0x42, 0x87, 0xb8, 0x68, 0x7c, 0xc9, 0xd5, 0x2e, 0xe1, 0x0f, 0x09, 0xcf, 0xdd, 0x44, 0xcc,
	0x37, 0xd4, 0xf1, 0x49, 0x46, 0xfd, 0x1b, 0x58, 0x93, 0x31, 0xb2, 0x40, 0x3f, 0x38, 0xff, 0x97,
	0xa6, 0xb2, 0x7e, 0x7c, 0x03, 0x97, 0xfb, 0xf0, 0x13, 0xe7, 0xef, 0xc7, 0x73, 0xab, 0x29, 0x7d,
	0x4f, 0xd1, 0xeb, 0x43, 0x58, 0x57, 0xe3, 0xde, 0xb0, 0x68, 0x37, 0x60, 0xb3, 0xdf, 0x3c, 0x64,
	0x21, 0x0f, 0x12, 0x59, 0xb8, 0xda, 0x77, 0x25, 0x89, 0x5c, 0x7c, 0x1d, 0xef, 0x00, 0x41, 0xc3,
	0x5f, 0x3b, 0x11, 0xcf, 0xe2, 0x89, 0x96, 0xd5, 0xfc, 0x6e, 0x3c, 0x0b, 0x9b, 0x4a, 0xdf, 0x55,
	0x92, 0xfe, 0x97, 0x4c, 0xbc, 0x36, 0x45, 0xe5, 0x3b, 0x77, 0xbb, 0xdc, 0x92, 0x24, 0x6e, 0x3d,
	0x74, 0x43, 0xf5, 0x9d, 0x3e, 0x97, 0xba, 0x3b, 0x31, 0xa9, 0xeb, 0xdb, 0x57, 0xe1, 0x11, 0xe7,
	0xd7, 0xf1, 0xc2, 0x89, 0xe9, 0xd8, 0xfd, 0x44, 0x36, 0xb7, 0xd2, 0x23, 0xd2, 0x47, 0xcc, 0xf8,
	0x81, 0xfe, 0x1c, 0x62, 0x16, 0x5a, 0x28, 0xc4, 0xac, 0x84, 0x5f, 0x53, 0xcc, 0x7a, 0xde, 0xfc,
	0xd8, 0x62, 0x26, 0x79, 0x9a, 0x2e, 0x66, 0x31, 0x7f, 0x86, 0x12, 0xb3, 0x98, 0x8d, 0x52, 0xcc,
	0x4a, 0xf8, 0xd5, 0xc4, 0x2c, 0x7e, 0xfd, 0x4a, 0x13, 0x33, 0x15, 0xff, 0x30, 0x62, 0xa6, 0xb2,
	0x53, 0x89, 0x59, 0x0c, 0xf7, 0xa3, 0x89, 0x99, 0x72, 0x9e, 0xa1, 0xc4, 0x4c, 0x69, 0xa9, 0x14,
	0xb3, 0xe8, 0x0b, 0xf9, 0x37, 0x96, 0x88, 0x67, 0xf1, 0x44, 0x9f, 0x4f, 0xcc, 0x12, 0x46, 0x4a,
	0x31, 0x13, 0x51, 0x3f, 0x8a, 0x98, 0xc9, 0xbf, 0x54, 0x18, 0x4e, 0xcc, 0xe4, 0xbe, 0x4a, 0x8a,
	0x59, 0xd2, 0xe9, 0xa1, 0xc4, 0x2c, 0x69, 0x26, 0xa4, 0xb2, 0xcc, 0xcb, 0x45, 0xf1, 0x1d, 0x61,
	0x98, 0x51, 0x0d, 0xe6, 0x9a, 0x6d, 0x6c, 0x7a, 0x86, 0x63, 0x1b, 0x1e, 0x36, 0x5b, 0xfc, 0xec,
	0x3e, 0x43, 0x1f, 0x56, 0x6d, 0x1d, 0x9b, 0x2d, 0xed, 0x10, 0xb4, 0x01, 0x34, 0xc4, 0xd5, 0xcf,
	0xe2, 0xb9, 0xbb, 0x26, 0x7a, 0x9a, 0x6e, 0x1b, 0xa5, 0xf0, 0xfb, 0x0c, 0x6c, 0xa5, 0x83, 0x5f,
	0x35, 0x93, 0x9f, 0x48, 0x99, 0xbc, 0x2a, 0x66, 0x32, 0xe5, 0xbb, 0x53, 0x96, 0x50, 0xed, 0x37,
	0x70, 0x75, 0x90, 0x37, 0x64, 0xdd, 0xc5, 0x44, 0x8a, 0xde, 0x1b, 0xb8, 0xf0, 0x78, 0xa6, 0x6e,
	0xfe, 0x92, 0xbf, 0x86, 0x09, 0x7f, 0x84, 0x82, 0x56, 0x60, 0xa1, 0x72, 0x50, 0x2b, 0x17, 0x8d,
	0x03, 0xbd, 0x5a, 0xaf, 0x16, 0xab, 0x4f, 0x8c, 0xa7, 0xd5, 0xa7, 0xe5, 0xdc, 0x05, 0xb4, 0x04,
	0xf3, 0xb1, 0x81, 0xc2, 0x5e, 0x2e, 0x83, 0x96, 0x01, 0xc5, 0x1e, 0x97, 0x6b, 0x07, 0xb9, 0x91,
	0x9b, 0x7f, 0x1a, 0x85, 0x05, 0xc5, 0x8f, 0x37, 0xd0, 0x06, 0x5c, 0x2a, 0x3f, 0x2d, 0xea, 0x5f,
	0x1d, 0xd4, 0x2b, 0xd5, 0xa7, 0x46, 0xe1, 0xc9, 0xa3, 0xaa, 0x5e, 0xa9, 0xef, 0xed, 0x87, 0xb3,
	0xbc, 0x03, 0x5b, 0xca, 0xe1, 0x42, 0xb9, 0x66, 0x3c, 0x2a, 0xee, 0x1b, 0xb7, 0x77, 0x7e, 0x9a,
	0xcb, 0x0c, 0x44, 0xed, 0x7c, 0xfc, 0x93, 0xdc, 0x48, 0x5f, 0x54, 0x91, 0x73, 0x8d, 0x0e, 0x46,
	0xdd, 0xdd, 0xc9, 0x8d, 0x0d, 0x44, 0x91, 0x19, 0xc7, 0xfb, 0xa3, 0x76, 0x8b, 0x74, 0xc6, 0x89,
	0xc1, 0xa8, 0xbb, 0x3b, 0xb9, 0xc9, 0x81, 0x28, 0x32, 0xe3, 0x54, 0x6a, 0x38, 0x4b, 0xe5, 0xda,
	0x9d, 0xdc, 0x34, 0xda, 0x82, 0x75, 0xe5, 0x70, 0x71, 0xaf, 0x40, 0xfe, 0xe5, 0xe0, 0xe6, 0x9f,
	0x33, 0xb0, 0x92, 0xf2, 0x23, 0x22, 0x74, 0x05, 0x36, 0x0a, 0x5f, 0xd4, 0xf7, 0xca, 0x4f, 0xeb,
	0x95, 0x62, 0x41, 0x9d, 0xaf, 0x55, 0x58, 0x8e, 0x43, 0x58, 0x0e, 0x72, 0x99, 0x94, 0xb1, 0x62,
	0x71, 0x3f, 0x37, 0x42, 0xca, 0x2c, 0x36, 0xb6, 0xb7, 0x5f, 0x28, 0xe6, 0x46, 0xd1, 0x65, 0x58,
	0x55, 0x19, 0xed, 0x16, 0x8d, 0xda, 0x5e, 0x21, 0x37, 0x76, 0xf3, 0x0f, 0xe1, 0xfb, 0x2e, 0xf1,
	0x85, 0x2b, 0x09, 0x03, 0xab, 0xc2, 0x5a, 0xc1, 0x28, 0x14, 0xa9, 0x59, 0xfd, 0xab, 0x83, 0x72,
	0xe8, 0xe5, 0x16, 0xfd, 0xcd, 0x42, 0x72, 0x98, 0xc7, 0x26, 0x97, 0x49, 0x45, 0x94, 0xca, 0x0c,
	0x31, 0x92, 0x3a, 0x45, 0x49, 0xaf, 0x1e, 0xe4, 0x46, 0x77, 0xfe, 0x3e, 0x0d, 0xe3, 0xd4, 0x2f,
	0xf4, 0x44, 0x78, 0x79, 0x57, 0xf4, 0xb0, 0x19, 0x60, 0xb4, 0x9a, 0x7c, 0xe7, 0x15, 0xca, 0xd7,
	0xea, 0x5a, 0xda, 0xfb, 0xb0, 0x7d, 0xff, 0x48, 0xbb, 0x20, 0xb1, 0x7d, 0xe1, 0xb6, 0x5e, 0x93,
	0xed, 0x99, 0xc0, 0xc6, 0x36, 0x62, 0xb4, 0xd5, 0xf7, 0x3d, 0x17, 0xe1, 0xbc, 0xd2, 0xff, 0x75,
	0x12, 0x63, 0xae, 0xc2, 0xac, 0x78, 0x5d, 0x47, 0x1b, 0xe9, 0xef, 0x76, 0x08, 0xe7, 0xe5, 0x3e,
	0x57, 0x7c, 0x46, 0xf8, 0x75, 0xfc, 0x42, 0xce, 0x63, 0xb9, 0x99, 0x72, 0x51, 0xed, 0x51, 0x6f,
	0xf5, 0xbd, 0xc9, 0xa6, 0x90, 0xf3, 0xd0, 0xbe, 0x11, 0xf2, 0xa3, 0x38, 0x39, 0x8f, 0xf4, 0xbb,
	0x83, 0xaf, 0xa9, 0x64, 0x8a, 0x6b, 0x43, 0xdc, 0x01, 0xd9, 0x44, 0xdf, 0xf4, 0x5a, 0x21, 0xba,
	0x5a, 0x20, 0x6d, 0xc0, 0x35, 0x8c, 0x4c, 0x71, 0x75, 0xd0, 0xc5, 0x24, 0x1e, 0x25, 0xbe, 0xdb,
	0xab, 0x53, 0x90, 0xb8, 0xb0, 0xac, 0x6e, 0xf5, 0x3d, 0x7f, 0xa7, 0x90, 0xab, 0x53, 0xf0, 0x6a,
	0xe4, 0x47, 0x71, 0x72, 0x75, 0x0a, 0x52, 0x0e, 0xe5, 0xf1, 0x14, 0xa4, 0x9d, 0x79, 0xa5, 0x14,
	0x44, 0x07, 0x22, 0xa4, 0x0d, 0x38, 0x3c, 0x2a, 0x52, 0xa0, 0x3c, 0x85, 0x69, 0x17, 0x90, 0xcf,
	0x0f, 0xc5, 0x8a, 0xdd, 0x1c, 0xdd, 0x18, 0xee, 0x9c, 0x43, 0x66, 0xbb, 0x39, 0xe4, 0xc9, 0x80,
	0x4e, 0xba, 0x0b, 0xbf, 0x9a, 0x3a, 0x36, 0xdb, 0xf4, 0xd7, 0xa8, 0x8d, 0x09, 0xfa, 0xdf, 0x9d,
	0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x08, 0xed, 0x23, 0x64, 0x35, 0x00, 0x00,
}
