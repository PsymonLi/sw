// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// events that HAL generates and app(s) can listen to
type EventId int32

const (
	EventId_EVENT_ID_NONE            EventId = 0
	EventId_EVENT_ID_PORT_STATE      EventId = 1
	EventId_EVENT_ID_LIF_ADD_UPDATE  EventId = 2
	EventId_EVENT_ID_MICRO_SEG_STATE EventId = 3
	EventId_EVENT_ID_EP_MIGRATION    EventId = 4
)

var EventId_name = map[int32]string{
	0: "EVENT_ID_NONE",
	1: "EVENT_ID_PORT_STATE",
	2: "EVENT_ID_LIF_ADD_UPDATE",
	3: "EVENT_ID_MICRO_SEG_STATE",
	4: "EVENT_ID_EP_MIGRATION",
}
var EventId_value = map[string]int32{
	"EVENT_ID_NONE":            0,
	"EVENT_ID_PORT_STATE":      1,
	"EVENT_ID_LIF_ADD_UPDATE":  2,
	"EVENT_ID_MICRO_SEG_STATE": 3,
	"EVENT_ID_EP_MIGRATION":    4,
}

func (x EventId) String() string {
	return proto.EnumName(EventId_name, int32(x))
}
func (EventId) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

type EventOp int32

const (
	EventOp_EVENT_OP_NONE        EventOp = 0
	EventOp_EVENT_OP_SUBSCRIBE   EventOp = 1
	EventOp_EVENT_OP_UNSUBSCRIBE EventOp = 2
)

var EventOp_name = map[int32]string{
	0: "EVENT_OP_NONE",
	1: "EVENT_OP_SUBSCRIBE",
	2: "EVENT_OP_UNSUBSCRIBE",
}
var EventOp_value = map[string]int32{
	"EVENT_OP_NONE":        0,
	"EVENT_OP_SUBSCRIBE":   1,
	"EVENT_OP_UNSUBSCRIBE": 2,
}

func (x EventOp) String() string {
	return proto.EnumName(EventOp_name, int32(x))
}
func (EventOp) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

// EventSpec captures the event of interest to the app
type EventRequest struct {
	EventId        EventId `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=event.EventId" json:"event_id,omitempty"`
	EventOperation EventOp `protobuf:"varint,2,opt,name=event_operation,json=eventOperation,enum=event.EventOp" json:"event_operation,omitempty"`
}

func (m *EventRequest) Reset()                    { *m = EventRequest{} }
func (m *EventRequest) String() string            { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()               {}
func (*EventRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *EventRequest) GetEventId() EventId {
	if m != nil {
		return m.EventId
	}
	return EventId_EVENT_ID_NONE
}

func (m *EventRequest) GetEventOperation() EventOp {
	if m != nil {
		return m.EventOperation
	}
	return EventOp_EVENT_OP_NONE
}

type EventResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	EventId   EventId   `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=event.EventId" json:"event_id,omitempty"`
	// Types that are valid to be assigned to EventInfo:
	//	*EventResponse_LifEvent
	//	*EventResponse_PortEvent
	//	*EventResponse_MicroSegEvent
	//	*EventResponse_MigrationEvent
	EventInfo isEventResponse_EventInfo `protobuf_oneof:"event_info"`
}

func (m *EventResponse) Reset()                    { *m = EventResponse{} }
func (m *EventResponse) String() string            { return proto.CompactTextString(m) }
func (*EventResponse) ProtoMessage()               {}
func (*EventResponse) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

type isEventResponse_EventInfo interface{ isEventResponse_EventInfo() }

type EventResponse_LifEvent struct {
	LifEvent *LifGetResponse `protobuf:"bytes,3,opt,name=lif_event,json=lifEvent,oneof"`
}
type EventResponse_PortEvent struct {
	PortEvent *PortResponse `protobuf:"bytes,4,opt,name=port_event,json=portEvent,oneof"`
}
type EventResponse_MicroSegEvent struct {
	MicroSegEvent *MicroSegEvent `protobuf:"bytes,5,opt,name=micro_seg_event,json=microSegEvent,oneof"`
}
type EventResponse_MigrationEvent struct {
	MigrationEvent *MigrationResponse `protobuf:"bytes,6,opt,name=migration_event,json=migrationEvent,oneof"`
}

func (*EventResponse_LifEvent) isEventResponse_EventInfo()       {}
func (*EventResponse_PortEvent) isEventResponse_EventInfo()      {}
func (*EventResponse_MicroSegEvent) isEventResponse_EventInfo()  {}
func (*EventResponse_MigrationEvent) isEventResponse_EventInfo() {}

func (m *EventResponse) GetEventInfo() isEventResponse_EventInfo {
	if m != nil {
		return m.EventInfo
	}
	return nil
}

func (m *EventResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *EventResponse) GetEventId() EventId {
	if m != nil {
		return m.EventId
	}
	return EventId_EVENT_ID_NONE
}

func (m *EventResponse) GetLifEvent() *LifGetResponse {
	if x, ok := m.GetEventInfo().(*EventResponse_LifEvent); ok {
		return x.LifEvent
	}
	return nil
}

func (m *EventResponse) GetPortEvent() *PortResponse {
	if x, ok := m.GetEventInfo().(*EventResponse_PortEvent); ok {
		return x.PortEvent
	}
	return nil
}

func (m *EventResponse) GetMicroSegEvent() *MicroSegEvent {
	if x, ok := m.GetEventInfo().(*EventResponse_MicroSegEvent); ok {
		return x.MicroSegEvent
	}
	return nil
}

func (m *EventResponse) GetMigrationEvent() *MigrationResponse {
	if x, ok := m.GetEventInfo().(*EventResponse_MigrationEvent); ok {
		return x.MigrationEvent
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EventResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EventResponse_OneofMarshaler, _EventResponse_OneofUnmarshaler, _EventResponse_OneofSizer, []interface{}{
		(*EventResponse_LifEvent)(nil),
		(*EventResponse_PortEvent)(nil),
		(*EventResponse_MicroSegEvent)(nil),
		(*EventResponse_MigrationEvent)(nil),
	}
}

func _EventResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EventResponse)
	// event_info
	switch x := m.EventInfo.(type) {
	case *EventResponse_LifEvent:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LifEvent); err != nil {
			return err
		}
	case *EventResponse_PortEvent:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PortEvent); err != nil {
			return err
		}
	case *EventResponse_MicroSegEvent:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MicroSegEvent); err != nil {
			return err
		}
	case *EventResponse_MigrationEvent:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MigrationEvent); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EventResponse.EventInfo has unexpected type %T", x)
	}
	return nil
}

func _EventResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EventResponse)
	switch tag {
	case 3: // event_info.lif_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LifGetResponse)
		err := b.DecodeMessage(msg)
		m.EventInfo = &EventResponse_LifEvent{msg}
		return true, err
	case 4: // event_info.port_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PortResponse)
		err := b.DecodeMessage(msg)
		m.EventInfo = &EventResponse_PortEvent{msg}
		return true, err
	case 5: // event_info.micro_seg_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MicroSegEvent)
		err := b.DecodeMessage(msg)
		m.EventInfo = &EventResponse_MicroSegEvent{msg}
		return true, err
	case 6: // event_info.migration_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MigrationResponse)
		err := b.DecodeMessage(msg)
		m.EventInfo = &EventResponse_MigrationEvent{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EventResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EventResponse)
	// event_info
	switch x := m.EventInfo.(type) {
	case *EventResponse_LifEvent:
		s := proto.Size(x.LifEvent)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventResponse_PortEvent:
		s := proto.Size(x.PortEvent)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventResponse_MicroSegEvent:
		s := proto.Size(x.MicroSegEvent)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventResponse_MigrationEvent:
		s := proto.Size(x.MigrationEvent)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*EventRequest)(nil), "halproto.EventRequest")
	proto.RegisterType((*EventResponse)(nil), "halproto.EventResponse")
	proto.RegisterEnum("halproto.EventId", EventId_name, EventId_value)
	proto.RegisterEnum("halproto.EventOp", EventOp_name, EventOp_value)
}

func init() { proto.RegisterFile("event.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x4f, 0x6f, 0xda, 0x30,
	0x18, 0xc6, 0x09, 0x2d, 0x2d, 0xbc, 0xfc, 0x9d, 0xcb, 0x56, 0x46, 0x77, 0xa8, 0x38, 0x75, 0x3d,
	0x64, 0x13, 0x1c, 0x76, 0xd9, 0x05, 0x4a, 0x4a, 0x23, 0x41, 0x82, 0x1c, 0xd8, 0x61, 0x17, 0x2b,
	0x2b, 0x0e, 0xb3, 0x04, 0xb1, 0x17, 0xbb, 0x93, 0xf8, 0x0c, 0xfb, 0xa4, 0xfb, 0x16, 0x53, 0x1c,
	0x27, 0xa5, 0x9a, 0xd4, 0x13, 0xaf, 0x9f, 0xf7, 0xfd, 0xf9, 0x7d, 0x78, 0x30, 0x50, 0xa7, 0xbf,
	0x69, 0xac, 0x6c, 0x91, 0x70, 0xc5, 0x51, 0x45, 0x1f, 0xfa, 0x75, 0x75, 0x10, 0x54, 0x66, 0x5a,
	0xbf, 0xcd, 0x62, 0x45, 0x93, 0x28, 0x7c, 0xa4, 0x46, 0x00, 0xc1, 0x13, 0x03, 0xf4, 0x1b, 0xf2,
	0x20, 0x15, 0xdd, 0x9b, 0x53, 0x8b, 0xc6, 0x1b, 0xc1, 0x59, 0x7e, 0xdd, 0x20, 0x81, 0x86, 0x93,
	0x5e, 0x88, 0xe9, 0xaf, 0x27, 0x2a, 0x15, 0xfa, 0x08, 0x55, 0xbd, 0x80, 0xb0, 0x4d, 0xcf, 0xba,
	0xb6, 0x6e, 0x5a, 0xc3, 0x96, 0x9d, 0xad, 0xd7, 0x63, 0xee, 0x06, 0x9f, 0xd3, 0xac, 0x40, 0x5f,
	0xa0, 0x9d, 0x8d, 0x72, 0x41, 0x93, 0x50, 0x31, 0x1e, 0xf7, 0xca, 0xff, 0x13, 0xbe, 0xc0, 0x2d,
	0x9a, 0x15, 0x66, 0x6a, 0xf0, 0xb7, 0x0c, 0x4d, 0xb3, 0x54, 0x0a, 0x1e, 0x4b, 0x8a, 0x3e, 0x01,
	0x84, 0x82, 0x11, 0xa9, 0x42, 0xf5, 0x24, 0xcd, 0xde, 0x8e, 0x9d, 0x7d, 0xc5, 0xb1, 0x60, 0x81,
	0xd6, 0x71, 0x2d, 0xcc, 0xcb, 0x17, 0x36, 0xcb, 0xaf, 0xdb, 0x1c, 0x41, 0x6d, 0xc7, 0x22, 0xa2,
	0x8f, 0xbd, 0x93, 0x6b, 0xeb, 0xa6, 0x3e, 0xec, 0xda, 0x2c, 0x56, 0x91, 0x3d, 0x67, 0xd1, 0x8c,
	0x16, 0x26, 0x1e, 0x4a, 0xb8, 0xba, 0x63, 0x91, 0xe6, 0xd1, 0x08, 0x74, 0x84, 0x86, 0x3a, 0xd5,
	0x14, 0xb2, 0x75, 0xaa, 0x4b, 0x9e, 0x1c, 0x33, 0xb5, 0x54, 0xcc, 0xa0, 0xaf, 0xd0, 0xde, 0xb3,
	0xc7, 0x84, 0x13, 0x49, 0xb7, 0x86, 0xac, 0x18, 0x52, 0x1e, 0xa4, 0xbd, 0x48, 0x7b, 0x01, 0xdd,
	0xea, 0xe1, 0x87, 0x12, 0x6e, 0xee, 0x8f, 0x05, 0x74, 0x9f, 0xd2, 0xdb, 0x2c, 0x22, 0x43, 0x9f,
	0x69, 0xfa, 0xca, 0x2e, 0x7e, 0xb3, 0x45, 0x3e, 0x70, 0x64, 0xa0, 0x55, 0x50, 0xfa, 0x9e, 0x49,
	0x03, 0xc0, 0x44, 0x13, 0x47, 0xfc, 0xf6, 0x8f, 0x05, 0xe7, 0x26, 0x12, 0xf4, 0x06, 0x9a, 0xce,
	0x37, 0xc7, 0x5b, 0x11, 0x77, 0x4a, 0x3c, 0xdf, 0x73, 0x3a, 0x25, 0x74, 0x09, 0x17, 0x85, 0xb4,
	0xf4, 0xf1, 0x8a, 0x04, 0xab, 0xf1, 0xca, 0xe9, 0x58, 0xe8, 0x0a, 0x2e, 0x8b, 0xc6, 0xdc, 0xbd,
	0x27, 0xe3, 0xe9, 0x94, 0xac, 0x97, 0xd3, 0xb4, 0x59, 0x46, 0x1f, 0xa0, 0x57, 0x34, 0x17, 0xee,
	0x1d, 0xf6, 0x49, 0xe0, 0xcc, 0x0c, 0x7a, 0x82, 0xde, 0xc3, 0xdb, 0xa2, 0xeb, 0x2c, 0xc9, 0xc2,
	0x9d, 0xe1, 0xf1, 0xca, 0xf5, 0xbd, 0xce, 0xe9, 0xad, 0x67, 0xcc, 0xf8, 0xe2, 0xd9, 0x8c, 0xbf,
	0xcc, 0xcd, 0xbc, 0x03, 0x54, 0x48, 0xc1, 0x7a, 0x12, 0xdc, 0x61, 0x77, 0x92, 0x7a, 0xe9, 0x41,
	0xb7, 0xd0, 0xd7, 0xde, 0x73, 0xa7, 0x3c, 0x74, 0xa0, 0x92, 0x47, 0x5f, 0xd7, 0xc5, 0x9c, 0x49,
	0x45, 0x63, 0x74, 0x71, 0xfc, 0x18, 0xcc, 0xd3, 0xee, 0x77, 0x5f, 0x8a, 0x59, 0x80, 0x83, 0xd2,
	0x67, 0x6b, 0x02, 0xdf, 0xab, 0x3f, 0xc3, 0x9d, 0xfe, 0x43, 0xfc, 0x38, 0xd3, 0x1f, 0xa3, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x21, 0x61, 0xce, 0x75, 0x03, 0x00, 0x00,
}
