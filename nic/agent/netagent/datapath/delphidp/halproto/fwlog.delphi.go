// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fwlog.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Type of action on the flow while the log was generated
type FlowLogEventType int32

const (
	FlowLogEventType_FLOW_LOG_EVENT_TYPE_CREATE FlowLogEventType = 0
	FlowLogEventType_FLOW_LOG_EVENT_TYPE_DELETE FlowLogEventType = 1
)

var FlowLogEventType_name = map[int32]string{
	0: "FLOW_LOG_EVENT_TYPE_CREATE",
	1: "FLOW_LOG_EVENT_TYPE_DELETE",
}
var FlowLogEventType_value = map[string]int32{
	"FLOW_LOG_EVENT_TYPE_CREATE": 0,
	"FLOW_LOG_EVENT_TYPE_DELETE": 1,
}

func (x FlowLogEventType) String() string {
	return proto.EnumName(FlowLogEventType_name, int32(x))
}
func (FlowLogEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

// On receiver side, the enums can be converted back to strings using the
// ##enum##_Name() APIs in the generated file for a better readability
type FWEvent struct {
	Flowaction      FlowLogEventType `protobuf:"varint,1,opt,name=flowaction,enum=fwlog.FlowLogEventType" json:"flowaction,omitempty"`
	SourceVrf       uint64           `protobuf:"varint,2,opt,name=source_vrf,json=sourceVrf" json:"source_vrf,omitempty"`
	DestVrf         uint64           `protobuf:"varint,3,opt,name=dest_vrf,json=destVrf" json:"dest_vrf,omitempty"`
	IpVer           int32            `protobuf:"varint,4,opt,name=ipVer" json:"ipVer,omitempty"`
	Sipv4           uint32           `protobuf:"varint,5,opt,name=sipv4" json:"sipv4,omitempty"`
	Dipv4           uint32           `protobuf:"varint,6,opt,name=dipv4" json:"dipv4,omitempty"`
	Sport           uint32           `protobuf:"varint,7,opt,name=sport" json:"sport,omitempty"`
	Dport           uint32           `protobuf:"varint,8,opt,name=dport" json:"dport,omitempty"`
	IpProt          IPProtocol       `protobuf:"varint,9,opt,name=ipProt,enum=types.IPProtocol" json:"ipProt,omitempty"`
	Direction       uint32           `protobuf:"varint,10,opt,name=direction" json:"direction,omitempty"`
	Sipv61          uint64           `protobuf:"varint,11,opt,name=sipv61" json:"sipv61,omitempty"`
	Sipv62          uint64           `protobuf:"varint,12,opt,name=sipv62" json:"sipv62,omitempty"`
	Dipv61          uint64           `protobuf:"varint,13,opt,name=dipv61" json:"dipv61,omitempty"`
	Dipv62          uint64           `protobuf:"varint,14,opt,name=dipv62" json:"dipv62,omitempty"`
	Fwaction        SecurityAction   `protobuf:"varint,15,opt,name=fwaction,enum=nwsec.SecurityAction" json:"fwaction,omitempty"`
	Alg             ALGName          `protobuf:"varint,16,opt,name=alg,enum=nwsec.ALGName" json:"alg,omitempty"`
	Snataction      NatAction        `protobuf:"varint,17,opt,name=snataction,enum=types.NatAction" json:"snataction,omitempty"`
	Dnataction      NatAction        `protobuf:"varint,18,opt,name=dnataction,enum=types.NatAction" json:"dnataction,omitempty"`
	Natsipv4        uint32           `protobuf:"varint,19,opt,name=natsipv4" json:"natsipv4,omitempty"`
	Natdipv4        uint32           `protobuf:"varint,20,opt,name=natdipv4" json:"natdipv4,omitempty"`
	Natsport        uint32           `protobuf:"varint,21,opt,name=natsport" json:"natsport,omitempty"`
	Natdport        uint32           `protobuf:"varint,22,opt,name=natdport" json:"natdport,omitempty"`
	Timestamp       int64            `protobuf:"varint,23,opt,name=timestamp" json:"timestamp,omitempty"`
	SessionId       uint64           `protobuf:"varint,24,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ParentSessionId uint64           `protobuf:"varint,25,opt,name=parent_session_id,json=parentSessionId" json:"parent_session_id,omitempty"`
	RuleId          uint64           `protobuf:"varint,26,opt,name=rule_id,json=ruleId" json:"rule_id,omitempty"`
	Icmptype        uint32           `protobuf:"varint,27,opt,name=icmptype" json:"icmptype,omitempty"`
	Icmpcode        uint32           `protobuf:"varint,28,opt,name=icmpcode" json:"icmpcode,omitempty"`
	Icmpid          uint32           `protobuf:"varint,29,opt,name=icmpid" json:"icmpid,omitempty"`
	IflowPackets    uint64           `protobuf:"varint,30,opt,name=iflow_packets,json=iflowPackets" json:"iflow_packets,omitempty"`
	RflowPackets    uint64           `protobuf:"varint,31,opt,name=rflow_packets,json=rflowPackets" json:"rflow_packets,omitempty"`
}

func (m *FWEvent) Reset()                    { *m = FWEvent{} }
func (m *FWEvent) String() string            { return proto.CompactTextString(m) }
func (*FWEvent) ProtoMessage()               {}
func (*FWEvent) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *FWEvent) GetFlowaction() FlowLogEventType {
	if m != nil {
		return m.Flowaction
	}
	return FlowLogEventType_FLOW_LOG_EVENT_TYPE_CREATE
}

func (m *FWEvent) GetSourceVrf() uint64 {
	if m != nil {
		return m.SourceVrf
	}
	return 0
}

func (m *FWEvent) GetDestVrf() uint64 {
	if m != nil {
		return m.DestVrf
	}
	return 0
}

func (m *FWEvent) GetIpVer() int32 {
	if m != nil {
		return m.IpVer
	}
	return 0
}

func (m *FWEvent) GetSipv4() uint32 {
	if m != nil {
		return m.Sipv4
	}
	return 0
}

func (m *FWEvent) GetDipv4() uint32 {
	if m != nil {
		return m.Dipv4
	}
	return 0
}

func (m *FWEvent) GetSport() uint32 {
	if m != nil {
		return m.Sport
	}
	return 0
}

func (m *FWEvent) GetDport() uint32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

func (m *FWEvent) GetIpProt() IPProtocol {
	if m != nil {
		return m.IpProt
	}
	return IPProtocol_IPPROTO_NONE
}

func (m *FWEvent) GetDirection() uint32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *FWEvent) GetSipv61() uint64 {
	if m != nil {
		return m.Sipv61
	}
	return 0
}

func (m *FWEvent) GetSipv62() uint64 {
	if m != nil {
		return m.Sipv62
	}
	return 0
}

func (m *FWEvent) GetDipv61() uint64 {
	if m != nil {
		return m.Dipv61
	}
	return 0
}

func (m *FWEvent) GetDipv62() uint64 {
	if m != nil {
		return m.Dipv62
	}
	return 0
}

func (m *FWEvent) GetFwaction() SecurityAction {
	if m != nil {
		return m.Fwaction
	}
	return SecurityAction_SECURITY_RULE_ACTION_NONE
}

func (m *FWEvent) GetAlg() ALGName {
	if m != nil {
		return m.Alg
	}
	return ALGName_APP_SVC_NONE
}

func (m *FWEvent) GetSnataction() NatAction {
	if m != nil {
		return m.Snataction
	}
	return NatAction_NAT_TYPE_NONE
}

func (m *FWEvent) GetDnataction() NatAction {
	if m != nil {
		return m.Dnataction
	}
	return NatAction_NAT_TYPE_NONE
}

func (m *FWEvent) GetNatsipv4() uint32 {
	if m != nil {
		return m.Natsipv4
	}
	return 0
}

func (m *FWEvent) GetNatdipv4() uint32 {
	if m != nil {
		return m.Natdipv4
	}
	return 0
}

func (m *FWEvent) GetNatsport() uint32 {
	if m != nil {
		return m.Natsport
	}
	return 0
}

func (m *FWEvent) GetNatdport() uint32 {
	if m != nil {
		return m.Natdport
	}
	return 0
}

func (m *FWEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *FWEvent) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *FWEvent) GetParentSessionId() uint64 {
	if m != nil {
		return m.ParentSessionId
	}
	return 0
}

func (m *FWEvent) GetRuleId() uint64 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *FWEvent) GetIcmptype() uint32 {
	if m != nil {
		return m.Icmptype
	}
	return 0
}

func (m *FWEvent) GetIcmpcode() uint32 {
	if m != nil {
		return m.Icmpcode
	}
	return 0
}

func (m *FWEvent) GetIcmpid() uint32 {
	if m != nil {
		return m.Icmpid
	}
	return 0
}

func (m *FWEvent) GetIflowPackets() uint64 {
	if m != nil {
		return m.IflowPackets
	}
	return 0
}

func (m *FWEvent) GetRflowPackets() uint64 {
	if m != nil {
		return m.RflowPackets
	}
	return 0
}

func init() {
	proto.RegisterType((*FWEvent)(nil), "halproto.FWEvent")
	proto.RegisterEnum("halproto.FlowLogEventType", FlowLogEventType_name, FlowLogEventType_value)
}

func init() { proto.RegisterFile("fwlog.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0x5d, 0x4f, 0xdb, 0x3e,
	0x14, 0xc6, 0xff, 0xf9, 0x43, 0xdf, 0x4e, 0x79, 0x29, 0x1e, 0x2f, 0xa6, 0x03, 0x16, 0x6d, 0x37,
	0x1d, 0x17, 0xd5, 0xe8, 0xa6, 0xed, 0x9a, 0x6d, 0x01, 0x21, 0x55, 0x50, 0x85, 0x0a, 0xb4, 0xdd,
	0x44, 0x59, 0xec, 0x32, 0x6b, 0x69, 0x1c, 0x39, 0x86, 0xaa, 0xdf, 0x74, 0x1f, 0x67, 0xf2, 0xb1,
	0x9b, 0x64, 0x93, 0xb8, 0x6a, 0x9f, 0xe7, 0xf9, 0x1d, 0xf7, 0xe4, 0x9c, 0xb8, 0xd0, 0x9d, 0x2d,
	0x52, 0xf9, 0x30, 0xcc, 0x95, 0xd4, 0x92, 0x34, 0x50, 0xf4, 0xbb, 0xd9, 0xa2, 0xe0, 0x89, 0xf5,
	0xfa, 0x5d, 0xbd, 0xcc, 0x79, 0x61, 0xc5, 0xeb, 0xdf, 0x2d, 0x68, 0x5d, 0xdc, 0x07, 0x4f, 0x3c,
	0xd3, 0xe4, 0x13, 0xc0, 0x2c, 0x95, 0x8b, 0x38, 0xd1, 0x42, 0x66, 0xd4, 0xf3, 0xbd, 0xc1, 0xd6,
	0xe8, 0x60, 0x68, 0x8f, 0xbb, 0x48, 0xe5, 0x62, 0x2c, 0x1f, 0x10, 0x9c, 0x2e, 0x73, 0x1e, 0xd6,
	0x50, 0x72, 0x0c, 0x50, 0xc8, 0x47, 0x95, 0xf0, 0xe8, 0x49, 0xcd, 0xe8, 0xff, 0xbe, 0x37, 0x58,
	0x0f, 0x3b, 0xd6, 0xb9, 0x53, 0x33, 0x72, 0x08, 0x6d, 0xc6, 0x0b, 0x8d, 0xe1, 0x1a, 0x86, 0x2d,
	0xa3, 0x4d, 0xb4, 0x0b, 0x0d, 0x91, 0xdf, 0x71, 0x45, 0xd7, 0x7d, 0x6f, 0xd0, 0x08, 0xad, 0x30,
	0x6e, 0x21, 0xf2, 0xa7, 0x0f, 0xb4, 0xe1, 0x7b, 0x83, 0xcd, 0xd0, 0x0a, 0xe3, 0x32, 0x74, 0x9b,
	0xd6, 0x65, 0x2b, 0xb7, 0xc8, 0xa5, 0xd2, 0xb4, 0xe5, 0x58, 0x23, 0x90, 0x45, 0xb7, 0xed, 0x58,
	0x74, 0xdf, 0x42, 0x53, 0xe4, 0x13, 0x25, 0x35, 0xed, 0xe0, 0xc3, 0xed, 0x0c, 0xed, 0x28, 0xae,
	0x26, 0xc6, 0x94, 0x89, 0x4c, 0x43, 0x07, 0x90, 0x23, 0xe8, 0x30, 0xa1, 0xb8, 0x1d, 0x05, 0xe0,
	0x21, 0x95, 0x41, 0xf6, 0xa1, 0x69, 0x7a, 0xfa, 0x78, 0x46, 0xbb, 0xf8, 0x3c, 0x4e, 0x95, 0xfe,
	0x88, 0x6e, 0xd4, 0xfc, 0x91, 0xf1, 0x99, 0xe5, 0x37, 0xad, 0xcf, 0x4a, 0x9e, 0x59, 0x7e, 0xab,
	0xe6, 0x8f, 0xc8, 0x19, 0xb4, 0x67, 0xab, 0x3d, 0x6c, 0x63, 0xab, 0x7b, 0x43, 0xbb, 0xc2, 0x5b,
	0x9e, 0x3c, 0x2a, 0xa1, 0x97, 0xe7, 0x18, 0x86, 0x25, 0x46, 0x7c, 0x58, 0x8b, 0xd3, 0x07, 0xda,
	0x43, 0x7a, 0xcb, 0xd1, 0xe7, 0xe3, 0xcb, 0xeb, 0x78, 0xce, 0x43, 0x13, 0x91, 0x77, 0x00, 0x45,
	0x16, 0x6b, 0x77, 0xec, 0x0e, 0x82, 0x3d, 0x37, 0x81, 0xeb, 0x58, 0xbb, 0x13, 0x6b, 0x8c, 0xa9,
	0x60, 0x55, 0x05, 0x79, 0xae, 0xa2, 0x62, 0x48, 0x1f, 0xda, 0x59, 0xac, 0xed, 0xf2, 0x5e, 0xe0,
	0xd4, 0x4a, 0xed, 0x32, 0xbb, 0xc2, 0xdd, 0x32, 0x63, 0xb5, 0xcc, 0x2e, 0x72, 0xaf, 0xaa, 0xc3,
	0xad, 0xb9, 0x3a, 0xcc, 0xf6, 0xab, 0x3a, 0xcc, 0x8e, 0xa0, 0xa3, 0xc5, 0x9c, 0x17, 0x3a, 0x9e,
	0xe7, 0xf4, 0xc0, 0xf7, 0x06, 0x6b, 0x61, 0x65, 0xe0, 0x7b, 0xc9, 0x8b, 0x42, 0xc8, 0x2c, 0x12,
	0x8c, 0x52, 0xf7, 0x5e, 0x5a, 0xe7, 0x8a, 0x91, 0x53, 0xd8, 0xc9, 0x63, 0xc5, 0x33, 0x1d, 0xd5,
	0xa8, 0x43, 0xa4, 0xb6, 0x6d, 0x70, 0x5b, 0xb2, 0x07, 0xd0, 0x52, 0x8f, 0x29, 0x37, 0x44, 0xdf,
	0xae, 0xca, 0xc8, 0x2b, 0x66, 0xba, 0x13, 0xc9, 0x3c, 0x37, 0x43, 0xa1, 0x2f, 0x6d, 0x77, 0x2b,
	0xbd, 0xca, 0x12, 0xc9, 0x38, 0x3d, 0xaa, 0x32, 0xa3, 0xcd, 0xea, 0xcd, 0x77, 0xc1, 0xe8, 0x31,
	0x26, 0x4e, 0x91, 0x37, 0xb0, 0x29, 0xcc, 0xd5, 0x8a, 0xf2, 0x38, 0xf9, 0xc5, 0x75, 0x41, 0x4f,
	0xf0, 0xe7, 0x36, 0xd0, 0x9c, 0x58, 0xcf, 0x40, 0xea, 0x2f, 0xe8, 0x95, 0x85, 0x54, 0x0d, 0x3a,
	0x0d, 0xa1, 0xf7, 0xef, 0xad, 0x25, 0x27, 0xd0, 0xbf, 0x18, 0xdf, 0xdc, 0x47, 0xe3, 0x9b, 0xcb,
	0x28, 0xb8, 0x0b, 0xae, 0xa7, 0xd1, 0xf4, 0xdb, 0x24, 0x88, 0xbe, 0x84, 0xc1, 0xf9, 0x34, 0xe8,
	0xfd, 0xf7, 0x5c, 0xfe, 0x35, 0x18, 0x07, 0xd3, 0xa0, 0xe7, 0x7d, 0x86, 0xef, 0xed, 0x9f, 0x71,
	0x8a, 0x7f, 0x1d, 0x3f, 0x9a, 0xf8, 0xf1, 0xfe, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0xe3,
	0x96, 0x19, 0x71, 0x04, 0x00, 0x00,
}
