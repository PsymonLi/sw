// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SoftwarePhvPipeline: pipeline to inject the software phv
type SoftwarePhvPipeline int32

const (
	SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA   SoftwarePhvPipeline = 0
	SoftwarePhvPipeline_SOFTWARE_PHV_TXDMA   SoftwarePhvPipeline = 1
	SoftwarePhvPipeline_SOFTWARE_PHV_INGRESS SoftwarePhvPipeline = 2
	SoftwarePhvPipeline_SOFTWARE_PHV_EGRESS  SoftwarePhvPipeline = 3
)

var SoftwarePhvPipeline_name = map[int32]string{
	0: "SOFTWARE_PHV_RXDMA",
	1: "SOFTWARE_PHV_TXDMA",
	2: "SOFTWARE_PHV_INGRESS",
	3: "SOFTWARE_PHV_EGRESS",
}
var SoftwarePhvPipeline_value = map[string]int32{
	"SOFTWARE_PHV_RXDMA":   0,
	"SOFTWARE_PHV_TXDMA":   1,
	"SOFTWARE_PHV_INGRESS": 2,
	"SOFTWARE_PHV_EGRESS":  3,
}

func (x SoftwarePhvPipeline) String() string {
	return proto.EnumName(SoftwarePhvPipeline_name, int32(x))
}
func (SoftwarePhvPipeline) EnumDescriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

// Types of Crypto Hash algos
type CryptoApiHashType int32

const (
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_NONE        CryptoApiHashType = 0
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_MD5         CryptoApiHashType = 1
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA1        CryptoApiHashType = 2
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA224      CryptoApiHashType = 3
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA256      CryptoApiHashType = 4
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA384      CryptoApiHashType = 5
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA512      CryptoApiHashType = 6
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA512_224  CryptoApiHashType = 7
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA512_256  CryptoApiHashType = 8
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_HMAC_MD5    CryptoApiHashType = 9
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_HMAC_SHA1   CryptoApiHashType = 10
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_HMAC_SHA224 CryptoApiHashType = 11
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_HMAC_SHA256 CryptoApiHashType = 12
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_HMAC_SHA384 CryptoApiHashType = 13
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_HMAC_SHA512 CryptoApiHashType = 14
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA3_224    CryptoApiHashType = 15
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA3_256    CryptoApiHashType = 16
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA3_384    CryptoApiHashType = 17
	CryptoApiHashType_CRYPTOAPI_HASHTYPE_SHA3_512    CryptoApiHashType = 18
)

var CryptoApiHashType_name = map[int32]string{
	0:  "CRYPTOAPI_HASHTYPE_NONE",
	1:  "CRYPTOAPI_HASHTYPE_MD5",
	2:  "CRYPTOAPI_HASHTYPE_SHA1",
	3:  "CRYPTOAPI_HASHTYPE_SHA224",
	4:  "CRYPTOAPI_HASHTYPE_SHA256",
	5:  "CRYPTOAPI_HASHTYPE_SHA384",
	6:  "CRYPTOAPI_HASHTYPE_SHA512",
	7:  "CRYPTOAPI_HASHTYPE_SHA512_224",
	8:  "CRYPTOAPI_HASHTYPE_SHA512_256",
	9:  "CRYPTOAPI_HASHTYPE_HMAC_MD5",
	10: "CRYPTOAPI_HASHTYPE_HMAC_SHA1",
	11: "CRYPTOAPI_HASHTYPE_HMAC_SHA224",
	12: "CRYPTOAPI_HASHTYPE_HMAC_SHA256",
	13: "CRYPTOAPI_HASHTYPE_HMAC_SHA384",
	14: "CRYPTOAPI_HASHTYPE_HMAC_SHA512",
	15: "CRYPTOAPI_HASHTYPE_SHA3_224",
	16: "CRYPTOAPI_HASHTYPE_SHA3_256",
	17: "CRYPTOAPI_HASHTYPE_SHA3_384",
	18: "CRYPTOAPI_HASHTYPE_SHA3_512",
}
var CryptoApiHashType_value = map[string]int32{
	"CRYPTOAPI_HASHTYPE_NONE":        0,
	"CRYPTOAPI_HASHTYPE_MD5":         1,
	"CRYPTOAPI_HASHTYPE_SHA1":        2,
	"CRYPTOAPI_HASHTYPE_SHA224":      3,
	"CRYPTOAPI_HASHTYPE_SHA256":      4,
	"CRYPTOAPI_HASHTYPE_SHA384":      5,
	"CRYPTOAPI_HASHTYPE_SHA512":      6,
	"CRYPTOAPI_HASHTYPE_SHA512_224":  7,
	"CRYPTOAPI_HASHTYPE_SHA512_256":  8,
	"CRYPTOAPI_HASHTYPE_HMAC_MD5":    9,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA1":   10,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA224": 11,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA256": 12,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA384": 13,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA512": 14,
	"CRYPTOAPI_HASHTYPE_SHA3_224":    15,
	"CRYPTOAPI_HASHTYPE_SHA3_256":    16,
	"CRYPTOAPI_HASHTYPE_SHA3_384":    17,
	"CRYPTOAPI_HASHTYPE_SHA3_512":    18,
}

func (x CryptoApiHashType) String() string {
	return proto.EnumName(CryptoApiHashType_name, int32(x))
}
func (CryptoApiHashType) EnumDescriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

type CryptoApiType int32

const (
	CryptoApiType_ASYMAPI_ECC_POINT_MUL_FP    CryptoApiType = 0
	CryptoApiType_ASYMAPI_ECDSA_SIG_GEN_FP    CryptoApiType = 1
	CryptoApiType_ASYMAPI_ECDSA_SIG_VERIFY_FP CryptoApiType = 2
	CryptoApiType_ASYMAPI_RSA_ENCRYPT         CryptoApiType = 3
	CryptoApiType_ASYMAPI_RSA_DECRYPT         CryptoApiType = 4
	CryptoApiType_ASYMAPI_RSA_CRT_DECRYPT     CryptoApiType = 5
	CryptoApiType_SYMMAPI_HASH_GENERATE       CryptoApiType = 6
	CryptoApiType_SYMMAPI_HASH_VERIFY         CryptoApiType = 7
	CryptoApiType_ASYMAPI_RSA_SIG_GEN         CryptoApiType = 8
	CryptoApiType_ASYMAPI_RSA_SIG_VERIFY      CryptoApiType = 9
	CryptoApiType_ASYMAPI_SETUP_PRIV_KEY      CryptoApiType = 10
	CryptoApiType_ASYMAPI_SETUP_CERT          CryptoApiType = 11
	CryptoApiType_ASYMAPI_SETUP_PRIV_KEY_EX   CryptoApiType = 13
	CryptoApiType_ASYMAPI_FIPS_RSA_SIG_GEN    CryptoApiType = 14
	CryptoApiType_ASYMAPI_FIPS_RSA_SIG_VERIFY CryptoApiType = 15
)

var CryptoApiType_name = map[int32]string{
	0:  "ASYMAPI_ECC_POINT_MUL_FP",
	1:  "ASYMAPI_ECDSA_SIG_GEN_FP",
	2:  "ASYMAPI_ECDSA_SIG_VERIFY_FP",
	3:  "ASYMAPI_RSA_ENCRYPT",
	4:  "ASYMAPI_RSA_DECRYPT",
	5:  "ASYMAPI_RSA_CRT_DECRYPT",
	6:  "SYMMAPI_HASH_GENERATE",
	7:  "SYMMAPI_HASH_VERIFY",
	8:  "ASYMAPI_RSA_SIG_GEN",
	9:  "ASYMAPI_RSA_SIG_VERIFY",
	10: "ASYMAPI_SETUP_PRIV_KEY",
	11: "ASYMAPI_SETUP_CERT",
	13: "ASYMAPI_SETUP_PRIV_KEY_EX",
	14: "ASYMAPI_FIPS_RSA_SIG_GEN",
	15: "ASYMAPI_FIPS_RSA_SIG_VERIFY",
}
var CryptoApiType_value = map[string]int32{
	"ASYMAPI_ECC_POINT_MUL_FP":    0,
	"ASYMAPI_ECDSA_SIG_GEN_FP":    1,
	"ASYMAPI_ECDSA_SIG_VERIFY_FP": 2,
	"ASYMAPI_RSA_ENCRYPT":         3,
	"ASYMAPI_RSA_DECRYPT":         4,
	"ASYMAPI_RSA_CRT_DECRYPT":     5,
	"SYMMAPI_HASH_GENERATE":       6,
	"SYMMAPI_HASH_VERIFY":         7,
	"ASYMAPI_RSA_SIG_GEN":         8,
	"ASYMAPI_RSA_SIG_VERIFY":      9,
	"ASYMAPI_SETUP_PRIV_KEY":      10,
	"ASYMAPI_SETUP_CERT":          11,
	"ASYMAPI_SETUP_PRIV_KEY_EX":   13,
	"ASYMAPI_FIPS_RSA_SIG_GEN":    14,
	"ASYMAPI_FIPS_RSA_SIG_VERIFY": 15,
}

func (x CryptoApiType) String() string {
	return proto.EnumName(CryptoApiType_name, int32(x))
}
func (CryptoApiType) EnumDescriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

type UpdateType int32

const (
	UpdateType_ADD_UPDATE UpdateType = 0
	UpdateType_DELETE     UpdateType = 1
)

var UpdateType_name = map[int32]string{
	0: "ADD_UPDATE",
	1: "DELETE",
}
var UpdateType_value = map[string]int32{
	"ADD_UPDATE": 0,
	"DELETE":     1,
}

func (x UpdateType) String() string {
	return proto.EnumName(UpdateType_name, int32(x))
}
func (UpdateType) EnumDescriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

type ProgramAddressReq struct {
	// Handle. E.g.: 'iris', 'p4plus'.
	Handle string `protobuf:"bytes,1,opt,name=handle" json:"handle,omitempty"`
	// Program name to resolve
	ProgName string `protobuf:"bytes,2,opt,name=prog_name,json=progName" json:"prog_name,omitempty"`
	// If resolve_label is false, returns the base address of the program.
	// Otherwise returns the PC offset (14 bits) of the program.
	ResolveLabel bool `protobuf:"varint,3,opt,name=resolve_label,json=resolveLabel" json:"resolve_label,omitempty"`
	// Label name to resolve
	Label string `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
}

func (m *ProgramAddressReq) Reset()                    { *m = ProgramAddressReq{} }
func (m *ProgramAddressReq) String() string            { return proto.CompactTextString(m) }
func (*ProgramAddressReq) ProtoMessage()               {}
func (*ProgramAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *ProgramAddressReq) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

func (m *ProgramAddressReq) GetProgName() string {
	if m != nil {
		return m.ProgName
	}
	return ""
}

func (m *ProgramAddressReq) GetResolveLabel() bool {
	if m != nil {
		return m.ResolveLabel
	}
	return false
}

func (m *ProgramAddressReq) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ProgramAddressResp struct {
	Addr int64 `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
}

func (m *ProgramAddressResp) Reset()                    { *m = ProgramAddressResp{} }
func (m *ProgramAddressResp) String() string            { return proto.CompactTextString(m) }
func (*ProgramAddressResp) ProtoMessage()               {}
func (*ProgramAddressResp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *ProgramAddressResp) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

type GetProgramAddressRequestMsg struct {
	Request []*ProgramAddressReq `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *GetProgramAddressRequestMsg) Reset()                    { *m = GetProgramAddressRequestMsg{} }
func (m *GetProgramAddressRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*GetProgramAddressRequestMsg) ProtoMessage()               {}
func (*GetProgramAddressRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

func (m *GetProgramAddressRequestMsg) GetRequest() []*ProgramAddressReq {
	if m != nil {
		return m.Request
	}
	return nil
}

type ProgramAddressResponseMsg struct {
	Response []*ProgramAddressResp `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProgramAddressResponseMsg) Reset()                    { *m = ProgramAddressResponseMsg{} }
func (m *ProgramAddressResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProgramAddressResponseMsg) ProtoMessage()               {}
func (*ProgramAddressResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

func (m *ProgramAddressResponseMsg) GetResponse() []*ProgramAddressResp {
	if m != nil {
		return m.Response
	}
	return nil
}

type HbmAddressReq struct {
	// handle that specifies region in config (json) file
	Handle string `protobuf:"bytes,1,opt,name=handle" json:"handle,omitempty"`
}

func (m *HbmAddressReq) Reset()                    { *m = HbmAddressReq{} }
func (m *HbmAddressReq) String() string            { return proto.CompactTextString(m) }
func (*HbmAddressReq) ProtoMessage()               {}
func (*HbmAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{4} }

func (m *HbmAddressReq) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

type HbmAddressResp struct {
	Addr int64  `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
	Size uint32 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
}

func (m *HbmAddressResp) Reset()                    { *m = HbmAddressResp{} }
func (m *HbmAddressResp) String() string            { return proto.CompactTextString(m) }
func (*HbmAddressResp) ProtoMessage()               {}
func (*HbmAddressResp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{5} }

func (m *HbmAddressResp) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *HbmAddressResp) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type AllocHbmAddressRequestMsg struct {
	Request []*HbmAddressReq `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *AllocHbmAddressRequestMsg) Reset()                    { *m = AllocHbmAddressRequestMsg{} }
func (m *AllocHbmAddressRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*AllocHbmAddressRequestMsg) ProtoMessage()               {}
func (*AllocHbmAddressRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{6} }

func (m *AllocHbmAddressRequestMsg) GetRequest() []*HbmAddressReq {
	if m != nil {
		return m.Request
	}
	return nil
}

type AllocHbmAddressResponseMsg struct {
	Response []*HbmAddressResp `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *AllocHbmAddressResponseMsg) Reset()                    { *m = AllocHbmAddressResponseMsg{} }
func (m *AllocHbmAddressResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*AllocHbmAddressResponseMsg) ProtoMessage()               {}
func (*AllocHbmAddressResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{7} }

func (m *AllocHbmAddressResponseMsg) GetResponse() []*HbmAddressResp {
	if m != nil {
		return m.Response
	}
	return nil
}

type LifBdfReq struct {
	Lif uint32 `protobuf:"varint,1,opt,name=lif" json:"lif,omitempty"`
	Bdf uint32 `protobuf:"varint,2,opt,name=bdf" json:"bdf,omitempty"`
}

func (m *LifBdfReq) Reset()                    { *m = LifBdfReq{} }
func (m *LifBdfReq) String() string            { return proto.CompactTextString(m) }
func (*LifBdfReq) ProtoMessage()               {}
func (*LifBdfReq) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{8} }

func (m *LifBdfReq) GetLif() uint32 {
	if m != nil {
		return m.Lif
	}
	return 0
}

func (m *LifBdfReq) GetBdf() uint32 {
	if m != nil {
		return m.Bdf
	}
	return 0
}

type LifBdfResp struct {
	Lif    uint32 `protobuf:"varint,1,opt,name=lif" json:"lif,omitempty"`
	Bdf    uint32 `protobuf:"varint,2,opt,name=bdf" json:"bdf,omitempty"`
	Status int32  `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (m *LifBdfResp) Reset()                    { *m = LifBdfResp{} }
func (m *LifBdfResp) String() string            { return proto.CompactTextString(m) }
func (*LifBdfResp) ProtoMessage()               {}
func (*LifBdfResp) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{9} }

func (m *LifBdfResp) GetLif() uint32 {
	if m != nil {
		return m.Lif
	}
	return 0
}

func (m *LifBdfResp) GetBdf() uint32 {
	if m != nil {
		return m.Bdf
	}
	return 0
}

func (m *LifBdfResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type ConfigureLifBdfRequestMsg struct {
	Request []*LifBdfReq `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ConfigureLifBdfRequestMsg) Reset()                    { *m = ConfigureLifBdfRequestMsg{} }
func (m *ConfigureLifBdfRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ConfigureLifBdfRequestMsg) ProtoMessage()               {}
func (*ConfigureLifBdfRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{10} }

func (m *ConfigureLifBdfRequestMsg) GetRequest() []*LifBdfReq {
	if m != nil {
		return m.Request
	}
	return nil
}

type ConfigureLifBdfResponseMsg struct {
	Response []*LifBdfResp `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ConfigureLifBdfResponseMsg) Reset()                    { *m = ConfigureLifBdfResponseMsg{} }
func (m *ConfigureLifBdfResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ConfigureLifBdfResponseMsg) ProtoMessage()               {}
func (*ConfigureLifBdfResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{11} }

func (m *ConfigureLifBdfResponseMsg) GetResponse() []*LifBdfResp {
	if m != nil {
		return m.Response
	}
	return nil
}

// SoftwarePhvStatus represents the current status of the PHVs
type SoftwarePhvStatus struct {
	Pipeline    SoftwarePhvPipeline `protobuf:"varint,1,opt,name=pipeline,enum=internal.SoftwarePhvPipeline" json:"pipeline,omitempty"`
	Enabled     bool                `protobuf:"varint,2,opt,name=enabled" json:"enabled,omitempty"`
	Done        bool                `protobuf:"varint,3,opt,name=done" json:"done,omitempty"`
	CurrentCntr uint32              `protobuf:"varint,4,opt,name=current_cntr,json=currentCntr" json:"current_cntr,omitempty"`
	InjectCntr  uint32              `protobuf:"varint,5,opt,name=inject_cntr,json=injectCntr" json:"inject_cntr,omitempty"`
}

func (m *SoftwarePhvStatus) Reset()                    { *m = SoftwarePhvStatus{} }
func (m *SoftwarePhvStatus) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvStatus) ProtoMessage()               {}
func (*SoftwarePhvStatus) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{12} }

func (m *SoftwarePhvStatus) GetPipeline() SoftwarePhvPipeline {
	if m != nil {
		return m.Pipeline
	}
	return SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA
}

func (m *SoftwarePhvStatus) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *SoftwarePhvStatus) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *SoftwarePhvStatus) GetCurrentCntr() uint32 {
	if m != nil {
		return m.CurrentCntr
	}
	return 0
}

func (m *SoftwarePhvStatus) GetInjectCntr() uint32 {
	if m != nil {
		return m.InjectCntr
	}
	return 0
}

// SoftwarePhvResponse is generic response
type SoftwarePhvResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *SoftwarePhvResponse) Reset()                    { *m = SoftwarePhvResponse{} }
func (m *SoftwarePhvResponse) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvResponse) ProtoMessage()               {}
func (*SoftwarePhvResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{13} }

func (m *SoftwarePhvResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// SoftwarePhvResponseMsg is batched response to SoftwarePhvRequestMsg
type SoftwarePhvResponseMsg struct {
	Response []*SoftwarePhvResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SoftwarePhvResponseMsg) Reset()                    { *m = SoftwarePhvResponseMsg{} }
func (m *SoftwarePhvResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvResponseMsg) ProtoMessage()               {}
func (*SoftwarePhvResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{14} }

func (m *SoftwarePhvResponseMsg) GetResponse() []*SoftwarePhvResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SoftwarePhvGetRequest is used to get information about a PHV
type SoftwarePhvGetRequest struct {
	Pipeline SoftwarePhvPipeline `protobuf:"varint,1,opt,name=pipeline,enum=internal.SoftwarePhvPipeline" json:"pipeline,omitempty"`
}

func (m *SoftwarePhvGetRequest) Reset()                    { *m = SoftwarePhvGetRequest{} }
func (m *SoftwarePhvGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvGetRequest) ProtoMessage()               {}
func (*SoftwarePhvGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{15} }

func (m *SoftwarePhvGetRequest) GetPipeline() SoftwarePhvPipeline {
	if m != nil {
		return m.Pipeline
	}
	return SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA
}

// SoftwarePhvGetRequestMsg is batched GET request for PHV
type SoftwarePhvGetRequestMsg struct {
	Request []*SoftwarePhvGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SoftwarePhvGetRequestMsg) Reset()                    { *m = SoftwarePhvGetRequestMsg{} }
func (m *SoftwarePhvGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvGetRequestMsg) ProtoMessage()               {}
func (*SoftwarePhvGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{16} }

func (m *SoftwarePhvGetRequestMsg) GetRequest() []*SoftwarePhvGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SoftwarePhvGetResponse captures all the information about a Sw PHV
// only if api_status indicates success, other fields are valid
type SoftwarePhvGetResponse struct {
	ApiStatus ApiStatus          `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *SoftwarePhvStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *SoftwarePhvGetResponse) Reset()                    { *m = SoftwarePhvGetResponse{} }
func (m *SoftwarePhvGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvGetResponse) ProtoMessage()               {}
func (*SoftwarePhvGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{17} }

func (m *SoftwarePhvGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SoftwarePhvGetResponse) GetStatus() *SoftwarePhvStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// SoftwarePhvGetResponseMsg is the batched response to SoftwarePhvGetRequestMsg
type SoftwarePhvGetResponseMsg struct {
	Response []*SoftwarePhvGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SoftwarePhvGetResponseMsg) Reset()                    { *m = SoftwarePhvGetResponseMsg{} }
func (m *SoftwarePhvGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvGetResponseMsg) ProtoMessage()               {}
func (*SoftwarePhvGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{18} }

func (m *SoftwarePhvGetResponseMsg) GetResponse() []*SoftwarePhvGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SoftwarePhvInject is the packet inject spec
type SoftwarePhvInject struct {
	Pipeline SoftwarePhvPipeline `protobuf:"varint,1,opt,name=pipeline,enum=internal.SoftwarePhvPipeline" json:"pipeline,omitempty"`
}

func (m *SoftwarePhvInject) Reset()                    { *m = SoftwarePhvInject{} }
func (m *SoftwarePhvInject) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvInject) ProtoMessage()               {}
func (*SoftwarePhvInject) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{19} }

func (m *SoftwarePhvInject) GetPipeline() SoftwarePhvPipeline {
	if m != nil {
		return m.Pipeline
	}
	return SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA
}

// SoftwarePhvInjectMsg is the inject message
type SoftwarePhvInjectMsg struct {
	Request []*SoftwarePhvInject `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SoftwarePhvInjectMsg) Reset()                    { *m = SoftwarePhvInjectMsg{} }
func (m *SoftwarePhvInjectMsg) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvInjectMsg) ProtoMessage()               {}
func (*SoftwarePhvInjectMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{20} }

func (m *SoftwarePhvInjectMsg) GetRequest() []*SoftwarePhvInject {
	if m != nil {
		return m.Request
	}
	return nil
}

type LogFlowRequestMsg struct {
	Request []*FWEvent `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LogFlowRequestMsg) Reset()                    { *m = LogFlowRequestMsg{} }
func (m *LogFlowRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LogFlowRequestMsg) ProtoMessage()               {}
func (*LogFlowRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{21} }

func (m *LogFlowRequestMsg) GetRequest() []*FWEvent {
	if m != nil {
		return m.Request
	}
	return nil
}

type LogFlowResponseMsg struct {
	Response []*LogFlowResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LogFlowResponseMsg) Reset()                    { *m = LogFlowResponseMsg{} }
func (m *LogFlowResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LogFlowResponseMsg) ProtoMessage()               {}
func (*LogFlowResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{22} }

func (m *LogFlowResponseMsg) GetResponse() []*LogFlowResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type LogFlowResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *LogFlowResponse) Reset()                    { *m = LogFlowResponse{} }
func (m *LogFlowResponse) String() string            { return proto.CompactTextString(m) }
func (*LogFlowResponse) ProtoMessage()               {}
func (*LogFlowResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{23} }

func (m *LogFlowResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// Codegen forms the Request and Response messages using the package name "internal"
// This is to calm the autogenerator
type EmptyRequest struct {
	Request []*Empty `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *EmptyRequest) Reset()                    { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string            { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()               {}
func (*EmptyRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{24} }

func (m *EmptyRequest) GetRequest() []*Empty {
	if m != nil {
		return m.Request
	}
	return nil
}

type EmptyResponse struct {
	Response []*Empty `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{25} }

func (m *EmptyResponse) GetResponse() []*Empty {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecCbKeyHandle is used to operate on a ipsec_cb either by its key or handle
type IpsecCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*IpsecCbKeyHandle_IpseccbId
	//	*IpsecCbKeyHandle_IpseccbHandle
	KeyOrHandle isIpsecCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *IpsecCbKeyHandle) Reset()                    { *m = IpsecCbKeyHandle{} }
func (m *IpsecCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbKeyHandle) ProtoMessage()               {}
func (*IpsecCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{26} }

type isIpsecCbKeyHandle_KeyOrHandle interface{ isIpsecCbKeyHandle_KeyOrHandle() }

type IpsecCbKeyHandle_IpseccbId struct {
	IpseccbId uint32 `protobuf:"varint,1,opt,name=ipseccb_id,json=ipseccbId,oneof"`
}
type IpsecCbKeyHandle_IpseccbHandle struct {
	IpseccbHandle uint64 `protobuf:"fixed64,2,opt,name=ipseccb_handle,json=ipseccbHandle,oneof"`
}

func (*IpsecCbKeyHandle_IpseccbId) isIpsecCbKeyHandle_KeyOrHandle()     {}
func (*IpsecCbKeyHandle_IpseccbHandle) isIpsecCbKeyHandle_KeyOrHandle() {}

func (m *IpsecCbKeyHandle) GetKeyOrHandle() isIpsecCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecCbKeyHandle) GetIpseccbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*IpsecCbKeyHandle_IpseccbId); ok {
		return x.IpseccbId
	}
	return 0
}

func (m *IpsecCbKeyHandle) GetIpseccbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*IpsecCbKeyHandle_IpseccbHandle); ok {
		return x.IpseccbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IpsecCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IpsecCbKeyHandle_OneofMarshaler, _IpsecCbKeyHandle_OneofUnmarshaler, _IpsecCbKeyHandle_OneofSizer, []interface{}{
		(*IpsecCbKeyHandle_IpseccbId)(nil),
		(*IpsecCbKeyHandle_IpseccbHandle)(nil),
	}
}

func _IpsecCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IpsecCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *IpsecCbKeyHandle_IpseccbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IpseccbId))
	case *IpsecCbKeyHandle_IpseccbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.IpseccbHandle))
	case nil:
	default:
		return fmt.Errorf("IpsecCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _IpsecCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IpsecCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.ipseccb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &IpsecCbKeyHandle_IpseccbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.ipseccb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &IpsecCbKeyHandle_IpseccbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _IpsecCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IpsecCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *IpsecCbKeyHandle_IpseccbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IpseccbId))
	case *IpsecCbKeyHandle_IpseccbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// IpsecCbSpec captures all the ipsec_cb level configuration
type IpsecCbSpec struct {
	KeyOrHandle     *IpsecCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Pi              uint32            `protobuf:"varint,2,opt,name=pi" json:"pi,omitempty"`
	Ci              uint32            `protobuf:"varint,3,opt,name=ci" json:"ci,omitempty"`
	TunnelSip4      uint32            `protobuf:"varint,4,opt,name=tunnel_sip4,json=tunnelSip4" json:"tunnel_sip4,omitempty"`
	TunnelDip4      uint32            `protobuf:"varint,5,opt,name=tunnel_dip4,json=tunnelDip4" json:"tunnel_dip4,omitempty"`
	IvSize          uint32            `protobuf:"varint,6,opt,name=iv_size,json=ivSize" json:"iv_size,omitempty"`
	IcvSize         uint32            `protobuf:"varint,7,opt,name=icv_size,json=icvSize" json:"icv_size,omitempty"`
	BlockSize       uint32            `protobuf:"varint,8,opt,name=block_size,json=blockSize" json:"block_size,omitempty"`
	KeyIndex        uint32            `protobuf:"varint,9,opt,name=key_index,json=keyIndex" json:"key_index,omitempty"`
	BarcoEncCmd     uint32            `protobuf:"varint,10,opt,name=barco_enc_cmd,json=barcoEncCmd" json:"barco_enc_cmd,omitempty"`
	Iv              uint64            `protobuf:"fixed64,11,opt,name=iv" json:"iv,omitempty"`
	IvSalt          uint32            `protobuf:"varint,12,opt,name=iv_salt,json=ivSalt" json:"iv_salt,omitempty"`
	EsnHi           uint32            `protobuf:"varint,13,opt,name=esn_hi,json=esnHi" json:"esn_hi,omitempty"`
	EsnLo           uint32            `protobuf:"varint,14,opt,name=esn_lo,json=esnLo" json:"esn_lo,omitempty"`
	Spi             uint32            `protobuf:"varint,15,opt,name=spi" json:"spi,omitempty"`
	ExpectedSeqNo   uint32            `protobuf:"varint,16,opt,name=expected_seq_no,json=expectedSeqNo" json:"expected_seq_no,omitempty"`
	SeqNoBmp        uint64            `protobuf:"fixed64,17,opt,name=seq_no_bmp,json=seqNoBmp" json:"seq_no_bmp,omitempty"`
	Sip6            *IPAddress        `protobuf:"bytes,18,opt,name=sip6" json:"sip6,omitempty"`
	Dip6            *IPAddress        `protobuf:"bytes,19,opt,name=dip6" json:"dip6,omitempty"`
	IsV6            uint32            `protobuf:"varint,20,opt,name=is_v6,json=isV6" json:"is_v6,omitempty"`
	VrfVlan         uint32            `protobuf:"varint,21,opt,name=vrf_vlan,json=vrfVlan" json:"vrf_vlan,omitempty"`
	LastReplaySeqNo uint32            `protobuf:"varint,22,opt,name=last_replay_seq_no,json=lastReplaySeqNo" json:"last_replay_seq_no,omitempty"`
	NewSpi          uint32            `protobuf:"varint,23,opt,name=new_spi,json=newSpi" json:"new_spi,omitempty"`
	NewKeyIndex     uint32            `protobuf:"varint,24,opt,name=new_key_index,json=newKeyIndex" json:"new_key_index,omitempty"`
	IsNatT          uint32            `protobuf:"varint,25,opt,name=is_nat_t,json=isNatT" json:"is_nat_t,omitempty"`
	Flags           uint32            `protobuf:"varint,26,opt,name=flags" json:"flags,omitempty"`
	IsRandom        uint32            `protobuf:"varint,27,opt,name=is_random,json=isRandom" json:"is_random,omitempty"`
	ExtraPad        uint32            `protobuf:"varint,28,opt,name=extra_pad,json=extraPad" json:"extra_pad,omitempty"`
	RxPkts          uint32            `protobuf:"varint,29,opt,name=rx_pkts,json=rxPkts" json:"rx_pkts,omitempty"`
	RxBytes         uint64            `protobuf:"fixed64,30,opt,name=rx_bytes,json=rxBytes" json:"rx_bytes,omitempty"`
	RxDrops         uint64            `protobuf:"fixed64,31,opt,name=rx_drops,json=rxDrops" json:"rx_drops,omitempty"`
	TxPkts          uint64            `protobuf:"fixed64,32,opt,name=tx_pkts,json=txPkts" json:"tx_pkts,omitempty"`
	TxBytes         uint64            `protobuf:"fixed64,33,opt,name=tx_bytes,json=txBytes" json:"tx_bytes,omitempty"`
	TxDrops         uint64            `protobuf:"fixed64,34,opt,name=tx_drops,json=txDrops" json:"tx_drops,omitempty"`
}

func (m *IpsecCbSpec) Reset()                    { *m = IpsecCbSpec{} }
func (m *IpsecCbSpec) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbSpec) ProtoMessage()               {}
func (*IpsecCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{27} }

func (m *IpsecCbSpec) GetKeyOrHandle() *IpsecCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecCbSpec) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *IpsecCbSpec) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

func (m *IpsecCbSpec) GetTunnelSip4() uint32 {
	if m != nil {
		return m.TunnelSip4
	}
	return 0
}

func (m *IpsecCbSpec) GetTunnelDip4() uint32 {
	if m != nil {
		return m.TunnelDip4
	}
	return 0
}

func (m *IpsecCbSpec) GetIvSize() uint32 {
	if m != nil {
		return m.IvSize
	}
	return 0
}

func (m *IpsecCbSpec) GetIcvSize() uint32 {
	if m != nil {
		return m.IcvSize
	}
	return 0
}

func (m *IpsecCbSpec) GetBlockSize() uint32 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *IpsecCbSpec) GetKeyIndex() uint32 {
	if m != nil {
		return m.KeyIndex
	}
	return 0
}

func (m *IpsecCbSpec) GetBarcoEncCmd() uint32 {
	if m != nil {
		return m.BarcoEncCmd
	}
	return 0
}

func (m *IpsecCbSpec) GetIv() uint64 {
	if m != nil {
		return m.Iv
	}
	return 0
}

func (m *IpsecCbSpec) GetIvSalt() uint32 {
	if m != nil {
		return m.IvSalt
	}
	return 0
}

func (m *IpsecCbSpec) GetEsnHi() uint32 {
	if m != nil {
		return m.EsnHi
	}
	return 0
}

func (m *IpsecCbSpec) GetEsnLo() uint32 {
	if m != nil {
		return m.EsnLo
	}
	return 0
}

func (m *IpsecCbSpec) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

func (m *IpsecCbSpec) GetExpectedSeqNo() uint32 {
	if m != nil {
		return m.ExpectedSeqNo
	}
	return 0
}

func (m *IpsecCbSpec) GetSeqNoBmp() uint64 {
	if m != nil {
		return m.SeqNoBmp
	}
	return 0
}

func (m *IpsecCbSpec) GetSip6() *IPAddress {
	if m != nil {
		return m.Sip6
	}
	return nil
}

func (m *IpsecCbSpec) GetDip6() *IPAddress {
	if m != nil {
		return m.Dip6
	}
	return nil
}

func (m *IpsecCbSpec) GetIsV6() uint32 {
	if m != nil {
		return m.IsV6
	}
	return 0
}

func (m *IpsecCbSpec) GetVrfVlan() uint32 {
	if m != nil {
		return m.VrfVlan
	}
	return 0
}

func (m *IpsecCbSpec) GetLastReplaySeqNo() uint32 {
	if m != nil {
		return m.LastReplaySeqNo
	}
	return 0
}

func (m *IpsecCbSpec) GetNewSpi() uint32 {
	if m != nil {
		return m.NewSpi
	}
	return 0
}

func (m *IpsecCbSpec) GetNewKeyIndex() uint32 {
	if m != nil {
		return m.NewKeyIndex
	}
	return 0
}

func (m *IpsecCbSpec) GetIsNatT() uint32 {
	if m != nil {
		return m.IsNatT
	}
	return 0
}

func (m *IpsecCbSpec) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *IpsecCbSpec) GetIsRandom() uint32 {
	if m != nil {
		return m.IsRandom
	}
	return 0
}

func (m *IpsecCbSpec) GetExtraPad() uint32 {
	if m != nil {
		return m.ExtraPad
	}
	return 0
}

func (m *IpsecCbSpec) GetRxPkts() uint32 {
	if m != nil {
		return m.RxPkts
	}
	return 0
}

func (m *IpsecCbSpec) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *IpsecCbSpec) GetRxDrops() uint64 {
	if m != nil {
		return m.RxDrops
	}
	return 0
}

func (m *IpsecCbSpec) GetTxPkts() uint64 {
	if m != nil {
		return m.TxPkts
	}
	return 0
}

func (m *IpsecCbSpec) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *IpsecCbSpec) GetTxDrops() uint64 {
	if m != nil {
		return m.TxDrops
	}
	return 0
}

// IpsecCbRequestMsg is batched add or modify ipseccb request
type IpsecCbRequestMsg struct {
	Request []*IpsecCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecCbRequestMsg) Reset()                    { *m = IpsecCbRequestMsg{} }
func (m *IpsecCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbRequestMsg) ProtoMessage()               {}
func (*IpsecCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{28} }

func (m *IpsecCbRequestMsg) GetRequest() []*IpsecCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecCbStatus is the operational status of a given ipseccb
type IpsecCbStatus struct {
	IpseccbHandle uint64 `protobuf:"fixed64,1,opt,name=ipseccb_handle,json=ipseccbHandle" json:"ipseccb_handle,omitempty"`
}

func (m *IpsecCbStatus) Reset()                    { *m = IpsecCbStatus{} }
func (m *IpsecCbStatus) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbStatus) ProtoMessage()               {}
func (*IpsecCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{29} }

func (m *IpsecCbStatus) GetIpseccbHandle() uint64 {
	if m != nil {
		return m.IpseccbHandle
	}
	return 0
}

// IpsecCbResponse is response to IpsecCbSpec
type IpsecCbResponse struct {
	ApiStatus     ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	IpseccbStatus *IpsecCbStatus `protobuf:"bytes,2,opt,name=ipseccb_status,json=ipseccbStatus" json:"ipseccb_status,omitempty"`
}

func (m *IpsecCbResponse) Reset()                    { *m = IpsecCbResponse{} }
func (m *IpsecCbResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbResponse) ProtoMessage()               {}
func (*IpsecCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{30} }

func (m *IpsecCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecCbResponse) GetIpseccbStatus() *IpsecCbStatus {
	if m != nil {
		return m.IpseccbStatus
	}
	return nil
}

// IpsecCbResponseMsg is batched response to IpsecCbRequestMsg
type IpsecCbResponseMsg struct {
	Response []*IpsecCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecCbResponseMsg) Reset()                    { *m = IpsecCbResponseMsg{} }
func (m *IpsecCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbResponseMsg) ProtoMessage()               {}
func (*IpsecCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{31} }

func (m *IpsecCbResponseMsg) GetResponse() []*IpsecCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecCbDeleteRequest is used to delete a ipseccb
type IpsecCbDeleteRequest struct {
	KeyOrHandle *IpsecCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecCbDeleteRequest) Reset()                    { *m = IpsecCbDeleteRequest{} }
func (m *IpsecCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbDeleteRequest) ProtoMessage()               {}
func (*IpsecCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{32} }

func (m *IpsecCbDeleteRequest) GetKeyOrHandle() *IpsecCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecCbDeleteRequestMsg is used to delete a batch of ipseccbs
type IpsecCbDeleteRequestMsg struct {
	Request []*IpsecCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecCbDeleteRequestMsg) Reset()                    { *m = IpsecCbDeleteRequestMsg{} }
func (m *IpsecCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbDeleteRequestMsg) ProtoMessage()               {}
func (*IpsecCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{33} }

func (m *IpsecCbDeleteRequestMsg) GetRequest() []*IpsecCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecCbDeleteResponseMsg is batched response to IpsecCbDeleteRequestMsg
type IpsecCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *IpsecCbDeleteResponseMsg) Reset()                    { *m = IpsecCbDeleteResponseMsg{} }
func (m *IpsecCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbDeleteResponseMsg) ProtoMessage()               {}
func (*IpsecCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{34} }

func (m *IpsecCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// IpsecCbGetRequest is used to get information about a ipseccb
type IpsecCbGetRequest struct {
	KeyOrHandle *IpsecCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecCbGetRequest) Reset()                    { *m = IpsecCbGetRequest{} }
func (m *IpsecCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetRequest) ProtoMessage()               {}
func (*IpsecCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{35} }

func (m *IpsecCbGetRequest) GetKeyOrHandle() *IpsecCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecCbGetRequestMsg is batched GET requests for ipseccbs
type IpsecCbGetRequestMsg struct {
	Request []*IpsecCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecCbGetRequestMsg) Reset()                    { *m = IpsecCbGetRequestMsg{} }
func (m *IpsecCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetRequestMsg) ProtoMessage()               {}
func (*IpsecCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{36} }

func (m *IpsecCbGetRequestMsg) GetRequest() []*IpsecCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecCbStats is the statistics object for each ipseccb
type IpsecCbStats struct {
}

func (m *IpsecCbStats) Reset()                    { *m = IpsecCbStats{} }
func (m *IpsecCbStats) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbStats) ProtoMessage()               {}
func (*IpsecCbStats) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{37} }

// IpsecCbGetResponse captures all the information about a ipseccb
// only if api_status indicates success, other fields are valid
type IpsecCbGetResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *IpsecCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *IpsecCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *IpsecCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *IpsecCbGetResponse) Reset()                    { *m = IpsecCbGetResponse{} }
func (m *IpsecCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetResponse) ProtoMessage()               {}
func (*IpsecCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{38} }

func (m *IpsecCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecCbGetResponse) GetSpec() *IpsecCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *IpsecCbGetResponse) GetStatus() *IpsecCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *IpsecCbGetResponse) GetStats() *IpsecCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// IpsecCbGetResponseMsg is batched response to IpsecCbGetRequestMsg
type IpsecCbGetResponseMsg struct {
	Response []*IpsecCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecCbGetResponseMsg) Reset()                    { *m = IpsecCbGetResponseMsg{} }
func (m *IpsecCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetResponseMsg) ProtoMessage()               {}
func (*IpsecCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{39} }

func (m *IpsecCbGetResponseMsg) GetResponse() []*IpsecCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TcpCbKeyHandle is used to operate on a tcp_cb either by its key or handle
type TcpCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*TcpCbKeyHandle_TcpcbId
	//	*TcpCbKeyHandle_TcpcbHandle
	KeyOrHandle isTcpCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *TcpCbKeyHandle) Reset()                    { *m = TcpCbKeyHandle{} }
func (m *TcpCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*TcpCbKeyHandle) ProtoMessage()               {}
func (*TcpCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{40} }

type isTcpCbKeyHandle_KeyOrHandle interface{ isTcpCbKeyHandle_KeyOrHandle() }

type TcpCbKeyHandle_TcpcbId struct {
	TcpcbId uint32 `protobuf:"varint,1,opt,name=tcpcb_id,json=tcpcbId,oneof"`
}
type TcpCbKeyHandle_TcpcbHandle struct {
	TcpcbHandle uint64 `protobuf:"fixed64,2,opt,name=tcpcb_handle,json=tcpcbHandle,oneof"`
}

func (*TcpCbKeyHandle_TcpcbId) isTcpCbKeyHandle_KeyOrHandle()     {}
func (*TcpCbKeyHandle_TcpcbHandle) isTcpCbKeyHandle_KeyOrHandle() {}

func (m *TcpCbKeyHandle) GetKeyOrHandle() isTcpCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TcpCbKeyHandle) GetTcpcbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*TcpCbKeyHandle_TcpcbId); ok {
		return x.TcpcbId
	}
	return 0
}

func (m *TcpCbKeyHandle) GetTcpcbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*TcpCbKeyHandle_TcpcbHandle); ok {
		return x.TcpcbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TcpCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TcpCbKeyHandle_OneofMarshaler, _TcpCbKeyHandle_OneofUnmarshaler, _TcpCbKeyHandle_OneofSizer, []interface{}{
		(*TcpCbKeyHandle_TcpcbId)(nil),
		(*TcpCbKeyHandle_TcpcbHandle)(nil),
	}
}

func _TcpCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TcpCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TcpCbKeyHandle_TcpcbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TcpcbId))
	case *TcpCbKeyHandle_TcpcbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.TcpcbHandle))
	case nil:
	default:
		return fmt.Errorf("TcpCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _TcpCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TcpCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.tcpcb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &TcpCbKeyHandle_TcpcbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.tcpcb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &TcpCbKeyHandle_TcpcbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _TcpCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TcpCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TcpCbKeyHandle_TcpcbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TcpcbId))
	case *TcpCbKeyHandle_TcpcbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TcpCbSpec captures all the tcp_cb level configuration
type TcpCbSpec struct {
	KeyOrHandle        *TcpCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	RcvNxt             uint32          `protobuf:"varint,2,opt,name=rcv_nxt,json=rcvNxt" json:"rcv_nxt,omitempty"`
	SndNxt             uint32          `protobuf:"varint,3,opt,name=snd_nxt,json=sndNxt" json:"snd_nxt,omitempty"`
	SndUna             uint32          `protobuf:"varint,4,opt,name=snd_una,json=sndUna" json:"snd_una,omitempty"`
	RcvTsval           uint32          `protobuf:"varint,5,opt,name=rcv_tsval,json=rcvTsval" json:"rcv_tsval,omitempty"`
	TsRecent           uint32          `protobuf:"varint,6,opt,name=ts_recent,json=tsRecent" json:"ts_recent,omitempty"`
	SerqBase           uint64          `protobuf:"fixed64,7,opt,name=serq_base,json=serqBase" json:"serq_base,omitempty"`
	DebugDol           uint32          `protobuf:"varint,8,opt,name=debug_dol,json=debugDol" json:"debug_dol,omitempty"`
	SesqBase           uint64          `protobuf:"fixed64,9,opt,name=sesq_base,json=sesqBase" json:"sesq_base,omitempty"`
	SesqPi             uint32          `protobuf:"varint,10,opt,name=sesq_pi,json=sesqPi" json:"sesq_pi,omitempty"`
	SesqCi             uint32          `protobuf:"varint,11,opt,name=sesq_ci,json=sesqCi" json:"sesq_ci,omitempty"`
	SndWnd             uint32          `protobuf:"varint,12,opt,name=snd_wnd,json=sndWnd" json:"snd_wnd,omitempty"`
	SndCwnd            uint32          `protobuf:"varint,13,opt,name=snd_cwnd,json=sndCwnd" json:"snd_cwnd,omitempty"`
	RcvMss             uint32          `protobuf:"varint,14,opt,name=rcv_mss,json=rcvMss" json:"rcv_mss,omitempty"`
	SourcePort         uint32          `protobuf:"varint,15,opt,name=source_port,json=sourcePort" json:"source_port,omitempty"`
	DestPort           uint32          `protobuf:"varint,16,opt,name=dest_port,json=destPort" json:"dest_port,omitempty"`
	HeaderTemplate     []byte          `protobuf:"bytes,17,opt,name=header_template,json=headerTemplate,proto3" json:"header_template,omitempty"`
	State              uint32          `protobuf:"varint,18,opt,name=state" json:"state,omitempty"`
	SourceLif          uint32          `protobuf:"varint,19,opt,name=source_lif,json=sourceLif" json:"source_lif,omitempty"`
	AsesqBase          uint64          `protobuf:"fixed64,20,opt,name=asesq_base,json=asesqBase" json:"asesq_base,omitempty"`
	AsesqPi            uint32          `protobuf:"varint,21,opt,name=asesq_pi,json=asesqPi" json:"asesq_pi,omitempty"`
	AsesqCi            uint32          `protobuf:"varint,22,opt,name=asesq_ci,json=asesqCi" json:"asesq_ci,omitempty"`
	DebugDolTx         uint32          `protobuf:"varint,23,opt,name=debug_dol_tx,json=debugDolTx" json:"debug_dol_tx,omitempty"`
	HeaderLen          uint32          `protobuf:"varint,24,opt,name=header_len,json=headerLen" json:"header_len,omitempty"`
	PendingAckSend     bool            `protobuf:"varint,25,opt,name=pending_ack_send,json=pendingAckSend" json:"pending_ack_send,omitempty"`
	L7ProxyType        AppRedirType    `protobuf:"varint,26,opt,name=l7_proxy_type,json=l7ProxyType,enum=types.AppRedirType" json:"l7_proxy_type,omitempty"`
	SesqRetxCi         uint32          `protobuf:"varint,27,opt,name=sesq_retx_ci,json=sesqRetxCi" json:"sesq_retx_ci,omitempty"`
	RetxSndUna         uint64          `protobuf:"varint,28,opt,name=retx_snd_una,json=retxSndUna" json:"retx_snd_una,omitempty"`
	RxTs               uint64          `protobuf:"varint,29,opt,name=rx_ts,json=rxTs" json:"rx_ts,omitempty"`
	Rto                uint64          `protobuf:"varint,30,opt,name=rto" json:"rto,omitempty"`
	SndCwndCnt         uint32          `protobuf:"varint,31,opt,name=snd_cwnd_cnt,json=sndCwndCnt" json:"snd_cwnd_cnt,omitempty"`
	DebugDolTblsetaddr uint32          `protobuf:"varint,32,opt,name=debug_dol_tblsetaddr,json=debugDolTblsetaddr" json:"debug_dol_tblsetaddr,omitempty"`
	SerqPi             uint32          `protobuf:"varint,33,opt,name=serq_pi,json=serqPi" json:"serq_pi,omitempty"`
	PredFlags          uint32          `protobuf:"varint,34,opt,name=pred_flags,json=predFlags" json:"pred_flags,omitempty"`
	OtherQid           uint32          `protobuf:"varint,35,opt,name=other_qid,json=otherQid" json:"other_qid,omitempty"`
	PacketsOut         uint32          `protobuf:"varint,36,opt,name=packets_out,json=packetsOut" json:"packets_out,omitempty"`
	SndSsthresh        uint32          `protobuf:"varint,37,opt,name=snd_ssthresh,json=sndSsthresh" json:"snd_ssthresh,omitempty"`
	CcAlgo             uint32          `protobuf:"varint,38,opt,name=cc_algo,json=ccAlgo" json:"cc_algo,omitempty"`
	RtoBackoff         uint32          `protobuf:"varint,39,opt,name=rto_backoff,json=rtoBackoff" json:"rto_backoff,omitempty"`
	CpuId              uint32          `protobuf:"varint,40,opt,name=cpu_id,json=cpuId" json:"cpu_id,omitempty"`
	SerqCi             uint32          `protobuf:"varint,41,opt,name=serq_ci,json=serqCi" json:"serq_ci,omitempty"`
	RcvWnd             uint32          `protobuf:"varint,42,opt,name=rcv_wnd,json=rcvWnd" json:"rcv_wnd,omitempty"`
	SndWscale          uint32          `protobuf:"varint,43,opt,name=snd_wscale,json=sndWscale" json:"snd_wscale,omitempty"`
	RcvWscale          uint32          `protobuf:"varint,44,opt,name=rcv_wscale,json=rcvWscale" json:"rcv_wscale,omitempty"`
	SesqTxCi           uint32          `protobuf:"varint,45,opt,name=sesq_tx_ci,json=sesqTxCi" json:"sesq_tx_ci,omitempty"`
	DelayAck           bool            `protobuf:"varint,46,opt,name=delay_ack,json=delayAck" json:"delay_ack,omitempty"`
	Ato                uint32          `protobuf:"varint,47,opt,name=ato" json:"ato,omitempty"`
	SndRecover         uint32          `protobuf:"varint,48,opt,name=snd_recover,json=sndRecover" json:"snd_recover,omitempty"`
	Smss               uint32          `protobuf:"varint,49,opt,name=smss" json:"smss,omitempty"`
	InitialWindow      uint32          `protobuf:"varint,50,opt,name=initial_window,json=initialWindow" json:"initial_window,omitempty"`
	AbcLVar            uint32          `protobuf:"varint,51,opt,name=abc_l_var,json=abcLVar" json:"abc_l_var,omitempty"`
	OooQueue           bool            `protobuf:"varint,52,opt,name=ooo_queue,json=oooQueue" json:"ooo_queue,omitempty"`
	OooRx2TxQbase      uint64          `protobuf:"varint,53,opt,name=ooo_rx2tx_qbase,json=oooRx2txQbase" json:"ooo_rx2tx_qbase,omitempty"`
	RcvWup             uint32          `protobuf:"varint,54,opt,name=rcv_wup,json=rcvWup" json:"rcv_wup,omitempty"`
	CbBase             uint64          `protobuf:"fixed64,55,opt,name=cb_base,json=cbBase" json:"cb_base,omitempty"`
	ZeroWindowSent     uint32          `protobuf:"varint,56,opt,name=zero_window_sent,json=zeroWindowSent" json:"zero_window_sent,omitempty"`
	CbBaseQtype1       uint64          `protobuf:"fixed64,57,opt,name=cb_base_qtype1,json=cbBaseQtype1" json:"cb_base_qtype1,omitempty"`
	SrttUs             uint32          `protobuf:"varint,58,opt,name=srtt_us,json=srttUs" json:"srtt_us,omitempty"`
	SackPerm           bool            `protobuf:"varint,59,opt,name=sack_perm,json=sackPerm" json:"sack_perm,omitempty"`
	Timestamps         bool            `protobuf:"varint,60,opt,name=timestamps" json:"timestamps,omitempty"`
	TxWindowUpdatePi   uint32          `protobuf:"varint,61,opt,name=tx_window_update_pi,json=txWindowUpdatePi" json:"tx_window_update_pi,omitempty"`
	RttSeqTsoffset     uint32          `protobuf:"varint,62,opt,name=rtt_seq_tsoffset,json=rttSeqTsoffset" json:"rtt_seq_tsoffset,omitempty"`
	RttTime            uint32          `protobuf:"varint,63,opt,name=rtt_time,json=rttTime" json:"rtt_time,omitempty"`
	TsLearned          uint32          `protobuf:"varint,64,opt,name=ts_learned,json=tsLearned" json:"ts_learned,omitempty"`
	TsOffset           uint32          `protobuf:"varint,65,opt,name=ts_offset,json=tsOffset" json:"ts_offset,omitempty"`
	TsTime             uint32          `protobuf:"varint,66,opt,name=ts_time,json=tsTime" json:"ts_time,omitempty"`
	ProxyType          ProxyType       `protobuf:"varint,68,opt,name=proxy_type,json=proxyType,enum=types.ProxyType" json:"proxy_type,omitempty"`
}

func (m *TcpCbSpec) Reset()                    { *m = TcpCbSpec{} }
func (m *TcpCbSpec) String() string            { return proto.CompactTextString(m) }
func (*TcpCbSpec) ProtoMessage()               {}
func (*TcpCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{41} }

func (m *TcpCbSpec) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TcpCbSpec) GetRcvNxt() uint32 {
	if m != nil {
		return m.RcvNxt
	}
	return 0
}

func (m *TcpCbSpec) GetSndNxt() uint32 {
	if m != nil {
		return m.SndNxt
	}
	return 0
}

func (m *TcpCbSpec) GetSndUna() uint32 {
	if m != nil {
		return m.SndUna
	}
	return 0
}

func (m *TcpCbSpec) GetRcvTsval() uint32 {
	if m != nil {
		return m.RcvTsval
	}
	return 0
}

func (m *TcpCbSpec) GetTsRecent() uint32 {
	if m != nil {
		return m.TsRecent
	}
	return 0
}

func (m *TcpCbSpec) GetSerqBase() uint64 {
	if m != nil {
		return m.SerqBase
	}
	return 0
}

func (m *TcpCbSpec) GetDebugDol() uint32 {
	if m != nil {
		return m.DebugDol
	}
	return 0
}

func (m *TcpCbSpec) GetSesqBase() uint64 {
	if m != nil {
		return m.SesqBase
	}
	return 0
}

func (m *TcpCbSpec) GetSesqPi() uint32 {
	if m != nil {
		return m.SesqPi
	}
	return 0
}

func (m *TcpCbSpec) GetSesqCi() uint32 {
	if m != nil {
		return m.SesqCi
	}
	return 0
}

func (m *TcpCbSpec) GetSndWnd() uint32 {
	if m != nil {
		return m.SndWnd
	}
	return 0
}

func (m *TcpCbSpec) GetSndCwnd() uint32 {
	if m != nil {
		return m.SndCwnd
	}
	return 0
}

func (m *TcpCbSpec) GetRcvMss() uint32 {
	if m != nil {
		return m.RcvMss
	}
	return 0
}

func (m *TcpCbSpec) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *TcpCbSpec) GetDestPort() uint32 {
	if m != nil {
		return m.DestPort
	}
	return 0
}

func (m *TcpCbSpec) GetHeaderTemplate() []byte {
	if m != nil {
		return m.HeaderTemplate
	}
	return nil
}

func (m *TcpCbSpec) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *TcpCbSpec) GetSourceLif() uint32 {
	if m != nil {
		return m.SourceLif
	}
	return 0
}

func (m *TcpCbSpec) GetAsesqBase() uint64 {
	if m != nil {
		return m.AsesqBase
	}
	return 0
}

func (m *TcpCbSpec) GetAsesqPi() uint32 {
	if m != nil {
		return m.AsesqPi
	}
	return 0
}

func (m *TcpCbSpec) GetAsesqCi() uint32 {
	if m != nil {
		return m.AsesqCi
	}
	return 0
}

func (m *TcpCbSpec) GetDebugDolTx() uint32 {
	if m != nil {
		return m.DebugDolTx
	}
	return 0
}

func (m *TcpCbSpec) GetHeaderLen() uint32 {
	if m != nil {
		return m.HeaderLen
	}
	return 0
}

func (m *TcpCbSpec) GetPendingAckSend() bool {
	if m != nil {
		return m.PendingAckSend
	}
	return false
}

func (m *TcpCbSpec) GetL7ProxyType() AppRedirType {
	if m != nil {
		return m.L7ProxyType
	}
	return AppRedirType_APP_REDIR_TYPE_NONE
}

func (m *TcpCbSpec) GetSesqRetxCi() uint32 {
	if m != nil {
		return m.SesqRetxCi
	}
	return 0
}

func (m *TcpCbSpec) GetRetxSndUna() uint64 {
	if m != nil {
		return m.RetxSndUna
	}
	return 0
}

func (m *TcpCbSpec) GetRxTs() uint64 {
	if m != nil {
		return m.RxTs
	}
	return 0
}

func (m *TcpCbSpec) GetRto() uint64 {
	if m != nil {
		return m.Rto
	}
	return 0
}

func (m *TcpCbSpec) GetSndCwndCnt() uint32 {
	if m != nil {
		return m.SndCwndCnt
	}
	return 0
}

func (m *TcpCbSpec) GetDebugDolTblsetaddr() uint32 {
	if m != nil {
		return m.DebugDolTblsetaddr
	}
	return 0
}

func (m *TcpCbSpec) GetSerqPi() uint32 {
	if m != nil {
		return m.SerqPi
	}
	return 0
}

func (m *TcpCbSpec) GetPredFlags() uint32 {
	if m != nil {
		return m.PredFlags
	}
	return 0
}

func (m *TcpCbSpec) GetOtherQid() uint32 {
	if m != nil {
		return m.OtherQid
	}
	return 0
}

func (m *TcpCbSpec) GetPacketsOut() uint32 {
	if m != nil {
		return m.PacketsOut
	}
	return 0
}

func (m *TcpCbSpec) GetSndSsthresh() uint32 {
	if m != nil {
		return m.SndSsthresh
	}
	return 0
}

func (m *TcpCbSpec) GetCcAlgo() uint32 {
	if m != nil {
		return m.CcAlgo
	}
	return 0
}

func (m *TcpCbSpec) GetRtoBackoff() uint32 {
	if m != nil {
		return m.RtoBackoff
	}
	return 0
}

func (m *TcpCbSpec) GetCpuId() uint32 {
	if m != nil {
		return m.CpuId
	}
	return 0
}

func (m *TcpCbSpec) GetSerqCi() uint32 {
	if m != nil {
		return m.SerqCi
	}
	return 0
}

func (m *TcpCbSpec) GetRcvWnd() uint32 {
	if m != nil {
		return m.RcvWnd
	}
	return 0
}

func (m *TcpCbSpec) GetSndWscale() uint32 {
	if m != nil {
		return m.SndWscale
	}
	return 0
}

func (m *TcpCbSpec) GetRcvWscale() uint32 {
	if m != nil {
		return m.RcvWscale
	}
	return 0
}

func (m *TcpCbSpec) GetSesqTxCi() uint32 {
	if m != nil {
		return m.SesqTxCi
	}
	return 0
}

func (m *TcpCbSpec) GetDelayAck() bool {
	if m != nil {
		return m.DelayAck
	}
	return false
}

func (m *TcpCbSpec) GetAto() uint32 {
	if m != nil {
		return m.Ato
	}
	return 0
}

func (m *TcpCbSpec) GetSndRecover() uint32 {
	if m != nil {
		return m.SndRecover
	}
	return 0
}

func (m *TcpCbSpec) GetSmss() uint32 {
	if m != nil {
		return m.Smss
	}
	return 0
}

func (m *TcpCbSpec) GetInitialWindow() uint32 {
	if m != nil {
		return m.InitialWindow
	}
	return 0
}

func (m *TcpCbSpec) GetAbcLVar() uint32 {
	if m != nil {
		return m.AbcLVar
	}
	return 0
}

func (m *TcpCbSpec) GetOooQueue() bool {
	if m != nil {
		return m.OooQueue
	}
	return false
}

func (m *TcpCbSpec) GetOooRx2TxQbase() uint64 {
	if m != nil {
		return m.OooRx2TxQbase
	}
	return 0
}

func (m *TcpCbSpec) GetRcvWup() uint32 {
	if m != nil {
		return m.RcvWup
	}
	return 0
}

func (m *TcpCbSpec) GetCbBase() uint64 {
	if m != nil {
		return m.CbBase
	}
	return 0
}

func (m *TcpCbSpec) GetZeroWindowSent() uint32 {
	if m != nil {
		return m.ZeroWindowSent
	}
	return 0
}

func (m *TcpCbSpec) GetCbBaseQtype1() uint64 {
	if m != nil {
		return m.CbBaseQtype1
	}
	return 0
}

func (m *TcpCbSpec) GetSrttUs() uint32 {
	if m != nil {
		return m.SrttUs
	}
	return 0
}

func (m *TcpCbSpec) GetSackPerm() bool {
	if m != nil {
		return m.SackPerm
	}
	return false
}

func (m *TcpCbSpec) GetTimestamps() bool {
	if m != nil {
		return m.Timestamps
	}
	return false
}

func (m *TcpCbSpec) GetTxWindowUpdatePi() uint32 {
	if m != nil {
		return m.TxWindowUpdatePi
	}
	return 0
}

func (m *TcpCbSpec) GetRttSeqTsoffset() uint32 {
	if m != nil {
		return m.RttSeqTsoffset
	}
	return 0
}

func (m *TcpCbSpec) GetRttTime() uint32 {
	if m != nil {
		return m.RttTime
	}
	return 0
}

func (m *TcpCbSpec) GetTsLearned() uint32 {
	if m != nil {
		return m.TsLearned
	}
	return 0
}

func (m *TcpCbSpec) GetTsOffset() uint32 {
	if m != nil {
		return m.TsOffset
	}
	return 0
}

func (m *TcpCbSpec) GetTsTime() uint32 {
	if m != nil {
		return m.TsTime
	}
	return 0
}

func (m *TcpCbSpec) GetProxyType() ProxyType {
	if m != nil {
		return m.ProxyType
	}
	return ProxyType_PROXY_TYPE_NONE
}

// TcpCbRequestMsg is batched add or modify tcpcb request
type TcpCbRequestMsg struct {
	Request []*TcpCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbRequestMsg) Reset()                    { *m = TcpCbRequestMsg{} }
func (m *TcpCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbRequestMsg) ProtoMessage()               {}
func (*TcpCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{42} }

func (m *TcpCbRequestMsg) GetRequest() []*TcpCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

type TcpCbOoqStatus struct {
	QueueAddr  uint64 `protobuf:"varint,1,opt,name=queue_addr,json=queueAddr" json:"queue_addr,omitempty"`
	StartSeq   uint32 `protobuf:"varint,2,opt,name=start_seq,json=startSeq" json:"start_seq,omitempty"`
	EndSeq     uint32 `protobuf:"varint,3,opt,name=end_seq,json=endSeq" json:"end_seq,omitempty"`
	NumEntries uint32 `protobuf:"varint,4,opt,name=num_entries,json=numEntries" json:"num_entries,omitempty"`
}

func (m *TcpCbOoqStatus) Reset()                    { *m = TcpCbOoqStatus{} }
func (m *TcpCbOoqStatus) String() string            { return proto.CompactTextString(m) }
func (*TcpCbOoqStatus) ProtoMessage()               {}
func (*TcpCbOoqStatus) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{43} }

func (m *TcpCbOoqStatus) GetQueueAddr() uint64 {
	if m != nil {
		return m.QueueAddr
	}
	return 0
}

func (m *TcpCbOoqStatus) GetStartSeq() uint32 {
	if m != nil {
		return m.StartSeq
	}
	return 0
}

func (m *TcpCbOoqStatus) GetEndSeq() uint32 {
	if m != nil {
		return m.EndSeq
	}
	return 0
}

func (m *TcpCbOoqStatus) GetNumEntries() uint32 {
	if m != nil {
		return m.NumEntries
	}
	return 0
}

// TcpCbStatus is the operational status of a given tcpcb
type TcpCbStatus struct {
	TcpcbHandle uint64            `protobuf:"fixed64,1,opt,name=tcpcb_handle,json=tcpcbHandle" json:"tcpcb_handle,omitempty"`
	OoqNotEmpty bool              `protobuf:"varint,2,opt,name=ooq_not_empty,json=ooqNotEmpty" json:"ooq_not_empty,omitempty"`
	OoqStatus   []*TcpCbOoqStatus `protobuf:"bytes,3,rep,name=ooq_status,json=ooqStatus" json:"ooq_status,omitempty"`
}

func (m *TcpCbStatus) Reset()                    { *m = TcpCbStatus{} }
func (m *TcpCbStatus) String() string            { return proto.CompactTextString(m) }
func (*TcpCbStatus) ProtoMessage()               {}
func (*TcpCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{44} }

func (m *TcpCbStatus) GetTcpcbHandle() uint64 {
	if m != nil {
		return m.TcpcbHandle
	}
	return 0
}

func (m *TcpCbStatus) GetOoqNotEmpty() bool {
	if m != nil {
		return m.OoqNotEmpty
	}
	return false
}

func (m *TcpCbStatus) GetOoqStatus() []*TcpCbOoqStatus {
	if m != nil {
		return m.OoqStatus
	}
	return nil
}

// TcpCbResponse is response to TcpCbSpec
type TcpCbResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	TcpcbStatus *TcpCbStatus `protobuf:"bytes,2,opt,name=tcpcb_status,json=tcpcbStatus" json:"tcpcb_status,omitempty"`
}

func (m *TcpCbResponse) Reset()                    { *m = TcpCbResponse{} }
func (m *TcpCbResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpCbResponse) ProtoMessage()               {}
func (*TcpCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{45} }

func (m *TcpCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpCbResponse) GetTcpcbStatus() *TcpCbStatus {
	if m != nil {
		return m.TcpcbStatus
	}
	return nil
}

// TcpCbResponseMsg is batched response to TcpCbRequestMsg
type TcpCbResponseMsg struct {
	Response []*TcpCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TcpCbResponseMsg) Reset()                    { *m = TcpCbResponseMsg{} }
func (m *TcpCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbResponseMsg) ProtoMessage()               {}
func (*TcpCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{46} }

func (m *TcpCbResponseMsg) GetResponse() []*TcpCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TcpCbDeleteRequest is used to delete a tcpcb
type TcpCbDeleteRequest struct {
	KeyOrHandle *TcpCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TcpCbDeleteRequest) Reset()                    { *m = TcpCbDeleteRequest{} }
func (m *TcpCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteRequest) ProtoMessage()               {}
func (*TcpCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{47} }

func (m *TcpCbDeleteRequest) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TcpCbDeleteRequestMsg is used to delete a batch of tcpcbs
type TcpCbDeleteRequestMsg struct {
	Request []*TcpCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbDeleteRequestMsg) Reset()                    { *m = TcpCbDeleteRequestMsg{} }
func (m *TcpCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteRequestMsg) ProtoMessage()               {}
func (*TcpCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{48} }

func (m *TcpCbDeleteRequestMsg) GetRequest() []*TcpCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpCbDeleteResponseMsg is batched response to TcpCbDeleteRequestMsg
type TcpCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *TcpCbDeleteResponseMsg) Reset()                    { *m = TcpCbDeleteResponseMsg{} }
func (m *TcpCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteResponseMsg) ProtoMessage()               {}
func (*TcpCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{49} }

func (m *TcpCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// TcpCbGetRequest is used to get information about a tcpcb
type TcpCbGetRequest struct {
	KeyOrHandle *TcpCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TcpCbGetRequest) Reset()                    { *m = TcpCbGetRequest{} }
func (m *TcpCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetRequest) ProtoMessage()               {}
func (*TcpCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{50} }

func (m *TcpCbGetRequest) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TcpCbGetRequestMsg is batched GET requests for tcpcbs
type TcpCbGetRequestMsg struct {
	Request []*TcpCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbGetRequestMsg) Reset()                    { *m = TcpCbGetRequestMsg{} }
func (m *TcpCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetRequestMsg) ProtoMessage()               {}
func (*TcpCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{51} }

func (m *TcpCbGetRequestMsg) GetRequest() []*TcpCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpCbStats is the statistics object for each tcpcb
type TcpCbStats struct {
	// rx stats
	BytesRcvd    uint64 `protobuf:"varint,1,opt,name=bytes_rcvd,json=bytesRcvd" json:"bytes_rcvd,omitempty"`
	PktsRcvd     uint64 `protobuf:"varint,2,opt,name=pkts_rcvd,json=pktsRcvd" json:"pkts_rcvd,omitempty"`
	BytesAcked   uint64 `protobuf:"varint,3,opt,name=bytes_acked,json=bytesAcked" json:"bytes_acked,omitempty"`
	PureAcksRcvd uint64 `protobuf:"varint,4,opt,name=pure_acks_rcvd,json=pureAcksRcvd" json:"pure_acks_rcvd,omitempty"`
	DupAcksRcvd  uint64 `protobuf:"varint,5,opt,name=dup_acks_rcvd,json=dupAcksRcvd" json:"dup_acks_rcvd,omitempty"`
	SlowPathCnt  uint64 `protobuf:"varint,6,opt,name=slow_path_cnt,json=slowPathCnt" json:"slow_path_cnt,omitempty"`
	SerqFullCnt  uint64 `protobuf:"varint,7,opt,name=serq_full_cnt,json=serqFullCnt" json:"serq_full_cnt,omitempty"`
	OooCnt       uint64 `protobuf:"varint,8,opt,name=ooo_cnt,json=oooCnt" json:"ooo_cnt,omitempty"`
	RxDropCnt    uint64 `protobuf:"varint,9,opt,name=rx_drop_cnt,json=rxDropCnt" json:"rx_drop_cnt,omitempty"`
	// tx stats
	BytesSent        uint64 `protobuf:"varint,10001,opt,name=bytes_sent,json=bytesSent" json:"bytes_sent,omitempty"`
	PktsSent         uint64 `protobuf:"varint,10002,opt,name=pkts_sent,json=pktsSent" json:"pkts_sent,omitempty"`
	PureAcksSent     uint64 `protobuf:"varint,10003,opt,name=pure_acks_sent,json=pureAcksSent" json:"pure_acks_sent,omitempty"`
	SesqPi           uint32 `protobuf:"varint,10005,opt,name=sesq_pi,json=sesqPi" json:"sesq_pi,omitempty"`
	SesqCi           uint32 `protobuf:"varint,10006,opt,name=sesq_ci,json=sesqCi" json:"sesq_ci,omitempty"`
	SendAckPi        uint32 `protobuf:"varint,10007,opt,name=send_ack_pi,json=sendAckPi" json:"send_ack_pi,omitempty"`
	SendAckCi        uint32 `protobuf:"varint,10008,opt,name=send_ack_ci,json=sendAckCi" json:"send_ack_ci,omitempty"`
	FastTimerPi      uint32 `protobuf:"varint,10009,opt,name=fast_timer_pi,json=fastTimerPi" json:"fast_timer_pi,omitempty"`
	FastTimerCi      uint32 `protobuf:"varint,10010,opt,name=fast_timer_ci,json=fastTimerCi" json:"fast_timer_ci,omitempty"`
	DelAckPi         uint32 `protobuf:"varint,10011,opt,name=del_ack_pi,json=delAckPi" json:"del_ack_pi,omitempty"`
	DelAckCi         uint32 `protobuf:"varint,10012,opt,name=del_ack_ci,json=delAckCi" json:"del_ack_ci,omitempty"`
	AsesqPi          uint32 `protobuf:"varint,10013,opt,name=asesq_pi,json=asesqPi" json:"asesq_pi,omitempty"`
	AsesqCi          uint32 `protobuf:"varint,10014,opt,name=asesq_ci,json=asesqCi" json:"asesq_ci,omitempty"`
	PendingTxPi      uint32 `protobuf:"varint,10015,opt,name=pending_tx_pi,json=pendingTxPi" json:"pending_tx_pi,omitempty"`
	PendingTxCi      uint32 `protobuf:"varint,10016,opt,name=pending_tx_ci,json=pendingTxCi" json:"pending_tx_ci,omitempty"`
	FastRetransPi    uint32 `protobuf:"varint,10017,opt,name=fast_retrans_pi,json=fastRetransPi" json:"fast_retrans_pi,omitempty"`
	FastRetransCi    uint32 `protobuf:"varint,10018,opt,name=fast_retrans_ci,json=fastRetransCi" json:"fast_retrans_ci,omitempty"`
	CleanRetxPi      uint32 `protobuf:"varint,10019,opt,name=clean_retx_pi,json=cleanRetxPi" json:"clean_retx_pi,omitempty"`
	CleanRetxCi      uint32 `protobuf:"varint,10020,opt,name=clean_retx_ci,json=cleanRetxCi" json:"clean_retx_ci,omitempty"`
	PacketsOut       uint32 `protobuf:"varint,10021,opt,name=packets_out,json=packetsOut" json:"packets_out,omitempty"`
	SesqTxCi         uint32 `protobuf:"varint,10022,opt,name=sesq_tx_ci,json=sesqTxCi" json:"sesq_tx_ci,omitempty"`
	SesqRetxCi       uint32 `protobuf:"varint,10023,opt,name=sesq_retx_ci,json=sesqRetxCi" json:"sesq_retx_ci,omitempty"`
	AsesqRetxCi      uint32 `protobuf:"varint,10024,opt,name=asesq_retx_ci,json=asesqRetxCi" json:"asesq_retx_ci,omitempty"`
	TxRingPi         uint32 `protobuf:"varint,10025,opt,name=tx_ring_pi,json=txRingPi" json:"tx_ring_pi,omitempty"`
	PartialPktAckCnt uint32 `protobuf:"varint,10026,opt,name=partial_pkt_ack_cnt,json=partialPktAckCnt" json:"partial_pkt_ack_cnt,omitempty"`
	AtoDeadline      uint32 `protobuf:"varint,10027,opt,name=ato_deadline,json=atoDeadline" json:"ato_deadline,omitempty"`
	RtoDeadline      uint32 `protobuf:"varint,10028,opt,name=rto_deadline,json=rtoDeadline" json:"rto_deadline,omitempty"`
	CcFlags          uint32 `protobuf:"varint,10029,opt,name=cc_flags,json=ccFlags" json:"cc_flags,omitempty"`
	IdleDeadline     uint32 `protobuf:"varint,10030,opt,name=idle_deadline,json=idleDeadline" json:"idle_deadline,omitempty"`
	WindowFullCnt    uint32 `protobuf:"varint,10031,opt,name=window_full_cnt,json=windowFullCnt" json:"window_full_cnt,omitempty"`
	OoqRx2TxPi       uint32 `protobuf:"varint,10032,opt,name=ooq_rx2tx_pi,json=ooqRx2txPi" json:"ooq_rx2tx_pi,omitempty"`
	OoqRx2TxCi       uint32 `protobuf:"varint,10033,opt,name=ooq_rx2tx_ci,json=ooqRx2txCi" json:"ooq_rx2tx_ci,omitempty"`
	RetxCnt          uint32 `protobuf:"varint,10034,opt,name=retx_cnt,json=retxCnt" json:"retx_cnt,omitempty"`
	WindowUpdatePi   uint32 `protobuf:"varint,10035,opt,name=window_update_pi,json=windowUpdatePi" json:"window_update_pi,omitempty"`
	WindowUpdateCi   uint32 `protobuf:"varint,10036,opt,name=window_update_ci,json=windowUpdateCi" json:"window_update_ci,omitempty"`
}

func (m *TcpCbStats) Reset()                    { *m = TcpCbStats{} }
func (m *TcpCbStats) String() string            { return proto.CompactTextString(m) }
func (*TcpCbStats) ProtoMessage()               {}
func (*TcpCbStats) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{52} }

func (m *TcpCbStats) GetBytesRcvd() uint64 {
	if m != nil {
		return m.BytesRcvd
	}
	return 0
}

func (m *TcpCbStats) GetPktsRcvd() uint64 {
	if m != nil {
		return m.PktsRcvd
	}
	return 0
}

func (m *TcpCbStats) GetBytesAcked() uint64 {
	if m != nil {
		return m.BytesAcked
	}
	return 0
}

func (m *TcpCbStats) GetPureAcksRcvd() uint64 {
	if m != nil {
		return m.PureAcksRcvd
	}
	return 0
}

func (m *TcpCbStats) GetDupAcksRcvd() uint64 {
	if m != nil {
		return m.DupAcksRcvd
	}
	return 0
}

func (m *TcpCbStats) GetSlowPathCnt() uint64 {
	if m != nil {
		return m.SlowPathCnt
	}
	return 0
}

func (m *TcpCbStats) GetSerqFullCnt() uint64 {
	if m != nil {
		return m.SerqFullCnt
	}
	return 0
}

func (m *TcpCbStats) GetOooCnt() uint64 {
	if m != nil {
		return m.OooCnt
	}
	return 0
}

func (m *TcpCbStats) GetRxDropCnt() uint64 {
	if m != nil {
		return m.RxDropCnt
	}
	return 0
}

func (m *TcpCbStats) GetBytesSent() uint64 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

func (m *TcpCbStats) GetPktsSent() uint64 {
	if m != nil {
		return m.PktsSent
	}
	return 0
}

func (m *TcpCbStats) GetPureAcksSent() uint64 {
	if m != nil {
		return m.PureAcksSent
	}
	return 0
}

func (m *TcpCbStats) GetSesqPi() uint32 {
	if m != nil {
		return m.SesqPi
	}
	return 0
}

func (m *TcpCbStats) GetSesqCi() uint32 {
	if m != nil {
		return m.SesqCi
	}
	return 0
}

func (m *TcpCbStats) GetSendAckPi() uint32 {
	if m != nil {
		return m.SendAckPi
	}
	return 0
}

func (m *TcpCbStats) GetSendAckCi() uint32 {
	if m != nil {
		return m.SendAckCi
	}
	return 0
}

func (m *TcpCbStats) GetFastTimerPi() uint32 {
	if m != nil {
		return m.FastTimerPi
	}
	return 0
}

func (m *TcpCbStats) GetFastTimerCi() uint32 {
	if m != nil {
		return m.FastTimerCi
	}
	return 0
}

func (m *TcpCbStats) GetDelAckPi() uint32 {
	if m != nil {
		return m.DelAckPi
	}
	return 0
}

func (m *TcpCbStats) GetDelAckCi() uint32 {
	if m != nil {
		return m.DelAckCi
	}
	return 0
}

func (m *TcpCbStats) GetAsesqPi() uint32 {
	if m != nil {
		return m.AsesqPi
	}
	return 0
}

func (m *TcpCbStats) GetAsesqCi() uint32 {
	if m != nil {
		return m.AsesqCi
	}
	return 0
}

func (m *TcpCbStats) GetPendingTxPi() uint32 {
	if m != nil {
		return m.PendingTxPi
	}
	return 0
}

func (m *TcpCbStats) GetPendingTxCi() uint32 {
	if m != nil {
		return m.PendingTxCi
	}
	return 0
}

func (m *TcpCbStats) GetFastRetransPi() uint32 {
	if m != nil {
		return m.FastRetransPi
	}
	return 0
}

func (m *TcpCbStats) GetFastRetransCi() uint32 {
	if m != nil {
		return m.FastRetransCi
	}
	return 0
}

func (m *TcpCbStats) GetCleanRetxPi() uint32 {
	if m != nil {
		return m.CleanRetxPi
	}
	return 0
}

func (m *TcpCbStats) GetCleanRetxCi() uint32 {
	if m != nil {
		return m.CleanRetxCi
	}
	return 0
}

func (m *TcpCbStats) GetPacketsOut() uint32 {
	if m != nil {
		return m.PacketsOut
	}
	return 0
}

func (m *TcpCbStats) GetSesqTxCi() uint32 {
	if m != nil {
		return m.SesqTxCi
	}
	return 0
}

func (m *TcpCbStats) GetSesqRetxCi() uint32 {
	if m != nil {
		return m.SesqRetxCi
	}
	return 0
}

func (m *TcpCbStats) GetAsesqRetxCi() uint32 {
	if m != nil {
		return m.AsesqRetxCi
	}
	return 0
}

func (m *TcpCbStats) GetTxRingPi() uint32 {
	if m != nil {
		return m.TxRingPi
	}
	return 0
}

func (m *TcpCbStats) GetPartialPktAckCnt() uint32 {
	if m != nil {
		return m.PartialPktAckCnt
	}
	return 0
}

func (m *TcpCbStats) GetAtoDeadline() uint32 {
	if m != nil {
		return m.AtoDeadline
	}
	return 0
}

func (m *TcpCbStats) GetRtoDeadline() uint32 {
	if m != nil {
		return m.RtoDeadline
	}
	return 0
}

func (m *TcpCbStats) GetCcFlags() uint32 {
	if m != nil {
		return m.CcFlags
	}
	return 0
}

func (m *TcpCbStats) GetIdleDeadline() uint32 {
	if m != nil {
		return m.IdleDeadline
	}
	return 0
}

func (m *TcpCbStats) GetWindowFullCnt() uint32 {
	if m != nil {
		return m.WindowFullCnt
	}
	return 0
}

func (m *TcpCbStats) GetOoqRx2TxPi() uint32 {
	if m != nil {
		return m.OoqRx2TxPi
	}
	return 0
}

func (m *TcpCbStats) GetOoqRx2TxCi() uint32 {
	if m != nil {
		return m.OoqRx2TxCi
	}
	return 0
}

func (m *TcpCbStats) GetRetxCnt() uint32 {
	if m != nil {
		return m.RetxCnt
	}
	return 0
}

func (m *TcpCbStats) GetWindowUpdatePi() uint32 {
	if m != nil {
		return m.WindowUpdatePi
	}
	return 0
}

func (m *TcpCbStats) GetWindowUpdateCi() uint32 {
	if m != nil {
		return m.WindowUpdateCi
	}
	return 0
}

// TcpCbGetResponse captures all the information about a tcpcb
// only if api_status indicates success, other fields are valid
type TcpCbGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *TcpCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *TcpCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *TcpCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *TcpCbGetResponse) Reset()                    { *m = TcpCbGetResponse{} }
func (m *TcpCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetResponse) ProtoMessage()               {}
func (*TcpCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{53} }

func (m *TcpCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpCbGetResponse) GetSpec() *TcpCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TcpCbGetResponse) GetStatus() *TcpCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TcpCbGetResponse) GetStats() *TcpCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// TcpCbGetResponseMsg is batched response to TcpCbGetRequestMsg
type TcpCbGetResponseMsg struct {
	Response []*TcpCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TcpCbGetResponseMsg) Reset()                    { *m = TcpCbGetResponseMsg{} }
func (m *TcpCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetResponseMsg) ProtoMessage()               {}
func (*TcpCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{54} }

func (m *TcpCbGetResponseMsg) GetResponse() []*TcpCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TlsCbKeyHandle is used to operate on a tlscb either by its key or handle
type TlsCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*TlsCbKeyHandle_TlscbId
	//	*TlsCbKeyHandle_TlscbHandle
	KeyOrHandle isTlsCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *TlsCbKeyHandle) Reset()                    { *m = TlsCbKeyHandle{} }
func (m *TlsCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*TlsCbKeyHandle) ProtoMessage()               {}
func (*TlsCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{55} }

type isTlsCbKeyHandle_KeyOrHandle interface{ isTlsCbKeyHandle_KeyOrHandle() }

type TlsCbKeyHandle_TlscbId struct {
	TlscbId uint32 `protobuf:"varint,1,opt,name=tlscb_id,json=tlscbId,oneof"`
}
type TlsCbKeyHandle_TlscbHandle struct {
	TlscbHandle uint64 `protobuf:"fixed64,2,opt,name=tlscb_handle,json=tlscbHandle,oneof"`
}

func (*TlsCbKeyHandle_TlscbId) isTlsCbKeyHandle_KeyOrHandle()     {}
func (*TlsCbKeyHandle_TlscbHandle) isTlsCbKeyHandle_KeyOrHandle() {}

func (m *TlsCbKeyHandle) GetKeyOrHandle() isTlsCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TlsCbKeyHandle) GetTlscbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*TlsCbKeyHandle_TlscbId); ok {
		return x.TlscbId
	}
	return 0
}

func (m *TlsCbKeyHandle) GetTlscbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*TlsCbKeyHandle_TlscbHandle); ok {
		return x.TlscbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TlsCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TlsCbKeyHandle_OneofMarshaler, _TlsCbKeyHandle_OneofUnmarshaler, _TlsCbKeyHandle_OneofSizer, []interface{}{
		(*TlsCbKeyHandle_TlscbId)(nil),
		(*TlsCbKeyHandle_TlscbHandle)(nil),
	}
}

func _TlsCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TlsCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TlsCbKeyHandle_TlscbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TlscbId))
	case *TlsCbKeyHandle_TlscbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.TlscbHandle))
	case nil:
	default:
		return fmt.Errorf("TlsCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _TlsCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TlsCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.tlscb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &TlsCbKeyHandle_TlscbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.tlscb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &TlsCbKeyHandle_TlscbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _TlsCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TlsCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TlsCbKeyHandle_TlscbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TlscbId))
	case *TlsCbKeyHandle_TlscbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TlsCbSpec captures all the tlscb level configuration
type TlsCbSpec struct {
	KeyOrHandle             *TlsCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	NicDecHead              uint32          `protobuf:"varint,2,opt,name=nic_dec_head,json=nicDecHead" json:"nic_dec_head,omitempty"`
	NicDecTail              uint32          `protobuf:"varint,3,opt,name=nic_dec_tail,json=nicDecTail" json:"nic_dec_tail,omitempty"`
	Command                 uint32          `protobuf:"varint,4,opt,name=command" json:"command,omitempty"`
	DebugDol                uint32          `protobuf:"varint,5,opt,name=debug_dol,json=debugDol" json:"debug_dol,omitempty"`
	SerqPi                  uint32          `protobuf:"varint,6,opt,name=serq_pi,json=serqPi" json:"serq_pi,omitempty"`
	SerqCi                  uint32          `protobuf:"varint,7,opt,name=serq_ci,json=serqCi" json:"serq_ci,omitempty"`
	BsqPi                   uint32          `protobuf:"varint,8,opt,name=bsq_pi,json=bsqPi" json:"bsq_pi,omitempty"`
	BsqCi                   uint32          `protobuf:"varint,9,opt,name=bsq_ci,json=bsqCi" json:"bsq_ci,omitempty"`
	CryptoKeyIdx            uint32          `protobuf:"varint,10,opt,name=crypto_key_idx,json=cryptoKeyIdx" json:"crypto_key_idx,omitempty"`
	SerqBase                uint32          `protobuf:"varint,11,opt,name=serq_base,json=serqBase" json:"serq_base,omitempty"`
	SesqBase                uint32          `protobuf:"varint,12,opt,name=sesq_base,json=sesqBase" json:"sesq_base,omitempty"`
	TnmdprAlloc             uint64          `protobuf:"fixed64,13,opt,name=tnmdpr_alloc,json=tnmdprAlloc" json:"tnmdpr_alloc,omitempty"`
	RnmdprFree              uint64          `protobuf:"fixed64,14,opt,name=rnmdpr_free,json=rnmdprFree" json:"rnmdpr_free,omitempty"`
	EncRequests             uint64          `protobuf:"fixed64,15,opt,name=enc_requests,json=encRequests" json:"enc_requests,omitempty"`
	EncCompletions          uint64          `protobuf:"fixed64,16,opt,name=enc_completions,json=encCompletions" json:"enc_completions,omitempty"`
	EncFailures             uint64          `protobuf:"fixed64,17,opt,name=enc_failures,json=encFailures" json:"enc_failures,omitempty"`
	DecRequests             uint64          `protobuf:"fixed64,18,opt,name=dec_requests,json=decRequests" json:"dec_requests,omitempty"`
	DecCompletions          uint64          `protobuf:"fixed64,19,opt,name=dec_completions,json=decCompletions" json:"dec_completions,omitempty"`
	DecFailures             uint64          `protobuf:"fixed64,20,opt,name=dec_failures,json=decFailures" json:"dec_failures,omitempty"`
	Salt                    uint32          `protobuf:"varint,21,opt,name=salt" json:"salt,omitempty"`
	ExplicitIv              uint64          `protobuf:"varint,22,opt,name=explicit_iv,json=explicitIv" json:"explicit_iv,omitempty"`
	PreDebugStage0_7Thread  uint32          `protobuf:"varint,23,opt,name=pre_debug_stage0_7_thread,json=preDebugStage07Thread" json:"pre_debug_stage0_7_thread,omitempty"`
	PostDebugStage0_7Thread uint32          `protobuf:"varint,24,opt,name=post_debug_stage0_7_thread,json=postDebugStage07Thread" json:"post_debug_stage0_7_thread,omitempty"`
	IsDecryptFlow           bool            `protobuf:"varint,25,opt,name=is_decrypt_flow,json=isDecryptFlow" json:"is_decrypt_flow,omitempty"`
	OtherFid                uint32          `protobuf:"varint,26,opt,name=other_fid,json=otherFid" json:"other_fid,omitempty"`
	L7ProxyType             AppRedirType    `protobuf:"varint,27,opt,name=l7_proxy_type,json=l7ProxyType,enum=types.AppRedirType" json:"l7_proxy_type,omitempty"`
	CryptoHmacKeyIdx        uint32          `protobuf:"varint,28,opt,name=crypto_hmac_key_idx,json=cryptoHmacKeyIdx" json:"crypto_hmac_key_idx,omitempty"`
	MacRequests             uint64          `protobuf:"fixed64,29,opt,name=mac_requests,json=macRequests" json:"mac_requests,omitempty"`
	MacCompletions          uint64          `protobuf:"fixed64,30,opt,name=mac_completions,json=macCompletions" json:"mac_completions,omitempty"`
	MacFailures             uint64          `protobuf:"fixed64,31,opt,name=mac_failures,json=macFailures" json:"mac_failures,omitempty"`
	CpuId                   uint32          `protobuf:"varint,32,opt,name=cpu_id,json=cpuId" json:"cpu_id,omitempty"`
}

func (m *TlsCbSpec) Reset()                    { *m = TlsCbSpec{} }
func (m *TlsCbSpec) String() string            { return proto.CompactTextString(m) }
func (*TlsCbSpec) ProtoMessage()               {}
func (*TlsCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{56} }

func (m *TlsCbSpec) GetKeyOrHandle() *TlsCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TlsCbSpec) GetNicDecHead() uint32 {
	if m != nil {
		return m.NicDecHead
	}
	return 0
}

func (m *TlsCbSpec) GetNicDecTail() uint32 {
	if m != nil {
		return m.NicDecTail
	}
	return 0
}

func (m *TlsCbSpec) GetCommand() uint32 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *TlsCbSpec) GetDebugDol() uint32 {
	if m != nil {
		return m.DebugDol
	}
	return 0
}

func (m *TlsCbSpec) GetSerqPi() uint32 {
	if m != nil {
		return m.SerqPi
	}
	return 0
}

func (m *TlsCbSpec) GetSerqCi() uint32 {
	if m != nil {
		return m.SerqCi
	}
	return 0
}

func (m *TlsCbSpec) GetBsqPi() uint32 {
	if m != nil {
		return m.BsqPi
	}
	return 0
}

func (m *TlsCbSpec) GetBsqCi() uint32 {
	if m != nil {
		return m.BsqCi
	}
	return 0
}

func (m *TlsCbSpec) GetCryptoKeyIdx() uint32 {
	if m != nil {
		return m.CryptoKeyIdx
	}
	return 0
}

func (m *TlsCbSpec) GetSerqBase() uint32 {
	if m != nil {
		return m.SerqBase
	}
	return 0
}

func (m *TlsCbSpec) GetSesqBase() uint32 {
	if m != nil {
		return m.SesqBase
	}
	return 0
}

func (m *TlsCbSpec) GetTnmdprAlloc() uint64 {
	if m != nil {
		return m.TnmdprAlloc
	}
	return 0
}

func (m *TlsCbSpec) GetRnmdprFree() uint64 {
	if m != nil {
		return m.RnmdprFree
	}
	return 0
}

func (m *TlsCbSpec) GetEncRequests() uint64 {
	if m != nil {
		return m.EncRequests
	}
	return 0
}

func (m *TlsCbSpec) GetEncCompletions() uint64 {
	if m != nil {
		return m.EncCompletions
	}
	return 0
}

func (m *TlsCbSpec) GetEncFailures() uint64 {
	if m != nil {
		return m.EncFailures
	}
	return 0
}

func (m *TlsCbSpec) GetDecRequests() uint64 {
	if m != nil {
		return m.DecRequests
	}
	return 0
}

func (m *TlsCbSpec) GetDecCompletions() uint64 {
	if m != nil {
		return m.DecCompletions
	}
	return 0
}

func (m *TlsCbSpec) GetDecFailures() uint64 {
	if m != nil {
		return m.DecFailures
	}
	return 0
}

func (m *TlsCbSpec) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *TlsCbSpec) GetExplicitIv() uint64 {
	if m != nil {
		return m.ExplicitIv
	}
	return 0
}

func (m *TlsCbSpec) GetPreDebugStage0_7Thread() uint32 {
	if m != nil {
		return m.PreDebugStage0_7Thread
	}
	return 0
}

func (m *TlsCbSpec) GetPostDebugStage0_7Thread() uint32 {
	if m != nil {
		return m.PostDebugStage0_7Thread
	}
	return 0
}

func (m *TlsCbSpec) GetIsDecryptFlow() bool {
	if m != nil {
		return m.IsDecryptFlow
	}
	return false
}

func (m *TlsCbSpec) GetOtherFid() uint32 {
	if m != nil {
		return m.OtherFid
	}
	return 0
}

func (m *TlsCbSpec) GetL7ProxyType() AppRedirType {
	if m != nil {
		return m.L7ProxyType
	}
	return AppRedirType_APP_REDIR_TYPE_NONE
}

func (m *TlsCbSpec) GetCryptoHmacKeyIdx() uint32 {
	if m != nil {
		return m.CryptoHmacKeyIdx
	}
	return 0
}

func (m *TlsCbSpec) GetMacRequests() uint64 {
	if m != nil {
		return m.MacRequests
	}
	return 0
}

func (m *TlsCbSpec) GetMacCompletions() uint64 {
	if m != nil {
		return m.MacCompletions
	}
	return 0
}

func (m *TlsCbSpec) GetMacFailures() uint64 {
	if m != nil {
		return m.MacFailures
	}
	return 0
}

func (m *TlsCbSpec) GetCpuId() uint32 {
	if m != nil {
		return m.CpuId
	}
	return 0
}

// TlsCbRequestMsg is batched add or modify tlscb request
type TlsCbRequestMsg struct {
	Request []*TlsCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TlsCbRequestMsg) Reset()                    { *m = TlsCbRequestMsg{} }
func (m *TlsCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbRequestMsg) ProtoMessage()               {}
func (*TlsCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{57} }

func (m *TlsCbRequestMsg) GetRequest() []*TlsCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// TlsCbStatus is the operational status of a given tlscb
type TlsCbStatus struct {
	TlscbHandle uint64 `protobuf:"fixed64,1,opt,name=tlscb_handle,json=tlscbHandle" json:"tlscb_handle,omitempty"`
}

func (m *TlsCbStatus) Reset()                    { *m = TlsCbStatus{} }
func (m *TlsCbStatus) String() string            { return proto.CompactTextString(m) }
func (*TlsCbStatus) ProtoMessage()               {}
func (*TlsCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{58} }

func (m *TlsCbStatus) GetTlscbHandle() uint64 {
	if m != nil {
		return m.TlscbHandle
	}
	return 0
}

// TlsCbResponse is response to TlsCbSpec
type TlsCbResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	TlscbStatus *TlsCbStatus `protobuf:"bytes,2,opt,name=tlscb_status,json=tlscbStatus" json:"tlscb_status,omitempty"`
}

func (m *TlsCbResponse) Reset()                    { *m = TlsCbResponse{} }
func (m *TlsCbResponse) String() string            { return proto.CompactTextString(m) }
func (*TlsCbResponse) ProtoMessage()               {}
func (*TlsCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{59} }

func (m *TlsCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TlsCbResponse) GetTlscbStatus() *TlsCbStatus {
	if m != nil {
		return m.TlscbStatus
	}
	return nil
}

// TlsCbResponseMsg is batched response to TlsCbRequestMsg
type TlsCbResponseMsg struct {
	Response []*TlsCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TlsCbResponseMsg) Reset()                    { *m = TlsCbResponseMsg{} }
func (m *TlsCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbResponseMsg) ProtoMessage()               {}
func (*TlsCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{60} }

func (m *TlsCbResponseMsg) GetResponse() []*TlsCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TlsCbDeleteRequest is used to delete a tlscb
type TlsCbDeleteRequest struct {
	KeyOrHandle *TlsCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TlsCbDeleteRequest) Reset()                    { *m = TlsCbDeleteRequest{} }
func (m *TlsCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*TlsCbDeleteRequest) ProtoMessage()               {}
func (*TlsCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{61} }

func (m *TlsCbDeleteRequest) GetKeyOrHandle() *TlsCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TlsCbDeleteRequestMsg is used to delete a batch of tlscbs
type TlsCbDeleteRequestMsg struct {
	Request []*TlsCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TlsCbDeleteRequestMsg) Reset()                    { *m = TlsCbDeleteRequestMsg{} }
func (m *TlsCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbDeleteRequestMsg) ProtoMessage()               {}
func (*TlsCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{62} }

func (m *TlsCbDeleteRequestMsg) GetRequest() []*TlsCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TlsCbDeleteResponseMsg is batched response to TlsCbDeleteRequestMsg
type TlsCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *TlsCbDeleteResponseMsg) Reset()                    { *m = TlsCbDeleteResponseMsg{} }
func (m *TlsCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbDeleteResponseMsg) ProtoMessage()               {}
func (*TlsCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{63} }

func (m *TlsCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// TlsCbGetRequest is used to get information about a tlscb
type TlsCbGetRequest struct {
	KeyOrHandle *TlsCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TlsCbGetRequest) Reset()                    { *m = TlsCbGetRequest{} }
func (m *TlsCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*TlsCbGetRequest) ProtoMessage()               {}
func (*TlsCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{64} }

func (m *TlsCbGetRequest) GetKeyOrHandle() *TlsCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TlsCbGetRequestMsg is batched GET requests for tlscbs
type TlsCbGetRequestMsg struct {
	Request []*TlsCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TlsCbGetRequestMsg) Reset()                    { *m = TlsCbGetRequestMsg{} }
func (m *TlsCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbGetRequestMsg) ProtoMessage()               {}
func (*TlsCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{65} }

func (m *TlsCbGetRequestMsg) GetRequest() []*TlsCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TlsCbStats is the statistics object for each tlscb
type TlsCbStats struct {
}

func (m *TlsCbStats) Reset()                    { *m = TlsCbStats{} }
func (m *TlsCbStats) String() string            { return proto.CompactTextString(m) }
func (*TlsCbStats) ProtoMessage()               {}
func (*TlsCbStats) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{66} }

// TlsCbGetResponse captures all the information about a tlscb
// only if api_status indicates success, other fields are valid
type TlsCbGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *TlsCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *TlsCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *TlsCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *TlsCbGetResponse) Reset()                    { *m = TlsCbGetResponse{} }
func (m *TlsCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*TlsCbGetResponse) ProtoMessage()               {}
func (*TlsCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{67} }

func (m *TlsCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TlsCbGetResponse) GetSpec() *TlsCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TlsCbGetResponse) GetStatus() *TlsCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TlsCbGetResponse) GetStats() *TlsCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// TlsCbGetResponseMsg is batched response to TlsCbGetRequestMsg
type TlsCbGetResponseMsg struct {
	Response []*TlsCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TlsCbGetResponseMsg) Reset()                    { *m = TlsCbGetResponseMsg{} }
func (m *TlsCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbGetResponseMsg) ProtoMessage()               {}
func (*TlsCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{68} }

func (m *TlsCbGetResponseMsg) GetResponse() []*TlsCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// WRingKeyHandle is used to operate either by its key or handle
type WRingKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*WRingKeyHandle_WringId
	//	*WRingKeyHandle_WringHandle
	KeyOrHandle isWRingKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *WRingKeyHandle) Reset()                    { *m = WRingKeyHandle{} }
func (m *WRingKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*WRingKeyHandle) ProtoMessage()               {}
func (*WRingKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{69} }

type isWRingKeyHandle_KeyOrHandle interface{ isWRingKeyHandle_KeyOrHandle() }

type WRingKeyHandle_WringId struct {
	WringId uint32 `protobuf:"varint,1,opt,name=wring_id,json=wringId,oneof"`
}
type WRingKeyHandle_WringHandle struct {
	WringHandle uint64 `protobuf:"fixed64,2,opt,name=wring_handle,json=wringHandle,oneof"`
}

func (*WRingKeyHandle_WringId) isWRingKeyHandle_KeyOrHandle()     {}
func (*WRingKeyHandle_WringHandle) isWRingKeyHandle_KeyOrHandle() {}

func (m *WRingKeyHandle) GetKeyOrHandle() isWRingKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *WRingKeyHandle) GetWringId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*WRingKeyHandle_WringId); ok {
		return x.WringId
	}
	return 0
}

func (m *WRingKeyHandle) GetWringHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*WRingKeyHandle_WringHandle); ok {
		return x.WringHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*WRingKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _WRingKeyHandle_OneofMarshaler, _WRingKeyHandle_OneofUnmarshaler, _WRingKeyHandle_OneofSizer, []interface{}{
		(*WRingKeyHandle_WringId)(nil),
		(*WRingKeyHandle_WringHandle)(nil),
	}
}

func _WRingKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*WRingKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *WRingKeyHandle_WringId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.WringId))
	case *WRingKeyHandle_WringHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.WringHandle))
	case nil:
	default:
		return fmt.Errorf("WRingKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _WRingKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*WRingKeyHandle)
	switch tag {
	case 1: // key_or_handle.wring_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &WRingKeyHandle_WringId{uint32(x)}
		return true, err
	case 2: // key_or_handle.wring_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &WRingKeyHandle_WringHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _WRingKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*WRingKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *WRingKeyHandle_WringId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.WringId))
	case *WRingKeyHandle_WringHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// WRingSpec captures all the WRing level configuration
type WRingSpec struct {
	KeyOrHandle *WRingKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Type        WRingType       `protobuf:"varint,2,opt,name=type,enum=types.WRingType" json:"type,omitempty"`
	Pi          uint32          `protobuf:"varint,3,opt,name=pi" json:"pi,omitempty"`
	Ci          uint32          `protobuf:"varint,4,opt,name=ci" json:"ci,omitempty"`
}

func (m *WRingSpec) Reset()                    { *m = WRingSpec{} }
func (m *WRingSpec) String() string            { return proto.CompactTextString(m) }
func (*WRingSpec) ProtoMessage()               {}
func (*WRingSpec) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{70} }

func (m *WRingSpec) GetKeyOrHandle() *WRingKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *WRingSpec) GetType() WRingType {
	if m != nil {
		return m.Type
	}
	return WRingType_WRING_TYPE_NONE
}

func (m *WRingSpec) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *WRingSpec) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

// WRingRequestMsg is batched add or modify wring request
type WRingRequestMsg struct {
	Request []*WRingSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *WRingRequestMsg) Reset()                    { *m = WRingRequestMsg{} }
func (m *WRingRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingRequestMsg) ProtoMessage()               {}
func (*WRingRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{71} }

func (m *WRingRequestMsg) GetRequest() []*WRingSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// WRingStatus is the operational status of a given wring
type WRingStatus struct {
	WringHandle uint64 `protobuf:"fixed64,1,opt,name=wring_handle,json=wringHandle" json:"wring_handle,omitempty"`
}

func (m *WRingStatus) Reset()                    { *m = WRingStatus{} }
func (m *WRingStatus) String() string            { return proto.CompactTextString(m) }
func (*WRingStatus) ProtoMessage()               {}
func (*WRingStatus) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{72} }

func (m *WRingStatus) GetWringHandle() uint64 {
	if m != nil {
		return m.WringHandle
	}
	return 0
}

// WRingResponse is response to WRingSpec
type WRingResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	WringStatus *WRingStatus `protobuf:"bytes,2,opt,name=wring_status,json=wringStatus" json:"wring_status,omitempty"`
}

func (m *WRingResponse) Reset()                    { *m = WRingResponse{} }
func (m *WRingResponse) String() string            { return proto.CompactTextString(m) }
func (*WRingResponse) ProtoMessage()               {}
func (*WRingResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{73} }

func (m *WRingResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *WRingResponse) GetWringStatus() *WRingStatus {
	if m != nil {
		return m.WringStatus
	}
	return nil
}

// WRingResponseMsg is batched response to WRingRequestMsg
type WRingResponseMsg struct {
	Response []*WRingResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *WRingResponseMsg) Reset()                    { *m = WRingResponseMsg{} }
func (m *WRingResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingResponseMsg) ProtoMessage()               {}
func (*WRingResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{74} }

func (m *WRingResponseMsg) GetResponse() []*WRingResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// WRingDeleteRequest is used to delete a wring
type WRingDeleteRequest struct {
	KeyOrHandle *WRingKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *WRingDeleteRequest) Reset()                    { *m = WRingDeleteRequest{} }
func (m *WRingDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*WRingDeleteRequest) ProtoMessage()               {}
func (*WRingDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{75} }

func (m *WRingDeleteRequest) GetKeyOrHandle() *WRingKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// WRingDeleteRequestMsg is used to delete a batch of wrings
type WRingDeleteRequestMsg struct {
	Request []*WRingDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *WRingDeleteRequestMsg) Reset()                    { *m = WRingDeleteRequestMsg{} }
func (m *WRingDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingDeleteRequestMsg) ProtoMessage()               {}
func (*WRingDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{76} }

func (m *WRingDeleteRequestMsg) GetRequest() []*WRingDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// WRingDeleteResponseMsg is batched response to WRingDeleteRequestMsg
type WRingDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *WRingDeleteResponseMsg) Reset()                    { *m = WRingDeleteResponseMsg{} }
func (m *WRingDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingDeleteResponseMsg) ProtoMessage()               {}
func (*WRingDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{77} }

func (m *WRingDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// WRingGetRequest is used to get information about a wring
type WRingGetEntriesRequest struct {
	KeyOrHandle *WRingKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Type        WRingType       `protobuf:"varint,2,opt,name=type,enum=types.WRingType" json:"type,omitempty"`
	Index       uint32          `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
}

func (m *WRingGetEntriesRequest) Reset()                    { *m = WRingGetEntriesRequest{} }
func (m *WRingGetEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*WRingGetEntriesRequest) ProtoMessage()               {}
func (*WRingGetEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{78} }

func (m *WRingGetEntriesRequest) GetKeyOrHandle() *WRingKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *WRingGetEntriesRequest) GetType() WRingType {
	if m != nil {
		return m.Type
	}
	return WRingType_WRING_TYPE_NONE
}

func (m *WRingGetEntriesRequest) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

// WRingGetEntriesRequestMsg is batched GET requests for wrings
type WRingGetEntriesRequestMsg struct {
	Request []*WRingGetEntriesRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *WRingGetEntriesRequestMsg) Reset()                    { *m = WRingGetEntriesRequestMsg{} }
func (m *WRingGetEntriesRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingGetEntriesRequestMsg) ProtoMessage()               {}
func (*WRingGetEntriesRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{79} }

func (m *WRingGetEntriesRequestMsg) GetRequest() []*WRingGetEntriesRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// WRingStats is the statistics object for each wring
type WRingStats struct {
}

func (m *WRingStats) Reset()                    { *m = WRingStats{} }
func (m *WRingStats) String() string            { return proto.CompactTextString(m) }
func (*WRingStats) ProtoMessage()               {}
func (*WRingStats) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{80} }

type WRingBarcoGCMDescMsg struct {
	IlistAddr    uint64 `protobuf:"fixed64,1,opt,name=ilist_addr,json=ilistAddr" json:"ilist_addr,omitempty"`
	OlistAddr    uint64 `protobuf:"fixed64,2,opt,name=olist_addr,json=olistAddr" json:"olist_addr,omitempty"`
	Command      uint32 `protobuf:"varint,3,opt,name=command" json:"command,omitempty"`
	KeyDescIndex uint32 `protobuf:"varint,4,opt,name=key_desc_index,json=keyDescIndex" json:"key_desc_index,omitempty"`
	IvAddr       uint64 `protobuf:"fixed64,5,opt,name=iv_addr,json=ivAddr" json:"iv_addr,omitempty"`
	StatusAddr   uint64 `protobuf:"fixed64,6,opt,name=status_addr,json=statusAddr" json:"status_addr,omitempty"`
	DoorbellAddr uint64 `protobuf:"fixed64,7,opt,name=doorbell_addr,json=doorbellAddr" json:"doorbell_addr,omitempty"`
	DoorbellData uint64 `protobuf:"fixed64,8,opt,name=doorbell_data,json=doorbellData" json:"doorbell_data,omitempty"`
	Salt         uint32 `protobuf:"varint,9,opt,name=salt" json:"salt,omitempty"`
	ExplicitIv   uint64 `protobuf:"fixed64,10,opt,name=explicit_iv,json=explicitIv" json:"explicit_iv,omitempty"`
	HeaderSize   uint32 `protobuf:"varint,11,opt,name=header_size,json=headerSize" json:"header_size,omitempty"`
	BarcoStatus  uint32 `protobuf:"varint,12,opt,name=barco_status,json=barcoStatus" json:"barco_status,omitempty"`
}

func (m *WRingBarcoGCMDescMsg) Reset()                    { *m = WRingBarcoGCMDescMsg{} }
func (m *WRingBarcoGCMDescMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingBarcoGCMDescMsg) ProtoMessage()               {}
func (*WRingBarcoGCMDescMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{81} }

func (m *WRingBarcoGCMDescMsg) GetIlistAddr() uint64 {
	if m != nil {
		return m.IlistAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetOlistAddr() uint64 {
	if m != nil {
		return m.OlistAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetCommand() uint32 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetKeyDescIndex() uint32 {
	if m != nil {
		return m.KeyDescIndex
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetIvAddr() uint64 {
	if m != nil {
		return m.IvAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetStatusAddr() uint64 {
	if m != nil {
		return m.StatusAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetDoorbellAddr() uint64 {
	if m != nil {
		return m.DoorbellAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetDoorbellData() uint64 {
	if m != nil {
		return m.DoorbellData
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetExplicitIv() uint64 {
	if m != nil {
		return m.ExplicitIv
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetHeaderSize() uint32 {
	if m != nil {
		return m.HeaderSize
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetBarcoStatus() uint32 {
	if m != nil {
		return m.BarcoStatus
	}
	return 0
}

// WRingGetResponse captures all the information about a wring
// only if api_status indicates success, other fields are valid
type WRingGetEntriesResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *WRingSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Index     uint32       `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Status    *WRingStatus `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Stats     *WRingStats  `protobuf:"bytes,5,opt,name=stats" json:"stats,omitempty"`
	// Types that are valid to be assigned to WRingSlotInfo:
	//	*WRingGetEntriesResponse_Value
	//	*WRingGetEntriesResponse_BarcoGcmDesc
	//	*WRingGetEntriesResponse_Raw
	WRingSlotInfo isWRingGetEntriesResponse_WRingSlotInfo `protobuf_oneof:"WRingSlotInfo"`
}

func (m *WRingGetEntriesResponse) Reset()                    { *m = WRingGetEntriesResponse{} }
func (m *WRingGetEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*WRingGetEntriesResponse) ProtoMessage()               {}
func (*WRingGetEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{82} }

type isWRingGetEntriesResponse_WRingSlotInfo interface{ isWRingGetEntriesResponse_WRingSlotInfo() }

type WRingGetEntriesResponse_Value struct {
	Value uint64 `protobuf:"fixed64,6,opt,name=value,oneof"`
}
type WRingGetEntriesResponse_BarcoGcmDesc struct {
	BarcoGcmDesc *WRingBarcoGCMDescMsg `protobuf:"bytes,7,opt,name=barco_gcm_desc,json=barcoGcmDesc,oneof"`
}
type WRingGetEntriesResponse_Raw struct {
	Raw []byte `protobuf:"bytes,8,opt,name=raw,proto3,oneof"`
}

func (*WRingGetEntriesResponse_Value) isWRingGetEntriesResponse_WRingSlotInfo()        {}
func (*WRingGetEntriesResponse_BarcoGcmDesc) isWRingGetEntriesResponse_WRingSlotInfo() {}
func (*WRingGetEntriesResponse_Raw) isWRingGetEntriesResponse_WRingSlotInfo()          {}

func (m *WRingGetEntriesResponse) GetWRingSlotInfo() isWRingGetEntriesResponse_WRingSlotInfo {
	if m != nil {
		return m.WRingSlotInfo
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *WRingGetEntriesResponse) GetSpec() *WRingSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *WRingGetEntriesResponse) GetStatus() *WRingStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetStats() *WRingStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetValue() uint64 {
	if x, ok := m.GetWRingSlotInfo().(*WRingGetEntriesResponse_Value); ok {
		return x.Value
	}
	return 0
}

func (m *WRingGetEntriesResponse) GetBarcoGcmDesc() *WRingBarcoGCMDescMsg {
	if x, ok := m.GetWRingSlotInfo().(*WRingGetEntriesResponse_BarcoGcmDesc); ok {
		return x.BarcoGcmDesc
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetRaw() []byte {
	if x, ok := m.GetWRingSlotInfo().(*WRingGetEntriesResponse_Raw); ok {
		return x.Raw
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*WRingGetEntriesResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _WRingGetEntriesResponse_OneofMarshaler, _WRingGetEntriesResponse_OneofUnmarshaler, _WRingGetEntriesResponse_OneofSizer, []interface{}{
		(*WRingGetEntriesResponse_Value)(nil),
		(*WRingGetEntriesResponse_BarcoGcmDesc)(nil),
		(*WRingGetEntriesResponse_Raw)(nil),
	}
}

func _WRingGetEntriesResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*WRingGetEntriesResponse)
	// WRingSlotInfo
	switch x := m.WRingSlotInfo.(type) {
	case *WRingGetEntriesResponse_Value:
		b.EncodeVarint(6<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.Value))
	case *WRingGetEntriesResponse_BarcoGcmDesc:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BarcoGcmDesc); err != nil {
			return err
		}
	case *WRingGetEntriesResponse_Raw:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Raw)
	case nil:
	default:
		return fmt.Errorf("WRingGetEntriesResponse.WRingSlotInfo has unexpected type %T", x)
	}
	return nil
}

func _WRingGetEntriesResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*WRingGetEntriesResponse)
	switch tag {
	case 6: // WRingSlotInfo.value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.WRingSlotInfo = &WRingGetEntriesResponse_Value{x}
		return true, err
	case 7: // WRingSlotInfo.barco_gcm_desc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WRingBarcoGCMDescMsg)
		err := b.DecodeMessage(msg)
		m.WRingSlotInfo = &WRingGetEntriesResponse_BarcoGcmDesc{msg}
		return true, err
	case 8: // WRingSlotInfo.raw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.WRingSlotInfo = &WRingGetEntriesResponse_Raw{x}
		return true, err
	default:
		return false, nil
	}
}

func _WRingGetEntriesResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*WRingGetEntriesResponse)
	// WRingSlotInfo
	switch x := m.WRingSlotInfo.(type) {
	case *WRingGetEntriesResponse_Value:
		n += proto.SizeVarint(6<<3 | proto.WireFixed64)
		n += 8
	case *WRingGetEntriesResponse_BarcoGcmDesc:
		s := proto.Size(x.BarcoGcmDesc)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *WRingGetEntriesResponse_Raw:
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Raw)))
		n += len(x.Raw)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// WRingGetEntriesResponseMsg is batched response to WRingGetEntriesRequestMsg
type WRingGetEntriesResponseMsg struct {
	Response []*WRingGetEntriesResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *WRingGetEntriesResponseMsg) Reset()                    { *m = WRingGetEntriesResponseMsg{} }
func (m *WRingGetEntriesResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingGetEntriesResponseMsg) ProtoMessage()               {}
func (*WRingGetEntriesResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{83} }

func (m *WRingGetEntriesResponseMsg) GetResponse() []*WRingGetEntriesResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// WRingGetMetaResponseMsg captures all the information about a wring metadata
// only if api_status indicates success, other fields are valid
type WRingGetMetaResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *WRingSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *WRingGetMetaResponse) Reset()                    { *m = WRingGetMetaResponse{} }
func (m *WRingGetMetaResponse) String() string            { return proto.CompactTextString(m) }
func (*WRingGetMetaResponse) ProtoMessage()               {}
func (*WRingGetMetaResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{84} }

func (m *WRingGetMetaResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *WRingGetMetaResponse) GetSpec() *WRingSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// WRingGetMetaResponse is batched response to WRingGetMetaResponseMsg
type WRingGetMetaResponseMsg struct {
	Response []*WRingGetMetaResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *WRingGetMetaResponseMsg) Reset()                    { *m = WRingGetMetaResponseMsg{} }
func (m *WRingGetMetaResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingGetMetaResponseMsg) ProtoMessage()               {}
func (*WRingGetMetaResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{85} }

func (m *WRingGetMetaResponseMsg) GetResponse() []*WRingGetMetaResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// WRingSetMetaResponseMsg captures all the information about a wring metadata
// only if api_status indicates success, other fields are valid
type WRingSetMetaResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *WRingSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *WRingSetMetaResponse) Reset()                    { *m = WRingSetMetaResponse{} }
func (m *WRingSetMetaResponse) String() string            { return proto.CompactTextString(m) }
func (*WRingSetMetaResponse) ProtoMessage()               {}
func (*WRingSetMetaResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{86} }

func (m *WRingSetMetaResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *WRingSetMetaResponse) GetSpec() *WRingSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// WRingSetMetaResponse is batched response to WRingSetMetaResponseMsg
type WRingSetMetaResponseMsg struct {
	Response []*WRingSetMetaResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *WRingSetMetaResponseMsg) Reset()                    { *m = WRingSetMetaResponseMsg{} }
func (m *WRingSetMetaResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingSetMetaResponseMsg) ProtoMessage()               {}
func (*WRingSetMetaResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{87} }

func (m *WRingSetMetaResponseMsg) GetResponse() []*WRingSetMetaResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type GetOpaqueTagAddrRequest struct {
	RingType BarcoRings `protobuf:"varint,1,opt,name=ring_type,json=ringType,enum=types.BarcoRings" json:"ring_type,omitempty"`
}

func (m *GetOpaqueTagAddrRequest) Reset()                    { *m = GetOpaqueTagAddrRequest{} }
func (m *GetOpaqueTagAddrRequest) String() string            { return proto.CompactTextString(m) }
func (*GetOpaqueTagAddrRequest) ProtoMessage()               {}
func (*GetOpaqueTagAddrRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{88} }

func (m *GetOpaqueTagAddrRequest) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

type GetOpaqueTagAddrRequestMsg struct {
	Request []*GetOpaqueTagAddrRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *GetOpaqueTagAddrRequestMsg) Reset()                    { *m = GetOpaqueTagAddrRequestMsg{} }
func (m *GetOpaqueTagAddrRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*GetOpaqueTagAddrRequestMsg) ProtoMessage()               {}
func (*GetOpaqueTagAddrRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{89} }

func (m *GetOpaqueTagAddrRequestMsg) GetRequest() []*GetOpaqueTagAddrRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type GetOpaqueTagAddrResponse struct {
	OpaqueTagAddr uint64    `protobuf:"varint,1,opt,name=opaque_tag_addr,json=opaqueTagAddr" json:"opaque_tag_addr,omitempty"`
	ApiStatus     ApiStatus `protobuf:"varint,2,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *GetOpaqueTagAddrResponse) Reset()                    { *m = GetOpaqueTagAddrResponse{} }
func (m *GetOpaqueTagAddrResponse) String() string            { return proto.CompactTextString(m) }
func (*GetOpaqueTagAddrResponse) ProtoMessage()               {}
func (*GetOpaqueTagAddrResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{90} }

func (m *GetOpaqueTagAddrResponse) GetOpaqueTagAddr() uint64 {
	if m != nil {
		return m.OpaqueTagAddr
	}
	return 0
}

func (m *GetOpaqueTagAddrResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type GetOpaqueTagAddrResponseMsg struct {
	Response []*GetOpaqueTagAddrResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *GetOpaqueTagAddrResponseMsg) Reset()                    { *m = GetOpaqueTagAddrResponseMsg{} }
func (m *GetOpaqueTagAddrResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*GetOpaqueTagAddrResponseMsg) ProtoMessage()               {}
func (*GetOpaqueTagAddrResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{91} }

func (m *GetOpaqueTagAddrResponseMsg) GetResponse() []*GetOpaqueTagAddrResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// BarcoGetReqDescrEntryRequest - get request descriptor entry from a barco ring slot
type BarcoGetReqDescrEntryRequest struct {
	RingType  BarcoRings `protobuf:"varint,1,opt,name=ring_type,json=ringType,enum=types.BarcoRings" json:"ring_type,omitempty"`
	SlotIndex uint32     `protobuf:"varint,2,opt,name=slot_index,json=slotIndex" json:"slot_index,omitempty"`
}

func (m *BarcoGetReqDescrEntryRequest) Reset()                    { *m = BarcoGetReqDescrEntryRequest{} }
func (m *BarcoGetReqDescrEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*BarcoGetReqDescrEntryRequest) ProtoMessage()               {}
func (*BarcoGetReqDescrEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{92} }

func (m *BarcoGetReqDescrEntryRequest) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

func (m *BarcoGetReqDescrEntryRequest) GetSlotIndex() uint32 {
	if m != nil {
		return m.SlotIndex
	}
	return 0
}

// BarcoGetReqDescrEntryRequestMsg is batched GET requests for barco rings
type BarcoGetReqDescrEntryRequestMsg struct {
	Request []*BarcoGetReqDescrEntryRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *BarcoGetReqDescrEntryRequestMsg) Reset()         { *m = BarcoGetReqDescrEntryRequestMsg{} }
func (m *BarcoGetReqDescrEntryRequestMsg) String() string { return proto.CompactTextString(m) }
func (*BarcoGetReqDescrEntryRequestMsg) ProtoMessage()    {}
func (*BarcoGetReqDescrEntryRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{93}
}

func (m *BarcoGetReqDescrEntryRequestMsg) GetRequest() []*BarcoGetReqDescrEntryRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// Required fields of the Barco Symmetric crypto Request descriptor
type BarcoSymmReqDescrMsg struct {
	IlistAddr          uint64 `protobuf:"fixed64,1,opt,name=ilist_addr,json=ilistAddr" json:"ilist_addr,omitempty"`
	OlistAddr          uint64 `protobuf:"fixed64,2,opt,name=olist_addr,json=olistAddr" json:"olist_addr,omitempty"`
	Command            uint32 `protobuf:"varint,3,opt,name=command" json:"command,omitempty"`
	KeyDescIndex       uint32 `protobuf:"varint,4,opt,name=key_desc_index,json=keyDescIndex" json:"key_desc_index,omitempty"`
	IvAddr             uint64 `protobuf:"fixed64,5,opt,name=iv_addr,json=ivAddr" json:"iv_addr,omitempty"`
	StatusAddr         uint64 `protobuf:"fixed64,6,opt,name=status_addr,json=statusAddr" json:"status_addr,omitempty"`
	DoorbellAddr       uint64 `protobuf:"fixed64,7,opt,name=doorbell_addr,json=doorbellAddr" json:"doorbell_addr,omitempty"`
	DoorbellData       uint64 `protobuf:"fixed64,8,opt,name=doorbell_data,json=doorbellData" json:"doorbell_data,omitempty"`
	Salt               uint32 `protobuf:"varint,9,opt,name=salt" json:"salt,omitempty"`
	ExplicitIv         uint64 `protobuf:"fixed64,10,opt,name=explicit_iv,json=explicitIv" json:"explicit_iv,omitempty"`
	HeaderSize         uint32 `protobuf:"varint,11,opt,name=header_size,json=headerSize" json:"header_size,omitempty"`
	BarcoStatus        uint32 `protobuf:"varint,12,opt,name=barco_status,json=barcoStatus" json:"barco_status,omitempty"`
	SecondKeyDescIndex uint32 `protobuf:"varint,13,opt,name=second_key_desc_index,json=secondKeyDescIndex" json:"second_key_desc_index,omitempty"`
}

func (m *BarcoSymmReqDescrMsg) Reset()                    { *m = BarcoSymmReqDescrMsg{} }
func (m *BarcoSymmReqDescrMsg) String() string            { return proto.CompactTextString(m) }
func (*BarcoSymmReqDescrMsg) ProtoMessage()               {}
func (*BarcoSymmReqDescrMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{94} }

func (m *BarcoSymmReqDescrMsg) GetIlistAddr() uint64 {
	if m != nil {
		return m.IlistAddr
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetOlistAddr() uint64 {
	if m != nil {
		return m.OlistAddr
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetCommand() uint32 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetKeyDescIndex() uint32 {
	if m != nil {
		return m.KeyDescIndex
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetIvAddr() uint64 {
	if m != nil {
		return m.IvAddr
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetStatusAddr() uint64 {
	if m != nil {
		return m.StatusAddr
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetDoorbellAddr() uint64 {
	if m != nil {
		return m.DoorbellAddr
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetDoorbellData() uint64 {
	if m != nil {
		return m.DoorbellData
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetExplicitIv() uint64 {
	if m != nil {
		return m.ExplicitIv
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetHeaderSize() uint32 {
	if m != nil {
		return m.HeaderSize
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetBarcoStatus() uint32 {
	if m != nil {
		return m.BarcoStatus
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetSecondKeyDescIndex() uint32 {
	if m != nil {
		return m.SecondKeyDescIndex
	}
	return 0
}

// Required fields of the Barco ASymmetric crypto Request descriptor
type BarcoASymReqDescrMsg struct {
	IlistAddr      uint64 `protobuf:"fixed64,1,opt,name=ilist_addr,json=ilistAddr" json:"ilist_addr,omitempty"`
	OlistAddr      uint64 `protobuf:"fixed64,2,opt,name=olist_addr,json=olistAddr" json:"olist_addr,omitempty"`
	KeyDescIndex   uint32 `protobuf:"varint,3,opt,name=key_desc_index,json=keyDescIndex" json:"key_desc_index,omitempty"`
	StatusAddr     uint64 `protobuf:"fixed64,4,opt,name=status_addr,json=statusAddr" json:"status_addr,omitempty"`
	OpaqueTagValue uint32 `protobuf:"varint,5,opt,name=opaque_tag_value,json=opaqueTagValue" json:"opaque_tag_value,omitempty"`
	OpaqueTagWrEn  uint32 `protobuf:"varint,6,opt,name=opaque_tag_wr_en,json=opaqueTagWrEn" json:"opaque_tag_wr_en,omitempty"`
	FlagA          uint32 `protobuf:"varint,7,opt,name=flag_a,json=flagA" json:"flag_a,omitempty"`
	FlagB          uint32 `protobuf:"varint,8,opt,name=flag_b,json=flagB" json:"flag_b,omitempty"`
}

func (m *BarcoASymReqDescrMsg) Reset()                    { *m = BarcoASymReqDescrMsg{} }
func (m *BarcoASymReqDescrMsg) String() string            { return proto.CompactTextString(m) }
func (*BarcoASymReqDescrMsg) ProtoMessage()               {}
func (*BarcoASymReqDescrMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{95} }

func (m *BarcoASymReqDescrMsg) GetIlistAddr() uint64 {
	if m != nil {
		return m.IlistAddr
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetOlistAddr() uint64 {
	if m != nil {
		return m.OlistAddr
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetKeyDescIndex() uint32 {
	if m != nil {
		return m.KeyDescIndex
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetStatusAddr() uint64 {
	if m != nil {
		return m.StatusAddr
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetOpaqueTagValue() uint32 {
	if m != nil {
		return m.OpaqueTagValue
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetOpaqueTagWrEn() uint32 {
	if m != nil {
		return m.OpaqueTagWrEn
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetFlagA() uint32 {
	if m != nil {
		return m.FlagA
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetFlagB() uint32 {
	if m != nil {
		return m.FlagB
	}
	return 0
}

// BarcoGetReqDescrEntryResponse returns the barco request descriptor content
// only if api_status indicates success, other fields are valid
type BarcoGetReqDescrEntryResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	RingType  BarcoRings `protobuf:"varint,2,opt,name=ring_type,json=ringType,enum=types.BarcoRings" json:"ring_type,omitempty"`
	SlotIndex uint32     `protobuf:"varint,3,opt,name=slot_index,json=slotIndex" json:"slot_index,omitempty"`
	// Types that are valid to be assigned to ReqDescrMsg:
	//	*BarcoGetReqDescrEntryResponse_SymmReqDescr
	//	*BarcoGetReqDescrEntryResponse_AsymReqDescr
	ReqDescrMsg isBarcoGetReqDescrEntryResponse_ReqDescrMsg `protobuf_oneof:"ReqDescrMsg"`
}

func (m *BarcoGetReqDescrEntryResponse) Reset()                    { *m = BarcoGetReqDescrEntryResponse{} }
func (m *BarcoGetReqDescrEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*BarcoGetReqDescrEntryResponse) ProtoMessage()               {}
func (*BarcoGetReqDescrEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{96} }

type isBarcoGetReqDescrEntryResponse_ReqDescrMsg interface{ isBarcoGetReqDescrEntryResponse_ReqDescrMsg() }

type BarcoGetReqDescrEntryResponse_SymmReqDescr struct {
	SymmReqDescr *BarcoSymmReqDescrMsg `protobuf:"bytes,4,opt,name=symm_req_descr,json=symmReqDescr,oneof"`
}
type BarcoGetReqDescrEntryResponse_AsymReqDescr struct {
	AsymReqDescr *BarcoASymReqDescrMsg `protobuf:"bytes,5,opt,name=asym_req_descr,json=asymReqDescr,oneof"`
}

func (*BarcoGetReqDescrEntryResponse_SymmReqDescr) isBarcoGetReqDescrEntryResponse_ReqDescrMsg() {}
func (*BarcoGetReqDescrEntryResponse_AsymReqDescr) isBarcoGetReqDescrEntryResponse_ReqDescrMsg() {}

func (m *BarcoGetReqDescrEntryResponse) GetReqDescrMsg() isBarcoGetReqDescrEntryResponse_ReqDescrMsg {
	if m != nil {
		return m.ReqDescrMsg
	}
	return nil
}

func (m *BarcoGetReqDescrEntryResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *BarcoGetReqDescrEntryResponse) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

func (m *BarcoGetReqDescrEntryResponse) GetSlotIndex() uint32 {
	if m != nil {
		return m.SlotIndex
	}
	return 0
}

func (m *BarcoGetReqDescrEntryResponse) GetSymmReqDescr() *BarcoSymmReqDescrMsg {
	if x, ok := m.GetReqDescrMsg().(*BarcoGetReqDescrEntryResponse_SymmReqDescr); ok {
		return x.SymmReqDescr
	}
	return nil
}

func (m *BarcoGetReqDescrEntryResponse) GetAsymReqDescr() *BarcoASymReqDescrMsg {
	if x, ok := m.GetReqDescrMsg().(*BarcoGetReqDescrEntryResponse_AsymReqDescr); ok {
		return x.AsymReqDescr
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BarcoGetReqDescrEntryResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BarcoGetReqDescrEntryResponse_OneofMarshaler, _BarcoGetReqDescrEntryResponse_OneofUnmarshaler, _BarcoGetReqDescrEntryResponse_OneofSizer, []interface{}{
		(*BarcoGetReqDescrEntryResponse_SymmReqDescr)(nil),
		(*BarcoGetReqDescrEntryResponse_AsymReqDescr)(nil),
	}
}

func _BarcoGetReqDescrEntryResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BarcoGetReqDescrEntryResponse)
	// ReqDescrMsg
	switch x := m.ReqDescrMsg.(type) {
	case *BarcoGetReqDescrEntryResponse_SymmReqDescr:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SymmReqDescr); err != nil {
			return err
		}
	case *BarcoGetReqDescrEntryResponse_AsymReqDescr:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AsymReqDescr); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BarcoGetReqDescrEntryResponse.ReqDescrMsg has unexpected type %T", x)
	}
	return nil
}

func _BarcoGetReqDescrEntryResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BarcoGetReqDescrEntryResponse)
	switch tag {
	case 4: // ReqDescrMsg.symm_req_descr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BarcoSymmReqDescrMsg)
		err := b.DecodeMessage(msg)
		m.ReqDescrMsg = &BarcoGetReqDescrEntryResponse_SymmReqDescr{msg}
		return true, err
	case 5: // ReqDescrMsg.asym_req_descr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BarcoASymReqDescrMsg)
		err := b.DecodeMessage(msg)
		m.ReqDescrMsg = &BarcoGetReqDescrEntryResponse_AsymReqDescr{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BarcoGetReqDescrEntryResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BarcoGetReqDescrEntryResponse)
	// ReqDescrMsg
	switch x := m.ReqDescrMsg.(type) {
	case *BarcoGetReqDescrEntryResponse_SymmReqDescr:
		s := proto.Size(x.SymmReqDescr)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BarcoGetReqDescrEntryResponse_AsymReqDescr:
		s := proto.Size(x.AsymReqDescr)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// BarcoGetReqDescrEntryResponseMsg is batched response to BarcoGetReqDescrEntryRequestMsg
type BarcoGetReqDescrEntryResponseMsg struct {
	Response []*BarcoGetReqDescrEntryResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *BarcoGetReqDescrEntryResponseMsg) Reset()         { *m = BarcoGetReqDescrEntryResponseMsg{} }
func (m *BarcoGetReqDescrEntryResponseMsg) String() string { return proto.CompactTextString(m) }
func (*BarcoGetReqDescrEntryResponseMsg) ProtoMessage()    {}
func (*BarcoGetReqDescrEntryResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{97}
}

func (m *BarcoGetReqDescrEntryResponseMsg) GetResponse() []*BarcoGetReqDescrEntryResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// BarcoGetRingMetaRequest - get ring meta data for a barco ring
type BarcoGetRingMetaRequest struct {
	RingType BarcoRings `protobuf:"varint,1,opt,name=ring_type,json=ringType,enum=types.BarcoRings" json:"ring_type,omitempty"`
}

func (m *BarcoGetRingMetaRequest) Reset()                    { *m = BarcoGetRingMetaRequest{} }
func (m *BarcoGetRingMetaRequest) String() string            { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaRequest) ProtoMessage()               {}
func (*BarcoGetRingMetaRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{98} }

func (m *BarcoGetRingMetaRequest) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

// BarcoGetRingMetaRequestMsg is batched GET requests for barco rings
type BarcoGetRingMetaRequestMsg struct {
	Request []*BarcoGetRingMetaRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *BarcoGetRingMetaRequestMsg) Reset()                    { *m = BarcoGetRingMetaRequestMsg{} }
func (m *BarcoGetRingMetaRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaRequestMsg) ProtoMessage()               {}
func (*BarcoGetRingMetaRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{99} }

func (m *BarcoGetRingMetaRequestMsg) GetRequest() []*BarcoGetRingMetaRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// BarcoGetRingMetaResponse returns the barco ring meta data
// only if api_status indicates success, other fields are valid
type BarcoGetRingMetaResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	RingType  BarcoRings `protobuf:"varint,2,opt,name=ring_type,json=ringType,enum=types.BarcoRings" json:"ring_type,omitempty"`
	Pi        uint32     `protobuf:"varint,3,opt,name=pi" json:"pi,omitempty"`
	Ci        uint32     `protobuf:"varint,4,opt,name=ci" json:"ci,omitempty"`
}

func (m *BarcoGetRingMetaResponse) Reset()                    { *m = BarcoGetRingMetaResponse{} }
func (m *BarcoGetRingMetaResponse) String() string            { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaResponse) ProtoMessage()               {}
func (*BarcoGetRingMetaResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{100} }

func (m *BarcoGetRingMetaResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *BarcoGetRingMetaResponse) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

func (m *BarcoGetRingMetaResponse) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *BarcoGetRingMetaResponse) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

// BarcoGetRingMetaResponseMsg is batched response to BarcoGetRingMetaRequestMsg
type BarcoGetRingMetaResponseMsg struct {
	Response []*BarcoGetRingMetaResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *BarcoGetRingMetaResponseMsg) Reset()                    { *m = BarcoGetRingMetaResponseMsg{} }
func (m *BarcoGetRingMetaResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaResponseMsg) ProtoMessage()               {}
func (*BarcoGetRingMetaResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{101} }

func (m *BarcoGetRingMetaResponseMsg) GetResponse() []*BarcoGetRingMetaResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// BarcoGetRingMetaConfigRequest - get ring meta config data for a barco ring
type BarcoGetRingMetaConfigRequest struct {
	RingType BarcoRings `protobuf:"varint,1,opt,name=ring_type,json=ringType,enum=types.BarcoRings" json:"ring_type,omitempty"`
}

func (m *BarcoGetRingMetaConfigRequest) Reset()         { *m = BarcoGetRingMetaConfigRequest{} }
func (m *BarcoGetRingMetaConfigRequest) String() string { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaConfigRequest) ProtoMessage()    {}
func (*BarcoGetRingMetaConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{102}
}

func (m *BarcoGetRingMetaConfigRequest) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

// BarcoGetRingMetaConfigRequestMsg is batched GET requests for barco rings
type BarcoGetRingMetaConfigRequestMsg struct {
	Request []*BarcoGetRingMetaConfigRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *BarcoGetRingMetaConfigRequestMsg) Reset()         { *m = BarcoGetRingMetaConfigRequestMsg{} }
func (m *BarcoGetRingMetaConfigRequestMsg) String() string { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaConfigRequestMsg) ProtoMessage()    {}
func (*BarcoGetRingMetaConfigRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{103}
}

func (m *BarcoGetRingMetaConfigRequestMsg) GetRequest() []*BarcoGetRingMetaConfigRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// BarcoGetRingMetaConfigResponse returns the barco ring meta data
// only if api_status indicates success, other fields are valid
type BarcoGetRingMetaConfigResponse struct {
	ApiStatus       ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	RingType        BarcoRings `protobuf:"varint,2,opt,name=ring_type,json=ringType,enum=types.BarcoRings" json:"ring_type,omitempty"`
	RingBase        uint64     `protobuf:"varint,3,opt,name=ring_base,json=ringBase" json:"ring_base,omitempty"`
	ProducerIdxAddr uint64     `protobuf:"varint,4,opt,name=producer_idx_addr,json=producerIdxAddr" json:"producer_idx_addr,omitempty"`
	ShadowPndxAddr  uint64     `protobuf:"varint,5,opt,name=shadow_pndx_addr,json=shadowPndxAddr" json:"shadow_pndx_addr,omitempty"`
	OpaqueTagAddr   uint64     `protobuf:"varint,6,opt,name=opaque_tag_addr,json=opaqueTagAddr" json:"opaque_tag_addr,omitempty"`
	RingSize        uint32     `protobuf:"varint,7,opt,name=ring_size,json=ringSize" json:"ring_size,omitempty"`
	DescSize        uint32     `protobuf:"varint,8,opt,name=desc_size,json=descSize" json:"desc_size,omitempty"`
	PndxSize        uint32     `protobuf:"varint,9,opt,name=pndx_size,json=pndxSize" json:"pndx_size,omitempty"`
	OpaqueTagSize   uint32     `protobuf:"varint,10,opt,name=opaque_tag_size,json=opaqueTagSize" json:"opaque_tag_size,omitempty"`
}

func (m *BarcoGetRingMetaConfigResponse) Reset()         { *m = BarcoGetRingMetaConfigResponse{} }
func (m *BarcoGetRingMetaConfigResponse) String() string { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaConfigResponse) ProtoMessage()    {}
func (*BarcoGetRingMetaConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{104}
}

func (m *BarcoGetRingMetaConfigResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *BarcoGetRingMetaConfigResponse) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

func (m *BarcoGetRingMetaConfigResponse) GetRingBase() uint64 {
	if m != nil {
		return m.RingBase
	}
	return 0
}

func (m *BarcoGetRingMetaConfigResponse) GetProducerIdxAddr() uint64 {
	if m != nil {
		return m.ProducerIdxAddr
	}
	return 0
}

func (m *BarcoGetRingMetaConfigResponse) GetShadowPndxAddr() uint64 {
	if m != nil {
		return m.ShadowPndxAddr
	}
	return 0
}

func (m *BarcoGetRingMetaConfigResponse) GetOpaqueTagAddr() uint64 {
	if m != nil {
		return m.OpaqueTagAddr
	}
	return 0
}

func (m *BarcoGetRingMetaConfigResponse) GetRingSize() uint32 {
	if m != nil {
		return m.RingSize
	}
	return 0
}

func (m *BarcoGetRingMetaConfigResponse) GetDescSize() uint32 {
	if m != nil {
		return m.DescSize
	}
	return 0
}

func (m *BarcoGetRingMetaConfigResponse) GetPndxSize() uint32 {
	if m != nil {
		return m.PndxSize
	}
	return 0
}

func (m *BarcoGetRingMetaConfigResponse) GetOpaqueTagSize() uint32 {
	if m != nil {
		return m.OpaqueTagSize
	}
	return 0
}

// BarcoGetRingMetaConfigResponseMsg is batched response to BarcoGetRingMetaConfigRequestMsg
type BarcoGetRingMetaConfigResponseMsg struct {
	Response []*BarcoGetRingMetaConfigResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *BarcoGetRingMetaConfigResponseMsg) Reset()         { *m = BarcoGetRingMetaConfigResponseMsg{} }
func (m *BarcoGetRingMetaConfigResponseMsg) String() string { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaConfigResponseMsg) ProtoMessage()    {}
func (*BarcoGetRingMetaConfigResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{105}
}

func (m *BarcoGetRingMetaConfigResponseMsg) GetResponse() []*BarcoGetRingMetaConfigResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoKeyCreateRequest struct {
}

func (m *CryptoKeyCreateRequest) Reset()                    { *m = CryptoKeyCreateRequest{} }
func (m *CryptoKeyCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyCreateRequest) ProtoMessage()               {}
func (*CryptoKeyCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{106} }

type CryptoKeyCreateRequestMsg struct {
	Request []*CryptoKeyCreateRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyCreateRequestMsg) Reset()                    { *m = CryptoKeyCreateRequestMsg{} }
func (m *CryptoKeyCreateRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyCreateRequestMsg) ProtoMessage()               {}
func (*CryptoKeyCreateRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{107} }

func (m *CryptoKeyCreateRequestMsg) GetRequest() []*CryptoKeyCreateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyCreateResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex" json:"keyindex,omitempty"`
}

func (m *CryptoKeyCreateResponse) Reset()                    { *m = CryptoKeyCreateResponse{} }
func (m *CryptoKeyCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyCreateResponse) ProtoMessage()               {}
func (*CryptoKeyCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{108} }

func (m *CryptoKeyCreateResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyCreateResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyCreateResponseMsg struct {
	Response []*CryptoKeyCreateResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyCreateResponseMsg) Reset()                    { *m = CryptoKeyCreateResponseMsg{} }
func (m *CryptoKeyCreateResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyCreateResponseMsg) ProtoMessage()               {}
func (*CryptoKeyCreateResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{109} }

func (m *CryptoKeyCreateResponseMsg) GetResponse() []*CryptoKeyCreateResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoKeyCreateWithIdRequest struct {
	Keyindex      uint32 `protobuf:"varint,1,opt,name=keyindex" json:"keyindex,omitempty"`
	AllowDupAlloc uint32 `protobuf:"varint,2,opt,name=allow_dup_alloc,json=allowDupAlloc" json:"allow_dup_alloc,omitempty"`
}

func (m *CryptoKeyCreateWithIdRequest) Reset()                    { *m = CryptoKeyCreateWithIdRequest{} }
func (m *CryptoKeyCreateWithIdRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyCreateWithIdRequest) ProtoMessage()               {}
func (*CryptoKeyCreateWithIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{110} }

func (m *CryptoKeyCreateWithIdRequest) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

func (m *CryptoKeyCreateWithIdRequest) GetAllowDupAlloc() uint32 {
	if m != nil {
		return m.AllowDupAlloc
	}
	return 0
}

type CryptoKeyCreateWithIdRequestMsg struct {
	Request []*CryptoKeyCreateWithIdRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyCreateWithIdRequestMsg) Reset()         { *m = CryptoKeyCreateWithIdRequestMsg{} }
func (m *CryptoKeyCreateWithIdRequestMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyCreateWithIdRequestMsg) ProtoMessage()    {}
func (*CryptoKeyCreateWithIdRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{111}
}

func (m *CryptoKeyCreateWithIdRequestMsg) GetRequest() []*CryptoKeyCreateWithIdRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyCreateWithIdResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex" json:"keyindex,omitempty"`
}

func (m *CryptoKeyCreateWithIdResponse) Reset()         { *m = CryptoKeyCreateWithIdResponse{} }
func (m *CryptoKeyCreateWithIdResponse) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyCreateWithIdResponse) ProtoMessage()    {}
func (*CryptoKeyCreateWithIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{112}
}

func (m *CryptoKeyCreateWithIdResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyCreateWithIdResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyCreateWithIdResponseMsg struct {
	Response []*CryptoKeyCreateWithIdResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyCreateWithIdResponseMsg) Reset()         { *m = CryptoKeyCreateWithIdResponseMsg{} }
func (m *CryptoKeyCreateWithIdResponseMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyCreateWithIdResponseMsg) ProtoMessage()    {}
func (*CryptoKeyCreateWithIdResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{113}
}

func (m *CryptoKeyCreateWithIdResponseMsg) GetResponse() []*CryptoKeyCreateWithIdResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoKeySpec struct {
	Keyindex uint32        `protobuf:"varint,1,opt,name=keyindex" json:"keyindex,omitempty"`
	KeyType  CryptoKeyType `protobuf:"varint,2,opt,name=key_type,json=keyType,enum=types.CryptoKeyType" json:"key_type,omitempty"`
	KeySize  uint32        `protobuf:"varint,3,opt,name=key_size,json=keySize" json:"key_size,omitempty"`
	Key      []byte        `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *CryptoKeySpec) Reset()                    { *m = CryptoKeySpec{} }
func (m *CryptoKeySpec) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeySpec) ProtoMessage()               {}
func (*CryptoKeySpec) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{114} }

func (m *CryptoKeySpec) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

func (m *CryptoKeySpec) GetKeyType() CryptoKeyType {
	if m != nil {
		return m.KeyType
	}
	return CryptoKeyType_CRYPTO_KEY_TYPE_AES128
}

func (m *CryptoKeySpec) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoKeySpec) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type CryptoKeyReadRequest struct {
	Keyindex uint32 `protobuf:"varint,1,opt,name=keyindex" json:"keyindex,omitempty"`
}

func (m *CryptoKeyReadRequest) Reset()                    { *m = CryptoKeyReadRequest{} }
func (m *CryptoKeyReadRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyReadRequest) ProtoMessage()               {}
func (*CryptoKeyReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{115} }

func (m *CryptoKeyReadRequest) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyReadRequestMsg struct {
	Request []*CryptoKeyReadRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyReadRequestMsg) Reset()                    { *m = CryptoKeyReadRequestMsg{} }
func (m *CryptoKeyReadRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyReadRequestMsg) ProtoMessage()               {}
func (*CryptoKeyReadRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{116} }

func (m *CryptoKeyReadRequestMsg) GetRequest() []*CryptoKeyReadRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyReadResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Key       *CryptoKeySpec `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *CryptoKeyReadResponse) Reset()                    { *m = CryptoKeyReadResponse{} }
func (m *CryptoKeyReadResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyReadResponse) ProtoMessage()               {}
func (*CryptoKeyReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{117} }

func (m *CryptoKeyReadResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyReadResponse) GetKey() *CryptoKeySpec {
	if m != nil {
		return m.Key
	}
	return nil
}

type CryptoKeyReadResponseMsg struct {
	Response []*CryptoKeyReadResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyReadResponseMsg) Reset()                    { *m = CryptoKeyReadResponseMsg{} }
func (m *CryptoKeyReadResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyReadResponseMsg) ProtoMessage()               {}
func (*CryptoKeyReadResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{118} }

func (m *CryptoKeyReadResponseMsg) GetResponse() []*CryptoKeyReadResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoKeyUpdateRequest struct {
	Key *CryptoKeySpec `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *CryptoKeyUpdateRequest) Reset()                    { *m = CryptoKeyUpdateRequest{} }
func (m *CryptoKeyUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyUpdateRequest) ProtoMessage()               {}
func (*CryptoKeyUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{119} }

func (m *CryptoKeyUpdateRequest) GetKey() *CryptoKeySpec {
	if m != nil {
		return m.Key
	}
	return nil
}

type CryptoKeyUpdateRequestMsg struct {
	Request []*CryptoKeyUpdateRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyUpdateRequestMsg) Reset()                    { *m = CryptoKeyUpdateRequestMsg{} }
func (m *CryptoKeyUpdateRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyUpdateRequestMsg) ProtoMessage()               {}
func (*CryptoKeyUpdateRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{120} }

func (m *CryptoKeyUpdateRequestMsg) GetRequest() []*CryptoKeyUpdateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyUpdateResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex" json:"keyindex,omitempty"`
}

func (m *CryptoKeyUpdateResponse) Reset()                    { *m = CryptoKeyUpdateResponse{} }
func (m *CryptoKeyUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyUpdateResponse) ProtoMessage()               {}
func (*CryptoKeyUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{121} }

func (m *CryptoKeyUpdateResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyUpdateResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyUpdateResponseMsg struct {
	Response []*CryptoKeyUpdateResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyUpdateResponseMsg) Reset()                    { *m = CryptoKeyUpdateResponseMsg{} }
func (m *CryptoKeyUpdateResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyUpdateResponseMsg) ProtoMessage()               {}
func (*CryptoKeyUpdateResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{122} }

func (m *CryptoKeyUpdateResponseMsg) GetResponse() []*CryptoKeyUpdateResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoKeyDeleteRequest struct {
	Keyindex uint32 `protobuf:"varint,1,opt,name=keyindex" json:"keyindex,omitempty"`
}

func (m *CryptoKeyDeleteRequest) Reset()                    { *m = CryptoKeyDeleteRequest{} }
func (m *CryptoKeyDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyDeleteRequest) ProtoMessage()               {}
func (*CryptoKeyDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{123} }

func (m *CryptoKeyDeleteRequest) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyDeleteRequestMsg struct {
	Request []*CryptoKeyDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyDeleteRequestMsg) Reset()                    { *m = CryptoKeyDeleteRequestMsg{} }
func (m *CryptoKeyDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyDeleteRequestMsg) ProtoMessage()               {}
func (*CryptoKeyDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{124} }

func (m *CryptoKeyDeleteRequestMsg) GetRequest() []*CryptoKeyDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex" json:"keyindex,omitempty"`
}

func (m *CryptoKeyDeleteResponse) Reset()                    { *m = CryptoKeyDeleteResponse{} }
func (m *CryptoKeyDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyDeleteResponse) ProtoMessage()               {}
func (*CryptoKeyDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{125} }

func (m *CryptoKeyDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyDeleteResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyDeleteResponseMsg struct {
	Response []*CryptoKeyDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyDeleteResponseMsg) Reset()                    { *m = CryptoKeyDeleteResponseMsg{} }
func (m *CryptoKeyDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyDeleteResponseMsg) ProtoMessage()               {}
func (*CryptoKeyDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{126} }

func (m *CryptoKeyDeleteResponseMsg) GetResponse() []*CryptoKeyDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoAsymKeyCreateRequest struct {
}

func (m *CryptoAsymKeyCreateRequest) Reset()                    { *m = CryptoAsymKeyCreateRequest{} }
func (m *CryptoAsymKeyCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymKeyCreateRequest) ProtoMessage()               {}
func (*CryptoAsymKeyCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{127} }

type CryptoAsymKeyCreateRequestMsg struct {
	Request []*CryptoAsymKeyCreateRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoAsymKeyCreateRequestMsg) Reset()         { *m = CryptoAsymKeyCreateRequestMsg{} }
func (m *CryptoAsymKeyCreateRequestMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymKeyCreateRequestMsg) ProtoMessage()    {}
func (*CryptoAsymKeyCreateRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{128}
}

func (m *CryptoAsymKeyCreateRequestMsg) GetRequest() []*CryptoAsymKeyCreateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoAsymKeyCreateResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex" json:"keyindex,omitempty"`
}

func (m *CryptoAsymKeyCreateResponse) Reset()                    { *m = CryptoAsymKeyCreateResponse{} }
func (m *CryptoAsymKeyCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymKeyCreateResponse) ProtoMessage()               {}
func (*CryptoAsymKeyCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{129} }

func (m *CryptoAsymKeyCreateResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoAsymKeyCreateResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoAsymKeyCreateResponseMsg struct {
	Response []*CryptoAsymKeyCreateResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoAsymKeyCreateResponseMsg) Reset()         { *m = CryptoAsymKeyCreateResponseMsg{} }
func (m *CryptoAsymKeyCreateResponseMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymKeyCreateResponseMsg) ProtoMessage()    {}
func (*CryptoAsymKeyCreateResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{130}
}

func (m *CryptoAsymKeyCreateResponseMsg) GetResponse() []*CryptoAsymKeyCreateResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoAsymKeyDeleteRequest struct {
	Keyindex uint32 `protobuf:"varint,1,opt,name=keyindex" json:"keyindex,omitempty"`
}

func (m *CryptoAsymKeyDeleteRequest) Reset()                    { *m = CryptoAsymKeyDeleteRequest{} }
func (m *CryptoAsymKeyDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymKeyDeleteRequest) ProtoMessage()               {}
func (*CryptoAsymKeyDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{131} }

func (m *CryptoAsymKeyDeleteRequest) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoAsymKeyDeleteRequestMsg struct {
	Request []*CryptoAsymKeyDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoAsymKeyDeleteRequestMsg) Reset()         { *m = CryptoAsymKeyDeleteRequestMsg{} }
func (m *CryptoAsymKeyDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymKeyDeleteRequestMsg) ProtoMessage()    {}
func (*CryptoAsymKeyDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{132}
}

func (m *CryptoAsymKeyDeleteRequestMsg) GetRequest() []*CryptoAsymKeyDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoAsymKeyDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex" json:"keyindex,omitempty"`
}

func (m *CryptoAsymKeyDeleteResponse) Reset()                    { *m = CryptoAsymKeyDeleteResponse{} }
func (m *CryptoAsymKeyDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymKeyDeleteResponse) ProtoMessage()               {}
func (*CryptoAsymKeyDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{133} }

func (m *CryptoAsymKeyDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoAsymKeyDeleteResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoAsymKeyDeleteResponseMsg struct {
	Response []*CryptoAsymKeyDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoAsymKeyDeleteResponseMsg) Reset()         { *m = CryptoAsymKeyDeleteResponseMsg{} }
func (m *CryptoAsymKeyDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymKeyDeleteResponseMsg) ProtoMessage()    {}
func (*CryptoAsymKeyDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{134}
}

func (m *CryptoAsymKeyDeleteResponseMsg) GetResponse() []*CryptoAsymKeyDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoAsymKeySpec struct {
	Keyindex uint32 `protobuf:"varint,1,opt,name=keyindex" json:"keyindex,omitempty"`
	Key      []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *CryptoAsymKeySpec) Reset()                    { *m = CryptoAsymKeySpec{} }
func (m *CryptoAsymKeySpec) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymKeySpec) ProtoMessage()               {}
func (*CryptoAsymKeySpec) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{135} }

func (m *CryptoAsymKeySpec) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

func (m *CryptoAsymKeySpec) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type CryptoAsymKeyWriteRequest struct {
	Key *CryptoAsymKeySpec `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *CryptoAsymKeyWriteRequest) Reset()                    { *m = CryptoAsymKeyWriteRequest{} }
func (m *CryptoAsymKeyWriteRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymKeyWriteRequest) ProtoMessage()               {}
func (*CryptoAsymKeyWriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{136} }

func (m *CryptoAsymKeyWriteRequest) GetKey() *CryptoAsymKeySpec {
	if m != nil {
		return m.Key
	}
	return nil
}

type CryptoAsymKeyWriteRequestMsg struct {
	Request []*CryptoAsymKeyWriteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoAsymKeyWriteRequestMsg) Reset()                    { *m = CryptoAsymKeyWriteRequestMsg{} }
func (m *CryptoAsymKeyWriteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymKeyWriteRequestMsg) ProtoMessage()               {}
func (*CryptoAsymKeyWriteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{137} }

func (m *CryptoAsymKeyWriteRequestMsg) GetRequest() []*CryptoAsymKeyWriteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoAsymKeyWriteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex" json:"keyindex,omitempty"`
}

func (m *CryptoAsymKeyWriteResponse) Reset()                    { *m = CryptoAsymKeyWriteResponse{} }
func (m *CryptoAsymKeyWriteResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymKeyWriteResponse) ProtoMessage()               {}
func (*CryptoAsymKeyWriteResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{138} }

func (m *CryptoAsymKeyWriteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoAsymKeyWriteResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoAsymKeyWriteResponseMsg struct {
	Response []*CryptoAsymKeyWriteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoAsymKeyWriteResponseMsg) Reset()         { *m = CryptoAsymKeyWriteResponseMsg{} }
func (m *CryptoAsymKeyWriteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymKeyWriteResponseMsg) ProtoMessage()    {}
func (*CryptoAsymKeyWriteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{139}
}

func (m *CryptoAsymKeyWriteResponseMsg) GetResponse() []*CryptoAsymKeyWriteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type ECCPoint struct {
	X []byte `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y []byte `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *ECCPoint) Reset()                    { *m = ECCPoint{} }
func (m *ECCPoint) String() string            { return proto.CompactTextString(m) }
func (*ECCPoint) ProtoMessage()               {}
func (*ECCPoint) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{140} }

func (m *ECCPoint) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *ECCPoint) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

type CryptoAsymApiECCDomainParamsFp struct {
	KeySize uint32    `protobuf:"varint,1,opt,name=KeySize" json:"KeySize,omitempty"`
	P       []byte    `protobuf:"bytes,2,opt,name=p,proto3" json:"p,omitempty"`
	A       []byte    `protobuf:"bytes,3,opt,name=a,proto3" json:"a,omitempty"`
	B       []byte    `protobuf:"bytes,4,opt,name=b,proto3" json:"b,omitempty"`
	G       *ECCPoint `protobuf:"bytes,5,opt,name=G" json:"G,omitempty"`
	N       []byte    `protobuf:"bytes,6,opt,name=n,proto3" json:"n,omitempty"`
}

func (m *CryptoAsymApiECCDomainParamsFp) Reset()         { *m = CryptoAsymApiECCDomainParamsFp{} }
func (m *CryptoAsymApiECCDomainParamsFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiECCDomainParamsFp) ProtoMessage()    {}
func (*CryptoAsymApiECCDomainParamsFp) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{141}
}

func (m *CryptoAsymApiECCDomainParamsFp) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiECCDomainParamsFp) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *CryptoAsymApiECCDomainParamsFp) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *CryptoAsymApiECCDomainParamsFp) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *CryptoAsymApiECCDomainParamsFp) GetG() *ECCPoint {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *CryptoAsymApiECCDomainParamsFp) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

type CryptoAsymApiReqECCPointMulFp struct {
	EccDomainParams *CryptoAsymApiECCDomainParamsFp `protobuf:"bytes,1,opt,name=ecc_domain_params,json=eccDomainParams" json:"ecc_domain_params,omitempty"`
	EccPoint        *ECCPoint                       `protobuf:"bytes,2,opt,name=ecc_point,json=eccPoint" json:"ecc_point,omitempty"`
	K               []byte                          `protobuf:"bytes,3,opt,name=k,proto3" json:"k,omitempty"`
}

func (m *CryptoAsymApiReqECCPointMulFp) Reset()         { *m = CryptoAsymApiReqECCPointMulFp{} }
func (m *CryptoAsymApiReqECCPointMulFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqECCPointMulFp) ProtoMessage()    {}
func (*CryptoAsymApiReqECCPointMulFp) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{142}
}

func (m *CryptoAsymApiReqECCPointMulFp) GetEccDomainParams() *CryptoAsymApiECCDomainParamsFp {
	if m != nil {
		return m.EccDomainParams
	}
	return nil
}

func (m *CryptoAsymApiReqECCPointMulFp) GetEccPoint() *ECCPoint {
	if m != nil {
		return m.EccPoint
	}
	return nil
}

func (m *CryptoAsymApiReqECCPointMulFp) GetK() []byte {
	if m != nil {
		return m.K
	}
	return nil
}

type CryptoAsymApiRespECCPointMulFp struct {
	Q *ECCPoint `protobuf:"bytes,1,opt,name=Q" json:"Q,omitempty"`
}

func (m *CryptoAsymApiRespECCPointMulFp) Reset()         { *m = CryptoAsymApiRespECCPointMulFp{} }
func (m *CryptoAsymApiRespECCPointMulFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespECCPointMulFp) ProtoMessage()    {}
func (*CryptoAsymApiRespECCPointMulFp) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{143}
}

func (m *CryptoAsymApiRespECCPointMulFp) GetQ() *ECCPoint {
	if m != nil {
		return m.Q
	}
	return nil
}

// ESCDA Signature Generation
type CryptoAsymApiReqECDSASignatureGenFp struct {
	EccDomainParams *CryptoAsymApiECCDomainParamsFp `protobuf:"bytes,1,opt,name=ecc_domain_params,json=eccDomainParams" json:"ecc_domain_params,omitempty"`
	Da              []byte                          `protobuf:"bytes,2,opt,name=da,proto3" json:"da,omitempty"`
	K               []byte                          `protobuf:"bytes,3,opt,name=k,proto3" json:"k,omitempty"`
	H               []byte                          `protobuf:"bytes,4,opt,name=h,proto3" json:"h,omitempty"`
	KeyIdx          int32                           `protobuf:"varint,5,opt,name=key_idx,json=keyIdx" json:"key_idx,omitempty"`
	AsyncEn         bool                            `protobuf:"varint,6,opt,name=async_en,json=asyncEn" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) Reset()         { *m = CryptoAsymApiReqECDSASignatureGenFp{} }
func (m *CryptoAsymApiReqECDSASignatureGenFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqECDSASignatureGenFp) ProtoMessage()    {}
func (*CryptoAsymApiReqECDSASignatureGenFp) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{144}
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetEccDomainParams() *CryptoAsymApiECCDomainParamsFp {
	if m != nil {
		return m.EccDomainParams
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetDa() []byte {
	if m != nil {
		return m.Da
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetK() []byte {
	if m != nil {
		return m.K
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetKeyIdx() int32 {
	if m != nil {
		return m.KeyIdx
	}
	return 0
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

type CryptoAsymApiRespECDSASignatureGenFp struct {
	R []byte `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) Reset()         { *m = CryptoAsymApiRespECDSASignatureGenFp{} }
func (m *CryptoAsymApiRespECDSASignatureGenFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespECDSASignatureGenFp) ProtoMessage()    {}
func (*CryptoAsymApiRespECDSASignatureGenFp) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{145}
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// ECDSA Signature Verification
type CryptoAsymApiReqECDSASignatureVerifyFp struct {
	EccDomainParams *CryptoAsymApiECCDomainParamsFp `protobuf:"bytes,1,opt,name=ecc_domain_params,json=eccDomainParams" json:"ecc_domain_params,omitempty"`
	Q               *ECCPoint                       `protobuf:"bytes,2,opt,name=Q" json:"Q,omitempty"`
	R               []byte                          `protobuf:"bytes,3,opt,name=r,proto3" json:"r,omitempty"`
	S               []byte                          `protobuf:"bytes,4,opt,name=s,proto3" json:"s,omitempty"`
	H               []byte                          `protobuf:"bytes,5,opt,name=h,proto3" json:"h,omitempty"`
	AsyncEn         bool                            `protobuf:"varint,6,opt,name=async_en,json=asyncEn" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) Reset() {
	*m = CryptoAsymApiReqECDSASignatureVerifyFp{}
}
func (m *CryptoAsymApiReqECDSASignatureVerifyFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqECDSASignatureVerifyFp) ProtoMessage()    {}
func (*CryptoAsymApiReqECDSASignatureVerifyFp) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{146}
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetEccDomainParams() *CryptoAsymApiECCDomainParamsFp {
	if m != nil {
		return m.EccDomainParams
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetQ() *ECCPoint {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

// RSA Encryption
type CryptoAsymApiReqRSAEncrypt struct {
	KeySize   uint32 `protobuf:"varint,1,opt,name=KeySize" json:"KeySize,omitempty"`
	ModN      []byte `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	E         []byte `protobuf:"bytes,3,opt,name=e,proto3" json:"e,omitempty"`
	PlainText []byte `protobuf:"bytes,4,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty"`
	AsyncEn   bool   `protobuf:"varint,5,opt,name=async_en,json=asyncEn" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqRSAEncrypt) Reset()                    { *m = CryptoAsymApiReqRSAEncrypt{} }
func (m *CryptoAsymApiReqRSAEncrypt) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSAEncrypt) ProtoMessage()               {}
func (*CryptoAsymApiReqRSAEncrypt) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{147} }

func (m *CryptoAsymApiReqRSAEncrypt) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSAEncrypt) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqRSAEncrypt) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *CryptoAsymApiReqRSAEncrypt) GetPlainText() []byte {
	if m != nil {
		return m.PlainText
	}
	return nil
}

func (m *CryptoAsymApiReqRSAEncrypt) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

type CryptoAsymApiRespRSAEncrypt struct {
	CipherText []byte `protobuf:"bytes,1,opt,name=cipher_text,json=cipherText,proto3" json:"cipher_text,omitempty"`
}

func (m *CryptoAsymApiRespRSAEncrypt) Reset()                    { *m = CryptoAsymApiRespRSAEncrypt{} }
func (m *CryptoAsymApiRespRSAEncrypt) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSAEncrypt) ProtoMessage()               {}
func (*CryptoAsymApiRespRSAEncrypt) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{148} }

func (m *CryptoAsymApiRespRSAEncrypt) GetCipherText() []byte {
	if m != nil {
		return m.CipherText
	}
	return nil
}

// RSA Decryption
type CryptoAsymApiReqRSADecrypt struct {
	KeySize    uint32 `protobuf:"varint,1,opt,name=KeySize" json:"KeySize,omitempty"`
	ModN       []byte `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	D          []byte `protobuf:"bytes,3,opt,name=d,proto3" json:"d,omitempty"`
	CipherText []byte `protobuf:"bytes,4,opt,name=cipher_text,json=cipherText,proto3" json:"cipher_text,omitempty"`
}

func (m *CryptoAsymApiReqRSADecrypt) Reset()                    { *m = CryptoAsymApiReqRSADecrypt{} }
func (m *CryptoAsymApiReqRSADecrypt) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSADecrypt) ProtoMessage()               {}
func (*CryptoAsymApiReqRSADecrypt) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{149} }

func (m *CryptoAsymApiReqRSADecrypt) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSADecrypt) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqRSADecrypt) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *CryptoAsymApiReqRSADecrypt) GetCipherText() []byte {
	if m != nil {
		return m.CipherText
	}
	return nil
}

type CryptoAsymApiRespRSADecrypt struct {
	PlainText []byte `protobuf:"bytes,1,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty"`
}

func (m *CryptoAsymApiRespRSADecrypt) Reset()                    { *m = CryptoAsymApiRespRSADecrypt{} }
func (m *CryptoAsymApiRespRSADecrypt) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSADecrypt) ProtoMessage()               {}
func (*CryptoAsymApiRespRSADecrypt) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{150} }

func (m *CryptoAsymApiRespRSADecrypt) GetPlainText() []byte {
	if m != nil {
		return m.PlainText
	}
	return nil
}

// RSA CRT Decryption
type CryptoAsymApiReqRSACRTDecrypt struct {
	KeySize    uint32 `protobuf:"varint,1,opt,name=KeySize" json:"KeySize,omitempty"`
	P          []byte `protobuf:"bytes,2,opt,name=p,proto3" json:"p,omitempty"`
	Q          []byte `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Dp         []byte `protobuf:"bytes,4,opt,name=dp,proto3" json:"dp,omitempty"`
	Dq         []byte `protobuf:"bytes,5,opt,name=dq,proto3" json:"dq,omitempty"`
	Qinv       []byte `protobuf:"bytes,6,opt,name=qinv,proto3" json:"qinv,omitempty"`
	CipherText []byte `protobuf:"bytes,7,opt,name=cipher_text,json=cipherText,proto3" json:"cipher_text,omitempty"`
	KeyIdx     int32  `protobuf:"varint,8,opt,name=key_idx,json=keyIdx" json:"key_idx,omitempty"`
	AsyncEn    bool   `protobuf:"varint,9,opt,name=async_en,json=asyncEn" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqRSACRTDecrypt) Reset()         { *m = CryptoAsymApiReqRSACRTDecrypt{} }
func (m *CryptoAsymApiReqRSACRTDecrypt) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSACRTDecrypt) ProtoMessage()    {}
func (*CryptoAsymApiReqRSACRTDecrypt) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{151}
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetDp() []byte {
	if m != nil {
		return m.Dp
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetDq() []byte {
	if m != nil {
		return m.Dq
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetQinv() []byte {
	if m != nil {
		return m.Qinv
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetCipherText() []byte {
	if m != nil {
		return m.CipherText
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetKeyIdx() int32 {
	if m != nil {
		return m.KeyIdx
	}
	return 0
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

type CryptoAsymApiRespRSACRTDecrypt struct {
	PlainText []byte `protobuf:"bytes,1,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty"`
}

func (m *CryptoAsymApiRespRSACRTDecrypt) Reset()         { *m = CryptoAsymApiRespRSACRTDecrypt{} }
func (m *CryptoAsymApiRespRSACRTDecrypt) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSACRTDecrypt) ProtoMessage()    {}
func (*CryptoAsymApiRespRSACRTDecrypt) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{152}
}

func (m *CryptoAsymApiRespRSACRTDecrypt) GetPlainText() []byte {
	if m != nil {
		return m.PlainText
	}
	return nil
}

// Asymmetric Private Key Setup
// Temp API as a workaround until securemon is ready
type CryptoAsymApiReqSetupPrivateKey struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *CryptoAsymApiReqSetupPrivateKey) Reset()         { *m = CryptoAsymApiReqSetupPrivateKey{} }
func (m *CryptoAsymApiReqSetupPrivateKey) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqSetupPrivateKey) ProtoMessage()    {}
func (*CryptoAsymApiReqSetupPrivateKey) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{153}
}

func (m *CryptoAsymApiReqSetupPrivateKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type CryptoAsymApiRespECDSAKeyInfo struct {
	SignKeyIdx int32 `protobuf:"varint,1,opt,name=sign_key_idx,json=signKeyIdx" json:"sign_key_idx,omitempty"`
}

func (m *CryptoAsymApiRespECDSAKeyInfo) Reset()         { *m = CryptoAsymApiRespECDSAKeyInfo{} }
func (m *CryptoAsymApiRespECDSAKeyInfo) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespECDSAKeyInfo) ProtoMessage()    {}
func (*CryptoAsymApiRespECDSAKeyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{154}
}

func (m *CryptoAsymApiRespECDSAKeyInfo) GetSignKeyIdx() int32 {
	if m != nil {
		return m.SignKeyIdx
	}
	return 0
}

type CryptoAsymApiRespRSAKeyInfo struct {
	SignKeyIdx    int32 `protobuf:"varint,1,opt,name=sign_key_idx,json=signKeyIdx" json:"sign_key_idx,omitempty"`
	DecryptKeyIdx int32 `protobuf:"varint,2,opt,name=decrypt_key_idx,json=decryptKeyIdx" json:"decrypt_key_idx,omitempty"`
}

func (m *CryptoAsymApiRespRSAKeyInfo) Reset()                    { *m = CryptoAsymApiRespRSAKeyInfo{} }
func (m *CryptoAsymApiRespRSAKeyInfo) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSAKeyInfo) ProtoMessage()               {}
func (*CryptoAsymApiRespRSAKeyInfo) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{155} }

func (m *CryptoAsymApiRespRSAKeyInfo) GetSignKeyIdx() int32 {
	if m != nil {
		return m.SignKeyIdx
	}
	return 0
}

func (m *CryptoAsymApiRespRSAKeyInfo) GetDecryptKeyIdx() int32 {
	if m != nil {
		return m.DecryptKeyIdx
	}
	return 0
}

type CryptoAsymApiRespSetupPrivateKey struct {
	KeyType CryptoAsymKeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,enum=types.CryptoAsymKeyType" json:"key_type,omitempty"`
	// Types that are valid to be assigned to KeyInfo:
	//	*CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo
	//	*CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo
	KeyInfo isCryptoAsymApiRespSetupPrivateKey_KeyInfo `protobuf_oneof:"KeyInfo"`
}

func (m *CryptoAsymApiRespSetupPrivateKey) Reset()         { *m = CryptoAsymApiRespSetupPrivateKey{} }
func (m *CryptoAsymApiRespSetupPrivateKey) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespSetupPrivateKey) ProtoMessage()    {}
func (*CryptoAsymApiRespSetupPrivateKey) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{156}
}

type isCryptoAsymApiRespSetupPrivateKey_KeyInfo interface{ isCryptoAsymApiRespSetupPrivateKey_KeyInfo() }

type CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo struct {
	EcdsaKeyInfo *CryptoAsymApiRespECDSAKeyInfo `protobuf:"bytes,2,opt,name=ecdsa_key_info,json=ecdsaKeyInfo,oneof"`
}
type CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo struct {
	RsaKeyInfo *CryptoAsymApiRespRSAKeyInfo `protobuf:"bytes,3,opt,name=rsa_key_info,json=rsaKeyInfo,oneof"`
}

func (*CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo) isCryptoAsymApiRespSetupPrivateKey_KeyInfo() {}
func (*CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo) isCryptoAsymApiRespSetupPrivateKey_KeyInfo()   {}

func (m *CryptoAsymApiRespSetupPrivateKey) GetKeyInfo() isCryptoAsymApiRespSetupPrivateKey_KeyInfo {
	if m != nil {
		return m.KeyInfo
	}
	return nil
}

func (m *CryptoAsymApiRespSetupPrivateKey) GetKeyType() CryptoAsymKeyType {
	if m != nil {
		return m.KeyType
	}
	return CryptoAsymKeyType_CRYPTO_ASYM_KEY_TYPE_ECDSA
}

func (m *CryptoAsymApiRespSetupPrivateKey) GetEcdsaKeyInfo() *CryptoAsymApiRespECDSAKeyInfo {
	if x, ok := m.GetKeyInfo().(*CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo); ok {
		return x.EcdsaKeyInfo
	}
	return nil
}

func (m *CryptoAsymApiRespSetupPrivateKey) GetRsaKeyInfo() *CryptoAsymApiRespRSAKeyInfo {
	if x, ok := m.GetKeyInfo().(*CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo); ok {
		return x.RsaKeyInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CryptoAsymApiRespSetupPrivateKey) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CryptoAsymApiRespSetupPrivateKey_OneofMarshaler, _CryptoAsymApiRespSetupPrivateKey_OneofUnmarshaler, _CryptoAsymApiRespSetupPrivateKey_OneofSizer, []interface{}{
		(*CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo)(nil),
		(*CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo)(nil),
	}
}

func _CryptoAsymApiRespSetupPrivateKey_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CryptoAsymApiRespSetupPrivateKey)
	// KeyInfo
	switch x := m.KeyInfo.(type) {
	case *CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaKeyInfo); err != nil {
			return err
		}
	case *CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaKeyInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CryptoAsymApiRespSetupPrivateKey.KeyInfo has unexpected type %T", x)
	}
	return nil
}

func _CryptoAsymApiRespSetupPrivateKey_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CryptoAsymApiRespSetupPrivateKey)
	switch tag {
	case 2: // KeyInfo.ecdsa_key_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespECDSAKeyInfo)
		err := b.DecodeMessage(msg)
		m.KeyInfo = &CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo{msg}
		return true, err
	case 3: // KeyInfo.rsa_key_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSAKeyInfo)
		err := b.DecodeMessage(msg)
		m.KeyInfo = &CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CryptoAsymApiRespSetupPrivateKey_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CryptoAsymApiRespSetupPrivateKey)
	// KeyInfo
	switch x := m.KeyInfo.(type) {
	case *CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo:
		s := proto.Size(x.EcdsaKeyInfo)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo:
		s := proto.Size(x.RsaKeyInfo)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Certificate Setup
type CryptoAsymApiReqSetupCert struct {
	UpdateType UpdateType `protobuf:"varint,1,opt,name=update_type,json=updateType,enum=internal.UpdateType" json:"update_type,omitempty"`
	CertId     int32      `protobuf:"varint,2,opt,name=cert_id,json=certId" json:"cert_id,omitempty"`
	Body       string     `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	NextCertId int32      `protobuf:"varint,5,opt,name=next_cert_id,json=nextCertId" json:"next_cert_id,omitempty"`
}

func (m *CryptoAsymApiReqSetupCert) Reset()                    { *m = CryptoAsymApiReqSetupCert{} }
func (m *CryptoAsymApiReqSetupCert) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqSetupCert) ProtoMessage()               {}
func (*CryptoAsymApiReqSetupCert) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{157} }

func (m *CryptoAsymApiReqSetupCert) GetUpdateType() UpdateType {
	if m != nil {
		return m.UpdateType
	}
	return UpdateType_ADD_UPDATE
}

func (m *CryptoAsymApiReqSetupCert) GetCertId() int32 {
	if m != nil {
		return m.CertId
	}
	return 0
}

func (m *CryptoAsymApiReqSetupCert) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *CryptoAsymApiReqSetupCert) GetNextCertId() int32 {
	if m != nil {
		return m.NextCertId
	}
	return 0
}

type CryptoAsymApiRespSetupCert struct {
}

func (m *CryptoAsymApiRespSetupCert) Reset()                    { *m = CryptoAsymApiRespSetupCert{} }
func (m *CryptoAsymApiRespSetupCert) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespSetupCert) ProtoMessage()               {}
func (*CryptoAsymApiRespSetupCert) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{158} }

// Asymmetric Private Key Setup - key elements
type CryptoAsymRsaKey struct {
	KeySize uint32 `protobuf:"varint,1,opt,name=key_size,json=keySize" json:"key_size,omitempty"`
	N       []byte `protobuf:"bytes,2,opt,name=n,proto3" json:"n,omitempty"`
	E       []byte `protobuf:"bytes,3,opt,name=e,proto3" json:"e,omitempty"`
	D       []byte `protobuf:"bytes,4,opt,name=d,proto3" json:"d,omitempty"`
}

func (m *CryptoAsymRsaKey) Reset()                    { *m = CryptoAsymRsaKey{} }
func (m *CryptoAsymRsaKey) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymRsaKey) ProtoMessage()               {}
func (*CryptoAsymRsaKey) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{159} }

func (m *CryptoAsymRsaKey) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymRsaKey) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *CryptoAsymRsaKey) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *CryptoAsymRsaKey) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

type CryptoAsymApiReqSetupPrivateKeyEx struct {
	KeyType CryptoAsymKeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,enum=types.CryptoAsymKeyType" json:"key_type,omitempty"`
	// Types that are valid to be assigned to Key:
	//	*CryptoAsymApiReqSetupPrivateKeyEx_RsaKey
	Key isCryptoAsymApiReqSetupPrivateKeyEx_Key `protobuf_oneof:"Key"`
}

func (m *CryptoAsymApiReqSetupPrivateKeyEx) Reset()         { *m = CryptoAsymApiReqSetupPrivateKeyEx{} }
func (m *CryptoAsymApiReqSetupPrivateKeyEx) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqSetupPrivateKeyEx) ProtoMessage()    {}
func (*CryptoAsymApiReqSetupPrivateKeyEx) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{160}
}

type isCryptoAsymApiReqSetupPrivateKeyEx_Key interface{ isCryptoAsymApiReqSetupPrivateKeyEx_Key() }

type CryptoAsymApiReqSetupPrivateKeyEx_RsaKey struct {
	RsaKey *CryptoAsymRsaKey `protobuf:"bytes,2,opt,name=rsa_key,json=rsaKey,oneof"`
}

func (*CryptoAsymApiReqSetupPrivateKeyEx_RsaKey) isCryptoAsymApiReqSetupPrivateKeyEx_Key() {}

func (m *CryptoAsymApiReqSetupPrivateKeyEx) GetKey() isCryptoAsymApiReqSetupPrivateKeyEx_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CryptoAsymApiReqSetupPrivateKeyEx) GetKeyType() CryptoAsymKeyType {
	if m != nil {
		return m.KeyType
	}
	return CryptoAsymKeyType_CRYPTO_ASYM_KEY_TYPE_ECDSA
}

func (m *CryptoAsymApiReqSetupPrivateKeyEx) GetRsaKey() *CryptoAsymRsaKey {
	if x, ok := m.GetKey().(*CryptoAsymApiReqSetupPrivateKeyEx_RsaKey); ok {
		return x.RsaKey
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CryptoAsymApiReqSetupPrivateKeyEx) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CryptoAsymApiReqSetupPrivateKeyEx_OneofMarshaler, _CryptoAsymApiReqSetupPrivateKeyEx_OneofUnmarshaler, _CryptoAsymApiReqSetupPrivateKeyEx_OneofSizer, []interface{}{
		(*CryptoAsymApiReqSetupPrivateKeyEx_RsaKey)(nil),
	}
}

func _CryptoAsymApiReqSetupPrivateKeyEx_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CryptoAsymApiReqSetupPrivateKeyEx)
	// Key
	switch x := m.Key.(type) {
	case *CryptoAsymApiReqSetupPrivateKeyEx_RsaKey:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaKey); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CryptoAsymApiReqSetupPrivateKeyEx.Key has unexpected type %T", x)
	}
	return nil
}

func _CryptoAsymApiReqSetupPrivateKeyEx_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CryptoAsymApiReqSetupPrivateKeyEx)
	switch tag {
	case 2: // Key.rsa_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymRsaKey)
		err := b.DecodeMessage(msg)
		m.Key = &CryptoAsymApiReqSetupPrivateKeyEx_RsaKey{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CryptoAsymApiReqSetupPrivateKeyEx_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CryptoAsymApiReqSetupPrivateKeyEx)
	// Key
	switch x := m.Key.(type) {
	case *CryptoAsymApiReqSetupPrivateKeyEx_RsaKey:
		s := proto.Size(x.RsaKey)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CryptoAsymApiRespSetupPrivateKeyEx struct {
	KeyType CryptoAsymKeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,enum=types.CryptoAsymKeyType" json:"key_type,omitempty"`
	KeyIdx  int32             `protobuf:"varint,2,opt,name=key_idx,json=keyIdx" json:"key_idx,omitempty"`
}

func (m *CryptoAsymApiRespSetupPrivateKeyEx) Reset()         { *m = CryptoAsymApiRespSetupPrivateKeyEx{} }
func (m *CryptoAsymApiRespSetupPrivateKeyEx) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespSetupPrivateKeyEx) ProtoMessage()    {}
func (*CryptoAsymApiRespSetupPrivateKeyEx) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{161}
}

func (m *CryptoAsymApiRespSetupPrivateKeyEx) GetKeyType() CryptoAsymKeyType {
	if m != nil {
		return m.KeyType
	}
	return CryptoAsymKeyType_CRYPTO_ASYM_KEY_TYPE_ECDSA
}

func (m *CryptoAsymApiRespSetupPrivateKeyEx) GetKeyIdx() int32 {
	if m != nil {
		return m.KeyIdx
	}
	return 0
}

// RSA Signature Generation
type CryptoAsymApiReqRSASignatureGen struct {
	KeySize uint32 `protobuf:"varint,1,opt,name=KeySize" json:"KeySize,omitempty"`
	ModN    []byte `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	D       []byte `protobuf:"bytes,3,opt,name=d,proto3" json:"d,omitempty"`
	H       []byte `protobuf:"bytes,4,opt,name=h,proto3" json:"h,omitempty"`
	KeyIdx  int32  `protobuf:"varint,5,opt,name=key_idx,json=keyIdx" json:"key_idx,omitempty"`
	AsyncEn bool   `protobuf:"varint,6,opt,name=async_en,json=asyncEn" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqRSASignatureGen) Reset()         { *m = CryptoAsymApiReqRSASignatureGen{} }
func (m *CryptoAsymApiReqRSASignatureGen) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSASignatureGen) ProtoMessage()    {}
func (*CryptoAsymApiReqRSASignatureGen) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{162}
}

func (m *CryptoAsymApiReqRSASignatureGen) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSASignatureGen) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureGen) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureGen) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureGen) GetKeyIdx() int32 {
	if m != nil {
		return m.KeyIdx
	}
	return 0
}

func (m *CryptoAsymApiReqRSASignatureGen) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

type CryptoAsymApiRespRSASignatureGen struct {
	S []byte `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *CryptoAsymApiRespRSASignatureGen) Reset()         { *m = CryptoAsymApiRespRSASignatureGen{} }
func (m *CryptoAsymApiRespRSASignatureGen) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSASignatureGen) ProtoMessage()    {}
func (*CryptoAsymApiRespRSASignatureGen) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{163}
}

func (m *CryptoAsymApiRespRSASignatureGen) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// RSA Signature Verification
type CryptoAsymApiReqRSASignatureVerify struct {
	KeySize uint32 `protobuf:"varint,1,opt,name=KeySize" json:"KeySize,omitempty"`
	ModN    []byte `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	E       []byte `protobuf:"bytes,3,opt,name=e,proto3" json:"e,omitempty"`
	H       []byte `protobuf:"bytes,4,opt,name=h,proto3" json:"h,omitempty"`
	S       []byte `protobuf:"bytes,5,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *CryptoAsymApiReqRSASignatureVerify) Reset()         { *m = CryptoAsymApiReqRSASignatureVerify{} }
func (m *CryptoAsymApiReqRSASignatureVerify) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSASignatureVerify) ProtoMessage()    {}
func (*CryptoAsymApiReqRSASignatureVerify) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{164}
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// Crypto Hash digest generate request
type CryptoSymmApiReqHashGenerate struct {
	Hashtype  CryptoApiHashType `protobuf:"varint,1,opt,name=hashtype,enum=internal.CryptoApiHashType" json:"hashtype,omitempty"`
	Key       []byte            `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	KeyLen    int32             `protobuf:"varint,3,opt,name=key_len,json=keyLen" json:"key_len,omitempty"`
	Data      []byte            `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	DataLen   int32             `protobuf:"varint,5,opt,name=data_len,json=dataLen" json:"data_len,omitempty"`
	DigestLen int32             `protobuf:"varint,6,opt,name=digest_len,json=digestLen" json:"digest_len,omitempty"`
}

func (m *CryptoSymmApiReqHashGenerate) Reset()                    { *m = CryptoSymmApiReqHashGenerate{} }
func (m *CryptoSymmApiReqHashGenerate) String() string            { return proto.CompactTextString(m) }
func (*CryptoSymmApiReqHashGenerate) ProtoMessage()               {}
func (*CryptoSymmApiReqHashGenerate) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{165} }

func (m *CryptoSymmApiReqHashGenerate) GetHashtype() CryptoApiHashType {
	if m != nil {
		return m.Hashtype
	}
	return CryptoApiHashType_CRYPTOAPI_HASHTYPE_NONE
}

func (m *CryptoSymmApiReqHashGenerate) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CryptoSymmApiReqHashGenerate) GetKeyLen() int32 {
	if m != nil {
		return m.KeyLen
	}
	return 0
}

func (m *CryptoSymmApiReqHashGenerate) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CryptoSymmApiReqHashGenerate) GetDataLen() int32 {
	if m != nil {
		return m.DataLen
	}
	return 0
}

func (m *CryptoSymmApiReqHashGenerate) GetDigestLen() int32 {
	if m != nil {
		return m.DigestLen
	}
	return 0
}

type CryptoSymmApiRespHashGenerate struct {
	Digest []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *CryptoSymmApiRespHashGenerate) Reset()         { *m = CryptoSymmApiRespHashGenerate{} }
func (m *CryptoSymmApiRespHashGenerate) String() string { return proto.CompactTextString(m) }
func (*CryptoSymmApiRespHashGenerate) ProtoMessage()    {}
func (*CryptoSymmApiRespHashGenerate) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{166}
}

func (m *CryptoSymmApiRespHashGenerate) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

// Crypto Hash digest verify request
type CryptoSymmApiReqHashVerify struct {
	Hashtype  CryptoApiHashType `protobuf:"varint,1,opt,name=hashtype,enum=internal.CryptoApiHashType" json:"hashtype,omitempty"`
	Key       []byte            `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	KeyLen    int32             `protobuf:"varint,3,opt,name=key_len,json=keyLen" json:"key_len,omitempty"`
	Data      []byte            `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	DataLen   int32             `protobuf:"varint,5,opt,name=data_len,json=dataLen" json:"data_len,omitempty"`
	Digest    []byte            `protobuf:"bytes,6,opt,name=digest,proto3" json:"digest,omitempty"`
	DigestLen int32             `protobuf:"varint,7,opt,name=digest_len,json=digestLen" json:"digest_len,omitempty"`
}

func (m *CryptoSymmApiReqHashVerify) Reset()                    { *m = CryptoSymmApiReqHashVerify{} }
func (m *CryptoSymmApiReqHashVerify) String() string            { return proto.CompactTextString(m) }
func (*CryptoSymmApiReqHashVerify) ProtoMessage()               {}
func (*CryptoSymmApiReqHashVerify) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{167} }

func (m *CryptoSymmApiReqHashVerify) GetHashtype() CryptoApiHashType {
	if m != nil {
		return m.Hashtype
	}
	return CryptoApiHashType_CRYPTOAPI_HASHTYPE_NONE
}

func (m *CryptoSymmApiReqHashVerify) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CryptoSymmApiReqHashVerify) GetKeyLen() int32 {
	if m != nil {
		return m.KeyLen
	}
	return 0
}

func (m *CryptoSymmApiReqHashVerify) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CryptoSymmApiReqHashVerify) GetDataLen() int32 {
	if m != nil {
		return m.DataLen
	}
	return 0
}

func (m *CryptoSymmApiReqHashVerify) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *CryptoSymmApiReqHashVerify) GetDigestLen() int32 {
	if m != nil {
		return m.DigestLen
	}
	return 0
}

// FIPS RSA Signature Generation
type CryptoAsymApiReqFIPSRSASignatureGen struct {
	KeyIdx    int32              `protobuf:"varint,1,opt,name=key_idx,json=keyIdx" json:"key_idx,omitempty"`
	ModN      []byte             `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	E         []byte             `protobuf:"bytes,3,opt,name=e,proto3" json:"e,omitempty"`
	Msg       []byte             `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	HashType  HashType           `protobuf:"varint,5,opt,name=hash_type,json=hashType,enum=types.HashType" json:"hash_type,omitempty"`
	SigScheme RSASignatureScheme `protobuf:"varint,6,opt,name=sig_scheme,json=sigScheme,enum=types.RSASignatureScheme" json:"sig_scheme,omitempty"`
}

func (m *CryptoAsymApiReqFIPSRSASignatureGen) Reset()         { *m = CryptoAsymApiReqFIPSRSASignatureGen{} }
func (m *CryptoAsymApiReqFIPSRSASignatureGen) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqFIPSRSASignatureGen) ProtoMessage()    {}
func (*CryptoAsymApiReqFIPSRSASignatureGen) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{168}
}

func (m *CryptoAsymApiReqFIPSRSASignatureGen) GetKeyIdx() int32 {
	if m != nil {
		return m.KeyIdx
	}
	return 0
}

func (m *CryptoAsymApiReqFIPSRSASignatureGen) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureGen) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureGen) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureGen) GetHashType() HashType {
	if m != nil {
		return m.HashType
	}
	return HashType_SHA1
}

func (m *CryptoAsymApiReqFIPSRSASignatureGen) GetSigScheme() RSASignatureScheme {
	if m != nil {
		return m.SigScheme
	}
	return RSASignatureScheme_RSASSA_PSS
}

type CryptoAsymApiRespFIPSRSASignatureGen struct {
	S []byte `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *CryptoAsymApiRespFIPSRSASignatureGen) Reset()         { *m = CryptoAsymApiRespFIPSRSASignatureGen{} }
func (m *CryptoAsymApiRespFIPSRSASignatureGen) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespFIPSRSASignatureGen) ProtoMessage()    {}
func (*CryptoAsymApiRespFIPSRSASignatureGen) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{169}
}

func (m *CryptoAsymApiRespFIPSRSASignatureGen) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// FIPS RSA Signature Verification
type CryptoAsymApiReqFIPSRSASignatureVerify struct {
	ModN      []byte             `protobuf:"bytes,1,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	E         []byte             `protobuf:"bytes,2,opt,name=e,proto3" json:"e,omitempty"`
	Msg       []byte             `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	S         []byte             `protobuf:"bytes,4,opt,name=s,proto3" json:"s,omitempty"`
	HashType  HashType           `protobuf:"varint,5,opt,name=hash_type,json=hashType,enum=types.HashType" json:"hash_type,omitempty"`
	SigScheme RSASignatureScheme `protobuf:"varint,6,opt,name=sig_scheme,json=sigScheme,enum=types.RSASignatureScheme" json:"sig_scheme,omitempty"`
}

func (m *CryptoAsymApiReqFIPSRSASignatureVerify) Reset() {
	*m = CryptoAsymApiReqFIPSRSASignatureVerify{}
}
func (m *CryptoAsymApiReqFIPSRSASignatureVerify) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqFIPSRSASignatureVerify) ProtoMessage()    {}
func (*CryptoAsymApiReqFIPSRSASignatureVerify) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{170}
}

func (m *CryptoAsymApiReqFIPSRSASignatureVerify) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureVerify) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureVerify) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureVerify) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureVerify) GetHashType() HashType {
	if m != nil {
		return m.HashType
	}
	return HashType_SHA1
}

func (m *CryptoAsymApiReqFIPSRSASignatureVerify) GetSigScheme() RSASignatureScheme {
	if m != nil {
		return m.SigScheme
	}
	return RSASignatureScheme_RSASSA_PSS
}

type CryptoApiRequest struct {
	ApiType CryptoApiType `protobuf:"varint,1,opt,name=api_type,json=apiType,enum=internal.CryptoApiType" json:"api_type,omitempty"`
	// Types that are valid to be assigned to CryptoApiReq:
	//	*CryptoApiRequest_EccPointMulFp
	//	*CryptoApiRequest_EcdsaSigGenFp
	//	*CryptoApiRequest_EcdsaSigVerifyFp
	//	*CryptoApiRequest_RsaEncrypt
	//	*CryptoApiRequest_RsaDecrypt
	//	*CryptoApiRequest_RsaCrtDecrypt
	//	*CryptoApiRequest_HashGenerate
	//	*CryptoApiRequest_HashVerify
	//	*CryptoApiRequest_RsaSigGen
	//	*CryptoApiRequest_RsaSigVerify
	//	*CryptoApiRequest_SetupPrivKey
	//	*CryptoApiRequest_SetupCert
	//	*CryptoApiRequest_SetupPrivKeyEx
	//	*CryptoApiRequest_FipsRsaSigGen
	//	*CryptoApiRequest_FipsRsaSigVerify
	CryptoApiReq isCryptoApiRequest_CryptoApiReq `protobuf_oneof:"CryptoApiReq"`
}

func (m *CryptoApiRequest) Reset()                    { *m = CryptoApiRequest{} }
func (m *CryptoApiRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoApiRequest) ProtoMessage()               {}
func (*CryptoApiRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{171} }

type isCryptoApiRequest_CryptoApiReq interface{ isCryptoApiRequest_CryptoApiReq() }

type CryptoApiRequest_EccPointMulFp struct {
	EccPointMulFp *CryptoAsymApiReqECCPointMulFp `protobuf:"bytes,2,opt,name=ecc_point_mul_fp,json=eccPointMulFp,oneof"`
}
type CryptoApiRequest_EcdsaSigGenFp struct {
	EcdsaSigGenFp *CryptoAsymApiReqECDSASignatureGenFp `protobuf:"bytes,3,opt,name=ecdsa_sig_gen_fp,json=ecdsaSigGenFp,oneof"`
}
type CryptoApiRequest_EcdsaSigVerifyFp struct {
	EcdsaSigVerifyFp *CryptoAsymApiReqECDSASignatureVerifyFp `protobuf:"bytes,4,opt,name=ecdsa_sig_verify_fp,json=ecdsaSigVerifyFp,oneof"`
}
type CryptoApiRequest_RsaEncrypt struct {
	RsaEncrypt *CryptoAsymApiReqRSAEncrypt `protobuf:"bytes,5,opt,name=rsa_encrypt,json=rsaEncrypt,oneof"`
}
type CryptoApiRequest_RsaDecrypt struct {
	RsaDecrypt *CryptoAsymApiReqRSADecrypt `protobuf:"bytes,6,opt,name=rsa_decrypt,json=rsaDecrypt,oneof"`
}
type CryptoApiRequest_RsaCrtDecrypt struct {
	RsaCrtDecrypt *CryptoAsymApiReqRSACRTDecrypt `protobuf:"bytes,7,opt,name=rsa_crt_decrypt,json=rsaCrtDecrypt,oneof"`
}
type CryptoApiRequest_HashGenerate struct {
	HashGenerate *CryptoSymmApiReqHashGenerate `protobuf:"bytes,8,opt,name=hash_generate,json=hashGenerate,oneof"`
}
type CryptoApiRequest_HashVerify struct {
	HashVerify *CryptoSymmApiReqHashVerify `protobuf:"bytes,9,opt,name=hash_verify,json=hashVerify,oneof"`
}
type CryptoApiRequest_RsaSigGen struct {
	RsaSigGen *CryptoAsymApiReqRSASignatureGen `protobuf:"bytes,10,opt,name=rsa_sig_gen,json=rsaSigGen,oneof"`
}
type CryptoApiRequest_RsaSigVerify struct {
	RsaSigVerify *CryptoAsymApiReqRSASignatureVerify `protobuf:"bytes,11,opt,name=rsa_sig_verify,json=rsaSigVerify,oneof"`
}
type CryptoApiRequest_SetupPrivKey struct {
	SetupPrivKey *CryptoAsymApiReqSetupPrivateKey `protobuf:"bytes,12,opt,name=setup_priv_key,json=setupPrivKey,oneof"`
}
type CryptoApiRequest_SetupCert struct {
	SetupCert *CryptoAsymApiReqSetupCert `protobuf:"bytes,13,opt,name=setup_cert,json=setupCert,oneof"`
}
type CryptoApiRequest_SetupPrivKeyEx struct {
	SetupPrivKeyEx *CryptoAsymApiReqSetupPrivateKeyEx `protobuf:"bytes,14,opt,name=setup_priv_key_ex,json=setupPrivKeyEx,oneof"`
}
type CryptoApiRequest_FipsRsaSigGen struct {
	FipsRsaSigGen *CryptoAsymApiReqFIPSRSASignatureGen `protobuf:"bytes,15,opt,name=fips_rsa_sig_gen,json=fipsRsaSigGen,oneof"`
}
type CryptoApiRequest_FipsRsaSigVerify struct {
	FipsRsaSigVerify *CryptoAsymApiReqFIPSRSASignatureVerify `protobuf:"bytes,16,opt,name=fips_rsa_sig_verify,json=fipsRsaSigVerify,oneof"`
}

func (*CryptoApiRequest_EccPointMulFp) isCryptoApiRequest_CryptoApiReq()    {}
func (*CryptoApiRequest_EcdsaSigGenFp) isCryptoApiRequest_CryptoApiReq()    {}
func (*CryptoApiRequest_EcdsaSigVerifyFp) isCryptoApiRequest_CryptoApiReq() {}
func (*CryptoApiRequest_RsaEncrypt) isCryptoApiRequest_CryptoApiReq()       {}
func (*CryptoApiRequest_RsaDecrypt) isCryptoApiRequest_CryptoApiReq()       {}
func (*CryptoApiRequest_RsaCrtDecrypt) isCryptoApiRequest_CryptoApiReq()    {}
func (*CryptoApiRequest_HashGenerate) isCryptoApiRequest_CryptoApiReq()     {}
func (*CryptoApiRequest_HashVerify) isCryptoApiRequest_CryptoApiReq()       {}
func (*CryptoApiRequest_RsaSigGen) isCryptoApiRequest_CryptoApiReq()        {}
func (*CryptoApiRequest_RsaSigVerify) isCryptoApiRequest_CryptoApiReq()     {}
func (*CryptoApiRequest_SetupPrivKey) isCryptoApiRequest_CryptoApiReq()     {}
func (*CryptoApiRequest_SetupCert) isCryptoApiRequest_CryptoApiReq()        {}
func (*CryptoApiRequest_SetupPrivKeyEx) isCryptoApiRequest_CryptoApiReq()   {}
func (*CryptoApiRequest_FipsRsaSigGen) isCryptoApiRequest_CryptoApiReq()    {}
func (*CryptoApiRequest_FipsRsaSigVerify) isCryptoApiRequest_CryptoApiReq() {}

func (m *CryptoApiRequest) GetCryptoApiReq() isCryptoApiRequest_CryptoApiReq {
	if m != nil {
		return m.CryptoApiReq
	}
	return nil
}

func (m *CryptoApiRequest) GetApiType() CryptoApiType {
	if m != nil {
		return m.ApiType
	}
	return CryptoApiType_ASYMAPI_ECC_POINT_MUL_FP
}

func (m *CryptoApiRequest) GetEccPointMulFp() *CryptoAsymApiReqECCPointMulFp {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_EccPointMulFp); ok {
		return x.EccPointMulFp
	}
	return nil
}

func (m *CryptoApiRequest) GetEcdsaSigGenFp() *CryptoAsymApiReqECDSASignatureGenFp {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_EcdsaSigGenFp); ok {
		return x.EcdsaSigGenFp
	}
	return nil
}

func (m *CryptoApiRequest) GetEcdsaSigVerifyFp() *CryptoAsymApiReqECDSASignatureVerifyFp {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_EcdsaSigVerifyFp); ok {
		return x.EcdsaSigVerifyFp
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaEncrypt() *CryptoAsymApiReqRSAEncrypt {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaEncrypt); ok {
		return x.RsaEncrypt
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaDecrypt() *CryptoAsymApiReqRSADecrypt {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaDecrypt); ok {
		return x.RsaDecrypt
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaCrtDecrypt() *CryptoAsymApiReqRSACRTDecrypt {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaCrtDecrypt); ok {
		return x.RsaCrtDecrypt
	}
	return nil
}

func (m *CryptoApiRequest) GetHashGenerate() *CryptoSymmApiReqHashGenerate {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_HashGenerate); ok {
		return x.HashGenerate
	}
	return nil
}

func (m *CryptoApiRequest) GetHashVerify() *CryptoSymmApiReqHashVerify {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_HashVerify); ok {
		return x.HashVerify
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaSigGen() *CryptoAsymApiReqRSASignatureGen {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaSigGen); ok {
		return x.RsaSigGen
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaSigVerify() *CryptoAsymApiReqRSASignatureVerify {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaSigVerify); ok {
		return x.RsaSigVerify
	}
	return nil
}

func (m *CryptoApiRequest) GetSetupPrivKey() *CryptoAsymApiReqSetupPrivateKey {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_SetupPrivKey); ok {
		return x.SetupPrivKey
	}
	return nil
}

func (m *CryptoApiRequest) GetSetupCert() *CryptoAsymApiReqSetupCert {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_SetupCert); ok {
		return x.SetupCert
	}
	return nil
}

func (m *CryptoApiRequest) GetSetupPrivKeyEx() *CryptoAsymApiReqSetupPrivateKeyEx {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_SetupPrivKeyEx); ok {
		return x.SetupPrivKeyEx
	}
	return nil
}

func (m *CryptoApiRequest) GetFipsRsaSigGen() *CryptoAsymApiReqFIPSRSASignatureGen {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_FipsRsaSigGen); ok {
		return x.FipsRsaSigGen
	}
	return nil
}

func (m *CryptoApiRequest) GetFipsRsaSigVerify() *CryptoAsymApiReqFIPSRSASignatureVerify {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_FipsRsaSigVerify); ok {
		return x.FipsRsaSigVerify
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CryptoApiRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CryptoApiRequest_OneofMarshaler, _CryptoApiRequest_OneofUnmarshaler, _CryptoApiRequest_OneofSizer, []interface{}{
		(*CryptoApiRequest_EccPointMulFp)(nil),
		(*CryptoApiRequest_EcdsaSigGenFp)(nil),
		(*CryptoApiRequest_EcdsaSigVerifyFp)(nil),
		(*CryptoApiRequest_RsaEncrypt)(nil),
		(*CryptoApiRequest_RsaDecrypt)(nil),
		(*CryptoApiRequest_RsaCrtDecrypt)(nil),
		(*CryptoApiRequest_HashGenerate)(nil),
		(*CryptoApiRequest_HashVerify)(nil),
		(*CryptoApiRequest_RsaSigGen)(nil),
		(*CryptoApiRequest_RsaSigVerify)(nil),
		(*CryptoApiRequest_SetupPrivKey)(nil),
		(*CryptoApiRequest_SetupCert)(nil),
		(*CryptoApiRequest_SetupPrivKeyEx)(nil),
		(*CryptoApiRequest_FipsRsaSigGen)(nil),
		(*CryptoApiRequest_FipsRsaSigVerify)(nil),
	}
}

func _CryptoApiRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CryptoApiRequest)
	// CryptoApiReq
	switch x := m.CryptoApiReq.(type) {
	case *CryptoApiRequest_EccPointMulFp:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EccPointMulFp); err != nil {
			return err
		}
	case *CryptoApiRequest_EcdsaSigGenFp:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaSigGenFp); err != nil {
			return err
		}
	case *CryptoApiRequest_EcdsaSigVerifyFp:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaSigVerifyFp); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaEncrypt:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaEncrypt); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaDecrypt:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaDecrypt); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaCrtDecrypt:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaCrtDecrypt); err != nil {
			return err
		}
	case *CryptoApiRequest_HashGenerate:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashGenerate); err != nil {
			return err
		}
	case *CryptoApiRequest_HashVerify:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashVerify); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaSigGen:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaSigGen); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaSigVerify:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaSigVerify); err != nil {
			return err
		}
	case *CryptoApiRequest_SetupPrivKey:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupPrivKey); err != nil {
			return err
		}
	case *CryptoApiRequest_SetupCert:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupCert); err != nil {
			return err
		}
	case *CryptoApiRequest_SetupPrivKeyEx:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupPrivKeyEx); err != nil {
			return err
		}
	case *CryptoApiRequest_FipsRsaSigGen:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FipsRsaSigGen); err != nil {
			return err
		}
	case *CryptoApiRequest_FipsRsaSigVerify:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FipsRsaSigVerify); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CryptoApiRequest.CryptoApiReq has unexpected type %T", x)
	}
	return nil
}

func _CryptoApiRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CryptoApiRequest)
	switch tag {
	case 2: // CryptoApiReq.ecc_point_mul_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqECCPointMulFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_EccPointMulFp{msg}
		return true, err
	case 3: // CryptoApiReq.ecdsa_sig_gen_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqECDSASignatureGenFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_EcdsaSigGenFp{msg}
		return true, err
	case 4: // CryptoApiReq.ecdsa_sig_verify_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqECDSASignatureVerifyFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_EcdsaSigVerifyFp{msg}
		return true, err
	case 5: // CryptoApiReq.rsa_encrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSAEncrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaEncrypt{msg}
		return true, err
	case 6: // CryptoApiReq.rsa_decrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSADecrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaDecrypt{msg}
		return true, err
	case 7: // CryptoApiReq.rsa_crt_decrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSACRTDecrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaCrtDecrypt{msg}
		return true, err
	case 8: // CryptoApiReq.hash_generate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoSymmApiReqHashGenerate)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_HashGenerate{msg}
		return true, err
	case 9: // CryptoApiReq.hash_verify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoSymmApiReqHashVerify)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_HashVerify{msg}
		return true, err
	case 10: // CryptoApiReq.rsa_sig_gen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSASignatureGen)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaSigGen{msg}
		return true, err
	case 11: // CryptoApiReq.rsa_sig_verify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSASignatureVerify)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaSigVerify{msg}
		return true, err
	case 12: // CryptoApiReq.setup_priv_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqSetupPrivateKey)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_SetupPrivKey{msg}
		return true, err
	case 13: // CryptoApiReq.setup_cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqSetupCert)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_SetupCert{msg}
		return true, err
	case 14: // CryptoApiReq.setup_priv_key_ex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqSetupPrivateKeyEx)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_SetupPrivKeyEx{msg}
		return true, err
	case 15: // CryptoApiReq.fips_rsa_sig_gen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqFIPSRSASignatureGen)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_FipsRsaSigGen{msg}
		return true, err
	case 16: // CryptoApiReq.fips_rsa_sig_verify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqFIPSRSASignatureVerify)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_FipsRsaSigVerify{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CryptoApiRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CryptoApiRequest)
	// CryptoApiReq
	switch x := m.CryptoApiReq.(type) {
	case *CryptoApiRequest_EccPointMulFp:
		s := proto.Size(x.EccPointMulFp)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_EcdsaSigGenFp:
		s := proto.Size(x.EcdsaSigGenFp)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_EcdsaSigVerifyFp:
		s := proto.Size(x.EcdsaSigVerifyFp)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaEncrypt:
		s := proto.Size(x.RsaEncrypt)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaDecrypt:
		s := proto.Size(x.RsaDecrypt)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaCrtDecrypt:
		s := proto.Size(x.RsaCrtDecrypt)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_HashGenerate:
		s := proto.Size(x.HashGenerate)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_HashVerify:
		s := proto.Size(x.HashVerify)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaSigGen:
		s := proto.Size(x.RsaSigGen)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaSigVerify:
		s := proto.Size(x.RsaSigVerify)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_SetupPrivKey:
		s := proto.Size(x.SetupPrivKey)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_SetupCert:
		s := proto.Size(x.SetupCert)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_SetupPrivKeyEx:
		s := proto.Size(x.SetupPrivKeyEx)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_FipsRsaSigGen:
		s := proto.Size(x.FipsRsaSigGen)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_FipsRsaSigVerify:
		s := proto.Size(x.FipsRsaSigVerify)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CryptoApiResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	// Types that are valid to be assigned to CryptoApiResp:
	//	*CryptoApiResponse_EccPointMulFp
	//	*CryptoApiResponse_EcdsaSigGenFp
	//	*CryptoApiResponse_RsaEncrypt
	//	*CryptoApiResponse_RsaDecrypt
	//	*CryptoApiResponse_RsaCrtDecrypt
	//	*CryptoApiResponse_HashGenerate
	//	*CryptoApiResponse_RsaSigGen
	//	*CryptoApiResponse_SetupPrivKey
	//	*CryptoApiResponse_SetupCert
	//	*CryptoApiResponse_SetupPrivKeyEx
	//	*CryptoApiResponse_FipsRsaSigGen
	CryptoApiResp isCryptoApiResponse_CryptoApiResp `protobuf_oneof:"CryptoApiResp"`
}

func (m *CryptoApiResponse) Reset()                    { *m = CryptoApiResponse{} }
func (m *CryptoApiResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoApiResponse) ProtoMessage()               {}
func (*CryptoApiResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{172} }

type isCryptoApiResponse_CryptoApiResp interface{ isCryptoApiResponse_CryptoApiResp() }

type CryptoApiResponse_EccPointMulFp struct {
	EccPointMulFp *CryptoAsymApiRespECCPointMulFp `protobuf:"bytes,2,opt,name=ecc_point_mul_fp,json=eccPointMulFp,oneof"`
}
type CryptoApiResponse_EcdsaSigGenFp struct {
	EcdsaSigGenFp *CryptoAsymApiRespECDSASignatureGenFp `protobuf:"bytes,3,opt,name=ecdsa_sig_gen_fp,json=ecdsaSigGenFp,oneof"`
}
type CryptoApiResponse_RsaEncrypt struct {
	RsaEncrypt *CryptoAsymApiRespRSAEncrypt `protobuf:"bytes,4,opt,name=rsa_encrypt,json=rsaEncrypt,oneof"`
}
type CryptoApiResponse_RsaDecrypt struct {
	RsaDecrypt *CryptoAsymApiRespRSADecrypt `protobuf:"bytes,5,opt,name=rsa_decrypt,json=rsaDecrypt,oneof"`
}
type CryptoApiResponse_RsaCrtDecrypt struct {
	RsaCrtDecrypt *CryptoAsymApiRespRSACRTDecrypt `protobuf:"bytes,6,opt,name=rsa_crt_decrypt,json=rsaCrtDecrypt,oneof"`
}
type CryptoApiResponse_HashGenerate struct {
	HashGenerate *CryptoSymmApiRespHashGenerate `protobuf:"bytes,7,opt,name=hash_generate,json=hashGenerate,oneof"`
}
type CryptoApiResponse_RsaSigGen struct {
	RsaSigGen *CryptoAsymApiRespRSASignatureGen `protobuf:"bytes,8,opt,name=rsa_sig_gen,json=rsaSigGen,oneof"`
}
type CryptoApiResponse_SetupPrivKey struct {
	SetupPrivKey *CryptoAsymApiRespSetupPrivateKey `protobuf:"bytes,9,opt,name=setup_priv_key,json=setupPrivKey,oneof"`
}
type CryptoApiResponse_SetupCert struct {
	SetupCert *CryptoAsymApiRespSetupCert `protobuf:"bytes,10,opt,name=setup_cert,json=setupCert,oneof"`
}
type CryptoApiResponse_SetupPrivKeyEx struct {
	SetupPrivKeyEx *CryptoAsymApiRespSetupPrivateKeyEx `protobuf:"bytes,11,opt,name=setup_priv_key_ex,json=setupPrivKeyEx,oneof"`
}
type CryptoApiResponse_FipsRsaSigGen struct {
	FipsRsaSigGen *CryptoAsymApiRespFIPSRSASignatureGen `protobuf:"bytes,12,opt,name=fips_rsa_sig_gen,json=fipsRsaSigGen,oneof"`
}

func (*CryptoApiResponse_EccPointMulFp) isCryptoApiResponse_CryptoApiResp()  {}
func (*CryptoApiResponse_EcdsaSigGenFp) isCryptoApiResponse_CryptoApiResp()  {}
func (*CryptoApiResponse_RsaEncrypt) isCryptoApiResponse_CryptoApiResp()     {}
func (*CryptoApiResponse_RsaDecrypt) isCryptoApiResponse_CryptoApiResp()     {}
func (*CryptoApiResponse_RsaCrtDecrypt) isCryptoApiResponse_CryptoApiResp()  {}
func (*CryptoApiResponse_HashGenerate) isCryptoApiResponse_CryptoApiResp()   {}
func (*CryptoApiResponse_RsaSigGen) isCryptoApiResponse_CryptoApiResp()      {}
func (*CryptoApiResponse_SetupPrivKey) isCryptoApiResponse_CryptoApiResp()   {}
func (*CryptoApiResponse_SetupCert) isCryptoApiResponse_CryptoApiResp()      {}
func (*CryptoApiResponse_SetupPrivKeyEx) isCryptoApiResponse_CryptoApiResp() {}
func (*CryptoApiResponse_FipsRsaSigGen) isCryptoApiResponse_CryptoApiResp()  {}

func (m *CryptoApiResponse) GetCryptoApiResp() isCryptoApiResponse_CryptoApiResp {
	if m != nil {
		return m.CryptoApiResp
	}
	return nil
}

func (m *CryptoApiResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoApiResponse) GetEccPointMulFp() *CryptoAsymApiRespECCPointMulFp {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_EccPointMulFp); ok {
		return x.EccPointMulFp
	}
	return nil
}

func (m *CryptoApiResponse) GetEcdsaSigGenFp() *CryptoAsymApiRespECDSASignatureGenFp {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_EcdsaSigGenFp); ok {
		return x.EcdsaSigGenFp
	}
	return nil
}

func (m *CryptoApiResponse) GetRsaEncrypt() *CryptoAsymApiRespRSAEncrypt {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_RsaEncrypt); ok {
		return x.RsaEncrypt
	}
	return nil
}

func (m *CryptoApiResponse) GetRsaDecrypt() *CryptoAsymApiRespRSADecrypt {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_RsaDecrypt); ok {
		return x.RsaDecrypt
	}
	return nil
}

func (m *CryptoApiResponse) GetRsaCrtDecrypt() *CryptoAsymApiRespRSACRTDecrypt {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_RsaCrtDecrypt); ok {
		return x.RsaCrtDecrypt
	}
	return nil
}

func (m *CryptoApiResponse) GetHashGenerate() *CryptoSymmApiRespHashGenerate {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_HashGenerate); ok {
		return x.HashGenerate
	}
	return nil
}

func (m *CryptoApiResponse) GetRsaSigGen() *CryptoAsymApiRespRSASignatureGen {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_RsaSigGen); ok {
		return x.RsaSigGen
	}
	return nil
}

func (m *CryptoApiResponse) GetSetupPrivKey() *CryptoAsymApiRespSetupPrivateKey {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_SetupPrivKey); ok {
		return x.SetupPrivKey
	}
	return nil
}

func (m *CryptoApiResponse) GetSetupCert() *CryptoAsymApiRespSetupCert {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_SetupCert); ok {
		return x.SetupCert
	}
	return nil
}

func (m *CryptoApiResponse) GetSetupPrivKeyEx() *CryptoAsymApiRespSetupPrivateKeyEx {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_SetupPrivKeyEx); ok {
		return x.SetupPrivKeyEx
	}
	return nil
}

func (m *CryptoApiResponse) GetFipsRsaSigGen() *CryptoAsymApiRespFIPSRSASignatureGen {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_FipsRsaSigGen); ok {
		return x.FipsRsaSigGen
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CryptoApiResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CryptoApiResponse_OneofMarshaler, _CryptoApiResponse_OneofUnmarshaler, _CryptoApiResponse_OneofSizer, []interface{}{
		(*CryptoApiResponse_EccPointMulFp)(nil),
		(*CryptoApiResponse_EcdsaSigGenFp)(nil),
		(*CryptoApiResponse_RsaEncrypt)(nil),
		(*CryptoApiResponse_RsaDecrypt)(nil),
		(*CryptoApiResponse_RsaCrtDecrypt)(nil),
		(*CryptoApiResponse_HashGenerate)(nil),
		(*CryptoApiResponse_RsaSigGen)(nil),
		(*CryptoApiResponse_SetupPrivKey)(nil),
		(*CryptoApiResponse_SetupCert)(nil),
		(*CryptoApiResponse_SetupPrivKeyEx)(nil),
		(*CryptoApiResponse_FipsRsaSigGen)(nil),
	}
}

func _CryptoApiResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CryptoApiResponse)
	// CryptoApiResp
	switch x := m.CryptoApiResp.(type) {
	case *CryptoApiResponse_EccPointMulFp:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EccPointMulFp); err != nil {
			return err
		}
	case *CryptoApiResponse_EcdsaSigGenFp:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaSigGenFp); err != nil {
			return err
		}
	case *CryptoApiResponse_RsaEncrypt:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaEncrypt); err != nil {
			return err
		}
	case *CryptoApiResponse_RsaDecrypt:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaDecrypt); err != nil {
			return err
		}
	case *CryptoApiResponse_RsaCrtDecrypt:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaCrtDecrypt); err != nil {
			return err
		}
	case *CryptoApiResponse_HashGenerate:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashGenerate); err != nil {
			return err
		}
	case *CryptoApiResponse_RsaSigGen:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaSigGen); err != nil {
			return err
		}
	case *CryptoApiResponse_SetupPrivKey:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupPrivKey); err != nil {
			return err
		}
	case *CryptoApiResponse_SetupCert:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupCert); err != nil {
			return err
		}
	case *CryptoApiResponse_SetupPrivKeyEx:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupPrivKeyEx); err != nil {
			return err
		}
	case *CryptoApiResponse_FipsRsaSigGen:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FipsRsaSigGen); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CryptoApiResponse.CryptoApiResp has unexpected type %T", x)
	}
	return nil
}

func _CryptoApiResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CryptoApiResponse)
	switch tag {
	case 2: // CryptoApiResp.ecc_point_mul_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespECCPointMulFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_EccPointMulFp{msg}
		return true, err
	case 3: // CryptoApiResp.ecdsa_sig_gen_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespECDSASignatureGenFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_EcdsaSigGenFp{msg}
		return true, err
	case 4: // CryptoApiResp.rsa_encrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSAEncrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_RsaEncrypt{msg}
		return true, err
	case 5: // CryptoApiResp.rsa_decrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSADecrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_RsaDecrypt{msg}
		return true, err
	case 6: // CryptoApiResp.rsa_crt_decrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSACRTDecrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_RsaCrtDecrypt{msg}
		return true, err
	case 7: // CryptoApiResp.hash_generate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoSymmApiRespHashGenerate)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_HashGenerate{msg}
		return true, err
	case 8: // CryptoApiResp.rsa_sig_gen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSASignatureGen)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_RsaSigGen{msg}
		return true, err
	case 9: // CryptoApiResp.setup_priv_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespSetupPrivateKey)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_SetupPrivKey{msg}
		return true, err
	case 10: // CryptoApiResp.setup_cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespSetupCert)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_SetupCert{msg}
		return true, err
	case 11: // CryptoApiResp.setup_priv_key_ex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespSetupPrivateKeyEx)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_SetupPrivKeyEx{msg}
		return true, err
	case 12: // CryptoApiResp.fips_rsa_sig_gen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespFIPSRSASignatureGen)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_FipsRsaSigGen{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CryptoApiResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CryptoApiResponse)
	// CryptoApiResp
	switch x := m.CryptoApiResp.(type) {
	case *CryptoApiResponse_EccPointMulFp:
		s := proto.Size(x.EccPointMulFp)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_EcdsaSigGenFp:
		s := proto.Size(x.EcdsaSigGenFp)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_RsaEncrypt:
		s := proto.Size(x.RsaEncrypt)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_RsaDecrypt:
		s := proto.Size(x.RsaDecrypt)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_RsaCrtDecrypt:
		s := proto.Size(x.RsaCrtDecrypt)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_HashGenerate:
		s := proto.Size(x.HashGenerate)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_RsaSigGen:
		s := proto.Size(x.RsaSigGen)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_SetupPrivKey:
		s := proto.Size(x.SetupPrivKey)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_SetupCert:
		s := proto.Size(x.SetupCert)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_SetupPrivKeyEx:
		s := proto.Size(x.SetupPrivKeyEx)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_FipsRsaSigGen:
		s := proto.Size(x.FipsRsaSigGen)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CryptoApiRequestMsg struct {
	Request []*CryptoApiRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoApiRequestMsg) Reset()                    { *m = CryptoApiRequestMsg{} }
func (m *CryptoApiRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoApiRequestMsg) ProtoMessage()               {}
func (*CryptoApiRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{173} }

func (m *CryptoApiRequestMsg) GetRequest() []*CryptoApiRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoApiResponseMsg struct {
	Response []*CryptoApiResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoApiResponseMsg) Reset()                    { *m = CryptoApiResponseMsg{} }
func (m *CryptoApiResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoApiResponseMsg) ProtoMessage()               {}
func (*CryptoApiResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{174} }

func (m *CryptoApiResponseMsg) GetResponse() []*CryptoApiResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type DescrAolRequest struct {
	DescrAolHandle uint64 `protobuf:"fixed64,1,opt,name=descr_aol_handle,json=descrAolHandle" json:"descr_aol_handle,omitempty"`
}

func (m *DescrAolRequest) Reset()                    { *m = DescrAolRequest{} }
func (m *DescrAolRequest) String() string            { return proto.CompactTextString(m) }
func (*DescrAolRequest) ProtoMessage()               {}
func (*DescrAolRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{175} }

func (m *DescrAolRequest) GetDescrAolHandle() uint64 {
	if m != nil {
		return m.DescrAolHandle
	}
	return 0
}

type DescrAolRequestMsg struct {
	Request []*DescrAolRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *DescrAolRequestMsg) Reset()                    { *m = DescrAolRequestMsg{} }
func (m *DescrAolRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*DescrAolRequestMsg) ProtoMessage()               {}
func (*DescrAolRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{176} }

func (m *DescrAolRequestMsg) GetRequest() []*DescrAolRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type DescrAolSpec struct {
	ApiStatus          ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	DescrAolHandle     uint64    `protobuf:"fixed64,2,opt,name=descr_aol_handle,json=descrAolHandle" json:"descr_aol_handle,omitempty"`
	Address1           uint64    `protobuf:"fixed64,3,opt,name=Address1" json:"Address1,omitempty"`
	Offset1            uint32    `protobuf:"fixed32,4,opt,name=Offset1" json:"Offset1,omitempty"`
	Length1            uint32    `protobuf:"fixed32,5,opt,name=Length1" json:"Length1,omitempty"`
	Address2           uint64    `protobuf:"fixed64,6,opt,name=Address2" json:"Address2,omitempty"`
	Offset2            uint32    `protobuf:"fixed32,7,opt,name=Offset2" json:"Offset2,omitempty"`
	Length2            uint32    `protobuf:"fixed32,8,opt,name=Length2" json:"Length2,omitempty"`
	Address3           uint64    `protobuf:"fixed64,9,opt,name=Address3" json:"Address3,omitempty"`
	Offset3            uint32    `protobuf:"fixed32,10,opt,name=Offset3" json:"Offset3,omitempty"`
	Length3            uint32    `protobuf:"fixed32,11,opt,name=Length3" json:"Length3,omitempty"`
	NextDescrAolHandle uint64    `protobuf:"fixed64,12,opt,name=next_descr_aol_handle,json=nextDescrAolHandle" json:"next_descr_aol_handle,omitempty"`
}

func (m *DescrAolSpec) Reset()                    { *m = DescrAolSpec{} }
func (m *DescrAolSpec) String() string            { return proto.CompactTextString(m) }
func (*DescrAolSpec) ProtoMessage()               {}
func (*DescrAolSpec) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{177} }

func (m *DescrAolSpec) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *DescrAolSpec) GetDescrAolHandle() uint64 {
	if m != nil {
		return m.DescrAolHandle
	}
	return 0
}

func (m *DescrAolSpec) GetAddress1() uint64 {
	if m != nil {
		return m.Address1
	}
	return 0
}

func (m *DescrAolSpec) GetOffset1() uint32 {
	if m != nil {
		return m.Offset1
	}
	return 0
}

func (m *DescrAolSpec) GetLength1() uint32 {
	if m != nil {
		return m.Length1
	}
	return 0
}

func (m *DescrAolSpec) GetAddress2() uint64 {
	if m != nil {
		return m.Address2
	}
	return 0
}

func (m *DescrAolSpec) GetOffset2() uint32 {
	if m != nil {
		return m.Offset2
	}
	return 0
}

func (m *DescrAolSpec) GetLength2() uint32 {
	if m != nil {
		return m.Length2
	}
	return 0
}

func (m *DescrAolSpec) GetAddress3() uint64 {
	if m != nil {
		return m.Address3
	}
	return 0
}

func (m *DescrAolSpec) GetOffset3() uint32 {
	if m != nil {
		return m.Offset3
	}
	return 0
}

func (m *DescrAolSpec) GetLength3() uint32 {
	if m != nil {
		return m.Length3
	}
	return 0
}

func (m *DescrAolSpec) GetNextDescrAolHandle() uint64 {
	if m != nil {
		return m.NextDescrAolHandle
	}
	return 0
}

type DescrAolResponseMsg struct {
	Response []*DescrAolSpec `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *DescrAolResponseMsg) Reset()                    { *m = DescrAolResponseMsg{} }
func (m *DescrAolResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*DescrAolResponseMsg) ProtoMessage()               {}
func (*DescrAolResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{178} }

func (m *DescrAolResponseMsg) GetResponse() []*DescrAolSpec {
	if m != nil {
		return m.Response
	}
	return nil
}

// ProxycCbKeyHandle is used to operate on a proxyccb either by its key or handle
type ProxycCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*ProxycCbKeyHandle_ProxyccbId
	//	*ProxycCbKeyHandle_ProxyccbHandle
	KeyOrHandle isProxycCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *ProxycCbKeyHandle) Reset()                    { *m = ProxycCbKeyHandle{} }
func (m *ProxycCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbKeyHandle) ProtoMessage()               {}
func (*ProxycCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{179} }

type isProxycCbKeyHandle_KeyOrHandle interface{ isProxycCbKeyHandle_KeyOrHandle() }

type ProxycCbKeyHandle_ProxyccbId struct {
	ProxyccbId uint32 `protobuf:"varint,1,opt,name=proxyccb_id,json=proxyccbId,oneof"`
}
type ProxycCbKeyHandle_ProxyccbHandle struct {
	ProxyccbHandle uint64 `protobuf:"fixed64,2,opt,name=proxyccb_handle,json=proxyccbHandle,oneof"`
}

func (*ProxycCbKeyHandle_ProxyccbId) isProxycCbKeyHandle_KeyOrHandle()     {}
func (*ProxycCbKeyHandle_ProxyccbHandle) isProxycCbKeyHandle_KeyOrHandle() {}

func (m *ProxycCbKeyHandle) GetKeyOrHandle() isProxycCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *ProxycCbKeyHandle) GetProxyccbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*ProxycCbKeyHandle_ProxyccbId); ok {
		return x.ProxyccbId
	}
	return 0
}

func (m *ProxycCbKeyHandle) GetProxyccbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*ProxycCbKeyHandle_ProxyccbHandle); ok {
		return x.ProxyccbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProxycCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProxycCbKeyHandle_OneofMarshaler, _ProxycCbKeyHandle_OneofUnmarshaler, _ProxycCbKeyHandle_OneofSizer, []interface{}{
		(*ProxycCbKeyHandle_ProxyccbId)(nil),
		(*ProxycCbKeyHandle_ProxyccbHandle)(nil),
	}
}

func _ProxycCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProxycCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *ProxycCbKeyHandle_ProxyccbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ProxyccbId))
	case *ProxycCbKeyHandle_ProxyccbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.ProxyccbHandle))
	case nil:
	default:
		return fmt.Errorf("ProxycCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _ProxycCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProxycCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.proxyccb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &ProxycCbKeyHandle_ProxyccbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.proxyccb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &ProxycCbKeyHandle_ProxyccbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _ProxycCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProxycCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *ProxycCbKeyHandle_ProxyccbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ProxyccbId))
	case *ProxycCbKeyHandle_ProxyccbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ProxycCbSpec captures all the proxyccb level configuration
type ProxycCbSpec struct {
	KeyOrHandle             *ProxycCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Pi                      uint32             `protobuf:"varint,2,opt,name=pi" json:"pi,omitempty"`
	Ci                      uint32             `protobuf:"varint,3,opt,name=ci" json:"ci,omitempty"`
	ProxyccbFlags           uint32             `protobuf:"varint,4,opt,name=proxyccb_flags,json=proxyccbFlags" json:"proxyccb_flags,omitempty"`
	MyTxqBase               uint64             `protobuf:"varint,5,opt,name=my_txq_base,json=myTxqBase" json:"my_txq_base,omitempty"`
	MyTxqRingSizeShift      uint32             `protobuf:"varint,6,opt,name=my_txq_ring_size_shift,json=myTxqRingSizeShift" json:"my_txq_ring_size_shift,omitempty"`
	MyTxqEntrySizeShift     uint32             `protobuf:"varint,7,opt,name=my_txq_entry_size_shift,json=myTxqEntrySizeShift" json:"my_txq_entry_size_shift,omitempty"`
	ChainTxqBase            uint64             `protobuf:"varint,8,opt,name=chain_txq_base,json=chainTxqBase" json:"chain_txq_base,omitempty"`
	ChainTxqRingIndicesAddr uint64             `protobuf:"varint,9,opt,name=chain_txq_ring_indices_addr,json=chainTxqRingIndicesAddr" json:"chain_txq_ring_indices_addr,omitempty"`
	ChainTxqRingSizeShift   uint32             `protobuf:"varint,10,opt,name=chain_txq_ring_size_shift,json=chainTxqRingSizeShift" json:"chain_txq_ring_size_shift,omitempty"`
	ChainTxqEntrySizeShift  uint32             `protobuf:"varint,11,opt,name=chain_txq_entry_size_shift,json=chainTxqEntrySizeShift" json:"chain_txq_entry_size_shift,omitempty"`
	ChainTxqLif             uint32             `protobuf:"varint,12,opt,name=chain_txq_lif,json=chainTxqLif" json:"chain_txq_lif,omitempty"`
	ChainTxqQtype           uint32             `protobuf:"varint,13,opt,name=chain_txq_qtype,json=chainTxqQtype" json:"chain_txq_qtype,omitempty"`
	ChainTxqQid             uint32             `protobuf:"varint,14,opt,name=chain_txq_qid,json=chainTxqQid" json:"chain_txq_qid,omitempty"`
	ChainTxqRing            uint32             `protobuf:"varint,15,opt,name=chain_txq_ring,json=chainTxqRing" json:"chain_txq_ring,omitempty"`
	RedirSpan               uint32             `protobuf:"varint,16,opt,name=redir_span,json=redirSpan" json:"redir_span,omitempty"`
	//
	// 64-bit statistic counters
	StatPktsChain   uint64 `protobuf:"varint,17,opt,name=stat_pkts_chain,json=statPktsChain" json:"stat_pkts_chain,omitempty"`
	StatPktsDiscard uint64 `protobuf:"varint,18,opt,name=stat_pkts_discard,json=statPktsDiscard" json:"stat_pkts_discard,omitempty"`
	//
	// 32-bit saturating statistic counters
	StatCbNotReady      uint32 `protobuf:"varint,19,opt,name=stat_cb_not_ready,json=statCbNotReady" json:"stat_cb_not_ready,omitempty"`
	StatMyTxqEmpty      uint32 `protobuf:"varint,20,opt,name=stat_my_txq_empty,json=statMyTxqEmpty" json:"stat_my_txq_empty,omitempty"`
	StatAolErr          uint32 `protobuf:"varint,21,opt,name=stat_aol_err,json=statAolErr" json:"stat_aol_err,omitempty"`
	StatTxqFull         uint32 `protobuf:"varint,22,opt,name=stat_txq_full,json=statTxqFull" json:"stat_txq_full,omitempty"`
	StatDescSemFreeFull uint32 `protobuf:"varint,23,opt,name=stat_desc_sem_free_full,json=statDescSemFreeFull" json:"stat_desc_sem_free_full,omitempty"`
	StatPageSemFreeFull uint32 `protobuf:"varint,24,opt,name=stat_page_sem_free_full,json=statPageSemFreeFull" json:"stat_page_sem_free_full,omitempty"`
}

func (m *ProxycCbSpec) Reset()                    { *m = ProxycCbSpec{} }
func (m *ProxycCbSpec) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbSpec) ProtoMessage()               {}
func (*ProxycCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{180} }

func (m *ProxycCbSpec) GetKeyOrHandle() *ProxycCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *ProxycCbSpec) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *ProxycCbSpec) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

func (m *ProxycCbSpec) GetProxyccbFlags() uint32 {
	if m != nil {
		return m.ProxyccbFlags
	}
	return 0
}

func (m *ProxycCbSpec) GetMyTxqBase() uint64 {
	if m != nil {
		return m.MyTxqBase
	}
	return 0
}

func (m *ProxycCbSpec) GetMyTxqRingSizeShift() uint32 {
	if m != nil {
		return m.MyTxqRingSizeShift
	}
	return 0
}

func (m *ProxycCbSpec) GetMyTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.MyTxqEntrySizeShift
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqBase() uint64 {
	if m != nil {
		return m.ChainTxqBase
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqRingIndicesAddr() uint64 {
	if m != nil {
		return m.ChainTxqRingIndicesAddr
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqRingSizeShift() uint32 {
	if m != nil {
		return m.ChainTxqRingSizeShift
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.ChainTxqEntrySizeShift
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqLif() uint32 {
	if m != nil {
		return m.ChainTxqLif
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqQtype() uint32 {
	if m != nil {
		return m.ChainTxqQtype
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqQid() uint32 {
	if m != nil {
		return m.ChainTxqQid
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqRing() uint32 {
	if m != nil {
		return m.ChainTxqRing
	}
	return 0
}

func (m *ProxycCbSpec) GetRedirSpan() uint32 {
	if m != nil {
		return m.RedirSpan
	}
	return 0
}

func (m *ProxycCbSpec) GetStatPktsChain() uint64 {
	if m != nil {
		return m.StatPktsChain
	}
	return 0
}

func (m *ProxycCbSpec) GetStatPktsDiscard() uint64 {
	if m != nil {
		return m.StatPktsDiscard
	}
	return 0
}

func (m *ProxycCbSpec) GetStatCbNotReady() uint32 {
	if m != nil {
		return m.StatCbNotReady
	}
	return 0
}

func (m *ProxycCbSpec) GetStatMyTxqEmpty() uint32 {
	if m != nil {
		return m.StatMyTxqEmpty
	}
	return 0
}

func (m *ProxycCbSpec) GetStatAolErr() uint32 {
	if m != nil {
		return m.StatAolErr
	}
	return 0
}

func (m *ProxycCbSpec) GetStatTxqFull() uint32 {
	if m != nil {
		return m.StatTxqFull
	}
	return 0
}

func (m *ProxycCbSpec) GetStatDescSemFreeFull() uint32 {
	if m != nil {
		return m.StatDescSemFreeFull
	}
	return 0
}

func (m *ProxycCbSpec) GetStatPageSemFreeFull() uint32 {
	if m != nil {
		return m.StatPageSemFreeFull
	}
	return 0
}

// ProxycCbRequestMsg is batched add or modify proxyccb request
type ProxycCbRequestMsg struct {
	Request []*ProxycCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxycCbRequestMsg) Reset()                    { *m = ProxycCbRequestMsg{} }
func (m *ProxycCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbRequestMsg) ProtoMessage()               {}
func (*ProxycCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{181} }

func (m *ProxycCbRequestMsg) GetRequest() []*ProxycCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxycCbStatus is the operational status of a given proxyccb
type ProxycCbStatus struct {
	ProxyccbHandle uint64 `protobuf:"fixed64,1,opt,name=proxyccb_handle,json=proxyccbHandle" json:"proxyccb_handle,omitempty"`
}

func (m *ProxycCbStatus) Reset()                    { *m = ProxycCbStatus{} }
func (m *ProxycCbStatus) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbStatus) ProtoMessage()               {}
func (*ProxycCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{182} }

func (m *ProxycCbStatus) GetProxyccbHandle() uint64 {
	if m != nil {
		return m.ProxyccbHandle
	}
	return 0
}

// ProxycCbResponse is response to ProxycCbSpec
type ProxycCbResponse struct {
	ApiStatus      ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	ProxyccbStatus *ProxycCbStatus `protobuf:"bytes,2,opt,name=proxyccb_status,json=proxyccbStatus" json:"proxyccb_status,omitempty"`
}

func (m *ProxycCbResponse) Reset()                    { *m = ProxycCbResponse{} }
func (m *ProxycCbResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbResponse) ProtoMessage()               {}
func (*ProxycCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{183} }

func (m *ProxycCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxycCbResponse) GetProxyccbStatus() *ProxycCbStatus {
	if m != nil {
		return m.ProxyccbStatus
	}
	return nil
}

// ProxycCbResponseMsg is batched response to ProxycCbRequestMsg
type ProxycCbResponseMsg struct {
	Response []*ProxycCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxycCbResponseMsg) Reset()                    { *m = ProxycCbResponseMsg{} }
func (m *ProxycCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbResponseMsg) ProtoMessage()               {}
func (*ProxycCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{184} }

func (m *ProxycCbResponseMsg) GetResponse() []*ProxycCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// ProxycCbDeleteRequest is used to delete a proxyccb
type ProxycCbDeleteRequest struct {
	KeyOrHandle *ProxycCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *ProxycCbDeleteRequest) Reset()                    { *m = ProxycCbDeleteRequest{} }
func (m *ProxycCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbDeleteRequest) ProtoMessage()               {}
func (*ProxycCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{185} }

func (m *ProxycCbDeleteRequest) GetKeyOrHandle() *ProxycCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ProxycCbDeleteRequestMsg is used to delete a batch of proxyccbs
type ProxycCbDeleteRequestMsg struct {
	Request []*ProxycCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxycCbDeleteRequestMsg) Reset()                    { *m = ProxycCbDeleteRequestMsg{} }
func (m *ProxycCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbDeleteRequestMsg) ProtoMessage()               {}
func (*ProxycCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{186} }

func (m *ProxycCbDeleteRequestMsg) GetRequest() []*ProxycCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxycCbDeleteResponseMsg is batched response to ProxycCbDeleteRequestMsg
type ProxycCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *ProxycCbDeleteResponseMsg) Reset()                    { *m = ProxycCbDeleteResponseMsg{} }
func (m *ProxycCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbDeleteResponseMsg) ProtoMessage()               {}
func (*ProxycCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{187} }

func (m *ProxycCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// ProxycCbGetRequest is used to get information about a proxyccb
type ProxycCbGetRequest struct {
	KeyOrHandle *ProxycCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *ProxycCbGetRequest) Reset()                    { *m = ProxycCbGetRequest{} }
func (m *ProxycCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbGetRequest) ProtoMessage()               {}
func (*ProxycCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{188} }

func (m *ProxycCbGetRequest) GetKeyOrHandle() *ProxycCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ProxycCbGetRequestMsg is batched GET requests for proxyccbs
type ProxycCbGetRequestMsg struct {
	Request []*ProxycCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxycCbGetRequestMsg) Reset()                    { *m = ProxycCbGetRequestMsg{} }
func (m *ProxycCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbGetRequestMsg) ProtoMessage()               {}
func (*ProxycCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{189} }

func (m *ProxycCbGetRequestMsg) GetRequest() []*ProxycCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxycCbStats is the statistics object for each proxyccb
type ProxycCbStats struct {
}

func (m *ProxycCbStats) Reset()                    { *m = ProxycCbStats{} }
func (m *ProxycCbStats) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbStats) ProtoMessage()               {}
func (*ProxycCbStats) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{190} }

// ProxycCbGetResponse captures all the information about a proxyccb
// only if api_status indicates success, other fields are valid
type ProxycCbGetResponse struct {
	ApiStatus ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *ProxycCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *ProxycCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *ProxycCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *ProxycCbGetResponse) Reset()                    { *m = ProxycCbGetResponse{} }
func (m *ProxycCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbGetResponse) ProtoMessage()               {}
func (*ProxycCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{191} }

func (m *ProxycCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxycCbGetResponse) GetSpec() *ProxycCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProxycCbGetResponse) GetStatus() *ProxycCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ProxycCbGetResponse) GetStats() *ProxycCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// ProxycCbGetResponseMsg is batched response to ProxycCbGetRequestMsg
type ProxycCbGetResponseMsg struct {
	Response []*ProxycCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxycCbGetResponseMsg) Reset()                    { *m = ProxycCbGetResponseMsg{} }
func (m *ProxycCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbGetResponseMsg) ProtoMessage()               {}
func (*ProxycCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{192} }

func (m *ProxycCbGetResponseMsg) GetResponse() []*ProxycCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// ProxyrCbKeyHandle is used to operate on a proxyrcb either by its key or handle
type ProxyrCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*ProxyrCbKeyHandle_ProxyrcbId
	//	*ProxyrCbKeyHandle_ProxyrcbHandle
	KeyOrHandle isProxyrCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *ProxyrCbKeyHandle) Reset()                    { *m = ProxyrCbKeyHandle{} }
func (m *ProxyrCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbKeyHandle) ProtoMessage()               {}
func (*ProxyrCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{193} }

type isProxyrCbKeyHandle_KeyOrHandle interface{ isProxyrCbKeyHandle_KeyOrHandle() }

type ProxyrCbKeyHandle_ProxyrcbId struct {
	ProxyrcbId uint32 `protobuf:"varint,1,opt,name=proxyrcb_id,json=proxyrcbId,oneof"`
}
type ProxyrCbKeyHandle_ProxyrcbHandle struct {
	ProxyrcbHandle uint64 `protobuf:"fixed64,2,opt,name=proxyrcb_handle,json=proxyrcbHandle,oneof"`
}

func (*ProxyrCbKeyHandle_ProxyrcbId) isProxyrCbKeyHandle_KeyOrHandle()     {}
func (*ProxyrCbKeyHandle_ProxyrcbHandle) isProxyrCbKeyHandle_KeyOrHandle() {}

func (m *ProxyrCbKeyHandle) GetKeyOrHandle() isProxyrCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *ProxyrCbKeyHandle) GetProxyrcbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*ProxyrCbKeyHandle_ProxyrcbId); ok {
		return x.ProxyrcbId
	}
	return 0
}

func (m *ProxyrCbKeyHandle) GetProxyrcbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*ProxyrCbKeyHandle_ProxyrcbHandle); ok {
		return x.ProxyrcbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProxyrCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProxyrCbKeyHandle_OneofMarshaler, _ProxyrCbKeyHandle_OneofUnmarshaler, _ProxyrCbKeyHandle_OneofSizer, []interface{}{
		(*ProxyrCbKeyHandle_ProxyrcbId)(nil),
		(*ProxyrCbKeyHandle_ProxyrcbHandle)(nil),
	}
}

func _ProxyrCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProxyrCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *ProxyrCbKeyHandle_ProxyrcbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ProxyrcbId))
	case *ProxyrCbKeyHandle_ProxyrcbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.ProxyrcbHandle))
	case nil:
	default:
		return fmt.Errorf("ProxyrCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _ProxyrCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProxyrCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.proxyrcb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &ProxyrCbKeyHandle_ProxyrcbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.proxyrcb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &ProxyrCbKeyHandle_ProxyrcbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _ProxyrCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProxyrCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *ProxyrCbKeyHandle_ProxyrcbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ProxyrcbId))
	case *ProxyrCbKeyHandle_ProxyrcbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ProxyrCbSpec captures all the proxyrcb level configuration
type ProxyrCbSpec struct {
	Meta                    *ObjectMeta        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle             *ProxyrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Pi                      uint32             `protobuf:"varint,3,opt,name=pi" json:"pi,omitempty"`
	Ci                      uint32             `protobuf:"varint,4,opt,name=ci" json:"ci,omitempty"`
	ProxyrcbFlags           uint32             `protobuf:"varint,5,opt,name=proxyrcb_flags,json=proxyrcbFlags" json:"proxyrcb_flags,omitempty"`
	MyTxqBase               uint64             `protobuf:"varint,6,opt,name=my_txq_base,json=myTxqBase" json:"my_txq_base,omitempty"`
	MyTxqRingSizeShift      uint32             `protobuf:"varint,7,opt,name=my_txq_ring_size_shift,json=myTxqRingSizeShift" json:"my_txq_ring_size_shift,omitempty"`
	MyTxqEntrySizeShift     uint32             `protobuf:"varint,8,opt,name=my_txq_entry_size_shift,json=myTxqEntrySizeShift" json:"my_txq_entry_size_shift,omitempty"`
	ChainRxqBase            uint64             `protobuf:"varint,9,opt,name=chain_rxq_base,json=chainRxqBase" json:"chain_rxq_base,omitempty"`
	ChainRxqRingIndicesAddr uint64             `protobuf:"varint,10,opt,name=chain_rxq_ring_indices_addr,json=chainRxqRingIndicesAddr" json:"chain_rxq_ring_indices_addr,omitempty"`
	ChainRxqRingSizeShift   uint32             `protobuf:"varint,11,opt,name=chain_rxq_ring_size_shift,json=chainRxqRingSizeShift" json:"chain_rxq_ring_size_shift,omitempty"`
	ChainRxqEntrySizeShift  uint32             `protobuf:"varint,12,opt,name=chain_rxq_entry_size_shift,json=chainRxqEntrySizeShift" json:"chain_rxq_entry_size_shift,omitempty"`
	ChainRxqRingIndexSelect uint32             `protobuf:"varint,13,opt,name=chain_rxq_ring_index_select,json=chainRxqRingIndexSelect" json:"chain_rxq_ring_index_select,omitempty"`
	RedirSpan               uint32             `protobuf:"varint,14,opt,name=redir_span,json=redirSpan" json:"redir_span,omitempty"`
	IpSa                    *IPAddress         `protobuf:"bytes,15,opt,name=ip_sa,json=ipSa" json:"ip_sa,omitempty"`
	IpDa                    *IPAddress         `protobuf:"bytes,16,opt,name=ip_da,json=ipDa" json:"ip_da,omitempty"`
	Sport                   uint32             `protobuf:"varint,17,opt,name=sport" json:"sport,omitempty"`
	Dport                   uint32             `protobuf:"varint,18,opt,name=dport" json:"dport,omitempty"`
	Vrf                     uint32             `protobuf:"varint,19,opt,name=vrf" json:"vrf,omitempty"`
	Af                      uint32             `protobuf:"varint,20,opt,name=af" json:"af,omitempty"`
	IpProto                 IPProtocol         `protobuf:"varint,21,opt,name=ip_proto,json=ipProto,enum=types.IPProtocol" json:"ip_proto,omitempty"`
	Dir                     uint32             `protobuf:"varint,22,opt,name=dir" json:"dir,omitempty"`
	Role                    uint32             `protobuf:"varint,23,opt,name=role" json:"role,omitempty"`
	RevCbId                 uint32             `protobuf:"varint,24,opt,name=rev_cb_id,json=revCbId" json:"rev_cb_id,omitempty"`
	//
	// 64-bit statistic counters
	StatPktsRedir   uint64 `protobuf:"varint,25,opt,name=stat_pkts_redir,json=statPktsRedir" json:"stat_pkts_redir,omitempty"`
	StatPktsDiscard uint64 `protobuf:"varint,26,opt,name=stat_pkts_discard,json=statPktsDiscard" json:"stat_pkts_discard,omitempty"`
	//
	// 32-bit saturating statistic counters
	StatCbNotReady          uint32 `protobuf:"varint,27,opt,name=stat_cb_not_ready,json=statCbNotReady" json:"stat_cb_not_ready,omitempty"`
	StatNullRingIndicesAddr uint32 `protobuf:"varint,28,opt,name=stat_null_ring_indices_addr,json=statNullRingIndicesAddr" json:"stat_null_ring_indices_addr,omitempty"`
	StatAolErr              uint32 `protobuf:"varint,29,opt,name=stat_aol_err,json=statAolErr" json:"stat_aol_err,omitempty"`
	StatRxqFull             uint32 `protobuf:"varint,30,opt,name=stat_rxq_full,json=statRxqFull" json:"stat_rxq_full,omitempty"`
	StatTxqEmpty            uint32 `protobuf:"varint,31,opt,name=stat_txq_empty,json=statTxqEmpty" json:"stat_txq_empty,omitempty"`
	StatSemAllocFull        uint32 `protobuf:"varint,32,opt,name=stat_sem_alloc_full,json=statSemAllocFull" json:"stat_sem_alloc_full,omitempty"`
	StatSemFreeFull         uint32 `protobuf:"varint,33,opt,name=stat_sem_free_full,json=statSemFreeFull" json:"stat_sem_free_full,omitempty"`
}

func (m *ProxyrCbSpec) Reset()                    { *m = ProxyrCbSpec{} }
func (m *ProxyrCbSpec) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbSpec) ProtoMessage()               {}
func (*ProxyrCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{194} }

func (m *ProxyrCbSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxyrCbSpec) GetKeyOrHandle() *ProxyrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *ProxyrCbSpec) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *ProxyrCbSpec) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

func (m *ProxyrCbSpec) GetProxyrcbFlags() uint32 {
	if m != nil {
		return m.ProxyrcbFlags
	}
	return 0
}

func (m *ProxyrCbSpec) GetMyTxqBase() uint64 {
	if m != nil {
		return m.MyTxqBase
	}
	return 0
}

func (m *ProxyrCbSpec) GetMyTxqRingSizeShift() uint32 {
	if m != nil {
		return m.MyTxqRingSizeShift
	}
	return 0
}

func (m *ProxyrCbSpec) GetMyTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.MyTxqEntrySizeShift
	}
	return 0
}

func (m *ProxyrCbSpec) GetChainRxqBase() uint64 {
	if m != nil {
		return m.ChainRxqBase
	}
	return 0
}

func (m *ProxyrCbSpec) GetChainRxqRingIndicesAddr() uint64 {
	if m != nil {
		return m.ChainRxqRingIndicesAddr
	}
	return 0
}

func (m *ProxyrCbSpec) GetChainRxqRingSizeShift() uint32 {
	if m != nil {
		return m.ChainRxqRingSizeShift
	}
	return 0
}

func (m *ProxyrCbSpec) GetChainRxqEntrySizeShift() uint32 {
	if m != nil {
		return m.ChainRxqEntrySizeShift
	}
	return 0
}

func (m *ProxyrCbSpec) GetChainRxqRingIndexSelect() uint32 {
	if m != nil {
		return m.ChainRxqRingIndexSelect
	}
	return 0
}

func (m *ProxyrCbSpec) GetRedirSpan() uint32 {
	if m != nil {
		return m.RedirSpan
	}
	return 0
}

func (m *ProxyrCbSpec) GetIpSa() *IPAddress {
	if m != nil {
		return m.IpSa
	}
	return nil
}

func (m *ProxyrCbSpec) GetIpDa() *IPAddress {
	if m != nil {
		return m.IpDa
	}
	return nil
}

func (m *ProxyrCbSpec) GetSport() uint32 {
	if m != nil {
		return m.Sport
	}
	return 0
}

func (m *ProxyrCbSpec) GetDport() uint32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

func (m *ProxyrCbSpec) GetVrf() uint32 {
	if m != nil {
		return m.Vrf
	}
	return 0
}

func (m *ProxyrCbSpec) GetAf() uint32 {
	if m != nil {
		return m.Af
	}
	return 0
}

func (m *ProxyrCbSpec) GetIpProto() IPProtocol {
	if m != nil {
		return m.IpProto
	}
	return IPProtocol_IPPROTO_NONE
}

func (m *ProxyrCbSpec) GetDir() uint32 {
	if m != nil {
		return m.Dir
	}
	return 0
}

func (m *ProxyrCbSpec) GetRole() uint32 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *ProxyrCbSpec) GetRevCbId() uint32 {
	if m != nil {
		return m.RevCbId
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatPktsRedir() uint64 {
	if m != nil {
		return m.StatPktsRedir
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatPktsDiscard() uint64 {
	if m != nil {
		return m.StatPktsDiscard
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatCbNotReady() uint32 {
	if m != nil {
		return m.StatCbNotReady
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatNullRingIndicesAddr() uint32 {
	if m != nil {
		return m.StatNullRingIndicesAddr
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatAolErr() uint32 {
	if m != nil {
		return m.StatAolErr
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatRxqFull() uint32 {
	if m != nil {
		return m.StatRxqFull
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatTxqEmpty() uint32 {
	if m != nil {
		return m.StatTxqEmpty
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatSemAllocFull() uint32 {
	if m != nil {
		return m.StatSemAllocFull
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatSemFreeFull() uint32 {
	if m != nil {
		return m.StatSemFreeFull
	}
	return 0
}

// ProxyrCbRequestMsg is batched add or modify proxyrcb request
type ProxyrCbRequestMsg struct {
	Request []*ProxyrCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyrCbRequestMsg) Reset()                    { *m = ProxyrCbRequestMsg{} }
func (m *ProxyrCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbRequestMsg) ProtoMessage()               {}
func (*ProxyrCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{195} }

func (m *ProxyrCbRequestMsg) GetRequest() []*ProxyrCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxyrCbStatus is the operational status of a given proxyrcb
type ProxyrCbStatus struct {
	ProxyrcbHandle uint64 `protobuf:"fixed64,1,opt,name=proxyrcb_handle,json=proxyrcbHandle" json:"proxyrcb_handle,omitempty"`
}

func (m *ProxyrCbStatus) Reset()                    { *m = ProxyrCbStatus{} }
func (m *ProxyrCbStatus) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbStatus) ProtoMessage()               {}
func (*ProxyrCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{196} }

func (m *ProxyrCbStatus) GetProxyrcbHandle() uint64 {
	if m != nil {
		return m.ProxyrcbHandle
	}
	return 0
}

// ProxyrCbResponse is response to ProxyrCbSpec
type ProxyrCbResponse struct {
	ApiStatus      ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	ProxyrcbStatus *ProxyrCbStatus `protobuf:"bytes,2,opt,name=proxyrcb_status,json=proxyrcbStatus" json:"proxyrcb_status,omitempty"`
}

func (m *ProxyrCbResponse) Reset()                    { *m = ProxyrCbResponse{} }
func (m *ProxyrCbResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbResponse) ProtoMessage()               {}
func (*ProxyrCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{197} }

func (m *ProxyrCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxyrCbResponse) GetProxyrcbStatus() *ProxyrCbStatus {
	if m != nil {
		return m.ProxyrcbStatus
	}
	return nil
}

// ProxyrCbResponseMsg is batched response to ProxyrCbRequestMsg
type ProxyrCbResponseMsg struct {
	Response []*ProxyrCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxyrCbResponseMsg) Reset()                    { *m = ProxyrCbResponseMsg{} }
func (m *ProxyrCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbResponseMsg) ProtoMessage()               {}
func (*ProxyrCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{198} }

func (m *ProxyrCbResponseMsg) GetResponse() []*ProxyrCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// ProxyrCbDeleteRequest is used to delete a proxyrcb
type ProxyrCbDeleteRequest struct {
	Meta        *ObjectMeta        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *ProxyrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *ProxyrCbDeleteRequest) Reset()                    { *m = ProxyrCbDeleteRequest{} }
func (m *ProxyrCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbDeleteRequest) ProtoMessage()               {}
func (*ProxyrCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{199} }

func (m *ProxyrCbDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxyrCbDeleteRequest) GetKeyOrHandle() *ProxyrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ProxyrCbDeleteRequestMsg is used to delete a batch of proxyrcbs
type ProxyrCbDeleteRequestMsg struct {
	Request []*ProxyrCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyrCbDeleteRequestMsg) Reset()                    { *m = ProxyrCbDeleteRequestMsg{} }
func (m *ProxyrCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbDeleteRequestMsg) ProtoMessage()               {}
func (*ProxyrCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{200} }

func (m *ProxyrCbDeleteRequestMsg) GetRequest() []*ProxyrCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxyrCbDeleteResponseMsg is batched response to ProxyrCbDeleteRequestMsg
type ProxyrCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *ProxyrCbDeleteResponseMsg) Reset()                    { *m = ProxyrCbDeleteResponseMsg{} }
func (m *ProxyrCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbDeleteResponseMsg) ProtoMessage()               {}
func (*ProxyrCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{201} }

func (m *ProxyrCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// ProxyrCbGetRequest is used to get information about a proxyrcb
type ProxyrCbGetRequest struct {
	Meta        *ObjectMeta        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *ProxyrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *ProxyrCbGetRequest) Reset()                    { *m = ProxyrCbGetRequest{} }
func (m *ProxyrCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbGetRequest) ProtoMessage()               {}
func (*ProxyrCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{202} }

func (m *ProxyrCbGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxyrCbGetRequest) GetKeyOrHandle() *ProxyrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ProxyrCbGetRequestMsg is batched GET requests for proxyrcbs
type ProxyrCbGetRequestMsg struct {
	Request []*ProxyrCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyrCbGetRequestMsg) Reset()                    { *m = ProxyrCbGetRequestMsg{} }
func (m *ProxyrCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbGetRequestMsg) ProtoMessage()               {}
func (*ProxyrCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{203} }

func (m *ProxyrCbGetRequestMsg) GetRequest() []*ProxyrCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxyrCbStats is the statistics object for each proxyrcb
type ProxyrCbStats struct {
}

func (m *ProxyrCbStats) Reset()                    { *m = ProxyrCbStats{} }
func (m *ProxyrCbStats) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbStats) ProtoMessage()               {}
func (*ProxyrCbStats) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{204} }

// ProxyrCbGetResponse captures all the information about a proxyrcb
// only if api_status indicates success, other fields are valid
type ProxyrCbGetResponse struct {
	ApiStatus ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *ProxyrCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *ProxyrCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *ProxyrCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *ProxyrCbGetResponse) Reset()                    { *m = ProxyrCbGetResponse{} }
func (m *ProxyrCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbGetResponse) ProtoMessage()               {}
func (*ProxyrCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{205} }

func (m *ProxyrCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxyrCbGetResponse) GetSpec() *ProxyrCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProxyrCbGetResponse) GetStatus() *ProxyrCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ProxyrCbGetResponse) GetStats() *ProxyrCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// ProxyrCbGetResponseMsg is batched response to ProxyrCbGetRequestMsg
type ProxyrCbGetResponseMsg struct {
	Response []*ProxyrCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxyrCbGetResponseMsg) Reset()                    { *m = ProxyrCbGetResponseMsg{} }
func (m *ProxyrCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbGetResponseMsg) ProtoMessage()               {}
func (*ProxyrCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{206} }

func (m *ProxyrCbGetResponseMsg) GetResponse() []*ProxyrCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RawrCbKeyHandle is used to operate on a rawrcb either by its key or handle
type RawrCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*RawrCbKeyHandle_RawrcbId
	//	*RawrCbKeyHandle_RawrcbHandle
	KeyOrHandle isRawrCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *RawrCbKeyHandle) Reset()                    { *m = RawrCbKeyHandle{} }
func (m *RawrCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*RawrCbKeyHandle) ProtoMessage()               {}
func (*RawrCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{207} }

type isRawrCbKeyHandle_KeyOrHandle interface{ isRawrCbKeyHandle_KeyOrHandle() }

type RawrCbKeyHandle_RawrcbId struct {
	RawrcbId uint32 `protobuf:"varint,1,opt,name=rawrcb_id,json=rawrcbId,oneof"`
}
type RawrCbKeyHandle_RawrcbHandle struct {
	RawrcbHandle uint64 `protobuf:"fixed64,2,opt,name=rawrcb_handle,json=rawrcbHandle,oneof"`
}

func (*RawrCbKeyHandle_RawrcbId) isRawrCbKeyHandle_KeyOrHandle()     {}
func (*RawrCbKeyHandle_RawrcbHandle) isRawrCbKeyHandle_KeyOrHandle() {}

func (m *RawrCbKeyHandle) GetKeyOrHandle() isRawrCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *RawrCbKeyHandle) GetRawrcbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*RawrCbKeyHandle_RawrcbId); ok {
		return x.RawrcbId
	}
	return 0
}

func (m *RawrCbKeyHandle) GetRawrcbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*RawrCbKeyHandle_RawrcbHandle); ok {
		return x.RawrcbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RawrCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RawrCbKeyHandle_OneofMarshaler, _RawrCbKeyHandle_OneofUnmarshaler, _RawrCbKeyHandle_OneofSizer, []interface{}{
		(*RawrCbKeyHandle_RawrcbId)(nil),
		(*RawrCbKeyHandle_RawrcbHandle)(nil),
	}
}

func _RawrCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RawrCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *RawrCbKeyHandle_RawrcbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.RawrcbId))
	case *RawrCbKeyHandle_RawrcbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.RawrcbHandle))
	case nil:
	default:
		return fmt.Errorf("RawrCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _RawrCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RawrCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.rawrcb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &RawrCbKeyHandle_RawrcbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.rawrcb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &RawrCbKeyHandle_RawrcbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _RawrCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RawrCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *RawrCbKeyHandle_RawrcbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.RawrcbId))
	case *RawrCbKeyHandle_RawrcbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RawrCbSpec captures all the rawrcb level configuration
type RawrCbSpec struct {
	Meta                    *ObjectMeta      `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle             *RawrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	RawrcbFlags             uint32           `protobuf:"varint,3,opt,name=rawrcb_flags,json=rawrcbFlags" json:"rawrcb_flags,omitempty"`
	ChainRxqBase            uint64           `protobuf:"varint,4,opt,name=chain_rxq_base,json=chainRxqBase" json:"chain_rxq_base,omitempty"`
	ChainRxqRingIndicesAddr uint64           `protobuf:"varint,5,opt,name=chain_rxq_ring_indices_addr,json=chainRxqRingIndicesAddr" json:"chain_rxq_ring_indices_addr,omitempty"`
	ChainRxqRingSizeShift   uint32           `protobuf:"varint,6,opt,name=chain_rxq_ring_size_shift,json=chainRxqRingSizeShift" json:"chain_rxq_ring_size_shift,omitempty"`
	ChainRxqEntrySizeShift  uint32           `protobuf:"varint,7,opt,name=chain_rxq_entry_size_shift,json=chainRxqEntrySizeShift" json:"chain_rxq_entry_size_shift,omitempty"`
	ChainRxqRingIndexSelect uint32           `protobuf:"varint,8,opt,name=chain_rxq_ring_index_select,json=chainRxqRingIndexSelect" json:"chain_rxq_ring_index_select,omitempty"`
	ChainTxqBase            uint64           `protobuf:"varint,9,opt,name=chain_txq_base,json=chainTxqBase" json:"chain_txq_base,omitempty"`
	ChainTxqRingIndicesAddr uint64           `protobuf:"varint,10,opt,name=chain_txq_ring_indices_addr,json=chainTxqRingIndicesAddr" json:"chain_txq_ring_indices_addr,omitempty"`
	ChainTxqRingSizeShift   uint32           `protobuf:"varint,11,opt,name=chain_txq_ring_size_shift,json=chainTxqRingSizeShift" json:"chain_txq_ring_size_shift,omitempty"`
	ChainTxqEntrySizeShift  uint32           `protobuf:"varint,12,opt,name=chain_txq_entry_size_shift,json=chainTxqEntrySizeShift" json:"chain_txq_entry_size_shift,omitempty"`
	ChainTxqRingIndexSelect uint32           `protobuf:"varint,13,opt,name=chain_txq_ring_index_select,json=chainTxqRingIndexSelect" json:"chain_txq_ring_index_select,omitempty"`
	ChainTxqLif             uint32           `protobuf:"varint,14,opt,name=chain_txq_lif,json=chainTxqLif" json:"chain_txq_lif,omitempty"`
	ChainTxqQtype           uint32           `protobuf:"varint,15,opt,name=chain_txq_qtype,json=chainTxqQtype" json:"chain_txq_qtype,omitempty"`
	ChainTxqQid             uint32           `protobuf:"varint,16,opt,name=chain_txq_qid,json=chainTxqQid" json:"chain_txq_qid,omitempty"`
	//
	// 64-bit statistic counters
	StatPktsRedir   uint64 `protobuf:"varint,17,opt,name=stat_pkts_redir,json=statPktsRedir" json:"stat_pkts_redir,omitempty"`
	StatPktsDiscard uint64 `protobuf:"varint,18,opt,name=stat_pkts_discard,json=statPktsDiscard" json:"stat_pkts_discard,omitempty"`
	//
	// 32-bit saturating statistic counters
	StatCbNotReady        uint32 `protobuf:"varint,19,opt,name=stat_cb_not_ready,json=statCbNotReady" json:"stat_cb_not_ready,omitempty"`
	StatQstateCfgErr      uint32 `protobuf:"varint,20,opt,name=stat_qstate_cfg_err,json=statQstateCfgErr" json:"stat_qstate_cfg_err,omitempty"`
	StatPktLenErr         uint32 `protobuf:"varint,21,opt,name=stat_pkt_len_err,json=statPktLenErr" json:"stat_pkt_len_err,omitempty"`
	StatRxqFull           uint32 `protobuf:"varint,22,opt,name=stat_rxq_full,json=statRxqFull" json:"stat_rxq_full,omitempty"`
	StatTxqFull           uint32 `protobuf:"varint,23,opt,name=stat_txq_full,json=statTxqFull" json:"stat_txq_full,omitempty"`
	StatDescSemAllocFull  uint32 `protobuf:"varint,24,opt,name=stat_desc_sem_alloc_full,json=statDescSemAllocFull" json:"stat_desc_sem_alloc_full,omitempty"`
	StatMpageSemAllocFull uint32 `protobuf:"varint,25,opt,name=stat_mpage_sem_alloc_full,json=statMpageSemAllocFull" json:"stat_mpage_sem_alloc_full,omitempty"`
	StatPpageSemAllocFull uint32 `protobuf:"varint,26,opt,name=stat_ppage_sem_alloc_full,json=statPpageSemAllocFull" json:"stat_ppage_sem_alloc_full,omitempty"`
	StatSemFreeFull       uint32 `protobuf:"varint,27,opt,name=stat_sem_free_full,json=statSemFreeFull" json:"stat_sem_free_full,omitempty"`
}

func (m *RawrCbSpec) Reset()                    { *m = RawrCbSpec{} }
func (m *RawrCbSpec) String() string            { return proto.CompactTextString(m) }
func (*RawrCbSpec) ProtoMessage()               {}
func (*RawrCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{208} }

func (m *RawrCbSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RawrCbSpec) GetKeyOrHandle() *RawrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *RawrCbSpec) GetRawrcbFlags() uint32 {
	if m != nil {
		return m.RawrcbFlags
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqBase() uint64 {
	if m != nil {
		return m.ChainRxqBase
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqRingIndicesAddr() uint64 {
	if m != nil {
		return m.ChainRxqRingIndicesAddr
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqRingSizeShift() uint32 {
	if m != nil {
		return m.ChainRxqRingSizeShift
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqEntrySizeShift() uint32 {
	if m != nil {
		return m.ChainRxqEntrySizeShift
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqRingIndexSelect() uint32 {
	if m != nil {
		return m.ChainRxqRingIndexSelect
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqBase() uint64 {
	if m != nil {
		return m.ChainTxqBase
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqRingIndicesAddr() uint64 {
	if m != nil {
		return m.ChainTxqRingIndicesAddr
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqRingSizeShift() uint32 {
	if m != nil {
		return m.ChainTxqRingSizeShift
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.ChainTxqEntrySizeShift
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqRingIndexSelect() uint32 {
	if m != nil {
		return m.ChainTxqRingIndexSelect
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqLif() uint32 {
	if m != nil {
		return m.ChainTxqLif
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqQtype() uint32 {
	if m != nil {
		return m.ChainTxqQtype
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqQid() uint32 {
	if m != nil {
		return m.ChainTxqQid
	}
	return 0
}

func (m *RawrCbSpec) GetStatPktsRedir() uint64 {
	if m != nil {
		return m.StatPktsRedir
	}
	return 0
}

func (m *RawrCbSpec) GetStatPktsDiscard() uint64 {
	if m != nil {
		return m.StatPktsDiscard
	}
	return 0
}

func (m *RawrCbSpec) GetStatCbNotReady() uint32 {
	if m != nil {
		return m.StatCbNotReady
	}
	return 0
}

func (m *RawrCbSpec) GetStatQstateCfgErr() uint32 {
	if m != nil {
		return m.StatQstateCfgErr
	}
	return 0
}

func (m *RawrCbSpec) GetStatPktLenErr() uint32 {
	if m != nil {
		return m.StatPktLenErr
	}
	return 0
}

func (m *RawrCbSpec) GetStatRxqFull() uint32 {
	if m != nil {
		return m.StatRxqFull
	}
	return 0
}

func (m *RawrCbSpec) GetStatTxqFull() uint32 {
	if m != nil {
		return m.StatTxqFull
	}
	return 0
}

func (m *RawrCbSpec) GetStatDescSemAllocFull() uint32 {
	if m != nil {
		return m.StatDescSemAllocFull
	}
	return 0
}

func (m *RawrCbSpec) GetStatMpageSemAllocFull() uint32 {
	if m != nil {
		return m.StatMpageSemAllocFull
	}
	return 0
}

func (m *RawrCbSpec) GetStatPpageSemAllocFull() uint32 {
	if m != nil {
		return m.StatPpageSemAllocFull
	}
	return 0
}

func (m *RawrCbSpec) GetStatSemFreeFull() uint32 {
	if m != nil {
		return m.StatSemFreeFull
	}
	return 0
}

// RawrCbRequestMsg is batched add or modify rawrcb request
type RawrCbRequestMsg struct {
	Request []*RawrCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawrCbRequestMsg) Reset()                    { *m = RawrCbRequestMsg{} }
func (m *RawrCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbRequestMsg) ProtoMessage()               {}
func (*RawrCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{209} }

func (m *RawrCbRequestMsg) GetRequest() []*RawrCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawrCbStatus is the operational status of a given rawrcb
type RawrCbStatus struct {
	RawrcbHandle uint64 `protobuf:"fixed64,1,opt,name=rawrcb_handle,json=rawrcbHandle" json:"rawrcb_handle,omitempty"`
}

func (m *RawrCbStatus) Reset()                    { *m = RawrCbStatus{} }
func (m *RawrCbStatus) String() string            { return proto.CompactTextString(m) }
func (*RawrCbStatus) ProtoMessage()               {}
func (*RawrCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{210} }

func (m *RawrCbStatus) GetRawrcbHandle() uint64 {
	if m != nil {
		return m.RawrcbHandle
	}
	return 0
}

// RawrCbResponse is response to RawrCbSpec
type RawrCbResponse struct {
	ApiStatus    ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	RawrcbStatus *RawrCbStatus `protobuf:"bytes,2,opt,name=rawrcb_status,json=rawrcbStatus" json:"rawrcb_status,omitempty"`
}

func (m *RawrCbResponse) Reset()                    { *m = RawrCbResponse{} }
func (m *RawrCbResponse) String() string            { return proto.CompactTextString(m) }
func (*RawrCbResponse) ProtoMessage()               {}
func (*RawrCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{211} }

func (m *RawrCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RawrCbResponse) GetRawrcbStatus() *RawrCbStatus {
	if m != nil {
		return m.RawrcbStatus
	}
	return nil
}

// RawrCbResponseMsg is batched response to RawrCbRequestMsg
type RawrCbResponseMsg struct {
	Response []*RawrCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RawrCbResponseMsg) Reset()                    { *m = RawrCbResponseMsg{} }
func (m *RawrCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbResponseMsg) ProtoMessage()               {}
func (*RawrCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{212} }

func (m *RawrCbResponseMsg) GetResponse() []*RawrCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RawrCbDeleteRequest is used to delete a rawrcb
type RawrCbDeleteRequest struct {
	Meta        *ObjectMeta      `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *RawrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *RawrCbDeleteRequest) Reset()                    { *m = RawrCbDeleteRequest{} }
func (m *RawrCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*RawrCbDeleteRequest) ProtoMessage()               {}
func (*RawrCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{213} }

func (m *RawrCbDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RawrCbDeleteRequest) GetKeyOrHandle() *RawrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// RawrCbDeleteRequestMsg is used to delete a batch of rawrcbs
type RawrCbDeleteRequestMsg struct {
	Request []*RawrCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawrCbDeleteRequestMsg) Reset()                    { *m = RawrCbDeleteRequestMsg{} }
func (m *RawrCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbDeleteRequestMsg) ProtoMessage()               {}
func (*RawrCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{214} }

func (m *RawrCbDeleteRequestMsg) GetRequest() []*RawrCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawrCbDeleteResponseMsg is batched response to RawrCbDeleteRequestMsg
type RawrCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *RawrCbDeleteResponseMsg) Reset()                    { *m = RawrCbDeleteResponseMsg{} }
func (m *RawrCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbDeleteResponseMsg) ProtoMessage()               {}
func (*RawrCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{215} }

func (m *RawrCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// RawrCbGetRequest is used to get information about a rawrcb
type RawrCbGetRequest struct {
	Meta        *ObjectMeta      `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *RawrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *RawrCbGetRequest) Reset()                    { *m = RawrCbGetRequest{} }
func (m *RawrCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*RawrCbGetRequest) ProtoMessage()               {}
func (*RawrCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{216} }

func (m *RawrCbGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RawrCbGetRequest) GetKeyOrHandle() *RawrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// RawrCbGetRequestMsg is batched GET requests for rawrcbs
type RawrCbGetRequestMsg struct {
	Request []*RawrCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawrCbGetRequestMsg) Reset()                    { *m = RawrCbGetRequestMsg{} }
func (m *RawrCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbGetRequestMsg) ProtoMessage()               {}
func (*RawrCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{217} }

func (m *RawrCbGetRequestMsg) GetRequest() []*RawrCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawrCbStats is the statistics object for each rawrcb
type RawrCbStats struct {
}

func (m *RawrCbStats) Reset()                    { *m = RawrCbStats{} }
func (m *RawrCbStats) String() string            { return proto.CompactTextString(m) }
func (*RawrCbStats) ProtoMessage()               {}
func (*RawrCbStats) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{218} }

// RawrCbGetResponse captures all the information about a rawrcb
// only if api_status indicates success, other fields are valid
type RawrCbGetResponse struct {
	ApiStatus ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *RawrCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *RawrCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *RawrCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *RawrCbGetResponse) Reset()                    { *m = RawrCbGetResponse{} }
func (m *RawrCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*RawrCbGetResponse) ProtoMessage()               {}
func (*RawrCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{219} }

func (m *RawrCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RawrCbGetResponse) GetSpec() *RawrCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *RawrCbGetResponse) GetStatus() *RawrCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RawrCbGetResponse) GetStats() *RawrCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// RawrCbGetResponseMsg is batched response to RawrCbGetRequestMsg
type RawrCbGetResponseMsg struct {
	Response []*RawrCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RawrCbGetResponseMsg) Reset()                    { *m = RawrCbGetResponseMsg{} }
func (m *RawrCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbGetResponseMsg) ProtoMessage()               {}
func (*RawrCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{220} }

func (m *RawrCbGetResponseMsg) GetResponse() []*RawrCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RawcCbKeyHandle is used to operate on a rawccb either by its key or handle
type RawcCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*RawcCbKeyHandle_RawccbId
	//	*RawcCbKeyHandle_RawccbHandle
	KeyOrHandle isRawcCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *RawcCbKeyHandle) Reset()                    { *m = RawcCbKeyHandle{} }
func (m *RawcCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*RawcCbKeyHandle) ProtoMessage()               {}
func (*RawcCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{221} }

type isRawcCbKeyHandle_KeyOrHandle interface{ isRawcCbKeyHandle_KeyOrHandle() }

type RawcCbKeyHandle_RawccbId struct {
	RawccbId uint32 `protobuf:"varint,1,opt,name=rawccb_id,json=rawccbId,oneof"`
}
type RawcCbKeyHandle_RawccbHandle struct {
	RawccbHandle uint64 `protobuf:"fixed64,2,opt,name=rawccb_handle,json=rawccbHandle,oneof"`
}

func (*RawcCbKeyHandle_RawccbId) isRawcCbKeyHandle_KeyOrHandle()     {}
func (*RawcCbKeyHandle_RawccbHandle) isRawcCbKeyHandle_KeyOrHandle() {}

func (m *RawcCbKeyHandle) GetKeyOrHandle() isRawcCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *RawcCbKeyHandle) GetRawccbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*RawcCbKeyHandle_RawccbId); ok {
		return x.RawccbId
	}
	return 0
}

func (m *RawcCbKeyHandle) GetRawccbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*RawcCbKeyHandle_RawccbHandle); ok {
		return x.RawccbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RawcCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RawcCbKeyHandle_OneofMarshaler, _RawcCbKeyHandle_OneofUnmarshaler, _RawcCbKeyHandle_OneofSizer, []interface{}{
		(*RawcCbKeyHandle_RawccbId)(nil),
		(*RawcCbKeyHandle_RawccbHandle)(nil),
	}
}

func _RawcCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RawcCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *RawcCbKeyHandle_RawccbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.RawccbId))
	case *RawcCbKeyHandle_RawccbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.RawccbHandle))
	case nil:
	default:
		return fmt.Errorf("RawcCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _RawcCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RawcCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.rawccb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &RawcCbKeyHandle_RawccbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.rawccb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &RawcCbKeyHandle_RawccbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _RawcCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RawcCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *RawcCbKeyHandle_RawccbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.RawccbId))
	case *RawcCbKeyHandle_RawccbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RawcCbSpec captures all the rawccb level configuration
type RawcCbSpec struct {
	KeyOrHandle             *RawcCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Pi                      uint32           `protobuf:"varint,2,opt,name=pi" json:"pi,omitempty"`
	Ci                      uint32           `protobuf:"varint,3,opt,name=ci" json:"ci,omitempty"`
	RawccbFlags             uint32           `protobuf:"varint,4,opt,name=rawccb_flags,json=rawccbFlags" json:"rawccb_flags,omitempty"`
	MyTxqBase               uint64           `protobuf:"varint,5,opt,name=my_txq_base,json=myTxqBase" json:"my_txq_base,omitempty"`
	MyTxqRingSizeShift      uint32           `protobuf:"varint,6,opt,name=my_txq_ring_size_shift,json=myTxqRingSizeShift" json:"my_txq_ring_size_shift,omitempty"`
	MyTxqEntrySizeShift     uint32           `protobuf:"varint,7,opt,name=my_txq_entry_size_shift,json=myTxqEntrySizeShift" json:"my_txq_entry_size_shift,omitempty"`
	ChainTxqBase            uint64           `protobuf:"varint,8,opt,name=chain_txq_base,json=chainTxqBase" json:"chain_txq_base,omitempty"`
	ChainTxqRingIndicesAddr uint64           `protobuf:"varint,9,opt,name=chain_txq_ring_indices_addr,json=chainTxqRingIndicesAddr" json:"chain_txq_ring_indices_addr,omitempty"`
	ChainTxqRingSizeShift   uint32           `protobuf:"varint,10,opt,name=chain_txq_ring_size_shift,json=chainTxqRingSizeShift" json:"chain_txq_ring_size_shift,omitempty"`
	ChainTxqEntrySizeShift  uint32           `protobuf:"varint,11,opt,name=chain_txq_entry_size_shift,json=chainTxqEntrySizeShift" json:"chain_txq_entry_size_shift,omitempty"`
	ChainTxqLif             uint32           `protobuf:"varint,12,opt,name=chain_txq_lif,json=chainTxqLif" json:"chain_txq_lif,omitempty"`
	ChainTxqQtype           uint32           `protobuf:"varint,13,opt,name=chain_txq_qtype,json=chainTxqQtype" json:"chain_txq_qtype,omitempty"`
	ChainTxqQid             uint32           `protobuf:"varint,14,opt,name=chain_txq_qid,json=chainTxqQid" json:"chain_txq_qid,omitempty"`
	ChainTxqRing            uint32           `protobuf:"varint,15,opt,name=chain_txq_ring,json=chainTxqRing" json:"chain_txq_ring,omitempty"`
	//
	// 64-bit statistic counters
	StatPktsChain   uint64 `protobuf:"varint,16,opt,name=stat_pkts_chain,json=statPktsChain" json:"stat_pkts_chain,omitempty"`
	StatPktsDiscard uint64 `protobuf:"varint,17,opt,name=stat_pkts_discard,json=statPktsDiscard" json:"stat_pkts_discard,omitempty"`
	//
	// 32-bit saturating statistic counters
	StatCbNotReady      uint32 `protobuf:"varint,18,opt,name=stat_cb_not_ready,json=statCbNotReady" json:"stat_cb_not_ready,omitempty"`
	StatMyTxqEmpty      uint32 `protobuf:"varint,19,opt,name=stat_my_txq_empty,json=statMyTxqEmpty" json:"stat_my_txq_empty,omitempty"`
	StatAolErr          uint32 `protobuf:"varint,20,opt,name=stat_aol_err,json=statAolErr" json:"stat_aol_err,omitempty"`
	StatTxqFull         uint32 `protobuf:"varint,21,opt,name=stat_txq_full,json=statTxqFull" json:"stat_txq_full,omitempty"`
	StatDescSemFreeFull uint32 `protobuf:"varint,22,opt,name=stat_desc_sem_free_full,json=statDescSemFreeFull" json:"stat_desc_sem_free_full,omitempty"`
	StatPageSemFreeFull uint32 `protobuf:"varint,23,opt,name=stat_page_sem_free_full,json=statPageSemFreeFull" json:"stat_page_sem_free_full,omitempty"`
}

func (m *RawcCbSpec) Reset()                    { *m = RawcCbSpec{} }
func (m *RawcCbSpec) String() string            { return proto.CompactTextString(m) }
func (*RawcCbSpec) ProtoMessage()               {}
func (*RawcCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{222} }

func (m *RawcCbSpec) GetKeyOrHandle() *RawcCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *RawcCbSpec) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *RawcCbSpec) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

func (m *RawcCbSpec) GetRawccbFlags() uint32 {
	if m != nil {
		return m.RawccbFlags
	}
	return 0
}

func (m *RawcCbSpec) GetMyTxqBase() uint64 {
	if m != nil {
		return m.MyTxqBase
	}
	return 0
}

func (m *RawcCbSpec) GetMyTxqRingSizeShift() uint32 {
	if m != nil {
		return m.MyTxqRingSizeShift
	}
	return 0
}

func (m *RawcCbSpec) GetMyTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.MyTxqEntrySizeShift
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqBase() uint64 {
	if m != nil {
		return m.ChainTxqBase
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqRingIndicesAddr() uint64 {
	if m != nil {
		return m.ChainTxqRingIndicesAddr
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqRingSizeShift() uint32 {
	if m != nil {
		return m.ChainTxqRingSizeShift
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.ChainTxqEntrySizeShift
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqLif() uint32 {
	if m != nil {
		return m.ChainTxqLif
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqQtype() uint32 {
	if m != nil {
		return m.ChainTxqQtype
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqQid() uint32 {
	if m != nil {
		return m.ChainTxqQid
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqRing() uint32 {
	if m != nil {
		return m.ChainTxqRing
	}
	return 0
}

func (m *RawcCbSpec) GetStatPktsChain() uint64 {
	if m != nil {
		return m.StatPktsChain
	}
	return 0
}

func (m *RawcCbSpec) GetStatPktsDiscard() uint64 {
	if m != nil {
		return m.StatPktsDiscard
	}
	return 0
}

func (m *RawcCbSpec) GetStatCbNotReady() uint32 {
	if m != nil {
		return m.StatCbNotReady
	}
	return 0
}

func (m *RawcCbSpec) GetStatMyTxqEmpty() uint32 {
	if m != nil {
		return m.StatMyTxqEmpty
	}
	return 0
}

func (m *RawcCbSpec) GetStatAolErr() uint32 {
	if m != nil {
		return m.StatAolErr
	}
	return 0
}

func (m *RawcCbSpec) GetStatTxqFull() uint32 {
	if m != nil {
		return m.StatTxqFull
	}
	return 0
}

func (m *RawcCbSpec) GetStatDescSemFreeFull() uint32 {
	if m != nil {
		return m.StatDescSemFreeFull
	}
	return 0
}

func (m *RawcCbSpec) GetStatPageSemFreeFull() uint32 {
	if m != nil {
		return m.StatPageSemFreeFull
	}
	return 0
}

// RawcCbRequestMsg is batched add or modify rawccb request
type RawcCbRequestMsg struct {
	Request []*RawcCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawcCbRequestMsg) Reset()                    { *m = RawcCbRequestMsg{} }
func (m *RawcCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawcCbRequestMsg) ProtoMessage()               {}
func (*RawcCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{223} }

func (m *RawcCbRequestMsg) GetRequest() []*RawcCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawcCbStatus is the operational status of a given rawccb
type RawcCbStatus struct {
	RawccbHandle uint64 `protobuf:"fixed64,1,opt,name=rawccb_handle,json=rawccbHandle" json:"rawccb_handle,omitempty"`
}

func (m *RawcCbStatus) Reset()                    { *m = RawcCbStatus{} }
func (m *RawcCbStatus) String() string            { return proto.CompactTextString(m) }
func (*RawcCbStatus) ProtoMessage()               {}
func (*RawcCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{224} }

func (m *RawcCbStatus) GetRawccbHandle() uint64 {
	if m != nil {
		return m.RawccbHandle
	}
	return 0
}

// RawcCbResponse is response to RawcCbSpec
type RawcCbResponse struct {
	ApiStatus    ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	RawccbStatus *RawcCbStatus `protobuf:"bytes,2,opt,name=rawccb_status,json=rawccbStatus" json:"rawccb_status,omitempty"`
}

func (m *RawcCbResponse) Reset()                    { *m = RawcCbResponse{} }
func (m *RawcCbResponse) String() string            { return proto.CompactTextString(m) }
func (*RawcCbResponse) ProtoMessage()               {}
func (*RawcCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{225} }

func (m *RawcCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RawcCbResponse) GetRawccbStatus() *RawcCbStatus {
	if m != nil {
		return m.RawccbStatus
	}
	return nil
}

// RawcCbResponseMsg is batched response to RawcCbRequestMsg
type RawcCbResponseMsg struct {
	Response []*RawcCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RawcCbResponseMsg) Reset()                    { *m = RawcCbResponseMsg{} }
func (m *RawcCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawcCbResponseMsg) ProtoMessage()               {}
func (*RawcCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{226} }

func (m *RawcCbResponseMsg) GetResponse() []*RawcCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RawcCbDeleteRequest is used to delete a rawccb
type RawcCbDeleteRequest struct {
	KeyOrHandle *RawcCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *RawcCbDeleteRequest) Reset()                    { *m = RawcCbDeleteRequest{} }
func (m *RawcCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*RawcCbDeleteRequest) ProtoMessage()               {}
func (*RawcCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{227} }

func (m *RawcCbDeleteRequest) GetKeyOrHandle() *RawcCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// RawcCbDeleteRequestMsg is used to delete a batch of rawccbs
type RawcCbDeleteRequestMsg struct {
	Request []*RawcCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawcCbDeleteRequestMsg) Reset()                    { *m = RawcCbDeleteRequestMsg{} }
func (m *RawcCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawcCbDeleteRequestMsg) ProtoMessage()               {}
func (*RawcCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{228} }

func (m *RawcCbDeleteRequestMsg) GetRequest() []*RawcCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type RawcCbDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *RawcCbDeleteResponse) Reset()                    { *m = RawcCbDeleteResponse{} }
func (m *RawcCbDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*RawcCbDeleteResponse) ProtoMessage()               {}
func (*RawcCbDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{229} }

func (m *RawcCbDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// RawcCbDeleteResponseMsg is batched response to RawcCbDeleteRequestMsg
type RawcCbDeleteResponseMsg struct {
	Response []*RawcCbDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RawcCbDeleteResponseMsg) Reset()                    { *m = RawcCbDeleteResponseMsg{} }
func (m *RawcCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawcCbDeleteResponseMsg) ProtoMessage()               {}
func (*RawcCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{230} }

func (m *RawcCbDeleteResponseMsg) GetResponse() []*RawcCbDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RawcCbGetRequest is used to get information about a rawccb
type RawcCbGetRequest struct {
	KeyOrHandle *RawcCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *RawcCbGetRequest) Reset()                    { *m = RawcCbGetRequest{} }
func (m *RawcCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*RawcCbGetRequest) ProtoMessage()               {}
func (*RawcCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{231} }

func (m *RawcCbGetRequest) GetKeyOrHandle() *RawcCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// RawcCbGetRequestMsg is batched GET requests for rawccbs
type RawcCbGetRequestMsg struct {
	Request []*RawcCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawcCbGetRequestMsg) Reset()                    { *m = RawcCbGetRequestMsg{} }
func (m *RawcCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawcCbGetRequestMsg) ProtoMessage()               {}
func (*RawcCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{232} }

func (m *RawcCbGetRequestMsg) GetRequest() []*RawcCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawcCbStats is the statistics object for each rawccb
type RawcCbStats struct {
}

func (m *RawcCbStats) Reset()                    { *m = RawcCbStats{} }
func (m *RawcCbStats) String() string            { return proto.CompactTextString(m) }
func (*RawcCbStats) ProtoMessage()               {}
func (*RawcCbStats) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{233} }

// RawcCbGetResponse captures all the information about a rawccb
// only if api_status indicates success, other fields are valid
type RawcCbGetResponse struct {
	ApiStatus ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *RawcCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *RawcCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *RawcCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *RawcCbGetResponse) Reset()                    { *m = RawcCbGetResponse{} }
func (m *RawcCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*RawcCbGetResponse) ProtoMessage()               {}
func (*RawcCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{234} }

func (m *RawcCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RawcCbGetResponse) GetSpec() *RawcCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *RawcCbGetResponse) GetStatus() *RawcCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RawcCbGetResponse) GetStats() *RawcCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// RawcCbGetResponseMsg is batched response to RawcCbGetRequestMsg
type RawcCbGetResponseMsg struct {
	Response []*RawcCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RawcCbGetResponseMsg) Reset()                    { *m = RawcCbGetResponseMsg{} }
func (m *RawcCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawcCbGetResponseMsg) ProtoMessage()               {}
func (*RawcCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{235} }

func (m *RawcCbGetResponseMsg) GetResponse() []*RawcCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Debug test to send FIN on local EPs
type TestSendFinRequestMsg struct {
	Request []*TestSendFinRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TestSendFinRequestMsg) Reset()                    { *m = TestSendFinRequestMsg{} }
func (m *TestSendFinRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TestSendFinRequestMsg) ProtoMessage()               {}
func (*TestSendFinRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{236} }

func (m *TestSendFinRequestMsg) GetRequest() []*TestSendFinRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type TestSendFinRequest struct {
}

func (m *TestSendFinRequest) Reset()                    { *m = TestSendFinRequest{} }
func (m *TestSendFinRequest) String() string            { return proto.CompactTextString(m) }
func (*TestSendFinRequest) ProtoMessage()               {}
func (*TestSendFinRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{237} }

type TestSendFinResponseMsg struct {
	Response []*TestSendFinResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TestSendFinResponseMsg) Reset()                    { *m = TestSendFinResponseMsg{} }
func (m *TestSendFinResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TestSendFinResponseMsg) ProtoMessage()               {}
func (*TestSendFinResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{238} }

func (m *TestSendFinResponseMsg) GetResponse() []*TestSendFinResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type TestSendFinResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *TestSendFinResponse) Reset()                    { *m = TestSendFinResponse{} }
func (m *TestSendFinResponse) String() string            { return proto.CompactTextString(m) }
func (*TestSendFinResponse) ProtoMessage()               {}
func (*TestSendFinResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{239} }

func (m *TestSendFinResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// Debug test to force sync clock
type TestClockSyncRequestMsg struct {
	Request []*TestClockSyncRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TestClockSyncRequestMsg) Reset()                    { *m = TestClockSyncRequestMsg{} }
func (m *TestClockSyncRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TestClockSyncRequestMsg) ProtoMessage()               {}
func (*TestClockSyncRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{240} }

func (m *TestClockSyncRequestMsg) GetRequest() []*TestClockSyncRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type TestClockSyncRequest struct {
}

func (m *TestClockSyncRequest) Reset()                    { *m = TestClockSyncRequest{} }
func (m *TestClockSyncRequest) String() string            { return proto.CompactTextString(m) }
func (*TestClockSyncRequest) ProtoMessage()               {}
func (*TestClockSyncRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{241} }

type TestClockSyncResponseMsg struct {
	Response []*TestClockSyncResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TestClockSyncResponseMsg) Reset()                    { *m = TestClockSyncResponseMsg{} }
func (m *TestClockSyncResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TestClockSyncResponseMsg) ProtoMessage()               {}
func (*TestClockSyncResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{242} }

func (m *TestClockSyncResponseMsg) GetResponse() []*TestClockSyncResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type TestClockSyncResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *TestClockSyncResponse) Reset()                    { *m = TestClockSyncResponse{} }
func (m *TestClockSyncResponse) String() string            { return proto.CompactTextString(m) }
func (*TestClockSyncResponse) ProtoMessage()               {}
func (*TestClockSyncResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{243} }

func (m *TestClockSyncResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type FlowHashGetResponseMsg struct {
	Response []*FlowHashGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *FlowHashGetResponseMsg) Reset()                    { *m = FlowHashGetResponseMsg{} }
func (m *FlowHashGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*FlowHashGetResponseMsg) ProtoMessage()               {}
func (*FlowHashGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{244} }

func (m *FlowHashGetResponseMsg) GetResponse() []*FlowHashGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type FlowHashGetResponse struct {
	ApiStatus           ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	PrimaryIndexValid   bool      `protobuf:"varint,2,opt,name=primary_index_valid,json=primaryIndexValid" json:"primary_index_valid,omitempty"`
	PrimaryIndex        uint32    `protobuf:"varint,3,opt,name=primary_index,json=primaryIndex" json:"primary_index,omitempty"`
	SecondaryIndexValid bool      `protobuf:"varint,4,opt,name=secondary_index_valid,json=secondaryIndexValid" json:"secondary_index_valid,omitempty"`
	SecondaryIndex      uint32    `protobuf:"varint,5,opt,name=secondary_index,json=secondaryIndex" json:"secondary_index,omitempty"`
	Key                 string    `protobuf:"bytes,6,opt,name=key" json:"key,omitempty"`
	Data                string    `protobuf:"bytes,7,opt,name=data" json:"data,omitempty"`
}

func (m *FlowHashGetResponse) Reset()                    { *m = FlowHashGetResponse{} }
func (m *FlowHashGetResponse) String() string            { return proto.CompactTextString(m) }
func (*FlowHashGetResponse) ProtoMessage()               {}
func (*FlowHashGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{245} }

func (m *FlowHashGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *FlowHashGetResponse) GetPrimaryIndexValid() bool {
	if m != nil {
		return m.PrimaryIndexValid
	}
	return false
}

func (m *FlowHashGetResponse) GetPrimaryIndex() uint32 {
	if m != nil {
		return m.PrimaryIndex
	}
	return 0
}

func (m *FlowHashGetResponse) GetSecondaryIndexValid() bool {
	if m != nil {
		return m.SecondaryIndexValid
	}
	return false
}

func (m *FlowHashGetResponse) GetSecondaryIndex() uint32 {
	if m != nil {
		return m.SecondaryIndex
	}
	return 0
}

func (m *FlowHashGetResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *FlowHashGetResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// FlowTableGetRequest is used to get information about the flows programmed in the hardware
type FlowHashGetRequest struct {
	HardwareVrfId uint64        `protobuf:"varint,1,opt,name=hardware_vrf_id,json=hardwareVrfId" json:"hardware_vrf_id,omitempty"`
	FlowKey       *FlowKey      `protobuf:"bytes,2,opt,name=flow_key,json=flowKey" json:"flow_key,omitempty"`
	FlowDirection FlowDirection `protobuf:"varint,3,opt,name=flow_direction,json=flowDirection,enum=types.FlowDirection" json:"flow_direction,omitempty"`
	FlowInstance  FlowInstance  `protobuf:"varint,4,opt,name=flow_instance,json=flowInstance,enum=session.FlowInstance" json:"flow_instance,omitempty"`
}

func (m *FlowHashGetRequest) Reset()                    { *m = FlowHashGetRequest{} }
func (m *FlowHashGetRequest) String() string            { return proto.CompactTextString(m) }
func (*FlowHashGetRequest) ProtoMessage()               {}
func (*FlowHashGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{246} }

func (m *FlowHashGetRequest) GetHardwareVrfId() uint64 {
	if m != nil {
		return m.HardwareVrfId
	}
	return 0
}

func (m *FlowHashGetRequest) GetFlowKey() *FlowKey {
	if m != nil {
		return m.FlowKey
	}
	return nil
}

func (m *FlowHashGetRequest) GetFlowDirection() FlowDirection {
	if m != nil {
		return m.FlowDirection
	}
	return FlowDirection_FLOW_DIRECTION_NONE
}

func (m *FlowHashGetRequest) GetFlowInstance() FlowInstance {
	if m != nil {
		return m.FlowInstance
	}
	return FlowInstance_FLOW_INSTANCE_NONE
}

type FlowHashGetRequestMsg struct {
	Request []*FlowHashGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *FlowHashGetRequestMsg) Reset()                    { *m = FlowHashGetRequestMsg{} }
func (m *FlowHashGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*FlowHashGetRequestMsg) ProtoMessage()               {}
func (*FlowHashGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{247} }

func (m *FlowHashGetRequestMsg) GetRequest() []*FlowHashGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func init() {
	proto.RegisterType((*ProgramAddressReq)(nil), "halproto.ProgramAddressReq")
	proto.RegisterType((*ProgramAddressResp)(nil), "halproto.ProgramAddressResp")
	proto.RegisterType((*GetProgramAddressRequestMsg)(nil), "halproto.GetProgramAddressRequestMsg")
	proto.RegisterType((*ProgramAddressResponseMsg)(nil), "halproto.ProgramAddressResponseMsg")
	proto.RegisterType((*HbmAddressReq)(nil), "halproto.HbmAddressReq")
	proto.RegisterType((*HbmAddressResp)(nil), "halproto.HbmAddressResp")
	proto.RegisterType((*AllocHbmAddressRequestMsg)(nil), "halproto.AllocHbmAddressRequestMsg")
	proto.RegisterType((*AllocHbmAddressResponseMsg)(nil), "halproto.AllocHbmAddressResponseMsg")
	proto.RegisterType((*LifBdfReq)(nil), "halproto.LifBdfReq")
	proto.RegisterType((*LifBdfResp)(nil), "halproto.LifBdfResp")
	proto.RegisterType((*ConfigureLifBdfRequestMsg)(nil), "halproto.ConfigureLifBdfRequestMsg")
	proto.RegisterType((*ConfigureLifBdfResponseMsg)(nil), "halproto.ConfigureLifBdfResponseMsg")
	proto.RegisterType((*SoftwarePhvStatus)(nil), "halproto.SoftwarePhvStatus")
	proto.RegisterType((*SoftwarePhvResponse)(nil), "halproto.SoftwarePhvResponse")
	proto.RegisterType((*SoftwarePhvResponseMsg)(nil), "halproto.SoftwarePhvResponseMsg")
	proto.RegisterType((*SoftwarePhvGetRequest)(nil), "halproto.SoftwarePhvGetRequest")
	proto.RegisterType((*SoftwarePhvGetRequestMsg)(nil), "halproto.SoftwarePhvGetRequestMsg")
	proto.RegisterType((*SoftwarePhvGetResponse)(nil), "halproto.SoftwarePhvGetResponse")
	proto.RegisterType((*SoftwarePhvGetResponseMsg)(nil), "halproto.SoftwarePhvGetResponseMsg")
	proto.RegisterType((*SoftwarePhvInject)(nil), "halproto.SoftwarePhvInject")
	proto.RegisterType((*SoftwarePhvInjectMsg)(nil), "halproto.SoftwarePhvInjectMsg")
	proto.RegisterType((*LogFlowRequestMsg)(nil), "halproto.LogFlowRequestMsg")
	proto.RegisterType((*LogFlowResponseMsg)(nil), "halproto.LogFlowResponseMsg")
	proto.RegisterType((*LogFlowResponse)(nil), "halproto.LogFlowResponse")
	proto.RegisterType((*EmptyRequest)(nil), "halproto.EmptyRequest")
	proto.RegisterType((*EmptyResponse)(nil), "halproto.EmptyResponse")
	proto.RegisterType((*IpsecCbKeyHandle)(nil), "halproto.IpsecCbKeyHandle")
	proto.RegisterType((*IpsecCbSpec)(nil), "halproto.IpsecCbSpec")
	proto.RegisterType((*IpsecCbRequestMsg)(nil), "halproto.IpsecCbRequestMsg")
	proto.RegisterType((*IpsecCbStatus)(nil), "halproto.IpsecCbStatus")
	proto.RegisterType((*IpsecCbResponse)(nil), "halproto.IpsecCbResponse")
	proto.RegisterType((*IpsecCbResponseMsg)(nil), "halproto.IpsecCbResponseMsg")
	proto.RegisterType((*IpsecCbDeleteRequest)(nil), "halproto.IpsecCbDeleteRequest")
	proto.RegisterType((*IpsecCbDeleteRequestMsg)(nil), "halproto.IpsecCbDeleteRequestMsg")
	proto.RegisterType((*IpsecCbDeleteResponseMsg)(nil), "halproto.IpsecCbDeleteResponseMsg")
	proto.RegisterType((*IpsecCbGetRequest)(nil), "halproto.IpsecCbGetRequest")
	proto.RegisterType((*IpsecCbGetRequestMsg)(nil), "halproto.IpsecCbGetRequestMsg")
	proto.RegisterType((*IpsecCbStats)(nil), "halproto.IpsecCbStats")
	proto.RegisterType((*IpsecCbGetResponse)(nil), "halproto.IpsecCbGetResponse")
	proto.RegisterType((*IpsecCbGetResponseMsg)(nil), "halproto.IpsecCbGetResponseMsg")
	proto.RegisterType((*TcpCbKeyHandle)(nil), "halproto.TcpCbKeyHandle")
	proto.RegisterType((*TcpCbSpec)(nil), "halproto.TcpCbSpec")
	proto.RegisterType((*TcpCbRequestMsg)(nil), "halproto.TcpCbRequestMsg")
	proto.RegisterType((*TcpCbOoqStatus)(nil), "halproto.TcpCbOoqStatus")
	proto.RegisterType((*TcpCbStatus)(nil), "halproto.TcpCbStatus")
	proto.RegisterType((*TcpCbResponse)(nil), "halproto.TcpCbResponse")
	proto.RegisterType((*TcpCbResponseMsg)(nil), "halproto.TcpCbResponseMsg")
	proto.RegisterType((*TcpCbDeleteRequest)(nil), "halproto.TcpCbDeleteRequest")
	proto.RegisterType((*TcpCbDeleteRequestMsg)(nil), "halproto.TcpCbDeleteRequestMsg")
	proto.RegisterType((*TcpCbDeleteResponseMsg)(nil), "halproto.TcpCbDeleteResponseMsg")
	proto.RegisterType((*TcpCbGetRequest)(nil), "halproto.TcpCbGetRequest")
	proto.RegisterType((*TcpCbGetRequestMsg)(nil), "halproto.TcpCbGetRequestMsg")
	proto.RegisterType((*TcpCbStats)(nil), "halproto.TcpCbStats")
	proto.RegisterType((*TcpCbGetResponse)(nil), "halproto.TcpCbGetResponse")
	proto.RegisterType((*TcpCbGetResponseMsg)(nil), "halproto.TcpCbGetResponseMsg")
	proto.RegisterType((*TlsCbKeyHandle)(nil), "halproto.TlsCbKeyHandle")
	proto.RegisterType((*TlsCbSpec)(nil), "halproto.TlsCbSpec")
	proto.RegisterType((*TlsCbRequestMsg)(nil), "halproto.TlsCbRequestMsg")
	proto.RegisterType((*TlsCbStatus)(nil), "halproto.TlsCbStatus")
	proto.RegisterType((*TlsCbResponse)(nil), "halproto.TlsCbResponse")
	proto.RegisterType((*TlsCbResponseMsg)(nil), "halproto.TlsCbResponseMsg")
	proto.RegisterType((*TlsCbDeleteRequest)(nil), "halproto.TlsCbDeleteRequest")
	proto.RegisterType((*TlsCbDeleteRequestMsg)(nil), "halproto.TlsCbDeleteRequestMsg")
	proto.RegisterType((*TlsCbDeleteResponseMsg)(nil), "halproto.TlsCbDeleteResponseMsg")
	proto.RegisterType((*TlsCbGetRequest)(nil), "halproto.TlsCbGetRequest")
	proto.RegisterType((*TlsCbGetRequestMsg)(nil), "halproto.TlsCbGetRequestMsg")
	proto.RegisterType((*TlsCbStats)(nil), "halproto.TlsCbStats")
	proto.RegisterType((*TlsCbGetResponse)(nil), "halproto.TlsCbGetResponse")
	proto.RegisterType((*TlsCbGetResponseMsg)(nil), "halproto.TlsCbGetResponseMsg")
	proto.RegisterType((*WRingKeyHandle)(nil), "halproto.WRingKeyHandle")
	proto.RegisterType((*WRingSpec)(nil), "halproto.WRingSpec")
	proto.RegisterType((*WRingRequestMsg)(nil), "halproto.WRingRequestMsg")
	proto.RegisterType((*WRingStatus)(nil), "halproto.WRingStatus")
	proto.RegisterType((*WRingResponse)(nil), "halproto.WRingResponse")
	proto.RegisterType((*WRingResponseMsg)(nil), "halproto.WRingResponseMsg")
	proto.RegisterType((*WRingDeleteRequest)(nil), "halproto.WRingDeleteRequest")
	proto.RegisterType((*WRingDeleteRequestMsg)(nil), "halproto.WRingDeleteRequestMsg")
	proto.RegisterType((*WRingDeleteResponseMsg)(nil), "halproto.WRingDeleteResponseMsg")
	proto.RegisterType((*WRingGetEntriesRequest)(nil), "halproto.WRingGetEntriesRequest")
	proto.RegisterType((*WRingGetEntriesRequestMsg)(nil), "halproto.WRingGetEntriesRequestMsg")
	proto.RegisterType((*WRingStats)(nil), "halproto.WRingStats")
	proto.RegisterType((*WRingBarcoGCMDescMsg)(nil), "halproto.WRingBarcoGCMDescMsg")
	proto.RegisterType((*WRingGetEntriesResponse)(nil), "halproto.WRingGetEntriesResponse")
	proto.RegisterType((*WRingGetEntriesResponseMsg)(nil), "halproto.WRingGetEntriesResponseMsg")
	proto.RegisterType((*WRingGetMetaResponse)(nil), "halproto.WRingGetMetaResponse")
	proto.RegisterType((*WRingGetMetaResponseMsg)(nil), "halproto.WRingGetMetaResponseMsg")
	proto.RegisterType((*WRingSetMetaResponse)(nil), "halproto.WRingSetMetaResponse")
	proto.RegisterType((*WRingSetMetaResponseMsg)(nil), "halproto.WRingSetMetaResponseMsg")
	proto.RegisterType((*GetOpaqueTagAddrRequest)(nil), "halproto.GetOpaqueTagAddrRequest")
	proto.RegisterType((*GetOpaqueTagAddrRequestMsg)(nil), "halproto.GetOpaqueTagAddrRequestMsg")
	proto.RegisterType((*GetOpaqueTagAddrResponse)(nil), "halproto.GetOpaqueTagAddrResponse")
	proto.RegisterType((*GetOpaqueTagAddrResponseMsg)(nil), "halproto.GetOpaqueTagAddrResponseMsg")
	proto.RegisterType((*BarcoGetReqDescrEntryRequest)(nil), "halproto.BarcoGetReqDescrEntryRequest")
	proto.RegisterType((*BarcoGetReqDescrEntryRequestMsg)(nil), "halproto.BarcoGetReqDescrEntryRequestMsg")
	proto.RegisterType((*BarcoSymmReqDescrMsg)(nil), "halproto.BarcoSymmReqDescrMsg")
	proto.RegisterType((*BarcoASymReqDescrMsg)(nil), "halproto.BarcoASymReqDescrMsg")
	proto.RegisterType((*BarcoGetReqDescrEntryResponse)(nil), "halproto.BarcoGetReqDescrEntryResponse")
	proto.RegisterType((*BarcoGetReqDescrEntryResponseMsg)(nil), "halproto.BarcoGetReqDescrEntryResponseMsg")
	proto.RegisterType((*BarcoGetRingMetaRequest)(nil), "halproto.BarcoGetRingMetaRequest")
	proto.RegisterType((*BarcoGetRingMetaRequestMsg)(nil), "halproto.BarcoGetRingMetaRequestMsg")
	proto.RegisterType((*BarcoGetRingMetaResponse)(nil), "halproto.BarcoGetRingMetaResponse")
	proto.RegisterType((*BarcoGetRingMetaResponseMsg)(nil), "halproto.BarcoGetRingMetaResponseMsg")
	proto.RegisterType((*BarcoGetRingMetaConfigRequest)(nil), "halproto.BarcoGetRingMetaConfigRequest")
	proto.RegisterType((*BarcoGetRingMetaConfigRequestMsg)(nil), "halproto.BarcoGetRingMetaConfigRequestMsg")
	proto.RegisterType((*BarcoGetRingMetaConfigResponse)(nil), "halproto.BarcoGetRingMetaConfigResponse")
	proto.RegisterType((*BarcoGetRingMetaConfigResponseMsg)(nil), "halproto.BarcoGetRingMetaConfigResponseMsg")
	proto.RegisterType((*CryptoKeyCreateRequest)(nil), "halproto.CryptoKeyCreateRequest")
	proto.RegisterType((*CryptoKeyCreateRequestMsg)(nil), "halproto.CryptoKeyCreateRequestMsg")
	proto.RegisterType((*CryptoKeyCreateResponse)(nil), "halproto.CryptoKeyCreateResponse")
	proto.RegisterType((*CryptoKeyCreateResponseMsg)(nil), "halproto.CryptoKeyCreateResponseMsg")
	proto.RegisterType((*CryptoKeyCreateWithIdRequest)(nil), "halproto.CryptoKeyCreateWithIdRequest")
	proto.RegisterType((*CryptoKeyCreateWithIdRequestMsg)(nil), "halproto.CryptoKeyCreateWithIdRequestMsg")
	proto.RegisterType((*CryptoKeyCreateWithIdResponse)(nil), "halproto.CryptoKeyCreateWithIdResponse")
	proto.RegisterType((*CryptoKeyCreateWithIdResponseMsg)(nil), "halproto.CryptoKeyCreateWithIdResponseMsg")
	proto.RegisterType((*CryptoKeySpec)(nil), "halproto.CryptoKeySpec")
	proto.RegisterType((*CryptoKeyReadRequest)(nil), "halproto.CryptoKeyReadRequest")
	proto.RegisterType((*CryptoKeyReadRequestMsg)(nil), "halproto.CryptoKeyReadRequestMsg")
	proto.RegisterType((*CryptoKeyReadResponse)(nil), "halproto.CryptoKeyReadResponse")
	proto.RegisterType((*CryptoKeyReadResponseMsg)(nil), "halproto.CryptoKeyReadResponseMsg")
	proto.RegisterType((*CryptoKeyUpdateRequest)(nil), "halproto.CryptoKeyUpdateRequest")
	proto.RegisterType((*CryptoKeyUpdateRequestMsg)(nil), "halproto.CryptoKeyUpdateRequestMsg")
	proto.RegisterType((*CryptoKeyUpdateResponse)(nil), "halproto.CryptoKeyUpdateResponse")
	proto.RegisterType((*CryptoKeyUpdateResponseMsg)(nil), "halproto.CryptoKeyUpdateResponseMsg")
	proto.RegisterType((*CryptoKeyDeleteRequest)(nil), "halproto.CryptoKeyDeleteRequest")
	proto.RegisterType((*CryptoKeyDeleteRequestMsg)(nil), "halproto.CryptoKeyDeleteRequestMsg")
	proto.RegisterType((*CryptoKeyDeleteResponse)(nil), "halproto.CryptoKeyDeleteResponse")
	proto.RegisterType((*CryptoKeyDeleteResponseMsg)(nil), "halproto.CryptoKeyDeleteResponseMsg")
	proto.RegisterType((*CryptoAsymKeyCreateRequest)(nil), "halproto.CryptoAsymKeyCreateRequest")
	proto.RegisterType((*CryptoAsymKeyCreateRequestMsg)(nil), "halproto.CryptoAsymKeyCreateRequestMsg")
	proto.RegisterType((*CryptoAsymKeyCreateResponse)(nil), "halproto.CryptoAsymKeyCreateResponse")
	proto.RegisterType((*CryptoAsymKeyCreateResponseMsg)(nil), "halproto.CryptoAsymKeyCreateResponseMsg")
	proto.RegisterType((*CryptoAsymKeyDeleteRequest)(nil), "halproto.CryptoAsymKeyDeleteRequest")
	proto.RegisterType((*CryptoAsymKeyDeleteRequestMsg)(nil), "halproto.CryptoAsymKeyDeleteRequestMsg")
	proto.RegisterType((*CryptoAsymKeyDeleteResponse)(nil), "halproto.CryptoAsymKeyDeleteResponse")
	proto.RegisterType((*CryptoAsymKeyDeleteResponseMsg)(nil), "halproto.CryptoAsymKeyDeleteResponseMsg")
	proto.RegisterType((*CryptoAsymKeySpec)(nil), "halproto.CryptoAsymKeySpec")
	proto.RegisterType((*CryptoAsymKeyWriteRequest)(nil), "halproto.CryptoAsymKeyWriteRequest")
	proto.RegisterType((*CryptoAsymKeyWriteRequestMsg)(nil), "halproto.CryptoAsymKeyWriteRequestMsg")
	proto.RegisterType((*CryptoAsymKeyWriteResponse)(nil), "halproto.CryptoAsymKeyWriteResponse")
	proto.RegisterType((*CryptoAsymKeyWriteResponseMsg)(nil), "halproto.CryptoAsymKeyWriteResponseMsg")
	proto.RegisterType((*ECCPoint)(nil), "halproto.ECCPoint")
	proto.RegisterType((*CryptoAsymApiECCDomainParamsFp)(nil), "halproto.CryptoAsymApiECCDomainParamsFp")
	proto.RegisterType((*CryptoAsymApiReqECCPointMulFp)(nil), "halproto.CryptoAsymApiReqECCPointMulFp")
	proto.RegisterType((*CryptoAsymApiRespECCPointMulFp)(nil), "halproto.CryptoAsymApiRespECCPointMulFp")
	proto.RegisterType((*CryptoAsymApiReqECDSASignatureGenFp)(nil), "halproto.CryptoAsymApiReqECDSASignatureGenFp")
	proto.RegisterType((*CryptoAsymApiRespECDSASignatureGenFp)(nil), "halproto.CryptoAsymApiRespECDSASignatureGenFp")
	proto.RegisterType((*CryptoAsymApiReqECDSASignatureVerifyFp)(nil), "halproto.CryptoAsymApiReqECDSASignatureVerifyFp")
	proto.RegisterType((*CryptoAsymApiReqRSAEncrypt)(nil), "halproto.CryptoAsymApiReqRSAEncrypt")
	proto.RegisterType((*CryptoAsymApiRespRSAEncrypt)(nil), "halproto.CryptoAsymApiRespRSAEncrypt")
	proto.RegisterType((*CryptoAsymApiReqRSADecrypt)(nil), "halproto.CryptoAsymApiReqRSADecrypt")
	proto.RegisterType((*CryptoAsymApiRespRSADecrypt)(nil), "halproto.CryptoAsymApiRespRSADecrypt")
	proto.RegisterType((*CryptoAsymApiReqRSACRTDecrypt)(nil), "halproto.CryptoAsymApiReqRSACRTDecrypt")
	proto.RegisterType((*CryptoAsymApiRespRSACRTDecrypt)(nil), "halproto.CryptoAsymApiRespRSACRTDecrypt")
	proto.RegisterType((*CryptoAsymApiReqSetupPrivateKey)(nil), "halproto.CryptoAsymApiReqSetupPrivateKey")
	proto.RegisterType((*CryptoAsymApiRespECDSAKeyInfo)(nil), "halproto.CryptoAsymApiRespECDSAKeyInfo")
	proto.RegisterType((*CryptoAsymApiRespRSAKeyInfo)(nil), "halproto.CryptoAsymApiRespRSAKeyInfo")
	proto.RegisterType((*CryptoAsymApiRespSetupPrivateKey)(nil), "halproto.CryptoAsymApiRespSetupPrivateKey")
	proto.RegisterType((*CryptoAsymApiReqSetupCert)(nil), "halproto.CryptoAsymApiReqSetupCert")
	proto.RegisterType((*CryptoAsymApiRespSetupCert)(nil), "halproto.CryptoAsymApiRespSetupCert")
	proto.RegisterType((*CryptoAsymRsaKey)(nil), "halproto.CryptoAsymRsaKey")
	proto.RegisterType((*CryptoAsymApiReqSetupPrivateKeyEx)(nil), "halproto.CryptoAsymApiReqSetupPrivateKeyEx")
	proto.RegisterType((*CryptoAsymApiRespSetupPrivateKeyEx)(nil), "halproto.CryptoAsymApiRespSetupPrivateKeyEx")
	proto.RegisterType((*CryptoAsymApiReqRSASignatureGen)(nil), "halproto.CryptoAsymApiReqRSASignatureGen")
	proto.RegisterType((*CryptoAsymApiRespRSASignatureGen)(nil), "halproto.CryptoAsymApiRespRSASignatureGen")
	proto.RegisterType((*CryptoAsymApiReqRSASignatureVerify)(nil), "halproto.CryptoAsymApiReqRSASignatureVerify")
	proto.RegisterType((*CryptoSymmApiReqHashGenerate)(nil), "halproto.CryptoSymmApiReqHashGenerate")
	proto.RegisterType((*CryptoSymmApiRespHashGenerate)(nil), "halproto.CryptoSymmApiRespHashGenerate")
	proto.RegisterType((*CryptoSymmApiReqHashVerify)(nil), "halproto.CryptoSymmApiReqHashVerify")
	proto.RegisterType((*CryptoAsymApiReqFIPSRSASignatureGen)(nil), "halproto.CryptoAsymApiReqFIPSRSASignatureGen")
	proto.RegisterType((*CryptoAsymApiRespFIPSRSASignatureGen)(nil), "halproto.CryptoAsymApiRespFIPSRSASignatureGen")
	proto.RegisterType((*CryptoAsymApiReqFIPSRSASignatureVerify)(nil), "halproto.CryptoAsymApiReqFIPSRSASignatureVerify")
	proto.RegisterType((*CryptoApiRequest)(nil), "halproto.CryptoApiRequest")
	proto.RegisterType((*CryptoApiResponse)(nil), "halproto.CryptoApiResponse")
	proto.RegisterType((*CryptoApiRequestMsg)(nil), "halproto.CryptoApiRequestMsg")
	proto.RegisterType((*CryptoApiResponseMsg)(nil), "halproto.CryptoApiResponseMsg")
	proto.RegisterType((*DescrAolRequest)(nil), "halproto.DescrAolRequest")
	proto.RegisterType((*DescrAolRequestMsg)(nil), "halproto.DescrAolRequestMsg")
	proto.RegisterType((*DescrAolSpec)(nil), "halproto.DescrAolSpec")
	proto.RegisterType((*DescrAolResponseMsg)(nil), "halproto.DescrAolResponseMsg")
	proto.RegisterType((*ProxycCbKeyHandle)(nil), "halproto.ProxycCbKeyHandle")
	proto.RegisterType((*ProxycCbSpec)(nil), "halproto.ProxycCbSpec")
	proto.RegisterType((*ProxycCbRequestMsg)(nil), "halproto.ProxycCbRequestMsg")
	proto.RegisterType((*ProxycCbStatus)(nil), "halproto.ProxycCbStatus")
	proto.RegisterType((*ProxycCbResponse)(nil), "halproto.ProxycCbResponse")
	proto.RegisterType((*ProxycCbResponseMsg)(nil), "halproto.ProxycCbResponseMsg")
	proto.RegisterType((*ProxycCbDeleteRequest)(nil), "halproto.ProxycCbDeleteRequest")
	proto.RegisterType((*ProxycCbDeleteRequestMsg)(nil), "halproto.ProxycCbDeleteRequestMsg")
	proto.RegisterType((*ProxycCbDeleteResponseMsg)(nil), "halproto.ProxycCbDeleteResponseMsg")
	proto.RegisterType((*ProxycCbGetRequest)(nil), "halproto.ProxycCbGetRequest")
	proto.RegisterType((*ProxycCbGetRequestMsg)(nil), "halproto.ProxycCbGetRequestMsg")
	proto.RegisterType((*ProxycCbStats)(nil), "halproto.ProxycCbStats")
	proto.RegisterType((*ProxycCbGetResponse)(nil), "halproto.ProxycCbGetResponse")
	proto.RegisterType((*ProxycCbGetResponseMsg)(nil), "halproto.ProxycCbGetResponseMsg")
	proto.RegisterType((*ProxyrCbKeyHandle)(nil), "halproto.ProxyrCbKeyHandle")
	proto.RegisterType((*ProxyrCbSpec)(nil), "halproto.ProxyrCbSpec")
	proto.RegisterType((*ProxyrCbRequestMsg)(nil), "halproto.ProxyrCbRequestMsg")
	proto.RegisterType((*ProxyrCbStatus)(nil), "halproto.ProxyrCbStatus")
	proto.RegisterType((*ProxyrCbResponse)(nil), "halproto.ProxyrCbResponse")
	proto.RegisterType((*ProxyrCbResponseMsg)(nil), "halproto.ProxyrCbResponseMsg")
	proto.RegisterType((*ProxyrCbDeleteRequest)(nil), "halproto.ProxyrCbDeleteRequest")
	proto.RegisterType((*ProxyrCbDeleteRequestMsg)(nil), "halproto.ProxyrCbDeleteRequestMsg")
	proto.RegisterType((*ProxyrCbDeleteResponseMsg)(nil), "halproto.ProxyrCbDeleteResponseMsg")
	proto.RegisterType((*ProxyrCbGetRequest)(nil), "halproto.ProxyrCbGetRequest")
	proto.RegisterType((*ProxyrCbGetRequestMsg)(nil), "halproto.ProxyrCbGetRequestMsg")
	proto.RegisterType((*ProxyrCbStats)(nil), "halproto.ProxyrCbStats")
	proto.RegisterType((*ProxyrCbGetResponse)(nil), "halproto.ProxyrCbGetResponse")
	proto.RegisterType((*ProxyrCbGetResponseMsg)(nil), "halproto.ProxyrCbGetResponseMsg")
	proto.RegisterType((*RawrCbKeyHandle)(nil), "halproto.RawrCbKeyHandle")
	proto.RegisterType((*RawrCbSpec)(nil), "halproto.RawrCbSpec")
	proto.RegisterType((*RawrCbRequestMsg)(nil), "halproto.RawrCbRequestMsg")
	proto.RegisterType((*RawrCbStatus)(nil), "halproto.RawrCbStatus")
	proto.RegisterType((*RawrCbResponse)(nil), "halproto.RawrCbResponse")
	proto.RegisterType((*RawrCbResponseMsg)(nil), "halproto.RawrCbResponseMsg")
	proto.RegisterType((*RawrCbDeleteRequest)(nil), "halproto.RawrCbDeleteRequest")
	proto.RegisterType((*RawrCbDeleteRequestMsg)(nil), "halproto.RawrCbDeleteRequestMsg")
	proto.RegisterType((*RawrCbDeleteResponseMsg)(nil), "halproto.RawrCbDeleteResponseMsg")
	proto.RegisterType((*RawrCbGetRequest)(nil), "halproto.RawrCbGetRequest")
	proto.RegisterType((*RawrCbGetRequestMsg)(nil), "halproto.RawrCbGetRequestMsg")
	proto.RegisterType((*RawrCbStats)(nil), "halproto.RawrCbStats")
	proto.RegisterType((*RawrCbGetResponse)(nil), "halproto.RawrCbGetResponse")
	proto.RegisterType((*RawrCbGetResponseMsg)(nil), "halproto.RawrCbGetResponseMsg")
	proto.RegisterType((*RawcCbKeyHandle)(nil), "halproto.RawcCbKeyHandle")
	proto.RegisterType((*RawcCbSpec)(nil), "halproto.RawcCbSpec")
	proto.RegisterType((*RawcCbRequestMsg)(nil), "halproto.RawcCbRequestMsg")
	proto.RegisterType((*RawcCbStatus)(nil), "halproto.RawcCbStatus")
	proto.RegisterType((*RawcCbResponse)(nil), "halproto.RawcCbResponse")
	proto.RegisterType((*RawcCbResponseMsg)(nil), "halproto.RawcCbResponseMsg")
	proto.RegisterType((*RawcCbDeleteRequest)(nil), "halproto.RawcCbDeleteRequest")
	proto.RegisterType((*RawcCbDeleteRequestMsg)(nil), "halproto.RawcCbDeleteRequestMsg")
	proto.RegisterType((*RawcCbDeleteResponse)(nil), "halproto.RawcCbDeleteResponse")
	proto.RegisterType((*RawcCbDeleteResponseMsg)(nil), "halproto.RawcCbDeleteResponseMsg")
	proto.RegisterType((*RawcCbGetRequest)(nil), "halproto.RawcCbGetRequest")
	proto.RegisterType((*RawcCbGetRequestMsg)(nil), "halproto.RawcCbGetRequestMsg")
	proto.RegisterType((*RawcCbStats)(nil), "halproto.RawcCbStats")
	proto.RegisterType((*RawcCbGetResponse)(nil), "halproto.RawcCbGetResponse")
	proto.RegisterType((*RawcCbGetResponseMsg)(nil), "halproto.RawcCbGetResponseMsg")
	proto.RegisterType((*TestSendFinRequestMsg)(nil), "halproto.TestSendFinRequestMsg")
	proto.RegisterType((*TestSendFinRequest)(nil), "halproto.TestSendFinRequest")
	proto.RegisterType((*TestSendFinResponseMsg)(nil), "halproto.TestSendFinResponseMsg")
	proto.RegisterType((*TestSendFinResponse)(nil), "halproto.TestSendFinResponse")
	proto.RegisterType((*TestClockSyncRequestMsg)(nil), "halproto.TestClockSyncRequestMsg")
	proto.RegisterType((*TestClockSyncRequest)(nil), "halproto.TestClockSyncRequest")
	proto.RegisterType((*TestClockSyncResponseMsg)(nil), "halproto.TestClockSyncResponseMsg")
	proto.RegisterType((*TestClockSyncResponse)(nil), "halproto.TestClockSyncResponse")
	proto.RegisterType((*FlowHashGetResponseMsg)(nil), "halproto.FlowHashGetResponseMsg")
	proto.RegisterType((*FlowHashGetResponse)(nil), "halproto.FlowHashGetResponse")
	proto.RegisterType((*FlowHashGetRequest)(nil), "halproto.FlowHashGetRequest")
	proto.RegisterType((*FlowHashGetRequestMsg)(nil), "halproto.FlowHashGetRequestMsg")
	proto.RegisterEnum("halproto.SoftwarePhvPipeline", SoftwarePhvPipeline_name, SoftwarePhvPipeline_value)
	proto.RegisterEnum("halproto.CryptoApiHashType", CryptoApiHashType_name, CryptoApiHashType_value)
	proto.RegisterEnum("halproto.CryptoApiType", CryptoApiType_name, CryptoApiType_value)
	proto.RegisterEnum("halproto.UpdateType", UpdateType_name, UpdateType_value)
}

func init() { proto.RegisterFile("internal.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 10965 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0xd9, 0x6f, 0x1c, 0xc9,
	0x96, 0x1f, 0xac, 0xe2, 0x5a, 0x3c, 0xac, 0x2a, 0x96, 0x92, 0x22, 0x59, 0xa2, 0x36, 0xaa, 0xb4,
	0xb6, 0xfa, 0xf6, 0x22, 0xaa, 0xa5, 0xee, 0x7b, 0x6f, 0xdf, 0x85, 0x22, 0x29, 0x91, 0x57, 0x12,
	0x45, 0x65, 0x51, 0x52, 0xf7, 0x77, 0x71, 0x27, 0x91, 0xcc, 0x8c, 0x22, 0xf3, 0x32, 0x2b, 0x33,
	0x19, 0x99, 0x24, 0x8b, 0xf7, 0xf3, 0x02, 0xd8, 0xc6, 0xc0, 0x6e, 0x2f, 0x83, 0x99, 0xb1, 0xc7,
	0xcb, 0x4c, 0x8f, 0x67, 0xbc, 0x6f, 0x33, 0xde, 0x06, 0xf6, 0x9b, 0xe1, 0x07, 0x03, 0x86, 0xe1,
	0x07, 0x1b, 0xf0, 0xa3, 0x8d, 0x0b, 0xc3, 0xb0, 0x0d, 0x78, 0xfe, 0x02, 0x3f, 0x19, 0x46, 0x9c,
	0x88, 0xcc, 0x8c, 0xdc, 0xaa, 0x8a, 0x64, 0x77, 0xdb, 0x80, 0xe7, 0xa9, 0x2a, 0xe3, 0x9c, 0x38,
	0x11, 0xe7, 0xc4, 0x89, 0x13, 0xbf, 0x88, 0xc8, 0x88, 0x84, 0x9a, 0xe5, 0x04, 0x84, 0x3a, 0xba,
	0xfd, 0xbe, 0x47, 0xdd, 0xc0, 0x55, 0xca, 0xe1, 0xf3, 0xfc, 0x64, 0x70, 0xec, 0x11, 0x9f, 0x27,
	0xcf, 0x4f, 0xb6, 0x8f, 0x6c, 0x77, 0x47, 0x3c, 0x54, 0x7d, 0xe2, 0xfb, 0x96, 0xeb, 0xf0, 0xc7,
	0xe6, 0x1f, 0x2f, 0xc1, 0xf9, 0x4d, 0xea, 0xee, 0x50, 0xbd, 0xb3, 0x64, 0x9a, 0x94, 0xf8, 0xbe,
	0x4a, 0xf6, 0x95, 0x59, 0x18, 0xdb, 0xd5, 0x1d, 0xd3, 0x26, 0x8d, 0xd2, 0x42, 0xe9, 0xee, 0x84,
	0x2a, 0x9e, 0x94, 0x4b, 0x30, 0xe1, 0x51, 0x77, 0x47, 0x73, 0xf4, 0x0e, 0x69, 0x0c, 0x21, 0xa9,
	0xcc, 0x12, 0x36, 0xf4, 0x0e, 0x51, 0x6e, 0x40, 0x95, 0x12, 0xdf, 0xb5, 0x0f, 0x89, 0x66, 0xeb,
	0xdb, 0xc4, 0x6e, 0x0c, 0x2f, 0x94, 0xee, 0x96, 0xd5, 0x8a, 0x48, 0x7c, 0xce, 0xd2, 0x94, 0x0b,
	0x30, 0xca, 0x89, 0x23, 0x98, 0x9b, 0x3f, 0x34, 0xef, 0x82, 0x92, 0xae, 0x84, 0xef, 0x29, 0x0a,
	0x8c, 0xe8, 0xa6, 0x49, 0xb1, 0x0e, 0xc3, 0x2a, 0xfe, 0x6f, 0x6e, 0xc1, 0xa5, 0xa7, 0x24, 0xc8,
	0xd4, 0xf8, 0x80, 0xf8, 0xc1, 0x0b, 0x7f, 0x47, 0x79, 0x08, 0xe3, 0x94, 0x3f, 0x35, 0x4a, 0x0b,
	0xc3, 0x77, 0x27, 0x17, 0x2f, 0xbd, 0x1f, 0xd9, 0x28, 0x93, 0x49, 0x0d, 0x79, 0x9b, 0xaf, 0xe1,
	0x62, 0xb6, 0x7c, 0xd7, 0xf1, 0x09, 0x93, 0xf9, 0x09, 0x94, 0xa9, 0x78, 0x14, 0x42, 0x2f, 0x17,
	0x0b, 0xf5, 0x3d, 0x35, 0xe2, 0x6e, 0xde, 0x81, 0xea, 0xda, 0xf6, 0x00, 0x76, 0x6d, 0x7e, 0x02,
	0x35, 0x99, 0x31, 0x5f, 0x77, 0x96, 0xe6, 0x5b, 0x3f, 0xe3, 0x86, 0xaf, 0xaa, 0xf8, 0xbf, 0xb9,
	0x01, 0x17, 0x97, 0x6c, 0xdb, 0x35, 0x12, 0xe5, 0x84, 0xd6, 0xb8, 0x9f, 0xb6, 0xc6, 0x5c, 0x5c,
	0xf1, 0x44, 0x86, 0xd8, 0x12, 0x2a, 0xcc, 0x67, 0xe4, 0xc5, 0xa6, 0xf8, 0x28, 0x63, 0x8a, 0x46,
	0xbe, 0xc4, 0x84, 0x19, 0x3e, 0x80, 0x89, 0xe7, 0x56, 0xfb, 0xb1, 0xd9, 0x66, 0x26, 0xa8, 0xc3,
	0xb0, 0x6d, 0xb5, 0x51, 0xaf, 0xaa, 0xca, 0xfe, 0xb2, 0x94, 0x6d, 0xb3, 0x2d, 0xb4, 0x62, 0x7f,
	0x9b, 0x6b, 0x00, 0x61, 0x06, 0xdf, 0x1b, 0x24, 0x07, 0x33, 0xac, 0x1f, 0xe8, 0xc1, 0x81, 0x8f,
	0x4e, 0x37, 0xaa, 0x8a, 0xa7, 0xe6, 0x8f, 0xe0, 0xe2, 0xb2, 0xeb, 0xb4, 0xad, 0x9d, 0x03, 0x4a,
	0xa2, 0x3a, 0x84, 0xe6, 0x79, 0x2f, 0x6d, 0x9e, 0xe9, 0x58, 0x99, 0x88, 0x39, 0x36, 0xcd, 0x06,
	0xcc, 0x67, 0x64, 0xc5, 0xa6, 0xf9, 0x30, 0x63, 0x9a, 0x0b, 0x59, 0x69, 0x09, 0xb3, 0xfc, 0xcb,
	0x12, 0x9c, 0x6f, 0xb9, 0xed, 0xe0, 0x48, 0xa7, 0x64, 0x73, 0xf7, 0xb0, 0x85, 0x35, 0x56, 0xbe,
	0x0d, 0x65, 0xcf, 0xf2, 0x88, 0x6d, 0x39, 0xdc, 0x49, 0x6a, 0x8b, 0x57, 0x62, 0x39, 0x12, 0xfb,
	0xa6, 0x60, 0x52, 0x23, 0x76, 0xa5, 0x01, 0xe3, 0xc4, 0xd1, 0xb7, 0x6d, 0x62, 0xa2, 0x69, 0xca,
	0x6a, 0xf8, 0xc8, 0x3c, 0xc7, 0x74, 0x1d, 0x22, 0x7a, 0x24, 0xfe, 0x57, 0xae, 0x43, 0xc5, 0x38,
	0xa0, 0x94, 0x38, 0x81, 0x66, 0x38, 0x01, 0xc5, 0x0e, 0x59, 0x55, 0x27, 0x45, 0xda, 0xb2, 0x13,
	0x50, 0xe5, 0x1a, 0x4c, 0x5a, 0xce, 0x4f, 0x89, 0x21, 0x38, 0x46, 0x91, 0x03, 0x78, 0x12, 0x63,
	0x68, 0xbe, 0x81, 0x69, 0xa9, 0x4a, 0xa1, 0x39, 0x94, 0x1f, 0x00, 0xe8, 0x9e, 0xa5, 0x89, 0x16,
	0xe1, 0x5a, 0xd4, 0xdf, 0xe7, 0x21, 0x69, 0xc9, 0xb3, 0xb8, 0xa6, 0x8f, 0x6b, 0xbf, 0xff, 0xf3,
	0x6b, 0x12, 0x9f, 0x3a, 0xa1, 0x87, 0xa4, 0x66, 0x0b, 0x66, 0x73, 0xe4, 0x32, 0x33, 0x7f, 0x3b,
	0x63, 0xe6, 0x7c, 0xf3, 0x84, 0x79, 0x24, 0x7b, 0xab, 0x30, 0x23, 0x31, 0x3c, 0x25, 0x81, 0x70,
	0x85, 0x33, 0x98, 0xbc, 0xf9, 0x1a, 0x1a, 0xb9, 0x32, 0x79, 0x55, 0x53, 0xee, 0x75, 0x2d, 0x57,
	0x6a, 0x9c, 0x29, 0x76, 0xb5, 0x3f, 0x57, 0x4a, 0x18, 0x00, 0x59, 0xbe, 0x22, 0xdb, 0x2a, 0x0f,
	0xa2, 0xae, 0xc2, 0x9c, 0x24, 0x11, 0x21, 0x33, 0xde, 0x18, 0xf5, 0xa3, 0xcf, 0xe1, 0x62, 0x7e,
	0x7d, 0x98, 0xa2, 0x9f, 0x66, 0xda, 0x64, 0xa1, 0x58, 0xd3, 0x4c, 0xb3, 0x6c, 0x24, 0x7a, 0xc1,
	0x3a, 0x3a, 0xd7, 0x59, 0x9a, 0xe4, 0x05, 0x5c, 0xc8, 0xc8, 0xeb, 0x37, 0x34, 0x64, 0x32, 0xc4,
	0x4d, 0xf1, 0x3d, 0x38, 0xff, 0xdc, 0xdd, 0x79, 0x62, 0xbb, 0x47, 0x52, 0xd3, 0xde, 0x4d, 0xcb,
	0xaa, 0xbd, 0xcf, 0xc7, 0xd8, 0x27, 0x6f, 0x57, 0x0f, 0x89, 0x23, 0x65, 0x7f, 0x06, 0x4a, 0x94,
	0x3d, 0xb6, 0xd8, 0xc3, 0x8c, 0xc5, 0x2e, 0x4a, 0xc1, 0x22, 0xc9, 0x9f, 0xf0, 0xe0, 0xa9, 0x14,
	0xf1, 0xec, 0x5d, 0xed, 0x11, 0x54, 0x56, 0x3b, 0x5e, 0x70, 0x1c, 0x76, 0x86, 0xdb, 0x69, 0xd5,
	0x2a, 0x42, 0x1a, 0xe7, 0x8a, 0x14, 0xfb, 0x36, 0x54, 0x45, 0x3e, 0x51, 0x93, 0xbb, 0x19, 0x9d,
	0x92, 0x39, 0x63, 0x35, 0x3a, 0x50, 0x5f, 0xf7, 0x7c, 0x62, 0x2c, 0x6f, 0x3f, 0x23, 0xc7, 0x6b,
	0x1c, 0x59, 0x5c, 0x03, 0xb0, 0x58, 0x9a, 0xb1, 0xad, 0x59, 0x26, 0x8f, 0xf5, 0x6b, 0xe7, 0xd4,
	0x09, 0x91, 0xb6, 0x6e, 0x2a, 0x77, 0xa0, 0x16, 0x32, 0x88, 0x21, 0x94, 0xb9, 0xef, 0xd8, 0xda,
	0x39, 0xb5, 0x2a, 0xd2, 0xb9, 0xa4, 0xc7, 0x53, 0x50, 0xdd, 0x23, 0xc7, 0x9a, 0x4b, 0x05, 0x5f,
	0xf3, 0x3f, 0x8f, 0xc3, 0xa4, 0x28, 0xaf, 0xe5, 0x11, 0x43, 0xf9, 0x7e, 0x8a, 0x01, 0x4b, 0x9b,
	0x5c, 0x9c, 0x8f, 0x5b, 0x20, 0x5d, 0x3b, 0x75, 0x72, 0x8f, 0x1c, 0xbf, 0xa4, 0xa2, 0xaa, 0x35,
	0x18, 0xf2, 0x2c, 0x31, 0xf8, 0x0c, 0x79, 0x16, 0x7b, 0x36, 0x2c, 0x0c, 0xad, 0x55, 0x75, 0xc8,
	0xb0, 0x58, 0xd4, 0x0c, 0x0e, 0x1c, 0x87, 0xd8, 0x9a, 0x6f, 0x79, 0x1f, 0x89, 0xb8, 0x0a, 0x3c,
	0xa9, 0x65, 0x79, 0x1f, 0x49, 0x0c, 0x26, 0x63, 0x18, 0x95, 0x19, 0x56, 0x18, 0xc3, 0x1c, 0x8c,
	0x5b, 0x87, 0x1a, 0x8e, 0xf5, 0x63, 0x48, 0x1c, 0xb3, 0x0e, 0x5b, 0xd6, 0xcf, 0x88, 0x72, 0x11,
	0xca, 0x96, 0x21, 0x28, 0xe3, 0x48, 0x19, 0xb7, 0x0c, 0x4e, 0xba, 0x02, 0xb0, 0x6d, 0xbb, 0xc6,
	0x1e, 0x27, 0x96, 0x91, 0x38, 0x81, 0x29, 0x48, 0xbe, 0x04, 0x13, 0x4c, 0x69, 0xcb, 0x31, 0x49,
	0xb7, 0x31, 0x81, 0xd4, 0xf2, 0x1e, 0x39, 0x5e, 0x67, 0xcf, 0x4a, 0x13, 0xaa, 0xdb, 0x3a, 0x35,
	0x5c, 0x8d, 0x38, 0x86, 0x66, 0x74, 0xcc, 0x06, 0xf0, 0xb1, 0x00, 0x13, 0x57, 0x1d, 0x63, 0xb9,
	0x63, 0x32, 0x2d, 0xad, 0xc3, 0xc6, 0x24, 0xb3, 0xb9, 0x3a, 0x64, 0x1d, 0x86, 0x75, 0xd4, 0xed,
	0xa0, 0x51, 0x89, 0xea, 0xa8, 0xdb, 0x81, 0x32, 0x03, 0x63, 0xc4, 0x77, 0xb4, 0x5d, 0xab, 0x51,
	0xc5, 0xf4, 0x51, 0xe2, 0x3b, 0x6b, 0x56, 0x98, 0x6c, 0xbb, 0x8d, 0x5a, 0x94, 0xfc, 0xdc, 0x65,
	0x43, 0xb9, 0xef, 0x59, 0x8d, 0x29, 0x3e, 0x94, 0xfb, 0x9e, 0xa5, 0xdc, 0x86, 0x29, 0xd2, 0xf5,
	0x88, 0x11, 0x10, 0x53, 0xf3, 0xc9, 0xbe, 0xe6, 0xb8, 0x8d, 0x3a, 0x52, 0xab, 0x61, 0x72, 0x8b,
	0xec, 0x6f, 0xb8, 0xca, 0x65, 0x00, 0x4e, 0xd6, 0xb6, 0x3b, 0x5e, 0xe3, 0x3c, 0x56, 0xac, 0xec,
	0x33, 0xd2, 0xe3, 0x8e, 0xa7, 0xdc, 0x64, 0x58, 0xc9, 0x7b, 0xd4, 0x50, 0xb0, 0x6d, 0xc3, 0x1e,
	0xb1, 0xbe, 0x19, 0x22, 0x14, 0xa4, 0x32, 0x2e, 0x93, 0x71, 0x4d, 0x17, 0x71, 0x31, 0xaa, 0x32,
	0x0d, 0xa3, 0x96, 0xaf, 0x1d, 0x3e, 0x6a, 0x5c, 0xe0, 0xc0, 0xcb, 0xf2, 0xdf, 0x3c, 0x62, 0x4d,
	0x71, 0x48, 0xdb, 0xda, 0xa1, 0xad, 0x3b, 0x8d, 0x19, 0xde, 0x14, 0x87, 0xb4, 0xfd, 0xc6, 0xd6,
	0x1d, 0xe5, 0x5d, 0x50, 0x6c, 0xdd, 0x0f, 0x34, 0x4a, 0x3c, 0x5b, 0x3f, 0x0e, 0x95, 0x98, 0x45,
	0xa6, 0x29, 0x46, 0x51, 0x91, 0xc0, 0xd5, 0x98, 0x83, 0x71, 0x87, 0x1c, 0x69, 0xcc, 0x08, 0x73,
	0xdc, 0x8e, 0x0e, 0x39, 0x6a, 0x79, 0x16, 0x6b, 0x14, 0x46, 0x88, 0x5b, 0xad, 0xc1, 0x1b, 0xc5,
	0x21, 0x47, 0xcf, 0xc2, 0x86, 0x6b, 0x40, 0xd9, 0xf2, 0x35, 0x47, 0x0f, 0xb4, 0xa0, 0x71, 0x51,
	0xb4, 0x82, 0xbf, 0xa1, 0x07, 0x5b, 0x0c, 0x67, 0xb7, 0x6d, 0x7d, 0xc7, 0x6f, 0xcc, 0x73, 0x6b,
	0xe3, 0x03, 0xf3, 0x02, 0xcb, 0xd7, 0xa8, 0xee, 0x98, 0x6e, 0xa7, 0x71, 0x89, 0x7b, 0x81, 0xe5,
	0xab, 0xf8, 0xcc, 0x88, 0xa4, 0x1b, 0x50, 0x5d, 0xf3, 0x74, 0xb3, 0x71, 0x99, 0x13, 0x31, 0x61,
	0x53, 0x37, 0x59, 0x35, 0x69, 0x57, 0xf3, 0xf6, 0x02, 0xbf, 0x71, 0x85, 0x17, 0x44, 0xbb, 0x9b,
	0x7b, 0x81, 0xcf, 0xec, 0x40, 0xbb, 0xda, 0xf6, 0x71, 0x40, 0xfc, 0xc6, 0x55, 0x6c, 0x84, 0x71,
	0xda, 0x7d, 0xcc, 0x1e, 0x05, 0xc9, 0xa4, 0xae, 0xe7, 0x37, 0xae, 0x85, 0xa4, 0x15, 0xf6, 0xc8,
	0xc4, 0x05, 0x42, 0xdc, 0x02, 0x52, 0xc6, 0x82, 0x48, 0x5c, 0x10, 0x8a, 0xbb, 0xce, 0xf3, 0x04,
	0xb1, 0xb8, 0x20, 0x14, 0xd7, 0x0c, 0x49, 0x28, 0xae, 0xb9, 0x02, 0xe7, 0x45, 0x9f, 0x95, 0x82,
	0xf4, 0x07, 0xe9, 0x48, 0x36, 0x93, 0xe9, 0xe1, 0x2c, 0x1e, 0xc4, 0x21, 0xed, 0x11, 0x54, 0xc3,
	0x74, 0x3e, 0x54, 0xde, 0xca, 0xc4, 0x9c, 0x12, 0x96, 0x9b, 0x8c, 0x38, 0xcd, 0x3f, 0x56, 0x82,
	0xa9, 0xa8, 0x78, 0x11, 0x0d, 0x3f, 0x18, 0x24, 0x2e, 0xcb, 0xc3, 0xf2, 0xf7, 0xe3, 0xb2, 0x12,
	0xc3, 0xf3, 0x5c, 0xb6, 0xd2, 0x3c, 0x6f, 0x58, 0x09, 0x11, 0xc7, 0x9f, 0x81, 0x92, 0xaa, 0x43,
	0xdf, 0x81, 0x26, 0xc5, 0x2f, 0x45, 0xe8, 0x37, 0x70, 0x41, 0x10, 0x57, 0x88, 0x4d, 0x02, 0x12,
	0x0e, 0x0e, 0x67, 0x0c, 0x9d, 0xcd, 0x16, 0xcc, 0xe5, 0xc9, 0xe5, 0xb3, 0xac, 0x54, 0x6b, 0x5d,
	0xcd, 0x08, 0x4d, 0xe4, 0x91, 0x87, 0xd8, 0x46, 0x8a, 0x21, 0xd6, 0x3f, 0xdd, 0x0c, 0xc3, 0x7d,
	0x9a, 0xa1, 0xd9, 0x8a, 0x3c, 0x49, 0x02, 0x88, 0x67, 0x55, 0xfb, 0x45, 0x64, 0xce, 0x24, 0x42,
	0xec, 0x05, 0x49, 0x32, 0x19, 0x62, 0x85, 0x6b, 0x50, 0x91, 0x5c, 0xc1, 0x6f, 0xfe, 0xbb, 0x52,
	0xd4, 0xf6, 0x32, 0x52, 0x3c, 0xb1, 0x0b, 0xbe, 0x03, 0x23, 0xbe, 0x47, 0x0c, 0xe1, 0x78, 0x05,
	0xbd, 0x05, 0x59, 0x94, 0x0f, 0x12, 0xf3, 0xad, 0x1e, 0x5e, 0x2a, 0xd8, 0x94, 0x6f, 0xc1, 0x28,
	0xfb, 0xe7, 0xe3, 0x70, 0x38, 0xb9, 0x38, 0x9b, 0xcb, 0xef, 0xab, 0x9c, 0xa9, 0xf9, 0x0a, 0x66,
	0xb2, 0x0a, 0xf5, 0x9d, 0x8b, 0x67, 0xb3, 0x48, 0x2e, 0x6d, 0x40, 0x6d, 0xcb, 0xf0, 0x64, 0xc8,
	0x71, 0x09, 0xca, 0x81, 0xe1, 0x25, 0x01, 0xc7, 0x38, 0xa6, 0xac, 0x9b, 0xca, 0x0d, 0xa8, 0x70,
	0x62, 0x0a, 0x6c, 0x4c, 0x62, 0x6a, 0x11, 0xd4, 0xf8, 0xdd, 0x3a, 0x4c, 0x60, 0x29, 0x08, 0x34,
	0x3e, 0xcd, 0x77, 0x1b, 0x69, 0xca, 0x9c, 0xac, 0x51, 0x12, 0x66, 0xb0, 0x88, 0x6b, 0x1c, 0x6a,
	0x4e, 0x37, 0x10, 0x58, 0x63, 0x8c, 0x1a, 0x87, 0x1b, 0xdd, 0x80, 0x11, 0x7c, 0xc7, 0x44, 0x02,
	0x07, 0x1d, 0x63, 0xbe, 0x63, 0x4a, 0x84, 0x03, 0x47, 0x17, 0xa0, 0x83, 0x11, 0x5e, 0x3b, 0x3a,
	0x8b, 0xec, 0x4c, 0x54, 0xe0, 0x1f, 0xea, 0xb6, 0x80, 0x1b, 0x65, 0x6a, 0x1c, 0x6e, 0xb1, 0x67,
	0x46, 0x0c, 0x7c, 0x8d, 0x12, 0x83, 0x38, 0x81, 0x80, 0x1b, 0xe5, 0xc0, 0x57, 0xf1, 0x99, 0x11,
	0x7d, 0x42, 0xf7, 0xb5, 0x6d, 0xdd, 0xe7, 0x88, 0x03, 0xc7, 0x58, 0xba, 0xff, 0x58, 0xf7, 0x11,
	0x53, 0x98, 0x64, 0xfb, 0x60, 0x47, 0x33, 0x5d, 0x5b, 0x20, 0x8e, 0x32, 0x26, 0xac, 0xb8, 0x36,
	0xcf, 0xe9, 0x8b, 0x9c, 0x13, 0x61, 0x4e, 0x9f, 0xe7, 0x64, 0x35, 0x65, 0x44, 0xcf, 0x12, 0x50,
	0x63, 0x8c, 0x3d, 0x6e, 0x5a, 0x11, 0xc1, 0xb0, 0x10, 0x6a, 0x08, 0xc2, 0xb2, 0x15, 0xea, 0x76,
	0xe4, 0x98, 0x21, 0xdc, 0xf0, 0x1d, 0xf3, 0xad, 0x63, 0xb2, 0x51, 0x81, 0x11, 0x0c, 0x46, 0xe1,
	0x80, 0x83, 0x31, 0x2e, 0x1f, 0x39, 0x66, 0x68, 0xc1, 0x8e, 0xef, 0x0b, 0xcc, 0xc1, 0x2c, 0xf8,
	0xc2, 0xf7, 0x19, 0x00, 0xf3, 0xdd, 0x03, 0x6a, 0x10, 0xcd, 0x73, 0x69, 0x20, 0xc0, 0x07, 0xf0,
	0xa4, 0x4d, 0x97, 0x06, 0x5c, 0x33, 0x3f, 0xe0, 0xe4, 0x7a, 0xa8, 0x99, 0x1f, 0x20, 0xf1, 0x0e,
	0x4c, 0xed, 0x12, 0xdd, 0x24, 0x54, 0x0b, 0x48, 0xc7, 0xb3, 0xf5, 0x80, 0x20, 0xfa, 0xa8, 0xa8,
	0x35, 0x9e, 0xbc, 0x25, 0x52, 0xd9, 0x18, 0xcc, 0xdc, 0x99, 0x20, 0x08, 0xa9, 0x72, 0xdf, 0x46,
	0xa0, 0x26, 0x0a, 0xb7, 0xad, 0x36, 0x22, 0x8f, 0xaa, 0x3a, 0xc1, 0x53, 0x9e, 0x5b, 0x6d, 0x46,
	0xd6, 0x63, 0xc3, 0x5d, 0x40, 0xc3, 0x4d, 0xe8, 0x91, 0xe5, 0x2e, 0x42, 0x59, 0x0f, 0x4d, 0x27,
	0x60, 0x87, 0x2e, 0x6c, 0x17, 0x91, 0x0c, 0x4b, 0x80, 0x0d, 0x4e, 0x5a, 0xb6, 0x94, 0x05, 0xa8,
	0x44, 0x2d, 0xa5, 0x05, 0x5d, 0x81, 0x34, 0x20, 0x6c, 0xac, 0xad, 0x2e, 0x2b, 0x56, 0x28, 0x65,
	0x13, 0x47, 0x40, 0x8d, 0x09, 0x9e, 0xf2, 0x9c, 0x38, 0xca, 0x5d, 0xa8, 0x7b, 0xc4, 0x31, 0x2d,
	0x67, 0x47, 0xd3, 0x19, 0xc6, 0x24, 0x8e, 0x89, 0x80, 0xa3, 0xac, 0xd6, 0x44, 0xfa, 0x92, 0xb1,
	0xd7, 0x22, 0x8e, 0xa9, 0x7c, 0x0c, 0x55, 0xfb, 0x63, 0xcd, 0xa3, 0x6e, 0xf7, 0x58, 0x63, 0xb1,
	0x06, 0x01, 0x48, 0x6d, 0x71, 0x3a, 0x0a, 0x3c, 0x9e, 0x4a, 0x4c, 0x8b, 0x6e, 0x1d, 0x7b, 0x44,
	0x9d, 0xb4, 0x3f, 0xde, 0x64, 0x8c, 0xec, 0x81, 0xd5, 0x11, 0x6b, 0x4f, 0x49, 0xd0, 0x65, 0x2a,
	0x5c, 0x12, 0xad, 0x42, 0xfc, 0x7d, 0x95, 0x04, 0x5d, 0xae, 0x05, 0x12, 0x43, 0x27, 0x67, 0x18,
	0x65, 0x44, 0x05, 0x96, 0xd6, 0xe2, 0x8e, 0x3e, 0x0d, 0xa3, 0xb4, 0xab, 0x09, 0x8c, 0x32, 0xa2,
	0x8e, 0xd0, 0xee, 0x96, 0xcf, 0x20, 0x26, 0x0d, 0x5c, 0x04, 0x27, 0x23, 0x2a, 0xfb, 0x8b, 0x45,
	0x09, 0x9f, 0xd1, 0x0c, 0x27, 0x40, 0x70, 0xc2, 0x8a, 0xe2, 0x7e, 0xb3, 0xec, 0x04, 0xca, 0x87,
	0x70, 0x41, 0x32, 0xd8, 0xb6, 0xed, 0x93, 0x00, 0x97, 0xe3, 0x16, 0x90, 0x53, 0x89, 0x0c, 0x17,
	0x51, 0xb8, 0xe7, 0x52, 0x6c, 0x97, 0xeb, 0xa1, 0xe7, 0x52, 0xd6, 0x2c, 0x57, 0x00, 0x3c, 0x4a,
	0x4c, 0x8d, 0xc3, 0xb1, 0x26, 0xb7, 0x2c, 0x4b, 0x79, 0x12, 0x42, 0x32, 0x37, 0xd8, 0x25, 0x54,
	0xdb, 0xb7, 0xcc, 0xc6, 0x0d, 0xee, 0x6a, 0x98, 0xf0, 0xca, 0x32, 0x99, 0xa3, 0x7a, 0xba, 0xb1,
	0x47, 0x02, 0x5f, 0x73, 0x0f, 0x82, 0xc6, 0x4d, 0x5e, 0x4f, 0x91, 0xf4, 0xf2, 0x20, 0x50, 0xae,
	0x73, 0x4d, 0x7c, 0x3f, 0xd8, 0xa5, 0xc4, 0xdf, 0x6d, 0xdc, 0xe2, 0x18, 0xd1, 0x77, 0xcc, 0x96,
	0x48, 0x62, 0x15, 0x33, 0x0c, 0x4d, 0xb7, 0x77, 0xdc, 0xc6, 0x6d, 0x5e, 0x31, 0xc3, 0x58, 0xb2,
	0x77, 0x5c, 0x26, 0x9c, 0x06, 0xae, 0xb6, 0xad, 0x1b, 0x7b, 0x6e, 0xbb, 0xdd, 0xb8, 0xc3, 0x85,
	0xd3, 0xc0, 0x7d, 0xcc, 0x53, 0x18, 0x64, 0x37, 0xbc, 0x03, 0x16, 0x1e, 0xef, 0x72, 0x07, 0x36,
	0xbc, 0x83, 0x75, 0x33, 0xd2, 0xd4, 0xb0, 0x1a, 0xef, 0xc4, 0x9a, 0xf2, 0x3e, 0xca, 0xfa, 0x1b,
	0xeb, 0x89, 0xf7, 0xa2, 0xfe, 0xc6, 0xfa, 0x28, 0x73, 0x79, 0xd6, 0x79, 0x7d, 0x43, 0xb7, 0x49,
	0xe3, 0x5d, 0xe1, 0xf2, 0x8e, 0xf9, 0x16, 0x13, 0x18, 0x19, 0xf3, 0x71, 0xf2, 0xb7, 0x38, 0x99,
	0x65, 0xe5, 0x64, 0x04, 0xfa, 0xfe, 0xbe, 0xc6, 0xdd, 0xe2, 0x3d, 0x6e, 0x22, 0x96, 0xb2, 0xc5,
	0x9c, 0x02, 0xbb, 0x2a, 0x83, 0xd9, 0xba, 0xb1, 0xd7, 0x78, 0x1f, 0x5d, 0xb2, 0x8c, 0x09, 0x4b,
	0xc6, 0x1e, 0x6b, 0x7a, 0x3d, 0x70, 0x1b, 0x1f, 0xf0, 0xd9, 0x85, 0x1e, 0xa0, 0xd2, 0xac, 0x2a,
	0x94, 0x18, 0xee, 0x21, 0xa1, 0x8d, 0x0f, 0xa3, 0x96, 0x57, 0x79, 0x0a, 0x2e, 0xb2, 0xb2, 0x88,
	0x71, 0x5f, 0x2c, 0xb2, 0x76, 0x7c, 0x8e, 0x03, 0x1d, 0x2b, 0xb0, 0x74, 0x5b, 0x3b, 0xb2, 0x1c,
	0xd3, 0x3d, 0x6a, 0x2c, 0xf2, 0x19, 0x89, 0x48, 0x7d, 0x8b, 0x89, 0xca, 0x3c, 0x4c, 0xe8, 0xdb,
	0x86, 0x66, 0x6b, 0x87, 0x3a, 0x6d, 0x3c, 0x10, 0x3d, 0x70, 0xdb, 0x78, 0xfe, 0x46, 0xa7, 0xd8,
	0xcc, 0xae, 0xab, 0xed, 0x1f, 0x90, 0x03, 0xd2, 0xf8, 0x88, 0x57, 0xd3, 0x75, 0xdd, 0x57, 0xec,
	0x99, 0x4d, 0x79, 0x18, 0x91, 0x76, 0x17, 0x83, 0xae, 0xb6, 0x8f, 0x1d, 0xff, 0x21, 0x7a, 0x6b,
	0xd5, 0x75, 0x5d, 0x95, 0xa5, 0xbe, 0xda, 0x16, 0x61, 0x13, 0x0d, 0x75, 0xe0, 0x35, 0x1e, 0xc5,
	0x06, 0x3e, 0xf0, 0xb0, 0x8d, 0xb7, 0x79, 0xc4, 0xf8, 0x98, 0xc3, 0x69, 0x63, 0x1b, 0xc3, 0xc5,
	0x5d, 0xa8, 0xff, 0x8c, 0x50, 0x57, 0x54, 0x9b, 0xf5, 0xdb, 0xa0, 0xf1, 0x09, 0x66, 0xad, 0xb1,
	0x74, 0x5e, 0xf1, 0x16, 0x8b, 0xf4, 0x37, 0xa1, 0x26, 0x44, 0x68, 0xfb, 0xac, 0xab, 0xde, 0x6f,
	0x7c, 0x1b, 0x25, 0x55, 0xb8, 0xa4, 0x57, 0x98, 0x86, 0x6d, 0x4f, 0x83, 0x40, 0x3b, 0xf0, 0x1b,
	0xdf, 0x11, 0x6d, 0x4f, 0x83, 0xe0, 0x35, 0xba, 0xb1, 0xcf, 0x22, 0x83, 0x47, 0x68, 0xa7, 0xf1,
	0x5d, 0xae, 0x1f, 0x4b, 0xd8, 0x24, 0xb4, 0xa3, 0x5c, 0x05, 0x08, 0xac, 0x0e, 0xf1, 0x03, 0xbd,
	0xe3, 0xf9, 0x8d, 0x4f, 0x91, 0x2a, 0xa5, 0x28, 0xef, 0xc1, 0x74, 0xd0, 0x0d, 0xeb, 0x78, 0xe0,
	0x99, 0x7a, 0x40, 0x58, 0x3f, 0xfa, 0x1e, 0x96, 0x50, 0x0f, 0xba, 0xbc, 0x9a, 0xaf, 0x91, 0xb0,
	0x69, 0x31, 0xa5, 0x58, 0x1d, 0xd8, 0xbc, 0x2a, 0xf0, 0xdd, 0x76, 0xdb, 0x27, 0x41, 0xe3, 0xfb,
	0x5c, 0x29, 0x1a, 0x04, 0x2d, 0xb2, 0xbf, 0x25, 0x52, 0x71, 0x06, 0x12, 0x04, 0x1a, 0x2b, 0xaa,
	0xf1, 0x03, 0xde, 0x20, 0x34, 0x08, 0xb6, 0xac, 0x0e, 0x3a, 0x5d, 0xe0, 0x6b, 0x36, 0xd1, 0xa9,
	0x43, 0xcc, 0xc6, 0x0f, 0xb9, 0xd3, 0x05, 0xfe, 0x73, 0x9e, 0x20, 0x46, 0x45, 0x21, 0x7c, 0x29,
	0x1c, 0x15, 0x5f, 0x72, 0xb1, 0x6c, 0xf6, 0xe2, 0x73, 0xa9, 0x8f, 0xb9, 0x15, 0x02, 0x1f, 0x85,
	0x7e, 0xc0, 0xfa, 0x7a, 0x14, 0xf9, 0x56, 0x12, 0x90, 0x2b, 0x8a, 0x74, 0xac, 0xf7, 0x8b, 0xbf,
	0xcd, 0x1f, 0xc2, 0x14, 0x62, 0x80, 0x01, 0x57, 0xa5, 0x23, 0x6c, 0x11, 0x83, 0xc1, 0x5f, 0x2c,
	0x09, 0x60, 0xf3, 0xd2, 0xdd, 0x17, 0x38, 0xee, 0x0a, 0x00, 0xfa, 0x99, 0x16, 0xed, 0x20, 0x8c,
	0xa8, 0x13, 0x98, 0xc2, 0xe6, 0xb5, 0xd8, 0x54, 0x81, 0x4e, 0xd1, 0x80, 0x02, 0x5a, 0x94, 0x31,
	0xa1, 0x45, 0xf6, 0x99, 0x6a, 0xc4, 0xc1, 0x89, 0x77, 0x08, 0x2e, 0x88, 0xc3, 0x26, 0xdc, 0xac,
	0xe3, 0x38, 0x07, 0x1d, 0x8d, 0x38, 0x01, 0xb5, 0x88, 0x1f, 0xae, 0x6a, 0x38, 0x07, 0x9d, 0x55,
	0x9e, 0xd2, 0xfc, 0xb3, 0x25, 0x98, 0xe4, 0xf5, 0xe3, 0xb5, 0xb8, 0x9e, 0x42, 0x50, 0x7c, 0xea,
	0x24, 0xe3, 0x27, 0x36, 0xc5, 0x75, 0x5d, 0x36, 0x39, 0x0e, 0x34, 0xd2, 0xf1, 0x82, 0x63, 0xb1,
	0x6c, 0x3d, 0xe9, 0xba, 0xfb, 0x1b, 0x6e, 0x80, 0xcb, 0x46, 0xca, 0xc7, 0x00, 0x8c, 0x27, 0x42,
	0x9b, 0xc3, 0x39, 0x08, 0x2a, 0x52, 0x5d, 0x9d, 0x70, 0xc3, 0xbf, 0xcd, 0x9f, 0x41, 0x55, 0x98,
	0xf6, 0xb4, 0x78, 0xf8, 0x93, 0x50, 0x83, 0xc4, 0x84, 0x6c, 0x26, 0xdd, 0x1c, 0x3c, 0x1f, 0x57,
	0x4c, 0x94, 0xfd, 0x14, 0xea, 0x89, 0xb2, 0x59, 0xbb, 0x3e, 0xc8, 0x40, 0xd7, 0xb9, 0x94, 0xa4,
	0xdc, 0x15, 0x3f, 0x05, 0x49, 0xc9, 0x69, 0xd8, 0x99, 0x80, 0x65, 0xf3, 0x25, 0xcc, 0x64, 0x65,
	0xb2, 0x1a, 0x3e, 0x4a, 0x7b, 0xde, 0xe5, 0x94, 0xc0, 0x82, 0x09, 0xd8, 0x3a, 0xcc, 0x26, 0xc8,
	0x67, 0x98, 0x7e, 0xbd, 0x14, 0xfd, 0x41, 0x9a, 0x7c, 0x9d, 0x4d, 0xd9, 0x75, 0x61, 0xc0, 0xe4,
	0xc4, 0xeb, 0x41, 0x5a, 0xd3, 0x8b, 0x29, 0x69, 0x79, 0xd3, 0xae, 0xff, 0x39, 0x09, 0x10, 0xb5,
	0x38, 0xf6, 0x32, 0x5c, 0xa6, 0xd0, 0xa8, 0x71, 0x68, 0x86, 0xbd, 0x0c, 0x53, 0x54, 0xe3, 0x10,
	0x03, 0x88, 0xb7, 0x17, 0x08, 0xea, 0x10, 0x52, 0xcb, 0x2c, 0x01, 0x89, 0xd7, 0x60, 0x92, 0xe7,
	0x65, 0x23, 0xb9, 0x89, 0x3d, 0x6d, 0x44, 0xe5, 0xe2, 0x96, 0x58, 0x0a, 0x8b, 0xc6, 0xde, 0x01,
	0x25, 0x8c, 0x2e, 0x44, 0x8c, 0x20, 0x4f, 0x85, 0xa5, 0x2e, 0x19, 0x7b, 0x5c, 0x4c, 0x13, 0xaa,
	0xe6, 0x81, 0x27, 0x31, 0x8d, 0x22, 0xd3, 0xa4, 0x79, 0xe0, 0xc9, 0x3c, 0xbe, 0xed, 0x1e, 0x69,
	0x9e, 0x1e, 0xec, 0x22, 0xd8, 0x19, 0xe3, 0x3c, 0x2c, 0x71, 0x53, 0x0f, 0x76, 0x19, 0xda, 0x61,
	0x3c, 0x6c, 0x44, 0x6f, 0x1f, 0xd8, 0x36, 0xf2, 0x8c, 0x0b, 0x1e, 0x42, 0xf7, 0x9f, 0x1c, 0xd8,
	0x36, 0xe3, 0x99, 0x83, 0x71, 0x36, 0x46, 0x31, 0x6a, 0x19, 0xa9, 0x63, 0xae, 0xeb, 0x32, 0xc2,
	0x55, 0x98, 0x14, 0xab, 0x3c, 0x48, 0x9c, 0xe0, 0x86, 0xe0, 0x0b, 0x3d, 0x9c, 0x2e, 0xec, 0x84,
	0x83, 0xcf, 0x2f, 0x6f, 0x48, 0x86, 0xc2, 0x81, 0xe7, 0xb2, 0x30, 0x14, 0x92, 0x7f, 0x65, 0x23,
	0xb6, 0x14, 0x52, 0x6f, 0xc9, 0x86, 0x40, 0x96, 0x5f, 0xdd, 0x48, 0x5a, 0x02, 0xd9, 0x1a, 0xf1,
	0x84, 0xe2, 0x2f, 0x6c, 0x24, 0x66, 0x14, 0x8d, 0x78, 0x46, 0xf1, 0x6b, 0x1b, 0x89, 0x29, 0x05,
	0x83, 0x02, 0x2c, 0xd6, 0xe1, 0xb0, 0x65, 0x35, 0xfe, 0xe2, 0x86, 0xc0, 0x25, 0xc4, 0x31, 0x97,
	0x8c, 0xbd, 0xcd, 0x24, 0x83, 0x61, 0x35, 0xfe, 0x52, 0x92, 0x61, 0xd9, 0x52, 0x6e, 0x40, 0xb5,
	0xad, 0xfb, 0x7c, 0x7c, 0xa1, 0x4c, 0xc6, 0x5f, 0xe6, 0x2c, 0x93, 0x2c, 0x95, 0x0d, 0x08, 0x74,
	0x33, 0xcd, 0x64, 0x58, 0x8d, 0xbf, 0x92, 0x66, 0x5a, 0x46, 0x90, 0x68, 0x12, 0x3b, 0xac, 0xca,
	0xaf, 0x6f, 0x84, 0x53, 0x0e, 0x9b, 0xd7, 0x44, 0x22, 0x1b, 0x56, 0xe3, 0x37, 0x12, 0xe4, 0x65,
	0x4b, 0x99, 0x97, 0x26, 0x05, 0x5f, 0x6e, 0x24, 0x67, 0x05, 0xf3, 0xd2, 0xac, 0xe0, 0x37, 0x37,
	0x92, 0xd3, 0x82, 0x1b, 0x50, 0x0d, 0x51, 0x7d, 0xd0, 0x65, 0x99, 0xff, 0xaa, 0xa8, 0x9a, 0x48,
	0xdd, 0xea, 0x6e, 0xa6, 0x99, 0x0c, 0xab, 0xf1, 0x5b, 0x69, 0xa6, 0x65, 0x8b, 0xcd, 0x89, 0xda,
	0x7c, 0xc9, 0x33, 0xa0, 0xba, 0xe3, 0x33, 0x59, 0xbf, 0xcd, 0xd9, 0x50, 0x79, 0x95, 0x27, 0x6f,
	0x66, 0x19, 0x0d, 0xab, 0xf1, 0xd7, 0xb2, 0x8c, 0xbc, 0x6e, 0x86, 0x4d, 0x74, 0x87, 0xcf, 0x07,
	0x3c, 0xab, 0xf1, 0xd7, 0x45, 0xb1, 0x98, 0xca, 0x66, 0x04, 0x9b, 0x69, 0x26, 0xc3, 0x6a, 0xfc,
	0x8d, 0x34, 0x13, 0x4e, 0x1b, 0x12, 0x20, 0xfa, 0x6f, 0x6e, 0x64, 0x50, 0xf4, 0x95, 0x04, 0xc2,
	0xfc, 0x5b, 0x1b, 0x29, 0x88, 0x79, 0x3d, 0x35, 0x33, 0xf9, 0xdb, 0x1b, 0x99, 0xa9, 0xc9, 0x0d,
	0xa8, 0xea, 0x09, 0x9e, 0xbf, 0x23, 0x2a, 0xa2, 0x4b, 0x4c, 0x0c, 0x72, 0x74, 0x35, 0xca, 0x2c,
	0xe9, 0x59, 0x8d, 0xbf, 0x2b, 0x8a, 0x09, 0xba, 0xaa, 0xe5, 0xec, 0x6c, 0x5a, 0xca, 0xfb, 0x30,
	0xed, 0xe9, 0x14, 0x51, 0xa6, 0xb7, 0x17, 0xf0, 0xc6, 0x76, 0x82, 0xc6, 0xdf, 0xe3, 0x7c, 0x75,
	0x41, 0xdb, 0xdc, 0x0b, 0x58, 0xa3, 0x63, 0xaf, 0xad, 0xe8, 0x81, 0xab, 0x99, 0x44, 0x37, 0x71,
	0x9f, 0xec, 0xef, 0x87, 0x45, 0x06, 0xee, 0x8a, 0x48, 0x63, 0x3c, 0x54, 0xe6, 0xf9, 0x07, 0x82,
	0x87, 0x4a, 0x3c, 0xf3, 0x50, 0x36, 0x0c, 0x31, 0x3d, 0xf9, 0x1d, 0xe1, 0x21, 0x86, 0xc1, 0x67,
	0x27, 0x37, 0xa1, 0x6a, 0x99, 0x36, 0x89, 0x05, 0xfc, 0x2e, 0x67, 0xa8, 0xb0, 0xd4, 0x48, 0xc2,
	0x1d, 0x98, 0x12, 0xe0, 0x2d, 0x8a, 0x20, 0xff, 0x50, 0x34, 0x2a, 0x4f, 0x0f, 0x83, 0xc8, 0x75,
	0xa8, 0xb0, 0xc1, 0x9c, 0x03, 0x5d, 0xcf, 0x6a, 0xfc, 0x23, 0x61, 0x49, 0xd7, 0xdd, 0x47, 0x98,
	0xbb, 0x69, 0x25, 0x59, 0x0c, 0xab, 0xf1, 0x8f, 0x53, 0x2c, 0xdc, 0xdd, 0xb9, 0x99, 0x9d, 0xa0,
	0xf1, 0x4f, 0x44, 0x85, 0x59, 0x02, 0x2b, 0xe1, 0x1d, 0xa8, 0x67, 0x70, 0xe4, 0x3f, 0xe5, 0x3c,
	0xb5, 0xa3, 0x24, 0x8c, 0xcc, 0xb0, 0x1a, 0x56, 0xe3, 0xf7, 0x72, 0x58, 0x97, 0xad, 0xe6, 0xbf,
	0x2e, 0x89, 0x01, 0xfd, 0x4c, 0xeb, 0x6b, 0x77, 0x12, 0xeb, 0x6b, 0xb9, 0xb0, 0x8e, 0xaf, 0xae,
	0xbd, 0x97, 0x5a, 0x5d, 0x2b, 0x80, 0x1c, 0xe1, 0xda, 0xda, 0xbd, 0xe4, 0xda, 0xda, 0x85, 0x1c,
	0xee, 0x68, 0x65, 0xed, 0x05, 0x4c, 0xa7, 0x15, 0xe1, 0x43, 0x7f, 0x1a, 0x9c, 0xcc, 0xe7, 0x8d,
	0x88, 0xb9, 0xab, 0x6a, 0xb6, 0x9f, 0x5e, 0x55, 0xb3, 0xfd, 0xf4, 0xaa, 0x1a, 0x4b, 0x11, 0xab,
	0x6a, 0x48, 0xcc, 0xac, 0xaa, 0xb1, 0xd4, 0xa2, 0x55, 0xb5, 0x3f, 0x31, 0x01, 0x13, 0x58, 0xca,
	0xa0, 0xab, 0x6a, 0x89, 0x1a, 0x25, 0x57, 0xd5, 0x16, 0xa0, 0xe2, 0x58, 0x86, 0x66, 0x12, 0x43,
	0xdb, 0x25, 0xba, 0x29, 0xf0, 0x2f, 0x38, 0x96, 0xb1, 0x42, 0x8c, 0x35, 0xa2, 0x9b, 0x32, 0x47,
	0xa0, 0x5b, 0xb6, 0x80, 0xc1, 0x82, 0x63, 0x4b, 0xb7, 0x6c, 0x36, 0xa4, 0x18, 0x6e, 0xa7, 0xa3,
	0x3b, 0xa6, 0x80, 0xc1, 0xe1, 0x63, 0x72, 0x45, 0x6c, 0x34, 0xb5, 0x22, 0x26, 0xad, 0x10, 0x8c,
	0x25, 0x56, 0x08, 0xa4, 0x09, 0xf5, 0x78, 0x62, 0x42, 0x3d, 0x03, 0x63, 0xdb, 0x3c, 0xaa, 0xf3,
	0xd5, 0xb5, 0xd1, 0x6d, 0x0c, 0xe9, 0x22, 0xd9, 0xb0, 0xc4, 0x46, 0x1e, 0x4b, 0x5e, 0xb6, 0x70,
	0x06, 0x47, 0x8f, 0xbd, 0xc0, 0xe5, 0x7b, 0x46, 0x66, 0x57, 0xac, 0xad, 0x55, 0x78, 0xea, 0x33,
	0x72, 0xbc, 0x6e, 0x76, 0x93, 0x2b, 0x7a, 0x93, 0x61, 0xa4, 0x8b, 0x57, 0xf4, 0xe2, 0xb5, 0xa7,
	0x4a, 0x1c, 0x06, 0x91, 0xc8, 0x00, 0xbd, 0xd3, 0x31, 0x3d, 0xaa, 0xe9, 0xb6, 0xed, 0x1a, 0xb8,
	0xda, 0xc6, 0x00, 0x3d, 0xa6, 0xe1, 0x4b, 0x43, 0xb8, 0xa4, 0xc0, 0x59, 0xda, 0x94, 0x10, 0x5c,
	0x75, 0x1b, 0x53, 0x81, 0x27, 0x3d, 0xa1, 0x04, 0x65, 0x10, 0xc7, 0xd0, 0x04, 0xa4, 0xf2, 0x71,
	0xe9, 0x6d, 0x4c, 0x9d, 0x24, 0x8e, 0x21, 0xe0, 0x16, 0xeb, 0x25, 0x53, 0xb8, 0x0d, 0xe9, 0x76,
	0x3c, 0x9b, 0x04, 0x96, 0xeb, 0xf8, 0xb8, 0x02, 0x37, 0xa6, 0xd6, 0x88, 0x63, 0x2c, 0xc7, 0xa9,
	0xa1, 0xac, 0xb6, 0x6e, 0xd9, 0x07, 0x94, 0xf8, 0x62, 0x0b, 0x90, 0xc9, 0x7a, 0x22, 0x92, 0x18,
	0x0b, 0x6b, 0xc7, 0xa8, 0x38, 0x85, 0xb3, 0x98, 0x24, 0x51, 0x1c, 0x63, 0x91, 0x8b, 0x9b, 0xe6,
	0xc5, 0x99, 0x24, 0x5d, 0x1c, 0x63, 0x8c, 0x8a, 0xbb, 0x10, 0xc9, 0x8a, 0x8a, 0x53, 0x60, 0x04,
	0x37, 0x44, 0x67, 0xc4, 0xda, 0x81, 0x6e, 0x07, 0xcc, 0x24, 0xa4, 0xeb, 0xd9, 0x96, 0x61, 0x05,
	0x9a, 0x75, 0x88, 0x0b, 0x73, 0x23, 0x2a, 0x84, 0x49, 0xeb, 0x87, 0xca, 0x27, 0x70, 0xd1, 0xa3,
	0x2c, 0xc2, 0x32, 0xbf, 0xf1, 0x03, 0x7d, 0x87, 0x7c, 0xa8, 0x7d, 0xac, 0x05, 0xbb, 0x94, 0xb9,
	0x27, 0x5f, 0xa8, 0x9b, 0xf1, 0x28, 0x59, 0x61, 0xf4, 0x16, 0x92, 0x3f, 0xde, 0x42, 0xa2, 0xf2,
	0x1d, 0x98, 0xf7, 0x5c, 0x3f, 0x28, 0xc8, 0xca, 0xd7, 0xf0, 0x66, 0x19, 0x47, 0x4e, 0xde, 0xdb,
	0x30, 0x65, 0xf9, 0xcc, 0xc9, 0x99, 0x6f, 0x68, 0x6d, 0xdb, 0x3d, 0x12, 0xeb, 0x79, 0x55, 0xcb,
	0x5f, 0xe1, 0xa9, 0x4f, 0x6c, 0xf7, 0x28, 0x5e, 0x9e, 0x6a, 0x5b, 0xa6, 0xd8, 0x4b, 0xe4, 0xcb,
	0x53, 0x4f, 0xac, 0x9c, 0xb5, 0xbe, 0x4b, 0x03, 0xae, 0xf5, 0xbd, 0x07, 0xd3, 0xc2, 0x55, 0x77,
	0x3b, 0xba, 0x11, 0xf9, 0x2b, 0xdf, 0x74, 0xac, 0x73, 0xd2, 0x5a, 0x47, 0x37, 0x84, 0xcf, 0x5e,
	0x87, 0x0a, 0x63, 0x8b, 0x9a, 0xf1, 0x0a, 0x37, 0x7d, 0x47, 0x4f, 0x34, 0x23, 0x63, 0x91, 0x9b,
	0x91, 0xef, 0x46, 0xd6, 0x3a, 0x7a, 0xba, 0x19, 0x19, 0x63, 0xd4, 0x8c, 0xd7, 0x22, 0x59, 0x51,
	0x33, 0xc6, 0xeb, 0x5e, 0x0b, 0xd2, 0xba, 0x17, 0xce, 0xd5, 0x59, 0x64, 0x19, 0x74, 0xae, 0x1e,
	0x46, 0xac, 0x78, 0x06, 0xf1, 0x21, 0x4c, 0xf2, 0xd4, 0x78, 0x86, 0x2c, 0x47, 0xc3, 0x70, 0x86,
	0x1c, 0xc7, 0x42, 0x9c, 0xc4, 0xf2, 0x32, 0xcf, 0x32, 0x89, 0xc5, 0x42, 0x0a, 0x27, 0xb1, 0x71,
	0x8d, 0x44, 0xd9, 0xd2, 0x24, 0x56, 0x2e, 0xbb, 0xff, 0x24, 0x56, 0xe6, 0x4e, 0x4d, 0x62, 0x19,
	0xe9, 0xc4, 0x93, 0xd8, 0xe2, 0x38, 0x8e, 0x93, 0xd8, 0x8c, 0xcc, 0xbe, 0x93, 0xd8, 0x4c, 0x8e,
	0xe4, 0x24, 0x56, 0x26, 0x9f, 0x71, 0x12, 0xcb, 0x44, 0x9d, 0x6c, 0x12, 0xdb, 0x43, 0xd9, 0x75,
	0x61, 0xc0, 0x13, 0x4c, 0x62, 0x93, 0xec, 0xb1, 0x9a, 0x15, 0x80, 0xa8, 0xc1, 0x7d, 0x8e, 0x6b,
	0x22, 0xd6, 0xaf, 0x1e, 0xd7, 0x44, 0x5d, 0xa0, 0x3f, 0xae, 0x91, 0xbc, 0x70, 0x00, 0x5c, 0x13,
	0xa9, 0x20, 0xe3, 0x9a, 0x94, 0x22, 0xfd, 0x71, 0x4d, 0x2a, 0x43, 0x12, 0xd7, 0xbc, 0x65, 0xb0,
	0x3c, 0x81, 0x6b, 0x8e, 0x10, 0xba, 0xcb, 0xb8, 0x06, 0x53, 0x38, 0xae, 0xe1, 0xc4, 0x34, 0xae,
	0xc1, 0xd4, 0x22, 0x5c, 0xf3, 0x4b, 0x25, 0x98, 0xc0, 0x52, 0x06, 0xc4, 0x35, 0xc9, 0x1a, 0x25,
	0x71, 0xcd, 0x4d, 0x18, 0xc1, 0x08, 0x3c, 0x94, 0x68, 0x2e, 0xcc, 0x81, 0xe1, 0x17, 0xa9, 0xe2,
	0xd5, 0xa5, 0xe1, 0xd4, 0xab, 0x4b, 0x23, 0xe1, 0xab, 0x4b, 0x2c, 0xc4, 0x61, 0x96, 0x01, 0x43,
	0x5c, 0x54, 0xf9, 0x44, 0x88, 0xe3, 0xa9, 0x51, 0x88, 0x4b, 0x18, 0x46, 0x84, 0x38, 0xc9, 0x2c,
	0x2c, 0xc4, 0x89, 0x32, 0xcf, 0x10, 0xe2, 0x78, 0x21, 0x45, 0x21, 0x4e, 0xaa, 0x91, 0x28, 0x3b,
	0x0e, 0x71, 0x89, 0xb2, 0xfb, 0x86, 0xb8, 0x04, 0x77, 0x32, 0xc4, 0x21, 0xe9, 0xa4, 0x21, 0xae,
	0x47, 0x93, 0xb2, 0x10, 0x97, 0x95, 0xd9, 0x2f, 0xc4, 0x65, 0x73, 0x24, 0x42, 0x5c, 0x82, 0x7c,
	0x86, 0x10, 0xf7, 0x2b, 0x25, 0x21, 0xeb, 0x29, 0x09, 0xc4, 0x02, 0xf0, 0x57, 0xa2, 0xf4, 0x80,
	0x7e, 0x7c, 0x01, 0x46, 0xf9, 0x3b, 0x51, 0xdc, 0x95, 0xf9, 0x43, 0xf3, 0x2d, 0x5c, 0xcc, 0xaf,
	0x13, 0x53, 0xf1, 0x3b, 0x69, 0xa3, 0x2d, 0xa4, 0x2a, 0x94, 0xc9, 0x95, 0x08, 0x9a, 0x91, 0x0b,
	0xf9, 0xcd, 0x5f, 0x1e, 0x86, 0x0b, 0xf8, 0xf8, 0x58, 0xa7, 0x86, 0xfb, 0x74, 0xf9, 0xc5, 0x0a,
	0xf1, 0x0d, 0x56, 0xc4, 0x15, 0x00, 0xcb, 0xb6, 0xfc, 0x20, 0x5e, 0x77, 0x1f, 0x53, 0x27, 0x30,
	0x05, 0xd7, 0xdd, 0xaf, 0x00, 0xb8, 0x31, 0x79, 0x88, 0x93, 0xdd, 0x88, 0x2c, 0xcd, 0x2a, 0x86,
	0x93, 0xb3, 0x8a, 0x9b, 0x50, 0x63, 0x16, 0x35, 0x89, 0x6f, 0x88, 0x57, 0xc1, 0x78, 0x8f, 0xad,
	0xec, 0x91, 0x63, 0x56, 0x36, 0x7f, 0x17, 0x8c, 0xbf, 0x90, 0x87, 0xb2, 0x47, 0xf9, 0x1e, 0x90,
	0x75, 0x88, 0x82, 0xaf, 0xc1, 0x24, 0x6f, 0x58, 0x4e, 0x1c, 0xe3, 0xa0, 0x9c, 0x27, 0x21, 0xc3,
	0x0d, 0xa8, 0x9a, 0xae, 0x4b, 0xb7, 0x89, 0x6d, 0x73, 0x16, 0xbe, 0xd1, 0x5f, 0x09, 0x13, 0x33,
	0x4c, 0xa6, 0x1e, 0xe8, 0x38, 0x25, 0x91, 0x98, 0x56, 0xf4, 0x40, 0x8f, 0x00, 0xf0, 0x44, 0x31,
	0x00, 0x06, 0x5e, 0xbc, 0x04, 0x80, 0xaf, 0xc1, 0xa4, 0xd8, 0x7a, 0xc6, 0x57, 0x17, 0xf9, 0x9c,
	0x44, 0xec, 0x46, 0xe3, 0xbb, 0x8b, 0xd7, 0xa1, 0xc2, 0x5f, 0x4f, 0x14, 0xfe, 0x59, 0x91, 0xde,
	0x4e, 0x14, 0xfe, 0xf8, 0x3f, 0x86, 0x60, 0x2e, 0xd3, 0x8a, 0x5f, 0xf9, 0x78, 0x16, 0xc7, 0x3b,
	0x3e, 0x9e, 0xe5, 0xba, 0xa1, 0x34, 0xca, 0x8d, 0xf4, 0x0a, 0x44, 0x99, 0x51, 0x6e, 0x34, 0x3d,
	0xca, 0xc5, 0x3e, 0x27, 0x46, 0x39, 0x65, 0x16, 0x46, 0x0f, 0x75, 0xfb, 0x80, 0xbf, 0x16, 0xca,
	0x06, 0x18, 0xfe, 0xa8, 0x3c, 0x81, 0x1a, 0xb7, 0xd0, 0x8e, 0xd1, 0x41, 0x3f, 0xc1, 0x26, 0x4c,
	0xbc, 0x43, 0x95, 0xe7, 0xb1, 0x6b, 0xe7, 0x54, 0x6e, 0xd9, 0xa7, 0x46, 0x87, 0x25, 0x29, 0x0a,
	0x0c, 0x53, 0xfd, 0x08, 0x9b, 0xb6, 0xb2, 0x76, 0x4e, 0x65, 0x0f, 0x6c, 0xd8, 0xe2, 0x15, 0xb1,
	0xdd, 0x60, 0xdd, 0x69, 0xbb, 0xcd, 0x1f, 0xc3, 0x7c, 0x81, 0xa9, 0x59, 0x27, 0xf8, 0x5e, 0x26,
	0x7c, 0x5e, 0xef, 0xd1, 0xd1, 0x32, 0x81, 0xd4, 0x13, 0x7d, 0xeb, 0x29, 0x09, 0x5e, 0x90, 0x40,
	0xff, 0xfa, 0x1b, 0xb1, 0xf9, 0x3a, 0xf6, 0x1c, 0xb9, 0x44, 0x1e, 0x33, 0xd2, 0xba, 0x5c, 0xcd,
	0xea, 0x22, 0x67, 0xca, 0x51, 0xa4, 0xf5, 0x8d, 0x2b, 0xd2, 0x3a, 0x8d, 0x22, 0xad, 0x42, 0x45,
	0xd6, 0x61, 0xee, 0x29, 0x09, 0x5e, 0x7a, 0xfa, 0xfe, 0x01, 0xd9, 0xd2, 0x77, 0x58, 0x30, 0x08,
	0x43, 0xfd, 0xfb, 0x30, 0x81, 0xe3, 0x2e, 0x46, 0x6c, 0xae, 0xca, 0x79, 0xa1, 0x0a, 0x7a, 0x1a,
	0x13, 0xec, 0xab, 0x65, 0x2a, 0x82, 0x77, 0xf3, 0x73, 0x98, 0x2f, 0x10, 0xc5, 0x2a, 0xf9, 0xdd,
	0x74, 0x84, 0x96, 0x1c, 0xa7, 0x20, 0x5b, 0x1c, 0xa2, 0x7d, 0x68, 0x64, 0x79, 0x84, 0xc9, 0x6f,
	0xc3, 0x94, 0x8b, 0x04, 0x2d, 0xd0, 0x77, 0xe4, 0x4d, 0xd1, 0xaa, 0x2b, 0xf3, 0xa7, 0x9a, 0x66,
	0xa8, 0x6f, 0xd3, 0x34, 0x7f, 0x82, 0x87, 0xd1, 0x72, 0x0b, 0x65, 0x0a, 0x7d, 0x3f, 0x63, 0xf5,
	0x66, 0x2f, 0x8d, 0x32, 0x96, 0xef, 0xc0, 0x65, 0xde, 0x61, 0x11, 0xc7, 0xb3, 0x0e, 0x4a, 0x59,
	0xc7, 0x39, 0x3e, 0xa5, 0xf9, 0x71, 0x99, 0xdb, 0x76, 0x03, 0x31, 0x86, 0x0c, 0x89, 0xdd, 0x0c,
	0xec, 0xd6, 0x6c, 0xf8, 0x34, 0xe0, 0x5a, 0xaf, 0xe2, 0x98, 0x46, 0x3f, 0x4c, 0x37, 0xd1, 0xed,
	0x58, 0xa1, 0x5e, 0x79, 0xe3, 0x76, 0xfa, 0x57, 0xc3, 0x70, 0x01, 0x39, 0x5b, 0xc7, 0x9d, 0x4e,
	0xc8, 0xfa, 0x07, 0x83, 0xe7, 0xff, 0xc9, 0xc1, 0x53, 0xb9, 0x0f, 0x33, 0x3e, 0x31, 0x5c, 0xc7,
	0xd4, 0x52, 0x96, 0xe2, 0xef, 0xd3, 0x29, 0x9c, 0xf8, 0x4c, 0xb2, 0x57, 0xf3, 0x37, 0x86, 0x44,
	0x33, 0x2e, 0xb5, 0x8e, 0xbf, 0xc2, 0x66, 0xcc, 0x36, 0xd6, 0x70, 0x4e, 0x63, 0xa5, 0xda, 0x64,
	0x24, 0xd3, 0x26, 0x77, 0xa1, 0x2e, 0x75, 0x78, 0x3e, 0x62, 0xf2, 0xd5, 0xd8, 0x5a, 0xd4, 0xe3,
	0xdf, 0xe0, 0xc0, 0x79, 0x27, 0xc1, 0x79, 0x44, 0x35, 0xe2, 0x88, 0xc5, 0xd9, 0x38, 0x36, 0xbc,
	0xa5, 0xab, 0x8e, 0x32, 0x03, 0x63, 0x6d, 0x9b, 0x45, 0x0f, 0xb1, 0x44, 0x8b, 0x2f, 0xd4, 0x2f,
	0x45, 0xc9, 0xdb, 0xe1, 0x0a, 0x2d, 0x7b, 0x7a, 0xdc, 0xfc, 0x17, 0x43, 0x70, 0xa5, 0xa0, 0x3f,
	0x9c, 0x76, 0x18, 0x48, 0x74, 0xf6, 0xa1, 0x93, 0x76, 0xf6, 0xe1, 0x54, 0x67, 0x67, 0x88, 0xc1,
	0x3f, 0xee, 0x74, 0x34, 0x4a, 0xf6, 0xd1, 0xdc, 0x54, 0x80, 0x95, 0xab, 0xa9, 0x0e, 0x9d, 0xea,
	0xa6, 0x0c, 0x31, 0xf8, 0x52, 0x12, 0x93, 0xa3, 0xfb, 0xc7, 0xb2, 0x9c, 0xd1, 0x5c, 0x39, 0x29,
	0x3f, 0x61, 0x72, 0x58, 0xbe, 0x30, 0xe9, 0x71, 0x15, 0x26, 0x25, 0x72, 0x73, 0x07, 0x16, 0x7a,
	0xda, 0x8f, 0xb9, 0xda, 0x72, 0x26, 0xbc, 0xde, 0xe9, 0x1b, 0x8d, 0xf2, 0x46, 0xb7, 0x88, 0xd5,
	0x72, 0x76, 0xf8, 0x18, 0x78, 0xea, 0xd1, 0xad, 0x40, 0x54, 0xbf, 0xd1, 0xad, 0x20, 0x5b, 0x1c,
	0x35, 0x7f, 0xbd, 0x04, 0x8d, 0x2c, 0xd3, 0x37, 0xe5, 0x4a, 0xfd, 0x56, 0x0d, 0x7e, 0x02, 0x97,
	0x8a, 0x2a, 0xd7, 0x77, 0x18, 0x2c, 0xca, 0x28, 0x35, 0xd1, 0x4b, 0xa9, 0x2f, 0x09, 0x2e, 0x7e,
	0x0e, 0xf7, 0xb4, 0x0d, 0x45, 0x24, 0xe7, 0xca, 0x13, 0xc8, 0x2a, 0xbd, 0x94, 0x6e, 0xae, 0x3b,
	0xc5, 0x75, 0x4e, 0x64, 0x96, 0x1a, 0x6d, 0x18, 0xae, 0x16, 0xb1, 0x7e, 0x53, 0x4d, 0x77, 0x49,
	0xf0, 0xe3, 0x86, 0x0e, 0x7f, 0xcd, 0x04, 0x89, 0xb8, 0xa1, 0x73, 0x0f, 0xce, 0x7b, 0xd4, 0x35,
	0x0f, 0x0c, 0x42, 0x35, 0xcb, 0xec, 0xc6, 0xd1, 0x74, 0x44, 0x9d, 0x0a, 0x09, 0xeb, 0x66, 0x37,
	0x0c, 0xa9, 0xfe, 0xae, 0x6e, 0xba, 0x47, 0x9a, 0xe7, 0x84, 0xac, 0xfc, 0x6d, 0x93, 0x1a, 0x4f,
	0xdf, 0x74, 0x04, 0x67, 0x0e, 0xda, 0x1a, 0xcb, 0x43, 0x5b, 0x61, 0xd5, 0xa4, 0xc3, 0x6c, 0x58,
	0xb5, 0xf0, 0xb8, 0x1a, 0x0e, 0x02, 0xd2, 0x61, 0xb6, 0x32, 0x4b, 0x08, 0x89, 0x58, 0x09, 0x24,
	0x8a, 0xb3, 0x6c, 0x2c, 0x01, 0x89, 0xc9, 0xe2, 0x91, 0x05, 0x52, 0x01, 0x9d, 0xf1, 0x35, 0x2d,
	0xb8, 0xde, 0xbb, 0x71, 0x98, 0x17, 0xac, 0x64, 0x5c, 0xf7, 0x6e, 0x7f, 0x37, 0xc8, 0x38, 0x70,
	0x03, 0x66, 0x97, 0xc3, 0x2d, 0xb8, 0x65, 0x4a, 0xf4, 0x68, 0x69, 0xa6, 0xf9, 0x16, 0x2e, 0xe6,
	0x53, 0xfa, 0xad, 0x58, 0xe4, 0xe7, 0x8a, 0x7d, 0xaf, 0x0d, 0x73, 0x19, 0x96, 0xd3, 0xfa, 0xdc,
	0x3c, 0x94, 0xf7, 0xc8, 0xb1, 0x0c, 0x1a, 0xa3, 0x67, 0x36, 0x17, 0x2c, 0x28, 0xa7, 0xef, 0x5c,
	0xb0, 0x20, 0x9f, 0x64, 0xb7, 0x6d, 0xb8, 0x9c, 0x62, 0x7a, 0x6b, 0x05, 0xbb, 0xeb, 0x66, 0xd8,
	0xef, 0xe5, 0x8a, 0x95, 0x92, 0x15, 0x63, 0x6e, 0xa0, 0xdb, 0xb6, 0x7b, 0xa4, 0xe1, 0x0b, 0x52,
	0xb8, 0x5f, 0xc9, 0xeb, 0x5e, 0xc5, 0xe4, 0x95, 0x03, 0x0f, 0x77, 0x2c, 0x19, 0xe8, 0xed, 0x55,
	0x46, 0x3f, 0xd0, 0xdb, 0x2b, 0x6f, 0xdc, 0x1a, 0x36, 0x5c, 0x29, 0x60, 0xfc, 0x3a, 0xda, 0x64,
	0x07, 0x16, 0x7a, 0x96, 0xd6, 0x77, 0xec, 0xec, 0x99, 0x5b, 0x6a, 0x9f, 0x3f, 0x55, 0x82, 0x6a,
	0xc4, 0x8b, 0x6b, 0xd8, 0xbd, 0x5a, 0xe4, 0x03, 0xa4, 0xc9, 0x91, 0xeb, 0x82, 0xd0, 0x30, 0x92,
	0x81, 0x2b, 0x7c, 0xe3, 0x7b, 0xfc, 0x8f, 0x72, 0x91, 0x67, 0xc0, 0x2e, 0x2c, 0x40, 0xfd, 0x1e,
	0x39, 0xc6, 0x4e, 0x5e, 0x87, 0xe1, 0x3d, 0x72, 0x8c, 0xb1, 0xaa, 0xa2, 0xb2, 0xbf, 0xcd, 0x45,
	0xb8, 0x10, 0x89, 0x51, 0x89, 0x3e, 0x88, 0x8f, 0x34, 0x5b, 0x52, 0x27, 0x91, 0xf2, 0xf4, 0x3b,
	0x8d, 0x96, 0x97, 0x47, 0x9e, 0x88, 0xce, 0xa4, 0x18, 0x4e, 0x7f, 0x1c, 0x0b, 0x95, 0xcc, 0x1c,
	0x03, 0x4c, 0x98, 0x9c, 0x6b, 0xff, 0x16, 0x1a, 0xb9, 0x85, 0x72, 0xe0, 0x91, 0x6e, 0xea, 0x6b,
	0x85, 0xba, 0x64, 0x9a, 0x78, 0x59, 0x0a, 0x5d, 0xfc, 0x6d, 0x98, 0xd0, 0xb0, 0xa2, 0x76, 0xa5,
	0x81, 0x6a, 0x77, 0x31, 0x5f, 0xc8, 0xc0, 0x51, 0x2e, 0x91, 0x2b, 0x3f, 0xca, 0x85, 0x2c, 0x5f,
	0x77, 0x94, 0x4b, 0x96, 0x33, 0x78, 0x94, 0x4b, 0xe6, 0x93, 0x4c, 0xfc, 0x91, 0x64, 0xe2, 0xe4,
	0xf6, 0x41, 0x2f, 0xdf, 0x95, 0x6d, 0x9a, 0xd9, 0x20, 0x18, 0xc8, 0xa6, 0x05, 0x9b, 0x04, 0xb2,
	0x4d, 0x93, 0x1b, 0x05, 0x5f, 0x9f, 0x4d, 0xb3, 0x1b, 0x12, 0x83, 0xd9, 0x34, 0x99, 0x4f, 0xb2,
	0xe9, 0xe5, 0x50, 0xf8, 0x92, 0x7f, 0xdc, 0xc9, 0x8c, 0xba, 0x5a, 0x18, 0x8e, 0xf3, 0xa8, 0x1c,
	0xb1, 0xa6, 0xec, 0x77, 0x33, 0x5d, 0x78, 0x5e, 0xce, 0xd8, 0x86, 0x3f, 0x85, 0x4b, 0xb9, 0x6c,
	0x5f, 0x87, 0x1d, 0x0d, 0xb8, 0xda, 0xa3, 0x2c, 0x0e, 0x65, 0xd3, 0xb6, 0xbc, 0xd5, 0x47, 0x9d,
	0x8c, 0x3d, 0x3f, 0x49, 0xd9, 0x73, 0x70, 0x3f, 0x4d, 0xdb, 0x3a, 0xe3, 0xab, 0x03, 0xdb, 0xba,
	0xc0, 0x5f, 0xd3, 0xb6, 0xfe, 0x3a, 0x7d, 0x36, 0x6d, 0xeb, 0xac, 0xdf, 0x0e, 0x6e, 0xeb, 0x42,
	0xdf, 0x5d, 0x82, 0xf3, 0x09, 0xc6, 0xbe, 0x03, 0x6b, 0x3d, 0x1e, 0x27, 0xc4, 0x60, 0xf8, 0xa3,
	0x30, 0x38, 0x08, 0x11, 0x6f, 0xa9, 0x15, 0xb7, 0xd6, 0x7b, 0x72, 0xe0, 0xbe, 0x54, 0x50, 0xbb,
	0x38, 0x78, 0xff, 0x24, 0x04, 0x61, 0x39, 0xb2, 0x78, 0x4f, 0x4d, 0xb5, 0xdf, 0x8d, 0x02, 0x91,
	0x72, 0xc6, 0xb8, 0xf9, 0xac, 0x94, 0x67, 0x09, 0xae, 0xaf, 0xa3, 0xf5, 0xf4, 0x94, 0x2b, 0x26,
	0x8a, 0xe2, 0x40, 0x2f, 0xdd, 0x78, 0x37, 0x7b, 0xeb, 0x92, 0x69, 0xbb, 0xdb, 0x50, 0x5e, 0x5d,
	0x5e, 0xde, 0x74, 0x2d, 0x27, 0x50, 0x2a, 0x50, 0xe2, 0x6d, 0x55, 0x51, 0x4b, 0x5d, 0xf6, 0x14,
	0x36, 0x51, 0xe9, 0xb8, 0xf9, 0xe7, 0x4b, 0xb2, 0x27, 0x2d, 0x79, 0xd6, 0xea, 0xf2, 0xf2, 0x8a,
	0xdb, 0xd1, 0x2d, 0x67, 0x53, 0xa7, 0x7a, 0xc7, 0x7f, 0xe2, 0x29, 0x0d, 0x18, 0x7f, 0xc6, 0xd1,
	0x8e, 0x68, 0xf0, 0xf0, 0x91, 0x89, 0xf2, 0x42, 0x51, 0x1e, 0x7b, 0xd2, 0x11, 0x1e, 0x55, 0xd4,
	0x92, 0xce, 0x9e, 0xb6, 0x05, 0x2c, 0x2a, 0x6d, 0x2b, 0x0b, 0x50, 0x7a, 0x2a, 0xd6, 0x63, 0x94,
	0x58, 0x93, 0xb0, 0x86, 0x6a, 0xe9, 0x29, 0xe3, 0xe7, 0x0b, 0x5e, 0x15, 0xb5, 0xe4, 0x34, 0x7f,
	0xaf, 0x24, 0x9b, 0x68, 0xc9, 0xb3, 0x54, 0xb2, 0x1f, 0x72, 0xbf, 0x38, 0xb0, 0x9f, 0x78, 0xca,
	0x16, 0x9c, 0x27, 0x86, 0xa1, 0x99, 0x58, 0x57, 0xcd, 0xc3, 0xca, 0x0a, 0x57, 0xba, 0x9b, 0x67,
	0xab, 0x3c, 0xd5, 0xd4, 0x29, 0x62, 0x18, 0x72, 0x92, 0xf2, 0x01, 0x4c, 0x30, 0xa9, 0x1e, 0x2b,
	0x47, 0xe0, 0x9d, 0xbc, 0xfa, 0x96, 0x89, 0x61, 0x44, 0xb6, 0xdd, 0x0b, 0x95, 0xde, 0x6b, 0x3e,
	0x4e, 0x19, 0x93, 0x35, 0x4c, 0xb2, 0xda, 0x0b, 0x50, 0x7a, 0x25, 0xaa, 0x99, 0x6b, 0x88, 0x57,
	0xcd, 0xff, 0x58, 0x82, 0x1b, 0x59, 0xd5, 0x57, 0x5a, 0x4b, 0x2d, 0x6b, 0xc7, 0xd1, 0x83, 0x03,
	0x4a, 0x9e, 0x12, 0xe7, 0x6b, 0x33, 0x40, 0x0d, 0x86, 0x4c, 0x5d, 0xb4, 0xe9, 0x90, 0xa9, 0x27,
	0xf5, 0x63, 0x4f, 0xbb, 0x61, 0xa3, 0xe2, 0x79, 0xce, 0xf0, 0x7d, 0xb9, 0x51, 0x7e, 0xd7, 0xd9,
	0x1e, 0x7f, 0x4b, 0x0e, 0xcf, 0xff, 0x1e, 0x3b, 0x46, 0xb8, 0x86, 0x59, 0x56, 0xc7, 0xf1, 0x79,
	0xd5, 0x69, 0x3e, 0x86, 0x9b, 0x39, 0x16, 0xca, 0x6a, 0x57, 0x81, 0x12, 0x0d, 0x7d, 0x96, 0xb2,
	0x27, 0x3f, 0x74, 0x34, 0xbf, 0xf9, 0xdf, 0x4a, 0x70, 0xbb, 0xb7, 0x85, 0xde, 0x10, 0x6a, 0xb5,
	0x8f, 0xbf, 0x36, 0x23, 0x61, 0x23, 0x0e, 0xf5, 0x68, 0x44, 0x5e, 0xfd, 0xe1, 0x44, 0xf5, 0x85,
	0xd9, 0x7c, 0x6e, 0xc4, 0xd1, 0xd0, 0x88, 0x3d, 0x6c, 0xf5, 0xab, 0x25, 0x39, 0x24, 0x71, 0x3d,
	0xd5, 0xd6, 0xd2, 0xaa, 0x83, 0xaf, 0x25, 0xf6, 0xe8, 0x97, 0xd3, 0x30, 0xda, 0x71, 0x4d, 0xcd,
	0x11, 0x26, 0x1b, 0xe9, 0xb8, 0xe6, 0x06, 0x2b, 0x96, 0x84, 0x55, 0xc2, 0x45, 0x59, 0xcf, 0x66,
	0x36, 0x09, 0x48, 0x37, 0x10, 0x75, 0x9b, 0xc0, 0x94, 0x2d, 0xd2, 0x0d, 0x12, 0xb5, 0x1a, 0x4d,
	0xd6, 0xea, 0xfb, 0xf2, 0x30, 0x27, 0x5a, 0x50, 0xaa, 0xd5, 0x35, 0x98, 0x34, 0x2c, 0x6f, 0x17,
	0xcf, 0xa4, 0x77, 0x03, 0xd1, 0x84, 0xc0, 0x93, 0x98, 0xe8, 0xe6, 0xcf, 0x72, 0x95, 0x12, 0x6f,
	0x7a, 0x9e, 0x42, 0x29, 0x33, 0x54, 0xca, 0x4c, 0x97, 0x3d, 0x92, 0x29, 0xfb, 0xd3, 0xfc, 0xba,
	0x87, 0x85, 0x27, 0x8d, 0x52, 0x4a, 0x19, 0xa5, 0xf9, 0xf3, 0x9c, 0xa0, 0xa4, 0xb6, 0x96, 0x96,
	0xd5, 0xad, 0xfe, 0xb5, 0xcf, 0x84, 0xca, 0xfd, 0xb0, 0xda, 0xfb, 0xd8, 0xe7, 0x3c, 0x51, 0xdb,
	0x21, 0xd3, 0xc3, 0xe7, 0x7d, 0xe1, 0x21, 0x43, 0xe6, 0xbe, 0xa2, 0xc0, 0xc8, 0xbe, 0xe5, 0x1c,
	0x8a, 0xe8, 0x88, 0xff, 0xd3, 0xaa, 0x8e, 0xa7, 0x55, 0x95, 0x3b, 0x67, 0xb9, 0xb0, 0x73, 0x4e,
	0x24, 0x9b, 0xf6, 0x07, 0x39, 0xe1, 0x2b, 0xa9, 0x60, 0x1f, 0x0b, 0x3d, 0x08, 0xd7, 0x30, 0x62,
	0x03, 0xb5, 0x48, 0x70, 0xe0, 0x6d, 0x52, 0xeb, 0x50, 0x0f, 0xc8, 0x33, 0x72, 0x1c, 0x62, 0x04,
	0x7e, 0xeb, 0x24, 0x8e, 0xeb, 0x4b, 0x19, 0xab, 0x8a, 0x90, 0x80, 0x97, 0x0b, 0xb5, 0xf9, 0x21,
	0x79, 0x6b, 0xc7, 0x89, 0x5e, 0xce, 0x2d, 0xa1, 0x3e, 0xc0, 0xd2, 0xf8, 0x6b, 0xb9, 0xcd, 0x9d,
	0xfc, 0x76, 0x1d, 0x58, 0x80, 0x72, 0x1b, 0xdf, 0xbd, 0xc6, 0x37, 0x90, 0x43, 0xa6, 0x21, 0x64,
	0xaa, 0x8a, 0x64, 0x51, 0xd0, 0xff, 0x2a, 0x85, 0x4b, 0x1a, 0x52, 0x49, 0x69, 0x15, 0x1f, 0x48,
	0xeb, 0x0b, 0x1c, 0x29, 0x34, 0x12, 0xeb, 0x0b, 0x62, 0xe8, 0x4e, 0xae, 0x31, 0xbc, 0x84, 0x1a,
	0x31, 0x4c, 0x5f, 0x17, 0xd7, 0x2c, 0xb5, 0x5d, 0x11, 0x60, 0xee, 0x14, 0x84, 0xa9, 0xb4, 0x95,
	0xd6, 0xce, 0xa9, 0x15, 0x14, 0x10, 0x2a, 0xbd, 0x0e, 0x15, 0x2a, 0x8b, 0xe3, 0x2f, 0x3a, 0xde,
	0xea, 0x21, 0x4e, 0x95, 0x85, 0x01, 0x8d, 0x44, 0x3d, 0x9e, 0x40, 0xb7, 0xc6, 0x57, 0x2e, 0x7e,
	0xbb, 0x24, 0x23, 0x3a, 0xa9, 0x89, 0x97, 0x09, 0x0d, 0x94, 0x87, 0x30, 0x29, 0x4e, 0xb0, 0x48,
	0xca, 0x4b, 0xef, 0x91, 0xf0, 0xa9, 0x27, 0x2a, 0x0e, 0x07, 0xd1, 0x7f, 0x3c, 0x34, 0x4e, 0x68,
	0xa0, 0x59, 0xa6, 0xb0, 0xfa, 0x18, 0x7b, 0x5c, 0xc7, 0xdb, 0x22, 0xb7, 0x5d, 0xf3, 0x18, 0xeb,
	0x3e, 0xa1, 0xe2, 0x7f, 0x3c, 0x15, 0x41, 0xba, 0x81, 0x16, 0xe6, 0xe0, 0x43, 0x0f, 0xb0, 0xb4,
	0x65, 0xcc, 0x95, 0x9c, 0x73, 0xc9, 0x6d, 0xc4, 0xe8, 0xcd, 0xb7, 0x50, 0x8f, 0xa9, 0x2a, 0x2a,
	0x99, 0x58, 0xe0, 0x29, 0x25, 0x17, 0x78, 0x10, 0x97, 0x88, 0x8e, 0xeb, 0xa4, 0x82, 0x28, 0x46,
	0x1f, 0x11, 0xd7, 0xcd, 0xe6, 0xaf, 0x95, 0xe0, 0x7a, 0x1f, 0xef, 0x5f, 0xed, 0x9e, 0xce, 0x39,
	0x1e, 0xc2, 0xb8, 0x68, 0x4b, 0xe1, 0x15, 0xf3, 0x79, 0xcd, 0xc8, 0x95, 0x59, 0x3b, 0xa7, 0x8e,
	0xf1, 0xb6, 0x7b, 0x3c, 0x0a, 0xc3, 0xcf, 0xc8, 0x71, 0x93, 0x42, 0xb3, 0x9f, 0xcf, 0x9e, 0xb6,
	0x62, 0x52, 0x94, 0x19, 0x92, 0xa3, 0x4c, 0xf3, 0xb7, 0x4a, 0xd9, 0x50, 0xa0, 0x26, 0x47, 0xf9,
	0xb3, 0xc5, 0xfa, 0xb3, 0x43, 0x91, 0x0f, 0x73, 0xba, 0x72, 0xba, 0x8a, 0x38, 0x72, 0x97, 0x42,
	0xe0, 0xf1, 0x87, 0x33, 0x86, 0x4c, 0xe8, 0xc4, 0x51, 0xc7, 0xd9, 0xc6, 0xe5, 0xa4, 0x5a, 0x58,
	0xfc, 0x68, 0x58, 0xfc, 0xbf, 0x2f, 0x85, 0x33, 0xa0, 0xd6, 0x71, 0x47, 0x94, 0xbf, 0xa6, 0xfb,
	0xbb, 0x4f, 0x89, 0x43, 0xa8, 0x1e, 0x10, 0xe5, 0x63, 0x28, 0xef, 0xea, 0xfe, 0xae, 0xd4, 0x84,
	0xd9, 0x59, 0x95, 0x67, 0xb1, 0x2c, 0xd8, 0x8a, 0x11, 0x73, 0x76, 0xe2, 0x16, 0x1a, 0xd4, 0x26,
	0x4e, 0x78, 0x8f, 0xed, 0x1e, 0x39, 0x7e, 0x4e, 0x1c, 0xbc, 0xc0, 0x55, 0x0f, 0x74, 0x51, 0x47,
	0xfc, 0xcf, 0x8c, 0xcc, 0x7e, 0x91, 0x9b, 0x9b, 0x7f, 0x9c, 0x3d, 0x33, 0xf6, 0x2b, 0x00, 0xa6,
	0xb5, 0x43, 0xfc, 0x00, 0x89, 0x63, 0x48, 0x9c, 0xe0, 0x29, 0xcf, 0x89, 0xd3, 0xfc, 0x38, 0x8c,
	0xfd, 0x91, 0x46, 0xbe, 0x97, 0x50, 0x69, 0x16, 0xc6, 0x38, 0xb7, 0x68, 0x05, 0xf1, 0xd4, 0xfc,
	0xef, 0x11, 0x36, 0x4a, 0xda, 0x42, 0xb4, 0xc1, 0xff, 0x85, 0x96, 0x88, 0x35, 0x19, 0x93, 0x35,
	0x49, 0x59, 0x68, 0x3c, 0x6d, 0xa1, 0xbc, 0xe9, 0xc0, 0x93, 0xf5, 0xcd, 0x56, 0xda, 0x53, 0xa5,
	0x1e, 0x50, 0x4a, 0xf4, 0x80, 0x01, 0x9c, 0xae, 0x0e, 0xc3, 0x1d, 0x7f, 0x27, 0x5c, 0xc4, 0xee,
	0xf8, 0x3b, 0xca, 0xb7, 0x60, 0x82, 0x99, 0x84, 0x47, 0x83, 0x51, 0x34, 0xe0, 0x94, 0x88, 0x06,
	0x49, 0xa3, 0x61, 0x14, 0xf8, 0x04, 0xd8, 0x58, 0xaa, 0xf9, 0xc6, 0x2e, 0xe9, 0xf0, 0x37, 0x02,
	0x6b, 0x8b, 0x17, 0x05, 0xbb, 0x5c, 0xcf, 0x16, 0x32, 0xa8, 0x13, 0xbe, 0xb5, 0xc3, 0xff, 0x36,
	0x3f, 0xca, 0x99, 0x0e, 0xe4, 0x69, 0x97, 0xec, 0x87, 0xff, 0x21, 0x67, 0x02, 0x90, 0xce, 0x25,
	0x1c, 0x21, 0xd2, 0xbe, 0x94, 0xd6, 0x7e, 0x28, 0xa5, 0xfd, 0x70, 0xac, 0x7d, 0x12, 0xaf, 0x7f,
	0x53, 0xb6, 0xf8, 0xe7, 0x10, 0x8d, 0x4c, 0xa8, 0x11, 0xae, 0x91, 0x2c, 0x42, 0x59, 0xf7, 0x2c,
	0x39, 0x2a, 0xcf, 0xe5, 0x38, 0x32, 0x0f, 0xca, 0x3a, 0xff, 0xa3, 0xa8, 0x50, 0x8f, 0x26, 0xb1,
	0x5a, 0xe7, 0xc0, 0xd6, 0xda, 0x5e, 0x5f, 0x30, 0x91, 0x9c, 0x5d, 0xaf, 0x9d, 0x53, 0xab, 0xe1,
	0x14, 0x97, 0xcf, 0x5b, 0x3f, 0x63, 0x32, 0x19, 0x3c, 0x61, 0xca, 0xed, 0x10, 0x87, 0xc9, 0xe4,
	0x88, 0xe2, 0xbd, 0x5e, 0x32, 0x33, 0x13, 0x3b, 0x2e, 0xd9, 0xf4, 0xf5, 0x96, 0xb5, 0xc3, 0x67,
	0x7a, 0x3a, 0x4c, 0xc7, 0x92, 0x0f, 0xb1, 0xd5, 0x98, 0x70, 0xfe, 0x12, 0xc8, 0x87, 0x83, 0x0a,
	0x0f, 0x67, 0x7c, 0x6b, 0xe7, 0xd4, 0x7a, 0x28, 0x3f, 0x9a, 0x05, 0x3e, 0x85, 0x49, 0x36, 0x7c,
	0x12, 0x3e, 0x45, 0x11, 0xeb, 0x10, 0x37, 0x8b, 0x45, 0xc7, 0xd3, 0x19, 0x01, 0x84, 0xc2, 0xc9,
	0x8d, 0x10, 0x24, 0x30, 0x21, 0xb6, 0x6e, 0x3f, 0x41, 0x02, 0x39, 0x0b, 0x41, 0x21, 0x8e, 0x7e,
	0x05, 0x53, 0x4c, 0x90, 0x41, 0x83, 0x48, 0xd8, 0x78, 0xbf, 0x16, 0x4a, 0x20, 0x71, 0x66, 0x47,
	0xea, 0xeb, 0xcb, 0x34, 0x08, 0x45, 0xbe, 0x80, 0x2a, 0xba, 0xe9, 0x8e, 0x08, 0x9d, 0x08, 0xfb,
	0x73, 0xb6, 0x08, 0xf3, 0xc7, 0x0e, 0x06, 0x1f, 0x77, 0xe5, 0xc0, 0xfb, 0x14, 0x26, 0x51, 0x1c,
	0x6f, 0x11, 0x9c, 0x29, 0xe4, 0xa8, 0x9a, 0x17, 0x7c, 0x99, 0xaa, 0xbb, 0x71, 0x28, 0x7e, 0xc6,
	0x6d, 0x26, 0xfc, 0x06, 0xb7, 0xc0, 0x27, 0x17, 0xdf, 0xe9, 0xa9, 0xa6, 0xec, 0x32, 0x6b, 0xe7,
	0xd4, 0x09, 0x1a, 0xba, 0x8b, 0xb2, 0x05, 0x35, 0x9a, 0x70, 0x15, 0x7c, 0xcf, 0x6c, 0x72, 0xf1,
	0x5b, 0x83, 0xc9, 0x8b, 0x2a, 0x58, 0xa1, 0x92, 0x87, 0x28, 0xaf, 0xa0, 0xe6, 0x33, 0x3c, 0xa4,
	0x79, 0xd4, 0x3a, 0x44, 0x94, 0x55, 0xe9, 0x57, 0xcb, 0x14, 0x7e, 0xc2, 0xb7, 0x91, 0xc2, 0x24,
	0x86, 0x28, 0x57, 0x00, 0xb8, 0x48, 0x06, 0x53, 0xf1, 0xf5, 0xb5, 0x82, 0xf5, 0xc8, 0x14, 0x84,
	0x66, 0xea, 0xfa, 0x11, 0x9e, 0xfe, 0x0c, 0xce, 0x27, 0x2b, 0xa6, 0x91, 0x2e, 0x9e, 0x65, 0x9d,
	0x5c, 0x7c, 0x77, 0xe0, 0xba, 0xad, 0x76, 0xd7, 0xce, 0xa9, 0x35, 0xb9, 0x76, 0xab, 0x5d, 0xd6,
	0x9f, 0xdb, 0x96, 0xe7, 0x6b, 0x72, 0xd3, 0x4c, 0xf5, 0xeb, 0xcf, 0x39, 0x91, 0x99, 0xf9, 0x21,
	0x13, 0xa4, 0x46, 0x4d, 0xa4, 0xc3, 0x74, 0x42, 0xb2, 0x68, 0xa7, 0x7a, 0xbf, 0xfe, 0x9c, 0x1f,
	0xc0, 0x59, 0x7f, 0x8e, 0xe5, 0xf3, 0xb4, 0xc7, 0x35, 0xa8, 0xc8, 0x81, 0xb2, 0xf9, 0x9f, 0xc6,
	0xa3, 0x95, 0x6a, 0x3e, 0x84, 0x9c, 0x6e, 0xc9, 0xb6, 0x55, 0x18, 0x37, 0xef, 0xf6, 0x9c, 0x84,
	0xf5, 0x0c, 0x9c, 0x9f, 0x17, 0x06, 0xce, 0xf7, 0xfb, 0xcd, 0xec, 0xfa, 0x45, 0xce, 0xb5, 0x64,
	0x58, 0x1b, 0x19, 0x64, 0x82, 0x97, 0x1f, 0xd7, 0xd6, 0x92, 0x71, 0x6d, 0x74, 0x10, 0x49, 0xf9,
	0x81, 0x4d, 0xcd, 0x06, 0xb6, 0xb1, 0xbe, 0x26, 0xec, 0x13, 0xd9, 0x36, 0xd2, 0x91, 0xad, 0x20,
	0x54, 0x16, 0x60, 0xc8, 0x4c, 0x68, 0x7b, 0x9e, 0x8c, 0x48, 0x3c, 0x4e, 0xde, 0xeb, 0x5d, 0xbf,
	0xe2, 0x90, 0xa4, 0x66, 0x82, 0xc7, 0x44, 0x5f, 0x81, 0xfd, 0xa2, 0xc7, 0x6a, 0x22, 0x7a, 0x40,
	0x9f, 0x61, 0x46, 0x9a, 0xdd, 0x26, 0xc3, 0xc7, 0xe7, 0x79, 0xe1, 0xa3, 0x5f, 0xc0, 0xcc, 0x99,
	0x1b, 0xe6, 0xc4, 0x8f, 0xcf, 0x73, 0xe2, 0x47, 0xa5, 0xaf, 0x5b, 0x0f, 0x12, 0x40, 0x1e, 0x4f,
	0x85, 0xef, 0x72, 0x88, 0x4c, 0xcd, 0x67, 0x30, 0x9d, 0xc6, 0x45, 0xfc, 0x13, 0x20, 0xa9, 0xfd,
	0x9e, 0xf9, 0x1c, 0x64, 0x94, 0xd9, 0xe6, 0x79, 0x19, 0xbe, 0x9e, 0x21, 0x85, 0x0a, 0x26, 0xed,
	0xe3, 0xcc, 0x96, 0xcb, 0xa5, 0x5c, 0x71, 0x99, 0x9d, 0x96, 0xef, 0xc2, 0x14, 0xbe, 0xd7, 0xb9,
	0xe4, 0xda, 0x21, 0x68, 0xbb, 0x0b, 0x75, 0x7c, 0x03, 0x55, 0xd3, 0x5d, 0x3b, 0x79, 0xde, 0xb0,
	0x66, 0x0a, 0xd6, 0xf8, 0x3c, 0x6d, 0x2a, 0x73, 0xbf, 0xf3, 0xb4, 0x29, 0xf6, 0x58, 0xb1, 0x3f,
	0x33, 0x0c, 0x95, 0x90, 0xd8, 0xe2, 0x37, 0xe3, 0x9e, 0x30, 0xfe, 0xe5, 0x55, 0x7b, 0x28, 0xaf,
	0xda, 0xca, 0x3c, 0x94, 0xc5, 0xc5, 0xe4, 0xf7, 0x31, 0x98, 0x8d, 0xa9, 0xd1, 0x33, 0x9b, 0xfe,
	0xf2, 0xcb, 0xe9, 0xee, 0x63, 0x44, 0x1a, 0x57, 0xc3, 0x47, 0x46, 0x79, 0x4e, 0x9c, 0x9d, 0x60,
	0xf7, 0x3e, 0x46, 0x98, 0x71, 0x35, 0x7c, 0x94, 0xe4, 0x2d, 0x8a, 0x17, 0xdb, 0xa3, 0xe7, 0x58,
	0xde, 0x22, 0xf6, 0xfb, 0x48, 0xde, 0x62, 0x2c, 0x6f, 0x11, 0xfb, 0x70, 0x24, 0x6f, 0x51, 0x92,
	0xf7, 0x20, 0xbc, 0xf1, 0x35, 0x7c, 0x8e, 0xe5, 0x3d, 0xc0, 0x8e, 0x15, 0xc9, 0x7b, 0x10, 0xcb,
	0x7b, 0x80, 0x9d, 0x24, 0x92, 0xf7, 0x40, 0xb9, 0x0f, 0x33, 0xb8, 0xe6, 0x94, 0x31, 0x4f, 0x05,
	0x85, 0x2b, 0x8c, 0xb8, 0x92, 0x6e, 0xd9, 0xe9, 0xb8, 0xa9, 0x62, 0x37, 0x5b, 0xcc, 0xb8, 0xd9,
	0x6c, 0xb6, 0x6d, 0x71, 0xcf, 0x33, 0xf6, 0x30, 0x8a, 0x1f, 0x46, 0xea, 0x1e, 0x27, 0x3e, 0x53,
	0x70, 0x1d, 0x26, 0xf1, 0xba, 0x83, 0xd4, 0x77, 0x0a, 0x20, 0x4c, 0x5c, 0x37, 0x95, 0x77, 0x60,
	0x2a, 0x62, 0x49, 0x1d, 0x07, 0xae, 0x85, 0x84, 0xa2, 0x13, 0xc1, 0x7f, 0xba, 0x0c, 0x95, 0xb0,
	0x50, 0xf4, 0xa6, 0x1f, 0xe4, 0x1f, 0xa6, 0x4c, 0x7e, 0xd5, 0x28, 0x59, 0xc7, 0x93, 0x7d, 0xac,
	0xe0, 0x16, 0x44, 0x95, 0x12, 0x57, 0x00, 0xf1, 0xf7, 0x7a, 0xab, 0x61, 0x2a, 0xbf, 0x07, 0xe8,
	0x2a, 0x4c, 0x76, 0x8e, 0xb5, 0xa0, 0x2b, 0xae, 0x06, 0xe1, 0x6f, 0x7e, 0x4e, 0x74, 0x8e, 0xb7,
	0xba, 0xfc, 0x6e, 0x90, 0x45, 0x98, 0x15, 0xf4, 0xe8, 0x9d, 0x4e, 0xcd, 0xdf, 0xb5, 0xda, 0xe1,
	0x8d, 0xc2, 0x0a, 0xb2, 0xaa, 0xe2, 0xf5, 0xce, 0x16, 0xa3, 0x28, 0x1f, 0xc1, 0x9c, 0xc8, 0x43,
	0x9c, 0x80, 0x1e, 0xcb, 0x99, 0xf8, 0xeb, 0xa0, 0xd3, 0x98, 0x09, 0xdf, 0xdc, 0x8e, 0x73, 0xdd,
	0x84, 0x9a, 0xb1, 0x8b, 0x6b, 0xe1, 0x61, 0x65, 0xf8, 0x75, 0x64, 0x15, 0x4c, 0x0d, 0xeb, 0xf3,
	0x29, 0x5c, 0x8a, 0xb9, 0xf8, 0xb1, 0x6d, 0xc7, 0xb4, 0x0c, 0x22, 0x8e, 0x0c, 0xf0, 0x4b, 0xca,
	0xe6, 0xc2, 0x2c, 0xac, 0x5e, 0xeb, 0x9c, 0x8e, 0xaf, 0xa6, 0x7e, 0x02, 0x17, 0x53, 0xb9, 0xa5,
	0xba, 0xf1, 0xb7, 0x49, 0x67, 0xe4, 0xbc, 0x71, 0xed, 0xbe, 0x03, 0xf3, 0x71, 0xce, 0x8c, 0x5a,
	0xfc, 0x74, 0xc6, 0x6c, 0x98, 0x35, 0xa5, 0x59, 0x13, 0xaa, 0x71, 0x5e, 0xdb, 0x6a, 0x87, 0x47,
	0x35, 0x42, 0xf6, 0xe7, 0x56, 0x5b, 0xb9, 0x0d, 0x53, 0x31, 0x0f, 0xde, 0xd3, 0x29, 0x0e, 0x69,
	0x54, 0x43, 0x2e, 0xbc, 0xa8, 0x33, 0x29, 0x6b, 0xdf, 0x32, 0xc5, 0x05, 0xc8, 0x91, 0xac, 0x57,
	0x96, 0x99, 0xb4, 0x24, 0xd3, 0x52, 0x5c, 0x84, 0x5c, 0x91, 0x55, 0xc3, 0xcb, 0x59, 0x89, 0x69,
	0x51, 0xcd, 0xf7, 0x74, 0x47, 0xdc, 0x85, 0x3c, 0x81, 0x29, 0x2d, 0x4f, 0x77, 0x58, 0x85, 0x58,
	0xa8, 0xc3, 0xab, 0xfc, 0x35, 0xcc, 0x88, 0xf7, 0xb0, 0x8c, 0xa8, 0x55, 0x96, 0xbc, 0xb9, 0x17,
	0xf8, 0xcb, 0x2c, 0x51, 0xb9, 0x07, 0xe7, 0x63, 0x3e, 0xd3, 0xf2, 0x0d, 0x9d, 0x9a, 0x78, 0x1d,
	0xcb, 0x88, 0x3a, 0x15, 0x72, 0xae, 0xf0, 0x64, 0xe5, 0x1d, 0xc1, 0x6b, 0x6c, 0xe3, 0xd5, 0x90,
	0x94, 0xe8, 0xe6, 0xb1, 0xb8, 0x28, 0xb9, 0xc6, 0x08, 0xcb, 0xdb, 0x1b, 0x6e, 0xa0, 0xb2, 0xd4,
	0x88, 0x35, 0x74, 0x24, 0xbc, 0x45, 0xf2, 0x42, 0xcc, 0xfa, 0x02, 0x3d, 0x08, 0x2f, 0x92, 0x5c,
	0x80, 0x0a, 0xb2, 0xb2, 0x38, 0x42, 0x28, 0x15, 0x97, 0xb4, 0xe0, 0xb1, 0x91, 0x25, 0xd7, 0x5e,
	0xa5, 0x14, 0xaf, 0xc1, 0x63, 0x1c, 0x4c, 0x52, 0xfb, 0xc0, 0xb6, 0xc5, 0x2d, 0xca, 0x78, 0xd8,
	0x64, 0xab, 0x8b, 0x37, 0xe1, 0x31, 0xa7, 0x45, 0x1e, 0xfe, 0x76, 0x32, 0xe9, 0xe0, 0x45, 0x37,
	0x9c, 0x9b, 0xdf, 0xd5, 0x32, 0xcd, 0xc8, 0x2c, 0xa4, 0xb4, 0x48, 0xe7, 0x09, 0x25, 0x24, 0x91,
	0xcb, 0xd3, 0x77, 0x48, 0x2a, 0x57, 0x23, 0xce, 0xb5, 0xa9, 0xef, 0x10, 0x29, 0x57, 0xf3, 0x09,
	0x7e, 0x15, 0x0d, 0x7b, 0xb7, 0x34, 0x4c, 0x7d, 0x98, 0x1e, 0xa6, 0x66, 0xb3, 0xc1, 0x20, 0x79,
	0x26, 0xff, 0xdb, 0x50, 0x8b, 0x08, 0xe1, 0x99, 0xc2, 0x4c, 0x8c, 0x12, 0x23, 0x65, 0x32, 0x42,
	0x35, 0x7f, 0xb1, 0x04, 0xf5, 0xb8, 0x0e, 0xa7, 0x85, 0xf8, 0x4b, 0x52, 0x71, 0x89, 0x33, 0xfa,
	0x8d, 0x9c, 0xaa, 0xf3, 0xdc, 0x51, 0x45, 0xc4, 0x51, 0xbb, 0x17, 0x30, 0x9d, 0xae, 0x47, 0xdf,
	0xfb, 0x1d, 0xd2, 0x19, 0xa4, 0xe0, 0xfe, 0x19, 0xcc, 0x84, 0xd4, 0xe4, 0xbb, 0x4c, 0x67, 0x0d,
	0xb8, 0xcd, 0xd7, 0xd0, 0xc8, 0x95, 0xdc, 0xef, 0x8b, 0x50, 0xb9, 0x99, 0xe2, 0x36, 0x7c, 0x8e,
	0x5f, 0xa8, 0x4b, 0x70, 0x9c, 0xe1, 0xf8, 0xfe, 0xeb, 0xd8, 0xb3, 0xa4, 0x4b, 0x4a, 0xce, 0xac,
	0xfb, 0xcb, 0xd8, 0xaa, 0xc9, 0xab, 0x4a, 0x7a, 0xdd, 0x58, 0x90, 0xcd, 0x11, 0x6b, 0x3d, 0x05,
	0x55, 0xd9, 0x2f, 0x70, 0x0d, 0x72, 0x3a, 0x91, 0xe1, 0xb4, 0x2e, 0x79, 0x2f, 0x71, 0xaa, 0xb6,
	0xa8, 0x0b, 0xf1, 0x63, 0xde, 0x1f, 0xa6, 0xae, 0x2d, 0x29, 0xf6, 0xda, 0xf0, 0x4c, 0xf7, 0x7b,
	0xc9, 0x9b, 0x4b, 0xe6, 0xf2, 0x33, 0x44, 0x97, 0x97, 0xb4, 0x60, 0x36, 0x47, 0xa9, 0xbe, 0x9f,
	0x3b, 0xcb, 0xc9, 0x93, 0x83, 0x5f, 0x68, 0x1e, 0x7e, 0xa1, 0x79, 0xf8, 0x85, 0x26, 0xf0, 0x0b,
	0x2d, 0xc2, 0x2f, 0xb4, 0x18, 0xbf, 0xfc, 0x12, 0x08, 0xfc, 0x42, 0x05, 0x7e, 0xb9, 0x05, 0x23,
	0x1d, 0x12, 0xe8, 0xc2, 0x93, 0xc2, 0xa3, 0x2a, 0x2f, 0xb7, 0xf1, 0xa3, 0x5c, 0x24, 0xd0, 0x55,
	0x24, 0x67, 0x3d, 0x6f, 0x28, 0xd7, 0xf3, 0x68, 0x1f, 0x98, 0x53, 0x78, 0x44, 0x29, 0x82, 0x39,
	0x34, 0x82, 0x39, 0xa3, 0x12, 0xcc, 0xa1, 0x05, 0x30, 0x67, 0x6c, 0x70, 0x98, 0x33, 0x7e, 0x1a,
	0x98, 0x53, 0x1e, 0x00, 0xe6, 0xd0, 0xae, 0xf4, 0x0d, 0x85, 0x10, 0xe6, 0xa8, 0x69, 0x98, 0x43,
	0x73, 0x61, 0x0e, 0x48, 0x30, 0x47, 0xed, 0x01, 0x73, 0x68, 0x8e, 0x42, 0x93, 0x12, 0xcc, 0x51,
	0x0b, 0x61, 0x0e, 0xcd, 0x53, 0xab, 0x22, 0xc1, 0x1c, 0x35, 0xa3, 0x59, 0x6e, 0x9d, 0x49, 0x57,
	0xf3, 0x89, 0x4d, 0x8c, 0x40, 0xc0, 0x99, 0x74, 0x9d, 0x49, 0xb7, 0x85, 0xe4, 0x14, 0x1c, 0xa9,
	0xa5, 0xe1, 0xc8, 0x2d, 0x18, 0xb5, 0x3c, 0xcd, 0xd7, 0xc5, 0xaa, 0x5a, 0xce, 0x17, 0x9d, 0x2c,
	0xaf, 0xa5, 0x0b, 0x36, 0x53, 0x17, 0xeb, 0x63, 0xb9, 0x6c, 0x2b, 0x3a, 0x7e, 0xc0, 0x01, 0x3f,
	0x01, 0x71, 0x5e, 0x7c, 0xc0, 0x81, 0x3d, 0xb0, 0x54, 0x13, 0x53, 0xc5, 0x67, 0x1d, 0xf0, 0x41,
	0xa9, 0xc3, 0xf0, 0x21, 0x0d, 0xbf, 0xe7, 0xc0, 0xfe, 0x32, 0x1f, 0xd4, 0xdb, 0x02, 0x8c, 0x0c,
	0xe9, 0x6d, 0xe5, 0x5b, 0x50, 0xb6, 0x3c, 0x0d, 0x3f, 0xbb, 0x8a, 0xe0, 0x23, 0x3e, 0xba, 0xb5,
	0xbe, 0xb9, 0xc9, 0x52, 0x0d, 0xd7, 0x56, 0xc7, 0x2d, 0x0f, 0xff, 0x33, 0x79, 0xa6, 0x45, 0x05,
	0x04, 0x61, 0x7f, 0x15, 0x05, 0x46, 0xa8, 0x6b, 0x13, 0x81, 0x33, 0xf0, 0xbf, 0x32, 0x0f, 0x13,
	0x94, 0x1c, 0x6a, 0xbc, 0x37, 0x37, 0xc2, 0xab, 0x30, 0x0f, 0x97, 0x59, 0x47, 0x4e, 0x40, 0x33,
	0x34, 0x11, 0x5e, 0xf1, 0x26, 0x41, 0x33, 0xbc, 0x9d, 0x2d, 0x1f, 0x9a, 0xcd, 0x9f, 0x00, 0x9a,
	0x5d, 0xca, 0x85, 0x66, 0x9f, 0xc2, 0x25, 0x64, 0x75, 0x0e, 0x6c, 0x3b, 0xc7, 0x37, 0xf9, 0x5d,
	0x6f, 0x08, 0x8b, 0x36, 0x0e, 0x6c, 0x3b, 0xed, 0x9b, 0x69, 0xb4, 0x76, 0xa5, 0x10, 0xad, 0xd1,
	0x10, 0xad, 0x5d, 0x8d, 0xd1, 0x9a, 0x2a, 0xd0, 0xda, 0x4d, 0xa8, 0x45, 0x88, 0x8e, 0x63, 0x43,
	0xfe, 0xa9, 0x87, 0x8a, 0x80, 0x74, 0x1c, 0x19, 0xbe, 0x07, 0x08, 0xbf, 0x10, 0x98, 0xe1, 0x51,
	0x21, 0x2e, 0x8f, 0x5f, 0xfe, 0x56, 0x67, 0xa4, 0x16, 0xe9, 0xe0, 0x71, 0x21, 0x14, 0xfa, 0x2e,
	0x28, 0x11, 0x7b, 0x8c, 0xe3, 0xf8, 0x47, 0x1f, 0xa6, 0x04, 0x77, 0x06, 0xc3, 0xd1, 0x93, 0x61,
	0x38, 0x5a, 0x84, 0xe1, 0x68, 0x06, 0xc3, 0xd1, 0x7c, 0x0c, 0x47, 0xb3, 0x18, 0x8e, 0x7e, 0x15,
	0x18, 0x8e, 0xf6, 0xc3, 0x70, 0x34, 0x85, 0xe1, 0x68, 0x06, 0xc3, 0xd1, 0x93, 0x62, 0x38, 0x9a,
	0x8b, 0xe1, 0xfe, 0xa8, 0x40, 0x1b, 0x34, 0x8d, 0xe1, 0xbe, 0xa1, 0x41, 0x27, 0x82, 0x7a, 0xf4,
	0x34, 0x50, 0x8f, 0xf6, 0x85, 0x7a, 0xf4, 0x2b, 0x81, 0x7a, 0x7f, 0x28, 0x76, 0x40, 0x09, 0xea,
	0x7d, 0x53, 0x26, 0x7a, 0x19, 0xb7, 0xd1, 0x09, 0x11, 0x21, 0xed, 0x8d, 0x08, 0x69, 0x06, 0x11,
	0xd2, 0xaf, 0x15, 0x11, 0xd2, 0x13, 0x21, 0x42, 0x7a, 0x52, 0x44, 0x48, 0x0b, 0x10, 0x21, 0x3d,
	0x05, 0x22, 0xa4, 0x45, 0x88, 0x70, 0x17, 0xa6, 0x54, 0xfd, 0x28, 0x81, 0x07, 0xaf, 0xc0, 0x04,
	0xd5, 0x8f, 0x52, 0x68, 0xb0, 0xcc, 0x93, 0xd6, 0x4d, 0xe5, 0x16, 0x54, 0x05, 0x39, 0x85, 0x04,
	0x2b, 0x3c, 0xb9, 0x08, 0x07, 0xfe, 0x0e, 0x00, 0xf0, 0xa2, 0x4e, 0x82, 0x02, 0xbf, 0x97, 0xef,
	0x6d, 0xd2, 0x32, 0x6c, 0xaa, 0xfa, 0x49, 0x0c, 0x78, 0x1d, 0x44, 0xad, 0x04, 0xc2, 0x1b, 0x16,
	0x57, 0x5d, 0x63, 0x5a, 0x78, 0x9d, 0x75, 0x1a, 0x55, 0x8d, 0x9c, 0x1c, 0x55, 0x8d, 0x9e, 0x01,
	0x55, 0x8d, 0x9d, 0x1e, 0x55, 0x8d, 0x9f, 0x05, 0x55, 0x95, 0x7b, 0xa3, 0xaa, 0xec, 0xa2, 0xda,
	0xc4, 0xc9, 0x17, 0xd5, 0xe0, 0x0c, 0x8b, 0x6a, 0x93, 0xa7, 0x5f, 0x54, 0xab, 0xf4, 0x5c, 0x54,
	0xcb, 0xad, 0x73, 0x3e, 0xda, 0xdc, 0xca, 0xda, 0x25, 0xb3, 0x24, 0x57, 0x1b, 0x68, 0x49, 0x6e,
	0x6a, 0xa0, 0x25, 0xb9, 0x7a, 0x76, 0x49, 0x2e, 0x07, 0xb2, 0x9d, 0x1f, 0x18, 0xb2, 0x9d, 0x7d,
	0x35, 0x2d, 0x04, 0x42, 0xfb, 0xf8, 0xa5, 0x32, 0xcd, 0x68, 0xef, 0x20, 0xf6, 0xba, 0x10, 0x03,
	0xa1, 0x57, 0x48, 0x59, 0x6e, 0xef, 0x30, 0x04, 0x76, 0x07, 0xea, 0x61, 0x2d, 0x34, 0x9b, 0x38,
	0xd2, 0xaa, 0x5a, 0x58, 0xdd, 0xe7, 0xc4, 0xc9, 0x85, 0x6a, 0xb3, 0x59, 0xa8, 0x96, 0x59, 0x7c,
	0x9b, 0xcb, 0x2e, 0xbe, 0x3d, 0x82, 0x46, 0x72, 0xf1, 0x4d, 0x42, 0x6b, 0x1c, 0xfc, 0x5e, 0x90,
	0x56, 0xdf, 0x62, 0xc4, 0xf6, 0x09, 0x5c, 0xe4, 0xab, 0x84, 0xd1, 0xfa, 0x9b, 0x94, 0x91, 0x7f,
	0x37, 0x75, 0x06, 0x57, 0x0b, 0x3d, 0xbe, 0x02, 0x97, 0xcd, 0xe9, 0xe5, 0xe5, 0x9c, 0x8f, 0x73,
	0x6e, 0x66, 0x72, 0xe6, 0xa3, 0xc4, 0x4b, 0xf9, 0x28, 0xf1, 0x31, 0xd4, 0x79, 0x68, 0x93, 0x46,
	0xc8, 0xf7, 0xd3, 0x23, 0xe4, 0x85, 0x74, 0x1c, 0x4c, 0x22, 0xc4, 0x07, 0x50, 0x11, 0xc9, 0x7c,
	0xc4, 0xb9, 0x91, 0x8e, 0xdd, 0x1c, 0x1d, 0x26, 0x22, 0x77, 0xf3, 0x8f, 0x40, 0x2d, 0x2c, 0xf8,
	0xb4, 0xe3, 0xe6, 0x77, 0xa3, 0x72, 0x12, 0xb0, 0x70, 0x36, 0x53, 0x5b, 0x9e, 0x53, 0x94, 0x2f,
	0xd0, 0xc9, 0x3a, 0x9c, 0x4f, 0x96, 0xcf, 0xb7, 0x18, 0xd3, 0x43, 0x5c, 0x23, 0x2d, 0x2c, 0x67,
	0x74, 0xfb, 0xff, 0x61, 0x9a, 0xd3, 0x4e, 0x05, 0x06, 0xcf, 0x36, 0xf6, 0x34, 0x5f, 0xc1, 0x6c,
	0x4e, 0xe1, 0x7c, 0x87, 0x33, 0xd5, 0x8c, 0x57, 0xd2, 0x22, 0x0b, 0x60, 0xe0, 0x8f, 0x60, 0x2e,
	0x49, 0x3f, 0x03, 0x08, 0xec, 0x86, 0xfe, 0x75, 0x72, 0x08, 0x78, 0x46, 0xc3, 0x3c, 0x0b, 0x5b,
	0x25, 0x09, 0xff, 0x7a, 0xed, 0x22, 0xa7, 0xf9, 0x63, 0x93, 0x54, 0x61, 0x32, 0xf6, 0x25, 0xbf,
	0xf9, 0x6f, 0x4b, 0xa1, 0xf7, 0x9c, 0x09, 0xf8, 0xdd, 0x4d, 0x00, 0xbf, 0xfc, 0x5e, 0xc6, 0x61,
	0xdf, 0xfb, 0x29, 0xd8, 0x57, 0xe4, 0xe3, 0x21, 0xe8, 0x7b, 0x37, 0x09, 0xfa, 0x66, 0xf2, 0xd8,
	0x23, 0xc8, 0xf7, 0x12, 0x2e, 0x64, 0x94, 0xe9, 0xbb, 0x45, 0x9e, 0xc9, 0x91, 0x81, 0x7b, 0x46,
	0x16, 0xee, 0x19, 0x59, 0xb8, 0x67, 0x48, 0x70, 0xcf, 0xc8, 0x87, 0x7b, 0x3d, 0xb6, 0x2d, 0xff,
	0xeb, 0x38, 0xc2, 0xbd, 0x70, 0xd3, 0xf2, 0x7b, 0xf9, 0xeb, 0xc8, 0x49, 0x97, 0x39, 0xfd, 0x96,
	0x25, 0xc7, 0x79, 0xe9, 0x0d, 0xcb, 0x49, 0x9e, 0xf6, 0x07, 0xdb, 0x95, 0xff, 0x6f, 0x6f, 0x57,
	0xe6, 0xec, 0x47, 0xd6, 0x07, 0xde, 0x8f, 0x3c, 0x7f, 0x02, 0x04, 0xa5, 0x0c, 0xbe, 0x1f, 0x39,
	0x3d, 0xd0, 0x7e, 0xe4, 0x85, 0xfe, 0xfb, 0x91, 0x33, 0x27, 0xda, 0x8f, 0x9c, 0x3d, 0xd5, 0x7e,
	0xe4, 0x5c, 0xf1, 0x7e, 0x24, 0x47, 0x29, 0xc6, 0x49, 0x50, 0x8a, 0x91, 0x8f, 0x52, 0x8c, 0x14,
	0x4a, 0x31, 0xf2, 0x50, 0x8a, 0x91, 0x42, 0x29, 0xc6, 0xd9, 0x51, 0x8a, 0xd1, 0x1b, 0xa5, 0x18,
	0x09, 0x94, 0x62, 0xa4, 0x50, 0x8a, 0x71, 0x32, 0x94, 0x92, 0xbf, 0xf1, 0xb8, 0x85, 0xe3, 0x61,
	0x66, 0xdb, 0xf1, 0x6c, 0x21, 0x53, 0xc0, 0x0f, 0xe3, 0xe4, 0xf0, 0xa3, 0x78, 0xc3, 0xf1, 0x29,
	0x0e, 0x47, 0x99, 0xed, 0xc6, 0x13, 0x5b, 0xbe, 0xf9, 0x1a, 0x71, 0x4c, 0xee, 0xbe, 0x65, 0xcf,
	0x6b, 0x69, 0xf3, 0x32, 0x49, 0x86, 0x7c, 0x15, 0x3a, 0xa3, 0x04, 0x69, 0xce, 0x68, 0xc5, 0x67,
	0x61, 0xdb, 0x9c, 0x08, 0xab, 0x18, 0xbd, 0xb0, 0x8a, 0x91, 0xc2, 0x2a, 0xc6, 0xd7, 0x88, 0x55,
	0x8c, 0x13, 0x60, 0x15, 0xe3, 0x64, 0x58, 0xc5, 0xc8, 0xc5, 0x2a, 0xc6, 0x89, 0xb1, 0x4a, 0xe1,
	0x66, 0xe5, 0x4b, 0x98, 0xd9, 0x22, 0x7e, 0xd0, 0x22, 0x8e, 0xf9, 0xc4, 0x72, 0x06, 0xfd, 0x9c,
	0x47, 0x26, 0x47, 0x6c, 0xfe, 0x0b, 0xa0, 0x64, 0xc9, 0xcd, 0x16, 0xcc, 0x26, 0x52, 0x07, 0x5c,
	0x56, 0xcb, 0xc9, 0x23, 0xd5, 0xfd, 0x0d, 0x4c, 0xe7, 0x30, 0x28, 0x3f, 0x18, 0xa4, 0x6d, 0x1f,
	0xd7, 0x7e, 0xff, 0xe7, 0xd7, 0x24, 0x3e, 0xb9, 0xe3, 0xb4, 0x60, 0x8e, 0xc9, 0x5d, 0xb6, 0x5d,
	0x63, 0xaf, 0x75, 0x1c, 0x7d, 0x21, 0xa9, 0xdf, 0xf5, 0x54, 0x79, 0x79, 0x62, 0xbb, 0xcc, 0xc2,
	0x85, 0x3c, 0x86, 0xe6, 0x5b, 0x68, 0xa4, 0xd2, 0x07, 0xbc, 0x41, 0x2a, 0x37, 0x57, 0xf2, 0x4d,
	0x8b, 0x5c, 0x96, 0xaf, 0xc2, 0x3e, 0xb3, 0x4f, 0x6c, 0xf7, 0x88, 0xbf, 0x74, 0x3c, 0xf8, 0x1a,
	0x69, 0x4e, 0x1e, 0xa9, 0xba, 0xbf, 0x39, 0x04, 0xd3, 0x39, 0x1c, 0xa7, 0xb9, 0xa9, 0x71, 0xda,
	0xa3, 0x56, 0x47, 0xa7, 0xc7, 0x62, 0xc5, 0xe9, 0x50, 0xb7, 0xc5, 0x49, 0xdb, 0xb2, 0x7a, 0x5e,
	0x90, 0x70, 0xad, 0xe9, 0x0d, 0x23, 0xe0, 0x67, 0x16, 0x65, 0xfe, 0xf0, 0xe6, 0x5b, 0x99, 0x53,
	0x59, 0x0c, 0x6f, 0xea, 0x4d, 0x8b, 0x1d, 0x41, 0xb1, 0xd3, 0x11, 0x51, 0x12, 0x7c, 0x07, 0xa6,
	0x52, 0x79, 0xc2, 0xbb, 0x70, 0x93, 0xdc, 0xe1, 0x21, 0xbc, 0xb1, 0xe8, 0x8c, 0x78, 0x74, 0xd6,
	0x6e, 0x9c, 0x1f, 0x04, 0x66, 0xff, 0x9b, 0xff, 0xa5, 0x04, 0x4a, 0xc2, 0x40, 0x3c, 0xf4, 0xde,
	0x86, 0xa9, 0x5d, 0x9d, 0x9a, 0x47, 0x3a, 0x25, 0xda, 0x21, 0x6d, 0x87, 0xf3, 0x8b, 0x11, 0xb5,
	0x1a, 0x26, 0xbf, 0xa1, 0xed, 0x75, 0x53, 0x79, 0x17, 0xca, 0x6d, 0xdb, 0x3d, 0x92, 0x0e, 0xd5,
	0xd6, 0xdf, 0xf7, 0x89, 0xef, 0x5b, 0xae, 0x83, 0x2d, 0xf3, 0x8c, 0x1c, 0xab, 0xe3, 0x6d, 0xfe,
	0x47, 0xf9, 0x2e, 0xd4, 0x90, 0xd9, 0xb4, 0x28, 0x31, 0x02, 0xcb, 0xe5, 0x67, 0x01, 0xe3, 0x8b,
	0xe3, 0x58, 0x86, 0x95, 0x90, 0xa6, 0x56, 0xdb, 0xf2, 0xa3, 0xf2, 0x1d, 0xc0, 0x04, 0xcd, 0x72,
	0xfc, 0x40, 0x77, 0x0c, 0xbe, 0xd4, 0x5b, 0x5b, 0x9c, 0x49, 0x14, 0xb7, 0x2e, 0x88, 0x6a, 0xa5,
	0x2d, 0x3d, 0xb1, 0x70, 0x94, 0xd5, 0xb1, 0x5f, 0x38, 0xca, 0xe6, 0x88, 0xba, 0xdd, 0xbd, 0x2e,
	0x4c, 0xb7, 0xdc, 0x76, 0xc0, 0xec, 0xb0, 0xb9, 0x7b, 0xb8, 0x69, 0x79, 0x04, 0x3f, 0x9c, 0x38,
	0x0b, 0x4a, 0xeb, 0xe5, 0x93, 0xad, 0xb7, 0x4b, 0xea, 0xaa, 0xb6, 0xb9, 0xf6, 0x46, 0x53, 0x3f,
	0x5b, 0x79, 0xb1, 0x54, 0x3f, 0x97, 0x49, 0xdf, 0xc2, 0xf4, 0x92, 0xd2, 0x80, 0x0b, 0x89, 0xf4,
	0xf5, 0x8d, 0xa7, 0xea, 0x6a, 0xab, 0x55, 0x1f, 0x52, 0xe6, 0x60, 0x3a, 0x41, 0x59, 0xe5, 0x84,
	0xe1, 0x7b, 0x7f, 0x52, 0x3e, 0xa5, 0x11, 0x9e, 0x9c, 0x53, 0x6e, 0xc1, 0xdc, 0xb2, 0xfa, 0xf9,
	0xe6, 0xd6, 0xcb, 0xa5, 0xcd, 0x75, 0x6d, 0x6d, 0xa9, 0xb5, 0xb6, 0xf5, 0xf9, 0xe6, 0xaa, 0xb6,
	0xf1, 0x72, 0x63, 0xb5, 0x7e, 0x6e, 0xbe, 0xfc, 0xc5, 0x97, 0x0b, 0x23, 0x8e, 0xeb, 0x10, 0xe5,
	0x06, 0xcc, 0xe6, 0xb0, 0xbd, 0x58, 0x79, 0x58, 0x2f, 0xcd, 0x8f, 0x7f, 0xf1, 0xe5, 0xc2, 0xf0,
	0x8b, 0x95, 0x87, 0x05, 0xb2, 0x5a, 0x6b, 0x4b, 0xf7, 0xeb, 0x43, 0x5c, 0x16, 0xfb, 0xaf, 0xbc,
	0x03, 0x17, 0xf3, 0xd9, 0x16, 0x17, 0x3f, 0xaa, 0x0f, 0xcf, 0xc3, 0x17, 0x5f, 0x2e, 0x8c, 0xf1,
	0xa7, 0x1e, 0xac, 0x0f, 0x1f, 0xd5, 0x47, 0x62, 0xd6, 0x87, 0x8f, 0x8a, 0x59, 0x1f, 0x7c, 0xf2,
	0x51, 0x7d, 0x34, 0x62, 0x7d, 0xf0, 0x49, 0x0f, 0xa9, 0x0f, 0xef, 0x2f, 0xd6, 0xc7, 0x22, 0xd6,
	0x87, 0xf7, 0x17, 0x95, 0xfb, 0x70, 0xa5, 0x90, 0x55, 0x63, 0xf5, 0x1d, 0x9f, 0xaf, 0x7d, 0xf1,
	0xe5, 0x02, 0xc4, 0x29, 0x7d, 0xb2, 0x3c, 0x7c, 0x54, 0x2f, 0x27, 0xb3, 0x3c, 0x7c, 0xa4, 0xbc,
	0x07, 0x97, 0x72, 0xb2, 0xac, 0xbd, 0x58, 0x5a, 0x46, 0x13, 0x4f, 0xcc, 0x57, 0xbe, 0xf8, 0x72,
	0xa1, 0x1c, 0x3e, 0x2b, 0x1f, 0xc0, 0xe5, 0x22, 0x76, 0x34, 0x36, 0xcc, 0x57, 0xbf, 0xf8, 0x72,
	0x61, 0x22, 0x4a, 0x50, 0x1e, 0xc0, 0xd5, 0x1e, 0x19, 0x98, 0x1a, 0x93, 0xf3, 0x53, 0x5f, 0x7c,
	0xb9, 0x30, 0x29, 0x25, 0xf5, 0xcb, 0xf4, 0xf0, 0x51, 0xbd, 0x92, 0xca, 0xf4, 0xf0, 0x51, 0x9f,
	0x4c, 0xac, 0x29, 0xaa, 0xc9, 0x4c, 0xac, 0x3d, 0x7a, 0x67, 0x62, 0x8d, 0x52, 0x4b, 0x66, 0x62,
	0x2d, 0x93, 0x6f, 0x33, 0x26, 0x11, 0xdb, 0x65, 0x8a, 0xdb, 0x2c, 0x7c, 0xee, 0xc9, 0xfe, 0xf0,
	0x51, 0xbd, 0x2e, 0xb3, 0x17, 0xb6, 0x08, 0x92, 0x99, 0x12, 0xe7, 0x25, 0x76, 0xa6, 0x41, 0x0f,
	0x76, 0x56, 0x7d, 0x45, 0x62, 0x7f, 0x78, 0x7f, 0xf1, 0xde, 0x3f, 0x1b, 0x96, 0xce, 0x58, 0x60,
	0x37, 0xbc, 0x0c, 0x8d, 0xa5, 0xd6, 0xe7, 0x2f, 0x58, 0xf6, 0xd5, 0xe5, 0x65, 0x6d, 0xf3, 0xe5,
	0xfa, 0xc6, 0x96, 0xf6, 0xe2, 0xf5, 0x73, 0xed, 0xc9, 0x66, 0xfd, 0x5c, 0x92, 0xba, 0xd2, 0x5a,
	0xd2, 0x5a, 0xeb, 0x4f, 0xb5, 0xa7, 0xab, 0x1b, 0x8c, 0x5a, 0x52, 0xae, 0xc1, 0xa5, 0x2c, 0xf5,
	0xcd, 0xaa, 0xba, 0xfe, 0xe4, 0x73, 0xc6, 0x80, 0x21, 0x21, 0x64, 0x50, 0x5b, 0x4b, 0xda, 0xea,
	0x06, 0xd6, 0xb5, 0x3e, 0x9c, 0x26, 0xac, 0xac, 0x72, 0xc2, 0x88, 0x72, 0x09, 0xe6, 0x64, 0xc2,
	0xb2, 0xba, 0x15, 0x11, 0x47, 0x95, 0x8b, 0x30, 0xd3, 0xfa, 0xfc, 0xc5, 0x8b, 0x50, 0x55, 0x56,
	0x91, 0x55, 0x75, 0x69, 0x6b, 0xb5, 0x3e, 0x86, 0xc1, 0x47, 0x26, 0xf1, 0x5a, 0xd4, 0xc7, 0xd3,
	0x25, 0x89, 0xfa, 0xd7, 0xcb, 0xca, 0x3c, 0xcc, 0xa6, 0x09, 0x22, 0xd3, 0x84, 0x4c, 0x6b, 0xad,
	0x6e, 0xbd, 0xde, 0xd4, 0x36, 0xd5, 0xf5, 0x37, 0xda, 0xb3, 0xd5, 0xcf, 0xeb, 0xc0, 0x02, 0x63,
	0x92, 0xb6, 0xbc, 0xaa, 0x6e, 0xd5, 0x27, 0x95, 0x2b, 0x70, 0x31, 0x3f, 0x8f, 0xb6, 0xfa, 0x59,
	0xbd, 0x2a, 0x5b, 0xf2, 0xc9, 0xfa, 0x66, 0x2b, 0x51, 0x99, 0x9a, 0x6c, 0xc9, 0x04, 0x55, 0xd4,
	0x68, 0xea, 0xde, 0x5d, 0x80, 0xf8, 0x0e, 0x0d, 0xa5, 0x06, 0xb0, 0xb4, 0xb2, 0xa2, 0xbd, 0xde,
	0x5c, 0x61, 0xda, 0x9f, 0x53, 0x00, 0xc6, 0x56, 0x56, 0x9f, 0xaf, 0x6e, 0xad, 0xd6, 0x4b, 0x8b,
	0xff, 0xe6, 0x0e, 0x94, 0xd7, 0xc5, 0x80, 0xa0, 0xe8, 0x70, 0xfe, 0x29, 0x09, 0x36, 0xa9, 0xbb,
	0x43, 0xf5, 0x8e, 0x78, 0xb3, 0x48, 0xb9, 0x95, 0xf8, 0x04, 0x44, 0x92, 0x18, 0x0f, 0x34, 0xf3,
	0x37, 0x12, 0x9b, 0xba, 0x09, 0x9e, 0x08, 0xe7, 0x34, 0xcf, 0x29, 0xbf, 0x00, 0x53, 0xb8, 0xe5,
	0xb0, 0xb6, 0x1d, 0x15, 0x20, 0xe5, 0x4c, 0x91, 0x24, 0xf1, 0x37, 0x7b, 0x30, 0xa5, 0xe4, 0xf3,
	0x6b, 0x8d, 0x0f, 0x28, 0x79, 0x6e, 0xb5, 0x1f, 0x9b, 0x6d, 0x59, 0x7e, 0x8a, 0x94, 0x2f, 0x3f,
	0xc3, 0x24, 0xcb, 0x7f, 0x0b, 0xe7, 0xa5, 0x71, 0x71, 0xdd, 0xf9, 0x29, 0x31, 0x02, 0x45, 0x02,
	0xb3, 0x19, 0x22, 0x13, 0xbe, 0x90, 0x4b, 0x4f, 0x0a, 0xfe, 0x31, 0xd4, 0x24, 0xda, 0x53, 0x12,
	0x28, 0xcd, 0xdc, 0x5c, 0x89, 0xe1, 0x5d, 0xb6, 0x7a, 0x9a, 0x47, 0x16, 0xfe, 0x04, 0xc6, 0x9f,
	0xbb, 0x3b, 0xfc, 0xfb, 0x98, 0x71, 0x0e, 0x91, 0x24, 0x89, 0xbb, 0x9c, 0x43, 0x94, 0xe5, 0x3c,
	0x86, 0xea, 0xab, 0x03, 0x8b, 0xf8, 0x06, 0x7b, 0x6e, 0x39, 0xa6, 0x22, 0x4d, 0xd2, 0x70, 0x91,
	0x48, 0xc8, 0x9a, 0x9f, 0xcb, 0xa4, 0x0b, 0xb8, 0x7a, 0x4e, 0x59, 0x82, 0x8a, 0x90, 0xd1, 0x0a,
	0x74, 0x1a, 0x9c, 0x46, 0xc4, 0x0f, 0x61, 0x32, 0x12, 0xe1, 0x7a, 0xa7, 0x91, 0xf0, 0x1c, 0xaa,
	0xeb, 0x9e, 0x4f, 0x8c, 0xe5, 0x6d, 0x7e, 0x85, 0xa4, 0x6c, 0x16, 0x41, 0xc8, 0x37, 0x4b, 0x44,
	0x94, 0xcd, 0x12, 0x4b, 0xe3, 0xbd, 0xee, 0x6c, 0xd2, 0x3e, 0x8b, 0xa4, 0xf1, 0xb5, 0x04, 0xe5,
	0x7a, 0x26, 0x43, 0x7a, 0xd5, 0x64, 0xbe, 0x59, 0xc8, 0x22, 0x4b, 0x7e, 0x09, 0x20, 0xa8, 0xcc,
	0xbf, 0xae, 0x66, 0xf2, 0x24, 0x7d, 0xeb, 0x5a, 0x3e, 0x3d, 0xe9, 0x57, 0x93, 0xf8, 0xad, 0x65,
	0x61, 0xc4, 0x8b, 0xa9, 0x4f, 0x30, 0x4b, 0xc2, 0xe6, 0x33, 0xa4, 0x3c, 0x39, 0xc2, 0x7c, 0xa7,
	0x96, 0xa3, 0x0a, 0x39, 0xc2, 0x70, 0xd7, 0x52, 0xcc, 0x19, 0xb3, 0x2d, 0x14, 0x30, 0xc8, 0x32,
	0xd7, 0xa1, 0x1c, 0x7e, 0x4f, 0x5a, 0xb9, 0x9c, 0xf7, 0x8d, 0xe9, 0x48, 0xda, 0x95, 0xe2, 0x2f,
	0x50, 0xc7, 0x6a, 0xda, 0x7e, 0xae, 0xb9, 0x92, 0xdf, 0x69, 0x9d, 0x9f, 0x2f, 0xf8, 0x48, 0x69,
	0x52, 0x4e, 0x8e, 0xb9, 0x4e, 0x24, 0x47, 0x15, 0x72, 0x72, 0xcc, 0x95, 0xf7, 0xa9, 0xd2, 0x84,
	0xb9, 0x72, 0x3f, 0x3d, 0x2a, 0xcc, 0x25, 0x3e, 0x53, 0xa9, 0x5c, 0x2e, 0xfc, 0xbe, 0x67, 0xda,
	0x5c, 0xd9, 0x2f, 0x61, 0x72, 0x35, 0xf1, 0x53, 0x4f, 0x59, 0x73, 0xa5, 0xbe, 0xf9, 0x28, 0xab,
	0x99, 0xfe, 0x3c, 0xa2, 0x24, 0x27, 0x6b, 0xae, 0x93, 0xc9, 0xf9, 0x05, 0xf1, 0xb1, 0xc9, 0xf8,
	0x7b, 0x60, 0xf2, 0xd8, 0x52, 0xf8, 0x25, 0x3f, 0x79, 0x6c, 0x29, 0xfe, 0x0e, 0x59, 0xf3, 0x9c,
	0xb2, 0x01, 0x15, 0xf9, 0x1b, 0x5d, 0xbd, 0x2a, 0x7a, 0xbd, 0xf7, 0x67, 0xbd, 0x92, 0xf2, 0x5a,
	0x27, 0x97, 0xd7, 0xca, 0x93, 0xa7, 0x43, 0x3d, 0xfd, 0x11, 0x28, 0xe5, 0x66, 0xdf, 0x4f, 0x5e,
	0x31, 0xf1, 0xb7, 0xfa, 0x7f, 0x46, 0x8a, 0x17, 0xe1, 0xc1, 0x4c, 0xee, 0x87, 0x50, 0x94, 0x77,
	0x06, 0xfb, 0x6e, 0x13, 0x2b, 0xec, 0xde, 0x80, 0x1f, 0x55, 0x89, 0x94, 0x4a, 0x7f, 0x17, 0x41,
	0x56, 0xaa, 0xf8, 0x03, 0x29, 0xb2, 0x52, 0x3d, 0xbe, 0x26, 0xd2, 0x3c, 0xa7, 0xf8, 0x30, 0x9b,
	0xff, 0xe9, 0x05, 0xe5, 0xde, 0x80, 0xdf, 0xe8, 0x60, 0xc5, 0xbd, 0x3b, 0xe8, 0x87, 0x1c, 0x62,
	0x20, 0x94, 0xbc, 0x16, 0x5f, 0xb9, 0xd1, 0xef, 0x73, 0x0c, 0x69, 0x20, 0x54, 0xf8, 0xa1, 0x04,
	0xde, 0x52, 0xb9, 0xd7, 0xee, 0x2b, 0xef, 0x0c, 0xf6, 0xb1, 0x81, 0x54, 0x4b, 0xf5, 0xfb, 0x00,
	0x00, 0x1f, 0x17, 0x13, 0xb7, 0xbf, 0x2b, 0xd7, 0x7b, 0x5f, 0x71, 0x9f, 0x1a, 0x17, 0x8b, 0xee,
	0x9b, 0x4f, 0xd9, 0x4a, 0x04, 0x89, 0x1b, 0xfd, 0x2e, 0x75, 0x2f, 0xb2, 0x55, 0xe6, 0xba, 0xf5,
	0x94, 0x7c, 0x11, 0x6b, 0x6f, 0xf4, 0xbb, 0xe0, 0xbc, 0x48, 0x7e, 0x5e, 0xcc, 0xfd, 0x69, 0x74,
	0xf2, 0x5d, 0xbe, 0x16, 0x5b, 0xb9, 0x33, 0xc8, 0x25, 0xe0, 0xac, 0x9c, 0xbb, 0x03, 0x5d, 0xaf,
	0x9d, 0x5f, 0x96, 0xd0, 0xe7, 0xce, 0x20, 0x97, 0x60, 0xf7, 0x2a, 0x2b, 0x4f, 0xaf, 0x1d, 0x50,
	0xb2, 0xb7, 0x18, 0x2b, 0xb7, 0x07, 0xb8, 0xaf, 0x99, 0x95, 0x74, 0x67, 0x90, 0xbb, 0x90, 0xc3,
	0x81, 0x70, 0x2a, 0x9a, 0xe7, 0xae, 0x3b, 0x87, 0xee, 0x1e, 0x51, 0xae, 0x14, 0xdf, 0x12, 0xc0,
	0x84, 0x5f, 0xed, 0x71, 0xea, 0x3f, 0x04, 0x85, 0x93, 0xe1, 0x41, 0xed, 0xd4, 0x58, 0x98, 0x3d,
	0xca, 0x2f, 0x8f, 0x85, 0x39, 0xc7, 0xc1, 0x11, 0xba, 0x45, 0x47, 0x22, 0x45, 0xeb, 0x5e, 0xce,
	0x3b, 0x37, 0x98, 0x27, 0x30, 0xe7, 0x18, 0x62, 0x52, 0xa0, 0x70, 0xf9, 0x33, 0x0a, 0xfc, 0x71,
	0x2c, 0x50, 0xf8, 0x44, 0xb3, 0xcf, 0x61, 0xc1, 0xec, 0xb4, 0x31, 0xff, 0xb8, 0x20, 0x47, 0x2a,
	0xd2, 0xe1, 0x31, 0xe5, 0x5a, 0xaf, 0xd3, 0x78, 0x29, 0xa4, 0x92, 0x7f, 0x50, 0x4d, 0xb2, 0x00,
	0x2d, 0x34, 0x29, 0xed, 0x69, 0x01, 0x5a, 0x64, 0x52, 0x5a, 0x68, 0xd2, 0x13, 0x0a, 0xfc, 0x71,
	0x2c, 0xb0, 0xc0, 0xa4, 0x74, 0x00, 0x93, 0xd2, 0xde, 0x26, 0xa5, 0xf9, 0x26, 0xa5, 0xfd, 0x4c,
	0x4a, 0x73, 0x4c, 0xba, 0x1e, 0xbe, 0xd2, 0x27, 0x0c, 0x3a, 0x9f, 0x7d, 0x0d, 0x2e, 0x92, 0x77,
	0xa9, 0xe8, 0x15, 0xb9, 0x94, 0x28, 0x61, 0xca, 0x33, 0x88, 0x7a, 0x1d, 0x8a, 0x12, 0x46, 0x5c,
	0xe8, 0xf9, 0x42, 0x5b, 0x0a, 0x0e, 0x15, 0xbc, 0xd2, 0x86, 0x1d, 0x7c, 0x22, 0x7a, 0x9b, 0x49,
	0xb9, 0x52, 0xfc, 0x3a, 0x58, 0x2a, 0x5c, 0xe4, 0xbd, 0x33, 0x15, 0xe9, 0x6b, 0x14, 0x98, 0xce,
	0xe8, 0xa1, 0xaf, 0x91, 0x6f, 0x3a, 0xa3, 0xc0, 0x74, 0x27, 0x12, 0xf5, 0x3a, 0x14, 0x95, 0x6b,
	0x3a, 0xa3, 0xaf, 0xe9, 0x8c, 0x5e, 0xa6, 0x33, 0xf2, 0x4c, 0x67, 0xf4, 0x36, 0x5d, 0x5e, 0x47,
	0x7e, 0x0d, 0xb5, 0xe4, 0xd6, 0xa9, 0x72, 0xad, 0xd7, 0x9e, 0x6b, 0x7a, 0x26, 0x93, 0xbb, 0xbf,
	0x8a, 0xbd, 0xaf, 0x9e, 0xde, 0x79, 0x94, 0x21, 0x47, 0xc1, 0x56, 0xa7, 0x0c, 0x39, 0x8a, 0x36,
	0x28, 0x79, 0xef, 0x93, 0xb6, 0x5f, 0xe4, 0x0a, 0xe7, 0xee, 0xe3, 0xc8, 0x15, 0xce, 0xdf, 0x43,
	0x6c, 0x9e, 0x5b, 0xac, 0xc2, 0xa4, 0xb4, 0x08, 0xf4, 0x18, 0xfe, 0xbf, 0xf2, 0xae, 0x6e, 0xe3,
	0xf1, 0xbd, 0xed, 0x31, 0xfc, 0x79, 0xf0, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x9b, 0x22,
	0x47, 0x81, 0xad, 0x00, 0x00,
}
