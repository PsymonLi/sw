// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SoftwarePhvPipeline: pipeline to inject the software phv
type SoftwarePhvPipeline int32

const (
	SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA   SoftwarePhvPipeline = 0
	SoftwarePhvPipeline_SOFTWARE_PHV_TXDMA   SoftwarePhvPipeline = 1
	SoftwarePhvPipeline_SOFTWARE_PHV_INGRESS SoftwarePhvPipeline = 2
	SoftwarePhvPipeline_SOFTWARE_PHV_EGRESS  SoftwarePhvPipeline = 3
)

var SoftwarePhvPipeline_name = map[int32]string{
	0: "SOFTWARE_PHV_RXDMA",
	1: "SOFTWARE_PHV_TXDMA",
	2: "SOFTWARE_PHV_INGRESS",
	3: "SOFTWARE_PHV_EGRESS",
}
var SoftwarePhvPipeline_value = map[string]int32{
	"SOFTWARE_PHV_RXDMA":   0,
	"SOFTWARE_PHV_TXDMA":   1,
	"SOFTWARE_PHV_INGRESS": 2,
	"SOFTWARE_PHV_EGRESS":  3,
}

func (x SoftwarePhvPipeline) String() string {
	return proto.EnumName(SoftwarePhvPipeline_name, int32(x))
}
func (SoftwarePhvPipeline) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

type ProgramAddressReq struct {
	// Handle. E.g.: 'iris', 'p4plus'.
	Handle string `protobuf:"bytes,1,opt,name=handle" json:"handle,omitempty"`
	// Program name to resolve
	ProgName string `protobuf:"bytes,2,opt,name=prog_name,json=progName" json:"prog_name,omitempty"`
	// If resolve_label is false, returns the base address of the program.
	// Otherwise returns the PC offset (14 bits) of the program.
	ResolveLabel bool `protobuf:"varint,3,opt,name=resolve_label,json=resolveLabel" json:"resolve_label,omitempty"`
	// Label name to resolve
	Label string `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
}

func (m *ProgramAddressReq) Reset()                    { *m = ProgramAddressReq{} }
func (m *ProgramAddressReq) String() string            { return proto.CompactTextString(m) }
func (*ProgramAddressReq) ProtoMessage()               {}
func (*ProgramAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

func (m *ProgramAddressReq) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

func (m *ProgramAddressReq) GetProgName() string {
	if m != nil {
		return m.ProgName
	}
	return ""
}

func (m *ProgramAddressReq) GetResolveLabel() bool {
	if m != nil {
		return m.ResolveLabel
	}
	return false
}

func (m *ProgramAddressReq) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ProgramAddressResp struct {
	Addr int64 `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
}

func (m *ProgramAddressResp) Reset()                    { *m = ProgramAddressResp{} }
func (m *ProgramAddressResp) String() string            { return proto.CompactTextString(m) }
func (*ProgramAddressResp) ProtoMessage()               {}
func (*ProgramAddressResp) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{1} }

func (m *ProgramAddressResp) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

type GetProgramAddressRequestMsg struct {
	Request []*ProgramAddressReq `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *GetProgramAddressRequestMsg) Reset()                    { *m = GetProgramAddressRequestMsg{} }
func (m *GetProgramAddressRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*GetProgramAddressRequestMsg) ProtoMessage()               {}
func (*GetProgramAddressRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{2} }

func (m *GetProgramAddressRequestMsg) GetRequest() []*ProgramAddressReq {
	if m != nil {
		return m.Request
	}
	return nil
}

type ProgramAddressResponseMsg struct {
	Response []*ProgramAddressResp `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProgramAddressResponseMsg) Reset()                    { *m = ProgramAddressResponseMsg{} }
func (m *ProgramAddressResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProgramAddressResponseMsg) ProtoMessage()               {}
func (*ProgramAddressResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{3} }

func (m *ProgramAddressResponseMsg) GetResponse() []*ProgramAddressResp {
	if m != nil {
		return m.Response
	}
	return nil
}

type HbmAddressReq struct {
	// handle that specifies region in config (json) file
	Handle string `protobuf:"bytes,1,opt,name=handle" json:"handle,omitempty"`
}

func (m *HbmAddressReq) Reset()                    { *m = HbmAddressReq{} }
func (m *HbmAddressReq) String() string            { return proto.CompactTextString(m) }
func (*HbmAddressReq) ProtoMessage()               {}
func (*HbmAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{4} }

func (m *HbmAddressReq) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

type HbmAddressResp struct {
	Addr int64  `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
	Size uint32 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
}

func (m *HbmAddressResp) Reset()                    { *m = HbmAddressResp{} }
func (m *HbmAddressResp) String() string            { return proto.CompactTextString(m) }
func (*HbmAddressResp) ProtoMessage()               {}
func (*HbmAddressResp) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{5} }

func (m *HbmAddressResp) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *HbmAddressResp) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type AllocHbmAddressRequestMsg struct {
	Request []*HbmAddressReq `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *AllocHbmAddressRequestMsg) Reset()                    { *m = AllocHbmAddressRequestMsg{} }
func (m *AllocHbmAddressRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*AllocHbmAddressRequestMsg) ProtoMessage()               {}
func (*AllocHbmAddressRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{6} }

func (m *AllocHbmAddressRequestMsg) GetRequest() []*HbmAddressReq {
	if m != nil {
		return m.Request
	}
	return nil
}

type AllocHbmAddressResponseMsg struct {
	Response []*HbmAddressResp `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *AllocHbmAddressResponseMsg) Reset()                    { *m = AllocHbmAddressResponseMsg{} }
func (m *AllocHbmAddressResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*AllocHbmAddressResponseMsg) ProtoMessage()               {}
func (*AllocHbmAddressResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{7} }

func (m *AllocHbmAddressResponseMsg) GetResponse() []*HbmAddressResp {
	if m != nil {
		return m.Response
	}
	return nil
}

type LifBdfReq struct {
	Lif uint32 `protobuf:"varint,1,opt,name=lif" json:"lif,omitempty"`
	Bdf uint32 `protobuf:"varint,2,opt,name=bdf" json:"bdf,omitempty"`
}

func (m *LifBdfReq) Reset()                    { *m = LifBdfReq{} }
func (m *LifBdfReq) String() string            { return proto.CompactTextString(m) }
func (*LifBdfReq) ProtoMessage()               {}
func (*LifBdfReq) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{8} }

func (m *LifBdfReq) GetLif() uint32 {
	if m != nil {
		return m.Lif
	}
	return 0
}

func (m *LifBdfReq) GetBdf() uint32 {
	if m != nil {
		return m.Bdf
	}
	return 0
}

type LifBdfResp struct {
	Lif    uint32 `protobuf:"varint,1,opt,name=lif" json:"lif,omitempty"`
	Bdf    uint32 `protobuf:"varint,2,opt,name=bdf" json:"bdf,omitempty"`
	Status int32  `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (m *LifBdfResp) Reset()                    { *m = LifBdfResp{} }
func (m *LifBdfResp) String() string            { return proto.CompactTextString(m) }
func (*LifBdfResp) ProtoMessage()               {}
func (*LifBdfResp) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{9} }

func (m *LifBdfResp) GetLif() uint32 {
	if m != nil {
		return m.Lif
	}
	return 0
}

func (m *LifBdfResp) GetBdf() uint32 {
	if m != nil {
		return m.Bdf
	}
	return 0
}

func (m *LifBdfResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type ConfigureLifBdfRequestMsg struct {
	Request []*LifBdfReq `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ConfigureLifBdfRequestMsg) Reset()                    { *m = ConfigureLifBdfRequestMsg{} }
func (m *ConfigureLifBdfRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ConfigureLifBdfRequestMsg) ProtoMessage()               {}
func (*ConfigureLifBdfRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{10} }

func (m *ConfigureLifBdfRequestMsg) GetRequest() []*LifBdfReq {
	if m != nil {
		return m.Request
	}
	return nil
}

type ConfigureLifBdfResponseMsg struct {
	Response []*LifBdfResp `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ConfigureLifBdfResponseMsg) Reset()                    { *m = ConfigureLifBdfResponseMsg{} }
func (m *ConfigureLifBdfResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ConfigureLifBdfResponseMsg) ProtoMessage()               {}
func (*ConfigureLifBdfResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{11} }

func (m *ConfigureLifBdfResponseMsg) GetResponse() []*LifBdfResp {
	if m != nil {
		return m.Response
	}
	return nil
}

// SoftwarePhvStatus represents the current status of the PHVs
type SoftwarePhvStatus struct {
	Pipeline    SoftwarePhvPipeline `protobuf:"varint,1,opt,name=pipeline,enum=internal.SoftwarePhvPipeline" json:"pipeline,omitempty"`
	Enabled     bool                `protobuf:"varint,2,opt,name=enabled" json:"enabled,omitempty"`
	Done        bool                `protobuf:"varint,3,opt,name=done" json:"done,omitempty"`
	CurrentCntr uint32              `protobuf:"varint,4,opt,name=current_cntr,json=currentCntr" json:"current_cntr,omitempty"`
	InjectCntr  uint32              `protobuf:"varint,5,opt,name=inject_cntr,json=injectCntr" json:"inject_cntr,omitempty"`
}

func (m *SoftwarePhvStatus) Reset()                    { *m = SoftwarePhvStatus{} }
func (m *SoftwarePhvStatus) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvStatus) ProtoMessage()               {}
func (*SoftwarePhvStatus) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{12} }

func (m *SoftwarePhvStatus) GetPipeline() SoftwarePhvPipeline {
	if m != nil {
		return m.Pipeline
	}
	return SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA
}

func (m *SoftwarePhvStatus) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *SoftwarePhvStatus) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *SoftwarePhvStatus) GetCurrentCntr() uint32 {
	if m != nil {
		return m.CurrentCntr
	}
	return 0
}

func (m *SoftwarePhvStatus) GetInjectCntr() uint32 {
	if m != nil {
		return m.InjectCntr
	}
	return 0
}

// SoftwarePhvResponse is generic response
type SoftwarePhvResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *SoftwarePhvResponse) Reset()                    { *m = SoftwarePhvResponse{} }
func (m *SoftwarePhvResponse) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvResponse) ProtoMessage()               {}
func (*SoftwarePhvResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{13} }

func (m *SoftwarePhvResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// SoftwarePhvResponseMsg is batched response to SoftwarePhvRequestMsg
type SoftwarePhvResponseMsg struct {
	Response []*SoftwarePhvResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SoftwarePhvResponseMsg) Reset()                    { *m = SoftwarePhvResponseMsg{} }
func (m *SoftwarePhvResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvResponseMsg) ProtoMessage()               {}
func (*SoftwarePhvResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{14} }

func (m *SoftwarePhvResponseMsg) GetResponse() []*SoftwarePhvResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SoftwarePhvGetRequest is used to get information about a PHV
type SoftwarePhvGetRequest struct {
	Pipeline SoftwarePhvPipeline `protobuf:"varint,1,opt,name=pipeline,enum=internal.SoftwarePhvPipeline" json:"pipeline,omitempty"`
}

func (m *SoftwarePhvGetRequest) Reset()                    { *m = SoftwarePhvGetRequest{} }
func (m *SoftwarePhvGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvGetRequest) ProtoMessage()               {}
func (*SoftwarePhvGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{15} }

func (m *SoftwarePhvGetRequest) GetPipeline() SoftwarePhvPipeline {
	if m != nil {
		return m.Pipeline
	}
	return SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA
}

// SoftwarePhvGetRequestMsg is batched GET request for PHV
type SoftwarePhvGetRequestMsg struct {
	Request []*SoftwarePhvGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SoftwarePhvGetRequestMsg) Reset()                    { *m = SoftwarePhvGetRequestMsg{} }
func (m *SoftwarePhvGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvGetRequestMsg) ProtoMessage()               {}
func (*SoftwarePhvGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{16} }

func (m *SoftwarePhvGetRequestMsg) GetRequest() []*SoftwarePhvGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SoftwarePhvGetResponse captures all the information about a Sw PHV
// only if api_status indicates success, other fields are valid
type SoftwarePhvGetResponse struct {
	ApiStatus ApiStatus          `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *SoftwarePhvStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *SoftwarePhvGetResponse) Reset()                    { *m = SoftwarePhvGetResponse{} }
func (m *SoftwarePhvGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvGetResponse) ProtoMessage()               {}
func (*SoftwarePhvGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{17} }

func (m *SoftwarePhvGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SoftwarePhvGetResponse) GetStatus() *SoftwarePhvStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// SoftwarePhvGetResponseMsg is the batched response to SoftwarePhvGetRequestMsg
type SoftwarePhvGetResponseMsg struct {
	Response []*SoftwarePhvGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SoftwarePhvGetResponseMsg) Reset()                    { *m = SoftwarePhvGetResponseMsg{} }
func (m *SoftwarePhvGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvGetResponseMsg) ProtoMessage()               {}
func (*SoftwarePhvGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{18} }

func (m *SoftwarePhvGetResponseMsg) GetResponse() []*SoftwarePhvGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SoftwarePhvInject is the packet inject spec
type SoftwarePhvInject struct {
	Pipeline SoftwarePhvPipeline `protobuf:"varint,1,opt,name=pipeline,enum=internal.SoftwarePhvPipeline" json:"pipeline,omitempty"`
}

func (m *SoftwarePhvInject) Reset()                    { *m = SoftwarePhvInject{} }
func (m *SoftwarePhvInject) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvInject) ProtoMessage()               {}
func (*SoftwarePhvInject) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{19} }

func (m *SoftwarePhvInject) GetPipeline() SoftwarePhvPipeline {
	if m != nil {
		return m.Pipeline
	}
	return SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA
}

// SoftwarePhvInjectMsg is the inject message
type SoftwarePhvInjectMsg struct {
	Request []*SoftwarePhvInject `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SoftwarePhvInjectMsg) Reset()                    { *m = SoftwarePhvInjectMsg{} }
func (m *SoftwarePhvInjectMsg) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvInjectMsg) ProtoMessage()               {}
func (*SoftwarePhvInjectMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{20} }

func (m *SoftwarePhvInjectMsg) GetRequest() []*SoftwarePhvInject {
	if m != nil {
		return m.Request
	}
	return nil
}

type LogFlowRequestMsg struct {
	Request []*FWEvent `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LogFlowRequestMsg) Reset()                    { *m = LogFlowRequestMsg{} }
func (m *LogFlowRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LogFlowRequestMsg) ProtoMessage()               {}
func (*LogFlowRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{21} }

func (m *LogFlowRequestMsg) GetRequest() []*FWEvent {
	if m != nil {
		return m.Request
	}
	return nil
}

type LogFlowResponseMsg struct {
	Response []*LogFlowResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LogFlowResponseMsg) Reset()                    { *m = LogFlowResponseMsg{} }
func (m *LogFlowResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LogFlowResponseMsg) ProtoMessage()               {}
func (*LogFlowResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{22} }

func (m *LogFlowResponseMsg) GetResponse() []*LogFlowResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type LogFlowResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *LogFlowResponse) Reset()                    { *m = LogFlowResponse{} }
func (m *LogFlowResponse) String() string            { return proto.CompactTextString(m) }
func (*LogFlowResponse) ProtoMessage()               {}
func (*LogFlowResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{23} }

func (m *LogFlowResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// Codegen forms the Request and Response messages using the package name "internal"
// This is to calm the autogenerator
type EmptyRequest struct {
	Request []*Empty `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *EmptyRequest) Reset()                    { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string            { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()               {}
func (*EmptyRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{24} }

func (m *EmptyRequest) GetRequest() []*Empty {
	if m != nil {
		return m.Request
	}
	return nil
}

type EmptyResponse struct {
	Response []*Empty `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{25} }

func (m *EmptyResponse) GetResponse() []*Empty {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecCbKeyHandle is used to operate on a ipsec_cb either by its key or handle
type IpsecCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*IpsecCbKeyHandle_IpseccbId
	//	*IpsecCbKeyHandle_IpseccbHandle
	KeyOrHandle isIpsecCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *IpsecCbKeyHandle) Reset()                    { *m = IpsecCbKeyHandle{} }
func (m *IpsecCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbKeyHandle) ProtoMessage()               {}
func (*IpsecCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{26} }

type isIpsecCbKeyHandle_KeyOrHandle interface{ isIpsecCbKeyHandle_KeyOrHandle() }

type IpsecCbKeyHandle_IpseccbId struct {
	IpseccbId uint32 `protobuf:"varint,1,opt,name=ipseccb_id,json=ipseccbId,oneof"`
}
type IpsecCbKeyHandle_IpseccbHandle struct {
	IpseccbHandle uint64 `protobuf:"fixed64,2,opt,name=ipseccb_handle,json=ipseccbHandle,oneof"`
}

func (*IpsecCbKeyHandle_IpseccbId) isIpsecCbKeyHandle_KeyOrHandle()     {}
func (*IpsecCbKeyHandle_IpseccbHandle) isIpsecCbKeyHandle_KeyOrHandle() {}

func (m *IpsecCbKeyHandle) GetKeyOrHandle() isIpsecCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecCbKeyHandle) GetIpseccbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*IpsecCbKeyHandle_IpseccbId); ok {
		return x.IpseccbId
	}
	return 0
}

func (m *IpsecCbKeyHandle) GetIpseccbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*IpsecCbKeyHandle_IpseccbHandle); ok {
		return x.IpseccbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IpsecCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IpsecCbKeyHandle_OneofMarshaler, _IpsecCbKeyHandle_OneofUnmarshaler, _IpsecCbKeyHandle_OneofSizer, []interface{}{
		(*IpsecCbKeyHandle_IpseccbId)(nil),
		(*IpsecCbKeyHandle_IpseccbHandle)(nil),
	}
}

func _IpsecCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IpsecCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *IpsecCbKeyHandle_IpseccbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IpseccbId))
	case *IpsecCbKeyHandle_IpseccbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.IpseccbHandle))
	case nil:
	default:
		return fmt.Errorf("IpsecCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _IpsecCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IpsecCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.ipseccb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &IpsecCbKeyHandle_IpseccbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.ipseccb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &IpsecCbKeyHandle_IpseccbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _IpsecCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IpsecCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *IpsecCbKeyHandle_IpseccbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IpseccbId))
	case *IpsecCbKeyHandle_IpseccbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// IpsecCbSpec captures all the ipsec_cb level configuration
type IpsecCbSpec struct {
	KeyOrHandle     *IpsecCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Pi              uint32            `protobuf:"varint,2,opt,name=pi" json:"pi,omitempty"`
	Ci              uint32            `protobuf:"varint,3,opt,name=ci" json:"ci,omitempty"`
	TunnelSip4      uint32            `protobuf:"varint,4,opt,name=tunnel_sip4,json=tunnelSip4" json:"tunnel_sip4,omitempty"`
	TunnelDip4      uint32            `protobuf:"varint,5,opt,name=tunnel_dip4,json=tunnelDip4" json:"tunnel_dip4,omitempty"`
	IvSize          uint32            `protobuf:"varint,6,opt,name=iv_size,json=ivSize" json:"iv_size,omitempty"`
	IcvSize         uint32            `protobuf:"varint,7,opt,name=icv_size,json=icvSize" json:"icv_size,omitempty"`
	BlockSize       uint32            `protobuf:"varint,8,opt,name=block_size,json=blockSize" json:"block_size,omitempty"`
	KeyIndex        uint32            `protobuf:"varint,9,opt,name=key_index,json=keyIndex" json:"key_index,omitempty"`
	BarcoEncCmd     uint32            `protobuf:"varint,10,opt,name=barco_enc_cmd,json=barcoEncCmd" json:"barco_enc_cmd,omitempty"`
	Iv              uint64            `protobuf:"fixed64,11,opt,name=iv" json:"iv,omitempty"`
	IvSalt          uint32            `protobuf:"varint,12,opt,name=iv_salt,json=ivSalt" json:"iv_salt,omitempty"`
	EsnHi           uint32            `protobuf:"varint,13,opt,name=esn_hi,json=esnHi" json:"esn_hi,omitempty"`
	EsnLo           uint32            `protobuf:"varint,14,opt,name=esn_lo,json=esnLo" json:"esn_lo,omitempty"`
	Spi             uint32            `protobuf:"varint,15,opt,name=spi" json:"spi,omitempty"`
	ExpectedSeqNo   uint32            `protobuf:"varint,16,opt,name=expected_seq_no,json=expectedSeqNo" json:"expected_seq_no,omitempty"`
	SeqNoBmp        uint64            `protobuf:"fixed64,17,opt,name=seq_no_bmp,json=seqNoBmp" json:"seq_no_bmp,omitempty"`
	Sip6            *IPAddress        `protobuf:"bytes,18,opt,name=sip6" json:"sip6,omitempty"`
	Dip6            *IPAddress        `protobuf:"bytes,19,opt,name=dip6" json:"dip6,omitempty"`
	IsV6            uint32            `protobuf:"varint,20,opt,name=is_v6,json=isV6" json:"is_v6,omitempty"`
	VrfVlan         uint32            `protobuf:"varint,21,opt,name=vrf_vlan,json=vrfVlan" json:"vrf_vlan,omitempty"`
	LastReplaySeqNo uint32            `protobuf:"varint,22,opt,name=last_replay_seq_no,json=lastReplaySeqNo" json:"last_replay_seq_no,omitempty"`
	NewSpi          uint32            `protobuf:"varint,23,opt,name=new_spi,json=newSpi" json:"new_spi,omitempty"`
	NewKeyIndex     uint32            `protobuf:"varint,24,opt,name=new_key_index,json=newKeyIndex" json:"new_key_index,omitempty"`
	IsNatT          uint32            `protobuf:"varint,25,opt,name=is_nat_t,json=isNatT" json:"is_nat_t,omitempty"`
	Flags           uint32            `protobuf:"varint,26,opt,name=flags" json:"flags,omitempty"`
	IsRandom        uint32            `protobuf:"varint,27,opt,name=is_random,json=isRandom" json:"is_random,omitempty"`
	ExtraPad        uint32            `protobuf:"varint,28,opt,name=extra_pad,json=extraPad" json:"extra_pad,omitempty"`
	RxPkts          uint32            `protobuf:"varint,29,opt,name=rx_pkts,json=rxPkts" json:"rx_pkts,omitempty"`
	RxBytes         uint64            `protobuf:"fixed64,30,opt,name=rx_bytes,json=rxBytes" json:"rx_bytes,omitempty"`
	RxDrops         uint64            `protobuf:"fixed64,31,opt,name=rx_drops,json=rxDrops" json:"rx_drops,omitempty"`
	TxPkts          uint64            `protobuf:"fixed64,32,opt,name=tx_pkts,json=txPkts" json:"tx_pkts,omitempty"`
	TxBytes         uint64            `protobuf:"fixed64,33,opt,name=tx_bytes,json=txBytes" json:"tx_bytes,omitempty"`
	TxDrops         uint64            `protobuf:"fixed64,34,opt,name=tx_drops,json=txDrops" json:"tx_drops,omitempty"`
}

func (m *IpsecCbSpec) Reset()                    { *m = IpsecCbSpec{} }
func (m *IpsecCbSpec) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbSpec) ProtoMessage()               {}
func (*IpsecCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{27} }

func (m *IpsecCbSpec) GetKeyOrHandle() *IpsecCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecCbSpec) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *IpsecCbSpec) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

func (m *IpsecCbSpec) GetTunnelSip4() uint32 {
	if m != nil {
		return m.TunnelSip4
	}
	return 0
}

func (m *IpsecCbSpec) GetTunnelDip4() uint32 {
	if m != nil {
		return m.TunnelDip4
	}
	return 0
}

func (m *IpsecCbSpec) GetIvSize() uint32 {
	if m != nil {
		return m.IvSize
	}
	return 0
}

func (m *IpsecCbSpec) GetIcvSize() uint32 {
	if m != nil {
		return m.IcvSize
	}
	return 0
}

func (m *IpsecCbSpec) GetBlockSize() uint32 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *IpsecCbSpec) GetKeyIndex() uint32 {
	if m != nil {
		return m.KeyIndex
	}
	return 0
}

func (m *IpsecCbSpec) GetBarcoEncCmd() uint32 {
	if m != nil {
		return m.BarcoEncCmd
	}
	return 0
}

func (m *IpsecCbSpec) GetIv() uint64 {
	if m != nil {
		return m.Iv
	}
	return 0
}

func (m *IpsecCbSpec) GetIvSalt() uint32 {
	if m != nil {
		return m.IvSalt
	}
	return 0
}

func (m *IpsecCbSpec) GetEsnHi() uint32 {
	if m != nil {
		return m.EsnHi
	}
	return 0
}

func (m *IpsecCbSpec) GetEsnLo() uint32 {
	if m != nil {
		return m.EsnLo
	}
	return 0
}

func (m *IpsecCbSpec) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

func (m *IpsecCbSpec) GetExpectedSeqNo() uint32 {
	if m != nil {
		return m.ExpectedSeqNo
	}
	return 0
}

func (m *IpsecCbSpec) GetSeqNoBmp() uint64 {
	if m != nil {
		return m.SeqNoBmp
	}
	return 0
}

func (m *IpsecCbSpec) GetSip6() *IPAddress {
	if m != nil {
		return m.Sip6
	}
	return nil
}

func (m *IpsecCbSpec) GetDip6() *IPAddress {
	if m != nil {
		return m.Dip6
	}
	return nil
}

func (m *IpsecCbSpec) GetIsV6() uint32 {
	if m != nil {
		return m.IsV6
	}
	return 0
}

func (m *IpsecCbSpec) GetVrfVlan() uint32 {
	if m != nil {
		return m.VrfVlan
	}
	return 0
}

func (m *IpsecCbSpec) GetLastReplaySeqNo() uint32 {
	if m != nil {
		return m.LastReplaySeqNo
	}
	return 0
}

func (m *IpsecCbSpec) GetNewSpi() uint32 {
	if m != nil {
		return m.NewSpi
	}
	return 0
}

func (m *IpsecCbSpec) GetNewKeyIndex() uint32 {
	if m != nil {
		return m.NewKeyIndex
	}
	return 0
}

func (m *IpsecCbSpec) GetIsNatT() uint32 {
	if m != nil {
		return m.IsNatT
	}
	return 0
}

func (m *IpsecCbSpec) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *IpsecCbSpec) GetIsRandom() uint32 {
	if m != nil {
		return m.IsRandom
	}
	return 0
}

func (m *IpsecCbSpec) GetExtraPad() uint32 {
	if m != nil {
		return m.ExtraPad
	}
	return 0
}

func (m *IpsecCbSpec) GetRxPkts() uint32 {
	if m != nil {
		return m.RxPkts
	}
	return 0
}

func (m *IpsecCbSpec) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *IpsecCbSpec) GetRxDrops() uint64 {
	if m != nil {
		return m.RxDrops
	}
	return 0
}

func (m *IpsecCbSpec) GetTxPkts() uint64 {
	if m != nil {
		return m.TxPkts
	}
	return 0
}

func (m *IpsecCbSpec) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *IpsecCbSpec) GetTxDrops() uint64 {
	if m != nil {
		return m.TxDrops
	}
	return 0
}

// IpsecCbRequestMsg is batched add or modify ipseccb request
type IpsecCbRequestMsg struct {
	Request []*IpsecCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecCbRequestMsg) Reset()                    { *m = IpsecCbRequestMsg{} }
func (m *IpsecCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbRequestMsg) ProtoMessage()               {}
func (*IpsecCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{28} }

func (m *IpsecCbRequestMsg) GetRequest() []*IpsecCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecCbStatus is the operational status of a given ipseccb
type IpsecCbStatus struct {
	IpseccbHandle uint64 `protobuf:"fixed64,1,opt,name=ipseccb_handle,json=ipseccbHandle" json:"ipseccb_handle,omitempty"`
}

func (m *IpsecCbStatus) Reset()                    { *m = IpsecCbStatus{} }
func (m *IpsecCbStatus) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbStatus) ProtoMessage()               {}
func (*IpsecCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{29} }

func (m *IpsecCbStatus) GetIpseccbHandle() uint64 {
	if m != nil {
		return m.IpseccbHandle
	}
	return 0
}

// IpsecCbResponse is response to IpsecCbSpec
type IpsecCbResponse struct {
	ApiStatus     ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	IpseccbStatus *IpsecCbStatus `protobuf:"bytes,2,opt,name=ipseccb_status,json=ipseccbStatus" json:"ipseccb_status,omitempty"`
}

func (m *IpsecCbResponse) Reset()                    { *m = IpsecCbResponse{} }
func (m *IpsecCbResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbResponse) ProtoMessage()               {}
func (*IpsecCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{30} }

func (m *IpsecCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecCbResponse) GetIpseccbStatus() *IpsecCbStatus {
	if m != nil {
		return m.IpseccbStatus
	}
	return nil
}

// IpsecCbResponseMsg is batched response to IpsecCbRequestMsg
type IpsecCbResponseMsg struct {
	Response []*IpsecCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecCbResponseMsg) Reset()                    { *m = IpsecCbResponseMsg{} }
func (m *IpsecCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbResponseMsg) ProtoMessage()               {}
func (*IpsecCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{31} }

func (m *IpsecCbResponseMsg) GetResponse() []*IpsecCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecCbDeleteRequest is used to delete a ipseccb
type IpsecCbDeleteRequest struct {
	KeyOrHandle *IpsecCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecCbDeleteRequest) Reset()                    { *m = IpsecCbDeleteRequest{} }
func (m *IpsecCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbDeleteRequest) ProtoMessage()               {}
func (*IpsecCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{32} }

func (m *IpsecCbDeleteRequest) GetKeyOrHandle() *IpsecCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecCbDeleteRequestMsg is used to delete a batch of ipseccbs
type IpsecCbDeleteRequestMsg struct {
	Request []*IpsecCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecCbDeleteRequestMsg) Reset()                    { *m = IpsecCbDeleteRequestMsg{} }
func (m *IpsecCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbDeleteRequestMsg) ProtoMessage()               {}
func (*IpsecCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{33} }

func (m *IpsecCbDeleteRequestMsg) GetRequest() []*IpsecCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecCbDeleteResponseMsg is batched response to IpsecCbDeleteRequestMsg
type IpsecCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *IpsecCbDeleteResponseMsg) Reset()                    { *m = IpsecCbDeleteResponseMsg{} }
func (m *IpsecCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbDeleteResponseMsg) ProtoMessage()               {}
func (*IpsecCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{34} }

func (m *IpsecCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// IpsecCbGetRequest is used to get information about a ipseccb
type IpsecCbGetRequest struct {
	KeyOrHandle *IpsecCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecCbGetRequest) Reset()                    { *m = IpsecCbGetRequest{} }
func (m *IpsecCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetRequest) ProtoMessage()               {}
func (*IpsecCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{35} }

func (m *IpsecCbGetRequest) GetKeyOrHandle() *IpsecCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecCbGetRequestMsg is batched GET requests for ipseccbs
type IpsecCbGetRequestMsg struct {
	Request []*IpsecCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecCbGetRequestMsg) Reset()                    { *m = IpsecCbGetRequestMsg{} }
func (m *IpsecCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetRequestMsg) ProtoMessage()               {}
func (*IpsecCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{36} }

func (m *IpsecCbGetRequestMsg) GetRequest() []*IpsecCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecCbStats is the statistics object for each ipseccb
type IpsecCbStats struct {
}

func (m *IpsecCbStats) Reset()                    { *m = IpsecCbStats{} }
func (m *IpsecCbStats) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbStats) ProtoMessage()               {}
func (*IpsecCbStats) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{37} }

// IpsecCbGetResponse captures all the information about a ipseccb
// only if api_status indicates success, other fields are valid
type IpsecCbGetResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *IpsecCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *IpsecCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *IpsecCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *IpsecCbGetResponse) Reset()                    { *m = IpsecCbGetResponse{} }
func (m *IpsecCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetResponse) ProtoMessage()               {}
func (*IpsecCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{38} }

func (m *IpsecCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecCbGetResponse) GetSpec() *IpsecCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *IpsecCbGetResponse) GetStatus() *IpsecCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *IpsecCbGetResponse) GetStats() *IpsecCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// IpsecCbGetResponseMsg is batched response to IpsecCbGetRequestMsg
type IpsecCbGetResponseMsg struct {
	Response []*IpsecCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecCbGetResponseMsg) Reset()                    { *m = IpsecCbGetResponseMsg{} }
func (m *IpsecCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetResponseMsg) ProtoMessage()               {}
func (*IpsecCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{39} }

func (m *IpsecCbGetResponseMsg) GetResponse() []*IpsecCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TcpCbKeyHandle is used to operate on a tcp_cb either by its key or handle
type TcpCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*TcpCbKeyHandle_TcpcbId
	//	*TcpCbKeyHandle_TcpcbHandle
	KeyOrHandle isTcpCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *TcpCbKeyHandle) Reset()                    { *m = TcpCbKeyHandle{} }
func (m *TcpCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*TcpCbKeyHandle) ProtoMessage()               {}
func (*TcpCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{40} }

type isTcpCbKeyHandle_KeyOrHandle interface{ isTcpCbKeyHandle_KeyOrHandle() }

type TcpCbKeyHandle_TcpcbId struct {
	TcpcbId uint32 `protobuf:"varint,1,opt,name=tcpcb_id,json=tcpcbId,oneof"`
}
type TcpCbKeyHandle_TcpcbHandle struct {
	TcpcbHandle uint64 `protobuf:"fixed64,2,opt,name=tcpcb_handle,json=tcpcbHandle,oneof"`
}

func (*TcpCbKeyHandle_TcpcbId) isTcpCbKeyHandle_KeyOrHandle()     {}
func (*TcpCbKeyHandle_TcpcbHandle) isTcpCbKeyHandle_KeyOrHandle() {}

func (m *TcpCbKeyHandle) GetKeyOrHandle() isTcpCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TcpCbKeyHandle) GetTcpcbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*TcpCbKeyHandle_TcpcbId); ok {
		return x.TcpcbId
	}
	return 0
}

func (m *TcpCbKeyHandle) GetTcpcbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*TcpCbKeyHandle_TcpcbHandle); ok {
		return x.TcpcbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TcpCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TcpCbKeyHandle_OneofMarshaler, _TcpCbKeyHandle_OneofUnmarshaler, _TcpCbKeyHandle_OneofSizer, []interface{}{
		(*TcpCbKeyHandle_TcpcbId)(nil),
		(*TcpCbKeyHandle_TcpcbHandle)(nil),
	}
}

func _TcpCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TcpCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TcpCbKeyHandle_TcpcbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TcpcbId))
	case *TcpCbKeyHandle_TcpcbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.TcpcbHandle))
	case nil:
	default:
		return fmt.Errorf("TcpCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _TcpCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TcpCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.tcpcb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &TcpCbKeyHandle_TcpcbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.tcpcb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &TcpCbKeyHandle_TcpcbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _TcpCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TcpCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TcpCbKeyHandle_TcpcbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TcpcbId))
	case *TcpCbKeyHandle_TcpcbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TcpCbSpec captures all the tcp_cb level configuration
type TcpCbSpec struct {
	KeyOrHandle        *TcpCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	RcvNxt             uint32          `protobuf:"varint,2,opt,name=rcv_nxt,json=rcvNxt" json:"rcv_nxt,omitempty"`
	SndNxt             uint32          `protobuf:"varint,3,opt,name=snd_nxt,json=sndNxt" json:"snd_nxt,omitempty"`
	SndUna             uint32          `protobuf:"varint,4,opt,name=snd_una,json=sndUna" json:"snd_una,omitempty"`
	RcvTsval           uint32          `protobuf:"varint,5,opt,name=rcv_tsval,json=rcvTsval" json:"rcv_tsval,omitempty"`
	TsRecent           uint32          `protobuf:"varint,6,opt,name=ts_recent,json=tsRecent" json:"ts_recent,omitempty"`
	SerqBase           uint64          `protobuf:"fixed64,7,opt,name=serq_base,json=serqBase" json:"serq_base,omitempty"`
	DebugDol           uint32          `protobuf:"varint,8,opt,name=debug_dol,json=debugDol" json:"debug_dol,omitempty"`
	SesqBase           uint64          `protobuf:"fixed64,9,opt,name=sesq_base,json=sesqBase" json:"sesq_base,omitempty"`
	SesqPi             uint32          `protobuf:"varint,10,opt,name=sesq_pi,json=sesqPi" json:"sesq_pi,omitempty"`
	SesqCi             uint32          `protobuf:"varint,11,opt,name=sesq_ci,json=sesqCi" json:"sesq_ci,omitempty"`
	SndWnd             uint32          `protobuf:"varint,12,opt,name=snd_wnd,json=sndWnd" json:"snd_wnd,omitempty"`
	SndCwnd            uint32          `protobuf:"varint,13,opt,name=snd_cwnd,json=sndCwnd" json:"snd_cwnd,omitempty"`
	RcvMss             uint32          `protobuf:"varint,14,opt,name=rcv_mss,json=rcvMss" json:"rcv_mss,omitempty"`
	SourcePort         uint32          `protobuf:"varint,15,opt,name=source_port,json=sourcePort" json:"source_port,omitempty"`
	DestPort           uint32          `protobuf:"varint,16,opt,name=dest_port,json=destPort" json:"dest_port,omitempty"`
	HeaderTemplate     []byte          `protobuf:"bytes,17,opt,name=header_template,json=headerTemplate,proto3" json:"header_template,omitempty"`
	State              uint32          `protobuf:"varint,18,opt,name=state" json:"state,omitempty"`
	SourceLif          uint32          `protobuf:"varint,19,opt,name=source_lif,json=sourceLif" json:"source_lif,omitempty"`
	AsesqBase          uint64          `protobuf:"fixed64,20,opt,name=asesq_base,json=asesqBase" json:"asesq_base,omitempty"`
	AsesqPi            uint32          `protobuf:"varint,21,opt,name=asesq_pi,json=asesqPi" json:"asesq_pi,omitempty"`
	AsesqCi            uint32          `protobuf:"varint,22,opt,name=asesq_ci,json=asesqCi" json:"asesq_ci,omitempty"`
	DebugDolTx         uint32          `protobuf:"varint,23,opt,name=debug_dol_tx,json=debugDolTx" json:"debug_dol_tx,omitempty"`
	HeaderLen          uint32          `protobuf:"varint,24,opt,name=header_len,json=headerLen" json:"header_len,omitempty"`
	PendingAckSend     bool            `protobuf:"varint,25,opt,name=pending_ack_send,json=pendingAckSend" json:"pending_ack_send,omitempty"`
	L7ProxyType        AppRedirType    `protobuf:"varint,26,opt,name=l7_proxy_type,json=l7ProxyType,enum=types.AppRedirType" json:"l7_proxy_type,omitempty"`
	SesqRetxCi         uint32          `protobuf:"varint,27,opt,name=sesq_retx_ci,json=sesqRetxCi" json:"sesq_retx_ci,omitempty"`
	RetxSndUna         uint64          `protobuf:"varint,28,opt,name=retx_snd_una,json=retxSndUna" json:"retx_snd_una,omitempty"`
	RxTs               uint64          `protobuf:"varint,29,opt,name=rx_ts,json=rxTs" json:"rx_ts,omitempty"`
	Rto                uint64          `protobuf:"varint,30,opt,name=rto" json:"rto,omitempty"`
	SndCwndCnt         uint32          `protobuf:"varint,31,opt,name=snd_cwnd_cnt,json=sndCwndCnt" json:"snd_cwnd_cnt,omitempty"`
	DebugDolTblsetaddr uint32          `protobuf:"varint,32,opt,name=debug_dol_tblsetaddr,json=debugDolTblsetaddr" json:"debug_dol_tblsetaddr,omitempty"`
	SerqPi             uint32          `protobuf:"varint,33,opt,name=serq_pi,json=serqPi" json:"serq_pi,omitempty"`
	PredFlags          uint32          `protobuf:"varint,34,opt,name=pred_flags,json=predFlags" json:"pred_flags,omitempty"`
	OtherQid           uint32          `protobuf:"varint,35,opt,name=other_qid,json=otherQid" json:"other_qid,omitempty"`
	PacketsOut         uint32          `protobuf:"varint,36,opt,name=packets_out,json=packetsOut" json:"packets_out,omitempty"`
	RtoPi              uint32          `protobuf:"varint,37,opt,name=rto_pi,json=rtoPi" json:"rto_pi,omitempty"`
	RetxTimerCi        uint32          `protobuf:"varint,38,opt,name=retx_timer_ci,json=retxTimerCi" json:"retx_timer_ci,omitempty"`
	RtoBackoff         uint32          `protobuf:"varint,39,opt,name=rto_backoff,json=rtoBackoff" json:"rto_backoff,omitempty"`
	CpuId              uint32          `protobuf:"varint,40,opt,name=cpu_id,json=cpuId" json:"cpu_id,omitempty"`
	SerqCi             uint32          `protobuf:"varint,41,opt,name=serq_ci,json=serqCi" json:"serq_ci,omitempty"`
}

func (m *TcpCbSpec) Reset()                    { *m = TcpCbSpec{} }
func (m *TcpCbSpec) String() string            { return proto.CompactTextString(m) }
func (*TcpCbSpec) ProtoMessage()               {}
func (*TcpCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{41} }

func (m *TcpCbSpec) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TcpCbSpec) GetRcvNxt() uint32 {
	if m != nil {
		return m.RcvNxt
	}
	return 0
}

func (m *TcpCbSpec) GetSndNxt() uint32 {
	if m != nil {
		return m.SndNxt
	}
	return 0
}

func (m *TcpCbSpec) GetSndUna() uint32 {
	if m != nil {
		return m.SndUna
	}
	return 0
}

func (m *TcpCbSpec) GetRcvTsval() uint32 {
	if m != nil {
		return m.RcvTsval
	}
	return 0
}

func (m *TcpCbSpec) GetTsRecent() uint32 {
	if m != nil {
		return m.TsRecent
	}
	return 0
}

func (m *TcpCbSpec) GetSerqBase() uint64 {
	if m != nil {
		return m.SerqBase
	}
	return 0
}

func (m *TcpCbSpec) GetDebugDol() uint32 {
	if m != nil {
		return m.DebugDol
	}
	return 0
}

func (m *TcpCbSpec) GetSesqBase() uint64 {
	if m != nil {
		return m.SesqBase
	}
	return 0
}

func (m *TcpCbSpec) GetSesqPi() uint32 {
	if m != nil {
		return m.SesqPi
	}
	return 0
}

func (m *TcpCbSpec) GetSesqCi() uint32 {
	if m != nil {
		return m.SesqCi
	}
	return 0
}

func (m *TcpCbSpec) GetSndWnd() uint32 {
	if m != nil {
		return m.SndWnd
	}
	return 0
}

func (m *TcpCbSpec) GetSndCwnd() uint32 {
	if m != nil {
		return m.SndCwnd
	}
	return 0
}

func (m *TcpCbSpec) GetRcvMss() uint32 {
	if m != nil {
		return m.RcvMss
	}
	return 0
}

func (m *TcpCbSpec) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *TcpCbSpec) GetDestPort() uint32 {
	if m != nil {
		return m.DestPort
	}
	return 0
}

func (m *TcpCbSpec) GetHeaderTemplate() []byte {
	if m != nil {
		return m.HeaderTemplate
	}
	return nil
}

func (m *TcpCbSpec) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *TcpCbSpec) GetSourceLif() uint32 {
	if m != nil {
		return m.SourceLif
	}
	return 0
}

func (m *TcpCbSpec) GetAsesqBase() uint64 {
	if m != nil {
		return m.AsesqBase
	}
	return 0
}

func (m *TcpCbSpec) GetAsesqPi() uint32 {
	if m != nil {
		return m.AsesqPi
	}
	return 0
}

func (m *TcpCbSpec) GetAsesqCi() uint32 {
	if m != nil {
		return m.AsesqCi
	}
	return 0
}

func (m *TcpCbSpec) GetDebugDolTx() uint32 {
	if m != nil {
		return m.DebugDolTx
	}
	return 0
}

func (m *TcpCbSpec) GetHeaderLen() uint32 {
	if m != nil {
		return m.HeaderLen
	}
	return 0
}

func (m *TcpCbSpec) GetPendingAckSend() bool {
	if m != nil {
		return m.PendingAckSend
	}
	return false
}

func (m *TcpCbSpec) GetL7ProxyType() AppRedirType {
	if m != nil {
		return m.L7ProxyType
	}
	return AppRedirType_APP_REDIR_TYPE_NONE
}

func (m *TcpCbSpec) GetSesqRetxCi() uint32 {
	if m != nil {
		return m.SesqRetxCi
	}
	return 0
}

func (m *TcpCbSpec) GetRetxSndUna() uint64 {
	if m != nil {
		return m.RetxSndUna
	}
	return 0
}

func (m *TcpCbSpec) GetRxTs() uint64 {
	if m != nil {
		return m.RxTs
	}
	return 0
}

func (m *TcpCbSpec) GetRto() uint64 {
	if m != nil {
		return m.Rto
	}
	return 0
}

func (m *TcpCbSpec) GetSndCwndCnt() uint32 {
	if m != nil {
		return m.SndCwndCnt
	}
	return 0
}

func (m *TcpCbSpec) GetDebugDolTblsetaddr() uint32 {
	if m != nil {
		return m.DebugDolTblsetaddr
	}
	return 0
}

func (m *TcpCbSpec) GetSerqPi() uint32 {
	if m != nil {
		return m.SerqPi
	}
	return 0
}

func (m *TcpCbSpec) GetPredFlags() uint32 {
	if m != nil {
		return m.PredFlags
	}
	return 0
}

func (m *TcpCbSpec) GetOtherQid() uint32 {
	if m != nil {
		return m.OtherQid
	}
	return 0
}

func (m *TcpCbSpec) GetPacketsOut() uint32 {
	if m != nil {
		return m.PacketsOut
	}
	return 0
}

func (m *TcpCbSpec) GetRtoPi() uint32 {
	if m != nil {
		return m.RtoPi
	}
	return 0
}

func (m *TcpCbSpec) GetRetxTimerCi() uint32 {
	if m != nil {
		return m.RetxTimerCi
	}
	return 0
}

func (m *TcpCbSpec) GetRtoBackoff() uint32 {
	if m != nil {
		return m.RtoBackoff
	}
	return 0
}

func (m *TcpCbSpec) GetCpuId() uint32 {
	if m != nil {
		return m.CpuId
	}
	return 0
}

func (m *TcpCbSpec) GetSerqCi() uint32 {
	if m != nil {
		return m.SerqCi
	}
	return 0
}

// TcpCbRequestMsg is batched add or modify tcpcb request
type TcpCbRequestMsg struct {
	Request []*TcpCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbRequestMsg) Reset()                    { *m = TcpCbRequestMsg{} }
func (m *TcpCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbRequestMsg) ProtoMessage()               {}
func (*TcpCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{42} }

func (m *TcpCbRequestMsg) GetRequest() []*TcpCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpCbStatus is the operational status of a given tcpcb
type TcpCbStatus struct {
	TcpcbHandle uint64 `protobuf:"fixed64,1,opt,name=tcpcb_handle,json=tcpcbHandle" json:"tcpcb_handle,omitempty"`
}

func (m *TcpCbStatus) Reset()                    { *m = TcpCbStatus{} }
func (m *TcpCbStatus) String() string            { return proto.CompactTextString(m) }
func (*TcpCbStatus) ProtoMessage()               {}
func (*TcpCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{43} }

func (m *TcpCbStatus) GetTcpcbHandle() uint64 {
	if m != nil {
		return m.TcpcbHandle
	}
	return 0
}

// TcpCbResponse is response to TcpCbSpec
type TcpCbResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	TcpcbStatus *TcpCbStatus `protobuf:"bytes,2,opt,name=tcpcb_status,json=tcpcbStatus" json:"tcpcb_status,omitempty"`
}

func (m *TcpCbResponse) Reset()                    { *m = TcpCbResponse{} }
func (m *TcpCbResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpCbResponse) ProtoMessage()               {}
func (*TcpCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{44} }

func (m *TcpCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpCbResponse) GetTcpcbStatus() *TcpCbStatus {
	if m != nil {
		return m.TcpcbStatus
	}
	return nil
}

// TcpCbResponseMsg is batched response to TcpCbRequestMsg
type TcpCbResponseMsg struct {
	Response []*TcpCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TcpCbResponseMsg) Reset()                    { *m = TcpCbResponseMsg{} }
func (m *TcpCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbResponseMsg) ProtoMessage()               {}
func (*TcpCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{45} }

func (m *TcpCbResponseMsg) GetResponse() []*TcpCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TcpCbDeleteRequest is used to delete a tcpcb
type TcpCbDeleteRequest struct {
	KeyOrHandle *TcpCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TcpCbDeleteRequest) Reset()                    { *m = TcpCbDeleteRequest{} }
func (m *TcpCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteRequest) ProtoMessage()               {}
func (*TcpCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{46} }

func (m *TcpCbDeleteRequest) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TcpCbDeleteRequestMsg is used to delete a batch of tcpcbs
type TcpCbDeleteRequestMsg struct {
	Request []*TcpCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbDeleteRequestMsg) Reset()                    { *m = TcpCbDeleteRequestMsg{} }
func (m *TcpCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteRequestMsg) ProtoMessage()               {}
func (*TcpCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{47} }

func (m *TcpCbDeleteRequestMsg) GetRequest() []*TcpCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpCbDeleteResponseMsg is batched response to TcpCbDeleteRequestMsg
type TcpCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *TcpCbDeleteResponseMsg) Reset()                    { *m = TcpCbDeleteResponseMsg{} }
func (m *TcpCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteResponseMsg) ProtoMessage()               {}
func (*TcpCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{48} }

func (m *TcpCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// TcpCbGetRequest is used to get information about a tcpcb
type TcpCbGetRequest struct {
	KeyOrHandle *TcpCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TcpCbGetRequest) Reset()                    { *m = TcpCbGetRequest{} }
func (m *TcpCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetRequest) ProtoMessage()               {}
func (*TcpCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{49} }

func (m *TcpCbGetRequest) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TcpCbGetRequestMsg is batched GET requests for tcpcbs
type TcpCbGetRequestMsg struct {
	Request []*TcpCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbGetRequestMsg) Reset()                    { *m = TcpCbGetRequestMsg{} }
func (m *TcpCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetRequestMsg) ProtoMessage()               {}
func (*TcpCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{50} }

func (m *TcpCbGetRequestMsg) GetRequest() []*TcpCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpCbStats is the statistics object for each tcpcb
type TcpCbStats struct {
	BytesRcvd            uint64 `protobuf:"varint,1,opt,name=bytes_rcvd,json=bytesRcvd" json:"bytes_rcvd,omitempty"`
	PktsRcvd             uint64 `protobuf:"varint,2,opt,name=pkts_rcvd,json=pktsRcvd" json:"pkts_rcvd,omitempty"`
	PagesAlloced         uint64 `protobuf:"varint,3,opt,name=pages_alloced,json=pagesAlloced" json:"pages_alloced,omitempty"`
	DescAlloced          uint64 `protobuf:"varint,4,opt,name=desc_alloced,json=descAlloced" json:"desc_alloced,omitempty"`
	DebugNumPktToMem     uint64 `protobuf:"varint,5,opt,name=debug_num_pkt_to_mem,json=debugNumPktToMem" json:"debug_num_pkt_to_mem,omitempty"`
	DebugNumPhvToMem     uint64 `protobuf:"varint,6,opt,name=debug_num_phv_to_mem,json=debugNumPhvToMem" json:"debug_num_phv_to_mem,omitempty"`
	DebugAtomicDelta     uint32 `protobuf:"varint,8,opt,name=debug_atomic_delta,json=debugAtomicDelta" json:"debug_atomic_delta,omitempty"`
	DebugAtomic0Incr1247 uint32 `protobuf:"varint,9,opt,name=debug_atomic0_incr1247,json=debugAtomic0Incr1247" json:"debug_atomic0_incr1247,omitempty"`
	DebugAtomic1Incr247  uint32 `protobuf:"varint,10,opt,name=debug_atomic1_incr247,json=debugAtomic1Incr247" json:"debug_atomic1_incr247,omitempty"`
	DebugAtomic2Incr47   uint32 `protobuf:"varint,11,opt,name=debug_atomic2_incr47,json=debugAtomic2Incr47" json:"debug_atomic2_incr47,omitempty"`
	DebugAtomic3Incr47   uint32 `protobuf:"varint,12,opt,name=debug_atomic3_incr47,json=debugAtomic3Incr47" json:"debug_atomic3_incr47,omitempty"`
	DebugAtomic4Incr7    uint32 `protobuf:"varint,13,opt,name=debug_atomic4_incr7,json=debugAtomic4Incr7" json:"debug_atomic4_incr7,omitempty"`
	DebugAtomic5Incr7    uint32 `protobuf:"varint,14,opt,name=debug_atomic5_incr7,json=debugAtomic5Incr7" json:"debug_atomic5_incr7,omitempty"`
	DebugAtomic6Incr7    uint32 `protobuf:"varint,15,opt,name=debug_atomic6_incr7,json=debugAtomic6Incr7" json:"debug_atomic6_incr7,omitempty"`
	BytesAcked           uint64 `protobuf:"varint,16,opt,name=bytes_acked,json=bytesAcked" json:"bytes_acked,omitempty"`
	SlowPathCnt          uint64 `protobuf:"varint,17,opt,name=slow_path_cnt,json=slowPathCnt" json:"slow_path_cnt,omitempty"`
	SerqFullCnt          uint64 `protobuf:"varint,18,opt,name=serq_full_cnt,json=serqFullCnt" json:"serq_full_cnt,omitempty"`
	OooCnt               uint64 `protobuf:"varint,19,opt,name=ooo_cnt,json=oooCnt" json:"ooo_cnt,omitempty"`
	BytesSent            uint64 `protobuf:"varint,10001,opt,name=bytes_sent,json=bytesSent" json:"bytes_sent,omitempty"`
	PktsSent             uint64 `protobuf:"varint,10002,opt,name=pkts_sent,json=pktsSent" json:"pkts_sent,omitempty"`
	DebugNumPhvToPkt     uint64 `protobuf:"varint,10003,opt,name=debug_num_phv_to_pkt,json=debugNumPhvToPkt" json:"debug_num_phv_to_pkt,omitempty"`
	DebugNumMemToPkt     uint64 `protobuf:"varint,10004,opt,name=debug_num_mem_to_pkt,json=debugNumMemToPkt" json:"debug_num_mem_to_pkt,omitempty"`
	SesqPi               uint32 `protobuf:"varint,10005,opt,name=sesq_pi,json=sesqPi" json:"sesq_pi,omitempty"`
	SesqCi               uint32 `protobuf:"varint,10006,opt,name=sesq_ci,json=sesqCi" json:"sesq_ci,omitempty"`
	SendAckPi            uint32 `protobuf:"varint,10007,opt,name=send_ack_pi,json=sendAckPi" json:"send_ack_pi,omitempty"`
	SendAckCi            uint32 `protobuf:"varint,10008,opt,name=send_ack_ci,json=sendAckCi" json:"send_ack_ci,omitempty"`
	DelAckPi             uint32 `protobuf:"varint,10009,opt,name=del_ack_pi,json=delAckPi" json:"del_ack_pi,omitempty"`
	DelAckCi             uint32 `protobuf:"varint,10010,opt,name=del_ack_ci,json=delAckCi" json:"del_ack_ci,omitempty"`
	RetxTimerPi          uint32 `protobuf:"varint,10011,opt,name=retx_timer_pi,json=retxTimerPi" json:"retx_timer_pi,omitempty"`
	RetxTimerCi          uint32 `protobuf:"varint,10012,opt,name=retx_timer_ci,json=retxTimerCi" json:"retx_timer_ci,omitempty"`
	AsesqPi              uint32 `protobuf:"varint,10013,opt,name=asesq_pi,json=asesqPi" json:"asesq_pi,omitempty"`
	AsesqCi              uint32 `protobuf:"varint,10014,opt,name=asesq_ci,json=asesqCi" json:"asesq_ci,omitempty"`
	PendingTxPi          uint32 `protobuf:"varint,10015,opt,name=pending_tx_pi,json=pendingTxPi" json:"pending_tx_pi,omitempty"`
	PendingTxCi          uint32 `protobuf:"varint,10016,opt,name=pending_tx_ci,json=pendingTxCi" json:"pending_tx_ci,omitempty"`
	FastRetransPi        uint32 `protobuf:"varint,10017,opt,name=fast_retrans_pi,json=fastRetransPi" json:"fast_retrans_pi,omitempty"`
	FastRetransCi        uint32 `protobuf:"varint,10018,opt,name=fast_retrans_ci,json=fastRetransCi" json:"fast_retrans_ci,omitempty"`
	CleanRetxPi          uint32 `protobuf:"varint,10019,opt,name=clean_retx_pi,json=cleanRetxPi" json:"clean_retx_pi,omitempty"`
	CleanRetxCi          uint32 `protobuf:"varint,10020,opt,name=clean_retx_ci,json=cleanRetxCi" json:"clean_retx_ci,omitempty"`
	PacketsOut           uint32 `protobuf:"varint,10021,opt,name=packets_out,json=packetsOut" json:"packets_out,omitempty"`
	RtoPi                uint32 `protobuf:"varint,10022,opt,name=rto_pi,json=rtoPi" json:"rto_pi,omitempty"`
	SesqRetxCi           uint32 `protobuf:"varint,10023,opt,name=sesq_retx_ci,json=sesqRetxCi" json:"sesq_retx_ci,omitempty"`
	AsesqRetxCi          uint32 `protobuf:"varint,10024,opt,name=asesq_retx_ci,json=asesqRetxCi" json:"asesq_retx_ci,omitempty"`
	TxRingPi             uint32 `protobuf:"varint,10025,opt,name=tx_ring_pi,json=txRingPi" json:"tx_ring_pi,omitempty"`
	PartialAckCnt        uint32 `protobuf:"varint,10026,opt,name=partial_ack_cnt,json=partialAckCnt" json:"partial_ack_cnt,omitempty"`
}

func (m *TcpCbStats) Reset()                    { *m = TcpCbStats{} }
func (m *TcpCbStats) String() string            { return proto.CompactTextString(m) }
func (*TcpCbStats) ProtoMessage()               {}
func (*TcpCbStats) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{51} }

func (m *TcpCbStats) GetBytesRcvd() uint64 {
	if m != nil {
		return m.BytesRcvd
	}
	return 0
}

func (m *TcpCbStats) GetPktsRcvd() uint64 {
	if m != nil {
		return m.PktsRcvd
	}
	return 0
}

func (m *TcpCbStats) GetPagesAlloced() uint64 {
	if m != nil {
		return m.PagesAlloced
	}
	return 0
}

func (m *TcpCbStats) GetDescAlloced() uint64 {
	if m != nil {
		return m.DescAlloced
	}
	return 0
}

func (m *TcpCbStats) GetDebugNumPktToMem() uint64 {
	if m != nil {
		return m.DebugNumPktToMem
	}
	return 0
}

func (m *TcpCbStats) GetDebugNumPhvToMem() uint64 {
	if m != nil {
		return m.DebugNumPhvToMem
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomicDelta() uint32 {
	if m != nil {
		return m.DebugAtomicDelta
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic0Incr1247() uint32 {
	if m != nil {
		return m.DebugAtomic0Incr1247
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic1Incr247() uint32 {
	if m != nil {
		return m.DebugAtomic1Incr247
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic2Incr47() uint32 {
	if m != nil {
		return m.DebugAtomic2Incr47
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic3Incr47() uint32 {
	if m != nil {
		return m.DebugAtomic3Incr47
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic4Incr7() uint32 {
	if m != nil {
		return m.DebugAtomic4Incr7
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic5Incr7() uint32 {
	if m != nil {
		return m.DebugAtomic5Incr7
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic6Incr7() uint32 {
	if m != nil {
		return m.DebugAtomic6Incr7
	}
	return 0
}

func (m *TcpCbStats) GetBytesAcked() uint64 {
	if m != nil {
		return m.BytesAcked
	}
	return 0
}

func (m *TcpCbStats) GetSlowPathCnt() uint64 {
	if m != nil {
		return m.SlowPathCnt
	}
	return 0
}

func (m *TcpCbStats) GetSerqFullCnt() uint64 {
	if m != nil {
		return m.SerqFullCnt
	}
	return 0
}

func (m *TcpCbStats) GetOooCnt() uint64 {
	if m != nil {
		return m.OooCnt
	}
	return 0
}

func (m *TcpCbStats) GetBytesSent() uint64 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

func (m *TcpCbStats) GetPktsSent() uint64 {
	if m != nil {
		return m.PktsSent
	}
	return 0
}

func (m *TcpCbStats) GetDebugNumPhvToPkt() uint64 {
	if m != nil {
		return m.DebugNumPhvToPkt
	}
	return 0
}

func (m *TcpCbStats) GetDebugNumMemToPkt() uint64 {
	if m != nil {
		return m.DebugNumMemToPkt
	}
	return 0
}

func (m *TcpCbStats) GetSesqPi() uint32 {
	if m != nil {
		return m.SesqPi
	}
	return 0
}

func (m *TcpCbStats) GetSesqCi() uint32 {
	if m != nil {
		return m.SesqCi
	}
	return 0
}

func (m *TcpCbStats) GetSendAckPi() uint32 {
	if m != nil {
		return m.SendAckPi
	}
	return 0
}

func (m *TcpCbStats) GetSendAckCi() uint32 {
	if m != nil {
		return m.SendAckCi
	}
	return 0
}

func (m *TcpCbStats) GetDelAckPi() uint32 {
	if m != nil {
		return m.DelAckPi
	}
	return 0
}

func (m *TcpCbStats) GetDelAckCi() uint32 {
	if m != nil {
		return m.DelAckCi
	}
	return 0
}

func (m *TcpCbStats) GetRetxTimerPi() uint32 {
	if m != nil {
		return m.RetxTimerPi
	}
	return 0
}

func (m *TcpCbStats) GetRetxTimerCi() uint32 {
	if m != nil {
		return m.RetxTimerCi
	}
	return 0
}

func (m *TcpCbStats) GetAsesqPi() uint32 {
	if m != nil {
		return m.AsesqPi
	}
	return 0
}

func (m *TcpCbStats) GetAsesqCi() uint32 {
	if m != nil {
		return m.AsesqCi
	}
	return 0
}

func (m *TcpCbStats) GetPendingTxPi() uint32 {
	if m != nil {
		return m.PendingTxPi
	}
	return 0
}

func (m *TcpCbStats) GetPendingTxCi() uint32 {
	if m != nil {
		return m.PendingTxCi
	}
	return 0
}

func (m *TcpCbStats) GetFastRetransPi() uint32 {
	if m != nil {
		return m.FastRetransPi
	}
	return 0
}

func (m *TcpCbStats) GetFastRetransCi() uint32 {
	if m != nil {
		return m.FastRetransCi
	}
	return 0
}

func (m *TcpCbStats) GetCleanRetxPi() uint32 {
	if m != nil {
		return m.CleanRetxPi
	}
	return 0
}

func (m *TcpCbStats) GetCleanRetxCi() uint32 {
	if m != nil {
		return m.CleanRetxCi
	}
	return 0
}

func (m *TcpCbStats) GetPacketsOut() uint32 {
	if m != nil {
		return m.PacketsOut
	}
	return 0
}

func (m *TcpCbStats) GetRtoPi() uint32 {
	if m != nil {
		return m.RtoPi
	}
	return 0
}

func (m *TcpCbStats) GetSesqRetxCi() uint32 {
	if m != nil {
		return m.SesqRetxCi
	}
	return 0
}

func (m *TcpCbStats) GetAsesqRetxCi() uint32 {
	if m != nil {
		return m.AsesqRetxCi
	}
	return 0
}

func (m *TcpCbStats) GetTxRingPi() uint32 {
	if m != nil {
		return m.TxRingPi
	}
	return 0
}

func (m *TcpCbStats) GetPartialAckCnt() uint32 {
	if m != nil {
		return m.PartialAckCnt
	}
	return 0
}

// TcpCbGetResponse captures all the information about a tcpcb
// only if api_status indicates success, other fields are valid
type TcpCbGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *TcpCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *TcpCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *TcpCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *TcpCbGetResponse) Reset()                    { *m = TcpCbGetResponse{} }
func (m *TcpCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetResponse) ProtoMessage()               {}
func (*TcpCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{52} }

func (m *TcpCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpCbGetResponse) GetSpec() *TcpCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TcpCbGetResponse) GetStatus() *TcpCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TcpCbGetResponse) GetStats() *TcpCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// TcpCbGetResponseMsg is batched response to TcpCbGetRequestMsg
type TcpCbGetResponseMsg struct {
	Response []*TcpCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TcpCbGetResponseMsg) Reset()                    { *m = TcpCbGetResponseMsg{} }
func (m *TcpCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetResponseMsg) ProtoMessage()               {}
func (*TcpCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{53} }

func (m *TcpCbGetResponseMsg) GetResponse() []*TcpCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TlsCbKeyHandle is used to operate on a tlscb either by its key or handle
type TlsCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*TlsCbKeyHandle_TlscbId
	//	*TlsCbKeyHandle_TlscbHandle
	KeyOrHandle isTlsCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *TlsCbKeyHandle) Reset()                    { *m = TlsCbKeyHandle{} }
func (m *TlsCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*TlsCbKeyHandle) ProtoMessage()               {}
func (*TlsCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{54} }

type isTlsCbKeyHandle_KeyOrHandle interface{ isTlsCbKeyHandle_KeyOrHandle() }

type TlsCbKeyHandle_TlscbId struct {
	TlscbId uint32 `protobuf:"varint,1,opt,name=tlscb_id,json=tlscbId,oneof"`
}
type TlsCbKeyHandle_TlscbHandle struct {
	TlscbHandle uint64 `protobuf:"fixed64,2,opt,name=tlscb_handle,json=tlscbHandle,oneof"`
}

func (*TlsCbKeyHandle_TlscbId) isTlsCbKeyHandle_KeyOrHandle()     {}
func (*TlsCbKeyHandle_TlscbHandle) isTlsCbKeyHandle_KeyOrHandle() {}

func (m *TlsCbKeyHandle) GetKeyOrHandle() isTlsCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TlsCbKeyHandle) GetTlscbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*TlsCbKeyHandle_TlscbId); ok {
		return x.TlscbId
	}
	return 0
}

func (m *TlsCbKeyHandle) GetTlscbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*TlsCbKeyHandle_TlscbHandle); ok {
		return x.TlscbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TlsCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TlsCbKeyHandle_OneofMarshaler, _TlsCbKeyHandle_OneofUnmarshaler, _TlsCbKeyHandle_OneofSizer, []interface{}{
		(*TlsCbKeyHandle_TlscbId)(nil),
		(*TlsCbKeyHandle_TlscbHandle)(nil),
	}
}

func _TlsCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TlsCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TlsCbKeyHandle_TlscbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TlscbId))
	case *TlsCbKeyHandle_TlscbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.TlscbHandle))
	case nil:
	default:
		return fmt.Errorf("TlsCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _TlsCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TlsCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.tlscb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &TlsCbKeyHandle_TlscbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.tlscb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &TlsCbKeyHandle_TlscbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _TlsCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TlsCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TlsCbKeyHandle_TlscbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TlscbId))
	case *TlsCbKeyHandle_TlscbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TlsCbSpec captures all the tlscb level configuration
type TlsCbSpec struct {
	KeyOrHandle             *TlsCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	NicDecHead              uint32          `protobuf:"varint,2,opt,name=nic_dec_head,json=nicDecHead" json:"nic_dec_head,omitempty"`
	NicDecTail              uint32          `protobuf:"varint,3,opt,name=nic_dec_tail,json=nicDecTail" json:"nic_dec_tail,omitempty"`
	Command                 uint32          `protobuf:"varint,4,opt,name=command" json:"command,omitempty"`
	DebugDol                uint32          `protobuf:"varint,5,opt,name=debug_dol,json=debugDol" json:"debug_dol,omitempty"`
	SerqPi                  uint32          `protobuf:"varint,6,opt,name=serq_pi,json=serqPi" json:"serq_pi,omitempty"`
	SerqCi                  uint32          `protobuf:"varint,7,opt,name=serq_ci,json=serqCi" json:"serq_ci,omitempty"`
	BsqPi                   uint32          `protobuf:"varint,8,opt,name=bsq_pi,json=bsqPi" json:"bsq_pi,omitempty"`
	BsqCi                   uint32          `protobuf:"varint,9,opt,name=bsq_ci,json=bsqCi" json:"bsq_ci,omitempty"`
	CryptoKeyIdx            uint32          `protobuf:"varint,10,opt,name=crypto_key_idx,json=cryptoKeyIdx" json:"crypto_key_idx,omitempty"`
	SerqBase                uint32          `protobuf:"varint,11,opt,name=serq_base,json=serqBase" json:"serq_base,omitempty"`
	SesqBase                uint32          `protobuf:"varint,12,opt,name=sesq_base,json=sesqBase" json:"sesq_base,omitempty"`
	TnmdrAlloc              uint64          `protobuf:"fixed64,13,opt,name=tnmdr_alloc,json=tnmdrAlloc" json:"tnmdr_alloc,omitempty"`
	TnmprAlloc              uint64          `protobuf:"fixed64,14,opt,name=tnmpr_alloc,json=tnmprAlloc" json:"tnmpr_alloc,omitempty"`
	RnmdrFree               uint64          `protobuf:"fixed64,15,opt,name=rnmdr_free,json=rnmdrFree" json:"rnmdr_free,omitempty"`
	RnmprFree               uint64          `protobuf:"fixed64,16,opt,name=rnmpr_free,json=rnmprFree" json:"rnmpr_free,omitempty"`
	EncRequests             uint64          `protobuf:"fixed64,17,opt,name=enc_requests,json=encRequests" json:"enc_requests,omitempty"`
	EncCompletions          uint64          `protobuf:"fixed64,18,opt,name=enc_completions,json=encCompletions" json:"enc_completions,omitempty"`
	EncFailures             uint64          `protobuf:"fixed64,19,opt,name=enc_failures,json=encFailures" json:"enc_failures,omitempty"`
	DecRequests             uint64          `protobuf:"fixed64,20,opt,name=dec_requests,json=decRequests" json:"dec_requests,omitempty"`
	DecCompletions          uint64          `protobuf:"fixed64,21,opt,name=dec_completions,json=decCompletions" json:"dec_completions,omitempty"`
	DecFailures             uint64          `protobuf:"fixed64,22,opt,name=dec_failures,json=decFailures" json:"dec_failures,omitempty"`
	Salt                    uint32          `protobuf:"varint,23,opt,name=salt" json:"salt,omitempty"`
	ExplicitIv              uint64          `protobuf:"varint,24,opt,name=explicit_iv,json=explicitIv" json:"explicit_iv,omitempty"`
	PreDebugStage0_7Thread  uint32          `protobuf:"varint,25,opt,name=pre_debug_stage0_7_thread,json=preDebugStage07Thread" json:"pre_debug_stage0_7_thread,omitempty"`
	PostDebugStage0_7Thread uint32          `protobuf:"varint,26,opt,name=post_debug_stage0_7_thread,json=postDebugStage07Thread" json:"post_debug_stage0_7_thread,omitempty"`
	IsDecryptFlow           bool            `protobuf:"varint,27,opt,name=is_decrypt_flow,json=isDecryptFlow" json:"is_decrypt_flow,omitempty"`
	OtherFid                uint32          `protobuf:"varint,28,opt,name=other_fid,json=otherFid" json:"other_fid,omitempty"`
	L7ProxyType             AppRedirType    `protobuf:"varint,29,opt,name=l7_proxy_type,json=l7ProxyType,enum=types.AppRedirType" json:"l7_proxy_type,omitempty"`
	CryptoHmacKeyIdx        uint32          `protobuf:"varint,30,opt,name=crypto_hmac_key_idx,json=cryptoHmacKeyIdx" json:"crypto_hmac_key_idx,omitempty"`
	MacRequests             uint64          `protobuf:"fixed64,31,opt,name=mac_requests,json=macRequests" json:"mac_requests,omitempty"`
	MacCompletions          uint64          `protobuf:"fixed64,32,opt,name=mac_completions,json=macCompletions" json:"mac_completions,omitempty"`
	MacFailures             uint64          `protobuf:"fixed64,33,opt,name=mac_failures,json=macFailures" json:"mac_failures,omitempty"`
	CpuId                   uint32          `protobuf:"varint,34,opt,name=cpu_id,json=cpuId" json:"cpu_id,omitempty"`
}

func (m *TlsCbSpec) Reset()                    { *m = TlsCbSpec{} }
func (m *TlsCbSpec) String() string            { return proto.CompactTextString(m) }
func (*TlsCbSpec) ProtoMessage()               {}
func (*TlsCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{55} }

func (m *TlsCbSpec) GetKeyOrHandle() *TlsCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TlsCbSpec) GetNicDecHead() uint32 {
	if m != nil {
		return m.NicDecHead
	}
	return 0
}

func (m *TlsCbSpec) GetNicDecTail() uint32 {
	if m != nil {
		return m.NicDecTail
	}
	return 0
}

func (m *TlsCbSpec) GetCommand() uint32 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *TlsCbSpec) GetDebugDol() uint32 {
	if m != nil {
		return m.DebugDol
	}
	return 0
}

func (m *TlsCbSpec) GetSerqPi() uint32 {
	if m != nil {
		return m.SerqPi
	}
	return 0
}

func (m *TlsCbSpec) GetSerqCi() uint32 {
	if m != nil {
		return m.SerqCi
	}
	return 0
}

func (m *TlsCbSpec) GetBsqPi() uint32 {
	if m != nil {
		return m.BsqPi
	}
	return 0
}

func (m *TlsCbSpec) GetBsqCi() uint32 {
	if m != nil {
		return m.BsqCi
	}
	return 0
}

func (m *TlsCbSpec) GetCryptoKeyIdx() uint32 {
	if m != nil {
		return m.CryptoKeyIdx
	}
	return 0
}

func (m *TlsCbSpec) GetSerqBase() uint32 {
	if m != nil {
		return m.SerqBase
	}
	return 0
}

func (m *TlsCbSpec) GetSesqBase() uint32 {
	if m != nil {
		return m.SesqBase
	}
	return 0
}

func (m *TlsCbSpec) GetTnmdrAlloc() uint64 {
	if m != nil {
		return m.TnmdrAlloc
	}
	return 0
}

func (m *TlsCbSpec) GetTnmprAlloc() uint64 {
	if m != nil {
		return m.TnmprAlloc
	}
	return 0
}

func (m *TlsCbSpec) GetRnmdrFree() uint64 {
	if m != nil {
		return m.RnmdrFree
	}
	return 0
}

func (m *TlsCbSpec) GetRnmprFree() uint64 {
	if m != nil {
		return m.RnmprFree
	}
	return 0
}

func (m *TlsCbSpec) GetEncRequests() uint64 {
	if m != nil {
		return m.EncRequests
	}
	return 0
}

func (m *TlsCbSpec) GetEncCompletions() uint64 {
	if m != nil {
		return m.EncCompletions
	}
	return 0
}

func (m *TlsCbSpec) GetEncFailures() uint64 {
	if m != nil {
		return m.EncFailures
	}
	return 0
}

func (m *TlsCbSpec) GetDecRequests() uint64 {
	if m != nil {
		return m.DecRequests
	}
	return 0
}

func (m *TlsCbSpec) GetDecCompletions() uint64 {
	if m != nil {
		return m.DecCompletions
	}
	return 0
}

func (m *TlsCbSpec) GetDecFailures() uint64 {
	if m != nil {
		return m.DecFailures
	}
	return 0
}

func (m *TlsCbSpec) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *TlsCbSpec) GetExplicitIv() uint64 {
	if m != nil {
		return m.ExplicitIv
	}
	return 0
}

func (m *TlsCbSpec) GetPreDebugStage0_7Thread() uint32 {
	if m != nil {
		return m.PreDebugStage0_7Thread
	}
	return 0
}

func (m *TlsCbSpec) GetPostDebugStage0_7Thread() uint32 {
	if m != nil {
		return m.PostDebugStage0_7Thread
	}
	return 0
}

func (m *TlsCbSpec) GetIsDecryptFlow() bool {
	if m != nil {
		return m.IsDecryptFlow
	}
	return false
}

func (m *TlsCbSpec) GetOtherFid() uint32 {
	if m != nil {
		return m.OtherFid
	}
	return 0
}

func (m *TlsCbSpec) GetL7ProxyType() AppRedirType {
	if m != nil {
		return m.L7ProxyType
	}
	return AppRedirType_APP_REDIR_TYPE_NONE
}

func (m *TlsCbSpec) GetCryptoHmacKeyIdx() uint32 {
	if m != nil {
		return m.CryptoHmacKeyIdx
	}
	return 0
}

func (m *TlsCbSpec) GetMacRequests() uint64 {
	if m != nil {
		return m.MacRequests
	}
	return 0
}

func (m *TlsCbSpec) GetMacCompletions() uint64 {
	if m != nil {
		return m.MacCompletions
	}
	return 0
}

func (m *TlsCbSpec) GetMacFailures() uint64 {
	if m != nil {
		return m.MacFailures
	}
	return 0
}

func (m *TlsCbSpec) GetCpuId() uint32 {
	if m != nil {
		return m.CpuId
	}
	return 0
}

// TlsCbRequestMsg is batched add or modify tlscb request
type TlsCbRequestMsg struct {
	Request []*TlsCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TlsCbRequestMsg) Reset()                    { *m = TlsCbRequestMsg{} }
func (m *TlsCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbRequestMsg) ProtoMessage()               {}
func (*TlsCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{56} }

func (m *TlsCbRequestMsg) GetRequest() []*TlsCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// TlsCbStatus is the operational status of a given tlscb
type TlsCbStatus struct {
	TlscbHandle uint64 `protobuf:"fixed64,1,opt,name=tlscb_handle,json=tlscbHandle" json:"tlscb_handle,omitempty"`
}

func (m *TlsCbStatus) Reset()                    { *m = TlsCbStatus{} }
func (m *TlsCbStatus) String() string            { return proto.CompactTextString(m) }
func (*TlsCbStatus) ProtoMessage()               {}
func (*TlsCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{57} }

func (m *TlsCbStatus) GetTlscbHandle() uint64 {
	if m != nil {
		return m.TlscbHandle
	}
	return 0
}

// TlsCbResponse is response to TlsCbSpec
type TlsCbResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	TlscbStatus *TlsCbStatus `protobuf:"bytes,2,opt,name=tlscb_status,json=tlscbStatus" json:"tlscb_status,omitempty"`
}

func (m *TlsCbResponse) Reset()                    { *m = TlsCbResponse{} }
func (m *TlsCbResponse) String() string            { return proto.CompactTextString(m) }
func (*TlsCbResponse) ProtoMessage()               {}
func (*TlsCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{58} }

func (m *TlsCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TlsCbResponse) GetTlscbStatus() *TlsCbStatus {
	if m != nil {
		return m.TlscbStatus
	}
	return nil
}

// TlsCbResponseMsg is batched response to TlsCbRequestMsg
type TlsCbResponseMsg struct {
	Response []*TlsCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TlsCbResponseMsg) Reset()                    { *m = TlsCbResponseMsg{} }
func (m *TlsCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbResponseMsg) ProtoMessage()               {}
func (*TlsCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{59} }

func (m *TlsCbResponseMsg) GetResponse() []*TlsCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TlsCbDeleteRequest is used to delete a tlscb
type TlsCbDeleteRequest struct {
	KeyOrHandle *TlsCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TlsCbDeleteRequest) Reset()                    { *m = TlsCbDeleteRequest{} }
func (m *TlsCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*TlsCbDeleteRequest) ProtoMessage()               {}
func (*TlsCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{60} }

func (m *TlsCbDeleteRequest) GetKeyOrHandle() *TlsCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TlsCbDeleteRequestMsg is used to delete a batch of tlscbs
type TlsCbDeleteRequestMsg struct {
	Request []*TlsCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TlsCbDeleteRequestMsg) Reset()                    { *m = TlsCbDeleteRequestMsg{} }
func (m *TlsCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbDeleteRequestMsg) ProtoMessage()               {}
func (*TlsCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{61} }

func (m *TlsCbDeleteRequestMsg) GetRequest() []*TlsCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TlsCbDeleteResponseMsg is batched response to TlsCbDeleteRequestMsg
type TlsCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *TlsCbDeleteResponseMsg) Reset()                    { *m = TlsCbDeleteResponseMsg{} }
func (m *TlsCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbDeleteResponseMsg) ProtoMessage()               {}
func (*TlsCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{62} }

func (m *TlsCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// TlsCbGetRequest is used to get information about a tlscb
type TlsCbGetRequest struct {
	KeyOrHandle *TlsCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TlsCbGetRequest) Reset()                    { *m = TlsCbGetRequest{} }
func (m *TlsCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*TlsCbGetRequest) ProtoMessage()               {}
func (*TlsCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{63} }

func (m *TlsCbGetRequest) GetKeyOrHandle() *TlsCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TlsCbGetRequestMsg is batched GET requests for tlscbs
type TlsCbGetRequestMsg struct {
	Request []*TlsCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TlsCbGetRequestMsg) Reset()                    { *m = TlsCbGetRequestMsg{} }
func (m *TlsCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbGetRequestMsg) ProtoMessage()               {}
func (*TlsCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{64} }

func (m *TlsCbGetRequestMsg) GetRequest() []*TlsCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TlsCbStats is the statistics object for each tlscb
type TlsCbStats struct {
}

func (m *TlsCbStats) Reset()                    { *m = TlsCbStats{} }
func (m *TlsCbStats) String() string            { return proto.CompactTextString(m) }
func (*TlsCbStats) ProtoMessage()               {}
func (*TlsCbStats) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{65} }

// TlsCbGetResponse captures all the information about a tlscb
// only if api_status indicates success, other fields are valid
type TlsCbGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *TlsCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *TlsCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *TlsCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *TlsCbGetResponse) Reset()                    { *m = TlsCbGetResponse{} }
func (m *TlsCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*TlsCbGetResponse) ProtoMessage()               {}
func (*TlsCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{66} }

func (m *TlsCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TlsCbGetResponse) GetSpec() *TlsCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TlsCbGetResponse) GetStatus() *TlsCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TlsCbGetResponse) GetStats() *TlsCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// TlsCbGetResponseMsg is batched response to TlsCbGetRequestMsg
type TlsCbGetResponseMsg struct {
	Response []*TlsCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TlsCbGetResponseMsg) Reset()                    { *m = TlsCbGetResponseMsg{} }
func (m *TlsCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbGetResponseMsg) ProtoMessage()               {}
func (*TlsCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{67} }

func (m *TlsCbGetResponseMsg) GetResponse() []*TlsCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// WRingKeyHandle is used to operate either by its key or handle
type WRingKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*WRingKeyHandle_WringId
	//	*WRingKeyHandle_WringHandle
	KeyOrHandle isWRingKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *WRingKeyHandle) Reset()                    { *m = WRingKeyHandle{} }
func (m *WRingKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*WRingKeyHandle) ProtoMessage()               {}
func (*WRingKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{68} }

type isWRingKeyHandle_KeyOrHandle interface{ isWRingKeyHandle_KeyOrHandle() }

type WRingKeyHandle_WringId struct {
	WringId uint32 `protobuf:"varint,1,opt,name=wring_id,json=wringId,oneof"`
}
type WRingKeyHandle_WringHandle struct {
	WringHandle uint64 `protobuf:"fixed64,2,opt,name=wring_handle,json=wringHandle,oneof"`
}

func (*WRingKeyHandle_WringId) isWRingKeyHandle_KeyOrHandle()     {}
func (*WRingKeyHandle_WringHandle) isWRingKeyHandle_KeyOrHandle() {}

func (m *WRingKeyHandle) GetKeyOrHandle() isWRingKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *WRingKeyHandle) GetWringId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*WRingKeyHandle_WringId); ok {
		return x.WringId
	}
	return 0
}

func (m *WRingKeyHandle) GetWringHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*WRingKeyHandle_WringHandle); ok {
		return x.WringHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*WRingKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _WRingKeyHandle_OneofMarshaler, _WRingKeyHandle_OneofUnmarshaler, _WRingKeyHandle_OneofSizer, []interface{}{
		(*WRingKeyHandle_WringId)(nil),
		(*WRingKeyHandle_WringHandle)(nil),
	}
}

func _WRingKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*WRingKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *WRingKeyHandle_WringId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.WringId))
	case *WRingKeyHandle_WringHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.WringHandle))
	case nil:
	default:
		return fmt.Errorf("WRingKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _WRingKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*WRingKeyHandle)
	switch tag {
	case 1: // key_or_handle.wring_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &WRingKeyHandle_WringId{uint32(x)}
		return true, err
	case 2: // key_or_handle.wring_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &WRingKeyHandle_WringHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _WRingKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*WRingKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *WRingKeyHandle_WringId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.WringId))
	case *WRingKeyHandle_WringHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// WRingSpec captures all the WRing level configuration
type WRingSpec struct {
	KeyOrHandle *WRingKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Type        WRingType       `protobuf:"varint,2,opt,name=type,enum=types.WRingType" json:"type,omitempty"`
	Pi          uint32          `protobuf:"varint,3,opt,name=pi" json:"pi,omitempty"`
	Ci          uint32          `protobuf:"varint,4,opt,name=ci" json:"ci,omitempty"`
}

func (m *WRingSpec) Reset()                    { *m = WRingSpec{} }
func (m *WRingSpec) String() string            { return proto.CompactTextString(m) }
func (*WRingSpec) ProtoMessage()               {}
func (*WRingSpec) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{69} }

func (m *WRingSpec) GetKeyOrHandle() *WRingKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *WRingSpec) GetType() WRingType {
	if m != nil {
		return m.Type
	}
	return WRingType_WRING_TYPE_NONE
}

func (m *WRingSpec) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *WRingSpec) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

// WRingRequestMsg is batched add or modify wring request
type WRingRequestMsg struct {
	Request []*WRingSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *WRingRequestMsg) Reset()                    { *m = WRingRequestMsg{} }
func (m *WRingRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingRequestMsg) ProtoMessage()               {}
func (*WRingRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{70} }

func (m *WRingRequestMsg) GetRequest() []*WRingSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// WRingStatus is the operational status of a given wring
type WRingStatus struct {
	WringHandle uint64 `protobuf:"fixed64,1,opt,name=wring_handle,json=wringHandle" json:"wring_handle,omitempty"`
}

func (m *WRingStatus) Reset()                    { *m = WRingStatus{} }
func (m *WRingStatus) String() string            { return proto.CompactTextString(m) }
func (*WRingStatus) ProtoMessage()               {}
func (*WRingStatus) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{71} }

func (m *WRingStatus) GetWringHandle() uint64 {
	if m != nil {
		return m.WringHandle
	}
	return 0
}

// WRingResponse is response to WRingSpec
type WRingResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	WringStatus *WRingStatus `protobuf:"bytes,2,opt,name=wring_status,json=wringStatus" json:"wring_status,omitempty"`
}

func (m *WRingResponse) Reset()                    { *m = WRingResponse{} }
func (m *WRingResponse) String() string            { return proto.CompactTextString(m) }
func (*WRingResponse) ProtoMessage()               {}
func (*WRingResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{72} }

func (m *WRingResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *WRingResponse) GetWringStatus() *WRingStatus {
	if m != nil {
		return m.WringStatus
	}
	return nil
}

// WRingResponseMsg is batched response to WRingRequestMsg
type WRingResponseMsg struct {
	Response []*WRingResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *WRingResponseMsg) Reset()                    { *m = WRingResponseMsg{} }
func (m *WRingResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingResponseMsg) ProtoMessage()               {}
func (*WRingResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{73} }

func (m *WRingResponseMsg) GetResponse() []*WRingResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// WRingDeleteRequest is used to delete a wring
type WRingDeleteRequest struct {
	KeyOrHandle *WRingKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *WRingDeleteRequest) Reset()                    { *m = WRingDeleteRequest{} }
func (m *WRingDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*WRingDeleteRequest) ProtoMessage()               {}
func (*WRingDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{74} }

func (m *WRingDeleteRequest) GetKeyOrHandle() *WRingKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// WRingDeleteRequestMsg is used to delete a batch of wrings
type WRingDeleteRequestMsg struct {
	Request []*WRingDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *WRingDeleteRequestMsg) Reset()                    { *m = WRingDeleteRequestMsg{} }
func (m *WRingDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingDeleteRequestMsg) ProtoMessage()               {}
func (*WRingDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{75} }

func (m *WRingDeleteRequestMsg) GetRequest() []*WRingDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// WRingDeleteResponseMsg is batched response to WRingDeleteRequestMsg
type WRingDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *WRingDeleteResponseMsg) Reset()                    { *m = WRingDeleteResponseMsg{} }
func (m *WRingDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingDeleteResponseMsg) ProtoMessage()               {}
func (*WRingDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{76} }

func (m *WRingDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// WRingGetRequest is used to get information about a wring
type WRingGetEntriesRequest struct {
	KeyOrHandle *WRingKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Type        WRingType       `protobuf:"varint,2,opt,name=type,enum=types.WRingType" json:"type,omitempty"`
	Index       uint32          `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
}

func (m *WRingGetEntriesRequest) Reset()                    { *m = WRingGetEntriesRequest{} }
func (m *WRingGetEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*WRingGetEntriesRequest) ProtoMessage()               {}
func (*WRingGetEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{77} }

func (m *WRingGetEntriesRequest) GetKeyOrHandle() *WRingKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *WRingGetEntriesRequest) GetType() WRingType {
	if m != nil {
		return m.Type
	}
	return WRingType_WRING_TYPE_NONE
}

func (m *WRingGetEntriesRequest) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

// WRingGetEntriesRequestMsg is batched GET requests for wrings
type WRingGetEntriesRequestMsg struct {
	Request []*WRingGetEntriesRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *WRingGetEntriesRequestMsg) Reset()                    { *m = WRingGetEntriesRequestMsg{} }
func (m *WRingGetEntriesRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingGetEntriesRequestMsg) ProtoMessage()               {}
func (*WRingGetEntriesRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{78} }

func (m *WRingGetEntriesRequestMsg) GetRequest() []*WRingGetEntriesRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// WRingStats is the statistics object for each wring
type WRingStats struct {
}

func (m *WRingStats) Reset()                    { *m = WRingStats{} }
func (m *WRingStats) String() string            { return proto.CompactTextString(m) }
func (*WRingStats) ProtoMessage()               {}
func (*WRingStats) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{79} }

type WRingBarcoGCMDescMsg struct {
	IlistAddr    uint64 `protobuf:"fixed64,1,opt,name=ilist_addr,json=ilistAddr" json:"ilist_addr,omitempty"`
	OlistAddr    uint64 `protobuf:"fixed64,2,opt,name=olist_addr,json=olistAddr" json:"olist_addr,omitempty"`
	Command      uint32 `protobuf:"varint,3,opt,name=command" json:"command,omitempty"`
	KeyDescIndex uint32 `protobuf:"varint,4,opt,name=key_desc_index,json=keyDescIndex" json:"key_desc_index,omitempty"`
	IvAddr       uint64 `protobuf:"fixed64,5,opt,name=iv_addr,json=ivAddr" json:"iv_addr,omitempty"`
	StatusAddr   uint64 `protobuf:"fixed64,6,opt,name=status_addr,json=statusAddr" json:"status_addr,omitempty"`
	DoorbellAddr uint64 `protobuf:"fixed64,7,opt,name=doorbell_addr,json=doorbellAddr" json:"doorbell_addr,omitempty"`
	DoorbellData uint64 `protobuf:"fixed64,8,opt,name=doorbell_data,json=doorbellData" json:"doorbell_data,omitempty"`
	Salt         uint32 `protobuf:"varint,9,opt,name=salt" json:"salt,omitempty"`
	ExplicitIv   uint64 `protobuf:"fixed64,10,opt,name=explicit_iv,json=explicitIv" json:"explicit_iv,omitempty"`
	HeaderSize   uint32 `protobuf:"varint,11,opt,name=header_size,json=headerSize" json:"header_size,omitempty"`
	BarcoStatus  uint32 `protobuf:"varint,12,opt,name=barco_status,json=barcoStatus" json:"barco_status,omitempty"`
}

func (m *WRingBarcoGCMDescMsg) Reset()                    { *m = WRingBarcoGCMDescMsg{} }
func (m *WRingBarcoGCMDescMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingBarcoGCMDescMsg) ProtoMessage()               {}
func (*WRingBarcoGCMDescMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{80} }

func (m *WRingBarcoGCMDescMsg) GetIlistAddr() uint64 {
	if m != nil {
		return m.IlistAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetOlistAddr() uint64 {
	if m != nil {
		return m.OlistAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetCommand() uint32 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetKeyDescIndex() uint32 {
	if m != nil {
		return m.KeyDescIndex
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetIvAddr() uint64 {
	if m != nil {
		return m.IvAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetStatusAddr() uint64 {
	if m != nil {
		return m.StatusAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetDoorbellAddr() uint64 {
	if m != nil {
		return m.DoorbellAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetDoorbellData() uint64 {
	if m != nil {
		return m.DoorbellData
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetExplicitIv() uint64 {
	if m != nil {
		return m.ExplicitIv
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetHeaderSize() uint32 {
	if m != nil {
		return m.HeaderSize
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetBarcoStatus() uint32 {
	if m != nil {
		return m.BarcoStatus
	}
	return 0
}

// WRingGetResponse captures all the information about a wring
// only if api_status indicates success, other fields are valid
type WRingGetEntriesResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *WRingSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Index     uint32       `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Status    *WRingStatus `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Stats     *WRingStats  `protobuf:"bytes,5,opt,name=stats" json:"stats,omitempty"`
	// Types that are valid to be assigned to WRingSlotInfo:
	//	*WRingGetEntriesResponse_Value
	//	*WRingGetEntriesResponse_BarcoGcmDesc
	//	*WRingGetEntriesResponse_Raw
	WRingSlotInfo isWRingGetEntriesResponse_WRingSlotInfo `protobuf_oneof:"WRingSlotInfo"`
}

func (m *WRingGetEntriesResponse) Reset()                    { *m = WRingGetEntriesResponse{} }
func (m *WRingGetEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*WRingGetEntriesResponse) ProtoMessage()               {}
func (*WRingGetEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{81} }

type isWRingGetEntriesResponse_WRingSlotInfo interface{ isWRingGetEntriesResponse_WRingSlotInfo() }

type WRingGetEntriesResponse_Value struct {
	Value uint64 `protobuf:"fixed64,6,opt,name=value,oneof"`
}
type WRingGetEntriesResponse_BarcoGcmDesc struct {
	BarcoGcmDesc *WRingBarcoGCMDescMsg `protobuf:"bytes,7,opt,name=barco_gcm_desc,json=barcoGcmDesc,oneof"`
}
type WRingGetEntriesResponse_Raw struct {
	Raw []byte `protobuf:"bytes,8,opt,name=raw,proto3,oneof"`
}

func (*WRingGetEntriesResponse_Value) isWRingGetEntriesResponse_WRingSlotInfo()        {}
func (*WRingGetEntriesResponse_BarcoGcmDesc) isWRingGetEntriesResponse_WRingSlotInfo() {}
func (*WRingGetEntriesResponse_Raw) isWRingGetEntriesResponse_WRingSlotInfo()          {}

func (m *WRingGetEntriesResponse) GetWRingSlotInfo() isWRingGetEntriesResponse_WRingSlotInfo {
	if m != nil {
		return m.WRingSlotInfo
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *WRingGetEntriesResponse) GetSpec() *WRingSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *WRingGetEntriesResponse) GetStatus() *WRingStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetStats() *WRingStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetValue() uint64 {
	if x, ok := m.GetWRingSlotInfo().(*WRingGetEntriesResponse_Value); ok {
		return x.Value
	}
	return 0
}

func (m *WRingGetEntriesResponse) GetBarcoGcmDesc() *WRingBarcoGCMDescMsg {
	if x, ok := m.GetWRingSlotInfo().(*WRingGetEntriesResponse_BarcoGcmDesc); ok {
		return x.BarcoGcmDesc
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetRaw() []byte {
	if x, ok := m.GetWRingSlotInfo().(*WRingGetEntriesResponse_Raw); ok {
		return x.Raw
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*WRingGetEntriesResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _WRingGetEntriesResponse_OneofMarshaler, _WRingGetEntriesResponse_OneofUnmarshaler, _WRingGetEntriesResponse_OneofSizer, []interface{}{
		(*WRingGetEntriesResponse_Value)(nil),
		(*WRingGetEntriesResponse_BarcoGcmDesc)(nil),
		(*WRingGetEntriesResponse_Raw)(nil),
	}
}

func _WRingGetEntriesResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*WRingGetEntriesResponse)
	// WRingSlotInfo
	switch x := m.WRingSlotInfo.(type) {
	case *WRingGetEntriesResponse_Value:
		b.EncodeVarint(6<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.Value))
	case *WRingGetEntriesResponse_BarcoGcmDesc:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BarcoGcmDesc); err != nil {
			return err
		}
	case *WRingGetEntriesResponse_Raw:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Raw)
	case nil:
	default:
		return fmt.Errorf("WRingGetEntriesResponse.WRingSlotInfo has unexpected type %T", x)
	}
	return nil
}

func _WRingGetEntriesResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*WRingGetEntriesResponse)
	switch tag {
	case 6: // WRingSlotInfo.value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.WRingSlotInfo = &WRingGetEntriesResponse_Value{x}
		return true, err
	case 7: // WRingSlotInfo.barco_gcm_desc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WRingBarcoGCMDescMsg)
		err := b.DecodeMessage(msg)
		m.WRingSlotInfo = &WRingGetEntriesResponse_BarcoGcmDesc{msg}
		return true, err
	case 8: // WRingSlotInfo.raw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.WRingSlotInfo = &WRingGetEntriesResponse_Raw{x}
		return true, err
	default:
		return false, nil
	}
}

func _WRingGetEntriesResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*WRingGetEntriesResponse)
	// WRingSlotInfo
	switch x := m.WRingSlotInfo.(type) {
	case *WRingGetEntriesResponse_Value:
		n += proto.SizeVarint(6<<3 | proto.WireFixed64)
		n += 8
	case *WRingGetEntriesResponse_BarcoGcmDesc:
		s := proto.Size(x.BarcoGcmDesc)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *WRingGetEntriesResponse_Raw:
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Raw)))
		n += len(x.Raw)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// WRingGetEntriesResponseMsg is batched response to WRingGetEntriesRequestMsg
type WRingGetEntriesResponseMsg struct {
	Response []*WRingGetEntriesResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *WRingGetEntriesResponseMsg) Reset()                    { *m = WRingGetEntriesResponseMsg{} }
func (m *WRingGetEntriesResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingGetEntriesResponseMsg) ProtoMessage()               {}
func (*WRingGetEntriesResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{82} }

func (m *WRingGetEntriesResponseMsg) GetResponse() []*WRingGetEntriesResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// WRingGetMetaResponseMsg captures all the information about a wring metadata
// only if api_status indicates success, other fields are valid
type WRingGetMetaResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *WRingSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *WRingGetMetaResponse) Reset()                    { *m = WRingGetMetaResponse{} }
func (m *WRingGetMetaResponse) String() string            { return proto.CompactTextString(m) }
func (*WRingGetMetaResponse) ProtoMessage()               {}
func (*WRingGetMetaResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{83} }

func (m *WRingGetMetaResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *WRingGetMetaResponse) GetSpec() *WRingSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// WRingGetMetaResponse is batched response to WRingGetMetaResponseMsg
type WRingGetMetaResponseMsg struct {
	Response []*WRingGetMetaResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *WRingGetMetaResponseMsg) Reset()                    { *m = WRingGetMetaResponseMsg{} }
func (m *WRingGetMetaResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingGetMetaResponseMsg) ProtoMessage()               {}
func (*WRingGetMetaResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{84} }

func (m *WRingGetMetaResponseMsg) GetResponse() []*WRingGetMetaResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// WRingSetMetaResponseMsg captures all the information about a wring metadata
// only if api_status indicates success, other fields are valid
type WRingSetMetaResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *WRingSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *WRingSetMetaResponse) Reset()                    { *m = WRingSetMetaResponse{} }
func (m *WRingSetMetaResponse) String() string            { return proto.CompactTextString(m) }
func (*WRingSetMetaResponse) ProtoMessage()               {}
func (*WRingSetMetaResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{85} }

func (m *WRingSetMetaResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *WRingSetMetaResponse) GetSpec() *WRingSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// WRingSetMetaResponse is batched response to WRingSetMetaResponseMsg
type WRingSetMetaResponseMsg struct {
	Response []*WRingSetMetaResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *WRingSetMetaResponseMsg) Reset()                    { *m = WRingSetMetaResponseMsg{} }
func (m *WRingSetMetaResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingSetMetaResponseMsg) ProtoMessage()               {}
func (*WRingSetMetaResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{86} }

func (m *WRingSetMetaResponseMsg) GetResponse() []*WRingSetMetaResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*ProgramAddressReq)(nil), "halproto.ProgramAddressReq")
	proto.RegisterType((*ProgramAddressResp)(nil), "halproto.ProgramAddressResp")
	proto.RegisterType((*GetProgramAddressRequestMsg)(nil), "halproto.GetProgramAddressRequestMsg")
	proto.RegisterType((*ProgramAddressResponseMsg)(nil), "halproto.ProgramAddressResponseMsg")
	proto.RegisterType((*HbmAddressReq)(nil), "halproto.HbmAddressReq")
	proto.RegisterType((*HbmAddressResp)(nil), "halproto.HbmAddressResp")
	proto.RegisterType((*AllocHbmAddressRequestMsg)(nil), "halproto.AllocHbmAddressRequestMsg")
	proto.RegisterType((*AllocHbmAddressResponseMsg)(nil), "halproto.AllocHbmAddressResponseMsg")
	proto.RegisterType((*LifBdfReq)(nil), "halproto.LifBdfReq")
	proto.RegisterType((*LifBdfResp)(nil), "halproto.LifBdfResp")
	proto.RegisterType((*ConfigureLifBdfRequestMsg)(nil), "halproto.ConfigureLifBdfRequestMsg")
	proto.RegisterType((*ConfigureLifBdfResponseMsg)(nil), "halproto.ConfigureLifBdfResponseMsg")
	proto.RegisterType((*SoftwarePhvStatus)(nil), "halproto.SoftwarePhvStatus")
	proto.RegisterType((*SoftwarePhvResponse)(nil), "halproto.SoftwarePhvResponse")
	proto.RegisterType((*SoftwarePhvResponseMsg)(nil), "halproto.SoftwarePhvResponseMsg")
	proto.RegisterType((*SoftwarePhvGetRequest)(nil), "halproto.SoftwarePhvGetRequest")
	proto.RegisterType((*SoftwarePhvGetRequestMsg)(nil), "halproto.SoftwarePhvGetRequestMsg")
	proto.RegisterType((*SoftwarePhvGetResponse)(nil), "halproto.SoftwarePhvGetResponse")
	proto.RegisterType((*SoftwarePhvGetResponseMsg)(nil), "halproto.SoftwarePhvGetResponseMsg")
	proto.RegisterType((*SoftwarePhvInject)(nil), "halproto.SoftwarePhvInject")
	proto.RegisterType((*SoftwarePhvInjectMsg)(nil), "halproto.SoftwarePhvInjectMsg")
	proto.RegisterType((*LogFlowRequestMsg)(nil), "halproto.LogFlowRequestMsg")
	proto.RegisterType((*LogFlowResponseMsg)(nil), "halproto.LogFlowResponseMsg")
	proto.RegisterType((*LogFlowResponse)(nil), "halproto.LogFlowResponse")
	proto.RegisterType((*EmptyRequest)(nil), "halproto.EmptyRequest")
	proto.RegisterType((*EmptyResponse)(nil), "halproto.EmptyResponse")
	proto.RegisterType((*IpsecCbKeyHandle)(nil), "halproto.IpsecCbKeyHandle")
	proto.RegisterType((*IpsecCbSpec)(nil), "halproto.IpsecCbSpec")
	proto.RegisterType((*IpsecCbRequestMsg)(nil), "halproto.IpsecCbRequestMsg")
	proto.RegisterType((*IpsecCbStatus)(nil), "halproto.IpsecCbStatus")
	proto.RegisterType((*IpsecCbResponse)(nil), "halproto.IpsecCbResponse")
	proto.RegisterType((*IpsecCbResponseMsg)(nil), "halproto.IpsecCbResponseMsg")
	proto.RegisterType((*IpsecCbDeleteRequest)(nil), "halproto.IpsecCbDeleteRequest")
	proto.RegisterType((*IpsecCbDeleteRequestMsg)(nil), "halproto.IpsecCbDeleteRequestMsg")
	proto.RegisterType((*IpsecCbDeleteResponseMsg)(nil), "halproto.IpsecCbDeleteResponseMsg")
	proto.RegisterType((*IpsecCbGetRequest)(nil), "halproto.IpsecCbGetRequest")
	proto.RegisterType((*IpsecCbGetRequestMsg)(nil), "halproto.IpsecCbGetRequestMsg")
	proto.RegisterType((*IpsecCbStats)(nil), "halproto.IpsecCbStats")
	proto.RegisterType((*IpsecCbGetResponse)(nil), "halproto.IpsecCbGetResponse")
	proto.RegisterType((*IpsecCbGetResponseMsg)(nil), "halproto.IpsecCbGetResponseMsg")
	proto.RegisterType((*TcpCbKeyHandle)(nil), "halproto.TcpCbKeyHandle")
	proto.RegisterType((*TcpCbSpec)(nil), "halproto.TcpCbSpec")
	proto.RegisterType((*TcpCbRequestMsg)(nil), "halproto.TcpCbRequestMsg")
	proto.RegisterType((*TcpCbStatus)(nil), "halproto.TcpCbStatus")
	proto.RegisterType((*TcpCbResponse)(nil), "halproto.TcpCbResponse")
	proto.RegisterType((*TcpCbResponseMsg)(nil), "halproto.TcpCbResponseMsg")
	proto.RegisterType((*TcpCbDeleteRequest)(nil), "halproto.TcpCbDeleteRequest")
	proto.RegisterType((*TcpCbDeleteRequestMsg)(nil), "halproto.TcpCbDeleteRequestMsg")
	proto.RegisterType((*TcpCbDeleteResponseMsg)(nil), "halproto.TcpCbDeleteResponseMsg")
	proto.RegisterType((*TcpCbGetRequest)(nil), "halproto.TcpCbGetRequest")
	proto.RegisterType((*TcpCbGetRequestMsg)(nil), "halproto.TcpCbGetRequestMsg")
	proto.RegisterType((*TcpCbStats)(nil), "halproto.TcpCbStats")
	proto.RegisterType((*TcpCbGetResponse)(nil), "halproto.TcpCbGetResponse")
	proto.RegisterType((*TcpCbGetResponseMsg)(nil), "halproto.TcpCbGetResponseMsg")
	proto.RegisterType((*TlsCbKeyHandle)(nil), "halproto.TlsCbKeyHandle")
	proto.RegisterType((*TlsCbSpec)(nil), "halproto.TlsCbSpec")
	proto.RegisterType((*TlsCbRequestMsg)(nil), "halproto.TlsCbRequestMsg")
	proto.RegisterType((*TlsCbStatus)(nil), "halproto.TlsCbStatus")
	proto.RegisterType((*TlsCbResponse)(nil), "halproto.TlsCbResponse")
	proto.RegisterType((*TlsCbResponseMsg)(nil), "halproto.TlsCbResponseMsg")
	proto.RegisterType((*TlsCbDeleteRequest)(nil), "halproto.TlsCbDeleteRequest")
	proto.RegisterType((*TlsCbDeleteRequestMsg)(nil), "halproto.TlsCbDeleteRequestMsg")
	proto.RegisterType((*TlsCbDeleteResponseMsg)(nil), "halproto.TlsCbDeleteResponseMsg")
	proto.RegisterType((*TlsCbGetRequest)(nil), "halproto.TlsCbGetRequest")
	proto.RegisterType((*TlsCbGetRequestMsg)(nil), "halproto.TlsCbGetRequestMsg")
	proto.RegisterType((*TlsCbStats)(nil), "halproto.TlsCbStats")
	proto.RegisterType((*TlsCbGetResponse)(nil), "halproto.TlsCbGetResponse")
	proto.RegisterType((*TlsCbGetResponseMsg)(nil), "halproto.TlsCbGetResponseMsg")
	proto.RegisterType((*WRingKeyHandle)(nil), "halproto.WRingKeyHandle")
	proto.RegisterType((*WRingSpec)(nil), "halproto.WRingSpec")
	proto.RegisterType((*WRingRequestMsg)(nil), "halproto.WRingRequestMsg")
	proto.RegisterType((*WRingStatus)(nil), "halproto.WRingStatus")
	proto.RegisterType((*WRingResponse)(nil), "halproto.WRingResponse")
	proto.RegisterType((*WRingResponseMsg)(nil), "halproto.WRingResponseMsg")
	proto.RegisterType((*WRingDeleteRequest)(nil), "halproto.WRingDeleteRequest")
	proto.RegisterType((*WRingDeleteRequestMsg)(nil), "halproto.WRingDeleteRequestMsg")
	proto.RegisterType((*WRingDeleteResponseMsg)(nil), "halproto.WRingDeleteResponseMsg")
	proto.RegisterType((*WRingGetEntriesRequest)(nil), "halproto.WRingGetEntriesRequest")
	proto.RegisterType((*WRingGetEntriesRequestMsg)(nil), "halproto.WRingGetEntriesRequestMsg")
	proto.RegisterType((*WRingStats)(nil), "halproto.WRingStats")
	proto.RegisterType((*WRingBarcoGCMDescMsg)(nil), "halproto.WRingBarcoGCMDescMsg")
	proto.RegisterType((*WRingGetEntriesResponse)(nil), "halproto.WRingGetEntriesResponse")
	proto.RegisterType((*WRingGetEntriesResponseMsg)(nil), "halproto.WRingGetEntriesResponseMsg")
	proto.RegisterType((*WRingGetMetaResponse)(nil), "halproto.WRingGetMetaResponse")
	proto.RegisterType((*WRingGetMetaResponseMsg)(nil), "halproto.WRingGetMetaResponseMsg")
	proto.RegisterType((*WRingSetMetaResponse)(nil), "halproto.WRingSetMetaResponse")
	proto.RegisterType((*WRingSetMetaResponseMsg)(nil), "halproto.WRingSetMetaResponseMsg")
	proto.RegisterEnum("halproto.SoftwarePhvPipeline", SoftwarePhvPipeline_name, SoftwarePhvPipeline_value)
}

func init() { proto.RegisterFile("internal.proto", fileDescriptor16) }

var fileDescriptor16 = []byte{
	// 4541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5b, 0x59, 0x77, 0xdc, 0xc8,
	0x75, 0xe6, 0xce, 0xe6, 0xed, 0x85, 0x14, 0xb8, 0x81, 0xd4, 0x42, 0xb2, 0x25, 0xcf, 0xc8, 0x8e,
	0x47, 0xa3, 0xa1, 0x34, 0xd2, 0x8c, 0x8f, 0xed, 0x98, 0x8b, 0x28, 0x32, 0x12, 0x5b, 0x1c, 0x34,
	0x25, 0x39, 0xf1, 0x39, 0xc6, 0x01, 0x81, 0x6a, 0xb2, 0x42, 0x34, 0x00, 0xa1, 0xaa, 0x9b, 0xcd,
	0x79, 0x4c, 0xf2, 0x9c, 0x1c, 0x3b, 0xfb, 0xbe, 0x2f, 0xce, 0xaf, 0xf0, 0x5b, 0x1e, 0xf3, 0x0f,
	0x72, 0xf2, 0x9a, 0xfc, 0x84, 0x3c, 0xe5, 0xdc, 0xaa, 0xc2, 0xde, 0x4d, 0x52, 0xe2, 0x24, 0x4f,
	0x64, 0xdd, 0xad, 0xaa, 0x6e, 0x5d, 0xdc, 0xfb, 0x5d, 0xa0, 0x1a, 0x6a, 0xd4, 0xe3, 0x24, 0xf4,
	0x2c, 0xf7, 0x41, 0x10, 0xfa, 0xdc, 0xd7, 0x4a, 0xd1, 0x78, 0xb9, 0xcc, 0xcf, 0x03, 0xc2, 0x24,
	0x79, 0xb9, 0xdc, 0x3a, 0x73, 0xfd, 0x63, 0x39, 0xa8, 0xff, 0xf6, 0x30, 0xdc, 0x38, 0x08, 0xfd,
	0xe3, 0xd0, 0x6a, 0x6f, 0x38, 0x4e, 0x48, 0x18, 0x33, 0xc8, 0x3b, 0x6d, 0x01, 0x26, 0x4e, 0x2c,
	0xcf, 0x71, 0x89, 0x3e, 0xbc, 0x3a, 0x7c, 0x7f, 0xca, 0x50, 0x23, 0xed, 0x26, 0x4c, 0x05, 0xa1,
	0x7f, 0x6c, 0x7a, 0x56, 0x9b, 0xe8, 0x23, 0x82, 0x55, 0x42, 0x42, 0xc3, 0x6a, 0x13, 0xed, 0x2e,
	0x54, 0x43, 0xc2, 0x7c, 0xb7, 0x4b, 0x4c, 0xd7, 0x3a, 0x22, 0xae, 0x3e, 0xba, 0x3a, 0x7c, 0xbf,
	0x64, 0x54, 0x14, 0xf1, 0x25, 0xd2, 0xb4, 0x39, 0x18, 0x97, 0xcc, 0x31, 0xa1, 0x2d, 0x07, 0xf5,
	0xfb, 0xa0, 0xe5, 0x17, 0xc1, 0x02, 0x4d, 0x83, 0x31, 0xcb, 0x71, 0x42, 0xb1, 0x86, 0x51, 0x43,
	0xfc, 0x5f, 0x3f, 0x84, 0x9b, 0xcf, 0x09, 0x2f, 0xac, 0xb8, 0x43, 0x18, 0xdf, 0x67, 0xc7, 0xda,
	0xe7, 0x30, 0x19, 0xca, 0x91, 0x3e, 0xbc, 0x3a, 0x7a, 0xbf, 0xbc, 0x7e, 0xf3, 0x41, 0xec, 0x94,
	0x82, 0x92, 0x11, 0xc9, 0xd6, 0x5f, 0xc3, 0x52, 0x71, 0x7e, 0xdf, 0x63, 0x04, 0x6d, 0x7e, 0x01,
	0xa5, 0x50, 0x0d, 0x95, 0xd1, 0x5b, 0x83, 0x8d, 0xb2, 0xc0, 0x88, 0xa5, 0xeb, 0x1f, 0x43, 0x75,
	0xf7, 0xe8, 0x0a, 0x7e, 0xad, 0x7f, 0x01, 0xb5, 0xb4, 0x60, 0xff, 0xbd, 0x23, 0x8d, 0xd1, 0xaf,
	0xa5, 0xe3, 0xab, 0x86, 0xf8, 0xbf, 0xde, 0x80, 0xa5, 0x0d, 0xd7, 0xf5, 0xed, 0xcc, 0x3c, 0x91,
	0x37, 0x3e, 0xcb, 0x7b, 0x63, 0x31, 0x59, 0x78, 0x46, 0x21, 0xf1, 0x84, 0x01, 0xcb, 0x05, 0x7b,
	0x89, 0x2b, 0x1e, 0x17, 0x5c, 0xa1, 0xf7, 0xb7, 0x98, 0x71, 0xc3, 0xa7, 0x30, 0xf5, 0x92, 0xb6,
	0x36, 0x9d, 0x16, 0xba, 0x60, 0x06, 0x46, 0x5d, 0xda, 0x12, 0xfb, 0xaa, 0x1a, 0xf8, 0x2f, 0x52,
	0x8e, 0x9c, 0x96, 0xda, 0x15, 0xfe, 0x5b, 0xdf, 0x05, 0x88, 0x14, 0x58, 0x70, 0x15, 0x0d, 0x74,
	0x2c, 0xe3, 0x16, 0xef, 0x30, 0x11, 0x74, 0xe3, 0x86, 0x1a, 0xd5, 0x7f, 0x0d, 0x96, 0xb6, 0x7c,
	0xaf, 0x45, 0x8f, 0x3b, 0x21, 0x89, 0xd7, 0x10, 0xb9, 0xe7, 0x93, 0xbc, 0x7b, 0x66, 0x93, 0xcd,
	0xc4, 0xc2, 0x89, 0x6b, 0x1a, 0xb0, 0x5c, 0xb0, 0x95, 0xb8, 0xe6, 0x61, 0xc1, 0x35, 0x73, 0x45,
	0x6b, 0x19, 0xb7, 0xfc, 0x72, 0x18, 0x6e, 0x34, 0xfd, 0x16, 0x3f, 0xb3, 0x42, 0x72, 0x70, 0xd2,
	0x6d, 0x8a, 0x15, 0x6b, 0x5f, 0x42, 0x29, 0xa0, 0x01, 0x71, 0xa9, 0x27, 0x83, 0xa4, 0xb6, 0x7e,
	0x3b, 0xb1, 0x93, 0x12, 0x3f, 0x50, 0x42, 0x46, 0x2c, 0xae, 0xe9, 0x30, 0x49, 0x3c, 0xeb, 0xc8,
	0x25, 0x8e, 0x70, 0x4d, 0xc9, 0x88, 0x86, 0x18, 0x39, 0x8e, 0xef, 0x11, 0xf5, 0x44, 0x8a, 0xff,
	0xb5, 0x35, 0xa8, 0xd8, 0x9d, 0x30, 0x24, 0x1e, 0x37, 0x6d, 0x8f, 0x87, 0xe2, 0x81, 0xac, 0x1a,
	0x65, 0x45, 0xdb, 0xf2, 0x78, 0xa8, 0xad, 0x40, 0x99, 0x7a, 0xbf, 0x49, 0x6c, 0x25, 0x31, 0x2e,
	0x24, 0x40, 0x92, 0x50, 0xa0, 0xfe, 0x06, 0x66, 0x53, 0x4b, 0x8a, 0xdc, 0xa1, 0xfd, 0x2a, 0x80,
	0x15, 0x50, 0x53, 0x9d, 0x88, 0xdc, 0xc5, 0xcc, 0x03, 0x99, 0x83, 0x36, 0x02, 0x2a, 0x77, 0xba,
	0x59, 0xfb, 0xef, 0xff, 0x58, 0x49, 0xc9, 0x19, 0x53, 0x56, 0xc4, 0xaa, 0x37, 0x61, 0xa1, 0x8f,
	0x5d, 0x74, 0xf3, 0x97, 0x05, 0x37, 0xf7, 0x77, 0x4f, 0xa4, 0x93, 0xf2, 0xb7, 0x01, 0xf3, 0x29,
	0x81, 0xe7, 0x84, 0xab, 0x50, 0xb8, 0x86, 0xcb, 0xeb, 0xaf, 0x41, 0xef, 0x6b, 0x53, 0x2e, 0x35,
	0x17, 0x5e, 0x2b, 0x7d, 0xad, 0x26, 0x4a, 0x49, 0xa8, 0xfd, 0xee, 0x70, 0xc6, 0x01, 0x42, 0xe4,
	0x1b, 0xf2, 0xad, 0xf6, 0x28, 0x7e, 0x54, 0x30, 0x48, 0x32, 0x19, 0xb2, 0x10, 0x8d, 0xf1, 0x73,
	0xf4, 0xeb, 0xb0, 0xd4, 0x7f, 0x3d, 0xb8, 0xd1, 0xef, 0x17, 0xce, 0x64, 0x75, 0xf0, 0x4e, 0x0b,
	0xc7, 0xd2, 0xc8, 0x3c, 0x05, 0x7b, 0x22, 0xb8, 0xae, 0x73, 0x24, 0xfb, 0x30, 0x57, 0xb0, 0x77,
	0x59, 0x69, 0x28, 0x28, 0x24, 0x47, 0xf1, 0x03, 0xb8, 0xf1, 0xd2, 0x3f, 0xde, 0x71, 0xfd, 0xb3,
	0xd4, 0xd1, 0xde, 0xcf, 0xdb, 0xaa, 0x3d, 0x90, 0x45, 0x75, 0xe7, 0xed, 0xb3, 0x2e, 0xf1, 0x52,
	0xea, 0x2f, 0x40, 0x8b, 0xd5, 0x13, 0x8f, 0x7d, 0x5e, 0xf0, 0xd8, 0x52, 0x2a, 0x59, 0x64, 0xe5,
	0x33, 0x11, 0x3c, 0x9d, 0x63, 0x5e, 0xff, 0x51, 0x7b, 0x02, 0x95, 0x67, 0xed, 0x80, 0x9f, 0x47,
	0x0f, 0xc3, 0x47, 0xf9, 0xad, 0x55, 0x94, 0x35, 0x29, 0x15, 0x6f, 0xec, 0x4b, 0xa8, 0x2a, 0x3d,
	0xb5, 0x92, 0xfb, 0x85, 0x3d, 0x65, 0x35, 0x93, 0x6d, 0xb4, 0x61, 0x66, 0x2f, 0x60, 0xc4, 0xde,
	0x3a, 0x7a, 0x41, 0xce, 0x77, 0x25, 0xb2, 0x58, 0x01, 0xa0, 0x48, 0xb3, 0x8f, 0x4c, 0xea, 0xc8,
	0x5c, 0xbf, 0x3b, 0x64, 0x4c, 0x29, 0xda, 0x9e, 0xa3, 0x7d, 0x0c, 0xb5, 0x48, 0x40, 0x95, 0x50,
	0x0c, 0xdf, 0x89, 0xdd, 0x21, 0xa3, 0xaa, 0xe8, 0xd2, 0xd2, 0xe6, 0x34, 0x54, 0x4f, 0xc9, 0xb9,
	0xe9, 0x87, 0x4a, 0xae, 0xfe, 0x9f, 0x93, 0x50, 0x56, 0xf3, 0x35, 0x03, 0x62, 0x6b, 0x3f, 0xcc,
	0x09, 0x88, 0xd9, 0xca, 0xeb, 0xcb, 0xc9, 0x09, 0xe4, 0x57, 0x67, 0x94, 0x4f, 0xc9, 0xf9, 0xab,
	0x50, 0x2d, 0xb5, 0x06, 0x23, 0x01, 0x55, 0xc5, 0x67, 0x24, 0xa0, 0x38, 0xb6, 0xa9, 0x48, 0xad,
	0x55, 0x63, 0xc4, 0xa6, 0x98, 0x35, 0x79, 0xc7, 0xf3, 0x88, 0x6b, 0x32, 0x1a, 0x3c, 0x56, 0x79,
	0x15, 0x24, 0xa9, 0x49, 0x83, 0xc7, 0x29, 0x01, 0x07, 0x05, 0xc6, 0xd3, 0x02, 0xdb, 0x28, 0xb0,
	0x08, 0x93, 0xb4, 0x6b, 0x8a, 0x5a, 0x3f, 0x21, 0x98, 0x13, 0xb4, 0xdb, 0xa4, 0x5f, 0x13, 0x6d,
	0x09, 0x4a, 0xd4, 0x56, 0x9c, 0x49, 0xc1, 0x99, 0xa4, 0xb6, 0x64, 0xdd, 0x06, 0x38, 0x72, 0x7d,
	0xfb, 0x54, 0x32, 0x4b, 0x82, 0x39, 0x25, 0x28, 0x82, 0x7d, 0x13, 0xa6, 0x70, 0xd3, 0xd4, 0x73,
	0x48, 0x4f, 0x9f, 0x12, 0xdc, 0xd2, 0x29, 0x39, 0xdf, 0xc3, 0xb1, 0x56, 0x87, 0xea, 0x91, 0x15,
	0xda, 0xbe, 0x49, 0x3c, 0xdb, 0xb4, 0xdb, 0x8e, 0x0e, 0xb2, 0x16, 0x08, 0xe2, 0x33, 0xcf, 0xde,
	0x6a, 0x3b, 0xb8, 0x4b, 0xda, 0xd5, 0xcb, 0xe8, 0x73, 0x63, 0x84, 0x76, 0xa3, 0x35, 0x5a, 0x2e,
	0xd7, 0x2b, 0xf1, 0x1a, 0x2d, 0x97, 0x6b, 0xf3, 0x30, 0x41, 0x98, 0x67, 0x9e, 0x50, 0xbd, 0x2a,
	0xe8, 0xe3, 0x84, 0x79, 0xbb, 0x34, 0x22, 0xbb, 0xbe, 0x5e, 0x8b, 0xc9, 0x2f, 0x7d, 0x2c, 0xe5,
	0x2c, 0xa0, 0xfa, 0xb4, 0x2c, 0xe5, 0x2c, 0xa0, 0xda, 0x47, 0x30, 0x4d, 0x7a, 0x01, 0xb1, 0x39,
	0x71, 0x4c, 0x46, 0xde, 0x99, 0x9e, 0xaf, 0xcf, 0x08, 0x6e, 0x35, 0x22, 0x37, 0xc9, 0xbb, 0x86,
	0xaf, 0xdd, 0x02, 0x90, 0x6c, 0xf3, 0xa8, 0x1d, 0xe8, 0x37, 0xc4, 0xc2, 0x4a, 0x0c, 0x59, 0x9b,
	0xed, 0x40, 0xbb, 0x87, 0x58, 0x29, 0x78, 0xa2, 0x6b, 0xe2, 0x6c, 0xa3, 0x27, 0x62, 0xef, 0x20,
	0x42, 0x28, 0x82, 0x8b, 0x52, 0x0e, 0x4a, 0xcd, 0x0e, 0x92, 0x42, 0xae, 0x36, 0x0b, 0xe3, 0x94,
	0x99, 0xdd, 0x27, 0xfa, 0x9c, 0x04, 0x5e, 0x94, 0xbd, 0x79, 0x82, 0x47, 0xd1, 0x0d, 0x5b, 0x66,
	0xd7, 0xb5, 0x3c, 0x7d, 0x5e, 0x1e, 0x45, 0x37, 0x6c, 0xbd, 0x71, 0x2d, 0x4f, 0xfb, 0x15, 0xd0,
	0x5c, 0x8b, 0x71, 0x33, 0x24, 0x81, 0x6b, 0x9d, 0x47, 0x9b, 0x58, 0x10, 0x42, 0xd3, 0xc8, 0x31,
	0x04, 0x43, 0x6e, 0x63, 0x11, 0x26, 0x3d, 0x72, 0x66, 0xa2, 0x13, 0x16, 0xa5, 0x1f, 0x3d, 0x72,
	0xd6, 0x0c, 0x28, 0x1e, 0x0a, 0x32, 0x92, 0x53, 0xd3, 0xe5, 0xa1, 0x78, 0xe4, 0xec, 0x45, 0x74,
	0x70, 0x3a, 0x94, 0x28, 0x33, 0x3d, 0x8b, 0x9b, 0x5c, 0x5f, 0x52, 0xa7, 0xc0, 0x1a, 0x16, 0x3f,
	0x44, 0x9c, 0xdd, 0x72, 0xad, 0x63, 0xa6, 0x2f, 0x4b, 0x6f, 0x8b, 0x01, 0x46, 0x01, 0x65, 0x66,
	0x68, 0x79, 0x8e, 0xdf, 0xd6, 0x6f, 0xca, 0x28, 0xa0, 0xcc, 0x10, 0x63, 0x64, 0x92, 0x1e, 0x0f,
	0x2d, 0x33, 0xb0, 0x1c, 0xfd, 0x96, 0x64, 0x0a, 0xc2, 0x81, 0xe5, 0xe0, 0x32, 0xc3, 0x9e, 0x19,
	0x9c, 0x72, 0xa6, 0xdf, 0x96, 0x13, 0x85, 0xbd, 0x83, 0x53, 0xce, 0xd0, 0x0f, 0x61, 0xcf, 0x3c,
	0x3a, 0xe7, 0x84, 0xe9, 0x77, 0xc4, 0x21, 0x4c, 0x86, 0xbd, 0x4d, 0x1c, 0x2a, 0x96, 0x13, 0xfa,
	0x01, 0xd3, 0x57, 0x22, 0xd6, 0x36, 0x0e, 0xd1, 0x1c, 0x57, 0xe6, 0x56, 0x05, 0x67, 0x82, 0xc7,
	0xe6, 0x78, 0x64, 0x6e, 0x4d, 0xea, 0xf0, 0xc4, 0x1c, 0x8f, 0xcc, 0xd5, 0x23, 0x96, 0x30, 0x57,
	0xdf, 0x86, 0x1b, 0xea, 0x99, 0x4d, 0x25, 0xe9, 0x4f, 0xf3, 0x99, 0x6c, 0xbe, 0xf0, 0x84, 0x63,
	0x3e, 0x48, 0x52, 0xda, 0x13, 0xa8, 0x46, 0x74, 0x59, 0x2a, 0xbf, 0x55, 0xc8, 0x39, 0xc3, 0x62,
	0xde, 0x6c, 0xc6, 0xa9, 0xff, 0xd6, 0x30, 0x4c, 0xc7, 0xd3, 0xab, 0x6c, 0xf8, 0xe9, 0x55, 0xf2,
	0x72, 0xba, 0x2c, 0xff, 0x30, 0x99, 0x2b, 0x53, 0x9e, 0x17, 0x8b, 0x8b, 0x96, 0xba, 0xd1, 0x22,
	0x54, 0x1e, 0x7f, 0x01, 0x5a, 0x6e, 0x0d, 0x97, 0x16, 0x9a, 0x9c, 0x7c, 0x2a, 0x43, 0xbf, 0x81,
	0x39, 0xc5, 0xdc, 0x26, 0x2e, 0xe1, 0x24, 0x2a, 0x0e, 0xd7, 0x4c, 0x9d, 0xf5, 0x26, 0x2c, 0xf6,
	0xb3, 0x2b, 0xbb, 0xac, 0xdc, 0x69, 0xdd, 0x29, 0x18, 0xcd, 0xe8, 0xa4, 0x4b, 0xac, 0x9e, 0x13,
	0x48, 0xf6, 0x9f, 0x3f, 0x86, 0xd1, 0x4b, 0x8e, 0xa1, 0xde, 0x8c, 0x23, 0x29, 0x05, 0x10, 0xaf,
	0xbb, 0xed, 0xfd, 0xd8, 0x9d, 0x59, 0x84, 0x78, 0x11, 0x24, 0x29, 0x28, 0x24, 0x1b, 0xae, 0x41,
	0x25, 0x15, 0x0a, 0xac, 0xfe, 0xef, 0xc3, 0xf1, 0xd9, 0xa7, 0x91, 0xe2, 0x7b, 0x87, 0xe0, 0xb7,
	0x61, 0x8c, 0x05, 0xc4, 0x56, 0x81, 0x37, 0xe0, 0x69, 0x11, 0x22, 0xda, 0xa7, 0x99, 0x7e, 0xeb,
	0x82, 0x28, 0x55, 0x62, 0xda, 0x77, 0x61, 0x1c, 0xff, 0x63, 0xa2, 0x1c, 0x96, 0xd7, 0x17, 0xfa,
	0xca, 0x33, 0x43, 0x0a, 0xd5, 0xbf, 0x82, 0xf9, 0xe2, 0x86, 0x2e, 0xed, 0xc5, 0x8b, 0x2a, 0xa9,
	0x90, 0xb6, 0xa1, 0x76, 0x68, 0x07, 0x69, 0xc8, 0x71, 0x13, 0x4a, 0xdc, 0x0e, 0xb2, 0x80, 0x63,
	0x52, 0x50, 0xf6, 0x1c, 0xed, 0x2e, 0x54, 0x24, 0x33, 0x07, 0x36, 0xca, 0x82, 0x3a, 0x08, 0x6a,
	0xfc, 0xcf, 0x14, 0x4c, 0x89, 0x59, 0x04, 0xd0, 0xf8, 0x7e, 0xff, 0xb0, 0x49, 0xb5, 0xcc, 0xd9,
	0x15, 0x65, 0x61, 0x06, 0x66, 0x5c, 0xbb, 0x6b, 0x7a, 0x3d, 0xae, 0xb0, 0xc6, 0x44, 0x68, 0x77,
	0x1b, 0x3d, 0x8e, 0x0c, 0xe6, 0x39, 0x82, 0x21, 0x41, 0xc7, 0x04, 0xf3, 0x9c, 0x14, 0xa3, 0xe3,
	0x59, 0x0a, 0x74, 0x20, 0xe3, 0xb5, 0x67, 0x61, 0x66, 0x47, 0x53, 0x9c, 0x75, 0x2d, 0x57, 0xc1,
	0x8d, 0x52, 0x68, 0x77, 0x0f, 0x71, 0x8c, 0x4c, 0xce, 0xcc, 0x90, 0xd8, 0xc4, 0xe3, 0x0a, 0x6e,
	0x94, 0x38, 0x33, 0xc4, 0x18, 0x99, 0x8c, 0x84, 0xef, 0xcc, 0x23, 0x8b, 0x49, 0xc4, 0x21, 0x6a,
	0x6c, 0xf8, 0x6e, 0xd3, 0x62, 0x02, 0x53, 0x38, 0xe4, 0xa8, 0x73, 0x6c, 0x3a, 0xbe, 0xab, 0x10,
	0x47, 0x49, 0x10, 0xb6, 0x7d, 0x57, 0x6a, 0x32, 0xa5, 0x39, 0x15, 0x69, 0x32, 0xa9, 0x89, 0x2b,
	0x45, 0x66, 0x40, 0x15, 0xd4, 0x98, 0xc0, 0xe1, 0x01, 0x8d, 0x19, 0x36, 0x15, 0x50, 0x43, 0x31,
	0xb6, 0x68, 0xb4, 0xb7, 0x33, 0xcf, 0x89, 0xe0, 0x06, 0xf3, 0x9c, 0xb7, 0x9e, 0x83, 0x55, 0x01,
	0x19, 0x36, 0x72, 0x24, 0xe0, 0x40, 0xc1, 0xad, 0x33, 0xcf, 0x89, 0x3c, 0xd8, 0x66, 0x4c, 0x61,
	0x0e, 0xf4, 0xe0, 0x3e, 0x63, 0x08, 0xc0, 0x98, 0xdf, 0x09, 0x6d, 0x62, 0x06, 0x7e, 0xc8, 0x15,
	0xf8, 0x00, 0x49, 0x3a, 0xf0, 0x43, 0x2e, 0x77, 0xc6, 0xb8, 0x64, 0xcf, 0x44, 0x3b, 0x63, 0x5c,
	0x30, 0x3f, 0x86, 0xe9, 0x13, 0x62, 0x39, 0x24, 0x34, 0x39, 0x69, 0x07, 0xae, 0xc5, 0x89, 0x40,
	0x1f, 0x15, 0xa3, 0x26, 0xc9, 0x87, 0x8a, 0x8a, 0x35, 0x18, 0xc3, 0x99, 0x08, 0x10, 0x52, 0x95,
	0xb1, 0x2d, 0x80, 0x9a, 0x9a, 0xdc, 0xa5, 0x2d, 0x81, 0x3c, 0xaa, 0xc6, 0x94, 0xa4, 0xbc, 0xa4,
	0x2d, 0x64, 0x5b, 0x89, 0xe3, 0xe6, 0x84, 0xe3, 0xa6, 0xac, 0xd8, 0x73, 0x4b, 0x50, 0xb2, 0x22,
	0xd7, 0x29, 0xd8, 0x61, 0x29, 0xdf, 0xc5, 0x2c, 0x9b, 0x2a, 0xb0, 0x21, 0x59, 0x5b, 0x54, 0x5b,
	0x85, 0x4a, 0x7c, 0x52, 0x26, 0xef, 0x29, 0xa4, 0x01, 0xd1, 0x61, 0x1d, 0xf6, 0x70, 0x5a, 0xb5,
	0x29, 0x97, 0x78, 0x0a, 0x6a, 0x4c, 0x49, 0xca, 0x4b, 0xe2, 0x69, 0xf7, 0x61, 0x26, 0x20, 0x9e,
	0x43, 0xbd, 0x63, 0xd3, 0x42, 0x8c, 0x49, 0x3c, 0x47, 0x00, 0x8e, 0x92, 0x51, 0x53, 0xf4, 0x0d,
	0xfb, 0xb4, 0x49, 0x3c, 0x47, 0x7b, 0x0a, 0x55, 0xf7, 0xa9, 0x19, 0x84, 0x7e, 0xef, 0xdc, 0xc4,
	0x5c, 0x23, 0x00, 0x48, 0x6d, 0x7d, 0x36, 0x4e, 0x3c, 0x81, 0x41, 0x1c, 0x1a, 0x1e, 0x9e, 0x07,
	0xc4, 0x28, 0xbb, 0x4f, 0x0f, 0x50, 0x10, 0x07, 0xb8, 0x46, 0xb1, 0xfa, 0x90, 0xf0, 0x1e, 0x6e,
	0xe1, 0xa6, 0x3a, 0x15, 0xc2, 0xde, 0x19, 0x84, 0xf7, 0xe4, 0x2e, 0x04, 0x33, 0x0a, 0x72, 0xc4,
	0x28, 0x63, 0x06, 0x20, 0xad, 0x29, 0x03, 0x7d, 0x16, 0xc6, 0xc3, 0x9e, 0xa9, 0x30, 0xca, 0x98,
	0x31, 0x16, 0xf6, 0x0e, 0x19, 0x42, 0xcc, 0x90, 0xfb, 0x02, 0x9c, 0x8c, 0x19, 0xf8, 0xaf, 0x98,
	0x4a, 0xc5, 0x8c, 0x69, 0x7b, 0x5c, 0x80, 0x13, 0x9c, 0x4a, 0xc6, 0xcd, 0x96, 0xc7, 0xb5, 0x87,
	0x30, 0x97, 0x72, 0xd8, 0x91, 0xcb, 0x08, 0x17, 0xaf, 0xe3, 0x56, 0x85, 0xa4, 0x16, 0x3b, 0x2e,
	0xe6, 0xc8, 0xc8, 0x0d, 0xc5, 0xb9, 0xac, 0x45, 0x91, 0x1b, 0xe2, 0xb1, 0xdc, 0x06, 0x08, 0x42,
	0xe2, 0x98, 0x12, 0x8e, 0xd5, 0xa5, 0x67, 0x91, 0xb2, 0x13, 0x41, 0x32, 0x9f, 0x9f, 0x90, 0xd0,
	0x7c, 0x47, 0x1d, 0xfd, 0xae, 0x0c, 0x35, 0x41, 0xf8, 0x8a, 0x3a, 0x18, 0xa8, 0x81, 0x65, 0x9f,
	0x12, 0xce, 0x4c, 0xbf, 0xc3, 0xf5, 0x7b, 0x72, 0x9d, 0x8a, 0xf4, 0xaa, 0x23, 0xc0, 0x76, 0xc8,
	0x7d, 0x9c, 0xf4, 0x5b, 0x32, 0xc6, 0x42, 0xee, 0x1f, 0x08, 0xec, 0x28, 0x3c, 0xc5, 0x69, 0x9b,
	0x84, 0xe8, 0xcc, 0x8f, 0x24, 0x76, 0x44, 0xe2, 0x21, 0xd2, 0xb6, 0x44, 0x9b, 0x82, 0xaa, 0x47,
	0x96, 0x7d, 0xea, 0xb7, 0x5a, 0xfa, 0xc7, 0xd2, 0x76, 0xc8, 0xfd, 0x4d, 0x49, 0x41, 0xdb, 0x76,
	0xd0, 0xc1, 0xec, 0x78, 0x5f, 0xda, 0xb6, 0x83, 0xce, 0x9e, 0x13, 0x6f, 0xd4, 0xa6, 0xfa, 0xb7,
	0x93, 0x8d, 0x6e, 0xd1, 0xfa, 0x8f, 0x60, 0x5a, 0xe4, 0xb3, 0x2b, 0xbe, 0x61, 0x8b, 0xf3, 0x64,
	0x52, 0xd8, 0x1e, 0x42, 0x59, 0x52, 0x65, 0xcd, 0x58, 0xcb, 0xe5, 0x60, 0x09, 0xbe, 0xd2, 0x19,
	0xb8, 0xfe, 0x35, 0x54, 0xd5, 0x9c, 0x1f, 0x5a, 0xf4, 0xbe, 0x88, 0x26, 0xc9, 0xa0, 0xae, 0xf9,
	0xfc, 0x3a, 0xa5, 0x9e, 0x9c, 0x5b, 0x41, 0x85, 0xe7, 0x30, 0x93, 0x99, 0x1b, 0x37, 0xfc, 0xa8,
	0x50, 0x9f, 0x16, 0x73, 0x96, 0xfa, 0xb6, 0xf5, 0x9a, 0x60, 0x65, 0xb1, 0xd6, 0xb5, 0xaa, 0x47,
	0xfd, 0x15, 0xcc, 0x17, 0x6d, 0xe2, 0x0a, 0x9f, 0xe4, 0x8f, 0xe4, 0x56, 0xce, 0xe0, 0x00, 0x94,
	0xb5, 0x07, 0x0b, 0x19, 0xf6, 0x35, 0x30, 0xd6, 0x2b, 0x15, 0x28, 0x29, 0x84, 0x75, 0xbd, 0xcd,
	0xee, 0x29, 0x07, 0x66, 0xd1, 0xd5, 0xa3, 0xfc, 0x4e, 0x97, 0x72, 0xd6, 0xfa, 0x61, 0xab, 0xdf,
	0xa9, 0x02, 0xc4, 0x27, 0xce, 0x44, 0x57, 0x8d, 0xcd, 0x87, 0x19, 0xda, 0x5d, 0x89, 0x12, 0xc6,
	0x8c, 0x29, 0x41, 0x31, 0xec, 0xae, 0x23, 0xbe, 0x87, 0x9c, 0x72, 0xc5, 0x1d, 0x11, 0xdc, 0x12,
	0x12, 0x04, 0xf3, 0x2e, 0x54, 0x03, 0xeb, 0x98, 0x30, 0xd3, 0x72, 0x5d, 0xdf, 0x26, 0x8e, 0xa8,
	0xd6, 0x63, 0x46, 0x45, 0x10, 0x37, 0x24, 0x0d, 0x63, 0xdc, 0x21, 0xcc, 0x8e, 0x65, 0xc6, 0x84,
	0x4c, 0x19, 0x69, 0x91, 0xc8, 0x83, 0x28, 0x17, 0x79, 0x9d, 0x36, 0xb6, 0x4c, 0x26, 0xf7, 0xcd,
	0x36, 0x69, 0x8b, 0x42, 0x3e, 0x66, 0xcc, 0x08, 0x5e, 0xa3, 0xd3, 0x3e, 0x38, 0xe5, 0x87, 0xfe,
	0x3e, 0x69, 0xe7, 0xe4, 0x4f, 0xba, 0x91, 0xfc, 0x44, 0x4e, 0xfe, 0xa4, 0x2b, 0xe5, 0xbf, 0x0b,
	0x32, 0x9f, 0x99, 0x16, 0xf7, 0xdb, 0xd4, 0x36, 0x1d, 0xe2, 0x72, 0x4b, 0xd5, 0x73, 0x29, 0xbd,
	0x21, 0x18, 0xdb, 0x48, 0xd7, 0x1e, 0xc3, 0x42, 0x5a, 0xfa, 0xa1, 0x49, 0x3d, 0x3b, 0xfc, 0x6c,
	0xfd, 0xf1, 0x53, 0xf5, 0x56, 0x61, 0x2e, 0xa5, 0xf1, 0x70, 0x4f, 0xf1, 0xb4, 0x75, 0x98, 0x4f,
	0x6b, 0x7d, 0x26, 0xb4, 0x50, 0x49, 0x96, 0xff, 0xd9, 0x94, 0xd2, 0x67, 0x7b, 0x92, 0x95, 0xe4,
	0x60, 0xa9, 0xb3, 0x2e, 0x74, 0x1e, 0x3f, 0x55, 0xc0, 0x40, 0x4b, 0xa9, 0xac, 0xef, 0x09, 0x4e,
	0x5e, 0xe3, 0x51, 0xa4, 0x51, 0x29, 0x68, 0x3c, 0x52, 0x1a, 0x0f, 0x60, 0x36, 0xad, 0xf1, 0x58,
	0x68, 0x3c, 0x55, 0x40, 0xe2, 0x46, 0x4a, 0xe1, 0x31, 0x2a, 0x14, 0xe4, 0x3f, 0x57, 0xf2, 0xb5,
	0x82, 0xfc, 0xe7, 0x7d, 0xe5, 0x9f, 0x28, 0xf9, 0xe9, 0x82, 0xfc, 0x13, 0x29, 0xbf, 0x02, 0x65,
	0x19, 0x6f, 0x98, 0xe2, 0x1d, 0x01, 0x3d, 0xc6, 0x0c, 0x19, 0x82, 0x1b, 0x48, 0xc1, 0xcc, 0xce,
	0x5c, 0xff, 0xcc, 0x0c, 0x2c, 0x7e, 0x22, 0x6a, 0xd7, 0x0d, 0x19, 0x30, 0x48, 0x3c, 0xb0, 0xf8,
	0x09, 0x16, 0x2f, 0x94, 0xc1, 0x0c, 0xdd, 0xea, 0xb8, 0xae, 0x90, 0xd1, 0x94, 0x0c, 0x09, 0xdf,
	0xed, 0x74, 0x5c, 0x17, 0x65, 0x16, 0x61, 0xd2, 0xf7, 0x7d, 0xc1, 0x9d, 0x15, 0xdc, 0x09, 0xdf,
	0xf7, 0x91, 0x71, 0x27, 0x8a, 0x78, 0x86, 0x78, 0xf0, 0x67, 0x8d, 0x54, 0xc8, 0x37, 0x11, 0x11,
	0xde, 0x52, 0x21, 0x2f, 0xd8, 0x3f, 0x6f, 0x24, 0x31, 0x2f, 0xb8, 0x9f, 0xf6, 0x89, 0xbd, 0xe0,
	0x94, 0xeb, 0xbf, 0xdf, 0xe8, 0x13, 0x7c, 0x07, 0xa7, 0x39, 0x85, 0x36, 0x69, 0x47, 0x0a, 0x7f,
	0x90, 0x53, 0xd8, 0x27, 0x6d, 0xa9, 0xa0, 0x27, 0xd0, 0xf1, 0x0f, 0x1b, 0x19, 0xec, 0xa8, 0x27,
	0xd8, 0xf1, 0x8f, 0x1a, 0x19, 0xf0, 0x88, 0x78, 0x8f, 0x78, 0x8e, 0x80, 0x2e, 0x01, 0xd5, 0xff,
	0xb8, 0xa1, 0x40, 0x17, 0xf1, 0x9c, 0x0d, 0xfb, 0xf4, 0x20, 0x2b, 0x60, 0x53, 0xfd, 0x4f, 0xb2,
	0x02, 0x5b, 0xa2, 0x88, 0x3b, 0xc4, 0x8d, 0x0c, 0xfc, 0x69, 0x23, 0x82, 0x84, 0xae, 0xd4, 0x4f,
	0xb1, 0x6d, 0xaa, 0xff, 0x59, 0x86, 0xbd, 0x45, 0xe5, 0x97, 0xd1, 0xb8, 0x1c, 0x07, 0x54, 0xff,
	0xf3, 0x46, 0xae, 0x1e, 0x1f, 0xe4, 0x85, 0x6c, 0xaa, 0xff, 0x45, 0xa3, 0x58, 0xb4, 0x97, 0x53,
	0xf0, 0xef, 0x2f, 0x1b, 0x59, 0xfc, 0xb7, 0x9c, 0xc2, 0x7f, 0x7f, 0xd5, 0xc8, 0x02, 0x40, 0xcc,
	0x45, 0x0a, 0xbf, 0xf1, 0x1e, 0x2a, 0xff, 0xb5, 0x32, 0xae, 0xa8, 0x87, 0xbd, 0x83, 0xbc, 0x90,
	0x4d, 0xf5, 0xbf, 0xc9, 0x0b, 0x6d, 0x51, 0x44, 0xbf, 0x2d, 0xf9, 0x72, 0x8b, 0x87, 0x96, 0xc7,
	0xd0, 0xd6, 0xdf, 0x4a, 0xb1, 0x6a, 0x4b, 0xbc, 0xda, 0x12, 0xe4, 0x83, 0xa2, 0xa0, 0x4d, 0xf5,
	0xbf, 0x2b, 0x0a, 0xca, 0xb5, 0xd9, 0x2e, 0xb1, 0x3c, 0x89, 0xfc, 0x02, 0xaa, 0xff, 0xbd, 0x9a,
	0x56, 0x50, 0x11, 0xfb, 0x1d, 0xe4, 0x85, 0x6c, 0xaa, 0xff, 0x43, 0x5e, 0x48, 0x00, 0xc4, 0x0c,
	0x5c, 0xfa, 0xc7, 0x46, 0x01, 0x2f, 0x2d, 0xc4, 0x78, 0xe9, 0x9f, 0x1a, 0x69, 0xc0, 0xb4, 0x96,
	0x03, 0x9f, 0xff, 0xdc, 0x28, 0xa0, 0xcf, 0xbb, 0x50, 0xb5, 0x32, 0x32, 0xff, 0xa2, 0x56, 0x60,
	0xa5, 0x84, 0x6e, 0x03, 0xf0, 0x9e, 0x19, 0xa2, 0x0b, 0x03, 0xaa, 0xff, 0x42, 0x05, 0x02, 0xef,
	0x19, 0xd4, 0x3b, 0x96, 0x3e, 0x09, 0xac, 0x90, 0x53, 0x4b, 0xc5, 0x8a, 0xc7, 0xf5, 0x7f, 0x55,
	0x3e, 0x51, 0x74, 0x0c, 0x18, 0x8f, 0xd7, 0xff, 0x6d, 0x58, 0x81, 0x8b, 0x6b, 0x35, 0xf4, 0x1f,
	0x67, 0x1a, 0xfa, 0xbe, 0xd8, 0x4b, 0xb6, 0xf3, 0x9f, 0xe4, 0xda, 0xf9, 0x01, 0xf0, 0x27, 0x6a,
	0xe6, 0xbf, 0x93, 0x6d, 0xe6, 0xe7, 0xfa, 0x48, 0xc7, 0xad, 0xfc, 0x3e, 0xcc, 0xe6, 0x37, 0x22,
	0x61, 0x48, 0x1e, 0x28, 0x2d, 0xf7, 0xab, 0xce, 0x7d, 0xdb, 0x78, 0x97, 0xe5, 0xdb, 0x78, 0x97,
	0xe5, 0xdb, 0x78, 0xa4, 0xa8, 0x36, 0x5e, 0x30, 0x0b, 0x6d, 0x3c, 0x52, 0x07, 0xb5, 0xf1, 0xbf,
	0xc4, 0x36, 0x1e, 0x67, 0xb9, 0x6a, 0x1b, 0x9f, 0x59, 0x51, 0xb6, 0x8d, 0x5f, 0x85, 0x8a, 0x27,
	0x8a, 0xaa, 0x6d, 0x62, 0x3b, 0xa5, 0x7a, 0x79, 0xf0, 0xb0, 0x9e, 0xda, 0xbb, 0xc4, 0x72, 0xd2,
	0x12, 0xdc, 0xa2, 0xae, 0x6a, 0xea, 0x95, 0xc4, 0xa1, 0x45, 0x5d, 0xcc, 0x6c, 0xb6, 0xdf, 0x6e,
	0x5b, 0x9e, 0xa3, 0x1a, 0xfb, 0x68, 0x98, 0x6d, 0xc1, 0xc7, 0x73, 0x2d, 0x78, 0xaa, 0x25, 0x99,
	0xc8, 0xb4, 0x24, 0x29, 0x08, 0x3f, 0x99, 0x86, 0xf0, 0x08, 0xf9, 0x8f, 0x64, 0x72, 0x91, 0xe5,
	0x7f, 0xfc, 0x48, 0x64, 0x16, 0x45, 0xb6, 0xa9, 0xaa, 0xf1, 0x48, 0xde, 0xa2, 0xda, 0x3d, 0xa8,
	0xd9, 0xe1, 0x79, 0xc0, 0x7d, 0xf9, 0x92, 0xda, 0xe9, 0xa9, 0x6a, 0x5e, 0x91, 0xd4, 0x17, 0xe4,
	0x7c, 0xcf, 0xe9, 0x65, 0x5f, 0x21, 0xc8, 0xda, 0x9d, 0x79, 0x85, 0x90, 0x34, 0xbb, 0x95, 0x88,
	0xa9, 0x7a, 0xdd, 0x15, 0x28, 0x73, 0xaf, 0xed, 0x84, 0x12, 0x1c, 0x89, 0xa2, 0x3c, 0x61, 0x80,
	0x20, 0x09, 0x6c, 0xa4, 0x04, 0x82, 0x48, 0xa0, 0x16, 0x0b, 0x04, 0x4a, 0xe0, 0x36, 0x40, 0x28,
	0x2c, 0xb4, 0x42, 0x42, 0x44, 0xd5, 0x9d, 0x30, 0xa6, 0x04, 0x65, 0x27, 0x24, 0x44, 0xb1, 0x03,
	0xc5, 0x9e, 0x89, 0xd9, 0x81, 0x64, 0xaf, 0x41, 0x85, 0x78, 0xb6, 0xa9, 0xa0, 0x21, 0x53, 0xdf,
	0x18, 0xca, 0xc4, 0xb3, 0x15, 0x6c, 0xc4, 0x27, 0x6c, 0x5a, 0x7c, 0x33, 0xf1, 0xdb, 0x81, 0x4b,
	0x38, 0xf5, 0x3d, 0x26, 0x8a, 0xed, 0x84, 0x51, 0x23, 0x9e, 0xbd, 0x95, 0x50, 0x23, 0x5b, 0x2d,
	0x8b, 0xba, 0x9d, 0x90, 0x30, 0x51, 0x74, 0xa5, 0xad, 0x1d, 0x45, 0x92, 0x50, 0x30, 0x35, 0x9d,
	0xec, 0xfd, 0xcb, 0x0e, 0xc9, 0x4c, 0x87, 0x22, 0xe9, 0xe9, 0xe6, 0xe5, 0x74, 0x0e, 0xc9, 0x4f,
	0x87, 0x82, 0xf1, 0x74, 0x0b, 0xb1, 0xad, 0x78, 0x3a, 0x0d, 0xc6, 0xc4, 0xd7, 0x9b, 0x45, 0x75,
	0x9b, 0xc4, 0x72, 0x39, 0x3a, 0x94, 0xf4, 0x02, 0x97, 0xda, 0x94, 0x9b, 0xb4, 0x2b, 0x5e, 0x03,
	0x8c, 0x19, 0x10, 0x91, 0xf6, 0xba, 0xda, 0x17, 0xb0, 0x14, 0x84, 0xc4, 0x94, 0x31, 0xc7, 0xb8,
	0x75, 0x4c, 0x1e, 0x9a, 0x4f, 0x4d, 0x7e, 0x12, 0x62, 0x68, 0xcb, 0x2f, 0x10, 0xf3, 0x41, 0x48,
	0xb6, 0x91, 0xdf, 0x14, 0xec, 0xa7, 0x87, 0x82, 0xa9, 0x7d, 0x0f, 0x96, 0x03, 0x9f, 0xf1, 0x01,
	0xaa, 0xf2, 0x2b, 0xc5, 0x02, 0x4a, 0xf4, 0xd1, 0xfd, 0x08, 0xa6, 0x29, 0xc3, 0x07, 0x04, 0xe3,
	0xca, 0x6c, 0xb9, 0xfe, 0x99, 0x78, 0x3b, 0x50, 0x32, 0xaa, 0x94, 0x6d, 0x4b, 0xea, 0x8e, 0xeb,
	0x9f, 0x25, 0xbd, 0x74, 0x8b, 0xc6, 0x5f, 0x30, 0x04, 0x61, 0x87, 0xf6, 0x79, 0x31, 0x71, 0xfb,
	0x8a, 0x2f, 0x26, 0x3e, 0x81, 0x59, 0x15, 0xe6, 0x27, 0x6d, 0xcb, 0x8e, 0x63, 0xfd, 0x8e, 0x04,
	0xc8, 0x92, 0xb5, 0xdb, 0xb6, 0x6c, 0x15, 0xef, 0x6b, 0x50, 0x41, 0xb1, 0xf8, 0x18, 0xe5, 0x97,
	0x8f, 0x72, 0xdb, 0xca, 0x1c, 0x23, 0x8a, 0xa4, 0x8f, 0x51, 0x7e, 0x05, 0xa9, 0xb5, 0xad, 0xfc,
	0x31, 0xa2, 0x60, 0x7c, 0x8c, 0x6b, 0xb1, 0xad, 0xf8, 0x18, 0x93, 0x2e, 0xbd, 0x9e, 0xea, 0xd2,
	0x45, 0x33, 0x8e, 0x59, 0xe9, 0xaa, 0xcd, 0x78, 0x94, 0xed, 0xb2, 0xcd, 0xb8, 0xa0, 0x26, 0xcd,
	0x78, 0x3a, 0x93, 0x46, 0xcd, 0x78, 0x92, 0x47, 0x45, 0x33, 0x2e, 0xe7, 0xbc, 0x4e, 0x33, 0x2e,
	0x26, 0x19, 0xd8, 0x8c, 0x27, 0x2b, 0x52, 0x73, 0xa7, 0x9a, 0xf1, 0xf4, 0xdc, 0x97, 0x37, 0xe3,
	0x69, 0xe9, 0x5c, 0x33, 0x8e, 0xac, 0xf7, 0x6e, 0xc6, 0x07, 0xd7, 0x00, 0xd1, 0x8c, 0x17, 0x6c,
	0x5e, 0xda, 0x8c, 0x17, 0x34, 0xb2, 0xcd, 0x78, 0x9a, 0x7d, 0xcd, 0x66, 0x1c, 0x4d, 0xbd, 0x5f,
	0x33, 0x7e, 0xc1, 0x66, 0xf7, 0x94, 0x03, 0xdf, 0xa3, 0x19, 0xcf, 0x8a, 0x27, 0xdb, 0xac, 0x00,
	0xc4, 0x07, 0xce, 0x24, 0x26, 0x8a, 0x45, 0xbf, 0x79, 0x4c, 0x14, 0x3f, 0x02, 0x97, 0x63, 0xa2,
	0x54, 0x14, 0x5e, 0x01, 0x13, 0xc5, 0x5b, 0x48, 0x63, 0xa2, 0xdc, 0x46, 0x2e, 0xc7, 0x44, 0x39,
	0x85, 0x2c, 0x26, 0x7a, 0x8b, 0x00, 0x33, 0x83, 0x89, 0xce, 0x04, 0x08, 0x4d, 0x63, 0x22, 0x41,
	0x91, 0x98, 0x48, 0x32, 0xf3, 0x98, 0x48, 0x50, 0x07, 0x61, 0xa2, 0xdf, 0x1b, 0x86, 0x29, 0x31,
	0xcb, 0x15, 0x31, 0x51, 0x76, 0x45, 0x59, 0x4c, 0x74, 0x0f, 0xc6, 0x44, 0x06, 0x1e, 0xc9, 0x1c,
	0x97, 0xd0, 0x10, 0xe9, 0x57, 0x70, 0xd5, 0x3d, 0x8b, 0xd1, 0xdc, 0x3d, 0x8b, 0xb1, 0xe8, 0x9e,
	0x05, 0xa6, 0x38, 0xa1, 0x72, 0xc5, 0x14, 0x17, 0x2f, 0x3e, 0x93, 0xe2, 0x24, 0x35, 0x4e, 0x71,
	0x19, 0xc7, 0xa8, 0x14, 0x97, 0x72, 0x0b, 0xa6, 0x38, 0x35, 0xe7, 0x35, 0x52, 0x9c, 0x9c, 0x64,
	0x50, 0x8a, 0x4b, 0xad, 0x48, 0xcd, 0x9d, 0xa4, 0xb8, 0xcc, 0xdc, 0x97, 0xa6, 0xb8, 0x8c, 0x74,
	0x36, 0xc5, 0x09, 0xd6, 0xfb, 0xa6, 0xb8, 0x0b, 0x8e, 0x14, 0x53, 0x5c, 0xd1, 0xe6, 0x65, 0x29,
	0xae, 0xa8, 0x91, 0x49, 0x71, 0x19, 0xf6, 0x35, 0x52, 0xdc, 0xcf, 0x87, 0x95, 0xad, 0xe7, 0x84,
	0x3f, 0xf3, 0x78, 0x48, 0x09, 0xfb, 0x46, 0x36, 0x7d, 0xc5, 0x38, 0x9e, 0x83, 0x71, 0x79, 0x81,
	0x43, 0x86, 0xb2, 0x1c, 0xd4, 0xdf, 0xc2, 0x52, 0xff, 0x35, 0xe1, 0x16, 0xbf, 0x97, 0x77, 0xda,
	0x6a, 0x6e, 0x41, 0x05, 0xad, 0x4c, 0xd2, 0x8c, 0x43, 0x88, 0xd5, 0x7f, 0x36, 0x0a, 0x73, 0x62,
	0xb8, 0x69, 0x85, 0xb6, 0xff, 0x7c, 0x6b, 0x7f, 0x9b, 0x30, 0x1b, 0xa7, 0xb8, 0x0d, 0x40, 0x5d,
	0xca, 0xb8, 0x19, 0x5f, 0x33, 0x9e, 0x30, 0xa6, 0x04, 0x65, 0xc3, 0x71, 0x42, 0x64, 0xfb, 0x09,
	0x7b, 0x44, 0xb2, 0xfd, 0x98, 0x9d, 0xea, 0x48, 0x46, 0xb3, 0x1d, 0xc9, 0x3d, 0xa8, 0xa1, 0x47,
	0xc5, 0x4b, 0x4d, 0xb9, 0x6d, 0xf9, 0xc4, 0x56, 0x4e, 0xc9, 0x39, 0xce, 0x2d, 0x2f, 0xae, 0xc8,
	0xdb, 0x43, 0xc2, 0xf6, 0xb8, 0xbc, 0xff, 0x41, 0xbb, 0xc2, 0xf0, 0x0a, 0x94, 0xe5, 0xc1, 0x4a,
	0xe6, 0x84, 0x84, 0xf4, 0x92, 0x24, 0x04, 0xee, 0x42, 0xd5, 0xf1, 0xfd, 0xf0, 0x88, 0xb8, 0xae,
	0x14, 0x91, 0x5f, 0x25, 0x2b, 0x11, 0xb1, 0x20, 0xe4, 0x58, 0xea, 0x6d, 0x66, 0x4a, 0x68, 0xdb,
	0xe2, 0x56, 0x0c, 0x80, 0xa7, 0x06, 0x03, 0x60, 0x90, 0xd3, 0xa7, 0x00, 0xf0, 0x0a, 0x94, 0xd5,
	0x77, 0x32, 0x71, 0xcf, 0x4a, 0xf6, 0x33, 0xea, 0xd3, 0x99, 0xb8, 0x68, 0xb5, 0x06, 0x15, 0x79,
	0x97, 0x4a, 0xc5, 0x67, 0x25, 0x75, 0x95, 0x4a, 0xc5, 0xe3, 0x7f, 0x8d, 0xc0, 0x62, 0xe1, 0x14,
	0xbf, 0xf1, 0x7a, 0x96, 0xe4, 0x3b, 0x59, 0xcf, 0xfa, 0x86, 0x61, 0xaa, 0xca, 0x8d, 0x5d, 0x94,
	0x88, 0x0a, 0x55, 0x6e, 0x3c, 0x5f, 0xe5, 0x92, 0x98, 0x53, 0x55, 0x4e, 0x5b, 0x80, 0xf1, 0xae,
	0xe5, 0x76, 0xe4, 0x1d, 0x36, 0x2c, 0x30, 0x72, 0xa8, 0xed, 0x40, 0x4d, 0x7a, 0xe8, 0xd8, 0x6e,
	0x8b, 0x38, 0x11, 0x47, 0x98, 0xb9, 0xf0, 0xd1, 0x2f, 0x62, 0x77, 0x87, 0x0c, 0xe9, 0xd9, 0xe7,
	0x76, 0x1b, 0x49, 0x9a, 0x06, 0xa3, 0xa1, 0x75, 0x26, 0x8e, 0xb6, 0xb2, 0x3b, 0x64, 0xe0, 0x00,
	0xcb, 0x96, 0x5c, 0x88, 0xeb, 0xf3, 0x3d, 0xaf, 0xe5, 0xd7, 0x7f, 0x02, 0xcb, 0x03, 0x5c, 0x8d,
	0x0f, 0xc1, 0x0f, 0x0a, 0xe9, 0x73, 0xed, 0x82, 0x07, 0xad, 0x90, 0x48, 0x03, 0xf5, 0x6c, 0x3d,
	0x27, 0x7c, 0x9f, 0x70, 0xeb, 0xff, 0xfe, 0x10, 0xeb, 0xaf, 0x93, 0xc8, 0x49, 0xcf, 0x28, 0x73,
	0x46, 0x7e, 0x2f, 0x77, 0x8a, 0x7b, 0x49, 0x2b, 0xf5, 0xd9, 0x48, 0xf3, 0xff, 0x7d, 0x23, 0xcd,
	0x0f, 0xd9, 0x48, 0x73, 0xd0, 0x46, 0xbe, 0xd3, 0xcb, 0x5c, 0x48, 0x8f, 0x6e, 0x07, 0x6b, 0x0b,
	0xa0, 0x35, 0x5f, 0xed, 0x1c, 0xbe, 0xdd, 0x30, 0x9e, 0x99, 0x07, 0xbb, 0x6f, 0x4c, 0xe3, 0xc7,
	0xdb, 0xfb, 0x1b, 0x33, 0x43, 0x05, 0xfa, 0xa1, 0xa0, 0x0f, 0x6b, 0x3a, 0xcc, 0x65, 0xe8, 0x7b,
	0x8d, 0xe7, 0xc6, 0xb3, 0x66, 0x73, 0x66, 0x44, 0x5b, 0x84, 0xd9, 0x0c, 0xe7, 0x99, 0x64, 0x8c,
	0xae, 0xff, 0x62, 0x06, 0x4a, 0x7b, 0x6a, 0x95, 0x9a, 0x05, 0x37, 0x0a, 0xbf, 0x52, 0xd1, 0xbe,
	0x95, 0xec, 0xe2, 0x82, 0x9f, 0xb0, 0x2c, 0xdf, 0xbd, 0xe8, 0xc7, 0x25, 0xca, 0x47, 0xf5, 0x21,
	0xed, 0xa7, 0x30, 0x9d, 0xfb, 0xa1, 0x86, 0x96, 0xd2, 0x1c, 0xf8, 0x9b, 0x90, 0xe5, 0x7b, 0x17,
	0x08, 0xe5, 0xec, 0xe7, 0x7e, 0xed, 0x90, 0xb6, 0x3f, 0xf0, 0x47, 0x15, 0x69, 0xfb, 0x83, 0x7f,
	0x2d, 0x51, 0x1f, 0xd2, 0xde, 0xf6, 0xbb, 0xf6, 0x7d, 0xe7, 0x82, 0x2b, 0xd9, 0x68, 0x7c, 0xf5,
	0xc2, 0xbb, 0xfe, 0xd2, 0xf0, 0x4f, 0xa0, 0x96, 0xbd, 0x73, 0xae, 0xd5, 0x2f, 0xb9, 0x77, 0x9f,
	0xf3, 0xfa, 0xc0, 0x8b, 0xee, 0xf5, 0x21, 0x6d, 0x07, 0x26, 0xd5, 0x0d, 0x6c, 0xed, 0x66, 0x9f,
	0x1b, 0xdb, 0xb1, 0xb9, 0x5b, 0x03, 0xaf, 0x73, 0x4b, 0x3b, 0x9b, 0x50, 0xfd, 0xaa, 0x43, 0x09,
	0xb3, 0x71, 0xdc, 0xf4, 0x1c, 0x2d, 0x75, 0x21, 0x2a, 0x7d, 0x1d, 0x7b, 0x79, 0xb1, 0x40, 0x57,
	0x8f, 0xec, 0x90, 0xb6, 0x01, 0x15, 0x65, 0xa3, 0xc9, 0xad, 0x90, 0x7f, 0x88, 0x89, 0x1f, 0x41,
	0x39, 0x36, 0xe1, 0x07, 0x1f, 0x62, 0xe1, 0x65, 0x7c, 0x67, 0x72, 0x2b, 0x24, 0x16, 0x27, 0xda,
	0xcd, 0x3e, 0xf7, 0x0b, 0xfb, 0xb9, 0xa5, 0x78, 0x59, 0x31, 0x63, 0xed, 0x75, 0xe0, 0x5c, 0xdb,
	0xda, 0x8f, 0x63, 0x6b, 0x12, 0x44, 0x6a, 0x6b, 0x17, 0x5f, 0x29, 0x44, 0x9b, 0xf5, 0x81, 0x22,
	0x69, 0xcb, 0xaf, 0x00, 0x92, 0xcb, 0x66, 0xda, 0x9d, 0x0b, 0x6e, 0xed, 0xa1, 0xcd, 0x95, 0x8b,
	0xae, 0xa8, 0x45, 0x71, 0x25, 0x6f, 0x3e, 0x28, 0x27, 0x2e, 0x15, 0x2e, 0x0d, 0xc4, 0xc6, 0x96,
	0x07, 0xdc, 0x27, 0xc8, 0xda, 0x51, 0xee, 0xfb, 0x60, 0x3b, 0x86, 0xb2, 0xa3, 0x1c, 0xb7, 0x72,
	0xd1, 0x1d, 0x81, 0xdc, 0x83, 0xd9, 0xff, 0x96, 0x40, 0x7d, 0x48, 0xdb, 0x83, 0x52, 0xf4, 0x62,
	0x5f, 0xbb, 0x35, 0xf0, 0x53, 0x3c, 0x5a, 0xbb, 0x3d, 0xf8, 0x53, 0x40, 0xb2, 0x4d, 0xec, 0x87,
	0xfb, 0xb8, 0x2b, 0xfb, 0xd2, 0x6b, 0x79, 0x79, 0xc0, 0x1b, 0x9f, 0xac, 0x9d, 0x3e, 0xee, 0x7a,
	0x2f, 0x3b, 0x86, 0xb2, 0xd3, 0xc7, 0x5d, 0xfd, 0xde, 0xfb, 0x64, 0xdc, 0xd5, 0xf7, 0x3d, 0x8e,
	0x72, 0x97, 0xea, 0xf9, 0xb5, 0x5b, 0x03, 0x5f, 0x96, 0xe4, 0xdd, 0x55, 0x7c, 0xad, 0x20, 0xb7,
	0x29, 0xea, 0x66, 0xd1, 0x5d, 0xb9, 0x06, 0x3a, 0xbd, 0xcd, 0x7c, 0xaf, 0x99, 0xb2, 0x53, 0x74,
	0xd7, 0xfb, 0xd9, 0xf9, 0xa9, 0xea, 0xdc, 0x13, 0x70, 0x95, 0xae, 0x2d, 0x03, 0xdb, 0xa2, 0x74,
	0x6d, 0x19, 0x0c, 0xea, 0xea, 0x43, 0x5a, 0x03, 0x2a, 0x69, 0xc0, 0x73, 0xd1, 0x42, 0xd7, 0x2e,
	0xc6, 0x48, 0x59, 0x7b, 0xcd, 0xf7, 0xb7, 0xd7, 0xec, 0x63, 0x6f, 0xbd, 0x0a, 0xe5, 0x54, 0x91,
	0xd9, 0x84, 0xdf, 0x28, 0x9d, 0x58, 0xae, 0xf8, 0x3d, 0xee, 0xd1, 0x84, 0xf8, 0xf3, 0xe8, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xf8, 0x41, 0xf5, 0xcc, 0x3b, 0x00, 0x00,
}
