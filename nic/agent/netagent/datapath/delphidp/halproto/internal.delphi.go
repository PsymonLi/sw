// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SoftwarePhvPipeline: pipeline to inject the software phv
type SoftwarePhvPipeline int32

const (
	SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA   SoftwarePhvPipeline = 0
	SoftwarePhvPipeline_SOFTWARE_PHV_TXDMA   SoftwarePhvPipeline = 1
	SoftwarePhvPipeline_SOFTWARE_PHV_INGRESS SoftwarePhvPipeline = 2
	SoftwarePhvPipeline_SOFTWARE_PHV_EGRESS  SoftwarePhvPipeline = 3
)

var SoftwarePhvPipeline_name = map[int32]string{
	0: "SOFTWARE_PHV_RXDMA",
	1: "SOFTWARE_PHV_TXDMA",
	2: "SOFTWARE_PHV_INGRESS",
	3: "SOFTWARE_PHV_EGRESS",
}
var SoftwarePhvPipeline_value = map[string]int32{
	"SOFTWARE_PHV_RXDMA":   0,
	"SOFTWARE_PHV_TXDMA":   1,
	"SOFTWARE_PHV_INGRESS": 2,
	"SOFTWARE_PHV_EGRESS":  3,
}

func (x SoftwarePhvPipeline) String() string {
	return proto.EnumName(SoftwarePhvPipeline_name, int32(x))
}
func (SoftwarePhvPipeline) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

type ProgramAddressReq struct {
	// Handle. E.g.: 'iris', 'p4plus'.
	Handle string `protobuf:"bytes,1,opt,name=handle" json:"handle,omitempty"`
	// Program name to resolve
	ProgName string `protobuf:"bytes,2,opt,name=prog_name,json=progName" json:"prog_name,omitempty"`
	// If resolve_label is false, returns the base address of the program.
	// Otherwise returns the PC offset (14 bits) of the program.
	ResolveLabel bool `protobuf:"varint,3,opt,name=resolve_label,json=resolveLabel" json:"resolve_label,omitempty"`
	// Label name to resolve
	Label string `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
}

func (m *ProgramAddressReq) Reset()                    { *m = ProgramAddressReq{} }
func (m *ProgramAddressReq) String() string            { return proto.CompactTextString(m) }
func (*ProgramAddressReq) ProtoMessage()               {}
func (*ProgramAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

func (m *ProgramAddressReq) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

func (m *ProgramAddressReq) GetProgName() string {
	if m != nil {
		return m.ProgName
	}
	return ""
}

func (m *ProgramAddressReq) GetResolveLabel() bool {
	if m != nil {
		return m.ResolveLabel
	}
	return false
}

func (m *ProgramAddressReq) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ProgramAddressResp struct {
	Addr int64 `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
}

func (m *ProgramAddressResp) Reset()                    { *m = ProgramAddressResp{} }
func (m *ProgramAddressResp) String() string            { return proto.CompactTextString(m) }
func (*ProgramAddressResp) ProtoMessage()               {}
func (*ProgramAddressResp) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *ProgramAddressResp) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

type GetProgramAddressRequestMsg struct {
	Request []*ProgramAddressReq `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *GetProgramAddressRequestMsg) Reset()                    { *m = GetProgramAddressRequestMsg{} }
func (m *GetProgramAddressRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*GetProgramAddressRequestMsg) ProtoMessage()               {}
func (*GetProgramAddressRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

func (m *GetProgramAddressRequestMsg) GetRequest() []*ProgramAddressReq {
	if m != nil {
		return m.Request
	}
	return nil
}

type ProgramAddressResponseMsg struct {
	Response []*ProgramAddressResp `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProgramAddressResponseMsg) Reset()                    { *m = ProgramAddressResponseMsg{} }
func (m *ProgramAddressResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProgramAddressResponseMsg) ProtoMessage()               {}
func (*ProgramAddressResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

func (m *ProgramAddressResponseMsg) GetResponse() []*ProgramAddressResp {
	if m != nil {
		return m.Response
	}
	return nil
}

type HbmAddressReq struct {
	// handle that specifies region in config (json) file
	Handle string `protobuf:"bytes,1,opt,name=handle" json:"handle,omitempty"`
}

func (m *HbmAddressReq) Reset()                    { *m = HbmAddressReq{} }
func (m *HbmAddressReq) String() string            { return proto.CompactTextString(m) }
func (*HbmAddressReq) ProtoMessage()               {}
func (*HbmAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{4} }

func (m *HbmAddressReq) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

type HbmAddressResp struct {
	Addr int64  `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
	Size uint32 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
}

func (m *HbmAddressResp) Reset()                    { *m = HbmAddressResp{} }
func (m *HbmAddressResp) String() string            { return proto.CompactTextString(m) }
func (*HbmAddressResp) ProtoMessage()               {}
func (*HbmAddressResp) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{5} }

func (m *HbmAddressResp) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *HbmAddressResp) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type AllocHbmAddressRequestMsg struct {
	Request []*HbmAddressReq `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *AllocHbmAddressRequestMsg) Reset()                    { *m = AllocHbmAddressRequestMsg{} }
func (m *AllocHbmAddressRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*AllocHbmAddressRequestMsg) ProtoMessage()               {}
func (*AllocHbmAddressRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{6} }

func (m *AllocHbmAddressRequestMsg) GetRequest() []*HbmAddressReq {
	if m != nil {
		return m.Request
	}
	return nil
}

type AllocHbmAddressResponseMsg struct {
	Response []*HbmAddressResp `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *AllocHbmAddressResponseMsg) Reset()                    { *m = AllocHbmAddressResponseMsg{} }
func (m *AllocHbmAddressResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*AllocHbmAddressResponseMsg) ProtoMessage()               {}
func (*AllocHbmAddressResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{7} }

func (m *AllocHbmAddressResponseMsg) GetResponse() []*HbmAddressResp {
	if m != nil {
		return m.Response
	}
	return nil
}

type LifBdfReq struct {
	Lif uint32 `protobuf:"varint,1,opt,name=lif" json:"lif,omitempty"`
	Bdf uint32 `protobuf:"varint,2,opt,name=bdf" json:"bdf,omitempty"`
}

func (m *LifBdfReq) Reset()                    { *m = LifBdfReq{} }
func (m *LifBdfReq) String() string            { return proto.CompactTextString(m) }
func (*LifBdfReq) ProtoMessage()               {}
func (*LifBdfReq) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{8} }

func (m *LifBdfReq) GetLif() uint32 {
	if m != nil {
		return m.Lif
	}
	return 0
}

func (m *LifBdfReq) GetBdf() uint32 {
	if m != nil {
		return m.Bdf
	}
	return 0
}

type LifBdfResp struct {
	Lif    uint32 `protobuf:"varint,1,opt,name=lif" json:"lif,omitempty"`
	Bdf    uint32 `protobuf:"varint,2,opt,name=bdf" json:"bdf,omitempty"`
	Status int32  `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (m *LifBdfResp) Reset()                    { *m = LifBdfResp{} }
func (m *LifBdfResp) String() string            { return proto.CompactTextString(m) }
func (*LifBdfResp) ProtoMessage()               {}
func (*LifBdfResp) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{9} }

func (m *LifBdfResp) GetLif() uint32 {
	if m != nil {
		return m.Lif
	}
	return 0
}

func (m *LifBdfResp) GetBdf() uint32 {
	if m != nil {
		return m.Bdf
	}
	return 0
}

func (m *LifBdfResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type ConfigureLifBdfRequestMsg struct {
	Request []*LifBdfReq `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ConfigureLifBdfRequestMsg) Reset()                    { *m = ConfigureLifBdfRequestMsg{} }
func (m *ConfigureLifBdfRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ConfigureLifBdfRequestMsg) ProtoMessage()               {}
func (*ConfigureLifBdfRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{10} }

func (m *ConfigureLifBdfRequestMsg) GetRequest() []*LifBdfReq {
	if m != nil {
		return m.Request
	}
	return nil
}

type ConfigureLifBdfResponseMsg struct {
	Response []*LifBdfResp `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ConfigureLifBdfResponseMsg) Reset()                    { *m = ConfigureLifBdfResponseMsg{} }
func (m *ConfigureLifBdfResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ConfigureLifBdfResponseMsg) ProtoMessage()               {}
func (*ConfigureLifBdfResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{11} }

func (m *ConfigureLifBdfResponseMsg) GetResponse() []*LifBdfResp {
	if m != nil {
		return m.Response
	}
	return nil
}

// SoftwarePhvStatus represents the current status of the PHVs
type SoftwarePhvStatus struct {
	Pipeline    SoftwarePhvPipeline `protobuf:"varint,1,opt,name=pipeline,enum=internal.SoftwarePhvPipeline" json:"pipeline,omitempty"`
	Enabled     bool                `protobuf:"varint,2,opt,name=enabled" json:"enabled,omitempty"`
	Done        bool                `protobuf:"varint,3,opt,name=done" json:"done,omitempty"`
	CurrentCntr uint32              `protobuf:"varint,4,opt,name=current_cntr,json=currentCntr" json:"current_cntr,omitempty"`
	InjectCntr  uint32              `protobuf:"varint,5,opt,name=inject_cntr,json=injectCntr" json:"inject_cntr,omitempty"`
}

func (m *SoftwarePhvStatus) Reset()                    { *m = SoftwarePhvStatus{} }
func (m *SoftwarePhvStatus) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvStatus) ProtoMessage()               {}
func (*SoftwarePhvStatus) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{12} }

func (m *SoftwarePhvStatus) GetPipeline() SoftwarePhvPipeline {
	if m != nil {
		return m.Pipeline
	}
	return SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA
}

func (m *SoftwarePhvStatus) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *SoftwarePhvStatus) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *SoftwarePhvStatus) GetCurrentCntr() uint32 {
	if m != nil {
		return m.CurrentCntr
	}
	return 0
}

func (m *SoftwarePhvStatus) GetInjectCntr() uint32 {
	if m != nil {
		return m.InjectCntr
	}
	return 0
}

// SoftwarePhvResponse is generic response
type SoftwarePhvResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *SoftwarePhvResponse) Reset()                    { *m = SoftwarePhvResponse{} }
func (m *SoftwarePhvResponse) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvResponse) ProtoMessage()               {}
func (*SoftwarePhvResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{13} }

func (m *SoftwarePhvResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// SoftwarePhvResponseMsg is batched response to SoftwarePhvRequestMsg
type SoftwarePhvResponseMsg struct {
	Response []*SoftwarePhvResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SoftwarePhvResponseMsg) Reset()                    { *m = SoftwarePhvResponseMsg{} }
func (m *SoftwarePhvResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvResponseMsg) ProtoMessage()               {}
func (*SoftwarePhvResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{14} }

func (m *SoftwarePhvResponseMsg) GetResponse() []*SoftwarePhvResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SoftwarePhvGetRequest is used to get information about a PHV
type SoftwarePhvGetRequest struct {
	Pipeline SoftwarePhvPipeline `protobuf:"varint,1,opt,name=pipeline,enum=internal.SoftwarePhvPipeline" json:"pipeline,omitempty"`
}

func (m *SoftwarePhvGetRequest) Reset()                    { *m = SoftwarePhvGetRequest{} }
func (m *SoftwarePhvGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvGetRequest) ProtoMessage()               {}
func (*SoftwarePhvGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{15} }

func (m *SoftwarePhvGetRequest) GetPipeline() SoftwarePhvPipeline {
	if m != nil {
		return m.Pipeline
	}
	return SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA
}

// SoftwarePhvGetRequestMsg is batched GET request for PHV
type SoftwarePhvGetRequestMsg struct {
	Request []*SoftwarePhvGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SoftwarePhvGetRequestMsg) Reset()                    { *m = SoftwarePhvGetRequestMsg{} }
func (m *SoftwarePhvGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvGetRequestMsg) ProtoMessage()               {}
func (*SoftwarePhvGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{16} }

func (m *SoftwarePhvGetRequestMsg) GetRequest() []*SoftwarePhvGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SoftwarePhvGetResponse captures all the information about a Sw PHV
// only if api_status indicates success, other fields are valid
type SoftwarePhvGetResponse struct {
	ApiStatus ApiStatus          `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *SoftwarePhvStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *SoftwarePhvGetResponse) Reset()                    { *m = SoftwarePhvGetResponse{} }
func (m *SoftwarePhvGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvGetResponse) ProtoMessage()               {}
func (*SoftwarePhvGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{17} }

func (m *SoftwarePhvGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SoftwarePhvGetResponse) GetStatus() *SoftwarePhvStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// SoftwarePhvGetResponseMsg is the batched response to SoftwarePhvGetRequestMsg
type SoftwarePhvGetResponseMsg struct {
	Response []*SoftwarePhvGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SoftwarePhvGetResponseMsg) Reset()                    { *m = SoftwarePhvGetResponseMsg{} }
func (m *SoftwarePhvGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvGetResponseMsg) ProtoMessage()               {}
func (*SoftwarePhvGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{18} }

func (m *SoftwarePhvGetResponseMsg) GetResponse() []*SoftwarePhvGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SoftwarePhvInject is the packet inject spec
type SoftwarePhvInject struct {
	Pipeline SoftwarePhvPipeline `protobuf:"varint,1,opt,name=pipeline,enum=internal.SoftwarePhvPipeline" json:"pipeline,omitempty"`
}

func (m *SoftwarePhvInject) Reset()                    { *m = SoftwarePhvInject{} }
func (m *SoftwarePhvInject) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvInject) ProtoMessage()               {}
func (*SoftwarePhvInject) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{19} }

func (m *SoftwarePhvInject) GetPipeline() SoftwarePhvPipeline {
	if m != nil {
		return m.Pipeline
	}
	return SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA
}

// SoftwarePhvInjectMsg is the inject message
type SoftwarePhvInjectMsg struct {
	Request []*SoftwarePhvInject `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SoftwarePhvInjectMsg) Reset()                    { *m = SoftwarePhvInjectMsg{} }
func (m *SoftwarePhvInjectMsg) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvInjectMsg) ProtoMessage()               {}
func (*SoftwarePhvInjectMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{20} }

func (m *SoftwarePhvInjectMsg) GetRequest() []*SoftwarePhvInject {
	if m != nil {
		return m.Request
	}
	return nil
}

type LogFlowRequestMsg struct {
	Request []*FWEvent `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LogFlowRequestMsg) Reset()                    { *m = LogFlowRequestMsg{} }
func (m *LogFlowRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LogFlowRequestMsg) ProtoMessage()               {}
func (*LogFlowRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{21} }

func (m *LogFlowRequestMsg) GetRequest() []*FWEvent {
	if m != nil {
		return m.Request
	}
	return nil
}

type LogFlowResponseMsg struct {
	Response []*LogFlowResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LogFlowResponseMsg) Reset()                    { *m = LogFlowResponseMsg{} }
func (m *LogFlowResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LogFlowResponseMsg) ProtoMessage()               {}
func (*LogFlowResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{22} }

func (m *LogFlowResponseMsg) GetResponse() []*LogFlowResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type LogFlowResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *LogFlowResponse) Reset()                    { *m = LogFlowResponse{} }
func (m *LogFlowResponse) String() string            { return proto.CompactTextString(m) }
func (*LogFlowResponse) ProtoMessage()               {}
func (*LogFlowResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{23} }

func (m *LogFlowResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// Codegen forms the Request and Response messages using the package name "internal"
// This is to calm the autogenerator
type EmptyRequest struct {
	Request []*Empty `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *EmptyRequest) Reset()                    { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string            { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()               {}
func (*EmptyRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{24} }

func (m *EmptyRequest) GetRequest() []*Empty {
	if m != nil {
		return m.Request
	}
	return nil
}

type EmptyResponse struct {
	Response []*Empty `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{25} }

func (m *EmptyResponse) GetResponse() []*Empty {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecCbKeyHandle is used to operate on a ipsec_cb either by its key or handle
type IpsecCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*IpsecCbKeyHandle_IpseccbId
	//	*IpsecCbKeyHandle_IpseccbHandle
	KeyOrHandle isIpsecCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *IpsecCbKeyHandle) Reset()                    { *m = IpsecCbKeyHandle{} }
func (m *IpsecCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbKeyHandle) ProtoMessage()               {}
func (*IpsecCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{26} }

type isIpsecCbKeyHandle_KeyOrHandle interface{ isIpsecCbKeyHandle_KeyOrHandle() }

type IpsecCbKeyHandle_IpseccbId struct {
	IpseccbId uint32 `protobuf:"varint,1,opt,name=ipseccb_id,json=ipseccbId,oneof"`
}
type IpsecCbKeyHandle_IpseccbHandle struct {
	IpseccbHandle uint64 `protobuf:"fixed64,2,opt,name=ipseccb_handle,json=ipseccbHandle,oneof"`
}

func (*IpsecCbKeyHandle_IpseccbId) isIpsecCbKeyHandle_KeyOrHandle()     {}
func (*IpsecCbKeyHandle_IpseccbHandle) isIpsecCbKeyHandle_KeyOrHandle() {}

func (m *IpsecCbKeyHandle) GetKeyOrHandle() isIpsecCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecCbKeyHandle) GetIpseccbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*IpsecCbKeyHandle_IpseccbId); ok {
		return x.IpseccbId
	}
	return 0
}

func (m *IpsecCbKeyHandle) GetIpseccbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*IpsecCbKeyHandle_IpseccbHandle); ok {
		return x.IpseccbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IpsecCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IpsecCbKeyHandle_OneofMarshaler, _IpsecCbKeyHandle_OneofUnmarshaler, _IpsecCbKeyHandle_OneofSizer, []interface{}{
		(*IpsecCbKeyHandle_IpseccbId)(nil),
		(*IpsecCbKeyHandle_IpseccbHandle)(nil),
	}
}

func _IpsecCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IpsecCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *IpsecCbKeyHandle_IpseccbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IpseccbId))
	case *IpsecCbKeyHandle_IpseccbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.IpseccbHandle))
	case nil:
	default:
		return fmt.Errorf("IpsecCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _IpsecCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IpsecCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.ipseccb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &IpsecCbKeyHandle_IpseccbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.ipseccb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &IpsecCbKeyHandle_IpseccbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _IpsecCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IpsecCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *IpsecCbKeyHandle_IpseccbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IpseccbId))
	case *IpsecCbKeyHandle_IpseccbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// IpsecCbSpec captures all the ipsec_cb level configuration
type IpsecCbSpec struct {
	KeyOrHandle     *IpsecCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Pi              uint32            `protobuf:"varint,2,opt,name=pi" json:"pi,omitempty"`
	Ci              uint32            `protobuf:"varint,3,opt,name=ci" json:"ci,omitempty"`
	TunnelSip4      uint32            `protobuf:"varint,4,opt,name=tunnel_sip4,json=tunnelSip4" json:"tunnel_sip4,omitempty"`
	TunnelDip4      uint32            `protobuf:"varint,5,opt,name=tunnel_dip4,json=tunnelDip4" json:"tunnel_dip4,omitempty"`
	IvSize          uint32            `protobuf:"varint,6,opt,name=iv_size,json=ivSize" json:"iv_size,omitempty"`
	IcvSize         uint32            `protobuf:"varint,7,opt,name=icv_size,json=icvSize" json:"icv_size,omitempty"`
	BlockSize       uint32            `protobuf:"varint,8,opt,name=block_size,json=blockSize" json:"block_size,omitempty"`
	KeyIndex        uint32            `protobuf:"varint,9,opt,name=key_index,json=keyIndex" json:"key_index,omitempty"`
	BarcoEncCmd     uint32            `protobuf:"varint,10,opt,name=barco_enc_cmd,json=barcoEncCmd" json:"barco_enc_cmd,omitempty"`
	Iv              uint64            `protobuf:"fixed64,11,opt,name=iv" json:"iv,omitempty"`
	IvSalt          uint32            `protobuf:"varint,12,opt,name=iv_salt,json=ivSalt" json:"iv_salt,omitempty"`
	EsnHi           uint32            `protobuf:"varint,13,opt,name=esn_hi,json=esnHi" json:"esn_hi,omitempty"`
	EsnLo           uint32            `protobuf:"varint,14,opt,name=esn_lo,json=esnLo" json:"esn_lo,omitempty"`
	Spi             uint32            `protobuf:"varint,15,opt,name=spi" json:"spi,omitempty"`
	ExpectedSeqNo   uint32            `protobuf:"varint,16,opt,name=expected_seq_no,json=expectedSeqNo" json:"expected_seq_no,omitempty"`
	SeqNoBmp        uint64            `protobuf:"fixed64,17,opt,name=seq_no_bmp,json=seqNoBmp" json:"seq_no_bmp,omitempty"`
	Sip6            *IPAddress        `protobuf:"bytes,18,opt,name=sip6" json:"sip6,omitempty"`
	Dip6            *IPAddress        `protobuf:"bytes,19,opt,name=dip6" json:"dip6,omitempty"`
	IsV6            uint32            `protobuf:"varint,20,opt,name=is_v6,json=isV6" json:"is_v6,omitempty"`
	VrfVlan         uint32            `protobuf:"varint,21,opt,name=vrf_vlan,json=vrfVlan" json:"vrf_vlan,omitempty"`
	LastReplaySeqNo uint32            `protobuf:"varint,22,opt,name=last_replay_seq_no,json=lastReplaySeqNo" json:"last_replay_seq_no,omitempty"`
	NewSpi          uint32            `protobuf:"varint,23,opt,name=new_spi,json=newSpi" json:"new_spi,omitempty"`
	NewKeyIndex     uint32            `protobuf:"varint,24,opt,name=new_key_index,json=newKeyIndex" json:"new_key_index,omitempty"`
	IsNatT          uint32            `protobuf:"varint,25,opt,name=is_nat_t,json=isNatT" json:"is_nat_t,omitempty"`
	Flags           uint32            `protobuf:"varint,26,opt,name=flags" json:"flags,omitempty"`
	IsRandom        uint32            `protobuf:"varint,27,opt,name=is_random,json=isRandom" json:"is_random,omitempty"`
	ExtraPad        uint32            `protobuf:"varint,28,opt,name=extra_pad,json=extraPad" json:"extra_pad,omitempty"`
	RxPkts          uint32            `protobuf:"varint,29,opt,name=rx_pkts,json=rxPkts" json:"rx_pkts,omitempty"`
	RxBytes         uint64            `protobuf:"fixed64,30,opt,name=rx_bytes,json=rxBytes" json:"rx_bytes,omitempty"`
	RxDrops         uint64            `protobuf:"fixed64,31,opt,name=rx_drops,json=rxDrops" json:"rx_drops,omitempty"`
	TxPkts          uint64            `protobuf:"fixed64,32,opt,name=tx_pkts,json=txPkts" json:"tx_pkts,omitempty"`
	TxBytes         uint64            `protobuf:"fixed64,33,opt,name=tx_bytes,json=txBytes" json:"tx_bytes,omitempty"`
	TxDrops         uint64            `protobuf:"fixed64,34,opt,name=tx_drops,json=txDrops" json:"tx_drops,omitempty"`
}

func (m *IpsecCbSpec) Reset()                    { *m = IpsecCbSpec{} }
func (m *IpsecCbSpec) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbSpec) ProtoMessage()               {}
func (*IpsecCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{27} }

func (m *IpsecCbSpec) GetKeyOrHandle() *IpsecCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecCbSpec) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *IpsecCbSpec) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

func (m *IpsecCbSpec) GetTunnelSip4() uint32 {
	if m != nil {
		return m.TunnelSip4
	}
	return 0
}

func (m *IpsecCbSpec) GetTunnelDip4() uint32 {
	if m != nil {
		return m.TunnelDip4
	}
	return 0
}

func (m *IpsecCbSpec) GetIvSize() uint32 {
	if m != nil {
		return m.IvSize
	}
	return 0
}

func (m *IpsecCbSpec) GetIcvSize() uint32 {
	if m != nil {
		return m.IcvSize
	}
	return 0
}

func (m *IpsecCbSpec) GetBlockSize() uint32 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *IpsecCbSpec) GetKeyIndex() uint32 {
	if m != nil {
		return m.KeyIndex
	}
	return 0
}

func (m *IpsecCbSpec) GetBarcoEncCmd() uint32 {
	if m != nil {
		return m.BarcoEncCmd
	}
	return 0
}

func (m *IpsecCbSpec) GetIv() uint64 {
	if m != nil {
		return m.Iv
	}
	return 0
}

func (m *IpsecCbSpec) GetIvSalt() uint32 {
	if m != nil {
		return m.IvSalt
	}
	return 0
}

func (m *IpsecCbSpec) GetEsnHi() uint32 {
	if m != nil {
		return m.EsnHi
	}
	return 0
}

func (m *IpsecCbSpec) GetEsnLo() uint32 {
	if m != nil {
		return m.EsnLo
	}
	return 0
}

func (m *IpsecCbSpec) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

func (m *IpsecCbSpec) GetExpectedSeqNo() uint32 {
	if m != nil {
		return m.ExpectedSeqNo
	}
	return 0
}

func (m *IpsecCbSpec) GetSeqNoBmp() uint64 {
	if m != nil {
		return m.SeqNoBmp
	}
	return 0
}

func (m *IpsecCbSpec) GetSip6() *IPAddress {
	if m != nil {
		return m.Sip6
	}
	return nil
}

func (m *IpsecCbSpec) GetDip6() *IPAddress {
	if m != nil {
		return m.Dip6
	}
	return nil
}

func (m *IpsecCbSpec) GetIsV6() uint32 {
	if m != nil {
		return m.IsV6
	}
	return 0
}

func (m *IpsecCbSpec) GetVrfVlan() uint32 {
	if m != nil {
		return m.VrfVlan
	}
	return 0
}

func (m *IpsecCbSpec) GetLastReplaySeqNo() uint32 {
	if m != nil {
		return m.LastReplaySeqNo
	}
	return 0
}

func (m *IpsecCbSpec) GetNewSpi() uint32 {
	if m != nil {
		return m.NewSpi
	}
	return 0
}

func (m *IpsecCbSpec) GetNewKeyIndex() uint32 {
	if m != nil {
		return m.NewKeyIndex
	}
	return 0
}

func (m *IpsecCbSpec) GetIsNatT() uint32 {
	if m != nil {
		return m.IsNatT
	}
	return 0
}

func (m *IpsecCbSpec) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *IpsecCbSpec) GetIsRandom() uint32 {
	if m != nil {
		return m.IsRandom
	}
	return 0
}

func (m *IpsecCbSpec) GetExtraPad() uint32 {
	if m != nil {
		return m.ExtraPad
	}
	return 0
}

func (m *IpsecCbSpec) GetRxPkts() uint32 {
	if m != nil {
		return m.RxPkts
	}
	return 0
}

func (m *IpsecCbSpec) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *IpsecCbSpec) GetRxDrops() uint64 {
	if m != nil {
		return m.RxDrops
	}
	return 0
}

func (m *IpsecCbSpec) GetTxPkts() uint64 {
	if m != nil {
		return m.TxPkts
	}
	return 0
}

func (m *IpsecCbSpec) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *IpsecCbSpec) GetTxDrops() uint64 {
	if m != nil {
		return m.TxDrops
	}
	return 0
}

// IpsecCbRequestMsg is batched add or modify ipseccb request
type IpsecCbRequestMsg struct {
	Request []*IpsecCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecCbRequestMsg) Reset()                    { *m = IpsecCbRequestMsg{} }
func (m *IpsecCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbRequestMsg) ProtoMessage()               {}
func (*IpsecCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{28} }

func (m *IpsecCbRequestMsg) GetRequest() []*IpsecCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecCbStatus is the operational status of a given ipseccb
type IpsecCbStatus struct {
	IpseccbHandle uint64 `protobuf:"fixed64,1,opt,name=ipseccb_handle,json=ipseccbHandle" json:"ipseccb_handle,omitempty"`
}

func (m *IpsecCbStatus) Reset()                    { *m = IpsecCbStatus{} }
func (m *IpsecCbStatus) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbStatus) ProtoMessage()               {}
func (*IpsecCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{29} }

func (m *IpsecCbStatus) GetIpseccbHandle() uint64 {
	if m != nil {
		return m.IpseccbHandle
	}
	return 0
}

// IpsecCbResponse is response to IpsecCbSpec
type IpsecCbResponse struct {
	ApiStatus     ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	IpseccbStatus *IpsecCbStatus `protobuf:"bytes,2,opt,name=ipseccb_status,json=ipseccbStatus" json:"ipseccb_status,omitempty"`
}

func (m *IpsecCbResponse) Reset()                    { *m = IpsecCbResponse{} }
func (m *IpsecCbResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbResponse) ProtoMessage()               {}
func (*IpsecCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{30} }

func (m *IpsecCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecCbResponse) GetIpseccbStatus() *IpsecCbStatus {
	if m != nil {
		return m.IpseccbStatus
	}
	return nil
}

// IpsecCbResponseMsg is batched response to IpsecCbRequestMsg
type IpsecCbResponseMsg struct {
	Response []*IpsecCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecCbResponseMsg) Reset()                    { *m = IpsecCbResponseMsg{} }
func (m *IpsecCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbResponseMsg) ProtoMessage()               {}
func (*IpsecCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{31} }

func (m *IpsecCbResponseMsg) GetResponse() []*IpsecCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecCbDeleteRequest is used to delete a ipseccb
type IpsecCbDeleteRequest struct {
	KeyOrHandle *IpsecCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecCbDeleteRequest) Reset()                    { *m = IpsecCbDeleteRequest{} }
func (m *IpsecCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbDeleteRequest) ProtoMessage()               {}
func (*IpsecCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{32} }

func (m *IpsecCbDeleteRequest) GetKeyOrHandle() *IpsecCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecCbDeleteRequestMsg is used to delete a batch of ipseccbs
type IpsecCbDeleteRequestMsg struct {
	Request []*IpsecCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecCbDeleteRequestMsg) Reset()                    { *m = IpsecCbDeleteRequestMsg{} }
func (m *IpsecCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbDeleteRequestMsg) ProtoMessage()               {}
func (*IpsecCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{33} }

func (m *IpsecCbDeleteRequestMsg) GetRequest() []*IpsecCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecCbDeleteResponseMsg is batched response to IpsecCbDeleteRequestMsg
type IpsecCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *IpsecCbDeleteResponseMsg) Reset()                    { *m = IpsecCbDeleteResponseMsg{} }
func (m *IpsecCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbDeleteResponseMsg) ProtoMessage()               {}
func (*IpsecCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{34} }

func (m *IpsecCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// IpsecCbGetRequest is used to get information about a ipseccb
type IpsecCbGetRequest struct {
	KeyOrHandle *IpsecCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecCbGetRequest) Reset()                    { *m = IpsecCbGetRequest{} }
func (m *IpsecCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetRequest) ProtoMessage()               {}
func (*IpsecCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{35} }

func (m *IpsecCbGetRequest) GetKeyOrHandle() *IpsecCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecCbGetRequestMsg is batched GET requests for ipseccbs
type IpsecCbGetRequestMsg struct {
	Request []*IpsecCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecCbGetRequestMsg) Reset()                    { *m = IpsecCbGetRequestMsg{} }
func (m *IpsecCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetRequestMsg) ProtoMessage()               {}
func (*IpsecCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{36} }

func (m *IpsecCbGetRequestMsg) GetRequest() []*IpsecCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecCbStats is the statistics object for each ipseccb
type IpsecCbStats struct {
}

func (m *IpsecCbStats) Reset()                    { *m = IpsecCbStats{} }
func (m *IpsecCbStats) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbStats) ProtoMessage()               {}
func (*IpsecCbStats) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{37} }

// IpsecCbGetResponse captures all the information about a ipseccb
// only if api_status indicates success, other fields are valid
type IpsecCbGetResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *IpsecCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *IpsecCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *IpsecCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *IpsecCbGetResponse) Reset()                    { *m = IpsecCbGetResponse{} }
func (m *IpsecCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetResponse) ProtoMessage()               {}
func (*IpsecCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{38} }

func (m *IpsecCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecCbGetResponse) GetSpec() *IpsecCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *IpsecCbGetResponse) GetStatus() *IpsecCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *IpsecCbGetResponse) GetStats() *IpsecCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// IpsecCbGetResponseMsg is batched response to IpsecCbGetRequestMsg
type IpsecCbGetResponseMsg struct {
	Response []*IpsecCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecCbGetResponseMsg) Reset()                    { *m = IpsecCbGetResponseMsg{} }
func (m *IpsecCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetResponseMsg) ProtoMessage()               {}
func (*IpsecCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{39} }

func (m *IpsecCbGetResponseMsg) GetResponse() []*IpsecCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*ProgramAddressReq)(nil), "halproto.ProgramAddressReq")
	proto.RegisterType((*ProgramAddressResp)(nil), "halproto.ProgramAddressResp")
	proto.RegisterType((*GetProgramAddressRequestMsg)(nil), "halproto.GetProgramAddressRequestMsg")
	proto.RegisterType((*ProgramAddressResponseMsg)(nil), "halproto.ProgramAddressResponseMsg")
	proto.RegisterType((*HbmAddressReq)(nil), "halproto.HbmAddressReq")
	proto.RegisterType((*HbmAddressResp)(nil), "halproto.HbmAddressResp")
	proto.RegisterType((*AllocHbmAddressRequestMsg)(nil), "halproto.AllocHbmAddressRequestMsg")
	proto.RegisterType((*AllocHbmAddressResponseMsg)(nil), "halproto.AllocHbmAddressResponseMsg")
	proto.RegisterType((*LifBdfReq)(nil), "halproto.LifBdfReq")
	proto.RegisterType((*LifBdfResp)(nil), "halproto.LifBdfResp")
	proto.RegisterType((*ConfigureLifBdfRequestMsg)(nil), "halproto.ConfigureLifBdfRequestMsg")
	proto.RegisterType((*ConfigureLifBdfResponseMsg)(nil), "halproto.ConfigureLifBdfResponseMsg")
	proto.RegisterType((*SoftwarePhvStatus)(nil), "halproto.SoftwarePhvStatus")
	proto.RegisterType((*SoftwarePhvResponse)(nil), "halproto.SoftwarePhvResponse")
	proto.RegisterType((*SoftwarePhvResponseMsg)(nil), "halproto.SoftwarePhvResponseMsg")
	proto.RegisterType((*SoftwarePhvGetRequest)(nil), "halproto.SoftwarePhvGetRequest")
	proto.RegisterType((*SoftwarePhvGetRequestMsg)(nil), "halproto.SoftwarePhvGetRequestMsg")
	proto.RegisterType((*SoftwarePhvGetResponse)(nil), "halproto.SoftwarePhvGetResponse")
	proto.RegisterType((*SoftwarePhvGetResponseMsg)(nil), "halproto.SoftwarePhvGetResponseMsg")
	proto.RegisterType((*SoftwarePhvInject)(nil), "halproto.SoftwarePhvInject")
	proto.RegisterType((*SoftwarePhvInjectMsg)(nil), "halproto.SoftwarePhvInjectMsg")
	proto.RegisterType((*LogFlowRequestMsg)(nil), "halproto.LogFlowRequestMsg")
	proto.RegisterType((*LogFlowResponseMsg)(nil), "halproto.LogFlowResponseMsg")
	proto.RegisterType((*LogFlowResponse)(nil), "halproto.LogFlowResponse")
	proto.RegisterType((*EmptyRequest)(nil), "halproto.EmptyRequest")
	proto.RegisterType((*EmptyResponse)(nil), "halproto.EmptyResponse")
	proto.RegisterType((*IpsecCbKeyHandle)(nil), "halproto.IpsecCbKeyHandle")
	proto.RegisterType((*IpsecCbSpec)(nil), "halproto.IpsecCbSpec")
	proto.RegisterType((*IpsecCbRequestMsg)(nil), "halproto.IpsecCbRequestMsg")
	proto.RegisterType((*IpsecCbStatus)(nil), "halproto.IpsecCbStatus")
	proto.RegisterType((*IpsecCbResponse)(nil), "halproto.IpsecCbResponse")
	proto.RegisterType((*IpsecCbResponseMsg)(nil), "halproto.IpsecCbResponseMsg")
	proto.RegisterType((*IpsecCbDeleteRequest)(nil), "halproto.IpsecCbDeleteRequest")
	proto.RegisterType((*IpsecCbDeleteRequestMsg)(nil), "halproto.IpsecCbDeleteRequestMsg")
	proto.RegisterType((*IpsecCbDeleteResponseMsg)(nil), "halproto.IpsecCbDeleteResponseMsg")
	proto.RegisterType((*IpsecCbGetRequest)(nil), "halproto.IpsecCbGetRequest")
	proto.RegisterType((*IpsecCbGetRequestMsg)(nil), "halproto.IpsecCbGetRequestMsg")
	proto.RegisterType((*IpsecCbStats)(nil), "halproto.IpsecCbStats")
	proto.RegisterType((*IpsecCbGetResponse)(nil), "halproto.IpsecCbGetResponse")
	proto.RegisterType((*IpsecCbGetResponseMsg)(nil), "halproto.IpsecCbGetResponseMsg")
	proto.RegisterEnum("halproto.SoftwarePhvPipeline", SoftwarePhvPipeline_name, SoftwarePhvPipeline_value)
}

func init() { proto.RegisterFile("internal.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 1807 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x59, 0x57, 0x1b, 0xc9,
	0x15, 0x46, 0x60, 0x90, 0x74, 0x85, 0x04, 0x14, 0x8b, 0x1a, 0x61, 0x1b, 0xdc, 0xb3, 0x91, 0xcd,
	0x4e, 0x18, 0x0f, 0x67, 0x7c, 0x4e, 0x32, 0x09, 0x9b, 0x0d, 0x31, 0xc6, 0x4c, 0xcb, 0xc6, 0x93,
	0xe4, 0x9c, 0xf4, 0x69, 0x75, 0x97, 0x70, 0x85, 0x56, 0x77, 0xbb, 0xab, 0x10, 0xd2, 0x3c, 0x26,
	0xef, 0xf9, 0x43, 0x79, 0xc9, 0x3f, 0xc8, 0x3f, 0xc8, 0xc9, 0x73, 0x7e, 0x45, 0x4e, 0x2d, 0xbd,
	0x4b, 0xc2, 0x19, 0xe6, 0x49, 0x5d, 0x77, 0xf9, 0xea, 0x6e, 0x75, 0x6f, 0x95, 0xa0, 0x41, 0x3c,
	0x86, 0x43, 0xcf, 0x72, 0x1f, 0x07, 0xa1, 0xcf, 0x7c, 0x54, 0x89, 0xd6, 0xad, 0x1a, 0x1b, 0x06,
	0x98, 0x4a, 0x72, 0xab, 0xd6, 0xbd, 0x71, 0xfd, 0x4b, 0xb9, 0xd0, 0xff, 0x56, 0x82, 0xa5, 0xf3,
	0xd0, 0xbf, 0x0c, 0xad, 0xde, 0x9e, 0xe3, 0x84, 0x98, 0x52, 0x03, 0x7f, 0x40, 0x6b, 0x30, 0xf7,
	0xde, 0xf2, 0x1c, 0x17, 0x6b, 0xa5, 0xad, 0xd2, 0x76, 0xd5, 0x50, 0x2b, 0xb4, 0x01, 0xd5, 0x20,
	0xf4, 0x2f, 0x4d, 0xcf, 0xea, 0x61, 0x6d, 0x5a, 0xb0, 0x2a, 0x9c, 0x70, 0x66, 0xf5, 0x30, 0xfa,
	0x04, 0xea, 0x21, 0xa6, 0xbe, 0xdb, 0xc7, 0xa6, 0x6b, 0x75, 0xb0, 0xab, 0xcd, 0x6c, 0x95, 0xb6,
	0x2b, 0xc6, 0xbc, 0x22, 0x9e, 0x72, 0x1a, 0x5a, 0x81, 0x59, 0xc9, 0xbc, 0x27, 0xb4, 0xe5, 0x42,
	0xdf, 0x06, 0x94, 0x37, 0x82, 0x06, 0x08, 0xc1, 0x3d, 0xcb, 0x71, 0x42, 0x61, 0xc3, 0x8c, 0x21,
	0xbe, 0xf5, 0x37, 0xb0, 0xf1, 0x02, 0xb3, 0x82, 0xc5, 0xd7, 0x98, 0xb2, 0x57, 0xf4, 0x12, 0x7d,
	0x05, 0xe5, 0x50, 0xae, 0xb4, 0xd2, 0xd6, 0xcc, 0x76, 0x6d, 0x67, 0xe3, 0x71, 0x1c, 0x94, 0x82,
	0x92, 0x11, 0xc9, 0xea, 0x6f, 0x61, 0xbd, 0xb8, 0xbf, 0xef, 0x51, 0xcc, 0x31, 0xbf, 0x86, 0x4a,
	0xa8, 0x96, 0x0a, 0xf4, 0xfe, 0x78, 0x50, 0x1a, 0x18, 0xb1, 0xb4, 0xfe, 0x05, 0xd4, 0x8f, 0x3b,
	0x1f, 0x11, 0x57, 0xfd, 0x6b, 0x68, 0xa4, 0x05, 0x47, 0xfb, 0xce, 0x69, 0x94, 0x7c, 0x2f, 0x03,
	0x5f, 0x37, 0xc4, 0xb7, 0x7e, 0x06, 0xeb, 0x7b, 0xae, 0xeb, 0xdb, 0x99, 0x7d, 0xa2, 0x68, 0xfc,
	0x2a, 0x1f, 0x8d, 0x66, 0x62, 0x78, 0x46, 0x21, 0x89, 0x84, 0x01, 0xad, 0x02, 0x5e, 0x12, 0x8a,
	0xa7, 0x85, 0x50, 0x68, 0xa3, 0x11, 0x33, 0x61, 0x78, 0x02, 0xd5, 0x53, 0xd2, 0xdd, 0x77, 0xba,
	0x3c, 0x04, 0x8b, 0x30, 0xe3, 0x92, 0xae, 0xf0, 0xab, 0x6e, 0xf0, 0x4f, 0x4e, 0xe9, 0x38, 0x5d,
	0xe5, 0x15, 0xff, 0xd4, 0x8f, 0x01, 0x22, 0x05, 0x1a, 0x7c, 0x8c, 0x06, 0x0f, 0x2c, 0x65, 0x16,
	0xbb, 0xa6, 0xa2, 0xe8, 0x66, 0x0d, 0xb5, 0xd2, 0x7f, 0x0f, 0xeb, 0x07, 0xbe, 0xd7, 0x25, 0x97,
	0xd7, 0x21, 0x8e, 0x6d, 0x88, 0xc2, 0xf3, 0x8b, 0x7c, 0x78, 0x96, 0x13, 0x67, 0x62, 0xe1, 0x24,
	0x34, 0x67, 0xd0, 0x2a, 0x60, 0x25, 0xa1, 0xf9, 0x65, 0x21, 0x34, 0x2b, 0x45, 0xb4, 0x4c, 0x58,
	0xfe, 0x59, 0x82, 0xa5, 0xb6, 0xdf, 0x65, 0x37, 0x56, 0x88, 0xcf, 0xdf, 0xf7, 0xdb, 0xc2, 0x62,
	0xf4, 0x0c, 0x2a, 0x01, 0x09, 0xb0, 0x4b, 0x3c, 0x59, 0x24, 0x8d, 0x9d, 0x07, 0x09, 0x4e, 0x4a,
	0xfc, 0x5c, 0x09, 0x19, 0xb1, 0x38, 0xd2, 0xa0, 0x8c, 0x3d, 0xab, 0xe3, 0x62, 0x47, 0x84, 0xa6,
	0x62, 0x44, 0x4b, 0x5e, 0x39, 0x8e, 0xef, 0x61, 0x75, 0x22, 0xc5, 0x37, 0x7a, 0x04, 0xf3, 0xf6,
	0x75, 0x18, 0x62, 0x8f, 0x99, 0xb6, 0xc7, 0x42, 0x71, 0x20, 0xeb, 0x46, 0x4d, 0xd1, 0x0e, 0x3c,
	0x16, 0xa2, 0x4d, 0xa8, 0x11, 0xef, 0x2f, 0xd8, 0x56, 0x12, 0xb3, 0x42, 0x02, 0x24, 0x89, 0x0b,
	0xe8, 0x17, 0xb0, 0x9c, 0x32, 0x29, 0x0a, 0x07, 0xfa, 0x2d, 0x80, 0x15, 0x10, 0x53, 0x65, 0x44,
	0x7a, 0xb1, 0xf8, 0x58, 0xf6, 0xa0, 0xbd, 0x80, 0x48, 0x4f, 0xf7, 0x1b, 0xff, 0xfd, 0xf7, 0x66,
	0x4a, 0xce, 0xa8, 0x5a, 0x11, 0x4b, 0x6f, 0xc3, 0xda, 0x08, 0x5c, 0x1e, 0xe6, 0x67, 0x85, 0x30,
	0x8f, 0x0e, 0x4f, 0xa4, 0x93, 0x8a, 0xb7, 0x01, 0xab, 0x29, 0x81, 0x17, 0x98, 0xa9, 0x52, 0xb8,
	0x43, 0xc8, 0xf5, 0xb7, 0xa0, 0x8d, 0xc4, 0x94, 0xa6, 0xe6, 0xca, 0x6b, 0x73, 0x24, 0x6a, 0xa2,
	0x94, 0x94, 0xda, 0xdf, 0x4b, 0x99, 0x00, 0x08, 0x91, 0x1f, 0x29, 0xb6, 0xe8, 0xcb, 0xf8, 0xa8,
	0xf0, 0x22, 0xc9, 0x74, 0xc8, 0x42, 0x35, 0xc6, 0xe7, 0xe8, 0x0f, 0xb0, 0x3e, 0xda, 0x1e, 0xee,
	0xe8, 0xaf, 0x0b, 0x39, 0xd9, 0x1a, 0xef, 0x69, 0x21, 0x2d, 0x67, 0x99, 0x53, 0x70, 0x22, 0x8a,
	0xeb, 0x2e, 0x29, 0x79, 0x05, 0x2b, 0x05, 0xbc, 0xdb, 0x46, 0x43, 0x41, 0x21, 0x49, 0xc5, 0x6f,
	0x60, 0xe9, 0xd4, 0xbf, 0x7c, 0xee, 0xfa, 0x37, 0xa9, 0xd4, 0x6e, 0xe7, 0xb1, 0x1a, 0x8f, 0xe5,
	0x50, 0x7d, 0xfe, 0xee, 0xa8, 0x8f, 0xbd, 0x94, 0xfa, 0x4b, 0x40, 0xb1, 0x7a, 0x12, 0xb1, 0xaf,
	0x0a, 0x11, 0x5b, 0x4f, 0x35, 0x8b, 0xac, 0x7c, 0xa6, 0x82, 0x17, 0x72, 0xcc, 0xbb, 0x1f, 0xb5,
	0x5d, 0x98, 0x3f, 0xea, 0x05, 0x6c, 0x18, 0x1d, 0x86, 0xcf, 0xf3, 0xae, 0xcd, 0x2b, 0x34, 0x29,
	0x15, 0x3b, 0xf6, 0x0c, 0xea, 0x4a, 0x4f, 0x59, 0xb2, 0x5d, 0xf0, 0x29, 0xab, 0x99, 0xb8, 0xd1,
	0x83, 0xc5, 0x93, 0x80, 0x62, 0xfb, 0xa0, 0xf3, 0x12, 0x0f, 0x8f, 0xe5, 0xcd, 0x62, 0x13, 0x80,
	0x70, 0x9a, 0xdd, 0x31, 0x89, 0x23, 0x7b, 0xfd, 0xf1, 0x94, 0x51, 0x55, 0xb4, 0x13, 0x07, 0x7d,
	0x01, 0x8d, 0x48, 0x40, 0x8d, 0x50, 0x5e, 0xbe, 0x73, 0xc7, 0x53, 0x46, 0x5d, 0xd1, 0x25, 0xd2,
	0xfe, 0x02, 0xd4, 0xaf, 0xf0, 0xd0, 0xf4, 0x43, 0x25, 0xa7, 0xff, 0xa7, 0x0c, 0x35, 0xb5, 0x5f,
	0x3b, 0xc0, 0x36, 0xfa, 0x26, 0x27, 0x20, 0x76, 0xab, 0xed, 0xb4, 0x92, 0x0c, 0xe4, 0xad, 0x33,
	0x6a, 0x57, 0x78, 0xf8, 0x3a, 0x54, 0xa6, 0x36, 0x60, 0x3a, 0x20, 0x6a, 0xf8, 0x4c, 0x07, 0x84,
	0xaf, 0x6d, 0x22, 0x5a, 0x6b, 0xdd, 0x98, 0xb6, 0x09, 0xef, 0x9a, 0xec, 0xda, 0xf3, 0xb0, 0x6b,
	0x52, 0x12, 0x3c, 0x55, 0x7d, 0x15, 0x24, 0xa9, 0x4d, 0x82, 0xa7, 0x29, 0x01, 0x87, 0x0b, 0xcc,
	0xa6, 0x05, 0x0e, 0xb9, 0x40, 0x13, 0xca, 0xa4, 0x6f, 0x8a, 0x59, 0x3f, 0x27, 0x98, 0x73, 0xa4,
	0xdf, 0x26, 0xdf, 0x63, 0xb4, 0x0e, 0x15, 0x62, 0x2b, 0x4e, 0x59, 0x70, 0xca, 0xc4, 0x96, 0xac,
	0x07, 0x00, 0x1d, 0xd7, 0xb7, 0xaf, 0x24, 0xb3, 0x22, 0x98, 0x55, 0x41, 0x11, 0xec, 0x0d, 0xa8,
	0x72, 0xa7, 0x89, 0xe7, 0xe0, 0x81, 0x56, 0x15, 0xdc, 0xca, 0x15, 0x1e, 0x9e, 0xf0, 0x35, 0xd2,
	0xa1, 0xde, 0xb1, 0x42, 0xdb, 0x37, 0xb1, 0x67, 0x9b, 0x76, 0xcf, 0xd1, 0x40, 0xce, 0x02, 0x41,
	0x3c, 0xf2, 0xec, 0x83, 0x9e, 0xc3, 0xbd, 0x24, 0x7d, 0xad, 0xc6, 0x63, 0x6e, 0x4c, 0x93, 0x7e,
	0x64, 0xa3, 0xe5, 0x32, 0x6d, 0x3e, 0xb6, 0xd1, 0x72, 0x19, 0x5a, 0x85, 0x39, 0x4c, 0x3d, 0xf3,
	0x3d, 0xd1, 0xea, 0x82, 0x3e, 0x8b, 0xa9, 0x77, 0x4c, 0x22, 0xb2, 0xeb, 0x6b, 0x8d, 0x98, 0x7c,
	0xea, 0xf3, 0x51, 0x4e, 0x03, 0xa2, 0x2d, 0xc8, 0x51, 0x4e, 0x03, 0x82, 0x3e, 0x87, 0x05, 0x3c,
	0x08, 0xb0, 0xcd, 0xb0, 0x63, 0x52, 0xfc, 0xc1, 0xf4, 0x7c, 0x6d, 0x51, 0x70, 0xeb, 0x11, 0xb9,
	0x8d, 0x3f, 0x9c, 0xf9, 0xe8, 0x3e, 0x80, 0x64, 0x9b, 0x9d, 0x5e, 0xa0, 0x2d, 0x09, 0xc3, 0x2a,
	0x94, 0xb3, 0xf6, 0x7b, 0x01, 0xfa, 0x94, 0xdf, 0x95, 0x82, 0x5d, 0x0d, 0x89, 0xdc, 0x46, 0x27,
	0xe2, 0xe4, 0x3c, 0xba, 0xa1, 0x08, 0x2e, 0x97, 0x72, 0xb8, 0xd4, 0xf2, 0x38, 0x29, 0xce, 0x45,
	0xcb, 0x30, 0x4b, 0xa8, 0xd9, 0xdf, 0xd5, 0x56, 0xe4, 0xc5, 0x8b, 0xd0, 0x8b, 0x5d, 0x9e, 0x8a,
	0x7e, 0xd8, 0x35, 0xfb, 0xae, 0xe5, 0x69, 0xab, 0x32, 0x15, 0xfd, 0xb0, 0x7b, 0xe1, 0x5a, 0x1e,
	0xfa, 0x19, 0x20, 0xd7, 0xa2, 0xcc, 0x0c, 0x71, 0xe0, 0x5a, 0xc3, 0xc8, 0x89, 0x35, 0x21, 0xb4,
	0xc0, 0x39, 0x86, 0x60, 0x48, 0x37, 0x9a, 0x50, 0xf6, 0xf0, 0x8d, 0xc9, 0x83, 0xd0, 0x94, 0x71,
	0xf4, 0xf0, 0x4d, 0x3b, 0x20, 0x3c, 0x29, 0x9c, 0x91, 0x64, 0x4d, 0x93, 0x49, 0xf1, 0xf0, 0xcd,
	0xcb, 0x28, 0x71, 0x1a, 0x54, 0x08, 0x35, 0x3d, 0x8b, 0x99, 0x4c, 0x5b, 0x57, 0x59, 0xa0, 0x67,
	0x16, 0x7b, 0xc3, 0xef, 0xd9, 0x5d, 0xd7, 0xba, 0xa4, 0x5a, 0x4b, 0x46, 0x5b, 0x2c, 0x78, 0x15,
	0x10, 0x6a, 0x86, 0x96, 0xe7, 0xf8, 0x3d, 0x6d, 0x43, 0x56, 0x01, 0xa1, 0x86, 0x58, 0x73, 0x26,
	0x1e, 0xb0, 0xd0, 0x32, 0x03, 0xcb, 0xd1, 0xee, 0x4b, 0xa6, 0x20, 0x9c, 0x5b, 0x0e, 0x37, 0x33,
	0x1c, 0x98, 0xc1, 0x15, 0xa3, 0xda, 0x03, 0xb9, 0x51, 0x38, 0x38, 0xbf, 0x62, 0x94, 0xc7, 0x21,
	0x1c, 0x98, 0x9d, 0x21, 0xc3, 0x54, 0x7b, 0x28, 0x92, 0x50, 0x0e, 0x07, 0xfb, 0x7c, 0xa9, 0x58,
	0x4e, 0xe8, 0x07, 0x54, 0xdb, 0x8c, 0x58, 0x87, 0x7c, 0xc9, 0xe1, 0x98, 0x82, 0xdb, 0x12, 0x9c,
	0x39, 0x16, 0xc3, 0xb1, 0x08, 0xee, 0x91, 0xd4, 0x61, 0x09, 0x1c, 0x8b, 0xe0, 0xf4, 0x88, 0x25,
	0xe0, 0xf4, 0x43, 0x58, 0x52, 0x67, 0x36, 0xd5, 0xa4, 0x9f, 0xe4, 0x3b, 0xd9, 0x6a, 0xe1, 0x84,
	0xf3, 0x7e, 0x90, 0xb4, 0xb4, 0x5d, 0xa8, 0x47, 0x74, 0x39, 0x2a, 0x3f, 0x2b, 0xf4, 0x9c, 0x92,
	0xd8, 0x37, 0xdb, 0x71, 0xf4, 0xbf, 0x96, 0x60, 0x21, 0xde, 0x5e, 0x75, 0xc3, 0x27, 0x1f, 0xd3,
	0x97, 0xd3, 0x63, 0xf9, 0x9b, 0x64, 0xaf, 0xcc, 0x78, 0x6e, 0x16, 0x8d, 0x96, 0xba, 0x91, 0x11,
	0xaa, 0x8f, 0xbf, 0x04, 0x94, 0xb3, 0xe1, 0xd6, 0x41, 0x93, 0x93, 0x4f, 0x75, 0xe8, 0x0b, 0x58,
	0x51, 0xcc, 0x43, 0xec, 0x62, 0x86, 0xa3, 0xe1, 0x70, 0xc7, 0xd6, 0xa9, 0xb7, 0xa1, 0x39, 0x0a,
	0x57, 0xbe, 0xb2, 0x72, 0xd9, 0x7a, 0x58, 0x00, 0xcd, 0xe8, 0xa4, 0x47, 0xac, 0x96, 0x13, 0x48,
	0xfc, 0xcf, 0xa7, 0x61, 0xe6, 0x96, 0x34, 0xe8, 0xed, 0xb8, 0x92, 0x52, 0x17, 0xc4, 0xbb, 0xba,
	0xfd, 0x2a, 0x0e, 0x67, 0xf6, 0x86, 0x38, 0xe9, 0x4a, 0x52, 0x50, 0x48, 0x1c, 0x6e, 0xc0, 0x7c,
	0xaa, 0x14, 0xa8, 0xfe, 0xaf, 0x52, 0x9c, 0xfb, 0xf4, 0x4d, 0xf1, 0xff, 0x2e, 0xc1, 0x9f, 0xc0,
	0x3d, 0x1a, 0x60, 0x5b, 0x15, 0xde, 0x98, 0xd3, 0x22, 0x44, 0xd0, 0x93, 0xcc, 0x7b, 0x6b, 0x42,
	0x95, 0x2a, 0x31, 0xf4, 0x73, 0x98, 0xe5, 0x5f, 0x54, 0x8c, 0xc3, 0xda, 0xce, 0xda, 0x48, 0x79,
	0x6a, 0x48, 0x21, 0xfd, 0x5b, 0x58, 0x2d, 0x3a, 0x74, 0xeb, 0x5b, 0xbc, 0xa8, 0x92, 0x94, 0xf4,
	0x4f, 0x07, 0x99, 0xa7, 0x4a, 0x74, 0x6f, 0x44, 0x6b, 0x80, 0xda, 0xaf, 0x9f, 0xbf, 0x79, 0xb7,
	0x67, 0x1c, 0x99, 0xe7, 0xc7, 0x17, 0xa6, 0xf1, 0xdd, 0xe1, 0xab, 0xbd, 0xc5, 0xa9, 0x02, 0xfd,
	0x8d, 0xa0, 0x97, 0x90, 0x06, 0x2b, 0x19, 0xfa, 0xc9, 0xd9, 0x0b, 0xe3, 0xa8, 0xdd, 0x5e, 0x9c,
	0x46, 0x4d, 0x58, 0xce, 0x70, 0x8e, 0x24, 0x63, 0x66, 0xe7, 0x1f, 0x15, 0xa8, 0x9c, 0x28, 0x1b,
	0x91, 0x05, 0x4b, 0x85, 0xff, 0x2f, 0xd0, 0x67, 0x89, 0x0f, 0x13, 0xfe, 0xdc, 0x68, 0x7d, 0x32,
	0xe9, 0x6f, 0x07, 0x15, 0x21, 0x7d, 0x0a, 0xfd, 0x19, 0x16, 0x72, 0x4f, 0x78, 0x94, 0xd2, 0x1c,
	0xfb, 0x6f, 0x41, 0xeb, 0xd3, 0x09, 0x42, 0x39, 0xfc, 0xdc, 0x3b, 0x38, 0x8d, 0x3f, 0xf6, 0xb9,
	0x9d, 0xc6, 0x1f, 0xff, 0x8e, 0xd6, 0xa7, 0xd0, 0xbb, 0x51, 0x0f, 0x82, 0x87, 0x13, 0x2e, 0xeb,
	0x1c, 0x7c, 0x6b, 0xe2, 0x2b, 0x50, 0x02, 0xff, 0x09, 0x1a, 0xd9, 0xd7, 0x08, 0xd2, 0x6f, 0x79,
	0x91, 0xe5, 0xa2, 0x3e, 0xf6, 0x09, 0xa4, 0x4f, 0xa1, 0xe7, 0x50, 0x56, 0x77, 0x73, 0xb4, 0x31,
	0xe2, 0x2e, 0x1f, 0xc3, 0xdd, 0x1f, 0x7b, 0xd1, 0x97, 0x38, 0xfb, 0x50, 0xff, 0xf6, 0x9a, 0x60,
	0x6a, 0xf3, 0x75, 0xdb, 0x73, 0x50, 0xea, 0xa8, 0xa4, 0x2f, 0xea, 0xad, 0x66, 0x81, 0xae, 0x9a,
	0xf7, 0x14, 0xda, 0x83, 0x79, 0x85, 0xd1, 0x66, 0x56, 0xc8, 0x7e, 0x08, 0xc4, 0xef, 0xa0, 0x16,
	0x43, 0xf8, 0xc1, 0x0f, 0x41, 0x38, 0x8d, 0xa7, 0xe9, 0x41, 0x88, 0x2d, 0x86, 0xd1, 0xc6, 0x88,
	0xc9, 0x33, 0x2a, 0x2c, 0xc5, 0x31, 0x96, 0x41, 0x7b, 0x1b, 0x38, 0x77, 0x46, 0xfb, 0x2e, 0x46,
	0x93, 0x23, 0x03, 0x3d, 0x9a, 0x3c, 0x6c, 0x38, 0xa6, 0x3e, 0x56, 0x24, 0x8d, 0xfc, 0x1a, 0x20,
	0x69, 0x43, 0xe8, 0xe1, 0x84, 0x7e, 0xce, 0x31, 0x37, 0x27, 0x35, 0x2f, 0x01, 0xb8, 0x53, 0x87,
	0x5a, 0xaa, 0xec, 0xf6, 0xe1, 0x8f, 0x95, 0xf7, 0x96, 0x2b, 0xfe, 0xbb, 0xed, 0xcc, 0x89, 0x9f,
	0x2f, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x74, 0xcd, 0x08, 0xa8, 0xf8, 0x15, 0x00, 0x00,
}
