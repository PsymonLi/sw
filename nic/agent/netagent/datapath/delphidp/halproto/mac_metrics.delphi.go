// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mac_metrics.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MacMetrics struct {
	Key                   uint32          `protobuf:"fixed32,1,opt,name=Key" json:"Key,omitempty"`
	FramesRxOk            *delphi.Counter `protobuf:"bytes,2,opt,name=frames_rx_ok,json=framesRxOk" json:"frames_rx_ok,omitempty"`
	FramesRxAll           *delphi.Counter `protobuf:"bytes,3,opt,name=frames_rx_all,json=framesRxAll" json:"frames_rx_all,omitempty"`
	FramesRxBadFcs        *delphi.Counter `protobuf:"bytes,4,opt,name=frames_rx_bad_fcs,json=framesRxBadFcs" json:"frames_rx_bad_fcs,omitempty"`
	FramesRxBadAll        *delphi.Counter `protobuf:"bytes,5,opt,name=frames_rx_bad_all,json=framesRxBadAll" json:"frames_rx_bad_all,omitempty"`
	OctetsRxOk            *delphi.Counter `protobuf:"bytes,6,opt,name=octets_rx_ok,json=octetsRxOk" json:"octets_rx_ok,omitempty"`
	OctetsRxAll           *delphi.Counter `protobuf:"bytes,7,opt,name=octets_rx_all,json=octetsRxAll" json:"octets_rx_all,omitempty"`
	FramesRxUnicast       *delphi.Counter `protobuf:"bytes,8,opt,name=frames_rx_unicast,json=framesRxUnicast" json:"frames_rx_unicast,omitempty"`
	FramesRxMulticast     *delphi.Counter `protobuf:"bytes,9,opt,name=frames_rx_multicast,json=framesRxMulticast" json:"frames_rx_multicast,omitempty"`
	FramesRxBroadcast     *delphi.Counter `protobuf:"bytes,10,opt,name=frames_rx_broadcast,json=framesRxBroadcast" json:"frames_rx_broadcast,omitempty"`
	FramesRxPause         *delphi.Counter `protobuf:"bytes,11,opt,name=frames_rx_pause,json=framesRxPause" json:"frames_rx_pause,omitempty"`
	FramesRxBadLength     *delphi.Counter `protobuf:"bytes,12,opt,name=frames_rx_bad_length,json=framesRxBadLength" json:"frames_rx_bad_length,omitempty"`
	FramesRxUndersized    *delphi.Counter `protobuf:"bytes,13,opt,name=frames_rx_undersized,json=framesRxUndersized" json:"frames_rx_undersized,omitempty"`
	FramesRxOversized     *delphi.Counter `protobuf:"bytes,14,opt,name=frames_rx_oversized,json=framesRxOversized" json:"frames_rx_oversized,omitempty"`
	FramesRxFragments     *delphi.Counter `protobuf:"bytes,15,opt,name=frames_rx_fragments,json=framesRxFragments" json:"frames_rx_fragments,omitempty"`
	FramesRxJabber        *delphi.Counter `protobuf:"bytes,16,opt,name=frames_rx_jabber,json=framesRxJabber" json:"frames_rx_jabber,omitempty"`
	FramesRxPripause      *delphi.Counter `protobuf:"bytes,17,opt,name=frames_rx_pripause,json=framesRxPripause" json:"frames_rx_pripause,omitempty"`
	FramesRxStompedCrc    *delphi.Counter `protobuf:"bytes,18,opt,name=frames_rx_stomped_crc,json=framesRxStompedCrc" json:"frames_rx_stomped_crc,omitempty"`
	FramesRxTooLong       *delphi.Counter `protobuf:"bytes,19,opt,name=frames_rx_too_long,json=framesRxTooLong" json:"frames_rx_too_long,omitempty"`
	FramesRxVlanGood      *delphi.Counter `protobuf:"bytes,20,opt,name=frames_rx_vlan_good,json=framesRxVlanGood" json:"frames_rx_vlan_good,omitempty"`
	FramesRxDropped       *delphi.Counter `protobuf:"bytes,21,opt,name=frames_rx_dropped,json=framesRxDropped" json:"frames_rx_dropped,omitempty"`
	FramesRxLessThan_64B  *delphi.Counter `protobuf:"bytes,22,opt,name=frames_rx_less_than_64b,json=framesRxLessThan64b" json:"frames_rx_less_than_64b,omitempty"`
	FramesRx_64B          *delphi.Counter `protobuf:"bytes,23,opt,name=frames_rx_64b,json=framesRx64b" json:"frames_rx_64b,omitempty"`
	FramesRx_65B_127B     *delphi.Counter `protobuf:"bytes,24,opt,name=frames_rx_65b_127b,json=framesRx65b127b" json:"frames_rx_65b_127b,omitempty"`
	FramesRx_128B_255B    *delphi.Counter `protobuf:"bytes,25,opt,name=frames_rx_128b_255b,json=framesRx128b255b" json:"frames_rx_128b_255b,omitempty"`
	FramesRx_256B_511B    *delphi.Counter `protobuf:"bytes,26,opt,name=frames_rx_256b_511b,json=framesRx256b511b" json:"frames_rx_256b_511b,omitempty"`
	FramesRx_512B_1023B   *delphi.Counter `protobuf:"bytes,27,opt,name=frames_rx_512b_1023b,json=framesRx512b1023b" json:"frames_rx_512b_1023b,omitempty"`
	FramesRx_1024B_1518B  *delphi.Counter `protobuf:"bytes,28,opt,name=frames_rx_1024b_1518b,json=framesRx1024b1518b" json:"frames_rx_1024b_1518b,omitempty"`
	FramesRx_1519B_2047B  *delphi.Counter `protobuf:"bytes,29,opt,name=frames_rx_1519b_2047b,json=framesRx1519b2047b" json:"frames_rx_1519b_2047b,omitempty"`
	FramesRx_2048B_4095B  *delphi.Counter `protobuf:"bytes,30,opt,name=frames_rx_2048b_4095b,json=framesRx2048b4095b" json:"frames_rx_2048b_4095b,omitempty"`
	FramesRx_4096B_8191B  *delphi.Counter `protobuf:"bytes,31,opt,name=frames_rx_4096b_8191b,json=framesRx4096b8191b" json:"frames_rx_4096b_8191b,omitempty"`
	FramesRx_8192B_9215B  *delphi.Counter `protobuf:"bytes,32,opt,name=frames_rx_8192b_9215b,json=framesRx8192b9215b" json:"frames_rx_8192b_9215b,omitempty"`
	FramesRxOther         *delphi.Counter `protobuf:"bytes,33,opt,name=frames_rx_other,json=framesRxOther" json:"frames_rx_other,omitempty"`
	FramesTxOk            *delphi.Counter `protobuf:"bytes,34,opt,name=frames_tx_ok,json=framesTxOk" json:"frames_tx_ok,omitempty"`
	FramesTxAll           *delphi.Counter `protobuf:"bytes,35,opt,name=frames_tx_all,json=framesTxAll" json:"frames_tx_all,omitempty"`
	FramesTxBad           *delphi.Counter `protobuf:"bytes,36,opt,name=frames_tx_bad,json=framesTxBad" json:"frames_tx_bad,omitempty"`
	OctetsTxOk            *delphi.Counter `protobuf:"bytes,37,opt,name=octets_tx_ok,json=octetsTxOk" json:"octets_tx_ok,omitempty"`
	OctetsTxTotal         *delphi.Counter `protobuf:"bytes,38,opt,name=octets_tx_total,json=octetsTxTotal" json:"octets_tx_total,omitempty"`
	FramesTxUnicast       *delphi.Counter `protobuf:"bytes,39,opt,name=frames_tx_unicast,json=framesTxUnicast" json:"frames_tx_unicast,omitempty"`
	FramesTxMulticast     *delphi.Counter `protobuf:"bytes,40,opt,name=frames_tx_multicast,json=framesTxMulticast" json:"frames_tx_multicast,omitempty"`
	FramesTxBroadcast     *delphi.Counter `protobuf:"bytes,41,opt,name=frames_tx_broadcast,json=framesTxBroadcast" json:"frames_tx_broadcast,omitempty"`
	FramesTxPause         *delphi.Counter `protobuf:"bytes,42,opt,name=frames_tx_pause,json=framesTxPause" json:"frames_tx_pause,omitempty"`
	FramesTxPripause      *delphi.Counter `protobuf:"bytes,43,opt,name=frames_tx_pripause,json=framesTxPripause" json:"frames_tx_pripause,omitempty"`
	FramesTxVlan          *delphi.Counter `protobuf:"bytes,44,opt,name=frames_tx_vlan,json=framesTxVlan" json:"frames_tx_vlan,omitempty"`
	FramesTxLessThan_64B  *delphi.Counter `protobuf:"bytes,45,opt,name=frames_tx_less_than_64b,json=framesTxLessThan64b" json:"frames_tx_less_than_64b,omitempty"`
	FramesTx_64B          *delphi.Counter `protobuf:"bytes,46,opt,name=frames_tx_64b,json=framesTx64b" json:"frames_tx_64b,omitempty"`
	FramesTx_65B_127B     *delphi.Counter `protobuf:"bytes,47,opt,name=frames_tx_65b_127b,json=framesTx65b127b" json:"frames_tx_65b_127b,omitempty"`
	FramesTx_128B_255B    *delphi.Counter `protobuf:"bytes,48,opt,name=frames_tx_128b_255b,json=framesTx128b255b" json:"frames_tx_128b_255b,omitempty"`
	FramesTx_256B_511B    *delphi.Counter `protobuf:"bytes,49,opt,name=frames_tx_256b_511b,json=framesTx256b511b" json:"frames_tx_256b_511b,omitempty"`
	FramesTx_512B_1023B   *delphi.Counter `protobuf:"bytes,50,opt,name=frames_tx_512b_1023b,json=framesTx512b1023b" json:"frames_tx_512b_1023b,omitempty"`
	FramesTx_1024B_1518B  *delphi.Counter `protobuf:"bytes,51,opt,name=frames_tx_1024b_1518b,json=framesTx1024b1518b" json:"frames_tx_1024b_1518b,omitempty"`
	FramesTx_1519B_2047B  *delphi.Counter `protobuf:"bytes,52,opt,name=frames_tx_1519b_2047b,json=framesTx1519b2047b" json:"frames_tx_1519b_2047b,omitempty"`
	FramesTx_2048B_4095B  *delphi.Counter `protobuf:"bytes,53,opt,name=frames_tx_2048b_4095b,json=framesTx2048b4095b" json:"frames_tx_2048b_4095b,omitempty"`
	FramesTx_4096B_8191B  *delphi.Counter `protobuf:"bytes,54,opt,name=frames_tx_4096b_8191b,json=framesTx4096b8191b" json:"frames_tx_4096b_8191b,omitempty"`
	FramesTx_8192B_9215B  *delphi.Counter `protobuf:"bytes,55,opt,name=frames_tx_8192b_9215b,json=framesTx8192b9215b" json:"frames_tx_8192b_9215b,omitempty"`
	FramesTxOther         *delphi.Counter `protobuf:"bytes,56,opt,name=frames_tx_other,json=framesTxOther" json:"frames_tx_other,omitempty"`
	FramesTxPri_0         *delphi.Counter `protobuf:"bytes,57,opt,name=frames_tx_pri_0,json=framesTxPri0" json:"frames_tx_pri_0,omitempty"`
	FramesTxPri_1         *delphi.Counter `protobuf:"bytes,58,opt,name=frames_tx_pri_1,json=framesTxPri1" json:"frames_tx_pri_1,omitempty"`
	FramesTxPri_2         *delphi.Counter `protobuf:"bytes,59,opt,name=frames_tx_pri_2,json=framesTxPri2" json:"frames_tx_pri_2,omitempty"`
	FramesTxPri_3         *delphi.Counter `protobuf:"bytes,60,opt,name=frames_tx_pri_3,json=framesTxPri3" json:"frames_tx_pri_3,omitempty"`
	FramesTxPri_4         *delphi.Counter `protobuf:"bytes,61,opt,name=frames_tx_pri_4,json=framesTxPri4" json:"frames_tx_pri_4,omitempty"`
	FramesTxPri_5         *delphi.Counter `protobuf:"bytes,62,opt,name=frames_tx_pri_5,json=framesTxPri5" json:"frames_tx_pri_5,omitempty"`
	FramesTxPri_6         *delphi.Counter `protobuf:"bytes,63,opt,name=frames_tx_pri_6,json=framesTxPri6" json:"frames_tx_pri_6,omitempty"`
	FramesTxPri_7         *delphi.Counter `protobuf:"bytes,64,opt,name=frames_tx_pri_7,json=framesTxPri7" json:"frames_tx_pri_7,omitempty"`
	FramesRxPri_0         *delphi.Counter `protobuf:"bytes,65,opt,name=frames_rx_pri_0,json=framesRxPri0" json:"frames_rx_pri_0,omitempty"`
	FramesRxPri_1         *delphi.Counter `protobuf:"bytes,66,opt,name=frames_rx_pri_1,json=framesRxPri1" json:"frames_rx_pri_1,omitempty"`
	FramesRxPri_2         *delphi.Counter `protobuf:"bytes,67,opt,name=frames_rx_pri_2,json=framesRxPri2" json:"frames_rx_pri_2,omitempty"`
	FramesRxPri_3         *delphi.Counter `protobuf:"bytes,68,opt,name=frames_rx_pri_3,json=framesRxPri3" json:"frames_rx_pri_3,omitempty"`
	FramesRxPri_4         *delphi.Counter `protobuf:"bytes,69,opt,name=frames_rx_pri_4,json=framesRxPri4" json:"frames_rx_pri_4,omitempty"`
	FramesRxPri_5         *delphi.Counter `protobuf:"bytes,70,opt,name=frames_rx_pri_5,json=framesRxPri5" json:"frames_rx_pri_5,omitempty"`
	FramesRxPri_6         *delphi.Counter `protobuf:"bytes,71,opt,name=frames_rx_pri_6,json=framesRxPri6" json:"frames_rx_pri_6,omitempty"`
	FramesRxPri_7         *delphi.Counter `protobuf:"bytes,72,opt,name=frames_rx_pri_7,json=framesRxPri7" json:"frames_rx_pri_7,omitempty"`
	TxPripause_0_1UsCount *delphi.Counter `protobuf:"bytes,73,opt,name=tx_pripause_0_1us_count,json=txPripause01usCount" json:"tx_pripause_0_1us_count,omitempty"`
	TxPripause_1_1UsCount *delphi.Counter `protobuf:"bytes,74,opt,name=tx_pripause_1_1us_count,json=txPripause11usCount" json:"tx_pripause_1_1us_count,omitempty"`
	TxPripause_2_1UsCount *delphi.Counter `protobuf:"bytes,75,opt,name=tx_pripause_2_1us_count,json=txPripause21usCount" json:"tx_pripause_2_1us_count,omitempty"`
	TxPripause_3_1UsCount *delphi.Counter `protobuf:"bytes,76,opt,name=tx_pripause_3_1us_count,json=txPripause31usCount" json:"tx_pripause_3_1us_count,omitempty"`
	TxPripause_4_1UsCount *delphi.Counter `protobuf:"bytes,77,opt,name=tx_pripause_4_1us_count,json=txPripause41usCount" json:"tx_pripause_4_1us_count,omitempty"`
	TxPripause_5_1UsCount *delphi.Counter `protobuf:"bytes,78,opt,name=tx_pripause_5_1us_count,json=txPripause51usCount" json:"tx_pripause_5_1us_count,omitempty"`
	TxPripause_6_1UsCount *delphi.Counter `protobuf:"bytes,79,opt,name=tx_pripause_6_1us_count,json=txPripause61usCount" json:"tx_pripause_6_1us_count,omitempty"`
	TxPripause_7_1UsCount *delphi.Counter `protobuf:"bytes,80,opt,name=tx_pripause_7_1us_count,json=txPripause71usCount" json:"tx_pripause_7_1us_count,omitempty"`
	RxPripause_0_1UsCount *delphi.Counter `protobuf:"bytes,81,opt,name=rx_pripause_0_1us_count,json=rxPripause01usCount" json:"rx_pripause_0_1us_count,omitempty"`
	RxPripause_1_1UsCount *delphi.Counter `protobuf:"bytes,82,opt,name=rx_pripause_1_1us_count,json=rxPripause11usCount" json:"rx_pripause_1_1us_count,omitempty"`
	RxPripause_2_1UsCount *delphi.Counter `protobuf:"bytes,83,opt,name=rx_pripause_2_1us_count,json=rxPripause21usCount" json:"rx_pripause_2_1us_count,omitempty"`
	RxPripause_3_1UsCount *delphi.Counter `protobuf:"bytes,84,opt,name=rx_pripause_3_1us_count,json=rxPripause31usCount" json:"rx_pripause_3_1us_count,omitempty"`
	RxPripause_4_1UsCount *delphi.Counter `protobuf:"bytes,85,opt,name=rx_pripause_4_1us_count,json=rxPripause41usCount" json:"rx_pripause_4_1us_count,omitempty"`
	RxPripause_5_1UsCount *delphi.Counter `protobuf:"bytes,86,opt,name=rx_pripause_5_1us_count,json=rxPripause51usCount" json:"rx_pripause_5_1us_count,omitempty"`
	RxPripause_6_1UsCount *delphi.Counter `protobuf:"bytes,87,opt,name=rx_pripause_6_1us_count,json=rxPripause61usCount" json:"rx_pripause_6_1us_count,omitempty"`
	RxPripause_7_1UsCount *delphi.Counter `protobuf:"bytes,88,opt,name=rx_pripause_7_1us_count,json=rxPripause71usCount" json:"rx_pripause_7_1us_count,omitempty"`
	RxPause_1UsCount      *delphi.Counter `protobuf:"bytes,89,opt,name=rx_pause_1us_count,json=rxPause1usCount" json:"rx_pause_1us_count,omitempty"`
	FramesTxTruncated     *delphi.Counter `protobuf:"bytes,90,opt,name=frames_tx_truncated,json=framesTxTruncated" json:"frames_tx_truncated,omitempty"`
}

func (m *MacMetrics) Reset()                    { *m = MacMetrics{} }
func (m *MacMetrics) String() string            { return proto.CompactTextString(m) }
func (*MacMetrics) ProtoMessage()               {}
func (*MacMetrics) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{0} }

func (m *MacMetrics) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *MacMetrics) GetFramesRxOk() *delphi.Counter {
	if m != nil {
		return m.FramesRxOk
	}
	return nil
}

func (m *MacMetrics) GetFramesRxAll() *delphi.Counter {
	if m != nil {
		return m.FramesRxAll
	}
	return nil
}

func (m *MacMetrics) GetFramesRxBadFcs() *delphi.Counter {
	if m != nil {
		return m.FramesRxBadFcs
	}
	return nil
}

func (m *MacMetrics) GetFramesRxBadAll() *delphi.Counter {
	if m != nil {
		return m.FramesRxBadAll
	}
	return nil
}

func (m *MacMetrics) GetOctetsRxOk() *delphi.Counter {
	if m != nil {
		return m.OctetsRxOk
	}
	return nil
}

func (m *MacMetrics) GetOctetsRxAll() *delphi.Counter {
	if m != nil {
		return m.OctetsRxAll
	}
	return nil
}

func (m *MacMetrics) GetFramesRxUnicast() *delphi.Counter {
	if m != nil {
		return m.FramesRxUnicast
	}
	return nil
}

func (m *MacMetrics) GetFramesRxMulticast() *delphi.Counter {
	if m != nil {
		return m.FramesRxMulticast
	}
	return nil
}

func (m *MacMetrics) GetFramesRxBroadcast() *delphi.Counter {
	if m != nil {
		return m.FramesRxBroadcast
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPause() *delphi.Counter {
	if m != nil {
		return m.FramesRxPause
	}
	return nil
}

func (m *MacMetrics) GetFramesRxBadLength() *delphi.Counter {
	if m != nil {
		return m.FramesRxBadLength
	}
	return nil
}

func (m *MacMetrics) GetFramesRxUndersized() *delphi.Counter {
	if m != nil {
		return m.FramesRxUndersized
	}
	return nil
}

func (m *MacMetrics) GetFramesRxOversized() *delphi.Counter {
	if m != nil {
		return m.FramesRxOversized
	}
	return nil
}

func (m *MacMetrics) GetFramesRxFragments() *delphi.Counter {
	if m != nil {
		return m.FramesRxFragments
	}
	return nil
}

func (m *MacMetrics) GetFramesRxJabber() *delphi.Counter {
	if m != nil {
		return m.FramesRxJabber
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPripause() *delphi.Counter {
	if m != nil {
		return m.FramesRxPripause
	}
	return nil
}

func (m *MacMetrics) GetFramesRxStompedCrc() *delphi.Counter {
	if m != nil {
		return m.FramesRxStompedCrc
	}
	return nil
}

func (m *MacMetrics) GetFramesRxTooLong() *delphi.Counter {
	if m != nil {
		return m.FramesRxTooLong
	}
	return nil
}

func (m *MacMetrics) GetFramesRxVlanGood() *delphi.Counter {
	if m != nil {
		return m.FramesRxVlanGood
	}
	return nil
}

func (m *MacMetrics) GetFramesRxDropped() *delphi.Counter {
	if m != nil {
		return m.FramesRxDropped
	}
	return nil
}

func (m *MacMetrics) GetFramesRxLessThan_64B() *delphi.Counter {
	if m != nil {
		return m.FramesRxLessThan_64B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_64B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_64B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_65B_127B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_65B_127B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_128B_255B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_128B_255B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_256B_511B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_256B_511B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_512B_1023B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_512B_1023B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_1024B_1518B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_1024B_1518B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_1519B_2047B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_1519B_2047B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_2048B_4095B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_2048B_4095B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_4096B_8191B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_4096B_8191B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_8192B_9215B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_8192B_9215B
	}
	return nil
}

func (m *MacMetrics) GetFramesRxOther() *delphi.Counter {
	if m != nil {
		return m.FramesRxOther
	}
	return nil
}

func (m *MacMetrics) GetFramesTxOk() *delphi.Counter {
	if m != nil {
		return m.FramesTxOk
	}
	return nil
}

func (m *MacMetrics) GetFramesTxAll() *delphi.Counter {
	if m != nil {
		return m.FramesTxAll
	}
	return nil
}

func (m *MacMetrics) GetFramesTxBad() *delphi.Counter {
	if m != nil {
		return m.FramesTxBad
	}
	return nil
}

func (m *MacMetrics) GetOctetsTxOk() *delphi.Counter {
	if m != nil {
		return m.OctetsTxOk
	}
	return nil
}

func (m *MacMetrics) GetOctetsTxTotal() *delphi.Counter {
	if m != nil {
		return m.OctetsTxTotal
	}
	return nil
}

func (m *MacMetrics) GetFramesTxUnicast() *delphi.Counter {
	if m != nil {
		return m.FramesTxUnicast
	}
	return nil
}

func (m *MacMetrics) GetFramesTxMulticast() *delphi.Counter {
	if m != nil {
		return m.FramesTxMulticast
	}
	return nil
}

func (m *MacMetrics) GetFramesTxBroadcast() *delphi.Counter {
	if m != nil {
		return m.FramesTxBroadcast
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPause() *delphi.Counter {
	if m != nil {
		return m.FramesTxPause
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPripause() *delphi.Counter {
	if m != nil {
		return m.FramesTxPripause
	}
	return nil
}

func (m *MacMetrics) GetFramesTxVlan() *delphi.Counter {
	if m != nil {
		return m.FramesTxVlan
	}
	return nil
}

func (m *MacMetrics) GetFramesTxLessThan_64B() *delphi.Counter {
	if m != nil {
		return m.FramesTxLessThan_64B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_64B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_64B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_65B_127B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_65B_127B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_128B_255B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_128B_255B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_256B_511B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_256B_511B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_512B_1023B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_512B_1023B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_1024B_1518B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_1024B_1518B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_1519B_2047B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_1519B_2047B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_2048B_4095B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_2048B_4095B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_4096B_8191B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_4096B_8191B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_8192B_9215B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_8192B_9215B
	}
	return nil
}

func (m *MacMetrics) GetFramesTxOther() *delphi.Counter {
	if m != nil {
		return m.FramesTxOther
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPri_0() *delphi.Counter {
	if m != nil {
		return m.FramesTxPri_0
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPri_1() *delphi.Counter {
	if m != nil {
		return m.FramesTxPri_1
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPri_2() *delphi.Counter {
	if m != nil {
		return m.FramesTxPri_2
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPri_3() *delphi.Counter {
	if m != nil {
		return m.FramesTxPri_3
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPri_4() *delphi.Counter {
	if m != nil {
		return m.FramesTxPri_4
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPri_5() *delphi.Counter {
	if m != nil {
		return m.FramesTxPri_5
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPri_6() *delphi.Counter {
	if m != nil {
		return m.FramesTxPri_6
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPri_7() *delphi.Counter {
	if m != nil {
		return m.FramesTxPri_7
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPri_0() *delphi.Counter {
	if m != nil {
		return m.FramesRxPri_0
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPri_1() *delphi.Counter {
	if m != nil {
		return m.FramesRxPri_1
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPri_2() *delphi.Counter {
	if m != nil {
		return m.FramesRxPri_2
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPri_3() *delphi.Counter {
	if m != nil {
		return m.FramesRxPri_3
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPri_4() *delphi.Counter {
	if m != nil {
		return m.FramesRxPri_4
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPri_5() *delphi.Counter {
	if m != nil {
		return m.FramesRxPri_5
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPri_6() *delphi.Counter {
	if m != nil {
		return m.FramesRxPri_6
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPri_7() *delphi.Counter {
	if m != nil {
		return m.FramesRxPri_7
	}
	return nil
}

func (m *MacMetrics) GetTxPripause_0_1UsCount() *delphi.Counter {
	if m != nil {
		return m.TxPripause_0_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetTxPripause_1_1UsCount() *delphi.Counter {
	if m != nil {
		return m.TxPripause_1_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetTxPripause_2_1UsCount() *delphi.Counter {
	if m != nil {
		return m.TxPripause_2_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetTxPripause_3_1UsCount() *delphi.Counter {
	if m != nil {
		return m.TxPripause_3_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetTxPripause_4_1UsCount() *delphi.Counter {
	if m != nil {
		return m.TxPripause_4_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetTxPripause_5_1UsCount() *delphi.Counter {
	if m != nil {
		return m.TxPripause_5_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetTxPripause_6_1UsCount() *delphi.Counter {
	if m != nil {
		return m.TxPripause_6_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetTxPripause_7_1UsCount() *delphi.Counter {
	if m != nil {
		return m.TxPripause_7_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPripause_0_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPripause_0_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPripause_1_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPripause_1_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPripause_2_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPripause_2_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPripause_3_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPripause_3_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPripause_4_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPripause_4_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPripause_5_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPripause_5_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPripause_6_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPripause_6_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPripause_7_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPripause_7_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPause_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPause_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetFramesTxTruncated() *delphi.Counter {
	if m != nil {
		return m.FramesTxTruncated
	}
	return nil
}

func init() {
	proto.RegisterType((*MacMetrics)(nil), "halproto.MacMetrics")
}

func init() { proto.RegisterFile("mac_metrics.proto", fileDescriptor21) }

var fileDescriptor21 = []byte{
	// 1224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x98, 0xfb, 0x77, 0xd4, 0x44,
	0x14, 0xc7, 0x0f, 0xa2, 0x80, 0xa1, 0xcf, 0x14, 0xe4, 0x8a, 0xaf, 0x8a, 0xaf, 0x2a, 0x5a, 0x77,
	0xb2, 0x49, 0x76, 0x17, 0xca, 0xa3, 0x5b, 0x28, 0x0a, 0xad, 0xad, 0x25, 0xa0, 0xf2, 0x4b, 0x4e,
	0x26, 0x49, 0xbb, 0x2b, 0xd9, 0x64, 0xcf, 0x64, 0xb6, 0x07, 0xfd, 0x43, 0xfd, 0x7b, 0x3c, 0x49,
	0x3a, 0xcd, 0x4c, 0x33, 0xd9, 0xfb, 0x93, 0x52, 0xbe, 0x9f, 0x4f, 0x92, 0xd9, 0x9b, 0xef, 0x5d,
	0x6a, 0xac, 0x4e, 0x82, 0xd0, 0x9f, 0xc4, 0x9c, 0x8d, 0xc3, 0x7c, 0x73, 0xca, 0x32, 0x9e, 0x99,
	0x57, 0xcf, 0xfe, 0x78, 0x7b, 0x21, 0x8a, 0x93, 0xe9, 0x68, 0x5c, 0xfd, 0xf8, 0xce, 0x7f, 0x77,
	0x0d, 0x63, 0x3f, 0x08, 0xf7, 0xab, 0xbf, 0x34, 0x57, 0x8c, 0xcb, 0x2f, 0xe2, 0x7f, 0xe0, 0xd2,
	0xfa, 0xa5, 0x8d, 0xab, 0x47, 0xc5, 0xff, 0x9a, 0xc4, 0x58, 0x38, 0x66, 0xc1, 0x24, 0xce, 0x7d,
	0xf6, 0xce, 0xcf, 0xde, 0xc2, 0x7b, 0xeb, 0x97, 0x36, 0xae, 0x5b, 0xcb, 0x9b, 0x67, 0x96, 0x9d,
	0x6c, 0x96, 0xf2, 0x98, 0x1d, 0x19, 0x55, 0xe8, 0xe8, 0xdd, 0xc1, 0x5b, 0xb3, 0x6b, 0x2c, 0xd6,
	0x48, 0x90, 0x24, 0x70, 0x59, 0xcf, 0x5c, 0x17, 0xcc, 0x76, 0x92, 0x98, 0xf7, 0x8c, 0xd5, 0x1a,
	0xa2, 0x41, 0xe4, 0x1f, 0x87, 0x39, 0xbc, 0xaf, 0x07, 0x97, 0x04, 0x38, 0x0c, 0xa2, 0xdd, 0x30,
	0x6f, 0xb2, 0xc5, 0x45, 0x3f, 0xc0, 0xd9, 0xe2, 0xba, 0xc4, 0x58, 0xc8, 0x42, 0x1e, 0x73, 0xf1,
	0x7c, 0x57, 0x5a, 0x9e, 0xaf, 0x0a, 0x89, 0xe7, 0xab, 0x91, 0xe2, 0x52, 0x57, 0x5b, 0x9e, 0x4f,
	0x30, 0xc5, 0x75, 0xee, 0xcb, 0xf7, 0x38, 0x4b, 0xc7, 0x61, 0x90, 0x73, 0xb8, 0xa6, 0x07, 0x97,
	0xc5, 0x3d, 0xbe, 0xaa, 0x72, 0xe6, 0x23, 0x63, 0xad, 0x86, 0x27, 0xb3, 0x84, 0x57, 0xf8, 0x87,
	0x7a, 0x7c, 0x55, 0xe0, 0xfb, 0x22, 0xa9, 0x0a, 0x28, 0xcb, 0x82, 0xa8, 0x14, 0x18, 0x88, 0x60,
	0x28, 0x92, 0x66, 0xcf, 0x58, 0xae, 0x05, 0xd3, 0x60, 0x96, 0xc7, 0x70, 0x5d, 0x0f, 0x2f, 0x0a,
	0xf8, 0xb0, 0x48, 0x99, 0x8f, 0x8d, 0x1b, 0xea, 0x67, 0x93, 0xc4, 0xe9, 0x09, 0x1f, 0xc1, 0x02,
	0x76, 0xe9, 0x20, 0xda, 0x2b, 0x93, 0xe6, 0xb6, 0x6c, 0x98, 0xa5, 0x51, 0xcc, 0xf2, 0xf1, 0xbf,
	0x71, 0x04, 0x8b, 0x7a, 0x83, 0x59, 0x1f, 0x9e, 0x88, 0xaa, 0x8f, 0x9f, 0x9d, 0x0a, 0xc3, 0x12,
	0x72, 0x0f, 0x07, 0xa7, 0x5a, 0xc1, 0x31, 0x0b, 0x4e, 0x26, 0x71, 0xca, 0x73, 0x58, 0x46, 0x04,
	0xbb, 0x22, 0x69, 0x0e, 0x8c, 0x95, 0x5a, 0xf0, 0x77, 0x40, 0x69, 0xcc, 0x60, 0x05, 0x99, 0xd0,
	0xe7, 0x65, 0xcc, 0x7c, 0x60, 0x98, 0xd2, 0xd1, 0xb3, 0x71, 0x75, 0xfa, 0xab, 0x7a, 0x78, 0xe5,
	0xfc, 0xf4, 0xcf, 0x82, 0xe6, 0xd0, 0xb8, 0x59, 0xe3, 0x39, 0xcf, 0x26, 0xd3, 0x38, 0xf2, 0x43,
	0x16, 0x82, 0x89, 0x9c, 0xdf, 0xcb, 0x2a, 0xbb, 0xc3, 0x42, 0x73, 0x4b, 0xbe, 0x05, 0x9e, 0x65,
	0x7e, 0x92, 0xa5, 0x27, 0xb0, 0x86, 0x4c, 0xaf, 0x97, 0x65, 0x7b, 0x59, 0x7a, 0x62, 0x3e, 0x94,
	0x0f, 0xef, 0x34, 0x09, 0x52, 0xff, 0x24, 0xcb, 0x22, 0xb8, 0x81, 0x3c, 0xc1, 0xeb, 0x24, 0x48,
	0x9f, 0x65, 0x59, 0xa4, 0xbe, 0x3a, 0x11, 0xcb, 0xa6, 0xd3, 0x38, 0x82, 0x9b, 0xc8, 0xc5, 0x9f,
	0x54, 0x39, 0xf3, 0xa9, 0x71, 0xab, 0x86, 0x93, 0x38, 0xcf, 0x7d, 0x3e, 0x0a, 0x52, 0xdf, 0xb5,
	0x29, 0x7c, 0xa4, 0x57, 0xac, 0x09, 0xc5, 0x5e, 0x9c, 0xe7, 0xde, 0x28, 0x48, 0x5d, 0x9b, 0xaa,
	0x9d, 0x56, 0xc0, 0xb7, 0x90, 0x4e, 0x2b, 0x20, 0xe5, 0xd8, 0x5c, 0x87, 0xfa, 0xc4, 0xea, 0x51,
	0x00, 0xe4, 0xce, 0x5d, 0x87, 0x16, 0x39, 0xf5, 0xd8, 0x88, 0xd5, 0xa7, 0xbe, 0xe5, 0x38, 0x14,
	0x3e, 0x46, 0x8e, 0xad, 0x48, 0x16, 0x41, 0x95, 0xb7, 0x1c, 0x97, 0xfa, 0x0e, 0x21, 0x14, 0x6e,
	0x23, 0x7c, 0x91, 0x2c, 0x82, 0xea, 0x9b, 0xeb, 0x10, 0x8b, 0xfa, 0xa4, 0x63, 0x75, 0x29, 0x7c,
	0x82, 0x0c, 0x7d, 0x11, 0x2d, 0x93, 0xea, 0xe8, 0x91, 0x8e, 0x65, 0x53, 0x9f, 0x38, 0xa4, 0x4f,
	0xe1, 0x53, 0x64, 0xf4, 0xca, 0x6c, 0x19, 0xbd, 0xe0, 0x70, 0xc8, 0x80, 0xfa, 0x56, 0xc7, 0xee,
	0x51, 0xf8, 0x0c, 0x73, 0x14, 0xd9, 0x32, 0xaa, 0x3a, 0xac, 0x8e, 0xdd, 0xa7, 0xbe, 0xdd, 0x19,
	0x38, 0x14, 0x3e, 0x47, 0x1c, 0x65, 0xb6, 0x8c, 0xaa, 0x0e, 0xbb, 0x33, 0x70, 0xa9, 0xdf, 0x27,
	0x03, 0x42, 0xe1, 0x0b, 0xc4, 0x51, 0x66, 0xcb, 0xa8, 0xea, 0xe8, 0x93, 0x81, 0x45, 0xfd, 0x81,
	0x45, 0x1c, 0x0a, 0xeb, 0x88, 0xa3, 0xcc, 0x96, 0x51, 0xb5, 0x88, 0x33, 0x3e, 0x8a, 0x19, 0x7c,
	0x89, 0x14, 0xf1, 0x41, 0x91, 0x92, 0x16, 0x39, 0x2f, 0x17, 0xdd, 0x9d, 0xb9, 0x8b, 0xdc, 0x53,
	0x17, 0x39, 0xaf, 0x16, 0xdd, 0x57, 0x73, 0x87, 0xde, 0x2b, 0x17, 0x9d, 0x02, 0xd1, 0x20, 0x82,
	0xaf, 0x11, 0x68, 0x18, 0x44, 0xd2, 0x16, 0xae, 0x6e, 0xee, 0x9b, 0xb9, 0x5b, 0xb8, 0xbc, 0xb9,
	0x9e, 0xb1, 0x5c, 0x23, 0x3c, 0xe3, 0x41, 0x02, 0xdf, 0xb6, 0x1c, 0x84, 0xa0, 0xbc, 0x22, 0x25,
	0xd5, 0x09, 0xaf, 0x37, 0xf1, 0x77, 0x73, 0x5f, 0x4a, 0x4f, 0xb3, 0x89, 0xb9, 0xbc, 0x89, 0x37,
	0xe6, 0xbe, 0x13, 0x9e, 0x76, 0x13, 0x73, 0x79, 0x13, 0x7f, 0x8f, 0x08, 0x74, 0x9b, 0x98, 0x8b,
	0x4d, 0xfc, 0xc3, 0xdc, 0x01, 0xf0, 0xce, 0x36, 0x71, 0xbd, 0x47, 0xb8, 0xb4, 0x47, 0xee, 0xce,
	0xad, 0x03, 0xaf, 0xde, 0x23, 0x8e, 0xb1, 0x54, 0xe3, 0x45, 0x8b, 0xc3, 0x8f, 0x7a, 0x74, 0x41,
	0xa0, 0x45, 0x81, 0x4b, 0xfd, 0xcb, 0x2f, 0xf6, 0xef, 0x4f, 0x73, 0xfb, 0xd7, 0x6b, 0xe9, 0x5f,
	0x5e, 0xf5, 0xef, 0x26, 0x32, 0x55, 0x6a, 0xff, 0x72, 0xa9, 0x7f, 0x7f, 0x46, 0x3e, 0xea, 0x66,
	0xff, 0x72, 0xb9, 0x7f, 0x3b, 0xc8, 0x81, 0x69, 0xfa, 0x97, 0xcb, 0xfd, 0x4b, 0x10, 0x5e, 0xd3,
	0xbf, 0x5c, 0xe9, 0x5f, 0x0b, 0x19, 0x15, 0x5d, 0xff, 0x72, 0xb5, 0x7f, 0xbb, 0x73, 0xfb, 0xc6,
	0xd3, 0xf7, 0x2f, 0x57, 0xfb, 0xd7, 0xc6, 0x1c, 0xba, 0xfe, 0xe5, 0x6a, 0xff, 0x3a, 0x88, 0x43,
	0xdb, 0xbf, 0x5c, 0xed, 0x5f, 0x17, 0x71, 0x68, 0xfb, 0x97, 0xab, 0xfd, 0xdb, 0x43, 0x1c, 0xda,
	0xfe, 0xe5, 0xa2, 0x7f, 0xfb, 0xc8, 0xeb, 0x57, 0xf5, 0xaf, 0xab, 0xbc, 0xb7, 0x6c, 0xec, 0x77,
	0x60, 0x80, 0xbc, 0x40, 0x87, 0x6c, 0xdc, 0x69, 0x72, 0x04, 0xee, 0xe1, 0x1c, 0x69, 0x72, 0x16,
	0xdc, 0xc7, 0x39, 0xab, 0xc9, 0x75, 0x61, 0x0b, 0xe7, 0xba, 0x4d, 0xce, 0x86, 0x07, 0x38, 0x67,
	0x37, 0x39, 0x07, 0x1e, 0xe2, 0x9c, 0xd3, 0xe4, 0x5c, 0x78, 0x84, 0x73, 0x6e, 0x93, 0xeb, 0xc1,
	0x63, 0x9c, 0xeb, 0x49, 0x1c, 0x13, 0x9f, 0xdf, 0xf6, 0x5c, 0xee, 0xe8, 0xe2, 0xe7, 0xc7, 0xc4,
	0xe7, 0x37, 0xc4, 0x39, 0xd2, 0xe4, 0x2c, 0xd8, 0xc1, 0x39, 0xab, 0xc9, 0x75, 0xe1, 0x09, 0xce,
	0x75, 0x9b, 0x9c, 0x0d, 0x4f, 0x71, 0xce, 0x6e, 0x72, 0x0e, 0xec, 0xe2, 0x9c, 0xd3, 0xe4, 0x5c,
	0x78, 0x86, 0x73, 0x6e, 0x93, 0xeb, 0xc1, 0x2f, 0x38, 0xd7, 0x2b, 0x16, 0x91, 0xb4, 0xf7, 0xfc,
	0x8e, 0x4f, 0x66, 0xb9, 0x1f, 0x16, 0x51, 0xf8, 0xb5, 0x65, 0x11, 0xf1, 0xf3, 0xed, 0xd7, 0x21,
	0xb3, 0xbc, 0xfc, 0xf1, 0x45, 0x0d, 0x91, 0x34, 0xcf, 0x51, 0x0d, 0x69, 0xd3, 0x58, 0x92, 0xe6,
	0x05, 0xaa, 0xb1, 0xda, 0x34, 0x5d, 0x49, 0xb3, 0x87, 0x6a, 0xba, 0x6d, 0x1a, 0x5b, 0xd2, 0xec,
	0xa3, 0x1a, 0xbb, 0x4d, 0xe3, 0x48, 0x9a, 0xdf, 0x50, 0x8d, 0xd3, 0xa6, 0x71, 0x25, 0xcd, 0x01,
	0xaa, 0x71, 0xdb, 0x34, 0x3d, 0x49, 0x73, 0x88, 0x6a, 0x7a, 0xb2, 0x86, 0xb5, 0xcc, 0xcd, 0xef,
	0x2d, 0x1a, 0xa6, 0x9f, 0x1b, 0xd6, 0x32, 0x37, 0x47, 0xa8, 0x86, 0xb4, 0x69, 0xe4, 0xb9, 0x79,
	0x89, 0x6a, 0xac, 0x36, 0x8d, 0x3c, 0x37, 0x1e, 0xaa, 0xe9, 0xb6, 0x69, 0xe4, 0xb9, 0x79, 0x85,
	0x6a, 0xec, 0x36, 0x8d, 0x3c, 0x37, 0xaf, 0x51, 0x8d, 0xd3, 0xa6, 0x91, 0xe7, 0xe6, 0x0f, 0x54,
	0xe3, 0xb6, 0x69, 0xe4, 0xb9, 0xf9, 0x13, 0xd5, 0xd4, 0x73, 0xb3, 0x65, 0x98, 0xe2, 0x57, 0x65,
	0x92, 0xe1, 0xaf, 0x96, 0x2f, 0x9f, 0xac, 0xfa, 0x92, 0x7e, 0x4e, 0x2b, 0xff, 0x4c, 0xe0, 0x6c,
	0x96, 0x86, 0x01, 0x8f, 0x23, 0x78, 0x83, 0x7c, 0xf7, 0xf3, 0x44, 0x72, 0x68, 0xbc, 0xb9, 0x36,
	0x0a, 0x92, 0xf2, 0x97, 0xbc, 0xf4, 0x4a, 0xf9, 0x9f, 0xee, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x7a, 0x3d, 0x5e, 0xe2, 0x17, 0x16, 0x00, 0x00,
}
