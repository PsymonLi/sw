// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hal.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ------------------------------------------------------------------------------
// HalStatus captures various states it is goes through while the system is
// coming up or going down (e.g., during upgrade)
// ------------------------------------------------------------------------------
type HalState int32

const (
	HalState_HAL_STATE_NONE                    HalState = 0
	HalState_HAL_STATE_ASIC_INIT_DONE          HalState = 1
	HalState_HAL_STATE_MEM_INIT_DONE           HalState = 2
	HalState_HAL_STATE_PACKET_BUFFER_INIT_DONE HalState = 3
	HalState_HAL_STATE_DATA_PLANE_INIT_DONE    HalState = 4
	HalState_HAL_STATE_SCHEDULER_INIT_DONE     HalState = 5
	HalState_HAL_STATE_UP                      HalState = 6
)

var HalState_name = map[int32]string{
	0: "HAL_STATE_NONE",
	1: "HAL_STATE_ASIC_INIT_DONE",
	2: "HAL_STATE_MEM_INIT_DONE",
	3: "HAL_STATE_PACKET_BUFFER_INIT_DONE",
	4: "HAL_STATE_DATA_PLANE_INIT_DONE",
	5: "HAL_STATE_SCHEDULER_INIT_DONE",
	6: "HAL_STATE_UP",
}
var HalState_value = map[string]int32{
	"HAL_STATE_NONE":                    0,
	"HAL_STATE_ASIC_INIT_DONE":          1,
	"HAL_STATE_MEM_INIT_DONE":           2,
	"HAL_STATE_PACKET_BUFFER_INIT_DONE": 3,
	"HAL_STATE_DATA_PLANE_INIT_DONE":    4,
	"HAL_STATE_SCHEDULER_INIT_DONE":     5,
	"HAL_STATE_UP":                      6,
}

func (x HalState) String() string {
	return proto.EnumName(HalState_name, int32(x))
}
func (HalState) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

type HalStatus struct {
	Meta  *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	State HalState           `protobuf:"varint,2,opt,name=state,enum=hal.HalState" json:"state,omitempty"`
}

func (m *HalStatus) GetDelphiMessage() proto.Message {
	return m
}

func (m *HalStatus) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *HalStatus) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *HalStatus) GetDelphiKey() string {
	return "default"
}

func (m *HalStatus) GetDelphiKind() string {
	return "HalStatus"
}

func (m *HalStatus) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *HalStatus) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*HalStatus)
	return obj
}

func HalStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("HalStatus", mode)
}

func GetHalStatus(client clientApi.Client) *HalStatus {
	o := client.GetObject("HalStatus", "default")
	if o == nil {
		return nil
	}
	obj, ok := o.(*HalStatus)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func HalStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg HalStatus
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func HalStatusWatch(client clientApi.Client, reactor HalStatusReactor) {
	client.WatchKind("HalStatus", reactor)
}
func HalStatusList(client clientApi.Client) []*HalStatus {
	bobjs := client.List("HalStatus")
	objs := make([]*HalStatus, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*HalStatus)
		objs = append(objs, obj)
	}
	return objs
}
func (m *HalStatus) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(HalStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnHalStatusCreate(m)
			} else {
				oldObj, ok := old.(*HalStatus)
				if ok == false {
					panic("Not an HalStatus object")
				}
				rctr.OnHalStatusUpdate(oldObj, m)
			}
		} else {
			rctr.OnHalStatusDelete(m)
		}
	}
}

type HalStatusReactor interface {
	OnHalStatusCreate(obj *HalStatus)
	OnHalStatusUpdate(old *HalStatus, obj *HalStatus)
	OnHalStatusDelete(obj *HalStatus)
}

func (m *HalStatus) Reset()                    { *m = HalStatus{} }
func (m *HalStatus) String() string            { return proto.CompactTextString(m) }
func (*HalStatus) ProtoMessage()               {}
func (*HalStatus) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

func (m *HalStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *HalStatus) GetState() HalState {
	if m != nil {
		return m.State
	}
	return HalState_HAL_STATE_NONE
}

func init() {
	clientApi.RegisterFactory("HalStatus", HalStatusFactory)
	proto.RegisterType((*HalStatus)(nil), "hal.HalStatus")
	proto.RegisterEnum("hal.HalState", HalState_name, HalState_value)
}

func init() { proto.RegisterFile("hal.proto", fileDescriptor14) }

var fileDescriptor14 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0x48, 0xcc, 0xd1,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0x48, 0xcc, 0x91, 0xe2, 0x49, 0x49, 0xcd, 0x29,
	0xc8, 0xc8, 0x84, 0x08, 0x29, 0x25, 0x71, 0x71, 0x7a, 0x24, 0xe6, 0x04, 0x97, 0x24, 0x96, 0x94,
	0x16, 0x0b, 0xa9, 0x71, 0xb1, 0xf8, 0xa6, 0x96, 0x24, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b,
	0x09, 0xe9, 0x41, 0x55, 0xfa, 0x27, 0x65, 0xa5, 0x26, 0x97, 0x80, 0x64, 0x82, 0xc0, 0xf2, 0x42,
	0xca, 0x5c, 0xac, 0xc5, 0x25, 0x89, 0x25, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0xbc,
	0x7a, 0x20, 0x2b, 0xa0, 0xc6, 0xa4, 0x06, 0x41, 0xe4, 0xac, 0x38, 0x1a, 0xa6, 0x2b, 0x31, 0x76,
	0x4c, 0x57, 0x62, 0xd4, 0xba, 0xc9, 0xc8, 0xc5, 0x01, 0x93, 0x15, 0x12, 0xe2, 0xe2, 0xf3, 0x70,
	0xf4, 0x89, 0x0f, 0x0e, 0x71, 0x0c, 0x71, 0x8d, 0xf7, 0xf3, 0xf7, 0x73, 0x15, 0x60, 0x10, 0x92,
	0xe1, 0x92, 0x40, 0x88, 0x39, 0x06, 0x7b, 0x3a, 0xc7, 0x7b, 0xfa, 0x79, 0x86, 0xc4, 0xbb, 0x80,
	0x64, 0x19, 0x85, 0xa4, 0xb9, 0xc4, 0x11, 0xb2, 0xbe, 0xae, 0xbe, 0x48, 0x92, 0x4c, 0x42, 0xaa,
	0x5c, 0x8a, 0x08, 0xc9, 0x00, 0x47, 0x67, 0x6f, 0xd7, 0x90, 0x78, 0xa7, 0x50, 0x37, 0x37, 0xd7,
	0x20, 0x24, 0x65, 0xcc, 0x42, 0x4a, 0x5c, 0x72, 0x08, 0x65, 0x2e, 0x8e, 0x21, 0x8e, 0xf1, 0x01,
	0x3e, 0x8e, 0x7e, 0xae, 0x48, 0x6a, 0x58, 0x84, 0x14, 0xb9, 0x64, 0x11, 0x6a, 0x82, 0x9d, 0x3d,
	0x5c, 0x5d, 0x42, 0x7d, 0x50, 0x8c, 0x61, 0x15, 0x12, 0xe0, 0xe2, 0x41, 0x28, 0x09, 0x0d, 0x10,
	0x60, 0x4b, 0x62, 0x03, 0x07, 0xa3, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xad, 0xfe, 0xd6, 0x8c,
	0x66, 0x01, 0x00, 0x00,
}
