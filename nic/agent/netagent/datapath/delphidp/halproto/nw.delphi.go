// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nw.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// NetworkSpec is used to add or modify a network object
type NetworkSpec struct {
	Meta *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	// key_or_handle is the network being create or updated
	KeyOrHandle *NetworkKeyHandle         `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Rmac        uint64                    `protobuf:"varint,3,opt,name=rmac" json:"rmac,omitempty"`
	GatewayIp   *IPAddress                `protobuf:"bytes,4,opt,name=gateway_ip,json=gatewayIp" json:"gateway_ip,omitempty"`
	SgKeyHandle []*SecurityGroupKeyHandle `protobuf:"bytes,5,rep,name=sg_key_handle,json=sgKeyHandle" json:"sg_key_handle,omitempty"`
}

func (m *NetworkSpec) GetDelphiMessage() proto.Message {
	return m
}

func (m *NetworkSpec) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *NetworkSpec) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *NetworkSpec) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *NetworkSpec) GetDelphiKind() string {
	return "NetworkSpec"
}

func (m *NetworkSpec) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *NetworkSpec) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*NetworkSpec)
	return obj
}

func NetworkSpecMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("NetworkSpec", mode)
}

func NetworkSpecMountKey(client clientApi.Client, key *NetworkKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("NetworkSpec", key.String(), mode)
}

func GetNetworkSpec(client clientApi.Client, key *NetworkKeyHandle) *NetworkSpec {
	o := client.GetObject("NetworkSpec", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*NetworkSpec)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func NetworkSpecFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg NetworkSpec
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func NetworkSpecWatch(client clientApi.Client, reactor NetworkSpecReactor) {
	client.WatchKind("NetworkSpec", reactor)
}
func NetworkSpecList(client clientApi.Client) []*NetworkSpec {
	bobjs := client.List("NetworkSpec")
	objs := make([]*NetworkSpec, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*NetworkSpec)
		objs = append(objs, obj)
	}
	return objs
}
func (m *NetworkSpec) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(NetworkSpecReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnNetworkSpecCreate(m)
			} else {
				oldObj, ok := old.(*NetworkSpec)
				if ok == false {
					panic("Not an NetworkSpec object")
				}
				rctr.OnNetworkSpecUpdate(oldObj, m)
			}
		} else {
			rctr.OnNetworkSpecDelete(m)
		}
	}
}

type NetworkSpecReactor interface {
	OnNetworkSpecCreate(obj *NetworkSpec)
	OnNetworkSpecUpdate(old *NetworkSpec, obj *NetworkSpec)
	OnNetworkSpecDelete(obj *NetworkSpec)
}

func (m *NetworkSpec) Reset()                    { *m = NetworkSpec{} }
func (m *NetworkSpec) String() string            { return proto.CompactTextString(m) }
func (*NetworkSpec) ProtoMessage()               {}
func (*NetworkSpec) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{0} }

func (m *NetworkSpec) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NetworkSpec) GetKeyOrHandle() *NetworkKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *NetworkSpec) GetRmac() uint64 {
	if m != nil {
		return m.Rmac
	}
	return 0
}

func (m *NetworkSpec) GetGatewayIp() *IPAddress {
	if m != nil {
		return m.GatewayIp
	}
	return nil
}

func (m *NetworkSpec) GetSgKeyHandle() []*SecurityGroupKeyHandle {
	if m != nil {
		return m.SgKeyHandle
	}
	return nil
}

// NetworkRequestMsg is batched request message used to create/update network
// objects
type NetworkRequestMsg struct {
	Request []*NetworkSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NetworkRequestMsg) Reset()                    { *m = NetworkRequestMsg{} }
func (m *NetworkRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NetworkRequestMsg) ProtoMessage()               {}
func (*NetworkRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{1} }

func (m *NetworkRequestMsg) GetRequest() []*NetworkSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// NetworkStatus represents the current status of the network policy object
type NetworkStatus struct {
	Meta        *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle *NetworkKeyHandle  `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *NetworkStatus) GetDelphiMessage() proto.Message {
	return m
}

func (m *NetworkStatus) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *NetworkStatus) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *NetworkStatus) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *NetworkStatus) GetDelphiKind() string {
	return "NetworkStatus"
}

func (m *NetworkStatus) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *NetworkStatus) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*NetworkStatus)
	return obj
}

func NetworkStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("NetworkStatus", mode)
}

func NetworkStatusMountKey(client clientApi.Client, key *NetworkKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("NetworkStatus", key.String(), mode)
}

func GetNetworkStatus(client clientApi.Client, key *NetworkKeyHandle) *NetworkStatus {
	o := client.GetObject("NetworkStatus", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*NetworkStatus)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func NetworkStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg NetworkStatus
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func NetworkStatusWatch(client clientApi.Client, reactor NetworkStatusReactor) {
	client.WatchKind("NetworkStatus", reactor)
}
func NetworkStatusList(client clientApi.Client) []*NetworkStatus {
	bobjs := client.List("NetworkStatus")
	objs := make([]*NetworkStatus, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*NetworkStatus)
		objs = append(objs, obj)
	}
	return objs
}
func (m *NetworkStatus) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(NetworkStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnNetworkStatusCreate(m)
			} else {
				oldObj, ok := old.(*NetworkStatus)
				if ok == false {
					panic("Not an NetworkStatus object")
				}
				rctr.OnNetworkStatusUpdate(oldObj, m)
			}
		} else {
			rctr.OnNetworkStatusDelete(m)
		}
	}
}

type NetworkStatusReactor interface {
	OnNetworkStatusCreate(obj *NetworkStatus)
	OnNetworkStatusUpdate(old *NetworkStatus, obj *NetworkStatus)
	OnNetworkStatusDelete(obj *NetworkStatus)
}

func (m *NetworkStatus) Reset()                    { *m = NetworkStatus{} }
func (m *NetworkStatus) String() string            { return proto.CompactTextString(m) }
func (*NetworkStatus) ProtoMessage()               {}
func (*NetworkStatus) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{2} }

func (m *NetworkStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NetworkStatus) GetKeyOrHandle() *NetworkKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// NetworkResponse is response to one NetworkSpec
type NetworkResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *NetworkStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *NetworkResponse) Reset()                    { *m = NetworkResponse{} }
func (m *NetworkResponse) String() string            { return proto.CompactTextString(m) }
func (*NetworkResponse) ProtoMessage()               {}
func (*NetworkResponse) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{3} }

func (m *NetworkResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NetworkResponse) GetStatus() *NetworkStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// NetworkResponseMsg is response to NetworkRequestMsg
type NetworkResponseMsg struct {
	Response []*NetworkResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NetworkResponseMsg) Reset()                    { *m = NetworkResponseMsg{} }
func (m *NetworkResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NetworkResponseMsg) ProtoMessage()               {}
func (*NetworkResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{4} }

func (m *NetworkResponseMsg) GetResponse() []*NetworkResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NetworkDeleteRequest is used to delete a network policy object
type NetworkDeleteRequest struct {
	// key_or_handle is the network being deleted
	KeyOrHandle  *NetworkKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	VrfKeyHandle *VrfKeyHandle     `protobuf:"bytes,2,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
}

func (m *NetworkDeleteRequest) Reset()                    { *m = NetworkDeleteRequest{} }
func (m *NetworkDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*NetworkDeleteRequest) ProtoMessage()               {}
func (*NetworkDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{5} }

func (m *NetworkDeleteRequest) GetKeyOrHandle() *NetworkKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *NetworkDeleteRequest) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

// NetworkDeleteRequestMsg is used to delete a batch of network policy objects
type NetworkDeleteRequestMsg struct {
	Request []*NetworkDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NetworkDeleteRequestMsg) Reset()                    { *m = NetworkDeleteRequestMsg{} }
func (m *NetworkDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NetworkDeleteRequestMsg) ProtoMessage()               {}
func (*NetworkDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{6} }

func (m *NetworkDeleteRequestMsg) GetRequest() []*NetworkDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// NetworkDeleteResponse is response to NetworkDeleteRequest
type NetworkDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *NetworkDeleteResponse) Reset()                    { *m = NetworkDeleteResponse{} }
func (m *NetworkDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*NetworkDeleteResponse) ProtoMessage()               {}
func (*NetworkDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{7} }

func (m *NetworkDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// NetworkDeleteResponseMsg is batched response to NetworkDeleteRequestMsg
type NetworkDeleteResponseMsg struct {
	Response []*NetworkDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NetworkDeleteResponseMsg) Reset()                    { *m = NetworkDeleteResponseMsg{} }
func (m *NetworkDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NetworkDeleteResponseMsg) ProtoMessage()               {}
func (*NetworkDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{8} }

func (m *NetworkDeleteResponseMsg) GetResponse() []*NetworkDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NetworkStats captures all the statistics of given network
type NetworkStats struct {
}

func (m *NetworkStats) Reset()                    { *m = NetworkStats{} }
func (m *NetworkStats) String() string            { return proto.CompactTextString(m) }
func (*NetworkStats) ProtoMessage()               {}
func (*NetworkStats) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{9} }

// NetworkGetRequest is used to get information about a network
type NetworkGetRequest struct {
	// key_or_handle is the key or handle of the network object being retrieved
	KeyOrHandle  *NetworkKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	VrfKeyHandle *VrfKeyHandle     `protobuf:"bytes,2,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
}

func (m *NetworkGetRequest) Reset()                    { *m = NetworkGetRequest{} }
func (m *NetworkGetRequest) String() string            { return proto.CompactTextString(m) }
func (*NetworkGetRequest) ProtoMessage()               {}
func (*NetworkGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{10} }

func (m *NetworkGetRequest) GetKeyOrHandle() *NetworkKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *NetworkGetRequest) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

// NetworkGetRequestMsg is batched GET request for networks
type NetworkGetRequestMsg struct {
	Request []*NetworkGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NetworkGetRequestMsg) Reset()                    { *m = NetworkGetRequestMsg{} }
func (m *NetworkGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NetworkGetRequestMsg) ProtoMessage()               {}
func (*NetworkGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{11} }

func (m *NetworkGetRequestMsg) GetRequest() []*NetworkGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// NetworkGetResponse captures all the information about a network
type NetworkGetResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *NetworkSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *NetworkStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *NetworkStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *NetworkGetResponse) Reset()                    { *m = NetworkGetResponse{} }
func (m *NetworkGetResponse) String() string            { return proto.CompactTextString(m) }
func (*NetworkGetResponse) ProtoMessage()               {}
func (*NetworkGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{12} }

func (m *NetworkGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NetworkGetResponse) GetSpec() *NetworkSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *NetworkGetResponse) GetStatus() *NetworkStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *NetworkGetResponse) GetStats() *NetworkStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// NetworkGetResponseMsg is response to NetworkGetRequestMsg
type NetworkGetResponseMsg struct {
	Response []*NetworkGetResponse `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
}

func (m *NetworkGetResponseMsg) Reset()                    { *m = NetworkGetResponseMsg{} }
func (m *NetworkGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NetworkGetResponseMsg) ProtoMessage()               {}
func (*NetworkGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{13} }

func (m *NetworkGetResponseMsg) GetResponse() []*NetworkGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RouteSpec is used to add or modify a route object
type RouteSpec struct {
	KeyOrHandle   *RouteKeyHandle   `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	NhKeyOrHandle *NexthopKeyHandle `protobuf:"bytes,2,opt,name=nh_key_or_handle,json=nhKeyOrHandle" json:"nh_key_or_handle,omitempty"`
}

func (m *RouteSpec) Reset()                    { *m = RouteSpec{} }
func (m *RouteSpec) String() string            { return proto.CompactTextString(m) }
func (*RouteSpec) ProtoMessage()               {}
func (*RouteSpec) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{14} }

func (m *RouteSpec) GetKeyOrHandle() *RouteKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *RouteSpec) GetNhKeyOrHandle() *NexthopKeyHandle {
	if m != nil {
		return m.NhKeyOrHandle
	}
	return nil
}

// RouteRequestMsg is batched request message used to create/update
// route objects
type RouteRequestMsg struct {
	Request []*RouteSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RouteRequestMsg) Reset()                    { *m = RouteRequestMsg{} }
func (m *RouteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RouteRequestMsg) ProtoMessage()               {}
func (*RouteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{15} }

func (m *RouteRequestMsg) GetRequest() []*RouteSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RouteStatus represents the current status of the route object
type RouteStatus struct {
	RouteHandle uint64 `protobuf:"fixed64,1,opt,name=route_handle,json=routeHandle" json:"route_handle,omitempty"`
}

func (m *RouteStatus) Reset()                    { *m = RouteStatus{} }
func (m *RouteStatus) String() string            { return proto.CompactTextString(m) }
func (*RouteStatus) ProtoMessage()               {}
func (*RouteStatus) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{16} }

func (m *RouteStatus) GetRouteHandle() uint64 {
	if m != nil {
		return m.RouteHandle
	}
	return 0
}

// RouteResponse is response to one RouteSpec
type RouteResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *RouteStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *RouteResponse) Reset()                    { *m = RouteResponse{} }
func (m *RouteResponse) String() string            { return proto.CompactTextString(m) }
func (*RouteResponse) ProtoMessage()               {}
func (*RouteResponse) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{17} }

func (m *RouteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RouteResponse) GetStatus() *RouteStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// RouteResponseMsg is response to RouteRequestMsg
type RouteResponseMsg struct {
	Response []*RouteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RouteResponseMsg) Reset()                    { *m = RouteResponseMsg{} }
func (m *RouteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RouteResponseMsg) ProtoMessage()               {}
func (*RouteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{18} }

func (m *RouteResponseMsg) GetResponse() []*RouteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RouteDeleteRequest is used to delete a route object
type RouteDeleteRequest struct {
	KeyOrHandle *RouteKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *RouteDeleteRequest) Reset()                    { *m = RouteDeleteRequest{} }
func (m *RouteDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*RouteDeleteRequest) ProtoMessage()               {}
func (*RouteDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{19} }

func (m *RouteDeleteRequest) GetKeyOrHandle() *RouteKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// RouteDeleteRequestMsg is used to delete a batch of route objects
type RouteDeleteRequestMsg struct {
	Request []*RouteDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RouteDeleteRequestMsg) Reset()                    { *m = RouteDeleteRequestMsg{} }
func (m *RouteDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RouteDeleteRequestMsg) ProtoMessage()               {}
func (*RouteDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{20} }

func (m *RouteDeleteRequestMsg) GetRequest() []*RouteDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RouteDeleteResponse is response to RouteDeleteRequest
type RouteDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *RouteDeleteResponse) Reset()                    { *m = RouteDeleteResponse{} }
func (m *RouteDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*RouteDeleteResponse) ProtoMessage()               {}
func (*RouteDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{21} }

func (m *RouteDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// RouteDeleteResponseMsg is batched response to RouteDeleteRequestMsg
type RouteDeleteResponseMsg struct {
	Response []*RouteDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RouteDeleteResponseMsg) Reset()                    { *m = RouteDeleteResponseMsg{} }
func (m *RouteDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RouteDeleteResponseMsg) ProtoMessage()               {}
func (*RouteDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{22} }

func (m *RouteDeleteResponseMsg) GetResponse() []*RouteDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RouteStats captures all the statistics of given route
type RouteStats struct {
}

func (m *RouteStats) Reset()                    { *m = RouteStats{} }
func (m *RouteStats) String() string            { return proto.CompactTextString(m) }
func (*RouteStats) ProtoMessage()               {}
func (*RouteStats) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{23} }

// RouteGetRequest is used to get information about a route
type RouteGetRequest struct {
	KeyOrHandle *RouteKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *RouteGetRequest) Reset()                    { *m = RouteGetRequest{} }
func (m *RouteGetRequest) String() string            { return proto.CompactTextString(m) }
func (*RouteGetRequest) ProtoMessage()               {}
func (*RouteGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{24} }

func (m *RouteGetRequest) GetKeyOrHandle() *RouteKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// RouteGetRequestMsg is batched GET request for routes
type RouteGetRequestMsg struct {
	Request []*RouteGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RouteGetRequestMsg) Reset()                    { *m = RouteGetRequestMsg{} }
func (m *RouteGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RouteGetRequestMsg) ProtoMessage()               {}
func (*RouteGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{25} }

func (m *RouteGetRequestMsg) GetRequest() []*RouteGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RouteGetResponse captures all the information about a route
type RouteGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *RouteSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *RouteStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *RouteStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *RouteGetResponse) Reset()                    { *m = RouteGetResponse{} }
func (m *RouteGetResponse) String() string            { return proto.CompactTextString(m) }
func (*RouteGetResponse) ProtoMessage()               {}
func (*RouteGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{26} }

func (m *RouteGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RouteGetResponse) GetSpec() *RouteSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *RouteGetResponse) GetStatus() *RouteStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RouteGetResponse) GetStats() *RouteStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// RouteGetResponseMsg is response to RouteGetRequestMsg
type RouteGetResponseMsg struct {
	Response []*RouteGetResponse `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
}

func (m *RouteGetResponseMsg) Reset()                    { *m = RouteGetResponseMsg{} }
func (m *RouteGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RouteGetResponseMsg) ProtoMessage()               {}
func (*RouteGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{27} }

func (m *RouteGetResponseMsg) GetResponse() []*RouteGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NexthopSpec is used to add or modify a nexthop object
type NexthopSpec struct {
	KeyOrHandle *NexthopKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	// Types that are valid to be assigned to IfOrEp:
	//	*NexthopSpec_IfKeyOrHandle
	//	*NexthopSpec_EpKeyOrHandle
	IfOrEp isNexthopSpec_IfOrEp `protobuf_oneof:"if_or_ep"`
}

func (m *NexthopSpec) Reset()                    { *m = NexthopSpec{} }
func (m *NexthopSpec) String() string            { return proto.CompactTextString(m) }
func (*NexthopSpec) ProtoMessage()               {}
func (*NexthopSpec) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{28} }

type isNexthopSpec_IfOrEp interface{ isNexthopSpec_IfOrEp() }

type NexthopSpec_IfKeyOrHandle struct {
	IfKeyOrHandle *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=if_key_or_handle,json=ifKeyOrHandle,oneof"`
}
type NexthopSpec_EpKeyOrHandle struct {
	EpKeyOrHandle *EndpointKeyHandle `protobuf:"bytes,3,opt,name=ep_key_or_handle,json=epKeyOrHandle,oneof"`
}

func (*NexthopSpec_IfKeyOrHandle) isNexthopSpec_IfOrEp() {}
func (*NexthopSpec_EpKeyOrHandle) isNexthopSpec_IfOrEp() {}

func (m *NexthopSpec) GetIfOrEp() isNexthopSpec_IfOrEp {
	if m != nil {
		return m.IfOrEp
	}
	return nil
}

func (m *NexthopSpec) GetKeyOrHandle() *NexthopKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *NexthopSpec) GetIfKeyOrHandle() *InterfaceKeyHandle {
	if x, ok := m.GetIfOrEp().(*NexthopSpec_IfKeyOrHandle); ok {
		return x.IfKeyOrHandle
	}
	return nil
}

func (m *NexthopSpec) GetEpKeyOrHandle() *EndpointKeyHandle {
	if x, ok := m.GetIfOrEp().(*NexthopSpec_EpKeyOrHandle); ok {
		return x.EpKeyOrHandle
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NexthopSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NexthopSpec_OneofMarshaler, _NexthopSpec_OneofUnmarshaler, _NexthopSpec_OneofSizer, []interface{}{
		(*NexthopSpec_IfKeyOrHandle)(nil),
		(*NexthopSpec_EpKeyOrHandle)(nil),
	}
}

func _NexthopSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NexthopSpec)
	// if_or_ep
	switch x := m.IfOrEp.(type) {
	case *NexthopSpec_IfKeyOrHandle:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfKeyOrHandle); err != nil {
			return err
		}
	case *NexthopSpec_EpKeyOrHandle:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EpKeyOrHandle); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NexthopSpec.IfOrEp has unexpected type %T", x)
	}
	return nil
}

func _NexthopSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NexthopSpec)
	switch tag {
	case 2: // if_or_ep.if_key_or_handle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InterfaceKeyHandle)
		err := b.DecodeMessage(msg)
		m.IfOrEp = &NexthopSpec_IfKeyOrHandle{msg}
		return true, err
	case 3: // if_or_ep.ep_key_or_handle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EndpointKeyHandle)
		err := b.DecodeMessage(msg)
		m.IfOrEp = &NexthopSpec_EpKeyOrHandle{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NexthopSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NexthopSpec)
	// if_or_ep
	switch x := m.IfOrEp.(type) {
	case *NexthopSpec_IfKeyOrHandle:
		s := proto.Size(x.IfKeyOrHandle)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NexthopSpec_EpKeyOrHandle:
		s := proto.Size(x.EpKeyOrHandle)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// NexthopRequestMsg is batched request message used to create/update
// nexthop objects
type NexthopRequestMsg struct {
	Request []*NexthopSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NexthopRequestMsg) Reset()                    { *m = NexthopRequestMsg{} }
func (m *NexthopRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NexthopRequestMsg) ProtoMessage()               {}
func (*NexthopRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{29} }

func (m *NexthopRequestMsg) GetRequest() []*NexthopSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// NexthopStatus represents the current status of the nexthop object
type NexthopStatus struct {
	NexthopHandle uint64 `protobuf:"fixed64,1,opt,name=nexthop_handle,json=nexthopHandle" json:"nexthop_handle,omitempty"`
}

func (m *NexthopStatus) Reset()                    { *m = NexthopStatus{} }
func (m *NexthopStatus) String() string            { return proto.CompactTextString(m) }
func (*NexthopStatus) ProtoMessage()               {}
func (*NexthopStatus) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{30} }

func (m *NexthopStatus) GetNexthopHandle() uint64 {
	if m != nil {
		return m.NexthopHandle
	}
	return 0
}

// NexthopResponse is response to one NexthopSpec
type NexthopResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *NexthopStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *NexthopResponse) Reset()                    { *m = NexthopResponse{} }
func (m *NexthopResponse) String() string            { return proto.CompactTextString(m) }
func (*NexthopResponse) ProtoMessage()               {}
func (*NexthopResponse) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{31} }

func (m *NexthopResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NexthopResponse) GetStatus() *NexthopStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// NexthopResponseMsg is response to NexthopRequestMsg
type NexthopResponseMsg struct {
	Response []*NexthopResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NexthopResponseMsg) Reset()                    { *m = NexthopResponseMsg{} }
func (m *NexthopResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NexthopResponseMsg) ProtoMessage()               {}
func (*NexthopResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{32} }

func (m *NexthopResponseMsg) GetResponse() []*NexthopResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NexthopDeleteRequest is used to delete a nexthop object
type NexthopDeleteRequest struct {
	KeyOrHandle *NexthopKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *NexthopDeleteRequest) Reset()                    { *m = NexthopDeleteRequest{} }
func (m *NexthopDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*NexthopDeleteRequest) ProtoMessage()               {}
func (*NexthopDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{33} }

func (m *NexthopDeleteRequest) GetKeyOrHandle() *NexthopKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// NexthopDeleteRequestMsg is used to delete a batch of nexthop objects
type NexthopDeleteRequestMsg struct {
	Request []*NexthopDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NexthopDeleteRequestMsg) Reset()                    { *m = NexthopDeleteRequestMsg{} }
func (m *NexthopDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NexthopDeleteRequestMsg) ProtoMessage()               {}
func (*NexthopDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{34} }

func (m *NexthopDeleteRequestMsg) GetRequest() []*NexthopDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// NexthopDeleteResponse is response to NexthopDeleteRequest
type NexthopDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *NexthopDeleteResponse) Reset()                    { *m = NexthopDeleteResponse{} }
func (m *NexthopDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*NexthopDeleteResponse) ProtoMessage()               {}
func (*NexthopDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{35} }

func (m *NexthopDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// NexthopDeleteResponseMsg is batched response to NexthopDeleteRequestMsg
type NexthopDeleteResponseMsg struct {
	Response []*NexthopDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NexthopDeleteResponseMsg) Reset()                    { *m = NexthopDeleteResponseMsg{} }
func (m *NexthopDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NexthopDeleteResponseMsg) ProtoMessage()               {}
func (*NexthopDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{36} }

func (m *NexthopDeleteResponseMsg) GetResponse() []*NexthopDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NexthopStats captures all the statistics of given nexthop
type NexthopStats struct {
}

func (m *NexthopStats) Reset()                    { *m = NexthopStats{} }
func (m *NexthopStats) String() string            { return proto.CompactTextString(m) }
func (*NexthopStats) ProtoMessage()               {}
func (*NexthopStats) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{37} }

// NexthopGetRequest is used to get information about a nexthop
type NexthopGetRequest struct {
	KeyOrHandle *NexthopKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *NexthopGetRequest) Reset()                    { *m = NexthopGetRequest{} }
func (m *NexthopGetRequest) String() string            { return proto.CompactTextString(m) }
func (*NexthopGetRequest) ProtoMessage()               {}
func (*NexthopGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{38} }

func (m *NexthopGetRequest) GetKeyOrHandle() *NexthopKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// NexthopGetRequestMsg is batched GET request for nexthops
type NexthopGetRequestMsg struct {
	Request []*NexthopGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NexthopGetRequestMsg) Reset()                    { *m = NexthopGetRequestMsg{} }
func (m *NexthopGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NexthopGetRequestMsg) ProtoMessage()               {}
func (*NexthopGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{39} }

func (m *NexthopGetRequestMsg) GetRequest() []*NexthopGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// NexthopGetResponse captures all the information about a nexthop
type NexthopGetResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *NexthopSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *NexthopStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *NexthopStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *NexthopGetResponse) Reset()                    { *m = NexthopGetResponse{} }
func (m *NexthopGetResponse) String() string            { return proto.CompactTextString(m) }
func (*NexthopGetResponse) ProtoMessage()               {}
func (*NexthopGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{40} }

func (m *NexthopGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NexthopGetResponse) GetSpec() *NexthopSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *NexthopGetResponse) GetStatus() *NexthopStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *NexthopGetResponse) GetStats() *NexthopStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// NexthopGetResponseMsg is response to NexthopGetRequestMsg
type NexthopGetResponseMsg struct {
	Response []*NexthopGetResponse `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
}

func (m *NexthopGetResponseMsg) Reset()                    { *m = NexthopGetResponseMsg{} }
func (m *NexthopGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NexthopGetResponseMsg) ProtoMessage()               {}
func (*NexthopGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{41} }

func (m *NexthopGetResponseMsg) GetResponse() []*NexthopGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	clientApi.RegisterFactory("NetworkSpec", NetworkSpecFactory)
	proto.RegisterType((*NetworkSpec)(nil), "halproto.NetworkSpec")
	proto.RegisterType((*NetworkRequestMsg)(nil), "halproto.NetworkRequestMsg")
	clientApi.RegisterFactory("NetworkStatus", NetworkStatusFactory)
	proto.RegisterType((*NetworkStatus)(nil), "halproto.NetworkStatus")
	proto.RegisterType((*NetworkResponse)(nil), "halproto.NetworkResponse")
	proto.RegisterType((*NetworkResponseMsg)(nil), "halproto.NetworkResponseMsg")
	proto.RegisterType((*NetworkDeleteRequest)(nil), "halproto.NetworkDeleteRequest")
	proto.RegisterType((*NetworkDeleteRequestMsg)(nil), "halproto.NetworkDeleteRequestMsg")
	proto.RegisterType((*NetworkDeleteResponse)(nil), "halproto.NetworkDeleteResponse")
	proto.RegisterType((*NetworkDeleteResponseMsg)(nil), "halproto.NetworkDeleteResponseMsg")
	proto.RegisterType((*NetworkStats)(nil), "halproto.NetworkStats")
	proto.RegisterType((*NetworkGetRequest)(nil), "halproto.NetworkGetRequest")
	proto.RegisterType((*NetworkGetRequestMsg)(nil), "halproto.NetworkGetRequestMsg")
	proto.RegisterType((*NetworkGetResponse)(nil), "halproto.NetworkGetResponse")
	proto.RegisterType((*NetworkGetResponseMsg)(nil), "halproto.NetworkGetResponseMsg")
	proto.RegisterType((*RouteSpec)(nil), "halproto.RouteSpec")
	proto.RegisterType((*RouteRequestMsg)(nil), "halproto.RouteRequestMsg")
	proto.RegisterType((*RouteStatus)(nil), "halproto.RouteStatus")
	proto.RegisterType((*RouteResponse)(nil), "halproto.RouteResponse")
	proto.RegisterType((*RouteResponseMsg)(nil), "halproto.RouteResponseMsg")
	proto.RegisterType((*RouteDeleteRequest)(nil), "halproto.RouteDeleteRequest")
	proto.RegisterType((*RouteDeleteRequestMsg)(nil), "halproto.RouteDeleteRequestMsg")
	proto.RegisterType((*RouteDeleteResponse)(nil), "halproto.RouteDeleteResponse")
	proto.RegisterType((*RouteDeleteResponseMsg)(nil), "halproto.RouteDeleteResponseMsg")
	proto.RegisterType((*RouteStats)(nil), "halproto.RouteStats")
	proto.RegisterType((*RouteGetRequest)(nil), "halproto.RouteGetRequest")
	proto.RegisterType((*RouteGetRequestMsg)(nil), "halproto.RouteGetRequestMsg")
	proto.RegisterType((*RouteGetResponse)(nil), "halproto.RouteGetResponse")
	proto.RegisterType((*RouteGetResponseMsg)(nil), "halproto.RouteGetResponseMsg")
	proto.RegisterType((*NexthopSpec)(nil), "halproto.NexthopSpec")
	proto.RegisterType((*NexthopRequestMsg)(nil), "halproto.NexthopRequestMsg")
	proto.RegisterType((*NexthopStatus)(nil), "halproto.NexthopStatus")
	proto.RegisterType((*NexthopResponse)(nil), "halproto.NexthopResponse")
	proto.RegisterType((*NexthopResponseMsg)(nil), "halproto.NexthopResponseMsg")
	proto.RegisterType((*NexthopDeleteRequest)(nil), "halproto.NexthopDeleteRequest")
	proto.RegisterType((*NexthopDeleteRequestMsg)(nil), "halproto.NexthopDeleteRequestMsg")
	proto.RegisterType((*NexthopDeleteResponse)(nil), "halproto.NexthopDeleteResponse")
	proto.RegisterType((*NexthopDeleteResponseMsg)(nil), "halproto.NexthopDeleteResponseMsg")
	proto.RegisterType((*NexthopStats)(nil), "halproto.NexthopStats")
	proto.RegisterType((*NexthopGetRequest)(nil), "halproto.NexthopGetRequest")
	proto.RegisterType((*NexthopGetRequestMsg)(nil), "halproto.NexthopGetRequestMsg")
	proto.RegisterType((*NexthopGetResponse)(nil), "halproto.NexthopGetResponse")
	proto.RegisterType((*NexthopGetResponseMsg)(nil), "halproto.NexthopGetResponseMsg")
}

func init() { proto.RegisterFile("nw.proto", fileDescriptor21) }

var fileDescriptor21 = []byte{
	// 1236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcd, 0x6e, 0xdb, 0x46,
	0x17, 0x35, 0x6d, 0xc5, 0x91, 0xaf, 0x2c, 0xd9, 0x1e, 0x5b, 0xb2, 0xac, 0xef, 0x03, 0xe2, 0xb0,
	0x6d, 0xec, 0x2c, 0xa2, 0x18, 0x0e, 0xda, 0x85, 0x81, 0x16, 0xb5, 0xdd, 0xf8, 0x07, 0x8e, 0xf2,
	0xc3, 0xa0, 0x05, 0x5a, 0x34, 0x50, 0x19, 0x69, 0x64, 0xb1, 0x72, 0x29, 0x96, 0xa4, 0xed, 0x6a,
	0x97, 0x45, 0x81, 0xf6, 0x0d, 0x0a, 0x74, 0x59, 0xa0, 0x40, 0x9f, 0xa0, 0x4f, 0xd1, 0x65, 0xd7,
	0x79, 0x88, 0x3c, 0x41, 0x31, 0x3f, 0x1a, 0xce, 0x0c, 0x47, 0xac, 0x1c, 0x28, 0x46, 0x57, 0x96,
	0x78, 0x2f, 0x2f, 0xef, 0x3d, 0xf7, 0xcc, 0xd1, 0xa1, 0x21, 0xef, 0x5f, 0xd6, 0x83, 0xb0, 0x1f,
	0xf7, 0xd1, 0xb4, 0x7f, 0x59, 0x2b, 0xc4, 0x83, 0x00, 0x47, 0xec, 0x42, 0x2d, 0xdf, 0xeb, 0xf2,
	0x4f, 0xf3, 0x6d, 0x7c, 0x16, 0x74, 0x3d, 0xf6, 0xcd, 0xfe, 0x75, 0x1a, 0x0a, 0x8f, 0x71, 0x7c,
	0xd9, 0x0f, 0x7b, 0xcf, 0x03, 0xdc, 0x42, 0x77, 0x20, 0xd7, 0xc0, 0xb1, 0x5b, 0xb5, 0xd6, 0xad,
	0xcd, 0xc2, 0x36, 0xaa, 0xf3, 0xe4, 0x27, 0x2f, 0xbf, 0xc5, 0xad, 0x98, 0x44, 0x1c, 0x1a, 0x47,
	0x47, 0x50, 0xec, 0xe1, 0x41, 0xb3, 0x1f, 0x36, 0xbb, 0xae, 0xdf, 0x3e, 0xc3, 0xd5, 0x69, 0x7a,
	0xc3, 0x4a, 0xbd, 0xd7, 0xad, 0xf3, 0x7a, 0x27, 0x78, 0x70, 0x44, 0x63, 0x7b, 0xa5, 0x37, 0xaf,
	0x6f, 0xc1, 0x05, 0xf6, 0xbd, 0x16, 0xde, 0xe9, 0xe1, 0x81, 0x53, 0xe8, 0xe1, 0xc1, 0x93, 0x90,
	0x05, 0x11, 0x82, 0x5c, 0xf8, 0x9d, 0xdb, 0xaa, 0xce, 0xac, 0x5b, 0x9b, 0x39, 0x87, 0x7e, 0x46,
	0xf7, 0x01, 0x4e, 0xdd, 0x18, 0x5f, 0xba, 0x83, 0xa6, 0x17, 0x54, 0x73, 0xb4, 0xf4, 0x62, 0x9d,
	0xcd, 0x73, 0xfc, 0x74, 0xb7, 0xdd, 0x0e, 0x71, 0x14, 0x39, 0x73, 0x3c, 0xe7, 0x38, 0x40, 0x8f,
	0xa1, 0x18, 0x9d, 0x36, 0x49, 0x47, 0xbc, 0x9d, 0x1b, 0xeb, 0x33, 0x9b, 0x85, 0xed, 0x1a, 0x69,
	0xe7, 0x39, 0x6e, 0x9d, 0x87, 0x5e, 0x3c, 0x38, 0x0c, 0xfb, 0xe7, 0x81, 0xb9, 0xa9, 0x10, 0x77,
	0x9c, 0x42, 0x74, 0x2a, 0x82, 0x3b, 0xb9, 0x57, 0xbf, 0xd8, 0x96, 0xfd, 0x09, 0x2c, 0xf1, 0x59,
	0x1c, 0xfc, 0xfd, 0x39, 0x8e, 0xe2, 0x46, 0x74, 0x8a, 0xee, 0xc2, 0xcd, 0x90, 0x7d, 0xab, 0x5a,
	0xf4, 0x21, 0x0b, 0x75, 0xff, 0xb2, 0x2e, 0x61, 0xe8, 0x0c, 0xe3, 0xf6, 0x4f, 0x16, 0x14, 0x87,
	0x81, 0xd8, 0x8d, 0xcf, 0xa3, 0xeb, 0x87, 0x97, 0x4f, 0xf2, 0xa3, 0x05, 0x0b, 0x62, 0x94, 0x28,
	0xe8, 0xfb, 0x11, 0x46, 0x07, 0x00, 0x6e, 0xe0, 0x35, 0x23, 0xda, 0x19, 0xed, 0xa8, 0x24, 0x40,
	0xde, 0x0d, 0x3c, 0xd6, 0xf1, 0x5e, 0xf9, 0xcd, 0xeb, 0x5b, 0x4b, 0xbc, 0x78, 0x92, 0xee, 0xcc,
	0xb9, 0xc3, 0x0c, 0x74, 0x17, 0x66, 0x79, 0x0d, 0xd6, 0xe4, 0x92, 0x8c, 0x07, 0xcb, 0xe6, 0x09,
	0xf6, 0x43, 0x40, 0x5a, 0x17, 0x04, 0xd1, 0xfb, 0x90, 0x0f, 0xf9, 0x57, 0x0e, 0xe9, 0xb2, 0x54,
	0x62, 0x98, 0xe9, 0x88, 0x24, 0xfb, 0x0f, 0x0b, 0x56, 0x78, 0xf4, 0x33, 0x7c, 0x86, 0x63, 0xcc,
	0xd7, 0x93, 0x86, 0xcd, 0x7a, 0x5b, 0x56, 0x1e, 0x40, 0xe9, 0x22, 0xec, 0xc8, 0x8c, 0x9a, 0xe6,
	0x2c, 0xec, 0x75, 0xeb, 0x5f, 0x84, 0x9d, 0xd1, 0x3c, 0x9a, 0xbf, 0x90, 0xa2, 0x76, 0x03, 0x56,
	0x4d, 0x9d, 0x92, 0xb1, 0xb7, 0x75, 0x22, 0x55, 0xa5, 0xa9, 0x95, 0xec, 0x84, 0x51, 0x4d, 0x28,
	0x6b, 0x09, 0x93, 0x5d, 0xa6, 0xfd, 0x0c, 0xaa, 0xc6, 0x07, 0x90, 0x86, 0x3f, 0x4c, 0xed, 0x69,
	0xcd, 0xd0, 0x71, 0x6a, 0x5b, 0x25, 0x98, 0x97, 0xd8, 0x10, 0xd9, 0xbf, 0x5b, 0xe2, 0x58, 0x1d,
	0xe2, 0xf8, 0xbf, 0xbb, 0xba, 0x43, 0x41, 0xb2, 0xa4, 0x4d, 0x46, 0x57, 0x6d, 0x6f, 0x65, 0x09,
	0x85, 0x24, 0x35, 0x59, 0xda, 0xdf, 0x96, 0xa0, 0x3d, 0x0d, 0x4f, 0xf8, 0xfc, 0xbd, 0x07, 0xb9,
	0x28, 0xc0, 0x2d, 0x3e, 0x65, 0x4a, 0x8d, 0x68, 0x50, 0x3a, 0xa4, 0x33, 0xff, 0x72, 0x48, 0xd1,
	0x1d, 0xb8, 0x41, 0x3e, 0x45, 0x42, 0x77, 0xd5, 0xcc, 0xc8, 0x61, 0x61, 0xfb, 0x44, 0x70, 0x51,
	0x9a, 0x8a, 0x11, 0x3b, 0xe1, 0xc9, 0x34, 0x45, 0xa8, 0xa2, 0x23, 0x94, 0x22, 0xc9, 0x6f, 0x16,
	0xcc, 0x39, 0xfd, 0xf3, 0x18, 0xd3, 0x5f, 0xa1, 0x03, 0x33, 0x19, 0x10, 0xd9, 0x20, 0xcd, 0x1a,
	0x93, 0x0a, 0x0d, 0x58, 0xf4, 0xbb, 0xcd, 0x0c, 0x25, 0xfd, 0x21, 0xee, 0xf6, 0x33, 0x7e, 0x13,
	0x8a, 0x7e, 0xf7, 0x24, 0x29, 0x67, 0xef, 0xc0, 0x02, 0x7d, 0xba, 0x44, 0x86, 0x0d, 0x9d, 0x0c,
	0x45, 0x32, 0xaa, 0x98, 0x24, 0x21, 0xc1, 0x16, 0x14, 0xd8, 0x55, 0x06, 0xf2, 0x6d, 0x98, 0x0f,
	0xc9, 0x57, 0x79, 0xc0, 0x59, 0xa7, 0x40, 0xaf, 0xf1, 0xa7, 0xbd, 0xb2, 0xa0, 0xc8, 0x1f, 0x37,
	0x61, 0xc6, 0x6c, 0x68, 0x8a, 0xbd, 0x90, 0xf4, 0xac, 0xea, 0xf5, 0x2e, 0x2c, 0x2a, 0x1d, 0x90,
	0x89, 0xef, 0xa5, 0x54, 0x60, 0x49, 0xdc, 0x6e, 0x58, 0xec, 0xd7, 0x80, 0x68, 0x48, 0x15, 0xea,
	0x09, 0x2d, 0xd8, 0x3e, 0x86, 0x72, 0xba, 0x3a, 0xe9, 0x72, 0x4b, 0xdf, 0x4b, 0x45, 0x34, 0x39,
	0x42, 0x5a, 0x5f, 0xc0, 0xb2, 0x12, 0x9e, 0xb0, 0xb0, 0x36, 0xa0, 0x62, 0x28, 0x4f, 0x5a, 0x7d,
	0x90, 0x02, 0x74, 0x35, 0xd5, 0x6b, 0x0a, 0xd6, 0x79, 0x00, 0xb1, 0xb0, 0xc8, 0xfe, 0x92, 0x13,
	0x53, 0xd2, 0xd3, 0x49, 0x21, 0xbc, 0xcf, 0xf7, 0xa7, 0x6a, 0xe0, 0x3d, 0x1d, 0xde, 0x65, 0xd1,
	0xb2, 0x49, 0x01, 0xff, 0xb2, 0x38, 0x91, 0xde, 0x85, 0xfe, 0xdd, 0x56, 0xf4, 0x4f, 0x3b, 0x7f,
	0x4c, 0xfd, 0x36, 0x34, 0xf5, 0x1b, 0x45, 0x78, 0xf4, 0xbe, 0xaa, 0x7d, 0x25, 0x25, 0x4f, 0x28,
	0xdf, 0x21, 0xa7, 0x8a, 0xa6, 0x7b, 0x5b, 0x29, 0xdd, 0x5b, 0x51, 0x51, 0x49, 0x6d, 0xf1, 0x67,
	0xea, 0xbe, 0xa9, 0x08, 0x51, 0xdd, 0xcb, 0xfe, 0x11, 0xcc, 0x10, 0xab, 0x94, 0xf2, 0x3d, 0x83,
	0x45, 0xaf, 0x63, 0x54, 0xbe, 0x0a, 0x29, 0x76, 0xec, 0xc7, 0x38, 0xec, 0xb8, 0x2d, 0x3c, 0x52,
	0xfb, 0x8e, 0xa6, 0x9c, 0xa2, 0xd7, 0x91, 0xd4, 0x0f, 0x3d, 0x85, 0x45, 0x1c, 0x68, 0x25, 0x19,
	0x9c, 0x65, 0x52, 0xf2, 0xa1, 0xdf, 0x0e, 0xfa, 0x9e, 0x1f, 0x67, 0x56, 0xc4, 0x81, 0x54, 0x71,
	0x0f, 0x20, 0xef, 0x75, 0x48, 0x35, 0x1c, 0x30, 0xaf, 0x4d, 0x27, 0x1c, 0xc3, 0x6b, 0x0b, 0xc4,
	0x12, 0x8a, 0x7d, 0x44, 0xac, 0x36, 0xbb, 0xce, 0x56, 0xf9, 0x01, 0x94, 0x7c, 0x76, 0x41, 0xd5,
	0xd8, 0x22, 0xbf, 0xca, 0xf9, 0xcd, 0x9c, 0x31, 0x7f, 0xf0, 0xf5, 0x38, 0x63, 0xa9, 0x4b, 0xd5,
	0x19, 0x2b, 0x5d, 0x64, 0x3a, 0x63, 0x25, 0x53, 0x22, 0xd4, 0x37, 0xc4, 0xb3, 0xd0, 0xe0, 0x55,
	0x8c, 0xf1, 0x15, 0x88, 0xc5, 0x0c, 0x6d, 0xfa, 0x09, 0x59, 0x86, 0x36, 0x9d, 0xad, 0x19, 0x5a,
	0x25, 0xe1, 0x5d, 0x18, 0x5a, 0xc3, 0x03, 0x32, 0x0d, 0xad, 0x21, 0x5f, 0x37, 0xb4, 0x62, 0x89,
	0x91, 0xfd, 0x42, 0x50, 0x77, 0x6c, 0x3f, 0x7b, 0x15, 0xc4, 0x0f, 0xc5, 0x4e, 0xc7, 0xf3, 0xa1,
	0x5a, 0xaa, 0xee, 0x43, 0x93, 0xf0, 0x75, 0xf8, 0xd0, 0xe4, 0xa4, 0x66, 0xfa, 0x50, 0xc3, 0x91,
	0x18, 0xe1, 0x43, 0x13, 0xdc, 0x15, 0x1f, 0xaa, 0x4f, 0x95, 0xe9, 0x43, 0xf5, 0xe4, 0x64, 0xb7,
	0xdb, 0x7f, 0xce, 0xc2, 0x4d, 0x6e, 0x54, 0xd1, 0xa7, 0xe2, 0xed, 0x7d, 0x3f, 0xc4, 0x6e, 0x8c,
	0x51, 0x59, 0x79, 0x2d, 0x1d, 0x2e, 0xa2, 0x56, 0x31, 0xbc, 0xad, 0x36, 0xa2, 0x53, 0x7b, 0x4a,
	0xaa, 0xf0, 0x79, 0xd0, 0x7e, 0xab, 0x0a, 0x8f, 0x44, 0x05, 0x46, 0x47, 0xf4, 0xbf, 0x51, 0x2f,
	0x89, 0xa4, 0xce, 0xff, 0x47, 0xbe, 0x8f, 0xb1, 0x6a, 0xfb, 0x00, 0x89, 0x0b, 0x47, 0x55, 0xe3,
	0x7b, 0x0b, 0xa9, 0xb3, 0x66, 0xf6, 0xeb, 0xd2, 0x50, 0x14, 0x42, 0x15, 0x16, 0x4d, 0xbc, 0x6b,
	0x15, 0x83, 0x54, 0xe9, 0x15, 0x54, 0x58, 0xc6, 0xaf, 0xf0, 0x48, 0x54, 0x50, 0x61, 0x31, 0x0a,
	0xd3, 0x10, 0x16, 0xb3, 0x0a, 0x0c, 0x61, 0x19, 0x92, 0x02, 0x55, 0x8d, 0xc7, 0x48, 0x82, 0xc5,
	0xc0, 0x35, 0x7b, 0x0a, 0xed, 0x70, 0x83, 0xcf, 0x41, 0x59, 0x96, 0x4c, 0xb1, 0x28, 0xb0, 0x92,
	0x72, 0xca, 0xea, 0xbd, 0x1c, 0x8e, 0x2b, 0xdd, 0x7b, 0xc0, 0xef, 0xe5, 0x40, 0xac, 0x99, 0x7d,
	0x2e, 0xa9, 0x50, 0x1b, 0x61, 0x2b, 0x59, 0x9d, 0x8f, 0x21, 0x3f, 0x74, 0x2a, 0xa8, 0x62, 0x70,
	0x73, 0xa4, 0xc2, 0xaa, 0xc9, 0xcf, 0xd0, 0xdb, 0xf7, 0xe0, 0xab, 0x7c, 0xd7, 0x3d, 0xa3, 0xff,
	0x54, 0x7c, 0x39, 0x4b, 0xff, 0x3c, 0xf8, 0x27, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xd9, 0x44, 0x77,
	0x90, 0x14, 0x00, 0x00,
}
