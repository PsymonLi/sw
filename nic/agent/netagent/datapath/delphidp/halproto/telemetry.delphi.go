// Code generated by protoc-gen-go. DO NOT EDIT.
// source: telemetry.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ExportFormat is a enumeration of export formats supported
type ExportFormat int32

const (
	ExportFormat_IPFIX     ExportFormat = 0
	ExportFormat_NETFLOWV9 ExportFormat = 1
)

var ExportFormat_name = map[int32]string{
	0: "IPFIX",
	1: "NETFLOWV9",
}
var ExportFormat_value = map[string]int32{
	"IPFIX":     0,
	"NETFLOWV9": 1,
}

func (x ExportFormat) String() string {
	return proto.EnumName(ExportFormat_name, int32(x))
}
func (ExportFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptor26, []int{0} }

// RuleAction is an enumeration of support telemetry actions
type RuleAction int32

const (
	RuleAction_COLLECT_FLOW_STATS RuleAction = 0
	RuleAction_MIRROR             RuleAction = 1
	RuleAction_MIRROR_TO_CPU      RuleAction = 2
)

var RuleAction_name = map[int32]string{
	0: "COLLECT_FLOW_STATS",
	1: "MIRROR",
	2: "MIRROR_TO_CPU",
}
var RuleAction_value = map[string]int32{
	"COLLECT_FLOW_STATS": 0,
	"MIRROR":             1,
	"MIRROR_TO_CPU":      2,
}

func (x RuleAction) String() string {
	return proto.EnumName(RuleAction_name, int32(x))
}
func (RuleAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor26, []int{1} }

// AggregationScheme is an enumeration of aggregation schemes supported
type AggregationScheme int32

const (
	AggregationScheme_NONE             AggregationScheme = 0
	AggregationScheme_IPSOURCE         AggregationScheme = 1
	AggregationScheme_IPDESTINATION    AggregationScheme = 2
	AggregationScheme_IPPAIR           AggregationScheme = 3
	AggregationScheme_SOURCE_PORT      AggregationScheme = 4
	AggregationScheme_DESTINATION_PORT AggregationScheme = 5
	AggregationScheme_SERVICE          AggregationScheme = 6
	AggregationScheme_IPPAIR_SERVICE   AggregationScheme = 7
	AggregationScheme_SOURCE_SEC_GROUP AggregationScheme = 8
	AggregationScheme_DEST_SEC_GROUP   AggregationScheme = 9
	AggregationScheme_SEC_GROUP_PAIR   AggregationScheme = 10
)

var AggregationScheme_name = map[int32]string{
	0:  "NONE",
	1:  "IPSOURCE",
	2:  "IPDESTINATION",
	3:  "IPPAIR",
	4:  "SOURCE_PORT",
	5:  "DESTINATION_PORT",
	6:  "SERVICE",
	7:  "IPPAIR_SERVICE",
	8:  "SOURCE_SEC_GROUP",
	9:  "DEST_SEC_GROUP",
	10: "SEC_GROUP_PAIR",
}
var AggregationScheme_value = map[string]int32{
	"NONE":             0,
	"IPSOURCE":         1,
	"IPDESTINATION":    2,
	"IPPAIR":           3,
	"SOURCE_PORT":      4,
	"DESTINATION_PORT": 5,
	"SERVICE":          6,
	"IPPAIR_SERVICE":   7,
	"SOURCE_SEC_GROUP": 8,
	"DEST_SEC_GROUP":   9,
	"SEC_GROUP_PAIR":   10,
}

func (x AggregationScheme) String() string {
	return proto.EnumName(AggregationScheme_name, int32(x))
}
func (AggregationScheme) EnumDescriptor() ([]byte, []int) { return fileDescriptor26, []int{2} }

// CollectorSpec is the configuration specification for a telemetry collector
type CollectorSpec struct {
	KeyOrHandle    *CollectorKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	VrfKeyHandle   *VrfKeyHandle       `protobuf:"bytes,2,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
	Encap          *EncapInfo          `protobuf:"bytes,3,opt,name=encap" json:"encap,omitempty"`
	L2SegKeyHandle *L2SegmentKeyHandle `protobuf:"bytes,4,opt,name=l2seg_key_handle,json=l2segKeyHandle" json:"l2seg_key_handle,omitempty"`
	DestIp         *IPAddress          `protobuf:"bytes,5,opt,name=dest_ip,json=destIp" json:"dest_ip,omitempty"`
	SrcIp          *IPAddress          `protobuf:"bytes,6,opt,name=src_ip,json=srcIp" json:"src_ip,omitempty"`
	Protocol       IPProtocol          `protobuf:"varint,7,opt,name=protocol,enum=types.IPProtocol" json:"protocol,omitempty"`
	DestPort       uint32              `protobuf:"varint,8,opt,name=dest_port,json=destPort" json:"dest_port,omitempty"`
	Format         ExportFormat        `protobuf:"varint,9,opt,name=format,enum=telemetry.ExportFormat" json:"format,omitempty"`
	TemplateId     uint32              `protobuf:"varint,10,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	ExportInterval uint32              `protobuf:"varint,11,opt,name=export_interval,json=exportInterval" json:"export_interval,omitempty"`
}

func (m *CollectorSpec) Reset()                    { *m = CollectorSpec{} }
func (m *CollectorSpec) String() string            { return proto.CompactTextString(m) }
func (*CollectorSpec) ProtoMessage()               {}
func (*CollectorSpec) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{0} }

func (m *CollectorSpec) GetKeyOrHandle() *CollectorKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *CollectorSpec) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

func (m *CollectorSpec) GetEncap() *EncapInfo {
	if m != nil {
		return m.Encap
	}
	return nil
}

func (m *CollectorSpec) GetL2SegKeyHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.L2SegKeyHandle
	}
	return nil
}

func (m *CollectorSpec) GetDestIp() *IPAddress {
	if m != nil {
		return m.DestIp
	}
	return nil
}

func (m *CollectorSpec) GetSrcIp() *IPAddress {
	if m != nil {
		return m.SrcIp
	}
	return nil
}

func (m *CollectorSpec) GetProtocol() IPProtocol {
	if m != nil {
		return m.Protocol
	}
	return IPProtocol_IPPROTO_NONE
}

func (m *CollectorSpec) GetDestPort() uint32 {
	if m != nil {
		return m.DestPort
	}
	return 0
}

func (m *CollectorSpec) GetFormat() ExportFormat {
	if m != nil {
		return m.Format
	}
	return ExportFormat_IPFIX
}

func (m *CollectorSpec) GetTemplateId() uint32 {
	if m != nil {
		return m.TemplateId
	}
	return 0
}

func (m *CollectorSpec) GetExportInterval() uint32 {
	if m != nil {
		return m.ExportInterval
	}
	return 0
}

// CollectorSpec is the operational status of the collector
type CollectorStatus struct {
	Handle uint64 `protobuf:"fixed64,1,opt,name=handle" json:"handle,omitempty"`
}

func (m *CollectorStatus) Reset()                    { *m = CollectorStatus{} }
func (m *CollectorStatus) String() string            { return proto.CompactTextString(m) }
func (*CollectorStatus) ProtoMessage()               {}
func (*CollectorStatus) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{1} }

func (m *CollectorStatus) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// Collector is a container that holds both the configuration and the operational
//  state of the collector
type CollectorResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *CollectorStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *CollectorResponse) Reset()                    { *m = CollectorResponse{} }
func (m *CollectorResponse) String() string            { return proto.CompactTextString(m) }
func (*CollectorResponse) ProtoMessage()               {}
func (*CollectorResponse) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{2} }

func (m *CollectorResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CollectorResponse) GetStatus() *CollectorStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// CollectorConfigsMsg is used in requests and is a batchable request message
type CollectorRequestMsg struct {
	Request []*CollectorSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CollectorRequestMsg) Reset()                    { *m = CollectorRequestMsg{} }
func (m *CollectorRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CollectorRequestMsg) ProtoMessage()               {}
func (*CollectorRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{3} }

func (m *CollectorRequestMsg) GetRequest() []*CollectorSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// CollectorConfigsMsg message is used as response for API requests.
type CollectorResponseMsg struct {
	Response []*CollectorResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CollectorResponseMsg) Reset()                    { *m = CollectorResponseMsg{} }
func (m *CollectorResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CollectorResponseMsg) ProtoMessage()               {}
func (*CollectorResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{4} }

func (m *CollectorResponseMsg) GetResponse() []*CollectorResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// CollectorDeleteRequest is used to delete a collector
type CollectorDeleteRequest struct {
	KeyOrHandle *CollectorKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *CollectorDeleteRequest) Reset()                    { *m = CollectorDeleteRequest{} }
func (m *CollectorDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*CollectorDeleteRequest) ProtoMessage()               {}
func (*CollectorDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{5} }

func (m *CollectorDeleteRequest) GetKeyOrHandle() *CollectorKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// CollectorDeleteResponse is response to CollectorDeleteRequest
type CollectorDeleteResponse struct {
	ApiStatus   ApiStatus           `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	KeyOrHandle *CollectorKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *CollectorDeleteResponse) Reset()                    { *m = CollectorDeleteResponse{} }
func (m *CollectorDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*CollectorDeleteResponse) ProtoMessage()               {}
func (*CollectorDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{6} }

func (m *CollectorDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CollectorDeleteResponse) GetKeyOrHandle() *CollectorKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// CollectorDeleteRequestMsg is used to delete a batch of collectors
type CollectorDeleteRequestMsg struct {
	Request []*CollectorDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CollectorDeleteRequestMsg) Reset()                    { *m = CollectorDeleteRequestMsg{} }
func (m *CollectorDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CollectorDeleteRequestMsg) ProtoMessage()               {}
func (*CollectorDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{7} }

func (m *CollectorDeleteRequestMsg) GetRequest() []*CollectorDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// CollectorDeleteResponseMsg is batched response to CollectorDeleteRequestMsg
type CollectorDeleteResponseMsg struct {
	Response []*CollectorDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CollectorDeleteResponseMsg) Reset()                    { *m = CollectorDeleteResponseMsg{} }
func (m *CollectorDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CollectorDeleteResponseMsg) ProtoMessage()               {}
func (*CollectorDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{8} }

func (m *CollectorDeleteResponseMsg) GetResponse() []*CollectorDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// CollectorGetRequest is used to get information about a collector
type CollectorGetRequest struct {
	KeyOrHandle *CollectorKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *CollectorGetRequest) Reset()                    { *m = CollectorGetRequest{} }
func (m *CollectorGetRequest) String() string            { return proto.CompactTextString(m) }
func (*CollectorGetRequest) ProtoMessage()               {}
func (*CollectorGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{9} }

func (m *CollectorGetRequest) GetKeyOrHandle() *CollectorKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// CollectorGetRequestMsg is batched GET requests for collectors
type CollectorGetRequestMsg struct {
	Request []*CollectorGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CollectorGetRequestMsg) Reset()                    { *m = CollectorGetRequestMsg{} }
func (m *CollectorGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CollectorGetRequestMsg) ProtoMessage()               {}
func (*CollectorGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{10} }

func (m *CollectorGetRequestMsg) GetRequest() []*CollectorGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CollectorStats struct {
}

func (m *CollectorStats) Reset()                    { *m = CollectorStats{} }
func (m *CollectorStats) String() string            { return proto.CompactTextString(m) }
func (*CollectorStats) ProtoMessage()               {}
func (*CollectorStats) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{11} }

type CollectorGetResponse struct {
	ApiStatus ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *CollectorSpec  `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Stats     *CollectorStats `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
}

func (m *CollectorGetResponse) Reset()                    { *m = CollectorGetResponse{} }
func (m *CollectorGetResponse) String() string            { return proto.CompactTextString(m) }
func (*CollectorGetResponse) ProtoMessage()               {}
func (*CollectorGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{12} }

func (m *CollectorGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CollectorGetResponse) GetSpec() *CollectorSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CollectorGetResponse) GetStats() *CollectorStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// CollectorGetResponseMsg is batched response to CollectorGetRequestMsg
type CollectorGetResponseMsg struct {
	Response []*CollectorGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CollectorGetResponseMsg) Reset()                    { *m = CollectorGetResponseMsg{} }
func (m *CollectorGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CollectorGetResponseMsg) ProtoMessage()               {}
func (*CollectorGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{13} }

func (m *CollectorGetResponseMsg) GetResponse() []*CollectorGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// MonitorAction defines the action for a flow monitor rule
type MonitorAction struct {
	Action      []RuleAction              `protobuf:"varint,1,rep,packed,name=action,enum=telemetry.RuleAction" json:"action,omitempty"`
	AggScheme   []AggregationScheme       `protobuf:"varint,2,rep,packed,name=agg_scheme,json=aggScheme,enum=telemetry.AggregationScheme" json:"agg_scheme,omitempty"`
	MsKeyHandle []*MirrorSessionKeyHandle `protobuf:"bytes,3,rep,name=ms_key_handle,json=msKeyHandle" json:"ms_key_handle,omitempty"`
}

func (m *MonitorAction) Reset()                    { *m = MonitorAction{} }
func (m *MonitorAction) String() string            { return proto.CompactTextString(m) }
func (*MonitorAction) ProtoMessage()               {}
func (*MonitorAction) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{14} }

func (m *MonitorAction) GetAction() []RuleAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *MonitorAction) GetAggScheme() []AggregationScheme {
	if m != nil {
		return m.AggScheme
	}
	return nil
}

func (m *MonitorAction) GetMsKeyHandle() []*MirrorSessionKeyHandle {
	if m != nil {
		return m.MsKeyHandle
	}
	return nil
}

// FlowMonitorRuleSpec flow monitor rule specification
type FlowMonitorRuleSpec struct {
	KeyOrHandle        *FlowMonitorRuleKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	CollectorKeyHandle []*CollectorKeyHandle     `protobuf:"bytes,2,rep,name=collector_key_handle,json=collectorKeyHandle" json:"collector_key_handle,omitempty"`
	VrfKeyHandle       *VrfKeyHandle             `protobuf:"bytes,3,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
	Match              *RuleMatch                `protobuf:"bytes,4,opt,name=match" json:"match,omitempty"`
	Action             *MonitorAction            `protobuf:"bytes,5,opt,name=action" json:"action,omitempty"`
}

func (m *FlowMonitorRuleSpec) Reset()                    { *m = FlowMonitorRuleSpec{} }
func (m *FlowMonitorRuleSpec) String() string            { return proto.CompactTextString(m) }
func (*FlowMonitorRuleSpec) ProtoMessage()               {}
func (*FlowMonitorRuleSpec) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{15} }

func (m *FlowMonitorRuleSpec) GetKeyOrHandle() *FlowMonitorRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *FlowMonitorRuleSpec) GetCollectorKeyHandle() []*CollectorKeyHandle {
	if m != nil {
		return m.CollectorKeyHandle
	}
	return nil
}

func (m *FlowMonitorRuleSpec) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

func (m *FlowMonitorRuleSpec) GetMatch() *RuleMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *FlowMonitorRuleSpec) GetAction() *MonitorAction {
	if m != nil {
		return m.Action
	}
	return nil
}

// FlowMonitorRuleStatus is the operational status of the rule
type FlowMonitorRuleStatus struct {
	Handle      uint64 `protobuf:"fixed64,1,opt,name=handle" json:"handle,omitempty"`
	ActiveFlows uint32 `protobuf:"varint,2,opt,name=active_flows,json=activeFlows" json:"active_flows,omitempty"`
}

func (m *FlowMonitorRuleStatus) Reset()                    { *m = FlowMonitorRuleStatus{} }
func (m *FlowMonitorRuleStatus) String() string            { return proto.CompactTextString(m) }
func (*FlowMonitorRuleStatus) ProtoMessage()               {}
func (*FlowMonitorRuleStatus) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{16} }

func (m *FlowMonitorRuleStatus) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func (m *FlowMonitorRuleStatus) GetActiveFlows() uint32 {
	if m != nil {
		return m.ActiveFlows
	}
	return 0
}

// FlowMonitorRule is a container that holds both the configuration and the operational
// state of the flowmonitor
type FlowMonitorRuleResponse struct {
	ApiStatus ApiStatus              `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *FlowMonitorRuleStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *FlowMonitorRuleResponse) Reset()                    { *m = FlowMonitorRuleResponse{} }
func (m *FlowMonitorRuleResponse) String() string            { return proto.CompactTextString(m) }
func (*FlowMonitorRuleResponse) ProtoMessage()               {}
func (*FlowMonitorRuleResponse) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{17} }

func (m *FlowMonitorRuleResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *FlowMonitorRuleResponse) GetStatus() *FlowMonitorRuleStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// FlowMonitorRuleConfigsMsg is used in requests and is a batchable request message
type FlowMonitorRuleRequestMsg struct {
	Request []*FlowMonitorRuleSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *FlowMonitorRuleRequestMsg) Reset()                    { *m = FlowMonitorRuleRequestMsg{} }
func (m *FlowMonitorRuleRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*FlowMonitorRuleRequestMsg) ProtoMessage()               {}
func (*FlowMonitorRuleRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{18} }

func (m *FlowMonitorRuleRequestMsg) GetRequest() []*FlowMonitorRuleSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// FlowMonitorRuleConfigsMsg message is used as response for API requests.
type FlowMonitorRuleResponseMsg struct {
	Response []*FlowMonitorRuleResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *FlowMonitorRuleResponseMsg) Reset()                    { *m = FlowMonitorRuleResponseMsg{} }
func (m *FlowMonitorRuleResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*FlowMonitorRuleResponseMsg) ProtoMessage()               {}
func (*FlowMonitorRuleResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{19} }

func (m *FlowMonitorRuleResponseMsg) GetResponse() []*FlowMonitorRuleResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// FlowMonitorRuleDeleteRequest is used to delete a flowmonitor
type FlowMonitorRuleDeleteRequest struct {
	KeyOrHandle  *FlowMonitorRuleKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	VrfKeyHandle *VrfKeyHandle             `protobuf:"bytes,2,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
}

func (m *FlowMonitorRuleDeleteRequest) Reset()                    { *m = FlowMonitorRuleDeleteRequest{} }
func (m *FlowMonitorRuleDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*FlowMonitorRuleDeleteRequest) ProtoMessage()               {}
func (*FlowMonitorRuleDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{20} }

func (m *FlowMonitorRuleDeleteRequest) GetKeyOrHandle() *FlowMonitorRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *FlowMonitorRuleDeleteRequest) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

// FlowMonitorRuleDeleteResponse is response to FlowMonitorRuleDeleteRequest
type FlowMonitorRuleDeleteResponse struct {
	ApiStatus   ApiStatus                 `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	KeyOrHandle *FlowMonitorRuleKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *FlowMonitorRuleDeleteResponse) Reset()                    { *m = FlowMonitorRuleDeleteResponse{} }
func (m *FlowMonitorRuleDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*FlowMonitorRuleDeleteResponse) ProtoMessage()               {}
func (*FlowMonitorRuleDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{21} }

func (m *FlowMonitorRuleDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *FlowMonitorRuleDeleteResponse) GetKeyOrHandle() *FlowMonitorRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// FlowMonitorRuleDeleteRequestMsg is used to delete a batch of flowmonitors
type FlowMonitorRuleDeleteRequestMsg struct {
	Request []*FlowMonitorRuleDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *FlowMonitorRuleDeleteRequestMsg) Reset()         { *m = FlowMonitorRuleDeleteRequestMsg{} }
func (m *FlowMonitorRuleDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*FlowMonitorRuleDeleteRequestMsg) ProtoMessage()    {}
func (*FlowMonitorRuleDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor26, []int{22}
}

func (m *FlowMonitorRuleDeleteRequestMsg) GetRequest() []*FlowMonitorRuleDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// FlowMonitorRuleDeleteResponseMsg is batched response to FlowMonitorRuleDeleteRequestMsg
type FlowMonitorRuleDeleteResponseMsg struct {
	Response []*FlowMonitorRuleDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *FlowMonitorRuleDeleteResponseMsg) Reset()         { *m = FlowMonitorRuleDeleteResponseMsg{} }
func (m *FlowMonitorRuleDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*FlowMonitorRuleDeleteResponseMsg) ProtoMessage()    {}
func (*FlowMonitorRuleDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor26, []int{23}
}

func (m *FlowMonitorRuleDeleteResponseMsg) GetResponse() []*FlowMonitorRuleDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// FlowMonitorRuleGetRequest is used to get information about a flowmonitor
type FlowMonitorRuleGetRequest struct {
	KeyOrHandle *FlowMonitorRuleKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *FlowMonitorRuleGetRequest) Reset()                    { *m = FlowMonitorRuleGetRequest{} }
func (m *FlowMonitorRuleGetRequest) String() string            { return proto.CompactTextString(m) }
func (*FlowMonitorRuleGetRequest) ProtoMessage()               {}
func (*FlowMonitorRuleGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{24} }

func (m *FlowMonitorRuleGetRequest) GetKeyOrHandle() *FlowMonitorRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// FlowMonitorRuleGetRequestMsg is batched GET requests for flowmonitors
type FlowMonitorRuleGetRequestMsg struct {
	Request []*FlowMonitorRuleGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *FlowMonitorRuleGetRequestMsg) Reset()                    { *m = FlowMonitorRuleGetRequestMsg{} }
func (m *FlowMonitorRuleGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*FlowMonitorRuleGetRequestMsg) ProtoMessage()               {}
func (*FlowMonitorRuleGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{25} }

func (m *FlowMonitorRuleGetRequestMsg) GetRequest() []*FlowMonitorRuleGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type FlowMonitorRuleStats struct {
}

func (m *FlowMonitorRuleStats) Reset()                    { *m = FlowMonitorRuleStats{} }
func (m *FlowMonitorRuleStats) String() string            { return proto.CompactTextString(m) }
func (*FlowMonitorRuleStats) ProtoMessage()               {}
func (*FlowMonitorRuleStats) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{26} }

type FlowMonitorRuleGetResponse struct {
	ApiStatus ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *FlowMonitorRuleSpec  `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Stats     *FlowMonitorRuleStats `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
}

func (m *FlowMonitorRuleGetResponse) Reset()                    { *m = FlowMonitorRuleGetResponse{} }
func (m *FlowMonitorRuleGetResponse) String() string            { return proto.CompactTextString(m) }
func (*FlowMonitorRuleGetResponse) ProtoMessage()               {}
func (*FlowMonitorRuleGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{27} }

func (m *FlowMonitorRuleGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *FlowMonitorRuleGetResponse) GetSpec() *FlowMonitorRuleSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *FlowMonitorRuleGetResponse) GetStats() *FlowMonitorRuleStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// FlowMonitorGetResponseMsg is batched response to FlowMonitorGetRequestMsg
type FlowMonitorRuleGetResponseMsg struct {
	Response []*FlowMonitorRuleGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *FlowMonitorRuleGetResponseMsg) Reset()                    { *m = FlowMonitorRuleGetResponseMsg{} }
func (m *FlowMonitorRuleGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*FlowMonitorRuleGetResponseMsg) ProtoMessage()               {}
func (*FlowMonitorRuleGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{28} }

func (m *FlowMonitorRuleGetResponseMsg) GetResponse() []*FlowMonitorRuleGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Drop Monitor Rule specification
type DropMonitorRuleSpec struct {
	KeyOrHandle *DropMonitorRuleKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	MsKeyHandle []*MirrorSessionKeyHandle `protobuf:"bytes,2,rep,name=ms_key_handle,json=msKeyHandle" json:"ms_key_handle,omitempty"`
	Reasons     *DropReasons              `protobuf:"bytes,3,opt,name=reasons" json:"reasons,omitempty"`
}

func (m *DropMonitorRuleSpec) Reset()                    { *m = DropMonitorRuleSpec{} }
func (m *DropMonitorRuleSpec) String() string            { return proto.CompactTextString(m) }
func (*DropMonitorRuleSpec) ProtoMessage()               {}
func (*DropMonitorRuleSpec) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{29} }

func (m *DropMonitorRuleSpec) GetKeyOrHandle() *DropMonitorRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *DropMonitorRuleSpec) GetMsKeyHandle() []*MirrorSessionKeyHandle {
	if m != nil {
		return m.MsKeyHandle
	}
	return nil
}

func (m *DropMonitorRuleSpec) GetReasons() *DropReasons {
	if m != nil {
		return m.Reasons
	}
	return nil
}

// DropMonitorRuleStatus is the operational status of the rule
type DropMonitorRuleStatus struct {
	Handle      uint64 `protobuf:"fixed64,1,opt,name=handle" json:"handle,omitempty"`
	ActiveFlows uint32 `protobuf:"varint,3,opt,name=active_flows,json=activeFlows" json:"active_flows,omitempty"`
}

func (m *DropMonitorRuleStatus) Reset()                    { *m = DropMonitorRuleStatus{} }
func (m *DropMonitorRuleStatus) String() string            { return proto.CompactTextString(m) }
func (*DropMonitorRuleStatus) ProtoMessage()               {}
func (*DropMonitorRuleStatus) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{30} }

func (m *DropMonitorRuleStatus) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func (m *DropMonitorRuleStatus) GetActiveFlows() uint32 {
	if m != nil {
		return m.ActiveFlows
	}
	return 0
}

// DropMonitorRule is a container that holds both the configuration and the operational
// state of the dropmonitor
type DropMonitorRuleResponse struct {
	ApiStatus ApiStatus              `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *DropMonitorRuleStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *DropMonitorRuleResponse) Reset()                    { *m = DropMonitorRuleResponse{} }
func (m *DropMonitorRuleResponse) String() string            { return proto.CompactTextString(m) }
func (*DropMonitorRuleResponse) ProtoMessage()               {}
func (*DropMonitorRuleResponse) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{31} }

func (m *DropMonitorRuleResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *DropMonitorRuleResponse) GetStatus() *DropMonitorRuleStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// DropMonitorRuleConfigsMsg is used in requests and is a batchable request message
type DropMonitorRuleRequestMsg struct {
	Request []*DropMonitorRuleSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *DropMonitorRuleRequestMsg) Reset()                    { *m = DropMonitorRuleRequestMsg{} }
func (m *DropMonitorRuleRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*DropMonitorRuleRequestMsg) ProtoMessage()               {}
func (*DropMonitorRuleRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{32} }

func (m *DropMonitorRuleRequestMsg) GetRequest() []*DropMonitorRuleSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// DropMonitorRuleConfigsMsg message is used as response for API requests.
type DropMonitorRuleResponseMsg struct {
	Response []*DropMonitorRuleResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *DropMonitorRuleResponseMsg) Reset()                    { *m = DropMonitorRuleResponseMsg{} }
func (m *DropMonitorRuleResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*DropMonitorRuleResponseMsg) ProtoMessage()               {}
func (*DropMonitorRuleResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{33} }

func (m *DropMonitorRuleResponseMsg) GetResponse() []*DropMonitorRuleResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// DropMonitorRuleDeleteRequest is used to delete a dropmonitor
type DropMonitorRuleDeleteRequest struct {
	KeyOrHandle *DropMonitorRuleKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *DropMonitorRuleDeleteRequest) Reset()                    { *m = DropMonitorRuleDeleteRequest{} }
func (m *DropMonitorRuleDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DropMonitorRuleDeleteRequest) ProtoMessage()               {}
func (*DropMonitorRuleDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{34} }

func (m *DropMonitorRuleDeleteRequest) GetKeyOrHandle() *DropMonitorRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// DropMonitorRuleDeleteResponse is response to DropMonitorRuleDeleteRequest
type DropMonitorRuleDeleteResponse struct {
	ApiStatus   ApiStatus                 `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	KeyOrHandle *DropMonitorRuleKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *DropMonitorRuleDeleteResponse) Reset()                    { *m = DropMonitorRuleDeleteResponse{} }
func (m *DropMonitorRuleDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DropMonitorRuleDeleteResponse) ProtoMessage()               {}
func (*DropMonitorRuleDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{35} }

func (m *DropMonitorRuleDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *DropMonitorRuleDeleteResponse) GetKeyOrHandle() *DropMonitorRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// DropMonitorRuleDeleteRequestMsg is used to delete a batch of dropmonitors
type DropMonitorRuleDeleteRequestMsg struct {
	Request []*DropMonitorRuleDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *DropMonitorRuleDeleteRequestMsg) Reset()         { *m = DropMonitorRuleDeleteRequestMsg{} }
func (m *DropMonitorRuleDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*DropMonitorRuleDeleteRequestMsg) ProtoMessage()    {}
func (*DropMonitorRuleDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor26, []int{36}
}

func (m *DropMonitorRuleDeleteRequestMsg) GetRequest() []*DropMonitorRuleDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// DropMonitorRuleDeleteResponseMsg is batched response to DropMonitorRuleDeleteRequestMsg
type DropMonitorRuleDeleteResponseMsg struct {
	Response []*DropMonitorRuleDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *DropMonitorRuleDeleteResponseMsg) Reset()         { *m = DropMonitorRuleDeleteResponseMsg{} }
func (m *DropMonitorRuleDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*DropMonitorRuleDeleteResponseMsg) ProtoMessage()    {}
func (*DropMonitorRuleDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor26, []int{37}
}

func (m *DropMonitorRuleDeleteResponseMsg) GetResponse() []*DropMonitorRuleDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// DropMonitorRuleGetRequest is used to get information about a dropmonitor
type DropMonitorRuleGetRequest struct {
	KeyOrHandle *DropMonitorRuleKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *DropMonitorRuleGetRequest) Reset()                    { *m = DropMonitorRuleGetRequest{} }
func (m *DropMonitorRuleGetRequest) String() string            { return proto.CompactTextString(m) }
func (*DropMonitorRuleGetRequest) ProtoMessage()               {}
func (*DropMonitorRuleGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{38} }

func (m *DropMonitorRuleGetRequest) GetKeyOrHandle() *DropMonitorRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// DropMonitorRuleGetRequestMsg is batched GET requests for dropmonitors
type DropMonitorRuleGetRequestMsg struct {
	Request []*DropMonitorRuleGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *DropMonitorRuleGetRequestMsg) Reset()                    { *m = DropMonitorRuleGetRequestMsg{} }
func (m *DropMonitorRuleGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*DropMonitorRuleGetRequestMsg) ProtoMessage()               {}
func (*DropMonitorRuleGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{39} }

func (m *DropMonitorRuleGetRequestMsg) GetRequest() []*DropMonitorRuleGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type DropMonitorRuleStats struct {
}

func (m *DropMonitorRuleStats) Reset()                    { *m = DropMonitorRuleStats{} }
func (m *DropMonitorRuleStats) String() string            { return proto.CompactTextString(m) }
func (*DropMonitorRuleStats) ProtoMessage()               {}
func (*DropMonitorRuleStats) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{40} }

type DropMonitorRuleGetResponse struct {
	ApiStatus ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *DropMonitorRuleSpec  `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Stats     *DropMonitorRuleStats `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
}

func (m *DropMonitorRuleGetResponse) Reset()                    { *m = DropMonitorRuleGetResponse{} }
func (m *DropMonitorRuleGetResponse) String() string            { return proto.CompactTextString(m) }
func (*DropMonitorRuleGetResponse) ProtoMessage()               {}
func (*DropMonitorRuleGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{41} }

func (m *DropMonitorRuleGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *DropMonitorRuleGetResponse) GetSpec() *DropMonitorRuleSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *DropMonitorRuleGetResponse) GetStats() *DropMonitorRuleStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// DropMonitorRuleGetResponseMsg is batched response to DropMonitorRuleGetRequestMsg
type DropMonitorRuleGetResponseMsg struct {
	Response []*DropMonitorRuleGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *DropMonitorRuleGetResponseMsg) Reset()                    { *m = DropMonitorRuleGetResponseMsg{} }
func (m *DropMonitorRuleGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*DropMonitorRuleGetResponseMsg) ProtoMessage()               {}
func (*DropMonitorRuleGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{42} }

func (m *DropMonitorRuleGetResponseMsg) GetResponse() []*DropMonitorRuleGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RspanSpec is the configuration specification for RSPAN.
type RSpanSpec struct {
	Intf       *InterfaceKeyHandle `protobuf:"bytes,1,opt,name=intf" json:"intf,omitempty"`
	RspanEncap *EncapInfo          `protobuf:"bytes,2,opt,name=rspan_encap,json=rspanEncap" json:"rspan_encap,omitempty"`
}

func (m *RSpanSpec) Reset()                    { *m = RSpanSpec{} }
func (m *RSpanSpec) String() string            { return proto.CompactTextString(m) }
func (*RSpanSpec) ProtoMessage()               {}
func (*RSpanSpec) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{43} }

func (m *RSpanSpec) GetIntf() *InterfaceKeyHandle {
	if m != nil {
		return m.Intf
	}
	return nil
}

func (m *RSpanSpec) GetRspanEncap() *EncapInfo {
	if m != nil {
		return m.RspanEncap
	}
	return nil
}

// ERSpanSpec is the configuration specification for ERSPAN
type ERSpanSpec struct {
	DestIp *IPAddress `protobuf:"bytes,1,opt,name=dest_ip,json=destIp" json:"dest_ip,omitempty"`
	SrcIp  *IPAddress `protobuf:"bytes,2,opt,name=src_ip,json=srcIp" json:"src_ip,omitempty"`
	Dscp   string     `protobuf:"bytes,3,opt,name=dscp" json:"dscp,omitempty"`
	SpanId uint32     `protobuf:"varint,4,opt,name=span_id,json=spanId" json:"span_id,omitempty"`
}

func (m *ERSpanSpec) Reset()                    { *m = ERSpanSpec{} }
func (m *ERSpanSpec) String() string            { return proto.CompactTextString(m) }
func (*ERSpanSpec) ProtoMessage()               {}
func (*ERSpanSpec) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{44} }

func (m *ERSpanSpec) GetDestIp() *IPAddress {
	if m != nil {
		return m.DestIp
	}
	return nil
}

func (m *ERSpanSpec) GetSrcIp() *IPAddress {
	if m != nil {
		return m.SrcIp
	}
	return nil
}

func (m *ERSpanSpec) GetDscp() string {
	if m != nil {
		return m.Dscp
	}
	return ""
}

func (m *ERSpanSpec) GetSpanId() uint32 {
	if m != nil {
		return m.SpanId
	}
	return 0
}

// MirrorSessionSpec is the configuration specification for mirror config
type MirrorSessionSpec struct {
	KeyOrHandle  *MirrorSessionKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	VrfKeyHandle *VrfKeyHandle           `protobuf:"bytes,2,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
	Snaplen      uint32                  `protobuf:"varint,3,opt,name=snaplen" json:"snaplen,omitempty"`
	// Types that are valid to be assigned to Destination:
	//	*MirrorSessionSpec_LocalSpanIf
	//	*MirrorSessionSpec_RspanSpec
	//	*MirrorSessionSpec_ErspanSpec
	Destination isMirrorSessionSpec_Destination `protobuf_oneof:"destination"`
}

func (m *MirrorSessionSpec) Reset()                    { *m = MirrorSessionSpec{} }
func (m *MirrorSessionSpec) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionSpec) ProtoMessage()               {}
func (*MirrorSessionSpec) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{45} }

type isMirrorSessionSpec_Destination interface{ isMirrorSessionSpec_Destination() }

type MirrorSessionSpec_LocalSpanIf struct {
	LocalSpanIf *InterfaceKeyHandle `protobuf:"bytes,4,opt,name=local_span_if,json=localSpanIf,oneof"`
}
type MirrorSessionSpec_RspanSpec struct {
	RspanSpec *RSpanSpec `protobuf:"bytes,5,opt,name=rspan_spec,json=rspanSpec,oneof"`
}
type MirrorSessionSpec_ErspanSpec struct {
	ErspanSpec *ERSpanSpec `protobuf:"bytes,6,opt,name=erspan_spec,json=erspanSpec,oneof"`
}

func (*MirrorSessionSpec_LocalSpanIf) isMirrorSessionSpec_Destination() {}
func (*MirrorSessionSpec_RspanSpec) isMirrorSessionSpec_Destination()   {}
func (*MirrorSessionSpec_ErspanSpec) isMirrorSessionSpec_Destination()  {}

func (m *MirrorSessionSpec) GetDestination() isMirrorSessionSpec_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *MirrorSessionSpec) GetKeyOrHandle() *MirrorSessionKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *MirrorSessionSpec) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

func (m *MirrorSessionSpec) GetSnaplen() uint32 {
	if m != nil {
		return m.Snaplen
	}
	return 0
}

func (m *MirrorSessionSpec) GetLocalSpanIf() *InterfaceKeyHandle {
	if x, ok := m.GetDestination().(*MirrorSessionSpec_LocalSpanIf); ok {
		return x.LocalSpanIf
	}
	return nil
}

func (m *MirrorSessionSpec) GetRspanSpec() *RSpanSpec {
	if x, ok := m.GetDestination().(*MirrorSessionSpec_RspanSpec); ok {
		return x.RspanSpec
	}
	return nil
}

func (m *MirrorSessionSpec) GetErspanSpec() *ERSpanSpec {
	if x, ok := m.GetDestination().(*MirrorSessionSpec_ErspanSpec); ok {
		return x.ErspanSpec
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MirrorSessionSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MirrorSessionSpec_OneofMarshaler, _MirrorSessionSpec_OneofUnmarshaler, _MirrorSessionSpec_OneofSizer, []interface{}{
		(*MirrorSessionSpec_LocalSpanIf)(nil),
		(*MirrorSessionSpec_RspanSpec)(nil),
		(*MirrorSessionSpec_ErspanSpec)(nil),
	}
}

func _MirrorSessionSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MirrorSessionSpec)
	// destination
	switch x := m.Destination.(type) {
	case *MirrorSessionSpec_LocalSpanIf:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LocalSpanIf); err != nil {
			return err
		}
	case *MirrorSessionSpec_RspanSpec:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RspanSpec); err != nil {
			return err
		}
	case *MirrorSessionSpec_ErspanSpec:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ErspanSpec); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MirrorSessionSpec.Destination has unexpected type %T", x)
	}
	return nil
}

func _MirrorSessionSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MirrorSessionSpec)
	switch tag {
	case 4: // destination.local_span_if
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InterfaceKeyHandle)
		err := b.DecodeMessage(msg)
		m.Destination = &MirrorSessionSpec_LocalSpanIf{msg}
		return true, err
	case 5: // destination.rspan_spec
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RSpanSpec)
		err := b.DecodeMessage(msg)
		m.Destination = &MirrorSessionSpec_RspanSpec{msg}
		return true, err
	case 6: // destination.erspan_spec
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ERSpanSpec)
		err := b.DecodeMessage(msg)
		m.Destination = &MirrorSessionSpec_ErspanSpec{msg}
		return true, err
	default:
		return false, nil
	}
}

func _MirrorSessionSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MirrorSessionSpec)
	// destination
	switch x := m.Destination.(type) {
	case *MirrorSessionSpec_LocalSpanIf:
		s := proto.Size(x.LocalSpanIf)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MirrorSessionSpec_RspanSpec:
		s := proto.Size(x.RspanSpec)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MirrorSessionSpec_ErspanSpec:
		s := proto.Size(x.ErspanSpec)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// MirrorSessionStatus is the operational status of the rule
type MirrorSessionStatus struct {
	Handle      uint64 `protobuf:"fixed64,1,opt,name=handle" json:"handle,omitempty"`
	ActiveFlows uint32 `protobuf:"varint,2,opt,name=active_flows,json=activeFlows" json:"active_flows,omitempty"`
}

func (m *MirrorSessionStatus) Reset()                    { *m = MirrorSessionStatus{} }
func (m *MirrorSessionStatus) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionStatus) ProtoMessage()               {}
func (*MirrorSessionStatus) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{46} }

func (m *MirrorSessionStatus) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func (m *MirrorSessionStatus) GetActiveFlows() uint32 {
	if m != nil {
		return m.ActiveFlows
	}
	return 0
}

// MirrorSession is a container that holds both the configuration and the operational
// state of the mirrorsession
type MirrorSessionResponse struct {
	ApiStatus ApiStatus            `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *MirrorSessionStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *MirrorSessionResponse) Reset()                    { *m = MirrorSessionResponse{} }
func (m *MirrorSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionResponse) ProtoMessage()               {}
func (*MirrorSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{47} }

func (m *MirrorSessionResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MirrorSessionResponse) GetStatus() *MirrorSessionStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// MirrorSessionConfigsMsg is used in requests and is a batchable request message
type MirrorSessionRequestMsg struct {
	Request []*MirrorSessionSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MirrorSessionRequestMsg) Reset()                    { *m = MirrorSessionRequestMsg{} }
func (m *MirrorSessionRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionRequestMsg) ProtoMessage()               {}
func (*MirrorSessionRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{48} }

func (m *MirrorSessionRequestMsg) GetRequest() []*MirrorSessionSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// MirrorSessionConfigsMsg message is used as response for API requests.
type MirrorSessionResponseMsg struct {
	Response []*MirrorSessionResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MirrorSessionResponseMsg) Reset()                    { *m = MirrorSessionResponseMsg{} }
func (m *MirrorSessionResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionResponseMsg) ProtoMessage()               {}
func (*MirrorSessionResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{49} }

func (m *MirrorSessionResponseMsg) GetResponse() []*MirrorSessionResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// MirrorSessionDeleteRequest is used to delete a mirrorsession
type MirrorSessionDeleteRequest struct {
	KeyOrHandle *MirrorSessionKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *MirrorSessionDeleteRequest) Reset()                    { *m = MirrorSessionDeleteRequest{} }
func (m *MirrorSessionDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionDeleteRequest) ProtoMessage()               {}
func (*MirrorSessionDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{50} }

func (m *MirrorSessionDeleteRequest) GetKeyOrHandle() *MirrorSessionKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// MirrorSessionDeleteResponse is response to MirrorSessionDeleteRequest
type MirrorSessionDeleteResponse struct {
	ApiStatus   ApiStatus               `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	KeyOrHandle *MirrorSessionKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *MirrorSessionDeleteResponse) Reset()                    { *m = MirrorSessionDeleteResponse{} }
func (m *MirrorSessionDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionDeleteResponse) ProtoMessage()               {}
func (*MirrorSessionDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{51} }

func (m *MirrorSessionDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MirrorSessionDeleteResponse) GetKeyOrHandle() *MirrorSessionKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// MirrorSessionDeleteRequestMsg is used to delete a batch of mirrorsessions
type MirrorSessionDeleteRequestMsg struct {
	Request []*MirrorSessionDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MirrorSessionDeleteRequestMsg) Reset()                    { *m = MirrorSessionDeleteRequestMsg{} }
func (m *MirrorSessionDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionDeleteRequestMsg) ProtoMessage()               {}
func (*MirrorSessionDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{52} }

func (m *MirrorSessionDeleteRequestMsg) GetRequest() []*MirrorSessionDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// MirrorSessionDeleteResponseMsg is batched response to MirrorSessionDeleteRequestMsg
type MirrorSessionDeleteResponseMsg struct {
	Response []*MirrorSessionDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MirrorSessionDeleteResponseMsg) Reset()         { *m = MirrorSessionDeleteResponseMsg{} }
func (m *MirrorSessionDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*MirrorSessionDeleteResponseMsg) ProtoMessage()    {}
func (*MirrorSessionDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor26, []int{53}
}

func (m *MirrorSessionDeleteResponseMsg) GetResponse() []*MirrorSessionDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// MirrorSessionGetRequest is used to get information about a mirrorsession
type MirrorSessionGetRequest struct {
	KeyOrHandle *MirrorSessionKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *MirrorSessionGetRequest) Reset()                    { *m = MirrorSessionGetRequest{} }
func (m *MirrorSessionGetRequest) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionGetRequest) ProtoMessage()               {}
func (*MirrorSessionGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{54} }

func (m *MirrorSessionGetRequest) GetKeyOrHandle() *MirrorSessionKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// MirrorSessionGetRequestMsg is batched GET requests for mirrorsessions
type MirrorSessionGetRequestMsg struct {
	Request []*MirrorSessionGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MirrorSessionGetRequestMsg) Reset()                    { *m = MirrorSessionGetRequestMsg{} }
func (m *MirrorSessionGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionGetRequestMsg) ProtoMessage()               {}
func (*MirrorSessionGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{55} }

func (m *MirrorSessionGetRequestMsg) GetRequest() []*MirrorSessionGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type MirrorSessionStats struct {
}

func (m *MirrorSessionStats) Reset()                    { *m = MirrorSessionStats{} }
func (m *MirrorSessionStats) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionStats) ProtoMessage()               {}
func (*MirrorSessionStats) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{56} }

type MirrorSessionGetResponse struct {
	ApiStatus ApiStatus           `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *MirrorSessionSpec  `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Stats     *MirrorSessionStats `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
}

func (m *MirrorSessionGetResponse) Reset()                    { *m = MirrorSessionGetResponse{} }
func (m *MirrorSessionGetResponse) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionGetResponse) ProtoMessage()               {}
func (*MirrorSessionGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{57} }

func (m *MirrorSessionGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MirrorSessionGetResponse) GetSpec() *MirrorSessionSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *MirrorSessionGetResponse) GetStats() *MirrorSessionStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// MirrorSessionGetResponseMsg is batched response to MirrorSessionGetRequestMsg
type MirrorSessionGetResponseMsg struct {
	Response []*MirrorSessionGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MirrorSessionGetResponseMsg) Reset()                    { *m = MirrorSessionGetResponseMsg{} }
func (m *MirrorSessionGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionGetResponseMsg) ProtoMessage()               {}
func (*MirrorSessionGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{58} }

func (m *MirrorSessionGetResponseMsg) GetResponse() []*MirrorSessionGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*CollectorSpec)(nil), "halproto.CollectorSpec")
	proto.RegisterType((*CollectorStatus)(nil), "halproto.CollectorStatus")
	proto.RegisterType((*CollectorResponse)(nil), "halproto.CollectorResponse")
	proto.RegisterType((*CollectorRequestMsg)(nil), "halproto.CollectorRequestMsg")
	proto.RegisterType((*CollectorResponseMsg)(nil), "halproto.CollectorResponseMsg")
	proto.RegisterType((*CollectorDeleteRequest)(nil), "halproto.CollectorDeleteRequest")
	proto.RegisterType((*CollectorDeleteResponse)(nil), "halproto.CollectorDeleteResponse")
	proto.RegisterType((*CollectorDeleteRequestMsg)(nil), "halproto.CollectorDeleteRequestMsg")
	proto.RegisterType((*CollectorDeleteResponseMsg)(nil), "halproto.CollectorDeleteResponseMsg")
	proto.RegisterType((*CollectorGetRequest)(nil), "halproto.CollectorGetRequest")
	proto.RegisterType((*CollectorGetRequestMsg)(nil), "halproto.CollectorGetRequestMsg")
	proto.RegisterType((*CollectorStats)(nil), "halproto.CollectorStats")
	proto.RegisterType((*CollectorGetResponse)(nil), "halproto.CollectorGetResponse")
	proto.RegisterType((*CollectorGetResponseMsg)(nil), "halproto.CollectorGetResponseMsg")
	proto.RegisterType((*MonitorAction)(nil), "halproto.MonitorAction")
	proto.RegisterType((*FlowMonitorRuleSpec)(nil), "halproto.FlowMonitorRuleSpec")
	proto.RegisterType((*FlowMonitorRuleStatus)(nil), "halproto.FlowMonitorRuleStatus")
	proto.RegisterType((*FlowMonitorRuleResponse)(nil), "halproto.FlowMonitorRuleResponse")
	proto.RegisterType((*FlowMonitorRuleRequestMsg)(nil), "halproto.FlowMonitorRuleRequestMsg")
	proto.RegisterType((*FlowMonitorRuleResponseMsg)(nil), "halproto.FlowMonitorRuleResponseMsg")
	proto.RegisterType((*FlowMonitorRuleDeleteRequest)(nil), "halproto.FlowMonitorRuleDeleteRequest")
	proto.RegisterType((*FlowMonitorRuleDeleteResponse)(nil), "halproto.FlowMonitorRuleDeleteResponse")
	proto.RegisterType((*FlowMonitorRuleDeleteRequestMsg)(nil), "halproto.FlowMonitorRuleDeleteRequestMsg")
	proto.RegisterType((*FlowMonitorRuleDeleteResponseMsg)(nil), "halproto.FlowMonitorRuleDeleteResponseMsg")
	proto.RegisterType((*FlowMonitorRuleGetRequest)(nil), "halproto.FlowMonitorRuleGetRequest")
	proto.RegisterType((*FlowMonitorRuleGetRequestMsg)(nil), "halproto.FlowMonitorRuleGetRequestMsg")
	proto.RegisterType((*FlowMonitorRuleStats)(nil), "halproto.FlowMonitorRuleStats")
	proto.RegisterType((*FlowMonitorRuleGetResponse)(nil), "halproto.FlowMonitorRuleGetResponse")
	proto.RegisterType((*FlowMonitorRuleGetResponseMsg)(nil), "halproto.FlowMonitorRuleGetResponseMsg")
	proto.RegisterType((*DropMonitorRuleSpec)(nil), "halproto.DropMonitorRuleSpec")
	proto.RegisterType((*DropMonitorRuleStatus)(nil), "halproto.DropMonitorRuleStatus")
	proto.RegisterType((*DropMonitorRuleResponse)(nil), "halproto.DropMonitorRuleResponse")
	proto.RegisterType((*DropMonitorRuleRequestMsg)(nil), "halproto.DropMonitorRuleRequestMsg")
	proto.RegisterType((*DropMonitorRuleResponseMsg)(nil), "halproto.DropMonitorRuleResponseMsg")
	proto.RegisterType((*DropMonitorRuleDeleteRequest)(nil), "halproto.DropMonitorRuleDeleteRequest")
	proto.RegisterType((*DropMonitorRuleDeleteResponse)(nil), "halproto.DropMonitorRuleDeleteResponse")
	proto.RegisterType((*DropMonitorRuleDeleteRequestMsg)(nil), "halproto.DropMonitorRuleDeleteRequestMsg")
	proto.RegisterType((*DropMonitorRuleDeleteResponseMsg)(nil), "halproto.DropMonitorRuleDeleteResponseMsg")
	proto.RegisterType((*DropMonitorRuleGetRequest)(nil), "halproto.DropMonitorRuleGetRequest")
	proto.RegisterType((*DropMonitorRuleGetRequestMsg)(nil), "halproto.DropMonitorRuleGetRequestMsg")
	proto.RegisterType((*DropMonitorRuleStats)(nil), "halproto.DropMonitorRuleStats")
	proto.RegisterType((*DropMonitorRuleGetResponse)(nil), "halproto.DropMonitorRuleGetResponse")
	proto.RegisterType((*DropMonitorRuleGetResponseMsg)(nil), "halproto.DropMonitorRuleGetResponseMsg")
	proto.RegisterType((*RSpanSpec)(nil), "halproto.RSpanSpec")
	proto.RegisterType((*ERSpanSpec)(nil), "halproto.ERSpanSpec")
	proto.RegisterType((*MirrorSessionSpec)(nil), "halproto.MirrorSessionSpec")
	proto.RegisterType((*MirrorSessionStatus)(nil), "halproto.MirrorSessionStatus")
	proto.RegisterType((*MirrorSessionResponse)(nil), "halproto.MirrorSessionResponse")
	proto.RegisterType((*MirrorSessionRequestMsg)(nil), "halproto.MirrorSessionRequestMsg")
	proto.RegisterType((*MirrorSessionResponseMsg)(nil), "halproto.MirrorSessionResponseMsg")
	proto.RegisterType((*MirrorSessionDeleteRequest)(nil), "halproto.MirrorSessionDeleteRequest")
	proto.RegisterType((*MirrorSessionDeleteResponse)(nil), "halproto.MirrorSessionDeleteResponse")
	proto.RegisterType((*MirrorSessionDeleteRequestMsg)(nil), "halproto.MirrorSessionDeleteRequestMsg")
	proto.RegisterType((*MirrorSessionDeleteResponseMsg)(nil), "halproto.MirrorSessionDeleteResponseMsg")
	proto.RegisterType((*MirrorSessionGetRequest)(nil), "halproto.MirrorSessionGetRequest")
	proto.RegisterType((*MirrorSessionGetRequestMsg)(nil), "halproto.MirrorSessionGetRequestMsg")
	proto.RegisterType((*MirrorSessionStats)(nil), "halproto.MirrorSessionStats")
	proto.RegisterType((*MirrorSessionGetResponse)(nil), "halproto.MirrorSessionGetResponse")
	proto.RegisterType((*MirrorSessionGetResponseMsg)(nil), "halproto.MirrorSessionGetResponseMsg")
	proto.RegisterEnum("halproto.ExportFormat", ExportFormat_name, ExportFormat_value)
	proto.RegisterEnum("halproto.RuleAction", RuleAction_name, RuleAction_value)
	proto.RegisterEnum("halproto.AggregationScheme", AggregationScheme_name, AggregationScheme_value)
}

func init() { proto.RegisterFile("telemetry.proto", fileDescriptor26) }

var fileDescriptor26 = []byte{
	// 2151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5a, 0x4d, 0x73, 0xdb, 0x68,
	0x1d, 0x8f, 0xf2, 0xe2, 0xc4, 0x7f, 0xc7, 0xa9, 0xf3, 0x34, 0x6d, 0xdc, 0x90, 0xd6, 0xa9, 0xb6,
	0x69, 0xd3, 0xb2, 0x5b, 0xba, 0xde, 0xe9, 0x52, 0xba, 0xdb, 0x76, 0x1c, 0xd7, 0xd9, 0x0a, 0x92,
	0xd8, 0xc8, 0x4e, 0xb7, 0xb3, 0xc3, 0x54, 0xab, 0xca, 0x8f, 0x1d, 0x4f, 0x64, 0x49, 0x48, 0x6a,
	0x96, 0xc0, 0xf0, 0x11, 0x18, 0x0e, 0x1c, 0x38, 0x30, 0x1c, 0xf9, 0x0e, 0x70, 0xe0, 0x03, 0x30,
	0x1c, 0x60, 0xf8, 0x00, 0xbd, 0x70, 0xe0, 0xde, 0x1b, 0x37, 0xe6, 0x79, 0x1e, 0x59, 0xd6, 0xcb,
	0x23, 0xc9, 0x0d, 0x6e, 0x4f, 0xb1, 0xa4, 0xff, 0xfb, 0xcb, 0xf3, 0xff, 0xe9, 0xaf, 0xc0, 0x05,
	0x17, 0xeb, 0x78, 0x88, 0x5d, 0xfb, 0xec, 0xae, 0x65, 0x9b, 0xae, 0x89, 0xf2, 0xfe, 0x8d, 0x8d,
	0x82, 0x7b, 0x66, 0x61, 0x87, 0xdd, 0xdf, 0x58, 0x3a, 0x39, 0x66, 0xbf, 0xc4, 0x7f, 0x2d, 0x40,
	0xb1, 0x6e, 0xea, 0x3a, 0xd6, 0x5c, 0xd3, 0x6e, 0x5b, 0x58, 0x43, 0x3f, 0x86, 0xe2, 0x09, 0x3e,
	0x53, 0x4c, 0x5b, 0x39, 0x56, 0x8d, 0xae, 0x8e, 0xcb, 0xc2, 0x96, 0xb0, 0x53, 0xa8, 0x5e, 0xbe,
	0x7b, 0x72, 0x7c, 0xd7, 0xa7, 0xfc, 0x09, 0x3e, 0x7b, 0x46, 0x9f, 0xee, 0xae, 0xbc, 0x7d, 0x53,
	0x81, 0x53, 0x6c, 0x0c, 0x34, 0xfc, 0xf0, 0x04, 0x9f, 0xc9, 0x85, 0x13, 0x7c, 0xd6, 0xb4, 0xd9,
	0x43, 0xb4, 0x07, 0x2b, 0xa7, 0x76, 0x4f, 0x21, 0xf2, 0x3c, 0x61, 0xb3, 0x54, 0x58, 0x89, 0x08,
	0x7b, 0x6e, 0xf7, 0xf8, 0x62, 0x6c, 0xdc, 0x93, 0x97, 0x4f, 0x03, 0x4f, 0xd1, 0x4d, 0x58, 0xc0,
	0x86, 0xa6, 0x5a, 0xe5, 0x39, 0x8f, 0x9d, 0x39, 0xd3, 0x20, 0xf7, 0x24, 0xa3, 0x67, 0xca, 0xec,
	0x31, 0x6a, 0x41, 0x49, 0xaf, 0x3a, 0xb8, 0x1f, 0xd4, 0x38, 0x3f, 0x36, 0x7f, 0xbf, 0xda, 0xc6,
	0xfd, 0x21, 0x36, 0xdc, 0x64, 0xbd, 0x2b, 0x94, 0x7f, 0xac, 0xf9, 0x09, 0x2c, 0x76, 0xb1, 0xe3,
	0x2a, 0x03, 0xab, 0xbc, 0x10, 0xd2, 0x2d, 0xb5, 0x6a, 0xdd, 0xae, 0x8d, 0x1d, 0x67, 0x77, 0xed,
	0xed, 0x9b, 0x4a, 0xc9, 0x13, 0x31, 0x54, 0x8d, 0xae, 0xea, 0x9a, 0xf6, 0x99, 0x9c, 0x23, 0x6c,
	0x92, 0x85, 0x1e, 0x41, 0xce, 0xb1, 0x35, 0xc2, 0x9f, 0x7b, 0x27, 0xfe, 0x05, 0xc7, 0xd6, 0x24,
	0x0b, 0xd5, 0x61, 0x89, 0x26, 0x4a, 0x33, 0xf5, 0xf2, 0xe2, 0x96, 0xb0, 0xb3, 0x52, 0x5d, 0xf5,
	0x05, 0xb4, 0xbc, 0x07, 0x09, 0x12, 0x7c, 0x46, 0xf4, 0x29, 0xe4, 0xa9, 0x13, 0x96, 0x69, 0xbb,
	0xe5, 0xa5, 0x2d, 0x61, 0xa7, 0x98, 0xc4, 0x42, 0xc8, 0x5a, 0xa6, 0xed, 0xa2, 0x06, 0xe4, 0x7a,
	0xa6, 0x3d, 0x54, 0xdd, 0x72, 0x9e, 0x6a, 0x5d, 0xbf, 0x3b, 0xae, 0xad, 0xc6, 0x2f, 0x88, 0xa0,
	0x3d, 0xfa, 0x38, 0xc9, 0x7b, 0xc6, 0x8c, 0xee, 0x43, 0xc1, 0xc5, 0x43, 0x4b, 0x57, 0x5d, 0xac,
	0x0c, 0xba, 0x65, 0x48, 0xd1, 0x0d, 0x23, 0x42, 0xa9, 0x8b, 0x1e, 0xc1, 0x05, 0x4c, 0x95, 0x28,
	0x03, 0xc3, 0xc5, 0xf6, 0xa9, 0xaa, 0x97, 0x0b, 0x29, 0xac, 0x2b, 0x8c, 0x58, 0xf2, 0x68, 0xc5,
	0xdb, 0x70, 0x61, 0x5c, 0xd3, 0xae, 0xea, 0xbe, 0x76, 0xd0, 0x65, 0xc8, 0x05, 0xca, 0x39, 0x27,
	0x7b, 0x57, 0xe2, 0x6f, 0x05, 0x58, 0xf5, 0x69, 0x65, 0xec, 0x58, 0xa6, 0xe1, 0x90, 0xba, 0x05,
	0xd5, 0x1a, 0x28, 0x0e, 0xe5, 0xa5, 0x1c, 0x2b, 0x7e, 0xe2, 0x6a, 0xd6, 0x80, 0xc9, 0xdc, 0xbd,
	0xf4, 0xf6, 0x4d, 0x65, 0xd5, 0x33, 0x66, 0x4c, 0x2e, 0xe7, 0xd5, 0x11, 0x05, 0xaa, 0x42, 0xce,
	0x93, 0xc1, 0xea, 0x7e, 0x23, 0x10, 0xc5, 0x88, 0x85, 0xb2, 0x47, 0x29, 0x4a, 0x70, 0x31, 0x60,
	0xd0, 0xcf, 0x5f, 0x63, 0xc7, 0x3d, 0x70, 0xfa, 0xa8, 0x0a, 0x8b, 0x36, 0xbb, 0x2a, 0x0b, 0x5b,
	0x73, 0x3b, 0x85, 0x6a, 0x99, 0x2b, 0xcb, 0xc2, 0x9a, 0x3c, 0x22, 0x14, 0x5b, 0xb0, 0x16, 0xf3,
	0x8d, 0xc8, 0x7a, 0x00, 0x4b, 0xb6, 0x77, 0xe9, 0x09, 0xdb, 0xe4, 0x09, 0x1b, 0xb1, 0xc8, 0x3e,
	0xb5, 0xd8, 0x85, 0xcb, 0xfe, 0xe3, 0xa7, 0x58, 0xc7, 0x2e, 0xf6, 0x4c, 0x9c, 0xe6, 0xb1, 0x21,
	0xfe, 0x51, 0x80, 0xf5, 0x98, 0x9a, 0x29, 0xa7, 0xe6, 0x61, 0xd4, 0xde, 0xd9, 0x34, 0x7b, 0xc3,
	0xf6, 0xbd, 0x80, 0x2b, 0xfc, 0x28, 0x90, 0xe0, 0x7e, 0x11, 0x4d, 0xd4, 0x75, 0x5e, 0x6c, 0x43,
	0x6c, 0xe3, 0x8c, 0xfd, 0x0c, 0x36, 0x12, 0x1c, 0x27, 0xa2, 0x1f, 0xc7, 0xf2, 0x26, 0xa6, 0xc9,
	0x8e, 0x65, 0x4f, 0x0d, 0x94, 0xd6, 0x57, 0xd8, 0x7d, 0x1f, 0xa9, 0x93, 0x03, 0x05, 0x32, 0x56,
	0xc1, 0x8a, 0x2e, 0x12, 0x97, 0x6b, 0x3c, 0xdb, 0xc7, 0x3c, 0xe3, 0xa0, 0x94, 0x60, 0x25, 0xd4,
	0x2c, 0x8e, 0xf8, 0x57, 0x21, 0x50, 0xd9, 0x94, 0x65, 0xca, 0xd5, 0xf1, 0x31, 0xcc, 0x3b, 0x16,
	0xd6, 0xbc, 0xa2, 0x48, 0x6e, 0x35, 0x4a, 0x85, 0x7e, 0x00, 0x0b, 0x44, 0x84, 0xe3, 0x8d, 0xa7,
	0x2b, 0x49, 0x5d, 0xee, 0xc8, 0x8c, 0x4e, 0x7c, 0x1e, 0xa8, 0xef, 0x80, 0xf9, 0xac, 0x7c, 0xa2,
	0x39, 0xae, 0x24, 0xc6, 0x29, 0x96, 0xe0, 0xbf, 0x0b, 0x50, 0x3c, 0x30, 0x8d, 0x81, 0x6b, 0xda,
	0x35, 0xcd, 0x1d, 0x98, 0x06, 0xfa, 0x04, 0x72, 0x2a, 0xfd, 0x45, 0x85, 0xad, 0x54, 0x2f, 0x05,
	0x84, 0xc9, 0xaf, 0x75, 0xcc, 0xc8, 0x64, 0x8f, 0x08, 0x7d, 0x01, 0xa0, 0xf6, 0xfb, 0x8a, 0xa3,
	0x1d, 0xe3, 0x21, 0x69, 0x09, 0xc2, 0x12, 0x3c, 0x1b, 0x6a, 0xfd, 0xbe, 0x8d, 0xfb, 0x2a, 0xa1,
	0x6d, 0x53, 0x1a, 0x39, 0xaf, 0xf6, 0xfb, 0xec, 0x27, 0x3a, 0x84, 0xe2, 0xd0, 0x09, 0x8e, 0xde,
	0x39, 0x6a, 0xff, 0x06, 0xa9, 0xa3, 0x83, 0x81, 0x6d, 0x9b, 0x76, 0x1b, 0x3b, 0xce, 0xc0, 0x34,
	0x92, 0xc7, 0x6f, 0x61, 0xe8, 0xf8, 0x0f, 0xc5, 0x7f, 0xcf, 0xc2, 0xc5, 0x3d, 0xdd, 0xfc, 0xce,
	0xf3, 0x88, 0x98, 0x4b, 0x11, 0x4a, 0x8b, 0x5f, 0xaf, 0x9b, 0x44, 0x4f, 0x84, 0x7e, 0x42, 0x9c,
	0xf2, 0x02, 0xd6, 0xb4, 0x51, 0x64, 0xc3, 0x68, 0x65, 0x6e, 0xc2, 0x46, 0x20, 0xc6, 0x23, 0x2d,
	0x46, 0xc3, 0x41, 0x40, 0x73, 0xe7, 0x45, 0x40, 0x43, 0xd5, 0xd5, 0x8e, 0x3d, 0x38, 0x33, 0xaa,
	0x69, 0xe2, 0xe3, 0x01, 0xb9, 0x2f, 0xb3, 0xc7, 0xe8, 0x9e, 0x9f, 0xef, 0x85, 0x58, 0xe9, 0x86,
	0x2a, 0x63, 0x94, 0x72, 0x51, 0x86, 0x4b, 0xd1, 0x20, 0xa7, 0x8e, 0x4c, 0x74, 0x1d, 0x96, 0x09,
	0xeb, 0x29, 0x56, 0x7a, 0xba, 0xf9, 0x1d, 0x1b, 0x6d, 0x45, 0xb9, 0xc0, 0xee, 0x11, 0x51, 0x8e,
	0xf8, 0x07, 0x01, 0xd6, 0x23, 0x42, 0xa7, 0xde, 0xa2, 0x0f, 0x22, 0xb3, 0x75, 0x2b, 0xe0, 0x29,
	0xd7, 0x21, 0x7f, 0xc2, 0x1e, 0xc1, 0x95, 0x98, 0x71, 0x93, 0x1d, 0x53, 0x9c, 0x6a, 0x0c, 0x9d,
	0xdd, 0x09, 0x3e, 0x67, 0x9f, 0xdd, 0x09, 0x8c, 0x81, 0xd6, 0xfe, 0xb3, 0x00, 0x9b, 0x11, 0xaa,
	0xf0, 0x00, 0x9e, 0x7e, 0x57, 0x4c, 0x09, 0xbd, 0x8b, 0x7f, 0x11, 0xe0, 0x6a, 0x82, 0xe9, 0x53,
	0xae, 0x89, 0x16, 0x7f, 0xa8, 0x9f, 0x3f, 0x06, 0x62, 0x17, 0x2a, 0x69, 0x51, 0x27, 0x99, 0xad,
	0x45, 0x2b, 0xe6, 0x56, 0x72, 0x62, 0x13, 0xc6, 0xfe, 0x31, 0x6c, 0xa5, 0x06, 0x88, 0xa8, 0x79,
	0x1a, 0x2b, 0xa0, 0x9d, 0x6c, 0x3d, 0xb1, 0x32, 0x1a, 0xc6, 0x6a, 0x3f, 0x00, 0x04, 0xa6, 0x5e,
	0x42, 0xe2, 0xcb, 0x58, 0xd1, 0x86, 0x41, 0xc1, 0xe3, 0x68, 0xec, 0x6e, 0x24, 0xfb, 0xc4, 0x83,
	0x06, 0x97, 0x61, 0x8d, 0xd3, 0xeb, 0x8e, 0xf8, 0x0f, 0x21, 0xd6, 0x8c, 0xef, 0x03, 0x26, 0x54,
	0x43, 0x30, 0x21, 0xeb, 0xa4, 0x60, 0x60, 0xe1, 0x7e, 0x18, 0x2c, 0x54, 0xd2, 0x8f, 0x2d, 0x1f,
	0x32, 0xbc, 0x8a, 0xf5, 0x50, 0x04, 0x38, 0xd4, 0x62, 0xf5, 0xb1, 0x9d, 0x11, 0xcb, 0x58, 0x71,
	0xfc, 0x57, 0x80, 0x8b, 0x4f, 0x6d, 0xd3, 0x7a, 0x97, 0x81, 0x1b, 0xa1, 0x9f, 0xf0, 0x68, 0x79,
	0x15, 0x85, 0x0a, 0xb3, 0x99, 0x50, 0x41, 0x7c, 0xfb, 0xa6, 0x72, 0xcd, 0x93, 0xa7, 0x99, 0x86,
	0xe3, 0xda, 0xea, 0xc0, 0x70, 0x9d, 0x47, 0xbf, 0xb2, 0x55, 0xa3, 0x8f, 0x1f, 0xde, 0xfb, 0xe4,
	0x87, 0xbf, 0x0e, 0xc1, 0x07, 0xf4, 0x31, 0xa9, 0x2d, 0xd5, 0x31, 0x8d, 0x51, 0xa8, 0x91, 0x97,
	0x61, 0x62, 0xb2, 0xcc, 0x9e, 0xc8, 0x23, 0x12, 0x32, 0x06, 0xa3, 0xae, 0xbf, 0xdb, 0x18, 0x9c,
	0xe3, 0x8f, 0xc1, 0x88, 0xd0, 0x0f, 0x3a, 0x06, 0xb9, 0x0e, 0x05, 0xc7, 0x60, 0xcc, 0xb8, 0xc9,
	0xc6, 0x20, 0xa7, 0x46, 0x42, 0x63, 0x30, 0xc1, 0xe7, 0xec, 0x31, 0x98, 0xc0, 0x18, 0x28, 0x51,
	0x0b, 0x36, 0x23, 0x44, 0x93, 0x4f, 0xc1, 0x73, 0x95, 0x2a, 0x9d, 0x5e, 0x09, 0x2a, 0x3f, 0xe0,
	0xf4, 0x3a, 0x9f, 0xed, 0x5d, 0xa8, 0xa4, 0x45, 0x2b, 0x73, 0x7a, 0xa5, 0x31, 0x87, 0xa6, 0x57,
	0x6a, 0x80, 0xb2, 0xa7, 0x57, 0x2a, 0x7b, 0x78, 0x7a, 0x45, 0x48, 0x27, 0x9c, 0x5e, 0xe7, 0x0b,
	0xdf, 0xcb, 0x58, 0xb1, 0xbd, 0xc3, 0xf4, 0x4a, 0xe4, 0x0c, 0x4d, 0x2f, 0x4e, 0x8b, 0xb2, 0xe9,
	0xc5, 0x63, 0xff, 0x60, 0xd3, 0x8b, 0xd7, 0xe0, 0x99, 0xd3, 0x8b, 0xe7, 0x4a, 0x60, 0x7a, 0x25,
	0x3b, 0x94, 0x3d, 0xbd, 0x92, 0x79, 0x03, 0xc5, 0xf1, 0x4b, 0xc8, 0xcb, 0x6d, 0x4b, 0x35, 0xe8,
	0xc8, 0x7a, 0x08, 0xf3, 0x03, 0xc3, 0xed, 0x05, 0x57, 0x19, 0x74, 0x3d, 0xd8, 0x53, 0x35, 0x9c,
	0x8c, 0x5b, 0x29, 0x0f, 0xfa, 0x14, 0x0a, 0xb6, 0x63, 0xa9, 0x86, 0xc2, 0x76, 0xce, 0xb3, 0x09,
	0x3b, 0x67, 0xa0, 0x44, 0xf4, 0x5a, 0xfc, 0x8d, 0x00, 0xd0, 0x18, 0x6b, 0xbf, 0x3d, 0xde, 0x1a,
	0x0b, 0xfc, 0xad, 0xaf, 0xbf, 0x1f, 0xbe, 0xe5, 0xef, 0x87, 0x67, 0x13, 0x28, 0xbd, 0x4d, 0x30,
	0x82, 0xf9, 0xae, 0xa3, 0xb1, 0x15, 0x78, 0x5e, 0xa6, 0xbf, 0xd1, 0x3a, 0x2c, 0x52, 0x43, 0x07,
	0x5d, 0xfa, 0x5e, 0x58, 0x94, 0x73, 0xe4, 0x52, 0xea, 0x8a, 0xbf, 0x9b, 0x83, 0xd5, 0xd0, 0x1c,
	0xa5, 0x66, 0x1d, 0xf2, 0x3b, 0x64, 0xd2, 0x17, 0xf4, 0xf7, 0xb6, 0xde, 0x2f, 0xc3, 0xa2, 0x63,
	0xa8, 0x96, 0x8e, 0x0d, 0x6f, 0x8a, 0x8e, 0x2e, 0xd1, 0x3e, 0x14, 0x75, 0x53, 0x53, 0x75, 0x85,
	0xb9, 0xd9, 0x0b, 0x6e, 0xf3, 0xb3, 0xf3, 0xf9, 0x6c, 0x46, 0x2e, 0x50, 0x76, 0x92, 0x18, 0xa9,
	0x87, 0xee, 0x03, 0xcb, 0x99, 0x42, 0xcb, 0x9e, 0xbd, 0x20, 0xaf, 0x05, 0x17, 0x22, 0xa3, 0x04,
	0x3e, 0x9b, 0x91, 0xf3, 0x94, 0x92, 0x86, 0xed, 0x01, 0x14, 0x70, 0x80, 0x8f, 0xed, 0xf1, 0x83,
	0x8b, 0x94, 0x46, 0x90, 0x11, 0xb0, 0xcf, 0xb9, 0x5b, 0x84, 0x02, 0x49, 0xf3, 0xc0, 0xa0, 0x1b,
	0x13, 0xb1, 0x05, 0x17, 0xc3, 0x49, 0xf9, 0xbf, 0x5f, 0xb4, 0x7f, 0x2f, 0xc0, 0xa5, 0x90, 0xc8,
	0xa9, 0x1f, 0x12, 0x9f, 0x47, 0xf0, 0x45, 0xf0, 0x98, 0xe0, 0x38, 0xe3, 0xa3, 0x8b, 0x9f, 0xc2,
	0x7a, 0xc4, 0x30, 0xff, 0xd8, 0xfc, 0x3c, 0x7a, 0x6c, 0x6e, 0x26, 0xca, 0x0c, 0x21, 0x8b, 0x17,
	0x50, 0xe6, 0xfa, 0x4a, 0x64, 0x7e, 0x19, 0x3b, 0x3f, 0xb6, 0x92, 0x84, 0x72, 0x8e, 0x0e, 0x1d,
	0x36, 0x42, 0x24, 0x61, 0x4c, 0x31, 0xe5, 0xb6, 0x11, 0xff, 0x24, 0xc0, 0xf7, 0xb8, 0xea, 0xa6,
	0x9c, 0xba, 0xc7, 0x7c, 0x3c, 0x91, 0x62, 0x77, 0xd8, 0xce, 0x6f, 0xe1, 0x6a, 0x72, 0x54, 0x48,
	0xd0, 0x9f, 0x44, 0x13, 0xb9, 0x9d, 0x14, 0xf3, 0x04, 0xe4, 0xd0, 0x85, 0x6b, 0x29, 0x81, 0x20,
	0x2a, 0x76, 0x63, 0x79, 0xbd, 0x99, 0xa5, 0x23, 0x96, 0xdd, 0x41, 0xa4, 0x14, 0x03, 0x98, 0x61,
	0xda, 0xa9, 0xfd, 0x26, 0x52, 0x48, 0x61, 0xbc, 0xf0, 0x65, 0x34, 0x5e, 0x62, 0x92, 0x2f, 0x3c,
	0xb4, 0xb0, 0x06, 0x28, 0xd6, 0x70, 0x8e, 0xf8, 0x37, 0x21, 0xd2, 0x15, 0xef, 0x03, 0x29, 0xdc,
	0x0b, 0x21, 0x85, 0xf4, 0x76, 0x65, 0x38, 0xe1, 0xb3, 0x30, 0x4e, 0xb8, 0x9a, 0x76, 0x6a, 0xf8,
	0x28, 0xe1, 0x65, 0xa4, 0x2f, 0x22, 0x18, 0xe1, 0x49, 0xac, 0x16, 0x3e, 0x4a, 0x8d, 0x5f, 0xb4,
	0x10, 0xee, 0xec, 0xc0, 0x72, 0xf0, 0xdb, 0x25, 0xca, 0xc3, 0x82, 0xd4, 0xda, 0x93, 0x5e, 0x94,
	0x66, 0x50, 0x11, 0xf2, 0x87, 0x8d, 0xce, 0xde, 0x7e, 0xf3, 0xeb, 0xe7, 0x3f, 0x2a, 0x09, 0x77,
	0xea, 0x00, 0xe3, 0xed, 0x38, 0xba, 0x0c, 0xa8, 0xde, 0xdc, 0xdf, 0x6f, 0xd4, 0x3b, 0x0a, 0xa1,
	0x50, 0xda, 0x9d, 0x5a, 0xa7, 0x5d, 0x9a, 0x41, 0x00, 0xb9, 0x03, 0x49, 0x96, 0x9b, 0x72, 0x49,
	0x40, 0xab, 0x50, 0x64, 0xbf, 0x95, 0x4e, 0x53, 0xa9, 0xb7, 0x8e, 0x4a, 0xb3, 0x77, 0xfe, 0x29,
	0xc0, 0x6a, 0x6c, 0x61, 0x8e, 0x96, 0x60, 0xfe, 0xb0, 0x79, 0xd8, 0x28, 0xcd, 0xa0, 0x65, 0x58,
	0x92, 0x5a, 0xed, 0xe6, 0x91, 0x5c, 0x6f, 0x30, 0x01, 0x52, 0xeb, 0x69, 0xa3, 0xdd, 0x91, 0x0e,
	0x6b, 0x1d, 0xa9, 0x79, 0x58, 0x9a, 0x25, 0xf2, 0xa5, 0x56, 0xab, 0x26, 0xc9, 0xa5, 0x39, 0x74,
	0x01, 0x0a, 0x8c, 0x54, 0x69, 0x35, 0xe5, 0x4e, 0x69, 0x1e, 0xad, 0x41, 0x29, 0x40, 0xcd, 0xee,
	0x2e, 0xa0, 0x02, 0x2c, 0xb6, 0x1b, 0xf2, 0x73, 0xa9, 0xde, 0x28, 0xe5, 0x10, 0x82, 0x15, 0xc6,
	0xaf, 0x8c, 0xee, 0x2d, 0x12, 0x36, 0x4f, 0x4e, 0xbb, 0x51, 0x57, 0xbe, 0x92, 0x9b, 0x47, 0xad,
	0xd2, 0x12, 0xa1, 0x24, 0xc2, 0x02, 0xf7, 0xf2, 0xe4, 0x9e, 0x7f, 0xa9, 0x50, 0x2b, 0xa0, 0xfa,
	0x9f, 0x65, 0xc8, 0x77, 0x46, 0x21, 0x47, 0x9d, 0xc0, 0x77, 0xd6, 0xba, 0x8d, 0x55, 0x17, 0xa3,
	0x6b, 0xfc, 0x0f, 0x89, 0xa3, 0x16, 0xd8, 0xa8, 0xa4, 0x7d, 0x68, 0x3c, 0x70, 0xfa, 0xe2, 0x4c,
	0x48, 0xea, 0x91, 0xd5, 0x9d, 0x92, 0xd4, 0x6f, 0x03, 0x52, 0xd9, 0x49, 0x81, 0x6e, 0x64, 0x7e,
	0x98, 0x23, 0xb2, 0xb7, 0xb3, 0x3f, 0xb1, 0x31, 0x0d, 0x5f, 0xc3, 0x72, 0xf0, 0xf3, 0x0c, 0xba,
	0x9e, 0xfe, 0x7d, 0x8b, 0xc8, 0x16, 0x33, 0x3e, 0xed, 0x30, 0xc1, 0xbd, 0xd8, 0x86, 0xde, 0x0b,
	0xf6, 0x8d, 0xb4, 0x0d, 0x32, 0xd7, 0x81, 0xe4, 0x05, 0x35, 0x57, 0x8f, 0x17, 0xfe, 0x29, 0xeb,
	0xb1, 0x63, 0x7a, 0xbc, 0x84, 0xdc, 0x99, 0x70, 0x71, 0x4a, 0xb4, 0x7d, 0x7f, 0xd2, 0xe5, 0x27,
	0xd3, 0x39, 0x00, 0x14, 0x5f, 0x81, 0xa1, 0x5b, 0x93, 0x6c, 0x1b, 0x89, 0xb6, 0x9d, 0x89, 0x56,
	0x69, 0x7e, 0x18, 0x23, 0xef, 0x2b, 0x9c, 0x74, 0x25, 0x6e, 0x5e, 0x36, 0xb6, 0xb3, 0xf7, 0x21,
	0x49, 0x7a, 0x38, 0xe9, 0x9a, 0x82, 0x1e, 0x3b, 0xa6, 0x87, 0x93, 0xae, 0x8c, 0x35, 0x43, 0x28,
	0x5d, 0x59, 0xcb, 0x02, 0x96, 0xae, 0xf8, 0x3b, 0x1f, 0xba, 0x35, 0xc9, 0xeb, 0x75, 0x34, 0x5d,
	0xa9, 0xef, 0x9d, 0xf4, 0x60, 0x08, 0x83, 0x72, 0x2f, 0x59, 0x62, 0x32, 0x7c, 0xf4, 0xd5, 0x7c,
	0x94, 0x05, 0x31, 0xf9, 0x1a, 0xbc, 0x34, 0x4d, 0x51, 0x83, 0x1e, 0xd1, 0xe0, 0x25, 0x68, 0x67,
	0x22, 0x38, 0x46, 0xf4, 0xdc, 0x9e, 0x0c, 0x54, 0x31, 0x6d, 0x1a, 0x94, 0xa2, 0xc3, 0x16, 0x6d,
	0x67, 0x23, 0x19, 0xa2, 0xe7, 0xe6, 0x04, 0x03, 0x9b, 0x2a, 0xd9, 0x85, 0x6f, 0x96, 0x8e, 0x55,
	0x9d, 0xfe, 0x0b, 0xd3, 0xab, 0x1c, 0xfd, 0xf3, 0xd9, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x68,
	0x5c, 0x9e, 0xd8, 0xe0, 0x26, 0x00, 0x00,
}
