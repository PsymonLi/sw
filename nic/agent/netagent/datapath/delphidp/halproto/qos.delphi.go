// Code generated by protoc-gen-go. DO NOT EDIT.
// source: qos.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type QosPauseType int32

const (
	QosPauseType_QOS_PAUSE_TYPE_NONE       QosPauseType = 0
	QosPauseType_QOS_PAUSE_TYPE_LINK_LEVEL QosPauseType = 1
	QosPauseType_QOS_PAUSE_TYPE_PFC        QosPauseType = 2
)

var QosPauseType_name = map[int32]string{
	0: "QOS_PAUSE_TYPE_NONE",
	1: "QOS_PAUSE_TYPE_LINK_LEVEL",
	2: "QOS_PAUSE_TYPE_PFC",
}
var QosPauseType_value = map[string]int32{
	"QOS_PAUSE_TYPE_NONE":       0,
	"QOS_PAUSE_TYPE_LINK_LEVEL": 1,
	"QOS_PAUSE_TYPE_PFC":        2,
}

func (x QosPauseType) String() string {
	return proto.EnumName(QosPauseType_name, int32(x))
}
func (QosPauseType) EnumDescriptor() ([]byte, []int) { return fileDescriptor25, []int{0} }

type QosClassMapType int32

const (
	QosClassMapType_QOS_CLASS_MAP_TYPE_NONE     QosClassMapType = 0
	QosClassMapType_QOS_CLASS_MAP_TYPE_PCP      QosClassMapType = 1
	QosClassMapType_QOS_CLASS_MAP_TYPE_DSCP     QosClassMapType = 2
	QosClassMapType_QOS_CLASS_MAP_TYPE_PCP_DSCP QosClassMapType = 3
)

var QosClassMapType_name = map[int32]string{
	0: "QOS_CLASS_MAP_TYPE_NONE",
	1: "QOS_CLASS_MAP_TYPE_PCP",
	2: "QOS_CLASS_MAP_TYPE_DSCP",
	3: "QOS_CLASS_MAP_TYPE_PCP_DSCP",
}
var QosClassMapType_value = map[string]int32{
	"QOS_CLASS_MAP_TYPE_NONE":     0,
	"QOS_CLASS_MAP_TYPE_PCP":      1,
	"QOS_CLASS_MAP_TYPE_DSCP":     2,
	"QOS_CLASS_MAP_TYPE_PCP_DSCP": 3,
}

func (x QosClassMapType) String() string {
	return proto.EnumName(QosClassMapType_name, int32(x))
}
func (QosClassMapType) EnumDescriptor() ([]byte, []int) { return fileDescriptor25, []int{1} }

type PacketBufferPortType int32

const (
	PacketBufferPortType_PACKET_BUFFER_PORT_TYPE_DMA    PacketBufferPortType = 0
	PacketBufferPortType_PACKET_BUFFER_PORT_TYPE_P4IG   PacketBufferPortType = 1
	PacketBufferPortType_PACKET_BUFFER_PORT_TYPE_P4EG   PacketBufferPortType = 2
	PacketBufferPortType_PACKET_BUFFER_PORT_TYPE_UPLINK PacketBufferPortType = 3
)

var PacketBufferPortType_name = map[int32]string{
	0: "PACKET_BUFFER_PORT_TYPE_DMA",
	1: "PACKET_BUFFER_PORT_TYPE_P4IG",
	2: "PACKET_BUFFER_PORT_TYPE_P4EG",
	3: "PACKET_BUFFER_PORT_TYPE_UPLINK",
}
var PacketBufferPortType_value = map[string]int32{
	"PACKET_BUFFER_PORT_TYPE_DMA":    0,
	"PACKET_BUFFER_PORT_TYPE_P4IG":   1,
	"PACKET_BUFFER_PORT_TYPE_P4EG":   2,
	"PACKET_BUFFER_PORT_TYPE_UPLINK": 3,
}

func (x PacketBufferPortType) String() string {
	return proto.EnumName(PacketBufferPortType_name, int32(x))
}
func (PacketBufferPortType) EnumDescriptor() ([]byte, []int) { return fileDescriptor25, []int{2} }

type PolicerPPSSpec struct {
	PacketsPerSec uint32 `protobuf:"varint,1,opt,name=packets_per_sec,json=packetsPerSec" json:"packets_per_sec,omitempty"`
	BurstPackets  uint32 `protobuf:"varint,2,opt,name=burst_packets,json=burstPackets" json:"burst_packets,omitempty"`
}

func (m *PolicerPPSSpec) Reset()                    { *m = PolicerPPSSpec{} }
func (m *PolicerPPSSpec) String() string            { return proto.CompactTextString(m) }
func (*PolicerPPSSpec) ProtoMessage()               {}
func (*PolicerPPSSpec) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{0} }

func (m *PolicerPPSSpec) GetPacketsPerSec() uint32 {
	if m != nil {
		return m.PacketsPerSec
	}
	return 0
}

func (m *PolicerPPSSpec) GetBurstPackets() uint32 {
	if m != nil {
		return m.BurstPackets
	}
	return 0
}

type PolicerBPSSpec struct {
	BytesPerSec uint64 `protobuf:"varint,1,opt,name=bytes_per_sec,json=bytesPerSec" json:"bytes_per_sec,omitempty"`
	BurstBytes  uint64 `protobuf:"varint,2,opt,name=burst_bytes,json=burstBytes" json:"burst_bytes,omitempty"`
}

func (m *PolicerBPSSpec) Reset()                    { *m = PolicerBPSSpec{} }
func (m *PolicerBPSSpec) String() string            { return proto.CompactTextString(m) }
func (*PolicerBPSSpec) ProtoMessage()               {}
func (*PolicerBPSSpec) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{1} }

func (m *PolicerBPSSpec) GetBytesPerSec() uint64 {
	if m != nil {
		return m.BytesPerSec
	}
	return 0
}

func (m *PolicerBPSSpec) GetBurstBytes() uint64 {
	if m != nil {
		return m.BurstBytes
	}
	return 0
}

// Specifications of a policer
type PolicerSpec struct {
	// Types that are valid to be assigned to PolicerType:
	//	*PolicerSpec_PpsPolicer
	//	*PolicerSpec_BpsPolicer
	PolicerType isPolicerSpec_PolicerType `protobuf_oneof:"policer_type"`
}

func (m *PolicerSpec) Reset()                    { *m = PolicerSpec{} }
func (m *PolicerSpec) String() string            { return proto.CompactTextString(m) }
func (*PolicerSpec) ProtoMessage()               {}
func (*PolicerSpec) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{2} }

type isPolicerSpec_PolicerType interface{ isPolicerSpec_PolicerType() }

type PolicerSpec_PpsPolicer struct {
	PpsPolicer *PolicerPPSSpec `protobuf:"bytes,1,opt,name=pps_policer,json=ppsPolicer,oneof"`
}
type PolicerSpec_BpsPolicer struct {
	BpsPolicer *PolicerBPSSpec `protobuf:"bytes,2,opt,name=bps_policer,json=bpsPolicer,oneof"`
}

func (*PolicerSpec_PpsPolicer) isPolicerSpec_PolicerType() {}
func (*PolicerSpec_BpsPolicer) isPolicerSpec_PolicerType() {}

func (m *PolicerSpec) GetPolicerType() isPolicerSpec_PolicerType {
	if m != nil {
		return m.PolicerType
	}
	return nil
}

func (m *PolicerSpec) GetPpsPolicer() *PolicerPPSSpec {
	if x, ok := m.GetPolicerType().(*PolicerSpec_PpsPolicer); ok {
		return x.PpsPolicer
	}
	return nil
}

func (m *PolicerSpec) GetBpsPolicer() *PolicerBPSSpec {
	if x, ok := m.GetPolicerType().(*PolicerSpec_BpsPolicer); ok {
		return x.BpsPolicer
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PolicerSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PolicerSpec_OneofMarshaler, _PolicerSpec_OneofUnmarshaler, _PolicerSpec_OneofSizer, []interface{}{
		(*PolicerSpec_PpsPolicer)(nil),
		(*PolicerSpec_BpsPolicer)(nil),
	}
}

func _PolicerSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PolicerSpec)
	// policer_type
	switch x := m.PolicerType.(type) {
	case *PolicerSpec_PpsPolicer:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PpsPolicer); err != nil {
			return err
		}
	case *PolicerSpec_BpsPolicer:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BpsPolicer); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PolicerSpec.PolicerType has unexpected type %T", x)
	}
	return nil
}

func _PolicerSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PolicerSpec)
	switch tag {
	case 1: // policer_type.pps_policer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PolicerPPSSpec)
		err := b.DecodeMessage(msg)
		m.PolicerType = &PolicerSpec_PpsPolicer{msg}
		return true, err
	case 2: // policer_type.bps_policer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PolicerBPSSpec)
		err := b.DecodeMessage(msg)
		m.PolicerType = &PolicerSpec_BpsPolicer{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PolicerSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PolicerSpec)
	// policer_type
	switch x := m.PolicerType.(type) {
	case *PolicerSpec_PpsPolicer:
		s := proto.Size(x.PpsPolicer)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PolicerSpec_BpsPolicer:
		s := proto.Size(x.BpsPolicer)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// PolicerStats captures all the statistics of a policer
type PolicerStats struct {
	PermittedPackets uint64 `protobuf:"varint,1,opt,name=permitted_packets,json=permittedPackets" json:"permitted_packets,omitempty"`
	PermittedBytes   uint64 `protobuf:"varint,2,opt,name=permitted_bytes,json=permittedBytes" json:"permitted_bytes,omitempty"`
	DroppedPackets   uint64 `protobuf:"varint,3,opt,name=dropped_packets,json=droppedPackets" json:"dropped_packets,omitempty"`
	DroppedBytes     uint64 `protobuf:"varint,4,opt,name=dropped_bytes,json=droppedBytes" json:"dropped_bytes,omitempty"`
}

func (m *PolicerStats) Reset()                    { *m = PolicerStats{} }
func (m *PolicerStats) String() string            { return proto.CompactTextString(m) }
func (*PolicerStats) ProtoMessage()               {}
func (*PolicerStats) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{3} }

func (m *PolicerStats) GetPermittedPackets() uint64 {
	if m != nil {
		return m.PermittedPackets
	}
	return 0
}

func (m *PolicerStats) GetPermittedBytes() uint64 {
	if m != nil {
		return m.PermittedBytes
	}
	return 0
}

func (m *PolicerStats) GetDroppedPackets() uint64 {
	if m != nil {
		return m.DroppedPackets
	}
	return 0
}

func (m *PolicerStats) GetDroppedBytes() uint64 {
	if m != nil {
		return m.DroppedBytes
	}
	return 0
}

// QosPause specifies the link-level or PFC configuration
type QosPause struct {
	XonThreshold  uint32       `protobuf:"varint,1,opt,name=xon_threshold,json=xonThreshold" json:"xon_threshold,omitempty"`
	XoffThreshold uint32       `protobuf:"varint,2,opt,name=xoff_threshold,json=xoffThreshold" json:"xoff_threshold,omitempty"`
	Type          QosPauseType `protobuf:"varint,3,opt,name=type,enum=qos.QosPauseType" json:"type,omitempty"`
	PfcCos        uint32       `protobuf:"varint,4,opt,name=pfc_cos,json=pfcCos" json:"pfc_cos,omitempty"`
}

func (m *QosPause) Reset()                    { *m = QosPause{} }
func (m *QosPause) String() string            { return proto.CompactTextString(m) }
func (*QosPause) ProtoMessage()               {}
func (*QosPause) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{4} }

func (m *QosPause) GetXonThreshold() uint32 {
	if m != nil {
		return m.XonThreshold
	}
	return 0
}

func (m *QosPause) GetXoffThreshold() uint32 {
	if m != nil {
		return m.XoffThreshold
	}
	return 0
}

func (m *QosPause) GetType() QosPauseType {
	if m != nil {
		return m.Type
	}
	return QosPauseType_QOS_PAUSE_TYPE_NONE
}

func (m *QosPause) GetPfcCos() uint32 {
	if m != nil {
		return m.PfcCos
	}
	return 0
}

// QosSched specifies the QosClass scheduling configuration
type QosSched struct {
	// Types that are valid to be assigned to SchedType:
	//	*QosSched_Dwrr
	//	*QosSched_Strict
	SchedType isQosSched_SchedType `protobuf_oneof:"SchedType"`
}

func (m *QosSched) Reset()                    { *m = QosSched{} }
func (m *QosSched) String() string            { return proto.CompactTextString(m) }
func (*QosSched) ProtoMessage()               {}
func (*QosSched) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{5} }

type isQosSched_SchedType interface{ isQosSched_SchedType() }

type QosSched_Dwrr struct {
	Dwrr *QosSched_DWRRInfo `protobuf:"bytes,1,opt,name=dwrr,oneof"`
}
type QosSched_Strict struct {
	Strict *QosSched_StrictPriorityInfo `protobuf:"bytes,2,opt,name=strict,oneof"`
}

func (*QosSched_Dwrr) isQosSched_SchedType()   {}
func (*QosSched_Strict) isQosSched_SchedType() {}

func (m *QosSched) GetSchedType() isQosSched_SchedType {
	if m != nil {
		return m.SchedType
	}
	return nil
}

func (m *QosSched) GetDwrr() *QosSched_DWRRInfo {
	if x, ok := m.GetSchedType().(*QosSched_Dwrr); ok {
		return x.Dwrr
	}
	return nil
}

func (m *QosSched) GetStrict() *QosSched_StrictPriorityInfo {
	if x, ok := m.GetSchedType().(*QosSched_Strict); ok {
		return x.Strict
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*QosSched) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _QosSched_OneofMarshaler, _QosSched_OneofUnmarshaler, _QosSched_OneofSizer, []interface{}{
		(*QosSched_Dwrr)(nil),
		(*QosSched_Strict)(nil),
	}
}

func _QosSched_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*QosSched)
	// SchedType
	switch x := m.SchedType.(type) {
	case *QosSched_Dwrr:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Dwrr); err != nil {
			return err
		}
	case *QosSched_Strict:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Strict); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("QosSched.SchedType has unexpected type %T", x)
	}
	return nil
}

func _QosSched_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*QosSched)
	switch tag {
	case 1: // SchedType.dwrr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QosSched_DWRRInfo)
		err := b.DecodeMessage(msg)
		m.SchedType = &QosSched_Dwrr{msg}
		return true, err
	case 2: // SchedType.strict
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QosSched_StrictPriorityInfo)
		err := b.DecodeMessage(msg)
		m.SchedType = &QosSched_Strict{msg}
		return true, err
	default:
		return false, nil
	}
}

func _QosSched_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*QosSched)
	// SchedType
	switch x := m.SchedType.(type) {
	case *QosSched_Dwrr:
		s := proto.Size(x.Dwrr)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QosSched_Strict:
		s := proto.Size(x.Strict)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// DWRR specific information
type QosSched_DWRRInfo struct {
	BwPercentage uint32 `protobuf:"varint,1,opt,name=bw_percentage,json=bwPercentage" json:"bw_percentage,omitempty"`
}

func (m *QosSched_DWRRInfo) Reset()                    { *m = QosSched_DWRRInfo{} }
func (m *QosSched_DWRRInfo) String() string            { return proto.CompactTextString(m) }
func (*QosSched_DWRRInfo) ProtoMessage()               {}
func (*QosSched_DWRRInfo) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{5, 0} }

func (m *QosSched_DWRRInfo) GetBwPercentage() uint32 {
	if m != nil {
		return m.BwPercentage
	}
	return 0
}

// Strict Priority specific information for the class
type QosSched_StrictPriorityInfo struct {
	Bps uint64 `protobuf:"varint,1,opt,name=bps" json:"bps,omitempty"`
}

func (m *QosSched_StrictPriorityInfo) Reset()                    { *m = QosSched_StrictPriorityInfo{} }
func (m *QosSched_StrictPriorityInfo) String() string            { return proto.CompactTextString(m) }
func (*QosSched_StrictPriorityInfo) ProtoMessage()               {}
func (*QosSched_StrictPriorityInfo) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{5, 1} }

func (m *QosSched_StrictPriorityInfo) GetBps() uint64 {
	if m != nil {
		return m.Bps
	}
	return 0
}

// QosClassMap specifies the policy with which traffic from network
// is classified
type QosClassMap struct {
	Type     QosClassMapType `protobuf:"varint,1,opt,name=type,enum=qos.QosClassMapType" json:"type,omitempty"`
	Dot1QPcp uint32          `protobuf:"varint,2,opt,name=dot1q_pcp,json=dot1qPcp" json:"dot1q_pcp,omitempty"`
	IpDscp   []uint32        `protobuf:"varint,3,rep,packed,name=ip_dscp,json=ipDscp" json:"ip_dscp,omitempty"`
}

func (m *QosClassMap) Reset()                    { *m = QosClassMap{} }
func (m *QosClassMap) String() string            { return proto.CompactTextString(m) }
func (*QosClassMap) ProtoMessage()               {}
func (*QosClassMap) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{6} }

func (m *QosClassMap) GetType() QosClassMapType {
	if m != nil {
		return m.Type
	}
	return QosClassMapType_QOS_CLASS_MAP_TYPE_NONE
}

func (m *QosClassMap) GetDot1QPcp() uint32 {
	if m != nil {
		return m.Dot1QPcp
	}
	return 0
}

func (m *QosClassMap) GetIpDscp() []uint32 {
	if m != nil {
		return m.IpDscp
	}
	return nil
}

// QosMarking specifies the policy to mark the host-to-network traffic
type QosMarking struct {
	Dot1QPcpRewriteEn bool   `protobuf:"varint,1,opt,name=dot1q_pcp_rewrite_en,json=dot1qPcpRewriteEn" json:"dot1q_pcp_rewrite_en,omitempty"`
	Dot1QPcp          uint32 `protobuf:"varint,2,opt,name=dot1q_pcp,json=dot1qPcp" json:"dot1q_pcp,omitempty"`
	IpDscpRewriteEn   bool   `protobuf:"varint,3,opt,name=ip_dscp_rewrite_en,json=ipDscpRewriteEn" json:"ip_dscp_rewrite_en,omitempty"`
	IpDscp            uint32 `protobuf:"varint,4,opt,name=ip_dscp,json=ipDscp" json:"ip_dscp,omitempty"`
}

func (m *QosMarking) Reset()                    { *m = QosMarking{} }
func (m *QosMarking) String() string            { return proto.CompactTextString(m) }
func (*QosMarking) ProtoMessage()               {}
func (*QosMarking) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{7} }

func (m *QosMarking) GetDot1QPcpRewriteEn() bool {
	if m != nil {
		return m.Dot1QPcpRewriteEn
	}
	return false
}

func (m *QosMarking) GetDot1QPcp() uint32 {
	if m != nil {
		return m.Dot1QPcp
	}
	return 0
}

func (m *QosMarking) GetIpDscpRewriteEn() bool {
	if m != nil {
		return m.IpDscpRewriteEn
	}
	return false
}

func (m *QosMarking) GetIpDscp() uint32 {
	if m != nil {
		return m.IpDscp
	}
	return 0
}

// QosClass specification
type QosClassSpec struct {
	// key_or_handle is QosClass's key or handle
	KeyOrHandle *QosClassKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Mtu         uint32             `protobuf:"varint,2,opt,name=mtu" json:"mtu,omitempty"`
	Pause       *QosPause          `protobuf:"bytes,3,opt,name=pause" json:"pause,omitempty"`
	Sched       *QosSched          `protobuf:"bytes,4,opt,name=sched" json:"sched,omitempty"`
	ClassMap    *QosClassMap       `protobuf:"bytes,5,opt,name=class_map,json=classMap" json:"class_map,omitempty"`
	Marking     *QosMarking        `protobuf:"bytes,6,opt,name=marking" json:"marking,omitempty"`
	NoDrop      bool               `protobuf:"varint,7,opt,name=no_drop,json=noDrop" json:"no_drop,omitempty"`
}

func (m *QosClassSpec) Reset()                    { *m = QosClassSpec{} }
func (m *QosClassSpec) String() string            { return proto.CompactTextString(m) }
func (*QosClassSpec) ProtoMessage()               {}
func (*QosClassSpec) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{8} }

func (m *QosClassSpec) GetKeyOrHandle() *QosClassKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *QosClassSpec) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *QosClassSpec) GetPause() *QosPause {
	if m != nil {
		return m.Pause
	}
	return nil
}

func (m *QosClassSpec) GetSched() *QosSched {
	if m != nil {
		return m.Sched
	}
	return nil
}

func (m *QosClassSpec) GetClassMap() *QosClassMap {
	if m != nil {
		return m.ClassMap
	}
	return nil
}

func (m *QosClassSpec) GetMarking() *QosMarking {
	if m != nil {
		return m.Marking
	}
	return nil
}

func (m *QosClassSpec) GetNoDrop() bool {
	if m != nil {
		return m.NoDrop
	}
	return false
}

// QosClassRequestMsg is batched request to create/update the QosClasss
type QosClassRequestMsg struct {
	Request []*QosClassSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *QosClassRequestMsg) Reset()                    { *m = QosClassRequestMsg{} }
func (m *QosClassRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*QosClassRequestMsg) ProtoMessage()               {}
func (*QosClassRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{9} }

func (m *QosClassRequestMsg) GetRequest() []*QosClassSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

type PacketBufferPort struct {
	PortType PacketBufferPortType `protobuf:"varint,1,opt,name=port_type,json=portType,enum=qos.PacketBufferPortType" json:"port_type,omitempty"`
	PortNum  uint32               `protobuf:"varint,2,opt,name=port_num,json=portNum" json:"port_num,omitempty"`
}

func (m *PacketBufferPort) Reset()                    { *m = PacketBufferPort{} }
func (m *PacketBufferPort) String() string            { return proto.CompactTextString(m) }
func (*PacketBufferPort) ProtoMessage()               {}
func (*PacketBufferPort) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{10} }

func (m *PacketBufferPort) GetPortType() PacketBufferPortType {
	if m != nil {
		return m.PortType
	}
	return PacketBufferPortType_PACKET_BUFFER_PORT_TYPE_DMA
}

func (m *PacketBufferPort) GetPortNum() uint32 {
	if m != nil {
		return m.PortNum
	}
	return 0
}

type QosClassPortStatus struct {
	PacketBufferPort *PacketBufferPort `protobuf:"bytes,1,opt,name=packet_buffer_port,json=packetBufferPort" json:"packet_buffer_port,omitempty"`
	InputQueues      []uint32          `protobuf:"varint,2,rep,packed,name=input_queues,json=inputQueues" json:"input_queues,omitempty"`
	OutputQueues     []uint32          `protobuf:"varint,3,rep,packed,name=output_queues,json=outputQueues" json:"output_queues,omitempty"`
}

func (m *QosClassPortStatus) Reset()                    { *m = QosClassPortStatus{} }
func (m *QosClassPortStatus) String() string            { return proto.CompactTextString(m) }
func (*QosClassPortStatus) ProtoMessage()               {}
func (*QosClassPortStatus) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{11} }

func (m *QosClassPortStatus) GetPacketBufferPort() *PacketBufferPort {
	if m != nil {
		return m.PacketBufferPort
	}
	return nil
}

func (m *QosClassPortStatus) GetInputQueues() []uint32 {
	if m != nil {
		return m.InputQueues
	}
	return nil
}

func (m *QosClassPortStatus) GetOutputQueues() []uint32 {
	if m != nil {
		return m.OutputQueues
	}
	return nil
}

// QosClass oper state for enterprise pipeline
type QosClassStatusEpd struct {
	PortStatus          []*QosClassPortStatus `protobuf:"bytes,1,rep,name=port_status,json=portStatus" json:"port_status,omitempty"`
	TxTrafficClassCoses []uint32              `protobuf:"varint,2,rep,packed,name=tx_traffic_class_coses,json=txTrafficClassCoses" json:"tx_traffic_class_coses,omitempty"`
}

func (m *QosClassStatusEpd) Reset()                    { *m = QosClassStatusEpd{} }
func (m *QosClassStatusEpd) String() string            { return proto.CompactTextString(m) }
func (*QosClassStatusEpd) ProtoMessage()               {}
func (*QosClassStatusEpd) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{12} }

func (m *QosClassStatusEpd) GetPortStatus() []*QosClassPortStatus {
	if m != nil {
		return m.PortStatus
	}
	return nil
}

func (m *QosClassStatusEpd) GetTxTrafficClassCoses() []uint32 {
	if m != nil {
		return m.TxTrafficClassCoses
	}
	return nil
}

// QosClass oper state for cloud pipeline
type QosClassStatusCpd struct {
}

func (m *QosClassStatusCpd) Reset()                    { *m = QosClassStatusCpd{} }
func (m *QosClassStatusCpd) String() string            { return proto.CompactTextString(m) }
func (*QosClassStatusCpd) ProtoMessage()               {}
func (*QosClassStatusCpd) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{13} }

// QosClassStatus represents the operational status of QosClass
type QosClassStatus struct {
	QosClassHandle uint64 `protobuf:"fixed64,1,opt,name=qos_class_handle,json=qosClassHandle" json:"qos_class_handle,omitempty"`
	// Types that are valid to be assigned to QosClassPdStatus:
	//	*QosClassStatus_EpdStatus
	//	*QosClassStatus_CpdStatus
	QosClassPdStatus isQosClassStatus_QosClassPdStatus `protobuf_oneof:"qos_class_pd_status"`
}

func (m *QosClassStatus) Reset()                    { *m = QosClassStatus{} }
func (m *QosClassStatus) String() string            { return proto.CompactTextString(m) }
func (*QosClassStatus) ProtoMessage()               {}
func (*QosClassStatus) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{14} }

type isQosClassStatus_QosClassPdStatus interface{ isQosClassStatus_QosClassPdStatus() }

type QosClassStatus_EpdStatus struct {
	EpdStatus *QosClassStatusEpd `protobuf:"bytes,2,opt,name=epd_status,json=epdStatus,oneof"`
}
type QosClassStatus_CpdStatus struct {
	CpdStatus *QosClassStatusCpd `protobuf:"bytes,3,opt,name=cpd_status,json=cpdStatus,oneof"`
}

func (*QosClassStatus_EpdStatus) isQosClassStatus_QosClassPdStatus() {}
func (*QosClassStatus_CpdStatus) isQosClassStatus_QosClassPdStatus() {}

func (m *QosClassStatus) GetQosClassPdStatus() isQosClassStatus_QosClassPdStatus {
	if m != nil {
		return m.QosClassPdStatus
	}
	return nil
}

func (m *QosClassStatus) GetQosClassHandle() uint64 {
	if m != nil {
		return m.QosClassHandle
	}
	return 0
}

func (m *QosClassStatus) GetEpdStatus() *QosClassStatusEpd {
	if x, ok := m.GetQosClassPdStatus().(*QosClassStatus_EpdStatus); ok {
		return x.EpdStatus
	}
	return nil
}

func (m *QosClassStatus) GetCpdStatus() *QosClassStatusCpd {
	if x, ok := m.GetQosClassPdStatus().(*QosClassStatus_CpdStatus); ok {
		return x.CpdStatus
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*QosClassStatus) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _QosClassStatus_OneofMarshaler, _QosClassStatus_OneofUnmarshaler, _QosClassStatus_OneofSizer, []interface{}{
		(*QosClassStatus_EpdStatus)(nil),
		(*QosClassStatus_CpdStatus)(nil),
	}
}

func _QosClassStatus_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*QosClassStatus)
	// qos_class_pd_status
	switch x := m.QosClassPdStatus.(type) {
	case *QosClassStatus_EpdStatus:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EpdStatus); err != nil {
			return err
		}
	case *QosClassStatus_CpdStatus:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CpdStatus); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("QosClassStatus.QosClassPdStatus has unexpected type %T", x)
	}
	return nil
}

func _QosClassStatus_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*QosClassStatus)
	switch tag {
	case 2: // qos_class_pd_status.epd_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QosClassStatusEpd)
		err := b.DecodeMessage(msg)
		m.QosClassPdStatus = &QosClassStatus_EpdStatus{msg}
		return true, err
	case 3: // qos_class_pd_status.cpd_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QosClassStatusCpd)
		err := b.DecodeMessage(msg)
		m.QosClassPdStatus = &QosClassStatus_CpdStatus{msg}
		return true, err
	default:
		return false, nil
	}
}

func _QosClassStatus_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*QosClassStatus)
	// qos_class_pd_status
	switch x := m.QosClassPdStatus.(type) {
	case *QosClassStatus_EpdStatus:
		s := proto.Size(x.EpdStatus)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QosClassStatus_CpdStatus:
		s := proto.Size(x.CpdStatus)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// QosClassResponse is response to one QosClassSpec
type QosClassResponse struct {
	ApiStatus ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *QosClassStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *QosClassResponse) Reset()                    { *m = QosClassResponse{} }
func (m *QosClassResponse) String() string            { return proto.CompactTextString(m) }
func (*QosClassResponse) ProtoMessage()               {}
func (*QosClassResponse) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{15} }

func (m *QosClassResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *QosClassResponse) GetStatus() *QosClassStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// QosClassResponseMsg is response to QosClassRequestMsg
type QosClassResponseMsg struct {
	Response []*QosClassResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *QosClassResponseMsg) Reset()                    { *m = QosClassResponseMsg{} }
func (m *QosClassResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*QosClassResponseMsg) ProtoMessage()               {}
func (*QosClassResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{16} }

func (m *QosClassResponseMsg) GetResponse() []*QosClassResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// QosClassDeleteRequest  is used to delete a QosClass object
type QosClassDeleteRequest struct {
	// key_or_handle is to identify QosClass being deleted
	KeyOrHandle *QosClassKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *QosClassDeleteRequest) Reset()                    { *m = QosClassDeleteRequest{} }
func (m *QosClassDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*QosClassDeleteRequest) ProtoMessage()               {}
func (*QosClassDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{17} }

func (m *QosClassDeleteRequest) GetKeyOrHandle() *QosClassKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// QosClassDeleteRequestMsg is used to delete a batch of QosClasss
type QosClassDeleteRequestMsg struct {
	Request []*QosClassDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *QosClassDeleteRequestMsg) Reset()                    { *m = QosClassDeleteRequestMsg{} }
func (m *QosClassDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*QosClassDeleteRequestMsg) ProtoMessage()               {}
func (*QosClassDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{18} }

func (m *QosClassDeleteRequestMsg) GetRequest() []*QosClassDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// QosClassDeleteResponse is response to QosClass delete request
type QosClassDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *QosClassDeleteResponse) Reset()                    { *m = QosClassDeleteResponse{} }
func (m *QosClassDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*QosClassDeleteResponse) ProtoMessage()               {}
func (*QosClassDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{19} }

func (m *QosClassDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// QosClassDeleteResponseMsg is batched response to QosClassDeleteRequestMsg
type QosClassDeleteResponseMsg struct {
	Response []*QosClassDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *QosClassDeleteResponseMsg) Reset()                    { *m = QosClassDeleteResponseMsg{} }
func (m *QosClassDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*QosClassDeleteResponseMsg) ProtoMessage()               {}
func (*QosClassDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{20} }

func (m *QosClassDeleteResponseMsg) GetResponse() []*QosClassDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type QosClassInputOflowQueueStats struct {
	GoodPktsIn    uint64 `protobuf:"varint,1,opt,name=good_pkts_in,json=goodPktsIn" json:"good_pkts_in,omitempty"`
	GoodPktsOut   uint64 `protobuf:"varint,2,opt,name=good_pkts_out,json=goodPktsOut" json:"good_pkts_out,omitempty"`
	ErroredPktsIn uint64 `protobuf:"varint,3,opt,name=errored_pkts_in,json=erroredPktsIn" json:"errored_pkts_in,omitempty"`
	FifoDepth     uint32 `protobuf:"varint,4,opt,name=fifo_depth,json=fifoDepth" json:"fifo_depth,omitempty"`
	MaxFifoDepth  uint32 `protobuf:"varint,5,opt,name=max_fifo_depth,json=maxFifoDepth" json:"max_fifo_depth,omitempty"`
}

func (m *QosClassInputOflowQueueStats) Reset()                    { *m = QosClassInputOflowQueueStats{} }
func (m *QosClassInputOflowQueueStats) String() string            { return proto.CompactTextString(m) }
func (*QosClassInputOflowQueueStats) ProtoMessage()               {}
func (*QosClassInputOflowQueueStats) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{21} }

func (m *QosClassInputOflowQueueStats) GetGoodPktsIn() uint64 {
	if m != nil {
		return m.GoodPktsIn
	}
	return 0
}

func (m *QosClassInputOflowQueueStats) GetGoodPktsOut() uint64 {
	if m != nil {
		return m.GoodPktsOut
	}
	return 0
}

func (m *QosClassInputOflowQueueStats) GetErroredPktsIn() uint64 {
	if m != nil {
		return m.ErroredPktsIn
	}
	return 0
}

func (m *QosClassInputOflowQueueStats) GetFifoDepth() uint32 {
	if m != nil {
		return m.FifoDepth
	}
	return 0
}

func (m *QosClassInputOflowQueueStats) GetMaxFifoDepth() uint32 {
	if m != nil {
		return m.MaxFifoDepth
	}
	return 0
}

type QosClassInputQueueStats struct {
	InputQueueIdx   uint32                        `protobuf:"varint,1,opt,name=input_queue_idx,json=inputQueueIdx" json:"input_queue_idx,omitempty"`
	OflowFifoStats  *QosClassInputOflowQueueStats `protobuf:"bytes,2,opt,name=oflow_fifo_stats,json=oflowFifoStats" json:"oflow_fifo_stats,omitempty"`
	BufferOccupancy uint32                        `protobuf:"varint,3,opt,name=buffer_occupancy,json=bufferOccupancy" json:"buffer_occupancy,omitempty"`
	PeakOccupancy   uint32                        `protobuf:"varint,4,opt,name=peak_occupancy,json=peakOccupancy" json:"peak_occupancy,omitempty"`
	PortMonitor     uint64                        `protobuf:"varint,5,opt,name=port_monitor,json=portMonitor" json:"port_monitor,omitempty"`
}

func (m *QosClassInputQueueStats) Reset()                    { *m = QosClassInputQueueStats{} }
func (m *QosClassInputQueueStats) String() string            { return proto.CompactTextString(m) }
func (*QosClassInputQueueStats) ProtoMessage()               {}
func (*QosClassInputQueueStats) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{22} }

func (m *QosClassInputQueueStats) GetInputQueueIdx() uint32 {
	if m != nil {
		return m.InputQueueIdx
	}
	return 0
}

func (m *QosClassInputQueueStats) GetOflowFifoStats() *QosClassInputOflowQueueStats {
	if m != nil {
		return m.OflowFifoStats
	}
	return nil
}

func (m *QosClassInputQueueStats) GetBufferOccupancy() uint32 {
	if m != nil {
		return m.BufferOccupancy
	}
	return 0
}

func (m *QosClassInputQueueStats) GetPeakOccupancy() uint32 {
	if m != nil {
		return m.PeakOccupancy
	}
	return 0
}

func (m *QosClassInputQueueStats) GetPortMonitor() uint64 {
	if m != nil {
		return m.PortMonitor
	}
	return 0
}

type QosClassOutputQueueStats struct {
	OutputQueueIdx uint32 `protobuf:"varint,1,opt,name=output_queue_idx,json=outputQueueIdx" json:"output_queue_idx,omitempty"`
	QueueDepth     uint32 `protobuf:"varint,2,opt,name=queue_depth,json=queueDepth" json:"queue_depth,omitempty"`
	PortMonitor    uint64 `protobuf:"varint,3,opt,name=port_monitor,json=portMonitor" json:"port_monitor,omitempty"`
}

func (m *QosClassOutputQueueStats) Reset()                    { *m = QosClassOutputQueueStats{} }
func (m *QosClassOutputQueueStats) String() string            { return proto.CompactTextString(m) }
func (*QosClassOutputQueueStats) ProtoMessage()               {}
func (*QosClassOutputQueueStats) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{23} }

func (m *QosClassOutputQueueStats) GetOutputQueueIdx() uint32 {
	if m != nil {
		return m.OutputQueueIdx
	}
	return 0
}

func (m *QosClassOutputQueueStats) GetQueueDepth() uint32 {
	if m != nil {
		return m.QueueDepth
	}
	return 0
}

func (m *QosClassOutputQueueStats) GetPortMonitor() uint64 {
	if m != nil {
		return m.PortMonitor
	}
	return 0
}

type QosClassQueueStats struct {
	InputQueueStats  []*QosClassInputQueueStats  `protobuf:"bytes,1,rep,name=input_queue_stats,json=inputQueueStats" json:"input_queue_stats,omitempty"`
	OutputQueueStats []*QosClassOutputQueueStats `protobuf:"bytes,2,rep,name=output_queue_stats,json=outputQueueStats" json:"output_queue_stats,omitempty"`
}

func (m *QosClassQueueStats) Reset()                    { *m = QosClassQueueStats{} }
func (m *QosClassQueueStats) String() string            { return proto.CompactTextString(m) }
func (*QosClassQueueStats) ProtoMessage()               {}
func (*QosClassQueueStats) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{24} }

func (m *QosClassQueueStats) GetInputQueueStats() []*QosClassInputQueueStats {
	if m != nil {
		return m.InputQueueStats
	}
	return nil
}

func (m *QosClassQueueStats) GetOutputQueueStats() []*QosClassOutputQueueStats {
	if m != nil {
		return m.OutputQueueStats
	}
	return nil
}

type QosClassPortStats struct {
	PacketBufferPort *PacketBufferPort   `protobuf:"bytes,1,opt,name=packet_buffer_port,json=packetBufferPort" json:"packet_buffer_port,omitempty"`
	QosQueueStats    *QosClassQueueStats `protobuf:"bytes,2,opt,name=qos_queue_stats,json=qosQueueStats" json:"qos_queue_stats,omitempty"`
}

func (m *QosClassPortStats) Reset()                    { *m = QosClassPortStats{} }
func (m *QosClassPortStats) String() string            { return proto.CompactTextString(m) }
func (*QosClassPortStats) ProtoMessage()               {}
func (*QosClassPortStats) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{25} }

func (m *QosClassPortStats) GetPacketBufferPort() *PacketBufferPort {
	if m != nil {
		return m.PacketBufferPort
	}
	return nil
}

func (m *QosClassPortStats) GetQosQueueStats() *QosClassQueueStats {
	if m != nil {
		return m.QosQueueStats
	}
	return nil
}

// QosClassStats captures all the statistics of given QosClass
type QosClassStats struct {
	NumLifsTx uint32               `protobuf:"varint,1,opt,name=num_lifs_tx,json=numLifsTx" json:"num_lifs_tx,omitempty"`
	NumLifsRx uint32               `protobuf:"varint,2,opt,name=num_lifs_rx,json=numLifsRx" json:"num_lifs_rx,omitempty"`
	PortStats []*QosClassPortStats `protobuf:"bytes,3,rep,name=port_stats,json=portStats" json:"port_stats,omitempty"`
}

func (m *QosClassStats) Reset()                    { *m = QosClassStats{} }
func (m *QosClassStats) String() string            { return proto.CompactTextString(m) }
func (*QosClassStats) ProtoMessage()               {}
func (*QosClassStats) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{26} }

func (m *QosClassStats) GetNumLifsTx() uint32 {
	if m != nil {
		return m.NumLifsTx
	}
	return 0
}

func (m *QosClassStats) GetNumLifsRx() uint32 {
	if m != nil {
		return m.NumLifsRx
	}
	return 0
}

func (m *QosClassStats) GetPortStats() []*QosClassPortStats {
	if m != nil {
		return m.PortStats
	}
	return nil
}

// QosClassGetRequest is used to get information about a QosClass
type QosClassGetRequest struct {
	// key_or_handle is to identify QosClass being deleted
	KeyOrHandle *QosClassKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *QosClassGetRequest) Reset()                    { *m = QosClassGetRequest{} }
func (m *QosClassGetRequest) String() string            { return proto.CompactTextString(m) }
func (*QosClassGetRequest) ProtoMessage()               {}
func (*QosClassGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{27} }

func (m *QosClassGetRequest) GetKeyOrHandle() *QosClassKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// Batched request message to get the stats about a batch of QosClasss
type QosClassGetRequestMsg struct {
	Request []*QosClassGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *QosClassGetRequestMsg) Reset()                    { *m = QosClassGetRequestMsg{} }
func (m *QosClassGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*QosClassGetRequestMsg) ProtoMessage()               {}
func (*QosClassGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{28} }

func (m *QosClassGetRequestMsg) GetRequest() []*QosClassGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// QosClassGetResponse captures all the information about a QosClass
type QosClassGetResponse struct {
	ApiStatus ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *QosClassSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *QosClassStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *QosClassStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *QosClassGetResponse) Reset()                    { *m = QosClassGetResponse{} }
func (m *QosClassGetResponse) String() string            { return proto.CompactTextString(m) }
func (*QosClassGetResponse) ProtoMessage()               {}
func (*QosClassGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{29} }

func (m *QosClassGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *QosClassGetResponse) GetSpec() *QosClassSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *QosClassGetResponse) GetStatus() *QosClassStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *QosClassGetResponse) GetStats() *QosClassStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type OccupancyPerQueue struct {
	QueueIdx  uint32 `protobuf:"varint,1,opt,name=queue_idx,json=queueIdx" json:"queue_idx,omitempty"`
	Occupancy uint32 `protobuf:"varint,2,opt,name=occupancy" json:"occupancy,omitempty"`
}

func (m *OccupancyPerQueue) Reset()                    { *m = OccupancyPerQueue{} }
func (m *OccupancyPerQueue) String() string            { return proto.CompactTextString(m) }
func (*OccupancyPerQueue) ProtoMessage()               {}
func (*OccupancyPerQueue) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{30} }

func (m *OccupancyPerQueue) GetQueueIdx() uint32 {
	if m != nil {
		return m.QueueIdx
	}
	return 0
}

func (m *OccupancyPerQueue) GetOccupancy() uint32 {
	if m != nil {
		return m.Occupancy
	}
	return 0
}

type PortOccupancy struct {
	PortNum   uint32               `protobuf:"varint,1,opt,name=port_num,json=portNum" json:"port_num,omitempty"`
	Occupancy []*OccupancyPerQueue `protobuf:"bytes,2,rep,name=occupancy" json:"occupancy,omitempty"`
}

func (m *PortOccupancy) Reset()                    { *m = PortOccupancy{} }
func (m *PortOccupancy) String() string            { return proto.CompactTextString(m) }
func (*PortOccupancy) ProtoMessage()               {}
func (*PortOccupancy) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{31} }

func (m *PortOccupancy) GetPortNum() uint32 {
	if m != nil {
		return m.PortNum
	}
	return 0
}

func (m *PortOccupancy) GetOccupancy() []*OccupancyPerQueue {
	if m != nil {
		return m.Occupancy
	}
	return nil
}

type Thresholds struct {
	HbmContext    uint32 `protobuf:"varint,1,opt,name=hbm_context,json=hbmContext" json:"hbm_context,omitempty"`
	XonThreshold  uint32 `protobuf:"varint,2,opt,name=xon_threshold,json=xonThreshold" json:"xon_threshold,omitempty"`
	XoffThreshold uint32 `protobuf:"varint,3,opt,name=xoff_threshold,json=xoffThreshold" json:"xoff_threshold,omitempty"`
}

func (m *Thresholds) Reset()                    { *m = Thresholds{} }
func (m *Thresholds) String() string            { return proto.CompactTextString(m) }
func (*Thresholds) ProtoMessage()               {}
func (*Thresholds) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{32} }

func (m *Thresholds) GetHbmContext() uint32 {
	if m != nil {
		return m.HbmContext
	}
	return 0
}

func (m *Thresholds) GetXonThreshold() uint32 {
	if m != nil {
		return m.XonThreshold
	}
	return 0
}

func (m *Thresholds) GetXoffThreshold() uint32 {
	if m != nil {
		return m.XoffThreshold
	}
	return 0
}

type QosClassThresholdsGetResponse struct {
	ApiStatus     ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	PortOccupancy []*PortOccupancy `protobuf:"bytes,2,rep,name=port_occupancy,json=portOccupancy" json:"port_occupancy,omitempty"`
	Thresholds    []*Thresholds    `protobuf:"bytes,3,rep,name=thresholds" json:"thresholds,omitempty"`
}

func (m *QosClassThresholdsGetResponse) Reset()                    { *m = QosClassThresholdsGetResponse{} }
func (m *QosClassThresholdsGetResponse) String() string            { return proto.CompactTextString(m) }
func (*QosClassThresholdsGetResponse) ProtoMessage()               {}
func (*QosClassThresholdsGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{33} }

func (m *QosClassThresholdsGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *QosClassThresholdsGetResponse) GetPortOccupancy() []*PortOccupancy {
	if m != nil {
		return m.PortOccupancy
	}
	return nil
}

func (m *QosClassThresholdsGetResponse) GetThresholds() []*Thresholds {
	if m != nil {
		return m.Thresholds
	}
	return nil
}

type QosClassThresholdsGetResponseMsg struct {
	Response []*QosClassThresholdsGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *QosClassThresholdsGetResponseMsg) Reset()         { *m = QosClassThresholdsGetResponseMsg{} }
func (m *QosClassThresholdsGetResponseMsg) String() string { return proto.CompactTextString(m) }
func (*QosClassThresholdsGetResponseMsg) ProtoMessage()    {}
func (*QosClassThresholdsGetResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor25, []int{34}
}

func (m *QosClassThresholdsGetResponseMsg) GetResponse() []*QosClassThresholdsGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type QosClassThresholdsGetRequest struct {
}

func (m *QosClassThresholdsGetRequest) Reset()                    { *m = QosClassThresholdsGetRequest{} }
func (m *QosClassThresholdsGetRequest) String() string            { return proto.CompactTextString(m) }
func (*QosClassThresholdsGetRequest) ProtoMessage()               {}
func (*QosClassThresholdsGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{35} }

type QosClassThresholdsGetRequestMsg struct {
	Request []*QosClassThresholdsGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *QosClassThresholdsGetRequestMsg) Reset()         { *m = QosClassThresholdsGetRequestMsg{} }
func (m *QosClassThresholdsGetRequestMsg) String() string { return proto.CompactTextString(m) }
func (*QosClassThresholdsGetRequestMsg) ProtoMessage()    {}
func (*QosClassThresholdsGetRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor25, []int{36}
}

func (m *QosClassThresholdsGetRequestMsg) GetRequest() []*QosClassThresholdsGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// QosClassGetResponseMsg is response to QosClassGetRequestMsg
type QosClassGetResponseMsg struct {
	Response []*QosClassGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *QosClassGetResponseMsg) Reset()                    { *m = QosClassGetResponseMsg{} }
func (m *QosClassGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*QosClassGetResponseMsg) ProtoMessage()               {}
func (*QosClassGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{37} }

func (m *QosClassGetResponseMsg) GetResponse() []*QosClassGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type QosClassSetGlobalPauseTypeRequest struct {
	PauseType QosPauseType `protobuf:"varint,1,opt,name=pause_type,json=pauseType,enum=qos.QosPauseType" json:"pause_type,omitempty"`
}

func (m *QosClassSetGlobalPauseTypeRequest) Reset()         { *m = QosClassSetGlobalPauseTypeRequest{} }
func (m *QosClassSetGlobalPauseTypeRequest) String() string { return proto.CompactTextString(m) }
func (*QosClassSetGlobalPauseTypeRequest) ProtoMessage()    {}
func (*QosClassSetGlobalPauseTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor25, []int{38}
}

func (m *QosClassSetGlobalPauseTypeRequest) GetPauseType() QosPauseType {
	if m != nil {
		return m.PauseType
	}
	return QosPauseType_QOS_PAUSE_TYPE_NONE
}

type QosClassSetGlobalPauseTypeRequestMsg struct {
	Request []*QosClassSetGlobalPauseTypeRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *QosClassSetGlobalPauseTypeRequestMsg) Reset()         { *m = QosClassSetGlobalPauseTypeRequestMsg{} }
func (m *QosClassSetGlobalPauseTypeRequestMsg) String() string { return proto.CompactTextString(m) }
func (*QosClassSetGlobalPauseTypeRequestMsg) ProtoMessage()    {}
func (*QosClassSetGlobalPauseTypeRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor25, []int{39}
}

func (m *QosClassSetGlobalPauseTypeRequestMsg) GetRequest() []*QosClassSetGlobalPauseTypeRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type QosClassSetGlobalPauseTypeResponseMsg struct {
}

func (m *QosClassSetGlobalPauseTypeResponseMsg) Reset()         { *m = QosClassSetGlobalPauseTypeResponseMsg{} }
func (m *QosClassSetGlobalPauseTypeResponseMsg) String() string { return proto.CompactTextString(m) }
func (*QosClassSetGlobalPauseTypeResponseMsg) ProtoMessage()    {}
func (*QosClassSetGlobalPauseTypeResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor25, []int{40}
}

// Specifications of a Copp
type CoppSpec struct {
	// key_or_handle is Copp's unique identifier
	KeyOrHandle *CoppKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Policer     *PolicerSpec   `protobuf:"bytes,3,opt,name=policer" json:"policer,omitempty"`
}

func (m *CoppSpec) Reset()                    { *m = CoppSpec{} }
func (m *CoppSpec) String() string            { return proto.CompactTextString(m) }
func (*CoppSpec) ProtoMessage()               {}
func (*CoppSpec) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{41} }

func (m *CoppSpec) GetKeyOrHandle() *CoppKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *CoppSpec) GetPolicer() *PolicerSpec {
	if m != nil {
		return m.Policer
	}
	return nil
}

// Batched requests to create/update Copps
type CoppRequestMsg struct {
	Request []*CoppSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CoppRequestMsg) Reset()                    { *m = CoppRequestMsg{} }
func (m *CoppRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CoppRequestMsg) ProtoMessage()               {}
func (*CoppRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{42} }

func (m *CoppRequestMsg) GetRequest() []*CoppSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// Copp oper state for enterprise pipeline
type CoppStatusEpd struct {
	HwPolicerIdx uint32 `protobuf:"varint,1,opt,name=hw_policer_idx,json=hwPolicerIdx" json:"hw_policer_idx,omitempty"`
}

func (m *CoppStatusEpd) Reset()                    { *m = CoppStatusEpd{} }
func (m *CoppStatusEpd) String() string            { return proto.CompactTextString(m) }
func (*CoppStatusEpd) ProtoMessage()               {}
func (*CoppStatusEpd) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{43} }

func (m *CoppStatusEpd) GetHwPolicerIdx() uint32 {
	if m != nil {
		return m.HwPolicerIdx
	}
	return 0
}

// Copp oper state for cloud pipeline
type CoppStatusCpd struct {
}

func (m *CoppStatusCpd) Reset()                    { *m = CoppStatusCpd{} }
func (m *CoppStatusCpd) String() string            { return proto.CompactTextString(m) }
func (*CoppStatusCpd) ProtoMessage()               {}
func (*CoppStatusCpd) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{44} }

type CoppStatus struct {
	CoppHandle uint64 `protobuf:"fixed64,1,opt,name=copp_handle,json=coppHandle" json:"copp_handle,omitempty"`
	// Types that are valid to be assigned to QosClassPdStatus:
	//	*CoppStatus_EpdStatus
	//	*CoppStatus_CpdStatus
	QosClassPdStatus isCoppStatus_QosClassPdStatus `protobuf_oneof:"qos_class_pd_status"`
}

func (m *CoppStatus) Reset()                    { *m = CoppStatus{} }
func (m *CoppStatus) String() string            { return proto.CompactTextString(m) }
func (*CoppStatus) ProtoMessage()               {}
func (*CoppStatus) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{45} }

type isCoppStatus_QosClassPdStatus interface{ isCoppStatus_QosClassPdStatus() }

type CoppStatus_EpdStatus struct {
	EpdStatus *CoppStatusEpd `protobuf:"bytes,2,opt,name=epd_status,json=epdStatus,oneof"`
}
type CoppStatus_CpdStatus struct {
	CpdStatus *CoppStatusCpd `protobuf:"bytes,3,opt,name=cpd_status,json=cpdStatus,oneof"`
}

func (*CoppStatus_EpdStatus) isCoppStatus_QosClassPdStatus() {}
func (*CoppStatus_CpdStatus) isCoppStatus_QosClassPdStatus() {}

func (m *CoppStatus) GetQosClassPdStatus() isCoppStatus_QosClassPdStatus {
	if m != nil {
		return m.QosClassPdStatus
	}
	return nil
}

func (m *CoppStatus) GetCoppHandle() uint64 {
	if m != nil {
		return m.CoppHandle
	}
	return 0
}

func (m *CoppStatus) GetEpdStatus() *CoppStatusEpd {
	if x, ok := m.GetQosClassPdStatus().(*CoppStatus_EpdStatus); ok {
		return x.EpdStatus
	}
	return nil
}

func (m *CoppStatus) GetCpdStatus() *CoppStatusCpd {
	if x, ok := m.GetQosClassPdStatus().(*CoppStatus_CpdStatus); ok {
		return x.CpdStatus
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CoppStatus) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CoppStatus_OneofMarshaler, _CoppStatus_OneofUnmarshaler, _CoppStatus_OneofSizer, []interface{}{
		(*CoppStatus_EpdStatus)(nil),
		(*CoppStatus_CpdStatus)(nil),
	}
}

func _CoppStatus_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CoppStatus)
	// qos_class_pd_status
	switch x := m.QosClassPdStatus.(type) {
	case *CoppStatus_EpdStatus:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EpdStatus); err != nil {
			return err
		}
	case *CoppStatus_CpdStatus:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CpdStatus); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CoppStatus.QosClassPdStatus has unexpected type %T", x)
	}
	return nil
}

func _CoppStatus_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CoppStatus)
	switch tag {
	case 2: // qos_class_pd_status.epd_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoppStatusEpd)
		err := b.DecodeMessage(msg)
		m.QosClassPdStatus = &CoppStatus_EpdStatus{msg}
		return true, err
	case 3: // qos_class_pd_status.cpd_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoppStatusCpd)
		err := b.DecodeMessage(msg)
		m.QosClassPdStatus = &CoppStatus_CpdStatus{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CoppStatus_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CoppStatus)
	// qos_class_pd_status
	switch x := m.QosClassPdStatus.(type) {
	case *CoppStatus_EpdStatus:
		s := proto.Size(x.EpdStatus)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CoppStatus_CpdStatus:
		s := proto.Size(x.CpdStatus)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CoppResponse is response to one Copp
type CoppResponse struct {
	ApiStatus ApiStatus   `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *CoppStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *CoppResponse) Reset()                    { *m = CoppResponse{} }
func (m *CoppResponse) String() string            { return proto.CompactTextString(m) }
func (*CoppResponse) ProtoMessage()               {}
func (*CoppResponse) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{46} }

func (m *CoppResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CoppResponse) GetStatus() *CoppStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Batched responses to create/update Copps
type CoppResponseMsg struct {
	Response []*CoppResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CoppResponseMsg) Reset()                    { *m = CoppResponseMsg{} }
func (m *CoppResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CoppResponseMsg) ProtoMessage()               {}
func (*CoppResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{47} }

func (m *CoppResponseMsg) GetResponse() []*CoppResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// CoppDeleteRequest  is used to delete a Copp object
type CoppDeleteRequest struct {
	// key_or_handle is to identify Copp being deleted
	KeyOrHandle *CoppKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *CoppDeleteRequest) Reset()                    { *m = CoppDeleteRequest{} }
func (m *CoppDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*CoppDeleteRequest) ProtoMessage()               {}
func (*CoppDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{48} }

func (m *CoppDeleteRequest) GetKeyOrHandle() *CoppKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// CoppDeleteRequestMsg is used to delete a batch of Copps
type CoppDeleteRequestMsg struct {
	Request []*CoppDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CoppDeleteRequestMsg) Reset()                    { *m = CoppDeleteRequestMsg{} }
func (m *CoppDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CoppDeleteRequestMsg) ProtoMessage()               {}
func (*CoppDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{49} }

func (m *CoppDeleteRequestMsg) GetRequest() []*CoppDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// CoppDeleteResponse is response to Copp delete request
type CoppDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *CoppDeleteResponse) Reset()                    { *m = CoppDeleteResponse{} }
func (m *CoppDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*CoppDeleteResponse) ProtoMessage()               {}
func (*CoppDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{50} }

func (m *CoppDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// CoppDeleteResponseMsg is batched response to CoppDeleteRequestMsg
type CoppDeleteResponseMsg struct {
	Response []*CoppDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CoppDeleteResponseMsg) Reset()                    { *m = CoppDeleteResponseMsg{} }
func (m *CoppDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CoppDeleteResponseMsg) ProtoMessage()               {}
func (*CoppDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{51} }

func (m *CoppDeleteResponseMsg) GetResponse() []*CoppDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// CoppStats captures all the statistics of given Copp
type CoppStats struct {
	PolicerStats *PolicerStats `protobuf:"bytes,1,opt,name=policer_stats,json=policerStats" json:"policer_stats,omitempty"`
	NumAcls      uint32        `protobuf:"varint,2,opt,name=num_acls,json=numAcls" json:"num_acls,omitempty"`
}

func (m *CoppStats) Reset()                    { *m = CoppStats{} }
func (m *CoppStats) String() string            { return proto.CompactTextString(m) }
func (*CoppStats) ProtoMessage()               {}
func (*CoppStats) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{52} }

func (m *CoppStats) GetPolicerStats() *PolicerStats {
	if m != nil {
		return m.PolicerStats
	}
	return nil
}

func (m *CoppStats) GetNumAcls() uint32 {
	if m != nil {
		return m.NumAcls
	}
	return 0
}

// CoppGetRequest is used to get information about a Copp
type CoppGetRequest struct {
	// key_or_handle is Copp's unique identifier
	KeyOrHandle *CoppKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *CoppGetRequest) Reset()                    { *m = CoppGetRequest{} }
func (m *CoppGetRequest) String() string            { return proto.CompactTextString(m) }
func (*CoppGetRequest) ProtoMessage()               {}
func (*CoppGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{53} }

func (m *CoppGetRequest) GetKeyOrHandle() *CoppKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

type CoppGetRequestMsg struct {
	Request []*CoppGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CoppGetRequestMsg) Reset()                    { *m = CoppGetRequestMsg{} }
func (m *CoppGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CoppGetRequestMsg) ProtoMessage()               {}
func (*CoppGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{54} }

func (m *CoppGetRequestMsg) GetRequest() []*CoppGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// CoppGetResponse captures all the information about a Copp
type CoppGetResponse struct {
	ApiStatus ApiStatus   `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *CoppSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *CoppStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *CoppStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *CoppGetResponse) Reset()                    { *m = CoppGetResponse{} }
func (m *CoppGetResponse) String() string            { return proto.CompactTextString(m) }
func (*CoppGetResponse) ProtoMessage()               {}
func (*CoppGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{55} }

func (m *CoppGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CoppGetResponse) GetSpec() *CoppSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CoppGetResponse) GetStatus() *CoppStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CoppGetResponse) GetStats() *CoppStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// CoppGetResponseMsg is response to CoppGetRequestMsg
type CoppGetResponseMsg struct {
	Response []*CoppGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CoppGetResponseMsg) Reset()                    { *m = CoppGetResponseMsg{} }
func (m *CoppGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CoppGetResponseMsg) ProtoMessage()               {}
func (*CoppGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{56} }

func (m *CoppGetResponseMsg) GetResponse() []*CoppGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*PolicerPPSSpec)(nil), "halproto.PolicerPPSSpec")
	proto.RegisterType((*PolicerBPSSpec)(nil), "halproto.PolicerBPSSpec")
	proto.RegisterType((*PolicerSpec)(nil), "halproto.PolicerSpec")
	proto.RegisterType((*PolicerStats)(nil), "halproto.PolicerStats")
	proto.RegisterType((*QosPause)(nil), "halproto.QosPause")
	proto.RegisterType((*QosSched)(nil), "halproto.QosSched")
	proto.RegisterType((*QosSched_DWRRInfo)(nil), "halproto.QosSched.DWRRInfo")
	proto.RegisterType((*QosSched_StrictPriorityInfo)(nil), "halproto.QosSched.StrictPriorityInfo")
	proto.RegisterType((*QosClassMap)(nil), "halproto.QosClassMap")
	proto.RegisterType((*QosMarking)(nil), "halproto.QosMarking")
	proto.RegisterType((*QosClassSpec)(nil), "halproto.QosClassSpec")
	proto.RegisterType((*QosClassRequestMsg)(nil), "halproto.QosClassRequestMsg")
	proto.RegisterType((*PacketBufferPort)(nil), "halproto.PacketBufferPort")
	proto.RegisterType((*QosClassPortStatus)(nil), "halproto.QosClassPortStatus")
	proto.RegisterType((*QosClassStatusEpd)(nil), "halproto.QosClassStatusEpd")
	proto.RegisterType((*QosClassStatusCpd)(nil), "halproto.QosClassStatusCpd")
	proto.RegisterType((*QosClassStatus)(nil), "halproto.QosClassStatus")
	proto.RegisterType((*QosClassResponse)(nil), "halproto.QosClassResponse")
	proto.RegisterType((*QosClassResponseMsg)(nil), "halproto.QosClassResponseMsg")
	proto.RegisterType((*QosClassDeleteRequest)(nil), "halproto.QosClassDeleteRequest")
	proto.RegisterType((*QosClassDeleteRequestMsg)(nil), "halproto.QosClassDeleteRequestMsg")
	proto.RegisterType((*QosClassDeleteResponse)(nil), "halproto.QosClassDeleteResponse")
	proto.RegisterType((*QosClassDeleteResponseMsg)(nil), "halproto.QosClassDeleteResponseMsg")
	proto.RegisterType((*QosClassInputOflowQueueStats)(nil), "halproto.QosClassInputOflowQueueStats")
	proto.RegisterType((*QosClassInputQueueStats)(nil), "halproto.QosClassInputQueueStats")
	proto.RegisterType((*QosClassOutputQueueStats)(nil), "halproto.QosClassOutputQueueStats")
	proto.RegisterType((*QosClassQueueStats)(nil), "halproto.QosClassQueueStats")
	proto.RegisterType((*QosClassPortStats)(nil), "halproto.QosClassPortStats")
	proto.RegisterType((*QosClassStats)(nil), "halproto.QosClassStats")
	proto.RegisterType((*QosClassGetRequest)(nil), "halproto.QosClassGetRequest")
	proto.RegisterType((*QosClassGetRequestMsg)(nil), "halproto.QosClassGetRequestMsg")
	proto.RegisterType((*QosClassGetResponse)(nil), "halproto.QosClassGetResponse")
	proto.RegisterType((*OccupancyPerQueue)(nil), "halproto.OccupancyPerQueue")
	proto.RegisterType((*PortOccupancy)(nil), "halproto.PortOccupancy")
	proto.RegisterType((*Thresholds)(nil), "halproto.Thresholds")
	proto.RegisterType((*QosClassThresholdsGetResponse)(nil), "halproto.QosClassThresholdsGetResponse")
	proto.RegisterType((*QosClassThresholdsGetResponseMsg)(nil), "halproto.QosClassThresholdsGetResponseMsg")
	proto.RegisterType((*QosClassThresholdsGetRequest)(nil), "halproto.QosClassThresholdsGetRequest")
	proto.RegisterType((*QosClassThresholdsGetRequestMsg)(nil), "halproto.QosClassThresholdsGetRequestMsg")
	proto.RegisterType((*QosClassGetResponseMsg)(nil), "halproto.QosClassGetResponseMsg")
	proto.RegisterType((*QosClassSetGlobalPauseTypeRequest)(nil), "halproto.QosClassSetGlobalPauseTypeRequest")
	proto.RegisterType((*QosClassSetGlobalPauseTypeRequestMsg)(nil), "halproto.QosClassSetGlobalPauseTypeRequestMsg")
	proto.RegisterType((*QosClassSetGlobalPauseTypeResponseMsg)(nil), "halproto.QosClassSetGlobalPauseTypeResponseMsg")
	proto.RegisterType((*CoppSpec)(nil), "halproto.CoppSpec")
	proto.RegisterType((*CoppRequestMsg)(nil), "halproto.CoppRequestMsg")
	proto.RegisterType((*CoppStatusEpd)(nil), "halproto.CoppStatusEpd")
	proto.RegisterType((*CoppStatusCpd)(nil), "halproto.CoppStatusCpd")
	proto.RegisterType((*CoppStatus)(nil), "halproto.CoppStatus")
	proto.RegisterType((*CoppResponse)(nil), "halproto.CoppResponse")
	proto.RegisterType((*CoppResponseMsg)(nil), "halproto.CoppResponseMsg")
	proto.RegisterType((*CoppDeleteRequest)(nil), "halproto.CoppDeleteRequest")
	proto.RegisterType((*CoppDeleteRequestMsg)(nil), "halproto.CoppDeleteRequestMsg")
	proto.RegisterType((*CoppDeleteResponse)(nil), "halproto.CoppDeleteResponse")
	proto.RegisterType((*CoppDeleteResponseMsg)(nil), "halproto.CoppDeleteResponseMsg")
	proto.RegisterType((*CoppStats)(nil), "halproto.CoppStats")
	proto.RegisterType((*CoppGetRequest)(nil), "halproto.CoppGetRequest")
	proto.RegisterType((*CoppGetRequestMsg)(nil), "halproto.CoppGetRequestMsg")
	proto.RegisterType((*CoppGetResponse)(nil), "halproto.CoppGetResponse")
	proto.RegisterType((*CoppGetResponseMsg)(nil), "halproto.CoppGetResponseMsg")
	proto.RegisterEnum("halproto.QosPauseType", QosPauseType_name, QosPauseType_value)
	proto.RegisterEnum("halproto.QosClassMapType", QosClassMapType_name, QosClassMapType_value)
	proto.RegisterEnum("halproto.PacketBufferPortType", PacketBufferPortType_name, PacketBufferPortType_value)
}

func init() { proto.RegisterFile("qos.proto", fileDescriptor25) }

var fileDescriptor25 = []byte{
	// 2678 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x1a, 0x49, 0x50, 0x1b, 0xd9,
	0xd5, 0x8d, 0x30, 0xa0, 0x27, 0xb4, 0xf0, 0xc1, 0x80, 0xf1, 0x22, 0xdc, 0xe3, 0x85, 0xb1, 0xc7,
	0x1e, 0x8c, 0xb7, 0xb1, 0x67, 0x45, 0x32, 0x36, 0xc4, 0x0b, 0x4d, 0x83, 0x33, 0x95, 0xa9, 0xd4,
	0xf4, 0xb4, 0x5a, 0x5f, 0x48, 0x05, 0xea, 0xfe, 0x74, 0xb7, 0x82, 0xa8, 0x94, 0x2b, 0xa9, 0xa4,
	0x2a, 0x99, 0x4b, 0x4e, 0x39, 0xe5, 0x94, 0xca, 0x39, 0x55, 0x39, 0xe4, 0x90, 0x43, 0xae, 0x39,
	0xe6, 0x94, 0xca, 0x25, 0x55, 0x49, 0x71, 0xcf, 0x95, 0x5b, 0x6e, 0xa9, 0xbf, 0x75, 0xff, 0x6e,
	0x49, 0xd8, 0x4e, 0x18, 0x5f, 0x2c, 0xbd, 0xff, 0xf6, 0xfd, 0x7f, 0x01, 0xd9, 0x3d, 0x2f, 0xb8,
	0x45, 0x7c, 0x2f, 0xf4, 0x50, 0x66, 0xcf, 0x0b, 0xe6, 0x72, 0xe1, 0x01, 0xc1, 0x02, 0x32, 0x37,
	0xb6, 0xd3, 0xe4, 0x9f, 0xf4, 0x7f, 0x69, 0x50, 0x30, 0xbc, 0xdd, 0x96, 0x83, 0x7d, 0xc3, 0xd8,
	0xdc, 0x24, 0xd8, 0x41, 0xdb, 0x50, 0x24, 0xb6, 0xb3, 0x83, 0xc3, 0xc0, 0x22, 0xd8, 0xb7, 0x02,
	0xec, 0xcc, 0x6a, 0xf3, 0xda, 0x42, 0xbe, 0xf2, 0xf9, 0xd1, 0x61, 0xf9, 0xe3, 0x1f, 0x61, 0xb7,
	0xe5, 0xe0, 0x47, 0x6d, 0xdb, 0xad, 0xdb, 0xa1, 0xe7, 0x1f, 0x7c, 0x20, 0x00, 0x8e, 0xe7, 0x06,
	0xa1, 0x6f, 0xb7, 0xdc, 0x30, 0xf8, 0xf4, 0xc7, 0xbe, 0xed, 0x6e, 0xe3, 0x47, 0x77, 0x17, 0x17,
	0x17, 0x6f, 0x2e, 0x2d, 0xca, 0x7f, 0xaf, 0xcd, 0xbc, 0xe0, 0x6b, 0x60, 0x7f, 0x13, 0x3b, 0xc8,
	0x86, 0x7c, 0xad, 0xe3, 0x07, 0xa1, 0x25, 0xc0, 0xb3, 0x43, 0x4c, 0xcc, 0x27, 0x47, 0x87, 0xe5,
	0x8f, 0xde, 0x41, 0x4c, 0x52, 0xc6, 0x38, 0x63, 0x69, 0x70, 0x8e, 0xfa, 0x3f, 0x62, 0xf3, 0x2a,
	0xc2, 0x3c, 0x0c, 0xf9, 0xda, 0x41, 0x88, 0x93, 0xc6, 0x0d, 0x57, 0x96, 0x8f, 0x0e, 0xcb, 0x9f,
	0xbe, 0xab, 0x71, 0xb7, 0x97, 0xee, 0x29, 0xa2, 0x73, 0x8c, 0xaf, 0x30, 0xce, 0x82, 0x1c, 0x37,
	0x8e, 0x01, 0x99, 0x69, 0xc3, 0x95, 0xcf, 0x8e, 0x0e, 0xcb, 0x8f, 0xde, 0xc9, 0xb4, 0xa4, 0x04,
	0x60, 0x2c, 0x2b, 0x94, 0xa3, 0xfe, 0x2b, 0x0d, 0x72, 0xc2, 0x34, 0x66, 0xd7, 0x7d, 0xc8, 0x11,
	0x12, 0x58, 0x84, 0x83, 0x98, 0x55, 0xb9, 0xa5, 0xc9, 0x5b, 0x34, 0x0d, 0x92, 0x01, 0x5e, 0x3d,
	0x65, 0x02, 0x21, 0x81, 0x00, 0x52, 0xba, 0x9a, 0x42, 0x37, 0xd4, 0x4b, 0x57, 0x89, 0xe9, 0x6a,
	0x11, 0x5d, 0xa5, 0x00, 0xe3, 0x82, 0xc6, 0xa2, 0xa9, 0xa5, 0xff, 0x51, 0x83, 0x71, 0xa9, 0x4f,
	0x68, 0x87, 0x01, 0xba, 0x01, 0x13, 0x04, 0xfb, 0xed, 0x56, 0x18, 0xe2, 0x7a, 0x14, 0x62, 0xe6,
	0x6c, 0xb3, 0x14, 0x1d, 0x88, 0x40, 0xa1, 0x6b, 0x50, 0x8c, 0x91, 0x15, 0x97, 0x99, 0x85, 0x08,
	0xcc, 0xcc, 0xa6, 0x88, 0x75, 0xdf, 0x23, 0x44, 0xe1, 0x99, 0xe1, 0x88, 0x02, 0x2c, 0x39, 0xbe,
	0x07, 0x79, 0x89, 0xc8, 0xf9, 0x0d, 0x33, 0xb4, 0x71, 0x01, 0xe4, 0x4e, 0xfc, 0xb3, 0x06, 0x63,
	0x1b, 0x5e, 0x60, 0xd8, 0x9d, 0x00, 0x53, 0x8a, 0xae, 0xe7, 0x5a, 0x61, 0xd3, 0xc7, 0x41, 0xd3,
	0xdb, 0xad, 0xf3, 0xb4, 0x37, 0xc7, 0xbb, 0x9e, 0xbb, 0x25, 0x61, 0xe8, 0x0a, 0x14, 0xba, 0x5e,
	0xa3, 0xa1, 0x60, 0xb1, 0xac, 0x35, 0xf3, 0x14, 0xaa, 0xa2, 0x0d, 0x53, 0xaf, 0x30, 0xdd, 0x0a,
	0x4b, 0x13, 0xcc, 0x9d, 0x52, 0xd0, 0xd6, 0x01, 0xc1, 0x26, 0x3b, 0x46, 0x1f, 0xc3, 0x28, 0x69,
	0x38, 0x96, 0xe3, 0x71, 0xf5, 0xf2, 0x15, 0xfd, 0xe8, 0xb0, 0x7c, 0xf1, 0xb8, 0x84, 0x78, 0xf0,
	0xda, 0x1c, 0x21, 0x0d, 0xa7, 0xea, 0x05, 0xfa, 0x4f, 0x87, 0x98, 0xf2, 0x9b, 0x4e, 0x13, 0xd7,
	0xd1, 0x07, 0x30, 0x5c, 0xdf, 0xf7, 0x65, 0xdc, 0xa7, 0xa5, 0x40, 0x76, 0x78, 0xeb, 0xf1, 0x97,
	0xa6, 0xb9, 0xe6, 0x36, 0xbc, 0xd5, 0x53, 0x26, 0xc3, 0x42, 0x8f, 0x60, 0x24, 0x08, 0xfd, 0x96,
	0x13, 0x8a, 0x78, 0xcf, 0x27, 0xf1, 0x37, 0xd9, 0x99, 0xe1, 0xb7, 0x3c, 0xbf, 0x15, 0x1e, 0x08,
	0x4a, 0x41, 0x31, 0xf7, 0x0a, 0xc6, 0x24, 0x3f, 0xb4, 0x06, 0xf9, 0xda, 0x3e, 0xad, 0x24, 0x07,
	0xbb, 0xa1, 0xbd, 0x8d, 0x45, 0xa7, 0xb8, 0x7c, 0x74, 0x58, 0x9e, 0x3f, 0x36, 0xad, 0x79, 0xa9,
	0xee, 0x1b, 0x11, 0xe5, 0xdc, 0x55, 0x40, 0xbd, 0x62, 0x51, 0x09, 0x32, 0x35, 0x22, 0xd3, 0x86,
	0x7e, 0xac, 0xe4, 0x20, 0xcb, 0x94, 0xa4, 0x5e, 0xd4, 0xff, 0xa4, 0x41, 0x6e, 0xc3, 0x0b, 0xaa,
	0xbb, 0x76, 0x10, 0xbc, 0xb0, 0x09, 0x5a, 0x10, 0x6e, 0xd7, 0x98, 0xdb, 0xa7, 0xa4, 0x55, 0xf2,
	0x5c, 0xf1, 0xfc, 0xe7, 0x90, 0xad, 0x7b, 0xe1, 0xed, 0x3d, 0x8b, 0x38, 0x44, 0x34, 0x9e, 0xb7,
	0xf1, 0xfd, 0x18, 0x23, 0x32, 0x1c, 0x82, 0x3e, 0x81, 0xd1, 0x16, 0xb1, 0xea, 0x81, 0x43, 0x66,
	0x33, 0xf3, 0x99, 0x85, 0x7c, 0xe5, 0xbd, 0xa3, 0xc3, 0x72, 0xf9, 0x38, 0xf2, 0xfb, 0x77, 0x5e,
	0x9b, 0x23, 0x2d, 0xf2, 0x38, 0x70, 0x88, 0xfe, 0x6f, 0x0d, 0x60, 0xc3, 0x0b, 0x5e, 0xd8, 0xfe,
	0x4e, 0xcb, 0xdd, 0x46, 0x1f, 0xc2, 0x54, 0xa4, 0x8d, 0xe5, 0xe3, 0x7d, 0xbf, 0x15, 0x62, 0x0b,
	0xbb, 0xcc, 0x8e, 0x31, 0x73, 0x42, 0x0a, 0x35, 0xf9, 0xc9, 0x8a, 0xfb, 0xff, 0xab, 0x7f, 0x03,
	0x90, 0x50, 0x5f, 0x95, 0x97, 0x61, 0xf2, 0x8a, 0x5c, 0xc9, 0x58, 0x9a, 0x62, 0x2b, 0x4f, 0xd3,
	0x77, 0xb2, 0xf5, 0x3f, 0x43, 0x30, 0x2e, 0x83, 0xc0, 0x5a, 0xd5, 0x1a, 0xe4, 0x77, 0xf0, 0x81,
	0xe5, 0xf9, 0x56, 0xd3, 0x76, 0xeb, 0xbb, 0x58, 0x24, 0xed, 0x99, 0x5b, 0x3b, 0xcd, 0x28, 0x5a,
	0xcf, 0xf0, 0xc1, 0x2a, 0x3b, 0xac, 0x14, 0x8e, 0x0e, 0xcb, 0x20, 0x64, 0xed, 0xe0, 0x03, 0x33,
	0xb7, 0x83, 0x0f, 0xd6, 0x7d, 0x7e, 0x88, 0x9e, 0x41, 0xa6, 0x1d, 0x76, 0x84, 0x07, 0x1e, 0x1e,
	0x1d, 0x96, 0xef, 0xbd, 0x43, 0x7b, 0xbd, 0x7d, 0x6f, 0x71, 0xf1, 0xe6, 0xc3, 0xa5, 0xdb, 0xf7,
	0x5f, 0x9b, 0x94, 0x0b, 0x7a, 0x0f, 0x4e, 0x13, 0x5a, 0xa0, 0xcc, 0x0d, 0xb9, 0xa5, 0x7c, 0xa2,
	0x6a, 0x4d, 0x7e, 0x86, 0x1e, 0xc2, 0xe9, 0x80, 0xe6, 0x1f, 0xf3, 0x84, 0x82, 0xc4, 0x92, 0xb2,
	0x32, 0x75, 0x74, 0x58, 0x2e, 0xa5, 0x55, 0x30, 0x39, 0x05, 0xba, 0x09, 0x59, 0x87, 0xda, 0x66,
	0xb5, 0x6d, 0x32, 0x7b, 0x9a, 0x91, 0x97, 0xd2, 0x29, 0x6a, 0x8e, 0x39, 0x32, 0x99, 0xdf, 0x87,
	0xd1, 0x36, 0xcf, 0x8f, 0xd9, 0x11, 0x86, 0x5c, 0x94, 0xc8, 0x22, 0x6d, 0x4c, 0x79, 0x8e, 0x66,
	0x60, 0xd4, 0xf5, 0x2c, 0xda, 0xda, 0x66, 0x47, 0x59, 0x08, 0x47, 0x5c, 0xef, 0xb1, 0xef, 0x11,
	0x7d, 0x19, 0x90, 0x64, 0x6e, 0xe2, 0xbd, 0x0e, 0x0e, 0xc2, 0x17, 0xc1, 0x36, 0xba, 0x01, 0xa3,
	0x3e, 0xff, 0x36, 0xab, 0xcd, 0x67, 0x16, 0x72, 0x71, 0x83, 0x8a, 0x82, 0x64, 0x4a, 0x0c, 0x1d,
	0x43, 0x89, 0xf7, 0xd4, 0x4a, 0xa7, 0xd1, 0xc0, 0xbe, 0xe1, 0xf9, 0x21, 0xba, 0x0f, 0x59, 0xe2,
	0xf9, 0xa1, 0xa5, 0x14, 0xdb, 0x59, 0x3e, 0x32, 0x52, 0x98, 0xac, 0xe2, 0xc6, 0x88, 0xf8, 0x84,
	0xce, 0x02, 0xfb, 0x6c, 0xb9, 0x9d, 0xb6, 0xe8, 0x9b, 0xa3, 0xf4, 0xfb, 0xcb, 0x4e, 0x5b, 0xff,
	0x9d, 0x16, 0xab, 0x4a, 0x29, 0xe9, 0x10, 0xe9, 0x04, 0xa8, 0x0a, 0x88, 0xf7, 0x79, 0xab, 0xc6,
	0x98, 0x5a, 0x14, 0x3f, 0x4a, 0x98, 0x7e, 0x22, 0xcd, 0x12, 0x49, 0xab, 0x7b, 0x09, 0xc6, 0x5b,
	0x2e, 0xe9, 0x84, 0xd6, 0x5e, 0x07, 0x77, 0xd8, 0x68, 0xc9, 0x2c, 0xe4, 0xcd, 0x1c, 0x83, 0x6d,
	0x30, 0x10, 0x6d, 0xfe, 0x5e, 0x27, 0x54, 0x70, 0x58, 0x51, 0x9b, 0xe3, 0x1c, 0xc8, 0x91, 0xf4,
	0x9f, 0x69, 0x30, 0x11, 0x39, 0x89, 0xe9, 0xb7, 0x42, 0xea, 0xe8, 0x23, 0xc8, 0x31, 0xa3, 0x02,
	0x06, 0x11, 0x1e, 0x9d, 0x49, 0x78, 0x34, 0x36, 0xc8, 0x04, 0x12, 0x1b, 0x77, 0x07, 0xa6, 0xc3,
	0xae, 0x15, 0xfa, 0x76, 0xa3, 0xd1, 0x72, 0x2c, 0x9e, 0x1b, 0x8e, 0x17, 0x44, 0x1a, 0x4e, 0x86,
	0xdd, 0x2d, 0x7e, 0xc8, 0xb8, 0x54, 0xe9, 0x91, 0x3e, 0x99, 0xd6, 0xa1, 0x4a, 0xea, 0xfa, 0x5f,
	0x34, 0x28, 0x24, 0xa1, 0x68, 0x01, 0x4a, 0x7b, 0x5e, 0x20, 0xb8, 0x2a, 0x85, 0x36, 0x62, 0x16,
	0xf6, 0x04, 0xa6, 0x28, 0xa2, 0x07, 0x00, 0x98, 0xd4, 0xa5, 0xfe, 0x43, 0xc9, 0x09, 0x92, 0x34,
	0x76, 0xf5, 0x94, 0x99, 0xc5, 0xa4, 0x2e, 0x44, 0x3c, 0x00, 0x70, 0x62, 0xc2, 0xcc, 0x40, 0xc2,
	0x2a, 0x27, 0x74, 0x24, 0x61, 0xe5, 0x0c, 0x4c, 0xc6, 0xba, 0x45, 0x1c, 0xf4, 0x5f, 0x6a, 0x50,
	0x8a, 0xd3, 0x35, 0x20, 0x9e, 0x1b, 0x60, 0xf4, 0x04, 0xc0, 0x26, 0xad, 0xd8, 0xbb, 0x34, 0xd9,
	0x4a, 0xb7, 0xf8, 0x3a, 0xbb, 0x4c, 0x5a, 0x92, 0xe3, 0xd1, 0x61, 0x79, 0x42, 0x14, 0x5e, 0x8c,
	0x6e, 0x66, 0x6d, 0x89, 0x81, 0x6e, 0xd0, 0x99, 0xa7, 0x58, 0x38, 0xd9, 0x47, 0x51, 0x53, 0xa0,
	0xe8, 0xab, 0x30, 0x99, 0x56, 0x84, 0x16, 0xce, 0x6d, 0x18, 0xf3, 0xc5, 0x57, 0x11, 0xe7, 0x33,
	0x09, 0x2e, 0x12, 0xd7, 0x8c, 0xd0, 0xf4, 0x1a, 0x9c, 0x91, 0xa7, 0x8f, 0xf1, 0x2e, 0x0e, 0xb1,
	0xa8, 0xc3, 0x13, 0xec, 0x82, 0xba, 0x01, 0xb3, 0x7d, 0x65, 0x50, 0x95, 0xef, 0xa6, 0x6b, 0x7d,
	0x2e, 0xa1, 0x71, 0x02, 0x3f, 0x2e, 0xfa, 0x6f, 0x60, 0x3a, 0x8d, 0x71, 0xb2, 0xe1, 0xd0, 0xb7,
	0xe0, 0x6c, 0x7f, 0x09, 0x54, 0xe9, 0x07, 0x3d, 0x7e, 0x3e, 0xd7, 0x57, 0xeb, 0x1e, 0x6f, 0xff,
	0x4d, 0x83, 0xf3, 0x12, 0x69, 0x8d, 0x96, 0xf7, 0x7a, 0x63, 0xd7, 0xdb, 0x67, 0xe5, 0xcb, 0xb7,
	0xd2, 0x79, 0x18, 0xdf, 0xf6, 0xbc, 0xba, 0x45, 0x76, 0xc2, 0xc0, 0x6a, 0xb9, 0x62, 0xb3, 0x00,
	0x0a, 0x33, 0x76, 0xc2, 0x60, 0xcd, 0x45, 0x3a, 0xe4, 0x63, 0x0c, 0xaf, 0x13, 0x8a, 0x45, 0x34,
	0x27, 0x51, 0xd6, 0x3b, 0x21, 0xba, 0x0a, 0x45, 0xec, 0xfb, 0x9e, 0x8f, 0x63, 0x46, 0x7c, 0x0b,
	0xcd, 0x0b, 0xb0, 0xe0, 0x75, 0x01, 0xa0, 0xd1, 0x6a, 0x78, 0x56, 0x1d, 0x93, 0xb0, 0xc9, 0x67,
	0xa7, 0x99, 0xa5, 0x90, 0xc7, 0x14, 0x80, 0x2e, 0x43, 0xa1, 0x6d, 0x77, 0x2d, 0x05, 0xe5, 0x34,
	0x5f, 0x39, 0xdb, 0x76, 0xf7, 0x89, 0xc4, 0xd2, 0x7f, 0x3e, 0x04, 0x33, 0x09, 0x9b, 0x14, 0x73,
	0xae, 0x42, 0x51, 0xe9, 0x6c, 0x56, 0xab, 0xde, 0x15, 0x5b, 0x6b, 0x3e, 0x6e, 0x6e, 0x6b, 0xf5,
	0x2e, 0x7a, 0x06, 0x25, 0x8f, 0x7a, 0x82, 0xcb, 0xa2, 0xd1, 0x90, 0x65, 0x70, 0x29, 0xe1, 0xd8,
	0x7e, 0x3e, 0x33, 0x0b, 0x8c, 0x94, 0x2a, 0xc4, 0x85, 0xbe, 0x0f, 0x25, 0xd1, 0x8c, 0x3d, 0xc7,
	0xe9, 0x10, 0xdb, 0x75, 0x0e, 0x98, 0xf9, 0x79, 0xb3, 0xc8, 0xe1, 0xeb, 0x12, 0x4c, 0xd7, 0x65,
	0x82, 0xed, 0x1d, 0x05, 0x91, 0x3b, 0x21, 0x4f, 0xa1, 0x31, 0xda, 0x25, 0x7a, 0x99, 0xf0, 0x43,
	0xab, 0xed, 0xb9, 0xad, 0xd0, 0xf3, 0x99, 0x1b, 0x86, 0x4d, 0xd6, 0x56, 0x5f, 0x70, 0x90, 0xfe,
	0xad, 0x16, 0x27, 0xf9, 0x7a, 0xdc, 0x94, 0xb9, 0x46, 0x0b, 0x50, 0x52, 0xbb, 0xb7, 0xe2, 0x87,
	0x82, 0xd2, 0xc0, 0xa9, 0x23, 0xca, 0x90, 0xe3, 0x28, 0xdc, 0xdf, 0x7c, 0x08, 0x01, 0x03, 0xf1,
	0x98, 0xa4, 0x55, 0xc9, 0xf4, 0xaa, 0xf2, 0x7b, 0x65, 0x54, 0x29, 0x4a, 0xac, 0xc2, 0x84, 0x1a,
	0x0b, 0xee, 0x64, 0x9e, 0xbd, 0xe7, 0x7b, 0x9d, 0xac, 0xf8, 0xb7, 0xd8, 0x4a, 0x45, 0xf5, 0x19,
	0xa0, 0x84, 0x39, 0x32, 0x5e, 0x94, 0xd5, 0x85, 0x04, 0xab, 0xb4, 0x27, 0xcc, 0x92, 0x97, 0x82,
	0xe8, 0xbf, 0x51, 0x86, 0x96, 0x9c, 0x43, 0x27, 0x34, 0x57, 0x3f, 0x87, 0x22, 0x6d, 0xe3, 0x49,
	0x25, 0xb5, 0x9e, 0xe9, 0xa7, 0xa8, 0x97, 0xdf, 0xf3, 0x94, 0xaf, 0xfa, 0x2f, 0x34, 0xc8, 0xab,
	0x1d, 0x38, 0x40, 0x17, 0x21, 0xe7, 0x76, 0xda, 0xd6, 0x6e, 0xab, 0x11, 0x58, 0xa1, 0x0c, 0x62,
	0xd6, 0xed, 0xb4, 0x9f, 0xb7, 0x1a, 0xc1, 0x56, 0x37, 0x71, 0xee, 0x77, 0x45, 0xfc, 0xe4, 0xb9,
	0xd9, 0x45, 0xf7, 0x00, 0xa2, 0x61, 0xcc, 0x87, 0x78, 0x7a, 0x24, 0x45, 0x3e, 0x30, 0xb3, 0x72,
	0x14, 0x07, 0xba, 0x15, 0x47, 0xf4, 0x29, 0x0e, 0xbf, 0x83, 0x16, 0xfd, 0xbd, 0x78, 0x0c, 0xc4,
	0x02, 0xf8, 0x48, 0x49, 0xf5, 0xe7, 0xa4, 0xef, 0x62, 0xe4, 0xb8, 0x39, 0xff, 0x53, 0x8b, 0xa7,
	0x13, 0x3b, 0x3f, 0xe1, 0x49, 0x79, 0x05, 0x86, 0x03, 0x82, 0x1d, 0x11, 0xcb, 0x3e, 0xbb, 0x21,
	0x3b, 0x56, 0x06, 0x6a, 0xe6, 0x8d, 0x03, 0x15, 0x2d, 0xc0, 0x69, 0x1e, 0x12, 0xbe, 0x36, 0xa3,
	0x1e, 0xdc, 0xc0, 0xe4, 0x08, 0xfa, 0x4b, 0x98, 0x88, 0x1a, 0x83, 0x81, 0x7d, 0x96, 0x2d, 0xe8,
	0x1c, 0x64, 0xd3, 0x95, 0x3d, 0xb6, 0x27, 0x6b, 0xfa, 0x3c, 0x64, 0xe3, 0xfe, 0x22, 0x32, 0x22,
	0x02, 0xe8, 0xdf, 0x40, 0x9e, 0x86, 0x3c, 0x6e, 0x36, 0xea, 0x12, 0xaa, 0x25, 0x96, 0x50, 0x74,
	0x37, 0xc9, 0x29, 0x4e, 0x9e, 0x1e, 0x8d, 0x54, 0x09, 0x07, 0x00, 0xd1, 0xcd, 0x3f, 0xa0, 0x1d,
	0xa6, 0x59, 0x6b, 0x5b, 0x8e, 0xe7, 0x86, 0xb8, 0x1b, 0x0a, 0x09, 0xd0, 0xac, 0xb5, 0xab, 0x1c,
	0xd2, 0xfb, 0xce, 0x30, 0xf4, 0x56, 0xef, 0x0c, 0x99, 0x3e, 0xef, 0x0c, 0xfa, 0xdf, 0x35, 0xb8,
	0x20, 0xbd, 0x18, 0xeb, 0xf0, 0x5d, 0x24, 0xc5, 0x43, 0x28, 0x30, 0xaf, 0xa5, 0xfd, 0x83, 0xc4,
	0x53, 0x91, 0xe2, 0x61, 0x33, 0x4f, 0x12, 0x0e, 0xff, 0x10, 0x20, 0x32, 0x43, 0xd6, 0x24, 0xbf,
	0xcb, 0xc4, 0x2a, 0x9b, 0x0a, 0x8a, 0x5e, 0x83, 0xf9, 0x63, 0x8d, 0xa2, 0x75, 0xf3, 0x59, 0xcf,
	0x8a, 0xa0, 0x27, 0x72, 0xaa, 0x2f, 0xa1, 0xb2, 0x29, 0x5c, 0x8c, 0x17, 0x85, 0x14, 0x2a, 0x2f,
	0xb2, 0xaf, 0xa1, 0x7c, 0xdc, 0x39, 0x55, 0xe1, 0xe3, 0x74, 0xe9, 0x5e, 0x3a, 0x4e, 0x83, 0x54,
	0x11, 0xbf, 0x8c, 0x37, 0xac, 0x94, 0x65, 0x77, 0x7b, 0x2c, 0x9b, 0xed, 0x6d, 0x09, 0x3d, 0xf6,
	0xbc, 0x82, 0x4b, 0x51, 0x39, 0xe1, 0xf0, 0xe9, 0xae, 0x57, 0xb3, 0x77, 0xe3, 0xe7, 0x26, 0xd1,
	0xd0, 0x16, 0x01, 0xd8, 0x2d, 0x56, 0xbd, 0xb8, 0xf5, 0x79, 0x9c, 0xca, 0x12, 0xf9, 0x51, 0x6f,
	0xc2, 0xe5, 0x37, 0xb2, 0xa5, 0x4a, 0x7f, 0x91, 0xf6, 0xc5, 0xd5, 0x64, 0x85, 0x0f, 0xa2, 0x8d,
	0x1d, 0x72, 0x0d, 0xae, 0x1c, 0x87, 0x1d, 0xf9, 0x47, 0xff, 0xb5, 0x06, 0x63, 0x55, 0x8f, 0x10,
	0xf6, 0x96, 0xb0, 0xd2, 0xbf, 0x45, 0x4f, 0xd0, 0x16, 0x4d, 0x91, 0xde, 0xf2, 0x1d, 0xe1, 0x0b,
	0x18, 0x95, 0x2f, 0xa0, 0x19, 0xe5, 0x62, 0xae, 0x3c, 0xb0, 0x0e, 0xb8, 0xda, 0x4b, 0x32, 0xfd,
	0x21, 0x14, 0xa8, 0x3c, 0xc5, 0x25, 0xd7, 0xd2, 0x2e, 0xe1, 0x6f, 0x05, 0x52, 0xf5, 0xd8, 0xf2,
	0x7b, 0x90, 0x67, 0xc0, 0xe8, 0x46, 0x79, 0x19, 0x0a, 0xcd, 0x7d, 0xf9, 0x24, 0xab, 0xb4, 0xbc,
	0xf1, 0xe6, 0xbe, 0xd0, 0x68, 0xad, 0xde, 0xd5, 0x8b, 0x2a, 0x19, 0xbd, 0x04, 0xfe, 0x41, 0x03,
	0x88, 0x21, 0xb4, 0x11, 0x39, 0x1e, 0x21, 0xc9, 0xbb, 0x1f, 0x50, 0x90, 0x30, 0xfa, 0x4e, 0x9f,
	0x7b, 0x1f, 0x8a, 0x75, 0xec, 0x7f, 0xe7, 0xbb, 0xd3, 0xe7, 0xce, 0x97, 0x26, 0x7a, 0xdb, 0xfb,
	0xde, 0x4f, 0x60, 0x9c, 0xfb, 0xec, 0x84, 0x7b, 0xd5, 0xb5, 0xd4, 0x55, 0xaf, 0x98, 0xd2, 0x2f,
	0xba, 0xe6, 0x7d, 0x01, 0x45, 0x55, 0x01, 0x1a, 0xb5, 0x9b, 0x3d, 0xd5, 0x37, 0x11, 0x51, 0xf7,
	0x29, 0xbb, 0xaf, 0x60, 0x82, 0x9e, 0x24, 0xaf, 0x76, 0x27, 0x93, 0x94, 0xfa, 0x2a, 0x4c, 0xf5,
	0xf0, 0xa6, 0x2a, 0x2e, 0xa6, 0x13, 0x6b, 0x3a, 0xd2, 0x70, 0xc0, 0x75, 0xee, 0x87, 0x80, 0xd4,
	0xd3, 0x13, 0xbe, 0xca, 0x3d, 0x87, 0x33, 0xbd, 0xdc, 0xa9, 0xa2, 0x77, 0x7a, 0x7c, 0x39, 0xd3,
	0xa3, 0x69, 0x8f, 0x47, 0xbf, 0x86, 0xac, 0x8c, 0x54, 0x80, 0xee, 0x43, 0x5e, 0x96, 0x81, 0xdc,
	0xa7, 0xe3, 0x9d, 0x44, 0xfd, 0xb9, 0xc1, 0x94, 0xbf, 0x46, 0x70, 0xba, 0xb3, 0x30, 0x46, 0xd7,
	0x44, 0xdb, 0xd9, 0x0d, 0xe4, 0x43, 0x93, 0xdb, 0x69, 0x2f, 0x3b, 0xbb, 0x81, 0xfe, 0x25, 0x2f,
	0x54, 0x65, 0xcd, 0x3b, 0xa1, 0x70, 0x55, 0x78, 0x2a, 0x24, 0x67, 0xc4, 0xcd, 0x74, 0xac, 0x26,
	0x23, 0x0f, 0xf4, 0x9b, 0x0a, 0x7f, 0xd5, 0x78, 0x46, 0x7e, 0x17, 0x13, 0xfc, 0x52, 0x62, 0xad,
	0x4b, 0x35, 0x23, 0xbe, 0xd2, 0x5d, 0x4b, 0xad, 0x74, 0x83, 0x0a, 0x07, 0x5d, 0x4e, 0xae, 0x73,
	0x85, 0x04, 0x5e, 0xb4, 0xca, 0x3d, 0xe1, 0x69, 0x97, 0x9a, 0x6f, 0x8b, 0x3d, 0x59, 0x31, 0x95,
	0xf4, 0x49, 0x3a, 0x25, 0xae, 0x7f, 0xcd, 0x1e, 0x90, 0xa3, 0x61, 0x80, 0x66, 0x60, 0x72, 0x63,
	0x7d, 0xd3, 0x32, 0x96, 0x5f, 0x6d, 0xae, 0x58, 0x5b, 0x3f, 0x30, 0x56, 0xac, 0x97, 0xeb, 0x2f,
	0x57, 0x4a, 0xa7, 0xd0, 0x05, 0x38, 0x9b, 0x3a, 0x78, 0xbe, 0xf6, 0xf2, 0x99, 0xf5, 0x7c, 0xe5,
	0xfb, 0x2b, 0xcf, 0x4b, 0x1a, 0x9a, 0x06, 0x94, 0x3a, 0x36, 0x9e, 0x54, 0x4b, 0x43, 0xd7, 0xbf,
	0xd5, 0xa0, 0x98, 0xfa, 0x99, 0x00, 0x9d, 0x83, 0x19, 0x8a, 0x5b, 0x7d, 0xbe, 0xbc, 0xb9, 0x69,
	0xbd, 0x58, 0x36, 0x12, 0x72, 0xe6, 0x60, 0xba, 0xcf, 0xa1, 0x51, 0x35, 0x4a, 0xda, 0x00, 0xc2,
	0xc7, 0x9b, 0x55, 0xa3, 0x34, 0x84, 0xca, 0x70, 0xae, 0x3f, 0x21, 0x47, 0xc8, 0x5c, 0xff, 0xad,
	0x06, 0x53, 0xfd, 0x1e, 0x51, 0x29, 0xa5, 0xb1, 0x5c, 0x7d, 0xb6, 0xb2, 0x65, 0x55, 0x5e, 0x3d,
	0x79, 0xb2, 0x62, 0x5a, 0xc6, 0xba, 0xb9, 0x25, 0x78, 0xbf, 0x58, 0x2e, 0x9d, 0x42, 0xf3, 0x70,
	0x7e, 0x10, 0x82, 0x71, 0x77, 0xed, 0x69, 0x49, 0x3b, 0x1e, 0x63, 0xe5, 0x69, 0x69, 0x08, 0xe9,
	0x70, 0x71, 0x10, 0xc6, 0x2b, 0x83, 0xba, 0xb2, 0x94, 0x59, 0xfa, 0xf6, 0x34, 0x64, 0x36, 0xd6,
	0x37, 0xd1, 0x4a, 0xfc, 0xe2, 0x58, 0xf5, 0xb1, 0x1d, 0x62, 0x34, 0x93, 0x7a, 0x0b, 0x93, 0x45,
	0x30, 0x37, 0xdb, 0xf7, 0x91, 0x8c, 0xce, 0xf2, 0x53, 0x2a, 0x9b, 0x57, 0xa4, 0xfe, 0x3f, 0xb3,
	0xd9, 0x88, 0xd9, 0xf0, 0xce, 0x82, 0x2e, 0x0c, 0x7e, 0xe7, 0xa2, 0xcc, 0x2e, 0x1e, 0xf3, 0xa0,
	0xc4, 0x59, 0xae, 0xc6, 0xbf, 0x2d, 0x3d, 0xc5, 0x21, 0x9a, 0x1b, 0x70, 0x2f, 0xa3, 0xcc, 0xce,
	0x0d, 0x5a, 0xd0, 0x38, 0xa7, 0x46, 0x7c, 0xf9, 0x4b, 0x2c, 0x85, 0xe8, 0xf2, 0x1b, 0x17, 0x46,
	0xca, 0xfd, 0xca, 0x9b, 0x17, 0x5b, 0x2e, 0xa7, 0x03, 0x73, 0x83, 0x57, 0x28, 0xf4, 0xfe, 0xdb,
	0x6d, 0x64, 0x54, 0xe2, 0xf5, 0x37, 0xa2, 0xaa, 0x62, 0x1f, 0xf2, 0xb5, 0x43, 0x84, 0x6f, 0x52,
	0x19, 0x97, 0x11, 0xc3, 0xa9, 0x9e, 0x19, 0xca, 0x49, 0x3f, 0x81, 0x51, 0x51, 0xf6, 0x68, 0xba,
	0x4f, 0x63, 0xa4, 0xa4, 0x33, 0xfd, 0x9a, 0x03, 0xa3, 0xae, 0xc0, 0x57, 0x63, 0x4d, 0x7b, 0x97,
	0xfd, 0x25, 0x43, 0x6d, 0x84, 0xfd, 0x77, 0xe7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x8f,
	0x40, 0x07, 0xf9, 0x20, 0x00, 0x00,
}
