// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cpucb.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// CpuCbKeyHandle is used to operate on a cpu_cb either by its key or handle
type CpuCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*CpuCbKeyHandle_CpucbId
	//	*CpuCbKeyHandle_CpucbHandle
	KeyOrHandle isCpuCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *CpuCbKeyHandle) Reset()                    { *m = CpuCbKeyHandle{} }
func (m *CpuCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*CpuCbKeyHandle) ProtoMessage()               {}
func (*CpuCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type isCpuCbKeyHandle_KeyOrHandle interface{ isCpuCbKeyHandle_KeyOrHandle() }

type CpuCbKeyHandle_CpucbId struct {
	CpucbId uint32 `protobuf:"varint,1,opt,name=cpucb_id,json=cpucbId,oneof"`
}
type CpuCbKeyHandle_CpucbHandle struct {
	CpucbHandle uint64 `protobuf:"fixed64,2,opt,name=cpucb_handle,json=cpucbHandle,oneof"`
}

func (*CpuCbKeyHandle_CpucbId) isCpuCbKeyHandle_KeyOrHandle()     {}
func (*CpuCbKeyHandle_CpucbHandle) isCpuCbKeyHandle_KeyOrHandle() {}

func (m *CpuCbKeyHandle) GetKeyOrHandle() isCpuCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *CpuCbKeyHandle) GetCpucbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*CpuCbKeyHandle_CpucbId); ok {
		return x.CpucbId
	}
	return 0
}

func (m *CpuCbKeyHandle) GetCpucbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*CpuCbKeyHandle_CpucbHandle); ok {
		return x.CpucbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CpuCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CpuCbKeyHandle_OneofMarshaler, _CpuCbKeyHandle_OneofUnmarshaler, _CpuCbKeyHandle_OneofSizer, []interface{}{
		(*CpuCbKeyHandle_CpucbId)(nil),
		(*CpuCbKeyHandle_CpucbHandle)(nil),
	}
}

func _CpuCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CpuCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *CpuCbKeyHandle_CpucbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.CpucbId))
	case *CpuCbKeyHandle_CpucbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.CpucbHandle))
	case nil:
	default:
		return fmt.Errorf("CpuCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _CpuCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CpuCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.cpucb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &CpuCbKeyHandle_CpucbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.cpucb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &CpuCbKeyHandle_CpucbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _CpuCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CpuCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *CpuCbKeyHandle_CpucbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.CpucbId))
	case *CpuCbKeyHandle_CpucbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CpuCbSpec captures all the cpu_cb level configuration
type CpuCbSpec struct {
	KeyOrHandle       *CpuCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	DebugDol          uint32          `protobuf:"varint,2,opt,name=debug_dol,json=debugDol" json:"debug_dol,omitempty"`
	DescrAddrOobCount uint64          `protobuf:"varint,3,opt,name=descr_addr_oob_count,json=descrAddrOobCount" json:"descr_addr_oob_count,omitempty"`
}

func (m *CpuCbSpec) Reset()                    { *m = CpuCbSpec{} }
func (m *CpuCbSpec) String() string            { return proto.CompactTextString(m) }
func (*CpuCbSpec) ProtoMessage()               {}
func (*CpuCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CpuCbSpec) GetKeyOrHandle() *CpuCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *CpuCbSpec) GetDebugDol() uint32 {
	if m != nil {
		return m.DebugDol
	}
	return 0
}

func (m *CpuCbSpec) GetDescrAddrOobCount() uint64 {
	if m != nil {
		return m.DescrAddrOobCount
	}
	return 0
}

// CpuCbRequestMsg is batched add or modify cpucb request
type CpuCbRequestMsg struct {
	Request []*CpuCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CpuCbRequestMsg) Reset()                    { *m = CpuCbRequestMsg{} }
func (m *CpuCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbRequestMsg) ProtoMessage()               {}
func (*CpuCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *CpuCbRequestMsg) GetRequest() []*CpuCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// CpuCbStatus is the operational status of a given cpucb
type CpuCbStatus struct {
	CpucbHandle uint64 `protobuf:"fixed64,1,opt,name=cpucb_handle,json=cpucbHandle" json:"cpucb_handle,omitempty"`
}

func (m *CpuCbStatus) Reset()                    { *m = CpuCbStatus{} }
func (m *CpuCbStatus) String() string            { return proto.CompactTextString(m) }
func (*CpuCbStatus) ProtoMessage()               {}
func (*CpuCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *CpuCbStatus) GetCpucbHandle() uint64 {
	if m != nil {
		return m.CpucbHandle
	}
	return 0
}

// CpuCbResponse is response to CpuCbSpec
type CpuCbResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	CpucbStatus *CpuCbStatus `protobuf:"bytes,2,opt,name=cpucb_status,json=cpucbStatus" json:"cpucb_status,omitempty"`
}

func (m *CpuCbResponse) Reset()                    { *m = CpuCbResponse{} }
func (m *CpuCbResponse) String() string            { return proto.CompactTextString(m) }
func (*CpuCbResponse) ProtoMessage()               {}
func (*CpuCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *CpuCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CpuCbResponse) GetCpucbStatus() *CpuCbStatus {
	if m != nil {
		return m.CpucbStatus
	}
	return nil
}

// CpuCbResponseMsg is batched response to CpuCbRequestMsg
type CpuCbResponseMsg struct {
	Response []*CpuCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CpuCbResponseMsg) Reset()                    { *m = CpuCbResponseMsg{} }
func (m *CpuCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbResponseMsg) ProtoMessage()               {}
func (*CpuCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *CpuCbResponseMsg) GetResponse() []*CpuCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// CpuCbDeleteRequest is used to delete a cpucb
type CpuCbDeleteRequest struct {
	KeyOrHandle *CpuCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *CpuCbDeleteRequest) Reset()                    { *m = CpuCbDeleteRequest{} }
func (m *CpuCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*CpuCbDeleteRequest) ProtoMessage()               {}
func (*CpuCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *CpuCbDeleteRequest) GetKeyOrHandle() *CpuCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// CpuCbDeleteRequestMsg is used to delete a batch of cpucbs
type CpuCbDeleteRequestMsg struct {
	Request []*CpuCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CpuCbDeleteRequestMsg) Reset()                    { *m = CpuCbDeleteRequestMsg{} }
func (m *CpuCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbDeleteRequestMsg) ProtoMessage()               {}
func (*CpuCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *CpuCbDeleteRequestMsg) GetRequest() []*CpuCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CpuCbDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *CpuCbDeleteResponse) Reset()                    { *m = CpuCbDeleteResponse{} }
func (m *CpuCbDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*CpuCbDeleteResponse) ProtoMessage()               {}
func (*CpuCbDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *CpuCbDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// CpuCbDeleteResponseMsg is batched response to CpuCbDeleteRequestMsg
type CpuCbDeleteResponseMsg struct {
	Response []*CpuCbDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CpuCbDeleteResponseMsg) Reset()                    { *m = CpuCbDeleteResponseMsg{} }
func (m *CpuCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbDeleteResponseMsg) ProtoMessage()               {}
func (*CpuCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *CpuCbDeleteResponseMsg) GetResponse() []*CpuCbDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// CpuCbGetRequest is used to get information about a cpucb
type CpuCbGetRequest struct {
	KeyOrHandle *CpuCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *CpuCbGetRequest) Reset()                    { *m = CpuCbGetRequest{} }
func (m *CpuCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*CpuCbGetRequest) ProtoMessage()               {}
func (*CpuCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *CpuCbGetRequest) GetKeyOrHandle() *CpuCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// CpuCbGetRequestMsg is batched GET requests for cpucbs
type CpuCbGetRequestMsg struct {
	Request []*CpuCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CpuCbGetRequestMsg) Reset()                    { *m = CpuCbGetRequestMsg{} }
func (m *CpuCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbGetRequestMsg) ProtoMessage()               {}
func (*CpuCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *CpuCbGetRequestMsg) GetRequest() []*CpuCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// CpuCbStats is the statistics object for each cpucb
type CpuCbStats struct {
}

func (m *CpuCbStats) Reset()                    { *m = CpuCbStats{} }
func (m *CpuCbStats) String() string            { return proto.CompactTextString(m) }
func (*CpuCbStats) ProtoMessage()               {}
func (*CpuCbStats) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

// CpuCbGetResponse captures all the information about a cpucb
// only if api_status indicates success, other fields are valid
type CpuCbGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *CpuCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *CpuCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *CpuCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *CpuCbGetResponse) Reset()                    { *m = CpuCbGetResponse{} }
func (m *CpuCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*CpuCbGetResponse) ProtoMessage()               {}
func (*CpuCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *CpuCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CpuCbGetResponse) GetSpec() *CpuCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CpuCbGetResponse) GetStatus() *CpuCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CpuCbGetResponse) GetStats() *CpuCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// CpuCbGetResponseMsg is batched response to CpuCbGetRequestMsg
type CpuCbGetResponseMsg struct {
	Response []*CpuCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CpuCbGetResponseMsg) Reset()                    { *m = CpuCbGetResponseMsg{} }
func (m *CpuCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbGetResponseMsg) ProtoMessage()               {}
func (*CpuCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *CpuCbGetResponseMsg) GetResponse() []*CpuCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*CpuCbKeyHandle)(nil), "halproto.CpuCbKeyHandle")
	proto.RegisterType((*CpuCbSpec)(nil), "halproto.CpuCbSpec")
	proto.RegisterType((*CpuCbRequestMsg)(nil), "halproto.CpuCbRequestMsg")
	proto.RegisterType((*CpuCbStatus)(nil), "halproto.CpuCbStatus")
	proto.RegisterType((*CpuCbResponse)(nil), "halproto.CpuCbResponse")
	proto.RegisterType((*CpuCbResponseMsg)(nil), "halproto.CpuCbResponseMsg")
	proto.RegisterType((*CpuCbDeleteRequest)(nil), "halproto.CpuCbDeleteRequest")
	proto.RegisterType((*CpuCbDeleteRequestMsg)(nil), "halproto.CpuCbDeleteRequestMsg")
	proto.RegisterType((*CpuCbDeleteResponse)(nil), "halproto.CpuCbDeleteResponse")
	proto.RegisterType((*CpuCbDeleteResponseMsg)(nil), "halproto.CpuCbDeleteResponseMsg")
	proto.RegisterType((*CpuCbGetRequest)(nil), "halproto.CpuCbGetRequest")
	proto.RegisterType((*CpuCbGetRequestMsg)(nil), "halproto.CpuCbGetRequestMsg")
	proto.RegisterType((*CpuCbStats)(nil), "halproto.CpuCbStats")
	proto.RegisterType((*CpuCbGetResponse)(nil), "halproto.CpuCbGetResponse")
	proto.RegisterType((*CpuCbGetResponseMsg)(nil), "halproto.CpuCbGetResponseMsg")
}

func init() { proto.RegisterFile("cpucb.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x5d, 0x6f, 0xda, 0x30,
	0x14, 0x25, 0x7c, 0x15, 0x6e, 0x4a, 0x4b, 0xbd, 0x96, 0x52, 0xb6, 0x49, 0xcc, 0x9b, 0x34, 0xd4,
	0x07, 0x5a, 0x51, 0x6d, 0xd2, 0x1e, 0x26, 0xad, 0x05, 0x75, 0x6c, 0xa3, 0x62, 0xca, 0xb4, 0x97,
	0xbd, 0x44, 0x49, 0x6c, 0x51, 0x54, 0x44, 0xb2, 0x38, 0xd1, 0xc4, 0xff, 0xd8, 0xf3, 0x7e, 0xca,
	0x7e, 0xdb, 0x94, 0x6b, 0x07, 0x48, 0x02, 0x2f, 0xac, 0x4f, 0xc4, 0xbe, 0xc7, 0xe7, 0x1e, 0x9f,
	0x7b, 0x2c, 0x40, 0x77, 0xbc, 0xd0, 0xb1, 0xbb, 0x9e, 0xef, 0x06, 0x2e, 0x29, 0xe1, 0xa2, 0xa5,
	0x07, 0x0b, 0x8f, 0x0b, 0xb9, 0x47, 0x1d, 0x38, 0xe8, 0x7b, 0x61, 0xdf, 0xfe, 0xc2, 0x17, 0x43,
	0x6b, 0xce, 0x66, 0x9c, 0x3c, 0x85, 0x0a, 0xe2, 0xcc, 0x29, 0x6b, 0x6a, 0x6d, 0xad, 0x53, 0x1b,
	0xe6, 0x8c, 0x3d, 0xdc, 0xf9, 0xc4, 0xc8, 0x4b, 0xd8, 0x97, 0xc5, 0x7b, 0x04, 0x37, 0xf3, 0x6d,
	0xad, 0x53, 0x1e, 0xe6, 0x0c, 0xd9, 0x47, 0x32, 0xdc, 0x1c, 0x42, 0xed, 0x81, 0x2f, 0x4c, 0xd7,
	0x57, 0x28, 0xfa, 0x5b, 0x83, 0x2a, 0x76, 0xf9, 0xe6, 0x71, 0x87, 0xbc, 0x4b, 0x95, 0xb1, 0x8b,
	0xde, 0x3b, 0xe9, 0x4a, 0xad, 0x49, 0x39, 0x86, 0xfe, 0xc0, 0x17, 0x63, 0x7f, 0xa9, 0xad, 0xca,
	0xb8, 0x1d, 0x4e, 0x4c, 0xe6, 0xce, 0xb0, 0x77, 0xcd, 0xa8, 0xe0, 0xc6, 0xc0, 0x9d, 0x91, 0x0b,
	0x38, 0x66, 0x5c, 0x38, 0xbe, 0x69, 0x31, 0xe6, 0x9b, 0xae, 0x6b, 0x9b, 0x8e, 0x1b, 0xce, 0x83,
	0x66, 0xa1, 0xad, 0x75, 0x8a, 0xc6, 0x11, 0xd6, 0xae, 0x19, 0xf3, 0xc7, 0xae, 0xdd, 0x8f, 0x0a,
	0xf4, 0x3d, 0x1c, 0x62, 0x33, 0x83, 0xff, 0x0c, 0xb9, 0x08, 0xee, 0xc4, 0x84, 0x9c, 0xc3, 0x9e,
	0x2f, 0x57, 0x4d, 0xad, 0x5d, 0xe8, 0xe8, 0xbd, 0xfa, 0xba, 0xaa, 0x48, 0xbe, 0x11, 0x03, 0xe8,
	0x25, 0xe8, 0x72, 0x37, 0xb0, 0x82, 0x50, 0x90, 0x17, 0x29, 0x6b, 0xa2, 0x5b, 0x95, 0x13, 0xc6,
	0xd0, 0x5f, 0x50, 0x53, 0x0d, 0x85, 0xe7, 0xce, 0x05, 0x27, 0x17, 0x00, 0x96, 0x37, 0x35, 0x05,
	0x32, 0xe0, 0x89, 0x83, 0x5e, 0xbd, 0x2b, 0xe7, 0x73, 0xed, 0x4d, 0x25, 0xb3, 0x51, 0xb5, 0xe2,
	0x4f, 0xf2, 0x26, 0x6e, 0xa2, 0x8e, 0xe4, 0xd1, 0x3a, 0x92, 0x10, 0x29, 0x0f, 0xc9, 0xc6, 0x72,
	0x41, 0x07, 0x50, 0x4f, 0x34, 0x8e, 0xae, 0x7a, 0x09, 0x15, 0x5f, 0x2d, 0xd5, 0x5d, 0x8f, 0xd7,
	0x69, 0x62, 0xa8, 0xb1, 0x44, 0xd1, 0x31, 0x10, 0x2c, 0x0d, 0xf8, 0x8c, 0x07, 0x5c, 0xb9, 0xf6,
	0x1f, 0xe3, 0xa4, 0x23, 0x38, 0xc9, 0x12, 0x46, 0xda, 0xae, 0xd2, 0x63, 0x38, 0x5b, 0x67, 0x4b,
	0xc0, 0x57, 0xf3, 0xb8, 0x85, 0x27, 0x89, 0xf2, 0x8e, 0x1e, 0xd3, 0xaf, 0xd0, 0xd8, 0xc0, 0x13,
	0xc9, 0x7a, 0x9b, 0xb1, 0xac, 0xb5, 0x49, 0x57, 0xc6, 0xb8, 0x91, 0x0a, 0xda, 0x47, 0x1e, 0x3c,
	0x82, 0x6b, 0xb7, 0x6a, 0x0c, 0x2b, 0x36, 0x39, 0xce, 0x94, 0x65, 0x8d, 0x75, 0xaa, 0x15, 0x76,
	0xe5, 0xd7, 0x3e, 0xc0, 0x32, 0x30, 0x82, 0xfe, 0xd5, 0x54, 0x46, 0x10, 0xba, 0x6b, 0x3e, 0x5f,
	0x41, 0x51, 0x78, 0xdc, 0x51, 0xb9, 0xcc, 0x3e, 0x1e, 0xac, 0x92, 0x73, 0x28, 0x2b, 0xca, 0xc2,
	0xd6, 0xfc, 0x2a, 0x04, 0x79, 0x0d, 0xa5, 0xe8, 0x4b, 0x34, 0x8b, 0x08, 0x3d, 0x4a, 0x43, 0x85,
	0x21, 0xeb, 0xf4, 0xb3, 0x1a, 0xff, 0x9a, 0x7e, 0x19, 0xa5, 0xf4, 0xcc, 0x4e, 0x33, 0xc6, 0xa4,
	0x07, 0xd6, 0xfb, 0x93, 0x87, 0x12, 0x96, 0xc9, 0x07, 0xf5, 0xc8, 0xfb, 0x3e, 0xb7, 0x02, 0x4e,
	0x1a, 0xc9, 0x27, 0x12, 0xbb, 0xdf, 0x3a, 0xdd, 0xf4, 0x74, 0xee, 0xc4, 0x84, 0xe6, 0x96, 0x0c,
	0xdf, 0x3d, 0xb6, 0x23, 0xc3, 0x48, 0x31, 0xc8, 0x7c, 0x91, 0x67, 0x5b, 0xdf, 0x42, 0xc4, 0xf3,
	0x7c, 0x7b, 0x22, 0x25, 0x5b, 0x1f, 0x2a, 0xf1, 0xcd, 0xc9, 0xd9, 0xe6, 0x8c, 0x44, 0x3c, 0xad,
	0x2d, 0x2e, 0x21, 0xc9, 0x0d, 0xfc, 0xa8, 0xdc, 0x5b, 0x33, 0xfc, 0x0b, 0xb1, 0xcb, 0xf8, 0x73,
	0xf5, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xda, 0x42, 0x60, 0xa0, 0x6c, 0x06, 0x00, 0x00,
}
