// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rawccb.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// RawcCbKeyHandle is used to operate on a rawccb either by its key or handle
type RawcCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*RawcCbKeyHandle_RawccbId
	//	*RawcCbKeyHandle_RawccbHandle
	KeyOrHandle isRawcCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *RawcCbKeyHandle) Reset()                    { *m = RawcCbKeyHandle{} }
func (m *RawcCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*RawcCbKeyHandle) ProtoMessage()               {}
func (*RawcCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor32, []int{0} }

type isRawcCbKeyHandle_KeyOrHandle interface{ isRawcCbKeyHandle_KeyOrHandle() }

type RawcCbKeyHandle_RawccbId struct {
	RawccbId uint32 `protobuf:"varint,1,opt,name=rawccb_id,json=rawccbId,oneof"`
}
type RawcCbKeyHandle_RawccbHandle struct {
	RawccbHandle uint64 `protobuf:"fixed64,2,opt,name=rawccb_handle,json=rawccbHandle,oneof"`
}

func (*RawcCbKeyHandle_RawccbId) isRawcCbKeyHandle_KeyOrHandle()     {}
func (*RawcCbKeyHandle_RawccbHandle) isRawcCbKeyHandle_KeyOrHandle() {}

func (m *RawcCbKeyHandle) GetKeyOrHandle() isRawcCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *RawcCbKeyHandle) GetRawccbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*RawcCbKeyHandle_RawccbId); ok {
		return x.RawccbId
	}
	return 0
}

func (m *RawcCbKeyHandle) GetRawccbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*RawcCbKeyHandle_RawccbHandle); ok {
		return x.RawccbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RawcCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RawcCbKeyHandle_OneofMarshaler, _RawcCbKeyHandle_OneofUnmarshaler, _RawcCbKeyHandle_OneofSizer, []interface{}{
		(*RawcCbKeyHandle_RawccbId)(nil),
		(*RawcCbKeyHandle_RawccbHandle)(nil),
	}
}

func _RawcCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RawcCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *RawcCbKeyHandle_RawccbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.RawccbId))
	case *RawcCbKeyHandle_RawccbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.RawccbHandle))
	case nil:
	default:
		return fmt.Errorf("RawcCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _RawcCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RawcCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.rawccb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &RawcCbKeyHandle_RawccbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.rawccb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &RawcCbKeyHandle_RawccbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _RawcCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RawcCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *RawcCbKeyHandle_RawccbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.RawccbId))
	case *RawcCbKeyHandle_RawccbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RawcCbSpec captures all the rawccb level configuration
type RawcCbSpec struct {
	KeyOrHandle             *RawcCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Pi                      uint32           `protobuf:"varint,2,opt,name=pi" json:"pi,omitempty"`
	Ci                      uint32           `protobuf:"varint,3,opt,name=ci" json:"ci,omitempty"`
	RawccbFlags             uint32           `protobuf:"varint,4,opt,name=rawccb_flags,json=rawccbFlags" json:"rawccb_flags,omitempty"`
	MyTxqBase               uint64           `protobuf:"varint,5,opt,name=my_txq_base,json=myTxqBase" json:"my_txq_base,omitempty"`
	MyTxqRingSizeShift      uint32           `protobuf:"varint,6,opt,name=my_txq_ring_size_shift,json=myTxqRingSizeShift" json:"my_txq_ring_size_shift,omitempty"`
	MyTxqEntrySizeShift     uint32           `protobuf:"varint,7,opt,name=my_txq_entry_size_shift,json=myTxqEntrySizeShift" json:"my_txq_entry_size_shift,omitempty"`
	ChainTxqBase            uint64           `protobuf:"varint,8,opt,name=chain_txq_base,json=chainTxqBase" json:"chain_txq_base,omitempty"`
	ChainTxqRingIndicesAddr uint64           `protobuf:"varint,9,opt,name=chain_txq_ring_indices_addr,json=chainTxqRingIndicesAddr" json:"chain_txq_ring_indices_addr,omitempty"`
	ChainTxqRingSizeShift   uint32           `protobuf:"varint,10,opt,name=chain_txq_ring_size_shift,json=chainTxqRingSizeShift" json:"chain_txq_ring_size_shift,omitempty"`
	ChainTxqEntrySizeShift  uint32           `protobuf:"varint,11,opt,name=chain_txq_entry_size_shift,json=chainTxqEntrySizeShift" json:"chain_txq_entry_size_shift,omitempty"`
	ChainTxqLif             uint32           `protobuf:"varint,12,opt,name=chain_txq_lif,json=chainTxqLif" json:"chain_txq_lif,omitempty"`
	ChainTxqQtype           uint32           `protobuf:"varint,13,opt,name=chain_txq_qtype,json=chainTxqQtype" json:"chain_txq_qtype,omitempty"`
	ChainTxqQid             uint32           `protobuf:"varint,14,opt,name=chain_txq_qid,json=chainTxqQid" json:"chain_txq_qid,omitempty"`
	ChainTxqRing            uint32           `protobuf:"varint,15,opt,name=chain_txq_ring,json=chainTxqRing" json:"chain_txq_ring,omitempty"`
	//
	// 64-bit statistic counters
	StatPktsChain   uint64 `protobuf:"varint,16,opt,name=stat_pkts_chain,json=statPktsChain" json:"stat_pkts_chain,omitempty"`
	StatPktsDiscard uint64 `protobuf:"varint,17,opt,name=stat_pkts_discard,json=statPktsDiscard" json:"stat_pkts_discard,omitempty"`
	//
	// 32-bit saturating statistic counters
	StatCbNotReady      uint32 `protobuf:"varint,18,opt,name=stat_cb_not_ready,json=statCbNotReady" json:"stat_cb_not_ready,omitempty"`
	StatMyTxqEmpty      uint32 `protobuf:"varint,19,opt,name=stat_my_txq_empty,json=statMyTxqEmpty" json:"stat_my_txq_empty,omitempty"`
	StatAolErr          uint32 `protobuf:"varint,20,opt,name=stat_aol_err,json=statAolErr" json:"stat_aol_err,omitempty"`
	StatTxqFull         uint32 `protobuf:"varint,21,opt,name=stat_txq_full,json=statTxqFull" json:"stat_txq_full,omitempty"`
	StatDescSemFreeFull uint32 `protobuf:"varint,22,opt,name=stat_desc_sem_free_full,json=statDescSemFreeFull" json:"stat_desc_sem_free_full,omitempty"`
	StatPageSemFreeFull uint32 `protobuf:"varint,23,opt,name=stat_page_sem_free_full,json=statPageSemFreeFull" json:"stat_page_sem_free_full,omitempty"`
}

func (m *RawcCbSpec) Reset()                    { *m = RawcCbSpec{} }
func (m *RawcCbSpec) String() string            { return proto.CompactTextString(m) }
func (*RawcCbSpec) ProtoMessage()               {}
func (*RawcCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor32, []int{1} }

func (m *RawcCbSpec) GetKeyOrHandle() *RawcCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *RawcCbSpec) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *RawcCbSpec) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

func (m *RawcCbSpec) GetRawccbFlags() uint32 {
	if m != nil {
		return m.RawccbFlags
	}
	return 0
}

func (m *RawcCbSpec) GetMyTxqBase() uint64 {
	if m != nil {
		return m.MyTxqBase
	}
	return 0
}

func (m *RawcCbSpec) GetMyTxqRingSizeShift() uint32 {
	if m != nil {
		return m.MyTxqRingSizeShift
	}
	return 0
}

func (m *RawcCbSpec) GetMyTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.MyTxqEntrySizeShift
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqBase() uint64 {
	if m != nil {
		return m.ChainTxqBase
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqRingIndicesAddr() uint64 {
	if m != nil {
		return m.ChainTxqRingIndicesAddr
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqRingSizeShift() uint32 {
	if m != nil {
		return m.ChainTxqRingSizeShift
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.ChainTxqEntrySizeShift
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqLif() uint32 {
	if m != nil {
		return m.ChainTxqLif
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqQtype() uint32 {
	if m != nil {
		return m.ChainTxqQtype
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqQid() uint32 {
	if m != nil {
		return m.ChainTxqQid
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqRing() uint32 {
	if m != nil {
		return m.ChainTxqRing
	}
	return 0
}

func (m *RawcCbSpec) GetStatPktsChain() uint64 {
	if m != nil {
		return m.StatPktsChain
	}
	return 0
}

func (m *RawcCbSpec) GetStatPktsDiscard() uint64 {
	if m != nil {
		return m.StatPktsDiscard
	}
	return 0
}

func (m *RawcCbSpec) GetStatCbNotReady() uint32 {
	if m != nil {
		return m.StatCbNotReady
	}
	return 0
}

func (m *RawcCbSpec) GetStatMyTxqEmpty() uint32 {
	if m != nil {
		return m.StatMyTxqEmpty
	}
	return 0
}

func (m *RawcCbSpec) GetStatAolErr() uint32 {
	if m != nil {
		return m.StatAolErr
	}
	return 0
}

func (m *RawcCbSpec) GetStatTxqFull() uint32 {
	if m != nil {
		return m.StatTxqFull
	}
	return 0
}

func (m *RawcCbSpec) GetStatDescSemFreeFull() uint32 {
	if m != nil {
		return m.StatDescSemFreeFull
	}
	return 0
}

func (m *RawcCbSpec) GetStatPageSemFreeFull() uint32 {
	if m != nil {
		return m.StatPageSemFreeFull
	}
	return 0
}

// RawcCbRequestMsg is batched add or modify rawccb request
type RawcCbRequestMsg struct {
	Request []*RawcCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawcCbRequestMsg) Reset()                    { *m = RawcCbRequestMsg{} }
func (m *RawcCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawcCbRequestMsg) ProtoMessage()               {}
func (*RawcCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor32, []int{2} }

func (m *RawcCbRequestMsg) GetRequest() []*RawcCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawcCbStatus is the operational status of a given rawccb
type RawcCbStatus struct {
	RawccbHandle uint64 `protobuf:"fixed64,1,opt,name=rawccb_handle,json=rawccbHandle" json:"rawccb_handle,omitempty"`
}

func (m *RawcCbStatus) Reset()                    { *m = RawcCbStatus{} }
func (m *RawcCbStatus) String() string            { return proto.CompactTextString(m) }
func (*RawcCbStatus) ProtoMessage()               {}
func (*RawcCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor32, []int{3} }

func (m *RawcCbStatus) GetRawccbHandle() uint64 {
	if m != nil {
		return m.RawccbHandle
	}
	return 0
}

// RawcCbResponse is response to RawcCbSpec
type RawcCbResponse struct {
	ApiStatus    ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	RawccbStatus *RawcCbStatus `protobuf:"bytes,2,opt,name=rawccb_status,json=rawccbStatus" json:"rawccb_status,omitempty"`
}

func (m *RawcCbResponse) Reset()                    { *m = RawcCbResponse{} }
func (m *RawcCbResponse) String() string            { return proto.CompactTextString(m) }
func (*RawcCbResponse) ProtoMessage()               {}
func (*RawcCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor32, []int{4} }

func (m *RawcCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RawcCbResponse) GetRawccbStatus() *RawcCbStatus {
	if m != nil {
		return m.RawccbStatus
	}
	return nil
}

// RawcCbResponseMsg is batched response to RawcCbRequestMsg
type RawcCbResponseMsg struct {
	Response []*RawcCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RawcCbResponseMsg) Reset()                    { *m = RawcCbResponseMsg{} }
func (m *RawcCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawcCbResponseMsg) ProtoMessage()               {}
func (*RawcCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor32, []int{5} }

func (m *RawcCbResponseMsg) GetResponse() []*RawcCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RawcCbDeleteRequest is used to delete a rawccb
type RawcCbDeleteRequest struct {
	KeyOrHandle *RawcCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *RawcCbDeleteRequest) Reset()                    { *m = RawcCbDeleteRequest{} }
func (m *RawcCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*RawcCbDeleteRequest) ProtoMessage()               {}
func (*RawcCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor32, []int{6} }

func (m *RawcCbDeleteRequest) GetKeyOrHandle() *RawcCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// RawcCbDeleteRequestMsg is used to delete a batch of rawccbs
type RawcCbDeleteRequestMsg struct {
	Request []*RawcCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawcCbDeleteRequestMsg) Reset()                    { *m = RawcCbDeleteRequestMsg{} }
func (m *RawcCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawcCbDeleteRequestMsg) ProtoMessage()               {}
func (*RawcCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor32, []int{7} }

func (m *RawcCbDeleteRequestMsg) GetRequest() []*RawcCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type RawcCbDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *RawcCbDeleteResponse) Reset()                    { *m = RawcCbDeleteResponse{} }
func (m *RawcCbDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*RawcCbDeleteResponse) ProtoMessage()               {}
func (*RawcCbDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor32, []int{8} }

func (m *RawcCbDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// RawcCbDeleteResponseMsg is batched response to RawcCbDeleteRequestMsg
type RawcCbDeleteResponseMsg struct {
	Response []*RawcCbDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RawcCbDeleteResponseMsg) Reset()                    { *m = RawcCbDeleteResponseMsg{} }
func (m *RawcCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawcCbDeleteResponseMsg) ProtoMessage()               {}
func (*RawcCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor32, []int{9} }

func (m *RawcCbDeleteResponseMsg) GetResponse() []*RawcCbDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RawcCbGetRequest is used to get information about a rawccb
type RawcCbGetRequest struct {
	KeyOrHandle *RawcCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *RawcCbGetRequest) Reset()                    { *m = RawcCbGetRequest{} }
func (m *RawcCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*RawcCbGetRequest) ProtoMessage()               {}
func (*RawcCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor32, []int{10} }

func (m *RawcCbGetRequest) GetKeyOrHandle() *RawcCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// RawcCbGetRequestMsg is batched GET requests for rawccbs
type RawcCbGetRequestMsg struct {
	Request []*RawcCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawcCbGetRequestMsg) Reset()                    { *m = RawcCbGetRequestMsg{} }
func (m *RawcCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawcCbGetRequestMsg) ProtoMessage()               {}
func (*RawcCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor32, []int{11} }

func (m *RawcCbGetRequestMsg) GetRequest() []*RawcCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawcCbStats is the statistics object for each rawccb
type RawcCbStats struct {
}

func (m *RawcCbStats) Reset()                    { *m = RawcCbStats{} }
func (m *RawcCbStats) String() string            { return proto.CompactTextString(m) }
func (*RawcCbStats) ProtoMessage()               {}
func (*RawcCbStats) Descriptor() ([]byte, []int) { return fileDescriptor32, []int{12} }

// RawcCbGetResponse captures all the information about a rawccb
// only if api_status indicates success, other fields are valid
type RawcCbGetResponse struct {
	ApiStatus ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *RawcCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *RawcCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *RawcCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *RawcCbGetResponse) Reset()                    { *m = RawcCbGetResponse{} }
func (m *RawcCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*RawcCbGetResponse) ProtoMessage()               {}
func (*RawcCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor32, []int{13} }

func (m *RawcCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RawcCbGetResponse) GetSpec() *RawcCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *RawcCbGetResponse) GetStatus() *RawcCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RawcCbGetResponse) GetStats() *RawcCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// RawcCbGetResponseMsg is batched response to RawcCbGetRequestMsg
type RawcCbGetResponseMsg struct {
	Response []*RawcCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RawcCbGetResponseMsg) Reset()                    { *m = RawcCbGetResponseMsg{} }
func (m *RawcCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawcCbGetResponseMsg) ProtoMessage()               {}
func (*RawcCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor32, []int{14} }

func (m *RawcCbGetResponseMsg) GetResponse() []*RawcCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*RawcCbKeyHandle)(nil), "halproto.RawcCbKeyHandle")
	proto.RegisterType((*RawcCbSpec)(nil), "halproto.RawcCbSpec")
	proto.RegisterType((*RawcCbRequestMsg)(nil), "halproto.RawcCbRequestMsg")
	proto.RegisterType((*RawcCbStatus)(nil), "halproto.RawcCbStatus")
	proto.RegisterType((*RawcCbResponse)(nil), "halproto.RawcCbResponse")
	proto.RegisterType((*RawcCbResponseMsg)(nil), "halproto.RawcCbResponseMsg")
	proto.RegisterType((*RawcCbDeleteRequest)(nil), "halproto.RawcCbDeleteRequest")
	proto.RegisterType((*RawcCbDeleteRequestMsg)(nil), "halproto.RawcCbDeleteRequestMsg")
	proto.RegisterType((*RawcCbDeleteResponse)(nil), "halproto.RawcCbDeleteResponse")
	proto.RegisterType((*RawcCbDeleteResponseMsg)(nil), "halproto.RawcCbDeleteResponseMsg")
	proto.RegisterType((*RawcCbGetRequest)(nil), "halproto.RawcCbGetRequest")
	proto.RegisterType((*RawcCbGetRequestMsg)(nil), "halproto.RawcCbGetRequestMsg")
	proto.RegisterType((*RawcCbStats)(nil), "halproto.RawcCbStats")
	proto.RegisterType((*RawcCbGetResponse)(nil), "halproto.RawcCbGetResponse")
	proto.RegisterType((*RawcCbGetResponseMsg)(nil), "halproto.RawcCbGetResponseMsg")
}

func init() { proto.RegisterFile("rawccb.proto", fileDescriptor32) }

var fileDescriptor32 = []byte{
	// 953 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x52, 0x1b, 0x37,
	0x14, 0x8e, 0x0d, 0x31, 0xf8, 0xd8, 0x6b, 0x83, 0x20, 0xb6, 0x80, 0x34, 0x75, 0xb7, 0x6d, 0x86,
	0x74, 0x32, 0x74, 0xc6, 0x69, 0x67, 0xd2, 0x9f, 0x8b, 0xf2, 0x0f, 0xd3, 0x52, 0xc2, 0x3a, 0xbd,
	0xe9, 0xcd, 0x8e, 0xbc, 0x2b, 0xdb, 0x1a, 0xd6, 0xf6, 0x5a, 0x12, 0x13, 0x36, 0xd3, 0xb7, 0xea,
	0x33, 0xf4, 0x45, 0xfa, 0x24, 0x1d, 0x49, 0x2b, 0xd6, 0xbb, 0x38, 0x5c, 0x24, 0xbd, 0x62, 0x75,
	0xce, 0xf7, 0x7d, 0xe7, 0xe8, 0xe8, 0x93, 0x30, 0xd4, 0x39, 0x79, 0x17, 0x04, 0xfd, 0xbd, 0x98,
	0x4f, 0xe5, 0x14, 0x55, 0xcc, 0x6a, 0xbb, 0x26, 0x93, 0x98, 0x0a, 0x13, 0x74, 0x47, 0xd0, 0xf4,
	0xc8, 0xbb, 0xe0, 0xb0, 0xff, 0x2b, 0x4d, 0xce, 0xc8, 0x24, 0x8c, 0x28, 0xfa, 0x0c, 0xaa, 0x06,
	0xe9, 0xb3, 0x10, 0x97, 0x3a, 0xa5, 0x5d, 0xe7, 0xec, 0x91, 0xb7, 0x6a, 0x42, 0xe7, 0x21, 0xfa,
	0x1a, 0x9c, 0x34, 0x3d, 0xd2, 0x78, 0x5c, 0xee, 0x94, 0x76, 0x2b, 0x67, 0x8f, 0xbc, 0xb4, 0x9a,
	0x51, 0x39, 0x68, 0x82, 0x73, 0x4d, 0x13, 0x7f, 0xca, 0x53, 0x98, 0xfb, 0xef, 0x0a, 0x80, 0x29,
	0xd5, 0x8b, 0x69, 0x80, 0x7e, 0x2a, 0xe4, 0x75, 0xa5, 0x5a, 0xb7, 0xbd, 0x97, 0xf6, 0x5c, 0xe8,
	0xca, 0xab, 0x5d, 0xd3, 0xe4, 0x92, 0xa7, 0x2d, 0x36, 0xa0, 0x1c, 0x33, 0x5d, 0xd8, 0xf1, 0xca,
	0x31, 0x53, 0xeb, 0x80, 0xe1, 0x25, 0xb3, 0x0e, 0x18, 0xfa, 0xc2, 0x6e, 0xdd, 0x1f, 0x44, 0x64,
	0x28, 0xf0, 0xb2, 0xce, 0xd4, 0x4c, 0xec, 0x44, 0x85, 0xd0, 0x33, 0xa8, 0x8d, 0x13, 0x5f, 0xde,
	0xce, 0xfc, 0x3e, 0x11, 0x14, 0x3f, 0xee, 0x94, 0x76, 0x97, 0xbd, 0xea, 0x38, 0x79, 0x7b, 0x3b,
	0x3b, 0x20, 0x82, 0xa2, 0x2e, 0xb4, 0xd2, 0x3c, 0x67, 0x93, 0xa1, 0x2f, 0xd8, 0x7b, 0xea, 0x8b,
	0x11, 0x1b, 0x48, 0x5c, 0xd1, 0x62, 0x48, 0x43, 0x3d, 0x36, 0x19, 0xf6, 0xd8, 0x7b, 0xda, 0x53,
	0x19, 0xf4, 0x1d, 0xb4, 0x53, 0x0e, 0x9d, 0x48, 0x9e, 0xcc, 0x93, 0x56, 0x34, 0x69, 0x43, 0x93,
	0x8e, 0x55, 0x32, 0x63, 0x7d, 0x05, 0x8d, 0x60, 0x44, 0xd8, 0x24, 0x6b, 0x66, 0x55, 0x37, 0x53,
	0xd7, 0x51, 0xdb, 0xcf, 0xcf, 0xb0, 0x93, 0xa1, 0x74, 0x4b, 0x6c, 0x12, 0xb2, 0x80, 0x0a, 0x9f,
	0x84, 0x21, 0xc7, 0x55, 0x4d, 0x69, 0x5b, 0x8a, 0xea, 0xeb, 0xdc, 0xe4, 0xf7, 0xc3, 0x90, 0xa3,
	0xd7, 0xb0, 0x55, 0x60, 0xcf, 0xf5, 0x06, 0xba, 0xb7, 0x27, 0xf3, 0xdc, 0xac, 0xbb, 0x1f, 0x61,
	0x3b, 0x63, 0xde, 0xdb, 0x56, 0x4d, 0x53, 0x5b, 0x96, 0x5a, 0xd8, 0x99, 0x0b, 0x4e, 0xc6, 0x8d,
	0xd8, 0x00, 0xd7, 0xcd, 0x39, 0x58, 0xf8, 0x6f, 0x6c, 0x80, 0x9e, 0x43, 0x33, 0xc3, 0xcc, 0x94,
	0x35, 0xb1, 0xa3, 0x51, 0x8e, 0x45, 0x5d, 0xa9, 0x60, 0x5e, 0x6b, 0xc6, 0x42, 0xdc, 0xc8, 0x6b,
	0x5d, 0xb1, 0x30, 0x3f, 0x49, 0xb5, 0x4b, 0xdc, 0xd4, 0xa0, 0xfa, 0xfc, 0xd6, 0x54, 0x45, 0x21,
	0x89, 0xf4, 0xe3, 0x6b, 0x29, 0x7c, 0x9d, 0xc1, 0x6b, 0x7a, 0x7a, 0x8e, 0x0a, 0xbf, 0xb9, 0x96,
	0xe2, 0x50, 0x05, 0xd1, 0x37, 0xb0, 0x9e, 0xe1, 0x42, 0x26, 0x02, 0xc2, 0x43, 0xbc, 0xae, 0x91,
	0x4d, 0x8b, 0x3c, 0x32, 0x61, 0xf4, 0x22, 0xc5, 0x06, 0x7d, 0x7f, 0x32, 0x95, 0x3e, 0xa7, 0x24,
	0x4c, 0x30, 0xd2, 0xc5, 0x1b, 0x2a, 0x71, 0xd8, 0xff, 0x7d, 0x2a, 0x3d, 0x15, 0xbd, 0x83, 0x5a,
	0xa7, 0x8c, 0x63, 0x99, 0xe0, 0x8d, 0x0c, 0x7a, 0xa1, 0x2d, 0xa2, 0xa2, 0xa8, 0x03, 0x75, 0x0d,
	0x25, 0xd3, 0xc8, 0xa7, 0x9c, 0xe3, 0x4d, 0x8d, 0x02, 0x15, 0xdb, 0x9f, 0x46, 0xc7, 0x9c, 0xab,
	0xa9, 0x68, 0x84, 0x52, 0x1a, 0xdc, 0x44, 0x11, 0x7e, 0x62, 0xa6, 0xa2, 0x82, 0x6f, 0x6f, 0x67,
	0x27, 0x37, 0x51, 0xa4, 0x5c, 0xa9, 0x31, 0x21, 0x15, 0x81, 0x2f, 0xe8, 0xd8, 0x1f, 0x70, 0x4a,
	0x0d, 0xba, 0x65, 0x5c, 0xa9, 0xd2, 0x47, 0x54, 0x04, 0x3d, 0x3a, 0x3e, 0xe1, 0x94, 0xe6, 0x58,
	0x31, 0x19, 0xd2, 0x02, 0xab, 0x9d, 0xb1, 0xde, 0x90, 0x21, 0x9d, 0x63, 0xb9, 0xbf, 0xc0, 0x9a,
	0xb9, 0xb8, 0x1e, 0x9d, 0xdd, 0x50, 0x21, 0x2f, 0xc4, 0x10, 0xbd, 0x84, 0x15, 0x6e, 0x56, 0xb8,
	0xd4, 0x59, 0xda, 0xad, 0x75, 0x51, 0xfe, 0x8e, 0xab, 0xe7, 0xc0, 0xb3, 0x10, 0xf7, 0x15, 0xd4,
	0xd3, 0xb0, 0x24, 0xf2, 0x46, 0xa0, 0x2f, 0x8b, 0xcf, 0x8d, 0x7a, 0x27, 0x2a, 0xf9, 0xc7, 0xc6,
	0xfd, 0x0b, 0x1a, 0xb6, 0xac, 0x88, 0xa7, 0x13, 0x41, 0xd1, 0xb7, 0x00, 0x24, 0x66, 0xbe, 0xd0,
	0x22, 0x9a, 0xd3, 0xe8, 0xae, 0xed, 0x99, 0x97, 0x6f, 0x3f, 0x66, 0x46, 0xdc, 0xab, 0x12, 0xfb,
	0x89, 0x7e, 0xb8, 0xab, 0x93, 0x72, 0xca, 0xfa, 0x3d, 0xda, 0x2c, 0xf4, 0x6a, 0x78, 0x69, 0x75,
	0xb3, 0x72, 0x4f, 0x61, 0x3d, 0x5f, 0x5d, 0xed, 0xba, 0x0b, 0xab, 0x3c, 0x5d, 0xa6, 0xdb, 0x6e,
	0xe5, 0xa5, 0x2c, 0xd8, 0xbb, 0xc3, 0xb9, 0x1e, 0x6c, 0x98, 0xdc, 0x11, 0x8d, 0xa8, 0xa4, 0xe9,
	0x0c, 0x3f, 0xe9, 0xa9, 0x74, 0x2f, 0xa1, 0xb5, 0x40, 0x53, 0x75, 0xf8, 0x7d, 0xf1, 0x5c, 0x76,
	0xf2, 0x82, 0x39, 0x42, 0x76, 0x40, 0xa7, 0xb0, 0x99, 0xcf, 0x7f, 0xe4, 0xc4, 0xdd, 0x1e, 0xb4,
	0x17, 0x09, 0xa9, 0xd6, 0x5e, 0xdf, 0x1b, 0xde, 0xd3, 0xc5, 0xbd, 0xdd, 0x1b, 0xe1, 0xa5, 0x35,
	0xe0, 0x29, 0x95, 0xff, 0xcb, 0xfc, 0xce, 0xed, 0x99, 0x64, 0x82, 0xe6, 0x78, 0x0b, 0xc3, 0xc3,
	0x79, 0xb5, 0x0c, 0x9d, 0x4d, 0xce, 0x81, 0x5a, 0xe6, 0x22, 0xe1, 0xfe, 0x53, 0xb2, 0xbe, 0xd1,
	0xe0, 0x8f, 0x35, 0xee, 0x73, 0x58, 0x16, 0x31, 0x0d, 0x52, 0xbf, 0x2e, 0xba, 0x5b, 0x3a, 0x8f,
	0x5e, 0x42, 0x25, 0x15, 0x5d, 0x7a, 0xc0, 0xd9, 0x29, 0x06, 0xbd, 0x80, 0xc7, 0xea, 0xcb, 0xfc,
	0xeb, 0xac, 0x75, 0x37, 0xee, 0x83, 0x85, 0x67, 0x10, 0xee, 0x85, 0x35, 0xc4, 0xdc, 0x36, 0x8c,
	0xbf, 0x8a, 0x87, 0xb8, 0xb5, 0x60, 0x46, 0xc5, 0x13, 0xec, 0xfe, 0x5d, 0x86, 0x8a, 0xc9, 0xa3,
	0x63, 0xfb, 0x16, 0x1c, 0x72, 0x4a, 0x24, 0x45, 0xb8, 0x78, 0x83, 0xec, 0x71, 0x6c, 0x6f, 0x2d,
	0xbe, 0x5b, 0x17, 0x62, 0xe8, 0x3e, 0xca, 0x64, 0xfe, 0x88, 0xc3, 0x4f, 0x90, 0xb9, 0xb2, 0x32,
	0xc6, 0x7c, 0xe8, 0xd9, 0x03, 0xd7, 0x45, 0x89, 0x7d, 0xfe, 0x90, 0x65, 0x8d, 0xe4, 0x19, 0x54,
	0xef, 0x46, 0x81, 0x76, 0x3e, 0xe4, 0x20, 0x25, 0xf6, 0xf4, 0x83, 0xa3, 0xd3, 0x4a, 0x07, 0xf0,
	0xe7, 0xea, 0x88, 0x44, 0xfa, 0x37, 0x5d, 0xbf, 0xa2, 0xff, 0xbc, 0xfa, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0xc8, 0xc5, 0xd0, 0x82, 0xff, 0x09, 0x00, 0x00,
}
