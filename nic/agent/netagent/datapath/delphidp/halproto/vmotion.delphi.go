// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vmotion.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VmotionMessageType int32

const (
	VmotionMessageType_VMOTION_MSG_TYPE_INIT          VmotionMessageType = 0
	VmotionMessageType_VMOTION_MSG_TYPE_SYNC          VmotionMessageType = 1
	VmotionMessageType_VMOTION_MSG_TYPE_SYNC_END      VmotionMessageType = 2
	VmotionMessageType_VMOTION_MSG_TYPE_TERM_SYNC_REQ VmotionMessageType = 3
	VmotionMessageType_VMOTION_MSG_TYPE_TERM_SYNC     VmotionMessageType = 4
	VmotionMessageType_VMOTION_MSG_TYPE_TERM_SYNC_END VmotionMessageType = 5
	VmotionMessageType_VMOTION_MSG_TYPE_TERM_SYNC_ACK VmotionMessageType = 6
	VmotionMessageType_VMOTION_MSG_TYPE_EP_MOVED      VmotionMessageType = 7
	VmotionMessageType_VMOTION_MSG_TYPE_EP_MOVED_ACK  VmotionMessageType = 8
)

var VmotionMessageType_name = map[int32]string{
	0: "VMOTION_MSG_TYPE_INIT",
	1: "VMOTION_MSG_TYPE_SYNC",
	2: "VMOTION_MSG_TYPE_SYNC_END",
	3: "VMOTION_MSG_TYPE_TERM_SYNC_REQ",
	4: "VMOTION_MSG_TYPE_TERM_SYNC",
	5: "VMOTION_MSG_TYPE_TERM_SYNC_END",
	6: "VMOTION_MSG_TYPE_TERM_SYNC_ACK",
	7: "VMOTION_MSG_TYPE_EP_MOVED",
	8: "VMOTION_MSG_TYPE_EP_MOVED_ACK",
}
var VmotionMessageType_value = map[string]int32{
	"VMOTION_MSG_TYPE_INIT":          0,
	"VMOTION_MSG_TYPE_SYNC":          1,
	"VMOTION_MSG_TYPE_SYNC_END":      2,
	"VMOTION_MSG_TYPE_TERM_SYNC_REQ": 3,
	"VMOTION_MSG_TYPE_TERM_SYNC":     4,
	"VMOTION_MSG_TYPE_TERM_SYNC_END": 5,
	"VMOTION_MSG_TYPE_TERM_SYNC_ACK": 6,
	"VMOTION_MSG_TYPE_EP_MOVED":      7,
	"VMOTION_MSG_TYPE_EP_MOVED_ACK":  8,
}

func (x VmotionMessageType) String() string {
	return proto.EnumName(VmotionMessageType_name, int32(x))
}
func (VmotionMessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor34, []int{0} }

type VmotionMessageStatus int32

const (
	VmotionMessageStatus_STATUS_OK  VmotionMessageStatus = 0
	VmotionMessageStatus_STATUS_ERR VmotionMessageStatus = 1
)

var VmotionMessageStatus_name = map[int32]string{
	0: "STATUS_OK",
	1: "STATUS_ERR",
}
var VmotionMessageStatus_value = map[string]int32{
	"STATUS_OK":  0,
	"STATUS_ERR": 1,
}

func (x VmotionMessageStatus) String() string {
	return proto.EnumName(VmotionMessageStatus_name, int32(x))
}
func (VmotionMessageStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor34, []int{1} }

type VmotionInitiate struct {
	MacAddress uint64 `protobuf:"varint,1,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
}

func (m *VmotionInitiate) Reset()                    { *m = VmotionInitiate{} }
func (m *VmotionInitiate) String() string            { return proto.CompactTextString(m) }
func (*VmotionInitiate) ProtoMessage()               {}
func (*VmotionInitiate) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{0} }

func (m *VmotionInitiate) GetMacAddress() uint64 {
	if m != nil {
		return m.MacAddress
	}
	return 0
}

type VmotionSync struct {
	Sessions []*SessionGetResponse `protobuf:"bytes,1,rep,name=sessions" json:"sessions,omitempty"`
}

func (m *VmotionSync) Reset()                    { *m = VmotionSync{} }
func (m *VmotionSync) String() string            { return proto.CompactTextString(m) }
func (*VmotionSync) ProtoMessage()               {}
func (*VmotionSync) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{1} }

func (m *VmotionSync) GetSessions() []*SessionGetResponse {
	if m != nil {
		return m.Sessions
	}
	return nil
}

type VmotionSyncEnd struct {
	Status VmotionMessageStatus `protobuf:"varint,1,opt,name=status,enum=vmotion_msg.VmotionMessageStatus" json:"status,omitempty"`
}

func (m *VmotionSyncEnd) Reset()                    { *m = VmotionSyncEnd{} }
func (m *VmotionSyncEnd) String() string            { return proto.CompactTextString(m) }
func (*VmotionSyncEnd) ProtoMessage()               {}
func (*VmotionSyncEnd) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{2} }

func (m *VmotionSyncEnd) GetStatus() VmotionMessageStatus {
	if m != nil {
		return m.Status
	}
	return VmotionMessageStatus_STATUS_OK
}

type VmotionTermSyncReq struct {
}

func (m *VmotionTermSyncReq) Reset()                    { *m = VmotionTermSyncReq{} }
func (m *VmotionTermSyncReq) String() string            { return proto.CompactTextString(m) }
func (*VmotionTermSyncReq) ProtoMessage()               {}
func (*VmotionTermSyncReq) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{3} }

type VmotionTermSync struct {
	Sessions []*SessionGetResponse `protobuf:"bytes,1,rep,name=sessions" json:"sessions,omitempty"`
}

func (m *VmotionTermSync) Reset()                    { *m = VmotionTermSync{} }
func (m *VmotionTermSync) String() string            { return proto.CompactTextString(m) }
func (*VmotionTermSync) ProtoMessage()               {}
func (*VmotionTermSync) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{4} }

func (m *VmotionTermSync) GetSessions() []*SessionGetResponse {
	if m != nil {
		return m.Sessions
	}
	return nil
}

type VmotionTermSyncEnd struct {
	Status VmotionMessageStatus `protobuf:"varint,1,opt,name=status,enum=vmotion_msg.VmotionMessageStatus" json:"status,omitempty"`
}

func (m *VmotionTermSyncEnd) Reset()                    { *m = VmotionTermSyncEnd{} }
func (m *VmotionTermSyncEnd) String() string            { return proto.CompactTextString(m) }
func (*VmotionTermSyncEnd) ProtoMessage()               {}
func (*VmotionTermSyncEnd) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{5} }

func (m *VmotionTermSyncEnd) GetStatus() VmotionMessageStatus {
	if m != nil {
		return m.Status
	}
	return VmotionMessageStatus_STATUS_OK
}

type VmotionTermSyncAck struct {
	Status VmotionMessageStatus `protobuf:"varint,1,opt,name=status,enum=vmotion_msg.VmotionMessageStatus" json:"status,omitempty"`
}

func (m *VmotionTermSyncAck) Reset()                    { *m = VmotionTermSyncAck{} }
func (m *VmotionTermSyncAck) String() string            { return proto.CompactTextString(m) }
func (*VmotionTermSyncAck) ProtoMessage()               {}
func (*VmotionTermSyncAck) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{6} }

func (m *VmotionTermSyncAck) GetStatus() VmotionMessageStatus {
	if m != nil {
		return m.Status
	}
	return VmotionMessageStatus_STATUS_OK
}

type VmotionEpMoved struct {
}

func (m *VmotionEpMoved) Reset()                    { *m = VmotionEpMoved{} }
func (m *VmotionEpMoved) String() string            { return proto.CompactTextString(m) }
func (*VmotionEpMoved) ProtoMessage()               {}
func (*VmotionEpMoved) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{7} }

type VmotionMessage struct {
	Type VmotionMessageType `protobuf:"varint,1,opt,name=type,enum=vmotion_msg.VmotionMessageType" json:"type,omitempty"`
	// Types that are valid to be assigned to Msg:
	//	*VmotionMessage_Init
	//	*VmotionMessage_Sync
	//	*VmotionMessage_SyncEnd
	//	*VmotionMessage_TermSyncReq
	//	*VmotionMessage_TermSync
	//	*VmotionMessage_TermSyncEnd
	//	*VmotionMessage_TermSyncAck
	//	*VmotionMessage_EpMoved
	Msg isVmotionMessage_Msg `protobuf_oneof:"msg"`
}

func (m *VmotionMessage) Reset()                    { *m = VmotionMessage{} }
func (m *VmotionMessage) String() string            { return proto.CompactTextString(m) }
func (*VmotionMessage) ProtoMessage()               {}
func (*VmotionMessage) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{8} }

type isVmotionMessage_Msg interface{ isVmotionMessage_Msg() }

type VmotionMessage_Init struct {
	Init *VmotionInitiate `protobuf:"bytes,2,opt,name=init,oneof"`
}
type VmotionMessage_Sync struct {
	Sync *VmotionSync `protobuf:"bytes,3,opt,name=sync,oneof"`
}
type VmotionMessage_SyncEnd struct {
	SyncEnd *VmotionSyncEnd `protobuf:"bytes,4,opt,name=sync_end,json=syncEnd,oneof"`
}
type VmotionMessage_TermSyncReq struct {
	TermSyncReq *VmotionTermSyncReq `protobuf:"bytes,5,opt,name=term_sync_req,json=termSyncReq,oneof"`
}
type VmotionMessage_TermSync struct {
	TermSync *VmotionTermSync `protobuf:"bytes,6,opt,name=term_sync,json=termSync,oneof"`
}
type VmotionMessage_TermSyncEnd struct {
	TermSyncEnd *VmotionTermSyncEnd `protobuf:"bytes,7,opt,name=term_sync_end,json=termSyncEnd,oneof"`
}
type VmotionMessage_TermSyncAck struct {
	TermSyncAck *VmotionTermSyncAck `protobuf:"bytes,8,opt,name=term_sync_ack,json=termSyncAck,oneof"`
}
type VmotionMessage_EpMoved struct {
	EpMoved *VmotionEpMoved `protobuf:"bytes,9,opt,name=ep_moved,json=epMoved,oneof"`
}

func (*VmotionMessage_Init) isVmotionMessage_Msg()        {}
func (*VmotionMessage_Sync) isVmotionMessage_Msg()        {}
func (*VmotionMessage_SyncEnd) isVmotionMessage_Msg()     {}
func (*VmotionMessage_TermSyncReq) isVmotionMessage_Msg() {}
func (*VmotionMessage_TermSync) isVmotionMessage_Msg()    {}
func (*VmotionMessage_TermSyncEnd) isVmotionMessage_Msg() {}
func (*VmotionMessage_TermSyncAck) isVmotionMessage_Msg() {}
func (*VmotionMessage_EpMoved) isVmotionMessage_Msg()     {}

func (m *VmotionMessage) GetMsg() isVmotionMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *VmotionMessage) GetType() VmotionMessageType {
	if m != nil {
		return m.Type
	}
	return VmotionMessageType_VMOTION_MSG_TYPE_INIT
}

func (m *VmotionMessage) GetInit() *VmotionInitiate {
	if x, ok := m.GetMsg().(*VmotionMessage_Init); ok {
		return x.Init
	}
	return nil
}

func (m *VmotionMessage) GetSync() *VmotionSync {
	if x, ok := m.GetMsg().(*VmotionMessage_Sync); ok {
		return x.Sync
	}
	return nil
}

func (m *VmotionMessage) GetSyncEnd() *VmotionSyncEnd {
	if x, ok := m.GetMsg().(*VmotionMessage_SyncEnd); ok {
		return x.SyncEnd
	}
	return nil
}

func (m *VmotionMessage) GetTermSyncReq() *VmotionTermSyncReq {
	if x, ok := m.GetMsg().(*VmotionMessage_TermSyncReq); ok {
		return x.TermSyncReq
	}
	return nil
}

func (m *VmotionMessage) GetTermSync() *VmotionTermSync {
	if x, ok := m.GetMsg().(*VmotionMessage_TermSync); ok {
		return x.TermSync
	}
	return nil
}

func (m *VmotionMessage) GetTermSyncEnd() *VmotionTermSyncEnd {
	if x, ok := m.GetMsg().(*VmotionMessage_TermSyncEnd); ok {
		return x.TermSyncEnd
	}
	return nil
}

func (m *VmotionMessage) GetTermSyncAck() *VmotionTermSyncAck {
	if x, ok := m.GetMsg().(*VmotionMessage_TermSyncAck); ok {
		return x.TermSyncAck
	}
	return nil
}

func (m *VmotionMessage) GetEpMoved() *VmotionEpMoved {
	if x, ok := m.GetMsg().(*VmotionMessage_EpMoved); ok {
		return x.EpMoved
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VmotionMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VmotionMessage_OneofMarshaler, _VmotionMessage_OneofUnmarshaler, _VmotionMessage_OneofSizer, []interface{}{
		(*VmotionMessage_Init)(nil),
		(*VmotionMessage_Sync)(nil),
		(*VmotionMessage_SyncEnd)(nil),
		(*VmotionMessage_TermSyncReq)(nil),
		(*VmotionMessage_TermSync)(nil),
		(*VmotionMessage_TermSyncEnd)(nil),
		(*VmotionMessage_TermSyncAck)(nil),
		(*VmotionMessage_EpMoved)(nil),
	}
}

func _VmotionMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VmotionMessage)
	// msg
	switch x := m.Msg.(type) {
	case *VmotionMessage_Init:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Init); err != nil {
			return err
		}
	case *VmotionMessage_Sync:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sync); err != nil {
			return err
		}
	case *VmotionMessage_SyncEnd:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SyncEnd); err != nil {
			return err
		}
	case *VmotionMessage_TermSyncReq:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TermSyncReq); err != nil {
			return err
		}
	case *VmotionMessage_TermSync:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TermSync); err != nil {
			return err
		}
	case *VmotionMessage_TermSyncEnd:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TermSyncEnd); err != nil {
			return err
		}
	case *VmotionMessage_TermSyncAck:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TermSyncAck); err != nil {
			return err
		}
	case *VmotionMessage_EpMoved:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EpMoved); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VmotionMessage.Msg has unexpected type %T", x)
	}
	return nil
}

func _VmotionMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VmotionMessage)
	switch tag {
	case 2: // msg.init
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VmotionInitiate)
		err := b.DecodeMessage(msg)
		m.Msg = &VmotionMessage_Init{msg}
		return true, err
	case 3: // msg.sync
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VmotionSync)
		err := b.DecodeMessage(msg)
		m.Msg = &VmotionMessage_Sync{msg}
		return true, err
	case 4: // msg.sync_end
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VmotionSyncEnd)
		err := b.DecodeMessage(msg)
		m.Msg = &VmotionMessage_SyncEnd{msg}
		return true, err
	case 5: // msg.term_sync_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VmotionTermSyncReq)
		err := b.DecodeMessage(msg)
		m.Msg = &VmotionMessage_TermSyncReq{msg}
		return true, err
	case 6: // msg.term_sync
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VmotionTermSync)
		err := b.DecodeMessage(msg)
		m.Msg = &VmotionMessage_TermSync{msg}
		return true, err
	case 7: // msg.term_sync_end
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VmotionTermSyncEnd)
		err := b.DecodeMessage(msg)
		m.Msg = &VmotionMessage_TermSyncEnd{msg}
		return true, err
	case 8: // msg.term_sync_ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VmotionTermSyncAck)
		err := b.DecodeMessage(msg)
		m.Msg = &VmotionMessage_TermSyncAck{msg}
		return true, err
	case 9: // msg.ep_moved
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VmotionEpMoved)
		err := b.DecodeMessage(msg)
		m.Msg = &VmotionMessage_EpMoved{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VmotionMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VmotionMessage)
	// msg
	switch x := m.Msg.(type) {
	case *VmotionMessage_Init:
		s := proto.Size(x.Init)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VmotionMessage_Sync:
		s := proto.Size(x.Sync)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VmotionMessage_SyncEnd:
		s := proto.Size(x.SyncEnd)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VmotionMessage_TermSyncReq:
		s := proto.Size(x.TermSyncReq)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VmotionMessage_TermSync:
		s := proto.Size(x.TermSync)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VmotionMessage_TermSyncEnd:
		s := proto.Size(x.TermSyncEnd)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VmotionMessage_TermSyncAck:
		s := proto.Size(x.TermSyncAck)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VmotionMessage_EpMoved:
		s := proto.Size(x.EpMoved)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*VmotionInitiate)(nil), "halproto.VmotionInitiate")
	proto.RegisterType((*VmotionSync)(nil), "halproto.VmotionSync")
	proto.RegisterType((*VmotionSyncEnd)(nil), "halproto.VmotionSyncEnd")
	proto.RegisterType((*VmotionTermSyncReq)(nil), "halproto.VmotionTermSyncReq")
	proto.RegisterType((*VmotionTermSync)(nil), "halproto.VmotionTermSync")
	proto.RegisterType((*VmotionTermSyncEnd)(nil), "halproto.VmotionTermSyncEnd")
	proto.RegisterType((*VmotionTermSyncAck)(nil), "halproto.VmotionTermSyncAck")
	proto.RegisterType((*VmotionEpMoved)(nil), "halproto.VmotionEpMoved")
	proto.RegisterType((*VmotionMessage)(nil), "halproto.VmotionMessage")
	proto.RegisterEnum("halproto.VmotionMessageType", VmotionMessageType_name, VmotionMessageType_value)
	proto.RegisterEnum("halproto.VmotionMessageStatus", VmotionMessageStatus_name, VmotionMessageStatus_value)
}

func init() { proto.RegisterFile("vmotion.proto", fileDescriptor34) }

var fileDescriptor34 = []byte{
	// 566 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x5d, 0x6f, 0xda, 0x30,
	0x14, 0x0d, 0x10, 0x20, 0xdc, 0x08, 0x16, 0x59, 0x9d, 0x94, 0xd2, 0xf5, 0x2b, 0x4f, 0xa8, 0x0f,
	0x3c, 0x50, 0x4d, 0xeb, 0xb4, 0x27, 0xda, 0x66, 0x85, 0xa1, 0x40, 0xe7, 0x64, 0x48, 0xdd, 0x4b,
	0x94, 0x25, 0x16, 0x43, 0x2c, 0x1f, 0xc5, 0x5e, 0x25, 0xfe, 0xd8, 0xf6, 0xf7, 0x26, 0x27, 0x26,
	0x63, 0x22, 0x0c, 0xa9, 0x7d, 0x72, 0xec, 0x7b, 0xce, 0xb9, 0xf7, 0x38, 0x27, 0x81, 0xe6, 0x53,
	0x18, 0xb3, 0x79, 0x1c, 0x75, 0x93, 0x65, 0xcc, 0x62, 0xa4, 0x8a, 0xad, 0x1b, 0xd2, 0x59, 0x5b,
	0x65, 0xab, 0x84, 0xd0, 0xac, 0xd2, 0x6e, 0x52, 0x42, 0x69, 0x0e, 0x34, 0x7a, 0xf0, 0x6a, 0x9a,
	0x41, 0x87, 0xd1, 0x9c, 0xcd, 0x3d, 0x46, 0xd0, 0x29, 0xa8, 0xa1, 0xe7, 0xbb, 0x5e, 0x10, 0x2c,
	0x09, 0xa5, 0x7a, 0xe9, 0xac, 0xd4, 0x91, 0x31, 0x84, 0x9e, 0xdf, 0xcf, 0x4e, 0x8c, 0x8f, 0xa0,
	0x0a, 0x8e, 0xbd, 0x8a, 0x7c, 0xf4, 0x0e, 0x14, 0xa1, 0xc9, 0xc1, 0x95, 0x8e, 0xda, 0x3b, 0xea,
	0xae, 0x9b, 0xd8, 0xd9, 0x7a, 0x47, 0x18, 0x26, 0x34, 0x89, 0x23, 0x4a, 0x70, 0x0e, 0x36, 0x46,
	0xd0, 0xda, 0xd0, 0x31, 0xa3, 0x00, 0xbd, 0x87, 0x1a, 0x65, 0x1e, 0xfb, 0x99, 0x75, 0x6d, 0xf5,
	0xce, 0xbb, 0x1b, 0x3e, 0xba, 0x02, 0x6c, 0x11, 0x4a, 0xbd, 0x19, 0xb1, 0x53, 0x20, 0x16, 0x04,
	0xe3, 0x00, 0x90, 0xa8, 0x3b, 0x64, 0x19, 0x72, 0x41, 0x4c, 0x1e, 0x8d, 0x4f, 0xb9, 0xbd, 0xf5,
	0xe9, 0xf3, 0xc7, 0x9d, 0x6c, 0x75, 0x78, 0xe1, 0xc8, 0xdb, 0x82, 0x7d, 0x7f, 0xf1, 0x12, 0x41,
	0x2d, 0xbf, 0x50, 0x33, 0xb1, 0xe2, 0x27, 0x12, 0x18, 0xbf, 0xe4, 0xfc, 0x48, 0x50, 0xd0, 0x25,
	0xc8, 0x3c, 0x0f, 0x42, 0xfd, 0xf4, 0x3f, 0xea, 0xce, 0x2a, 0x21, 0x38, 0x05, 0xa3, 0x1e, 0xc8,
	0xf3, 0x68, 0xce, 0xf4, 0xf2, 0x59, 0xa9, 0xa3, 0xf6, 0xde, 0x14, 0x91, 0xd6, 0xf9, 0x19, 0x48,
	0x38, 0xc5, 0xa2, 0x2e, 0xc8, 0x74, 0x15, 0xf9, 0x7a, 0x25, 0xe5, 0xe8, 0x45, 0x1c, 0xee, 0x99,
	0xe3, 0x39, 0x0e, 0x5d, 0x81, 0xc2, 0x57, 0x97, 0x44, 0x81, 0x2e, 0xa7, 0x9c, 0xa3, 0x5d, 0x1c,
	0x33, 0x0a, 0x06, 0x12, 0xae, 0x53, 0xf1, 0x0e, 0x4c, 0x68, 0x32, 0xb2, 0x0c, 0xdd, 0x94, 0xbe,
	0x24, 0x8f, 0x7a, 0x35, 0xa5, 0x17, 0x7a, 0xdb, 0x48, 0xc7, 0x40, 0xc2, 0x2a, 0xfb, 0xbb, 0x45,
	0x1f, 0xa0, 0x91, 0xcb, 0xe8, 0xb5, 0xdd, 0x4e, 0xd7, 0x12, 0x03, 0x09, 0x2b, 0x6b, 0xfe, 0xbf,
	0x33, 0x70, 0x0b, 0xf5, 0xfd, 0x33, 0x64, 0x36, 0xf2, 0x19, 0xb6, 0xac, 0x78, 0xfe, 0x42, 0x57,
	0xf6, 0xcb, 0xf4, 0xfd, 0xc5, 0xa6, 0x0c, 0x0f, 0xd1, 0x15, 0x28, 0x24, 0x71, 0x43, 0x9e, 0x01,
	0xbd, 0xb1, 0xfb, 0x2e, 0x45, 0x4c, 0xf8, 0x5d, 0x92, 0xec, 0xf1, 0xba, 0x0a, 0x95, 0x90, 0xce,
	0x2e, 0x7e, 0x97, 0xf3, 0x70, 0x6e, 0xa4, 0x01, 0x1d, 0xc2, 0xeb, 0xa9, 0x35, 0x71, 0x86, 0x93,
	0xb1, 0x6b, 0xd9, 0x77, 0xae, 0xf3, 0x70, 0x6f, 0xba, 0xc3, 0xf1, 0xd0, 0xd1, 0xa4, 0xc2, 0x92,
	0xfd, 0x30, 0xbe, 0xd1, 0x4a, 0xe8, 0x18, 0x0e, 0x0b, 0x4b, 0xae, 0x39, 0xbe, 0xd5, 0xca, 0xc8,
	0x80, 0x93, 0xad, 0xb2, 0x63, 0x62, 0x2b, 0xc3, 0x60, 0xf3, 0xb3, 0x56, 0x41, 0x27, 0xd0, 0xde,
	0x8d, 0xd1, 0xe4, 0x3d, 0x1a, 0xbc, 0x4f, 0x75, 0x0f, 0xa6, 0x7f, 0x33, 0xd2, 0x6a, 0x85, 0xa3,
	0x9a, 0xf7, 0xae, 0x35, 0x99, 0x9a, 0xb7, 0x5a, 0x1d, 0x9d, 0xc3, 0xf1, 0xce, 0x72, 0xaa, 0xa0,
	0x5c, 0xbc, 0x85, 0x83, 0xa2, 0x8f, 0x14, 0x35, 0xa1, 0x61, 0x3b, 0x7d, 0xe7, 0x8b, 0xed, 0x4e,
	0x46, 0x9a, 0x84, 0x5a, 0x00, 0x62, 0x6b, 0x62, 0xac, 0x95, 0xae, 0xe1, 0xab, 0xf2, 0xdd, 0xfb,
	0x91, 0xfe, 0x94, 0xbf, 0xd5, 0xd2, 0xe5, 0xf2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x6f,
	0x32, 0xa6, 0xd5, 0x05, 0x00, 0x00,
}
