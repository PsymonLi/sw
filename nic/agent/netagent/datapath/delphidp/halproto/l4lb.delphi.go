// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l4lb.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// session stickiness selectors - once a session is load balanced to a backend
// server, new sessions from same client from that point on will be pinned to
// the same backend as long as there is atleast one session active towards that
// backend. once all sessions from that client age out, if a new session comes
// from same client, LB algorithm can pick a new backend again
type SessionAffinity int32

const (
	SessionAffinity_L4LB_SESSION_AFFINITY_NONE      SessionAffinity = 0
	SessionAffinity_L4LB_SESSION_AFFINITY_SIP       SessionAffinity = 1
	SessionAffinity_L4LB_SESSION_AFFINITY_SIP_SPORT SessionAffinity = 2
)

var SessionAffinity_name = map[int32]string{
	0: "L4LB_SESSION_AFFINITY_NONE",
	1: "L4LB_SESSION_AFFINITY_SIP",
	2: "L4LB_SESSION_AFFINITY_SIP_SPORT",
}
var SessionAffinity_value = map[string]int32{
	"L4LB_SESSION_AFFINITY_NONE":      0,
	"L4LB_SESSION_AFFINITY_SIP":       1,
	"L4LB_SESSION_AFFINITY_SIP_SPORT": 2,
}

func (x SessionAffinity) String() string {
	return proto.EnumName(SessionAffinity_name, int32(x))
}
func (SessionAffinity) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

// supported LB algorithms
type LBAlgorithm int32

const (
	LBAlgorithm_L4LB_ALGORITHM_NONE                 LBAlgorithm = 0
	LBAlgorithm_L4LB_ALGORITHM_ROUND_ROBIN          LBAlgorithm = 1
	LBAlgorithm_L4LB_ALGORITHM_WEIGHTED_ROUND_ROBIN LBAlgorithm = 2
	LBAlgorithm_L4LB_ALGORITHM_RANDOM               LBAlgorithm = 3
	LBAlgorithm_L4LB_ALGORITHM_LEAST_CONNECTIONS    LBAlgorithm = 4
	LBAlgorithm_L4LB_ALGORITHM_PICK2_RANDOM         LBAlgorithm = 5
	LBAlgorithm_L4LB_ALGORITHM_MIN_CONNECTIONS      LBAlgorithm = 6
	LBAlgorithm_L4LB_ALGORITHM_HASH_ON_SOURCE_IP    LBAlgorithm = 7
)

var LBAlgorithm_name = map[int32]string{
	0: "L4LB_ALGORITHM_NONE",
	1: "L4LB_ALGORITHM_ROUND_ROBIN",
	2: "L4LB_ALGORITHM_WEIGHTED_ROUND_ROBIN",
	3: "L4LB_ALGORITHM_RANDOM",
	4: "L4LB_ALGORITHM_LEAST_CONNECTIONS",
	5: "L4LB_ALGORITHM_PICK2_RANDOM",
	6: "L4LB_ALGORITHM_MIN_CONNECTIONS",
	7: "L4LB_ALGORITHM_HASH_ON_SOURCE_IP",
}
var LBAlgorithm_value = map[string]int32{
	"L4LB_ALGORITHM_NONE":                 0,
	"L4LB_ALGORITHM_ROUND_ROBIN":          1,
	"L4LB_ALGORITHM_WEIGHTED_ROUND_ROBIN": 2,
	"L4LB_ALGORITHM_RANDOM":               3,
	"L4LB_ALGORITHM_LEAST_CONNECTIONS":    4,
	"L4LB_ALGORITHM_PICK2_RANDOM":         5,
	"L4LB_ALGORITHM_MIN_CONNECTIONS":      6,
	"L4LB_ALGORITHM_HASH_ON_SOURCE_IP":    7,
}

func (x LBAlgorithm) String() string {
	return proto.EnumName(LBAlgorithm_name, int32(x))
}
func (LBAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

// protocol types (i.e., traffic types) that can be load balanced based
type L4LBProtocol int32

const (
	L4LBProtocol_L4LB_PROTO_NONE L4LBProtocol = 0
	L4LBProtocol_L4LB_PROTO_TCP  L4LBProtocol = 6
	L4LBProtocol_L4LB_PROTO_UDP  L4LBProtocol = 17
)

var L4LBProtocol_name = map[int32]string{
	0:  "L4LB_PROTO_NONE",
	6:  "L4LB_PROTO_TCP",
	17: "L4LB_PROTO_UDP",
}
var L4LBProtocol_value = map[string]int32{
	"L4LB_PROTO_NONE": 0,
	"L4LB_PROTO_TCP":  6,
	"L4LB_PROTO_UDP":  17,
}

func (x L4LBProtocol) String() string {
	return proto.EnumName(L4LBProtocol_name, int32(x))
}
func (L4LBProtocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

// IP protocol type supported for LB probes
type L4LBProbeProtocol int32

const (
	L4LBProbeProtocol_L4LB_PROBE_PROTO_NONE L4LBProbeProtocol = 0
	L4LBProbeProtocol_L4LB_PROBE_PROTO_ICMP L4LBProbeProtocol = 1
	L4LBProbeProtocol_L4LB_PROBE_PROTO_TCP  L4LBProbeProtocol = 6
	L4LBProbeProtocol_L4LB_PROBE_PROTO_UDP  L4LBProbeProtocol = 17
)

var L4LBProbeProtocol_name = map[int32]string{
	0:  "L4LB_PROBE_PROTO_NONE",
	1:  "L4LB_PROBE_PROTO_ICMP",
	6:  "L4LB_PROBE_PROTO_TCP",
	17: "L4LB_PROBE_PROTO_UDP",
}
var L4LBProbeProtocol_value = map[string]int32{
	"L4LB_PROBE_PROTO_NONE": 0,
	"L4LB_PROBE_PROTO_ICMP": 1,
	"L4LB_PROBE_PROTO_TCP":  6,
	"L4LB_PROBE_PROTO_UDP":  17,
}

func (x L4LBProbeProtocol) String() string {
	return proto.EnumName(L4LBProbeProtocol_name, int32(x))
}
func (L4LBProbeProtocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{3} }

// L4LbStatus status reflects the current status of either whole service
// or each backend service instance at any given time
type L4LbStatus int32

const (
	L4LbStatus_L4LB_STATUS_NONE L4LbStatus = 0
	L4LbStatus_L4LB_STATUS_UP   L4LbStatus = 1
	L4LbStatus_L4LB_STATUS_DOWN L4LbStatus = 2
)

var L4LbStatus_name = map[int32]string{
	0: "L4LB_STATUS_NONE",
	1: "L4LB_STATUS_UP",
	2: "L4LB_STATUS_DOWN",
}
var L4LbStatus_value = map[string]int32{
	"L4LB_STATUS_NONE": 0,
	"L4LB_STATUS_UP":   1,
	"L4LB_STATUS_DOWN": 2,
}

func (x L4LbStatus) String() string {
	return proto.EnumName(L4LbStatus_name, int32(x))
}
func (L4LbStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{4} }

// LB algorithm and any parameters needed by these algorithms
type LBMethod struct {
	Algorithm LBAlgorithm `protobuf:"varint,1,opt,name=algorithm,enum=l4lb.LBAlgorithm" json:"algorithm,omitempty"`
}

func (m *LBMethod) Reset()                    { *m = LBMethod{} }
func (m *LBMethod) String() string            { return proto.CompactTextString(m) }
func (*LBMethod) ProtoMessage()               {}
func (*LBMethod) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

func (m *LBMethod) GetAlgorithm() LBAlgorithm {
	if m != nil {
		return m.Algorithm
	}
	return LBAlgorithm_L4LB_ALGORITHM_NONE
}

// HealthCheck captures the L4 LB health check configuration
type HealthCheck struct {
	ProbePort         uint32            `protobuf:"fixed32,1,opt,name=probe_port,json=probePort" json:"probe_port,omitempty"`
	ProbeProtocol     L4LBProbeProtocol `protobuf:"varint,2,opt,name=probe_protocol,json=probeProtocol,enum=l4lb.L4LBProbeProtocol" json:"probe_protocol,omitempty"`
	ProbeInterval     uint32            `protobuf:"fixed32,3,opt,name=probe_interval,json=probeInterval" json:"probe_interval,omitempty"`
	ProbesPerInterval uint32            `protobuf:"fixed32,4,opt,name=probes_per_interval,json=probesPerInterval" json:"probes_per_interval,omitempty"`
}

func (m *HealthCheck) Reset()                    { *m = HealthCheck{} }
func (m *HealthCheck) String() string            { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()               {}
func (*HealthCheck) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

func (m *HealthCheck) GetProbePort() uint32 {
	if m != nil {
		return m.ProbePort
	}
	return 0
}

func (m *HealthCheck) GetProbeProtocol() L4LBProbeProtocol {
	if m != nil {
		return m.ProbeProtocol
	}
	return L4LBProbeProtocol_L4LB_PROBE_PROTO_NONE
}

func (m *HealthCheck) GetProbeInterval() uint32 {
	if m != nil {
		return m.ProbeInterval
	}
	return 0
}

func (m *HealthCheck) GetProbesPerInterval() uint32 {
	if m != nil {
		return m.ProbesPerInterval
	}
	return 0
}

// L4LbServiceKey uniquely identifies a service
type L4LbServiceKey struct {
	ServiceIpAddress *IPAddress   `protobuf:"bytes,1,opt,name=service_ip_address,json=serviceIpAddress" json:"service_ip_address,omitempty"`
	IpProtocol       L4LBProtocol `protobuf:"varint,2,opt,name=ip_protocol,json=ipProtocol,enum=l4lb.L4LBProtocol" json:"ip_protocol,omitempty"`
	ServicePort      uint32       `protobuf:"varint,3,opt,name=service_port,json=servicePort" json:"service_port,omitempty"`
}

func (m *L4LbServiceKey) Reset()                    { *m = L4LbServiceKey{} }
func (m *L4LbServiceKey) String() string            { return proto.CompactTextString(m) }
func (*L4LbServiceKey) ProtoMessage()               {}
func (*L4LbServiceKey) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

func (m *L4LbServiceKey) GetServiceIpAddress() *IPAddress {
	if m != nil {
		return m.ServiceIpAddress
	}
	return nil
}

func (m *L4LbServiceKey) GetIpProtocol() L4LBProtocol {
	if m != nil {
		return m.IpProtocol
	}
	return L4LBProtocol_L4LB_PROTO_NONE
}

func (m *L4LbServiceKey) GetServicePort() uint32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

// L4 LB service key or handle object
type L4LbServiceKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*L4LbServiceKeyHandle_ServiceKey
	//	*L4LbServiceKeyHandle_ServiceHandle
	KeyOrHandle isL4LbServiceKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *L4LbServiceKeyHandle) Reset()                    { *m = L4LbServiceKeyHandle{} }
func (m *L4LbServiceKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*L4LbServiceKeyHandle) ProtoMessage()               {}
func (*L4LbServiceKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{3} }

type isL4LbServiceKeyHandle_KeyOrHandle interface{ isL4LbServiceKeyHandle_KeyOrHandle() }

type L4LbServiceKeyHandle_ServiceKey struct {
	ServiceKey *L4LbServiceKey `protobuf:"bytes,1,opt,name=service_key,json=serviceKey,oneof"`
}
type L4LbServiceKeyHandle_ServiceHandle struct {
	ServiceHandle uint64 `protobuf:"fixed64,2,opt,name=service_handle,json=serviceHandle,oneof"`
}

func (*L4LbServiceKeyHandle_ServiceKey) isL4LbServiceKeyHandle_KeyOrHandle()    {}
func (*L4LbServiceKeyHandle_ServiceHandle) isL4LbServiceKeyHandle_KeyOrHandle() {}

func (m *L4LbServiceKeyHandle) GetKeyOrHandle() isL4LbServiceKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *L4LbServiceKeyHandle) GetServiceKey() *L4LbServiceKey {
	if x, ok := m.GetKeyOrHandle().(*L4LbServiceKeyHandle_ServiceKey); ok {
		return x.ServiceKey
	}
	return nil
}

func (m *L4LbServiceKeyHandle) GetServiceHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*L4LbServiceKeyHandle_ServiceHandle); ok {
		return x.ServiceHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*L4LbServiceKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _L4LbServiceKeyHandle_OneofMarshaler, _L4LbServiceKeyHandle_OneofUnmarshaler, _L4LbServiceKeyHandle_OneofSizer, []interface{}{
		(*L4LbServiceKeyHandle_ServiceKey)(nil),
		(*L4LbServiceKeyHandle_ServiceHandle)(nil),
	}
}

func _L4LbServiceKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*L4LbServiceKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *L4LbServiceKeyHandle_ServiceKey:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ServiceKey); err != nil {
			return err
		}
	case *L4LbServiceKeyHandle_ServiceHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.ServiceHandle))
	case nil:
	default:
		return fmt.Errorf("L4LbServiceKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _L4LbServiceKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*L4LbServiceKeyHandle)
	switch tag {
	case 1: // key_or_handle.service_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(L4LbServiceKey)
		err := b.DecodeMessage(msg)
		m.KeyOrHandle = &L4LbServiceKeyHandle_ServiceKey{msg}
		return true, err
	case 2: // key_or_handle.service_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &L4LbServiceKeyHandle_ServiceHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _L4LbServiceKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*L4LbServiceKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *L4LbServiceKeyHandle_ServiceKey:
		s := proto.Size(x.ServiceKey)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *L4LbServiceKeyHandle_ServiceHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// L4LbServiceSpec message represents one service request
type L4LbServiceSpec struct {
	// key_or_handle is L4 LB service's unique identifier
	KeyOrHandle      *L4LbServiceKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	VrfKeyHandle     *VrfKeyHandle         `protobuf:"bytes,2,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
	ProxyArpEnable   bool                  `protobuf:"varint,3,opt,name=proxy_arp_enable,json=proxyArpEnable" json:"proxy_arp_enable,omitempty"`
	ServiceMac       uint64                `protobuf:"fixed64,4,opt,name=service_mac,json=serviceMac" json:"service_mac,omitempty"`
	SessionAffinity  SessionAffinity       `protobuf:"varint,5,opt,name=session_affinity,json=sessionAffinity,enum=l4lb.SessionAffinity" json:"session_affinity,omitempty"`
	LoadBalancerType *LBMethod             `protobuf:"bytes,6,opt,name=load_balancer_type,json=loadBalancerType" json:"load_balancer_type,omitempty"`
	HealthCheck      *HealthCheck          `protobuf:"bytes,7,opt,name=health_check,json=healthCheck" json:"health_check,omitempty"`
}

func (m *L4LbServiceSpec) Reset()                    { *m = L4LbServiceSpec{} }
func (m *L4LbServiceSpec) String() string            { return proto.CompactTextString(m) }
func (*L4LbServiceSpec) ProtoMessage()               {}
func (*L4LbServiceSpec) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{4} }

func (m *L4LbServiceSpec) GetKeyOrHandle() *L4LbServiceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *L4LbServiceSpec) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

func (m *L4LbServiceSpec) GetProxyArpEnable() bool {
	if m != nil {
		return m.ProxyArpEnable
	}
	return false
}

func (m *L4LbServiceSpec) GetServiceMac() uint64 {
	if m != nil {
		return m.ServiceMac
	}
	return 0
}

func (m *L4LbServiceSpec) GetSessionAffinity() SessionAffinity {
	if m != nil {
		return m.SessionAffinity
	}
	return SessionAffinity_L4LB_SESSION_AFFINITY_NONE
}

func (m *L4LbServiceSpec) GetLoadBalancerType() *LBMethod {
	if m != nil {
		return m.LoadBalancerType
	}
	return nil
}

func (m *L4LbServiceSpec) GetHealthCheck() *HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

// L4LbServiceRequestMsg is batched request message that is used to do
// add/mod of L4 LB service(s)
type L4LbServiceRequestMsg struct {
	Request []*L4LbServiceSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *L4LbServiceRequestMsg) Reset()                    { *m = L4LbServiceRequestMsg{} }
func (m *L4LbServiceRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*L4LbServiceRequestMsg) ProtoMessage()               {}
func (*L4LbServiceRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{5} }

func (m *L4LbServiceRequestMsg) GetRequest() []*L4LbServiceSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// L4LbServiceStatus represents the current status of the service
type L4LbServiceStatus struct {
	ServiceStatus L4LbStatus `protobuf:"varint,1,opt,name=service_status,json=serviceStatus,enum=l4lb.L4LbStatus" json:"service_status,omitempty"`
	ServiceHandle uint64     `protobuf:"fixed64,2,opt,name=service_handle,json=serviceHandle" json:"service_handle,omitempty"`
}

func (m *L4LbServiceStatus) Reset()                    { *m = L4LbServiceStatus{} }
func (m *L4LbServiceStatus) String() string            { return proto.CompactTextString(m) }
func (*L4LbServiceStatus) ProtoMessage()               {}
func (*L4LbServiceStatus) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{6} }

func (m *L4LbServiceStatus) GetServiceStatus() L4LbStatus {
	if m != nil {
		return m.ServiceStatus
	}
	return L4LbStatus_L4LB_STATUS_NONE
}

func (m *L4LbServiceStatus) GetServiceHandle() uint64 {
	if m != nil {
		return m.ServiceHandle
	}
	return 0
}

// L4LbServiceResponse is response to one L4LbServiceSpec
type L4LbServiceResponse struct {
	ApiStatus ApiStatus          `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *L4LbServiceStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *L4LbServiceResponse) Reset()                    { *m = L4LbServiceResponse{} }
func (m *L4LbServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*L4LbServiceResponse) ProtoMessage()               {}
func (*L4LbServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{7} }

func (m *L4LbServiceResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *L4LbServiceResponse) GetStatus() *L4LbServiceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// L4LbServiceResponseMsg is response to L4LbServiceRequestMsg
type L4LbServiceResponseMsg struct {
	Response []*L4LbServiceResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *L4LbServiceResponseMsg) Reset()                    { *m = L4LbServiceResponseMsg{} }
func (m *L4LbServiceResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*L4LbServiceResponseMsg) ProtoMessage()               {}
func (*L4LbServiceResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{8} }

func (m *L4LbServiceResponseMsg) GetResponse() []*L4LbServiceResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// L4LbServiceDeleteRequest is used to delete a service object, all backend
// servers should be delete before deleting the service itself or else delete
// operation will fail
type L4LbServiceDeleteRequest struct {
	// key_or_handle is L4 LB service's unique identifier
	KeyOrHandle *L4LbServiceKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *L4LbServiceDeleteRequest) Reset()                    { *m = L4LbServiceDeleteRequest{} }
func (m *L4LbServiceDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*L4LbServiceDeleteRequest) ProtoMessage()               {}
func (*L4LbServiceDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{9} }

func (m *L4LbServiceDeleteRequest) GetKeyOrHandle() *L4LbServiceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// L4LbServiceDeleteRequestMsg is used to delete a batch of services
type L4LbServiceDeleteRequestMsg struct {
	Request []*L4LbServiceDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *L4LbServiceDeleteRequestMsg) Reset()                    { *m = L4LbServiceDeleteRequestMsg{} }
func (m *L4LbServiceDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*L4LbServiceDeleteRequestMsg) ProtoMessage()               {}
func (*L4LbServiceDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{10} }

func (m *L4LbServiceDeleteRequestMsg) GetRequest() []*L4LbServiceDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type L4LbServiceDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *L4LbServiceDeleteResponse) Reset()                    { *m = L4LbServiceDeleteResponse{} }
func (m *L4LbServiceDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*L4LbServiceDeleteResponse) ProtoMessage()               {}
func (*L4LbServiceDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{11} }

func (m *L4LbServiceDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// L4LbServiceDeleteResponseMsg is batched response to L4LbServiceDeleteRequestMsg
type L4LbServiceDeleteResponseMsg struct {
	Response []*L4LbServiceDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *L4LbServiceDeleteResponseMsg) Reset()                    { *m = L4LbServiceDeleteResponseMsg{} }
func (m *L4LbServiceDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*L4LbServiceDeleteResponseMsg) ProtoMessage()               {}
func (*L4LbServiceDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{12} }

func (m *L4LbServiceDeleteResponseMsg) GetResponse() []*L4LbServiceDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// L4LbServiceStats captures all the statistics of given L4LB service
type L4LbServiceStats struct {
	NumActiveBackends       uint32 `protobuf:"fixed32,1,opt,name=num_active_backends,json=numActiveBackends" json:"num_active_backends,omitempty"`
	NumActiveSessions       uint32 `protobuf:"fixed32,2,opt,name=num_active_sessions,json=numActiveSessions" json:"num_active_sessions,omitempty"`
	NumSessionsLoadBalanced uint32 `protobuf:"fixed32,3,opt,name=num_sessions_load_balanced,json=numSessionsLoadBalanced" json:"num_sessions_load_balanced,omitempty"`
	NumSessionsFailed       uint32 `protobuf:"fixed32,4,opt,name=num_sessions_failed,json=numSessionsFailed" json:"num_sessions_failed,omitempty"`
	NumHealthChangeEvents   uint32 `protobuf:"fixed32,5,opt,name=num_health_change_events,json=numHealthChangeEvents" json:"num_health_change_events,omitempty"`
}

func (m *L4LbServiceStats) Reset()                    { *m = L4LbServiceStats{} }
func (m *L4LbServiceStats) String() string            { return proto.CompactTextString(m) }
func (*L4LbServiceStats) ProtoMessage()               {}
func (*L4LbServiceStats) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{13} }

func (m *L4LbServiceStats) GetNumActiveBackends() uint32 {
	if m != nil {
		return m.NumActiveBackends
	}
	return 0
}

func (m *L4LbServiceStats) GetNumActiveSessions() uint32 {
	if m != nil {
		return m.NumActiveSessions
	}
	return 0
}

func (m *L4LbServiceStats) GetNumSessionsLoadBalanced() uint32 {
	if m != nil {
		return m.NumSessionsLoadBalanced
	}
	return 0
}

func (m *L4LbServiceStats) GetNumSessionsFailed() uint32 {
	if m != nil {
		return m.NumSessionsFailed
	}
	return 0
}

func (m *L4LbServiceStats) GetNumHealthChangeEvents() uint32 {
	if m != nil {
		return m.NumHealthChangeEvents
	}
	return 0
}

// L4LbBackendKey uniquely identifies a backend server
type L4LbBackendKey struct {
	BackendIpAddress *IPAddress `protobuf:"bytes,1,opt,name=backend_ip_address,json=backendIpAddress" json:"backend_ip_address,omitempty"`
	BackendPort      uint32     `protobuf:"varint,2,opt,name=backend_port,json=backendPort" json:"backend_port,omitempty"`
}

func (m *L4LbBackendKey) Reset()                    { *m = L4LbBackendKey{} }
func (m *L4LbBackendKey) String() string            { return proto.CompactTextString(m) }
func (*L4LbBackendKey) ProtoMessage()               {}
func (*L4LbBackendKey) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{14} }

func (m *L4LbBackendKey) GetBackendIpAddress() *IPAddress {
	if m != nil {
		return m.BackendIpAddress
	}
	return nil
}

func (m *L4LbBackendKey) GetBackendPort() uint32 {
	if m != nil {
		return m.BackendPort
	}
	return 0
}

// L4 LB backend key or handle object
type L4LbBackendKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*L4LbBackendKeyHandle_BackendKey
	//	*L4LbBackendKeyHandle_ServiceHandle
	KeyOrHandle isL4LbBackendKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *L4LbBackendKeyHandle) Reset()                    { *m = L4LbBackendKeyHandle{} }
func (m *L4LbBackendKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*L4LbBackendKeyHandle) ProtoMessage()               {}
func (*L4LbBackendKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{15} }

type isL4LbBackendKeyHandle_KeyOrHandle interface{ isL4LbBackendKeyHandle_KeyOrHandle() }

type L4LbBackendKeyHandle_BackendKey struct {
	BackendKey *L4LbBackendKey `protobuf:"bytes,1,opt,name=backend_key,json=backendKey,oneof"`
}
type L4LbBackendKeyHandle_ServiceHandle struct {
	ServiceHandle uint64 `protobuf:"fixed64,2,opt,name=service_handle,json=serviceHandle,oneof"`
}

func (*L4LbBackendKeyHandle_BackendKey) isL4LbBackendKeyHandle_KeyOrHandle()    {}
func (*L4LbBackendKeyHandle_ServiceHandle) isL4LbBackendKeyHandle_KeyOrHandle() {}

func (m *L4LbBackendKeyHandle) GetKeyOrHandle() isL4LbBackendKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *L4LbBackendKeyHandle) GetBackendKey() *L4LbBackendKey {
	if x, ok := m.GetKeyOrHandle().(*L4LbBackendKeyHandle_BackendKey); ok {
		return x.BackendKey
	}
	return nil
}

func (m *L4LbBackendKeyHandle) GetServiceHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*L4LbBackendKeyHandle_ServiceHandle); ok {
		return x.ServiceHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*L4LbBackendKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _L4LbBackendKeyHandle_OneofMarshaler, _L4LbBackendKeyHandle_OneofUnmarshaler, _L4LbBackendKeyHandle_OneofSizer, []interface{}{
		(*L4LbBackendKeyHandle_BackendKey)(nil),
		(*L4LbBackendKeyHandle_ServiceHandle)(nil),
	}
}

func _L4LbBackendKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*L4LbBackendKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *L4LbBackendKeyHandle_BackendKey:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BackendKey); err != nil {
			return err
		}
	case *L4LbBackendKeyHandle_ServiceHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.ServiceHandle))
	case nil:
	default:
		return fmt.Errorf("L4LbBackendKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _L4LbBackendKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*L4LbBackendKeyHandle)
	switch tag {
	case 1: // key_or_handle.backend_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(L4LbBackendKey)
		err := b.DecodeMessage(msg)
		m.KeyOrHandle = &L4LbBackendKeyHandle_BackendKey{msg}
		return true, err
	case 2: // key_or_handle.service_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &L4LbBackendKeyHandle_ServiceHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _L4LbBackendKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*L4LbBackendKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *L4LbBackendKeyHandle_BackendKey:
		s := proto.Size(x.BackendKey)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *L4LbBackendKeyHandle_ServiceHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Backend server representation
type L4LbBackendSpec struct {
	// backend_key_or_handle is the backend being created/updated
	BackendKeyOrHandle *L4LbBackendKeyHandle `protobuf:"bytes,1,opt,name=backend_key_or_handle,json=backendKeyOrHandle" json:"backend_key_or_handle,omitempty"`
	ServiceKeyOrHandle *L4LbServiceKeyHandle `protobuf:"bytes,2,opt,name=service_key_or_handle,json=serviceKeyOrHandle" json:"service_key_or_handle,omitempty"`
}

func (m *L4LbBackendSpec) Reset()                    { *m = L4LbBackendSpec{} }
func (m *L4LbBackendSpec) String() string            { return proto.CompactTextString(m) }
func (*L4LbBackendSpec) ProtoMessage()               {}
func (*L4LbBackendSpec) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{16} }

func (m *L4LbBackendSpec) GetBackendKeyOrHandle() *L4LbBackendKeyHandle {
	if m != nil {
		return m.BackendKeyOrHandle
	}
	return nil
}

func (m *L4LbBackendSpec) GetServiceKeyOrHandle() *L4LbServiceKeyHandle {
	if m != nil {
		return m.ServiceKeyOrHandle
	}
	return nil
}

// L4LbBackendRequestMsg is batched request message for add/mod of backends
type L4LbBackendRequestMsg struct {
	Request []*L4LbBackendSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *L4LbBackendRequestMsg) Reset()                    { *m = L4LbBackendRequestMsg{} }
func (m *L4LbBackendRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*L4LbBackendRequestMsg) ProtoMessage()               {}
func (*L4LbBackendRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{17} }

func (m *L4LbBackendRequestMsg) GetRequest() []*L4LbBackendSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// L4LbBackendStatus represents the current status of the backend server
type L4LbBackendStatus struct {
	Status        L4LbStatus `protobuf:"varint,1,opt,name=status,enum=l4lb.L4LbStatus" json:"status,omitempty"`
	ServiceHandle uint64     `protobuf:"fixed64,2,opt,name=service_handle,json=serviceHandle" json:"service_handle,omitempty"`
}

func (m *L4LbBackendStatus) Reset()                    { *m = L4LbBackendStatus{} }
func (m *L4LbBackendStatus) String() string            { return proto.CompactTextString(m) }
func (*L4LbBackendStatus) ProtoMessage()               {}
func (*L4LbBackendStatus) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{18} }

func (m *L4LbBackendStatus) GetStatus() L4LbStatus {
	if m != nil {
		return m.Status
	}
	return L4LbStatus_L4LB_STATUS_NONE
}

func (m *L4LbBackendStatus) GetServiceHandle() uint64 {
	if m != nil {
		return m.ServiceHandle
	}
	return 0
}

// L4LbBackendResponse is response to L4LbBackendSpec
type L4LbBackendResponse struct {
	ApiStatus ApiStatus          `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *L4LbBackendStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *L4LbBackendResponse) Reset()                    { *m = L4LbBackendResponse{} }
func (m *L4LbBackendResponse) String() string            { return proto.CompactTextString(m) }
func (*L4LbBackendResponse) ProtoMessage()               {}
func (*L4LbBackendResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{19} }

func (m *L4LbBackendResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *L4LbBackendResponse) GetStatus() *L4LbBackendStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// L4LbBackendResponseMsg is response to L4LbBackendRequestMsg
type L4LbBackendResponseMsg struct {
	Response []*L4LbBackendResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *L4LbBackendResponseMsg) Reset()                    { *m = L4LbBackendResponseMsg{} }
func (m *L4LbBackendResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*L4LbBackendResponseMsg) ProtoMessage()               {}
func (*L4LbBackendResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{20} }

func (m *L4LbBackendResponseMsg) GetResponse() []*L4LbBackendResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// L4LbBackendDeleteRequest is used to delete a backend service instance
type L4LbBackendDeleteRequest struct {
	// key_or_handle is the backend's key or handle
	KeyOrHandle *L4LbBackendKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *L4LbBackendDeleteRequest) Reset()                    { *m = L4LbBackendDeleteRequest{} }
func (m *L4LbBackendDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*L4LbBackendDeleteRequest) ProtoMessage()               {}
func (*L4LbBackendDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{21} }

func (m *L4LbBackendDeleteRequest) GetKeyOrHandle() *L4LbBackendKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// L4LbBackendDeleteRequestMsg is used to delete a batch of backends
type L4LbBackendDeleteRequestMsg struct {
	Request []*L4LbBackendDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *L4LbBackendDeleteRequestMsg) Reset()                    { *m = L4LbBackendDeleteRequestMsg{} }
func (m *L4LbBackendDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*L4LbBackendDeleteRequestMsg) ProtoMessage()               {}
func (*L4LbBackendDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{22} }

func (m *L4LbBackendDeleteRequestMsg) GetRequest() []*L4LbBackendDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// L4LbBackendDeleteResponseMsg is batched response to L4LbBackendDeleteRequestMsg
type L4LbBackendDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *L4LbBackendDeleteResponseMsg) Reset()                    { *m = L4LbBackendDeleteResponseMsg{} }
func (m *L4LbBackendDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*L4LbBackendDeleteResponseMsg) ProtoMessage()               {}
func (*L4LbBackendDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{23} }

func (m *L4LbBackendDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// L4LbBackendStats captures all statistics for given backend instance
type L4LbBackendStats struct {
	NumActiveSessions      uint32 `protobuf:"fixed32,1,opt,name=num_active_sessions,json=numActiveSessions" json:"num_active_sessions,omitempty"`
	NumTotalSessions       uint32 `protobuf:"fixed32,2,opt,name=num_total_sessions,json=numTotalSessions" json:"num_total_sessions,omitempty"`
	NumHealthCheckFailures uint32 `protobuf:"fixed32,3,opt,name=num_health_check_failures,json=numHealthCheckFailures" json:"num_health_check_failures,omitempty"`
	NumHealthProbeFailures uint32 `protobuf:"fixed32,4,opt,name=num_health_probe_failures,json=numHealthProbeFailures" json:"num_health_probe_failures,omitempty"`
}

func (m *L4LbBackendStats) Reset()                    { *m = L4LbBackendStats{} }
func (m *L4LbBackendStats) String() string            { return proto.CompactTextString(m) }
func (*L4LbBackendStats) ProtoMessage()               {}
func (*L4LbBackendStats) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{24} }

func (m *L4LbBackendStats) GetNumActiveSessions() uint32 {
	if m != nil {
		return m.NumActiveSessions
	}
	return 0
}

func (m *L4LbBackendStats) GetNumTotalSessions() uint32 {
	if m != nil {
		return m.NumTotalSessions
	}
	return 0
}

func (m *L4LbBackendStats) GetNumHealthCheckFailures() uint32 {
	if m != nil {
		return m.NumHealthCheckFailures
	}
	return 0
}

func (m *L4LbBackendStats) GetNumHealthProbeFailures() uint32 {
	if m != nil {
		return m.NumHealthProbeFailures
	}
	return 0
}

// L4LbBackendGetRequest is used to get information about a particular backend
type L4LbBackendGetRequest struct {
	// key_or_handle is the backend's key or handle
	KeyOrHandle *L4LbBackendKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *L4LbBackendGetRequest) Reset()                    { *m = L4LbBackendGetRequest{} }
func (m *L4LbBackendGetRequest) String() string            { return proto.CompactTextString(m) }
func (*L4LbBackendGetRequest) ProtoMessage()               {}
func (*L4LbBackendGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{25} }

func (m *L4LbBackendGetRequest) GetKeyOrHandle() *L4LbBackendKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// L4LbBackendGetRequestMsg is batched GET request for backends
type L4LbBackendGetRequestMsg struct {
	Request []*L4LbBackendGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *L4LbBackendGetRequestMsg) Reset()                    { *m = L4LbBackendGetRequestMsg{} }
func (m *L4LbBackendGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*L4LbBackendGetRequestMsg) ProtoMessage()               {}
func (*L4LbBackendGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{26} }

func (m *L4LbBackendGetRequestMsg) GetRequest() []*L4LbBackendGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// L4LbBackendGetResponse returns all the information about a backend
type L4LbBackendGetResponse struct {
	Spec   *L4LbBackendSpec   `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Status *L4LbBackendStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Stats  *L4LbBackendStats  `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
}

func (m *L4LbBackendGetResponse) Reset()                    { *m = L4LbBackendGetResponse{} }
func (m *L4LbBackendGetResponse) String() string            { return proto.CompactTextString(m) }
func (*L4LbBackendGetResponse) ProtoMessage()               {}
func (*L4LbBackendGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{27} }

func (m *L4LbBackendGetResponse) GetSpec() *L4LbBackendSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *L4LbBackendGetResponse) GetStatus() *L4LbBackendStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *L4LbBackendGetResponse) GetStats() *L4LbBackendStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// L4LbBackendGetResponseMsg is response to L4LbBackendGetRequestMsg
type L4LbBackendGetResponseMsg struct {
	Response []*L4LbBackendGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *L4LbBackendGetResponseMsg) Reset()                    { *m = L4LbBackendGetResponseMsg{} }
func (m *L4LbBackendGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*L4LbBackendGetResponseMsg) ProtoMessage()               {}
func (*L4LbBackendGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{28} }

func (m *L4LbBackendGetResponseMsg) GetResponse() []*L4LbBackendGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// L4LbServiceGetRequest is used to get information about a service
type L4LbServiceGetRequest struct {
	// key_or_handle is L4 LB service's unique identifier
	KeyOrHandle *L4LbServiceKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *L4LbServiceGetRequest) Reset()                    { *m = L4LbServiceGetRequest{} }
func (m *L4LbServiceGetRequest) String() string            { return proto.CompactTextString(m) }
func (*L4LbServiceGetRequest) ProtoMessage()               {}
func (*L4LbServiceGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{29} }

func (m *L4LbServiceGetRequest) GetKeyOrHandle() *L4LbServiceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// L4LbServiceGetRequestMsg is batched GET request for services
type L4LbServiceGetRequestMsg struct {
	Request []*L4LbServiceGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *L4LbServiceGetRequestMsg) Reset()                    { *m = L4LbServiceGetRequestMsg{} }
func (m *L4LbServiceGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*L4LbServiceGetRequestMsg) ProtoMessage()               {}
func (*L4LbServiceGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{30} }

func (m *L4LbServiceGetRequestMsg) GetRequest() []*L4LbServiceGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// L4LbServiceGetResponse captures all the information about a service
type L4LbServiceGetResponse struct {
	Spec     *L4LbServiceSpec          `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Status   *L4LbServiceStatus        `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Stats    *L4LbServiceStats         `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
	Backends []*L4LbBackendGetResponse `protobuf:"bytes,4,rep,name=backends" json:"backends,omitempty"`
}

func (m *L4LbServiceGetResponse) Reset()                    { *m = L4LbServiceGetResponse{} }
func (m *L4LbServiceGetResponse) String() string            { return proto.CompactTextString(m) }
func (*L4LbServiceGetResponse) ProtoMessage()               {}
func (*L4LbServiceGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{31} }

func (m *L4LbServiceGetResponse) GetSpec() *L4LbServiceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *L4LbServiceGetResponse) GetStatus() *L4LbServiceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *L4LbServiceGetResponse) GetStats() *L4LbServiceStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *L4LbServiceGetResponse) GetBackends() []*L4LbBackendGetResponse {
	if m != nil {
		return m.Backends
	}
	return nil
}

// L4LbServiceGetResponseMsg is response to L4LbServiceGetRequestMsg
type L4LbServiceGetResponseMsg struct {
	Response []*L4LbServiceGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *L4LbServiceGetResponseMsg) Reset()                    { *m = L4LbServiceGetResponseMsg{} }
func (m *L4LbServiceGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*L4LbServiceGetResponseMsg) ProtoMessage()               {}
func (*L4LbServiceGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{32} }

func (m *L4LbServiceGetResponseMsg) GetResponse() []*L4LbServiceGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*LBMethod)(nil), "halproto.LBMethod")
	proto.RegisterType((*HealthCheck)(nil), "halproto.HealthCheck")
	proto.RegisterType((*L4LbServiceKey)(nil), "halproto.L4LbServiceKey")
	proto.RegisterType((*L4LbServiceKeyHandle)(nil), "halproto.L4LbServiceKeyHandle")
	proto.RegisterType((*L4LbServiceSpec)(nil), "halproto.L4LbServiceSpec")
	proto.RegisterType((*L4LbServiceRequestMsg)(nil), "halproto.L4LbServiceRequestMsg")
	proto.RegisterType((*L4LbServiceStatus)(nil), "halproto.L4LbServiceStatus")
	proto.RegisterType((*L4LbServiceResponse)(nil), "halproto.L4LbServiceResponse")
	proto.RegisterType((*L4LbServiceResponseMsg)(nil), "halproto.L4LbServiceResponseMsg")
	proto.RegisterType((*L4LbServiceDeleteRequest)(nil), "halproto.L4LbServiceDeleteRequest")
	proto.RegisterType((*L4LbServiceDeleteRequestMsg)(nil), "halproto.L4LbServiceDeleteRequestMsg")
	proto.RegisterType((*L4LbServiceDeleteResponse)(nil), "halproto.L4LbServiceDeleteResponse")
	proto.RegisterType((*L4LbServiceDeleteResponseMsg)(nil), "halproto.L4LbServiceDeleteResponseMsg")
	proto.RegisterType((*L4LbServiceStats)(nil), "halproto.L4LbServiceStats")
	proto.RegisterType((*L4LbBackendKey)(nil), "halproto.L4LbBackendKey")
	proto.RegisterType((*L4LbBackendKeyHandle)(nil), "halproto.L4LbBackendKeyHandle")
	proto.RegisterType((*L4LbBackendSpec)(nil), "halproto.L4LbBackendSpec")
	proto.RegisterType((*L4LbBackendRequestMsg)(nil), "halproto.L4LbBackendRequestMsg")
	proto.RegisterType((*L4LbBackendStatus)(nil), "halproto.L4LbBackendStatus")
	proto.RegisterType((*L4LbBackendResponse)(nil), "halproto.L4LbBackendResponse")
	proto.RegisterType((*L4LbBackendResponseMsg)(nil), "halproto.L4LbBackendResponseMsg")
	proto.RegisterType((*L4LbBackendDeleteRequest)(nil), "halproto.L4LbBackendDeleteRequest")
	proto.RegisterType((*L4LbBackendDeleteRequestMsg)(nil), "halproto.L4LbBackendDeleteRequestMsg")
	proto.RegisterType((*L4LbBackendDeleteResponseMsg)(nil), "halproto.L4LbBackendDeleteResponseMsg")
	proto.RegisterType((*L4LbBackendStats)(nil), "halproto.L4LbBackendStats")
	proto.RegisterType((*L4LbBackendGetRequest)(nil), "halproto.L4LbBackendGetRequest")
	proto.RegisterType((*L4LbBackendGetRequestMsg)(nil), "halproto.L4LbBackendGetRequestMsg")
	proto.RegisterType((*L4LbBackendGetResponse)(nil), "halproto.L4LbBackendGetResponse")
	proto.RegisterType((*L4LbBackendGetResponseMsg)(nil), "halproto.L4LbBackendGetResponseMsg")
	proto.RegisterType((*L4LbServiceGetRequest)(nil), "halproto.L4LbServiceGetRequest")
	proto.RegisterType((*L4LbServiceGetRequestMsg)(nil), "halproto.L4LbServiceGetRequestMsg")
	proto.RegisterType((*L4LbServiceGetResponse)(nil), "halproto.L4LbServiceGetResponse")
	proto.RegisterType((*L4LbServiceGetResponseMsg)(nil), "halproto.L4LbServiceGetResponseMsg")
	proto.RegisterEnum("halproto.SessionAffinity", SessionAffinity_name, SessionAffinity_value)
	proto.RegisterEnum("halproto.LBAlgorithm", LBAlgorithm_name, LBAlgorithm_value)
	proto.RegisterEnum("halproto.L4LBProtocol", L4LBProtocol_name, L4LBProtocol_value)
	proto.RegisterEnum("halproto.L4LBProbeProtocol", L4LBProbeProtocol_name, L4LBProbeProtocol_value)
	proto.RegisterEnum("halproto.L4LbStatus", L4LbStatus_name, L4LbStatus_value)
}

func init() { proto.RegisterFile("l4lb.proto", fileDescriptor15) }

var fileDescriptor15 = []byte{
	// 1595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xdb, 0x52, 0xdb, 0x56,
	0x17, 0xc6, 0x86, 0x00, 0x59, 0x06, 0x23, 0x76, 0x42, 0x30, 0xe4, 0x40, 0xa2, 0xfc, 0x99, 0xf0,
	0x33, 0x19, 0x98, 0x21, 0xfc, 0x7f, 0xda, 0xa6, 0x93, 0xa9, 0x6d, 0x4c, 0xac, 0x89, 0x6d, 0x39,
	0xb2, 0x69, 0x7a, 0x98, 0xce, 0x1e, 0xd9, 0xde, 0x60, 0xd7, 0x42, 0x52, 0x25, 0x99, 0xd6, 0x17,
	0x7d, 0x80, 0xbe, 0x41, 0xa7, 0xbd, 0xeb, 0x55, 0xdf, 0xa2, 0x17, 0x7d, 0x8d, 0x4e, 0x2f, 0xfb,
	0x00, 0x7d, 0x82, 0x8e, 0xf6, 0x41, 0x27, 0xcb, 0x01, 0x32, 0xcd, 0x95, 0xad, 0xb5, 0xbe, 0x75,
	0xde, 0x6b, 0xad, 0x2d, 0x01, 0x18, 0x07, 0x46, 0x67, 0xd7, 0x76, 0x2c, 0xcf, 0x42, 0x73, 0xfe,
	0xff, 0xcd, 0x9c, 0x37, 0xb6, 0x89, 0xcb, 0x48, 0x9b, 0x8b, 0xc3, 0x3e, 0xfb, 0x27, 0x3f, 0x87,
	0xc5, 0x5a, 0xa9, 0x4e, 0xbc, 0xbe, 0xd5, 0x43, 0x7b, 0x70, 0x5d, 0x37, 0x4e, 0x2d, 0x67, 0xe0,
	0xf5, 0xcf, 0x0a, 0x99, 0xfb, 0x99, 0xed, 0xfc, 0xfe, 0xea, 0x2e, 0x55, 0x54, 0x2b, 0x15, 0x05,
	0x43, 0x0b, 0x31, 0xf2, 0xef, 0x19, 0xc8, 0x55, 0x89, 0x6e, 0x78, 0xfd, 0x72, 0x9f, 0x74, 0x87,
	0xe8, 0x2e, 0x80, 0xed, 0x58, 0x1d, 0x82, 0x6d, 0xcb, 0xf1, 0xa8, 0x86, 0x05, 0xed, 0x3a, 0xa5,
	0x34, 0x2d, 0xc7, 0x43, 0x2f, 0x20, 0xcf, 0xd9, 0xbe, 0xe9, 0xae, 0x65, 0x14, 0xb2, 0xd4, 0xc8,
	0x3a, 0x37, 0x72, 0x50, 0x2b, 0x35, 0x29, 0x98, 0xb3, 0xb5, 0x65, 0x3b, 0xfa, 0x88, 0x1e, 0x09,
	0xf9, 0x81, 0xe9, 0x11, 0xe7, 0x5c, 0x37, 0x0a, 0xb3, 0xd4, 0x04, 0x83, 0x29, 0x9c, 0x88, 0x76,
	0xe1, 0x06, 0x25, 0xb8, 0xd8, 0x26, 0x4e, 0x88, 0x9d, 0xa3, 0xd8, 0x55, 0xc6, 0x6a, 0x12, 0x47,
	0xe0, 0xe5, 0x5f, 0x33, 0x90, 0xaf, 0x1d, 0xd4, 0x3a, 0x2d, 0xe2, 0x9c, 0x0f, 0xba, 0xe4, 0x15,
	0x19, 0xa3, 0x17, 0x80, 0x5c, 0xf6, 0x84, 0x07, 0x36, 0xd6, 0x7b, 0x3d, 0x87, 0xb8, 0x2e, 0x0d,
	0x28, 0xb7, 0x2f, 0xed, 0xb2, 0x4c, 0x2a, 0xcd, 0x22, 0xa3, 0x6b, 0x12, 0xc7, 0x2a, 0x36, 0xa7,
	0xa0, 0xa7, 0x90, 0x1b, 0xd8, 0xc9, 0x30, 0x51, 0x2c, 0x4c, 0x16, 0x21, 0x0c, 0xec, 0x20, 0xbc,
	0x07, 0xb0, 0x24, 0x8c, 0xd2, 0xfc, 0xf9, 0xc1, 0x2d, 0x6b, 0x39, 0x4e, 0xf3, 0x33, 0x28, 0xff,
	0x90, 0x81, 0x9b, 0x71, 0x57, 0xab, 0xba, 0xd9, 0x33, 0x08, 0x7a, 0x06, 0x02, 0x87, 0x87, 0x64,
	0xcc, 0x3d, 0xbd, 0x19, 0x18, 0x8c, 0x0a, 0xcc, 0x68, 0xe0, 0x86, 0x91, 0x3e, 0x86, 0xbc, 0x10,
	0xec, 0x53, 0x55, 0xd4, 0xd9, 0xf9, 0xea, 0x8c, 0xb6, 0xcc, 0xe9, 0xcc, 0x42, 0x69, 0x05, 0x96,
	0x87, 0x64, 0x8c, 0x2d, 0x87, 0xe3, 0xe4, 0x9f, 0x66, 0x61, 0x25, 0xa2, 0xba, 0x65, 0x93, 0x2e,
	0x6a, 0x24, 0x40, 0xdc, 0x91, 0xcd, 0x54, 0x47, 0x98, 0xde, 0xfc, 0xdf, 0x7f, 0x6e, 0xc1, 0x39,
	0x31, 0x07, 0x5d, 0xf2, 0xd1, 0x90, 0x8c, 0xb5, 0xdc, 0x90, 0x8c, 0x55, 0x87, 0x87, 0xf5, 0x7f,
	0xc8, 0x9f, 0x3b, 0x27, 0x7e, 0x48, 0x51, 0xef, 0xfc, 0x1a, 0x0c, 0xfb, 0xbb, 0x9f, 0x3a, 0x27,
	0x81, 0x1a, 0x6d, 0xe9, 0x3c, 0xf2, 0x84, 0xb6, 0x41, 0xb2, 0x1d, 0xeb, 0xbb, 0x31, 0xd6, 0x1d,
	0x1b, 0x13, 0x53, 0xef, 0x18, 0x84, 0xa6, 0x73, 0x51, 0xcb, 0x53, 0x7a, 0xd1, 0xb1, 0x2b, 0x94,
	0x8a, 0xb6, 0xc2, 0xc4, 0x9d, 0xe9, 0x5d, 0x7a, 0x48, 0xe6, 0x83, 0x04, 0xd5, 0xf5, 0x2e, 0xfa,
	0x04, 0x24, 0x97, 0xb8, 0xee, 0xc0, 0x32, 0xb1, 0x7e, 0x72, 0x32, 0x30, 0x07, 0xde, 0xb8, 0x70,
	0x8d, 0xd6, 0x73, 0x8d, 0x45, 0xd5, 0x62, 0xdc, 0x22, 0x67, 0x6a, 0x2b, 0x6e, 0x9c, 0x80, 0x3e,
	0x06, 0x64, 0x58, 0x7a, 0x0f, 0x77, 0x74, 0x43, 0x37, 0xbb, 0xc4, 0xc1, 0xfe, 0xf9, 0x29, 0xcc,
	0xd3, 0x40, 0xf2, 0xa2, 0xbf, 0x58, 0x0b, 0x6a, 0x92, 0x8f, 0x2c, 0x71, 0x60, 0x7b, 0x6c, 0x13,
	0x74, 0x00, 0x4b, 0x7d, 0xda, 0x62, 0xb8, 0xeb, 0xf7, 0x58, 0x61, 0x81, 0xca, 0xf1, 0xbe, 0x8c,
	0x34, 0x9f, 0x96, 0xeb, 0x87, 0x0f, 0x72, 0x15, 0xd6, 0x22, 0xd9, 0xd6, 0xc8, 0x37, 0x23, 0xe2,
	0x7a, 0x75, 0xf7, 0x14, 0xed, 0xc1, 0x82, 0xc3, 0x9e, 0x0a, 0x99, 0xfb, 0xb3, 0xdb, 0x39, 0x11,
	0x45, 0xa2, 0x92, 0x9a, 0x40, 0xc9, 0x2e, 0xac, 0x46, 0x79, 0x9e, 0xee, 0x8d, 0x5c, 0xf4, 0x2c,
	0x3c, 0x35, 0x2e, 0xa5, 0xf0, 0x71, 0x21, 0x45, 0x94, 0x51, 0x7a, 0x70, 0x8a, 0xb8, 0xe0, 0xa3,
	0xf4, 0xe3, 0x96, 0x38, 0x6c, 0xf2, 0xb7, 0x70, 0x23, 0xe6, 0xbe, 0x6b, 0x5b, 0xa6, 0x4b, 0xd0,
	0x1e, 0x80, 0x6e, 0x0f, 0x92, 0x26, 0x59, 0x3b, 0x16, 0xed, 0x01, 0x37, 0x79, 0x5d, 0x17, 0x7f,
	0xd1, 0x1e, 0xcc, 0x73, 0x30, 0x3b, 0x37, 0xeb, 0x93, 0xc1, 0x32, 0x19, 0x0e, 0x93, 0x55, 0xb8,
	0x95, 0x62, 0xd8, 0x4f, 0xdc, 0xff, 0x60, 0xd1, 0xe1, 0x8f, 0x3c, 0x73, 0x1b, 0x13, 0xca, 0x04,
	0x5e, 0x0b, 0xa0, 0xf2, 0xd7, 0x50, 0x88, 0x00, 0x0e, 0x89, 0x41, 0x3c, 0x51, 0x8e, 0x7f, 0xbb,
	0x5b, 0xe4, 0x37, 0x70, 0x7b, 0x9a, 0x2d, 0x3f, 0x82, 0x0f, 0x92, 0xa5, 0xbf, 0x37, 0x61, 0x28,
	0x26, 0x13, 0x9e, 0x81, 0x1a, 0x6c, 0xa4, 0x80, 0xde, 0xb1, 0x28, 0xf2, 0x97, 0x70, 0x67, 0xaa,
	0x36, 0xdf, 0xcf, 0xe7, 0x13, 0x99, 0xde, 0x9a, 0xea, 0xe8, 0x44, 0xbe, 0x7f, 0xcc, 0x82, 0x94,
	0x28, 0xaf, 0xeb, 0x6f, 0x04, 0x73, 0x74, 0x86, 0xf5, 0xae, 0x37, 0x38, 0x27, 0xb8, 0xa3, 0x77,
	0x87, 0xc4, 0xec, 0xb9, 0x7c, 0x41, 0xad, 0x9a, 0xa3, 0xb3, 0x22, 0xe5, 0x94, 0x38, 0x23, 0x81,
	0xe7, 0xfd, 0xcc, 0xce, 0x50, 0x14, 0xcf, 0x3b, 0xdf, 0x45, 0xcf, 0x61, 0xd3, 0xc7, 0x0b, 0x20,
	0x8e, 0xb6, 0x7b, 0x8f, 0x2f, 0xa9, 0x75, 0x73, 0x74, 0x26, 0x04, 0x6a, 0x61, 0x93, 0xf7, 0x84,
	0xb1, 0x40, 0xf8, 0x44, 0x1f, 0x18, 0xa4, 0x27, 0xd6, 0x55, 0x44, 0xea, 0x88, 0x32, 0xd0, 0x33,
	0x28, 0xf8, 0xf8, 0x60, 0x28, 0xe8, 0xe6, 0x29, 0xc1, 0xe4, 0x9c, 0x98, 0x9e, 0x4b, 0x07, 0xd3,
	0x82, 0xb6, 0x66, 0x8e, 0xce, 0xc4, 0x64, 0xf0, 0xb9, 0x15, 0xca, 0x94, 0x5d, 0xb6, 0xe6, 0x78,
	0x94, 0x7c, 0xcd, 0xf1, 0x64, 0x5c, 0x6a, 0xcd, 0x71, 0x6c, 0xb8, 0xe6, 0x1e, 0xc0, 0x92, 0x90,
	0xa7, 0x1b, 0x2b, 0xcb, 0x36, 0x16, 0xa7, 0xc5, 0x36, 0x56, 0x68, 0x35, 0xdc, 0x58, 0x42, 0x36,
	0x75, 0x63, 0x45, 0x04, 0x66, 0x34, 0xe8, 0x84, 0x4e, 0xbf, 0xfb, 0xc6, 0xfa, 0x2d, 0xc3, 0x36,
	0x16, 0x57, 0x4d, 0x37, 0xd6, 0x57, 0xb0, 0x16, 0x71, 0xe3, 0x6d, 0xbd, 0x98, 0x8c, 0x60, 0xa2,
	0x17, 0x51, 0xe8, 0x64, 0xb0, 0xc0, 0xea, 0xb0, 0x16, 0xd9, 0xcb, 0x11, 0xf5, 0xd9, 0x8b, 0x5a,
	0x5d, 0x43, 0xe1, 0x96, 0x0e, 0x3a, 0x9c, 0x8f, 0x75, 0xee, 0xca, 0x25, 0xc7, 0x7a, 0x24, 0xdc,
	0xb0, 0xa5, 0x7b, 0x6c, 0xac, 0x0b, 0x1e, 0x1b, 0x97, 0xdb, 0xc1, 0xb8, 0x9c, 0x36, 0xce, 0x39,
	0xff, 0x8a, 0x73, 0x3c, 0xf0, 0xf7, 0x3d, 0xcc, 0xf1, 0x58, 0x04, 0xc9, 0x39, 0x9e, 0x30, 0x7c,
	0xe1, 0x1c, 0x4f, 0xe0, 0x27, 0xe7, 0x38, 0x07, 0x5c, 0x75, 0x8e, 0x5f, 0x78, 0x76, 0xd2, 0xe6,
	0x78, 0x9a, 0xad, 0x8b, 0xe6, 0x78, 0x9a, 0x4c, 0x58, 0x74, 0x95, 0x4d, 0xde, 0x04, 0x28, 0xcc,
	0x4d, 0xb2, 0x2e, 0xb3, 0x17, 0x8d, 0xf2, 0xbf, 0x32, 0x6c, 0xda, 0x46, 0x8a, 0x30, 0x75, 0x7a,
	0x66, 0xa6, 0x4d, 0xcf, 0x27, 0x80, 0x7c, 0xbc, 0x67, 0x79, 0xba, 0x91, 0x1c, 0xb6, 0x92, 0x39,
	0x3a, 0x6b, 0xfb, 0x8c, 0x00, 0xfd, 0x21, 0x6c, 0xc4, 0xc6, 0x1f, 0xe9, 0x0e, 0xe9, 0xc8, 0x1c,
	0x39, 0xc4, 0xe5, 0xa3, 0xf6, 0x56, 0x64, 0xfe, 0x91, 0xee, 0xf0, 0x88, 0x73, 0x13, 0xa2, 0xec,
	0x55, 0x22, 0x10, 0x9d, 0x4b, 0x88, 0xd2, 0x37, 0x11, 0x21, 0x2a, 0x9f, 0xc6, 0x1a, 0xef, 0x25,
	0xf1, 0xde, 0x57, 0xed, 0x5f, 0xc7, 0xce, 0x59, 0x68, 0x88, 0x1d, 0xdd, 0x44, 0xe1, 0x6f, 0x4f,
	0x58, 0x09, 0x05, 0xc2, 0xaa, 0xff, 0x92, 0x89, 0x35, 0x03, 0x85, 0xf0, 0x46, 0xfc, 0x2f, 0xcc,
	0xb9, 0x36, 0xe9, 0x72, 0xa7, 0xa7, 0xcc, 0x0c, 0x0a, 0xb9, 0x72, 0x0b, 0xa2, 0x27, 0x70, 0xcd,
	0xff, 0xc7, 0x8a, 0x92, 0xdb, 0xbf, 0x95, 0x8a, 0x77, 0x35, 0x06, 0x92, 0x8f, 0xd9, 0x15, 0x63,
	0xd2, 0x47, 0x76, 0xe2, 0x93, 0x3d, 0x7b, 0x27, 0x3d, 0xf2, 0x89, 0xb6, 0x3d, 0x8d, 0xdd, 0x83,
	0xaf, 0x54, 0xb7, 0xab, 0xdd, 0xbd, 0x5e, 0xc7, 0xee, 0x79, 0x97, 0xaf, 0xdb, 0x84, 0x40, 0x58,
	0xb7, 0x3f, 0x32, 0xb1, 0xcb, 0xe8, 0xa5, 0xea, 0x16, 0xbd, 0xc2, 0x5f, 0x58, 0xb7, 0xd4, 0x2b,
	0xf0, 0x5b, 0xea, 0x16, 0xbd, 0x53, 0xf1, 0xba, 0xf9, 0xa5, 0x09, 0xee, 0x53, 0x73, 0x97, 0x29,
	0x8d, 0x40, 0x8b, 0x8a, 0x4f, 0x46, 0x77, 0x61, 0xc5, 0x27, 0x45, 0xc2, 0x8a, 0xef, 0x8c, 0x60,
	0x25, 0xf1, 0x46, 0x86, 0xee, 0xc1, 0xa6, 0xff, 0xd2, 0x8d, 0x5b, 0x95, 0x56, 0x4b, 0x51, 0x1b,
	0xb8, 0x78, 0x74, 0xa4, 0x34, 0x94, 0xf6, 0xe7, 0xb8, 0xa1, 0x36, 0x2a, 0xd2, 0x0c, 0xba, 0x4b,
	0x3d, 0x49, 0xe1, 0xb7, 0x94, 0xa6, 0x94, 0x41, 0x0f, 0x61, 0x6b, 0x2a, 0x1b, 0xb7, 0x9a, 0xaa,
	0xd6, 0x96, 0xb2, 0x3b, 0x3f, 0x67, 0x21, 0x17, 0xf9, 0x4a, 0x82, 0xd6, 0xe9, 0xe6, 0x2b, 0xe1,
	0x62, 0xed, 0xa5, 0xaa, 0x29, 0xed, 0x6a, 0x5d, 0x18, 0x13, 0xce, 0x84, 0x0c, 0x4d, 0x3d, 0x6e,
	0x1c, 0x62, 0x4d, 0x2d, 0x29, 0x0d, 0x29, 0x83, 0x1e, 0xc3, 0xc3, 0x04, 0xff, 0x4d, 0x45, 0x79,
	0x59, 0x6d, 0x57, 0x0e, 0x63, 0xc0, 0x2c, 0xda, 0xa0, 0x47, 0x3b, 0xa6, 0xa8, 0xd8, 0x38, 0x54,
	0xeb, 0xd2, 0x2c, 0xfa, 0x0f, 0xdc, 0x4f, 0xb0, 0x6a, 0x95, 0x62, 0xab, 0x8d, 0xcb, 0x6a, 0xa3,
	0x51, 0x29, 0xb7, 0x15, 0xb5, 0xd1, 0x92, 0xe6, 0xd0, 0x16, 0x5d, 0x33, 0x51, 0x54, 0x53, 0x29,
	0xbf, 0xda, 0x17, 0x6a, 0xae, 0x21, 0x19, 0xee, 0x25, 0x00, 0x75, 0xa5, 0x11, 0x53, 0x32, 0x9f,
	0x62, 0xaa, 0x5a, 0x6c, 0x55, 0xb1, 0xda, 0xc0, 0x2d, 0xf5, 0x58, 0x2b, 0x57, 0xb0, 0xd2, 0x94,
	0x16, 0x76, 0x5e, 0xc1, 0x52, 0xf4, 0xb3, 0x07, 0xba, 0x41, 0x2f, 0x62, 0x25, 0xdc, 0xd4, 0xd4,
	0xb6, 0x2a, 0x32, 0x83, 0xe8, 0xfd, 0x54, 0x10, 0xdb, 0xe5, 0xa6, 0x34, 0x9f, 0xa0, 0x1d, 0x1f,
	0x36, 0xa5, 0xd5, 0x9d, 0xef, 0xe9, 0xd5, 0x25, 0xfe, 0xa9, 0x28, 0xc8, 0x46, 0x53, 0x53, 0x4b,
	0x95, 0xb8, 0xde, 0x34, 0x96, 0x52, 0xae, 0xfb, 0xa5, 0x2d, 0xd0, 0xcb, 0x69, 0x9c, 0xc5, 0x0c,
	0xa7, 0x71, 0x98, 0xf9, 0x1a, 0x40, 0x78, 0x21, 0x42, 0x37, 0xe9, 0x02, 0x2c, 0xe1, 0x56, 0xbb,
	0xd8, 0x3e, 0x6e, 0x25, 0x43, 0xe1, 0xd4, 0x63, 0xdf, 0x56, 0x02, 0x79, 0xa8, 0xbe, 0x69, 0x48,
	0xd9, 0xfd, 0xcf, 0x60, 0xce, 0xd7, 0x86, 0x9a, 0xb1, 0xd7, 0xec, 0xb2, 0x43, 0x74, 0x8f, 0xa0,
	0xdb, 0x29, 0x6f, 0x98, 0x62, 0xaa, 0x6c, 0xde, 0x99, 0xfa, 0xfa, 0x59, 0x77, 0x4f, 0xe5, 0x99,
	0x12, 0x7c, 0xb1, 0xd8, 0xd7, 0x0d, 0xfa, 0x0d, 0xaa, 0x33, 0x4f, 0x7f, 0x9e, 0xfe, 0x13, 0x00,
	0x00, 0xff, 0xff, 0x5e, 0x56, 0x5a, 0xa6, 0x17, 0x14, 0x00, 0x00,
}
