// Code generated by protoc-gen-go. DO NOT EDIT.
// source: interface.proto

/*
Package goproto is a generated protocol buffer package.

It is generated from these files:
	interface.proto

It has these top-level messages:
	ObjectMeta
	EncapInfo
	IPAddress
	IPRange
	IPPrefix
	IPSubnet
	AddressRange
	Address
	IPAddressObj
	L4PortRange
	Empty
	DropReasons
	EgressDropReasons
	VrfKeyHandle
	L2SegmentKeyHandle
	PortKeyHandle
	LifKeyHandle
	InterfaceKeyHandle
	FilterKey
	LifQStateMapEntry
	PktFilter
	LifSpec
	LifRequestMsg
	LifStatus
	LifQState
	LifRdmaData
	LifResponse
	LifResponseMsg
	QStateGetReq
	QStateGetResp
	GetQStateResponseMsg
	P4ProgLabel
	QStateSetReq
	SetQStateRequestMsg
	QStateSetResp
	SetQStateResponseMsg
	LifDeleteRequest
	LifDeleteRequestMsg
	LifDeleteResponse
	LifDeleteResponseMsg
	LifTxStats
	LifRxStats
	LifRssSpec
	EnicInfo
	EnicClassicInfo
	IfEnicInfo
	IfUplinkInfo
	IfUplinkPCInfo
	IfTunnelVxlanInfo
	IfTunnelGREInfo
	IfTunnelInfo
	IfCPUInfo
	IfAppRedirInfo
	InterfaceSpec
	InterfaceRequestMsg
	UplinkResponseInfo
	EnicL2SegInfo
	SmartEnicInfo
	ClassicEnicInfo
	EnicResponseInfo
	CpuIfResponseInfo
	TunnelIfResponseInfo
	AppRedirIfInfo
	InterfaceStatus
	InterfaceResponse
	InterfaceResponseMsg
	InterfaceDeleteRequest
	InterfaceDeleteRequestMsg
	InterfaceDeleteResponse
	InterfaceDeleteResponseMsg
	InterfaceStats
	InterfaceGetRequest
	InterfaceGetRequestMsg
	InterfaceGetResponse
	InterfaceGetResponseMsg
	InterfaceL2SegmentSpec
	InterfaceL2SegmentRequestMsg
	InterfaceL2SegmentResponse
	InterfaceL2SegmentResponseMsg
*/
package goproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import gogoproto "github.com/gogo/protobuf/gogoproto"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// goproto_enum_prefix from public import gogo.proto
var E_GoprotoEnumPrefix = gogoproto.E_GoprotoEnumPrefix

// goproto_enum_stringer from public import gogo.proto
var E_GoprotoEnumStringer = gogoproto.E_GoprotoEnumStringer

// enum_stringer from public import gogo.proto
var E_EnumStringer = gogoproto.E_EnumStringer

// enum_customname from public import gogo.proto
var E_EnumCustomname = gogoproto.E_EnumCustomname

// enumdecl from public import gogo.proto
var E_Enumdecl = gogoproto.E_Enumdecl

// enumvalue_customname from public import gogo.proto
var E_EnumvalueCustomname = gogoproto.E_EnumvalueCustomname

// goproto_getters_all from public import gogo.proto
var E_GoprotoGettersAll = gogoproto.E_GoprotoGettersAll

// goproto_enum_prefix_all from public import gogo.proto
var E_GoprotoEnumPrefixAll = gogoproto.E_GoprotoEnumPrefixAll

// goproto_stringer_all from public import gogo.proto
var E_GoprotoStringerAll = gogoproto.E_GoprotoStringerAll

// verbose_equal_all from public import gogo.proto
var E_VerboseEqualAll = gogoproto.E_VerboseEqualAll

// face_all from public import gogo.proto
var E_FaceAll = gogoproto.E_FaceAll

// gostring_all from public import gogo.proto
var E_GostringAll = gogoproto.E_GostringAll

// populate_all from public import gogo.proto
var E_PopulateAll = gogoproto.E_PopulateAll

// stringer_all from public import gogo.proto
var E_StringerAll = gogoproto.E_StringerAll

// onlyone_all from public import gogo.proto
var E_OnlyoneAll = gogoproto.E_OnlyoneAll

// equal_all from public import gogo.proto
var E_EqualAll = gogoproto.E_EqualAll

// description_all from public import gogo.proto
var E_DescriptionAll = gogoproto.E_DescriptionAll

// testgen_all from public import gogo.proto
var E_TestgenAll = gogoproto.E_TestgenAll

// benchgen_all from public import gogo.proto
var E_BenchgenAll = gogoproto.E_BenchgenAll

// marshaler_all from public import gogo.proto
var E_MarshalerAll = gogoproto.E_MarshalerAll

// unmarshaler_all from public import gogo.proto
var E_UnmarshalerAll = gogoproto.E_UnmarshalerAll

// stable_marshaler_all from public import gogo.proto
var E_StableMarshalerAll = gogoproto.E_StableMarshalerAll

// sizer_all from public import gogo.proto
var E_SizerAll = gogoproto.E_SizerAll

// goproto_enum_stringer_all from public import gogo.proto
var E_GoprotoEnumStringerAll = gogoproto.E_GoprotoEnumStringerAll

// enum_stringer_all from public import gogo.proto
var E_EnumStringerAll = gogoproto.E_EnumStringerAll

// unsafe_marshaler_all from public import gogo.proto
var E_UnsafeMarshalerAll = gogoproto.E_UnsafeMarshalerAll

// unsafe_unmarshaler_all from public import gogo.proto
var E_UnsafeUnmarshalerAll = gogoproto.E_UnsafeUnmarshalerAll

// goproto_extensions_map_all from public import gogo.proto
var E_GoprotoExtensionsMapAll = gogoproto.E_GoprotoExtensionsMapAll

// goproto_unrecognized_all from public import gogo.proto
var E_GoprotoUnrecognizedAll = gogoproto.E_GoprotoUnrecognizedAll

// gogoproto_import from public import gogo.proto
var E_GogoprotoImport = gogoproto.E_GogoprotoImport

// protosizer_all from public import gogo.proto
var E_ProtosizerAll = gogoproto.E_ProtosizerAll

// compare_all from public import gogo.proto
var E_CompareAll = gogoproto.E_CompareAll

// typedecl_all from public import gogo.proto
var E_TypedeclAll = gogoproto.E_TypedeclAll

// enumdecl_all from public import gogo.proto
var E_EnumdeclAll = gogoproto.E_EnumdeclAll

// goproto_registration from public import gogo.proto
var E_GoprotoRegistration = gogoproto.E_GoprotoRegistration

// goproto_getters from public import gogo.proto
var E_GoprotoGetters = gogoproto.E_GoprotoGetters

// goproto_stringer from public import gogo.proto
var E_GoprotoStringer = gogoproto.E_GoprotoStringer

// verbose_equal from public import gogo.proto
var E_VerboseEqual = gogoproto.E_VerboseEqual

// face from public import gogo.proto
var E_Face = gogoproto.E_Face

// gostring from public import gogo.proto
var E_Gostring = gogoproto.E_Gostring

// populate from public import gogo.proto
var E_Populate = gogoproto.E_Populate

// stringer from public import gogo.proto
var E_Stringer = gogoproto.E_Stringer

// onlyone from public import gogo.proto
var E_Onlyone = gogoproto.E_Onlyone

// equal from public import gogo.proto
var E_Equal = gogoproto.E_Equal

// description from public import gogo.proto
var E_Description = gogoproto.E_Description

// testgen from public import gogo.proto
var E_Testgen = gogoproto.E_Testgen

// benchgen from public import gogo.proto
var E_Benchgen = gogoproto.E_Benchgen

// marshaler from public import gogo.proto
var E_Marshaler = gogoproto.E_Marshaler

// unmarshaler from public import gogo.proto
var E_Unmarshaler = gogoproto.E_Unmarshaler

// stable_marshaler from public import gogo.proto
var E_StableMarshaler = gogoproto.E_StableMarshaler

// sizer from public import gogo.proto
var E_Sizer = gogoproto.E_Sizer

// unsafe_marshaler from public import gogo.proto
var E_UnsafeMarshaler = gogoproto.E_UnsafeMarshaler

// unsafe_unmarshaler from public import gogo.proto
var E_UnsafeUnmarshaler = gogoproto.E_UnsafeUnmarshaler

// goproto_extensions_map from public import gogo.proto
var E_GoprotoExtensionsMap = gogoproto.E_GoprotoExtensionsMap

// goproto_unrecognized from public import gogo.proto
var E_GoprotoUnrecognized = gogoproto.E_GoprotoUnrecognized

// protosizer from public import gogo.proto
var E_Protosizer = gogoproto.E_Protosizer

// compare from public import gogo.proto
var E_Compare = gogoproto.E_Compare

// typedecl from public import gogo.proto
var E_Typedecl = gogoproto.E_Typedecl

// nullable from public import gogo.proto
var E_Nullable = gogoproto.E_Nullable

// embed from public import gogo.proto
var E_Embed = gogoproto.E_Embed

// customtype from public import gogo.proto
var E_Customtype = gogoproto.E_Customtype

// customname from public import gogo.proto
var E_Customname = gogoproto.E_Customname

// jsontag from public import gogo.proto
var E_Jsontag = gogoproto.E_Jsontag

// moretags from public import gogo.proto
var E_Moretags = gogoproto.E_Moretags

// casttype from public import gogo.proto
var E_Casttype = gogoproto.E_Casttype

// castkey from public import gogo.proto
var E_Castkey = gogoproto.E_Castkey

// castvalue from public import gogo.proto
var E_Castvalue = gogoproto.E_Castvalue

// stdtime from public import gogo.proto
var E_Stdtime = gogoproto.E_Stdtime

// stdduration from public import gogo.proto
var E_Stdduration = gogoproto.E_Stdduration

// IP protocol numbers
type IPProtocol int32

const (
	IPProtocol_IPPROTO_NONE   IPProtocol = 0
	IPProtocol_IPPROTO_ICMP   IPProtocol = 1
	IPProtocol_IPPROTO_IPV4   IPProtocol = 4
	IPProtocol_IPPROTO_TCP    IPProtocol = 6
	IPProtocol_IPPROTO_UDP    IPProtocol = 17
	IPProtocol_IPPROTO_GRE    IPProtocol = 47
	IPProtocol_IPPROTO_ESP    IPProtocol = 50
	IPProtocol_IPPROTO_AH     IPProtocol = 51
	IPProtocol_IPPROTO_ICMPV6 IPProtocol = 58
)

var IPProtocol_name = map[int32]string{
	0:  "IPPROTO_NONE",
	1:  "IPPROTO_ICMP",
	4:  "IPPROTO_IPV4",
	6:  "IPPROTO_TCP",
	17: "IPPROTO_UDP",
	47: "IPPROTO_GRE",
	50: "IPPROTO_ESP",
	51: "IPPROTO_AH",
	58: "IPPROTO_ICMPV6",
}
var IPProtocol_value = map[string]int32{
	"IPPROTO_NONE":   0,
	"IPPROTO_ICMP":   1,
	"IPPROTO_IPV4":   4,
	"IPPROTO_TCP":    6,
	"IPPROTO_UDP":    17,
	"IPPROTO_GRE":    47,
	"IPPROTO_ESP":    50,
	"IPPROTO_AH":     51,
	"IPPROTO_ICMPV6": 58,
}

func (x IPProtocol) String() string {
	return proto.EnumName(IPProtocol_name, int32(x))
}
func (IPProtocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ICMP message types
// TBD - add more here !!
type ICMPMsgType int32

const (
	ICMPMsgType_ICMP_MSG_TYPE_NONE ICMPMsgType = 0
	ICMPMsgType_ICMP_MSG_TYPE_ECHO ICMPMsgType = 1
)

var ICMPMsgType_name = map[int32]string{
	0: "ICMP_MSG_TYPE_NONE",
	1: "ICMP_MSG_TYPE_ECHO",
}
var ICMPMsgType_value = map[string]int32{
	"ICMP_MSG_TYPE_NONE": 0,
	"ICMP_MSG_TYPE_ECHO": 1,
}

func (x ICMPMsgType) String() string {
	return proto.EnumName(ICMPMsgType_name, int32(x))
}
func (ICMPMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// API return codes (more descriptive than protobuf enums)
type ApiStatus int32

const (
	ApiStatus_API_STATUS_OK                           ApiStatus = 0
	ApiStatus_API_STATUS_ERR                          ApiStatus = 1
	ApiStatus_API_STATUS_INVALID_ARG                  ApiStatus = 2
	ApiStatus_API_STATUS_EXISTS_ALREADY               ApiStatus = 3
	ApiStatus_API_STATUS_OUT_OF_MEM                   ApiStatus = 4
	ApiStatus_API_STATUS_NOT_FOUND                    ApiStatus = 5
	ApiStatus_API_STATUS_OUT_OF_RESOURCE              ApiStatus = 6
	ApiStatus_API_STATUS_ENCAP_INVALID                ApiStatus = 7
	ApiStatus_API_STATUS_VRF_ID_INVALID               ApiStatus = 8
	ApiStatus_API_STATUS_L2_SEGMENT_ID_INVALID        ApiStatus = 9
	ApiStatus_API_STATUS_INTERFACE_ID_INVALID         ApiStatus = 10
	ApiStatus_API_STATUS_IF_TYPE_INVALID              ApiStatus = 11
	ApiStatus_API_STATUS_IF_INFO_INVALID              ApiStatus = 12
	ApiStatus_API_STATUS_IF_L2SEGMENT_INVALID         ApiStatus = 13
	ApiStatus_API_STATUS_IF_ENIC_INFO_INVALID         ApiStatus = 14
	ApiStatus_API_STATUS_IF_ENIC_TYPE_INVALID         ApiStatus = 15
	ApiStatus_API_STATUS_IF_LIF_INFO_NOT_INVALID      ApiStatus = 16
	ApiStatus_API_STATUS_IF_LIFQ_INFO_NOT_INVALID     ApiStatus = 17
	ApiStatus_API_STATUS_FLOW_KEY_INVALID             ApiStatus = 18
	ApiStatus_API_STATUS_FLOW_INFO_INVALID            ApiStatus = 19
	ApiStatus_API_STATUS_HANDLE_INVALID               ApiStatus = 20
	ApiStatus_API_STATUS_HW_PROG_ERR                  ApiStatus = 21
	ApiStatus_API_STATUS_LIF_ID_INVALID               ApiStatus = 22
	ApiStatus_API_STATUS_NWSEC_PROFILE_ID_INVALID     ApiStatus = 23
	ApiStatus_API_STATUS_TLS_CB_ID_INVALID            ApiStatus = 24
	ApiStatus_API_STATUS_TCP_CB_ID_INVALID            ApiStatus = 25
	ApiStatus_API_STATUS_ACL_ID_INVALID               ApiStatus = 26
	ApiStatus_API_STATUS_WRING_ID_INVALID             ApiStatus = 27
	ApiStatus_API_STATUS_WRING_TYPE_INVALID           ApiStatus = 28
	ApiStatus_API_STATUS_PROXY_TYPE_INVALID           ApiStatus = 29
	ApiStatus_API_STATUS_IPSEC_CB_ID_INVALID          ApiStatus = 30
	ApiStatus_API_STATUS_L4LB_KEY_INVALID             ApiStatus = 31
	ApiStatus_API_STATUS_CPU_CB_ID_INVALID            ApiStatus = 32
	ApiStatus_API_STATUS_PROXY_NOT_ENABLED            ApiStatus = 33
	ApiStatus_API_STATUS_CFG_DB_ERR                   ApiStatus = 34
	ApiStatus_API_STATUS_SECURITY_GROUP_ID_INVALID    ApiStatus = 35
	ApiStatus_API_STATUS_SECURITY_POLICY_ID_INVALID   ApiStatus = 36
	ApiStatus_API_STATUS_ENDPOINT_UPD_KEY_HDL_INVALID ApiStatus = 37
	ApiStatus_API_STATUS_DOS_POLICY_ID_INVALID        ApiStatus = 38
	ApiStatus_API_STATUS_RAWR_CB_ID_INVALID           ApiStatus = 39
	ApiStatus_API_STATUS_OBJECT_IN_USE                ApiStatus = 40
	ApiStatus_API_STATUS_RAWC_CB_ID_INVALID           ApiStatus = 41
	ApiStatus_API_STATUS_PORT_ID_INVALID              ApiStatus = 42
	ApiStatus_API_STATUS_PORT_TYPE_INVALID            ApiStatus = 43
	ApiStatus_API_STATUS_PORT_SPEED_INVALID           ApiStatus = 44
	ApiStatus_API_STATUS_PORT_NUM_LANES_INVALID       ApiStatus = 45
	ApiStatus_API_STATUS_MC_ENTRY_ID_INVALID          ApiStatus = 46
	ApiStatus_API_STATUS_PROXYR_CB_ID_INVALID         ApiStatus = 47
	ApiStatus_API_STATUS_PROXYC_CB_ID_INVALID         ApiStatus = 48
	ApiStatus_API_STATUS_HW_READ_ERROR                ApiStatus = 49
	ApiStatus_API_STATUS_HW_WRITE_ERROR               ApiStatus = 50
	ApiStatus_API_STATUS_L2_SEGMENT_TYPE_INVALID      ApiStatus = 51
	ApiStatus_API_STATUS_NAT_POOL_KEY_INVALID         ApiStatus = 52
	ApiStatus_API_STATUS_NAT_MAPPING_KEY_INVALID      ApiStatus = 53
)

var ApiStatus_name = map[int32]string{
	0:  "API_STATUS_OK",
	1:  "API_STATUS_ERR",
	2:  "API_STATUS_INVALID_ARG",
	3:  "API_STATUS_EXISTS_ALREADY",
	4:  "API_STATUS_OUT_OF_MEM",
	5:  "API_STATUS_NOT_FOUND",
	6:  "API_STATUS_OUT_OF_RESOURCE",
	7:  "API_STATUS_ENCAP_INVALID",
	8:  "API_STATUS_VRF_ID_INVALID",
	9:  "API_STATUS_L2_SEGMENT_ID_INVALID",
	10: "API_STATUS_INTERFACE_ID_INVALID",
	11: "API_STATUS_IF_TYPE_INVALID",
	12: "API_STATUS_IF_INFO_INVALID",
	13: "API_STATUS_IF_L2SEGMENT_INVALID",
	14: "API_STATUS_IF_ENIC_INFO_INVALID",
	15: "API_STATUS_IF_ENIC_TYPE_INVALID",
	16: "API_STATUS_IF_LIF_INFO_NOT_INVALID",
	17: "API_STATUS_IF_LIFQ_INFO_NOT_INVALID",
	18: "API_STATUS_FLOW_KEY_INVALID",
	19: "API_STATUS_FLOW_INFO_INVALID",
	20: "API_STATUS_HANDLE_INVALID",
	21: "API_STATUS_HW_PROG_ERR",
	22: "API_STATUS_LIF_ID_INVALID",
	23: "API_STATUS_NWSEC_PROFILE_ID_INVALID",
	24: "API_STATUS_TLS_CB_ID_INVALID",
	25: "API_STATUS_TCP_CB_ID_INVALID",
	26: "API_STATUS_ACL_ID_INVALID",
	27: "API_STATUS_WRING_ID_INVALID",
	28: "API_STATUS_WRING_TYPE_INVALID",
	29: "API_STATUS_PROXY_TYPE_INVALID",
	30: "API_STATUS_IPSEC_CB_ID_INVALID",
	31: "API_STATUS_L4LB_KEY_INVALID",
	32: "API_STATUS_CPU_CB_ID_INVALID",
	33: "API_STATUS_PROXY_NOT_ENABLED",
	34: "API_STATUS_CFG_DB_ERR",
	35: "API_STATUS_SECURITY_GROUP_ID_INVALID",
	36: "API_STATUS_SECURITY_POLICY_ID_INVALID",
	37: "API_STATUS_ENDPOINT_UPD_KEY_HDL_INVALID",
	38: "API_STATUS_DOS_POLICY_ID_INVALID",
	39: "API_STATUS_RAWR_CB_ID_INVALID",
	40: "API_STATUS_OBJECT_IN_USE",
	41: "API_STATUS_RAWC_CB_ID_INVALID",
	42: "API_STATUS_PORT_ID_INVALID",
	43: "API_STATUS_PORT_TYPE_INVALID",
	44: "API_STATUS_PORT_SPEED_INVALID",
	45: "API_STATUS_PORT_NUM_LANES_INVALID",
	46: "API_STATUS_MC_ENTRY_ID_INVALID",
	47: "API_STATUS_PROXYR_CB_ID_INVALID",
	48: "API_STATUS_PROXYC_CB_ID_INVALID",
	49: "API_STATUS_HW_READ_ERROR",
	50: "API_STATUS_HW_WRITE_ERROR",
	51: "API_STATUS_L2_SEGMENT_TYPE_INVALID",
	52: "API_STATUS_NAT_POOL_KEY_INVALID",
	53: "API_STATUS_NAT_MAPPING_KEY_INVALID",
}
var ApiStatus_value = map[string]int32{
	"API_STATUS_OK":                           0,
	"API_STATUS_ERR":                          1,
	"API_STATUS_INVALID_ARG":                  2,
	"API_STATUS_EXISTS_ALREADY":               3,
	"API_STATUS_OUT_OF_MEM":                   4,
	"API_STATUS_NOT_FOUND":                    5,
	"API_STATUS_OUT_OF_RESOURCE":              6,
	"API_STATUS_ENCAP_INVALID":                7,
	"API_STATUS_VRF_ID_INVALID":               8,
	"API_STATUS_L2_SEGMENT_ID_INVALID":        9,
	"API_STATUS_INTERFACE_ID_INVALID":         10,
	"API_STATUS_IF_TYPE_INVALID":              11,
	"API_STATUS_IF_INFO_INVALID":              12,
	"API_STATUS_IF_L2SEGMENT_INVALID":         13,
	"API_STATUS_IF_ENIC_INFO_INVALID":         14,
	"API_STATUS_IF_ENIC_TYPE_INVALID":         15,
	"API_STATUS_IF_LIF_INFO_NOT_INVALID":      16,
	"API_STATUS_IF_LIFQ_INFO_NOT_INVALID":     17,
	"API_STATUS_FLOW_KEY_INVALID":             18,
	"API_STATUS_FLOW_INFO_INVALID":            19,
	"API_STATUS_HANDLE_INVALID":               20,
	"API_STATUS_HW_PROG_ERR":                  21,
	"API_STATUS_LIF_ID_INVALID":               22,
	"API_STATUS_NWSEC_PROFILE_ID_INVALID":     23,
	"API_STATUS_TLS_CB_ID_INVALID":            24,
	"API_STATUS_TCP_CB_ID_INVALID":            25,
	"API_STATUS_ACL_ID_INVALID":               26,
	"API_STATUS_WRING_ID_INVALID":             27,
	"API_STATUS_WRING_TYPE_INVALID":           28,
	"API_STATUS_PROXY_TYPE_INVALID":           29,
	"API_STATUS_IPSEC_CB_ID_INVALID":          30,
	"API_STATUS_L4LB_KEY_INVALID":             31,
	"API_STATUS_CPU_CB_ID_INVALID":            32,
	"API_STATUS_PROXY_NOT_ENABLED":            33,
	"API_STATUS_CFG_DB_ERR":                   34,
	"API_STATUS_SECURITY_GROUP_ID_INVALID":    35,
	"API_STATUS_SECURITY_POLICY_ID_INVALID":   36,
	"API_STATUS_ENDPOINT_UPD_KEY_HDL_INVALID": 37,
	"API_STATUS_DOS_POLICY_ID_INVALID":        38,
	"API_STATUS_RAWR_CB_ID_INVALID":           39,
	"API_STATUS_OBJECT_IN_USE":                40,
	"API_STATUS_RAWC_CB_ID_INVALID":           41,
	"API_STATUS_PORT_ID_INVALID":              42,
	"API_STATUS_PORT_TYPE_INVALID":            43,
	"API_STATUS_PORT_SPEED_INVALID":           44,
	"API_STATUS_PORT_NUM_LANES_INVALID":       45,
	"API_STATUS_MC_ENTRY_ID_INVALID":          46,
	"API_STATUS_PROXYR_CB_ID_INVALID":         47,
	"API_STATUS_PROXYC_CB_ID_INVALID":         48,
	"API_STATUS_HW_READ_ERROR":                49,
	"API_STATUS_HW_WRITE_ERROR":               50,
	"API_STATUS_L2_SEGMENT_TYPE_INVALID":      51,
	"API_STATUS_NAT_POOL_KEY_INVALID":         52,
	"API_STATUS_NAT_MAPPING_KEY_INVALID":      53,
}

func (x ApiStatus) String() string {
	return proto.EnumName(ApiStatus_name, int32(x))
}
func (ApiStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Types of Vrfs
type VrfType int32

const (
	VrfType_VRF_TYPE_NONE     VrfType = 0
	VrfType_VRF_TYPE_INFRA    VrfType = 1
	VrfType_VRF_TYPE_CUSTOMER VrfType = 2
)

var VrfType_name = map[int32]string{
	0: "VRF_TYPE_NONE",
	1: "VRF_TYPE_INFRA",
	2: "VRF_TYPE_CUSTOMER",
}
var VrfType_value = map[string]int32{
	"VRF_TYPE_NONE":     0,
	"VRF_TYPE_INFRA":    1,
	"VRF_TYPE_CUSTOMER": 2,
}

func (x VrfType) String() string {
	return proto.EnumName(VrfType_name, int32(x))
}
func (VrfType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// Types of L2 segments
type L2SegmentType int32

const (
	L2SegmentType_L2_SEGMENT_TYPE_NONE L2SegmentType = 0
	L2SegmentType_L2_SEGMENT_PRIMARY   L2SegmentType = 1
	L2SegmentType_L2_SEGMENT_ISOLATED  L2SegmentType = 2
)

var L2SegmentType_name = map[int32]string{
	0: "L2_SEGMENT_TYPE_NONE",
	1: "L2_SEGMENT_PRIMARY",
	2: "L2_SEGMENT_ISOLATED",
}
var L2SegmentType_value = map[string]int32{
	"L2_SEGMENT_TYPE_NONE": 0,
	"L2_SEGMENT_PRIMARY":   1,
	"L2_SEGMENT_ISOLATED":  2,
}

func (x L2SegmentType) String() string {
	return proto.EnumName(L2SegmentType_name, int32(x))
}
func (L2SegmentType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// Supported wire encaps for the L2 segments
type EncapType int32

const (
	EncapType_ENCAP_TYPE_NONE     EncapType = 0
	EncapType_ENCAP_TYPE_DOT1Q    EncapType = 1
	EncapType_ENCAP_TYPE_VXLAN    EncapType = 2
	EncapType_ENCAP_TYPE_IP_IN_IP EncapType = 3
	EncapType_ENCAP_TYPE_GRE      EncapType = 4
	EncapType_ENCAP_TYPE_IPSEC    EncapType = 5
)

var EncapType_name = map[int32]string{
	0: "ENCAP_TYPE_NONE",
	1: "ENCAP_TYPE_DOT1Q",
	2: "ENCAP_TYPE_VXLAN",
	3: "ENCAP_TYPE_IP_IN_IP",
	4: "ENCAP_TYPE_GRE",
	5: "ENCAP_TYPE_IPSEC",
}
var EncapType_value = map[string]int32{
	"ENCAP_TYPE_NONE":     0,
	"ENCAP_TYPE_DOT1Q":    1,
	"ENCAP_TYPE_VXLAN":    2,
	"ENCAP_TYPE_IP_IN_IP": 3,
	"ENCAP_TYPE_GRE":      4,
	"ENCAP_TYPE_IPSEC":    5,
}

func (x EncapType) String() string {
	return proto.EnumName(EncapType_name, int32(x))
}
func (EncapType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// IP address families
type IPAddressFamily int32

const (
	IPAddressFamily_IP_AF_NONE  IPAddressFamily = 0
	IPAddressFamily_IP_AF_INET  IPAddressFamily = 1
	IPAddressFamily_IP_AF_INET6 IPAddressFamily = 2
)

var IPAddressFamily_name = map[int32]string{
	0: "IP_AF_NONE",
	1: "IP_AF_INET",
	2: "IP_AF_INET6",
}
var IPAddressFamily_value = map[string]int32{
	"IP_AF_NONE":  0,
	"IP_AF_INET":  1,
	"IP_AF_INET6": 2,
}

func (x IPAddressFamily) String() string {
	return proto.EnumName(IPAddressFamily_name, int32(x))
}
func (IPAddressFamily) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type IPAddressType int32

const (
	IPAddressType_IP_ADDRESS_NONE           IPAddressType = 0
	IPAddressType_IP_ADDRESS_IPV4_ANY       IPAddressType = 1
	IPAddressType_IP_ADDRESS_IPV6_ANY       IPAddressType = 2
	IPAddressType_IP_ADDRESS_ANY            IPAddressType = 3
	IPAddressType_IP_ADDRESS_IPV4_MULTICAST IPAddressType = 4
	IPAddressType_IP_ADDRESS_IPV6_MULTICAST IPAddressType = 5
	IPAddressType_IP_ADDRESS_MULTICAST      IPAddressType = 6
	IPAddressType_IP_ADDRESS_V6_LINK_LOCAL  IPAddressType = 7
)

var IPAddressType_name = map[int32]string{
	0: "IP_ADDRESS_NONE",
	1: "IP_ADDRESS_IPV4_ANY",
	2: "IP_ADDRESS_IPV6_ANY",
	3: "IP_ADDRESS_ANY",
	4: "IP_ADDRESS_IPV4_MULTICAST",
	5: "IP_ADDRESS_IPV6_MULTICAST",
	6: "IP_ADDRESS_MULTICAST",
	7: "IP_ADDRESS_V6_LINK_LOCAL",
}
var IPAddressType_value = map[string]int32{
	"IP_ADDRESS_NONE":           0,
	"IP_ADDRESS_IPV4_ANY":       1,
	"IP_ADDRESS_IPV6_ANY":       2,
	"IP_ADDRESS_ANY":            3,
	"IP_ADDRESS_IPV4_MULTICAST": 4,
	"IP_ADDRESS_IPV6_MULTICAST": 5,
	"IP_ADDRESS_MULTICAST":      6,
	"IP_ADDRESS_V6_LINK_LOCAL":  7,
}

func (x IPAddressType) String() string {
	return proto.EnumName(IPAddressType_name, int32(x))
}
func (IPAddressType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// Types of Work Ring
type WRingType int32

const (
	WRingType_WRING_TYPE_NONE              WRingType = 0
	WRingType_WRING_TYPE_SERQ              WRingType = 1
	WRingType_WRING_TYPE_NMDR_TX           WRingType = 2
	WRingType_WRING_TYPE_NMDR_RX           WRingType = 3
	WRingType_WRING_TYPE_NMPR_SMALL_TX     WRingType = 4
	WRingType_WRING_TYPE_NMPR_SMALL_RX     WRingType = 5
	WRingType_WRING_TYPE_NMPR_BIG_TX       WRingType = 6
	WRingType_WRING_TYPE_NMPR_BIG_RX       WRingType = 7
	WRingType_WRING_TYPE_BSQ               WRingType = 8
	WRingType_WRING_TYPE_BRQ               WRingType = 9
	WRingType_WRING_TYPE_SESQ              WRingType = 10
	WRingType_WRING_TYPE_IPSECCBQ          WRingType = 11
	WRingType_WRING_TYPE_ARQRX             WRingType = 12
	WRingType_WRING_TYPE_ASQ               WRingType = 13
	WRingType_WRING_TYPE_ASESQ             WRingType = 14
	WRingType_WRING_TYPE_RAWRCB            WRingType = 15
	WRingType_WRING_TYPE_IPSECCBQ_BARCO    WRingType = 16
	WRingType_WRING_TYPE_APP_REDIR_RAWC    WRingType = 17
	WRingType_WRING_TYPE_APP_REDIR_PROXYR  WRingType = 18
	WRingType_WRING_TYPE_APP_REDIR_PROXYC  WRingType = 19
	WRingType_WRING_TYPE_NMDR_RX_GC        WRingType = 20
	WRingType_WRING_TYPE_NMDR_TX_GC        WRingType = 21
	WRingType_WRING_TYPE_ARQTX             WRingType = 22
	WRingType_WRING_TYPE_ASCQ              WRingType = 23
	WRingType_WRING_TYPE_CPUDR             WRingType = 24
	WRingType_WRING_TYPE_CPUPR             WRingType = 25
	WRingType_WRING_TYPE_IPSEC_NMDR_TX     WRingType = 26
	WRingType_WRING_TYPE_IPSEC_NMDR_RX     WRingType = 27
	WRingType_WRING_TYPE_IPSEC_NMPR_TX     WRingType = 28
	WRingType_WRING_TYPE_IPSEC_NMPR_RX     WRingType = 29
	WRingType_WRING_TYPE_IPSEC_BIG_NMDR_TX WRingType = 30
	WRingType_WRING_TYPE_IPSEC_BIG_NMDR_RX WRingType = 31
	WRingType_WRING_TYPE_IPSEC_BIG_NMPR_TX WRingType = 32
	WRingType_WRING_TYPE_IPSEC_BIG_NMPR_RX WRingType = 33
	WRingType_WRING_TYPE_NMDPR_SMALL_TX    WRingType = 34
	WRingType_WRING_TYPE_NMDPR_SMALL_RX    WRingType = 35
	WRingType_WRING_TYPE_NMDPR_BIG_TX      WRingType = 36
	WRingType_WRING_TYPE_NMDPR_BIG_RX      WRingType = 37
)

var WRingType_name = map[int32]string{
	0:  "WRING_TYPE_NONE",
	1:  "WRING_TYPE_SERQ",
	2:  "WRING_TYPE_NMDR_TX",
	3:  "WRING_TYPE_NMDR_RX",
	4:  "WRING_TYPE_NMPR_SMALL_TX",
	5:  "WRING_TYPE_NMPR_SMALL_RX",
	6:  "WRING_TYPE_NMPR_BIG_TX",
	7:  "WRING_TYPE_NMPR_BIG_RX",
	8:  "WRING_TYPE_BSQ",
	9:  "WRING_TYPE_BRQ",
	10: "WRING_TYPE_SESQ",
	11: "WRING_TYPE_IPSECCBQ",
	12: "WRING_TYPE_ARQRX",
	13: "WRING_TYPE_ASQ",
	14: "WRING_TYPE_ASESQ",
	15: "WRING_TYPE_RAWRCB",
	16: "WRING_TYPE_IPSECCBQ_BARCO",
	17: "WRING_TYPE_APP_REDIR_RAWC",
	18: "WRING_TYPE_APP_REDIR_PROXYR",
	19: "WRING_TYPE_APP_REDIR_PROXYC",
	20: "WRING_TYPE_NMDR_RX_GC",
	21: "WRING_TYPE_NMDR_TX_GC",
	22: "WRING_TYPE_ARQTX",
	23: "WRING_TYPE_ASCQ",
	24: "WRING_TYPE_CPUDR",
	25: "WRING_TYPE_CPUPR",
	26: "WRING_TYPE_IPSEC_NMDR_TX",
	27: "WRING_TYPE_IPSEC_NMDR_RX",
	28: "WRING_TYPE_IPSEC_NMPR_TX",
	29: "WRING_TYPE_IPSEC_NMPR_RX",
	30: "WRING_TYPE_IPSEC_BIG_NMDR_TX",
	31: "WRING_TYPE_IPSEC_BIG_NMDR_RX",
	32: "WRING_TYPE_IPSEC_BIG_NMPR_TX",
	33: "WRING_TYPE_IPSEC_BIG_NMPR_RX",
	34: "WRING_TYPE_NMDPR_SMALL_TX",
	35: "WRING_TYPE_NMDPR_SMALL_RX",
	36: "WRING_TYPE_NMDPR_BIG_TX",
	37: "WRING_TYPE_NMDPR_BIG_RX",
}
var WRingType_value = map[string]int32{
	"WRING_TYPE_NONE":              0,
	"WRING_TYPE_SERQ":              1,
	"WRING_TYPE_NMDR_TX":           2,
	"WRING_TYPE_NMDR_RX":           3,
	"WRING_TYPE_NMPR_SMALL_TX":     4,
	"WRING_TYPE_NMPR_SMALL_RX":     5,
	"WRING_TYPE_NMPR_BIG_TX":       6,
	"WRING_TYPE_NMPR_BIG_RX":       7,
	"WRING_TYPE_BSQ":               8,
	"WRING_TYPE_BRQ":               9,
	"WRING_TYPE_SESQ":              10,
	"WRING_TYPE_IPSECCBQ":          11,
	"WRING_TYPE_ARQRX":             12,
	"WRING_TYPE_ASQ":               13,
	"WRING_TYPE_ASESQ":             14,
	"WRING_TYPE_RAWRCB":            15,
	"WRING_TYPE_IPSECCBQ_BARCO":    16,
	"WRING_TYPE_APP_REDIR_RAWC":    17,
	"WRING_TYPE_APP_REDIR_PROXYR":  18,
	"WRING_TYPE_APP_REDIR_PROXYC":  19,
	"WRING_TYPE_NMDR_RX_GC":        20,
	"WRING_TYPE_NMDR_TX_GC":        21,
	"WRING_TYPE_ARQTX":             22,
	"WRING_TYPE_ASCQ":              23,
	"WRING_TYPE_CPUDR":             24,
	"WRING_TYPE_CPUPR":             25,
	"WRING_TYPE_IPSEC_NMDR_TX":     26,
	"WRING_TYPE_IPSEC_NMDR_RX":     27,
	"WRING_TYPE_IPSEC_NMPR_TX":     28,
	"WRING_TYPE_IPSEC_NMPR_RX":     29,
	"WRING_TYPE_IPSEC_BIG_NMDR_TX": 30,
	"WRING_TYPE_IPSEC_BIG_NMDR_RX": 31,
	"WRING_TYPE_IPSEC_BIG_NMPR_TX": 32,
	"WRING_TYPE_IPSEC_BIG_NMPR_RX": 33,
	"WRING_TYPE_NMDPR_SMALL_TX":    34,
	"WRING_TYPE_NMDPR_SMALL_RX":    35,
	"WRING_TYPE_NMDPR_BIG_TX":      36,
	"WRING_TYPE_NMDPR_BIG_RX":      37,
}

func (x WRingType) String() string {
	return proto.EnumName(WRingType_name, int32(x))
}
func (WRingType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// Types of Proxy Service
type ProxyType int32

const (
	ProxyType_PROXY_TYPE_NONE                     ProxyType = 0
	ProxyType_PROXY_TYPE_TCP                      ProxyType = 1
	ProxyType_PROXY_TYPE_TLS                      ProxyType = 2
	ProxyType_PROXY_TYPE_IPSEC                    ProxyType = 3
	ProxyType_PROXY_TYPE_GC                       ProxyType = 4
	ProxyType_PROXY_TYPE_CPU                      ProxyType = 5
	ProxyType_PROXY_TYPE_IPFIX                    ProxyType = 6
	ProxyType_PROXY_TYPE_APP_REDIR                ProxyType = 7
	ProxyType_PROXY_TYPE_P4PT                     ProxyType = 8
	ProxyType_PROXY_TYPE_APP_REDIR_PROXY_TCP      ProxyType = 9
	ProxyType_PROXY_TYPE_APP_REDIR_SPAN           ProxyType = 10
	ProxyType_PROXY_TYPE_APP_REDIR_PROXY_TCP_SPAN ProxyType = 11
)

var ProxyType_name = map[int32]string{
	0:  "PROXY_TYPE_NONE",
	1:  "PROXY_TYPE_TCP",
	2:  "PROXY_TYPE_TLS",
	3:  "PROXY_TYPE_IPSEC",
	4:  "PROXY_TYPE_GC",
	5:  "PROXY_TYPE_CPU",
	6:  "PROXY_TYPE_IPFIX",
	7:  "PROXY_TYPE_APP_REDIR",
	8:  "PROXY_TYPE_P4PT",
	9:  "PROXY_TYPE_APP_REDIR_PROXY_TCP",
	10: "PROXY_TYPE_APP_REDIR_SPAN",
	11: "PROXY_TYPE_APP_REDIR_PROXY_TCP_SPAN",
}
var ProxyType_value = map[string]int32{
	"PROXY_TYPE_NONE":                     0,
	"PROXY_TYPE_TCP":                      1,
	"PROXY_TYPE_TLS":                      2,
	"PROXY_TYPE_IPSEC":                    3,
	"PROXY_TYPE_GC":                       4,
	"PROXY_TYPE_CPU":                      5,
	"PROXY_TYPE_IPFIX":                    6,
	"PROXY_TYPE_APP_REDIR":                7,
	"PROXY_TYPE_P4PT":                     8,
	"PROXY_TYPE_APP_REDIR_PROXY_TCP":      9,
	"PROXY_TYPE_APP_REDIR_SPAN":           10,
	"PROXY_TYPE_APP_REDIR_PROXY_TCP_SPAN": 11,
}

func (x ProxyType) String() string {
	return proto.EnumName(ProxyType_name, int32(x))
}
func (ProxyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// Types of Cryptographic Asymmetric keys
type CryptoAsymKeyType int32

const (
	CryptoAsymKeyType_CRYPTO_ASYM_KEY_TYPE_ECDSA CryptoAsymKeyType = 0
	CryptoAsymKeyType_CRYPTO_ASYM_KEY_TYPE_RSA   CryptoAsymKeyType = 1
)

var CryptoAsymKeyType_name = map[int32]string{
	0: "CRYPTO_ASYM_KEY_TYPE_ECDSA",
	1: "CRYPTO_ASYM_KEY_TYPE_RSA",
}
var CryptoAsymKeyType_value = map[string]int32{
	"CRYPTO_ASYM_KEY_TYPE_ECDSA": 0,
	"CRYPTO_ASYM_KEY_TYPE_RSA":   1,
}

func (x CryptoAsymKeyType) String() string {
	return proto.EnumName(CryptoAsymKeyType_name, int32(x))
}
func (CryptoAsymKeyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// Types of Cryptographic keys
type CryptoKeyType int32

const (
	CryptoKeyType_CRYPTO_KEY_TYPE_AES128   CryptoKeyType = 0
	CryptoKeyType_CRYPTO_KEY_TYPE_AES192   CryptoKeyType = 1
	CryptoKeyType_CRYPTO_KEY_TYPE_AES256   CryptoKeyType = 2
	CryptoKeyType_CRYPTO_KEY_TYPE_DES      CryptoKeyType = 3
	CryptoKeyType_CRYPTO_KEY_TYPE_CHACHA20 CryptoKeyType = 4
	CryptoKeyType_CRYPTO_KEY_TYPE_POLY1305 CryptoKeyType = 5
	CryptoKeyType_CRYPTO_KEY_TYPE_HMAC     CryptoKeyType = 6
)

var CryptoKeyType_name = map[int32]string{
	0: "CRYPTO_KEY_TYPE_AES128",
	1: "CRYPTO_KEY_TYPE_AES192",
	2: "CRYPTO_KEY_TYPE_AES256",
	3: "CRYPTO_KEY_TYPE_DES",
	4: "CRYPTO_KEY_TYPE_CHACHA20",
	5: "CRYPTO_KEY_TYPE_POLY1305",
	6: "CRYPTO_KEY_TYPE_HMAC",
}
var CryptoKeyType_value = map[string]int32{
	"CRYPTO_KEY_TYPE_AES128":   0,
	"CRYPTO_KEY_TYPE_AES192":   1,
	"CRYPTO_KEY_TYPE_AES256":   2,
	"CRYPTO_KEY_TYPE_DES":      3,
	"CRYPTO_KEY_TYPE_CHACHA20": 4,
	"CRYPTO_KEY_TYPE_POLY1305": 5,
	"CRYPTO_KEY_TYPE_HMAC":     6,
}

func (x CryptoKeyType) String() string {
	return proto.EnumName(CryptoKeyType_name, int32(x))
}
func (CryptoKeyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// Types of Barco Rings
type BarcoRings int32

const (
	BarcoRings_BARCO_RING_ASYM   BarcoRings = 0
	BarcoRings_BARCO_RING_GCM0   BarcoRings = 1
	BarcoRings_BARCO_RING_GCM1   BarcoRings = 2
	BarcoRings_BARCO_RING_XTS0   BarcoRings = 3
	BarcoRings_BARCO_RING_XTS1   BarcoRings = 4
	BarcoRings_BARCO_RING_MPP0   BarcoRings = 5
	BarcoRings_BARCO_RING_MPP1   BarcoRings = 6
	BarcoRings_BARCO_RING_MPP2   BarcoRings = 7
	BarcoRings_BARCO_RING_MPP3   BarcoRings = 8
	BarcoRings_BARCO_RING_MPP4   BarcoRings = 9
	BarcoRings_BARCO_RING_MPP5   BarcoRings = 10
	BarcoRings_BARCO_RING_MPP6   BarcoRings = 11
	BarcoRings_BARCO_RING_MPP7   BarcoRings = 12
	BarcoRings_BARCO_RING_CP     BarcoRings = 13
	BarcoRings_BARCO_RING_CP_HOT BarcoRings = 14
	BarcoRings_BARCO_RING_DC     BarcoRings = 15
	BarcoRings_BARCO_RING_DC_HOT BarcoRings = 16
)

var BarcoRings_name = map[int32]string{
	0:  "BARCO_RING_ASYM",
	1:  "BARCO_RING_GCM0",
	2:  "BARCO_RING_GCM1",
	3:  "BARCO_RING_XTS0",
	4:  "BARCO_RING_XTS1",
	5:  "BARCO_RING_MPP0",
	6:  "BARCO_RING_MPP1",
	7:  "BARCO_RING_MPP2",
	8:  "BARCO_RING_MPP3",
	9:  "BARCO_RING_MPP4",
	10: "BARCO_RING_MPP5",
	11: "BARCO_RING_MPP6",
	12: "BARCO_RING_MPP7",
	13: "BARCO_RING_CP",
	14: "BARCO_RING_CP_HOT",
	15: "BARCO_RING_DC",
	16: "BARCO_RING_DC_HOT",
}
var BarcoRings_value = map[string]int32{
	"BARCO_RING_ASYM":   0,
	"BARCO_RING_GCM0":   1,
	"BARCO_RING_GCM1":   2,
	"BARCO_RING_XTS0":   3,
	"BARCO_RING_XTS1":   4,
	"BARCO_RING_MPP0":   5,
	"BARCO_RING_MPP1":   6,
	"BARCO_RING_MPP2":   7,
	"BARCO_RING_MPP3":   8,
	"BARCO_RING_MPP4":   9,
	"BARCO_RING_MPP5":   10,
	"BARCO_RING_MPP6":   11,
	"BARCO_RING_MPP7":   12,
	"BARCO_RING_CP":     13,
	"BARCO_RING_CP_HOT": 14,
	"BARCO_RING_DC":     15,
	"BARCO_RING_DC_HOT": 16,
}

func (x BarcoRings) String() string {
	return proto.EnumName(BarcoRings_name, int32(x))
}
func (BarcoRings) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type AppRedirType int32

const (
	AppRedirType_APP_REDIR_TYPE_NONE     AppRedirType = 0
	AppRedirType_APP_REDIR_TYPE_REDIRECT AppRedirType = 1
	AppRedirType_APP_REDIR_TYPE_SPAN     AppRedirType = 2
)

var AppRedirType_name = map[int32]string{
	0: "APP_REDIR_TYPE_NONE",
	1: "APP_REDIR_TYPE_REDIRECT",
	2: "APP_REDIR_TYPE_SPAN",
}
var AppRedirType_value = map[string]int32{
	"APP_REDIR_TYPE_NONE":     0,
	"APP_REDIR_TYPE_REDIRECT": 1,
	"APP_REDIR_TYPE_SPAN":     2,
}

func (x AppRedirType) String() string {
	return proto.EnumName(AppRedirType_name, int32(x))
}
func (AppRedirType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// Types of CPU CB/QIDs
type CpucbId int32

const (
	CpucbId_CPUCB_ID_FLOWMISS      CpucbId = 0
	CpucbId_CPUCB_ID_TCP_CLOSE     CpucbId = 1
	CpucbId_CPUCB_ID_RELIABLE_COPY CpucbId = 2
	CpucbId_CPUCB_ID_NACL_REDIRECT CpucbId = 3
	CpucbId_CPUCB_ID_QUIESCE       CpucbId = 4
	CpucbId_CPUCB_ID_NACL_LOG      CpucbId = 5
	CpucbId_CPUCB_ID_FTE_SPAN      CpucbId = 6
)

var CpucbId_name = map[int32]string{
	0: "CPUCB_ID_FLOWMISS",
	1: "CPUCB_ID_TCP_CLOSE",
	2: "CPUCB_ID_RELIABLE_COPY",
	3: "CPUCB_ID_NACL_REDIRECT",
	4: "CPUCB_ID_QUIESCE",
	5: "CPUCB_ID_NACL_LOG",
	6: "CPUCB_ID_FTE_SPAN",
}
var CpucbId_value = map[string]int32{
	"CPUCB_ID_FLOWMISS":      0,
	"CPUCB_ID_TCP_CLOSE":     1,
	"CPUCB_ID_RELIABLE_COPY": 2,
	"CPUCB_ID_NACL_REDIRECT": 3,
	"CPUCB_ID_QUIESCE":       4,
	"CPUCB_ID_NACL_LOG":      5,
	"CPUCB_ID_FTE_SPAN":      6,
}

func (x CpucbId) String() string {
	return proto.EnumName(CpucbId_name, int32(x))
}
func (CpucbId) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

// FTE Span Match Selectors
type FTESpanMatchSelector int32

const (
	FTESpanMatchSelector_SRC_LPORT       FTESpanMatchSelector = 0
	FTESpanMatchSelector_DST_LPORT       FTESpanMatchSelector = 1
	FTESpanMatchSelector_DROP_REASON     FTESpanMatchSelector = 2
	FTESpanMatchSelector_FLOW_LKUP_DIR   FTESpanMatchSelector = 3
	FTESpanMatchSelector_FLOW_LKUP_TYPE  FTESpanMatchSelector = 4
	FTESpanMatchSelector_FLOW_LKUP_VRF   FTESpanMatchSelector = 5
	FTESpanMatchSelector_FLOW_LKUP_SRC   FTESpanMatchSelector = 6
	FTESpanMatchSelector_FLOW_LKUP_DST   FTESpanMatchSelector = 7
	FTESpanMatchSelector_FLOW_LKUP_PROTO FTESpanMatchSelector = 8
	FTESpanMatchSelector_FLOW_LKUP_SPORT FTESpanMatchSelector = 9
	FTESpanMatchSelector_FLOW_LKUP_DPORT FTESpanMatchSelector = 10
	FTESpanMatchSelector_ETH_DMAC        FTESpanMatchSelector = 11
	FTESpanMatchSelector_FROM_CPU        FTESpanMatchSelector = 12
)

var FTESpanMatchSelector_name = map[int32]string{
	0:  "SRC_LPORT",
	1:  "DST_LPORT",
	2:  "DROP_REASON",
	3:  "FLOW_LKUP_DIR",
	4:  "FLOW_LKUP_TYPE",
	5:  "FLOW_LKUP_VRF",
	6:  "FLOW_LKUP_SRC",
	7:  "FLOW_LKUP_DST",
	8:  "FLOW_LKUP_PROTO",
	9:  "FLOW_LKUP_SPORT",
	10: "FLOW_LKUP_DPORT",
	11: "ETH_DMAC",
	12: "FROM_CPU",
}
var FTESpanMatchSelector_value = map[string]int32{
	"SRC_LPORT":       0,
	"DST_LPORT":       1,
	"DROP_REASON":     2,
	"FLOW_LKUP_DIR":   3,
	"FLOW_LKUP_TYPE":  4,
	"FLOW_LKUP_VRF":   5,
	"FLOW_LKUP_SRC":   6,
	"FLOW_LKUP_DST":   7,
	"FLOW_LKUP_PROTO": 8,
	"FLOW_LKUP_SPORT": 9,
	"FLOW_LKUP_DPORT": 10,
	"ETH_DMAC":        11,
	"FROM_CPU":        12,
}

func (x FTESpanMatchSelector) String() string {
	return proto.EnumName(FTESpanMatchSelector_name, int32(x))
}
func (FTESpanMatchSelector) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

// Filter Type
type FilterType int32

const (
	FilterType_FILTER_NONE         FilterType = 0
	FilterType_FILTER_LIF          FilterType = 1
	FilterType_FILTER_LIF_MAC      FilterType = 2
	FilterType_FILTER_LIF_VLAN     FilterType = 3
	FilterType_FILTER_LIF_MAC_VLAN FilterType = 4
)

var FilterType_name = map[int32]string{
	0: "FILTER_NONE",
	1: "FILTER_LIF",
	2: "FILTER_LIF_MAC",
	3: "FILTER_LIF_VLAN",
	4: "FILTER_LIF_MAC_VLAN",
}
var FilterType_value = map[string]int32{
	"FILTER_NONE":         0,
	"FILTER_LIF":          1,
	"FILTER_LIF_MAC":      2,
	"FILTER_LIF_VLAN":     3,
	"FILTER_LIF_MAC_VLAN": 4,
}

func (x FilterType) String() string {
	return proto.EnumName(FilterType_name, int32(x))
}
func (FilterType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

//  IntfStatus status reflects the current status of Interface
type IntfStatus int32

const (
	IntfStatus_IF_STATUS_NONE IntfStatus = 0
	IntfStatus_IF_STATUS_UP   IntfStatus = 1
	IntfStatus_IF_STATUS_DOWN IntfStatus = 2
)

var IntfStatus_name = map[int32]string{
	0: "IF_STATUS_NONE",
	1: "IF_STATUS_UP",
	2: "IF_STATUS_DOWN",
}
var IntfStatus_value = map[string]int32{
	"IF_STATUS_NONE": 0,
	"IF_STATUS_UP":   1,
	"IF_STATUS_DOWN": 2,
}

func (x IntfStatus) String() string {
	return proto.EnumName(IntfStatus_name, int32(x))
}
func (IntfStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

// Different purposes of LIF queues. This is not the same as
// Queue type (type_num field in LifQStateMapEntry). This is
// application (e.g. TCP, RDMA, Storage) specific and is specified
// on a per LIF per Queue Type bases. In other words, for one LIF
// type 0 can be TX Queue and for another LIF type 0 can be RX Queue.
type LifQueuePurpose int32

const (
	LifQueuePurpose_LIF_QUEUE_PURPOSE_NONE      LifQueuePurpose = 0
	LifQueuePurpose_LIF_QUEUE_PURPOSE_ADMIN     LifQueuePurpose = 1
	LifQueuePurpose_LIF_QUEUE_PURPOSE_TX        LifQueuePurpose = 2
	LifQueuePurpose_LIF_QUEUE_PURPOSE_RX        LifQueuePurpose = 3
	LifQueuePurpose_LIF_QUEUE_PURPOSE_RDMA_SEND LifQueuePurpose = 4
	LifQueuePurpose_LIF_QUEUE_PURPOSE_RDMA_RECV LifQueuePurpose = 5
	LifQueuePurpose_LIF_QUEUE_PURPOSE_CQ        LifQueuePurpose = 6
	LifQueuePurpose_LIF_QUEUE_PURPOSE_EQ        LifQueuePurpose = 7
	LifQueuePurpose_LIF_QUEUE_PURPOSE_NVME      LifQueuePurpose = 8
	LifQueuePurpose_LIF_QUEUE_PURPOSE_STORAGE   LifQueuePurpose = 9
	LifQueuePurpose_LIF_QUEUE_PURPOSE_VIRTIO_TX LifQueuePurpose = 10
	LifQueuePurpose_LIF_QUEUE_PURPOSE_VIRTIO_RX LifQueuePurpose = 11
)

var LifQueuePurpose_name = map[int32]string{
	0:  "LIF_QUEUE_PURPOSE_NONE",
	1:  "LIF_QUEUE_PURPOSE_ADMIN",
	2:  "LIF_QUEUE_PURPOSE_TX",
	3:  "LIF_QUEUE_PURPOSE_RX",
	4:  "LIF_QUEUE_PURPOSE_RDMA_SEND",
	5:  "LIF_QUEUE_PURPOSE_RDMA_RECV",
	6:  "LIF_QUEUE_PURPOSE_CQ",
	7:  "LIF_QUEUE_PURPOSE_EQ",
	8:  "LIF_QUEUE_PURPOSE_NVME",
	9:  "LIF_QUEUE_PURPOSE_STORAGE",
	10: "LIF_QUEUE_PURPOSE_VIRTIO_TX",
	11: "LIF_QUEUE_PURPOSE_VIRTIO_RX",
}
var LifQueuePurpose_value = map[string]int32{
	"LIF_QUEUE_PURPOSE_NONE":      0,
	"LIF_QUEUE_PURPOSE_ADMIN":     1,
	"LIF_QUEUE_PURPOSE_TX":        2,
	"LIF_QUEUE_PURPOSE_RX":        3,
	"LIF_QUEUE_PURPOSE_RDMA_SEND": 4,
	"LIF_QUEUE_PURPOSE_RDMA_RECV": 5,
	"LIF_QUEUE_PURPOSE_CQ":        6,
	"LIF_QUEUE_PURPOSE_EQ":        7,
	"LIF_QUEUE_PURPOSE_NVME":      8,
	"LIF_QUEUE_PURPOSE_STORAGE":   9,
	"LIF_QUEUE_PURPOSE_VIRTIO_TX": 10,
	"LIF_QUEUE_PURPOSE_VIRTIO_RX": 11,
}

func (x LifQueuePurpose) String() string {
	return proto.EnumName(LifQueuePurpose_name, int32(x))
}
func (LifQueuePurpose) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

// types of interfaces
type IntfType int32

const (
	IntfType_IF_TYPE_NONE      IntfType = 0
	IntfType_IF_TYPE_ENIC      IntfType = 1
	IntfType_IF_TYPE_UPLINK    IntfType = 2
	IntfType_IF_TYPE_UPLINK_PC IntfType = 3
	IntfType_IF_TYPE_TUNNEL    IntfType = 4
	IntfType_IF_TYPE_CPU       IntfType = 5
	IntfType_IF_TYPE_APP_REDIR IntfType = 6
)

var IntfType_name = map[int32]string{
	0: "IF_TYPE_NONE",
	1: "IF_TYPE_ENIC",
	2: "IF_TYPE_UPLINK",
	3: "IF_TYPE_UPLINK_PC",
	4: "IF_TYPE_TUNNEL",
	5: "IF_TYPE_CPU",
	6: "IF_TYPE_APP_REDIR",
}
var IntfType_value = map[string]int32{
	"IF_TYPE_NONE":      0,
	"IF_TYPE_ENIC":      1,
	"IF_TYPE_UPLINK":    2,
	"IF_TYPE_UPLINK_PC": 3,
	"IF_TYPE_TUNNEL":    4,
	"IF_TYPE_CPU":       5,
	"IF_TYPE_APP_REDIR": 6,
}

func (x IntfType) String() string {
	return proto.EnumName(IntfType_name, int32(x))
}
func (IntfType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

// ------------------------------------------------------------------------------
// if interface type is IF_TYPE_ENIC, one of the following vnic types must be
// set. IF_ENIC_TYPE_XXX identifies how a workload is attached to asic
// ------------------------------------------------------------------------------
type IntfEnicType int32

const (
	IntfEnicType_IF_ENIC_TYPE_NONE   IntfEnicType = 0
	IntfEnicType_IF_ENIC_TYPE_USEG   IntfEnicType = 1
	IntfEnicType_IF_ENIC_TYPE_PVLAN  IntfEnicType = 2
	IntfEnicType_IF_ENIC_TYPE_DIRECT IntfEnicType = 3
	// VSS/DVS connectivity etc.
	IntfEnicType_IF_ENIC_TYPE_CLASSIC IntfEnicType = 4
	IntfEnicType_IF_ENIC_TYPE_GFT     IntfEnicType = 5
)

var IntfEnicType_name = map[int32]string{
	0: "IF_ENIC_TYPE_NONE",
	1: "IF_ENIC_TYPE_USEG",
	2: "IF_ENIC_TYPE_PVLAN",
	3: "IF_ENIC_TYPE_DIRECT",
	4: "IF_ENIC_TYPE_CLASSIC",
	5: "IF_ENIC_TYPE_GFT",
}
var IntfEnicType_value = map[string]int32{
	"IF_ENIC_TYPE_NONE":    0,
	"IF_ENIC_TYPE_USEG":    1,
	"IF_ENIC_TYPE_PVLAN":   2,
	"IF_ENIC_TYPE_DIRECT":  3,
	"IF_ENIC_TYPE_CLASSIC": 4,
	"IF_ENIC_TYPE_GFT":     5,
}

func (x IntfEnicType) String() string {
	return proto.EnumName(IntfEnicType_name, int32(x))
}
func (IntfEnicType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

// ------------------------------------------------------------------------------
// if interface type is IF_TYPE_TUNNEL, one of the following encap types must be
// set.
// ------------------------------------------------------------------------------
type IntfTunnelEncapType int32

const (
	IntfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_NONE  IntfTunnelEncapType = 0
	IntfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_VXLAN IntfTunnelEncapType = 1
	IntfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_GRE   IntfTunnelEncapType = 2
)

var IntfTunnelEncapType_name = map[int32]string{
	0: "IF_TUNNEL_ENCAP_TYPE_NONE",
	1: "IF_TUNNEL_ENCAP_TYPE_VXLAN",
	2: "IF_TUNNEL_ENCAP_TYPE_GRE",
}
var IntfTunnelEncapType_value = map[string]int32{
	"IF_TUNNEL_ENCAP_TYPE_NONE":  0,
	"IF_TUNNEL_ENCAP_TYPE_VXLAN": 1,
	"IF_TUNNEL_ENCAP_TYPE_GRE":   2,
}

func (x IntfTunnelEncapType) String() string {
	return proto.EnumName(IntfTunnelEncapType_name, int32(x))
}
func (IntfTunnelEncapType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

// common meta object that is part of all other top level objects
// TODO: should we add last updated timestamp, revision etc. here ?
type ObjectMeta struct {
	VrfId uint64 `protobuf:"fixed64,1,opt,name=vrf_id,json=vrfId" json:"vrf_id,omitempty"`
}

func (m *ObjectMeta) Reset()                    { *m = ObjectMeta{} }
func (m *ObjectMeta) String() string            { return proto.CompactTextString(m) }
func (*ObjectMeta) ProtoMessage()               {}
func (*ObjectMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ObjectMeta) GetVrfId() uint64 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

// EncapInfo captures wire encap information
type EncapInfo struct {
	EncapType  EncapType `protobuf:"varint,1,opt,name=encap_type,json=encapType,enum=intf.EncapType" json:"encap_type,omitempty"`
	EncapValue uint32    `protobuf:"varint,2,opt,name=encap_value,json=encapValue" json:"encap_value,omitempty"`
}

func (m *EncapInfo) Reset()                    { *m = EncapInfo{} }
func (m *EncapInfo) String() string            { return proto.CompactTextString(m) }
func (*EncapInfo) ProtoMessage()               {}
func (*EncapInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EncapInfo) GetEncapType() EncapType {
	if m != nil {
		return m.EncapType
	}
	return EncapType_ENCAP_TYPE_NONE
}

func (m *EncapInfo) GetEncapValue() uint32 {
	if m != nil {
		return m.EncapValue
	}
	return 0
}

// IP address object
type IPAddress struct {
	IpAf   IPAddressFamily `protobuf:"varint,1,opt,name=ip_af,json=ipAf,enum=intf.IPAddressFamily" json:"ip_af,omitempty"`
	V4Addr uint32          `protobuf:"fixed32,2,opt,name=v4_addr,json=v4Addr" json:"v4_addr,omitempty"`
	V6Addr []byte          `protobuf:"bytes,3,opt,name=v6_addr,json=v6Addr,proto3" json:"v6_addr,omitempty"`
}

func (m *IPAddress) Reset()                    { *m = IPAddress{} }
func (m *IPAddress) String() string            { return proto.CompactTextString(m) }
func (*IPAddress) ProtoMessage()               {}
func (*IPAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IPAddress) GetIpAf() IPAddressFamily {
	if m != nil {
		return m.IpAf
	}
	return IPAddressFamily_IP_AF_NONE
}

func (m *IPAddress) GetV4Addr() uint32 {
	if m != nil {
		return m.V4Addr
	}
	return 0
}

func (m *IPAddress) GetV6Addr() []byte {
	if m != nil {
		return m.V6Addr
	}
	return nil
}

// IP Range
type IPRange struct {
	LowIpaddr  *IPAddress `protobuf:"bytes,1,opt,name=low_ipaddr,json=lowIpaddr" json:"low_ipaddr,omitempty"`
	HighIpaddr *IPAddress `protobuf:"bytes,2,opt,name=high_ipaddr,json=highIpaddr" json:"high_ipaddr,omitempty"`
}

func (m *IPRange) Reset()                    { *m = IPRange{} }
func (m *IPRange) String() string            { return proto.CompactTextString(m) }
func (*IPRange) ProtoMessage()               {}
func (*IPRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IPRange) GetLowIpaddr() *IPAddress {
	if m != nil {
		return m.LowIpaddr
	}
	return nil
}

func (m *IPRange) GetHighIpaddr() *IPAddress {
	if m != nil {
		return m.HighIpaddr
	}
	return nil
}

// IP Prefix object
type IPPrefix struct {
	Address   *IPAddress `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	PrefixLen uint32     `protobuf:"varint,2,opt,name=prefix_len,json=prefixLen" json:"prefix_len,omitempty"`
}

func (m *IPPrefix) Reset()                    { *m = IPPrefix{} }
func (m *IPPrefix) String() string            { return proto.CompactTextString(m) }
func (*IPPrefix) ProtoMessage()               {}
func (*IPPrefix) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IPPrefix) GetAddress() *IPAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *IPPrefix) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

// IPSubnet represents an IPv4 or IPv6 subnet
type IPSubnet struct {
	Ipv4Subnet *IPPrefix `protobuf:"bytes,1,opt,name=ipv4_subnet,json=ipv4Subnet" json:"ipv4_subnet,omitempty"`
	Ipv6Subnet *IPPrefix `protobuf:"bytes,2,opt,name=ipv6_subnet,json=ipv6Subnet" json:"ipv6_subnet,omitempty"`
}

func (m *IPSubnet) Reset()                    { *m = IPSubnet{} }
func (m *IPSubnet) String() string            { return proto.CompactTextString(m) }
func (*IPSubnet) ProtoMessage()               {}
func (*IPSubnet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IPSubnet) GetIpv4Subnet() *IPPrefix {
	if m != nil {
		return m.Ipv4Subnet
	}
	return nil
}

func (m *IPSubnet) GetIpv6Subnet() *IPPrefix {
	if m != nil {
		return m.Ipv6Subnet
	}
	return nil
}

// AddressRange represents an IPv4 or IPv6 address range
type AddressRange struct {
	Ipv4Range *IPRange `protobuf:"bytes,1,opt,name=ipv4_range,json=ipv4Range" json:"ipv4_range,omitempty"`
	Ipv6Range *IPRange `protobuf:"bytes,2,opt,name=ipv6_range,json=ipv6Range" json:"ipv6_range,omitempty"`
}

func (m *AddressRange) Reset()                    { *m = AddressRange{} }
func (m *AddressRange) String() string            { return proto.CompactTextString(m) }
func (*AddressRange) ProtoMessage()               {}
func (*AddressRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AddressRange) GetIpv4Range() *IPRange {
	if m != nil {
		return m.Ipv4Range
	}
	return nil
}

func (m *AddressRange) GetIpv6Range() *IPRange {
	if m != nil {
		return m.Ipv6Range
	}
	return nil
}

// Address object is the prefix or range
type Address struct {
	Prefix    *IPSubnet     `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	AddrRange *AddressRange `protobuf:"bytes,2,opt,name=addr_range,json=addrRange" json:"addr_range,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Address) GetPrefix() *IPSubnet {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *Address) GetAddrRange() *AddressRange {
	if m != nil {
		return m.AddrRange
	}
	return nil
}

type IPAddressObj struct {
	Iptype  IPAddressType `protobuf:"varint,1,opt,name=iptype,enum=intf.IPAddressType" json:"iptype,omitempty"`
	Address *Address      `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Negate  bool          `protobuf:"varint,3,opt,name=negate" json:"negate,omitempty"`
}

func (m *IPAddressObj) Reset()                    { *m = IPAddressObj{} }
func (m *IPAddressObj) String() string            { return proto.CompactTextString(m) }
func (*IPAddressObj) ProtoMessage()               {}
func (*IPAddressObj) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *IPAddressObj) GetIptype() IPAddressType {
	if m != nil {
		return m.Iptype
	}
	return IPAddressType_IP_ADDRESS_NONE
}

func (m *IPAddressObj) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *IPAddressObj) GetNegate() bool {
	if m != nil {
		return m.Negate
	}
	return false
}

// PortRange object has low and high end of the port ranges
type L4PortRange struct {
	PortLow  uint32 `protobuf:"varint,1,opt,name=port_low,json=portLow" json:"port_low,omitempty"`
	PortHigh uint32 `protobuf:"varint,2,opt,name=port_high,json=portHigh" json:"port_high,omitempty"`
}

func (m *L4PortRange) Reset()                    { *m = L4PortRange{} }
func (m *L4PortRange) String() string            { return proto.CompactTextString(m) }
func (*L4PortRange) ProtoMessage()               {}
func (*L4PortRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *L4PortRange) GetPortLow() uint32 {
	if m != nil {
		return m.PortLow
	}
	return 0
}

func (m *L4PortRange) GetPortHigh() uint32 {
	if m != nil {
		return m.PortHigh
	}
	return 0
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type DropReasons struct {
	DropMalformedPkt                bool `protobuf:"varint,1,opt,name=drop_malformed_pkt,json=dropMalformedPkt" json:"drop_malformed_pkt,omitempty"`
	DropInputMapping                bool `protobuf:"varint,2,opt,name=drop_input_mapping,json=dropInputMapping" json:"drop_input_mapping,omitempty"`
	DropInputMappingDejavu          bool `protobuf:"varint,3,opt,name=drop_input_mapping_dejavu,json=dropInputMappingDejavu" json:"drop_input_mapping_dejavu,omitempty"`
	DropFlowHit                     bool `protobuf:"varint,4,opt,name=drop_flow_hit,json=dropFlowHit" json:"drop_flow_hit,omitempty"`
	DropFlowMiss                    bool `protobuf:"varint,5,opt,name=drop_flow_miss,json=dropFlowMiss" json:"drop_flow_miss,omitempty"`
	DropNacl                        bool `protobuf:"varint,6,opt,name=drop_nacl,json=dropNacl" json:"drop_nacl,omitempty"`
	DropIpsg                        bool `protobuf:"varint,7,opt,name=drop_ipsg,json=dropIpsg" json:"drop_ipsg,omitempty"`
	DropIpNormalization             bool `protobuf:"varint,8,opt,name=drop_ip_normalization,json=dropIpNormalization" json:"drop_ip_normalization,omitempty"`
	DropTcpNormalization            bool `protobuf:"varint,9,opt,name=drop_tcp_normalization,json=dropTcpNormalization" json:"drop_tcp_normalization,omitempty"`
	DropTcpRstWithInvalidAckNum     bool `protobuf:"varint,10,opt,name=drop_tcp_rst_with_invalid_ack_num,json=dropTcpRstWithInvalidAckNum" json:"drop_tcp_rst_with_invalid_ack_num,omitempty"`
	DropTcpNonSynFirstPkt           bool `protobuf:"varint,11,opt,name=drop_tcp_non_syn_first_pkt,json=dropTcpNonSynFirstPkt" json:"drop_tcp_non_syn_first_pkt,omitempty"`
	DropIcmpNormalization           bool `protobuf:"varint,12,opt,name=drop_icmp_normalization,json=dropIcmpNormalization" json:"drop_icmp_normalization,omitempty"`
	DropInputPropertiesMiss         bool `protobuf:"varint,13,opt,name=drop_input_properties_miss,json=dropInputPropertiesMiss" json:"drop_input_properties_miss,omitempty"`
	DropTcpOutOfWindow              bool `protobuf:"varint,14,opt,name=drop_tcp_out_of_window,json=dropTcpOutOfWindow" json:"drop_tcp_out_of_window,omitempty"`
	DropTcpSplitHandshake           bool `protobuf:"varint,15,opt,name=drop_tcp_split_handshake,json=dropTcpSplitHandshake" json:"drop_tcp_split_handshake,omitempty"`
	DropTcpWinZeroDrop              bool `protobuf:"varint,16,opt,name=drop_tcp_win_zero_drop,json=dropTcpWinZeroDrop" json:"drop_tcp_win_zero_drop,omitempty"`
	DropTcpDataAfterFin             bool `protobuf:"varint,17,opt,name=drop_tcp_data_after_fin,json=dropTcpDataAfterFin" json:"drop_tcp_data_after_fin,omitempty"`
	DropTcpNonRstPktAfterRst        bool `protobuf:"varint,18,opt,name=drop_tcp_non_rst_pkt_after_rst,json=dropTcpNonRstPktAfterRst" json:"drop_tcp_non_rst_pkt_after_rst,omitempty"`
	DropTcpInvalidResponderFirstPkt bool `protobuf:"varint,19,opt,name=drop_tcp_invalid_responder_first_pkt,json=dropTcpInvalidResponderFirstPkt" json:"drop_tcp_invalid_responder_first_pkt,omitempty"`
	DropTcpUnexpectedPkt            bool `protobuf:"varint,20,opt,name=drop_tcp_unexpected_pkt,json=dropTcpUnexpectedPkt" json:"drop_tcp_unexpected_pkt,omitempty"`
	DropSrcLifMismatch              bool `protobuf:"varint,21,opt,name=drop_src_lif_mismatch,json=dropSrcLifMismatch" json:"drop_src_lif_mismatch,omitempty"`
	DropParserIcrcError             bool `protobuf:"varint,22,opt,name=drop_parser_icrc_error,json=dropParserIcrcError" json:"drop_parser_icrc_error,omitempty"`
	DropParseLenError               bool `protobuf:"varint,23,opt,name=drop_parse_len_error,json=dropParseLenError" json:"drop_parse_len_error,omitempty"`
	DropHardwareError               bool `protobuf:"varint,24,opt,name=drop_hardware_error,json=dropHardwareError" json:"drop_hardware_error,omitempty"`
}

func (m *DropReasons) Reset()                    { *m = DropReasons{} }
func (m *DropReasons) String() string            { return proto.CompactTextString(m) }
func (*DropReasons) ProtoMessage()               {}
func (*DropReasons) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DropReasons) GetDropMalformedPkt() bool {
	if m != nil {
		return m.DropMalformedPkt
	}
	return false
}

func (m *DropReasons) GetDropInputMapping() bool {
	if m != nil {
		return m.DropInputMapping
	}
	return false
}

func (m *DropReasons) GetDropInputMappingDejavu() bool {
	if m != nil {
		return m.DropInputMappingDejavu
	}
	return false
}

func (m *DropReasons) GetDropFlowHit() bool {
	if m != nil {
		return m.DropFlowHit
	}
	return false
}

func (m *DropReasons) GetDropFlowMiss() bool {
	if m != nil {
		return m.DropFlowMiss
	}
	return false
}

func (m *DropReasons) GetDropNacl() bool {
	if m != nil {
		return m.DropNacl
	}
	return false
}

func (m *DropReasons) GetDropIpsg() bool {
	if m != nil {
		return m.DropIpsg
	}
	return false
}

func (m *DropReasons) GetDropIpNormalization() bool {
	if m != nil {
		return m.DropIpNormalization
	}
	return false
}

func (m *DropReasons) GetDropTcpNormalization() bool {
	if m != nil {
		return m.DropTcpNormalization
	}
	return false
}

func (m *DropReasons) GetDropTcpRstWithInvalidAckNum() bool {
	if m != nil {
		return m.DropTcpRstWithInvalidAckNum
	}
	return false
}

func (m *DropReasons) GetDropTcpNonSynFirstPkt() bool {
	if m != nil {
		return m.DropTcpNonSynFirstPkt
	}
	return false
}

func (m *DropReasons) GetDropIcmpNormalization() bool {
	if m != nil {
		return m.DropIcmpNormalization
	}
	return false
}

func (m *DropReasons) GetDropInputPropertiesMiss() bool {
	if m != nil {
		return m.DropInputPropertiesMiss
	}
	return false
}

func (m *DropReasons) GetDropTcpOutOfWindow() bool {
	if m != nil {
		return m.DropTcpOutOfWindow
	}
	return false
}

func (m *DropReasons) GetDropTcpSplitHandshake() bool {
	if m != nil {
		return m.DropTcpSplitHandshake
	}
	return false
}

func (m *DropReasons) GetDropTcpWinZeroDrop() bool {
	if m != nil {
		return m.DropTcpWinZeroDrop
	}
	return false
}

func (m *DropReasons) GetDropTcpDataAfterFin() bool {
	if m != nil {
		return m.DropTcpDataAfterFin
	}
	return false
}

func (m *DropReasons) GetDropTcpNonRstPktAfterRst() bool {
	if m != nil {
		return m.DropTcpNonRstPktAfterRst
	}
	return false
}

func (m *DropReasons) GetDropTcpInvalidResponderFirstPkt() bool {
	if m != nil {
		return m.DropTcpInvalidResponderFirstPkt
	}
	return false
}

func (m *DropReasons) GetDropTcpUnexpectedPkt() bool {
	if m != nil {
		return m.DropTcpUnexpectedPkt
	}
	return false
}

func (m *DropReasons) GetDropSrcLifMismatch() bool {
	if m != nil {
		return m.DropSrcLifMismatch
	}
	return false
}

func (m *DropReasons) GetDropParserIcrcError() bool {
	if m != nil {
		return m.DropParserIcrcError
	}
	return false
}

func (m *DropReasons) GetDropParseLenError() bool {
	if m != nil {
		return m.DropParseLenError
	}
	return false
}

func (m *DropReasons) GetDropHardwareError() bool {
	if m != nil {
		return m.DropHardwareError
	}
	return false
}

type EgressDropReasons struct {
	DropOutputMapping bool `protobuf:"varint,1,opt,name=drop_output_mapping,json=dropOutputMapping" json:"drop_output_mapping,omitempty"`
	DropPruneSrcPort  bool `protobuf:"varint,2,opt,name=drop_prune_src_port,json=dropPruneSrcPort" json:"drop_prune_src_port,omitempty"`
	DropMirror        bool `protobuf:"varint,3,opt,name=drop_mirror,json=dropMirror" json:"drop_mirror,omitempty"`
	DropPolicer       bool `protobuf:"varint,4,opt,name=drop_policer,json=dropPolicer" json:"drop_policer,omitempty"`
	DropCopp          bool `protobuf:"varint,5,opt,name=drop_copp,json=dropCopp" json:"drop_copp,omitempty"`
	DropChecksumErr   bool `protobuf:"varint,6,opt,name=drop_checksum_err,json=dropChecksumErr" json:"drop_checksum_err,omitempty"`
}

func (m *EgressDropReasons) Reset()                    { *m = EgressDropReasons{} }
func (m *EgressDropReasons) String() string            { return proto.CompactTextString(m) }
func (*EgressDropReasons) ProtoMessage()               {}
func (*EgressDropReasons) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *EgressDropReasons) GetDropOutputMapping() bool {
	if m != nil {
		return m.DropOutputMapping
	}
	return false
}

func (m *EgressDropReasons) GetDropPruneSrcPort() bool {
	if m != nil {
		return m.DropPruneSrcPort
	}
	return false
}

func (m *EgressDropReasons) GetDropMirror() bool {
	if m != nil {
		return m.DropMirror
	}
	return false
}

func (m *EgressDropReasons) GetDropPolicer() bool {
	if m != nil {
		return m.DropPolicer
	}
	return false
}

func (m *EgressDropReasons) GetDropCopp() bool {
	if m != nil {
		return m.DropCopp
	}
	return false
}

func (m *EgressDropReasons) GetDropChecksumErr() bool {
	if m != nil {
		return m.DropChecksumErr
	}
	return false
}

// VrfKeyHandle is used to operate on a vrf either by its key or handle
type VrfKeyHandle struct {
	VrfId     uint64 `protobuf:"varint,1,opt,name=vrf_id,json=vrfId" json:"vrf_id,omitempty"`
	VrfHandle uint64 `protobuf:"fixed64,2,opt,name=vrf_handle,json=vrfHandle" json:"vrf_handle,omitempty"`
}

func (m *VrfKeyHandle) Reset()                    { *m = VrfKeyHandle{} }
func (m *VrfKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*VrfKeyHandle) ProtoMessage()               {}
func (*VrfKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *VrfKeyHandle) GetVrfId() uint64 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *VrfKeyHandle) GetVrfHandle() uint64 {
	if m != nil {
		return m.VrfHandle
	}
	return 0
}

// L2SegmentKeyHandle is used to operate on a L2 segment either by its
// segment id or HAL allocated handle
type L2SegmentKeyHandle struct {
	SegmentId uint64 `protobuf:"varint,1,opt,name=segment_id,json=segmentId" json:"segment_id,omitempty"`
	// NOTE:
	// 1. this is unique across all types of L2 segments
	// 2. this is allocated by the HAL app
	L2SegmentHandle uint64 `protobuf:"fixed64,2,opt,name=l2segment_handle,json=l2segmentHandle" json:"l2segment_handle,omitempty"`
}

func (m *L2SegmentKeyHandle) Reset()                    { *m = L2SegmentKeyHandle{} }
func (m *L2SegmentKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentKeyHandle) ProtoMessage()               {}
func (*L2SegmentKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *L2SegmentKeyHandle) GetSegmentId() uint64 {
	if m != nil {
		return m.SegmentId
	}
	return 0
}

func (m *L2SegmentKeyHandle) GetL2SegmentHandle() uint64 {
	if m != nil {
		return m.L2SegmentHandle
	}
	return 0
}

// PortKeyHandle uniquely identifies a Port
type PortKeyHandle struct {
	PortId     uint32 `protobuf:"fixed32,1,opt,name=port_id,json=portId" json:"port_id,omitempty"`
	PortHandle uint64 `protobuf:"fixed64,2,opt,name=port_handle,json=portHandle" json:"port_handle,omitempty"`
}

func (m *PortKeyHandle) Reset()                    { *m = PortKeyHandle{} }
func (m *PortKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*PortKeyHandle) ProtoMessage()               {}
func (*PortKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PortKeyHandle) GetPortId() uint32 {
	if m != nil {
		return m.PortId
	}
	return 0
}

func (m *PortKeyHandle) GetPortHandle() uint64 {
	if m != nil {
		return m.PortHandle
	}
	return 0
}

// LifKeyHandle uniquely identifies a LIF
type LifKeyHandle struct {
	LifId     uint64 `protobuf:"fixed64,1,opt,name=LifId" json:"LifId,omitempty"`
	LifHandle uint64 `protobuf:"fixed64,2,opt,name=LifHandle" json:"LifHandle,omitempty"`
}

func (m *LifKeyHandle) Reset()                    { *m = LifKeyHandle{} }
func (m *LifKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*LifKeyHandle) ProtoMessage()               {}
func (*LifKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *LifKeyHandle) GetLifId() uint64 {
	if m != nil {
		return m.LifId
	}
	return 0
}

func (m *LifKeyHandle) GetLifHandle() uint64 {
	if m != nil {
		return m.LifHandle
	}
	return 0
}

// InterfaceKeyHandle uniquely identifies a Interface
type InterfaceKeyHandle struct {
	InterfaceId uint64 `protobuf:"fixed64,1,opt,name=InterfaceId" json:"InterfaceId,omitempty"`
	IfHandle    uint64 `protobuf:"fixed64,2,opt,name=IfHandle" json:"IfHandle,omitempty"`
}

func (m *InterfaceKeyHandle) Reset()                    { *m = InterfaceKeyHandle{} }
func (m *InterfaceKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*InterfaceKeyHandle) ProtoMessage()               {}
func (*InterfaceKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *InterfaceKeyHandle) GetInterfaceId() uint64 {
	if m != nil {
		return m.InterfaceId
	}
	return 0
}

func (m *InterfaceKeyHandle) GetIfHandle() uint64 {
	if m != nil {
		return m.IfHandle
	}
	return 0
}

// Filter key
type FilterKey struct {
	LifKeyOrHandle *LifKeyHandle `protobuf:"bytes,1,opt,name=lif_key_or_handle,json=lifKeyOrHandle" json:"lif_key_or_handle,omitempty"`
	FilterType     FilterType    `protobuf:"varint,2,opt,name=filter_type,json=filterType,enum=intf.FilterType" json:"filter_type,omitempty"`
	MacAddress     uint64        `protobuf:"varint,3,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	VlanId         uint32        `protobuf:"varint,4,opt,name=vlan_id,json=vlanId" json:"vlan_id,omitempty"`
}

func (m *FilterKey) Reset()                    { *m = FilterKey{} }
func (m *FilterKey) String() string            { return proto.CompactTextString(m) }
func (*FilterKey) ProtoMessage()               {}
func (*FilterKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *FilterKey) GetLifKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.LifKeyOrHandle
	}
	return nil
}

func (m *FilterKey) GetFilterType() FilterType {
	if m != nil {
		return m.FilterType
	}
	return FilterType_FILTER_NONE
}

func (m *FilterKey) GetMacAddress() uint64 {
	if m != nil {
		return m.MacAddress
	}
	return 0
}

func (m *FilterKey) GetVlanId() uint32 {
	if m != nil {
		return m.VlanId
	}
	return 0
}

// A single entry in the LIF to Qstate map.
// This entry represents a single type.
// Everything except type puspose is used by the hardware.
type LifQStateMapEntry struct {
	// type_num is the type as defined by Capri hardware in the
	// LIF -> Qstate array entry. There are 8 types numbered 0-7.
	// There can be at most one entry per type_num.
	// TODO: How does a user know what number to use here unless
	// it is enumerated or purpose is clear ???
	TypeNum uint32 `protobuf:"varint,1,opt,name=type_num,json=typeNum" json:"type_num,omitempty"`
	// This entry represents the size of the Q state
	// used by this type. This number represents the size
	// as 2^(5+size). e.g. for a size of 64, the size field
	// would be 1 i.e. 2^(5+1) = 64.
	// Max value for size today is 7 i.e. 4096 bytes.
	Size uint32 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	// entries field represent number of queues as a
	// power of 2. So a value of 3 means 8 queues.
	// Max value for entries today is 24 i.e. 16M queues.
	Entries uint32 `protobuf:"varint,3,opt,name=entries" json:"entries,omitempty"`
	// Queue purpose is not needed by the hardware. It is used
	// internally by the HAL/FTE.
	Purpose LifQueuePurpose `protobuf:"varint,4,opt,name=purpose,enum=intf.LifQueuePurpose" json:"purpose,omitempty"`
}

func (m *LifQStateMapEntry) Reset()                    { *m = LifQStateMapEntry{} }
func (m *LifQStateMapEntry) String() string            { return proto.CompactTextString(m) }
func (*LifQStateMapEntry) ProtoMessage()               {}
func (*LifQStateMapEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *LifQStateMapEntry) GetTypeNum() uint32 {
	if m != nil {
		return m.TypeNum
	}
	return 0
}

func (m *LifQStateMapEntry) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *LifQStateMapEntry) GetEntries() uint32 {
	if m != nil {
		return m.Entries
	}
	return 0
}

func (m *LifQStateMapEntry) GetPurpose() LifQueuePurpose {
	if m != nil {
		return m.Purpose
	}
	return LifQueuePurpose_LIF_QUEUE_PURPOSE_NONE
}

// Packet filters to receive traffic
type PktFilter struct {
	ReceiveBroadcast    bool `protobuf:"varint,1,opt,name=receive_broadcast,json=receiveBroadcast" json:"receive_broadcast,omitempty"`
	ReceiveAllMulticast bool `protobuf:"varint,2,opt,name=receive_all_multicast,json=receiveAllMulticast" json:"receive_all_multicast,omitempty"`
	ReceivePromiscuous  bool `protobuf:"varint,3,opt,name=receive_promiscuous,json=receivePromiscuous" json:"receive_promiscuous,omitempty"`
}

func (m *PktFilter) Reset()                    { *m = PktFilter{} }
func (m *PktFilter) String() string            { return proto.CompactTextString(m) }
func (*PktFilter) ProtoMessage()               {}
func (*PktFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *PktFilter) GetReceiveBroadcast() bool {
	if m != nil {
		return m.ReceiveBroadcast
	}
	return false
}

func (m *PktFilter) GetReceiveAllMulticast() bool {
	if m != nil {
		return m.ReceiveAllMulticast
	}
	return false
}

func (m *PktFilter) GetReceivePromiscuous() bool {
	if m != nil {
		return m.ReceivePromiscuous
	}
	return false
}

// LIF object
type LifSpec struct {
	Meta *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	// key_or_handle is LIF's key or handle
	KeyOrHandle             *LifKeyHandle       `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	PinnedUplinkIfKeyHandle *InterfaceKeyHandle `protobuf:"bytes,3,opt,name=pinned_uplink_if_key_handle,json=pinnedUplinkIfKeyHandle" json:"pinned_uplink_if_key_handle,omitempty"`
	AdminStatus             IntfStatus          `protobuf:"varint,4,opt,name=admin_status,json=adminStatus,enum=intf.IntfStatus" json:"admin_status,omitempty"`
	LifQstateMap            *LifQStateMapEntry  `protobuf:"bytes,5,opt,name=lif_qstate_map,json=lifQstateMap" json:"lif_qstate_map,omitempty"`
	VlanStripEn             bool                `protobuf:"varint,6,opt,name=vlan_strip_en,json=vlanStripEn" json:"vlan_strip_en,omitempty"`
	VlanInsertEn            bool                `protobuf:"varint,7,opt,name=vlan_insert_en,json=vlanInsertEn" json:"vlan_insert_en,omitempty"`
	EnableRdma              bool                `protobuf:"varint,8,opt,name=enable_rdma,json=enableRdma" json:"enable_rdma,omitempty"`
	IsManagement            bool                `protobuf:"varint,9,opt,name=is_management,json=isManagement" json:"is_management,omitempty"`
	PacketFilter            *PktFilter          `protobuf:"bytes,10,opt,name=packet_filter,json=packetFilter" json:"packet_filter,omitempty"`
	HwLifId                 uint32              `protobuf:"varint,11,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
	RdmaMaxKeys             uint32              `protobuf:"varint,12,opt,name=rdma_max_keys,json=rdmaMaxKeys" json:"rdma_max_keys,omitempty"`
	RdmaMaxAhs              uint32              `protobuf:"varint,13,opt,name=rdma_max_ahs,json=rdmaMaxAhs" json:"rdma_max_ahs,omitempty"`
	RdmaMaxPtEntries        uint32              `protobuf:"varint,14,opt,name=rdma_max_pt_entries,json=rdmaMaxPtEntries" json:"rdma_max_pt_entries,omitempty"`
	LifQstate               *QStateSetReq       `protobuf:"bytes,15,opt,name=lif_qstate,json=lifQstate" json:"lif_qstate,omitempty"`
	Rss                     *LifRssSpec         `protobuf:"bytes,16,opt,name=rss" json:"rss,omitempty"`
}

func (m *LifSpec) GetDelphiMessage() proto.Message {
	return m
}

func (m *LifSpec) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *LifSpec) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *LifSpec) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *LifSpec) GetDelphiKind() string {
	return "LifSpec"
}

func (m *LifSpec) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *LifSpec) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*LifSpec)
	return obj
}

func LifSpecMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("LifSpec", mode)
}

func LifSpecMountKey(client clientApi.Client, key *LifKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("LifSpec", key.String(), mode)
}

func GetLifSpec(client clientApi.Client, key *LifKeyHandle) *LifSpec {
	o := client.GetObject("LifSpec", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*LifSpec)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func LifSpecFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg LifSpec
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func LifSpecWatch(client clientApi.Client, reactor LifSpecReactor) {
	client.WatchKind("LifSpec", reactor)
}
func LifSpecList(client clientApi.Client) []*LifSpec {
	bobjs := client.List("LifSpec")
	objs := make([]*LifSpec, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*LifSpec)
		objs = append(objs, obj)
	}
	return objs
}
func (m *LifSpec) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(LifSpecReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnLifSpecCreate(m)
			} else {
				oldObj, ok := old.(*LifSpec)
				if ok == false {
					panic("Not an LifSpec object")
				}
				rctr.OnLifSpecUpdate(oldObj, m)
			}
		} else {
			rctr.OnLifSpecDelete(m)
		}
	}
}

type LifSpecReactor interface {
	OnLifSpecCreate(obj *LifSpec)
	OnLifSpecUpdate(old *LifSpec, obj *LifSpec)
	OnLifSpecDelete(obj *LifSpec)
}

func (m *LifSpec) Reset()                    { *m = LifSpec{} }
func (m *LifSpec) String() string            { return proto.CompactTextString(m) }
func (*LifSpec) ProtoMessage()               {}
func (*LifSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *LifSpec) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *LifSpec) GetKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *LifSpec) GetPinnedUplinkIfKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.PinnedUplinkIfKeyHandle
	}
	return nil
}

func (m *LifSpec) GetAdminStatus() IntfStatus {
	if m != nil {
		return m.AdminStatus
	}
	return IntfStatus_IF_STATUS_NONE
}

func (m *LifSpec) GetLifQstateMap() *LifQStateMapEntry {
	if m != nil {
		return m.LifQstateMap
	}
	return nil
}

func (m *LifSpec) GetVlanStripEn() bool {
	if m != nil {
		return m.VlanStripEn
	}
	return false
}

func (m *LifSpec) GetVlanInsertEn() bool {
	if m != nil {
		return m.VlanInsertEn
	}
	return false
}

func (m *LifSpec) GetEnableRdma() bool {
	if m != nil {
		return m.EnableRdma
	}
	return false
}

func (m *LifSpec) GetIsManagement() bool {
	if m != nil {
		return m.IsManagement
	}
	return false
}

func (m *LifSpec) GetPacketFilter() *PktFilter {
	if m != nil {
		return m.PacketFilter
	}
	return nil
}

func (m *LifSpec) GetHwLifId() uint32 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *LifSpec) GetRdmaMaxKeys() uint32 {
	if m != nil {
		return m.RdmaMaxKeys
	}
	return 0
}

func (m *LifSpec) GetRdmaMaxAhs() uint32 {
	if m != nil {
		return m.RdmaMaxAhs
	}
	return 0
}

func (m *LifSpec) GetRdmaMaxPtEntries() uint32 {
	if m != nil {
		return m.RdmaMaxPtEntries
	}
	return 0
}

func (m *LifSpec) GetLifQstate() *QStateSetReq {
	if m != nil {
		return m.LifQstate
	}
	return nil
}

func (m *LifSpec) GetRss() *LifRssSpec {
	if m != nil {
		return m.Rss
	}
	return nil
}

// LifRequestMsg is batched request used to create/update of LIFs
type LifRequestMsg struct {
	Request *LifSpec `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *LifRequestMsg) Reset()                    { *m = LifRequestMsg{} }
func (m *LifRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LifRequestMsg) ProtoMessage()               {}
func (*LifRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *LifRequestMsg) GetRequest() *LifSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// LifStatus represents the operational status of LIF
type LifStatus struct {
	Meta        *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle *LifKeyHandle      `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	LifStatus   IntfStatus         `protobuf:"varint,3,opt,name=lif_status,json=lifStatus,enum=intf.IntfStatus" json:"lif_status,omitempty"`
	LifHandle   uint64             `protobuf:"fixed64,4,opt,name=lif_handle,json=lifHandle" json:"lif_handle,omitempty"`
	HwLifId     uint64             `protobuf:"varint,5,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
}

func (m *LifStatus) GetDelphiMessage() proto.Message {
	return m
}

func (m *LifStatus) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *LifStatus) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *LifStatus) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *LifStatus) GetDelphiKind() string {
	return "LifStatus"
}

func (m *LifStatus) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *LifStatus) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*LifStatus)
	return obj
}

func LifStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("LifStatus", mode)
}

func LifStatusMountKey(client clientApi.Client, key *LifKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("LifStatus", key.String(), mode)
}

func GetLifStatus(client clientApi.Client, key *LifKeyHandle) *LifStatus {
	o := client.GetObject("LifStatus", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*LifStatus)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func LifStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg LifStatus
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func LifStatusWatch(client clientApi.Client, reactor LifStatusReactor) {
	client.WatchKind("LifStatus", reactor)
}
func LifStatusList(client clientApi.Client) []*LifStatus {
	bobjs := client.List("LifStatus")
	objs := make([]*LifStatus, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*LifStatus)
		objs = append(objs, obj)
	}
	return objs
}
func (m *LifStatus) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(LifStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnLifStatusCreate(m)
			} else {
				oldObj, ok := old.(*LifStatus)
				if ok == false {
					panic("Not an LifStatus object")
				}
				rctr.OnLifStatusUpdate(oldObj, m)
			}
		} else {
			rctr.OnLifStatusDelete(m)
		}
	}
}

type LifStatusReactor interface {
	OnLifStatusCreate(obj *LifStatus)
	OnLifStatusUpdate(old *LifStatus, obj *LifStatus)
	OnLifStatusDelete(obj *LifStatus)
}

func (m *LifStatus) Reset()                    { *m = LifStatus{} }
func (m *LifStatus) String() string            { return proto.CompactTextString(m) }
func (*LifStatus) ProtoMessage()               {}
func (*LifStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *LifStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *LifStatus) GetKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *LifStatus) GetLifStatus() IntfStatus {
	if m != nil {
		return m.LifStatus
	}
	return IntfStatus_IF_STATUS_NONE
}

func (m *LifStatus) GetLifHandle() uint64 {
	if m != nil {
		return m.LifHandle
	}
	return 0
}

func (m *LifStatus) GetHwLifId() uint64 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

// LifQstate entries
type LifQState struct {
	TypeNum uint32 `protobuf:"varint,1,opt,name=type_num,json=typeNum" json:"type_num,omitempty"`
	Addr    uint64 `protobuf:"varint,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *LifQState) Reset()                    { *m = LifQState{} }
func (m *LifQState) String() string            { return proto.CompactTextString(m) }
func (*LifQState) ProtoMessage()               {}
func (*LifQState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *LifQState) GetTypeNum() uint32 {
	if m != nil {
		return m.TypeNum
	}
	return 0
}

func (m *LifQState) GetAddr() uint64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

// LifRdmaData entries
type LifRdmaData struct {
	PtBaseAddr uint64 `protobuf:"varint,1,opt,name=pt_base_addr,json=ptBaseAddr" json:"pt_base_addr,omitempty"`
	KtBaseAddr uint64 `protobuf:"varint,2,opt,name=kt_base_addr,json=ktBaseAddr" json:"kt_base_addr,omitempty"`
	AtBaseAddr uint64 `protobuf:"varint,3,opt,name=at_base_addr,json=atBaseAddr" json:"at_base_addr,omitempty"`
}

func (m *LifRdmaData) Reset()                    { *m = LifRdmaData{} }
func (m *LifRdmaData) String() string            { return proto.CompactTextString(m) }
func (*LifRdmaData) ProtoMessage()               {}
func (*LifRdmaData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *LifRdmaData) GetPtBaseAddr() uint64 {
	if m != nil {
		return m.PtBaseAddr
	}
	return 0
}

func (m *LifRdmaData) GetKtBaseAddr() uint64 {
	if m != nil {
		return m.KtBaseAddr
	}
	return 0
}

func (m *LifRdmaData) GetAtBaseAddr() uint64 {
	if m != nil {
		return m.AtBaseAddr
	}
	return 0
}

// LifResponse response to one LifSpec
type LifResponse struct {
	ApiStatus     ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=intf.ApiStatus" json:"api_status,omitempty"`
	Status        *LifStatus   `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Qstate        *LifQState   `protobuf:"bytes,3,opt,name=qstate" json:"qstate,omitempty"`
	RdmaDataValid bool         `protobuf:"varint,4,opt,name=rdma_data_valid,json=rdmaDataValid" json:"rdma_data_valid,omitempty"`
	RdmaData      *LifRdmaData `protobuf:"bytes,5,opt,name=rdma_data,json=rdmaData" json:"rdma_data,omitempty"`
}

func (m *LifResponse) Reset()                    { *m = LifResponse{} }
func (m *LifResponse) String() string            { return proto.CompactTextString(m) }
func (*LifResponse) ProtoMessage()               {}
func (*LifResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *LifResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *LifResponse) GetStatus() *LifStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *LifResponse) GetQstate() *LifQState {
	if m != nil {
		return m.Qstate
	}
	return nil
}

func (m *LifResponse) GetRdmaDataValid() bool {
	if m != nil {
		return m.RdmaDataValid
	}
	return false
}

func (m *LifResponse) GetRdmaData() *LifRdmaData {
	if m != nil {
		return m.RdmaData
	}
	return nil
}

// LifResponseMsg is response to LifRequestMsg
type LifResponseMsg struct {
	Response *LifResponse `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *LifResponseMsg) Reset()                    { *m = LifResponseMsg{} }
func (m *LifResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LifResponseMsg) ProtoMessage()               {}
func (*LifResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *LifResponseMsg) GetResponse() *LifResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type QStateGetReq struct {
	LifHandle uint64 `protobuf:"varint,1,opt,name=lif_handle,json=lifHandle" json:"lif_handle,omitempty"`
	TypeNum   uint32 `protobuf:"varint,2,opt,name=type_num,json=typeNum" json:"type_num,omitempty"`
	Qid       uint32 `protobuf:"varint,3,opt,name=qid" json:"qid,omitempty"`
	// Amount of data to return in the corresponding
	// QStateGetResp::queue_state buffer. By default
	// All the data is returned (based on the size of this
	// queue type_num). But can be limited by the caller.
	// Setting this value to be greater than the actual
	// size has no effect.
	RetDataSize uint32 `protobuf:"varint,4,opt,name=ret_data_size,json=retDataSize" json:"ret_data_size,omitempty"`
}

func (m *QStateGetReq) Reset()                    { *m = QStateGetReq{} }
func (m *QStateGetReq) String() string            { return proto.CompactTextString(m) }
func (*QStateGetReq) ProtoMessage()               {}
func (*QStateGetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *QStateGetReq) GetLifHandle() uint64 {
	if m != nil {
		return m.LifHandle
	}
	return 0
}

func (m *QStateGetReq) GetTypeNum() uint32 {
	if m != nil {
		return m.TypeNum
	}
	return 0
}

func (m *QStateGetReq) GetQid() uint32 {
	if m != nil {
		return m.Qid
	}
	return 0
}

func (m *QStateGetReq) GetRetDataSize() uint32 {
	if m != nil {
		return m.RetDataSize
	}
	return 0
}

type QStateGetResp struct {
	// TODO: what is user to make out of this error_code if it is non-zero ??
	//       why this is not using  ApiStatus ???
	ErrorCode  int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	QAddr      uint64 `protobuf:"varint,2,opt,name=q_addr,json=qAddr" json:"q_addr,omitempty"`
	QueueState []byte `protobuf:"bytes,3,opt,name=queue_state,json=queueState,proto3" json:"queue_state,omitempty"`
}

func (m *QStateGetResp) Reset()                    { *m = QStateGetResp{} }
func (m *QStateGetResp) String() string            { return proto.CompactTextString(m) }
func (*QStateGetResp) ProtoMessage()               {}
func (*QStateGetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *QStateGetResp) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *QStateGetResp) GetQAddr() uint64 {
	if m != nil {
		return m.QAddr
	}
	return 0
}

func (m *QStateGetResp) GetQueueState() []byte {
	if m != nil {
		return m.QueueState
	}
	return nil
}

type GetQStateResponseMsg struct {
	Resps *QStateGetResp `protobuf:"bytes,1,opt,name=resps" json:"resps,omitempty"`
}

func (m *GetQStateResponseMsg) Reset()                    { *m = GetQStateResponseMsg{} }
func (m *GetQStateResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*GetQStateResponseMsg) ProtoMessage()               {}
func (*GetQStateResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetQStateResponseMsg) GetResps() *QStateGetResp {
	if m != nil {
		return m.Resps
	}
	return nil
}

// A P4ProgLabel is used to get the PC offset for
// Queue state.
type P4ProgLabel struct {
	Handle   string `protobuf:"bytes,1,opt,name=handle" json:"handle,omitempty"`
	ProgName string `protobuf:"bytes,2,opt,name=prog_name,json=progName" json:"prog_name,omitempty"`
	Label    string `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
}

func (m *P4ProgLabel) Reset()                    { *m = P4ProgLabel{} }
func (m *P4ProgLabel) String() string            { return proto.CompactTextString(m) }
func (*P4ProgLabel) ProtoMessage()               {}
func (*P4ProgLabel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *P4ProgLabel) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

func (m *P4ProgLabel) GetProgName() string {
	if m != nil {
		return m.ProgName
	}
	return ""
}

func (m *P4ProgLabel) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type QStateSetReq struct {
	LifHandle uint64 `protobuf:"varint,1,opt,name=lif_handle,json=lifHandle" json:"lif_handle,omitempty"`
	TypeNum   uint32 `protobuf:"varint,2,opt,name=type_num,json=typeNum" json:"type_num,omitempty"`
	Qid       uint32 `protobuf:"varint,3,opt,name=qid" json:"qid,omitempty"`
	// If present, PC Offset is filled by the implementation
	// based on the label.
	Label *P4ProgLabel `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
	// Actual queue state to be written. Can be less than the
	// actual qstate size. But has to be greater than 0.
	QueueState []byte `protobuf:"bytes,5,opt,name=queue_state,json=queueState,proto3" json:"queue_state,omitempty"`
}

func (m *QStateSetReq) Reset()                    { *m = QStateSetReq{} }
func (m *QStateSetReq) String() string            { return proto.CompactTextString(m) }
func (*QStateSetReq) ProtoMessage()               {}
func (*QStateSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *QStateSetReq) GetLifHandle() uint64 {
	if m != nil {
		return m.LifHandle
	}
	return 0
}

func (m *QStateSetReq) GetTypeNum() uint32 {
	if m != nil {
		return m.TypeNum
	}
	return 0
}

func (m *QStateSetReq) GetQid() uint32 {
	if m != nil {
		return m.Qid
	}
	return 0
}

func (m *QStateSetReq) GetLabel() *P4ProgLabel {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *QStateSetReq) GetQueueState() []byte {
	if m != nil {
		return m.QueueState
	}
	return nil
}

type SetQStateRequestMsg struct {
	Reqs *QStateSetReq `protobuf:"bytes,1,opt,name=reqs" json:"reqs,omitempty"`
}

func (m *SetQStateRequestMsg) Reset()                    { *m = SetQStateRequestMsg{} }
func (m *SetQStateRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SetQStateRequestMsg) ProtoMessage()               {}
func (*SetQStateRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *SetQStateRequestMsg) GetReqs() *QStateSetReq {
	if m != nil {
		return m.Reqs
	}
	return nil
}

type QStateSetResp struct {
	// TODO: what is user to make out of this error_code if it is non-zero ??
	//       why this is not using  ApiStatus ??
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *QStateSetResp) Reset()                    { *m = QStateSetResp{} }
func (m *QStateSetResp) String() string            { return proto.CompactTextString(m) }
func (*QStateSetResp) ProtoMessage()               {}
func (*QStateSetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *QStateSetResp) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type SetQStateResponseMsg struct {
	Resps *QStateSetResp `protobuf:"bytes,1,opt,name=resps" json:"resps,omitempty"`
}

func (m *SetQStateResponseMsg) Reset()                    { *m = SetQStateResponseMsg{} }
func (m *SetQStateResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SetQStateResponseMsg) ProtoMessage()               {}
func (*SetQStateResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *SetQStateResponseMsg) GetResps() *QStateSetResp {
	if m != nil {
		return m.Resps
	}
	return nil
}

// LifDeleteRequest  is used to delete a LIF object
type LifDeleteRequest struct {
	// key_or_handle is LIF's unique identifier for deletion
	KeyOrHandle *LifKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *LifDeleteRequest) Reset()                    { *m = LifDeleteRequest{} }
func (m *LifDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteRequest) ProtoMessage()               {}
func (*LifDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *LifDeleteRequest) GetKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// LifDeleteRequestMsg is used to delete a batch of LIFs
type LifDeleteRequestMsg struct {
	Request *LifDeleteRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *LifDeleteRequestMsg) Reset()                    { *m = LifDeleteRequestMsg{} }
func (m *LifDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteRequestMsg) ProtoMessage()               {}
func (*LifDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *LifDeleteRequestMsg) GetRequest() *LifDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// LifDeleteResponse is response to LIF delete request
type LifDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=intf.ApiStatus" json:"api_status,omitempty"`
}

func (m *LifDeleteResponse) Reset()                    { *m = LifDeleteResponse{} }
func (m *LifDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteResponse) ProtoMessage()               {}
func (*LifDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *LifDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// LifDeleteResponseMsg is batched response to LifDeleteRequestMsg
type LifDeleteResponseMsg struct {
	Response *LifDeleteResponse `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *LifDeleteResponseMsg) Reset()                    { *m = LifDeleteResponseMsg{} }
func (m *LifDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteResponseMsg) ProtoMessage()               {}
func (*LifDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *LifDeleteResponseMsg) GetResponse() *LifDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// check which stats will be done by p4 and which will be done by p4+
type LifTxStats struct {
	FramesOk          uint64 `protobuf:"varint,1,opt,name=frames_ok,json=framesOk" json:"frames_ok,omitempty"`
	UnicastFramesOk   uint64 `protobuf:"varint,2,opt,name=unicast_frames_ok,json=unicastFramesOk" json:"unicast_frames_ok,omitempty"`
	MulticastBramesOk uint64 `protobuf:"varint,3,opt,name=multicast_brames_ok,json=multicastBramesOk" json:"multicast_brames_ok,omitempty"`
	BroadcastBramesOk uint64 `protobuf:"varint,4,opt,name=broadcast_brames_ok,json=broadcastBramesOk" json:"broadcast_brames_ok,omitempty"`
	BytesOk           uint64 `protobuf:"varint,5,opt,name=bytes_ok,json=bytesOk" json:"bytes_ok,omitempty"`
	UnicastBytesOk    uint64 `protobuf:"varint,6,opt,name=unicast_bytes_ok,json=unicastBytesOk" json:"unicast_bytes_ok,omitempty"`
	MulticastBytesOk  uint64 `protobuf:"varint,7,opt,name=multicast_bytes_ok,json=multicastBytesOk" json:"multicast_bytes_ok,omitempty"`
	BroadcastBytesOk  uint64 `protobuf:"varint,8,opt,name=broadcast_bytes_ok,json=broadcastBytesOk" json:"broadcast_bytes_ok,omitempty"`
	Tso               uint64 `protobuf:"varint,9,opt,name=tso" json:"tso,omitempty"`
}

func (m *LifTxStats) Reset()                    { *m = LifTxStats{} }
func (m *LifTxStats) String() string            { return proto.CompactTextString(m) }
func (*LifTxStats) ProtoMessage()               {}
func (*LifTxStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *LifTxStats) GetFramesOk() uint64 {
	if m != nil {
		return m.FramesOk
	}
	return 0
}

func (m *LifTxStats) GetUnicastFramesOk() uint64 {
	if m != nil {
		return m.UnicastFramesOk
	}
	return 0
}

func (m *LifTxStats) GetMulticastBramesOk() uint64 {
	if m != nil {
		return m.MulticastBramesOk
	}
	return 0
}

func (m *LifTxStats) GetBroadcastBramesOk() uint64 {
	if m != nil {
		return m.BroadcastBramesOk
	}
	return 0
}

func (m *LifTxStats) GetBytesOk() uint64 {
	if m != nil {
		return m.BytesOk
	}
	return 0
}

func (m *LifTxStats) GetUnicastBytesOk() uint64 {
	if m != nil {
		return m.UnicastBytesOk
	}
	return 0
}

func (m *LifTxStats) GetMulticastBytesOk() uint64 {
	if m != nil {
		return m.MulticastBytesOk
	}
	return 0
}

func (m *LifTxStats) GetBroadcastBytesOk() uint64 {
	if m != nil {
		return m.BroadcastBytesOk
	}
	return 0
}

func (m *LifTxStats) GetTso() uint64 {
	if m != nil {
		return m.Tso
	}
	return 0
}

type LifRxStats struct {
	FramesTotal       uint64 `protobuf:"varint,1,opt,name=frames_total,json=framesTotal" json:"frames_total,omitempty"`
	FramesOk          uint64 `protobuf:"varint,2,opt,name=frames_ok,json=framesOk" json:"frames_ok,omitempty"`
	UnicastFramesOk   uint64 `protobuf:"varint,3,opt,name=unicast_frames_ok,json=unicastFramesOk" json:"unicast_frames_ok,omitempty"`
	MulticastFramesOk uint64 `protobuf:"varint,4,opt,name=multicast_frames_ok,json=multicastFramesOk" json:"multicast_frames_ok,omitempty"`
	BroadcastFramesOk uint64 `protobuf:"varint,5,opt,name=broadcast_frames_ok,json=broadcastFramesOk" json:"broadcast_frames_ok,omitempty"`
	BytesOk           uint64 `protobuf:"varint,6,opt,name=bytes_ok,json=bytesOk" json:"bytes_ok,omitempty"`
	UnicastBytesOk    uint64 `protobuf:"varint,7,opt,name=unicast_bytes_ok,json=unicastBytesOk" json:"unicast_bytes_ok,omitempty"`
	MulticastBytesOk  uint64 `protobuf:"varint,8,opt,name=multicast_bytes_ok,json=multicastBytesOk" json:"multicast_bytes_ok,omitempty"`
	BroadcastBytesOk  uint64 `protobuf:"varint,9,opt,name=broadcast_bytes_ok,json=broadcastBytesOk" json:"broadcast_bytes_ok,omitempty"`
	Drops             uint64 `protobuf:"varint,10,opt,name=drops" json:"drops,omitempty"`
	NoBufs            uint64 `protobuf:"varint,11,opt,name=no_bufs,json=noBufs" json:"no_bufs,omitempty"`
	Errors            uint64 `protobuf:"varint,12,opt,name=errors" json:"errors,omitempty"`
	Rss               uint64 `protobuf:"varint,13,opt,name=rss" json:"rss,omitempty"`
	CrcErrors         uint64 `protobuf:"varint,14,opt,name=crc_errors,json=crcErrors" json:"crc_errors,omitempty"`
	Frames_64         uint64 `protobuf:"varint,15,opt,name=frames_64,json=frames64" json:"frames_64,omitempty"`
	Frames_127        uint64 `protobuf:"varint,16,opt,name=frames_127,json=frames127" json:"frames_127,omitempty"`
	Frames_255        uint64 `protobuf:"varint,17,opt,name=frames_255,json=frames255" json:"frames_255,omitempty"`
	Frames_511        uint64 `protobuf:"varint,18,opt,name=frames_511,json=frames511" json:"frames_511,omitempty"`
	Frames_1024       uint64 `protobuf:"varint,19,opt,name=frames_1024,json=frames1024" json:"frames_1024,omitempty"`
	Frames_1518       uint64 `protobuf:"varint,20,opt,name=frames_1518,json=frames1518" json:"frames_1518,omitempty"`
	FramesToMax       uint64 `protobuf:"varint,21,opt,name=frames_to_max,json=framesToMax" json:"frames_to_max,omitempty"`
}

func (m *LifRxStats) Reset()                    { *m = LifRxStats{} }
func (m *LifRxStats) String() string            { return proto.CompactTextString(m) }
func (*LifRxStats) ProtoMessage()               {}
func (*LifRxStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *LifRxStats) GetFramesTotal() uint64 {
	if m != nil {
		return m.FramesTotal
	}
	return 0
}

func (m *LifRxStats) GetFramesOk() uint64 {
	if m != nil {
		return m.FramesOk
	}
	return 0
}

func (m *LifRxStats) GetUnicastFramesOk() uint64 {
	if m != nil {
		return m.UnicastFramesOk
	}
	return 0
}

func (m *LifRxStats) GetMulticastFramesOk() uint64 {
	if m != nil {
		return m.MulticastFramesOk
	}
	return 0
}

func (m *LifRxStats) GetBroadcastFramesOk() uint64 {
	if m != nil {
		return m.BroadcastFramesOk
	}
	return 0
}

func (m *LifRxStats) GetBytesOk() uint64 {
	if m != nil {
		return m.BytesOk
	}
	return 0
}

func (m *LifRxStats) GetUnicastBytesOk() uint64 {
	if m != nil {
		return m.UnicastBytesOk
	}
	return 0
}

func (m *LifRxStats) GetMulticastBytesOk() uint64 {
	if m != nil {
		return m.MulticastBytesOk
	}
	return 0
}

func (m *LifRxStats) GetBroadcastBytesOk() uint64 {
	if m != nil {
		return m.BroadcastBytesOk
	}
	return 0
}

func (m *LifRxStats) GetDrops() uint64 {
	if m != nil {
		return m.Drops
	}
	return 0
}

func (m *LifRxStats) GetNoBufs() uint64 {
	if m != nil {
		return m.NoBufs
	}
	return 0
}

func (m *LifRxStats) GetErrors() uint64 {
	if m != nil {
		return m.Errors
	}
	return 0
}

func (m *LifRxStats) GetRss() uint64 {
	if m != nil {
		return m.Rss
	}
	return 0
}

func (m *LifRxStats) GetCrcErrors() uint64 {
	if m != nil {
		return m.CrcErrors
	}
	return 0
}

func (m *LifRxStats) GetFrames_64() uint64 {
	if m != nil {
		return m.Frames_64
	}
	return 0
}

func (m *LifRxStats) GetFrames_127() uint64 {
	if m != nil {
		return m.Frames_127
	}
	return 0
}

func (m *LifRxStats) GetFrames_255() uint64 {
	if m != nil {
		return m.Frames_255
	}
	return 0
}

func (m *LifRxStats) GetFrames_511() uint64 {
	if m != nil {
		return m.Frames_511
	}
	return 0
}

func (m *LifRxStats) GetFrames_1024() uint64 {
	if m != nil {
		return m.Frames_1024
	}
	return 0
}

func (m *LifRxStats) GetFrames_1518() uint64 {
	if m != nil {
		return m.Frames_1518
	}
	return 0
}

func (m *LifRxStats) GetFramesToMax() uint64 {
	if m != nil {
		return m.FramesToMax
	}
	return 0
}

// LifRssConfig is used to set Lif's RSS configuration
type LifRssSpec struct {
	LifType uint32 `protobuf:"varint,1,opt,name=lif_type,json=lifType" json:"lif_type,omitempty"`
	Key     []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Indir   []byte `protobuf:"bytes,3,opt,name=indir,proto3" json:"indir,omitempty"`
}

func (m *LifRssSpec) Reset()                    { *m = LifRssSpec{} }
func (m *LifRssSpec) String() string            { return proto.CompactTextString(m) }
func (*LifRssSpec) ProtoMessage()               {}
func (*LifRssSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *LifRssSpec) GetLifType() uint32 {
	if m != nil {
		return m.LifType
	}
	return 0
}

func (m *LifRssSpec) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *LifRssSpec) GetIndir() []byte {
	if m != nil {
		return m.Indir
	}
	return nil
}

type EnicInfo struct {
	L2SegmentKeyHandle *L2SegmentKeyHandle `protobuf:"bytes,1,opt,name=l2segment_key_handle,json=l2segmentKeyHandle" json:"l2segment_key_handle,omitempty"`
	MacAddress         uint64              `protobuf:"fixed64,2,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	EncapVlanId        uint32              `protobuf:"varint,3,opt,name=encap_vlan_id,json=encapVlanId" json:"encap_vlan_id,omitempty"`
}

func (m *EnicInfo) Reset()                    { *m = EnicInfo{} }
func (m *EnicInfo) String() string            { return proto.CompactTextString(m) }
func (*EnicInfo) ProtoMessage()               {}
func (*EnicInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *EnicInfo) GetL2SegmentKeyHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.L2SegmentKeyHandle
	}
	return nil
}

func (m *EnicInfo) GetMacAddress() uint64 {
	if m != nil {
		return m.MacAddress
	}
	return 0
}

func (m *EnicInfo) GetEncapVlanId() uint32 {
	if m != nil {
		return m.EncapVlanId
	}
	return 0
}

type EnicClassicInfo struct {
	L2SegmentKeyHandle *L2SegmentKeyHandle `protobuf:"bytes,1,opt,name=l2segment_key_handle,json=l2segmentKeyHandle" json:"l2segment_key_handle,omitempty"`
	NativeL2SegmentId  uint64              `protobuf:"varint,2,opt,name=native_l2segment_id,json=nativeL2segmentId" json:"native_l2segment_id,omitempty"`
}

func (m *EnicClassicInfo) Reset()                    { *m = EnicClassicInfo{} }
func (m *EnicClassicInfo) String() string            { return proto.CompactTextString(m) }
func (*EnicClassicInfo) ProtoMessage()               {}
func (*EnicClassicInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *EnicClassicInfo) GetL2SegmentKeyHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.L2SegmentKeyHandle
	}
	return nil
}

func (m *EnicClassicInfo) GetNativeL2SegmentId() uint64 {
	if m != nil {
		return m.NativeL2SegmentId
	}
	return 0
}

// mandatory attributes expected if interface type is IF_TYPE_ENIC
type IfEnicInfo struct {
	EnicType                IntfEnicType        `protobuf:"varint,1,opt,name=enic_type,json=enicType,enum=intf.IntfEnicType" json:"enic_type,omitempty"`
	LifKeyOrHandle          *LifKeyHandle       `protobuf:"bytes,2,opt,name=lif_key_or_handle,json=lifKeyOrHandle" json:"lif_key_or_handle,omitempty"`
	PinnedUplinkIfKeyHandle *InterfaceKeyHandle `protobuf:"bytes,3,opt,name=pinned_uplink_if_key_handle,json=pinnedUplinkIfKeyHandle" json:"pinned_uplink_if_key_handle,omitempty"`
	EnicInfo                *EnicInfo           `protobuf:"bytes,4,opt,name=enic_info,json=enicInfo" json:"enic_info,omitempty"`
	ClassicEnicInfo         *EnicClassicInfo    `protobuf:"bytes,5,opt,name=classic_enic_info,json=classicEnicInfo" json:"classic_enic_info,omitempty"`
}

func (m *IfEnicInfo) Reset()                    { *m = IfEnicInfo{} }
func (m *IfEnicInfo) String() string            { return proto.CompactTextString(m) }
func (*IfEnicInfo) ProtoMessage()               {}
func (*IfEnicInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *IfEnicInfo) GetEnicType() IntfEnicType {
	if m != nil {
		return m.EnicType
	}
	return IntfEnicType_IF_ENIC_TYPE_NONE
}

func (m *IfEnicInfo) GetLifKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.LifKeyOrHandle
	}
	return nil
}

func (m *IfEnicInfo) GetPinnedUplinkIfKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.PinnedUplinkIfKeyHandle
	}
	return nil
}

func (m *IfEnicInfo) GetEnicInfo() *EnicInfo {
	if m != nil {
		return m.EnicInfo
	}
	return nil
}

func (m *IfEnicInfo) GetClassicEnicInfo() *EnicClassicInfo {
	if m != nil {
		return m.ClassicEnicInfo
	}
	return nil
}

// mandatory attributes expected if interface type is IF_TYPE_UPLINK
type IfUplinkInfo struct {
	PortNum           uint32 `protobuf:"varint,1,opt,name=port_num,json=portNum" json:"port_num,omitempty"`
	NativeL2SegmentId uint64 `protobuf:"varint,2,opt,name=native_l2segment_id,json=nativeL2segmentId" json:"native_l2segment_id,omitempty"`
	IsOobManagement   bool   `protobuf:"varint,3,opt,name=is_oob_management,json=isOobManagement" json:"is_oob_management,omitempty"`
}

func (m *IfUplinkInfo) Reset()                    { *m = IfUplinkInfo{} }
func (m *IfUplinkInfo) String() string            { return proto.CompactTextString(m) }
func (*IfUplinkInfo) ProtoMessage()               {}
func (*IfUplinkInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *IfUplinkInfo) GetPortNum() uint32 {
	if m != nil {
		return m.PortNum
	}
	return 0
}

func (m *IfUplinkInfo) GetNativeL2SegmentId() uint64 {
	if m != nil {
		return m.NativeL2SegmentId
	}
	return 0
}

func (m *IfUplinkInfo) GetIsOobManagement() bool {
	if m != nil {
		return m.IsOobManagement
	}
	return false
}

type IfUplinkPCInfo struct {
	// mandatory attributes expected if interface type is IF_TYPE_UPLINK_PC
	NativeL2SegmentId uint64              `protobuf:"varint,1,opt,name=native_l2segment_id,json=nativeL2segmentId" json:"native_l2segment_id,omitempty"`
	MemberIfKeyHandle *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=member_if_key_handle,json=memberIfKeyHandle" json:"member_if_key_handle,omitempty"`
}

func (m *IfUplinkPCInfo) Reset()                    { *m = IfUplinkPCInfo{} }
func (m *IfUplinkPCInfo) String() string            { return proto.CompactTextString(m) }
func (*IfUplinkPCInfo) ProtoMessage()               {}
func (*IfUplinkPCInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *IfUplinkPCInfo) GetNativeL2SegmentId() uint64 {
	if m != nil {
		return m.NativeL2SegmentId
	}
	return 0
}

func (m *IfUplinkPCInfo) GetMemberIfKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.MemberIfKeyHandle
	}
	return nil
}

type IfTunnelVxlanInfo struct {
	LocalTep  *IPAddress `protobuf:"bytes,1,opt,name=local_tep,json=localTep" json:"local_tep,omitempty"`
	RemoteTep *IPAddress `protobuf:"bytes,2,opt,name=remote_tep,json=remoteTep" json:"remote_tep,omitempty"`
}

func (m *IfTunnelVxlanInfo) Reset()                    { *m = IfTunnelVxlanInfo{} }
func (m *IfTunnelVxlanInfo) String() string            { return proto.CompactTextString(m) }
func (*IfTunnelVxlanInfo) ProtoMessage()               {}
func (*IfTunnelVxlanInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *IfTunnelVxlanInfo) GetLocalTep() *IPAddress {
	if m != nil {
		return m.LocalTep
	}
	return nil
}

func (m *IfTunnelVxlanInfo) GetRemoteTep() *IPAddress {
	if m != nil {
		return m.RemoteTep
	}
	return nil
}

type IfTunnelGREInfo struct {
	Source      *IPAddress `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Destination *IPAddress `protobuf:"bytes,2,opt,name=destination" json:"destination,omitempty"`
	Mtu         uint32     `protobuf:"varint,3,opt,name=mtu" json:"mtu,omitempty"`
	Ttl         uint32     `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *IfTunnelGREInfo) Reset()                    { *m = IfTunnelGREInfo{} }
func (m *IfTunnelGREInfo) String() string            { return proto.CompactTextString(m) }
func (*IfTunnelGREInfo) ProtoMessage()               {}
func (*IfTunnelGREInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *IfTunnelGREInfo) GetSource() *IPAddress {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *IfTunnelGREInfo) GetDestination() *IPAddress {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *IfTunnelGREInfo) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *IfTunnelGREInfo) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type IfTunnelInfo struct {
	EncapType    IntfTunnelEncapType `protobuf:"varint,1,opt,name=encap_type,json=encapType,enum=intf.IntfTunnelEncapType" json:"encap_type,omitempty"`
	VxlanInfo    *IfTunnelVxlanInfo  `protobuf:"bytes,2,opt,name=vxlan_info,json=vxlanInfo" json:"vxlan_info,omitempty"`
	GreInfo      *IfTunnelGREInfo    `protobuf:"bytes,3,opt,name=gre_info,json=greInfo" json:"gre_info,omitempty"`
	VrfKeyHandle *VrfKeyHandle       `protobuf:"bytes,4,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
}

func (m *IfTunnelInfo) Reset()                    { *m = IfTunnelInfo{} }
func (m *IfTunnelInfo) String() string            { return proto.CompactTextString(m) }
func (*IfTunnelInfo) ProtoMessage()               {}
func (*IfTunnelInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *IfTunnelInfo) GetEncapType() IntfTunnelEncapType {
	if m != nil {
		return m.EncapType
	}
	return IntfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_NONE
}

func (m *IfTunnelInfo) GetVxlanInfo() *IfTunnelVxlanInfo {
	if m != nil {
		return m.VxlanInfo
	}
	return nil
}

func (m *IfTunnelInfo) GetGreInfo() *IfTunnelGREInfo {
	if m != nil {
		return m.GreInfo
	}
	return nil
}

func (m *IfTunnelInfo) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

// attributes for CPU If
type IfCPUInfo struct {
	LifKeyOrHandle *LifKeyHandle `protobuf:"bytes,2,opt,name=lif_key_or_handle,json=lifKeyOrHandle" json:"lif_key_or_handle,omitempty"`
}

func (m *IfCPUInfo) Reset()                    { *m = IfCPUInfo{} }
func (m *IfCPUInfo) String() string            { return proto.CompactTextString(m) }
func (*IfCPUInfo) ProtoMessage()               {}
func (*IfCPUInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *IfCPUInfo) GetLifKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.LifKeyOrHandle
	}
	return nil
}

// attributes for App Redirect If
type IfAppRedirInfo struct {
	LifKeyOrHandle *LifKeyHandle `protobuf:"bytes,2,opt,name=lif_key_or_handle,json=lifKeyOrHandle" json:"lif_key_or_handle,omitempty"`
}

func (m *IfAppRedirInfo) Reset()                    { *m = IfAppRedirInfo{} }
func (m *IfAppRedirInfo) String() string            { return proto.CompactTextString(m) }
func (*IfAppRedirInfo) ProtoMessage()               {}
func (*IfAppRedirInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *IfAppRedirInfo) GetLifKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.LifKeyOrHandle
	}
	return nil
}

// InterfaceSpec is used to add or update of an interface
type InterfaceSpec struct {
	Meta           *delphi.ObjectMeta  `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle    *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	IfType         IntfType            `protobuf:"varint,3,opt,name=if_type,json=ifType,enum=intf.IntfType" json:"if_type,omitempty"`
	AdminStatus    IntfStatus          `protobuf:"varint,4,opt,name=admin_status,json=adminStatus,enum=intf.IntfStatus" json:"admin_status,omitempty"`
	IfEnicInfo     *IfEnicInfo         `protobuf:"bytes,5,opt,name=if_enic_info,json=ifEnicInfo" json:"if_enic_info,omitempty"`
	IfUplinkInfo   *IfUplinkInfo       `protobuf:"bytes,6,opt,name=if_uplink_info,json=ifUplinkInfo" json:"if_uplink_info,omitempty"`
	IfUplinkPcInfo *IfUplinkPCInfo     `protobuf:"bytes,7,opt,name=if_uplink_pc_info,json=ifUplinkPcInfo" json:"if_uplink_pc_info,omitempty"`
	IfTunnelInfo   *IfTunnelInfo       `protobuf:"bytes,8,opt,name=if_tunnel_info,json=ifTunnelInfo" json:"if_tunnel_info,omitempty"`
	IfCpuInfo      *IfCPUInfo          `protobuf:"bytes,9,opt,name=if_cpu_info,json=ifCpuInfo" json:"if_cpu_info,omitempty"`
	IfAppRedirInfo *IfAppRedirInfo     `protobuf:"bytes,10,opt,name=if_app_redir_info,json=ifAppRedirInfo" json:"if_app_redir_info,omitempty"`
}

func (m *InterfaceSpec) GetDelphiMessage() proto.Message {
	return m
}

func (m *InterfaceSpec) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *InterfaceSpec) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *InterfaceSpec) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *InterfaceSpec) GetDelphiKind() string {
	return "InterfaceSpec"
}

func (m *InterfaceSpec) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *InterfaceSpec) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*InterfaceSpec)
	return obj
}

func InterfaceSpecMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("InterfaceSpec", mode)
}

func InterfaceSpecMountKey(client clientApi.Client, key *InterfaceKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("InterfaceSpec", key.String(), mode)
}

func GetInterfaceSpec(client clientApi.Client, key *InterfaceKeyHandle) *InterfaceSpec {
	o := client.GetObject("InterfaceSpec", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*InterfaceSpec)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func InterfaceSpecFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg InterfaceSpec
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func InterfaceSpecWatch(client clientApi.Client, reactor InterfaceSpecReactor) {
	client.WatchKind("InterfaceSpec", reactor)
}
func InterfaceSpecList(client clientApi.Client) []*InterfaceSpec {
	bobjs := client.List("InterfaceSpec")
	objs := make([]*InterfaceSpec, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*InterfaceSpec)
		objs = append(objs, obj)
	}
	return objs
}
func (m *InterfaceSpec) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(InterfaceSpecReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnInterfaceSpecCreate(m)
			} else {
				oldObj, ok := old.(*InterfaceSpec)
				if ok == false {
					panic("Not an InterfaceSpec object")
				}
				rctr.OnInterfaceSpecUpdate(oldObj, m)
			}
		} else {
			rctr.OnInterfaceSpecDelete(m)
		}
	}
}

type InterfaceSpecReactor interface {
	OnInterfaceSpecCreate(obj *InterfaceSpec)
	OnInterfaceSpecUpdate(old *InterfaceSpec, obj *InterfaceSpec)
	OnInterfaceSpecDelete(obj *InterfaceSpec)
}

func (m *InterfaceSpec) Reset()                    { *m = InterfaceSpec{} }
func (m *InterfaceSpec) String() string            { return proto.CompactTextString(m) }
func (*InterfaceSpec) ProtoMessage()               {}
func (*InterfaceSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *InterfaceSpec) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *InterfaceSpec) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *InterfaceSpec) GetIfType() IntfType {
	if m != nil {
		return m.IfType
	}
	return IntfType_IF_TYPE_NONE
}

func (m *InterfaceSpec) GetAdminStatus() IntfStatus {
	if m != nil {
		return m.AdminStatus
	}
	return IntfStatus_IF_STATUS_NONE
}

func (m *InterfaceSpec) GetIfEnicInfo() *IfEnicInfo {
	if m != nil {
		return m.IfEnicInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfUplinkInfo() *IfUplinkInfo {
	if m != nil {
		return m.IfUplinkInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfUplinkPcInfo() *IfUplinkPCInfo {
	if m != nil {
		return m.IfUplinkPcInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfTunnelInfo() *IfTunnelInfo {
	if m != nil {
		return m.IfTunnelInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfCpuInfo() *IfCPUInfo {
	if m != nil {
		return m.IfCpuInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfAppRedirInfo() *IfAppRedirInfo {
	if m != nil {
		return m.IfAppRedirInfo
	}
	return nil
}

// InterfaceRequestMsg is batched request message that is used to do
// create/update of interface(s)
type InterfaceRequestMsg struct {
	Request *InterfaceSpec `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *InterfaceRequestMsg) Reset()                    { *m = InterfaceRequestMsg{} }
func (m *InterfaceRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceRequestMsg) ProtoMessage()               {}
func (*InterfaceRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *InterfaceRequestMsg) GetRequest() *InterfaceSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// Uplink/Uplink PC's response
type UplinkResponseInfo struct {
	UplinkLportId uint32 `protobuf:"varint,1,opt,name=uplink_lport_id,json=uplinkLportId" json:"uplink_lport_id,omitempty"`
	HwLifId       uint32 `protobuf:"varint,2,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
	UplinkIdx     uint32 `protobuf:"varint,3,opt,name=uplink_idx,json=uplinkIdx" json:"uplink_idx,omitempty"`
	NumL2Segs     uint32 `protobuf:"varint,4,opt,name=num_l2segs,json=numL2segs" json:"num_l2segs,omitempty"`
	HwPortNum     uint32 `protobuf:"varint,5,opt,name=hw_port_num,json=hwPortNum" json:"hw_port_num,omitempty"`
}

func (m *UplinkResponseInfo) Reset()                    { *m = UplinkResponseInfo{} }
func (m *UplinkResponseInfo) String() string            { return proto.CompactTextString(m) }
func (*UplinkResponseInfo) ProtoMessage()               {}
func (*UplinkResponseInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *UplinkResponseInfo) GetUplinkLportId() uint32 {
	if m != nil {
		return m.UplinkLportId
	}
	return 0
}

func (m *UplinkResponseInfo) GetHwLifId() uint32 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *UplinkResponseInfo) GetUplinkIdx() uint32 {
	if m != nil {
		return m.UplinkIdx
	}
	return 0
}

func (m *UplinkResponseInfo) GetNumL2Segs() uint32 {
	if m != nil {
		return m.NumL2Segs
	}
	return 0
}

func (m *UplinkResponseInfo) GetHwPortNum() uint32 {
	if m != nil {
		return m.HwPortNum
	}
	return 0
}

// Enic <-> L2seg membership info
type EnicL2SegInfo struct {
	L2SegmentKeyOrHandle *L2SegmentKeyHandle `protobuf:"bytes,1,opt,name=l2segment_key_or_handle,json=l2segmentKeyOrHandle" json:"l2segment_key_or_handle,omitempty"`
	InpPropIdx           uint32              `protobuf:"varint,2,opt,name=inp_prop_idx,json=inpPropIdx" json:"inp_prop_idx,omitempty"`
}

func (m *EnicL2SegInfo) Reset()                    { *m = EnicL2SegInfo{} }
func (m *EnicL2SegInfo) String() string            { return proto.CompactTextString(m) }
func (*EnicL2SegInfo) ProtoMessage()               {}
func (*EnicL2SegInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *EnicL2SegInfo) GetL2SegmentKeyOrHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.L2SegmentKeyOrHandle
	}
	return nil
}

func (m *EnicL2SegInfo) GetInpPropIdx() uint32 {
	if m != nil {
		return m.InpPropIdx
	}
	return 0
}

type SmartEnicInfo struct {
	InpPropMacVlanIdxHost uint32 `protobuf:"varint,1,opt,name=inp_prop_mac_vlan_idx_host,json=inpPropMacVlanIdxHost" json:"inp_prop_mac_vlan_idx_host,omitempty"`
	InpPropMacVlanIdxNet  uint32 `protobuf:"varint,2,opt,name=inp_prop_mac_vlan_idx_net,json=inpPropMacVlanIdxNet" json:"inp_prop_mac_vlan_idx_net,omitempty"`
}

func (m *SmartEnicInfo) Reset()                    { *m = SmartEnicInfo{} }
func (m *SmartEnicInfo) String() string            { return proto.CompactTextString(m) }
func (*SmartEnicInfo) ProtoMessage()               {}
func (*SmartEnicInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *SmartEnicInfo) GetInpPropMacVlanIdxHost() uint32 {
	if m != nil {
		return m.InpPropMacVlanIdxHost
	}
	return 0
}

func (m *SmartEnicInfo) GetInpPropMacVlanIdxNet() uint32 {
	if m != nil {
		return m.InpPropMacVlanIdxNet
	}
	return 0
}

type ClassicEnicInfo struct {
	InpPropNatL2SegClassic uint32         `protobuf:"varint,1,opt,name=inp_prop_nat_l2seg_classic,json=inpPropNatL2segClassic" json:"inp_prop_nat_l2seg_classic,omitempty"`
	MembershipInfo         *EnicL2SegInfo `protobuf:"bytes,2,opt,name=membership_info,json=membershipInfo" json:"membership_info,omitempty"`
}

func (m *ClassicEnicInfo) Reset()                    { *m = ClassicEnicInfo{} }
func (m *ClassicEnicInfo) String() string            { return proto.CompactTextString(m) }
func (*ClassicEnicInfo) ProtoMessage()               {}
func (*ClassicEnicInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *ClassicEnicInfo) GetInpPropNatL2SegClassic() uint32 {
	if m != nil {
		return m.InpPropNatL2SegClassic
	}
	return 0
}

func (m *ClassicEnicInfo) GetMembershipInfo() *EnicL2SegInfo {
	if m != nil {
		return m.MembershipInfo
	}
	return nil
}

// Enic's response
type EnicResponseInfo struct {
	EnicLportId     uint32           `protobuf:"varint,1,opt,name=enic_lport_id,json=enicLportId" json:"enic_lport_id,omitempty"`
	UplinkIfHandle  uint32           `protobuf:"varint,2,opt,name=uplink_if_handle,json=uplinkIfHandle" json:"uplink_if_handle,omitempty"`
	SmartEnicInfo   *SmartEnicInfo   `protobuf:"bytes,3,opt,name=smart_enic_info,json=smartEnicInfo" json:"smart_enic_info,omitempty"`
	ClassicEnicInfo *ClassicEnicInfo `protobuf:"bytes,4,opt,name=classic_enic_info,json=classicEnicInfo" json:"classic_enic_info,omitempty"`
}

func (m *EnicResponseInfo) Reset()                    { *m = EnicResponseInfo{} }
func (m *EnicResponseInfo) String() string            { return proto.CompactTextString(m) }
func (*EnicResponseInfo) ProtoMessage()               {}
func (*EnicResponseInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *EnicResponseInfo) GetEnicLportId() uint32 {
	if m != nil {
		return m.EnicLportId
	}
	return 0
}

func (m *EnicResponseInfo) GetUplinkIfHandle() uint32 {
	if m != nil {
		return m.UplinkIfHandle
	}
	return 0
}

func (m *EnicResponseInfo) GetSmartEnicInfo() *SmartEnicInfo {
	if m != nil {
		return m.SmartEnicInfo
	}
	return nil
}

func (m *EnicResponseInfo) GetClassicEnicInfo() *ClassicEnicInfo {
	if m != nil {
		return m.ClassicEnicInfo
	}
	return nil
}

// CPU If's response
type CpuIfResponseInfo struct {
	CpuLportId uint32 `protobuf:"varint,1,opt,name=cpu_lport_id,json=cpuLportId" json:"cpu_lport_id,omitempty"`
}

func (m *CpuIfResponseInfo) Reset()                    { *m = CpuIfResponseInfo{} }
func (m *CpuIfResponseInfo) String() string            { return proto.CompactTextString(m) }
func (*CpuIfResponseInfo) ProtoMessage()               {}
func (*CpuIfResponseInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *CpuIfResponseInfo) GetCpuLportId() uint32 {
	if m != nil {
		return m.CpuLportId
	}
	return 0
}

// Tunnel If's response
type TunnelIfResponseInfo struct {
	InpMapNatIdx uint32 `protobuf:"varint,1,opt,name=inp_map_nat_idx,json=inpMapNatIdx" json:"inp_map_nat_idx,omitempty"`
	//  1. Inner IPv4
	//  2. Inner IPv6
	//  3. Inner MAC
	InpMapTnlIdx uint32 `protobuf:"varint,2,opt,name=inp_map_tnl_idx,json=inpMapTnlIdx" json:"inp_map_tnl_idx,omitempty"`
	//  1. Inner IPv4
	//  2. Inner IPv6
	//  3. Inner MAC
	TunnelRwIdx uint32 `protobuf:"varint,3,opt,name=tunnel_rw_idx,json=tunnelRwIdx" json:"tunnel_rw_idx,omitempty"`
}

func (m *TunnelIfResponseInfo) Reset()                    { *m = TunnelIfResponseInfo{} }
func (m *TunnelIfResponseInfo) String() string            { return proto.CompactTextString(m) }
func (*TunnelIfResponseInfo) ProtoMessage()               {}
func (*TunnelIfResponseInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *TunnelIfResponseInfo) GetInpMapNatIdx() uint32 {
	if m != nil {
		return m.InpMapNatIdx
	}
	return 0
}

func (m *TunnelIfResponseInfo) GetInpMapTnlIdx() uint32 {
	if m != nil {
		return m.InpMapTnlIdx
	}
	return 0
}

func (m *TunnelIfResponseInfo) GetTunnelRwIdx() uint32 {
	if m != nil {
		return m.TunnelRwIdx
	}
	return 0
}

// App redir if's response
type AppRedirIfInfo struct {
	LportId uint32 `protobuf:"varint,1,opt,name=LportId" json:"LportId,omitempty"`
}

func (m *AppRedirIfInfo) Reset()                    { *m = AppRedirIfInfo{} }
func (m *AppRedirIfInfo) String() string            { return proto.CompactTextString(m) }
func (*AppRedirIfInfo) ProtoMessage()               {}
func (*AppRedirIfInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *AppRedirIfInfo) GetLportId() uint32 {
	if m != nil {
		return m.LportId
	}
	return 0
}

// InterfaceStatus represents the current status of the interface
type InterfaceStatus struct {
	Meta         *delphi.ObjectMeta    `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle  *InterfaceKeyHandle   `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	IfStatus     IntfStatus            `protobuf:"varint,3,opt,name=if_status,json=ifStatus,enum=intf.IntfStatus" json:"if_status,omitempty"`
	IfHandle     uint64                `protobuf:"fixed64,4,opt,name=if_handle,json=ifHandle" json:"if_handle,omitempty"`
	UplinkInfo   *UplinkResponseInfo   `protobuf:"bytes,5,opt,name=uplink_info,json=uplinkInfo" json:"uplink_info,omitempty"`
	EnicInfo     *EnicResponseInfo     `protobuf:"bytes,6,opt,name=enic_info,json=enicInfo" json:"enic_info,omitempty"`
	CpuInfo      *CpuIfResponseInfo    `protobuf:"bytes,7,opt,name=cpu_info,json=cpuInfo" json:"cpu_info,omitempty"`
	TunnelInfo   *TunnelIfResponseInfo `protobuf:"bytes,8,opt,name=tunnel_info,json=tunnelInfo" json:"tunnel_info,omitempty"`
	AppRedirInfo *AppRedirIfInfo       `protobuf:"bytes,9,opt,name=app_redir_info,json=appRedirInfo" json:"app_redir_info,omitempty"`
}

func (m *InterfaceStatus) GetDelphiMessage() proto.Message {
	return m
}

func (m *InterfaceStatus) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *InterfaceStatus) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *InterfaceStatus) GetDelphiKey() string {
	return m.KeyOrHandle.String()
}

func (m *InterfaceStatus) GetDelphiKind() string {
	return "InterfaceStatus"
}

func (m *InterfaceStatus) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *InterfaceStatus) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*InterfaceStatus)
	return obj
}

func InterfaceStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("InterfaceStatus", mode)
}

func InterfaceStatusMountKey(client clientApi.Client, key *InterfaceKeyHandle, mode delphi.MountMode) {
	client.MountKindKey("InterfaceStatus", key.String(), mode)
}

func GetInterfaceStatus(client clientApi.Client, key *InterfaceKeyHandle) *InterfaceStatus {
	o := client.GetObject("InterfaceStatus", key.String())
	if o == nil {
		return nil
	}
	obj, ok := o.(*InterfaceStatus)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func InterfaceStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg InterfaceStatus
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func InterfaceStatusWatch(client clientApi.Client, reactor InterfaceStatusReactor) {
	client.WatchKind("InterfaceStatus", reactor)
}
func InterfaceStatusList(client clientApi.Client) []*InterfaceStatus {
	bobjs := client.List("InterfaceStatus")
	objs := make([]*InterfaceStatus, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*InterfaceStatus)
		objs = append(objs, obj)
	}
	return objs
}
func (m *InterfaceStatus) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(InterfaceStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnInterfaceStatusCreate(m)
			} else {
				oldObj, ok := old.(*InterfaceStatus)
				if ok == false {
					panic("Not an InterfaceStatus object")
				}
				rctr.OnInterfaceStatusUpdate(oldObj, m)
			}
		} else {
			rctr.OnInterfaceStatusDelete(m)
		}
	}
}

type InterfaceStatusReactor interface {
	OnInterfaceStatusCreate(obj *InterfaceStatus)
	OnInterfaceStatusUpdate(old *InterfaceStatus, obj *InterfaceStatus)
	OnInterfaceStatusDelete(obj *InterfaceStatus)
}

func (m *InterfaceStatus) Reset()                    { *m = InterfaceStatus{} }
func (m *InterfaceStatus) String() string            { return proto.CompactTextString(m) }
func (*InterfaceStatus) ProtoMessage()               {}
func (*InterfaceStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *InterfaceStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *InterfaceStatus) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *InterfaceStatus) GetIfStatus() IntfStatus {
	if m != nil {
		return m.IfStatus
	}
	return IntfStatus_IF_STATUS_NONE
}

func (m *InterfaceStatus) GetIfHandle() uint64 {
	if m != nil {
		return m.IfHandle
	}
	return 0
}

func (m *InterfaceStatus) GetUplinkInfo() *UplinkResponseInfo {
	if m != nil {
		return m.UplinkInfo
	}
	return nil
}

func (m *InterfaceStatus) GetEnicInfo() *EnicResponseInfo {
	if m != nil {
		return m.EnicInfo
	}
	return nil
}

func (m *InterfaceStatus) GetCpuInfo() *CpuIfResponseInfo {
	if m != nil {
		return m.CpuInfo
	}
	return nil
}

func (m *InterfaceStatus) GetTunnelInfo() *TunnelIfResponseInfo {
	if m != nil {
		return m.TunnelInfo
	}
	return nil
}

func (m *InterfaceStatus) GetAppRedirInfo() *AppRedirIfInfo {
	if m != nil {
		return m.AppRedirInfo
	}
	return nil
}

// InterfaceResponse is response to one InterfaceSpec
type InterfaceResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=intf.ApiStatus" json:"api_status,omitempty"`
	Status    *InterfaceStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *InterfaceResponse) Reset()                    { *m = InterfaceResponse{} }
func (m *InterfaceResponse) String() string            { return proto.CompactTextString(m) }
func (*InterfaceResponse) ProtoMessage()               {}
func (*InterfaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *InterfaceResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *InterfaceResponse) GetStatus() *InterfaceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// InterfaceResponseMsg is response to InterfaceRequestMsg
type InterfaceResponseMsg struct {
	Response *InterfaceResponse `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *InterfaceResponseMsg) Reset()                    { *m = InterfaceResponseMsg{} }
func (m *InterfaceResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceResponseMsg) ProtoMessage()               {}
func (*InterfaceResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *InterfaceResponseMsg) GetResponse() *InterfaceResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// InterfaceDeleteRequest is used to delete a interface object
type InterfaceDeleteRequest struct {
	KeyOrHandle *InterfaceKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *InterfaceDeleteRequest) Reset()                    { *m = InterfaceDeleteRequest{} }
func (m *InterfaceDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*InterfaceDeleteRequest) ProtoMessage()               {}
func (*InterfaceDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *InterfaceDeleteRequest) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// InterfaceDeleteRequestMsg is used to delete a batch of interfaces
type InterfaceDeleteRequestMsg struct {
	Request *InterfaceDeleteRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *InterfaceDeleteRequestMsg) Reset()                    { *m = InterfaceDeleteRequestMsg{} }
func (m *InterfaceDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceDeleteRequestMsg) ProtoMessage()               {}
func (*InterfaceDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *InterfaceDeleteRequestMsg) GetRequest() *InterfaceDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// InterfaceDeleteResponse is batched response to InterfaceDeleteRequest
type InterfaceDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=intf.ApiStatus" json:"api_status,omitempty"`
}

func (m *InterfaceDeleteResponse) Reset()                    { *m = InterfaceDeleteResponse{} }
func (m *InterfaceDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*InterfaceDeleteResponse) ProtoMessage()               {}
func (*InterfaceDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *InterfaceDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// InterfaceDeleteResponseMsg is batched response to InterfaceDeleteRequestMsg
type InterfaceDeleteResponseMsg struct {
	Response *InterfaceDeleteResponse `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *InterfaceDeleteResponseMsg) Reset()                    { *m = InterfaceDeleteResponseMsg{} }
func (m *InterfaceDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceDeleteResponseMsg) ProtoMessage()               {}
func (*InterfaceDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *InterfaceDeleteResponseMsg) GetResponse() *InterfaceDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// InterfaceStats captures all the statistics of given interface
type InterfaceStats struct {
	NumTxPackets uint32 `protobuf:"fixed32,1,opt,name=num_tx_packets,json=numTxPackets" json:"num_tx_packets,omitempty"`
	NumTxBytes   uint32 `protobuf:"fixed32,2,opt,name=num_tx_bytes,json=numTxBytes" json:"num_tx_bytes,omitempty"`
	NumRxPackets uint32 `protobuf:"fixed32,3,opt,name=num_rx_packets,json=numRxPackets" json:"num_rx_packets,omitempty"`
	NumRxBytes   uint32 `protobuf:"fixed32,4,opt,name=num_rx_bytes,json=numRxBytes" json:"num_rx_bytes,omitempty"`
}

func (m *InterfaceStats) Reset()                    { *m = InterfaceStats{} }
func (m *InterfaceStats) String() string            { return proto.CompactTextString(m) }
func (*InterfaceStats) ProtoMessage()               {}
func (*InterfaceStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *InterfaceStats) GetNumTxPackets() uint32 {
	if m != nil {
		return m.NumTxPackets
	}
	return 0
}

func (m *InterfaceStats) GetNumTxBytes() uint32 {
	if m != nil {
		return m.NumTxBytes
	}
	return 0
}

func (m *InterfaceStats) GetNumRxPackets() uint32 {
	if m != nil {
		return m.NumRxPackets
	}
	return 0
}

func (m *InterfaceStats) GetNumRxBytes() uint32 {
	if m != nil {
		return m.NumRxBytes
	}
	return 0
}

// InterfaceGetRequest is used to get information about a interface
type InterfaceGetRequest struct {
	KeyOrHandle *InterfaceKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *InterfaceGetRequest) Reset()                    { *m = InterfaceGetRequest{} }
func (m *InterfaceGetRequest) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetRequest) ProtoMessage()               {}
func (*InterfaceGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *InterfaceGetRequest) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// InterfaceGetRequestMsg is batched GET request for interfaces
type InterfaceGetRequestMsg struct {
	Request *InterfaceGetRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *InterfaceGetRequestMsg) Reset()                    { *m = InterfaceGetRequestMsg{} }
func (m *InterfaceGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetRequestMsg) ProtoMessage()               {}
func (*InterfaceGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *InterfaceGetRequestMsg) GetRequest() *InterfaceGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// InterfaceGetResponse captures all the information about a interface
type InterfaceGetResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=intf.ApiStatus" json:"api_status,omitempty"`
	Spec      *InterfaceSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *InterfaceStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *InterfaceStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *InterfaceGetResponse) Reset()                    { *m = InterfaceGetResponse{} }
func (m *InterfaceGetResponse) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetResponse) ProtoMessage()               {}
func (*InterfaceGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *InterfaceGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *InterfaceGetResponse) GetSpec() *InterfaceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *InterfaceGetResponse) GetStatus() *InterfaceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *InterfaceGetResponse) GetStats() *InterfaceStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// InterfaceGetResponseMsg is response to InterfaceGetRequestMsg
type InterfaceGetResponseMsg struct {
	ApiStatus ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=intf.ApiStatus" json:"api_status,omitempty"`
	Response  *InterfaceGetResponse `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
}

func (m *InterfaceGetResponseMsg) Reset()                    { *m = InterfaceGetResponseMsg{} }
func (m *InterfaceGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetResponseMsg) ProtoMessage()               {}
func (*InterfaceGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *InterfaceGetResponseMsg) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *InterfaceGetResponseMsg) GetResponse() *InterfaceGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// InterfaceL2SegmentSpec carries the user vlan that is being added or deleted
// on an uplink interface or uplink PC
type InterfaceL2SegmentSpec struct {
	L2SegmentKeyOrHandle *L2SegmentKeyHandle `protobuf:"bytes,1,opt,name=l2segment_key_or_handle,json=l2segmentKeyOrHandle" json:"l2segment_key_or_handle,omitempty"`
	IfKeyHandle          *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=if_key_handle,json=ifKeyHandle" json:"if_key_handle,omitempty"`
}

func (m *InterfaceL2SegmentSpec) Reset()                    { *m = InterfaceL2SegmentSpec{} }
func (m *InterfaceL2SegmentSpec) String() string            { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentSpec) ProtoMessage()               {}
func (*InterfaceL2SegmentSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *InterfaceL2SegmentSpec) GetL2SegmentKeyOrHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.L2SegmentKeyOrHandle
	}
	return nil
}

func (m *InterfaceL2SegmentSpec) GetIfKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.IfKeyHandle
	}
	return nil
}

// InterfaceL2SegmentRequestMsg is batched request message to bring vlans
// on interfaces
type InterfaceL2SegmentRequestMsg struct {
	Request *InterfaceL2SegmentSpec `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *InterfaceL2SegmentRequestMsg) Reset()                    { *m = InterfaceL2SegmentRequestMsg{} }
func (m *InterfaceL2SegmentRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentRequestMsg) ProtoMessage()               {}
func (*InterfaceL2SegmentRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *InterfaceL2SegmentRequestMsg) GetRequest() *InterfaceL2SegmentSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// InterfaceL2SegmentResponse is response to InterfaceL2SegmentSpec
type InterfaceL2SegmentResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=intf.ApiStatus" json:"api_status,omitempty"`
}

func (m *InterfaceL2SegmentResponse) Reset()                    { *m = InterfaceL2SegmentResponse{} }
func (m *InterfaceL2SegmentResponse) String() string            { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentResponse) ProtoMessage()               {}
func (*InterfaceL2SegmentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *InterfaceL2SegmentResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// InterfaceL2SegmentResponseMsg is batched response to InterfaceL2SegmentResponse
type InterfaceL2SegmentResponseMsg struct {
	Response *InterfaceL2SegmentResponse `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *InterfaceL2SegmentResponseMsg) Reset()                    { *m = InterfaceL2SegmentResponseMsg{} }
func (m *InterfaceL2SegmentResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentResponseMsg) ProtoMessage()               {}
func (*InterfaceL2SegmentResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *InterfaceL2SegmentResponseMsg) GetResponse() *InterfaceL2SegmentResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*ObjectMeta)(nil), "intf.ObjectMeta")
	proto.RegisterType((*EncapInfo)(nil), "intf.EncapInfo")
	proto.RegisterType((*IPAddress)(nil), "intf.IPAddress")
	proto.RegisterType((*IPRange)(nil), "intf.IPRange")
	proto.RegisterType((*IPPrefix)(nil), "intf.IPPrefix")
	proto.RegisterType((*IPSubnet)(nil), "intf.IPSubnet")
	proto.RegisterType((*AddressRange)(nil), "intf.AddressRange")
	proto.RegisterType((*Address)(nil), "intf.Address")
	proto.RegisterType((*IPAddressObj)(nil), "intf.IPAddressObj")
	proto.RegisterType((*L4PortRange)(nil), "intf.L4PortRange")
	proto.RegisterType((*Empty)(nil), "intf.Empty")
	proto.RegisterType((*DropReasons)(nil), "intf.DropReasons")
	proto.RegisterType((*EgressDropReasons)(nil), "intf.EgressDropReasons")
	proto.RegisterType((*VrfKeyHandle)(nil), "intf.VrfKeyHandle")
	proto.RegisterType((*L2SegmentKeyHandle)(nil), "intf.L2SegmentKeyHandle")
	proto.RegisterType((*PortKeyHandle)(nil), "intf.PortKeyHandle")
	proto.RegisterType((*LifKeyHandle)(nil), "intf.LifKeyHandle")
	proto.RegisterType((*InterfaceKeyHandle)(nil), "intf.InterfaceKeyHandle")
	proto.RegisterType((*FilterKey)(nil), "intf.FilterKey")
	proto.RegisterType((*LifQStateMapEntry)(nil), "intf.LifQStateMapEntry")
	proto.RegisterType((*PktFilter)(nil), "intf.PktFilter")
	clientApi.RegisterFactory("LifSpec", LifSpecFactory)
	proto.RegisterType((*LifSpec)(nil), "intf.LifSpec")
	proto.RegisterType((*LifRequestMsg)(nil), "intf.LifRequestMsg")
	clientApi.RegisterFactory("LifStatus", LifStatusFactory)
	proto.RegisterType((*LifStatus)(nil), "intf.LifStatus")
	proto.RegisterType((*LifQState)(nil), "intf.LifQState")
	proto.RegisterType((*LifRdmaData)(nil), "intf.LifRdmaData")
	proto.RegisterType((*LifResponse)(nil), "intf.LifResponse")
	proto.RegisterType((*LifResponseMsg)(nil), "intf.LifResponseMsg")
	proto.RegisterType((*QStateGetReq)(nil), "intf.QStateGetReq")
	proto.RegisterType((*QStateGetResp)(nil), "intf.QStateGetResp")
	proto.RegisterType((*GetQStateResponseMsg)(nil), "intf.GetQStateResponseMsg")
	proto.RegisterType((*P4ProgLabel)(nil), "intf.P4ProgLabel")
	proto.RegisterType((*QStateSetReq)(nil), "intf.QStateSetReq")
	proto.RegisterType((*SetQStateRequestMsg)(nil), "intf.SetQStateRequestMsg")
	proto.RegisterType((*QStateSetResp)(nil), "intf.QStateSetResp")
	proto.RegisterType((*SetQStateResponseMsg)(nil), "intf.SetQStateResponseMsg")
	proto.RegisterType((*LifDeleteRequest)(nil), "intf.LifDeleteRequest")
	proto.RegisterType((*LifDeleteRequestMsg)(nil), "intf.LifDeleteRequestMsg")
	proto.RegisterType((*LifDeleteResponse)(nil), "intf.LifDeleteResponse")
	proto.RegisterType((*LifDeleteResponseMsg)(nil), "intf.LifDeleteResponseMsg")
	proto.RegisterType((*LifTxStats)(nil), "intf.LifTxStats")
	proto.RegisterType((*LifRxStats)(nil), "intf.LifRxStats")
	proto.RegisterType((*LifRssSpec)(nil), "intf.LifRssSpec")
	proto.RegisterType((*EnicInfo)(nil), "intf.EnicInfo")
	proto.RegisterType((*EnicClassicInfo)(nil), "intf.EnicClassicInfo")
	proto.RegisterType((*IfEnicInfo)(nil), "intf.IfEnicInfo")
	proto.RegisterType((*IfUplinkInfo)(nil), "intf.IfUplinkInfo")
	proto.RegisterType((*IfUplinkPCInfo)(nil), "intf.IfUplinkPCInfo")
	proto.RegisterType((*IfTunnelVxlanInfo)(nil), "intf.IfTunnelVxlanInfo")
	proto.RegisterType((*IfTunnelGREInfo)(nil), "intf.IfTunnelGREInfo")
	proto.RegisterType((*IfTunnelInfo)(nil), "intf.IfTunnelInfo")
	proto.RegisterType((*IfCPUInfo)(nil), "intf.IfCPUInfo")
	proto.RegisterType((*IfAppRedirInfo)(nil), "intf.IfAppRedirInfo")
	clientApi.RegisterFactory("InterfaceSpec", InterfaceSpecFactory)
	proto.RegisterType((*InterfaceSpec)(nil), "intf.InterfaceSpec")
	proto.RegisterType((*InterfaceRequestMsg)(nil), "intf.InterfaceRequestMsg")
	proto.RegisterType((*UplinkResponseInfo)(nil), "intf.UplinkResponseInfo")
	proto.RegisterType((*EnicL2SegInfo)(nil), "intf.EnicL2SegInfo")
	proto.RegisterType((*SmartEnicInfo)(nil), "intf.SmartEnicInfo")
	proto.RegisterType((*ClassicEnicInfo)(nil), "intf.ClassicEnicInfo")
	proto.RegisterType((*EnicResponseInfo)(nil), "intf.EnicResponseInfo")
	proto.RegisterType((*CpuIfResponseInfo)(nil), "intf.CpuIfResponseInfo")
	proto.RegisterType((*TunnelIfResponseInfo)(nil), "intf.TunnelIfResponseInfo")
	proto.RegisterType((*AppRedirIfInfo)(nil), "intf.AppRedirIfInfo")
	clientApi.RegisterFactory("InterfaceStatus", InterfaceStatusFactory)
	proto.RegisterType((*InterfaceStatus)(nil), "intf.InterfaceStatus")
	proto.RegisterType((*InterfaceResponse)(nil), "intf.InterfaceResponse")
	proto.RegisterType((*InterfaceResponseMsg)(nil), "intf.InterfaceResponseMsg")
	proto.RegisterType((*InterfaceDeleteRequest)(nil), "intf.InterfaceDeleteRequest")
	proto.RegisterType((*InterfaceDeleteRequestMsg)(nil), "intf.InterfaceDeleteRequestMsg")
	proto.RegisterType((*InterfaceDeleteResponse)(nil), "intf.InterfaceDeleteResponse")
	proto.RegisterType((*InterfaceDeleteResponseMsg)(nil), "intf.InterfaceDeleteResponseMsg")
	proto.RegisterType((*InterfaceStats)(nil), "intf.InterfaceStats")
	proto.RegisterType((*InterfaceGetRequest)(nil), "intf.InterfaceGetRequest")
	proto.RegisterType((*InterfaceGetRequestMsg)(nil), "intf.InterfaceGetRequestMsg")
	proto.RegisterType((*InterfaceGetResponse)(nil), "intf.InterfaceGetResponse")
	proto.RegisterType((*InterfaceGetResponseMsg)(nil), "intf.InterfaceGetResponseMsg")
	proto.RegisterType((*InterfaceL2SegmentSpec)(nil), "intf.InterfaceL2SegmentSpec")
	proto.RegisterType((*InterfaceL2SegmentRequestMsg)(nil), "intf.InterfaceL2SegmentRequestMsg")
	proto.RegisterType((*InterfaceL2SegmentResponse)(nil), "intf.InterfaceL2SegmentResponse")
	proto.RegisterType((*InterfaceL2SegmentResponseMsg)(nil), "intf.InterfaceL2SegmentResponseMsg")
	proto.RegisterEnum("intf.IPProtocol", IPProtocol_name, IPProtocol_value)
	proto.RegisterEnum("intf.ICMPMsgType", ICMPMsgType_name, ICMPMsgType_value)
	proto.RegisterEnum("intf.ApiStatus", ApiStatus_name, ApiStatus_value)
	proto.RegisterEnum("intf.VrfType", VrfType_name, VrfType_value)
	proto.RegisterEnum("intf.L2SegmentType", L2SegmentType_name, L2SegmentType_value)
	proto.RegisterEnum("intf.EncapType", EncapType_name, EncapType_value)
	proto.RegisterEnum("intf.IPAddressFamily", IPAddressFamily_name, IPAddressFamily_value)
	proto.RegisterEnum("intf.IPAddressType", IPAddressType_name, IPAddressType_value)
	proto.RegisterEnum("intf.WRingType", WRingType_name, WRingType_value)
	proto.RegisterEnum("intf.ProxyType", ProxyType_name, ProxyType_value)
	proto.RegisterEnum("intf.CryptoAsymKeyType", CryptoAsymKeyType_name, CryptoAsymKeyType_value)
	proto.RegisterEnum("intf.CryptoKeyType", CryptoKeyType_name, CryptoKeyType_value)
	proto.RegisterEnum("intf.BarcoRings", BarcoRings_name, BarcoRings_value)
	proto.RegisterEnum("intf.AppRedirType", AppRedirType_name, AppRedirType_value)
	proto.RegisterEnum("intf.CpucbId", CpucbId_name, CpucbId_value)
	proto.RegisterEnum("intf.FTESpanMatchSelector", FTESpanMatchSelector_name, FTESpanMatchSelector_value)
	proto.RegisterEnum("intf.FilterType", FilterType_name, FilterType_value)
	proto.RegisterEnum("intf.IntfStatus", IntfStatus_name, IntfStatus_value)
	proto.RegisterEnum("intf.LifQueuePurpose", LifQueuePurpose_name, LifQueuePurpose_value)
	proto.RegisterEnum("intf.IntfType", IntfType_name, IntfType_value)
	proto.RegisterEnum("intf.IntfEnicType", IntfEnicType_name, IntfEnicType_value)
	proto.RegisterEnum("intf.IntfTunnelEncapType", IntfTunnelEncapType_name, IntfTunnelEncapType_value)
}

func init() { proto.RegisterFile("interface.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 7009 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x7c, 0xcd, 0x6f, 0xe3, 0x4a,
	0xb6, 0xdf, 0x95, 0x2d, 0xdb, 0xd2, 0x91, 0x64, 0xd3, 0xb4, 0xbb, 0xed, 0x76, 0xdf, 0x6e, 0xf7,
	0xe5, 0xfd, 0xf6, 0xdc, 0xeb, 0x6e, 0xbb, 0x6d, 0xdf, 0x8f, 0x79, 0x8d, 0x8c, 0x3e, 0x28, 0x5b,
	0xd3, 0xfa, 0xa0, 0x8b, 0xb2, 0xdb, 0x7d, 0x93, 0x09, 0x43, 0x4b, 0x94, 0xcd, 0xb1, 0x44, 0xb2,
	0x49, 0xca, 0x1f, 0x93, 0xd7, 0xc9, 0x04, 0xd9, 0xbc, 0xe0, 0x21, 0x78, 0xc8, 0x0b, 0x82, 0x87,
	0x2c, 0x06, 0x08, 0x90, 0x6c, 0x92, 0x6c, 0x12, 0x20, 0x98, 0xec, 0x82, 0xec, 0xb2, 0x4e, 0xfe,
	0x80, 0xc6, 0xcb, 0x26, 0x08, 0x02, 0x64, 0xf1, 0x7a, 0x91, 0x65, 0x12, 0xd4, 0x07, 0xc9, 0x22,
	0x25, 0xf5, 0x74, 0x4f, 0xfa, 0x4e, 0x76, 0xe4, 0x39, 0xbf, 0x3a, 0x75, 0xea, 0x9c, 0x53, 0xa7,
	0x4e, 0x55, 0x51, 0x82, 0x05, 0xd3, 0xf2, 0x0d, 0xb7, 0xa7, 0x77, 0x8c, 0x4d, 0xc7, 0xb5, 0x7d,
	0x5b, 0x4c, 0x9b, 0x96, 0xdf, 0x5b, 0x83, 0x33, 0xfb, 0xcc, 0xa6, 0x94, 0xb5, 0x7c, 0xd7, 0xe8,
	0x3b, 0xe7, 0x26, 0x7d, 0x93, 0x3e, 0x06, 0x68, 0x9d, 0xfe, 0xd2, 0xe8, 0xf8, 0x0d, 0xc3, 0xd7,
	0xc5, 0x5b, 0x30, 0x7b, 0xe9, 0xf6, 0x34, 0xb3, 0xbb, 0x9a, 0x7a, 0x90, 0xfa, 0x62, 0x16, 0xcd,
	0x5c, 0xba, 0xbd, 0x5a, 0x57, 0xfa, 0x1b, 0x90, 0x95, 0xad, 0x8e, 0xee, 0xd4, 0xac, 0x9e, 0x2d,
	0x6e, 0x02, 0x18, 0xf8, 0x45, 0xf3, 0x6f, 0x1c, 0x83, 0xe0, 0xe6, 0xb7, 0x17, 0x36, 0x71, 0x37,
	0x9b, 0x84, 0xde, 0xbe, 0x71, 0x0c, 0x94, 0x0d, 0x1f, 0xc5, 0x75, 0xc8, 0x51, 0xfc, 0xa5, 0xde,
	0x1f, 0x1a, 0xab, 0x53, 0x0f, 0x52, 0x5f, 0x14, 0x10, 0x15, 0x71, 0x8c, 0x29, 0xd2, 0xdf, 0x85,
	0x6c, 0x4d, 0x29, 0x76, 0xbb, 0xae, 0xe1, 0x79, 0xe2, 0xcf, 0x60, 0xc6, 0x74, 0x34, 0xbd, 0xc7,
	0x04, 0xdf, 0xa2, 0x82, 0x43, 0x7e, 0x55, 0x1f, 0x98, 0xfd, 0x9b, 0xd2, 0xf2, 0xeb, 0x57, 0xeb,
	0xc2, 0xa5, 0x61, 0x99, 0x1d, 0xe3, 0xfb, 0x81, 0x6e, 0x75, 0x75, 0xdf, 0x76, 0x6f, 0x50, 0xda,
	0x74, 0x8a, 0x3d, 0x71, 0x05, 0xe6, 0x2e, 0x77, 0x34, 0xbd, 0xdb, 0x75, 0x49, 0x5f, 0x73, 0x68,
	0xf6, 0x72, 0x07, 0xb7, 0x26, 0x8c, 0x3d, 0xca, 0x98, 0x7e, 0x90, 0xfa, 0x22, 0x8f, 0x66, 0x2f,
	0xf7, 0x30, 0x43, 0xba, 0x80, 0xb9, 0x9a, 0x82, 0x74, 0xeb, 0xcc, 0xc0, 0x83, 0xeb, 0xdb, 0x57,
	0x9a, 0xe9, 0x10, 0x18, 0xd6, 0x21, 0x17, 0x0c, 0x2e, 0xd4, 0x01, 0x65, 0xfb, 0xf6, 0x55, 0x8d,
	0x20, 0xc4, 0x47, 0x90, 0x3b, 0x37, 0xcf, 0xce, 0x83, 0x06, 0x53, 0xe3, 0x1b, 0x00, 0xc6, 0xd0,
	0x16, 0x52, 0x1f, 0x32, 0x35, 0x45, 0x71, 0x8d, 0x9e, 0x79, 0x2d, 0x7e, 0x09, 0x73, 0x3a, 0x85,
	0x4c, 0xea, 0x2a, 0xe0, 0x8b, 0xbb, 0x00, 0x0e, 0x69, 0xa4, 0xf5, 0x0d, 0x8b, 0x1a, 0xb1, 0x74,
	0xfb, 0xf5, 0xab, 0x75, 0x91, 0x59, 0xc1, 0xc5, 0xea, 0x7f, 0xff, 0xe8, 0xeb, 0xad, 0xed, 0x6f,
	0x51, 0x96, 0x22, 0xeb, 0x86, 0x45, 0x7b, 0x53, 0x87, 0xa7, 0x96, 0xe1, 0x8b, 0x0f, 0x21, 0x67,
	0x3a, 0x97, 0x3b, 0x9a, 0x47, 0x5e, 0x59, 0x8f, 0xf3, 0x41, 0x8f, 0x54, 0x25, 0x04, 0x18, 0x12,
	0x6b, 0xb0, 0x17, 0x34, 0x98, 0x9a, 0xd8, 0x60, 0x8f, 0x36, 0x90, 0x7e, 0x09, 0xf9, 0x40, 0x71,
	0x62, 0xcd, 0xaf, 0x80, 0x88, 0xd3, 0x88, 0x72, 0xac, 0xc3, 0x42, 0xd0, 0x9e, 0x40, 0x50, 0x16,
	0x03, 0x78, 0xf4, 0x1e, 0x43, 0x4f, 0x4d, 0x42, 0xef, 0x91, 0x47, 0xa9, 0x0b, 0x73, 0x41, 0xcc,
	0x7c, 0x06, 0xb3, 0x74, 0xc4, 0xc9, 0x31, 0x51, 0xb5, 0x10, 0xe3, 0x8a, 0x5b, 0x00, 0xd8, 0x9c,
	0xb1, 0x0e, 0x44, 0x8a, 0xe5, 0xd5, 0x46, 0x59, 0x8c, 0xa2, 0xbd, 0xfc, 0x31, 0xe4, 0x43, 0x67,
	0xb4, 0x4e, 0x7f, 0x29, 0xfe, 0x04, 0x66, 0x4d, 0x87, 0x0b, 0xfc, 0xa5, 0x84, 0xc3, 0x48, 0xf0,
	0x33, 0x88, 0xf8, 0x79, 0xe4, 0xde, 0xd8, 0x68, 0x46, 0x9c, 0x7b, 0x1b, 0x66, 0x2d, 0xe3, 0x4c,
	0xf7, 0x0d, 0x12, 0x98, 0x19, 0xc4, 0xde, 0xa4, 0x1b, 0xc8, 0xd5, 0x77, 0x14, 0xdb, 0xf5, 0xa9,
	0x81, 0x1e, 0x43, 0xc6, 0xb1, 0x5d, 0x5f, 0xeb, 0xdb, 0x57, 0xa4, 0xfb, 0x42, 0x69, 0xf5, 0xf5,
	0xab, 0xf5, 0xe5, 0x44, 0x04, 0xec, 0xed, 0xee, 0x3e, 0xde, 0x45, 0x73, 0x18, 0x59, 0xb7, 0xaf,
	0xc4, 0x5d, 0xc8, 0x92, 0x46, 0x38, 0x04, 0x59, 0xdc, 0x4c, 0x6e, 0x45, 0xe4, 0x1f, 0x98, 0x67,
	0xe7, 0xd2, 0x1c, 0xcc, 0xc8, 0x03, 0xc7, 0xbf, 0x91, 0x5e, 0x67, 0x21, 0x57, 0x71, 0x6d, 0x07,
	0x19, 0xba, 0x67, 0x5b, 0x9e, 0xf8, 0x15, 0x88, 0x5d, 0xd7, 0x76, 0xb4, 0x81, 0xde, 0xef, 0xd9,
	0xee, 0xc0, 0xe8, 0x6a, 0xce, 0x05, 0x0d, 0xa6, 0x0c, 0x12, 0x30, 0xa7, 0x11, 0x30, 0x94, 0x0b,
	0x3f, 0x44, 0x9b, 0x96, 0x33, 0xf4, 0xb5, 0x81, 0xee, 0x38, 0xa6, 0x75, 0x46, 0xd4, 0x60, 0xe8,
	0x1a, 0x66, 0x34, 0x28, 0x5d, 0xfc, 0x0e, 0xee, 0x8c, 0xa2, 0xb5, 0xae, 0xf1, 0x4b, 0xfd, 0x72,
	0xc8, 0x4c, 0x73, 0x3b, 0xd9, 0xa8, 0x42, 0xb8, 0xa2, 0x04, 0x05, 0xd2, 0xb4, 0x87, 0xa7, 0xef,
	0xb9, 0xe9, 0xaf, 0xa6, 0x09, 0x3c, 0x87, 0x89, 0xd5, 0xbe, 0x7d, 0x75, 0x60, 0xfa, 0xe2, 0x27,
	0x30, 0x1f, 0x61, 0x06, 0xa6, 0xe7, 0xad, 0xce, 0x10, 0x50, 0x3e, 0x00, 0x35, 0x4c, 0xcf, 0x13,
	0xef, 0x42, 0x96, 0xa0, 0x2c, 0xbd, 0xd3, 0x5f, 0x9d, 0x25, 0x80, 0x0c, 0x26, 0x34, 0xf5, 0x4e,
	0x3f, 0x64, 0x9a, 0x8e, 0x77, 0xb6, 0x3a, 0x17, 0x31, 0x6b, 0x8e, 0x77, 0x26, 0x6e, 0xc3, 0x2d,
	0xc6, 0xd4, 0x2c, 0xdb, 0x1d, 0xe8, 0x7d, 0xf3, 0x57, 0xba, 0x6f, 0xda, 0xd6, 0x6a, 0x86, 0x00,
	0x97, 0x28, 0xb0, 0xc9, 0xb3, 0xc4, 0x1d, 0x20, 0x23, 0xd2, 0xfc, 0x4e, 0xb2, 0x51, 0x96, 0x34,
	0x5a, 0xc6, 0xdc, 0x76, 0x27, 0xd1, 0xaa, 0x0a, 0x1f, 0x85, 0xad, 0x5c, 0xcf, 0xd7, 0xae, 0x4c,
	0xff, 0x5c, 0x33, 0xad, 0x4b, 0xbd, 0x6f, 0x76, 0x35, 0xbd, 0x73, 0xa1, 0x59, 0xc3, 0xc1, 0x2a,
	0x10, 0x01, 0x77, 0x99, 0x00, 0xe4, 0xf9, 0xcf, 0x4c, 0xff, 0xbc, 0x46, 0x41, 0xc5, 0xce, 0x45,
	0x73, 0x38, 0x10, 0xbf, 0x83, 0x35, 0xae, 0x77, 0x4b, 0xf3, 0x6e, 0x2c, 0xad, 0x67, 0x62, 0x89,
	0xd8, 0xa9, 0x39, 0x22, 0xe0, 0x56, 0xa8, 0x81, 0xa5, 0xde, 0x58, 0x55, 0xcc, 0xc5, 0x9e, 0xdd,
	0x83, 0x15, 0x3a, 0xd8, 0xce, 0x20, 0xa9, 0x79, 0x3e, 0x6a, 0x57, 0xeb, 0x0c, 0x12, 0xaa, 0xff,
	0x94, 0x75, 0x49, 0x7d, 0xec, 0xb8, 0xb6, 0x63, 0xb8, 0xbe, 0x69, 0x78, 0xd4, 0x21, 0x05, 0xd2,
	0x74, 0x25, 0x74, 0xb2, 0x12, 0xf2, 0x89, 0x6f, 0xb6, 0x39, 0x6b, 0xd9, 0x43, 0x5f, 0xb3, 0x7b,
	0xda, 0x95, 0x69, 0x75, 0xed, 0xab, 0xd5, 0x79, 0xd2, 0x50, 0x64, 0xba, 0xb6, 0x86, 0x7e, 0xab,
	0xf7, 0x8c, 0x70, 0xc4, 0x6f, 0x60, 0x35, 0x6c, 0xe3, 0x39, 0x7d, 0xd3, 0xd7, 0xce, 0x75, 0xab,
	0xeb, 0x9d, 0xeb, 0x17, 0xc6, 0xea, 0x42, 0x6c, 0x84, 0x2a, 0xe6, 0x1e, 0x04, 0xcc, 0x58, 0x67,
	0x57, 0xa6, 0xa5, 0xfd, 0xca, 0x70, 0x6d, 0x0d, 0x53, 0x56, 0x85, 0x58, 0x67, 0xcf, 0x4c, 0xeb,
	0x07, 0xc3, 0xb5, 0xf1, 0x24, 0x11, 0x77, 0x98, 0x55, 0x70, 0x9b, 0xae, 0xee, 0xeb, 0x9a, 0xde,
	0xf3, 0x0d, 0x57, 0xeb, 0x99, 0xd6, 0xea, 0x62, 0x14, 0x04, 0xed, 0x8e, 0x53, 0xd1, 0x7d, 0xbd,
	0x88, 0x79, 0x55, 0xd3, 0x12, 0x7f, 0x06, 0xf7, 0x63, 0x6e, 0x60, 0x0e, 0x60, 0x8d, 0x5d, 0xcf,
	0x5f, 0x15, 0x49, 0xe3, 0xd5, 0xc8, 0x15, 0x88, 0x78, 0x81, 0x48, 0x40, 0x9e, 0x2f, 0x36, 0xe0,
	0x93, 0x50, 0x42, 0x10, 0x07, 0xae, 0xe1, 0x39, 0xb6, 0xd5, 0x25, 0xdd, 0x07, 0x2e, 0x5d, 0x22,
	0x72, 0xd6, 0x99, 0x1c, 0x16, 0x0c, 0x28, 0x00, 0x86, 0xce, 0xdd, 0xe5, 0x86, 0x31, 0xb4, 0x8c,
	0x6b, 0xc7, 0xe8, 0xf8, 0x6c, 0xa6, 0x2f, 0xc7, 0xc2, 0xf2, 0x28, 0x64, 0xe2, 0x66, 0x5b, 0x6c,
	0x02, 0x78, 0x6e, 0x47, 0xeb, 0x9b, 0x3d, 0xec, 0xd2, 0x81, 0xee, 0x77, 0xce, 0x57, 0x6f, 0x45,
	0x06, 0x53, 0xdd, 0x4e, 0xdd, 0xec, 0x35, 0x18, 0x47, 0x7c, 0xcc, 0x8c, 0xec, 0xe8, 0xae, 0x67,
	0xb8, 0x9a, 0xd9, 0x71, 0x3b, 0x9a, 0xe1, 0xba, 0xb6, 0xbb, 0x7a, 0x3b, 0xb2, 0x97, 0x42, 0x98,
	0xb5, 0x8e, 0xdb, 0x91, 0x31, 0x4b, 0x7c, 0x08, 0xcb, 0x51, 0x23, 0xbc, 0x20, 0xb2, 0x26, 0x2b,
	0xa4, 0xc9, 0x62, 0xd8, 0xa4, 0x6e, 0x58, 0xb4, 0xc1, 0x26, 0x10, 0x39, 0xda, 0xb9, 0xee, 0x76,
	0xaf, 0x74, 0xd7, 0x60, 0xf8, 0xd5, 0x08, 0x7f, 0xc0, 0x38, 0x04, 0x2f, 0xfd, 0x9f, 0x14, 0x2c,
	0xca, 0x67, 0x38, 0x37, 0xf3, 0xa9, 0x2f, 0x90, 0x62, 0x0f, 0x7d, 0x3e, 0x9b, 0xa5, 0x22, 0x29,
	0x2d, 0xc2, 0x09, 0xd2, 0xd9, 0xd7, 0x0c, 0xef, 0xb8, 0x43, 0xcb, 0x20, 0x46, 0xc1, 0xe9, 0x95,
	0xcf, 0x7e, 0x0a, 0xe6, 0xa8, 0x6e, 0x07, 0xe7, 0x78, 0x5c, 0x28, 0xd1, 0xcc, 0x6a, 0x12, 0xe5,
	0x68, 0xbe, 0x03, 0x92, 0x52, 0x09, 0x45, 0xfc, 0x08, 0xf2, 0x54, 0x9e, 0xdd, 0x37, 0x3b, 0x86,
	0xcb, 0xa7, 0x38, 0x85, 0x92, 0xc2, 0xfc, 0xd4, 0xb1, 0x1d, 0x87, 0x65, 0x37, 0x92, 0x9f, 0xca,
	0xb6, 0xe3, 0x88, 0x1b, 0xb0, 0x48, 0x99, 0xe7, 0x46, 0xe7, 0xc2, 0x1b, 0x0e, 0xb0, 0x15, 0x58,
	0x86, 0x5b, 0x20, 0x20, 0x46, 0x97, 0x5d, 0x57, 0xaa, 0x40, 0xfe, 0xd8, 0xed, 0x3d, 0x35, 0x6e,
	0xf0, 0x7c, 0xe8, 0x1b, 0x89, 0xca, 0x30, 0xcd, 0x2a, 0x43, 0xf1, 0x1e, 0x00, 0x26, 0x9f, 0x13,
	0x10, 0x19, 0xd9, 0x2c, 0xca, 0x5e, 0xba, 0x3d, 0xda, 0x4a, 0xfa, 0x9b, 0x20, 0xd6, 0xb7, 0x55,
	0xe3, 0x6c, 0x60, 0x58, 0x7e, 0x24, 0xeb, 0x1e, 0x80, 0x47, 0x69, 0x91, 0xbc, 0x2c, 0xa3, 0xd4,
	0xba, 0xe2, 0x97, 0x20, 0xf4, 0xb7, 0x03, 0x40, 0x4c, 0xf2, 0x42, 0x48, 0x67, 0xf2, 0x6b, 0x50,
	0xc0, 0xa6, 0x8b, 0x44, 0xaf, 0x00, 0x59, 0xf8, 0x02, 0xb9, 0x73, 0x68, 0x16, 0xbf, 0xd6, 0xba,
	0xd8, 0xb8, 0x74, 0x19, 0xe4, 0xe5, 0x01, 0x59, 0xee, 0xa8, 0xa8, 0x12, 0xe4, 0xeb, 0x26, 0x37,
	0xe0, 0x65, 0x98, 0xa9, 0x9b, 0xbd, 0x5a, 0x58, 0x09, 0x93, 0x17, 0xf1, 0x43, 0xc8, 0xd6, 0x4d,
	0x36, 0xba, 0x60, 0xb8, 0x21, 0x41, 0x42, 0x20, 0xd6, 0x82, 0xfa, 0x3b, 0x92, 0xf4, 0x00, 0x72,
	0x21, 0x35, 0x94, 0xc7, 0x93, 0xc4, 0x35, 0xc8, 0xd4, 0xe2, 0x42, 0xc3, 0x77, 0xe9, 0xdf, 0xa7,
	0x20, 0x5b, 0x35, 0xfb, 0xbe, 0xe1, 0x3e, 0x35, 0x6e, 0xc4, 0x27, 0xb0, 0x88, 0x27, 0xd6, 0x85,
	0x71, 0xa3, 0xd9, 0x6e, 0x30, 0x98, 0x14, 0x5f, 0xc9, 0xf0, 0x83, 0x40, 0xf3, 0x7d, 0xf2, 0xd6,
	0x72, 0x99, 0x2a, 0x5b, 0x90, 0xeb, 0x11, 0x59, 0xb4, 0x78, 0x9f, 0x22, 0x35, 0x8c, 0x40, 0x1b,
	0xd2, 0x4e, 0x48, 0x01, 0x03, 0xbd, 0xf0, 0x19, 0x1b, 0x6e, 0xa0, 0x77, 0xb4, 0xa0, 0x90, 0x99,
	0x26, 0xde, 0x82, 0x81, 0xde, 0x09, 0xaa, 0x2f, 0x5c, 0x56, 0xf7, 0x75, 0x0b, 0x9b, 0x3c, 0x4d,
	0x6a, 0xfb, 0x59, 0xfc, 0x5a, 0xeb, 0x4a, 0xff, 0x30, 0x05, 0x8b, 0x75, 0xb3, 0x77, 0xa8, 0xfa,
	0xba, 0x6f, 0x34, 0x74, 0x47, 0xb6, 0x7c, 0xf7, 0x46, 0xbc, 0x03, 0x19, 0xdc, 0x37, 0x59, 0xa1,
	0x48, 0x11, 0x83, 0xe6, 0xf0, 0x3b, 0x5e, 0x8d, 0x44, 0x48, 0x7b, 0xe6, 0xaf, 0x82, 0x2d, 0x02,
	0x79, 0x16, 0x57, 0x61, 0xce, 0xb0, 0x7c, 0xd7, 0x34, 0x68, 0xd7, 0x05, 0x14, 0xbc, 0x8a, 0x0f,
	0x61, 0xce, 0x19, 0xba, 0x8e, 0xed, 0x19, 0xa4, 0xdf, 0x70, 0xaf, 0x80, 0xbb, 0x1c, 0x1a, 0x43,
	0x43, 0xa1, 0x4c, 0x14, 0xa0, 0xa4, 0xdf, 0xa4, 0x20, 0xab, 0x5c, 0xf8, 0x74, 0x9c, 0xe2, 0x4f,
	0x60, 0xd1, 0x35, 0x3a, 0x86, 0x79, 0x69, 0x68, 0xa7, 0xae, 0xad, 0x77, 0x3b, 0xba, 0x17, 0x96,
	0x31, 0x8c, 0x51, 0x0a, 0xe8, 0x78, 0x65, 0x0f, 0xc0, 0x7a, 0xbf, 0xaf, 0x0d, 0x86, 0x7d, 0xdf,
	0x24, 0x0d, 0xe8, 0x5c, 0x5e, 0x62, 0xcc, 0x62, 0xbf, 0xdf, 0x08, 0x58, 0xe2, 0x43, 0x08, 0xc8,
	0x78, 0x95, 0x1b, 0x98, 0x5e, 0x67, 0x68, 0x0f, 0x3d, 0x36, 0xad, 0x45, 0xc6, 0x52, 0x22, 0x8e,
	0xf4, 0x3f, 0x66, 0x61, 0xae, 0x6e, 0xf6, 0x54, 0xc7, 0xe8, 0x88, 0x9f, 0x41, 0x1a, 0x6f, 0xc8,
	0x42, 0xd7, 0xb2, 0x3d, 0x5b, 0xb4, 0x55, 0x43, 0x84, 0x2f, 0x56, 0xa1, 0x10, 0x8f, 0x85, 0xa9,
	0x49, 0xb1, 0x50, 0x9a, 0x7f, 0xfd, 0x6a, 0x1d, 0x58, 0xd5, 0x77, 0x61, 0xdc, 0xa0, 0xdc, 0x05,
	0x17, 0x18, 0xff, 0x26, 0x05, 0x77, 0x1d, 0xd3, 0xb2, 0x8c, 0xae, 0x36, 0x74, 0xfa, 0xa6, 0x75,
	0xa1, 0xb1, 0x28, 0x63, 0x62, 0xa7, 0x89, 0xd8, 0x55, 0x56, 0xed, 0x8e, 0xc4, 0x78, 0xe9, 0xe4,
	0xf5, 0xab, 0xf5, 0x76, 0x50, 0x52, 0x1a, 0xbd, 0xaf, 0xd8, 0x63, 0xc7, 0xb6, 0x3c, 0xdf, 0xd5,
	0x4d, 0xcb, 0xf7, 0x9e, 0xfc, 0xed, 0x78, 0x5b, 0x3c, 0xcc, 0x4d, 0xec, 0xf9, 0x27, 0xe1, 0x96,
	0x55, 0x73, 0x4e, 0xb7, 0x37, 0x6b, 0x55, 0xad, 0xfd, 0x5c, 0x91, 0xb5, 0x23, 0xa5, 0x5e, 0x6b,
	0x3e, 0x7d, 0x89, 0x56, 0xa8, 0x5a, 0x47, 0x44, 0xab, 0x1a, 0x37, 0x41, 0x1f, 0x43, 0x5e, 0xef,
	0x0e, 0x4c, 0x4b, 0xf3, 0x7c, 0xdd, 0x1f, 0x7a, 0x2c, 0x08, 0x84, 0x50, 0xc5, 0x9e, 0x4a, 0xe8,
	0x28, 0x47, 0x50, 0xf4, 0x45, 0x7c, 0x02, 0x78, 0x4a, 0x68, 0x2f, 0x70, 0x1b, 0x03, 0x67, 0x70,
	0x92, 0x24, 0x73, 0xdb, 0x2b, 0x51, 0xec, 0xc4, 0xc2, 0x15, 0xe5, 0xfb, 0x66, 0xef, 0xd0, 0x63,
	0x24, 0x5c, 0x65, 0x92, 0x58, 0xf7, 0x7c, 0xd7, 0x74, 0x34, 0xc3, 0x62, 0xd9, 0x33, 0x87, 0x89,
	0x2a, 0xa6, 0xc9, 0x16, 0xae, 0x32, 0xe9, 0x7c, 0xb0, 0x3c, 0xc3, 0xf5, 0x31, 0x88, 0xd6, 0x89,
	0x79, 0x32, 0x2d, 0x08, 0x51, 0xb6, 0xe8, 0xae, 0x58, 0x3f, 0xed, 0x1b, 0x9a, 0xdb, 0x1d, 0xe8,
	0xac, 0x42, 0x04, 0x4a, 0x42, 0xdd, 0x81, 0x2e, 0x7e, 0x07, 0x05, 0xd3, 0xd3, 0x06, 0xba, 0xa5,
	0x9f, 0x19, 0x38, 0xe3, 0xd1, 0x7a, 0x30, 0xb6, 0xf3, 0x35, 0x07, 0x83, 0xa1, 0x4f, 0x1a, 0xe4,
	0x4d, 0xaf, 0x11, 0x22, 0xc5, 0x1d, 0x28, 0x38, 0x7a, 0xe7, 0xc2, 0xf0, 0x35, 0x3a, 0x8f, 0x49,
	0x25, 0x18, 0x6e, 0x2e, 0xc3, 0x29, 0x80, 0xf2, 0x14, 0xc5, 0x26, 0xc4, 0x1a, 0x64, 0xcf, 0xaf,
	0xc8, 0xb2, 0x6d, 0x76, 0x49, 0xe9, 0x57, 0x40, 0x73, 0xe7, 0x57, 0x34, 0xed, 0x49, 0x50, 0xc0,
	0x6a, 0x6a, 0x03, 0xfd, 0x1a, 0x47, 0x85, 0x47, 0x4a, 0xbc, 0x02, 0xca, 0x61, 0x62, 0x43, 0xbf,
	0x7e, 0x6a, 0xdc, 0x78, 0xe2, 0x03, 0xc8, 0x87, 0x18, 0xfd, 0x9c, 0x96, 0x72, 0x05, 0x04, 0x0c,
	0x52, 0x3c, 0xf7, 0xf0, 0x7a, 0x18, 0x22, 0x1c, 0x6c, 0x19, 0x3a, 0xaf, 0xe7, 0x09, 0x50, 0x60,
	0x40, 0xc5, 0x97, 0xd9, 0x04, 0xdf, 0x02, 0x88, 0x7c, 0x45, 0x4a, 0xb5, 0x30, 0xb0, 0xa9, 0x93,
	0x54, 0xc3, 0x47, 0xc6, 0x0b, 0x94, 0x0d, 0x5d, 0x24, 0x4a, 0x30, 0xed, 0x7a, 0x1e, 0xa9, 0xcf,
	0x72, 0x41, 0x28, 0xd4, 0xcd, 0x1e, 0xf2, 0x3c, 0x1c, 0x6e, 0x08, 0x33, 0xbf, 0x4f, 0xff, 0xfa,
	0x2f, 0xa4, 0x94, 0xf4, 0x2d, 0x14, 0x30, 0xc3, 0x78, 0x31, 0x34, 0x3c, 0xbf, 0xe1, 0x9d, 0xe1,
	0xcd, 0x9a, 0x4b, 0xdf, 0xe2, 0x1b, 0x55, 0x36, 0x23, 0x51, 0xc0, 0x95, 0xfe, 0x67, 0x8a, 0xac,
	0x01, 0x2c, 0xa0, 0xfe, 0xd0, 0x13, 0xf5, 0x21, 0x35, 0x0a, 0x8b, 0xf9, 0xe9, 0x09, 0x31, 0x8f,
	0x4d, 0xc2, 0x14, 0xbc, 0x47, 0x1b, 0xb0, 0x5e, 0xd3, 0x74, 0xc9, 0xea, 0x07, 0x4b, 0x56, 0xdc,
	0xeb, 0x33, 0x24, 0xb9, 0x07, 0x5e, 0x67, 0x96, 0xfa, 0x9e, 0x0c, 0x97, 0x5a, 0xfc, 0x77, 0x64,
	0xef, 0xf0, 0x0c, 0x24, 0x8d, 0xc8, 0xb3, 0xe4, 0x41, 0x0e, 0x5b, 0xb9, 0x3b, 0xd0, 0x71, 0xbd,
	0x8b, 0x43, 0xc4, 0xf1, 0xb5, 0x53, 0xdd, 0x33, 0xb4, 0xf0, 0x7c, 0x25, 0x8d, 0xc0, 0xf1, 0x4b,
	0xba, 0x67, 0x90, 0x33, 0x9a, 0x07, 0x90, 0xbf, 0xe0, 0x11, 0x54, 0x18, 0x5c, 0xc4, 0x10, 0x3a,
	0x8f, 0x60, 0x0b, 0x92, 0x1e, 0x22, 0xa4, 0xff, 0x9d, 0xa2, 0xbd, 0x92, 0xaa, 0xd6, 0x33, 0x44,
	0x19, 0x40, 0x77, 0xcc, 0xc0, 0x64, 0xb1, 0x03, 0xab, 0xa2, 0x63, 0x52, 0x33, 0x95, 0x6e, 0xbd,
	0x7e, 0xb5, 0xbe, 0xc8, 0x8c, 0x1e, 0xa1, 0x51, 0x56, 0x0f, 0x10, 0xe2, 0xe7, 0x30, 0xcb, 0x44,
	0xc4, 0x4e, 0x79, 0xc2, 0x50, 0x40, 0x8c, 0x8d, 0x81, 0x2c, 0x66, 0xa7, 0x13, 0x40, 0x6a, 0x44,
	0xc4, 0xd8, 0xe2, 0x67, 0xb0, 0x40, 0xe6, 0x03, 0xd9, 0x28, 0x90, 0x4a, 0x9c, 0x95, 0x74, 0x64,
	0xb2, 0x61, 0x8b, 0x1d, 0x63, 0xa2, 0xb8, 0x09, 0xd9, 0x10, 0xc7, 0xf2, 0xd5, 0x62, 0x14, 0xdb,
	0x0c, 0x8a, 0x32, 0x41, 0x23, 0xe9, 0xaf, 0xc1, 0x3c, 0x37, 0x7e, 0x1c, 0xdc, 0x5f, 0x43, 0xc6,
	0x65, 0xaf, 0x2c, 0x52, 0x39, 0x01, 0x8c, 0x81, 0x42, 0x88, 0xf4, 0x77, 0x20, 0x4f, 0x55, 0xdd,
	0x27, 0x33, 0x2c, 0x11, 0x43, 0xac, 0x60, 0x8b, 0x62, 0x88, 0x0f, 0x8a, 0xa9, 0x78, 0x50, 0x08,
	0x30, 0xfd, 0xc2, 0xec, 0xb2, 0xa5, 0x1b, 0x3f, 0x92, 0x54, 0x62, 0xf8, 0x74, 0xcc, 0x64, 0xb5,
	0x4f, 0xb3, 0x54, 0x62, 0xf8, 0x58, 0x79, 0xd5, 0xfc, 0x95, 0x21, 0xf5, 0xa0, 0xc0, 0xf5, 0xef,
	0x39, 0x58, 0x01, 0x52, 0xb1, 0x6b, 0x1d, 0xbb, 0x4b, 0x15, 0x98, 0x41, 0x59, 0x42, 0x29, 0xdb,
	0x5d, 0x52, 0x9c, 0xbe, 0xe0, 0xe3, 0x65, 0xe6, 0x05, 0x09, 0x95, 0x75, 0xc8, 0xbd, 0xc0, 0x95,
	0x80, 0x16, 0x79, 0x23, 0x8f, 0x80, 0x90, 0x88, 0x74, 0xa9, 0x08, 0xcb, 0xfb, 0x86, 0xcf, 0xbc,
	0xc2, 0x99, 0xeb, 0x4b, 0x98, 0xc1, 0xb6, 0x08, 0x4e, 0xe5, 0x96, 0xf8, 0xa4, 0xc3, 0x54, 0x42,
	0x14, 0x21, 0x9d, 0x40, 0x4e, 0xd9, 0x51, 0x5c, 0xfb, 0xac, 0xae, 0x9f, 0x1a, 0x7d, 0xf1, 0x36,
	0xcc, 0x72, 0x56, 0xca, 0x22, 0xf6, 0x86, 0xeb, 0x72, 0xc7, 0xb5, 0xcf, 0x34, 0x4b, 0x1f, 0xd0,
	0xa9, 0x9f, 0x45, 0x19, 0x4c, 0x68, 0xea, 0x03, 0x52, 0x6a, 0xf6, 0x71, 0x6b, 0xa2, 0x61, 0x16,
	0xd1, 0x17, 0xe9, 0x5f, 0xa4, 0x02, 0x2f, 0xa8, 0xef, 0xdf, 0x0b, 0x9f, 0x07, 0x5d, 0xa6, 0xf9,
	0x68, 0xe0, 0x46, 0xc2, 0xb4, 0x48, 0xda, 0x70, 0x66, 0xc4, 0x86, 0x4f, 0x60, 0x49, 0x8d, 0x6c,
	0x18, 0xa6, 0xd3, 0xcf, 0x20, 0xed, 0x1a, 0x2f, 0xbc, 0x78, 0x6d, 0x1a, 0x4b, 0xdb, 0x84, 0x2f,
	0x6d, 0x06, 0xae, 0x56, 0xdf, 0xca, 0xd5, 0xd8, 0x65, 0xea, 0xbb, 0xba, 0x4c, 0x8d, 0xbb, 0xec,
	0x07, 0x10, 0xea, 0x66, 0xaf, 0x62, 0xf4, 0x8d, 0x50, 0xe3, 0xd1, 0xf4, 0x9c, 0xfa, 0xbd, 0xd2,
	0xb3, 0xb4, 0x0f, 0x4b, 0x49, 0xd9, 0x58, 0xbb, 0x47, 0xc9, 0xc5, 0xe5, 0x76, 0x28, 0x38, 0x86,
	0x8d, 0x56, 0x99, 0x1f, 0x48, 0xed, 0x1c, 0x30, 0xdf, 0x6b, 0x26, 0x93, 0x9e, 0xc2, 0xf2, 0x88,
	0x6c, 0xac, 0xe5, 0xe3, 0x91, 0x2c, 0xb1, 0x32, 0xa2, 0xe6, 0x48, 0xae, 0xf8, 0xef, 0x53, 0x00,
	0x75, 0xb3, 0xd7, 0xbe, 0xc6, 0xc2, 0xc9, 0xe9, 0x59, 0xcf, 0xd5, 0x07, 0x86, 0xa7, 0xd9, 0x17,
	0x2c, 0x46, 0x33, 0x94, 0xd0, 0xba, 0xc0, 0x1b, 0xd0, 0xa1, 0x45, 0xaa, 0x63, 0x2d, 0x02, 0xd1,
	0x29, 0xbb, 0xc0, 0x18, 0xd5, 0x00, 0xbb, 0x09, 0x4b, 0x61, 0x99, 0xad, 0x9d, 0x86, 0x68, 0x9a,
	0xee, 0x17, 0x43, 0x56, 0x89, 0xc3, 0x87, 0x75, 0x3c, 0x87, 0x4f, 0x53, 0x7c, 0xc8, 0x0a, 0xf1,
	0x77, 0x20, 0x73, 0x7a, 0xe3, 0x53, 0x10, 0x5b, 0xf7, 0xc8, 0x7b, 0xeb, 0x42, 0xfc, 0x02, 0x84,
	0x40, 0xcd, 0x10, 0x32, 0x4b, 0x20, 0xf3, 0x8c, 0x5e, 0x62, 0xc8, 0xaf, 0x40, 0xe4, 0x94, 0x0c,
	0xb0, 0x73, 0x04, 0x2b, 0x44, 0x3a, 0x46, 0x68, 0x4e, 0xc5, 0x00, 0x9d, 0xa1, 0xe8, 0x48, 0x43,
	0x86, 0x16, 0x60, 0xda, 0xf7, 0x6c, 0x52, 0xf6, 0xa5, 0x11, 0x7e, 0x94, 0xfe, 0xf3, 0x0c, 0x31,
	0x35, 0x62, 0xa6, 0xfe, 0x08, 0xf2, 0xcc, 0x8a, 0xbe, 0xed, 0xeb, 0x7d, 0x66, 0xed, 0x1c, 0xa5,
	0xb5, 0x31, 0x29, 0xee, 0x8d, 0xa9, 0xb7, 0xf1, 0xc6, 0xf4, 0x5b, 0x78, 0xa3, 0x97, 0xb4, 0x6e,
	0xc8, 0xaa, 0x8e, 0xf5, 0x46, 0x84, 0x9f, 0x49, 0x78, 0xa3, 0x3a, 0xce, 0x1b, 0xb3, 0xbf, 0xdb,
	0x1b, 0x73, 0xef, 0xe0, 0x8d, 0xcc, 0x3b, 0x79, 0x23, 0x3b, 0xc1, 0x1b, 0xcb, 0x30, 0xd3, 0x75,
	0x6d, 0xc7, 0x23, 0xb5, 0x74, 0x1a, 0xd1, 0x17, 0xbc, 0xf7, 0xb5, 0x6c, 0xed, 0x74, 0xd8, 0xf3,
	0x48, 0xc5, 0x9c, 0x46, 0xb3, 0x96, 0x5d, 0x1a, 0xf6, 0xc8, 0x89, 0x3e, 0xc9, 0x59, 0xb4, 0x52,
	0x4e, 0x23, 0xf6, 0x86, 0x9d, 0xea, 0xb2, 0x63, 0xce, 0x34, 0x29, 0x47, 0x71, 0xbe, 0x0b, 0xcf,
	0xbc, 0x68, 0x2d, 0x9c, 0x46, 0xd9, 0xe0, 0xa4, 0x8b, 0x9f, 0x4f, 0x7b, 0x3b, 0xa4, 0x06, 0x0e,
	0x3d, 0xb8, 0xb7, 0x83, 0xdb, 0x32, 0xe6, 0xd6, 0xf6, 0x37, 0xa4, 0xea, 0x4d, 0x23, 0x06, 0xdf,
	0xda, 0xfe, 0x86, 0x63, 0x6f, 0xef, 0xee, 0x92, 0xf3, 0xc7, 0x90, 0xbd, 0xbd, 0xbb, 0xcb, 0xb1,
	0x77, 0xb7, 0xb6, 0xc8, 0x09, 0x63, 0xc8, 0xde, 0xdd, 0xda, 0xc2, 0x99, 0x3f, 0x10, 0xfe, 0x68,
	0x7b, 0x87, 0x9c, 0x1c, 0xa6, 0x11, 0x6b, 0x81, 0x29, 0x3c, 0x60, 0x77, 0xeb, 0x5b, 0x72, 0x30,
	0x18, 0x01, 0x76, 0xb7, 0xbe, 0xc5, 0x4b, 0x7d, 0x18, 0xa0, 0xb8, 0xe8, 0x27, 0xc7, 0x80, 0x5c,
	0x84, 0x36, 0xf4, 0x6b, 0xa9, 0x45, 0x43, 0x9a, 0x16, 0xe8, 0x38, 0x0c, 0xf0, 0x12, 0x17, 0x5e,
	0xb0, 0x14, 0xd0, 0x5c, 0xdf, 0xec, 0x91, 0x73, 0x08, 0x01, 0xa6, 0x2f, 0x8c, 0x1b, 0x12, 0xc4,
	0x79, 0x84, 0x1f, 0xb1, 0x4b, 0x4c, 0xab, 0x6b, 0x06, 0xb7, 0x79, 0xf4, 0x45, 0xfa, 0xd7, 0x29,
	0xc8, 0xc8, 0x96, 0xd9, 0x21, 0x77, 0x95, 0x3f, 0xc0, 0x72, 0x74, 0x94, 0xc4, 0x6d, 0x67, 0x53,
	0xfc, 0x76, 0x76, 0xf4, 0x84, 0x2a, 0x96, 0xe3, 0x5d, 0xa3, 0x87, 0xc4, 0x50, 0x4a, 0xb4, 0xff,
	0x4c, 0x1c, 0x8c, 0xb0, 0x13, 0x25, 0xee, 0x60, 0x44, 0x82, 0x02, 0xbb, 0xf8, 0x64, 0xc7, 0x23,
	0x74, 0xfd, 0xa5, 0xb7, 0xa1, 0xc7, 0xf4, 0x8c, 0xe4, 0x37, 0x29, 0x58, 0xc0, 0xda, 0x96, 0xfb,
	0xba, 0xe7, 0xfd, 0x01, 0x94, 0xde, 0x84, 0x25, 0x4b, 0xf7, 0xcd, 0x4b, 0x43, 0x8b, 0xba, 0x30,
	0xbb, 0x2c, 0x35, 0x2c, 0x52, 0x56, 0x7d, 0x3b, 0x3c, 0x8b, 0x93, 0xfe, 0x65, 0x1a, 0xa0, 0xd6,
	0x0b, 0xed, 0x29, 0x43, 0x16, 0xcb, 0xe7, 0xaf, 0x7e, 0xc5, 0x68, 0xf3, 0x81, 0x61, 0xd8, 0x57,
	0x13, 0xae, 0x67, 0x33, 0x06, 0xe3, 0x8b, 0x8d, 0x71, 0xa7, 0x58, 0x6f, 0xb7, 0x21, 0xc2, 0x03,
	0x4b, 0x9e, 0x6a, 0xf5, 0xfe, 0xdf, 0xce, 0x2e, 0x92, 0xe2, 0x27, 0x9e, 0x38, 0xfc, 0x3a, 0xc5,
	0x86, 0x6f, 0x5a, 0x3d, 0x9b, 0x55, 0x4e, 0xec, 0xae, 0x31, 0xb0, 0x50, 0x49, 0x7d, 0xfd, 0x6a,
	0xbd, 0x35, 0xf9, 0xf4, 0x23, 0x34, 0xe5, 0x66, 0x68, 0xc7, 0x27, 0xa3, 0x07, 0x20, 0x72, 0xb3,
	0x56, 0x66, 0xa7, 0x20, 0xaa, 0xbc, 0xff, 0x92, 0x5a, 0x8e, 0x38, 0xe0, 0x9f, 0xa6, 0x60, 0xb1,
	0x43, 0x63, 0x45, 0x8b, 0x54, 0xa1, 0x7b, 0x82, 0x5b, 0x91, 0x2a, 0x5c, 0x38, 0x95, 0x8e, 0x5f,
	0xbf, 0x5a, 0x47, 0xef, 0x4f, 0xa3, 0x72, 0xbd, 0xa8, 0xaa, 0xb5, 0xf2, 0x4b, 0xb4, 0xc0, 0xf4,
	0x08, 0xda, 0x4b, 0xff, 0x36, 0x05, 0xf9, 0x5a, 0x8f, 0x99, 0x0d, 0x2b, 0xfb, 0x90, 0xdd, 0x57,
	0x86, 0x9b, 0xc5, 0x09, 0x81, 0x41, 0x8e, 0x6c, 0x71, 0x9d, 0xfa, 0x8e, 0xd1, 0x29, 0xfe, 0x0c,
	0x16, 0x4d, 0x4f, 0xb3, 0xed, 0x53, 0xfe, 0x9c, 0x64, 0xfa, 0x0d, 0xe7, 0x24, 0x0b, 0xa6, 0xd7,
	0xb2, 0x4f, 0xa3, 0xa3, 0x12, 0xe9, 0xbf, 0xa5, 0x60, 0x3e, 0xd0, 0x59, 0x29, 0xb3, 0xef, 0x1b,
	0xc6, 0x2a, 0x91, 0x9a, 0xa4, 0xc4, 0x3f, 0x4f, 0xc1, 0xf2, 0xc0, 0x18, 0x9c, 0x1a, 0x6e, 0x22,
	0xee, 0xa6, 0xfe, 0xbf, 0x9d, 0x99, 0x2d, 0x52, 0x7d, 0xb8, 0xd8, 0x95, 0x5e, 0xc0, 0x62, 0xad,
	0xd7, 0x1e, 0x5a, 0x96, 0xd1, 0x3f, 0xbe, 0x26, 0x07, 0x51, 0x3d, 0x5b, 0xfc, 0x0a, 0xb2, 0x7d,
	0xbb, 0xa3, 0xf7, 0x35, 0xdf, 0x70, 0x26, 0x7d, 0x81, 0x90, 0x21, 0x88, 0xb6, 0xe1, 0x88, 0x9b,
	0x00, 0xae, 0x31, 0xb0, 0x7d, 0x83, 0xc0, 0x27, 0x7c, 0xea, 0x90, 0xa5, 0x90, 0xb6, 0xe1, 0x48,
	0xff, 0x28, 0x05, 0x0b, 0x41, 0x9f, 0xfb, 0x48, 0x26, 0x3d, 0xe2, 0x4d, 0xb4, 0x3d, 0x74, 0x3b,
	0xc6, 0xa4, 0xee, 0x18, 0x5b, 0xdc, 0x82, 0x5c, 0xd7, 0xf0, 0x7c, 0xd3, 0xa2, 0x57, 0x8a, 0x13,
	0x7a, 0xe3, 0x31, 0x78, 0x85, 0x18, 0xf8, 0xc3, 0x60, 0x97, 0x33, 0xf0, 0x87, 0xa4, 0x84, 0xf2,
	0xfb, 0x6c, 0x87, 0x89, 0x1f, 0xa5, 0xff, 0x30, 0x8d, 0x63, 0x94, 0xea, 0x44, 0x14, 0xfa, 0x76,
	0xcc, 0xd7, 0x2c, 0x77, 0xa2, 0x94, 0x46, 0x91, 0xf2, 0xb8, 0xef, 0x5a, 0xfe, 0x22, 0x05, 0x70,
	0x79, 0x4d, 0x4f, 0xfa, 0x7a, 0x36, 0xd3, 0x90, 0x15, 0xcc, 0x23, 0xa6, 0x2e, 0x69, 0xaf, 0x5f,
	0xad, 0xff, 0xf5, 0x37, 0xcc, 0xc2, 0x48, 0xa5, 0xcd, 0x48, 0x9f, 0x31, 0x13, 0xb1, 0x7d, 0xd4,
	0x6c, 0xca, 0x75, 0x4d, 0x6e, 0x96, 0x8b, 0x0a, 0x75, 0xfa, 0xf1, 0x49, 0xbd, 0xd8, 0x7c, 0x89,
	0xb2, 0x97, 0xa1, 0x5b, 0xff, 0x2c, 0x05, 0x99, 0x33, 0xd7, 0xa0, 0x7a, 0x4d, 0xf3, 0xb9, 0x21,
	0xe1, 0x8e, 0xd2, 0x2f, 0x5e, 0xbf, 0x5a, 0x7f, 0xfe, 0xa3, 0x68, 0xb5, 0x8f, 0xe4, 0x97, 0x68,
	0xee, 0xcc, 0x35, 0x88, 0x46, 0x07, 0x30, 0x7f, 0xe9, 0xc6, 0x26, 0x47, 0x9a, 0xcf, 0xf6, 0xfc,
	0x4d, 0xd3, 0x48, 0x3a, 0xce, 0x5f, 0x72, 0x5c, 0xe9, 0x07, 0xc8, 0xd6, 0x7a, 0x65, 0xe5, 0x88,
	0x88, 0x7d, 0xbf, 0xeb, 0x88, 0xa4, 0xe1, 0x5c, 0x50, 0x74, 0x1c, 0x64, 0x74, 0x4d, 0xf7, 0xc7,
	0xe8, 0xe0, 0x3f, 0x66, 0xa0, 0x10, 0x9b, 0xcc, 0x6f, 0x7d, 0x7c, 0x58, 0x1f, 0x7f, 0x7c, 0xf8,
	0x76, 0x8b, 0xda, 0xc8, 0x21, 0xe2, 0x13, 0x98, 0x0b, 0xaa, 0x2c, 0x7a, 0x82, 0x38, 0xcf, 0x45,
	0x7c, 0x72, 0x01, 0x8f, 0xb2, 0xe7, 0x2c, 0x2b, 0xc5, 0x7e, 0xaf, 0x93, 0xf7, 0x5f, 0xa7, 0x20,
	0x6f, 0xf6, 0x46, 0x16, 0xad, 0xa0, 0x55, 0xb8, 0x0c, 0x95, 0xea, 0xaf, 0x5f, 0xad, 0x1f, 0xbc,
	0x4b, 0x2e, 0x9c, 0x90, 0x0c, 0xf1, 0x92, 0xf5, 0x12, 0x81, 0x19, 0x55, 0x2f, 0x7f, 0x92, 0x82,
	0x79, 0xb3, 0x17, 0x16, 0x09, 0x58, 0x89, 0x59, 0xde, 0x97, 0xfc, 0xe2, 0x55, 0x6a, 0xbe, 0x7e,
	0xb5, 0xfe, 0xf3, 0xf7, 0xa0, 0x46, 0x90, 0x93, 0xf3, 0x26, 0xbf, 0x34, 0xfe, 0x79, 0x0a, 0x16,
	0x23, 0x55, 0x1c, 0x66, 0x92, 0x39, 0xa2, 0xcd, 0x72, 0x5c, 0x1b, 0xba, 0x2c, 0x95, 0x0e, 0x5f,
	0xbf, 0x5a, 0x6f, 0xbc, 0x37, 0x7d, 0x34, 0xa5, 0xfc, 0x12, 0xcd, 0x07, 0x2a, 0x29, 0x31, 0xfb,
	0xf8, 0x64, 0xd2, 0x53, 0x8d, 0x32, 0x71, 0xfb, 0x44, 0xf9, 0xe0, 0xbd, 0xd9, 0x87, 0xa6, 0x0e,
	0x62, 0x1f, 0x2e, 0x2d, 0xff, 0x31, 0xe4, 0xcc, 0x9e, 0xd6, 0x71, 0x86, 0x54, 0x8d, 0x6c, 0x2c,
	0xfd, 0x07, 0xf3, 0xbf, 0xf4, 0xf4, 0xf5, 0xab, 0xf5, 0xfd, 0xf7, 0xa0, 0x43, 0x59, 0x39, 0x7a,
	0x89, 0xb2, 0x66, 0xaf, 0xec, 0x0c, 0x79, 0xef, 0xe8, 0x8e, 0xa3, 0xb9, 0x38, 0x17, 0x50, 0x25,
	0x20, 0xee, 0x1d, 0x3e, 0x51, 0xbc, 0x37, 0xef, 0x14, 0x15, 0x45, 0x43, 0x72, 0xa5, 0x86, 0x88,
	0x77, 0xf8, 0x2e, 0xd8, 0x69, 0x7c, 0x05, 0x96, 0x42, 0x69, 0xdc, 0x01, 0xd3, 0xd7, 0xc9, 0x03,
	0xa6, 0xa5, 0xcd, 0xd1, 0x9e, 0xa3, 0xd3, 0xa5, 0xdf, 0xa6, 0x40, 0xa4, 0xae, 0x0f, 0x4e, 0x74,
	0xc8, 0xb8, 0x3f, 0x83, 0x05, 0x16, 0x91, 0x7d, 0xfe, 0x16, 0xbd, 0x80, 0x0a, 0x94, 0x5c, 0x67,
	0x97, 0xe9, 0xb1, 0x4b, 0x83, 0xa9, 0xf8, 0x55, 0xd1, 0x3d, 0x80, 0x60, 0x82, 0x75, 0xaf, 0xd9,
	0x62, 0x9c, 0xa5, 0x94, 0x5a, 0xf7, 0x1a, 0xb3, 0xad, 0xe1, 0x80, 0x96, 0x56, 0x1e, 0x5b, 0x99,
	0xb3, 0xd6, 0x70, 0x40, 0x2a, 0x2a, 0x4f, 0xbc, 0x0f, 0xb9, 0xf3, 0x2b, 0x2d, 0xac, 0x1a, 0x67,
	0x28, 0xff, 0xfc, 0x4a, 0xa1, 0x15, 0xa2, 0xf4, 0xe7, 0x29, 0x28, 0xe0, 0xf9, 0x4c, 0xb6, 0x3f,
	0x44, 0x67, 0x0d, 0x56, 0xe2, 0xbb, 0xa5, 0xe4, 0x19, 0xde, 0xdb, 0x6f, 0x98, 0x96, 0xf9, 0x0d,
	0x53, 0x98, 0x2c, 0x1f, 0x40, 0xde, 0xb4, 0x1c, 0xf2, 0xa5, 0x12, 0x19, 0x12, 0xfb, 0x80, 0xd5,
	0xb4, 0x1c, 0xc5, 0xb5, 0x9d, 0x5a, 0xf7, 0x5a, 0xfa, 0xfb, 0x29, 0x28, 0xa8, 0x03, 0xdd, 0xf5,
	0xc3, 0x4c, 0xf3, 0x1d, 0xac, 0x85, 0x6d, 0xf0, 0x26, 0x91, 0xed, 0x00, 0xaf, 0xb5, 0x73, 0x9b,
	0x79, 0xa8, 0x80, 0x6e, 0x31, 0x09, 0x0d, 0xbd, 0x43, 0x37, 0x83, 0xd7, 0x07, 0xb6, 0xe7, 0x8b,
	0xdf, 0xc0, 0x9d, 0xf1, 0x4d, 0x83, 0x4f, 0x30, 0x0b, 0x68, 0x79, 0xa4, 0x65, 0xd3, 0xf0, 0xa5,
	0x3f, 0x4d, 0xc1, 0x42, 0x39, 0x5e, 0x92, 0x8b, 0xdf, 0x73, 0x7a, 0x58, 0xba, 0x4f, 0xcd, 0xae,
	0xb1, 0xc2, 0x9d, 0xe9, 0x71, 0x9b, 0x49, 0x6b, 0xea, 0x3e, 0x71, 0x02, 0x93, 0x21, 0xfe, 0x11,
	0x2c, 0xd0, 0x32, 0xd2, 0x3b, 0x37, 0x1d, 0xbe, 0xc6, 0x59, 0x8a, 0xf6, 0x19, 0xa1, 0x1b, 0xd0,
	0x7c, 0x84, 0x25, 0x9b, 0x81, 0xbf, 0x4c, 0x81, 0x80, 0x11, 0xb1, 0xf8, 0x22, 0x3b, 0x62, 0xb3,
	0x93, 0x8c, 0xae, 0x1c, 0x26, 0x06, 0xb1, 0xf5, 0x05, 0x08, 0xd1, 0x2e, 0x8e, 0x5b, 0xec, 0x0a,
	0x68, 0x9e, 0x45, 0x51, 0x70, 0xe0, 0xfd, 0x53, 0x58, 0xf0, 0xb0, 0xd5, 0xb9, 0x35, 0x65, 0x9a,
	0x57, 0x30, 0xe6, 0x12, 0x54, 0xf0, 0x62, 0x1e, 0x2a, 0x8e, 0xdb, 0x47, 0xa5, 0xf9, 0x5a, 0x29,
	0x61, 0xcb, 0xd1, 0xfd, 0xce, 0x2e, 0x2c, 0xe2, 0x84, 0xd1, 0x8b, 0x0d, 0xf1, 0x01, 0xe4, 0x71,
	0xd6, 0x4a, 0x8c, 0x10, 0x3a, 0xce, 0x90, 0x0d, 0x50, 0xfa, 0x93, 0x14, 0x2c, 0xb3, 0x4c, 0x17,
	0x6f, 0xfa, 0x29, 0x2c, 0x60, 0x67, 0x0d, 0x74, 0xea, 0x2b, 0x1c, 0x6b, 0xb4, 0x35, 0x8e, 0xbf,
	0x86, 0x8e, 0x1d, 0x84, 0x67, 0x10, 0x07, 0xf3, 0xad, 0x3e, 0x17, 0x92, 0x0c, 0xd6, 0xb6, 0xfa,
	0x18, 0x26, 0x41, 0x81, 0x25, 0x72, 0xf7, 0x8a, 0x9b, 0x8a, 0x39, 0x4a, 0x44, 0x57, 0x38, 0x70,
	0x37, 0x60, 0x3e, 0x4c, 0x31, 0x3d, 0xa2, 0xc3, 0x2a, 0xcc, 0x31, 0x3d, 0x83, 0xf3, 0x97, 0x40,
	0xed, 0xff, 0x35, 0x0d, 0x0b, 0x51, 0x36, 0x79, 0xb7, 0xcb, 0xcf, 0xf7, 0x5b, 0xbd, 0x7c, 0x0d,
	0xd9, 0xdf, 0x7d, 0x03, 0x9a, 0x09, 0x2f, 0x40, 0xef, 0x12, 0x78, 0xec, 0xfe, 0x33, 0x13, 0x5e,
	0x9a, 0x7c, 0x07, 0x39, 0xbe, 0x1c, 0x98, 0xe1, 0xf5, 0x1a, 0x4d, 0x90, 0x88, 0xa5, 0x36, 0x62,
	0xaa, 0xc7, 0xfc, 0x61, 0xc0, 0x2c, 0x7f, 0xaa, 0x9f, 0x8c, 0x7b, 0x6e, 0xff, 0xbe, 0x0d, 0x99,
	0x70, 0x51, 0x9b, 0xe3, 0x77, 0x0c, 0x23, 0x91, 0x84, 0xe6, 0x3a, 0x6c, 0x35, 0xfa, 0x29, 0xe4,
	0x46, 0x97, 0xe4, 0x35, 0xda, 0x6c, 0x5c, 0x20, 0x21, 0xf0, 0xa3, 0x85, 0xf4, 0x7b, 0x98, 0x4f,
	0x2c, 0x63, 0x59, 0x7e, 0x19, 0x8b, 0xbb, 0x1f, 0xe5, 0xf5, 0xd1, 0x15, 0xe7, 0x1f, 0xa4, 0x60,
	0x91, 0x5b, 0x72, 0xde, 0xef, 0xa5, 0xea, 0xd7, 0x89, 0x4b, 0xd5, 0x5b, 0xc9, 0x65, 0x2b, 0x76,
	0xb5, 0x2a, 0x3d, 0x85, 0xe5, 0x11, 0x55, 0xde, 0x78, 0x73, 0x31, 0x82, 0xe6, 0x6e, 0x2e, 0x7a,
	0x70, 0x3b, 0x64, 0xc7, 0x6f, 0x83, 0xea, 0xe3, 0x6f, 0x83, 0x7e, 0xbf, 0x78, 0x95, 0x54, 0xb8,
	0x33, 0xbe, 0x1f, 0xac, 0xf9, 0x5e, 0x72, 0xe1, 0xfe, 0x30, 0xd1, 0xc9, 0x84, 0xfb, 0xa1, 0xbf,
	0x05, 0x2b, 0x23, 0x90, 0xf7, 0x7b, 0x4b, 0xf4, 0x0c, 0xd6, 0x26, 0xf4, 0x80, 0xf5, 0xfe, 0x0e,
	0x32, 0x28, 0x6e, 0xf1, 0x7b, 0x13, 0x14, 0x0f, 0xec, 0x1e, 0x3c, 0x49, 0xff, 0x2c, 0x05, 0xf3,
	0x31, 0x07, 0x7b, 0xe2, 0x27, 0x30, 0x8f, 0xab, 0x02, 0xff, 0x5a, 0xa3, 0x9f, 0xa4, 0x78, 0xec,
	0xeb, 0xbd, 0xbc, 0x35, 0x1c, 0xb4, 0xaf, 0x15, 0x4a, 0xc3, 0xb9, 0x95, 0xa1, 0xc8, 0x71, 0x3d,
	0xfb, 0x79, 0x07, 0x10, 0x0c, 0x39, 0xa7, 0x0f, 0xe4, 0xb8, 0x91, 0x9c, 0xe9, 0x50, 0x0e, 0x4a,
	0xca, 0x71, 0x03, 0x39, 0xe9, 0x50, 0x0e, 0xa2, 0x72, 0xa4, 0x0e, 0x57, 0x65, 0xd1, 0x3b, 0xf0,
	0x1f, 0x21, 0x2e, 0x1a, 0x5c, 0xfc, 0x45, 0x9d, 0xd0, 0x70, 0x4e, 0x04, 0xc5, 0x9d, 0x44, 0x0f,
	0x11, 0x3c, 0x8a, 0x88, 0xff, 0x9a, 0xe2, 0x26, 0x07, 0xbb, 0xa5, 0x7e, 0xbf, 0xdf, 0x3f, 0xa4,
	0x3d, 0xc7, 0xe8, 0xc4, 0x8b, 0x80, 0x78, 0x7d, 0x49, 0x00, 0xdc, 0x9c, 0x9e, 0x7e, 0x8b, 0x39,
	0x2d, 0x6e, 0xc0, 0x0c, 0x7e, 0xf2, 0xd8, 0xea, 0xbb, 0x3c, 0x06, 0xed, 0x21, 0x0a, 0x91, 0xfe,
	0x5e, 0x8a, 0x0b, 0x7b, 0x6e, 0x8c, 0xd8, 0x68, 0x9b, 0x6f, 0x31, 0x4c, 0x7e, 0x3c, 0x7b, 0x5c,
	0xce, 0x98, 0xe2, 0x73, 0xea, 0xb8, 0x0e, 0xb8, 0xb4, 0xf1, 0x9f, 0x52, 0x9c, 0xdf, 0xc2, 0xaa,
	0x92, 0xec, 0xe6, 0x7f, 0xf4, 0x5a, 0xb4, 0x0e, 0x85, 0x77, 0x3b, 0x63, 0x4c, 0x8a, 0xcd, 0x71,
	0xc7, 0x15, 0xd2, 0x31, 0x7c, 0x38, 0x3a, 0x90, 0x77, 0xc9, 0x4d, 0xb1, 0xd1, 0x47, 0x91, 0xd8,
	0xe1, 0x32, 0x07, 0x27, 0xf7, 0xfd, 0xa6, 0xa7, 0x5f, 0xc0, 0xbd, 0xc9, 0x9d, 0x60, 0xed, 0xff,
	0x68, 0x64, 0x4d, 0x78, 0x30, 0x49, 0xfd, 0x51, 0x2f, 0x6f, 0xfc, 0xab, 0x14, 0x40, 0x4d, 0x51,
	0x5c, 0xdb, 0xb7, 0x3b, 0x76, 0x5f, 0x14, 0x20, 0x5f, 0x53, 0x14, 0xd4, 0x6a, 0xb7, 0xb4, 0x66,
	0xab, 0x29, 0x0b, 0x1f, 0xf0, 0x94, 0x5a, 0xb9, 0xa1, 0x08, 0xa9, 0x18, 0x45, 0x39, 0xde, 0x11,
	0xd2, 0xe2, 0x02, 0xe4, 0x02, 0x4a, 0xbb, 0xac, 0x08, 0xb3, 0x3c, 0xe1, 0xa8, 0xa2, 0x08, 0x8b,
	0x3c, 0x61, 0x1f, 0xc9, 0xc2, 0x43, 0x9e, 0x20, 0xab, 0x8a, 0xb0, 0x2d, 0xce, 0x13, 0x3d, 0x08,
	0xa1, 0x78, 0x20, 0x3c, 0x16, 0x45, 0x98, 0xe7, 0xfb, 0x3d, 0xde, 0x13, 0xbe, 0xdf, 0x78, 0x02,
	0x39, 0xfc, 0xdc, 0xf0, 0xce, 0xc8, 0xf9, 0xcc, 0x6d, 0x10, 0xf1, 0xab, 0xd6, 0x50, 0xf7, 0xe9,
	0xae, 0x92, 0xa9, 0x3c, 0x42, 0x97, 0xcb, 0x07, 0x2d, 0x21, 0xb5, 0xf1, 0xdb, 0x79, 0xc8, 0x86,
	0xa6, 0x17, 0x17, 0xa1, 0x50, 0x54, 0x6a, 0x9a, 0xda, 0x2e, 0xb6, 0x8f, 0x54, 0xad, 0xf5, 0x54,
	0xf8, 0x00, 0xf7, 0xc9, 0x91, 0x64, 0x84, 0x84, 0x94, 0xb8, 0x06, 0xb7, 0x39, 0x5a, 0xad, 0x79,
	0x5c, 0xac, 0xd7, 0x2a, 0x5a, 0x11, 0xed, 0x0b, 0x53, 0xe2, 0x3d, 0xb8, 0xc3, 0xe3, 0x4f, 0x6a,
	0x6a, 0x5b, 0xd5, 0x8a, 0x75, 0x24, 0x17, 0x2b, 0xcf, 0x85, 0x69, 0xf1, 0x0e, 0xdc, 0xe2, 0x7b,
	0x38, 0x6a, 0x6b, 0xad, 0xaa, 0xd6, 0x90, 0x1b, 0x42, 0x5a, 0x5c, 0x85, 0x65, 0x8e, 0xd5, 0x6c,
	0xb5, 0xb5, 0x6a, 0xeb, 0xa8, 0x59, 0x11, 0x66, 0xc4, 0xfb, 0xb0, 0x36, 0xda, 0x08, 0xc9, 0x6a,
	0xeb, 0x08, 0x95, 0x65, 0x61, 0x56, 0xfc, 0x10, 0x56, 0xf9, 0x3e, 0xc9, 0x49, 0x24, 0xd3, 0x4a,
	0x98, 0x4b, 0x68, 0x74, 0x8c, 0xaa, 0x5a, 0xad, 0x12, 0xb2, 0x33, 0xe2, 0x27, 0xf0, 0x80, 0x63,
	0xd7, 0xb7, 0x35, 0x55, 0xde, 0x6f, 0xc8, 0xcd, 0x36, 0x8f, 0xca, 0x8a, 0x1f, 0xc3, 0x7a, 0x6c,
	0xc8, 0x6d, 0x19, 0x55, 0x8b, 0x65, 0x99, 0x07, 0x41, 0x42, 0xcf, 0x60, 0x5f, 0x1f, 0xf0, 0x73,
	0xa3, 0xfc, 0x5a, 0xb3, 0xda, 0x0a, 0xf9, 0xf9, 0x64, 0x27, 0x55, 0xad, 0xbe, 0x1d, 0x2a, 0xc3,
	0x40, 0x85, 0x51, 0x10, 0xb9, 0x9f, 0x89, 0x49, 0x9a, 0x9f, 0x00, 0x8a, 0xa9, 0xb3, 0x20, 0x7e,
	0x06, 0x52, 0xa2, 0xbb, 0x40, 0x25, 0x6c, 0xfc, 0x00, 0x27, 0x88, 0x9f, 0xc3, 0xc7, 0x23, 0xb8,
	0xc3, 0x51, 0xe0, 0xa2, 0xb8, 0x0e, 0x77, 0x39, 0x60, 0xb5, 0xde, 0x7a, 0xa6, 0x3d, 0x95, 0x9f,
	0x87, 0x00, 0x51, 0x7c, 0x00, 0x1f, 0x26, 0x01, 0x31, 0xc5, 0x97, 0x12, 0xce, 0x3a, 0x28, 0x36,
	0x2b, 0xf5, 0x48, 0xe5, 0xe5, 0x44, 0xe4, 0x1d, 0x3c, 0xd3, 0x14, 0xd4, 0xda, 0x27, 0x51, 0x79,
	0x2b, 0xd1, 0x94, 0x8c, 0x25, 0x72, 0xce, 0xed, 0xc4, 0x28, 0x9a, 0xcf, 0x54, 0xb9, 0x8c, 0x5b,
	0x57, 0x6b, 0xf5, 0x98, 0x17, 0x57, 0x12, 0x4a, 0xb6, 0xeb, 0xaa, 0x56, 0x2e, 0xf1, 0x88, 0xd5,
	0x24, 0xa2, 0xac, 0x24, 0x10, 0x77, 0x12, 0xba, 0x14, 0xcb, 0x75, 0x9e, 0xbd, 0x96, 0x30, 0xd4,
	0x33, 0x54, 0x6b, 0xee, 0xf3, 0x80, 0xbb, 0xe2, 0x47, 0x70, 0x6f, 0x04, 0x10, 0xf3, 0xde, 0x87,
	0x09, 0x88, 0x82, 0x5a, 0x27, 0xcf, 0xe3, 0x90, 0x7b, 0xa2, 0x04, 0xf7, 0x79, 0xc7, 0x29, 0x78,
	0xc8, 0x71, 0x4d, 0xef, 0x27, 0x54, 0xa9, 0xef, 0xd4, 0x4b, 0x31, 0x9f, 0xad, 0x27, 0x06, 0x5b,
	0x56, 0x8e, 0x12, 0x22, 0x1e, 0x24, 0x10, 0x54, 0x13, 0x1c, 0x18, 0x72, 0xb3, 0x58, 0xaa, 0xcb,
	0x15, 0xe1, 0xa3, 0xc4, 0xac, 0x2f, 0x57, 0xf7, 0xb5, 0x4a, 0x89, 0x78, 0x4d, 0x12, 0xbf, 0x80,
	0x4f, 0x38, 0x96, 0x2a, 0x97, 0x8f, 0x50, 0xad, 0xfd, 0x5c, 0xdb, 0x47, 0xad, 0x23, 0x85, 0xef,
	0xe6, 0x63, 0xf1, 0x4b, 0xf8, 0x74, 0x1c, 0x52, 0x69, 0xd5, 0x6b, 0xe5, 0xe7, 0x3c, 0xf4, 0x13,
	0xf1, 0x27, 0xf0, 0x79, 0x2c, 0x21, 0x54, 0x94, 0x56, 0xad, 0xd9, 0xd6, 0x8e, 0x94, 0x0a, 0x19,
	0xdc, 0x41, 0xa5, 0x1e, 0x82, 0x3f, 0x4d, 0x24, 0x80, 0x4a, 0x4b, 0x1d, 0x23, 0xf2, 0xb3, 0x84,
	0xb9, 0x51, 0xf1, 0x19, 0x4a, 0xd8, 0xe1, 0xf3, 0x44, 0x1a, 0x6a, 0x95, 0x7e, 0x2e, 0x97, 0xf1,
	0xec, 0xd0, 0x8e, 0x54, 0x59, 0xf8, 0x62, 0x54, 0x40, 0xd2, 0x17, 0x5f, 0x26, 0xf2, 0x83, 0xd2,
	0x42, 0xb1, 0x24, 0xb4, 0x91, 0x34, 0x34, 0xe6, 0xc7, 0x3c, 0xfe, 0x93, 0x64, 0x50, 0x60, 0x84,
	0xaa, 0xc8, 0x72, 0x24, 0xe4, 0x2b, 0xf1, 0x53, 0xf8, 0x28, 0x09, 0x69, 0x1e, 0x35, 0xb4, 0x7a,
	0xb1, 0x29, 0x87, 0xb9, 0x5c, 0xf8, 0x3a, 0x11, 0x3b, 0x8d, 0xb2, 0x26, 0x37, 0xdb, 0x28, 0x66,
	0x93, 0xcd, 0x44, 0x96, 0x21, 0x8e, 0x4f, 0x5a, 0xe5, 0xe1, 0x38, 0x50, 0x72, 0xe4, 0x8f, 0x12,
	0xa6, 0x3b, 0x78, 0xa6, 0xe1, 0xf5, 0x02, 0x47, 0x48, 0x0b, 0x09, 0x5b, 0xc9, 0xa4, 0xf0, 0x0c,
	0x4f, 0x88, 0xb6, 0xcc, 0xd8, 0xdb, 0x89, 0x3c, 0xc6, 0x65, 0xf0, 0x98, 0x71, 0x1e, 0x27, 0x34,
	0x69, 0x16, 0xdb, 0x9a, 0xd2, 0x6a, 0xd5, 0x63, 0xe1, 0xbe, 0x93, 0x10, 0x86, 0x41, 0x8d, 0xa2,
	0xa2, 0xe0, 0xf9, 0xc7, 0xe3, 0x76, 0x37, 0xf6, 0x61, 0xee, 0xd8, 0xa5, 0x77, 0x22, 0x8b, 0x50,
	0xc0, 0xab, 0x0a, 0xbf, 0xdc, 0x8a, 0x30, 0x1f, 0x92, 0x6a, 0xcd, 0x2a, 0x2a, 0x0a, 0x29, 0xf1,
	0x16, 0x2c, 0x86, 0xb4, 0xf2, 0x91, 0xda, 0x6e, 0x35, 0x64, 0x24, 0x4c, 0x6d, 0xfc, 0x00, 0x85,
	0xb0, 0x18, 0x21, 0xe2, 0x56, 0x61, 0x39, 0x39, 0x86, 0x68, 0x11, 0xe7, 0x38, 0x0a, 0xaa, 0x35,
	0x8a, 0xe8, 0xb9, 0x90, 0x12, 0x57, 0x60, 0x89, 0x5f, 0xb7, 0xd4, 0x56, 0xbd, 0xd8, 0x96, 0x2b,
	0xc2, 0xd4, 0xc6, 0x9f, 0x91, 0xaf, 0x16, 0x82, 0x5b, 0xcb, 0x25, 0x58, 0xe0, 0x6e, 0xe9, 0x98,
	0xcc, 0x65, 0x10, 0x38, 0x62, 0xa5, 0xd5, 0xde, 0x3a, 0x14, 0x52, 0x09, 0x2a, 0xb9, 0x66, 0x14,
	0xa6, 0x70, 0x3f, 0x1c, 0xb5, 0x86, 0x17, 0x59, 0xad, 0xa6, 0x08, 0xd3, 0x78, 0xb8, 0xf1, 0xfb,
	0x3f, 0x21, 0x9d, 0x10, 0x41, 0x92, 0x8f, 0x30, 0xb3, 0x51, 0x82, 0x85, 0xc4, 0x0f, 0xfa, 0x69,
	0x95, 0xa3, 0x15, 0xab, 0x81, 0x46, 0xe1, 0x7b, 0xad, 0x29, 0xb7, 0x85, 0x14, 0x2d, 0x8b, 0x82,
	0xf7, 0x3d, 0x61, 0x6a, 0xe3, 0x2f, 0x53, 0x50, 0x88, 0xfd, 0xea, 0x1a, 0x8f, 0x0c, 0x43, 0x2a,
	0x15, 0x24, 0xab, 0x6a, 0x20, 0x67, 0x05, 0x96, 0x38, 0x22, 0x2e, 0xcb, 0xb4, 0x62, 0x93, 0x99,
	0x2b, 0xce, 0xd8, 0x23, 0x8c, 0x29, 0x5a, 0x5f, 0x85, 0x0c, 0x4c, 0x9b, 0xc6, 0xb1, 0x97, 0x94,
	0xd2, 0x38, 0xaa, 0xb7, 0x6b, 0xe5, 0xa2, 0xda, 0x16, 0xd2, 0xa3, 0xec, 0x3d, 0x8e, 0x3d, 0x83,
	0x7d, 0xc9, 0xb1, 0x23, 0x0e, 0xa9, 0x59, 0x38, 0xce, 0xf1, 0x9e, 0x46, 0xae, 0x66, 0xea, 0xad,
	0x72, 0xb1, 0x2e, 0xcc, 0x6d, 0xfc, 0x69, 0x06, 0xb2, 0xcf, 0x90, 0x69, 0x9d, 0x05, 0xc3, 0xe3,
	0x96, 0x00, 0x36, 0xbc, 0x38, 0x51, 0x95, 0x11, 0xf6, 0xdb, 0x6d, 0x10, 0x79, 0x64, 0xa3, 0x82,
	0xb4, 0xf6, 0x89, 0x30, 0x35, 0x8e, 0x8e, 0x4e, 0x84, 0x69, 0xac, 0x45, 0x8c, 0xae, 0x20, 0x4d,
	0x6d, 0x14, 0xeb, 0x75, 0xdc, 0x2a, 0x3d, 0x99, 0x8b, 0x4e, 0x84, 0x19, 0xbc, 0x16, 0x27, 0xb9,
	0xa5, 0xda, 0x3e, 0x6e, 0x39, 0x3b, 0x89, 0x87, 0x4e, 0x84, 0x39, 0x6c, 0x65, 0x8e, 0x57, 0x52,
	0x0f, 0x85, 0x4c, 0x92, 0x86, 0x0e, 0x85, 0xec, 0xc8, 0x00, 0xd5, 0x43, 0x01, 0xb0, 0xef, 0xf8,
	0xd5, 0x10, 0x47, 0x55, 0xb9, 0x74, 0x28, 0xe4, 0x70, 0xb8, 0x71, 0x8c, 0x22, 0x3a, 0x44, 0x27,
	0x42, 0x3e, 0x21, 0xb7, 0xa8, 0x1e, 0x0a, 0x85, 0x24, 0x92, 0x08, 0x9e, 0xc7, 0xb3, 0x93, 0xa3,
	0xe2, 0xfc, 0x5e, 0x2e, 0x09, 0x0b, 0xd8, 0xbf, 0x63, 0xfa, 0xd3, 0x4a, 0x45, 0x54, 0x6e, 0x09,
	0x42, 0x82, 0x1d, 0xde, 0xe0, 0x90, 0xf4, 0x4e, 0x0b, 0xa2, 0xb1, 0x6c, 0x9a, 0x2a, 0x05, 0xf1,
	0xcd, 0x80, 0xb2, 0xb0, 0x84, 0x57, 0xce, 0x51, 0xc7, 0x69, 0xfb, 0x65, 0x61, 0x79, 0x1c, 0xab,
	0x4d, 0x58, 0xb7, 0x46, 0x8d, 0xd1, 0x3e, 0x11, 0x6e, 0x27, 0x0c, 0x5a, 0x54, 0xcb, 0x87, 0xc2,
	0x4a, 0x02, 0x5a, 0x56, 0x8e, 0x2a, 0x48, 0x58, 0x1d, 0xa5, 0x2a, 0x48, 0xb8, 0x93, 0x88, 0x07,
	0x5a, 0x4f, 0x04, 0x31, 0xb6, 0x36, 0x99, 0x8b, 0x4e, 0x84, 0xbb, 0x13, 0xb8, 0x0a, 0x69, 0xfb,
	0xe1, 0x64, 0x2e, 0x3a, 0x11, 0xee, 0xe1, 0x75, 0x6f, 0x84, 0x8b, 0xc3, 0x29, 0xe8, 0xfb, 0xfe,
	0x9b, 0x11, 0xe8, 0x84, 0x96, 0x31, 0x13, 0x10, 0x54, 0x87, 0x07, 0x6f, 0x46, 0xa0, 0x13, 0xe1,
	0xa3, 0x84, 0xb7, 0x9b, 0x8d, 0x0a, 0x3f, 0x5d, 0xa4, 0x37, 0xb0, 0xd1, 0x89, 0xf0, 0xb1, 0x78,
	0x17, 0x56, 0x46, 0xd8, 0x6c, 0xc2, 0x7c, 0x32, 0x91, 0x89, 0x4e, 0x84, 0x4f, 0x37, 0x7e, 0x3b,
	0x05, 0x59, 0xc5, 0xb5, 0xaf, 0x6f, 0x82, 0x6c, 0xc0, 0x55, 0x7b, 0xd1, 0x82, 0xc3, 0x11, 0xf1,
	0x8e, 0x33, 0x95, 0xa4, 0xd5, 0x55, 0x61, 0x0a, 0x3b, 0x96, 0x2f, 0x15, 0x49, 0x56, 0x9e, 0xc6,
	0x2b, 0x18, 0x47, 0xdd, 0x2f, 0x0b, 0xe9, 0x44, 0xe3, 0xb2, 0x72, 0x24, 0xcc, 0x8c, 0x34, 0xae,
	0xd6, 0xf0, 0x5c, 0x5f, 0x85, 0x65, 0x8e, 0x1a, 0xc6, 0xb0, 0x30, 0x97, 0xd0, 0x54, 0xd9, 0x51,
	0xda, 0x42, 0x06, 0x17, 0x16, 0xe3, 0xe0, 0x41, 0x05, 0x5b, 0x56, 0x84, 0x2c, 0xb6, 0xe4, 0x58,
	0x8c, 0xaa, 0x14, 0x9b, 0x02, 0xe0, 0x52, 0xfe, 0xcd, 0x22, 0x28, 0x30, 0xb7, 0x71, 0x08, 0x8b,
	0x65, 0xf7, 0xc6, 0xf1, 0xed, 0xa2, 0x77, 0x33, 0x78, 0x6a, 0x50, 0xfb, 0xdd, 0x87, 0xb5, 0x32,
	0x7a, 0xae, 0xe0, 0x4d, 0xb5, 0xfa, 0xbc, 0x41, 0x96, 0x75, 0xb6, 0x23, 0xae, 0xa8, 0x45, 0xe1,
	0x03, 0x1c, 0x8b, 0x63, 0xf9, 0x48, 0x2d, 0x0a, 0xa9, 0x8d, 0xff, 0x92, 0x82, 0x02, 0x95, 0x19,
	0xc8, 0x5b, 0x83, 0xdb, 0x0c, 0x1f, 0x42, 0x8b, 0xb2, 0xba, 0xb5, 0xfd, 0xad, 0xf0, 0xc1, 0x24,
	0xde, 0x77, 0xdb, 0x74, 0x17, 0x3d, 0x86, 0xb7, 0xbd, 0xbb, 0x47, 0x57, 0xda, 0x24, 0xaf, 0x22,
	0xab, 0x34, 0x61, 0x27, 0x19, 0xe5, 0x83, 0x62, 0xf9, 0xa0, 0xb8, 0xfd, 0x88, 0x26, 0xec, 0x24,
	0x57, 0x69, 0xd5, 0x9f, 0x6f, 0x3d, 0x7e, 0xb4, 0x4b, 0x17, 0xa3, 0x24, 0xf7, 0xa0, 0x51, 0x2c,
	0x0b, 0xb3, 0x1b, 0x7f, 0x35, 0x05, 0x50, 0xd2, 0xdd, 0x8e, 0x8d, 0x97, 0x1c, 0x0f, 0xfb, 0x8d,
	0x24, 0x38, 0x8d, 0x44, 0x24, 0xb6, 0x02, 0x5d, 0x6f, 0x38, 0xe2, 0x7e, 0xb9, 0xf1, 0x48, 0x48,
	0x8d, 0x12, 0xb7, 0x84, 0xa9, 0x04, 0xf1, 0xa4, 0xad, 0x3e, 0x12, 0xa6, 0x47, 0x89, 0x5b, 0x42,
	0x3a, 0x41, 0x6c, 0x28, 0xca, 0x23, 0x61, 0x66, 0x94, 0xb8, 0x25, 0xcc, 0x8e, 0x12, 0xb7, 0x69,
	0x7c, 0xc5, 0x89, 0x8f, 0x85, 0xcc, 0x28, 0x71, 0x87, 0xae, 0x25, 0x71, 0xe2, 0xae, 0x00, 0xa3,
	0xc4, 0x3d, 0x21, 0x37, 0x4a, 0xfc, 0x46, 0xc8, 0xe3, 0xf9, 0xc1, 0x11, 0xcb, 0x8a, 0x50, 0xc0,
	0xeb, 0x45, 0x8c, 0xa4, 0x1d, 0xb4, 0xda, 0xc2, 0x7c, 0x02, 0x59, 0x29, 0x0b, 0x0b, 0x09, 0x64,
	0xa5, 0x4c, 0x90, 0xc2, 0xc6, 0x2f, 0x20, 0x1f, 0xdc, 0xc0, 0x90, 0x30, 0x5a, 0x81, 0xa5, 0x28,
	0x92, 0xf9, 0xa9, 0x7d, 0x17, 0x56, 0x12, 0x0c, 0xf2, 0x28, 0x97, 0xdb, 0xb4, 0x96, 0x49, 0x30,
	0x49, 0xe8, 0x4f, 0x6d, 0xfc, 0xbb, 0x14, 0xcc, 0x95, 0x9d, 0x61, 0xe7, 0xb4, 0xd6, 0xc5, 0x1a,
	0x94, 0x95, 0x23, 0x5a, 0x73, 0xe3, 0x4d, 0x77, 0xa3, 0xa6, 0xaa, 0xb4, 0x9c, 0x0c, 0xc9, 0x64,
	0x13, 0x5b, 0x6f, 0xa9, 0x32, 0x0b, 0xcc, 0x80, 0x8e, 0xe4, 0x7a, 0x0d, 0xef, 0xe2, 0xb4, 0x72,
	0x4b, 0xc1, 0x25, 0x12, 0xcf, 0x6b, 0xe2, 0x7d, 0x6d, 0xa8, 0xcb, 0x34, 0x4e, 0x0f, 0x21, 0xef,
	0xf0, 0xa8, 0x26, 0xab, 0x65, 0x5c, 0x07, 0xf2, 0x9d, 0x93, 0x16, 0xf5, 0xd6, 0xbe, 0x30, 0x13,
	0xd7, 0xa9, 0xcd, 0xd4, 0x9e, 0xdd, 0xf8, 0xf5, 0x14, 0x2c, 0x57, 0xdb, 0xb2, 0xea, 0xe8, 0x56,
	0x43, 0xf7, 0x3b, 0xe7, 0xaa, 0xd1, 0x37, 0x3a, 0xbe, 0xed, 0x8a, 0x05, 0xc8, 0xaa, 0xa8, 0xac,
	0xd5, 0xf1, 0x86, 0x45, 0xf8, 0x00, 0xbf, 0x56, 0xd4, 0x36, 0x7b, 0x25, 0x35, 0x62, 0x05, 0xb5,
	0xb0, 0x1d, 0x8a, 0x6a, 0x0b, 0x97, 0xaa, 0x8b, 0x50, 0x20, 0xc7, 0x0b, 0xf5, 0xa7, 0x47, 0x8a,
	0x86, 0xb3, 0x11, 0x29, 0x52, 0x23, 0x12, 0x36, 0x95, 0x90, 0x8e, 0xc3, 0x8e, 0x51, 0x55, 0x98,
	0x89, 0x93, 0x54, 0x54, 0x16, 0x66, 0x13, 0xc2, 0xd4, 0x36, 0x0d, 0xbd, 0x88, 0x44, 0x8e, 0xe4,
	0x68, 0xe8, 0x71, 0x4d, 0x89, 0x6a, 0xd9, 0x38, 0xb1, 0x42, 0x88, 0x20, 0xe6, 0x21, 0x23, 0xb7,
	0x0f, 0xb4, 0x0a, 0x9e, 0x7e, 0x39, 0xfc, 0x56, 0x45, 0xad, 0x06, 0xc9, 0xb2, 0xf9, 0x0d, 0x1b,
	0x20, 0xfa, 0x3d, 0x3e, 0x1e, 0x59, 0xb5, 0x56, 0x6f, 0xcb, 0x88, 0x2b, 0x8f, 0x19, 0xa1, 0x5e,
	0xab, 0xd2, 0x2c, 0x1f, 0xbd, 0x6b, 0x58, 0x20, 0x99, 0x81, 0x1c, 0xed, 0x18, 0x57, 0xef, 0xd3,
	0x38, 0x54, 0xe2, 0x40, 0xca, 0x48, 0x6f, 0x54, 0x01, 0xa2, 0xdb, 0x53, 0x52, 0x04, 0x57, 0xa3,
	0x53, 0xb8, 0xf0, 0xc0, 0x33, 0xa4, 0x1d, 0xb1, 0xb5, 0x25, 0xa2, 0x54, 0x5a, 0xcf, 0x70, 0xc8,
	0xfd, 0xd5, 0x14, 0x2c, 0x24, 0x7e, 0x81, 0x8f, 0xe3, 0x05, 0xf7, 0x76, 0x78, 0x24, 0x1f, 0xc9,
	0x9a, 0x72, 0x84, 0x94, 0x96, 0xca, 0x07, 0xf6, 0x28, 0xaf, 0x58, 0x69, 0xd4, 0x9a, 0x42, 0x8a,
	0xec, 0x82, 0x46, 0x98, 0xa4, 0x96, 0x1d, 0xcb, 0x21, 0xd5, 0xec, 0x3a, 0xdc, 0x1d, 0xc3, 0xa9,
	0x34, 0x8a, 0x9a, 0x2a, 0x37, 0x2b, 0x42, 0xfa, 0x0d, 0x00, 0x24, 0x97, 0x8f, 0x69, 0x8a, 0x1c,
	0x05, 0x94, 0x0f, 0xe9, 0x2a, 0x37, 0xca, 0x91, 0x0f, 0x85, 0xb9, 0x09, 0x43, 0x3c, 0x6e, 0xc8,
	0x42, 0x06, 0x2f, 0x64, 0xa3, 0x3c, 0xb5, 0xdd, 0x42, 0xc5, 0x7d, 0x59, 0xc8, 0x8e, 0xd7, 0xe7,
	0xb8, 0x86, 0xda, 0xb5, 0x16, 0x1e, 0x2b, 0xbc, 0x11, 0x80, 0x4e, 0x84, 0xdc, 0xc6, 0x3f, 0x49,
	0x41, 0x26, 0xf8, 0x74, 0x8f, 0xb9, 0x89, 0xcf, 0x1d, 0x1c, 0x45, 0x6e, 0xd6, 0xca, 0xa1, 0xe3,
	0xb8, 0xcf, 0xc1, 0x84, 0x29, 0x3c, 0x17, 0x47, 0x3e, 0x11, 0xa3, 0x13, 0x26, 0xfe, 0xa5, 0x16,
	0x3b, 0xd6, 0xae, 0xf2, 0x35, 0x01, 0xd7, 0x36, 0x5a, 0xfa, 0x67, 0x37, 0x7e, 0x93, 0x82, 0x3c,
	0xff, 0xbb, 0x00, 0x86, 0x8b, 0x8e, 0x21, 0x99, 0x82, 0x49, 0xf2, 0x91, 0x2a, 0xef, 0xd3, 0x7d,
	0x4c, 0x8c, 0xac, 0x1c, 0x87, 0x3b, 0xd0, 0x18, 0x3d, 0xcc, 0x3d, 0x78, 0xa3, 0x35, 0xe6, 0x53,
	0x75, 0xba, 0x0f, 0x8d, 0x71, 0xf6, 0xab, 0x6d, 0x61, 0x66, 0xc3, 0x25, 0xb7, 0x7c, 0xc9, 0x6f,
	0x7c, 0xc9, 0x76, 0x6e, 0xdc, 0x27, 0xad, 0x4c, 0xdb, 0xfb, 0xb0, 0x36, 0xf9, 0x3b, 0x5c, 0x21,
	0x45, 0x36, 0x75, 0x13, 0xbe, 0x88, 0x15, 0xa6, 0xb6, 0xff, 0xf1, 0x2c, 0x64, 0xc3, 0x0b, 0x08,
	0xf1, 0x5b, 0xf2, 0xdb, 0xea, 0xb2, 0x6b, 0xe8, 0xbe, 0x21, 0x2e, 0x71, 0x3f, 0xc9, 0x0d, 0xee,
	0x60, 0xd6, 0x96, 0x47, 0x7e, 0xa7, 0xdb, 0xf0, 0xce, 0xa4, 0x0f, 0x58, 0xcb, 0x23, 0xa7, 0xfb,
	0xce, 0x2d, 0x2b, 0xa4, 0x25, 0xbd, 0x9d, 0x15, 0xef, 0x8c, 0xff, 0x1d, 0x22, 0x6e, 0xbf, 0x36,
	0xe1, 0xb7, 0x7f, 0x54, 0xca, 0x3e, 0xf9, 0xbb, 0x94, 0xf0, 0xa7, 0x98, 0x81, 0xa0, 0x31, 0x3f,
	0x05, 0x0d, 0x04, 0x8d, 0xfb, 0xd9, 0xa6, 0xf4, 0x81, 0xf8, 0x73, 0xee, 0xb3, 0x12, 0x66, 0x88,
	0x3b, 0x23, 0x77, 0xf7, 0x49, 0x59, 0xe3, 0x3e, 0x02, 0x48, 0xc8, 0x62, 0xa6, 0xf9, 0xbd, 0x65,
	0x1d, 0x73, 0xb2, 0x98, 0xb1, 0xd6, 0xdf, 0x74, 0x35, 0x8f, 0x25, 0x3e, 0x78, 0xe3, 0x15, 0x38,
	0x95, 0xdb, 0x20, 0x73, 0x22, 0xbc, 0x60, 0x14, 0x3f, 0x9c, 0x78, 0xb5, 0x8b, 0x25, 0xde, 0x9b,
	0x7c, 0x25, 0x49, 0xc5, 0xe9, 0xb0, 0x5c, 0xec, 0x76, 0xc3, 0xc3, 0xa3, 0x96, 0x45, 0xbf, 0x5a,
	0x11, 0xa5, 0xc9, 0x77, 0x5d, 0xa1, 0xf0, 0x8f, 0x7f, 0xd7, 0x7d, 0x58, 0xd8, 0x45, 0xc5, 0xe8,
	0xff, 0x98, 0x5d, 0x94, 0xb2, 0x3f, 0xcc, 0x9d, 0xd9, 0xe4, 0x0f, 0x29, 0x95, 0x0f, 0x4e, 0x67,
	0xc9, 0xc3, 0xe3, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x1a, 0xc1, 0xd9, 0xcc, 0x52, 0x00,
	0x00,
}
