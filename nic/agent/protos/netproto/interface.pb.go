// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interface.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PauseType int32

const (
	PauseType_DISABLE  PauseType = 0
	PauseType_LINK     PauseType = 1
	PauseType_PRIORITY PauseType = 2
)

var PauseType_name = map[int32]string{
	0: "DISABLE",
	1: "LINK",
	2: "PRIORITY",
}
var PauseType_value = map[string]int32{
	"DISABLE":  0,
	"LINK":     1,
	"PRIORITY": 2,
}

func (x PauseType) String() string {
	return proto.EnumName(PauseType_name, int32(x))
}
func (PauseType) EnumDescriptor() ([]byte, []int) { return fileDescriptorInterface, []int{0} }

type IFStatus int32

const (
	IFStatus_UP   IFStatus = 0
	IFStatus_DOWN IFStatus = 1
)

var IFStatus_name = map[int32]string{
	0: "UP",
	1: "DOWN",
}
var IFStatus_value = map[string]int32{
	"UP":   0,
	"DOWN": 1,
}

func (x IFStatus) String() string {
	return proto.EnumName(IFStatus_name, int32(x))
}
func (IFStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorInterface, []int{1} }

type InterfaceSpec_IFType int32

const (
	InterfaceSpec_NONE        InterfaceSpec_IFType = 0
	InterfaceSpec_HOST_PF     InterfaceSpec_IFType = 1
	InterfaceSpec_UPLINK_ETH  InterfaceSpec_IFType = 3
	InterfaceSpec_UPLINK_MGMT InterfaceSpec_IFType = 4
	InterfaceSpec_L3          InterfaceSpec_IFType = 5
	InterfaceSpec_LOOPBACK    InterfaceSpec_IFType = 6
)

var InterfaceSpec_IFType_name = map[int32]string{
	0: "NONE",
	1: "HOST_PF",
	3: "UPLINK_ETH",
	4: "UPLINK_MGMT",
	5: "L3",
	6: "LOOPBACK",
}
var InterfaceSpec_IFType_value = map[string]int32{
	"NONE":        0,
	"HOST_PF":     1,
	"UPLINK_ETH":  3,
	"UPLINK_MGMT": 4,
	"L3":          5,
	"LOOPBACK":    6,
}

func (x InterfaceSpec_IFType) String() string {
	return proto.EnumName(InterfaceSpec_IFType_name, int32(x))
}
func (InterfaceSpec_IFType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInterface, []int{2, 0}
}

type TransceiverStatus_State int32

const (
	TransceiverStatus_STATE_NA             TransceiverStatus_State = 0
	TransceiverStatus_STATE_REMOVED        TransceiverStatus_State = 1
	TransceiverStatus_STATE_INSERTED       TransceiverStatus_State = 2
	TransceiverStatus_STATE_PENDING        TransceiverStatus_State = 3
	TransceiverStatus_STATE_SPROM_READ     TransceiverStatus_State = 4
	TransceiverStatus_STATE_SPROM_READ_ERR TransceiverStatus_State = 5
)

var TransceiverStatus_State_name = map[int32]string{
	0: "STATE_NA",
	1: "STATE_REMOVED",
	2: "STATE_INSERTED",
	3: "STATE_PENDING",
	4: "STATE_SPROM_READ",
	5: "STATE_SPROM_READ_ERR",
}
var TransceiverStatus_State_value = map[string]int32{
	"STATE_NA":             0,
	"STATE_REMOVED":        1,
	"STATE_INSERTED":       2,
	"STATE_PENDING":        3,
	"STATE_SPROM_READ":     4,
	"STATE_SPROM_READ_ERR": 5,
}

func (x TransceiverStatus_State) String() string {
	return proto.EnumName(TransceiverStatus_State_name, int32(x))
}
func (TransceiverStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInterface, []int{5, 0}
}

type TransceiverStatus_CableType int32

const (
	TransceiverStatus_NONE   TransceiverStatus_CableType = 0
	TransceiverStatus_COPPER TransceiverStatus_CableType = 1
	TransceiverStatus_FIBER  TransceiverStatus_CableType = 2
)

var TransceiverStatus_CableType_name = map[int32]string{
	0: "NONE",
	1: "COPPER",
	2: "FIBER",
}
var TransceiverStatus_CableType_value = map[string]int32{
	"NONE":   0,
	"COPPER": 1,
	"FIBER":  2,
}

func (x TransceiverStatus_CableType) String() string {
	return proto.EnumName(TransceiverStatus_CableType_name, int32(x))
}
func (TransceiverStatus_CableType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInterface, []int{5, 1}
}

type TransceiverStatus_Pid int32

const (
	TransceiverStatus_UNKNOWN TransceiverStatus_Pid = 0
	// CU
	TransceiverStatus_QSFP_100G_CR4    TransceiverStatus_Pid = 1
	TransceiverStatus_QSFP_40GBASE_CR4 TransceiverStatus_Pid = 2
	TransceiverStatus_SFP_25GBASE_CR_S TransceiverStatus_Pid = 3
	TransceiverStatus_SFP_25GBASE_CR_L TransceiverStatus_Pid = 4
	TransceiverStatus_SFP_25GBASE_CR_N TransceiverStatus_Pid = 5
	// Fiber, grouping all together
	TransceiverStatus_QSFP_100G_AOC    TransceiverStatus_Pid = 50
	TransceiverStatus_QSFP_100G_ACC    TransceiverStatus_Pid = 51
	TransceiverStatus_QSFP_100G_SR4    TransceiverStatus_Pid = 52
	TransceiverStatus_QSFP_100G_LR4    TransceiverStatus_Pid = 53
	TransceiverStatus_QSFP_100G_ER4    TransceiverStatus_Pid = 54
	TransceiverStatus_QSFP_40GBASE_ER4 TransceiverStatus_Pid = 55
	TransceiverStatus_QSFP_40GBASE_SR4 TransceiverStatus_Pid = 56
	TransceiverStatus_QSFP_40GBASE_LR4 TransceiverStatus_Pid = 57
	TransceiverStatus_QSFP_40GBASE_AOC TransceiverStatus_Pid = 58
	TransceiverStatus_SFP_25GBASE_SR   TransceiverStatus_Pid = 59
	TransceiverStatus_SFP_25GBASE_LR   TransceiverStatus_Pid = 60
	TransceiverStatus_SFP_25GBASE_ER   TransceiverStatus_Pid = 61
	TransceiverStatus_SFP_25GBASE_AOC  TransceiverStatus_Pid = 62
	TransceiverStatus_SFP_10GBASE_SR   TransceiverStatus_Pid = 63
	TransceiverStatus_SFP_10GBASE_LR   TransceiverStatus_Pid = 64
	TransceiverStatus_SFP_10GBASE_LRM  TransceiverStatus_Pid = 65
	TransceiverStatus_SFP_10GBASE_ER   TransceiverStatus_Pid = 66
	TransceiverStatus_SFP_10GBASE_AOC  TransceiverStatus_Pid = 67
	TransceiverStatus_SFP_10GBASE_CU   TransceiverStatus_Pid = 68
	TransceiverStatus_QSFP_100G_CWDM4  TransceiverStatus_Pid = 69
	TransceiverStatus_QSFP_100G_PSM4   TransceiverStatus_Pid = 70
	TransceiverStatus_PID_NA           TransceiverStatus_Pid = 1000
)

var TransceiverStatus_Pid_name = map[int32]string{
	0:    "UNKNOWN",
	1:    "QSFP_100G_CR4",
	2:    "QSFP_40GBASE_CR4",
	3:    "SFP_25GBASE_CR_S",
	4:    "SFP_25GBASE_CR_L",
	5:    "SFP_25GBASE_CR_N",
	50:   "QSFP_100G_AOC",
	51:   "QSFP_100G_ACC",
	52:   "QSFP_100G_SR4",
	53:   "QSFP_100G_LR4",
	54:   "QSFP_100G_ER4",
	55:   "QSFP_40GBASE_ER4",
	56:   "QSFP_40GBASE_SR4",
	57:   "QSFP_40GBASE_LR4",
	58:   "QSFP_40GBASE_AOC",
	59:   "SFP_25GBASE_SR",
	60:   "SFP_25GBASE_LR",
	61:   "SFP_25GBASE_ER",
	62:   "SFP_25GBASE_AOC",
	63:   "SFP_10GBASE_SR",
	64:   "SFP_10GBASE_LR",
	65:   "SFP_10GBASE_LRM",
	66:   "SFP_10GBASE_ER",
	67:   "SFP_10GBASE_AOC",
	68:   "SFP_10GBASE_CU",
	69:   "QSFP_100G_CWDM4",
	70:   "QSFP_100G_PSM4",
	1000: "PID_NA",
}
var TransceiverStatus_Pid_value = map[string]int32{
	"UNKNOWN":          0,
	"QSFP_100G_CR4":    1,
	"QSFP_40GBASE_CR4": 2,
	"SFP_25GBASE_CR_S": 3,
	"SFP_25GBASE_CR_L": 4,
	"SFP_25GBASE_CR_N": 5,
	"QSFP_100G_AOC":    50,
	"QSFP_100G_ACC":    51,
	"QSFP_100G_SR4":    52,
	"QSFP_100G_LR4":    53,
	"QSFP_100G_ER4":    54,
	"QSFP_40GBASE_ER4": 55,
	"QSFP_40GBASE_SR4": 56,
	"QSFP_40GBASE_LR4": 57,
	"QSFP_40GBASE_AOC": 58,
	"SFP_25GBASE_SR":   59,
	"SFP_25GBASE_LR":   60,
	"SFP_25GBASE_ER":   61,
	"SFP_25GBASE_AOC":  62,
	"SFP_10GBASE_SR":   63,
	"SFP_10GBASE_LR":   64,
	"SFP_10GBASE_LRM":  65,
	"SFP_10GBASE_ER":   66,
	"SFP_10GBASE_AOC":  67,
	"SFP_10GBASE_CU":   68,
	"QSFP_100G_CWDM4":  69,
	"QSFP_100G_PSM4":   70,
	"PID_NA":           1000,
}

func (x TransceiverStatus_Pid) String() string {
	return proto.EnumName(TransceiverStatus_Pid_name, int32(x))
}
func (TransceiverStatus_Pid) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInterface, []int{5, 2}
}

// Interface object
type Interface struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           InterfaceSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         InterfaceStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Interface) Reset()                    { *m = Interface{} }
func (m *Interface) String() string            { return proto.CompactTextString(m) }
func (*Interface) ProtoMessage()               {}
func (*Interface) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{0} }

func (m *Interface) GetSpec() InterfaceSpec {
	if m != nil {
		return m.Spec
	}
	return InterfaceSpec{}
}

func (m *Interface) GetStatus() InterfaceStatus {
	if m != nil {
		return m.Status
	}
	return InterfaceStatus{}
}

type PauseSpec struct {
	// Pause type
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	// TX Pause enabled
	TxPauseEnabled bool `protobuf:"varint,2,opt,name=TxPauseEnabled,proto3" json:"tx-pause-enabled,omitempty"`
	// RX Pause enabled
	RxPauseEnabled bool `protobuf:"varint,3,opt,name=RxPauseEnabled,proto3" json:"rx-pause-enabled,omitempty"`
}

func (m *PauseSpec) Reset()                    { *m = PauseSpec{} }
func (m *PauseSpec) String() string            { return proto.CompactTextString(m) }
func (*PauseSpec) ProtoMessage()               {}
func (*PauseSpec) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{1} }

func (m *PauseSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PauseSpec) GetTxPauseEnabled() bool {
	if m != nil {
		return m.TxPauseEnabled
	}
	return false
}

func (m *PauseSpec) GetRxPauseEnabled() bool {
	if m != nil {
		return m.RxPauseEnabled
	}
	return false
}

// InterfaceSpec captures all the interface level configuration
type InterfaceSpec struct {
	Type        string `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	AdminStatus string `protobuf:"bytes,2,opt,name=AdminStatus,proto3" json:"admin-status,omitempty"`
	// VrfName specifies the name of the VRF that the current Interface belongs to
	VrfName string `protobuf:"bytes,3,opt,name=VrfName,proto3" json:"vrf-name,omitemtpy"`
	// Inteface speed
	Speed string `protobuf:"bytes,4,opt,name=Speed,proto3" json:"speed,omitempty"`
	// Mtu of the interface
	MTU uint32 `protobuf:"varint,5,opt,name=MTU,proto3" json:"mtu,omitempty"`
	// Pause Spec
	Pause *PauseSpec `protobuf:"bytes,6,opt,name=Pause" json:"pause,omitempty"`
	// IPConfig has the IP address for the interface if specified.
	IPAddress string `protobuf:"bytes,7,opt,name=IPAddress,proto3" json:"ip-address,omitempty"`
	// Network that the interface is attached to, if any.
	Network string `protobuf:"bytes,8,opt,name=Network,proto3" json:"network,omitemtpy"`
	// Tx Collectors
	TxCollectors []string `protobuf:"bytes,9,rep,name=TxCollectors" json:"TxCollectors,omitempty"`
	// Rx Collectors
	RxCollectors []string `protobuf:"bytes,10,rep,name=RxCollectors" json:"RxCollectors,omitempty"`
}

func (m *InterfaceSpec) Reset()                    { *m = InterfaceSpec{} }
func (m *InterfaceSpec) String() string            { return proto.CompactTextString(m) }
func (*InterfaceSpec) ProtoMessage()               {}
func (*InterfaceSpec) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{2} }

func (m *InterfaceSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *InterfaceSpec) GetAdminStatus() string {
	if m != nil {
		return m.AdminStatus
	}
	return ""
}

func (m *InterfaceSpec) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *InterfaceSpec) GetSpeed() string {
	if m != nil {
		return m.Speed
	}
	return ""
}

func (m *InterfaceSpec) GetMTU() uint32 {
	if m != nil {
		return m.MTU
	}
	return 0
}

func (m *InterfaceSpec) GetPause() *PauseSpec {
	if m != nil {
		return m.Pause
	}
	return nil
}

func (m *InterfaceSpec) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *InterfaceSpec) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *InterfaceSpec) GetTxCollectors() []string {
	if m != nil {
		return m.TxCollectors
	}
	return nil
}

func (m *InterfaceSpec) GetRxCollectors() []string {
	if m != nil {
		return m.RxCollectors
	}
	return nil
}

// InterfaceHostStatus is populated for PF and VF
type InterfaceHostStatus struct {
	// interface name seen by the host driver
	HostIfName string `protobuf:"bytes,1,opt,name=HostIfName,proto3" json:"host-ifname,omitempty"`
}

func (m *InterfaceHostStatus) Reset()                    { *m = InterfaceHostStatus{} }
func (m *InterfaceHostStatus) String() string            { return proto.CompactTextString(m) }
func (*InterfaceHostStatus) ProtoMessage()               {}
func (*InterfaceHostStatus) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{3} }

func (m *InterfaceHostStatus) GetHostIfName() string {
	if m != nil {
		return m.HostIfName
	}
	return ""
}

type InterfaceUplinkStatus struct {
	// LinkSpeed auto-negotiated
	LinkSpeed         string             `protobuf:"bytes,1,opt,name=LinkSpeed,proto3" json:"link-speed,omitempty"`
	TransceiverStatus *TransceiverStatus `protobuf:"bytes,2,opt,name=TransceiverStatus" json:"transceiver-status,omitempty"`
	PortID            uint32             `protobuf:"varint,3,opt,name=PortID,proto3" json:"uplink-port-id,omitempty"`
}

func (m *InterfaceUplinkStatus) Reset()                    { *m = InterfaceUplinkStatus{} }
func (m *InterfaceUplinkStatus) String() string            { return proto.CompactTextString(m) }
func (*InterfaceUplinkStatus) ProtoMessage()               {}
func (*InterfaceUplinkStatus) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{4} }

func (m *InterfaceUplinkStatus) GetLinkSpeed() string {
	if m != nil {
		return m.LinkSpeed
	}
	return ""
}

func (m *InterfaceUplinkStatus) GetTransceiverStatus() *TransceiverStatus {
	if m != nil {
		return m.TransceiverStatus
	}
	return nil
}

func (m *InterfaceUplinkStatus) GetPortID() uint32 {
	if m != nil {
		return m.PortID
	}
	return 0
}

type TransceiverStatus struct {
	TransceiverState    string `protobuf:"bytes,1,opt,name=TransceiverState,proto3" json:"state,omitempty"`
	TranceiverCableType string `protobuf:"bytes,2,opt,name=TranceiverCableType,proto3" json:"cable-type,omitempty"`
	TranceiverPid       string `protobuf:"bytes,3,opt,name=TranceiverPid,proto3" json:"pid,omitempty"`
}

func (m *TransceiverStatus) Reset()                    { *m = TransceiverStatus{} }
func (m *TransceiverStatus) String() string            { return proto.CompactTextString(m) }
func (*TransceiverStatus) ProtoMessage()               {}
func (*TransceiverStatus) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{5} }

func (m *TransceiverStatus) GetTransceiverState() string {
	if m != nil {
		return m.TransceiverState
	}
	return ""
}

func (m *TransceiverStatus) GetTranceiverCableType() string {
	if m != nil {
		return m.TranceiverCableType
	}
	return ""
}

func (m *TransceiverStatus) GetTranceiverPid() string {
	if m != nil {
		return m.TranceiverPid
	}
	return ""
}

// InterfaceStatus
type InterfaceStatus struct {
	Name           string                `protobuf:"bytes,1,opt,name=Name,proto3" json:"dsc,omitempty"`
	InterfaceID    uint64                `protobuf:"varint,2,opt,name=InterfaceID,proto3" json:"id,omitempty"`
	DSC            string                `protobuf:"bytes,3,opt,name=DSC,proto3" json:"dsc,omitempty"`
	OperStatus     string                `protobuf:"bytes,4,opt,name=OperStatus,proto3" json:"oper-status,omitempty"`
	PrimaryMac     string                `protobuf:"bytes,5,opt,name=PrimaryMac,proto3" json:"primary-mac,omitempty"`
	IFHostStatus   InterfaceHostStatus   `protobuf:"bytes,6,opt,name=IFHostStatus" json:"if-host-status,omitempty"`
	IFUplinkStatus InterfaceUplinkStatus `protobuf:"bytes,7,opt,name=IFUplinkStatus" json:"if-uplink-status,omitempty"`
	MirrorEnabled  bool                  `protobuf:"varint,8,opt,name=MirrorEnabled,proto3" json:"mirror-enabled,omitempty"`
	InterfaceUUID  string                `protobuf:"bytes,9,opt,name=InterfaceUUID,proto3" json:"if-uuid,omitempty"`
}

func (m *InterfaceStatus) Reset()                    { *m = InterfaceStatus{} }
func (m *InterfaceStatus) String() string            { return proto.CompactTextString(m) }
func (*InterfaceStatus) ProtoMessage()               {}
func (*InterfaceStatus) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{6} }

func (m *InterfaceStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InterfaceStatus) GetInterfaceID() uint64 {
	if m != nil {
		return m.InterfaceID
	}
	return 0
}

func (m *InterfaceStatus) GetDSC() string {
	if m != nil {
		return m.DSC
	}
	return ""
}

func (m *InterfaceStatus) GetOperStatus() string {
	if m != nil {
		return m.OperStatus
	}
	return ""
}

func (m *InterfaceStatus) GetPrimaryMac() string {
	if m != nil {
		return m.PrimaryMac
	}
	return ""
}

func (m *InterfaceStatus) GetIFHostStatus() InterfaceHostStatus {
	if m != nil {
		return m.IFHostStatus
	}
	return InterfaceHostStatus{}
}

func (m *InterfaceStatus) GetIFUplinkStatus() InterfaceUplinkStatus {
	if m != nil {
		return m.IFUplinkStatus
	}
	return InterfaceUplinkStatus{}
}

func (m *InterfaceStatus) GetMirrorEnabled() bool {
	if m != nil {
		return m.MirrorEnabled
	}
	return false
}

func (m *InterfaceStatus) GetInterfaceUUID() string {
	if m != nil {
		return m.InterfaceUUID
	}
	return ""
}

type InterfaceList struct {
	Interfaces []*Interface `protobuf:"bytes,1,rep,name=interfaces" json:"interfaces,omitempty"`
}

func (m *InterfaceList) Reset()                    { *m = InterfaceList{} }
func (m *InterfaceList) String() string            { return proto.CompactTextString(m) }
func (*InterfaceList) ProtoMessage()               {}
func (*InterfaceList) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{7} }

func (m *InterfaceList) GetInterfaces() []*Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

// interaface watch event
type InterfaceEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	Interface Interface     `protobuf:"bytes,2,opt,name=Interface" json:"interface,omitempty"`
}

func (m *InterfaceEvent) Reset()                    { *m = InterfaceEvent{} }
func (m *InterfaceEvent) String() string            { return proto.CompactTextString(m) }
func (*InterfaceEvent) ProtoMessage()               {}
func (*InterfaceEvent) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{8} }

func (m *InterfaceEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *InterfaceEvent) GetInterface() Interface {
	if m != nil {
		return m.Interface
	}
	return Interface{}
}

// interface watch events batched
type InterfaceEventList struct {
	InterfaceEvents []*InterfaceEvent `protobuf:"bytes,1,rep,name=InterfaceEvents" json:"InterfaceEvents,omitempty"`
}

func (m *InterfaceEventList) Reset()                    { *m = InterfaceEventList{} }
func (m *InterfaceEventList) String() string            { return proto.CompactTextString(m) }
func (*InterfaceEventList) ProtoMessage()               {}
func (*InterfaceEventList) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{9} }

func (m *InterfaceEventList) GetInterfaceEvents() []*InterfaceEvent {
	if m != nil {
		return m.InterfaceEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*Interface)(nil), "netproto.Interface")
	proto.RegisterType((*PauseSpec)(nil), "netproto.PauseSpec")
	proto.RegisterType((*InterfaceSpec)(nil), "netproto.InterfaceSpec")
	proto.RegisterType((*InterfaceHostStatus)(nil), "netproto.InterfaceHostStatus")
	proto.RegisterType((*InterfaceUplinkStatus)(nil), "netproto.InterfaceUplinkStatus")
	proto.RegisterType((*TransceiverStatus)(nil), "netproto.TransceiverStatus")
	proto.RegisterType((*InterfaceStatus)(nil), "netproto.InterfaceStatus")
	proto.RegisterType((*InterfaceList)(nil), "netproto.InterfaceList")
	proto.RegisterType((*InterfaceEvent)(nil), "netproto.InterfaceEvent")
	proto.RegisterType((*InterfaceEventList)(nil), "netproto.InterfaceEventList")
	proto.RegisterEnum("netproto.PauseType", PauseType_name, PauseType_value)
	proto.RegisterEnum("netproto.IFStatus", IFStatus_name, IFStatus_value)
	proto.RegisterEnum("netproto.InterfaceSpec_IFType", InterfaceSpec_IFType_name, InterfaceSpec_IFType_value)
	proto.RegisterEnum("netproto.TransceiverStatus_State", TransceiverStatus_State_name, TransceiverStatus_State_value)
	proto.RegisterEnum("netproto.TransceiverStatus_CableType", TransceiverStatus_CableType_name, TransceiverStatus_CableType_value)
	proto.RegisterEnum("netproto.TransceiverStatus_Pid", TransceiverStatus_Pid_name, TransceiverStatus_Pid_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for InterfaceApiV1 service

type InterfaceApiV1Client interface {
	ListInterfaces(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*InterfaceList, error)
	WatchInterfaces(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (InterfaceApiV1_WatchInterfacesClient, error)
	InterfaceOperUpdate(ctx context.Context, opts ...grpc.CallOption) (InterfaceApiV1_InterfaceOperUpdateClient, error)
	CreateInterface(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*Interface, error)
}

type interfaceApiV1Client struct {
	cc *grpc.ClientConn
}

func NewInterfaceApiV1Client(cc *grpc.ClientConn) InterfaceApiV1Client {
	return &interfaceApiV1Client{cc}
}

func (c *interfaceApiV1Client) ListInterfaces(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*InterfaceList, error) {
	out := new(InterfaceList)
	err := grpc.Invoke(ctx, "/netproto.InterfaceApiV1/ListInterfaces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceApiV1Client) WatchInterfaces(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (InterfaceApiV1_WatchInterfacesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_InterfaceApiV1_serviceDesc.Streams[0], c.cc, "/netproto.InterfaceApiV1/WatchInterfaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceApiV1WatchInterfacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceApiV1_WatchInterfacesClient interface {
	Recv() (*InterfaceEventList, error)
	grpc.ClientStream
}

type interfaceApiV1WatchInterfacesClient struct {
	grpc.ClientStream
}

func (x *interfaceApiV1WatchInterfacesClient) Recv() (*InterfaceEventList, error) {
	m := new(InterfaceEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceApiV1Client) InterfaceOperUpdate(ctx context.Context, opts ...grpc.CallOption) (InterfaceApiV1_InterfaceOperUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_InterfaceApiV1_serviceDesc.Streams[1], c.cc, "/netproto.InterfaceApiV1/InterfaceOperUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceApiV1InterfaceOperUpdateClient{stream}
	return x, nil
}

type InterfaceApiV1_InterfaceOperUpdateClient interface {
	Send(*InterfaceEvent) error
	CloseAndRecv() (*api.TypeMeta, error)
	grpc.ClientStream
}

type interfaceApiV1InterfaceOperUpdateClient struct {
	grpc.ClientStream
}

func (x *interfaceApiV1InterfaceOperUpdateClient) Send(m *InterfaceEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *interfaceApiV1InterfaceOperUpdateClient) CloseAndRecv() (*api.TypeMeta, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.TypeMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *interfaceApiV1Client) CreateInterface(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*Interface, error) {
	out := new(Interface)
	err := grpc.Invoke(ctx, "/netproto.InterfaceApiV1/CreateInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InterfaceApiV1 service

type InterfaceApiV1Server interface {
	ListInterfaces(context.Context, *api.ListWatchOptions) (*InterfaceList, error)
	WatchInterfaces(*api.ListWatchOptions, InterfaceApiV1_WatchInterfacesServer) error
	InterfaceOperUpdate(InterfaceApiV1_InterfaceOperUpdateServer) error
	CreateInterface(context.Context, *Interface) (*Interface, error)
}

func RegisterInterfaceApiV1Server(s *grpc.Server, srv InterfaceApiV1Server) {
	s.RegisterService(&_InterfaceApiV1_serviceDesc, srv)
}

func _InterfaceApiV1_ListInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceApiV1Server).ListInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.InterfaceApiV1/ListInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceApiV1Server).ListInterfaces(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceApiV1_WatchInterfaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceApiV1Server).WatchInterfaces(m, &interfaceApiV1WatchInterfacesServer{stream})
}

type InterfaceApiV1_WatchInterfacesServer interface {
	Send(*InterfaceEventList) error
	grpc.ServerStream
}

type interfaceApiV1WatchInterfacesServer struct {
	grpc.ServerStream
}

func (x *interfaceApiV1WatchInterfacesServer) Send(m *InterfaceEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _InterfaceApiV1_InterfaceOperUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InterfaceApiV1Server).InterfaceOperUpdate(&interfaceApiV1InterfaceOperUpdateServer{stream})
}

type InterfaceApiV1_InterfaceOperUpdateServer interface {
	SendAndClose(*api.TypeMeta) error
	Recv() (*InterfaceEvent, error)
	grpc.ServerStream
}

type interfaceApiV1InterfaceOperUpdateServer struct {
	grpc.ServerStream
}

func (x *interfaceApiV1InterfaceOperUpdateServer) SendAndClose(m *api.TypeMeta) error {
	return x.ServerStream.SendMsg(m)
}

func (x *interfaceApiV1InterfaceOperUpdateServer) Recv() (*InterfaceEvent, error) {
	m := new(InterfaceEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _InterfaceApiV1_CreateInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceApiV1Server).CreateInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.InterfaceApiV1/CreateInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceApiV1Server).CreateInterface(ctx, req.(*Interface))
	}
	return interceptor(ctx, in, info, handler)
}

var _InterfaceApiV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.InterfaceApiV1",
	HandlerType: (*InterfaceApiV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInterfaces",
			Handler:    _InterfaceApiV1_ListInterfaces_Handler,
		},
		{
			MethodName: "CreateInterface",
			Handler:    _InterfaceApiV1_CreateInterface_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchInterfaces",
			Handler:       _InterfaceApiV1_WatchInterfaces_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InterfaceOperUpdate",
			Handler:       _InterfaceApiV1_InterfaceOperUpdate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "interface.proto",
}

func (m *Interface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interface) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintInterface(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintInterface(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintInterface(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintInterface(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *PauseSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PauseSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.TxPauseEnabled {
		dAtA[i] = 0x10
		i++
		if m.TxPauseEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RxPauseEnabled {
		dAtA[i] = 0x18
		i++
		if m.RxPauseEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *InterfaceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.AdminStatus) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.AdminStatus)))
		i += copy(dAtA[i:], m.AdminStatus)
	}
	if len(m.VrfName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.VrfName)))
		i += copy(dAtA[i:], m.VrfName)
	}
	if len(m.Speed) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.Speed)))
		i += copy(dAtA[i:], m.Speed)
	}
	if m.MTU != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.MTU))
	}
	if m.Pause != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Pause.Size()))
		n5, err := m.Pause.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.IPAddress) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.IPAddress)))
		i += copy(dAtA[i:], m.IPAddress)
	}
	if len(m.Network) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.Network)))
		i += copy(dAtA[i:], m.Network)
	}
	if len(m.TxCollectors) > 0 {
		for _, s := range m.TxCollectors {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.RxCollectors) > 0 {
		for _, s := range m.RxCollectors {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *InterfaceHostStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceHostStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HostIfName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.HostIfName)))
		i += copy(dAtA[i:], m.HostIfName)
	}
	return i, nil
}

func (m *InterfaceUplinkStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceUplinkStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LinkSpeed) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.LinkSpeed)))
		i += copy(dAtA[i:], m.LinkSpeed)
	}
	if m.TransceiverStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.TransceiverStatus.Size()))
		n6, err := m.TransceiverStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.PortID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.PortID))
	}
	return i, nil
}

func (m *TransceiverStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransceiverStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransceiverState) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.TransceiverState)))
		i += copy(dAtA[i:], m.TransceiverState)
	}
	if len(m.TranceiverCableType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.TranceiverCableType)))
		i += copy(dAtA[i:], m.TranceiverCableType)
	}
	if len(m.TranceiverPid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.TranceiverPid)))
		i += copy(dAtA[i:], m.TranceiverPid)
	}
	return i, nil
}

func (m *InterfaceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.InterfaceID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.InterfaceID))
	}
	if len(m.DSC) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.DSC)))
		i += copy(dAtA[i:], m.DSC)
	}
	if len(m.OperStatus) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.OperStatus)))
		i += copy(dAtA[i:], m.OperStatus)
	}
	if len(m.PrimaryMac) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.PrimaryMac)))
		i += copy(dAtA[i:], m.PrimaryMac)
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintInterface(dAtA, i, uint64(m.IFHostStatus.Size()))
	n7, err := m.IFHostStatus.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x3a
	i++
	i = encodeVarintInterface(dAtA, i, uint64(m.IFUplinkStatus.Size()))
	n8, err := m.IFUplinkStatus.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if m.MirrorEnabled {
		dAtA[i] = 0x40
		i++
		if m.MirrorEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.InterfaceUUID) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.InterfaceUUID)))
		i += copy(dAtA[i:], m.InterfaceUUID)
	}
	return i, nil
}

func (m *InterfaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, msg := range m.Interfaces {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InterfaceEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintInterface(dAtA, i, uint64(m.Interface.Size()))
	n9, err := m.Interface.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *InterfaceEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InterfaceEvents) > 0 {
		for _, msg := range m.InterfaceEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintInterface(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Interface) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovInterface(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovInterface(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovInterface(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovInterface(uint64(l))
	return n
}

func (m *PauseSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.TxPauseEnabled {
		n += 2
	}
	if m.RxPauseEnabled {
		n += 2
	}
	return n
}

func (m *InterfaceSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	l = len(m.AdminStatus)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	l = len(m.VrfName)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	l = len(m.Speed)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.MTU != 0 {
		n += 1 + sovInterface(uint64(m.MTU))
	}
	if m.Pause != nil {
		l = m.Pause.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	if len(m.TxCollectors) > 0 {
		for _, s := range m.TxCollectors {
			l = len(s)
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	if len(m.RxCollectors) > 0 {
		for _, s := range m.RxCollectors {
			l = len(s)
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *InterfaceHostStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.HostIfName)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *InterfaceUplinkStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.LinkSpeed)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.TransceiverStatus != nil {
		l = m.TransceiverStatus.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.PortID != 0 {
		n += 1 + sovInterface(uint64(m.PortID))
	}
	return n
}

func (m *TransceiverStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransceiverState)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	l = len(m.TranceiverCableType)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	l = len(m.TranceiverPid)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *InterfaceStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.InterfaceID != 0 {
		n += 1 + sovInterface(uint64(m.InterfaceID))
	}
	l = len(m.DSC)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	l = len(m.OperStatus)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	l = len(m.PrimaryMac)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	l = m.IFHostStatus.Size()
	n += 1 + l + sovInterface(uint64(l))
	l = m.IFUplinkStatus.Size()
	n += 1 + l + sovInterface(uint64(l))
	if m.MirrorEnabled {
		n += 2
	}
	l = len(m.InterfaceUUID)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *InterfaceList) Size() (n int) {
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *InterfaceEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovInterface(uint64(m.EventType))
	}
	l = m.Interface.Size()
	n += 1 + l + sovInterface(uint64(l))
	return n
}

func (m *InterfaceEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.InterfaceEvents) > 0 {
		for _, e := range m.InterfaceEvents {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func sovInterface(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInterface(x uint64) (n int) {
	return sovInterface(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Interface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PauseSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PauseSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PauseSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPauseEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TxPauseEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPauseEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RxPauseEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Speed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTU", wireType)
			}
			m.MTU = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTU |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pause", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pause == nil {
				m.Pause = &PauseSpec{}
			}
			if err := m.Pause.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCollectors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxCollectors = append(m.TxCollectors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxCollectors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RxCollectors = append(m.RxCollectors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceHostStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceHostStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceHostStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostIfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceUplinkStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceUplinkStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceUplinkStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkSpeed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkSpeed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransceiverStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransceiverStatus == nil {
				m.TransceiverStatus = &TransceiverStatus{}
			}
			if err := m.TransceiverStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortID", wireType)
			}
			m.PortID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransceiverStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransceiverStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransceiverStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransceiverState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransceiverState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranceiverCableType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranceiverCableType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranceiverPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranceiverPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceID", wireType)
			}
			m.InterfaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterfaceID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DSC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryMac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryMac = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IFHostStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IFHostStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IFUplinkStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IFUplinkStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MirrorEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MirrorEnabled = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &Interface{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Interface.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceEvents = append(m.InterfaceEvents, &InterfaceEvent{})
			if err := m.InterfaceEvents[len(m.InterfaceEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInterface(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInterface
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInterface
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInterface(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInterface = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInterface   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("interface.proto", fileDescriptorInterface) }

var fileDescriptorInterface = []byte{
	// 1863 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x57, 0xcd, 0x72, 0xe3, 0xc6,
	0x11, 0x16, 0xf8, 0x27, 0xb2, 0x29, 0x51, 0xb3, 0xa3, 0xd5, 0x9a, 0xa4, 0x65, 0x51, 0xc5, 0xc4,
	0x15, 0xad, 0x6b, 0x49, 0x6a, 0x25, 0x79, 0x1d, 0xc7, 0x5e, 0xc7, 0x04, 0x09, 0x6a, 0x69, 0xf1,
	0x07, 0x06, 0xa9, 0xdd, 0xf8, 0xa4, 0x82, 0xc8, 0x91, 0x84, 0x88, 0x04, 0x50, 0x00, 0xb8, 0x5e,
	0x55, 0xca, 0x95, 0x43, 0x2a, 0x2a, 0x5d, 0x73, 0xcd, 0x13, 0xa4, 0x74, 0xc8, 0x21, 0x55, 0x79,
	0x82, 0x5c, 0xf6, 0xe8, 0x27, 0x60, 0x25, 0x3a, 0xa5, 0x74, 0xcc, 0x13, 0xa4, 0x66, 0x00, 0x12,
	0x03, 0x92, 0xb2, 0x6f, 0xc0, 0x37, 0x5f, 0x7f, 0xdd, 0xd3, 0xf3, 0xd3, 0x3d, 0xb0, 0xa6, 0xe9,
	0x0e, 0xb1, 0xce, 0xd4, 0x1e, 0x29, 0x9a, 0x96, 0xe1, 0x18, 0x38, 0xae, 0x13, 0x87, 0x7d, 0x65,
	0x37, 0xcf, 0x0d, 0xe3, 0x7c, 0x40, 0x4a, 0xaa, 0xa9, 0x95, 0x54, 0x5d, 0x37, 0x1c, 0xd5, 0xd1,
	0x0c, 0xdd, 0x76, 0x79, 0x59, 0xe9, 0x5c, 0x73, 0x2e, 0x46, 0xa7, 0xc5, 0x9e, 0x31, 0x2c, 0x99,
	0x44, 0xb7, 0x55, 0xbd, 0x6f, 0x94, 0xec, 0xef, 0x4b, 0x6f, 0x89, 0xae, 0xf5, 0x48, 0x69, 0xe4,
	0x68, 0x03, 0x9b, 0x9a, 0x9e, 0x13, 0x9d, 0xb7, 0x2e, 0x69, 0x7a, 0x6f, 0x30, 0xea, 0x93, 0x89,
	0x4c, 0x81, 0x93, 0x39, 0x37, 0xce, 0x8d, 0x12, 0x83, 0x4f, 0x47, 0x67, 0xec, 0x8f, 0xfd, 0xb0,
	0x2f, 0x8f, 0xfe, 0xf1, 0x03, 0x5e, 0x69, 0x8c, 0x43, 0xe2, 0xa8, 0x1e, 0x6d, 0x65, 0xa8, 0x59,
	0x96, 0x61, 0xb9, 0x7f, 0xf9, 0xdb, 0x10, 0x24, 0xea, 0x93, 0x69, 0xe2, 0xaf, 0x20, 0xde, 0xbd,
	0x32, 0x49, 0x93, 0x38, 0x6a, 0x5a, 0xd8, 0x16, 0x76, 0x92, 0x7b, 0xab, 0x45, 0xd5, 0xd4, 0x8a,
	0x13, 0x50, 0x5c, 0x7f, 0x3f, 0xce, 0x2d, 0xfd, 0x38, 0xce, 0x09, 0xf7, 0xe3, 0xdc, 0xf2, 0x33,
	0x4d, 0x1f, 0x68, 0x3a, 0x51, 0xa6, 0x36, 0xf8, 0x08, 0xa0, 0x7d, 0xfa, 0x7b, 0xd2, 0x73, 0x98,
	0x42, 0x88, 0x29, 0xac, 0x31, 0x05, 0x1f, 0x16, 0xb3, 0x9c, 0x46, 0x8a, 0x06, 0xf6, 0xcc, 0x18,
	0x6a, 0x0e, 0x19, 0x9a, 0xce, 0x95, 0xc2, 0x99, 0xe3, 0x0a, 0x44, 0x3a, 0x26, 0xe9, 0xa5, 0xc3,
	0x4c, 0xe6, 0x83, 0xe2, 0x24, 0xf9, 0xc5, 0x69, 0xbc, 0x74, 0x58, 0x7c, 0x42, 0xe5, 0xa8, 0x94,
	0x6d, 0x92, 0x1e, 0x27, 0xc5, 0x8c, 0xf1, 0x11, 0xc4, 0x3a, 0x8e, 0xea, 0x8c, 0xec, 0x74, 0x84,
	0xc9, 0x64, 0x16, 0xc9, 0x30, 0x82, 0x98, 0xf6, 0x84, 0x90, 0xcd, 0xfe, 0x39, 0x29, 0x4f, 0x22,
	0xff, 0x1f, 0x01, 0x12, 0xb2, 0x3a, 0xb2, 0x99, 0x63, 0xfc, 0x25, 0x44, 0xe8, 0xc4, 0x59, 0xa2,
	0x12, 0xe2, 0xce, 0xed, 0x75, 0x06, 0x77, 0x1c, 0x4b, 0xd2, 0x47, 0xc3, 0x1d, 0x46, 0xa2, 0x83,
	0x4f, 0x69, 0x60, 0xce, 0x95, 0x49, 0xf8, 0xc0, 0xe8, 0x00, 0xfe, 0x06, 0x52, 0xdd, 0x77, 0x8c,
	0x27, 0xe9, 0xea, 0xe9, 0x80, 0xf4, 0x59, 0xba, 0xe2, 0x62, 0xfe, 0xbd, 0x9b, 0x99, 0xac, 0xf3,
	0xae, 0x60, 0xd2, 0xe1, 0x02, 0x71, 0xc7, 0x39, 0x85, 0x19, 0x4b, 0xaa, 0xa5, 0x04, 0xb5, 0xc2,
	0x41, 0x2d, 0xeb, 0x27, 0xb4, 0x82, 0x96, 0xf9, 0x7f, 0x45, 0x61, 0x35, 0x90, 0x60, 0x7c, 0x18,
	0x98, 0xe7, 0xfe, 0xed, 0x75, 0xe6, 0xa3, 0xc9, 0x3c, 0x03, 0xc4, 0x62, 0xbd, 0xf6, 0xd3, 0x53,
	0xfe, 0x16, 0x92, 0xe5, 0xfe, 0x50, 0xd3, 0xbd, 0x05, 0x09, 0x31, 0xbd, 0xd2, 0xed, 0x75, 0xe6,
	0xd1, 0x54, 0xaf, 0xe6, 0x8e, 0x51, 0x8d, 0x27, 0x2a, 0xe5, 0x16, 0xe6, 0x16, 0x83, 0xd7, 0xc0,
	0xbb, 0xb0, 0xfc, 0xda, 0x3a, 0x6b, 0xa9, 0x43, 0xc2, 0xa6, 0x9c, 0x10, 0x9f, 0xdc, 0x8f, 0x73,
	0xf8, 0xad, 0x75, 0x56, 0xd0, 0xd5, 0xe1, 0x24, 0x02, 0xc7, 0xbc, 0x52, 0x26, 0x34, 0xfc, 0x14,
	0xa2, 0x1d, 0x93, 0x90, 0x3e, 0xdb, 0x0f, 0x09, 0x71, 0xfd, 0x7e, 0x9c, 0x5b, 0xb3, 0x29, 0xc0,
	0xb9, 0x70, 0x19, 0xf8, 0x57, 0x10, 0x6e, 0x76, 0x8f, 0xd3, 0xd1, 0x6d, 0x61, 0x67, 0x55, 0xdc,
	0xf0, 0x72, 0xb9, 0x3a, 0x74, 0x46, 0x1c, 0x95, 0x32, 0xb0, 0x08, 0x51, 0x96, 0xc3, 0x74, 0x8c,
	0xed, 0xb1, 0x75, 0x7f, 0x8f, 0x4d, 0x77, 0x8b, 0xf8, 0x81, 0x67, 0xbf, 0xc6, 0x16, 0x82, 0x77,
	0xc6, 0x38, 0xf8, 0x05, 0x24, 0xea, 0x72, 0xb9, 0xdf, 0xb7, 0x88, 0x6d, 0xa7, 0x97, 0x59, 0x6c,
	0xe9, 0xfb, 0x71, 0xee, 0xb1, 0x66, 0x16, 0x54, 0x17, 0xe5, 0x6c, 0x7c, 0x2a, 0x2e, 0xc1, 0x72,
	0x8b, 0x38, 0xdf, 0x1b, 0xd6, 0x65, 0x3a, 0xce, 0xac, 0x36, 0xee, 0xc7, 0xb9, 0x47, 0xba, 0x0b,
	0xf1, 0x09, 0xf0, 0x58, 0x38, 0x0f, 0x2b, 0xdd, 0x77, 0x15, 0x63, 0x30, 0x20, 0x3d, 0xc7, 0xb0,
	0xec, 0x74, 0x62, 0x3b, 0xbc, 0x93, 0x50, 0x02, 0x18, 0xe5, 0x28, 0x3c, 0x07, 0x5c, 0x0e, 0x8f,
	0xe5, 0xff, 0x2a, 0x40, 0xcc, 0x5d, 0x71, 0x1c, 0x87, 0x48, 0xab, 0xdd, 0x92, 0xd0, 0x12, 0x4e,
	0xc3, 0xf2, 0xab, 0x76, 0xa7, 0x7b, 0x22, 0xd7, 0x90, 0x90, 0x4d, 0xde, 0xdd, 0x64, 0x96, 0x2f,
	0x0c, 0xdb, 0x29, 0x98, 0x67, 0x78, 0x0b, 0xe0, 0x58, 0x6e, 0xd4, 0x5b, 0x47, 0x27, 0x52, 0xf7,
	0x15, 0x0a, 0x67, 0x53, 0x77, 0x37, 0x19, 0x18, 0x99, 0x03, 0x4d, 0xbf, 0x2c, 0x10, 0xe7, 0x02,
	0x6f, 0x43, 0xd2, 0x1b, 0x6f, 0x1e, 0x36, 0xbb, 0x28, 0x92, 0x5d, 0xbb, 0xbb, 0xc9, 0x24, 0x3d,
	0xc2, 0xf0, 0x7c, 0xe8, 0xe0, 0x14, 0x84, 0x1a, 0xfb, 0x28, 0x9a, 0x8d, 0xdd, 0xdd, 0x64, 0x42,
	0x83, 0x7d, 0x9c, 0x85, 0x78, 0xa3, 0xdd, 0x96, 0xc5, 0x72, 0xe5, 0x08, 0xc5, 0xb2, 0x2b, 0x77,
	0x37, 0x99, 0xf8, 0xc0, 0x30, 0xcc, 0x53, 0xb5, 0x77, 0x99, 0x97, 0x61, 0x7d, 0xba, 0x37, 0x5f,
	0x19, 0xb6, 0xe3, 0x6d, 0x97, 0xcf, 0x01, 0xe8, 0x5f, 0xdd, 0xdd, 0x31, 0xee, 0x86, 0xce, 0xdc,
	0x8f, 0x73, 0x1b, 0x2c, 0x4a, 0xed, 0x8c, 0xdb, 0x34, 0xec, 0x36, 0xf2, 0xc9, 0xf9, 0xff, 0x09,
	0xb0, 0x31, 0x95, 0x3c, 0x66, 0x61, 0x79, 0xa2, 0x2f, 0x20, 0xd1, 0xa0, 0x7f, 0x6c, 0x57, 0x09,
	0xfe, 0xca, 0xb1, 0xc8, 0x67, 0xb7, 0x96, 0x4f, 0xc5, 0x97, 0xf0, 0xa8, 0x6b, 0xa9, 0xba, 0xdd,
	0x23, 0xda, 0x5b, 0x62, 0x71, 0x87, 0x22, 0xb9, 0xf7, 0xa1, 0xbf, 0x83, 0xe6, 0x28, 0xe2, 0xf6,
	0xfd, 0x38, 0xb7, 0xe9, 0xf8, 0xf0, 0xfc, 0x11, 0x99, 0xd7, 0xc5, 0x07, 0x10, 0x93, 0x0d, 0xcb,
	0xa9, 0x57, 0xd9, 0x39, 0x59, 0x15, 0x37, 0xef, 0xc7, 0xb9, 0xb4, 0x97, 0x5d, 0xd3, 0xb0, 0x9c,
	0x82, 0xc6, 0x47, 0xe9, 0x71, 0xf3, 0x7f, 0x8f, 0x2f, 0x88, 0x11, 0xf7, 0x00, 0xcd, 0x80, 0x93,
	0x5c, 0x7e, 0x76, 0x7b, 0x9d, 0xd9, 0x9e, 0x1c, 0xe6, 0x39, 0xc3, 0x22, 0xa3, 0x3e, 0x65, 0x27,
	0x8e, 0x7e, 0x71, 0x0e, 0xe7, 0x04, 0xb1, 0x05, 0xeb, 0x14, 0x73, 0xa1, 0x0a, 0xbd, 0x9b, 0xd8,
	0x25, 0xe4, 0x5e, 0x1a, 0x5f, 0xdf, 0x5e, 0x67, 0x7e, 0xf9, 0xb0, 0x9f, 0x29, 0x9d, 0xfa, 0x7a,
	0xdc, 0xa3, 0x7f, 0x85, 0x99, 0x1b, 0x69, 0x91, 0x38, 0xfe, 0x0e, 0x56, 0x7d, 0x58, 0xd6, 0xfa,
	0xde, 0x9d, 0x42, 0xaf, 0xbc, 0xad, 0x87, 0xbd, 0xc9, 0x5a, 0x9f, 0xfa, 0x59, 0x35, 0x03, 0x29,
	0x0c, 0x2a, 0xe5, 0xff, 0x08, 0x51, 0x77, 0x5e, 0x2b, 0x10, 0xef, 0x74, 0xcb, 0x5d, 0xe9, 0xa4,
	0x55, 0x46, 0x4b, 0xf8, 0x11, 0xac, 0xba, 0x7f, 0x8a, 0xd4, 0x6c, 0xbf, 0x96, 0xaa, 0x48, 0xc0,
	0x18, 0x52, 0x2e, 0x54, 0x6f, 0x75, 0x24, 0xa5, 0x2b, 0x55, 0x51, 0xc8, 0xa7, 0xc9, 0x52, 0xab,
	0x5a, 0x6f, 0x1d, 0xa2, 0x30, 0x7e, 0x0c, 0xc8, 0x85, 0x3a, 0xb2, 0xd2, 0x6e, 0x9e, 0x28, 0x52,
	0xb9, 0x8a, 0x22, 0x38, 0x0d, 0x8f, 0x67, 0xd1, 0x13, 0x49, 0x51, 0x50, 0x34, 0xff, 0x0c, 0x12,
	0xfe, 0x44, 0xfd, 0x03, 0x0b, 0x10, 0xab, 0xb4, 0x65, 0x59, 0x52, 0x90, 0x80, 0x13, 0x10, 0xad,
	0xd5, 0x45, 0x49, 0x41, 0xa1, 0xfc, 0x3f, 0x23, 0x10, 0x96, 0xb5, 0x3e, 0x4e, 0xc2, 0xf2, 0x71,
	0xeb, 0xa8, 0xd5, 0x7e, 0xd3, 0x72, 0x83, 0xfd, 0xb6, 0x53, 0x93, 0x4f, 0x9e, 0xef, 0xee, 0x1e,
	0x9e, 0x54, 0x94, 0x03, 0x24, 0xd0, 0x28, 0x18, 0x74, 0xb0, 0x7b, 0x28, 0x96, 0x3b, 0x12, 0x43,
	0x43, 0x2c, 0xb6, 0x9a, 0x7c, 0xb2, 0xf7, 0xe9, 0x04, 0x3c, 0xe9, 0x78, 0x11, 0x07, 0xd1, 0x06,
	0x8a, 0x2c, 0x40, 0x5b, 0x28, 0x1a, 0x74, 0x55, 0x6e, 0x57, 0xd0, 0xde, 0x0c, 0x54, 0xa9, 0xa0,
	0xfd, 0x20, 0xd4, 0x51, 0x0e, 0xd0, 0x41, 0x10, 0x6a, 0x28, 0x07, 0xe8, 0xd3, 0x20, 0x24, 0x29,
	0x07, 0xe8, 0xc5, 0x5c, 0xd8, 0x14, 0xfd, 0x6c, 0x0e, 0xa5, 0x8a, 0xbf, 0x9e, 0x43, 0xa9, 0xe8,
	0xe7, 0x73, 0x28, 0x8d, 0xf1, 0x37, 0x6c, 0xed, 0xb8, 0xc9, 0x74, 0x14, 0xf4, 0xc5, 0x2c, 0xd6,
	0x50, 0xd0, 0x97, 0xb3, 0x98, 0xa4, 0xa0, 0x97, 0x78, 0x1d, 0xd6, 0x78, 0x8c, 0x0a, 0x7e, 0x35,
	0x21, 0x3e, 0x9f, 0x46, 0x84, 0x7e, 0x3b, 0x8b, 0x35, 0x14, 0xf4, 0xf5, 0xc4, 0xd8, 0xc7, 0x9a,
	0xa8, 0x3c, 0x4b, 0x94, 0x14, 0x24, 0xce, 0x12, 0xa9, 0x97, 0xca, 0x2c, 0xb1, 0x72, 0x8c, 0xaa,
	0x94, 0xc8, 0x2d, 0xf6, 0x9b, 0x6a, 0xf3, 0x00, 0x49, 0x94, 0xe8, 0x83, 0x72, 0xa7, 0x79, 0x80,
	0x6a, 0x38, 0x09, 0x31, 0xb9, 0x5e, 0xa5, 0xdb, 0xf9, 0xbf, 0xcb, 0xf9, 0x3f, 0x47, 0x61, 0x6d,
	0xa6, 0xaf, 0xc2, 0x1f, 0x43, 0x84, 0xbb, 0x6e, 0x1f, 0xd1, 0xa3, 0xd2, 0xb7, 0x03, 0x9d, 0x1a,
	0x2b, 0xcc, 0x7b, 0x90, 0x9c, 0x5a, 0xd6, 0xab, 0xec, 0xa0, 0x47, 0x44, 0x74, 0x3f, 0xce, 0xad,
	0x04, 0xce, 0x15, 0x4f, 0xc2, 0xbf, 0x80, 0x70, 0xb5, 0x53, 0xf1, 0x8e, 0xe9, 0x02, 0x65, 0x3a,
	0x8a, 0x5b, 0x00, 0x6d, 0x73, 0x7a, 0xc1, 0xba, 0x65, 0xbf, 0xf8, 0x50, 0xd7, 0xb1, 0x61, 0x98,
	0x8b, 0x6e, 0x54, 0x4e, 0x01, 0xb7, 0x01, 0x64, 0x4b, 0x1b, 0xaa, 0xd6, 0x55, 0x53, 0xed, 0xb1,
	0xee, 0xc0, 0xed, 0x62, 0xb0, 0x44, 0xa9, 0x6d, 0x6b, 0xa7, 0xa9, 0xf6, 0x68, 0x75, 0xde, 0x79,
	0xca, 0x04, 0x4d, 0x97, 0x5b, 0x18, 0xaa, 0x7c, 0x64, 0x9c, 0x04, 0xee, 0xc1, 0x4a, 0xbd, 0xe6,
	0x57, 0x29, 0xaf, 0x8b, 0xf8, 0x68, 0x41, 0xa7, 0xea, 0x93, 0xc4, 0x6d, 0xaf, 0x5b, 0x4d, 0x6b,
	0x67, 0x05, 0x56, 0xbd, 0xe6, 0x62, 0x0e, 0x88, 0xe2, 0x4b, 0x48, 0xd5, 0x6b, 0x7c, 0xdd, 0x62,
	0x4d, 0x46, 0x72, 0x2f, 0xb7, 0xc0, 0x0d, 0x4f, 0x63, 0x4d, 0x24, 0x75, 0x94, 0xd5, 0xce, 0x0a,
	0x5e, 0xc1, 0x98, 0x73, 0x35, 0x23, 0x8d, 0x45, 0x58, 0x6d, 0xb2, 0x57, 0xc6, 0xa4, 0x1f, 0x8d,
	0xb3, 0x7e, 0x94, 0x15, 0x1d, 0xf7, 0xf9, 0xb1, 0xa0, 0x13, 0x0d, 0x9a, 0xe0, 0x2f, 0xb8, 0x3e,
	0xf4, 0xf8, 0xb8, 0x5e, 0x4d, 0x27, 0xfc, 0xf6, 0x86, 0x86, 0x32, 0x0a, 0x5e, 0xb7, 0x01, 0x6e,
	0xbe, 0xca, 0x19, 0x37, 0x34, 0xdb, 0xc1, 0xfb, 0x00, 0xd3, 0xd7, 0x9c, 0x9d, 0x16, 0xb6, 0xc3,
	0xc1, 0x3e, 0x6d, 0x4a, 0x56, 0x38, 0x5a, 0xfe, 0x6f, 0x02, 0xa4, 0xa6, 0x23, 0xd2, 0x5b, 0xa2,
	0x3b, 0xb8, 0x06, 0x09, 0xf6, 0x31, 0xed, 0x88, 0x53, 0x7b, 0x29, 0xf6, 0xc0, 0x99, 0xa2, 0x6e,
	0xf1, 0x27, 0xf4, 0x77, 0xb6, 0xe8, 0xf8, 0xa6, 0xb8, 0xc5, 0x3d, 0xbb, 0xbc, 0xa2, 0xbf, 0x28,
	0x1c, 0xf1, 0x43, 0x2f, 0xfb, 0xeb, 0xd3, 0xb0, 0x02, 0x6d, 0xe0, 0x04, 0xcc, 0xff, 0x0e, 0x70,
	0x30, 0x52, 0x36, 0x6b, 0x91, 0x3b, 0x8d, 0x0c, 0x9d, 0x4c, 0x3d, 0xbd, 0xc0, 0x17, 0x23, 0x28,
	0xb3, 0x06, 0x9f, 0xec, 0x7a, 0x6f, 0x1e, 0x16, 0x76, 0x12, 0x96, 0xab, 0xf5, 0x4e, 0x59, 0x6c,
	0xd0, 0xda, 0x11, 0x87, 0x08, 0x6d, 0xd8, 0x90, 0x40, 0x8b, 0x9a, 0xac, 0xd4, 0xdb, 0x4a, 0xbd,
	0xfb, 0x1d, 0x0a, 0x7d, 0xb2, 0x09, 0xf1, 0xc9, 0x91, 0xc2, 0x31, 0x08, 0x1d, 0xcb, 0x2e, 0xb7,
	0x4a, 0xab, 0x88, 0xb0, 0xf7, 0x97, 0x30, 0x97, 0xd4, 0xb2, 0xa9, 0xbd, 0x7e, 0x8e, 0x45, 0x48,
	0xd1, 0x70, 0xa7, 0xa8, 0x8d, 0x37, 0x58, 0x4e, 0x29, 0xf8, 0x46, 0x75, 0x7a, 0x17, 0x6d, 0x93,
	0x3d, 0x90, 0xb3, 0x8b, 0x1e, 0x81, 0x94, 0x94, 0x5f, 0xc2, 0xdf, 0xc0, 0x1a, 0xa3, 0xfe, 0xbc,
	0xc8, 0xe6, 0x43, 0x73, 0x77, 0x95, 0x76, 0x05, 0x2c, 0x72, 0xdd, 0x23, 0x3d, 0xf8, 0xc7, 0x66,
	0x9f, 0x96, 0xee, 0x07, 0x93, 0x96, 0x0d, 0xbe, 0x92, 0xf3, 0x4b, 0x3b, 0x02, 0x7e, 0x09, 0x6b,
	0x15, 0x8b, 0xa8, 0x0e, 0xf1, 0x5f, 0xd7, 0x8b, 0x16, 0x38, 0xbb, 0x08, 0xcc, 0x2f, 0x65, 0x07,
	0xff, 0xf8, 0x53, 0xe6, 0x82, 0x7f, 0x9a, 0x47, 0x06, 0x74, 0x41, 0xc3, 0xe7, 0xc4, 0xc1, 0x11,
	0xd3, 0xb0, 0x1d, 0x1c, 0xeb, 0x93, 0x01, 0x71, 0x08, 0x0e, 0x9b, 0x23, 0x27, 0xfb, 0xb2, 0xf4,
	0x07, 0xff, 0xe5, 0x5c, 0xec, 0x12, 0x5d, 0xd5, 0x9d, 0x1f, 0x02, 0x18, 0xbd, 0x63, 0x6d, 0x53,
	0xed, 0x91, 0x79, 0xf8, 0x07, 0x71, 0xe5, 0xfd, 0xdd, 0x96, 0xf0, 0xe3, 0xdd, 0x96, 0xf0, 0xef,
	0xbb, 0x2d, 0x41, 0x16, 0x4e, 0x63, 0x2c, 0xa0, 0xfd, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xcb,
	0xe7, 0x32, 0xd2, 0x02, 0x11, 0x00, 0x00,
}
