//------------------------------------------------------------------------------
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved
//
// protobuf specification for interface
//------------------------------------------------------------------------------

syntax = "proto3";
package netproto;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";


// ---------------------------- Interface API ----------------------------
// Interface controller api
service InterfaceApi {
    // options for auto generating rest endpoints
    option(venice.naplesRestService) = {
        Object: "Interface",
        Method: ["list", "post", "delete", "put"],
        Pattern: "/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}"
    };

    rpc GetInterface (api.ObjectMeta) returns (Interface) {};
    rpc ListInterfaces (api.ObjectMeta) returns (InterfaceList) {};
    rpc WatchInterfaces (api.ObjectMeta) returns (stream InterfaceEvent) {};
    rpc UpdateInterface (Interface) returns (Interface) {};
}

// Interface object
message Interface {
    api.TypeMeta    TypeMeta    = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta  ObjectMeta  = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    InterfaceSpec   Spec        = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
    InterfaceStatus Status      = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// InterfaceSpec captures all the interface level configuration
message InterfaceSpec {
    enum IFType {
        NONE                = 0;
        ENIC                = 1;
        UPLINK_ETH          = 2;
        UPLINK_MGMT         = 3;
    }

    string Type             = 1 [(venice.check) = "StrEnum(InterfaceSpec.IFType)",
                                (gogoproto.jsontag) = "type,omitempty"];
    string AdminStatus      = 2 [(venice.check) = "StrEnum(InterfaceStatus.IFStatus)",
                                (gogoproto.jsontag) = "admin-status,omitempty"];
    // VrfName specifies the name of the VRF that the current Interface belongs to
    string VrfName          = 3 [(gogoproto.jsontag) = "vrf-name,omitemtpy"];
}

// Interface Status
message InterfaceStatus {
    enum IFStatus {
        NONE              = 0;
        UP                = 1;
        DOWN              = 2;
    }
    uint64 InterfaceID              = 1 [(gogoproto.jsontag) = "id,omitempty"];
    string OperStatus               = 2 [(venice.check) = "StrEnum(InterfaceStatus.IFStatus)",
                                         (gogoproto.jsontag) = "oper-status,omitempty"];
    EnicStatus EnicStatus           = 3 [(gogoproto.jsontag) = "enic-status,omitempty"];
    uint32 UplinkPortID             = 4 [(gogoproto.jsontag) = "uplink-port-id,omitempty"];
}



// EnicStatus captures enic configurations.
message EnicStatus {
    // List of endpoints that this ENIC is mapped to
    repeated string EpName = 2 [(gogoproto.jsontag) = "ep-name,omitempty"];
}

message InterfaceList {
    repeated Interface interfaces  = 1;
}

// interaface watch event
message InterfaceEvent {
    api.EventType   EventType   = 1 [(gogoproto.jsontag) = "event-type,omitempty"];
    Interface       Interface   = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "interface,omitempty"];
}

