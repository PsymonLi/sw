// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dscconfig.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DSCConfigSpec struct {
	Tenant    string `protobuf:"bytes,1,opt,name=Tenant,proto3" json:"tenant,omitempty"`
	TxPolicer string `protobuf:"bytes,2,opt,name=TxPolicer,proto3" json:"tx-policer,omitempty"`
}

func (m *DSCConfigSpec) Reset()                    { *m = DSCConfigSpec{} }
func (m *DSCConfigSpec) String() string            { return proto.CompactTextString(m) }
func (*DSCConfigSpec) ProtoMessage()               {}
func (*DSCConfigSpec) Descriptor() ([]byte, []int) { return fileDescriptorDscconfig, []int{0} }

func (m *DSCConfigSpec) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *DSCConfigSpec) GetTxPolicer() string {
	if m != nil {
		return m.TxPolicer
	}
	return ""
}

type DSCConfigStatus struct {
	DSCConfigID uint64 `protobuf:"varint,1,opt,name=DSCConfigID,proto3" json:"id,omitempty"`
	// DSC is the name of the dsc it belongs to
	DSC string `protobuf:"bytes,2,opt,name=DSC,proto3" json:"dsc,omitempty"`
}

func (m *DSCConfigStatus) Reset()                    { *m = DSCConfigStatus{} }
func (m *DSCConfigStatus) String() string            { return proto.CompactTextString(m) }
func (*DSCConfigStatus) ProtoMessage()               {}
func (*DSCConfigStatus) Descriptor() ([]byte, []int) { return fileDescriptorDscconfig, []int{1} }

func (m *DSCConfigStatus) GetDSCConfigID() uint64 {
	if m != nil {
		return m.DSCConfigID
	}
	return 0
}

func (m *DSCConfigStatus) GetDSC() string {
	if m != nil {
		return m.DSC
	}
	return ""
}

type DSCConfigEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	DSCConfig DSCConfig     `protobuf:"bytes,2,opt,name=DSCConfig" json:"dsc-config,omitempty"`
}

func (m *DSCConfigEvent) Reset()                    { *m = DSCConfigEvent{} }
func (m *DSCConfigEvent) String() string            { return proto.CompactTextString(m) }
func (*DSCConfigEvent) ProtoMessage()               {}
func (*DSCConfigEvent) Descriptor() ([]byte, []int) { return fileDescriptorDscconfig, []int{2} }

func (m *DSCConfigEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *DSCConfigEvent) GetDSCConfig() DSCConfig {
	if m != nil {
		return m.DSCConfig
	}
	return DSCConfig{}
}

type DSCConfigEventList struct {
	DSCConfigEvents []*DSCConfigEvent `protobuf:"bytes,1,rep,name=DSCConfigEvents" json:"DSCConfigEvents,omitempty"`
}

func (m *DSCConfigEventList) Reset()                    { *m = DSCConfigEventList{} }
func (m *DSCConfigEventList) String() string            { return proto.CompactTextString(m) }
func (*DSCConfigEventList) ProtoMessage()               {}
func (*DSCConfigEventList) Descriptor() ([]byte, []int) { return fileDescriptorDscconfig, []int{3} }

func (m *DSCConfigEventList) GetDSCConfigEvents() []*DSCConfigEvent {
	if m != nil {
		return m.DSCConfigEvents
	}
	return nil
}

type DSCConfigList struct {
	DSCConfigs []*DSCConfig `protobuf:"bytes,1,rep,name=DSCConfigs" json:"DSCConfigs,omitempty"`
}

func (m *DSCConfigList) Reset()                    { *m = DSCConfigList{} }
func (m *DSCConfigList) String() string            { return proto.CompactTextString(m) }
func (*DSCConfigList) ProtoMessage()               {}
func (*DSCConfigList) Descriptor() ([]byte, []int) { return fileDescriptorDscconfig, []int{4} }

func (m *DSCConfigList) GetDSCConfigs() []*DSCConfig {
	if m != nil {
		return m.DSCConfigs
	}
	return nil
}

// DSCConfig
type DSCConfig struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           DSCConfigSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         DSCConfigStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *DSCConfig) Reset()                    { *m = DSCConfig{} }
func (m *DSCConfig) String() string            { return proto.CompactTextString(m) }
func (*DSCConfig) ProtoMessage()               {}
func (*DSCConfig) Descriptor() ([]byte, []int) { return fileDescriptorDscconfig, []int{5} }

func (m *DSCConfig) GetSpec() DSCConfigSpec {
	if m != nil {
		return m.Spec
	}
	return DSCConfigSpec{}
}

func (m *DSCConfig) GetStatus() DSCConfigStatus {
	if m != nil {
		return m.Status
	}
	return DSCConfigStatus{}
}

func init() {
	proto.RegisterType((*DSCConfigSpec)(nil), "netproto.DSCConfigSpec")
	proto.RegisterType((*DSCConfigStatus)(nil), "netproto.DSCConfigStatus")
	proto.RegisterType((*DSCConfigEvent)(nil), "netproto.DSCConfigEvent")
	proto.RegisterType((*DSCConfigEventList)(nil), "netproto.DSCConfigEventList")
	proto.RegisterType((*DSCConfigList)(nil), "netproto.DSCConfigList")
	proto.RegisterType((*DSCConfig)(nil), "netproto.DSCConfig")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DSCConfigApiV1 service

type DSCConfigApiV1Client interface {
	ListDSCConfigs(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*DSCConfigList, error)
	WatchDSCConfigs(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (DSCConfigApiV1_WatchDSCConfigsClient, error)
	DSCConfigOperUpdate(ctx context.Context, opts ...grpc.CallOption) (DSCConfigApiV1_DSCConfigOperUpdateClient, error)
}

type dSCConfigApiV1Client struct {
	cc *grpc.ClientConn
}

func NewDSCConfigApiV1Client(cc *grpc.ClientConn) DSCConfigApiV1Client {
	return &dSCConfigApiV1Client{cc}
}

func (c *dSCConfigApiV1Client) ListDSCConfigs(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*DSCConfigList, error) {
	out := new(DSCConfigList)
	err := grpc.Invoke(ctx, "/netproto.DSCConfigApiV1/ListDSCConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSCConfigApiV1Client) WatchDSCConfigs(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (DSCConfigApiV1_WatchDSCConfigsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DSCConfigApiV1_serviceDesc.Streams[0], c.cc, "/netproto.DSCConfigApiV1/WatchDSCConfigs", opts...)
	if err != nil {
		return nil, err
	}
	x := &dSCConfigApiV1WatchDSCConfigsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DSCConfigApiV1_WatchDSCConfigsClient interface {
	Recv() (*DSCConfigEventList, error)
	grpc.ClientStream
}

type dSCConfigApiV1WatchDSCConfigsClient struct {
	grpc.ClientStream
}

func (x *dSCConfigApiV1WatchDSCConfigsClient) Recv() (*DSCConfigEventList, error) {
	m := new(DSCConfigEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dSCConfigApiV1Client) DSCConfigOperUpdate(ctx context.Context, opts ...grpc.CallOption) (DSCConfigApiV1_DSCConfigOperUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DSCConfigApiV1_serviceDesc.Streams[1], c.cc, "/netproto.DSCConfigApiV1/DSCConfigOperUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &dSCConfigApiV1DSCConfigOperUpdateClient{stream}
	return x, nil
}

type DSCConfigApiV1_DSCConfigOperUpdateClient interface {
	Send(*DSCConfigEvent) error
	CloseAndRecv() (*api.TypeMeta, error)
	grpc.ClientStream
}

type dSCConfigApiV1DSCConfigOperUpdateClient struct {
	grpc.ClientStream
}

func (x *dSCConfigApiV1DSCConfigOperUpdateClient) Send(m *DSCConfigEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dSCConfigApiV1DSCConfigOperUpdateClient) CloseAndRecv() (*api.TypeMeta, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.TypeMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DSCConfigApiV1 service

type DSCConfigApiV1Server interface {
	ListDSCConfigs(context.Context, *api.ListWatchOptions) (*DSCConfigList, error)
	WatchDSCConfigs(*api.ListWatchOptions, DSCConfigApiV1_WatchDSCConfigsServer) error
	DSCConfigOperUpdate(DSCConfigApiV1_DSCConfigOperUpdateServer) error
}

func RegisterDSCConfigApiV1Server(s *grpc.Server, srv DSCConfigApiV1Server) {
	s.RegisterService(&_DSCConfigApiV1_serviceDesc, srv)
}

func _DSCConfigApiV1_ListDSCConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSCConfigApiV1Server).ListDSCConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.DSCConfigApiV1/ListDSCConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSCConfigApiV1Server).ListDSCConfigs(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSCConfigApiV1_WatchDSCConfigs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DSCConfigApiV1Server).WatchDSCConfigs(m, &dSCConfigApiV1WatchDSCConfigsServer{stream})
}

type DSCConfigApiV1_WatchDSCConfigsServer interface {
	Send(*DSCConfigEventList) error
	grpc.ServerStream
}

type dSCConfigApiV1WatchDSCConfigsServer struct {
	grpc.ServerStream
}

func (x *dSCConfigApiV1WatchDSCConfigsServer) Send(m *DSCConfigEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _DSCConfigApiV1_DSCConfigOperUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DSCConfigApiV1Server).DSCConfigOperUpdate(&dSCConfigApiV1DSCConfigOperUpdateServer{stream})
}

type DSCConfigApiV1_DSCConfigOperUpdateServer interface {
	SendAndClose(*api.TypeMeta) error
	Recv() (*DSCConfigEvent, error)
	grpc.ServerStream
}

type dSCConfigApiV1DSCConfigOperUpdateServer struct {
	grpc.ServerStream
}

func (x *dSCConfigApiV1DSCConfigOperUpdateServer) SendAndClose(m *api.TypeMeta) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dSCConfigApiV1DSCConfigOperUpdateServer) Recv() (*DSCConfigEvent, error) {
	m := new(DSCConfigEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DSCConfigApiV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.DSCConfigApiV1",
	HandlerType: (*DSCConfigApiV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDSCConfigs",
			Handler:    _DSCConfigApiV1_ListDSCConfigs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchDSCConfigs",
			Handler:       _DSCConfigApiV1_WatchDSCConfigs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DSCConfigOperUpdate",
			Handler:       _DSCConfigApiV1_DSCConfigOperUpdate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "dscconfig.proto",
}

func (m *DSCConfigSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSCConfigSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tenant) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDscconfig(dAtA, i, uint64(len(m.Tenant)))
		i += copy(dAtA[i:], m.Tenant)
	}
	if len(m.TxPolicer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDscconfig(dAtA, i, uint64(len(m.TxPolicer)))
		i += copy(dAtA[i:], m.TxPolicer)
	}
	return i, nil
}

func (m *DSCConfigStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSCConfigStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DSCConfigID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDscconfig(dAtA, i, uint64(m.DSCConfigID))
	}
	if len(m.DSC) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDscconfig(dAtA, i, uint64(len(m.DSC)))
		i += copy(dAtA[i:], m.DSC)
	}
	return i, nil
}

func (m *DSCConfigEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSCConfigEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDscconfig(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintDscconfig(dAtA, i, uint64(m.DSCConfig.Size()))
	n1, err := m.DSCConfig.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *DSCConfigEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSCConfigEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DSCConfigEvents) > 0 {
		for _, msg := range m.DSCConfigEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDscconfig(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DSCConfigList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSCConfigList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DSCConfigs) > 0 {
		for _, msg := range m.DSCConfigs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDscconfig(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DSCConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSCConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDscconfig(dAtA, i, uint64(m.TypeMeta.Size()))
	n2, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintDscconfig(dAtA, i, uint64(m.ObjectMeta.Size()))
	n3, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintDscconfig(dAtA, i, uint64(m.Spec.Size()))
	n4, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintDscconfig(dAtA, i, uint64(m.Status.Size()))
	n5, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func encodeVarintDscconfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DSCConfigSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovDscconfig(uint64(l))
	}
	l = len(m.TxPolicer)
	if l > 0 {
		n += 1 + l + sovDscconfig(uint64(l))
	}
	return n
}

func (m *DSCConfigStatus) Size() (n int) {
	var l int
	_ = l
	if m.DSCConfigID != 0 {
		n += 1 + sovDscconfig(uint64(m.DSCConfigID))
	}
	l = len(m.DSC)
	if l > 0 {
		n += 1 + l + sovDscconfig(uint64(l))
	}
	return n
}

func (m *DSCConfigEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovDscconfig(uint64(m.EventType))
	}
	l = m.DSCConfig.Size()
	n += 1 + l + sovDscconfig(uint64(l))
	return n
}

func (m *DSCConfigEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.DSCConfigEvents) > 0 {
		for _, e := range m.DSCConfigEvents {
			l = e.Size()
			n += 1 + l + sovDscconfig(uint64(l))
		}
	}
	return n
}

func (m *DSCConfigList) Size() (n int) {
	var l int
	_ = l
	if len(m.DSCConfigs) > 0 {
		for _, e := range m.DSCConfigs {
			l = e.Size()
			n += 1 + l + sovDscconfig(uint64(l))
		}
	}
	return n
}

func (m *DSCConfig) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovDscconfig(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovDscconfig(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovDscconfig(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovDscconfig(uint64(l))
	return n
}

func sovDscconfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDscconfig(x uint64) (n int) {
	return sovDscconfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DSCConfigSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDscconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSCConfigSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSCConfigSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDscconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPolicer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDscconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxPolicer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDscconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDscconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSCConfigStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDscconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSCConfigStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSCConfigStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSCConfigID", wireType)
			}
			m.DSCConfigID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DSCConfigID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDscconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DSC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDscconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDscconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSCConfigEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDscconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSCConfigEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSCConfigEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSCConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDscconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DSCConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDscconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDscconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSCConfigEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDscconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSCConfigEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSCConfigEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSCConfigEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDscconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DSCConfigEvents = append(m.DSCConfigEvents, &DSCConfigEvent{})
			if err := m.DSCConfigEvents[len(m.DSCConfigEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDscconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDscconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSCConfigList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDscconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSCConfigList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSCConfigList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSCConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDscconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DSCConfigs = append(m.DSCConfigs, &DSCConfig{})
			if err := m.DSCConfigs[len(m.DSCConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDscconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDscconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSCConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDscconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSCConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSCConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDscconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDscconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDscconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDscconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDscconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDscconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDscconfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDscconfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDscconfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDscconfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDscconfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDscconfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDscconfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDscconfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDscconfig   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dscconfig.proto", fileDescriptorDscconfig) }

var fileDescriptorDscconfig = []byte{
	// 694 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x4e, 0xdb, 0x4c,
	0x14, 0x65, 0x92, 0x28, 0xdf, 0x97, 0x09, 0x49, 0xe8, 0x40, 0x5b, 0x13, 0x21, 0x82, 0x5c, 0x55,
	0x42, 0x15, 0x89, 0x21, 0x48, 0x95, 0xba, 0xe8, 0xa2, 0x4e, 0xa8, 0xd4, 0xdf, 0xa0, 0x90, 0xd2,
	0x6e, 0x1d, 0x7b, 0x30, 0x83, 0x92, 0xf1, 0x88, 0x99, 0x50, 0x10, 0x42, 0x5d, 0x74, 0xd7, 0x37,
	0xe9, 0xb6, 0x4f, 0xc1, 0x92, 0x27, 0xb0, 0x2a, 0xa4, 0x6e, 0xf2, 0x14, 0xd5, 0x5c, 0x07, 0x67,
	0x68, 0x83, 0xba, 0xf3, 0xdc, 0x39, 0xe7, 0xdc, 0xbf, 0xe3, 0xc1, 0x95, 0x40, 0xfa, 0x7e, 0xc4,
	0x0f, 0x58, 0xd8, 0x10, 0xc7, 0x91, 0x8a, 0xc8, 0xff, 0x9c, 0x2a, 0xf8, 0xaa, 0xae, 0x84, 0x51,
	0x14, 0x0e, 0xa8, 0xe3, 0x09, 0xe6, 0x78, 0x9c, 0x47, 0xca, 0x53, 0x2c, 0xe2, 0x32, 0xc1, 0x55,
	0x77, 0x42, 0xa6, 0x0e, 0x47, 0xfd, 0x86, 0x1f, 0x0d, 0x1d, 0x41, 0xb9, 0xf4, 0x78, 0x10, 0x39,
	0xf2, 0xb3, 0x73, 0x42, 0x39, 0xf3, 0xa9, 0x33, 0x52, 0x6c, 0x20, 0x35, 0x35, 0xa4, 0xdc, 0x64,
	0x3b, 0x8c, 0xfb, 0x83, 0x51, 0x40, 0x6f, 0x64, 0xea, 0x86, 0x4c, 0x18, 0x85, 0x91, 0x03, 0xe1,
	0xfe, 0xe8, 0x00, 0x4e, 0x70, 0x80, 0xaf, 0x09, 0xfc, 0xf1, 0x1d, 0x59, 0x75, 0x8d, 0x43, 0xaa,
	0xbc, 0x04, 0x66, 0x8f, 0x70, 0xa9, 0xbd, 0xd7, 0x6a, 0x41, 0x5f, 0x7b, 0x82, 0xfa, 0x64, 0x03,
	0xe7, 0x7b, 0x94, 0x7b, 0x5c, 0x59, 0x68, 0x0d, 0xad, 0x17, 0xdc, 0xa5, 0x71, 0x5c, 0x5b, 0x50,
	0x10, 0xd9, 0x88, 0x86, 0x4c, 0xd1, 0xa1, 0x50, 0x67, 0xdd, 0x09, 0x86, 0x3c, 0xc5, 0x85, 0xde,
	0xe9, 0x6e, 0x34, 0x60, 0x3e, 0x3d, 0xb6, 0x32, 0x40, 0xb0, 0xc6, 0x71, 0x6d, 0x49, 0x9d, 0xd6,
	0x45, 0x12, 0x35, 0x48, 0x53, 0xa8, 0x7d, 0x84, 0x2b, 0xd3, 0xb4, 0xca, 0x53, 0x23, 0x49, 0x9a,
	0xb8, 0x98, 0x86, 0x5e, 0xb5, 0x21, 0x7b, 0xce, 0x5d, 0x18, 0xc7, 0xb5, 0x79, 0x16, 0x18, 0x22,
	0x26, 0x88, 0x3c, 0xc2, 0xd9, 0xf6, 0x5e, 0x6b, 0x92, 0xf8, 0xde, 0x38, 0xae, 0x95, 0x02, 0xe9,
	0x1b, 0x60, 0x7d, 0x6b, 0x7f, 0x47, 0xb8, 0x9c, 0x92, 0x76, 0x4e, 0x28, 0x57, 0xe4, 0x25, 0x2e,
	0xc0, 0x47, 0xef, 0x4c, 0x50, 0xc8, 0x54, 0x6e, 0x96, 0x1b, 0x9e, 0x60, 0x8d, 0x34, 0x9a, 0xb4,
	0x41, 0xf5, 0xb1, 0xae, 0xce, 0x04, 0x35, 0xdb, 0x48, 0x41, 0xa4, 0x83, 0x0b, 0xa9, 0x32, 0x54,
	0x51, 0x6c, 0x2e, 0x36, 0x6e, 0x6c, 0xd1, 0x48, 0xaf, 0xdc, 0x95, 0xcb, 0xb8, 0x36, 0xa7, 0x05,
	0x03, 0xe9, 0xd7, 0x13, 0x13, 0x99, 0x82, 0x29, 0xd0, 0xfe, 0x84, 0xc9, 0xed, 0x52, 0xdf, 0x32,
	0xa9, 0x88, 0x6b, 0x4c, 0x0b, 0xa2, 0xd2, 0x42, 0x6b, 0xd9, 0xf5, 0x62, 0xd3, 0x9a, 0x91, 0x0c,
	0x00, 0xdd, 0x3f, 0x09, 0x76, 0xdb, 0x58, 0x34, 0x88, 0x6e, 0x63, 0x9c, 0x06, 0x6e, 0xf4, 0x66,
	0x15, 0xdf, 0x35, 0x60, 0xf6, 0xb7, 0x8c, 0xd1, 0x31, 0xd9, 0xc4, 0xa8, 0x07, 0xe3, 0x2b, 0x36,
	0x4b, 0x30, 0x3e, 0x3d, 0x94, 0x77, 0x54, 0x79, 0xee, 0xa2, 0x6e, 0xf8, 0x2a, 0xae, 0xa1, 0x71,
	0x5c, 0xfb, 0x6f, 0x83, 0xf1, 0x01, 0xe3, 0xb4, 0x8b, 0x7a, 0xe4, 0x19, 0x46, 0x9d, 0xc9, 0xa0,
	0x2a, 0xc0, 0xe8, 0xf4, 0x8f, 0xa8, 0xaf, 0x80, 0x53, 0x35, 0x38, 0x65, 0x6d, 0x51, 0x63, 0x44,
	0xa8, 0x43, 0x5a, 0x38, 0xa7, 0x0d, 0x6a, 0x65, 0x81, 0xfd, 0x70, 0x46, 0xa5, 0xfa, 0xda, 0x7d,
	0x30, 0x19, 0x75, 0x59, 0x0a, 0x6a, 0x5a, 0x01, 0xc8, 0xe4, 0x0d, 0xce, 0x27, 0x76, 0xb3, 0x72,
	0x20, 0xb3, 0x3c, 0x4b, 0x06, 0x00, 0xae, 0x35, 0x11, 0x5a, 0x90, 0x70, 0x36, 0xcd, 0x9f, 0x20,
	0x9a, 0xbf, 0x32, 0x86, 0xb1, 0x5e, 0x08, 0xb6, 0xbf, 0x45, 0x5c, 0x5c, 0xd6, 0xc3, 0x9d, 0x4e,
	0x8c, 0xdc, 0x87, 0x36, 0x75, 0xf0, 0xa3, 0xa7, 0xfc, 0xc3, 0x8e, 0x80, 0x9f, 0xbb, 0x3a, 0xab,
	0x7e, 0x0d, 0xb2, 0xe7, 0xc8, 0x6b, 0x5c, 0x01, 0xe8, 0xbf, 0x45, 0x56, 0xee, 0x5a, 0x7f, 0xa2,
	0xb4, 0x89, 0x88, 0x8b, 0x17, 0xd3, 0x9b, 0x8e, 0xa0, 0xc7, 0x1f, 0x44, 0xe0, 0x29, 0x4a, 0xee,
	0xf4, 0x4d, 0xf5, 0xf6, 0x1e, 0xed, 0xb9, 0x75, 0x54, 0xfd, 0xf2, 0xe3, 0xeb, 0xf2, 0xb9, 0xb9,
	0xf6, 0xdc, 0x40, 0xfb, 0x27, 0x1b, 0x52, 0x45, 0x72, 0x22, 0x92, 0x8a, 0xe4, 0x03, 0x3a, 0xa0,
	0x8a, 0x92, 0xac, 0x18, 0xa9, 0xea, 0x73, 0xe7, 0x7c, 0xba, 0xd4, 0x46, 0xf2, 0x4e, 0x5c, 0xdc,
	0x8a, 0xbd, 0xf7, 0x86, 0x54, 0x0a, 0xcf, 0xa7, 0x7f, 0x87, 0x2f, 0xec, 0x92, 0x7e, 0xa0, 0xd2,
	0xa7, 0xf6, 0x49, 0x66, 0x7f, 0xcb, 0x9d, 0xbf, 0xbc, 0x5e, 0x45, 0x57, 0xd7, 0xab, 0xe8, 0xe7,
	0xf5, 0x2a, 0xda, 0x45, 0xfd, 0x3c, 0x54, 0xbe, 0xfd, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x52,
	0x36, 0x5f, 0x92, 0x05, 0x00, 0x00,
}
