// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vrf.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VrfSpec_Type int32

const (
	VrfSpec_CUSTOMER VrfSpec_Type = 0
	VrfSpec_INFRA    VrfSpec_Type = 1
)

var VrfSpec_Type_name = map[int32]string{
	0: "CUSTOMER",
	1: "INFRA",
}
var VrfSpec_Type_value = map[string]int32{
	"CUSTOMER": 0,
	"INFRA":    1,
}

func (x VrfSpec_Type) String() string {
	return proto.EnumName(VrfSpec_Type_name, int32(x))
}
func (VrfSpec_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorVrf, []int{1, 0} }

// Vrf object
type Vrf struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           VrfSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         VrfStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Vrf) Reset()                    { *m = Vrf{} }
func (m *Vrf) String() string            { return proto.CompactTextString(m) }
func (*Vrf) ProtoMessage()               {}
func (*Vrf) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{0} }

func (m *Vrf) GetSpec() VrfSpec {
	if m != nil {
		return m.Spec
	}
	return VrfSpec{}
}

func (m *Vrf) GetStatus() VrfStatus {
	if m != nil {
		return m.Status
	}
	return VrfStatus{}
}

// VrfSpec captures all the vrf level configuration
type VrfSpec struct {
	// Type of the Vrf.
	// Infra type creates a overlay VRF in the datapath. This is automatically created on bringup.
	// Customer type creates a VRF in the datapath.
	// default and infra vrf under default tenant are automatically created during init time.
	VrfType string `protobuf:"bytes,1,opt,name=VrfType,proto3" json:"vrf-type,omitempty"`
}

func (m *VrfSpec) Reset()                    { *m = VrfSpec{} }
func (m *VrfSpec) String() string            { return proto.CompactTextString(m) }
func (*VrfSpec) ProtoMessage()               {}
func (*VrfSpec) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{1} }

func (m *VrfSpec) GetVrfType() string {
	if m != nil {
		return m.VrfType
	}
	return ""
}

// Vrf Status
type VrfStatus struct {
	// VRF ID in the datapath
	VrfID uint64 `protobuf:"varint,1,opt,name=VrfID,proto3" json:"vrf-id,omitempty"`
}

func (m *VrfStatus) Reset()                    { *m = VrfStatus{} }
func (m *VrfStatus) String() string            { return proto.CompactTextString(m) }
func (*VrfStatus) ProtoMessage()               {}
func (*VrfStatus) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{2} }

func (m *VrfStatus) GetVrfID() uint64 {
	if m != nil {
		return m.VrfID
	}
	return 0
}

type VrfList struct {
	Vrfs []*Vrf `protobuf:"bytes,1,rep,name=vrfs" json:"vrfs,omitempty"`
}

func (m *VrfList) Reset()                    { *m = VrfList{} }
func (m *VrfList) String() string            { return proto.CompactTextString(m) }
func (*VrfList) ProtoMessage()               {}
func (*VrfList) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{3} }

func (m *VrfList) GetVrfs() []*Vrf {
	if m != nil {
		return m.Vrfs
	}
	return nil
}

// vrf watch event
type VrfEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	Vrf       Vrf           `protobuf:"bytes,2,opt,name=Vrf" json:"vrf,omitempty"`
}

func (m *VrfEvent) Reset()                    { *m = VrfEvent{} }
func (m *VrfEvent) String() string            { return proto.CompactTextString(m) }
func (*VrfEvent) ProtoMessage()               {}
func (*VrfEvent) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{4} }

func (m *VrfEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *VrfEvent) GetVrf() Vrf {
	if m != nil {
		return m.Vrf
	}
	return Vrf{}
}

// vrf watch events batched
type VrfEventList struct {
	VrfEvents []*VrfEvent `protobuf:"bytes,1,rep,name=VrfEvents" json:"VrfEvents,omitempty"`
}

func (m *VrfEventList) Reset()                    { *m = VrfEventList{} }
func (m *VrfEventList) String() string            { return proto.CompactTextString(m) }
func (*VrfEventList) ProtoMessage()               {}
func (*VrfEventList) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{5} }

func (m *VrfEventList) GetVrfEvents() []*VrfEvent {
	if m != nil {
		return m.VrfEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*Vrf)(nil), "netproto.Vrf")
	proto.RegisterType((*VrfSpec)(nil), "netproto.VrfSpec")
	proto.RegisterType((*VrfStatus)(nil), "netproto.VrfStatus")
	proto.RegisterType((*VrfList)(nil), "netproto.VrfList")
	proto.RegisterType((*VrfEvent)(nil), "netproto.VrfEvent")
	proto.RegisterType((*VrfEventList)(nil), "netproto.VrfEventList")
	proto.RegisterEnum("netproto.VrfSpec_Type", VrfSpec_Type_name, VrfSpec_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VrfApiV1 service

type VrfApiV1Client interface {
}

type vrfApiV1Client struct {
	cc *grpc.ClientConn
}

func NewVrfApiV1Client(cc *grpc.ClientConn) VrfApiV1Client {
	return &vrfApiV1Client{cc}
}

// Server API for VrfApiV1 service

type VrfApiV1Server interface {
}

func RegisterVrfApiV1Server(s *grpc.Server, srv VrfApiV1Server) {
	s.RegisterService(&_VrfApiV1_serviceDesc, srv)
}

var _VrfApiV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.VrfApiV1",
	HandlerType: (*VrfApiV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "vrf.proto",
}

func (m *Vrf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vrf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintVrf(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintVrf(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintVrf(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintVrf(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *VrfSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VrfType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVrf(dAtA, i, uint64(len(m.VrfType)))
		i += copy(dAtA[i:], m.VrfType)
	}
	return i, nil
}

func (m *VrfStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VrfID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.VrfID))
	}
	return i, nil
}

func (m *VrfList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Vrfs) > 0 {
		for _, msg := range m.Vrfs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVrf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VrfEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintVrf(dAtA, i, uint64(m.Vrf.Size()))
	n5, err := m.Vrf.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *VrfEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VrfEvents) > 0 {
		for _, msg := range m.VrfEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVrf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintVrf(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Vrf) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovVrf(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovVrf(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovVrf(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovVrf(uint64(l))
	return n
}

func (m *VrfSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.VrfType)
	if l > 0 {
		n += 1 + l + sovVrf(uint64(l))
	}
	return n
}

func (m *VrfStatus) Size() (n int) {
	var l int
	_ = l
	if m.VrfID != 0 {
		n += 1 + sovVrf(uint64(m.VrfID))
	}
	return n
}

func (m *VrfList) Size() (n int) {
	var l int
	_ = l
	if len(m.Vrfs) > 0 {
		for _, e := range m.Vrfs {
			l = e.Size()
			n += 1 + l + sovVrf(uint64(l))
		}
	}
	return n
}

func (m *VrfEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovVrf(uint64(m.EventType))
	}
	l = m.Vrf.Size()
	n += 1 + l + sovVrf(uint64(l))
	return n
}

func (m *VrfEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.VrfEvents) > 0 {
		for _, e := range m.VrfEvents {
			l = e.Size()
			n += 1 + l + sovVrf(uint64(l))
		}
	}
	return n
}

func sovVrf(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVrf(x uint64) (n int) {
	return sovVrf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vrf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vrf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vrf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfID", wireType)
			}
			m.VrfID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VrfID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vrfs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vrfs = append(m.Vrfs, &Vrf{})
			if err := m.Vrfs[len(m.Vrfs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vrf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vrf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfEvents = append(m.VrfEvents, &VrfEvent{})
			if err := m.VrfEvents[len(m.VrfEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVrf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVrf
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVrf
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVrf(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVrf = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVrf   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("vrf.proto", fileDescriptorVrf) }

var fileDescriptorVrf = []byte{
	// 612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0xeb, 0xc6, 0x6d, 0x93, 0xfd, 0xda, 0x7e, 0x65, 0xdb, 0xa2, 0x34, 0x42, 0x4d, 0xb1,
	0x84, 0x54, 0x50, 0x6b, 0x43, 0x2b, 0xc1, 0xa9, 0x88, 0x1a, 0x52, 0xa9, 0x82, 0xb6, 0x28, 0x29,
	0xb9, 0x3b, 0xce, 0xd8, 0x2c, 0x72, 0x76, 0x57, 0xf6, 0x3a, 0x28, 0x82, 0x9e, 0x90, 0x38, 0xf0,
	0x04, 0x3c, 0x03, 0x47, 0x9e, 0xa2, 0xc7, 0x3e, 0x41, 0x84, 0x72, 0xec, 0x53, 0xa0, 0x9d, 0xd8,
	0x89, 0x03, 0xe2, 0x94, 0x9d, 0xd9, 0xf9, 0xff, 0xf6, 0x3f, 0xe3, 0x09, 0xa9, 0xf4, 0xe3, 0xc0,
	0x96, 0xb1, 0x50, 0x82, 0x96, 0x39, 0x28, 0x3c, 0xd5, 0xee, 0x85, 0x42, 0x84, 0x11, 0x38, 0x9e,
	0x64, 0x8e, 0xc7, 0xb9, 0x50, 0x9e, 0x62, 0x82, 0x27, 0xe3, 0xba, 0x5a, 0x23, 0x64, 0xea, 0x7d,
	0xda, 0xb1, 0x7d, 0xd1, 0x73, 0x24, 0xf0, 0xc4, 0xe3, 0x5d, 0xe1, 0x24, 0x1f, 0x9d, 0x3e, 0x70,
	0xe6, 0x83, 0x93, 0x2a, 0x16, 0x25, 0x5a, 0x1a, 0x02, 0x2f, 0xaa, 0x1d, 0xc6, 0xfd, 0x28, 0xed,
	0x42, 0x8e, 0xd9, 0x2f, 0x60, 0x42, 0x11, 0x0a, 0x07, 0xd3, 0x9d, 0x34, 0xc0, 0x08, 0x03, 0x3c,
	0x65, 0xe5, 0x0f, 0xfe, 0xf1, 0xaa, 0xf6, 0xd8, 0x03, 0xe5, 0x8d, 0xcb, 0xac, 0xef, 0xf3, 0xa4,
	0xd4, 0x8e, 0x03, 0xfa, 0x9c, 0x94, 0x2f, 0x07, 0x12, 0xce, 0x40, 0x79, 0x55, 0x63, 0xc7, 0xd8,
	0xfd, 0xef, 0x60, 0xc5, 0xf6, 0x24, 0xb3, 0xf3, 0xa4, 0xbb, 0x7e, 0x3d, 0xac, 0xcf, 0xdd, 0x0c,
	0xeb, 0xc6, 0xed, 0xb0, 0xbe, 0xb4, 0xc7, 0x78, 0xc4, 0x38, 0x34, 0x27, 0x1a, 0xfa, 0x9a, 0x90,
	0x8b, 0xce, 0x07, 0xf0, 0x15, 0x12, 0xe6, 0x91, 0xf0, 0x3f, 0x12, 0xa6, 0x69, 0xb7, 0x56, 0x60,
	0xac, 0x6a, 0x13, 0x7b, 0xa2, 0xc7, 0x14, 0xf4, 0xa4, 0x1a, 0x34, 0x0b, 0x72, 0x7a, 0x44, 0xcc,
	0x96, 0x04, 0xbf, 0x5a, 0x42, 0xcc, 0x1d, 0x3b, 0x1f, 0xb4, 0xdd, 0x8e, 0x03, 0x7d, 0xe1, 0xde,
	0xd5, 0x20, 0x0d, 0x49, 0x24, 0xf8, 0x05, 0x08, 0xca, 0x68, 0x83, 0x2c, 0xb6, 0x94, 0xa7, 0xd2,
	0xa4, 0x6a, 0x22, 0x60, 0x7d, 0x16, 0x80, 0x57, 0x6e, 0x35, 0x43, 0xac, 0x25, 0x18, 0x17, 0x20,
	0x99, 0xd8, 0x1a, 0x90, 0xa5, 0xec, 0x3d, 0x7a, 0x86, 0x47, 0xdd, 0x2c, 0x0e, 0xa7, 0xe2, 0x1e,
	0xfe, 0xf8, 0xba, 0xb5, 0xd9, 0x52, 0x71, 0x83, 0xa7, 0xbd, 0xdd, 0xac, 0x0a, 0x67, 0xf5, 0xf0,
	0x7a, 0xdc, 0x1e, 0xed, 0xc7, 0xc1, 0xbe, 0x1a, 0x48, 0x28, 0x80, 0x73, 0x86, 0x55, 0x27, 0xa6,
	0xfe, 0xa5, 0xcb, 0xa4, 0xfc, 0xf2, 0x5d, 0xeb, 0xf2, 0xe2, 0xac, 0xd1, 0x5c, 0x9b, 0xa3, 0x15,
	0xb2, 0x70, 0x7a, 0x7e, 0xd2, 0x3c, 0x5e, 0x33, 0xac, 0x67, 0xa4, 0x32, 0x71, 0x4a, 0x1f, 0x91,
	0x85, 0x76, 0x1c, 0x9c, 0xbe, 0xc2, 0xa7, 0x4d, 0x77, 0x43, 0x9b, 0xd6, 0x74, 0xd6, 0x2d, 0xb0,
	0xc7, 0x25, 0xd6, 0x1e, 0x1a, 0x7d, 0xc3, 0x12, 0x45, 0xef, 0x13, 0xb3, 0x1f, 0x07, 0x49, 0xd5,
	0xd8, 0x29, 0xe1, 0xd7, 0x2c, 0xce, 0xa0, 0x89, 0x57, 0xd6, 0x37, 0x83, 0x94, 0xdb, 0x71, 0xd0,
	0xe8, 0x03, 0x57, 0xf4, 0x84, 0x54, 0xf0, 0x30, 0xe9, 0x72, 0xf5, 0x60, 0x15, 0x3f, 0xe0, 0x24,
	0xeb, 0x56, 0x6f, 0x87, 0xf5, 0x0d, 0xd0, 0xe1, 0x9f, 0xad, 0x4d, 0xa5, 0xf4, 0x29, 0x2e, 0x54,
	0xb6, 0x02, 0xb3, 0xcf, 0xba, 0x9b, 0xd9, 0xd0, 0x57, 0xfa, 0x71, 0x50, 0x50, 0x6b, 0x81, 0xf5,
	0x82, 0x2c, 0xe7, 0x5e, 0xd0, 0xff, 0x63, 0x9c, 0x01, 0xc6, 0x79, 0x13, 0x74, 0x86, 0x86, 0x57,
	0xcd, 0x69, 0xd1, 0xc1, 0x67, 0xec, 0xe6, 0x58, 0xb2, 0xf6, 0x93, 0x9a, 0xfc, 0xf9, 0x65, 0x2b,
	0x1a, 0xaf, 0xb6, 0x19, 0x69, 0x5c, 0x29, 0x04, 0x45, 0x4d, 0x29, 0x12, 0x45, 0x17, 0xbb, 0x10,
	0x81, 0x02, 0x5a, 0x92, 0xa9, 0xaa, 0x1d, 0x39, 0x9f, 0xa6, 0x9b, 0x67, 0x5f, 0x02, 0xf7, 0xb8,
	0xba, 0x9a, 0xc9, 0x9d, 0x7b, 0x3d, 0x48, 0xa4, 0xe7, 0xc3, 0xdf, 0xe9, 0x2b, 0xab, 0xac, 0xff,
	0x4f, 0x7a, 0x98, 0xee, 0xf2, 0xf5, 0x68, 0xdb, 0xb8, 0x19, 0x6d, 0x1b, 0xbf, 0x46, 0xdb, 0xc6,
	0x5b, 0xa3, 0xb3, 0x88, 0x46, 0x0f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x20, 0x53, 0x3e, 0xd2,
	0x32, 0x04, 0x00, 0x00,
}
