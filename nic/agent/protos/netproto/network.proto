// network object

syntax = "proto3";

package netproto;

option go_package="netproto";

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

import "types.proto";
import "route.proto";

// ---------------------------- Network API ----------------------------
// network controller api
service NetworkApiV1 {
    // options for auto generating rest endpoints
    option(venice.naplesRestService) = {
        Object: "Network",
        Method: ["list", "get", "post", "put", "delete"],
        Pattern: "/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}"
        Prefix: "api/networks"
        Version: "V1"
    };

    rpc ListNetworks (api.ListWatchOptions) returns (NetworkList) {};
    rpc WatchNetworks (api.ListWatchOptions) returns (stream NetworkEventList) {};
    rpc NetworkOperUpdate (stream NetworkEvent) returns (api.TypeMeta) {};

//    rpc GetNetwork (api.ObjectMeta) returns (Network) {};
//    rpc ListNetworks (api.ObjectMeta) returns (NetworkList) {};
//    rpc WatchNetworks (api.ObjectMeta) returns (stream NetworkEventList) {};
//    rpc UpdateNetwork (Network) returns (Network) {};
//    rpc NetworkOperUpdate (stream NetworkEvent) returns (api.TypeMeta) {};

}

// ApiResponse Object
message ApiResponse {
    // http status code
    uint32 StatusCode           = 1 [(gogoproto.jsontag)="status-code,omitempty"];
    // error message if any
    string Error                = 2 [(gogoproto.jsontag)="error,omitempty"];
    // self link references
    repeated string References  = 3 [(gogoproto.jsontag)="references,omitempty"];
}
// network object
message Network {
    api.TypeMeta   TypeMeta   = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta ObjectMeta = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    NetworkSpec    Spec       = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
    NetworkStatus  Status     = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// network spec
message NetworkSpec {
    // VrfName specifies the name of the VRF that the current Network belongs to
    string VrfName                          = 1 [(gogoproto.jsontag) = "vrf-name,omitempty"];

    // VLANID allocated for the network
    uint32 VlanID                           = 2 [(gogoproto.jsontag) = "vlan-id,omitempty"];

    // VRFID is the VRF that this network belongs to
    uint32 VRFID                            = 3 [(gogoproto.jsontag) = "vrf-id,omitempty"];

    // V4Address allocated to this network
    repeated IPPrefix V4Address             = 4  [(gogoproto.jsontag) = "v4-address,omitempty", (gogoproto.nullable) = false];

    // V6Address allocated to this network
    repeated IPPrefix V6Address             = 5  [(gogoproto.jsontag) = "v6-address,omitempty", (gogoproto.nullable) = false];

    // RouterMAC for the network
    string RouterMAC                        = 6  [(gogoproto.jsontag) = "router-mac,omitempty"];

    // VxLANVNI is the fabric encap to be used for bridged traffic of the network if VxLAN encapsulated.
    uint32 VxLANVNI                         = 7  [(gogoproto.jsontag) = "vxlan-vni,omitempty"];

    // IPAMPolicy attached to this VRF
    string IPAMPolicy                       = 8 [(gogoproto.jsontag) = "ipam-policy,omitempty"];

    // V4RouteTableID is the allocated routing table for the VRF
    string V4RouteTableID                   = 9 [(gogoproto.jsontag) = "v4-route-table-id,omitempty"];

    // V6RouteTableID is the allocated routing table for the VRF
    string V6RouteTableID                   = 10 [(gogoproto.jsontag) = "v6-route-table-id,omitempty"];

    // Ingress v4 Security Policies applied to this network
    repeated string IngV4SecurityPolicies   = 11 [(gogoproto.jsontag) = "ing-v4-sec-policies,omitempty"];

    // Egress v4 Security Policies applied to this network
    repeated string EgV4SecurityPolicies     = 12 [(gogoproto.jsontag) = "eg-v4-sec-policies,omitempty"];

    // Ingress v6 Security Policies applied to this network
    repeated string IngV6SecurityPolicies    = 13 [(gogoproto.jsontag) = "ing-v6-sec-policies,omitempty"];

    // Egress v6 Security Policies applied to this network
    repeated string EgV6SecurityPolicies     = 14 [(gogoproto.jsontag) = "eg-v6-sec-policies,omitempty"];

    // RouteImportExport is used as the Route Distinguisher and to control Import Export of routes for the network
    RDSpec RouteImportExport                = 15 [(gogoproto.jsontag) = "route-import-export,omitempty"];
}

// network status
message NetworkStatus {
    uint64 NetworkID         = 3[(gogoproto.jsontag)="network-id,omitempty"];  // Network identifier
}

// list of networks
message NetworkList {
    repeated Network networks = 1;
}

// network watch event
message NetworkEvent {
    api.EventType EventType = 1 [(gogoproto.jsontag) = "event-type,omitempty"];
    Network       Network   = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "network,omitempty"];
}

message NetworkEventList {
    repeated NetworkEvent networkEvents = 1;
}
