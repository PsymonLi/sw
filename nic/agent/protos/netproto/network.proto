// network object

syntax = "proto3";

package netproto;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

// ---------------------------- Network API ----------------------------
// network controller api
service NetworkApiV1 {
    // options for auto generating rest endpoints
    option(venice.naplesRestService) = {
        Object: "Network",
        Method: ["list", "get", "post", "put", "delete"],
        Pattern: "/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}"
        Prefix: "api/networks"
    };

    rpc ListNetworks (api.ListWatchOptions) returns (NetworkList) {};
    rpc WatchNetworks (api.ListWatchOptions) returns (stream NetworkEventList) {};
    rpc NetworkOperUpdate (stream NetworkEvent) returns (api.TypeMeta) {};

//    rpc GetNetwork (api.ObjectMeta) returns (Network) {};
//    rpc ListNetworks (api.ObjectMeta) returns (NetworkList) {};
//    rpc WatchNetworks (api.ObjectMeta) returns (stream NetworkEventList) {};
//    rpc UpdateNetwork (Network) returns (Network) {};
//    rpc NetworkOperUpdate (stream NetworkEvent) returns (api.TypeMeta) {};

}

// ApiResponse Object
message ApiResponse {
    // http status code
    uint32 StatusCode           = 1 [(gogoproto.jsontag)="status-code,omitempty"];
    // error message if any
    string Error                = 2 [(gogoproto.jsontag)="error,omitempty"];
    // self link references
    repeated string References  = 3 [(gogoproto.jsontag)="references,omitempty"];
}
// network object
message Network {
    api.TypeMeta   TypeMeta   = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta ObjectMeta = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    NetworkSpec    Spec       = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
    NetworkStatus  Status     = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// network spec
message NetworkSpec {
    // VrfName specifies the name of the VRF that the current Network belongs to
    string VrfName     = 1 [(gogoproto.jsontag) = "vrf-name,omitempty"];
    uint32 VlanID      = 2 [(gogoproto.jsontag)="vlan-id,omitempty"];
}

// network status
message NetworkStatus {
    uint64 NetworkID         = 3[(gogoproto.jsontag)="network-id,omitempty"];  // Network identifier
}

// list of networks
message NetworkList {
    repeated Network networks = 1;
}

// network watch event
message NetworkEvent {
    api.EventType EventType = 1 [(gogoproto.jsontag) = "event-type,omitempty"];
    Network       Network   = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "network,omitempty"];
}

message NetworkEventList {
    repeated NetworkEvent networkEvents = 1;
}
