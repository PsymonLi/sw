// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: collector.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Collector struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           CollectorSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         CollectorStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Collector) Reset()                    { *m = Collector{} }
func (m *Collector) String() string            { return proto.CompactTextString(m) }
func (*Collector) ProtoMessage()               {}
func (*Collector) Descriptor() ([]byte, []int) { return fileDescriptorCollector, []int{0} }

func (m *Collector) GetSpec() CollectorSpec {
	if m != nil {
		return m.Spec
	}
	return CollectorSpec{}
}

func (m *Collector) GetStatus() CollectorStatus {
	if m != nil {
		return m.Status
	}
	return CollectorStatus{}
}

// Mirror collector - can be an external device (via ERSPAN) or Venice (internal packet capture)
type CollectorSpec struct {
	VrfName     string `protobuf:"bytes,1,opt,name=VrfName,proto3" json:"vrf-name,omitempty"`
	Destination string `protobuf:"bytes,2,opt,name=Destination,proto3" json:"destination,omitempty"`
	PacketSize  uint32 `protobuf:"varint,3,opt,name=PacketSize,proto3" json:"packet-size,omitempty"`
}

func (m *CollectorSpec) Reset()                    { *m = CollectorSpec{} }
func (m *CollectorSpec) String() string            { return proto.CompactTextString(m) }
func (*CollectorSpec) ProtoMessage()               {}
func (*CollectorSpec) Descriptor() ([]byte, []int) { return fileDescriptorCollector, []int{1} }

func (m *CollectorSpec) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *CollectorSpec) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *CollectorSpec) GetPacketSize() uint32 {
	if m != nil {
		return m.PacketSize
	}
	return 0
}

// CollectorStatus captures the sg policy status
type CollectorStatus struct {
	Collector uint64 `protobuf:"varint,1,opt,name=Collector,proto3" json:"id,omitempty"`
}

func (m *CollectorStatus) Reset()                    { *m = CollectorStatus{} }
func (m *CollectorStatus) String() string            { return proto.CompactTextString(m) }
func (*CollectorStatus) ProtoMessage()               {}
func (*CollectorStatus) Descriptor() ([]byte, []int) { return fileDescriptorCollector, []int{2} }

func (m *CollectorStatus) GetCollector() uint64 {
	if m != nil {
		return m.Collector
	}
	return 0
}

type CollectorList struct {
	Collectors []*Collector `protobuf:"bytes,1,rep,name=Collectors" json:"Collectors,omitempty"`
}

func (m *CollectorList) Reset()                    { *m = CollectorList{} }
func (m *CollectorList) String() string            { return proto.CompactTextString(m) }
func (*CollectorList) ProtoMessage()               {}
func (*CollectorList) Descriptor() ([]byte, []int) { return fileDescriptorCollector, []int{3} }

func (m *CollectorList) GetCollectors() []*Collector {
	if m != nil {
		return m.Collectors
	}
	return nil
}

// Collector watch event
type CollectorEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	Collector Collector     `protobuf:"bytes,2,opt,name=Collector" json:"collector,omitempty"`
}

func (m *CollectorEvent) Reset()                    { *m = CollectorEvent{} }
func (m *CollectorEvent) String() string            { return proto.CompactTextString(m) }
func (*CollectorEvent) ProtoMessage()               {}
func (*CollectorEvent) Descriptor() ([]byte, []int) { return fileDescriptorCollector, []int{4} }

func (m *CollectorEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *CollectorEvent) GetCollector() Collector {
	if m != nil {
		return m.Collector
	}
	return Collector{}
}

// collector watch events batched
type CollectorEventList struct {
	CollectorEvents []*CollectorEvent `protobuf:"bytes,1,rep,name=CollectorEvents" json:"CollectorEvents,omitempty"`
}

func (m *CollectorEventList) Reset()                    { *m = CollectorEventList{} }
func (m *CollectorEventList) String() string            { return proto.CompactTextString(m) }
func (*CollectorEventList) ProtoMessage()               {}
func (*CollectorEventList) Descriptor() ([]byte, []int) { return fileDescriptorCollector, []int{5} }

func (m *CollectorEventList) GetCollectorEvents() []*CollectorEvent {
	if m != nil {
		return m.CollectorEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*Collector)(nil), "netproto.Collector")
	proto.RegisterType((*CollectorSpec)(nil), "netproto.CollectorSpec")
	proto.RegisterType((*CollectorStatus)(nil), "netproto.CollectorStatus")
	proto.RegisterType((*CollectorList)(nil), "netproto.CollectorList")
	proto.RegisterType((*CollectorEvent)(nil), "netproto.CollectorEvent")
	proto.RegisterType((*CollectorEventList)(nil), "netproto.CollectorEventList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CollectorApiV1 service

type CollectorApiV1Client interface {
	ListCollectors(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*CollectorList, error)
	WatchCollectors(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (CollectorApiV1_WatchCollectorsClient, error)
	CollectorOperUpdate(ctx context.Context, opts ...grpc.CallOption) (CollectorApiV1_CollectorOperUpdateClient, error)
}

type collectorApiV1Client struct {
	cc *grpc.ClientConn
}

func NewCollectorApiV1Client(cc *grpc.ClientConn) CollectorApiV1Client {
	return &collectorApiV1Client{cc}
}

func (c *collectorApiV1Client) ListCollectors(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*CollectorList, error) {
	out := new(CollectorList)
	err := grpc.Invoke(ctx, "/netproto.CollectorApiV1/ListCollectors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorApiV1Client) WatchCollectors(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (CollectorApiV1_WatchCollectorsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CollectorApiV1_serviceDesc.Streams[0], c.cc, "/netproto.CollectorApiV1/WatchCollectors", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorApiV1WatchCollectorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CollectorApiV1_WatchCollectorsClient interface {
	Recv() (*CollectorEventList, error)
	grpc.ClientStream
}

type collectorApiV1WatchCollectorsClient struct {
	grpc.ClientStream
}

func (x *collectorApiV1WatchCollectorsClient) Recv() (*CollectorEventList, error) {
	m := new(CollectorEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectorApiV1Client) CollectorOperUpdate(ctx context.Context, opts ...grpc.CallOption) (CollectorApiV1_CollectorOperUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CollectorApiV1_serviceDesc.Streams[1], c.cc, "/netproto.CollectorApiV1/CollectorOperUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorApiV1CollectorOperUpdateClient{stream}
	return x, nil
}

type CollectorApiV1_CollectorOperUpdateClient interface {
	Send(*CollectorEvent) error
	CloseAndRecv() (*api.TypeMeta, error)
	grpc.ClientStream
}

type collectorApiV1CollectorOperUpdateClient struct {
	grpc.ClientStream
}

func (x *collectorApiV1CollectorOperUpdateClient) Send(m *CollectorEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectorApiV1CollectorOperUpdateClient) CloseAndRecv() (*api.TypeMeta, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.TypeMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CollectorApiV1 service

type CollectorApiV1Server interface {
	ListCollectors(context.Context, *api.ListWatchOptions) (*CollectorList, error)
	WatchCollectors(*api.ListWatchOptions, CollectorApiV1_WatchCollectorsServer) error
	CollectorOperUpdate(CollectorApiV1_CollectorOperUpdateServer) error
}

func RegisterCollectorApiV1Server(s *grpc.Server, srv CollectorApiV1Server) {
	s.RegisterService(&_CollectorApiV1_serviceDesc, srv)
}

func _CollectorApiV1_ListCollectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorApiV1Server).ListCollectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.CollectorApiV1/ListCollectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorApiV1Server).ListCollectors(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorApiV1_WatchCollectors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectorApiV1Server).WatchCollectors(m, &collectorApiV1WatchCollectorsServer{stream})
}

type CollectorApiV1_WatchCollectorsServer interface {
	Send(*CollectorEventList) error
	grpc.ServerStream
}

type collectorApiV1WatchCollectorsServer struct {
	grpc.ServerStream
}

func (x *collectorApiV1WatchCollectorsServer) Send(m *CollectorEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _CollectorApiV1_CollectorOperUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorApiV1Server).CollectorOperUpdate(&collectorApiV1CollectorOperUpdateServer{stream})
}

type CollectorApiV1_CollectorOperUpdateServer interface {
	SendAndClose(*api.TypeMeta) error
	Recv() (*CollectorEvent, error)
	grpc.ServerStream
}

type collectorApiV1CollectorOperUpdateServer struct {
	grpc.ServerStream
}

func (x *collectorApiV1CollectorOperUpdateServer) SendAndClose(m *api.TypeMeta) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectorApiV1CollectorOperUpdateServer) Recv() (*CollectorEvent, error) {
	m := new(CollectorEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CollectorApiV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.CollectorApiV1",
	HandlerType: (*CollectorApiV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCollectors",
			Handler:    _CollectorApiV1_ListCollectors_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchCollectors",
			Handler:       _CollectorApiV1_WatchCollectors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CollectorOperUpdate",
			Handler:       _CollectorApiV1_CollectorOperUpdate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "collector.proto",
}

func (m *Collector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Collector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCollector(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintCollector(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCollector(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintCollector(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *CollectorSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectorSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VrfName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCollector(dAtA, i, uint64(len(m.VrfName)))
		i += copy(dAtA[i:], m.VrfName)
	}
	if len(m.Destination) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCollector(dAtA, i, uint64(len(m.Destination)))
		i += copy(dAtA[i:], m.Destination)
	}
	if m.PacketSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCollector(dAtA, i, uint64(m.PacketSize))
	}
	return i, nil
}

func (m *CollectorStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectorStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Collector != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCollector(dAtA, i, uint64(m.Collector))
	}
	return i, nil
}

func (m *CollectorList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectorList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Collectors) > 0 {
		for _, msg := range m.Collectors {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCollector(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CollectorEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectorEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCollector(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintCollector(dAtA, i, uint64(m.Collector.Size()))
	n5, err := m.Collector.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *CollectorEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectorEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CollectorEvents) > 0 {
		for _, msg := range m.CollectorEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCollector(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintCollector(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Collector) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovCollector(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovCollector(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovCollector(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovCollector(uint64(l))
	return n
}

func (m *CollectorSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.VrfName)
	if l > 0 {
		n += 1 + l + sovCollector(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovCollector(uint64(l))
	}
	if m.PacketSize != 0 {
		n += 1 + sovCollector(uint64(m.PacketSize))
	}
	return n
}

func (m *CollectorStatus) Size() (n int) {
	var l int
	_ = l
	if m.Collector != 0 {
		n += 1 + sovCollector(uint64(m.Collector))
	}
	return n
}

func (m *CollectorList) Size() (n int) {
	var l int
	_ = l
	if len(m.Collectors) > 0 {
		for _, e := range m.Collectors {
			l = e.Size()
			n += 1 + l + sovCollector(uint64(l))
		}
	}
	return n
}

func (m *CollectorEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovCollector(uint64(m.EventType))
	}
	l = m.Collector.Size()
	n += 1 + l + sovCollector(uint64(l))
	return n
}

func (m *CollectorEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.CollectorEvents) > 0 {
		for _, e := range m.CollectorEvents {
			l = e.Size()
			n += 1 + l + sovCollector(uint64(l))
		}
	}
	return n
}

func sovCollector(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCollector(x uint64) (n int) {
	return sovCollector(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Collector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Collector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Collector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectorSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectorSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectorSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketSize", wireType)
			}
			m.PacketSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCollector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectorStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectorStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectorStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collector", wireType)
			}
			m.Collector = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collector |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCollector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectorList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectorList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectorList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collectors = append(m.Collectors, &Collector{})
			if err := m.Collectors[len(m.Collectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectorEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectorEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectorEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectorEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectorEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectorEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectorEvents = append(m.CollectorEvents, &CollectorEvent{})
			if err := m.CollectorEvents[len(m.CollectorEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCollector(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCollector
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCollector
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCollector
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCollector(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCollector = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCollector   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("collector.proto", fileDescriptorCollector) }

var fileDescriptorCollector = []byte{
	// 727 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xdf, 0x4e, 0x13, 0x4f,
	0x14, 0xc7, 0xd9, 0xb6, 0x01, 0x3a, 0x85, 0x96, 0x4c, 0x7f, 0xf0, 0x6b, 0x2b, 0xa1, 0x64, 0x13,
	0x93, 0xaa, 0x74, 0x17, 0x8a, 0x17, 0x7a, 0xa1, 0x09, 0x0b, 0x78, 0x21, 0x7f, 0xd3, 0x22, 0x7a,
	0x3b, 0xdd, 0x1e, 0xca, 0xe8, 0x76, 0x76, 0xd2, 0x9d, 0x62, 0x40, 0x49, 0x4c, 0x4c, 0x7c, 0x16,
	0xc3, 0xa5, 0x4f, 0x41, 0xe2, 0x0d, 0x4f, 0xb0, 0x31, 0xdc, 0x98, 0xf4, 0x29, 0xcc, 0x4c, 0xdb,
	0xed, 0x14, 0x4b, 0xbc, 0xdb, 0x73, 0xf6, 0x7b, 0x3e, 0x73, 0xce, 0x77, 0xfe, 0xa0, 0x8c, 0xeb,
	0x7b, 0x1e, 0xb8, 0xc2, 0x6f, 0x5b, 0xbc, 0xed, 0x0b, 0x1f, 0x4f, 0x33, 0x10, 0xea, 0xab, 0xb0,
	0xd8, 0xf4, 0xfd, 0xa6, 0x07, 0x36, 0xe1, 0xd4, 0x26, 0x8c, 0xf9, 0x82, 0x08, 0xea, 0xb3, 0xa0,
	0xa7, 0x2b, 0x6c, 0x37, 0xa9, 0x38, 0xed, 0xd4, 0x2d, 0xd7, 0x6f, 0xd9, 0x1c, 0x58, 0x40, 0x58,
	0xc3, 0xb7, 0x83, 0x8f, 0xf6, 0x19, 0x30, 0xea, 0x82, 0xdd, 0x11, 0xd4, 0x0b, 0x64, 0x69, 0x13,
	0x98, 0x5e, 0x6d, 0x53, 0xe6, 0x7a, 0x9d, 0x06, 0x0c, 0x30, 0x65, 0x0d, 0xd3, 0xf4, 0x9b, 0xbe,
	0xad, 0xd2, 0xf5, 0xce, 0x89, 0x8a, 0x54, 0xa0, 0xbe, 0xfa, 0xf2, 0x87, 0xf7, 0xac, 0x2a, 0x7b,
	0x6c, 0x81, 0x20, 0x7d, 0x59, 0xaa, 0x45, 0x84, 0x7b, 0xda, 0x0b, 0xcc, 0xab, 0x18, 0x4a, 0x6e,
	0x0e, 0xa6, 0xc4, 0x2f, 0xd1, 0xf4, 0xd1, 0x39, 0x87, 0x3d, 0x10, 0x24, 0x67, 0x2c, 0x1b, 0xa5,
	0x54, 0x65, 0xd6, 0x22, 0x9c, 0x5a, 0x83, 0xa4, 0x93, 0xbd, 0x0e, 0x8b, 0x13, 0x37, 0x61, 0xd1,
	0xe8, 0x86, 0xc5, 0xa9, 0x15, 0xca, 0x3c, 0xca, 0xa0, 0x1a, 0xd5, 0xe0, 0x1d, 0x84, 0x0e, 0xea,
	0xef, 0xc1, 0x15, 0x8a, 0x10, 0x53, 0x84, 0x8c, 0x22, 0x0c, 0xd3, 0x4e, 0x41, 0x63, 0xa4, 0x65,
	0x5f, 0x2b, 0x7e, 0x8b, 0x0a, 0x68, 0x71, 0x71, 0x5e, 0xd5, 0xca, 0xf1, 0x26, 0x4a, 0xd4, 0x38,
	0xb8, 0xb9, 0xb8, 0xc2, 0xfc, 0x6f, 0x0d, 0xbc, 0xb7, 0xa2, 0x7e, 0xe5, 0x6f, 0x67, 0x41, 0xe2,
	0x24, 0x2a, 0xe0, 0xe0, 0x6a, 0x28, 0x55, 0x8c, 0x77, 0xd0, 0x64, 0x4d, 0x10, 0xd1, 0x09, 0x72,
	0x09, 0x85, 0xc9, 0x8f, 0xc3, 0x28, 0x81, 0x93, 0xeb, 0x83, 0xe6, 0x02, 0x15, 0x6b, 0xa8, 0x3e,
	0xc2, 0xfc, 0x69, 0xa0, 0xd9, 0x91, 0xc5, 0xf1, 0x2a, 0x9a, 0x3a, 0x6e, 0x9f, 0xec, 0x93, 0x16,
	0x28, 0xbf, 0x92, 0xce, 0x42, 0x37, 0x2c, 0xe2, 0xb3, 0xf6, 0x49, 0x99, 0x91, 0x16, 0x68, 0x88,
	0x81, 0x0c, 0xef, 0xa1, 0xd4, 0x16, 0x04, 0x82, 0x32, 0xb5, 0xe5, 0xca, 0xa3, 0xa4, 0xf3, 0xe4,
	0xea, 0x5b, 0x3e, 0x5d, 0x13, 0xed, 0x5d, 0x60, 0xa5, 0xb5, 0x95, 0xca, 0xea, 0xd3, 0x67, 0x8f,
	0xba, 0x61, 0x71, 0xbe, 0x31, 0x14, 0x6a, 0x28, 0xbd, 0x1e, 0x3f, 0x47, 0xe8, 0x90, 0xb8, 0x1f,
	0x40, 0xd4, 0xe8, 0x05, 0x28, 0xab, 0x66, 0x9d, 0xbc, 0xac, 0xe5, 0x2a, 0x5b, 0x0e, 0xe8, 0x85,
	0xde, 0x86, 0x26, 0x36, 0x37, 0x50, 0xe6, 0x8e, 0x05, 0xd8, 0xd2, 0x0e, 0x83, 0x1a, 0x28, 0xe1,
	0xcc, 0x75, 0xc3, 0xe2, 0x0c, 0x6d, 0x68, 0x8c, 0xa1, 0xc4, 0xdc, 0xd2, 0xfc, 0xd8, 0xa5, 0x81,
	0xc0, 0xeb, 0x08, 0x45, 0x89, 0x20, 0x67, 0x2c, 0xc7, 0x4b, 0xa9, 0x4a, 0x76, 0x8c, 0xe5, 0x55,
	0x4d, 0x66, 0x7e, 0x37, 0x50, 0x3a, 0x0a, 0xb7, 0xcf, 0x80, 0x09, 0xfc, 0x0a, 0x25, 0xd5, 0x87,
	0x3c, 0x59, 0xaa, 0x91, 0x74, 0x25, 0xad, 0xce, 0x51, 0x94, 0x75, 0x72, 0xdd, 0xb0, 0xf8, 0x1f,
	0xc8, 0xb0, 0x2c, 0xce, 0xb9, 0x3e, 0xe4, 0xb0, 0x14, 0xef, 0xeb, 0x03, 0xf5, 0xce, 0xe3, 0xb8,
	0x76, 0x9c, 0x07, 0xfd, 0xbd, 0xcf, 0x46, 0x37, 0x7e, 0xfc, 0xc0, 0xef, 0x10, 0x1e, 0xed, 0x54,
	0x4d, 0xed, 0x68, 0x4e, 0xaa, 0xec, 0x60, 0xf4, 0xdc, 0x98, 0xb5, 0x94, 0xa0, 0x7a, 0xb7, 0xa0,
	0xf2, 0x3b, 0xa6, 0x99, 0xb0, 0xc1, 0xe9, 0xf1, 0x1a, 0x76, 0x50, 0x5a, 0xe2, 0x87, 0x4e, 0xe1,
	0x79, 0xe5, 0x81, 0x4c, 0xbe, 0x95, 0x77, 0xf8, 0x80, 0xab, 0x67, 0xa3, 0x30, 0xee, 0x6e, 0x48,
	0x91, 0x39, 0x81, 0x5f, 0xa3, 0x8c, 0x92, 0xfe, 0x1b, 0xb2, 0x78, 0x5f, 0xaf, 0x3d, 0xd2, 0xaa,
	0x81, 0x1d, 0x94, 0x8d, 0xfe, 0x1c, 0x70, 0x68, 0xbf, 0xe1, 0x0d, 0x22, 0x00, 0xdf, 0x3b, 0x64,
	0x61, 0xf4, 0xf1, 0x30, 0x27, 0x4a, 0x46, 0xe1, 0x8b, 0xf1, 0xe3, 0x6b, 0xfe, 0xb3, 0xfe, 0xe6,
	0x24, 0x3c, 0x69, 0x61, 0xbc, 0x09, 0x02, 0x27, 0xb8, 0x1f, 0x08, 0x3c, 0xd9, 0x00, 0x0f, 0x04,
	0xe0, 0x38, 0xef, 0x88, 0xc2, 0x0b, 0xfb, 0xd3, 0xf0, 0x49, 0xb0, 0x8e, 0x80, 0x11, 0x26, 0x2e,
	0x47, 0x72, 0xf2, 0x56, 0x05, 0x9c, 0xb8, 0xf0, 0x77, 0xfa, 0xd2, 0x4c, 0xcb, 0xb7, 0x2f, 0xda,
	0xd3, 0xe0, 0x71, 0xec, 0x78, 0xcd, 0x99, 0xb9, 0xbe, 0x5d, 0x32, 0x6e, 0x6e, 0x97, 0x8c, 0x5f,
	0xb7, 0x4b, 0xc6, 0xa1, 0x51, 0x9f, 0x54, 0xbd, 0xaf, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x8e,
	0x35, 0x16, 0x40, 0xee, 0x05, 0x00, 0x00,
}
