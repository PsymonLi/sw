// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ApiResponse Object
type ApiResponse struct {
	// http status code
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode,proto3" json:"status-code,omitempty"`
	// error message if any
	Error string `protobuf:"bytes,2,opt,name=Error,proto3" json:"error,omitempty"`
	// self link references
	References []string `protobuf:"bytes,3,rep,name=References" json:"references,omitempty"`
}

func (m *ApiResponse) Reset()                    { *m = ApiResponse{} }
func (m *ApiResponse) String() string            { return proto.CompactTextString(m) }
func (*ApiResponse) ProtoMessage()               {}
func (*ApiResponse) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{0} }

func (m *ApiResponse) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *ApiResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ApiResponse) GetReferences() []string {
	if m != nil {
		return m.References
	}
	return nil
}

// network object
type Network struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           NetworkSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         NetworkStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Network) Reset()                    { *m = Network{} }
func (m *Network) String() string            { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()               {}
func (*Network) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{1} }

func (m *Network) GetSpec() NetworkSpec {
	if m != nil {
		return m.Spec
	}
	return NetworkSpec{}
}

func (m *Network) GetStatus() NetworkStatus {
	if m != nil {
		return m.Status
	}
	return NetworkStatus{}
}

// network spec
type NetworkSpec struct {
	// VrfName specifies the name of the VRF that the current Network belongs to
	VrfName string `protobuf:"bytes,1,opt,name=VrfName,proto3" json:"vrf-name,omitempty"`
	// VLANID allocated for the network
	VlanID uint32 `protobuf:"varint,2,opt,name=VlanID,proto3" json:"vlan-id,omitempty"`
	// VRFID is the VRF that this network belongs to
	VRFID uint32 `protobuf:"varint,3,opt,name=VRFID,proto3" json:"vrf-id,omitempty"`
	// V4Address allocated to this network
	V4Address []IPPrefix `protobuf:"bytes,4,rep,name=V4Address" json:"v4-address,omitempty"`
	// V6Address allocated to this network
	V6Address []IPPrefix `protobuf:"bytes,5,rep,name=V6Address" json:"v6-address,omitempty"`
	// RouterMAC for the network
	RouterMAC string `protobuf:"bytes,6,opt,name=RouterMAC,proto3" json:"router-mac,omitempty"`
	// VxLANVNI is the fabric encap to be used for bridged traffic of the network if VxLAN encapsulated.
	VxLANVNI uint32 `protobuf:"varint,7,opt,name=VxLANVNI,proto3" json:"vxlan-vni,omitempty"`
	// IPAMPolicy attached to this VRF
	IPAMPolicy string `protobuf:"bytes,8,opt,name=IPAMPolicy,proto3" json:"ipam-policy,omitempty"`
	// V4RouteTableID is the allocated routing table for the VRF
	V4RouteTableID string `protobuf:"bytes,9,opt,name=V4RouteTableID,proto3" json:"v4-route-table-id,omitempty"`
	// V6RouteTableID is the allocated routing table for the VRF
	V6RouteTableID string `protobuf:"bytes,10,opt,name=V6RouteTableID,proto3" json:"v6-route-table-id,omitempty"`
	// Ingress v4 Security Policies applied to this network
	IngV4SecurityPolicies []string `protobuf:"bytes,11,rep,name=IngV4SecurityPolicies" json:"ing-v4-sec-policies,omitempty"`
	// Egress v4 Security Policies applied to this network
	EgV4SecurityPolicies []string `protobuf:"bytes,12,rep,name=EgV4SecurityPolicies" json:"eg-v4-sec-policies,omitempty"`
	// Ingress v6 Security Policies applied to this network
	IngV6SecurityPolicies []string `protobuf:"bytes,13,rep,name=IngV6SecurityPolicies" json:"ing-v6-sec-policies,omitempty"`
	// Egress v6 Security Policies applied to this network
	EgV6SecurityPolicies []string `protobuf:"bytes,14,rep,name=EgV6SecurityPolicies" json:"eg-v6-sec-policies,omitempty"`
	// RouteImportExport is used as the Route Distinguisher and to control Import Export of routes for the network
	RouteImportExport *RDSpec `protobuf:"bytes,15,opt,name=RouteImportExport" json:"route-import-export,omitempty"`
}

func (m *NetworkSpec) Reset()                    { *m = NetworkSpec{} }
func (m *NetworkSpec) String() string            { return proto.CompactTextString(m) }
func (*NetworkSpec) ProtoMessage()               {}
func (*NetworkSpec) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{2} }

func (m *NetworkSpec) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *NetworkSpec) GetVlanID() uint32 {
	if m != nil {
		return m.VlanID
	}
	return 0
}

func (m *NetworkSpec) GetVRFID() uint32 {
	if m != nil {
		return m.VRFID
	}
	return 0
}

func (m *NetworkSpec) GetV4Address() []IPPrefix {
	if m != nil {
		return m.V4Address
	}
	return nil
}

func (m *NetworkSpec) GetV6Address() []IPPrefix {
	if m != nil {
		return m.V6Address
	}
	return nil
}

func (m *NetworkSpec) GetRouterMAC() string {
	if m != nil {
		return m.RouterMAC
	}
	return ""
}

func (m *NetworkSpec) GetVxLANVNI() uint32 {
	if m != nil {
		return m.VxLANVNI
	}
	return 0
}

func (m *NetworkSpec) GetIPAMPolicy() string {
	if m != nil {
		return m.IPAMPolicy
	}
	return ""
}

func (m *NetworkSpec) GetV4RouteTableID() string {
	if m != nil {
		return m.V4RouteTableID
	}
	return ""
}

func (m *NetworkSpec) GetV6RouteTableID() string {
	if m != nil {
		return m.V6RouteTableID
	}
	return ""
}

func (m *NetworkSpec) GetIngV4SecurityPolicies() []string {
	if m != nil {
		return m.IngV4SecurityPolicies
	}
	return nil
}

func (m *NetworkSpec) GetEgV4SecurityPolicies() []string {
	if m != nil {
		return m.EgV4SecurityPolicies
	}
	return nil
}

func (m *NetworkSpec) GetIngV6SecurityPolicies() []string {
	if m != nil {
		return m.IngV6SecurityPolicies
	}
	return nil
}

func (m *NetworkSpec) GetEgV6SecurityPolicies() []string {
	if m != nil {
		return m.EgV6SecurityPolicies
	}
	return nil
}

func (m *NetworkSpec) GetRouteImportExport() *RDSpec {
	if m != nil {
		return m.RouteImportExport
	}
	return nil
}

// network status
type NetworkStatus struct {
	NetworkID uint64 `protobuf:"varint,3,opt,name=NetworkID,proto3" json:"network-id,omitempty"`
}

func (m *NetworkStatus) Reset()                    { *m = NetworkStatus{} }
func (m *NetworkStatus) String() string            { return proto.CompactTextString(m) }
func (*NetworkStatus) ProtoMessage()               {}
func (*NetworkStatus) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{3} }

func (m *NetworkStatus) GetNetworkID() uint64 {
	if m != nil {
		return m.NetworkID
	}
	return 0
}

// list of networks
type NetworkList struct {
	Networks []*Network `protobuf:"bytes,1,rep,name=networks" json:"networks,omitempty"`
}

func (m *NetworkList) Reset()                    { *m = NetworkList{} }
func (m *NetworkList) String() string            { return proto.CompactTextString(m) }
func (*NetworkList) ProtoMessage()               {}
func (*NetworkList) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{4} }

func (m *NetworkList) GetNetworks() []*Network {
	if m != nil {
		return m.Networks
	}
	return nil
}

// network watch event
type NetworkEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	Network   Network       `protobuf:"bytes,2,opt,name=Network" json:"network,omitempty"`
}

func (m *NetworkEvent) Reset()                    { *m = NetworkEvent{} }
func (m *NetworkEvent) String() string            { return proto.CompactTextString(m) }
func (*NetworkEvent) ProtoMessage()               {}
func (*NetworkEvent) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{5} }

func (m *NetworkEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *NetworkEvent) GetNetwork() Network {
	if m != nil {
		return m.Network
	}
	return Network{}
}

type NetworkEventList struct {
	NetworkEvents []*NetworkEvent `protobuf:"bytes,1,rep,name=networkEvents" json:"networkEvents,omitempty"`
}

func (m *NetworkEventList) Reset()                    { *m = NetworkEventList{} }
func (m *NetworkEventList) String() string            { return proto.CompactTextString(m) }
func (*NetworkEventList) ProtoMessage()               {}
func (*NetworkEventList) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{6} }

func (m *NetworkEventList) GetNetworkEvents() []*NetworkEvent {
	if m != nil {
		return m.NetworkEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*ApiResponse)(nil), "netproto.ApiResponse")
	proto.RegisterType((*Network)(nil), "netproto.Network")
	proto.RegisterType((*NetworkSpec)(nil), "netproto.NetworkSpec")
	proto.RegisterType((*NetworkStatus)(nil), "netproto.NetworkStatus")
	proto.RegisterType((*NetworkList)(nil), "netproto.NetworkList")
	proto.RegisterType((*NetworkEvent)(nil), "netproto.NetworkEvent")
	proto.RegisterType((*NetworkEventList)(nil), "netproto.NetworkEventList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkApiV1 service

type NetworkApiV1Client interface {
	ListNetworks(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NetworkList, error)
	WatchNetworks(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkApiV1_WatchNetworksClient, error)
	NetworkOperUpdate(ctx context.Context, opts ...grpc.CallOption) (NetworkApiV1_NetworkOperUpdateClient, error)
}

type networkApiV1Client struct {
	cc *grpc.ClientConn
}

func NewNetworkApiV1Client(cc *grpc.ClientConn) NetworkApiV1Client {
	return &networkApiV1Client{cc}
}

func (c *networkApiV1Client) ListNetworks(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NetworkList, error) {
	out := new(NetworkList)
	err := grpc.Invoke(ctx, "/netproto.NetworkApiV1/ListNetworks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkApiV1Client) WatchNetworks(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkApiV1_WatchNetworksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkApiV1_serviceDesc.Streams[0], c.cc, "/netproto.NetworkApiV1/WatchNetworks", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkApiV1WatchNetworksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkApiV1_WatchNetworksClient interface {
	Recv() (*NetworkEventList, error)
	grpc.ClientStream
}

type networkApiV1WatchNetworksClient struct {
	grpc.ClientStream
}

func (x *networkApiV1WatchNetworksClient) Recv() (*NetworkEventList, error) {
	m := new(NetworkEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkApiV1Client) NetworkOperUpdate(ctx context.Context, opts ...grpc.CallOption) (NetworkApiV1_NetworkOperUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkApiV1_serviceDesc.Streams[1], c.cc, "/netproto.NetworkApiV1/NetworkOperUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkApiV1NetworkOperUpdateClient{stream}
	return x, nil
}

type NetworkApiV1_NetworkOperUpdateClient interface {
	Send(*NetworkEvent) error
	CloseAndRecv() (*api.TypeMeta, error)
	grpc.ClientStream
}

type networkApiV1NetworkOperUpdateClient struct {
	grpc.ClientStream
}

func (x *networkApiV1NetworkOperUpdateClient) Send(m *NetworkEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkApiV1NetworkOperUpdateClient) CloseAndRecv() (*api.TypeMeta, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.TypeMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NetworkApiV1 service

type NetworkApiV1Server interface {
	ListNetworks(context.Context, *api.ListWatchOptions) (*NetworkList, error)
	WatchNetworks(*api.ListWatchOptions, NetworkApiV1_WatchNetworksServer) error
	NetworkOperUpdate(NetworkApiV1_NetworkOperUpdateServer) error
}

func RegisterNetworkApiV1Server(s *grpc.Server, srv NetworkApiV1Server) {
	s.RegisterService(&_NetworkApiV1_serviceDesc, srv)
}

func _NetworkApiV1_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkApiV1Server).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.NetworkApiV1/ListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkApiV1Server).ListNetworks(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkApiV1_WatchNetworks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkApiV1Server).WatchNetworks(m, &networkApiV1WatchNetworksServer{stream})
}

type NetworkApiV1_WatchNetworksServer interface {
	Send(*NetworkEventList) error
	grpc.ServerStream
}

type networkApiV1WatchNetworksServer struct {
	grpc.ServerStream
}

func (x *networkApiV1WatchNetworksServer) Send(m *NetworkEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkApiV1_NetworkOperUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkApiV1Server).NetworkOperUpdate(&networkApiV1NetworkOperUpdateServer{stream})
}

type NetworkApiV1_NetworkOperUpdateServer interface {
	SendAndClose(*api.TypeMeta) error
	Recv() (*NetworkEvent, error)
	grpc.ServerStream
}

type networkApiV1NetworkOperUpdateServer struct {
	grpc.ServerStream
}

func (x *networkApiV1NetworkOperUpdateServer) SendAndClose(m *api.TypeMeta) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkApiV1NetworkOperUpdateServer) Recv() (*NetworkEvent, error) {
	m := new(NetworkEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NetworkApiV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.NetworkApiV1",
	HandlerType: (*NetworkApiV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNetworks",
			Handler:    _NetworkApiV1_ListNetworks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchNetworks",
			Handler:       _NetworkApiV1_WatchNetworks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NetworkOperUpdate",
			Handler:       _NetworkApiV1_NetworkOperUpdate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "network.proto",
}

func (m *ApiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatusCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.StatusCode))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.References) > 0 {
		for _, s := range m.References {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Network) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Network) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *NetworkSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VrfName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.VrfName)))
		i += copy(dAtA[i:], m.VrfName)
	}
	if m.VlanID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.VlanID))
	}
	if m.VRFID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.VRFID))
	}
	if len(m.V4Address) > 0 {
		for _, msg := range m.V4Address {
			dAtA[i] = 0x22
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.V6Address) > 0 {
		for _, msg := range m.V6Address {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RouterMAC) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.RouterMAC)))
		i += copy(dAtA[i:], m.RouterMAC)
	}
	if m.VxLANVNI != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.VxLANVNI))
	}
	if len(m.IPAMPolicy) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPAMPolicy)))
		i += copy(dAtA[i:], m.IPAMPolicy)
	}
	if len(m.V4RouteTableID) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.V4RouteTableID)))
		i += copy(dAtA[i:], m.V4RouteTableID)
	}
	if len(m.V6RouteTableID) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.V6RouteTableID)))
		i += copy(dAtA[i:], m.V6RouteTableID)
	}
	if len(m.IngV4SecurityPolicies) > 0 {
		for _, s := range m.IngV4SecurityPolicies {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.EgV4SecurityPolicies) > 0 {
		for _, s := range m.EgV4SecurityPolicies {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.IngV6SecurityPolicies) > 0 {
		for _, s := range m.IngV6SecurityPolicies {
			dAtA[i] = 0x6a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.EgV6SecurityPolicies) > 0 {
		for _, s := range m.EgV6SecurityPolicies {
			dAtA[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.RouteImportExport != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.RouteImportExport.Size()))
		n5, err := m.RouteImportExport.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *NetworkStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NetworkID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.NetworkID))
	}
	return i, nil
}

func (m *NetworkList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Networks) > 0 {
		for _, msg := range m.Networks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NetworkEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Network.Size()))
	n6, err := m.Network.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *NetworkEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NetworkEvents) > 0 {
		for _, msg := range m.NetworkEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintNetwork(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ApiResponse) Size() (n int) {
	var l int
	_ = l
	if m.StatusCode != 0 {
		n += 1 + sovNetwork(uint64(m.StatusCode))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if len(m.References) > 0 {
		for _, s := range m.References {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *Network) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNetwork(uint64(l))
	return n
}

func (m *NetworkSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.VrfName)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.VlanID != 0 {
		n += 1 + sovNetwork(uint64(m.VlanID))
	}
	if m.VRFID != 0 {
		n += 1 + sovNetwork(uint64(m.VRFID))
	}
	if len(m.V4Address) > 0 {
		for _, e := range m.V4Address {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if len(m.V6Address) > 0 {
		for _, e := range m.V6Address {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	l = len(m.RouterMAC)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.VxLANVNI != 0 {
		n += 1 + sovNetwork(uint64(m.VxLANVNI))
	}
	l = len(m.IPAMPolicy)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.V4RouteTableID)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.V6RouteTableID)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if len(m.IngV4SecurityPolicies) > 0 {
		for _, s := range m.IngV4SecurityPolicies {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if len(m.EgV4SecurityPolicies) > 0 {
		for _, s := range m.EgV4SecurityPolicies {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if len(m.IngV6SecurityPolicies) > 0 {
		for _, s := range m.IngV6SecurityPolicies {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if len(m.EgV6SecurityPolicies) > 0 {
		for _, s := range m.EgV6SecurityPolicies {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if m.RouteImportExport != nil {
		l = m.RouteImportExport.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *NetworkStatus) Size() (n int) {
	var l int
	_ = l
	if m.NetworkID != 0 {
		n += 1 + sovNetwork(uint64(m.NetworkID))
	}
	return n
}

func (m *NetworkList) Size() (n int) {
	var l int
	_ = l
	if len(m.Networks) > 0 {
		for _, e := range m.Networks {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *NetworkEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovNetwork(uint64(m.EventType))
	}
	l = m.Network.Size()
	n += 1 + l + sovNetwork(uint64(l))
	return n
}

func (m *NetworkEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.NetworkEvents) > 0 {
		for _, e := range m.NetworkEvents {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func sovNetwork(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNetwork(x uint64) (n int) {
	return sovNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field References", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.References = append(m.References, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Network) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Network: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Network: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanID", wireType)
			}
			m.VlanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VlanID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRFID", wireType)
			}
			m.VRFID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRFID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V4Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V4Address = append(m.V4Address, IPPrefix{})
			if err := m.V4Address[len(m.V4Address)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V6Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V6Address = append(m.V6Address, IPPrefix{})
			if err := m.V6Address[len(m.V6Address)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterMAC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterMAC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VxLANVNI", wireType)
			}
			m.VxLANVNI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VxLANVNI |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAMPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAMPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V4RouteTableID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V4RouteTableID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V6RouteTableID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V6RouteTableID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngV4SecurityPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IngV4SecurityPolicies = append(m.IngV4SecurityPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgV4SecurityPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EgV4SecurityPolicies = append(m.EgV4SecurityPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngV6SecurityPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IngV6SecurityPolicies = append(m.IngV6SecurityPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgV6SecurityPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EgV6SecurityPolicies = append(m.EgV6SecurityPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteImportExport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteImportExport == nil {
				m.RouteImportExport = &RDSpec{}
			}
			if err := m.RouteImportExport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkID", wireType)
			}
			m.NetworkID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Networks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Networks = append(m.Networks, &Network{})
			if err := m.Networks[len(m.Networks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkEvents = append(m.NetworkEvents, &NetworkEvent{})
			if err := m.NetworkEvents[len(m.NetworkEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNetwork
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNetwork
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNetwork(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNetwork = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetwork   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("network.proto", fileDescriptorNetwork) }

var fileDescriptorNetwork = []byte{
	// 1104 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0xc7, 0x4d, 0x3f, 0xa5, 0x95, 0xe5, 0xc7, 0xfa, 0x11, 0x5a, 0x75, 0x4d, 0x57, 0x40, 0x01,
	0x37, 0x08, 0xa5, 0xc4, 0x11, 0x84, 0x16, 0x48, 0x0d, 0x88, 0xb1, 0x1d, 0x08, 0x8d, 0x6d, 0x41,
	0x76, 0x15, 0xa0, 0x37, 0x9a, 0x1a, 0x2b, 0xdb, 0x4a, 0x4b, 0x82, 0x5c, 0x29, 0x36, 0xda, 0x9c,
	0xfa, 0x3d, 0x7a, 0xea, 0xb5, 0x97, 0x02, 0xfd, 0x0e, 0x39, 0xe6, 0xd0, 0x33, 0x51, 0xf8, 0xa8,
	0x4f, 0x51, 0xec, 0x90, 0xa2, 0x96, 0x91, 0xed, 0xf6, 0x22, 0x50, 0xc3, 0xff, 0xfc, 0xf6, 0x3f,
	0xfb, 0x98, 0x25, 0xc9, 0x73, 0x10, 0xef, 0x5c, 0xff, 0xa7, 0x92, 0xe7, 0xbb, 0xc2, 0xa5, 0x19,
	0x0e, 0x02, 0x9f, 0x0a, 0xdb, 0x1d, 0xd7, 0xed, 0x74, 0xa1, 0x6c, 0x7b, 0xac, 0x6c, 0x73, 0xee,
	0x0a, 0x5b, 0x30, 0x97, 0x07, 0x91, 0xae, 0x70, 0xd4, 0x61, 0xe2, 0x6d, 0xff, 0xb2, 0xe4, 0xb8,
	0xbd, 0xb2, 0x07, 0x3c, 0xb0, 0x79, 0xdb, 0x2d, 0x07, 0xef, 0xca, 0x03, 0xe0, 0xcc, 0x81, 0x72,
	0x5f, 0xb0, 0x6e, 0x20, 0x53, 0x3b, 0xc0, 0xd5, 0xec, 0x32, 0xe3, 0x4e, 0xb7, 0xdf, 0x86, 0x11,
	0xc6, 0x54, 0x30, 0x1d, 0xb7, 0xe3, 0x96, 0x31, 0x7c, 0xd9, 0xbf, 0xc2, 0x7f, 0xf8, 0x07, 0x9f,
	0x62, 0xf9, 0x97, 0xf7, 0x8c, 0x2a, 0x3d, 0xf6, 0x40, 0xd8, 0xb1, 0x2c, 0x27, 0x6e, 0xbc, 0x64,
	0x88, 0x9c, 0xef, 0xf6, 0x05, 0x44, 0x7f, 0x8a, 0x7f, 0x68, 0x24, 0x57, 0xf3, 0x58, 0x13, 0x02,
	0xcf, 0xe5, 0x01, 0xd0, 0x6f, 0x08, 0x39, 0x17, 0xb6, 0xe8, 0x07, 0x2f, 0xdd, 0x36, 0xe8, 0xda,
	0xae, 0xb6, 0x97, 0xb7, 0xb6, 0x86, 0xa1, 0xb1, 0x11, 0x60, 0xd4, 0x74, 0xdc, 0x36, 0x3c, 0x71,
	0x7b, 0x4c, 0x40, 0xcf, 0x13, 0x37, 0x4d, 0x45, 0x4c, 0xbf, 0x22, 0x73, 0x47, 0xbe, 0xef, 0xfa,
	0xfa, 0xf4, 0xae, 0xb6, 0x97, 0xb5, 0xd6, 0x86, 0xa1, 0xb1, 0x0c, 0x32, 0xa0, 0xe8, 0x23, 0x05,
	0xfd, 0x9a, 0x90, 0x26, 0x5c, 0x81, 0x0f, 0xdc, 0x81, 0x40, 0x9f, 0xd9, 0x9d, 0xd9, 0xcb, 0x5a,
	0xfa, 0x30, 0x34, 0xd6, 0xfd, 0x24, 0xaa, 0x0e, 0x32, 0xd6, 0x16, 0x7f, 0x9f, 0x26, 0x0b, 0xa7,
	0xd1, 0x02, 0xd1, 0x03, 0x92, 0xb9, 0xb8, 0xf1, 0xe0, 0x04, 0x84, 0x8d, 0x4e, 0x73, 0xfb, 0xf9,
	0x92, 0xed, 0xb1, 0xd2, 0x28, 0x68, 0xad, 0x7d, 0x08, 0x8d, 0xa9, 0x8f, 0xa1, 0xa1, 0x0d, 0x43,
	0x63, 0xe1, 0x09, 0xe3, 0x5d, 0xc6, 0xa1, 0x99, 0xe4, 0xd0, 0xef, 0x08, 0x39, 0xbb, 0xfc, 0x11,
	0x1c, 0x81, 0x84, 0x69, 0x24, 0x2c, 0x23, 0x61, 0x1c, 0xb6, 0x0a, 0x0a, 0x63, 0x49, 0x4e, 0xa9,
	0x6a, 0x6c, 0xac, 0xa3, 0x35, 0x32, 0x7b, 0xee, 0x81, 0xa3, 0xcf, 0x20, 0x66, 0xa3, 0x34, 0xda,
	0x36, 0xa5, 0xd8, 0xad, 0x7c, 0x69, 0x6d, 0x4a, 0x98, 0x04, 0x05, 0x1e, 0x38, 0x0a, 0x08, 0x53,
	0x69, 0x9d, 0xcc, 0x47, 0xd3, 0xa9, 0xcf, 0x22, 0xe4, 0xd1, 0x24, 0x04, 0x5f, 0x5b, 0x7a, 0x8c,
	0x59, 0x89, 0x16, 0x45, 0x01, 0xc5, 0x80, 0xe2, 0x5f, 0x19, 0x92, 0x53, 0x06, 0xa6, 0x4f, 0xc9,
	0x42, 0xcb, 0xbf, 0x3a, 0xb5, 0x7b, 0xd1, 0x9a, 0x66, 0xad, 0xcd, 0x61, 0x68, 0xd0, 0x81, 0x7f,
	0x65, 0x72, 0xbb, 0xa7, 0x2e, 0xe8, 0x48, 0x46, 0x4d, 0x32, 0xdf, 0xea, 0xda, 0xbc, 0x7e, 0x88,
	0x13, 0x93, 0xb7, 0x36, 0x86, 0xa1, 0xb1, 0x3a, 0xe8, 0xda, 0xdc, 0x64, 0x6d, 0x75, 0xc0, 0x48,
	0x44, 0x1f, 0x93, 0xb9, 0x56, 0xf3, 0xb8, 0x7e, 0x88, 0xf5, 0xe7, 0xad, 0x75, 0xe9, 0x4e, 0xe2,
	0x53, 0xe2, 0x48, 0x42, 0x4f, 0x49, 0xb6, 0x55, 0xa9, 0xb5, 0xdb, 0x3e, 0x04, 0xb2, 0xd4, 0x99,
	0xbd, 0xdc, 0x3e, 0x1d, 0x97, 0x5a, 0x6f, 0x34, 0x7c, 0xb8, 0x62, 0xd7, 0xd6, 0x76, 0x5c, 0xe5,
	0xfa, 0xa0, 0x62, 0xda, 0x91, 0x5a, 0x61, 0x8d, 0x11, 0xc8, 0xab, 0x8e, 0x78, 0x73, 0xff, 0x83,
	0x57, 0xbd, 0x93, 0x37, 0x42, 0xd0, 0x2a, 0xc9, 0x36, 0xe5, 0x11, 0xf1, 0x4f, 0x6a, 0x2f, 0xf5,
	0x79, 0x9c, 0xae, 0x68, 0x73, 0x62, 0xd0, 0xec, 0xd9, 0xea, 0xd2, 0x8d, 0xa5, 0xf4, 0x39, 0xc9,
	0xb4, 0xae, 0x5f, 0xd7, 0x4e, 0x5b, 0xa7, 0x75, 0x7d, 0x01, 0xa7, 0xe1, 0xd1, 0x30, 0x34, 0xd6,
	0x06, 0xd7, 0x72, 0xd6, 0x06, 0x9c, 0x29, 0x59, 0x89, 0x50, 0x1e, 0xb8, 0x7a, 0xa3, 0x76, 0xd2,
	0x70, 0xbb, 0xcc, 0xb9, 0xd1, 0x33, 0x38, 0x1a, 0x1e, 0x38, 0xe6, 0xd9, 0x3d, 0xd3, 0xc3, 0xb0,
	0xba, 0xe5, 0xc6, 0x62, 0xfa, 0x8a, 0x2c, 0xb5, 0x2a, 0x38, 0xfc, 0x85, 0x7d, 0xd9, 0x85, 0xfa,
	0xa1, 0x9e, 0xc5, 0x74, 0x63, 0x18, 0x1a, 0x9f, 0x0d, 0x2a, 0x26, 0xfa, 0x35, 0x85, 0x7c, 0x97,
	0x5e, 0x87, 0x4f, 0xd2, 0x10, 0x54, 0x4d, 0x81, 0x88, 0x02, 0xaa, 0x3e, 0x04, 0x4a, 0xa5, 0xd1,
	0x37, 0x64, 0xa3, 0xce, 0x3b, 0xad, 0xca, 0x39, 0x38, 0x7d, 0x9f, 0x89, 0x1b, 0x34, 0xca, 0x20,
	0xd0, 0x73, 0x78, 0xc4, 0xbf, 0x18, 0x86, 0xc6, 0xe7, 0x8c, 0x77, 0xcc, 0x41, 0xc5, 0x0c, 0xc0,
	0x89, 0xaa, 0x63, 0xa9, 0xb3, 0x7e, 0x77, 0x3e, 0xbd, 0x20, 0xeb, 0x47, 0x77, 0x71, 0x17, 0x91,
	0xbb, 0x3b, 0x0c, 0x8d, 0x6d, 0x78, 0x08, 0x7b, 0x67, 0xf6, 0xc8, 0x6e, 0x75, 0x02, 0x9b, 0xff,
	0xc4, 0x6e, 0xf5, 0x41, 0xbb, 0xd5, 0x7b, 0xec, 0x4e, 0x72, 0x97, 0xd2, 0x76, 0xab, 0x0f, 0xd9,
	0x9d, 0xa4, 0xda, 0x64, 0x15, 0x67, 0xbb, 0xde, 0xf3, 0x5c, 0x5f, 0x1c, 0x5d, 0xcb, 0x5f, 0x7d,
	0x19, 0x5b, 0xc5, 0xca, 0x78, 0xbf, 0x37, 0x0f, 0xb1, 0xd5, 0xa0, 0xf9, 0x68, 0xe1, 0x18, 0xea,
	0x4d, 0xc0, 0x04, 0x65, 0x94, 0x49, 0x5a, 0xf1, 0x15, 0xc9, 0xa7, 0x5a, 0x8d, 0x3c, 0x0b, 0x71,
	0x20, 0x3e, 0xdb, 0xb3, 0xd1, 0x59, 0x88, 0x2f, 0xc9, 0xf4, 0x76, 0x18, 0x4b, 0x8b, 0x2f, 0x92,
	0xfe, 0xf3, 0x9a, 0x05, 0x82, 0x9a, 0x24, 0x13, 0x67, 0x04, 0xba, 0x86, 0x27, 0x74, 0x75, 0xa2,
	0xb9, 0x35, 0x13, 0x49, 0xf1, 0x37, 0x8d, 0x2c, 0xc6, 0xd1, 0xa3, 0x01, 0x70, 0x41, 0x8f, 0x49,
	0x16, 0x1f, 0x64, 0xef, 0xc6, 0x0e, 0xb6, 0xb4, 0xbf, 0x84, 0x9d, 0x3a, 0x89, 0x46, 0xb6, 0x40,
	0xfe, 0x35, 0xe5, 0x6d, 0xa7, 0xda, 0x4a, 0x44, 0xf4, 0x38, 0xb9, 0x3d, 0xe2, 0x7e, 0x3f, 0x69,
	0xc3, 0xda, 0x8a, 0xfb, 0xc4, 0x6a, 0x6c, 0x47, 0xed, 0x8e, 0xb1, 0xa6, 0xd8, 0x20, 0x2b, 0xaa,
	0x3f, 0xac, 0xf1, 0x45, 0xf2, 0xe9, 0x80, 0xb1, 0x51, 0xa1, 0x9b, 0x13, 0x23, 0xe0, 0xeb, 0x66,
	0x5a, 0xbc, 0xff, 0xf7, 0x74, 0x52, 0x72, 0xcd, 0x63, 0xad, 0x67, 0xf4, 0x80, 0x2c, 0x4a, 0x6c,
	0x1c, 0x0b, 0xe8, 0x06, 0xd6, 0x2b, 0x43, 0x6f, 0x6c, 0xe1, 0xbc, 0x3d, 0xf3, 0xf0, 0xfb, 0xa1,
	0x30, 0x79, 0xd3, 0x48, 0x49, 0x71, 0x8a, 0x1e, 0x93, 0x3c, 0x0a, 0xff, 0x0b, 0x50, 0xb8, 0xdb,
	0x5f, 0x44, 0x79, 0xaa, 0xd1, 0x03, 0xb2, 0x1a, 0xc7, 0xcf, 0x3c, 0xf0, 0xbf, 0xf7, 0xda, 0xb6,
	0x00, 0x7a, 0x4f, 0x51, 0x85, 0xf4, 0x05, 0x5c, 0x9c, 0xda, 0xd3, 0x0a, 0xbf, 0xfc, 0xf9, 0xeb,
	0xd6, 0xf5, 0xf8, 0xd2, 0x9e, 0xed, 0xca, 0xb9, 0x9a, 0xe9, 0x80, 0xa0, 0xb3, 0x9e, 0x2b, 0x1f,
	0xbd, 0xbe, 0xa0, 0xf3, 0x6d, 0xe8, 0x82, 0x80, 0xc2, 0xb7, 0xe5, 0x9f, 0xc7, 0x77, 0x6a, 0xe9,
	0x02, 0xb8, 0xcd, 0xc5, 0xfb, 0x54, 0x4c, 0x5e, 0x4e, 0x81, 0x67, 0x3b, 0x30, 0x19, 0x7e, 0x5f,
	0x5c, 0x94, 0xdf, 0x3d, 0xa3, 0x5d, 0xf4, 0x78, 0xba, 0xf5, 0xcc, 0xda, 0xfc, 0x70, 0xbb, 0xa3,
	0x7d, 0xbc, 0xdd, 0xd1, 0xfe, 0xb9, 0xdd, 0xd1, 0x7e, 0x48, 0x3e, 0xe6, 0x1a, 0xda, 0xe5, 0x3c,
	0x3e, 0x3c, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x67, 0x49, 0x9b, 0xb0, 0xf0, 0x09, 0x00, 0x00,
}
