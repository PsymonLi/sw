// {C} Copyright 2020 Pensando Systems Inc. All rights reserved.

syntax = "proto3";

package netproto;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

// policer profile controller api
service DSCConfigApiV1 {
    // options for auto generating rest endpoints
    option(venice.naplesRestService) = {
        Object: "DSCConfig",
        Method: ["list", "get", "post", "delete", "put"],
        Pattern: "/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}"
        Prefix: "api/dscconfig"
        Version: "V1"
    };

    rpc ListDSCConfigs (api.ListWatchOptions) returns (DSCConfigList) {};
    rpc WatchDSCConfigs (api.ListWatchOptions) returns (stream DSCConfigEventList) {};
    rpc DSCConfigOperUpdate (stream DSCConfigEvent) returns (api.TypeMeta) {};
}

// ----------------------------- DSCConfig Object -----------------------------

message DSCConfigSpec {
    string Tenant           = 1 [(gogoproto.jsontag) = "tenant,omitempty"];
    string TxPolicer        = 2 [(gogoproto.jsontag) = "tx-policer,omitempty"];
}

message DSCConfigStatus {
    uint64 DSCConfigID  = 1 [(gogoproto.jsontag) = "id,omitempty"];
    // DSC is the name of the dsc it belongs to
    string DSC          = 2 [(gogoproto.jsontag) = "dsc,omitempty"];
}

message DSCConfigEvent {
    api.EventType EventType = 1 [(gogoproto.jsontag) = "event-type,omitempty"];
    DSCConfig DSCConfig     = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "dsc-config,omitempty"];
}

message DSCConfigEventList {
    repeated DSCConfigEvent DSCConfigEvents =1;
}

message DSCConfigList {
    repeated DSCConfig DSCConfigs = 1;
}

// DSCConfig
message DSCConfig {
    api.TypeMeta T              = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O            = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    DSCConfigSpec Spec          = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
    DSCConfigStatus Status      = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}
