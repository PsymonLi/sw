// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package netprotoApiServer is a auto generated package.
Input file: app.proto
*/
package netproto

import (
	"reflect"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/runtime"
)

var typesMapApp = map[string]*api.Struct{

	"netproto.ALG": &api.Struct{
		Kind: "", APIGroup: "", Scopes: []string{}, GetTypeFn: func() reflect.Type { return reflect.TypeOf(ALG{}) },
		Fields: map[string]api.Field{
			"DNS": api.Field{Name: "DNS", CLITag: api.CLIInfo{ID: "dns", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "dns", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "netproto.DNS"},

			"SIP": api.Field{Name: "SIP", CLITag: api.CLIInfo{ID: "sip", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "sip", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "netproto.SIP"},

			"SUNRPC": api.Field{Name: "SUNRPC", CLITag: api.CLIInfo{ID: "sunrpc", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "sunrpc", Pointer: true, Slice: true, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "netproto.RPC"},

			"FTP": api.Field{Name: "FTP", CLITag: api.CLIInfo{ID: "ftp", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "ftp", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "netproto.FTP"},

			"MSRPC": api.Field{Name: "MSRPC", CLITag: api.CLIInfo{ID: "msrpc", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "msrpc", Pointer: true, Slice: true, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "netproto.RPC"},

			"TFTP": api.Field{Name: "TFTP", CLITag: api.CLIInfo{ID: "tftp", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "tftp", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "netproto.TFTP"},

			"RTSP": api.Field{Name: "RTSP", CLITag: api.CLIInfo{ID: "rtsp", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "rtsp", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "netproto.RTSP"},

			"ICMP": api.Field{Name: "ICMP", CLITag: api.CLIInfo{ID: "icmp", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "icmp", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "netproto.ICMP"},
		},
	},
	"netproto.App": &api.Struct{
		Kind: "", APIGroup: "", Scopes: []string{}, GetTypeFn: func() reflect.Type { return reflect.TypeOf(App{}) },
		Fields: map[string]api.Field{
			"TypeMeta": api.Field{Name: "TypeMeta", CLITag: api.CLIInfo{ID: "TypeMeta", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: true, FromInline: false, KeyType: "", Type: "api.TypeMeta"},

			"ObjectMeta": api.Field{Name: "ObjectMeta", CLITag: api.CLIInfo{ID: "meta", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "meta", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "api.ObjectMeta"},

			"Spec": api.Field{Name: "Spec", CLITag: api.CLIInfo{ID: "spec", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "spec", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "netproto.AppSpec"},

			"Status": api.Field{Name: "Status", CLITag: api.CLIInfo{ID: "status", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "status", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "netproto.AppStatus"},

			"Kind": api.Field{Name: "Kind", CLITag: api.CLIInfo{ID: "kind", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "kind", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: true, KeyType: "", Type: "TYPE_STRING"},

			"APIVersion": api.Field{Name: "APIVersion", CLITag: api.CLIInfo{ID: "api-version", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "api-version", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: true, KeyType: "", Type: "TYPE_STRING"},

			"Name": api.Field{Name: "Name", CLITag: api.CLIInfo{ID: "name", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "name", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: true, KeyType: "", Type: "TYPE_STRING"},

			"Tenant": api.Field{Name: "Tenant", CLITag: api.CLIInfo{ID: "tenant", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "tenant", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: true, KeyType: "", Type: "TYPE_STRING"},

			"Namespace": api.Field{Name: "Namespace", CLITag: api.CLIInfo{ID: "namespace", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "namespace", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: true, KeyType: "", Type: "TYPE_STRING"},

			"GenerationID": api.Field{Name: "GenerationID", CLITag: api.CLIInfo{ID: "generation-id", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "generation-id", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: true, KeyType: "", Type: "TYPE_STRING"},

			"ResourceVersion": api.Field{Name: "ResourceVersion", CLITag: api.CLIInfo{ID: "resource-version", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "resource-version", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: true, KeyType: "", Type: "TYPE_STRING"},

			"UUID": api.Field{Name: "UUID", CLITag: api.CLIInfo{ID: "uuid", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "uuid", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: true, KeyType: "", Type: "TYPE_STRING"},

			"Labels": api.Field{Name: "Labels", CLITag: api.CLIInfo{ID: "labels", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "labels", Pointer: true, Slice: false, Mutable: true, Map: true, Inline: false, FromInline: true, KeyType: "TYPE_STRING", Type: "TYPE_STRING"},

			"CreationTime": api.Field{Name: "CreationTime", CLITag: api.CLIInfo{ID: "creation-time", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "creation-time", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: true, KeyType: "", Type: "api.Timestamp"},

			"ModTime": api.Field{Name: "ModTime", CLITag: api.CLIInfo{ID: "mod-time", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "mod-time", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: true, KeyType: "", Type: "api.Timestamp"},

			"SelfLink": api.Field{Name: "SelfLink", CLITag: api.CLIInfo{ID: "self-link", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "self-link", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: true, KeyType: "", Type: "TYPE_STRING"},
		},

		CLITags: map[string]api.CLIInfo{
			"allow-mismatch-ip-addresses": api.CLIInfo{Path: "Spec.ALG.FTP.AllowMismatchIPAddresses", Skip: false, Insert: "", Help: ""},
			"api-version":                 api.CLIInfo{Path: "APIVersion", Skip: false, Insert: "", Help: ""},
			"app-id":                      api.CLIInfo{Path: "Status.AppID", Skip: false, Insert: "", Help: ""},
			"app-idle-timeout":            api.CLIInfo{Path: "Spec.AppIdleTimeout", Skip: false, Insert: "", Help: ""},
			"c-timeout":                   api.CLIInfo{Path: "Spec.ALG.SIP.CTimeout", Skip: false, Insert: "", Help: ""},
			"code":                        api.CLIInfo{Path: "Spec.ALG.ICMP.Code", Skip: false, Insert: "", Help: ""},
			"drop-large-domain-packets":   api.CLIInfo{Path: "Spec.ALG.DNS.DropLargeDomainPackets", Skip: false, Insert: "", Help: ""},
			"drop-long-label-packets":     api.CLIInfo{Path: "Spec.ALG.DNS.DropLongLabelPackets", Skip: false, Insert: "", Help: ""},
			"drop-multi-question-packets": api.CLIInfo{Path: "Spec.ALG.DNS.DropMultiQuestionPackets", Skip: false, Insert: "", Help: ""},
			"drop-multi-zone-packets":     api.CLIInfo{Path: "Spec.ALG.DNS.DropMultiZonePackets", Skip: false, Insert: "", Help: ""},
			"dscp-code-point":             api.CLIInfo{Path: "Spec.ALG.SIP.DSCPCodePoint", Skip: false, Insert: "", Help: ""},
			"generation-id":               api.CLIInfo{Path: "GenerationID", Skip: false, Insert: "", Help: ""},
			"kind":                        api.CLIInfo{Path: "Kind", Skip: false, Insert: "", Help: ""},
			"labels":                      api.CLIInfo{Path: "Labels", Skip: false, Insert: "", Help: ""},
			"max-call-duration":           api.CLIInfo{Path: "Spec.ALG.SIP.MaxCallDuration", Skip: false, Insert: "", Help: ""},
			"max-msg-length":              api.CLIInfo{Path: "Spec.ALG.DNS.MaxMessageLength", Skip: false, Insert: "", Help: ""},
			"media-inactivity-timeout":    api.CLIInfo{Path: "Spec.ALG.SIP.MediaInactivityTimeout", Skip: false, Insert: "", Help: ""},
			"name":                        api.CLIInfo{Path: "Name", Skip: false, Insert: "", Help: ""},
			"namespace":                   api.CLIInfo{Path: "Namespace", Skip: false, Insert: "", Help: ""},
			"program-id":                  api.CLIInfo{Path: "Spec.ALG.SUNRPC[].ProgramID", Skip: false, Insert: "", Help: ""},
			"program-id-timeout":          api.CLIInfo{Path: "Spec.ALG.SUNRPC[].ProgramIDTimeout", Skip: false, Insert: "", Help: ""},
			"query-response-timeout":      api.CLIInfo{Path: "Spec.ALG.DNS.QueryResponseTimeout", Skip: false, Insert: "", Help: ""},
			"resource-version":            api.CLIInfo{Path: "ResourceVersion", Skip: false, Insert: "", Help: ""},
			"self-link":                   api.CLIInfo{Path: "SelfLink", Skip: false, Insert: "", Help: ""},
			"t1-timeout":                  api.CLIInfo{Path: "Spec.ALG.SIP.T1Timeout", Skip: false, Insert: "", Help: ""},
			"t4-timeout":                  api.CLIInfo{Path: "Spec.ALG.SIP.T4Timeout", Skip: false, Insert: "", Help: ""},
			"tenant":                      api.CLIInfo{Path: "Tenant", Skip: false, Insert: "", Help: ""},
			"type":                        api.CLIInfo{Path: "Spec.ALG.ICMP.Type", Skip: false, Insert: "", Help: ""},
			"uuid":                        api.CLIInfo{Path: "UUID", Skip: false, Insert: "", Help: ""},
		},
	},
	"netproto.AppEvent": &api.Struct{
		Kind: "", APIGroup: "", Scopes: []string{}, GetTypeFn: func() reflect.Type { return reflect.TypeOf(AppEvent{}) },
		Fields: map[string]api.Field{
			"EventType": api.Field{Name: "EventType", CLITag: api.CLIInfo{ID: "event-type", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "event-type", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_ENUM"},

			"App": api.Field{Name: "App", CLITag: api.CLIInfo{ID: "app", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "app", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "netproto.App"},
		},
	},
	"netproto.AppEventList": &api.Struct{
		Kind: "", APIGroup: "", Scopes: []string{}, GetTypeFn: func() reflect.Type { return reflect.TypeOf(AppEventList{}) },
		Fields: map[string]api.Field{
			"AppEvents": api.Field{Name: "AppEvents", CLITag: api.CLIInfo{ID: "AppEvents", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: true, Slice: true, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "netproto.AppEvent"},
		},
	},
	"netproto.AppList": &api.Struct{
		Kind: "", APIGroup: "", Scopes: []string{}, GetTypeFn: func() reflect.Type { return reflect.TypeOf(AppList{}) },
		Fields: map[string]api.Field{
			"apps": api.Field{Name: "apps", CLITag: api.CLIInfo{ID: "apps", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: true, Slice: true, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "netproto.App"},
		},
	},
	"netproto.AppSpec": &api.Struct{
		Kind: "", APIGroup: "", Scopes: []string{}, GetTypeFn: func() reflect.Type { return reflect.TypeOf(AppSpec{}) },
		Fields: map[string]api.Field{
			"ProtoPorts": api.Field{Name: "ProtoPorts", CLITag: api.CLIInfo{ID: "proto-ports", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "proto-ports", Pointer: true, Slice: true, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "netproto.ProtoPort"},

			"ALG": api.Field{Name: "ALG", CLITag: api.CLIInfo{ID: "alg", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "alg", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "netproto.ALG"},

			"AppIdleTimeout": api.Field{Name: "AppIdleTimeout", CLITag: api.CLIInfo{ID: "app-idle-timeout", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "app-idle-timeout", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
	"netproto.AppStatus": &api.Struct{
		Kind: "", APIGroup: "", Scopes: []string{}, GetTypeFn: func() reflect.Type { return reflect.TypeOf(AppStatus{}) },
		Fields: map[string]api.Field{
			"AppID": api.Field{Name: "AppID", CLITag: api.CLIInfo{ID: "app-id", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "app-id", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_UINT64"},
		},
	},
	"netproto.DNS": &api.Struct{
		Kind: "", APIGroup: "", Scopes: []string{}, GetTypeFn: func() reflect.Type { return reflect.TypeOf(DNS{}) },
		Fields: map[string]api.Field{
			"DropMultiQuestionPackets": api.Field{Name: "DropMultiQuestionPackets", CLITag: api.CLIInfo{ID: "drop-multi-question-packets", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "drop-multi-question-packets", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_BOOL"},

			"DropLargeDomainPackets": api.Field{Name: "DropLargeDomainPackets", CLITag: api.CLIInfo{ID: "drop-large-domain-packets", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "drop-large-domain-packets", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_BOOL"},

			"DropLongLabelPackets": api.Field{Name: "DropLongLabelPackets", CLITag: api.CLIInfo{ID: "drop-long-label-packets", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "drop-long-label-packets", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_BOOL"},

			"DropMultiZonePackets": api.Field{Name: "DropMultiZonePackets", CLITag: api.CLIInfo{ID: "drop-multi-zone-packets", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "drop-multi-zone-packets", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_BOOL"},

			"MaxMessageLength": api.Field{Name: "MaxMessageLength", CLITag: api.CLIInfo{ID: "max-msg-length", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "max-msg-length", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_UINT32"},

			"QueryResponseTimeout": api.Field{Name: "QueryResponseTimeout", CLITag: api.CLIInfo{ID: "query-response-timeout", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "query-response-timeout", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
	"netproto.FTP": &api.Struct{
		Kind: "", APIGroup: "", Scopes: []string{}, GetTypeFn: func() reflect.Type { return reflect.TypeOf(FTP{}) },
		Fields: map[string]api.Field{
			"AllowMismatchIPAddresses": api.Field{Name: "AllowMismatchIPAddresses", CLITag: api.CLIInfo{ID: "allow-mismatch-ip-addresses", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "allow-mismatch-ip-addresses", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_BOOL"},
		},
	},
	"netproto.ICMP": &api.Struct{
		Kind: "", APIGroup: "", Scopes: []string{}, GetTypeFn: func() reflect.Type { return reflect.TypeOf(ICMP{}) },
		Fields: map[string]api.Field{
			"Type": api.Field{Name: "Type", CLITag: api.CLIInfo{ID: "type", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "type", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_UINT32"},

			"Code": api.Field{Name: "Code", CLITag: api.CLIInfo{ID: "code", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "code", Pointer: false, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_UINT32"},
		},
	},
	"netproto.RPC": &api.Struct{
		Kind: "", APIGroup: "", Scopes: []string{}, GetTypeFn: func() reflect.Type { return reflect.TypeOf(RPC{}) },
		Fields: map[string]api.Field{
			"ProgramID": api.Field{Name: "ProgramID", CLITag: api.CLIInfo{ID: "program-id", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "program-id", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_STRING"},

			"ProgramIDTimeout": api.Field{Name: "ProgramIDTimeout", CLITag: api.CLIInfo{ID: "program-id-timeout", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "program-id-timeout", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
	"netproto.RTSP": &api.Struct{
		Kind: "", APIGroup: "", Scopes: []string{}, GetTypeFn: func() reflect.Type { return reflect.TypeOf(RTSP{}) },
		Fields: map[string]api.Field{},
	},
	"netproto.SIP": &api.Struct{
		Kind: "", APIGroup: "", Scopes: []string{}, GetTypeFn: func() reflect.Type { return reflect.TypeOf(SIP{}) },
		Fields: map[string]api.Field{
			"MediaInactivityTimeout": api.Field{Name: "MediaInactivityTimeout", CLITag: api.CLIInfo{ID: "media-inactivity-timeout", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "media-inactivity-timeout", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_STRING"},

			"MaxCallDuration": api.Field{Name: "MaxCallDuration", CLITag: api.CLIInfo{ID: "max-call-duration", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "max-call-duration", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_STRING"},

			"CTimeout": api.Field{Name: "CTimeout", CLITag: api.CLIInfo{ID: "c-timeout", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "c-timeout", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_STRING"},

			"T1Timeout": api.Field{Name: "T1Timeout", CLITag: api.CLIInfo{ID: "t1-timeout", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "t1-timeout", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_STRING"},

			"T4Timeout": api.Field{Name: "T4Timeout", CLITag: api.CLIInfo{ID: "t4-timeout", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "t4-timeout", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_STRING"},

			"DSCPCodePoint": api.Field{Name: "DSCPCodePoint", CLITag: api.CLIInfo{ID: "dscp-code-point", Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "dscp-code-point", Pointer: true, Slice: false, Mutable: true, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_UINT32"},
		},
	},
	"netproto.TFTP": &api.Struct{
		Kind: "", APIGroup: "", Scopes: []string{}, GetTypeFn: func() reflect.Type { return reflect.TypeOf(TFTP{}) },
		Fields: map[string]api.Field{},
	},
}

var keyMapApp = map[string][]api.PathsMap{}

func init() {
	schema := runtime.GetDefaultScheme()
	schema.AddSchema(typesMapApp)
	schema.AddPaths(keyMapApp)
}
