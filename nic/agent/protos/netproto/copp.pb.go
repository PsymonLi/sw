// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: copp.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ControlPlanePolicerSpec_Type int32

const (
	ControlPlanePolicerSpec_POLICER_NONE ControlPlanePolicerSpec_Type = 0
	ControlPlanePolicerSpec_PPS_POLICER  ControlPlanePolicerSpec_Type = 1
	ControlPlanePolicerSpec_BPS_POLICER  ControlPlanePolicerSpec_Type = 2
)

var ControlPlanePolicerSpec_Type_name = map[int32]string{
	0: "POLICER_NONE",
	1: "PPS_POLICER",
	2: "BPS_POLICER",
}
var ControlPlanePolicerSpec_Type_value = map[string]int32{
	"POLICER_NONE": 0,
	"PPS_POLICER":  1,
	"BPS_POLICER":  2,
}

func (x ControlPlanePolicerSpec_Type) String() string {
	return proto.EnumName(ControlPlanePolicerSpec_Type_name, int32(x))
}
func (ControlPlanePolicerSpec_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCopp, []int{1, 0}
}

// ControlPlanePolicer object
type ControlPlanePolicer struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           ControlPlanePolicerSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         ControlPlanePolicerStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *ControlPlanePolicer) Reset()                    { *m = ControlPlanePolicer{} }
func (m *ControlPlanePolicer) String() string            { return proto.CompactTextString(m) }
func (*ControlPlanePolicer) ProtoMessage()               {}
func (*ControlPlanePolicer) Descriptor() ([]byte, []int) { return fileDescriptorCopp, []int{0} }

func (m *ControlPlanePolicer) GetSpec() ControlPlanePolicerSpec {
	if m != nil {
		return m.Spec
	}
	return ControlPlanePolicerSpec{}
}

func (m *ControlPlanePolicer) GetStatus() ControlPlanePolicerStatus {
	if m != nil {
		return m.Status
	}
	return ControlPlanePolicerStatus{}
}

// ControlPlanePolicerSpec captures all the control plane policer level configuration
type ControlPlanePolicerSpec struct {
	// Type of Control Plane Policer. One of PPS or BPS
	PolicerType string `protobuf:"bytes,1,opt,name=PolicerType,proto3" json:"policer-type,omitempty"`
	// PPS Policer Packets/Sec. Range 4000 - 2000000000
	PacketsPerSecond uint32 `protobuf:"varint,2,opt,name=PacketsPerSecond,proto3" json:"packets-per-second,omitempty"`
	// BPS Policer Bytes/Sec. Range 4000 - 125000000000
	BytesPerSecond uint64 `protobuf:"varint,3,opt,name=BytesPerSecond,proto3" json:"bytes-per-second,omitempty"`
	// Burst Count to absorb. Range 0 - 2000000000 packets for PPS Policer and 0 - 125000000000 bytes for BPS Policer
	BurstCount uint64 `protobuf:"varint,4,opt,name=BurstCount,proto3" json:"burst-count,omitempty"`
}

func (m *ControlPlanePolicerSpec) Reset()                    { *m = ControlPlanePolicerSpec{} }
func (m *ControlPlanePolicerSpec) String() string            { return proto.CompactTextString(m) }
func (*ControlPlanePolicerSpec) ProtoMessage()               {}
func (*ControlPlanePolicerSpec) Descriptor() ([]byte, []int) { return fileDescriptorCopp, []int{1} }

func (m *ControlPlanePolicerSpec) GetPolicerType() string {
	if m != nil {
		return m.PolicerType
	}
	return ""
}

func (m *ControlPlanePolicerSpec) GetPacketsPerSecond() uint32 {
	if m != nil {
		return m.PacketsPerSecond
	}
	return 0
}

func (m *ControlPlanePolicerSpec) GetBytesPerSecond() uint64 {
	if m != nil {
		return m.BytesPerSecond
	}
	return 0
}

func (m *ControlPlanePolicerSpec) GetBurstCount() uint64 {
	if m != nil {
		return m.BurstCount
	}
	return 0
}

// ControlPlanePolicer Status
type ControlPlanePolicerStatus struct {
	// ControlPlanePolicer in the datapath
	ControlPlanePolicerID uint64 `protobuf:"varint,1,opt,name=ControlPlanePolicerID,proto3" json:"id,omitempty"`
}

func (m *ControlPlanePolicerStatus) Reset()                    { *m = ControlPlanePolicerStatus{} }
func (m *ControlPlanePolicerStatus) String() string            { return proto.CompactTextString(m) }
func (*ControlPlanePolicerStatus) ProtoMessage()               {}
func (*ControlPlanePolicerStatus) Descriptor() ([]byte, []int) { return fileDescriptorCopp, []int{2} }

func (m *ControlPlanePolicerStatus) GetControlPlanePolicerID() uint64 {
	if m != nil {
		return m.ControlPlanePolicerID
	}
	return 0
}

type ControlPlanePolicerList struct {
	Policers []*ControlPlanePolicer `protobuf:"bytes,1,rep,name=Policers" json:"Policers,omitempty"`
}

func (m *ControlPlanePolicerList) Reset()                    { *m = ControlPlanePolicerList{} }
func (m *ControlPlanePolicerList) String() string            { return proto.CompactTextString(m) }
func (*ControlPlanePolicerList) ProtoMessage()               {}
func (*ControlPlanePolicerList) Descriptor() ([]byte, []int) { return fileDescriptorCopp, []int{3} }

func (m *ControlPlanePolicerList) GetPolicers() []*ControlPlanePolicer {
	if m != nil {
		return m.Policers
	}
	return nil
}

// control plane policer watch event
type ControlPlanePolicerEvent struct {
	EventType           api.EventType       `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	ControlPlanePolicer ControlPlanePolicer `protobuf:"bytes,2,opt,name=ControlPlanePolicer" json:"copp,omitempty"`
}

func (m *ControlPlanePolicerEvent) Reset()                    { *m = ControlPlanePolicerEvent{} }
func (m *ControlPlanePolicerEvent) String() string            { return proto.CompactTextString(m) }
func (*ControlPlanePolicerEvent) ProtoMessage()               {}
func (*ControlPlanePolicerEvent) Descriptor() ([]byte, []int) { return fileDescriptorCopp, []int{4} }

func (m *ControlPlanePolicerEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *ControlPlanePolicerEvent) GetControlPlanePolicer() ControlPlanePolicer {
	if m != nil {
		return m.ControlPlanePolicer
	}
	return ControlPlanePolicer{}
}

// endpoint watch events batched
type ControlPlanePolicerEventList struct {
	ControlPlanePolicerEvents []*ControlPlanePolicerEvent `protobuf:"bytes,1,rep,name=ControlPlanePolicerEvents" json:"ControlPlanePolicerEvents,omitempty"`
}

func (m *ControlPlanePolicerEventList) Reset()                    { *m = ControlPlanePolicerEventList{} }
func (m *ControlPlanePolicerEventList) String() string            { return proto.CompactTextString(m) }
func (*ControlPlanePolicerEventList) ProtoMessage()               {}
func (*ControlPlanePolicerEventList) Descriptor() ([]byte, []int) { return fileDescriptorCopp, []int{5} }

func (m *ControlPlanePolicerEventList) GetControlPlanePolicerEvents() []*ControlPlanePolicerEvent {
	if m != nil {
		return m.ControlPlanePolicerEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*ControlPlanePolicer)(nil), "netproto.ControlPlanePolicer")
	proto.RegisterType((*ControlPlanePolicerSpec)(nil), "netproto.ControlPlanePolicerSpec")
	proto.RegisterType((*ControlPlanePolicerStatus)(nil), "netproto.ControlPlanePolicerStatus")
	proto.RegisterType((*ControlPlanePolicerList)(nil), "netproto.ControlPlanePolicerList")
	proto.RegisterType((*ControlPlanePolicerEvent)(nil), "netproto.ControlPlanePolicerEvent")
	proto.RegisterType((*ControlPlanePolicerEventList)(nil), "netproto.ControlPlanePolicerEventList")
	proto.RegisterEnum("netproto.ControlPlanePolicerSpec_Type", ControlPlanePolicerSpec_Type_name, ControlPlanePolicerSpec_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ControlPlanePolicerApi service

type ControlPlanePolicerApiClient interface {
	GetControlPlanePolicer(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*ControlPlanePolicer, error)
	ListControlPlanePoliceres(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*ControlPlanePolicerList, error)
	WatchControlPlanePoliceres(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (ControlPlanePolicerApi_WatchControlPlanePoliceresClient, error)
}

type controlPlanePolicerApiClient struct {
	cc *grpc.ClientConn
}

func NewControlPlanePolicerApiClient(cc *grpc.ClientConn) ControlPlanePolicerApiClient {
	return &controlPlanePolicerApiClient{cc}
}

func (c *controlPlanePolicerApiClient) GetControlPlanePolicer(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*ControlPlanePolicer, error) {
	out := new(ControlPlanePolicer)
	err := grpc.Invoke(ctx, "/netproto.ControlPlanePolicerApi/GetControlPlanePolicer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlanePolicerApiClient) ListControlPlanePoliceres(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*ControlPlanePolicerList, error) {
	out := new(ControlPlanePolicerList)
	err := grpc.Invoke(ctx, "/netproto.ControlPlanePolicerApi/ListControlPlanePoliceres", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlanePolicerApiClient) WatchControlPlanePoliceres(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (ControlPlanePolicerApi_WatchControlPlanePoliceresClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ControlPlanePolicerApi_serviceDesc.Streams[0], c.cc, "/netproto.ControlPlanePolicerApi/WatchControlPlanePoliceres", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlPlanePolicerApiWatchControlPlanePoliceresClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControlPlanePolicerApi_WatchControlPlanePoliceresClient interface {
	Recv() (*ControlPlanePolicerEventList, error)
	grpc.ClientStream
}

type controlPlanePolicerApiWatchControlPlanePoliceresClient struct {
	grpc.ClientStream
}

func (x *controlPlanePolicerApiWatchControlPlanePoliceresClient) Recv() (*ControlPlanePolicerEventList, error) {
	m := new(ControlPlanePolicerEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ControlPlanePolicerApi service

type ControlPlanePolicerApiServer interface {
	GetControlPlanePolicer(context.Context, *api.ObjectMeta) (*ControlPlanePolicer, error)
	ListControlPlanePoliceres(context.Context, *api.ObjectMeta) (*ControlPlanePolicerList, error)
	WatchControlPlanePoliceres(*api.ObjectMeta, ControlPlanePolicerApi_WatchControlPlanePoliceresServer) error
}

func RegisterControlPlanePolicerApiServer(s *grpc.Server, srv ControlPlanePolicerApiServer) {
	s.RegisterService(&_ControlPlanePolicerApi_serviceDesc, srv)
}

func _ControlPlanePolicerApi_GetControlPlanePolicer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlanePolicerApiServer).GetControlPlanePolicer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.ControlPlanePolicerApi/GetControlPlanePolicer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlanePolicerApiServer).GetControlPlanePolicer(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlanePolicerApi_ListControlPlanePoliceres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlanePolicerApiServer).ListControlPlanePoliceres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.ControlPlanePolicerApi/ListControlPlanePoliceres",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlanePolicerApiServer).ListControlPlanePoliceres(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlanePolicerApi_WatchControlPlanePoliceres_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlPlanePolicerApiServer).WatchControlPlanePoliceres(m, &controlPlanePolicerApiWatchControlPlanePoliceresServer{stream})
}

type ControlPlanePolicerApi_WatchControlPlanePoliceresServer interface {
	Send(*ControlPlanePolicerEventList) error
	grpc.ServerStream
}

type controlPlanePolicerApiWatchControlPlanePoliceresServer struct {
	grpc.ServerStream
}

func (x *controlPlanePolicerApiWatchControlPlanePoliceresServer) Send(m *ControlPlanePolicerEventList) error {
	return x.ServerStream.SendMsg(m)
}

var _ControlPlanePolicerApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.ControlPlanePolicerApi",
	HandlerType: (*ControlPlanePolicerApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetControlPlanePolicer",
			Handler:    _ControlPlanePolicerApi_GetControlPlanePolicer_Handler,
		},
		{
			MethodName: "ListControlPlanePoliceres",
			Handler:    _ControlPlanePolicerApi_ListControlPlanePoliceres_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchControlPlanePoliceres",
			Handler:       _ControlPlanePolicerApi_WatchControlPlanePoliceres_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "copp.proto",
}

func (m *ControlPlanePolicer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlPlanePolicer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCopp(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintCopp(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCopp(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintCopp(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *ControlPlanePolicerSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlPlanePolicerSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PolicerType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCopp(dAtA, i, uint64(len(m.PolicerType)))
		i += copy(dAtA[i:], m.PolicerType)
	}
	if m.PacketsPerSecond != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCopp(dAtA, i, uint64(m.PacketsPerSecond))
	}
	if m.BytesPerSecond != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCopp(dAtA, i, uint64(m.BytesPerSecond))
	}
	if m.BurstCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCopp(dAtA, i, uint64(m.BurstCount))
	}
	return i, nil
}

func (m *ControlPlanePolicerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlPlanePolicerStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ControlPlanePolicerID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCopp(dAtA, i, uint64(m.ControlPlanePolicerID))
	}
	return i, nil
}

func (m *ControlPlanePolicerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlPlanePolicerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Policers) > 0 {
		for _, msg := range m.Policers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCopp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ControlPlanePolicerEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlPlanePolicerEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCopp(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintCopp(dAtA, i, uint64(m.ControlPlanePolicer.Size()))
	n5, err := m.ControlPlanePolicer.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *ControlPlanePolicerEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlPlanePolicerEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ControlPlanePolicerEvents) > 0 {
		for _, msg := range m.ControlPlanePolicerEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCopp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintCopp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ControlPlanePolicer) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovCopp(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovCopp(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovCopp(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovCopp(uint64(l))
	return n
}

func (m *ControlPlanePolicerSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.PolicerType)
	if l > 0 {
		n += 1 + l + sovCopp(uint64(l))
	}
	if m.PacketsPerSecond != 0 {
		n += 1 + sovCopp(uint64(m.PacketsPerSecond))
	}
	if m.BytesPerSecond != 0 {
		n += 1 + sovCopp(uint64(m.BytesPerSecond))
	}
	if m.BurstCount != 0 {
		n += 1 + sovCopp(uint64(m.BurstCount))
	}
	return n
}

func (m *ControlPlanePolicerStatus) Size() (n int) {
	var l int
	_ = l
	if m.ControlPlanePolicerID != 0 {
		n += 1 + sovCopp(uint64(m.ControlPlanePolicerID))
	}
	return n
}

func (m *ControlPlanePolicerList) Size() (n int) {
	var l int
	_ = l
	if len(m.Policers) > 0 {
		for _, e := range m.Policers {
			l = e.Size()
			n += 1 + l + sovCopp(uint64(l))
		}
	}
	return n
}

func (m *ControlPlanePolicerEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovCopp(uint64(m.EventType))
	}
	l = m.ControlPlanePolicer.Size()
	n += 1 + l + sovCopp(uint64(l))
	return n
}

func (m *ControlPlanePolicerEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.ControlPlanePolicerEvents) > 0 {
		for _, e := range m.ControlPlanePolicerEvents {
			l = e.Size()
			n += 1 + l + sovCopp(uint64(l))
		}
	}
	return n
}

func sovCopp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCopp(x uint64) (n int) {
	return sovCopp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ControlPlanePolicer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlPlanePolicer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlPlanePolicer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCopp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlPlanePolicerSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlPlanePolicerSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlPlanePolicerSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicerType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketsPerSecond", wireType)
			}
			m.PacketsPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketsPerSecond |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesPerSecond", wireType)
			}
			m.BytesPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesPerSecond |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurstCount", wireType)
			}
			m.BurstCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurstCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCopp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCopp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlPlanePolicerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlPlanePolicerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlPlanePolicerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlPlanePolicerID", wireType)
			}
			m.ControlPlanePolicerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ControlPlanePolicerID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCopp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCopp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlPlanePolicerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlPlanePolicerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlPlanePolicerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policers = append(m.Policers, &ControlPlanePolicer{})
			if err := m.Policers[len(m.Policers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCopp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlPlanePolicerEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlPlanePolicerEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlPlanePolicerEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlPlanePolicer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ControlPlanePolicer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCopp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlPlanePolicerEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlPlanePolicerEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlPlanePolicerEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlPlanePolicerEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControlPlanePolicerEvents = append(m.ControlPlanePolicerEvents, &ControlPlanePolicerEvent{})
			if err := m.ControlPlanePolicerEvents[len(m.ControlPlanePolicerEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCopp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCopp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCopp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCopp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCopp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCopp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCopp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCopp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCopp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCopp   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("copp.proto", fileDescriptorCopp) }

var fileDescriptorCopp = []byte{
	// 777 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0xdd, 0x6e, 0xda, 0x48,
	0x14, 0xc7, 0x71, 0x40, 0xd9, 0x64, 0x48, 0x08, 0x9a, 0x6c, 0x58, 0xb0, 0xb2, 0x38, 0xeb, 0xfd,
	0x50, 0x2e, 0x02, 0x5e, 0xb1, 0x57, 0x59, 0xa9, 0x95, 0x3a, 0x29, 0xa9, 0xd2, 0xe6, 0xc3, 0x85,
	0x54, 0x55, 0xaf, 0x52, 0x63, 0xa6, 0xc4, 0xad, 0x99, 0x99, 0x30, 0xe3, 0x54, 0xa8, 0x8a, 0x54,
	0xa9, 0x52, 0xa5, 0x4a, 0x7d, 0x92, 0x5e, 0xf6, 0x29, 0x22, 0xf5, 0x26, 0x4f, 0x60, 0x55, 0xb9,
	0xe4, 0x29, 0xaa, 0x19, 0x0c, 0xb8, 0x89, 0xa1, 0xbd, 0xf3, 0xf9, 0x9f, 0x73, 0x7e, 0x9c, 0x39,
	0x67, 0xe6, 0x00, 0x80, 0x4b, 0x19, 0xab, 0xb2, 0x1e, 0x15, 0x14, 0x2e, 0x10, 0x2c, 0xd4, 0x97,
	0xbe, 0xde, 0xa1, 0xb4, 0xe3, 0x63, 0xcb, 0x61, 0x9e, 0xe5, 0x10, 0x42, 0x85, 0x23, 0x3c, 0x4a,
	0xf8, 0x30, 0x4e, 0xaf, 0x77, 0x3c, 0x71, 0x1a, 0xb4, 0xaa, 0x2e, 0xed, 0x5a, 0x0c, 0x13, 0xee,
	0x90, 0x36, 0xb5, 0xf8, 0x6b, 0xeb, 0x1c, 0x13, 0xcf, 0xc5, 0x56, 0x20, 0x3c, 0x9f, 0xcb, 0xd4,
	0x0e, 0x26, 0xf1, 0x6c, 0xcb, 0x23, 0xae, 0x1f, 0xb4, 0xf1, 0x08, 0x53, 0x89, 0x61, 0x3a, 0xb4,
	0x43, 0x2d, 0x25, 0xb7, 0x82, 0x17, 0xca, 0x52, 0x86, 0xfa, 0x8a, 0xc2, 0xff, 0x9e, 0xf2, 0xab,
	0xb2, 0xc6, 0x2e, 0x16, 0xce, 0x30, 0xcc, 0xbc, 0x9c, 0x03, 0xab, 0x3b, 0x94, 0x88, 0x1e, 0xf5,
	0x6d, 0xdf, 0x21, 0xd8, 0xa6, 0xbe, 0xe7, 0xe2, 0x1e, 0xbc, 0x0b, 0x16, 0x8e, 0xfb, 0x0c, 0x1f,
	0x60, 0xe1, 0x14, 0xb5, 0x0d, 0x6d, 0x33, 0x5b, 0x5b, 0xae, 0x3a, 0xcc, 0xab, 0x8e, 0x44, 0xb4,
	0x7a, 0x19, 0x1a, 0xa9, 0xab, 0xd0, 0xd0, 0x06, 0xa1, 0xf1, 0xcb, 0x96, 0x47, 0x7c, 0x8f, 0xe0,
	0xc6, 0x38, 0x07, 0x3e, 0x02, 0xe0, 0xa8, 0xf5, 0x12, 0xbb, 0x42, 0x11, 0xe6, 0x14, 0x61, 0x45,
	0x11, 0x26, 0x32, 0xd2, 0x63, 0x8c, 0x9c, 0x2c, 0x6a, 0x8b, 0x76, 0x3d, 0x81, 0xbb, 0x4c, 0xf4,
	0x1b, 0xb1, 0x74, 0x78, 0x00, 0x32, 0x4d, 0x86, 0xdd, 0x62, 0x5a, 0x61, 0xfe, 0xa8, 0x8e, 0x1a,
	0x5f, 0x4d, 0xa8, 0x5c, 0x06, 0xa2, 0x82, 0x04, 0x4b, 0x28, 0x67, 0xd8, 0x8d, 0x41, 0x15, 0x06,
	0x3e, 0x01, 0xf3, 0x4d, 0xe1, 0x88, 0x80, 0x17, 0x33, 0x0a, 0xf8, 0xe7, 0x6c, 0xa0, 0x0a, 0x45,
	0xc5, 0x08, 0x99, 0xe7, 0xca, 0x8e, 0x41, 0x23, 0x98, 0xf9, 0x31, 0x0d, 0x7e, 0x9b, 0x52, 0x10,
	0x6c, 0x83, 0x6c, 0x64, 0xca, 0x0e, 0xa9, 0x8e, 0x2e, 0x22, 0xf4, 0xe9, 0x7d, 0xe9, 0xaf, 0xa6,
	0xe8, 0xd5, 0x49, 0xd0, 0xdd, 0x9c, 0x92, 0xa9, 0x1a, 0x3e, 0x08, 0x8d, 0x02, 0x1b, 0x6a, 0x15,
	0xd1, 0x67, 0x38, 0xf6, 0xe3, 0x71, 0x2c, 0xdc, 0x07, 0x79, 0xdb, 0x71, 0x5f, 0x61, 0xc1, 0x6d,
	0xdc, 0x6b, 0x62, 0x97, 0x92, 0xb6, 0x6a, 0xfd, 0x32, 0xda, 0x18, 0x84, 0xc6, 0x3a, 0x1b, 0xfa,
	0x2a, 0x0c, 0xf7, 0x2a, 0x5c, 0x79, 0x63, 0xa0, 0x5b, 0x99, 0x70, 0x17, 0xe4, 0x50, 0x5f, 0xe0,
	0x18, 0x4b, 0xf6, 0x3f, 0x83, 0xca, 0x83, 0xd0, 0xd0, 0x5b, 0xd2, 0x93, 0x4c, 0xba, 0x91, 0x05,
	0xb7, 0x01, 0x40, 0x41, 0x8f, 0x8b, 0x1d, 0x1a, 0x10, 0xa1, 0x5a, 0x9e, 0x41, 0xa5, 0x41, 0x68,
	0xac, 0xb5, 0xa4, 0x5a, 0x71, 0xa5, 0x1c, 0x1f, 0xfc, 0x24, 0xd8, 0xfc, 0x1f, 0x64, 0xd4, 0xc1,
	0xf2, 0x60, 0xc9, 0x3e, 0xda, 0xdf, 0xdb, 0xa9, 0x37, 0x4e, 0x0e, 0x8f, 0x0e, 0xeb, 0xf9, 0x14,
	0x5c, 0x01, 0x59, 0xdb, 0x6e, 0x9e, 0x44, 0x6a, 0x5e, 0x93, 0x02, 0x8a, 0x09, 0x73, 0xa6, 0x0b,
	0x4a, 0x53, 0xa7, 0x09, 0x77, 0xc1, 0x5a, 0x82, 0x73, 0xef, 0xbe, 0x9a, 0x4c, 0x06, 0xe5, 0x07,
	0xa1, 0xb1, 0xe4, 0xc5, 0x0f, 0x95, 0x1c, 0x6e, 0x1e, 0x27, 0x8e, 0x7c, 0xdf, 0xe3, 0x02, 0x6e,
	0x83, 0x85, 0xc8, 0xe4, 0x45, 0x6d, 0x23, 0xbd, 0x99, 0xad, 0xfd, 0x3e, 0xf3, 0x9e, 0x35, 0xc6,
	0xe1, 0xe6, 0x17, 0x0d, 0x14, 0x13, 0x22, 0xea, 0xe7, 0x98, 0x08, 0xb8, 0x0b, 0x16, 0xd5, 0xc7,
	0xf8, 0x22, 0xe5, 0x6a, 0x39, 0xf5, 0xb0, 0xc6, 0x2a, 0x2a, 0x0e, 0x42, 0xe3, 0x57, 0x2c, 0xcd,
	0x9b, 0xd7, 0x65, 0x92, 0x0a, 0x3b, 0x89, 0x0f, 0x3f, 0x7a, 0xaa, 0xb3, 0x4b, 0x9d, 0xbc, 0x2f,
	0xb9, 0x0e, 0x63, 0xf8, 0x24, 0xa2, 0xf9, 0x56, 0x03, 0xeb, 0xd3, 0x4e, 0xa3, 0x3a, 0xf5, 0x3c,
	0x71, 0x52, 0xca, 0x3f, 0x6a, 0x9d, 0x39, 0xb3, 0x1e, 0x15, 0xda, 0x98, 0x0e, 0xa9, 0x7d, 0x48,
	0x83, 0x42, 0x82, 0xf7, 0x1e, 0xf3, 0xe0, 0x43, 0x50, 0x78, 0x80, 0x45, 0xd2, 0x0a, 0xbc, 0xb9,
	0xae, 0xf4, 0xd9, 0x4d, 0x31, 0x53, 0xf0, 0x31, 0x28, 0xc9, 0x03, 0x25, 0x38, 0x31, 0xbf, 0x8d,
	0x9b, 0xbd, 0xc7, 0x24, 0xc8, 0x4c, 0xc1, 0x67, 0x40, 0x7f, 0xea, 0x08, 0xf7, 0xf4, 0x27, 0x99,
	0xff, 0xfc, 0xb8, 0x4f, 0x43, 0xf0, 0xbf, 0x9a, 0x1e, 0x7c, 0x7e, 0x57, 0x3a, 0x4b, 0xde, 0xfe,
	0x19, 0x5f, 0xce, 0x25, 0xcd, 0x02, 0xa1, 0xdf, 0xb1, 0xde, 0x4c, 0xf8, 0xd5, 0x63, 0x4c, 0x1c,
	0x22, 0x2e, 0xbe, 0xd3, 0x0e, 0x9d, 0x2e, 0xe6, 0xcc, 0x71, 0xf1, 0x6d, 0xf9, 0xc2, 0xcc, 0xcb,
	0xff, 0x9b, 0x33, 0xca, 0xad, 0x68, 0x7f, 0x71, 0xb4, 0x74, 0x79, 0x5d, 0xd6, 0xae, 0xae, 0xcb,
	0xda, 0xd7, 0xeb, 0xb2, 0x66, 0x6b, 0xad, 0x79, 0x55, 0xee, 0x7f, 0xdf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x49, 0x2b, 0x40, 0x00, 0x5b, 0x07, 0x00, 0x00,
}
