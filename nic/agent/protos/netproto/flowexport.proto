// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.
syntax = "proto3";
// Trouble shooting: FlowExport APIs

package netproto;
// Mandatory imports.

import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "match.proto";

// ---------------------------- FlowExportPolicy API ----------------------------



// FlowExportPolicyApi REST interface for agent
service FlowExportPolicyApiV1 {

    // TODO uncomment Oper update when TPM uses nimbus
    rpc WatchFlowExportPolicy (api.ObjectMeta) returns (stream FlowExportPolicyEventList) {};
    rpc ListFlowExportPolicy (api.ObjectMeta) returns (FlowExportPolicyEventList) {};
   // rpc FlowExportPolicyOperUpdate (stream FlowExportPolicyEvent) returns (api.TypeMeta) {};
}

// FlowExportPolicyApi REST interface for agent
service FlowExportPolicyApiV2 {
    // options for auto generating rest endpoints
    option(venice.naplesRestService) = {
        Object: "FlowExportPolicy",
        Method: ["get", "list", "post", "delete", "put"],
        Pattern: "/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}"
        Version: "V2"
    };

    // TODO uncomment Oper update when TPM uses nimbus
    rpc WatchFlowExportPolicys (api.ListWatchOptions) returns (stream FlowExportPolicyEventList) {};
    rpc ListFlowExportPolicys (api.ListWatchOptions) returns (FlowExportPolicyList) {};
    rpc FlowExportPolicyOperUpdate (stream FlowExportPolicyEvent) returns (api.TypeMeta) {};
}



// FlowExportPolicy flow export Policy object
message FlowExportPolicy {
    api.TypeMeta            TypeMeta    = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta          ObjectMeta  = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    FlowExportPolicySpec    Spec        = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
    FlowExportPolicyStatus  Status      = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

message FlowExportPolicySpec {
    //  VrfName specifies the name of the VRF that the current Flow Export Policy belongs to
    string VrfName                              = 1 [(gogoproto.jsontag) = "vrf-name,omitempty"];

    // Interval defines how often to push the records to an external or internal collector
    // The value is specified as a string format to be '10s', '20m', '20mins', '10secs', '10seconds'
    string Interval                             = 2 [(gogoproto.jsontag) = "interval,omitempty"];

    // TemplateInterval defines how often to send ipfix templates to an external collector
    // The value is specified as a string format, '3m', '10m'
    string TemplateInterval                     = 3 [(gogoproto.jsontag) = "template-interval,omitempty"];

    string Format                               = 4 [(gogoproto.jsontag) = "format,omitempty"];

    repeated MatchRule  MatchRules              = 5 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "match-rules,omitempty"];

    // Export contains export parameters.
    repeated ExportConfig Exports               = 6 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "exports,omitempty"];
}

message ExportConfig {
    // IP address of the collector/entity to which the data is to be exported
    string Destination = 1 [(gogoproto.jsontag) = "destination,omitempty", (venice.check)="IPv4()"];
    
    // protocol and Port number where an external collector is gathering the data
    // example "UDP/2055"
    netproto.ProtoPort Transport = 2 [(gogoproto.jsontag) = "proto-port,omitempty", (venice.check)="EmptyOr(ProtoPort())"];

    // Gateway of IP address or URL of the collector/entity to which the data is to be exported
    string Gateway = 3 [(gogoproto.jsontag) = "gateway,omitempty", (venice.check)="StrLen(1,2048)"];
}

message FlowExportPolicyStatus {
    uint64 FlowExportPolicyID  = 1 [(gogoproto.jsontag) = "id,omitempty"];
}


message FlowExportPolicyList {
    repeated FlowExportPolicy FlowExportPolicys  = 1;
}


message FlowExportPolicyEvent {
    // event type create/update/delete
    api.EventType EventType = 1 [(gogoproto.nullable) = true,(gogoproto.jsontag) = "event-type,omitempty"];

    // flow export policy
    FlowExportPolicy Policy = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "flowexport-policy,omitempty"];
    
    // flow export policy (upgrade price!)
    FlowExportPolicy FlowExportPolicy = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "flowexport-policy,omitempty"];
}

message FlowExportPolicyEventList {
    repeated FlowExportPolicyEvent FlowExportPolicyEvents = 1 [(gogoproto.jsontag) = "event-list,omitempty"];
}
