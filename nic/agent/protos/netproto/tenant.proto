//------------------------------------------------------------------------------
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved
//
// protobuf specification for tenant
//------------------------------------------------------------------------------

syntax = "proto3";
package netproto;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";



// Tenant Status
message TenantStatus {
    // VRF ID in the datapath
    uint64 TenantID     = 1[(gogoproto.jsontag) = "tenant-id,omitempty"];     // Tenant identifier
}

// TenantSpec captures all the tenant level configuration
message TenantSpec {
    // Name of the tenant object.
    // default tenant is automatically created during init time
    api.ObjectMeta Meta = 1; // common object meta
}

// Tenant object
message Tenant {
    api.TypeMeta   TypeMeta     = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta ObjectMeta   = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    TenantSpec    Spec          = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
    TenantStatus  Status        = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

message TenantList {
    repeated Tenant tenants = 1;
}

// network watch event
message TenantEvent {
    api.EventType   EventType   = 1 [(gogoproto.jsontag) = "event-type,omitempty"];
    Tenant          Tenant      = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "network,omitempty"];
}

// Tenant controller api
service TenantApi {
    // options for auto generating rest endpoints
    option(venice.naplesRestService) = {
        Object: "Tenant",
        Method: ["list", "post", "delete", "put"],
        Pattern: "/{ObjectMeta.Name}",
        Prefix:"api/tenants",
    };

    rpc GetTenant (api.ObjectMeta) returns (Tenant) {};
    rpc ListTenants (api.ObjectMeta) returns (TenantList) {};
    rpc WatchTenants (api.ObjectMeta) returns (stream TenantEvent) {};
    rpc UpdateTenant (Tenant) returns (Tenant) {};
    rpc TenantOperUpdate (stream TenantEvent) returns (api.TypeMeta) {};

}
