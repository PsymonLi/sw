// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.
syntax = "proto3";
// Trouble shooting: Mirroring APIs

package netproto;
// Mandatory imports.

import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "match.proto";

// ---------------------------- MirrorSession API ----------------------------

service MirrorSessionApiV1 {
        //    TODO uncomment this when TSM uses nimbus
        rpc WatchMirrorSessions (api.ObjectMeta) returns (stream MirrorSessionEventList) {};
        rpc ListMirrorSessions (api.ObjectMeta) returns (MirrorSessionEventList) {};
        //rpc MirrorSessionOperUpdate (stream MirrorSessionEvent) returns (api.TypeMeta) {};
}
    
service MirrorSessionApiV2 {
    // options for auto generating rest endpoints
    option(venice.naplesRestService) = {
        Object: "MirrorSession",
        Method: ["list", "get", "post", "delete", "put"],
        Pattern: "/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}",
        Prefix: "api/mirror/sessions/"
        Version: "V2"
    };
    //    TODO uncomment this when TSM uses nimbus
    rpc WatchMirrorSessions (api.ListWatchOptions) returns (stream MirrorSessionEventList) {};
    rpc ListMirrorSessions (api.ListWatchOptions) returns (MirrorSessionList) {};
    rpc MirrorSessionOperUpdate (stream MirrorSessionEvent) returns (api.TypeMeta) {};
}

message MirrorSession {
    api.TypeMeta            TypeMeta    = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta          ObjectMeta  = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    MirrorSessionSpec       Spec        = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
    MirrorSessionStatus     Status      = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

enum MirrorDir {
    BOTH = 0;
    INGRESS = 1;
    EGRESS = 2;
}

message MirrorSessionSpec {
    string                   VrfName        = 1 [(gogoproto.jsontag) = "vrf-name,omitempty"];
    // Mirrored packet collectors
    repeated MirrorCollector Collectors     = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "collectors,inline"];
    // Traffic Selection Rules - Matching pakcets are mirrored, based on packet filters and start/stop conditions
    repeated MatchRule   MatchRules         = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "match-rules,inline"];

    uint32                  PacketSize      = 4 [(gogoproto.jsontag) = "packet-size,omitempty"];
    MirrorDir               MirrorDirection = 5 [(gogoproto.jsontag) = "mirror-direction,omitempty", (venice.check) = "StrEnum(MirrorDir)"];
}



// MirrorSessionStatus captures the sg policy status
message MirrorSessionStatus {
    uint64 MirrorSessionID  = 1 [(gogoproto.jsontag) = "id,omitempty"];
}

message MirrorSessionList {
    repeated MirrorSession MirrorSessions  = 1;
}

// mirror watch event
message MirrorSessionEvent {
    api.EventType           EventType               = 1 [(gogoproto.jsontag) = "event-type,omitempty"];
    MirrorSession   MirrorSession   = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "mirror-session,omitempty"];
}

// mirror watch events batched
message MirrorSessionEventList {
    repeated MirrorSessionEvent MirrorSessionEvents  = 1;
}



message MirrorExportConfig {
    // IP address or URL of the collector/entity to which the data is to be exported
    string Destination = 1 [(gogoproto.jsontag) = "destination,omitempty", (venice.check) = "StrLen(1,2048)"];
}

// Mirror collector - can be an external device (via ERSPAN) or Venice (internal packet capture)
message MirrorCollector {
    // Collector export information for ERSPAN. Not required for VENICE collector
    MirrorExportConfig  ExportCfg   = 1 [(gogoproto.nullable)=false, (gogoproto.jsontag) = "export-config,omitempty"];
    string              PcapDirName = 2 [(gogoproto.jsontag) = "pcap-dir-name"];
}
