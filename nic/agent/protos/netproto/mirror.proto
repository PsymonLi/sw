// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.
syntax = "proto3";
// Trouble shooting: Mirroring APIs

package netproto;
// Mandatory imports.

import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "match.proto";

// ---------------------------- MirrorSession API ----------------------------

service MirrorSessionApiV1 {
        //    TODO uncomment this when TSM uses nimbus
        rpc WatchMirrorSessions (api.ObjectMeta) returns (stream MirrorSessionEventList) {};
        rpc ListMirrorSessions (api.ObjectMeta) returns (MirrorSessionEventList) {};
        //rpc MirrorSessionOperUpdate (stream MirrorSessionEvent) returns (api.TypeMeta) {};
}
    
service MirrorSessionApiV2 {
    // options for auto generating rest endpoints
    option(venice.naplesRestService) = {
        Object: "MirrorSession",
        Method: ["list", "get", "post", "delete", "put"],
        Pattern: "/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}",
        Prefix: "api/mirror/sessions/"
        Version: "V2"
    };
    //    TODO uncomment this when TSM uses nimbus
    rpc WatchMirrorSessions (api.ListWatchOptions) returns (stream MirrorSessionEventList) {};
    rpc ListMirrorSessions (api.ListWatchOptions) returns (MirrorSessionList) {};
    rpc MirrorSessionOperUpdate (stream MirrorSessionEvent) returns (api.TypeMeta) {};
}

service InterfaceMirrorSessionApiV1 {
    // options for auto generating rest endpoints
    option(venice.naplesRestService) = {
        Object: "InterfaceMirrorSession",
        Method: ["list", "get", "post", "delete", "put"],
        Pattern: "/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}",
        Prefix: "api/mirror/interface-sessions/"
        Version: "V1"
    };
    rpc WatchInterfaceMirrorSessions (api.ListWatchOptions) returns (stream InterfaceMirrorSessionEventList) {};
    rpc ListInterfaceMirrorSessions (api.ListWatchOptions) returns (InterfaceMirrorSessionList) {};
    rpc InterfaceMirrorSessionOperUpdate (stream InterfaceMirrorSessionEvent) returns (api.TypeMeta) {};
}


message MirrorSession {
    api.TypeMeta            TypeMeta    = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta          ObjectMeta  = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    MirrorSessionSpec       Spec        = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
    MirrorSessionStatus     Status      = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}


message InterfaceMirrorSession {
    api.TypeMeta                  TypeMeta     = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta                ObjectMeta   = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    InterfaceMirrorSessionSpec    Spec         = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
    InterfaceMirrorSessionStatus  Status       = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}


enum MirrorDir {
    BOTH = 0;
    INGRESS = 1;
    EGRESS = 2;
}

message MirrorSessionSpec {
    string                   VrfName        = 1 [(gogoproto.jsontag) = "vrf-name,omitempty"];
    // Mirrored packet collectors
    repeated MirrorCollector Collectors     = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "collectors,inline"];
    // Traffic Selection Rules - Matching pakcets are mirrored, based on packet filters and start/stop conditions
    repeated MatchRule   MatchRules         = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "match-rules,inline"];

    uint32          PacketSize              = 4 [(gogoproto.jsontag) = "packet-size,omitempty"];
    MirrorDir       MirrorDirection         = 5 [(gogoproto.jsontag) = "mirror-direction,omitempty", (venice.check) = "StrEnum(MirrorDir)"];
    uint32          SpanID                  = 6 [(gogoproto.jsontag) = "span-id,inline"];
}


message InterfaceMirrorSessionSpec {
    string                   VrfName         = 1 [(gogoproto.jsontag) = "vrf-name,omitempty"];
    // Mirrored packet collectors
    repeated MirrorCollector Collectors      = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "collectors,inline"];
    uint32                   SpanID          = 3 [(gogoproto.jsontag) = "span-id,inline"];
    uint32                   PacketSize      = 4 [(gogoproto.jsontag) = "packet-size,omitempty"];
    MirrorDir                MirrorDirection = 5 [(gogoproto.jsontag) = "mirror-direction,omitempty", (venice.check) = "StrEnum(MirrorDir)"];
    string                   Type            = 6 [(gogoproto.jsontag) = "type,omitempty"];
    bool                     StripVlanHdr    = 7 [(gogoproto.jsontag) = "strip-vlan-hdr,omitempty" ];
}

// MirrorSessionStatus captures the sg policy status
message MirrorSessionStatus {
    uint64 MirrorSessionID  	      = 1 [deprecated = true, (gogoproto.jsontag) = "id,omitempty"];
    repeated uint64 MirrorSessionIDs  = 2 [(gogoproto.jsontag) = "mirror-session-ids,omitempty"];
    repeated uint64 FlowMonitorIDs    = 3 [(gogoproto.jsontag) = "flow-monitor-ids,omitempty"];
}

// InterfaceMirrorSessionStatus captures status
message InterfaceMirrorSessionStatus {
    uint64 MirrorSessionID  	      = 1 [deprecated = true, (gogoproto.jsontag) = "id,omitempty"];
    repeated uint64 MirrorSessionIDs  = 2 [(gogoproto.jsontag) = "mirror-session-ids,omitempty"];
}

message MirrorSessionList {
    repeated MirrorSession MirrorSessions  = 1;
}

// mirror watch event
message MirrorSessionEvent {
    api.EventType           EventType               = 1 [(gogoproto.jsontag) = "event-type,omitempty"];
    MirrorSession   MirrorSession   = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "mirror-session,omitempty"];
}

// mirror watch events batched
message MirrorSessionEventList {
    repeated MirrorSessionEvent MirrorSessionEvents  = 1;
}

message InterfaceMirrorSessionList {
    repeated InterfaceMirrorSession InterfaceMirrorSessions  = 1;
}

// mirror watch event
message InterfaceMirrorSessionEvent {
    api.EventType           EventType               = 1 [(gogoproto.jsontag) = "event-type,omitempty"];
    InterfaceMirrorSession  InterfaceMirrorSession   = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "interface-mirror-session,omitempty"];
}

// mirror watch events batched
message InterfaceMirrorSessionEventList {
    repeated InterfaceMirrorSessionEvent InterfaceMirrorSessionEvents  = 1;
}


message MirrorExportConfig {
    // IP address or URL of the collector/entity to which the data is to be exported
    string Destination = 1 [(gogoproto.jsontag) = "destination,omitempty", (venice.check) = "StrLen(1,2048)"];
    string Gateway     = 2 [(gogoproto.jsontag) = "gateway,omitempty", (venice.check) = "StrLen(1,2048)"];
}

// Mirror collector - can be an external device (via ERSPAN) or Venice (internal packet capture)
message MirrorCollector {
    // Collector export information for ERSPAN. Not required for VENICE collector
    MirrorExportConfig  ExportCfg   = 1 [(gogoproto.nullable)=false, (gogoproto.jsontag) = "export-config,omitempty"];
    string              PcapDirName = 2 [(gogoproto.jsontag) = "pcap-dir-name"];
    // Type of Collector
    string          Type            = 3 [(gogoproto.jsontag) = "type,omitempty"];
   // remove vlan header
    bool            StripVlanHdr    = 4 [(gogoproto.jsontag) = "strip-vlan-hdr,omitempty" ];
}
