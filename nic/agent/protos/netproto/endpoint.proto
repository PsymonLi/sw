// network object

syntax = "proto3";
package netproto;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

// ---------------------------- Endpoint API ----------------------------

// endpoint controller api
service EndpointApi {
    // options for auto generating rest endpoints
    option(venice.naplesRestService) = {
        Object: "Endpoint",
        Method: ["list", "post", "put", "delete"],
        Pattern: "/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}",
        Prefix: "api/endpoints"
    };

    rpc CreateEndpoint (Endpoint) returns (Endpoint) {};
    rpc GetEndpoint (api.ObjectMeta) returns (Endpoint) {};
    rpc ListEndpoints (api.ObjectMeta) returns (EndpointList) {};
    rpc DeleteEndpoint (Endpoint) returns (Endpoint) {};
    rpc WatchEndpoints (api.ObjectMeta) returns (stream EndpointEvent) {};
    rpc UpdateEndpoint (Endpoint) returns (Endpoint) {};
}

// Endpoint Object
message Endpoint {
    api.TypeMeta   TypeMeta   = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta ObjectMeta = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    EndpointSpec   Spec       = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
    EndpointStatus Status     = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}


// EndpointSpec captures all Endpoint Configuration.
// Endpoints could either be local or remote.
// Local endpoints are the endpoints on the same host that has the NAPLES. Remote endpoints are the endpoints not on the
// same host as NAPLES.
// LocalEPs are bound to a lif.
// RemoteEPs are bound to uplinks or a tunnel interface

message EndpointSpec {
    enum Type{
        NONE    = 0;
        LIF     = 1; // For local EPs
        UPLINK  = 2; // For Remote EPs
        TUNNEL  = 3; // For Remote EPs going over tunnels
    }
    // VrfName specifies the name of the VRF that the current EP belongs to
    string VrfName                          = 1 [(gogoproto.jsontag) = "vrf-name,omitempty"];
    string EndpointUUID                     = 2 [(gogoproto.jsontag) = "endpoint-uuid,omitempty"];
    string WorkloadUUID                     = 3 [(gogoproto.jsontag) = "workload-uuid,omitempty"];
    string WorkloadName                     = 4 [(gogoproto.jsontag) = "workload-name,omitempty"];
    // Name of the network to which the current endpoint belongs to. Required
    string NetworkName                      = 5 [(gogoproto.jsontag) = "network-name,omitempty"];
    map<string,string> WorkloadAttributes   = 6 [(gogoproto.jsontag) = "workload-attributes,omitempty"];
    repeated string SecurityGroups          = 7 [(gogoproto.jsontag) = "security-groups,omitempty"];
    // Interface type of the endpoint. For LocalEPs this should be LIF.
    // For Remote EPs this should either be of type UPLINK or TUNNEL. Required
    string InterfaceType                    = 8 [(venice.check) = "StrEnum(EndpointSpec.Type)",
                                                 (gogoproto.jsontag) = "interface-type,omitempty"];
    // Interface name of the endpoint. Required
    string Interface                        = 9 [(gogoproto.jsontag) = "interface,omitempty"];
    // IP Address of the endpoint in CIDR IP/Prefix format. Required
    string IPv4Address                      = 10  [(gogoproto.jsontag) = "ipv4-address,omitempty"];
    // IP Gateway of the endpoint. Optional
    string IPv4Gateway                      = 11  [(gogoproto.jsontag) = "ipv4-gateway,omitempty"];
    // IPv6 Address of the endpoint. Optional
    string IPv6Address                      = 12  [(gogoproto.jsontag) = "ipv6-address,omitempty"];
    // IPv6 Gateway of the endpoint. Optional
    string IPv6Gateway                      = 13  [(gogoproto.jsontag) = "ipv6-gateway,omitempty"];
    // MAC Address of the endpoint. Required
    string MacAddress                       = 14  [(gogoproto.jsontag) = "mac-address,omitempty"];
    string HomingHostAddr                   = 15  [(gogoproto.jsontag) = "homing-host-address,omitempty"];
    string HomingHostName                   = 16  [(gogoproto.jsontag) = "homing-host-name,omitempty"];
    // Specifies the name of the node where the endpoint lives.
    // Optional for LocalEPs and mandatory for RemoteEPs.
    string NodeUUID                         = 17  [(gogoproto.jsontag) = "node-uuid,omitempty"];
    // Microsegment VLAN for the endpoint. Required only for Local EPs.
    uint32 UsegVlan                         = 18  [(gogoproto.jsontag) = "useg-vlan,omitempty"];
}

// endpoint status
message EndpointStatus {
    // Endpoint ID in datapath. Valid only for Local EPs
    uint64 EnicID         = 10 [(gogoproto.jsontag) = "enic-id,omitempty"];
}


// list of endpoints
message EndpointList {
    repeated Endpoint endpoints = 1;
}

// endpoint watch event
message EndpointEvent {
    api.EventType EventType = 1 [(gogoproto.jsontag) = "event-type,omitempty"];
    Endpoint       Endpoint = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "endpoint,omitempty"];
}
