// network object

syntax = "proto3";
package netproto;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

// ---------------------------- Endpoint API ----------------------------

// endpoint controller api
service EndpointApiV1 {
    // options for auto generating rest endpoints
    option(venice.naplesRestService) = {
        Object: "Endpoint",
        Method: ["list", "post", "put", "delete"],
        Pattern: "/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}",
        Prefix: "api/endpoints"
    };

    rpc ListEndpoints (api.ListWatchOptions) returns (EndpointList) {};
    rpc WatchEndpoints (api.ListWatchOptions) returns (stream EndpointEventList) {};
    rpc EndpointOperUpdate (stream EndpointEvent) returns (api.TypeMeta) {};

//    rpc CreateEndpoint (Endpoint) returns (Endpoint) {};
//    rpc UpdateEndpoint (Endpoint) returns (Endpoint) {};
//    rpc GetEndpoint (api.ObjectMeta) returns (Endpoint) {};
//    rpc ListEndpoints (api.ObjectMeta) returns (EndpointList) {};
//    rpc DeleteEndpoint (Endpoint) returns (Endpoint) {};
//    rpc WatchEndpoints (api.ObjectMeta) returns (stream EndpointEventList) {};
//    rpc EndpointOperUpdate (stream EndpointEvent) returns (api.TypeMeta) {};
}

// Endpoint Object
message Endpoint {
    api.TypeMeta   TypeMeta   = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta ObjectMeta = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    EndpointSpec   Spec       = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
    EndpointStatus Status     = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}


// EndpointSpec captures all Endpoint Configuration.
// Endpoints could either be local or remote.
// Local endpoints are the endpoints on the same host that has the NAPLES. Remote endpoints are the endpoints not on the
// same host as NAPLES.
// LocalEPs are bound to a lif.
// RemoteEPs are bound to uplinks or a tunnel interface

message EndpointSpec {
    // VrfName specifies the name of the VRF that the current EP belongs to
    string VrfName                          = 1 [(gogoproto.jsontag) = "vrf-name,omitempty"];
    // Name of the network to which the current endpoint belongs to. Required
    string NetworkName                      = 2 [(gogoproto.jsontag) = "network-name,omitempty"];
    // IP Address of the endpoint in CIDR IP/Prefix format. Required
    repeated string IPv4Addresses           = 3  [(gogoproto.jsontag) = "ipv4-addresses,omitempty"];
    // IPv6 Address of the endpoint. Optional
    repeated string IPv6Addresses           = 4  [(gogoproto.jsontag) = "ipv6-address,omitempty"];
    // MAC Address of the endpoint. Required
    string MacAddress                       = 5  [(gogoproto.jsontag) = "mac-address,omitempty"];
    // Specifies the name of the node where the endpoint lives.
    // Optional for LocalEPs and mandatory for RemoteEPs.
    string NodeUUID                         = 6  [(gogoproto.jsontag) = "node-uuid,omitempty"];

    // IP Address of the node where EP is local
    string HomingHostAddr                   = 7  [(gogoproto.jsontag) = "homing-host-address,omitempty"];
    // Microsegment VLAN for the endpoint. Required only for Local EPs.
    uint32 UsegVlan                         = 8  [(gogoproto.jsontag) = "useg-vlan,omitempty"];

}

// endpoint status
message EndpointStatus {
    // Endpoint ID in datapath. Valid only for Local EPs
    uint64 EnicID                     = 1 [(gogoproto.jsontag) = "enic-id,omitempty"];
    // NodeUUID is the nodeuuid where the endpoint currntly exists.
    string NodeUUID                   = 2  [(gogoproto.jsontag) = "node-uuid,omitempty"];
    // Spec of Migration of the endpoint
    EndpointMigrationStatus Migration = 3 [(gogoproto.nullable) = true,
                                           (gogoproto.jsontag) = "migration,omitempty"];
}


// list of endpoints
message EndpointList {
    repeated Endpoint endpoints = 1;
}

// endpoint watch event
message EndpointEvent {
    api.EventType   EventType   = 1 [(gogoproto.jsontag) = "event-type,omitempty"];
    Endpoint        Endpoint    = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "endpoint,omitempty"];
}


// endpoint watch events batched
message EndpointEventList {
    repeated EndpointEvent EndpointEvents  = 1;
}

message EndpointMigrationStatus {
    // State
    enum MigrationState {
      // ui-hint: None
      NONE    = 0; // No Migration is in progress
      // ui-hint: Start
      START = 1; // Start migration
      // ui-hint: Abort
      FAILED = 2; // Abort Migration
    }

    // Status of migration
    string Status                 = 1 [(venice.check) = "StrEnum(EndpointMigrationStatus.MigrationState)",
                                        (gogoproto.jsontag) = "status, omitempty"];
}
