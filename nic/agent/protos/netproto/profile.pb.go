// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: profile.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ProfileSpec_Fwd_Mode int32

const (
	ProfileSpec_TRANSPARENT ProfileSpec_Fwd_Mode = 0
	ProfileSpec_USEG        ProfileSpec_Fwd_Mode = 1
)

var ProfileSpec_Fwd_Mode_name = map[int32]string{
	0: "TRANSPARENT",
	1: "USEG",
}
var ProfileSpec_Fwd_Mode_value = map[string]int32{
	"TRANSPARENT": 0,
	"USEG":        1,
}

func (x ProfileSpec_Fwd_Mode) String() string {
	return proto.EnumName(ProfileSpec_Fwd_Mode_name, int32(x))
}
func (ProfileSpec_Fwd_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorProfile, []int{1, 0}
}

type ProfileSpec_Policy_Mode int32

const (
	ProfileSpec_BASENET   ProfileSpec_Policy_Mode = 0
	ProfileSpec_FLOWAWARE ProfileSpec_Policy_Mode = 1
	ProfileSpec_ENFORCED  ProfileSpec_Policy_Mode = 2
)

var ProfileSpec_Policy_Mode_name = map[int32]string{
	0: "BASENET",
	1: "FLOWAWARE",
	2: "ENFORCED",
}
var ProfileSpec_Policy_Mode_value = map[string]int32{
	"BASENET":   0,
	"FLOWAWARE": 1,
	"ENFORCED":  2,
}

func (x ProfileSpec_Policy_Mode) String() string {
	return proto.EnumName(ProfileSpec_Policy_Mode_name, int32(x))
}
func (ProfileSpec_Policy_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorProfile, []int{1, 1}
}

type Profile struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           ProfileSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         ProfileStatus `protobuf:"bytes,4,opt,name=Status" json:"status, omitempty"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{0} }

func (m *Profile) GetSpec() ProfileSpec {
	if m != nil {
		return m.Spec
	}
	return ProfileSpec{}
}

func (m *Profile) GetStatus() ProfileStatus {
	if m != nil {
		return m.Status
	}
	return ProfileStatus{}
}

// ProfileSpec captureal all the profile configurations per DSC
type ProfileSpec struct {
	FwdMode    string `protobuf:"bytes,1,opt,name=FwdMode,proto3" json:"fwd-mode,omitempty"`
	PolicyMode string `protobuf:"bytes,2,opt,name=PolicyMode,proto3" json:"policy-mode, omitempty"`
}

func (m *ProfileSpec) Reset()                    { *m = ProfileSpec{} }
func (m *ProfileSpec) String() string            { return proto.CompactTextString(m) }
func (*ProfileSpec) ProtoMessage()               {}
func (*ProfileSpec) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{1} }

func (m *ProfileSpec) GetFwdMode() string {
	if m != nil {
		return m.FwdMode
	}
	return ""
}

func (m *ProfileSpec) GetPolicyMode() string {
	if m != nil {
		return m.PolicyMode
	}
	return ""
}

// Profile Status
type ProfileStatus struct {
	ProfileID uint64 `protobuf:"varint,1,opt,name=ProfileID,proto3" json:"id,omitempty"`
}

func (m *ProfileStatus) Reset()                    { *m = ProfileStatus{} }
func (m *ProfileStatus) String() string            { return proto.CompactTextString(m) }
func (*ProfileStatus) ProtoMessage()               {}
func (*ProfileStatus) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{2} }

func (m *ProfileStatus) GetProfileID() uint64 {
	if m != nil {
		return m.ProfileID
	}
	return 0
}

type ProfileList struct {
	Profiles []*Profile `protobuf:"bytes,1,rep,name=Profiles" json:"Profiles,omitempty"`
}

func (m *ProfileList) Reset()                    { *m = ProfileList{} }
func (m *ProfileList) String() string            { return proto.CompactTextString(m) }
func (*ProfileList) ProtoMessage()               {}
func (*ProfileList) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{3} }

func (m *ProfileList) GetProfiles() []*Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

// Profile watch event
type ProfileEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	Profile   Profile       `protobuf:"bytes,2,opt,name=Profile" json:"profile,omitempty"`
}

func (m *ProfileEvent) Reset()                    { *m = ProfileEvent{} }
func (m *ProfileEvent) String() string            { return proto.CompactTextString(m) }
func (*ProfileEvent) ProtoMessage()               {}
func (*ProfileEvent) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{4} }

func (m *ProfileEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *ProfileEvent) GetProfile() Profile {
	if m != nil {
		return m.Profile
	}
	return Profile{}
}

// Profile watch events batched
type ProfileEventList struct {
	ProfileEvents []*ProfileEvent `protobuf:"bytes,1,rep,name=ProfileEvents" json:"ProfileEvents,omitempty"`
}

func (m *ProfileEventList) Reset()                    { *m = ProfileEventList{} }
func (m *ProfileEventList) String() string            { return proto.CompactTextString(m) }
func (*ProfileEventList) ProtoMessage()               {}
func (*ProfileEventList) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{5} }

func (m *ProfileEventList) GetProfileEvents() []*ProfileEvent {
	if m != nil {
		return m.ProfileEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*Profile)(nil), "netproto.Profile")
	proto.RegisterType((*ProfileSpec)(nil), "netproto.ProfileSpec")
	proto.RegisterType((*ProfileStatus)(nil), "netproto.ProfileStatus")
	proto.RegisterType((*ProfileList)(nil), "netproto.ProfileList")
	proto.RegisterType((*ProfileEvent)(nil), "netproto.ProfileEvent")
	proto.RegisterType((*ProfileEventList)(nil), "netproto.ProfileEventList")
	proto.RegisterEnum("netproto.ProfileSpec_Fwd_Mode", ProfileSpec_Fwd_Mode_name, ProfileSpec_Fwd_Mode_value)
	proto.RegisterEnum("netproto.ProfileSpec_Policy_Mode", ProfileSpec_Policy_Mode_name, ProfileSpec_Policy_Mode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProfileApiV1 service

type ProfileApiV1Client interface {
	ListProfiles(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ProfileList, error)
	WatchProfiles(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ProfileApiV1_WatchProfilesClient, error)
	ProfileOperUpdate(ctx context.Context, opts ...grpc.CallOption) (ProfileApiV1_ProfileOperUpdateClient, error)
}

type profileApiV1Client struct {
	cc *grpc.ClientConn
}

func NewProfileApiV1Client(cc *grpc.ClientConn) ProfileApiV1Client {
	return &profileApiV1Client{cc}
}

func (c *profileApiV1Client) ListProfiles(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ProfileList, error) {
	out := new(ProfileList)
	err := grpc.Invoke(ctx, "/netproto.ProfileApiV1/ListProfiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileApiV1Client) WatchProfiles(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ProfileApiV1_WatchProfilesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ProfileApiV1_serviceDesc.Streams[0], c.cc, "/netproto.ProfileApiV1/WatchProfiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileApiV1WatchProfilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileApiV1_WatchProfilesClient interface {
	Recv() (*ProfileEventList, error)
	grpc.ClientStream
}

type profileApiV1WatchProfilesClient struct {
	grpc.ClientStream
}

func (x *profileApiV1WatchProfilesClient) Recv() (*ProfileEventList, error) {
	m := new(ProfileEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileApiV1Client) ProfileOperUpdate(ctx context.Context, opts ...grpc.CallOption) (ProfileApiV1_ProfileOperUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ProfileApiV1_serviceDesc.Streams[1], c.cc, "/netproto.ProfileApiV1/ProfileOperUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileApiV1ProfileOperUpdateClient{stream}
	return x, nil
}

type ProfileApiV1_ProfileOperUpdateClient interface {
	Send(*ProfileEvent) error
	CloseAndRecv() (*api.TypeMeta, error)
	grpc.ClientStream
}

type profileApiV1ProfileOperUpdateClient struct {
	grpc.ClientStream
}

func (x *profileApiV1ProfileOperUpdateClient) Send(m *ProfileEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *profileApiV1ProfileOperUpdateClient) CloseAndRecv() (*api.TypeMeta, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.TypeMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ProfileApiV1 service

type ProfileApiV1Server interface {
	ListProfiles(context.Context, *api.ListWatchOptions) (*ProfileList, error)
	WatchProfiles(*api.ListWatchOptions, ProfileApiV1_WatchProfilesServer) error
	ProfileOperUpdate(ProfileApiV1_ProfileOperUpdateServer) error
}

func RegisterProfileApiV1Server(s *grpc.Server, srv ProfileApiV1Server) {
	s.RegisterService(&_ProfileApiV1_serviceDesc, srv)
}

func _ProfileApiV1_ListProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileApiV1Server).ListProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.ProfileApiV1/ListProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileApiV1Server).ListProfiles(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileApiV1_WatchProfiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileApiV1Server).WatchProfiles(m, &profileApiV1WatchProfilesServer{stream})
}

type ProfileApiV1_WatchProfilesServer interface {
	Send(*ProfileEventList) error
	grpc.ServerStream
}

type profileApiV1WatchProfilesServer struct {
	grpc.ServerStream
}

func (x *profileApiV1WatchProfilesServer) Send(m *ProfileEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileApiV1_ProfileOperUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProfileApiV1Server).ProfileOperUpdate(&profileApiV1ProfileOperUpdateServer{stream})
}

type ProfileApiV1_ProfileOperUpdateServer interface {
	SendAndClose(*api.TypeMeta) error
	Recv() (*ProfileEvent, error)
	grpc.ServerStream
}

type profileApiV1ProfileOperUpdateServer struct {
	grpc.ServerStream
}

func (x *profileApiV1ProfileOperUpdateServer) SendAndClose(m *api.TypeMeta) error {
	return x.ServerStream.SendMsg(m)
}

func (x *profileApiV1ProfileOperUpdateServer) Recv() (*ProfileEvent, error) {
	m := new(ProfileEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ProfileApiV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.ProfileApiV1",
	HandlerType: (*ProfileApiV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProfiles",
			Handler:    _ProfileApiV1_ListProfiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchProfiles",
			Handler:       _ProfileApiV1_WatchProfiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ProfileOperUpdate",
			Handler:       _ProfileApiV1_ProfileOperUpdate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "profile.proto",
}

func (m *Profile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Profile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintProfile(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintProfile(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintProfile(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintProfile(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *ProfileSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FwdMode) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProfile(dAtA, i, uint64(len(m.FwdMode)))
		i += copy(dAtA[i:], m.FwdMode)
	}
	if len(m.PolicyMode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProfile(dAtA, i, uint64(len(m.PolicyMode)))
		i += copy(dAtA[i:], m.PolicyMode)
	}
	return i, nil
}

func (m *ProfileStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProfileID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProfile(dAtA, i, uint64(m.ProfileID))
	}
	return i, nil
}

func (m *ProfileList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Profiles) > 0 {
		for _, msg := range m.Profiles {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProfile(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProfileEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProfile(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintProfile(dAtA, i, uint64(m.Profile.Size()))
	n5, err := m.Profile.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *ProfileEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProfileEvents) > 0 {
		for _, msg := range m.ProfileEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProfile(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintProfile(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Profile) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovProfile(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovProfile(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovProfile(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovProfile(uint64(l))
	return n
}

func (m *ProfileSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.FwdMode)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	l = len(m.PolicyMode)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func (m *ProfileStatus) Size() (n int) {
	var l int
	_ = l
	if m.ProfileID != 0 {
		n += 1 + sovProfile(uint64(m.ProfileID))
	}
	return n
}

func (m *ProfileList) Size() (n int) {
	var l int
	_ = l
	if len(m.Profiles) > 0 {
		for _, e := range m.Profiles {
			l = e.Size()
			n += 1 + l + sovProfile(uint64(l))
		}
	}
	return n
}

func (m *ProfileEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovProfile(uint64(m.EventType))
	}
	l = m.Profile.Size()
	n += 1 + l + sovProfile(uint64(l))
	return n
}

func (m *ProfileEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.ProfileEvents) > 0 {
		for _, e := range m.ProfileEvents {
			l = e.Size()
			n += 1 + l + sovProfile(uint64(l))
		}
	}
	return n
}

func sovProfile(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProfile(x uint64) (n int) {
	return sovProfile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Profile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Profile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Profile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwdMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FwdMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileID", wireType)
			}
			m.ProfileID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfileID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profiles = append(m.Profiles, &Profile{})
			if err := m.Profiles[len(m.Profiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileEvents = append(m.ProfileEvents, &ProfileEvent{})
			if err := m.ProfileEvents[len(m.ProfileEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProfile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProfile
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProfile
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProfile(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProfile = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProfile   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("profile.proto", fileDescriptorProfile) }

var fileDescriptorProfile = []byte{
	// 780 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x41, 0x6f, 0xda, 0x48,
	0x14, 0xc7, 0x31, 0x41, 0x01, 0x06, 0x48, 0xc8, 0xec, 0x26, 0x0b, 0xd6, 0x6e, 0x40, 0x96, 0x22,
	0xb1, 0x52, 0xb0, 0x77, 0xd9, 0xc3, 0x1e, 0x9a, 0xa6, 0xc2, 0x8d, 0xa9, 0xda, 0x26, 0x80, 0x0c,
	0x69, 0x8e, 0x95, 0xb1, 0x27, 0xc4, 0x95, 0xed, 0x19, 0xe1, 0x21, 0x08, 0x55, 0x39, 0x55, 0xca,
	0xc7, 0xe8, 0xad, 0x52, 0x95, 0x63, 0x3f, 0x45, 0xa4, 0x5e, 0xf2, 0x09, 0x50, 0x95, 0x63, 0x3e,
	0x45, 0x35, 0x83, 0x81, 0x41, 0x24, 0xea, 0x6d, 0xde, 0x9b, 0xff, 0xfb, 0xcd, 0x7b, 0x6f, 0x66,
	0x1e, 0xc8, 0x91, 0x01, 0x3e, 0x77, 0x3d, 0xa4, 0x92, 0x01, 0xa6, 0x18, 0xa6, 0x02, 0x44, 0xf9,
	0x4a, 0xfe, 0xb3, 0x8f, 0x71, 0xdf, 0x43, 0x9a, 0x45, 0x5c, 0xcd, 0x0a, 0x02, 0x4c, 0x2d, 0xea,
	0xe2, 0x20, 0x9c, 0xea, 0x64, 0xa3, 0xef, 0xd2, 0x8b, 0x61, 0x4f, 0xb5, 0xb1, 0xaf, 0x11, 0x14,
	0x84, 0x56, 0xe0, 0x60, 0x2d, 0x1c, 0x69, 0x97, 0x28, 0x70, 0x6d, 0xa4, 0x0d, 0xa9, 0xeb, 0x85,
	0x2c, 0xb4, 0x8f, 0x02, 0x31, 0x5a, 0x73, 0x03, 0xdb, 0x1b, 0x3a, 0x68, 0x86, 0xa9, 0x0a, 0x98,
	0x3e, 0xee, 0x63, 0x8d, 0xbb, 0x7b, 0xc3, 0x73, 0x6e, 0x71, 0x83, 0xaf, 0x22, 0xf9, 0xde, 0x13,
	0xa7, 0xb2, 0x1c, 0x7d, 0x44, 0xad, 0x48, 0x96, 0xf1, 0x2d, 0x6a, 0x5f, 0x4c, 0x0d, 0xe5, 0x4b,
	0x1c, 0x24, 0xdb, 0xd3, 0x1a, 0xe1, 0x21, 0x48, 0x75, 0xc7, 0x04, 0x9d, 0x20, 0x6a, 0x15, 0xa4,
	0xb2, 0x54, 0xc9, 0xd4, 0x72, 0xaa, 0x45, 0x5c, 0x75, 0xe6, 0xd4, 0x7f, 0xbb, 0x9d, 0x94, 0x62,
	0x77, 0x93, 0x92, 0xf4, 0x30, 0x29, 0x25, 0xf7, 0xdd, 0xc0, 0x73, 0x03, 0x64, 0xce, 0x63, 0xe0,
	0x5b, 0x00, 0x5a, 0xbd, 0x0f, 0xc8, 0xa6, 0x9c, 0x10, 0xe7, 0x84, 0x4d, 0x4e, 0x58, 0xb8, 0x75,
	0x59, 0x60, 0x6c, 0xb0, 0xac, 0xf6, 0xb1, 0xef, 0x52, 0xe4, 0x13, 0x3a, 0x36, 0x85, 0x70, 0x58,
	0x07, 0x89, 0x0e, 0x41, 0x76, 0x61, 0x8d, 0x63, 0xb6, 0xd5, 0x59, 0xe7, 0xd5, 0x28, 0x5b, 0xb6,
	0xa9, 0xef, 0x30, 0x18, 0x03, 0x85, 0x04, 0xd9, 0x02, 0x88, 0x87, 0xc2, 0x37, 0x60, 0xbd, 0x43,
	0x2d, 0x3a, 0x0c, 0x0b, 0x09, 0x0e, 0xf9, 0x63, 0x15, 0xc2, 0xb7, 0xf5, 0x62, 0x84, 0xd9, 0x0a,
	0xb9, 0xbd, 0x5f, 0x5e, 0x90, 0x22, 0x82, 0xf2, 0x35, 0x0e, 0x32, 0xc2, 0xc9, 0xf0, 0x14, 0x24,
	0x1b, 0x23, 0xe7, 0x04, 0x3b, 0x88, 0xb7, 0x2a, 0xad, 0x3f, 0xbb, 0xb9, 0x2e, 0xfe, 0xd5, 0xa1,
	0x03, 0x23, 0x18, 0xfa, 0x15, 0x41, 0xa9, 0x36, 0x46, 0xce, 0x7b, 0xa6, 0xfb, 0xfb, 0x76, 0x5a,
	0x34, 0x3c, 0x1f, 0x39, 0x55, 0x1f, 0x3b, 0x48, 0xc8, 0x77, 0xc6, 0x82, 0x3d, 0x00, 0xda, 0xd8,
	0x73, 0xed, 0x31, 0x27, 0xc7, 0x39, 0x59, 0xbf, 0xb9, 0x2e, 0x96, 0x1f, 0x23, 0x4f, 0x95, 0x4b,
	0xf0, 0x1d, 0xc2, 0x7d, 0x53, 0xbe, 0x50, 0x86, 0x40, 0x55, 0xf6, 0x40, 0x6a, 0x96, 0x13, 0xdc,
	0x04, 0x99, 0xae, 0x59, 0x6f, 0x76, 0xda, 0x75, 0xd3, 0x68, 0x76, 0xf3, 0x31, 0x98, 0x02, 0x89,
	0xd3, 0x8e, 0xf1, 0x2a, 0x2f, 0x29, 0xff, 0x83, 0x8c, 0x70, 0x00, 0xcc, 0x80, 0xa4, 0x5e, 0xef,
	0x18, 0x4d, 0x83, 0xa9, 0x72, 0x20, 0xdd, 0x38, 0x6e, 0x9d, 0xd5, 0xcf, 0xea, 0xa6, 0x91, 0x97,
	0x60, 0x16, 0xa4, 0x8c, 0x66, 0xa3, 0x65, 0xbe, 0x34, 0x8e, 0xf2, 0x71, 0xe5, 0x05, 0xc8, 0x2d,
	0xb5, 0x17, 0xaa, 0x20, 0x1d, 0x39, 0x5e, 0x1f, 0xf1, 0x6e, 0x25, 0xf4, 0xfc, 0xc3, 0xa4, 0x94,
	0x75, 0x1d, 0xa1, 0x05, 0x0b, 0x89, 0x72, 0x30, 0x6f, 0xf5, 0xb1, 0x1b, 0x52, 0x58, 0x05, 0xa9,
	0xc8, 0x0c, 0x0b, 0x52, 0x79, 0xad, 0x92, 0xa9, 0x6d, 0xad, 0x5c, 0xa4, 0x39, 0x97, 0x28, 0x9f,
	0x25, 0x90, 0x8d, 0x0c, 0xe3, 0x12, 0x05, 0x14, 0x36, 0x40, 0x9a, 0x2f, 0xd8, 0x3b, 0xe5, 0xc7,
	0x6f, 0xd4, 0x36, 0xf8, 0xab, 0x9c, 0x7b, 0xf5, 0xc2, 0xc3, 0xa4, 0xf4, 0x3b, 0x62, 0x66, 0x95,
	0x8e, 0x89, 0x78, 0x33, 0x8b, 0x50, 0xd8, 0x98, 0xff, 0x94, 0xe8, 0x6d, 0xaf, 0xa6, 0xb1, 0x78,
	0x49, 0xd1, 0xdc, 0x10, 0xef, 0x38, 0xd2, 0x28, 0x6d, 0x90, 0x17, 0xf3, 0xe3, 0x35, 0x1e, 0xcc,
	0x7b, 0xc6, 0x7d, 0xb3, 0x42, 0x77, 0x56, 0x4e, 0xe0, 0xdb, 0xe6, 0xb2, 0xb8, 0xf6, 0x3d, 0x3e,
	0x2f, 0xb9, 0x4e, 0xdc, 0x77, 0xff, 0xc2, 0x43, 0x90, 0x65, 0xd8, 0x59, 0x4f, 0xe0, 0x36, 0xaf,
	0x97, 0xb9, 0xce, 0xd8, 0xdf, 0x6f, 0x11, 0x3e, 0x6e, 0xe4, 0xd5, 0x5f, 0xc5, 0x24, 0x4a, 0x0c,
	0x36, 0x40, 0x8e, 0x0b, 0x7f, 0x05, 0x90, 0x1f, 0xcf, 0x6f, 0x4a, 0xf9, 0x47, 0x82, 0x87, 0x60,
	0x2b, 0xf2, 0xb7, 0x08, 0x1a, 0x9c, 0x12, 0xc7, 0xa2, 0x08, 0x3e, 0x51, 0x94, 0xbc, 0x3c, 0x6c,
	0x94, 0x58, 0x45, 0x92, 0xc3, 0x6f, 0x9f, 0x8a, 0x78, 0x31, 0xa0, 0x12, 0x1e, 0xeb, 0x55, 0x82,
	0xe0, 0x90, 0xc2, 0x75, 0x07, 0x79, 0x88, 0x22, 0xb8, 0x46, 0x86, 0x54, 0x7e, 0xae, 0x7d, 0x5c,
	0x8c, 0x0e, 0xb5, 0x8b, 0x02, 0x2b, 0xa0, 0x57, 0x4b, 0xbe, 0xa6, 0xe5, 0xa3, 0x90, 0x58, 0x36,
	0x5a, 0x75, 0x5f, 0x29, 0x59, 0x36, 0x21, 0xa3, 0x1b, 0x0b, 0xf5, 0xec, 0xed, 0xfd, 0xae, 0x74,
	0x77, 0xbf, 0x2b, 0xfd, 0xb8, 0xdf, 0x95, 0xda, 0x52, 0x6f, 0x9d, 0xe7, 0xfa, 0xdf, 0xcf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xc8, 0x6d, 0x48, 0x99, 0x0c, 0x06, 0x00, 0x00,
}
