// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: endpoint.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// State
type EndpointMigrationStatus_MigrationState int32

const (
	// ui-hint: None
	EndpointMigrationStatus_NONE EndpointMigrationStatus_MigrationState = 0
	// ui-hint: Start
	EndpointMigrationStatus_START EndpointMigrationStatus_MigrationState = 1
	// ui-hint: Abort
	EndpointMigrationStatus_FAILED EndpointMigrationStatus_MigrationState = 2
)

var EndpointMigrationStatus_MigrationState_name = map[int32]string{
	0: "NONE",
	1: "START",
	2: "FAILED",
}
var EndpointMigrationStatus_MigrationState_value = map[string]int32{
	"NONE":   0,
	"START":  1,
	"FAILED": 2,
}

func (x EndpointMigrationStatus_MigrationState) String() string {
	return proto.EnumName(EndpointMigrationStatus_MigrationState_name, int32(x))
}
func (EndpointMigrationStatus_MigrationState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorEndpoint, []int{6, 0}
}

// Endpoint Object
type Endpoint struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           EndpointSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         EndpointStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{0} }

func (m *Endpoint) GetSpec() EndpointSpec {
	if m != nil {
		return m.Spec
	}
	return EndpointSpec{}
}

func (m *Endpoint) GetStatus() EndpointStatus {
	if m != nil {
		return m.Status
	}
	return EndpointStatus{}
}

type EndpointSpec struct {
	// VrfName specifies the name of the VRF that the current EP belongs to
	VrfName string `protobuf:"bytes,1,opt,name=VrfName,proto3" json:"vrf-name,omitempty"`
	// Name of the network to which the current endpoint belongs to. Required
	NetworkName string `protobuf:"bytes,2,opt,name=NetworkName,proto3" json:"network-name,omitempty"`
	// IP Address of the endpoint in CIDR IP/Prefix format. Required
	IPv4Addresses []string `protobuf:"bytes,3,rep,name=IPv4Addresses" json:"ipv4-addresses,omitempty"`
	// IPv6 Address of the endpoint. Optional
	IPv6Addresses []string `protobuf:"bytes,4,rep,name=IPv6Addresses" json:"ipv6-address,omitempty"`
	// MAC Address of the endpoint. Required
	MacAddress string `protobuf:"bytes,5,opt,name=MacAddress,proto3" json:"mac-address,omitempty"`
	// Specifies the name of the node where the endpoint lives.
	// Optional for LocalEPs and mandatory for RemoteEPs.
	NodeUUID string `protobuf:"bytes,6,opt,name=NodeUUID,proto3" json:"node-uuid,omitempty"`
	// IP Address of the node where EP is local
	HomingHostAddr string `protobuf:"bytes,7,opt,name=HomingHostAddr,proto3" json:"homing-host-address,omitempty"`
	// Microsegment VLAN for the endpoint. Required only for Local EPs.
	UsegVlan uint32 `protobuf:"varint,8,opt,name=UsegVlan,proto3" json:"useg-vlan,omitempty"`
}

func (m *EndpointSpec) Reset()                    { *m = EndpointSpec{} }
func (m *EndpointSpec) String() string            { return proto.CompactTextString(m) }
func (*EndpointSpec) ProtoMessage()               {}
func (*EndpointSpec) Descriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{1} }

func (m *EndpointSpec) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *EndpointSpec) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

func (m *EndpointSpec) GetIPv4Addresses() []string {
	if m != nil {
		return m.IPv4Addresses
	}
	return nil
}

func (m *EndpointSpec) GetIPv6Addresses() []string {
	if m != nil {
		return m.IPv6Addresses
	}
	return nil
}

func (m *EndpointSpec) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *EndpointSpec) GetNodeUUID() string {
	if m != nil {
		return m.NodeUUID
	}
	return ""
}

func (m *EndpointSpec) GetHomingHostAddr() string {
	if m != nil {
		return m.HomingHostAddr
	}
	return ""
}

func (m *EndpointSpec) GetUsegVlan() uint32 {
	if m != nil {
		return m.UsegVlan
	}
	return 0
}

// endpoint status
type EndpointStatus struct {
	// Endpoint ID in datapath. Valid only for Local EPs
	EnicID uint64 `protobuf:"varint,1,opt,name=EnicID,proto3" json:"enic-id,omitempty"`
	// NodeUUID is the nodeuuid where the endpoint currntly exists.
	NodeUUID string `protobuf:"bytes,2,opt,name=NodeUUID,proto3" json:"node-uuid,omitempty"`
	// Spec of Migration of the endpoint
	Migration *EndpointMigrationStatus `protobuf:"bytes,3,opt,name=Migration" json:"migration,omitempty"`
}

func (m *EndpointStatus) Reset()                    { *m = EndpointStatus{} }
func (m *EndpointStatus) String() string            { return proto.CompactTextString(m) }
func (*EndpointStatus) ProtoMessage()               {}
func (*EndpointStatus) Descriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{2} }

func (m *EndpointStatus) GetEnicID() uint64 {
	if m != nil {
		return m.EnicID
	}
	return 0
}

func (m *EndpointStatus) GetNodeUUID() string {
	if m != nil {
		return m.NodeUUID
	}
	return ""
}

func (m *EndpointStatus) GetMigration() *EndpointMigrationStatus {
	if m != nil {
		return m.Migration
	}
	return nil
}

// list of endpoints
type EndpointList struct {
	Endpoints []*Endpoint `protobuf:"bytes,1,rep,name=endpoints" json:"endpoints,omitempty"`
}

func (m *EndpointList) Reset()                    { *m = EndpointList{} }
func (m *EndpointList) String() string            { return proto.CompactTextString(m) }
func (*EndpointList) ProtoMessage()               {}
func (*EndpointList) Descriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{3} }

func (m *EndpointList) GetEndpoints() []*Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

// endpoint watch event
type EndpointEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	Endpoint  Endpoint      `protobuf:"bytes,2,opt,name=Endpoint" json:"endpoint,omitempty"`
}

func (m *EndpointEvent) Reset()                    { *m = EndpointEvent{} }
func (m *EndpointEvent) String() string            { return proto.CompactTextString(m) }
func (*EndpointEvent) ProtoMessage()               {}
func (*EndpointEvent) Descriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{4} }

func (m *EndpointEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *EndpointEvent) GetEndpoint() Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return Endpoint{}
}

// endpoint watch events batched
type EndpointEventList struct {
	EndpointEvents []*EndpointEvent `protobuf:"bytes,1,rep,name=EndpointEvents" json:"EndpointEvents,omitempty"`
}

func (m *EndpointEventList) Reset()                    { *m = EndpointEventList{} }
func (m *EndpointEventList) String() string            { return proto.CompactTextString(m) }
func (*EndpointEventList) ProtoMessage()               {}
func (*EndpointEventList) Descriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{5} }

func (m *EndpointEventList) GetEndpointEvents() []*EndpointEvent {
	if m != nil {
		return m.EndpointEvents
	}
	return nil
}

type EndpointMigrationStatus struct {
	// Status of migration
	Status string `protobuf:"bytes,1,opt,name=Status,proto3" json:"status, omitempty"`
}

func (m *EndpointMigrationStatus) Reset()                    { *m = EndpointMigrationStatus{} }
func (m *EndpointMigrationStatus) String() string            { return proto.CompactTextString(m) }
func (*EndpointMigrationStatus) ProtoMessage()               {}
func (*EndpointMigrationStatus) Descriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{6} }

func (m *EndpointMigrationStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*Endpoint)(nil), "netproto.Endpoint")
	proto.RegisterType((*EndpointSpec)(nil), "netproto.EndpointSpec")
	proto.RegisterType((*EndpointStatus)(nil), "netproto.EndpointStatus")
	proto.RegisterType((*EndpointList)(nil), "netproto.EndpointList")
	proto.RegisterType((*EndpointEvent)(nil), "netproto.EndpointEvent")
	proto.RegisterType((*EndpointEventList)(nil), "netproto.EndpointEventList")
	proto.RegisterType((*EndpointMigrationStatus)(nil), "netproto.EndpointMigrationStatus")
	proto.RegisterEnum("netproto.EndpointMigrationStatus_MigrationState", EndpointMigrationStatus_MigrationState_name, EndpointMigrationStatus_MigrationState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EndpointApiV1 service

type EndpointApiV1Client interface {
	ListEndpoints(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*EndpointList, error)
	WatchEndpoints(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (EndpointApiV1_WatchEndpointsClient, error)
	EndpointOperUpdate(ctx context.Context, opts ...grpc.CallOption) (EndpointApiV1_EndpointOperUpdateClient, error)
}

type endpointApiV1Client struct {
	cc *grpc.ClientConn
}

func NewEndpointApiV1Client(cc *grpc.ClientConn) EndpointApiV1Client {
	return &endpointApiV1Client{cc}
}

func (c *endpointApiV1Client) ListEndpoints(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*EndpointList, error) {
	out := new(EndpointList)
	err := grpc.Invoke(ctx, "/netproto.EndpointApiV1/ListEndpoints", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointApiV1Client) WatchEndpoints(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (EndpointApiV1_WatchEndpointsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EndpointApiV1_serviceDesc.Streams[0], c.cc, "/netproto.EndpointApiV1/WatchEndpoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &endpointApiV1WatchEndpointsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EndpointApiV1_WatchEndpointsClient interface {
	Recv() (*EndpointEventList, error)
	grpc.ClientStream
}

type endpointApiV1WatchEndpointsClient struct {
	grpc.ClientStream
}

func (x *endpointApiV1WatchEndpointsClient) Recv() (*EndpointEventList, error) {
	m := new(EndpointEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *endpointApiV1Client) EndpointOperUpdate(ctx context.Context, opts ...grpc.CallOption) (EndpointApiV1_EndpointOperUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EndpointApiV1_serviceDesc.Streams[1], c.cc, "/netproto.EndpointApiV1/EndpointOperUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &endpointApiV1EndpointOperUpdateClient{stream}
	return x, nil
}

type EndpointApiV1_EndpointOperUpdateClient interface {
	Send(*EndpointEvent) error
	CloseAndRecv() (*api.TypeMeta, error)
	grpc.ClientStream
}

type endpointApiV1EndpointOperUpdateClient struct {
	grpc.ClientStream
}

func (x *endpointApiV1EndpointOperUpdateClient) Send(m *EndpointEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *endpointApiV1EndpointOperUpdateClient) CloseAndRecv() (*api.TypeMeta, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.TypeMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EndpointApiV1 service

type EndpointApiV1Server interface {
	ListEndpoints(context.Context, *api.ListWatchOptions) (*EndpointList, error)
	WatchEndpoints(*api.ListWatchOptions, EndpointApiV1_WatchEndpointsServer) error
	EndpointOperUpdate(EndpointApiV1_EndpointOperUpdateServer) error
}

func RegisterEndpointApiV1Server(s *grpc.Server, srv EndpointApiV1Server) {
	s.RegisterService(&_EndpointApiV1_serviceDesc, srv)
}

func _EndpointApiV1_ListEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointApiV1Server).ListEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.EndpointApiV1/ListEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointApiV1Server).ListEndpoints(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointApiV1_WatchEndpoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EndpointApiV1Server).WatchEndpoints(m, &endpointApiV1WatchEndpointsServer{stream})
}

type EndpointApiV1_WatchEndpointsServer interface {
	Send(*EndpointEventList) error
	grpc.ServerStream
}

type endpointApiV1WatchEndpointsServer struct {
	grpc.ServerStream
}

func (x *endpointApiV1WatchEndpointsServer) Send(m *EndpointEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _EndpointApiV1_EndpointOperUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EndpointApiV1Server).EndpointOperUpdate(&endpointApiV1EndpointOperUpdateServer{stream})
}

type EndpointApiV1_EndpointOperUpdateServer interface {
	SendAndClose(*api.TypeMeta) error
	Recv() (*EndpointEvent, error)
	grpc.ServerStream
}

type endpointApiV1EndpointOperUpdateServer struct {
	grpc.ServerStream
}

func (x *endpointApiV1EndpointOperUpdateServer) SendAndClose(m *api.TypeMeta) error {
	return x.ServerStream.SendMsg(m)
}

func (x *endpointApiV1EndpointOperUpdateServer) Recv() (*EndpointEvent, error) {
	m := new(EndpointEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EndpointApiV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.EndpointApiV1",
	HandlerType: (*EndpointApiV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEndpoints",
			Handler:    _EndpointApiV1_ListEndpoints_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchEndpoints",
			Handler:       _EndpointApiV1_WatchEndpoints_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EndpointOperUpdate",
			Handler:       _EndpointApiV1_EndpointOperUpdate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "endpoint.proto",
}

func (m *Endpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Endpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndpoint(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndpoint(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEndpoint(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintEndpoint(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *EndpointSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VrfName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.VrfName)))
		i += copy(dAtA[i:], m.VrfName)
	}
	if len(m.NetworkName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.NetworkName)))
		i += copy(dAtA[i:], m.NetworkName)
	}
	if len(m.IPv4Addresses) > 0 {
		for _, s := range m.IPv4Addresses {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.IPv6Addresses) > 0 {
		for _, s := range m.IPv6Addresses {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.MacAddress) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.MacAddress)))
		i += copy(dAtA[i:], m.MacAddress)
	}
	if len(m.NodeUUID) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.NodeUUID)))
		i += copy(dAtA[i:], m.NodeUUID)
	}
	if len(m.HomingHostAddr) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.HomingHostAddr)))
		i += copy(dAtA[i:], m.HomingHostAddr)
	}
	if m.UsegVlan != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(m.UsegVlan))
	}
	return i, nil
}

func (m *EndpointStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EnicID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(m.EnicID))
	}
	if len(m.NodeUUID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.NodeUUID)))
		i += copy(dAtA[i:], m.NodeUUID)
	}
	if m.Migration != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(m.Migration.Size()))
		n5, err := m.Migration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *EndpointList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, msg := range m.Endpoints {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEndpoint(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EndpointEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndpoint(dAtA, i, uint64(m.Endpoint.Size()))
	n6, err := m.Endpoint.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *EndpointEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EndpointEvents) > 0 {
		for _, msg := range m.EndpointEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEndpoint(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EndpointMigrationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointMigrationStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	return i, nil
}

func encodeVarintEndpoint(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Endpoint) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovEndpoint(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovEndpoint(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovEndpoint(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovEndpoint(uint64(l))
	return n
}

func (m *EndpointSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.VrfName)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.NetworkName)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	if len(m.IPv4Addresses) > 0 {
		for _, s := range m.IPv4Addresses {
			l = len(s)
			n += 1 + l + sovEndpoint(uint64(l))
		}
	}
	if len(m.IPv6Addresses) > 0 {
		for _, s := range m.IPv6Addresses {
			l = len(s)
			n += 1 + l + sovEndpoint(uint64(l))
		}
	}
	l = len(m.MacAddress)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.NodeUUID)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.HomingHostAddr)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	if m.UsegVlan != 0 {
		n += 1 + sovEndpoint(uint64(m.UsegVlan))
	}
	return n
}

func (m *EndpointStatus) Size() (n int) {
	var l int
	_ = l
	if m.EnicID != 0 {
		n += 1 + sovEndpoint(uint64(m.EnicID))
	}
	l = len(m.NodeUUID)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	if m.Migration != nil {
		l = m.Migration.Size()
		n += 1 + l + sovEndpoint(uint64(l))
	}
	return n
}

func (m *EndpointList) Size() (n int) {
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, e := range m.Endpoints {
			l = e.Size()
			n += 1 + l + sovEndpoint(uint64(l))
		}
	}
	return n
}

func (m *EndpointEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovEndpoint(uint64(m.EventType))
	}
	l = m.Endpoint.Size()
	n += 1 + l + sovEndpoint(uint64(l))
	return n
}

func (m *EndpointEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.EndpointEvents) > 0 {
		for _, e := range m.EndpointEvents {
			l = e.Size()
			n += 1 + l + sovEndpoint(uint64(l))
		}
	}
	return n
}

func (m *EndpointMigrationStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	return n
}

func sovEndpoint(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEndpoint(x uint64) (n int) {
	return sovEndpoint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Endpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Endpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Endpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Addresses = append(m.IPv4Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6Addresses = append(m.IPv6Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomingHostAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomingHostAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsegVlan", wireType)
			}
			m.UsegVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsegVlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnicID", wireType)
			}
			m.EnicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnicID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Migration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Migration == nil {
				m.Migration = &EndpointMigrationStatus{}
			}
			if err := m.Migration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, &Endpoint{})
			if err := m.Endpoints[len(m.Endpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Endpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointEvents = append(m.EndpointEvents, &EndpointEvent{})
			if err := m.EndpointEvents[len(m.EndpointEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointMigrationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointMigrationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointMigrationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEndpoint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEndpoint
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEndpoint
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEndpoint(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEndpoint = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEndpoint   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("endpoint.proto", fileDescriptorEndpoint) }

var fileDescriptorEndpoint = []byte{
	// 963 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x4f, 0x6f, 0xdb, 0x36,
	0x14, 0x8f, 0x6c, 0xd7, 0xb1, 0x99, 0xc6, 0x4b, 0x99, 0x25, 0x51, 0xdc, 0x2e, 0x72, 0x05, 0x0c,
	0xf0, 0x80, 0xda, 0x4a, 0xd3, 0xa2, 0xc0, 0x80, 0xfd, 0x49, 0x84, 0xb8, 0x88, 0xbb, 0xc6, 0x29,
	0x1c, 0x27, 0xbb, 0xec, 0x30, 0x45, 0x62, 0x14, 0x6e, 0x16, 0x49, 0x98, 0x94, 0x8b, 0x6c, 0xe8,
	0x69, 0xc0, 0xbe, 0xc8, 0x0e, 0x03, 0x76, 0xd8, 0x61, 0x9f, 0x22, 0xc7, 0x62, 0xb7, 0x5d, 0x84,
	0x21, 0x47, 0x9f, 0xf7, 0x01, 0x06, 0xd2, 0x92, 0x25, 0xc7, 0x36, 0xb6, 0x1b, 0xf9, 0xde, 0xef,
	0xf7, 0x7b, 0xef, 0xf1, 0x91, 0x8f, 0xa0, 0x82, 0x88, 0xc7, 0x28, 0x26, 0xa2, 0xc9, 0x06, 0x54,
	0x50, 0x58, 0x22, 0x48, 0xa8, 0x55, 0xf5, 0x91, 0x4f, 0xa9, 0xdf, 0x47, 0x96, 0xc3, 0xb0, 0xe5,
	0x10, 0x42, 0x85, 0x23, 0x30, 0x25, 0x7c, 0x8c, 0xab, 0xb6, 0x7c, 0x2c, 0xae, 0xc2, 0x8b, 0xa6,
	0x4b, 0x03, 0x8b, 0x21, 0xc2, 0x1d, 0xe2, 0x51, 0x8b, 0xbf, 0xb5, 0x86, 0x88, 0x60, 0x17, 0x59,
	0xa1, 0xc0, 0x7d, 0x2e, 0xa9, 0x3e, 0x22, 0x59, 0xb6, 0x85, 0x89, 0xdb, 0x0f, 0x3d, 0x94, 0xc8,
	0x34, 0x32, 0x32, 0x3e, 0xf5, 0xa9, 0xa5, 0xcc, 0x17, 0xe1, 0xa5, 0xda, 0xa9, 0x8d, 0x5a, 0xc5,
	0xf0, 0x8f, 0x17, 0x44, 0x95, 0x39, 0x06, 0x48, 0x38, 0x63, 0x98, 0xf9, 0x6b, 0x0e, 0x94, 0x5a,
	0x71, 0x5d, 0xf0, 0x0b, 0x50, 0xea, 0x5d, 0x33, 0x74, 0x8c, 0x84, 0xa3, 0x6b, 0x35, 0xad, 0xbe,
	0xb2, 0xb7, 0xda, 0x74, 0x18, 0x6e, 0x26, 0x46, 0x7b, 0xfd, 0x26, 0x32, 0x96, 0xde, 0x47, 0x86,
	0x36, 0x8a, 0x8c, 0xe5, 0x27, 0x98, 0xf4, 0x31, 0x41, 0xdd, 0x09, 0x07, 0x7e, 0x05, 0xc0, 0xc9,
	0xc5, 0x77, 0xc8, 0x15, 0x4a, 0x21, 0xa7, 0x14, 0x3e, 0x50, 0x0a, 0xa9, 0xd9, 0xae, 0x66, 0x34,
	0x2a, 0x32, 0x93, 0x27, 0x34, 0xc0, 0x02, 0x05, 0x4c, 0x5c, 0x77, 0x33, 0x74, 0x68, 0x83, 0xc2,
	0x29, 0x43, 0xae, 0x9e, 0x57, 0x32, 0x9b, 0xcd, 0xe4, 0xb4, 0x9b, 0x49, 0xba, 0xd2, 0x6b, 0x6f,
	0x4a, 0x35, 0xa9, 0xc4, 0x19, 0x72, 0x33, 0x4a, 0x8a, 0x0b, 0x5f, 0x81, 0xe2, 0xa9, 0x70, 0x44,
	0xc8, 0xf5, 0x82, 0x52, 0xd1, 0xe7, 0xa8, 0x28, 0xbf, 0xad, 0xc7, 0x3a, 0x6b, 0x5c, 0xed, 0x33,
	0x4a, 0xb1, 0x82, 0xf9, 0x4f, 0x1e, 0xdc, 0xcf, 0x86, 0x86, 0xbb, 0x60, 0xf9, 0x7c, 0x70, 0xd9,
	0x71, 0x02, 0xa4, 0x0e, 0xab, 0x6c, 0x6f, 0x8e, 0x22, 0x03, 0x0e, 0x07, 0x97, 0x0d, 0xe2, 0x04,
	0x28, 0xa3, 0x90, 0xc0, 0xe0, 0x67, 0x60, 0xa5, 0x83, 0xc4, 0x5b, 0x3a, 0xf8, 0x5e, 0xb1, 0x72,
	0x8a, 0x55, 0x1d, 0x45, 0xc6, 0x26, 0x19, 0x9b, 0xef, 0x32, 0xb3, 0x70, 0x68, 0x83, 0xd5, 0xf6,
	0x9b, 0xe1, 0xf3, 0x03, 0xcf, 0x1b, 0x20, 0xce, 0x11, 0xd7, 0xf3, 0xb5, 0x7c, 0xbd, 0x6c, 0x3f,
	0x1a, 0x45, 0x86, 0x8e, 0xd9, 0xf0, 0x79, 0xc3, 0x49, 0x3c, 0x19, 0x85, 0x69, 0x0a, 0xdc, 0x57,
	0x1a, 0x2f, 0x52, 0x8d, 0x82, 0xd2, 0x50, 0x39, 0x60, 0x36, 0x7c, 0x91, 0x68, 0xdc, 0x51, 0x48,
	0x09, 0xf0, 0x53, 0x00, 0x8e, 0x1d, 0x37, 0xde, 0xeb, 0xf7, 0x54, 0x09, 0xdb, 0xa3, 0xc8, 0xd8,
	0x08, 0x1c, 0x77, 0x0e, 0x3b, 0x03, 0x86, 0xcf, 0x40, 0xa9, 0x43, 0x3d, 0x74, 0x76, 0xd6, 0x3e,
	0xd4, 0x8b, 0x8a, 0xb8, 0x35, 0x8a, 0x8c, 0x75, 0x42, 0x3d, 0xd4, 0x08, 0x43, 0xec, 0x65, 0x68,
	0x13, 0x20, 0x6c, 0x83, 0xca, 0x11, 0x0d, 0x30, 0xf1, 0x8f, 0x28, 0x17, 0x52, 0x49, 0x5f, 0x56,
	0xd4, 0xc7, 0xa3, 0xc8, 0xf8, 0xe8, 0x4a, 0x79, 0x1a, 0x57, 0x94, 0x8b, 0x39, 0xb1, 0xef, 0x10,
	0x65, 0xfc, 0x33, 0x8e, 0xfc, 0xf3, 0xbe, 0x43, 0xf4, 0x52, 0x4d, 0xab, 0xaf, 0x8e, 0xe3, 0x87,
	0x1c, 0xf9, 0x8d, 0x61, 0xdf, 0x21, 0xd9, 0xf8, 0x09, 0xd0, 0xfc, 0x53, 0x03, 0x95, 0xe9, 0xbb,
	0x02, 0x1b, 0xa0, 0xd8, 0x22, 0xd8, 0x6d, 0x1f, 0xaa, 0xbe, 0x17, 0xec, 0x8d, 0x51, 0x64, 0x3c,
	0x90, 0x8f, 0xb9, 0x31, 0x55, 0x43, 0x0c, 0x9a, 0x2a, 0x3b, 0xf7, 0x7f, 0xcb, 0xfe, 0x06, 0x94,
	0x8f, 0xb1, 0x3f, 0x50, 0xa3, 0x20, 0x7e, 0x02, 0x8f, 0x67, 0x2f, 0xef, 0x04, 0x12, 0xdf, 0xe2,
	0x87, 0x37, 0xe3, 0x77, 0xb5, 0x1e, 0x24, 0x8e, 0x8c, 0x78, 0x2a, 0x68, 0xee, 0xa7, 0x57, 0xf9,
	0x35, 0xe6, 0x02, 0xee, 0x82, 0x72, 0x32, 0xdc, 0xb8, 0xae, 0xd5, 0xf2, 0xf5, 0x95, 0x3d, 0x38,
	0x1b, 0xad, 0x9b, 0x82, 0xcc, 0x5f, 0x34, 0xb0, 0x9a, 0xd8, 0x5b, 0x43, 0x44, 0x04, 0x7c, 0x09,
	0xca, 0x6a, 0x21, 0xa7, 0x81, 0x3a, 0x98, 0xca, 0x5e, 0x45, 0xbd, 0xfd, 0x89, 0xd5, 0xd6, 0x47,
	0x91, 0xf1, 0x21, 0x92, 0xdb, 0x86, 0xb8, 0x66, 0xd9, 0x8b, 0x9e, 0x52, 0xe1, 0xab, 0x74, 0x20,
	0xc5, 0x23, 0x64, 0x4e, 0x2a, 0xe3, 0x29, 0x22, 0xdf, 0x5b, 0x92, 0x52, 0xf6, 0x14, 0x13, 0x94,
	0xd9, 0x03, 0x0f, 0xa6, 0x92, 0x54, 0xc5, 0x7e, 0x99, 0x36, 0x54, 0x19, 0x93, 0x8a, 0xb7, 0x66,
	0xc3, 0x28, 0x7f, 0xf7, 0x0e, 0xdc, 0xfc, 0x5d, 0x03, 0x5b, 0x0b, 0x3a, 0x00, 0xbf, 0x9d, 0x4c,
	0x9c, 0xf1, 0x4c, 0x38, 0xfa, 0xed, 0xe7, 0x6d, 0xeb, 0x54, 0x0c, 0x5a, 0x24, 0x0c, 0xea, 0x0b,
	0x48, 0xcd, 0xa9, 0x3d, 0xfa, 0x44, 0x5e, 0xa7, 0x78, 0x0c, 0xd5, 0x66, 0xe7, 0xd0, 0x53, 0x50,
	0x99, 0xc6, 0xc3, 0x12, 0x28, 0x74, 0x4e, 0x3a, 0xad, 0xb5, 0x25, 0x58, 0x06, 0xf7, 0x4e, 0x7b,
	0x07, 0xdd, 0xde, 0x9a, 0x06, 0x01, 0x28, 0xbe, 0x3c, 0x68, 0xbf, 0x6e, 0x1d, 0xae, 0xe5, 0xf6,
	0xfe, 0xca, 0xa5, 0xcd, 0x3a, 0x60, 0xf8, 0xfc, 0xa9, 0x9c, 0x03, 0xf2, 0x2c, 0x12, 0x23, 0x87,
	0x1b, 0xaa, 0x55, 0xd2, 0xf6, 0xb5, 0x23, 0xdc, 0xab, 0x13, 0xa6, 0xfe, 0xa0, 0xea, 0x9c, 0xb1,
	0x2b, 0x31, 0xe6, 0x12, 0x3c, 0x02, 0x15, 0x85, 0xfc, 0x4f, 0x89, 0x87, 0x0b, 0x8e, 0x75, 0xac,
	0xb3, 0xab, 0xc1, 0x7d, 0x00, 0x13, 0xc7, 0x09, 0x43, 0x83, 0x33, 0xe6, 0xc9, 0xa2, 0x16, 0x75,
	0xa3, 0x3a, 0xfd, 0x25, 0x99, 0x4b, 0x75, 0xad, 0xfa, 0xc3, 0x1f, 0x3f, 0x6d, 0x0f, 0x33, 0xff,
	0x58, 0xa1, 0x2f, 0xfb, 0x9c, 0xf7, 0x91, 0x80, 0x05, 0x46, 0xe5, 0x92, 0x85, 0x02, 0x16, 0x3d,
	0xd4, 0x47, 0x02, 0x55, 0x3f, 0xb7, 0x7e, 0x4c, 0xbf, 0x99, 0x66, 0x0f, 0x11, 0x87, 0x88, 0x77,
	0x53, 0x36, 0x39, 0x6e, 0x39, 0x73, 0x5c, 0x34, 0x6b, 0x7e, 0x67, 0xae, 0xca, 0x1f, 0x74, 0xf2,
	0x10, 0xec, 0xfb, 0x37, 0xb7, 0x3b, 0xda, 0xfb, 0xdb, 0x1d, 0xed, 0xef, 0xdb, 0x1d, 0xed, 0x8d,
	0x76, 0x51, 0x54, 0x39, 0x3f, 0xfb, 0x37, 0x00, 0x00, 0xff, 0xff, 0x24, 0x72, 0x8d, 0x47, 0x2e,
	0x08, 0x00, 0x00,
}
