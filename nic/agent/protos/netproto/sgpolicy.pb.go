// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgpolicy.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PolicyRule_PolicyAction int32

const (
	PolicyRule_PERMIT PolicyRule_PolicyAction = 0
	PolicyRule_DENY   PolicyRule_PolicyAction = 1
	PolicyRule_REJECT PolicyRule_PolicyAction = 2
	PolicyRule_LOG    PolicyRule_PolicyAction = 3
)

var PolicyRule_PolicyAction_name = map[int32]string{
	0: "PERMIT",
	1: "DENY",
	2: "REJECT",
	3: "LOG",
}
var PolicyRule_PolicyAction_value = map[string]int32{
	"PERMIT": 0,
	"DENY":   1,
	"REJECT": 2,
	"LOG":    3,
}

func (x PolicyRule_PolicyAction) String() string {
	return proto.EnumName(PolicyRule_PolicyAction_name, int32(x))
}
func (PolicyRule_PolicyAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSgpolicy, []int{2, 0}
}

// NetworkSecurityPolicy object
type NetworkSecurityPolicy struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           NetworkSecurityPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         NetworkSecurityPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *NetworkSecurityPolicy) Reset()                    { *m = NetworkSecurityPolicy{} }
func (m *NetworkSecurityPolicy) String() string            { return proto.CompactTextString(m) }
func (*NetworkSecurityPolicy) ProtoMessage()               {}
func (*NetworkSecurityPolicy) Descriptor() ([]byte, []int) { return fileDescriptorSgpolicy, []int{0} }

func (m *NetworkSecurityPolicy) GetSpec() NetworkSecurityPolicySpec {
	if m != nil {
		return m.Spec
	}
	return NetworkSecurityPolicySpec{}
}

func (m *NetworkSecurityPolicy) GetStatus() NetworkSecurityPolicyStatus {
	if m != nil {
		return m.Status
	}
	return NetworkSecurityPolicyStatus{}
}

// NetworkSecurityPolicySpec captures all the security policy configuration
type NetworkSecurityPolicySpec struct {
	// VrfName specifies the name of the VRF that the current SG Policy belongs to
	VrfName string `protobuf:"bytes,1,opt,name=VrfName,proto3" json:"vrf-name,omitempty"`
	// list of security groups on which the policy is applied.
	AttachGroup []string `protobuf:"bytes,2,rep,name=AttachGroup" json:"attach-group,omitempty"`
	// specifies if the set of rules need to be attached globally to all the vrfs within a tenant
	AttachTenant bool `protobuf:"varint,3,opt,name=AttachTenant,proto3" json:"attach-tenant,omitempty"`
	// list of rules
	Rules []PolicyRule `protobuf:"bytes,4,rep,name=Rules" json:"policy-rules,omitempty"`
}

func (m *NetworkSecurityPolicySpec) Reset()         { *m = NetworkSecurityPolicySpec{} }
func (m *NetworkSecurityPolicySpec) String() string { return proto.CompactTextString(m) }
func (*NetworkSecurityPolicySpec) ProtoMessage()    {}
func (*NetworkSecurityPolicySpec) Descriptor() ([]byte, []int) {
	return fileDescriptorSgpolicy, []int{1}
}

func (m *NetworkSecurityPolicySpec) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *NetworkSecurityPolicySpec) GetAttachGroup() []string {
	if m != nil {
		return m.AttachGroup
	}
	return nil
}

func (m *NetworkSecurityPolicySpec) GetAttachTenant() bool {
	if m != nil {
		return m.AttachTenant
	}
	return false
}

func (m *NetworkSecurityPolicySpec) GetRules() []PolicyRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type PolicyRule struct {
	// list of actions for the rule. Some combinations are invalid, eg: ["PERMIT", "DENY"]
	Action string `protobuf:"bytes,1,opt,name=Action,proto3" json:"action,omitemtpy"`
	// inbound rule match. IP Address, CIDR based IP mask, or hyphen separeted IP Range or App info based selector.
	// Emtpy src is interpreted as match all
	Src *MatchSelector `protobuf:"bytes,2,opt,name=Src" json:"source,omitempty"`
	// outbound rule match. IP Address, CIDR based IP mask, or hyphen separeted IP Range or App info based selector.
	// Emtpy dst is interpreted as match all
	Dst *MatchSelector `protobuf:"bytes,3,opt,name=Dst" json:"destination,omitempty"`
	// Allocated ID
	ID uint64 `protobuf:"varint,4,opt,name=ID,proto3" json:"rule-id,omitempty"`
	// Optional AppName to fetch additional ALG configurations. ICMP Code is inferred from its corresponding App definition.
	// A single rule can have the match parameters through the selectors or its corresponding App object
	AppName string `protobuf:"bytes,5,opt,name=AppName,proto3" json:"app-name,omitempty"`
}

func (m *PolicyRule) Reset()                    { *m = PolicyRule{} }
func (m *PolicyRule) String() string            { return proto.CompactTextString(m) }
func (*PolicyRule) ProtoMessage()               {}
func (*PolicyRule) Descriptor() ([]byte, []int) { return fileDescriptorSgpolicy, []int{2} }

func (m *PolicyRule) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *PolicyRule) GetSrc() *MatchSelector {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *PolicyRule) GetDst() *MatchSelector {
	if m != nil {
		return m.Dst
	}
	return nil
}

func (m *PolicyRule) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PolicyRule) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

// NetworkSecurityPolicyStatus captures the sg policy status
type NetworkSecurityPolicyStatus struct {
	NetworkSecurityPolicyID uint64 `protobuf:"varint,1,opt,name=NetworkSecurityPolicyID,proto3" json:"id,omitempty"`
}

func (m *NetworkSecurityPolicyStatus) Reset()         { *m = NetworkSecurityPolicyStatus{} }
func (m *NetworkSecurityPolicyStatus) String() string { return proto.CompactTextString(m) }
func (*NetworkSecurityPolicyStatus) ProtoMessage()    {}
func (*NetworkSecurityPolicyStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorSgpolicy, []int{3}
}

func (m *NetworkSecurityPolicyStatus) GetNetworkSecurityPolicyID() uint64 {
	if m != nil {
		return m.NetworkSecurityPolicyID
	}
	return 0
}

type NetworkSecurityPolicyList struct {
	NetworkSecurityPolicys []*NetworkSecurityPolicy `protobuf:"bytes,1,rep,name=NetworkSecurityPolicys" json:"NetworkSecurityPolicys,omitempty"`
}

func (m *NetworkSecurityPolicyList) Reset()         { *m = NetworkSecurityPolicyList{} }
func (m *NetworkSecurityPolicyList) String() string { return proto.CompactTextString(m) }
func (*NetworkSecurityPolicyList) ProtoMessage()    {}
func (*NetworkSecurityPolicyList) Descriptor() ([]byte, []int) {
	return fileDescriptorSgpolicy, []int{4}
}

func (m *NetworkSecurityPolicyList) GetNetworkSecurityPolicys() []*NetworkSecurityPolicy {
	if m != nil {
		return m.NetworkSecurityPolicys
	}
	return nil
}

// sg policy watch event
type NetworkSecurityPolicyEvent struct {
	EventType             api.EventType         `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	NetworkSecurityPolicy NetworkSecurityPolicy `protobuf:"bytes,2,opt,name=NetworkSecurityPolicy" json:"sg-policy,omitempty"`
}

func (m *NetworkSecurityPolicyEvent) Reset()         { *m = NetworkSecurityPolicyEvent{} }
func (m *NetworkSecurityPolicyEvent) String() string { return proto.CompactTextString(m) }
func (*NetworkSecurityPolicyEvent) ProtoMessage()    {}
func (*NetworkSecurityPolicyEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSgpolicy, []int{5}
}

func (m *NetworkSecurityPolicyEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *NetworkSecurityPolicyEvent) GetNetworkSecurityPolicy() NetworkSecurityPolicy {
	if m != nil {
		return m.NetworkSecurityPolicy
	}
	return NetworkSecurityPolicy{}
}

// sg policy watch events batched
type NetworkSecurityPolicyEventList struct {
	NetworkSecurityPolicyEvents []*NetworkSecurityPolicyEvent `protobuf:"bytes,1,rep,name=NetworkSecurityPolicyEvents" json:"NetworkSecurityPolicyEvents,omitempty"`
}

func (m *NetworkSecurityPolicyEventList) Reset()         { *m = NetworkSecurityPolicyEventList{} }
func (m *NetworkSecurityPolicyEventList) String() string { return proto.CompactTextString(m) }
func (*NetworkSecurityPolicyEventList) ProtoMessage()    {}
func (*NetworkSecurityPolicyEventList) Descriptor() ([]byte, []int) {
	return fileDescriptorSgpolicy, []int{6}
}

func (m *NetworkSecurityPolicyEventList) GetNetworkSecurityPolicyEvents() []*NetworkSecurityPolicyEvent {
	if m != nil {
		return m.NetworkSecurityPolicyEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkSecurityPolicy)(nil), "netproto.NetworkSecurityPolicy")
	proto.RegisterType((*NetworkSecurityPolicySpec)(nil), "netproto.NetworkSecurityPolicySpec")
	proto.RegisterType((*PolicyRule)(nil), "netproto.PolicyRule")
	proto.RegisterType((*NetworkSecurityPolicyStatus)(nil), "netproto.NetworkSecurityPolicyStatus")
	proto.RegisterType((*NetworkSecurityPolicyList)(nil), "netproto.NetworkSecurityPolicyList")
	proto.RegisterType((*NetworkSecurityPolicyEvent)(nil), "netproto.NetworkSecurityPolicyEvent")
	proto.RegisterType((*NetworkSecurityPolicyEventList)(nil), "netproto.NetworkSecurityPolicyEventList")
	proto.RegisterEnum("netproto.PolicyRule_PolicyAction", PolicyRule_PolicyAction_name, PolicyRule_PolicyAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkSecurityPolicyApiV1 service

type NetworkSecurityPolicyApiV1Client interface {
	ListNetworkSecurityPolicys(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NetworkSecurityPolicyList, error)
	WatchNetworkSecurityPolicys(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkSecurityPolicyApiV1_WatchNetworkSecurityPolicysClient, error)
	NetworkSecurityPolicyOperUpdate(ctx context.Context, opts ...grpc.CallOption) (NetworkSecurityPolicyApiV1_NetworkSecurityPolicyOperUpdateClient, error)
}

type networkSecurityPolicyApiV1Client struct {
	cc *grpc.ClientConn
}

func NewNetworkSecurityPolicyApiV1Client(cc *grpc.ClientConn) NetworkSecurityPolicyApiV1Client {
	return &networkSecurityPolicyApiV1Client{cc}
}

func (c *networkSecurityPolicyApiV1Client) ListNetworkSecurityPolicys(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NetworkSecurityPolicyList, error) {
	out := new(NetworkSecurityPolicyList)
	err := grpc.Invoke(ctx, "/netproto.NetworkSecurityPolicyApiV1/ListNetworkSecurityPolicys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkSecurityPolicyApiV1Client) WatchNetworkSecurityPolicys(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkSecurityPolicyApiV1_WatchNetworkSecurityPolicysClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkSecurityPolicyApiV1_serviceDesc.Streams[0], c.cc, "/netproto.NetworkSecurityPolicyApiV1/WatchNetworkSecurityPolicys", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkSecurityPolicyApiV1WatchNetworkSecurityPolicysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkSecurityPolicyApiV1_WatchNetworkSecurityPolicysClient interface {
	Recv() (*NetworkSecurityPolicyEventList, error)
	grpc.ClientStream
}

type networkSecurityPolicyApiV1WatchNetworkSecurityPolicysClient struct {
	grpc.ClientStream
}

func (x *networkSecurityPolicyApiV1WatchNetworkSecurityPolicysClient) Recv() (*NetworkSecurityPolicyEventList, error) {
	m := new(NetworkSecurityPolicyEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkSecurityPolicyApiV1Client) NetworkSecurityPolicyOperUpdate(ctx context.Context, opts ...grpc.CallOption) (NetworkSecurityPolicyApiV1_NetworkSecurityPolicyOperUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkSecurityPolicyApiV1_serviceDesc.Streams[1], c.cc, "/netproto.NetworkSecurityPolicyApiV1/NetworkSecurityPolicyOperUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkSecurityPolicyApiV1NetworkSecurityPolicyOperUpdateClient{stream}
	return x, nil
}

type NetworkSecurityPolicyApiV1_NetworkSecurityPolicyOperUpdateClient interface {
	Send(*NetworkSecurityPolicyEvent) error
	CloseAndRecv() (*api.TypeMeta, error)
	grpc.ClientStream
}

type networkSecurityPolicyApiV1NetworkSecurityPolicyOperUpdateClient struct {
	grpc.ClientStream
}

func (x *networkSecurityPolicyApiV1NetworkSecurityPolicyOperUpdateClient) Send(m *NetworkSecurityPolicyEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkSecurityPolicyApiV1NetworkSecurityPolicyOperUpdateClient) CloseAndRecv() (*api.TypeMeta, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.TypeMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NetworkSecurityPolicyApiV1 service

type NetworkSecurityPolicyApiV1Server interface {
	ListNetworkSecurityPolicys(context.Context, *api.ListWatchOptions) (*NetworkSecurityPolicyList, error)
	WatchNetworkSecurityPolicys(*api.ListWatchOptions, NetworkSecurityPolicyApiV1_WatchNetworkSecurityPolicysServer) error
	NetworkSecurityPolicyOperUpdate(NetworkSecurityPolicyApiV1_NetworkSecurityPolicyOperUpdateServer) error
}

func RegisterNetworkSecurityPolicyApiV1Server(s *grpc.Server, srv NetworkSecurityPolicyApiV1Server) {
	s.RegisterService(&_NetworkSecurityPolicyApiV1_serviceDesc, srv)
}

func _NetworkSecurityPolicyApiV1_ListNetworkSecurityPolicys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkSecurityPolicyApiV1Server).ListNetworkSecurityPolicys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.NetworkSecurityPolicyApiV1/ListNetworkSecurityPolicys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkSecurityPolicyApiV1Server).ListNetworkSecurityPolicys(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkSecurityPolicyApiV1_WatchNetworkSecurityPolicys_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkSecurityPolicyApiV1Server).WatchNetworkSecurityPolicys(m, &networkSecurityPolicyApiV1WatchNetworkSecurityPolicysServer{stream})
}

type NetworkSecurityPolicyApiV1_WatchNetworkSecurityPolicysServer interface {
	Send(*NetworkSecurityPolicyEventList) error
	grpc.ServerStream
}

type networkSecurityPolicyApiV1WatchNetworkSecurityPolicysServer struct {
	grpc.ServerStream
}

func (x *networkSecurityPolicyApiV1WatchNetworkSecurityPolicysServer) Send(m *NetworkSecurityPolicyEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkSecurityPolicyApiV1_NetworkSecurityPolicyOperUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkSecurityPolicyApiV1Server).NetworkSecurityPolicyOperUpdate(&networkSecurityPolicyApiV1NetworkSecurityPolicyOperUpdateServer{stream})
}

type NetworkSecurityPolicyApiV1_NetworkSecurityPolicyOperUpdateServer interface {
	SendAndClose(*api.TypeMeta) error
	Recv() (*NetworkSecurityPolicyEvent, error)
	grpc.ServerStream
}

type networkSecurityPolicyApiV1NetworkSecurityPolicyOperUpdateServer struct {
	grpc.ServerStream
}

func (x *networkSecurityPolicyApiV1NetworkSecurityPolicyOperUpdateServer) SendAndClose(m *api.TypeMeta) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkSecurityPolicyApiV1NetworkSecurityPolicyOperUpdateServer) Recv() (*NetworkSecurityPolicyEvent, error) {
	m := new(NetworkSecurityPolicyEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NetworkSecurityPolicyApiV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.NetworkSecurityPolicyApiV1",
	HandlerType: (*NetworkSecurityPolicyApiV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNetworkSecurityPolicys",
			Handler:    _NetworkSecurityPolicyApiV1_ListNetworkSecurityPolicys_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchNetworkSecurityPolicys",
			Handler:       _NetworkSecurityPolicyApiV1_WatchNetworkSecurityPolicys_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NetworkSecurityPolicyOperUpdate",
			Handler:       _NetworkSecurityPolicyApiV1_NetworkSecurityPolicyOperUpdate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sgpolicy.proto",
}

func (m *NetworkSecurityPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkSecurityPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSgpolicy(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintSgpolicy(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSgpolicy(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintSgpolicy(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *NetworkSecurityPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkSecurityPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VrfName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(len(m.VrfName)))
		i += copy(dAtA[i:], m.VrfName)
	}
	if len(m.AttachGroup) > 0 {
		for _, s := range m.AttachGroup {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.AttachTenant {
		dAtA[i] = 0x18
		i++
		if m.AttachTenant {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSgpolicy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PolicyRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Action) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.Src != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(m.Src.Size()))
		n5, err := m.Src.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Dst != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(m.Dst.Size()))
		n6, err := m.Dst.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.ID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(m.ID))
	}
	if len(m.AppName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(len(m.AppName)))
		i += copy(dAtA[i:], m.AppName)
	}
	return i, nil
}

func (m *NetworkSecurityPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkSecurityPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NetworkSecurityPolicyID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(m.NetworkSecurityPolicyID))
	}
	return i, nil
}

func (m *NetworkSecurityPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkSecurityPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NetworkSecurityPolicys) > 0 {
		for _, msg := range m.NetworkSecurityPolicys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSgpolicy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NetworkSecurityPolicyEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkSecurityPolicyEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintSgpolicy(dAtA, i, uint64(m.NetworkSecurityPolicy.Size()))
	n7, err := m.NetworkSecurityPolicy.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func (m *NetworkSecurityPolicyEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkSecurityPolicyEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NetworkSecurityPolicyEvents) > 0 {
		for _, msg := range m.NetworkSecurityPolicyEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSgpolicy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSgpolicy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NetworkSecurityPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSgpolicy(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovSgpolicy(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovSgpolicy(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovSgpolicy(uint64(l))
	return n
}

func (m *NetworkSecurityPolicySpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.VrfName)
	if l > 0 {
		n += 1 + l + sovSgpolicy(uint64(l))
	}
	if len(m.AttachGroup) > 0 {
		for _, s := range m.AttachGroup {
			l = len(s)
			n += 1 + l + sovSgpolicy(uint64(l))
		}
	}
	if m.AttachTenant {
		n += 2
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovSgpolicy(uint64(l))
		}
	}
	return n
}

func (m *PolicyRule) Size() (n int) {
	var l int
	_ = l
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovSgpolicy(uint64(l))
	}
	if m.Src != nil {
		l = m.Src.Size()
		n += 1 + l + sovSgpolicy(uint64(l))
	}
	if m.Dst != nil {
		l = m.Dst.Size()
		n += 1 + l + sovSgpolicy(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovSgpolicy(uint64(m.ID))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovSgpolicy(uint64(l))
	}
	return n
}

func (m *NetworkSecurityPolicyStatus) Size() (n int) {
	var l int
	_ = l
	if m.NetworkSecurityPolicyID != 0 {
		n += 1 + sovSgpolicy(uint64(m.NetworkSecurityPolicyID))
	}
	return n
}

func (m *NetworkSecurityPolicyList) Size() (n int) {
	var l int
	_ = l
	if len(m.NetworkSecurityPolicys) > 0 {
		for _, e := range m.NetworkSecurityPolicys {
			l = e.Size()
			n += 1 + l + sovSgpolicy(uint64(l))
		}
	}
	return n
}

func (m *NetworkSecurityPolicyEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovSgpolicy(uint64(m.EventType))
	}
	l = m.NetworkSecurityPolicy.Size()
	n += 1 + l + sovSgpolicy(uint64(l))
	return n
}

func (m *NetworkSecurityPolicyEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.NetworkSecurityPolicyEvents) > 0 {
		for _, e := range m.NetworkSecurityPolicyEvents {
			l = e.Size()
			n += 1 + l + sovSgpolicy(uint64(l))
		}
	}
	return n
}

func sovSgpolicy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSgpolicy(x uint64) (n int) {
	return sovSgpolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetworkSecurityPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkSecurityPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkSecurityPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkSecurityPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkSecurityPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkSecurityPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttachGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttachGroup = append(m.AttachGroup, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttachTenant", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AttachTenant = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, PolicyRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Src == nil {
				m.Src = &MatchSelector{}
			}
			if err := m.Src.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dst == nil {
				m.Dst = &MatchSelector{}
			}
			if err := m.Dst.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkSecurityPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkSecurityPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkSecurityPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkSecurityPolicyID", wireType)
			}
			m.NetworkSecurityPolicyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkSecurityPolicyID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkSecurityPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkSecurityPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkSecurityPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkSecurityPolicys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkSecurityPolicys = append(m.NetworkSecurityPolicys, &NetworkSecurityPolicy{})
			if err := m.NetworkSecurityPolicys[len(m.NetworkSecurityPolicys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkSecurityPolicyEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkSecurityPolicyEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkSecurityPolicyEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkSecurityPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetworkSecurityPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkSecurityPolicyEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkSecurityPolicyEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkSecurityPolicyEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkSecurityPolicyEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkSecurityPolicyEvents = append(m.NetworkSecurityPolicyEvents, &NetworkSecurityPolicyEvent{})
			if err := m.NetworkSecurityPolicyEvents[len(m.NetworkSecurityPolicyEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSgpolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSgpolicy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSgpolicy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSgpolicy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSgpolicy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSgpolicy   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sgpolicy.proto", fileDescriptorSgpolicy) }

var fileDescriptorSgpolicy = []byte{
	// 962 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xc7, 0xb3, 0x5e, 0xd7, 0x4d, 0x26, 0x21, 0x98, 0x69, 0xed, 0x38, 0x0e, 0x78, 0xa3, 0x85,
	0x48, 0x46, 0xaa, 0xbd, 0x25, 0x9c, 0x90, 0x00, 0x91, 0x8d, 0x4d, 0x49, 0x68, 0xe2, 0xc8, 0x36,
	0x8d, 0xe8, 0x6d, 0xbc, 0x9e, 0x38, 0x03, 0xf6, 0xee, 0x68, 0x67, 0x36, 0x95, 0x85, 0x7a, 0x42,
	0x54, 0x48, 0x7c, 0x09, 0xce, 0x1c, 0xf9, 0x10, 0x28, 0x27, 0xd4, 0x23, 0x27, 0x0b, 0xe5, 0xe8,
	0x4f, 0x81, 0xe6, 0xd9, 0x71, 0xbd, 0x51, 0xbd, 0x75, 0xb9, 0xed, 0xcc, 0x3c, 0xff, 0xdf, 0x3c,
	0x6f, 0x33, 0xb3, 0x68, 0x53, 0x0c, 0x78, 0x30, 0x64, 0xde, 0xb8, 0xce, 0xc3, 0x40, 0x06, 0x78,
	0xd5, 0xa7, 0x12, 0xbe, 0xca, 0xef, 0x0f, 0x82, 0x60, 0x30, 0xa4, 0x0e, 0xe1, 0xcc, 0x21, 0xbe,
	0x1f, 0x48, 0x22, 0x59, 0xe0, 0x8b, 0xd8, 0xae, 0xdc, 0x1c, 0x30, 0x79, 0x19, 0xf5, 0xea, 0x5e,
	0x30, 0x72, 0x38, 0xf5, 0x05, 0xf1, 0xfb, 0x81, 0x23, 0x9e, 0x39, 0x57, 0xd4, 0x67, 0x1e, 0x75,
	0x22, 0xc9, 0x86, 0x42, 0x49, 0x07, 0xd4, 0x4f, 0xaa, 0x1d, 0xe6, 0x7b, 0xc3, 0xa8, 0x4f, 0x67,
	0x98, 0x5a, 0x02, 0x33, 0x08, 0x06, 0x81, 0x03, 0xd3, 0xbd, 0xe8, 0x02, 0x46, 0x30, 0x80, 0x2f,
	0x6d, 0xbe, 0x97, 0xb2, 0xab, 0xf2, 0x71, 0x44, 0x25, 0xd1, 0x66, 0xeb, 0x23, 0x22, 0xbd, 0xcb,
	0x78, 0x60, 0xff, 0x9d, 0x41, 0x85, 0x53, 0x2a, 0x9f, 0x05, 0xe1, 0x8f, 0x1d, 0xea, 0x45, 0x21,
	0x93, 0xe3, 0x33, 0x88, 0x18, 0x7f, 0x89, 0x56, 0xbb, 0x63, 0x4e, 0x4f, 0xa8, 0x24, 0x25, 0x63,
	0xd7, 0xa8, 0xae, 0xef, 0xbf, 0x53, 0x27, 0x9c, 0xd5, 0x67, 0x93, 0xee, 0xbd, 0xeb, 0x89, 0xb5,
	0xf2, 0x72, 0x62, 0x19, 0xd3, 0x89, 0x75, 0xf7, 0x01, 0xf3, 0x87, 0xcc, 0xa7, 0xed, 0x57, 0x1a,
	0xfc, 0x2d, 0x42, 0xad, 0xde, 0x0f, 0xd4, 0x93, 0x40, 0xc8, 0x00, 0xe1, 0x5d, 0x20, 0xcc, 0xa7,
	0xdd, 0x72, 0x82, 0xb1, 0xa9, 0x7c, 0x7c, 0x10, 0x8c, 0x98, 0xa4, 0x23, 0x2e, 0xc7, 0xed, 0x84,
	0x1c, 0xb7, 0x50, 0xb6, 0xc3, 0xa9, 0x57, 0x32, 0x01, 0xf3, 0x61, 0x7d, 0x56, 0x87, 0xfa, 0x42,
	0xdf, 0x95, 0xa9, 0x5b, 0x54, 0x68, 0x85, 0x15, 0x9c, 0x7a, 0x09, 0x2c, 0x80, 0xf0, 0x39, 0xca,
	0x75, 0x24, 0x91, 0x91, 0x28, 0x65, 0x01, 0xb9, 0xb7, 0x0c, 0x09, 0xc6, 0x6e, 0x49, 0x43, 0xf3,
	0x02, 0xc6, 0x09, 0xac, 0xc6, 0xd9, 0xbf, 0x67, 0xd0, 0x76, 0xaa, 0x53, 0xf8, 0x21, 0xba, 0xfb,
	0x24, 0xbc, 0x38, 0x25, 0x23, 0x0a, 0x39, 0x5d, 0x73, 0x8b, 0xd3, 0x89, 0x85, 0xaf, 0xc2, 0x8b,
	0x9a, 0x4f, 0x46, 0x34, 0x81, 0x9b, 0x99, 0xe1, 0xaf, 0xd0, 0xfa, 0x81, 0x94, 0xc4, 0xbb, 0x7c,
	0x14, 0x06, 0x11, 0x2f, 0x65, 0x76, 0xcd, 0xea, 0x9a, 0x5b, 0xb9, 0x8e, 0x53, 0x56, 0x24, 0xb0,
	0x54, 0x1b, 0xa8, 0xb5, 0x84, 0x3a, 0x29, 0xc1, 0x87, 0x68, 0x23, 0x1e, 0x76, 0xa9, 0x4f, 0x7c,
	0x09, 0x39, 0x5c, 0x75, 0x2d, 0x8d, 0xd8, 0xd2, 0x08, 0x09, 0x8b, 0x09, 0xc6, 0x2d, 0x11, 0x3e,
	0x46, 0x77, 0xda, 0xd1, 0x90, 0xaa, 0x74, 0x99, 0xd5, 0xf5, 0xfd, 0xfb, 0xf3, 0x74, 0xc5, 0xd1,
	0xa9, 0x45, 0x70, 0x4b, 0x65, 0xa7, 0x18, 0x1f, 0x9a, 0x5a, 0xa8, 0x14, 0x09, 0x64, 0x8c, 0xb0,
	0x7f, 0x31, 0x11, 0x9a, 0xab, 0x70, 0x17, 0xe5, 0x0e, 0x3c, 0xd5, 0xff, 0x3a, 0x25, 0x9f, 0xff,
	0xf1, 0x62, 0x7b, 0xb7, 0x23, 0xc3, 0xa6, 0x1f, 0x8d, 0xaa, 0x73, 0x3b, 0xbd, 0x51, 0x6c, 0xfa,
	0xb1, 0xf6, 0x3e, 0x4f, 0x60, 0xa8, 0xf7, 0x90, 0x7c, 0xdc, 0xd6, 0x2c, 0x7c, 0x88, 0xcc, 0x4e,
	0xe8, 0xe9, 0xbe, 0xdb, 0x9a, 0xbb, 0x7b, 0xa2, 0x9a, 0xbf, 0x43, 0x87, 0xd4, 0x93, 0x41, 0x08,
	0xf5, 0x04, 0x8e, 0x08, 0xa2, 0xd0, 0x4b, 0x16, 0x40, 0xa9, 0xf1, 0x37, 0xc8, 0x6c, 0x08, 0xa9,
	0xbb, 0x2e, 0x15, 0xf2, 0x81, 0x86, 0x14, 0xfa, 0x54, 0x48, 0xe6, 0x93, 0x84, 0x47, 0x40, 0x6a,
	0x08, 0x89, 0xf7, 0x50, 0xe6, 0xa8, 0x01, 0xbd, 0x96, 0x75, 0x0b, 0xd3, 0x89, 0xf5, 0x9e, 0xca,
	0x4d, 0x8d, 0xf5, 0x13, 0x76, 0x99, 0xa3, 0x86, 0xea, 0x8f, 0x03, 0xce, 0xa1, 0x3f, 0xee, 0xcc,
	0xfb, 0x83, 0x70, 0xfe, 0x5a, 0x7f, 0x68, 0x33, 0xfb, 0x33, 0xb4, 0x91, 0x4c, 0x0c, 0x46, 0x28,
	0x77, 0xd6, 0x6c, 0x9f, 0x1c, 0x75, 0xf3, 0x2b, 0x78, 0x15, 0x65, 0x1b, 0xcd, 0xd3, 0xef, 0xf3,
	0x86, 0x9a, 0x6d, 0x37, 0x8f, 0x9b, 0x87, 0xdd, 0x7c, 0x06, 0xdf, 0x45, 0xe6, 0xe3, 0xd6, 0xa3,
	0xbc, 0x69, 0x33, 0xb4, 0xf3, 0x86, 0x5e, 0xc7, 0xc7, 0x68, 0x6b, 0xe1, 0xf2, 0x51, 0x03, 0x0a,
	0x95, 0x75, 0xf3, 0xd3, 0x89, 0xb5, 0x71, 0x2b, 0x84, 0x34, 0x81, 0x2d, 0x53, 0x0e, 0xc5, 0x63,
	0x26, 0x24, 0x3e, 0x47, 0xc5, 0x85, 0x8b, 0xa2, 0x64, 0x40, 0xb3, 0x59, 0x4b, 0xce, 0x66, 0x3b,
	0x45, 0x6e, 0xff, 0x63, 0xa0, 0xf2, 0xc2, 0xa5, 0xe6, 0x15, 0xf5, 0x25, 0xfe, 0x1a, 0xad, 0xc1,
	0x87, 0xba, 0xb2, 0x20, 0xa4, 0xcd, 0xfd, 0x4d, 0xb8, 0xa0, 0x5e, 0xcd, 0xba, 0xa5, 0xe9, 0xc4,
	0xba, 0x4f, 0xd5, 0xb0, 0x26, 0xc7, 0x3c, 0x59, 0x80, 0xb9, 0x14, 0x87, 0x29, 0x57, 0xa8, 0x6e,
	0xbe, 0x65, 0xee, 0xbb, 0x3b, 0xfa, 0xd8, 0xdc, 0x13, 0x83, 0x5a, 0x7c, 0x72, 0x12, 0xfb, 0x2c,
	0x46, 0xdb, 0xbf, 0x1a, 0xa8, 0x92, 0x1e, 0x1a, 0xa4, 0xf5, 0x22, 0xa5, 0xbc, 0x60, 0x31, 0xcb,
	0xed, 0x47, 0x4b, 0x9c, 0x03, 0xe3, 0xf6, 0x9b, 0x40, 0xfb, 0x7f, 0x99, 0x29, 0x59, 0x3e, 0xe0,
	0xec, 0xc9, 0x27, 0xf8, 0x29, 0x2a, 0x2b, 0x77, 0x16, 0x97, 0x08, 0x17, 0x20, 0xe1, 0xca, 0xe0,
	0x5c, 0x9d, 0xa9, 0x16, 0x87, 0x87, 0xb0, 0xbc, 0xec, 0x86, 0x57, 0x02, 0x7b, 0x05, 0xf7, 0xd0,
	0x0e, 0xc8, 0xfe, 0x1f, 0xbc, 0xfa, 0x36, 0x31, 0xc7, 0x3b, 0x3c, 0x34, 0xf0, 0x53, 0x64, 0x2d,
	0xb4, 0x6a, 0x71, 0x1a, 0x7e, 0xc7, 0xfb, 0x44, 0x52, 0xfc, 0x56, 0x49, 0x2c, 0xdf, 0x7e, 0x3e,
	0xed, 0x95, 0xaa, 0x51, 0xfe, 0xcd, 0xf8, 0xf3, 0xe7, 0xed, 0x17, 0x46, 0xda, 0x13, 0x9c, 0x1d,
	0xaa, 0x3a, 0x66, 0x79, 0x20, 0x24, 0xce, 0xf5, 0xe9, 0x90, 0x4a, 0x8a, 0x4d, 0x1e, 0xc9, 0xf2,
	0x17, 0xce, 0x4f, 0xf3, 0xc7, 0xb1, 0x1e, 0x5f, 0xd1, 0xcf, 0x6f, 0xcd, 0xa9, 0xbb, 0x41, 0x70,
	0xe2, 0xd1, 0xd7, 0xa7, 0x9f, 0xdb, 0x05, 0xf5, 0x47, 0x20, 0xf4, 0x5e, 0x0e, 0xb4, 0x1c, 0xa3,
	0xc2, 0xdd, 0xb8, 0xbe, 0xa9, 0x18, 0x2f, 0x6f, 0x2a, 0xc6, 0xbf, 0x37, 0x15, 0xe3, 0xcc, 0xe8,
	0xe5, 0x20, 0xa4, 0x4f, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x12, 0x70, 0x3f, 0xdc, 0x06, 0x09,
	0x00, 0x00,
}
