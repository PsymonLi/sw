// TCPProxy model

syntax = "proto3";

package netproto;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "match.proto";

// ---------------------------- TCP Proxy API ----------------------------

// TCPProxyAPI rpc service
service TCPProxyPolicyApi {
    // options for auto generating rest endpoints
    option(venice.naplesRestService) = {
        Object: "TCPProxyPolicy",
        Method: ["list", "post", "put", "delete"],
        Pattern: "/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}",
        Prefix: "api/tcp/proxies"
    };

    rpc GetTCPProxyPolicy(api.ObjectMeta) returns (TCPProxyPolicy) {};
    rpc ListTCPProxyPolicies (api.ObjectMeta) returns (TCPProxyPolicyList) {};
    rpc WatchTCPProxyPolicies (api.ObjectMeta) returns (stream TCPProxyEventList) {};
}

// TCP Proxy Policy object
message TCPProxyPolicy{
    api.TypeMeta           TypeMeta    = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta         ObjectMeta  = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    TCPProxyPolicySpec     Spec        = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
    TCPProxyPolicyStatus   Status      = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}


// TCPProxyPolicySpec
message TCPProxyPolicySpec {
    // VrfName specifies the name of the VRF that the current TCP Proxy Policy belongs to
    string VrfName              = 1 [(gogoproto.jsontag) = "vrf-name,omitempty"];
    // TCPProxy rules in a given policy
    repeated TCPProxyRule rules = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "rules,omitempty"];
}

message TCPProxyRule {
    enum ActionType {
        NONE    = 0;
        ENABLE  = 1; // Enable Rule
        DISABLE = 2; // Disable Rule
    }
    uint64 ID           = 1 [(gogoproto.jsontag) = "id,omitempty"];

    // Security Association type
    string Action       = 2 [(venice.check) = "StrEnum(TCPProxyRule.ActionType)",
                            (gogoproto.jsontag) = "action,omitempty"];
    // TCP Proxy Rule From match selector.
    MatchSelector Src   = 3 [(gogoproto.jsontag) = "source,omitempty"];

    // TCP Proxy Rule To match selector.
    MatchSelector Dst   = 4 [(gogoproto.jsontag) = "destination,omitempty"];
}

// TCPProxyPolicyStatus
message TCPProxyPolicyStatus {
    uint64 TCPProxyPolicyID = 1  [(gogoproto.jsontag) = "id,omitempty"];
}

// list of TCP Proxy Policies
message TCPProxyPolicyList {
    repeated TCPProxyPolicy TCProxyPolicies = 1;
}

// TCPProxywatch event
message TCPProxyEvent {
    api.EventType EventType         = 1 [(gogoproto.jsontag) = "event-type,omitempty"];
    TCPProxyPolicy TCPProxyPolicy   = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "tcp-proxy-policy,omitempty"];
}


// tcp-proxy watch events batched
message TCPProxyEventList {
    repeated TCPProxyEvent TCPProxyEvents  = 1;
}
