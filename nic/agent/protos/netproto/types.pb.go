// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type IPAF int32

const (
	IPAF_IP_AF_NONE  IPAF = 0
	IPAF_IP_AF_INET  IPAF = 1
	IPAF_IP_AF_INET6 IPAF = 2
)

var IPAF_name = map[int32]string{
	0: "IP_AF_NONE",
	1: "IP_AF_INET",
	2: "IP_AF_INET6",
}
var IPAF_value = map[string]int32{
	"IP_AF_NONE":  0,
	"IP_AF_INET":  1,
	"IP_AF_INET6": 2,
}

func (x IPAF) String() string {
	return proto.EnumName(IPAF_name, int32(x))
}
func (IPAF) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type IPAddress struct {
	// Type is the address type
	Type IPAF `protobuf:"varint,1,opt,name=Type,proto3,enum=netproto.IPAF" json:"type"`
	// V4Address is valid if Type is AF_INET
	V4Address uint32 `protobuf:"varint,2,opt,name=V4Address,proto3" json:"v4-address,omitempty"`
	// V6Address is valid if Type is AF_INET6
	V6Address []byte `protobuf:"bytes,3,opt,name=V6Address,proto3" json:"v6-address,omitempty"`
}

func (m *IPAddress) Reset()                    { *m = IPAddress{} }
func (m *IPAddress) String() string            { return proto.CompactTextString(m) }
func (*IPAddress) ProtoMessage()               {}
func (*IPAddress) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *IPAddress) GetType() IPAF {
	if m != nil {
		return m.Type
	}
	return IPAF_IP_AF_NONE
}

func (m *IPAddress) GetV4Address() uint32 {
	if m != nil {
		return m.V4Address
	}
	return 0
}

func (m *IPAddress) GetV6Address() []byte {
	if m != nil {
		return m.V6Address
	}
	return nil
}

type IPPrefix struct {
	// PrefixLen is the length of the prefix
	PrefixLen uint32 `protobuf:"varint,1,opt,name=PrefixLen,proto3" json:"prefix-len"`
	// IP Address for the prefix
	Address IPAddress `protobuf:"bytes,2,opt,name=Address" json:"address"`
}

func (m *IPPrefix) Reset()                    { *m = IPPrefix{} }
func (m *IPPrefix) String() string            { return proto.CompactTextString(m) }
func (*IPPrefix) ProtoMessage()               {}
func (*IPPrefix) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *IPPrefix) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *IPPrefix) GetAddress() IPAddress {
	if m != nil {
		return m.Address
	}
	return IPAddress{}
}

func init() {
	proto.RegisterType((*IPAddress)(nil), "netproto.IPAddress")
	proto.RegisterType((*IPPrefix)(nil), "netproto.IPPrefix")
	proto.RegisterEnum("netproto.IPAF", IPAF_name, IPAF_value)
}
func (m *IPAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPAddress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
	}
	if m.V4Address != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.V4Address))
	}
	if len(m.V6Address) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.V6Address)))
		i += copy(dAtA[i:], m.V6Address)
	}
	return i, nil
}

func (m *IPPrefix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPPrefix) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PrefixLen != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PrefixLen))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.Address.Size()))
	n1, err := m.Address.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *IPAddress) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.V4Address != 0 {
		n += 1 + sovTypes(uint64(m.V4Address))
	}
	l = len(m.V6Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *IPPrefix) Size() (n int) {
	var l int
	_ = l
	if m.PrefixLen != 0 {
		n += 1 + sovTypes(uint64(m.PrefixLen))
	}
	l = m.Address.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IPAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (IPAF(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field V4Address", wireType)
			}
			m.V4Address = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.V4Address |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V6Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V6Address = append(m.V6Address[:0], dAtA[iNdEx:postIndex]...)
			if m.V6Address == nil {
				m.V6Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPPrefix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPPrefix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPPrefix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixLen", wireType)
			}
			m.PrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrefixLen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0xaa, 0xda, 0x40,
	0x18, 0x85, 0x1d, 0x2b, 0x55, 0xc7, 0x1a, 0x25, 0x2d, 0x45, 0xa4, 0x18, 0x11, 0x0a, 0x52, 0x34,
	0x03, 0x56, 0xd2, 0x5d, 0xc1, 0x80, 0x42, 0xa0, 0xd8, 0x10, 0xa4, 0x8b, 0x6e, 0x24, 0x9a, 0x31,
	0x1d, 0x48, 0x66, 0x82, 0x99, 0x58, 0x7d, 0xa4, 0xbe, 0x89, 0xcb, 0x3e, 0x41, 0xb8, 0xb8, 0xcc,
	0x53, 0x5c, 0x32, 0x49, 0x6e, 0xbc, 0x70, 0xef, 0xee, 0x9c, 0x3f, 0xe7, 0xcb, 0x9c, 0xf9, 0x19,
	0xd8, 0xe2, 0x97, 0x00, 0x87, 0x6a, 0x70, 0x64, 0x9c, 0xc9, 0x0d, 0x8a, 0xb9, 0x50, 0xfd, 0x4f,
	0x2e, 0x63, 0xae, 0x87, 0x91, 0x1d, 0x10, 0x64, 0x53, 0xca, 0xb8, 0xcd, 0x09, 0xa3, 0x79, 0xae,
	0xbf, 0x74, 0x09, 0xff, 0x13, 0xed, 0xd4, 0x3d, 0xf3, 0x51, 0x80, 0x69, 0x68, 0x53, 0x87, 0xa1,
	0xf0, 0x2f, 0x3a, 0x61, 0x4a, 0xf6, 0x18, 0x45, 0x9c, 0x78, 0x61, 0x8a, 0xba, 0x98, 0xde, 0xd3,
	0x88, 0xd0, 0xbd, 0x17, 0x39, 0xc5, 0x71, 0xfd, 0xe9, 0xdd, 0x6f, 0x5c, 0xe6, 0x32, 0x24, 0xc6,
	0xbb, 0xe8, 0x20, 0x9c, 0x30, 0x42, 0xe5, 0xf1, 0xcf, 0xaf, 0x9c, 0x9a, 0x76, 0xf4, 0x31, 0xb7,
	0xb3, 0xd8, 0xe8, 0x1f, 0x80, 0x4d, 0xc3, 0x5c, 0x38, 0xce, 0x11, 0x87, 0xa1, 0x3c, 0x81, 0xb5,
	0xcd, 0x25, 0xc0, 0x3d, 0x30, 0x04, 0x63, 0x69, 0x26, 0xa9, 0xc5, 0x0d, 0x55, 0xc3, 0x5c, 0xac,
	0xf4, 0x46, 0x12, 0x2b, 0xb5, 0x74, 0x03, 0x96, 0x48, 0xc9, 0x1a, 0x6c, 0xfe, 0x9a, 0xe7, 0x68,
	0xaf, 0x3a, 0x04, 0xe3, 0xb6, 0xde, 0x4b, 0x62, 0xe5, 0xc3, 0x69, 0x3e, 0xb5, 0xb3, 0xe9, 0x84,
	0xf9, 0x84, 0x63, 0x3f, 0xe0, 0x17, 0xab, 0x8c, 0x0a, 0x4e, 0x2b, 0xb8, 0x37, 0x43, 0x30, 0x7e,
	0x97, 0x73, 0xda, 0x8b, 0x5c, 0x11, 0x1d, 0x9d, 0x61, 0xc3, 0x30, 0xcd, 0x23, 0x3e, 0x90, 0xb3,
	0x3c, 0x81, 0xcd, 0x4c, 0xfd, 0xc0, 0x54, 0xd4, 0x6d, 0xeb, 0x52, 0x12, 0x2b, 0x30, 0x10, 0xc3,
	0xa9, 0x87, 0xa9, 0x55, 0x06, 0xe4, 0xef, 0xb0, 0x7e, 0xdf, 0xb3, 0x35, 0x7b, 0xff, 0xec, 0x6a,
	0xd9, 0x27, 0xbd, 0x73, 0x8d, 0x95, 0x4a, 0x12, 0x2b, 0xf5, 0xbc, 0x85, 0x55, 0x40, 0x5f, 0xbe,
	0xc1, 0x5a, 0xba, 0x01, 0x59, 0x82, 0xd0, 0x30, 0xb7, 0x8b, 0xd5, 0x76, 0xfd, 0x73, 0xbd, 0xec,
	0x56, 0x4a, 0x6f, 0xac, 0x97, 0x9b, 0x2e, 0x90, 0x3b, 0xb0, 0x55, 0x7a, 0xad, 0x5b, 0xd5, 0x3f,
	0x5e, 0x6f, 0x03, 0xf0, 0xff, 0x36, 0x00, 0x0f, 0xb7, 0x01, 0xf8, 0xfd, 0xf4, 0x62, 0x4c, 0xb0,
	0x7b, 0x2b, 0xc4, 0xd7, 0xc7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xf3, 0x63, 0xfb, 0x53, 0x02,
	0x00, 0x00,
}
