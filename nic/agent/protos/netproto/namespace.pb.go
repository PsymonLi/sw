// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: namespace.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NamespaceSpec_Type int32

const (
	NamespaceSpec_CUSTOMER NamespaceSpec_Type = 0
	NamespaceSpec_INFRA    NamespaceSpec_Type = 1
)

var NamespaceSpec_Type_name = map[int32]string{
	0: "CUSTOMER",
	1: "INFRA",
}
var NamespaceSpec_Type_value = map[string]int32{
	"CUSTOMER": 0,
	"INFRA":    1,
}

func (x NamespaceSpec_Type) String() string {
	return proto.EnumName(NamespaceSpec_Type_name, int32(x))
}
func (NamespaceSpec_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorNamespace, []int{1, 0}
}

// Namespace object
type Namespace struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           NamespaceSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         NamespaceStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Namespace) Reset()                    { *m = Namespace{} }
func (m *Namespace) String() string            { return proto.CompactTextString(m) }
func (*Namespace) ProtoMessage()               {}
func (*Namespace) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{0} }

func (m *Namespace) GetSpec() NamespaceSpec {
	if m != nil {
		return m.Spec
	}
	return NamespaceSpec{}
}

func (m *Namespace) GetStatus() NamespaceStatus {
	if m != nil {
		return m.Status
	}
	return NamespaceStatus{}
}

// NamespaceSpec captures all the namespace level configuration
type NamespaceSpec struct {
	// Type of the Namespace.
	// Infra type creates a overlay VRF in the datapath. This is automatically created on bringup.
	// Customer type creates a VRF in the datapath.
	// default and infra namespace under default tenant are automatically created during init time.
	NamespaceType string `protobuf:"bytes,1,opt,name=NamespaceType,proto3" json:"namespace-type,omitempty"`
}

func (m *NamespaceSpec) Reset()                    { *m = NamespaceSpec{} }
func (m *NamespaceSpec) String() string            { return proto.CompactTextString(m) }
func (*NamespaceSpec) ProtoMessage()               {}
func (*NamespaceSpec) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{1} }

func (m *NamespaceSpec) GetNamespaceType() string {
	if m != nil {
		return m.NamespaceType
	}
	return ""
}

// Namespace Status
type NamespaceStatus struct {
	// VRF ID in the datapath
	NamespaceID uint64 `protobuf:"varint,1,opt,name=NamespaceID,proto3" json:"namespace-id,omitempty"`
}

func (m *NamespaceStatus) Reset()                    { *m = NamespaceStatus{} }
func (m *NamespaceStatus) String() string            { return proto.CompactTextString(m) }
func (*NamespaceStatus) ProtoMessage()               {}
func (*NamespaceStatus) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{2} }

func (m *NamespaceStatus) GetNamespaceID() uint64 {
	if m != nil {
		return m.NamespaceID
	}
	return 0
}

type NamespaceList struct {
	Namespaces []*Namespace `protobuf:"bytes,1,rep,name=namespaces" json:"namespaces,omitempty"`
}

func (m *NamespaceList) Reset()                    { *m = NamespaceList{} }
func (m *NamespaceList) String() string            { return proto.CompactTextString(m) }
func (*NamespaceList) ProtoMessage()               {}
func (*NamespaceList) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{3} }

func (m *NamespaceList) GetNamespaces() []*Namespace {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

// namespace watch event
type NamespaceEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	Namespace Namespace     `protobuf:"bytes,2,opt,name=Namespace" json:"namespace,omitempty"`
}

func (m *NamespaceEvent) Reset()                    { *m = NamespaceEvent{} }
func (m *NamespaceEvent) String() string            { return proto.CompactTextString(m) }
func (*NamespaceEvent) ProtoMessage()               {}
func (*NamespaceEvent) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{4} }

func (m *NamespaceEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *NamespaceEvent) GetNamespace() Namespace {
	if m != nil {
		return m.Namespace
	}
	return Namespace{}
}

// namespace watch events batched
type NamespaceEventList struct {
	NamespaceEvents []*NamespaceEvent `protobuf:"bytes,1,rep,name=NamespaceEvents" json:"NamespaceEvents,omitempty"`
}

func (m *NamespaceEventList) Reset()                    { *m = NamespaceEventList{} }
func (m *NamespaceEventList) String() string            { return proto.CompactTextString(m) }
func (*NamespaceEventList) ProtoMessage()               {}
func (*NamespaceEventList) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{5} }

func (m *NamespaceEventList) GetNamespaceEvents() []*NamespaceEvent {
	if m != nil {
		return m.NamespaceEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*Namespace)(nil), "netproto.Namespace")
	proto.RegisterType((*NamespaceSpec)(nil), "netproto.NamespaceSpec")
	proto.RegisterType((*NamespaceStatus)(nil), "netproto.NamespaceStatus")
	proto.RegisterType((*NamespaceList)(nil), "netproto.NamespaceList")
	proto.RegisterType((*NamespaceEvent)(nil), "netproto.NamespaceEvent")
	proto.RegisterType((*NamespaceEventList)(nil), "netproto.NamespaceEventList")
	proto.RegisterEnum("netproto.NamespaceSpec_Type", NamespaceSpec_Type_name, NamespaceSpec_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NamespaceApi service

type NamespaceApiClient interface {
	GetNamespace(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*Namespace, error)
	ListNamespaces(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*NamespaceList, error)
	WatchNamespaces(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (NamespaceApi_WatchNamespacesClient, error)
	UpdateNamespace(ctx context.Context, in *Namespace, opts ...grpc.CallOption) (*Namespace, error)
	NamespaceOperUpdate(ctx context.Context, opts ...grpc.CallOption) (NamespaceApi_NamespaceOperUpdateClient, error)
}

type namespaceApiClient struct {
	cc *grpc.ClientConn
}

func NewNamespaceApiClient(cc *grpc.ClientConn) NamespaceApiClient {
	return &namespaceApiClient{cc}
}

func (c *namespaceApiClient) GetNamespace(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*Namespace, error) {
	out := new(Namespace)
	err := grpc.Invoke(ctx, "/netproto.NamespaceApi/GetNamespace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceApiClient) ListNamespaces(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*NamespaceList, error) {
	out := new(NamespaceList)
	err := grpc.Invoke(ctx, "/netproto.NamespaceApi/ListNamespaces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceApiClient) WatchNamespaces(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (NamespaceApi_WatchNamespacesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NamespaceApi_serviceDesc.Streams[0], c.cc, "/netproto.NamespaceApi/WatchNamespaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &namespaceApiWatchNamespacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NamespaceApi_WatchNamespacesClient interface {
	Recv() (*NamespaceEventList, error)
	grpc.ClientStream
}

type namespaceApiWatchNamespacesClient struct {
	grpc.ClientStream
}

func (x *namespaceApiWatchNamespacesClient) Recv() (*NamespaceEventList, error) {
	m := new(NamespaceEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *namespaceApiClient) UpdateNamespace(ctx context.Context, in *Namespace, opts ...grpc.CallOption) (*Namespace, error) {
	out := new(Namespace)
	err := grpc.Invoke(ctx, "/netproto.NamespaceApi/UpdateNamespace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceApiClient) NamespaceOperUpdate(ctx context.Context, opts ...grpc.CallOption) (NamespaceApi_NamespaceOperUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NamespaceApi_serviceDesc.Streams[1], c.cc, "/netproto.NamespaceApi/NamespaceOperUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &namespaceApiNamespaceOperUpdateClient{stream}
	return x, nil
}

type NamespaceApi_NamespaceOperUpdateClient interface {
	Send(*NamespaceEvent) error
	CloseAndRecv() (*api.TypeMeta, error)
	grpc.ClientStream
}

type namespaceApiNamespaceOperUpdateClient struct {
	grpc.ClientStream
}

func (x *namespaceApiNamespaceOperUpdateClient) Send(m *NamespaceEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *namespaceApiNamespaceOperUpdateClient) CloseAndRecv() (*api.TypeMeta, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.TypeMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NamespaceApi service

type NamespaceApiServer interface {
	GetNamespace(context.Context, *api.ObjectMeta) (*Namespace, error)
	ListNamespaces(context.Context, *api.ObjectMeta) (*NamespaceList, error)
	WatchNamespaces(*api.ObjectMeta, NamespaceApi_WatchNamespacesServer) error
	UpdateNamespace(context.Context, *Namespace) (*Namespace, error)
	NamespaceOperUpdate(NamespaceApi_NamespaceOperUpdateServer) error
}

func RegisterNamespaceApiServer(s *grpc.Server, srv NamespaceApiServer) {
	s.RegisterService(&_NamespaceApi_serviceDesc, srv)
}

func _NamespaceApi_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceApiServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.NamespaceApi/GetNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceApiServer).GetNamespace(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceApi_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceApiServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.NamespaceApi/ListNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceApiServer).ListNamespaces(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceApi_WatchNamespaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NamespaceApiServer).WatchNamespaces(m, &namespaceApiWatchNamespacesServer{stream})
}

type NamespaceApi_WatchNamespacesServer interface {
	Send(*NamespaceEventList) error
	grpc.ServerStream
}

type namespaceApiWatchNamespacesServer struct {
	grpc.ServerStream
}

func (x *namespaceApiWatchNamespacesServer) Send(m *NamespaceEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _NamespaceApi_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Namespace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceApiServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.NamespaceApi/UpdateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceApiServer).UpdateNamespace(ctx, req.(*Namespace))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceApi_NamespaceOperUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NamespaceApiServer).NamespaceOperUpdate(&namespaceApiNamespaceOperUpdateServer{stream})
}

type NamespaceApi_NamespaceOperUpdateServer interface {
	SendAndClose(*api.TypeMeta) error
	Recv() (*NamespaceEvent, error)
	grpc.ServerStream
}

type namespaceApiNamespaceOperUpdateServer struct {
	grpc.ServerStream
}

func (x *namespaceApiNamespaceOperUpdateServer) SendAndClose(m *api.TypeMeta) error {
	return x.ServerStream.SendMsg(m)
}

func (x *namespaceApiNamespaceOperUpdateServer) Recv() (*NamespaceEvent, error) {
	m := new(NamespaceEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NamespaceApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.NamespaceApi",
	HandlerType: (*NamespaceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNamespace",
			Handler:    _NamespaceApi_GetNamespace_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _NamespaceApi_ListNamespaces_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _NamespaceApi_UpdateNamespace_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchNamespaces",
			Handler:       _NamespaceApi_WatchNamespaces_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NamespaceOperUpdate",
			Handler:       _NamespaceApi_NamespaceOperUpdate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "namespace.proto",
}

func (m *Namespace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Namespace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNamespace(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintNamespace(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNamespace(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintNamespace(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *NamespaceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NamespaceType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(len(m.NamespaceType)))
		i += copy(dAtA[i:], m.NamespaceType)
	}
	return i, nil
}

func (m *NamespaceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NamespaceID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.NamespaceID))
	}
	return i, nil
}

func (m *NamespaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for _, msg := range m.Namespaces {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNamespace(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NamespaceEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintNamespace(dAtA, i, uint64(m.Namespace.Size()))
	n5, err := m.Namespace.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *NamespaceEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NamespaceEvents) > 0 {
		for _, msg := range m.NamespaceEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNamespace(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintNamespace(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Namespace) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNamespace(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNamespace(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNamespace(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNamespace(uint64(l))
	return n
}

func (m *NamespaceSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.NamespaceType)
	if l > 0 {
		n += 1 + l + sovNamespace(uint64(l))
	}
	return n
}

func (m *NamespaceStatus) Size() (n int) {
	var l int
	_ = l
	if m.NamespaceID != 0 {
		n += 1 + sovNamespace(uint64(m.NamespaceID))
	}
	return n
}

func (m *NamespaceList) Size() (n int) {
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for _, e := range m.Namespaces {
			l = e.Size()
			n += 1 + l + sovNamespace(uint64(l))
		}
	}
	return n
}

func (m *NamespaceEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovNamespace(uint64(m.EventType))
	}
	l = m.Namespace.Size()
	n += 1 + l + sovNamespace(uint64(l))
	return n
}

func (m *NamespaceEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.NamespaceEvents) > 0 {
		for _, e := range m.NamespaceEvents {
			l = e.Size()
			n += 1 + l + sovNamespace(uint64(l))
		}
	}
	return n
}

func sovNamespace(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNamespace(x uint64) (n int) {
	return sovNamespace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Namespace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Namespace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Namespace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceID", wireType)
			}
			m.NamespaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NamespaceID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, &Namespace{})
			if err := m.Namespaces[len(m.Namespaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Namespace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceEvents = append(m.NamespaceEvents, &NamespaceEvent{})
			if err := m.NamespaceEvents[len(m.NamespaceEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNamespace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNamespace
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNamespace
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNamespace(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNamespace = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNamespace   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("namespace.proto", fileDescriptorNamespace) }

var fileDescriptorNamespace = []byte{
	// 698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xd1, 0x4e, 0x13, 0x4d,
	0x14, 0xc7, 0xbb, 0xb4, 0x1f, 0x1f, 0x1d, 0x4a, 0x4b, 0xa6, 0x06, 0x97, 0x85, 0x50, 0xb2, 0x89,
	0xa6, 0x26, 0xd0, 0x35, 0x25, 0xf1, 0x0a, 0x35, 0x2c, 0x14, 0x43, 0x10, 0x6a, 0x5a, 0x88, 0x5e,
	0x78, 0xe1, 0x76, 0x7b, 0x2c, 0x63, 0xda, 0xd9, 0x09, 0x3b, 0x8b, 0x21, 0x86, 0x2b, 0x13, 0x5f,
	0xc1, 0x57, 0x30, 0xdc, 0x98, 0xf8, 0x14, 0x5c, 0xf2, 0x04, 0x8d, 0xe1, 0x92, 0xa7, 0x30, 0x33,
	0x6d, 0x67, 0xa7, 0x75, 0xeb, 0x55, 0x67, 0x4e, 0xcf, 0xff, 0x77, 0xfe, 0xe7, 0xec, 0xcc, 0xa0,
	0x02, 0xf5, 0x7a, 0x10, 0x32, 0xcf, 0x87, 0x0a, 0x3b, 0x0f, 0x78, 0x80, 0xe7, 0x28, 0x70, 0xb9,
	0xb2, 0x56, 0x3b, 0x41, 0xd0, 0xe9, 0x82, 0xe3, 0x31, 0xe2, 0x78, 0x94, 0x06, 0xdc, 0xe3, 0x24,
	0xa0, 0xe1, 0x20, 0xcf, 0xaa, 0x75, 0x08, 0x3f, 0x8b, 0x5a, 0x15, 0x3f, 0xe8, 0x39, 0x0c, 0x68,
	0xe8, 0xd1, 0x76, 0xe0, 0x84, 0x9f, 0x9d, 0x0b, 0xa0, 0xc4, 0x07, 0x27, 0xe2, 0xa4, 0x1b, 0x0a,
	0x69, 0x07, 0xa8, 0xae, 0x76, 0x08, 0xf5, 0xbb, 0x51, 0x1b, 0x46, 0x98, 0x4d, 0x0d, 0xd3, 0x09,
	0x3a, 0x81, 0x23, 0xc3, 0xad, 0xe8, 0xa3, 0xdc, 0xc9, 0x8d, 0x5c, 0x0d, 0xd3, 0x1f, 0x4d, 0xa9,
	0x2a, 0x3c, 0xf6, 0x80, 0x7b, 0x83, 0x34, 0xfb, 0x7a, 0x06, 0x65, 0x8f, 0x47, 0x8d, 0xe1, 0x17,
	0x68, 0xee, 0xe4, 0x92, 0xc1, 0x11, 0x70, 0xcf, 0x34, 0xd6, 0x8d, 0xf2, 0x7c, 0x75, 0xa1, 0xe2,
	0x31, 0x52, 0x19, 0x05, 0xdd, 0xe2, 0x4d, 0xbf, 0x94, 0xba, 0xed, 0x97, 0x8c, 0xfb, 0x7e, 0xe9,
	0xff, 0x0d, 0x42, 0xbb, 0x84, 0x42, 0x43, 0x69, 0xf0, 0x21, 0x42, 0xf5, 0xd6, 0x27, 0xf0, 0xb9,
	0x24, 0xcc, 0x48, 0x42, 0x41, 0x12, 0xe2, 0xb0, 0x6b, 0x69, 0x8c, 0xbc, 0xb0, 0xb2, 0x11, 0xf4,
	0x08, 0x87, 0x1e, 0xe3, 0x97, 0x0d, 0x4d, 0x8e, 0x77, 0x51, 0xa6, 0xc9, 0xc0, 0x37, 0xd3, 0x12,
	0xf3, 0xb0, 0x32, 0x1a, 0x77, 0x45, 0xf9, 0x15, 0x7f, 0xbb, 0x4b, 0x02, 0x27, 0x50, 0x21, 0x03,
	0x5f, 0x43, 0x49, 0x31, 0x3e, 0x44, 0xb3, 0x4d, 0xee, 0xf1, 0x28, 0x34, 0x33, 0x12, 0xb3, 0x9c,
	0x84, 0x91, 0x09, 0xae, 0x39, 0x04, 0x2d, 0x86, 0x72, 0xaf, 0xa1, 0x86, 0x08, 0xfb, 0xbb, 0x81,
	0x16, 0xc6, 0x8a, 0x63, 0xd0, 0x02, 0x62, 0x0a, 0x72, 0x6a, 0x59, 0xf7, 0xe5, 0xf5, 0xb7, 0xe5,
	0x95, 0x26, 0x3f, 0xaf, 0xd1, 0xa8, 0x57, 0x1e, 0x53, 0xc8, 0x51, 0x3e, 0xb9, 0x19, 0x74, 0x6f,
	0xaa, 0x23, 0xb5, 0xc9, 0x2f, 0x19, 0x68, 0x15, 0xc7, 0xa9, 0x76, 0x09, 0x65, 0xc4, 0x2f, 0xce,
	0xa1, 0xb9, 0xdd, 0xd3, 0xe6, 0x49, 0xfd, 0xa8, 0xd6, 0x58, 0x4c, 0xe1, 0x2c, 0xfa, 0xef, 0xe0,
	0x78, 0xbf, 0xb1, 0xb3, 0x68, 0xd8, 0x75, 0x54, 0x98, 0x68, 0x07, 0x6f, 0xa3, 0x79, 0x15, 0x3a,
	0xd8, 0x93, 0xc6, 0x32, 0xae, 0x75, 0xdf, 0x2f, 0x2d, 0xc5, 0x55, 0x49, 0x5b, 0xab, 0xa9, 0xa7,
	0xdb, 0x7b, 0x5a, 0x63, 0xaf, 0x49, 0xc8, 0xf1, 0x16, 0x42, 0x4a, 0x17, 0x9a, 0xc6, 0x7a, 0xba,
	0x3c, 0x5f, 0x2d, 0x26, 0x0c, 0xb3, 0xa1, 0xa5, 0xd9, 0x3f, 0x0c, 0x94, 0x57, 0xff, 0xd4, 0x2e,
	0x80, 0x72, 0xbc, 0x8f, 0xb2, 0x72, 0xa1, 0xa6, 0x95, 0xaf, 0xe6, 0xe5, 0x09, 0x51, 0x51, 0xd7,
	0xbc, 0xef, 0x97, 0x1e, 0x80, 0xd8, 0x4e, 0x8e, 0x25, 0x96, 0xe2, 0x63, 0xed, 0xdc, 0x0e, 0x4f,
	0x5a, 0x92, 0x1d, 0x77, 0x65, 0xf8, 0x55, 0x8b, 0xca, 0x96, 0xce, 0x53, 0x79, 0xf6, 0x3b, 0x84,
	0xc7, 0x9d, 0xca, 0xae, 0x5d, 0x6d, 0xae, 0x32, 0x3a, 0x6a, 0xdd, 0x4c, 0xa8, 0x25, 0x13, 0x1a,
	0x93, 0x82, 0xea, 0xcf, 0x34, 0xca, 0xa9, 0xd8, 0x0e, 0x23, 0xf8, 0x19, 0xca, 0xbd, 0x02, 0x1e,
	0xdf, 0xba, 0xc9, 0x1b, 0x62, 0x25, 0x35, 0x62, 0xa7, 0xf0, 0x36, 0xca, 0x0b, 0x53, 0x2a, 0x14,
	0xfe, 0xad, 0x4c, 0xba, 0x25, 0x42, 0x63, 0xa7, 0xf0, 0x1e, 0x2a, 0xbc, 0xf5, 0xb8, 0x7f, 0xf6,
	0x2f, 0xf9, 0xea, 0xb4, 0xae, 0x06, 0x8c, 0xa7, 0x06, 0x7e, 0x8e, 0x0a, 0xa7, 0xac, 0xed, 0x71,
	0x88, 0xed, 0x27, 0xb9, 0x9d, 0xd6, 0x82, 0x8b, 0x8a, 0x6a, 0x5b, 0x67, 0x70, 0x3e, 0x60, 0xe1,
	0xa9, 0xd3, 0xb4, 0xc6, 0xdf, 0x1f, 0x3b, 0x55, 0x36, 0xac, 0x0f, 0xbf, 0xbe, 0x2e, 0xbf, 0xd7,
	0x5f, 0xad, 0x4c, 0x57, 0x7c, 0xaa, 0x0c, 0x0b, 0x42, 0x8e, 0x67, 0xdb, 0xd0, 0x05, 0x0e, 0x38,
	0xcd, 0x22, 0x6e, 0x3d, 0x76, 0xbe, 0xc4, 0xcd, 0x55, 0x4e, 0x80, 0x7a, 0x94, 0x5f, 0x8d, 0xc5,
	0x04, 0xe4, 0xca, 0xce, 0x8b, 0x47, 0x31, 0x3e, 0xb6, 0x6e, 0xee, 0xe6, 0x6e, 0xcd, 0xb8, 0xbd,
	0x5b, 0x33, 0x7e, 0xdf, 0xad, 0x19, 0x6f, 0x8c, 0xd6, 0xac, 0xb4, 0xb6, 0xf5, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x30, 0x8e, 0x77, 0x4c, 0x03, 0x06, 0x00, 0x00,
}
