// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: policer.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PolicerAction_Action int32

const (
	PolicerAction_DENY PolicerAction_Action = 0
)

var PolicerAction_Action_name = map[int32]string{
	0: "DENY",
}
var PolicerAction_Action_value = map[string]int32{
	"DENY": 0,
}

func (x PolicerAction_Action) String() string {
	return proto.EnumName(PolicerAction_Action_name, int32(x))
}
func (PolicerAction_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPolicer, []int{0, 0}
}

type PolicerAction struct {
	PolicerAction string `protobuf:"bytes,1,opt,name=PolicerAction,proto3" json:"policer-action,omitempty"`
}

func (m *PolicerAction) Reset()                    { *m = PolicerAction{} }
func (m *PolicerAction) String() string            { return proto.CompactTextString(m) }
func (*PolicerAction) ProtoMessage()               {}
func (*PolicerAction) Descriptor() ([]byte, []int) { return fileDescriptorPolicer, []int{0} }

func (m *PolicerAction) GetPolicerAction() string {
	if m != nil {
		return m.PolicerAction
	}
	return ""
}

type PolicerCriteria struct {
	// Bytes per second as policer criteria
	BytesPerSecond uint64 `protobuf:"varint,1,opt,name=BytesPerSecond,proto3" json:"bytes-per-second,omitempty"`
	// Packets per second as policer criteria
	PacketsPerSecond uint64 `protobuf:"varint,2,opt,name=PacketsPerSecond,proto3" json:"packets-per-second,omitempty"`
	// Burst size in number of packets/bytes as policer criteria
	BurstSize uint64 `protobuf:"varint,3,opt,name=BurstSize,proto3" json:"burst-size,omitempty"`
}

func (m *PolicerCriteria) Reset()                    { *m = PolicerCriteria{} }
func (m *PolicerCriteria) String() string            { return proto.CompactTextString(m) }
func (*PolicerCriteria) ProtoMessage()               {}
func (*PolicerCriteria) Descriptor() ([]byte, []int) { return fileDescriptorPolicer, []int{1} }

func (m *PolicerCriteria) GetBytesPerSecond() uint64 {
	if m != nil {
		return m.BytesPerSecond
	}
	return 0
}

func (m *PolicerCriteria) GetPacketsPerSecond() uint64 {
	if m != nil {
		return m.PacketsPerSecond
	}
	return 0
}

func (m *PolicerCriteria) GetBurstSize() uint64 {
	if m != nil {
		return m.BurstSize
	}
	return 0
}

type PolicerProfileSpec struct {
	// Policer Profile Criteria
	Criteria PolicerCriteria `protobuf:"bytes,1,opt,name=Criteria" json:"criteria"`
	// Policer Profile Action
	ExceedAction PolicerAction `protobuf:"bytes,2,opt,name=ExceedAction" json:"exceed-action"`
}

func (m *PolicerProfileSpec) Reset()                    { *m = PolicerProfileSpec{} }
func (m *PolicerProfileSpec) String() string            { return proto.CompactTextString(m) }
func (*PolicerProfileSpec) ProtoMessage()               {}
func (*PolicerProfileSpec) Descriptor() ([]byte, []int) { return fileDescriptorPolicer, []int{2} }

func (m *PolicerProfileSpec) GetCriteria() PolicerCriteria {
	if m != nil {
		return m.Criteria
	}
	return PolicerCriteria{}
}

func (m *PolicerProfileSpec) GetExceedAction() PolicerAction {
	if m != nil {
		return m.ExceedAction
	}
	return PolicerAction{}
}

type PolicerProfileStatus struct {
	PolicerProfileID uint64 `protobuf:"varint,1,opt,name=PolicerProfileID,proto3" json:"id,omitempty"`
}

func (m *PolicerProfileStatus) Reset()                    { *m = PolicerProfileStatus{} }
func (m *PolicerProfileStatus) String() string            { return proto.CompactTextString(m) }
func (*PolicerProfileStatus) ProtoMessage()               {}
func (*PolicerProfileStatus) Descriptor() ([]byte, []int) { return fileDescriptorPolicer, []int{3} }

func (m *PolicerProfileStatus) GetPolicerProfileID() uint64 {
	if m != nil {
		return m.PolicerProfileID
	}
	return 0
}

type PolicerProfileEvent struct {
	EventType      api.EventType  `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	PolicerProfile PolicerProfile `protobuf:"bytes,2,opt,name=PolicerProfile" json:"policer-profile,omitempty"`
}

func (m *PolicerProfileEvent) Reset()                    { *m = PolicerProfileEvent{} }
func (m *PolicerProfileEvent) String() string            { return proto.CompactTextString(m) }
func (*PolicerProfileEvent) ProtoMessage()               {}
func (*PolicerProfileEvent) Descriptor() ([]byte, []int) { return fileDescriptorPolicer, []int{4} }

func (m *PolicerProfileEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *PolicerProfileEvent) GetPolicerProfile() PolicerProfile {
	if m != nil {
		return m.PolicerProfile
	}
	return PolicerProfile{}
}

type PolicerProfileEventList struct {
	PolicerProfileEvents []*PolicerProfileEvent `protobuf:"bytes,1,rep,name=policerProfileEvents" json:"policerProfileEvents,omitempty"`
}

func (m *PolicerProfileEventList) Reset()                    { *m = PolicerProfileEventList{} }
func (m *PolicerProfileEventList) String() string            { return proto.CompactTextString(m) }
func (*PolicerProfileEventList) ProtoMessage()               {}
func (*PolicerProfileEventList) Descriptor() ([]byte, []int) { return fileDescriptorPolicer, []int{5} }

func (m *PolicerProfileEventList) GetPolicerProfileEvents() []*PolicerProfileEvent {
	if m != nil {
		return m.PolicerProfileEvents
	}
	return nil
}

type PolicerProfileList struct {
	PolicerProfiles []*PolicerProfile `protobuf:"bytes,1,rep,name=policerProfiles" json:"policerProfiles,omitempty"`
}

func (m *PolicerProfileList) Reset()                    { *m = PolicerProfileList{} }
func (m *PolicerProfileList) String() string            { return proto.CompactTextString(m) }
func (*PolicerProfileList) ProtoMessage()               {}
func (*PolicerProfileList) Descriptor() ([]byte, []int) { return fileDescriptorPolicer, []int{6} }

func (m *PolicerProfileList) GetPolicerProfiles() []*PolicerProfile {
	if m != nil {
		return m.PolicerProfiles
	}
	return nil
}

// PolicerProfile
type PolicerProfile struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           PolicerProfileSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         PolicerProfileStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *PolicerProfile) Reset()                    { *m = PolicerProfile{} }
func (m *PolicerProfile) String() string            { return proto.CompactTextString(m) }
func (*PolicerProfile) ProtoMessage()               {}
func (*PolicerProfile) Descriptor() ([]byte, []int) { return fileDescriptorPolicer, []int{7} }

func (m *PolicerProfile) GetSpec() PolicerProfileSpec {
	if m != nil {
		return m.Spec
	}
	return PolicerProfileSpec{}
}

func (m *PolicerProfile) GetStatus() PolicerProfileStatus {
	if m != nil {
		return m.Status
	}
	return PolicerProfileStatus{}
}

func init() {
	proto.RegisterType((*PolicerAction)(nil), "netproto.PolicerAction")
	proto.RegisterType((*PolicerCriteria)(nil), "netproto.PolicerCriteria")
	proto.RegisterType((*PolicerProfileSpec)(nil), "netproto.PolicerProfileSpec")
	proto.RegisterType((*PolicerProfileStatus)(nil), "netproto.PolicerProfileStatus")
	proto.RegisterType((*PolicerProfileEvent)(nil), "netproto.PolicerProfileEvent")
	proto.RegisterType((*PolicerProfileEventList)(nil), "netproto.PolicerProfileEventList")
	proto.RegisterType((*PolicerProfileList)(nil), "netproto.PolicerProfileList")
	proto.RegisterType((*PolicerProfile)(nil), "netproto.PolicerProfile")
	proto.RegisterEnum("netproto.PolicerAction_Action", PolicerAction_Action_name, PolicerAction_Action_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PolicerProfileApiV1 service

type PolicerProfileApiV1Client interface {
	ListPolicerProfiles(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*PolicerProfileList, error)
	WatchPolicerProfiles(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (PolicerProfileApiV1_WatchPolicerProfilesClient, error)
	PolicerProfileOperUpdate(ctx context.Context, opts ...grpc.CallOption) (PolicerProfileApiV1_PolicerProfileOperUpdateClient, error)
}

type policerProfileApiV1Client struct {
	cc *grpc.ClientConn
}

func NewPolicerProfileApiV1Client(cc *grpc.ClientConn) PolicerProfileApiV1Client {
	return &policerProfileApiV1Client{cc}
}

func (c *policerProfileApiV1Client) ListPolicerProfiles(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*PolicerProfileList, error) {
	out := new(PolicerProfileList)
	err := grpc.Invoke(ctx, "/netproto.PolicerProfileApiV1/ListPolicerProfiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policerProfileApiV1Client) WatchPolicerProfiles(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (PolicerProfileApiV1_WatchPolicerProfilesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PolicerProfileApiV1_serviceDesc.Streams[0], c.cc, "/netproto.PolicerProfileApiV1/WatchPolicerProfiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &policerProfileApiV1WatchPolicerProfilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PolicerProfileApiV1_WatchPolicerProfilesClient interface {
	Recv() (*PolicerProfileEventList, error)
	grpc.ClientStream
}

type policerProfileApiV1WatchPolicerProfilesClient struct {
	grpc.ClientStream
}

func (x *policerProfileApiV1WatchPolicerProfilesClient) Recv() (*PolicerProfileEventList, error) {
	m := new(PolicerProfileEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *policerProfileApiV1Client) PolicerProfileOperUpdate(ctx context.Context, opts ...grpc.CallOption) (PolicerProfileApiV1_PolicerProfileOperUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PolicerProfileApiV1_serviceDesc.Streams[1], c.cc, "/netproto.PolicerProfileApiV1/PolicerProfileOperUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &policerProfileApiV1PolicerProfileOperUpdateClient{stream}
	return x, nil
}

type PolicerProfileApiV1_PolicerProfileOperUpdateClient interface {
	Send(*PolicerProfileEvent) error
	CloseAndRecv() (*api.TypeMeta, error)
	grpc.ClientStream
}

type policerProfileApiV1PolicerProfileOperUpdateClient struct {
	grpc.ClientStream
}

func (x *policerProfileApiV1PolicerProfileOperUpdateClient) Send(m *PolicerProfileEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *policerProfileApiV1PolicerProfileOperUpdateClient) CloseAndRecv() (*api.TypeMeta, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.TypeMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PolicerProfileApiV1 service

type PolicerProfileApiV1Server interface {
	ListPolicerProfiles(context.Context, *api.ListWatchOptions) (*PolicerProfileList, error)
	WatchPolicerProfiles(*api.ListWatchOptions, PolicerProfileApiV1_WatchPolicerProfilesServer) error
	PolicerProfileOperUpdate(PolicerProfileApiV1_PolicerProfileOperUpdateServer) error
}

func RegisterPolicerProfileApiV1Server(s *grpc.Server, srv PolicerProfileApiV1Server) {
	s.RegisterService(&_PolicerProfileApiV1_serviceDesc, srv)
}

func _PolicerProfileApiV1_ListPolicerProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicerProfileApiV1Server).ListPolicerProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.PolicerProfileApiV1/ListPolicerProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicerProfileApiV1Server).ListPolicerProfiles(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicerProfileApiV1_WatchPolicerProfiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PolicerProfileApiV1Server).WatchPolicerProfiles(m, &policerProfileApiV1WatchPolicerProfilesServer{stream})
}

type PolicerProfileApiV1_WatchPolicerProfilesServer interface {
	Send(*PolicerProfileEventList) error
	grpc.ServerStream
}

type policerProfileApiV1WatchPolicerProfilesServer struct {
	grpc.ServerStream
}

func (x *policerProfileApiV1WatchPolicerProfilesServer) Send(m *PolicerProfileEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _PolicerProfileApiV1_PolicerProfileOperUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PolicerProfileApiV1Server).PolicerProfileOperUpdate(&policerProfileApiV1PolicerProfileOperUpdateServer{stream})
}

type PolicerProfileApiV1_PolicerProfileOperUpdateServer interface {
	SendAndClose(*api.TypeMeta) error
	Recv() (*PolicerProfileEvent, error)
	grpc.ServerStream
}

type policerProfileApiV1PolicerProfileOperUpdateServer struct {
	grpc.ServerStream
}

func (x *policerProfileApiV1PolicerProfileOperUpdateServer) SendAndClose(m *api.TypeMeta) error {
	return x.ServerStream.SendMsg(m)
}

func (x *policerProfileApiV1PolicerProfileOperUpdateServer) Recv() (*PolicerProfileEvent, error) {
	m := new(PolicerProfileEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PolicerProfileApiV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.PolicerProfileApiV1",
	HandlerType: (*PolicerProfileApiV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPolicerProfiles",
			Handler:    _PolicerProfileApiV1_ListPolicerProfiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchPolicerProfiles",
			Handler:       _PolicerProfileApiV1_WatchPolicerProfiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PolicerProfileOperUpdate",
			Handler:       _PolicerProfileApiV1_PolicerProfileOperUpdate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "policer.proto",
}

func (m *PolicerAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicerAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PolicerAction) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPolicer(dAtA, i, uint64(len(m.PolicerAction)))
		i += copy(dAtA[i:], m.PolicerAction)
	}
	return i, nil
}

func (m *PolicerCriteria) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicerCriteria) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BytesPerSecond != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPolicer(dAtA, i, uint64(m.BytesPerSecond))
	}
	if m.PacketsPerSecond != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPolicer(dAtA, i, uint64(m.PacketsPerSecond))
	}
	if m.BurstSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPolicer(dAtA, i, uint64(m.BurstSize))
	}
	return i, nil
}

func (m *PolicerProfileSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicerProfileSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPolicer(dAtA, i, uint64(m.Criteria.Size()))
	n1, err := m.Criteria.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintPolicer(dAtA, i, uint64(m.ExceedAction.Size()))
	n2, err := m.ExceedAction.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *PolicerProfileStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicerProfileStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PolicerProfileID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPolicer(dAtA, i, uint64(m.PolicerProfileID))
	}
	return i, nil
}

func (m *PolicerProfileEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicerProfileEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPolicer(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintPolicer(dAtA, i, uint64(m.PolicerProfile.Size()))
	n3, err := m.PolicerProfile.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *PolicerProfileEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicerProfileEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PolicerProfileEvents) > 0 {
		for _, msg := range m.PolicerProfileEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPolicer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PolicerProfileList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicerProfileList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PolicerProfiles) > 0 {
		for _, msg := range m.PolicerProfiles {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPolicer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PolicerProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicerProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPolicer(dAtA, i, uint64(m.TypeMeta.Size()))
	n4, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x12
	i++
	i = encodeVarintPolicer(dAtA, i, uint64(m.ObjectMeta.Size()))
	n5, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPolicer(dAtA, i, uint64(m.Spec.Size()))
	n6, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x22
	i++
	i = encodeVarintPolicer(dAtA, i, uint64(m.Status.Size()))
	n7, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func encodeVarintPolicer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PolicerAction) Size() (n int) {
	var l int
	_ = l
	l = len(m.PolicerAction)
	if l > 0 {
		n += 1 + l + sovPolicer(uint64(l))
	}
	return n
}

func (m *PolicerCriteria) Size() (n int) {
	var l int
	_ = l
	if m.BytesPerSecond != 0 {
		n += 1 + sovPolicer(uint64(m.BytesPerSecond))
	}
	if m.PacketsPerSecond != 0 {
		n += 1 + sovPolicer(uint64(m.PacketsPerSecond))
	}
	if m.BurstSize != 0 {
		n += 1 + sovPolicer(uint64(m.BurstSize))
	}
	return n
}

func (m *PolicerProfileSpec) Size() (n int) {
	var l int
	_ = l
	l = m.Criteria.Size()
	n += 1 + l + sovPolicer(uint64(l))
	l = m.ExceedAction.Size()
	n += 1 + l + sovPolicer(uint64(l))
	return n
}

func (m *PolicerProfileStatus) Size() (n int) {
	var l int
	_ = l
	if m.PolicerProfileID != 0 {
		n += 1 + sovPolicer(uint64(m.PolicerProfileID))
	}
	return n
}

func (m *PolicerProfileEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovPolicer(uint64(m.EventType))
	}
	l = m.PolicerProfile.Size()
	n += 1 + l + sovPolicer(uint64(l))
	return n
}

func (m *PolicerProfileEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.PolicerProfileEvents) > 0 {
		for _, e := range m.PolicerProfileEvents {
			l = e.Size()
			n += 1 + l + sovPolicer(uint64(l))
		}
	}
	return n
}

func (m *PolicerProfileList) Size() (n int) {
	var l int
	_ = l
	if len(m.PolicerProfiles) > 0 {
		for _, e := range m.PolicerProfiles {
			l = e.Size()
			n += 1 + l + sovPolicer(uint64(l))
		}
	}
	return n
}

func (m *PolicerProfile) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovPolicer(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovPolicer(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovPolicer(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovPolicer(uint64(l))
	return n
}

func sovPolicer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPolicer(x uint64) (n int) {
	return sovPolicer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PolicerAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicerAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicerAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicerAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPolicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicerCriteria) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicerCriteria: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicerCriteria: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesPerSecond", wireType)
			}
			m.BytesPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesPerSecond |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketsPerSecond", wireType)
			}
			m.PacketsPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketsPerSecond |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurstSize", wireType)
			}
			m.BurstSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurstSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPolicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPolicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicerProfileSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicerProfileSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicerProfileSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Criteria", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Criteria.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExceedAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExceedAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPolicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicerProfileStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicerProfileStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicerProfileStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerProfileID", wireType)
			}
			m.PolicerProfileID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicerProfileID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPolicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPolicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicerProfileEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicerProfileEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicerProfileEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PolicerProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPolicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicerProfileEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicerProfileEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicerProfileEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerProfileEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicerProfileEvents = append(m.PolicerProfileEvents, &PolicerProfileEvent{})
			if err := m.PolicerProfileEvents[len(m.PolicerProfileEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPolicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicerProfileList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicerProfileList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicerProfileList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerProfiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicerProfiles = append(m.PolicerProfiles, &PolicerProfile{})
			if err := m.PolicerProfiles[len(m.PolicerProfiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPolicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicerProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicerProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicerProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPolicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPolicer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPolicer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPolicer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPolicer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPolicer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPolicer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPolicer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("policer.proto", fileDescriptorPolicer) }

var fileDescriptorPolicer = []byte{
	// 858 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xc1, 0x6e, 0x1b, 0x45,
	0x18, 0xce, 0xc4, 0x56, 0x48, 0x26, 0x89, 0x63, 0x4d, 0x52, 0xba, 0xb1, 0x52, 0x6f, 0xba, 0x12,
	0x52, 0x40, 0xb5, 0xb7, 0x35, 0x12, 0x12, 0x12, 0x3d, 0x74, 0xa9, 0x0b, 0x48, 0xa1, 0x36, 0x8e,
	0x29, 0x70, 0x5c, 0x8f, 0xff, 0xba, 0x03, 0xeb, 0xd9, 0xd1, 0xce, 0xb8, 0x90, 0xa2, 0x8a, 0x43,
	0x25, 0xc4, 0x85, 0x07, 0xe0, 0x15, 0xb8, 0xc1, 0x23, 0x70, 0xea, 0xb1, 0x4f, 0xb0, 0xa0, 0x1c,
	0xfd, 0x14, 0x68, 0x66, 0xc7, 0xe9, 0xee, 0x3a, 0xae, 0x7a, 0xf2, 0xce, 0xff, 0x7f, 0xdf, 0x37,
	0xf3, 0x7f, 0xf3, 0xed, 0x1a, 0xef, 0x8a, 0x38, 0x62, 0x14, 0x92, 0xb6, 0x48, 0x62, 0x15, 0x93,
	0x4d, 0x0e, 0xca, 0x3c, 0x35, 0x8e, 0x26, 0x71, 0x3c, 0x89, 0xc0, 0x0f, 0x05, 0xf3, 0x43, 0xce,
	0x63, 0x15, 0x2a, 0x16, 0x73, 0x99, 0xe1, 0x1a, 0xdd, 0x09, 0x53, 0x4f, 0x66, 0xa3, 0x36, 0x8d,
	0xa7, 0xbe, 0x00, 0x2e, 0x43, 0x3e, 0x8e, 0x7d, 0xf9, 0xa3, 0xff, 0x14, 0x38, 0xa3, 0xe0, 0xcf,
	0x14, 0x8b, 0xa4, 0xa6, 0x4e, 0x80, 0xe7, 0xd9, 0x3e, 0xe3, 0x34, 0x9a, 0x8d, 0x61, 0x21, 0xd3,
	0xca, 0xc9, 0x4c, 0xe2, 0x49, 0xec, 0x9b, 0xf2, 0x68, 0xf6, 0xd8, 0xac, 0xcc, 0xc2, 0x3c, 0x59,
	0xf8, 0x7b, 0x2b, 0x76, 0xd5, 0x67, 0x9c, 0x82, 0x0a, 0x33, 0x98, 0xf7, 0x1b, 0xc2, 0xbb, 0xfd,
	0x6c, 0xac, 0x7b, 0x54, 0xef, 0x4b, 0x68, 0xa9, 0xe0, 0xa0, 0x63, 0x74, 0xb2, 0x15, 0xdc, 0xfd,
	0xf3, 0xd7, 0xc3, 0x1b, 0x67, 0x2a, 0xe9, 0xf2, 0xd9, 0xf4, 0xa4, 0x00, 0x68, 0x67, 0x3f, 0xef,
	0xcf, 0x53, 0xd7, 0xb1, 0x0e, 0xb5, 0x42, 0x53, 0xba, 0x15, 0x4f, 0x99, 0x82, 0xa9, 0x50, 0xe7,
	0x83, 0xa2, 0xa6, 0x47, 0xf0, 0x86, 0xdd, 0x6e, 0x13, 0x57, 0xef, 0x77, 0x1f, 0x7e, 0x57, 0x5f,
	0xf3, 0xfe, 0x45, 0x78, 0xcf, 0xa2, 0x3e, 0x4d, 0x98, 0x82, 0x84, 0x85, 0xe4, 0x01, 0xae, 0x05,
	0xe7, 0x0a, 0x64, 0x1f, 0x92, 0x33, 0xa0, 0x31, 0x1f, 0x9b, 0xd3, 0x54, 0x83, 0xe6, 0x3c, 0x75,
	0x1b, 0x23, 0xdd, 0x69, 0x09, 0x48, 0x5a, 0xd2, 0xf4, 0x72, 0xdb, 0x95, 0x58, 0xe4, 0x14, 0xd7,
	0xfb, 0x21, 0xfd, 0x01, 0x54, 0x4e, 0x69, 0xdd, 0x28, 0x1d, 0xcf, 0x53, 0xf7, 0x48, 0x64, 0xbd,
	0xab, 0xb5, 0x96, 0x98, 0xe4, 0x23, 0xbc, 0x15, 0xcc, 0x12, 0xa9, 0xce, 0xd8, 0x33, 0x70, 0x2a,
	0x46, 0xc6, 0x99, 0xa7, 0xee, 0xc1, 0x48, 0x17, 0x5b, 0x92, 0x3d, 0x83, 0x1c, 0xfd, 0x35, 0xd4,
	0xfb, 0x0b, 0x61, 0x62, 0x27, 0xec, 0x27, 0xf1, 0x63, 0x16, 0xc1, 0x99, 0x00, 0x4a, 0x3e, 0xc3,
	0x9b, 0x8b, 0x81, 0xcd, 0x78, 0xdb, 0x9d, 0xc3, 0xf6, 0x22, 0x5b, 0xed, 0x92, 0x23, 0x41, 0xfd,
	0x65, 0xea, 0xae, 0xcd, 0x53, 0x77, 0x93, 0xda, 0xca, 0xe0, 0x92, 0x4c, 0x06, 0x78, 0xa7, 0xfb,
	0x13, 0x05, 0x18, 0xdb, 0x9b, 0x5b, 0x37, 0x62, 0xd7, 0x97, 0xc4, 0xb2, 0x76, 0x70, 0xcd, 0x4a,
	0xed, 0x82, 0x21, 0xd9, 0x4b, 0x1b, 0x14, 0x34, 0xbc, 0x21, 0x3e, 0x28, 0x1d, 0x59, 0x85, 0x6a,
	0x26, 0xc9, 0x27, 0xb8, 0x5e, 0xac, 0x7f, 0x71, 0xdf, 0xde, 0x4d, 0x7d, 0x9e, 0xba, 0x3b, 0xac,
	0xe8, 0x60, 0x09, 0xe9, 0xfd, 0x83, 0xf0, 0x7e, 0xb1, 0xd8, 0x7d, 0x0a, 0x5c, 0x91, 0x07, 0x78,
	0xcb, 0x3c, 0x0c, 0xcf, 0x05, 0x18, 0xb9, 0x5a, 0xa7, 0xd6, 0x0e, 0x05, 0x6b, 0x5f, 0x56, 0x33,
	0xa7, 0x41, 0x2f, 0x5b, 0xea, 0x5c, 0x14, 0x9c, 0xbe, 0x04, 0x11, 0x8a, 0x6b, 0x45, 0x79, 0xeb,
	0x85, 0xb3, 0xe4, 0x85, 0xed, 0x07, 0x37, 0xad, 0x19, 0x87, 0x8b, 0x08, 0x8b, 0xac, 0x91, 0x0f,
	0x55, 0x91, 0xe2, 0x45, 0xf8, 0xfa, 0x15, 0x33, 0x9c, 0x32, 0xa9, 0xc8, 0x57, 0xf8, 0x40, 0x2c,
	0xb7, 0xa4, 0x83, 0x8e, 0x2b, 0x27, 0xdb, 0x9d, 0x1b, 0xab, 0x4e, 0x61, 0x50, 0x83, 0x2b, 0xa9,
	0xde, 0xb7, 0xe5, 0xec, 0x98, 0x8d, 0x02, 0xbc, 0x57, 0x44, 0x2f, 0xf6, 0x58, 0x39, 0xe9, 0xa0,
	0x4c, 0xf0, 0xfe, 0x58, 0x2f, 0xbb, 0x45, 0x6e, 0x63, 0x34, 0xb4, 0x59, 0xdc, 0x35, 0xfe, 0x6b,
	0x57, 0xbf, 0x04, 0x15, 0x06, 0xfb, 0xda, 0xa7, 0x57, 0xa9, 0x8b, 0xe6, 0xa9, 0xfb, 0xce, 0x2d,
	0xc6, 0x23, 0xc6, 0x61, 0x80, 0x86, 0xe4, 0x63, 0x8c, 0x7a, 0xd6, 0xe4, 0x3d, 0xc3, 0xe8, 0x8d,
	0xbe, 0x07, 0xaa, 0x0c, 0xa7, 0x91, 0xe3, 0xd4, 0xf4, 0xc7, 0x27, 0x67, 0x2a, 0xea, 0x91, 0xcf,
	0x71, 0x55, 0xbf, 0x07, 0xe6, 0x4d, 0xda, 0xee, 0x1c, 0xad, 0x3a, 0xb8, 0xc6, 0x04, 0xef, 0xda,
	0x6b, 0xaa, 0x49, 0x01, 0x34, 0x27, 0x63, 0x14, 0x48, 0x1f, 0x6f, 0x64, 0xf1, 0x74, 0xaa, 0x46,
	0xab, 0xb9, 0x52, 0xcb, 0xa0, 0x02, 0xc7, 0xaa, 0xd5, 0xa5, 0x59, 0xe7, 0xf4, 0xac, 0x4e, 0xe7,
	0xf7, 0x4a, 0x39, 0xa8, 0xf7, 0x04, 0x7b, 0x74, 0x87, 0x9c, 0xe2, 0x7d, 0xed, 0x7f, 0xb1, 0x25,
	0xc9, 0x35, 0x33, 0xba, 0xee, 0x7c, 0x13, 0x2a, 0xfa, 0xa4, 0x27, 0xcc, 0xa7, 0xbc, 0xb1, 0x72,
	0x26, 0x8d, 0xf4, 0xd6, 0xc8, 0x10, 0x1f, 0x18, 0xfc, 0x5b, 0xca, 0xdd, 0x7c, 0x63, 0x7e, 0x32,
	0xcd, 0xdb, 0x88, 0x9c, 0x62, 0xa7, 0xd8, 0xee, 0x09, 0x48, 0xbe, 0x16, 0xe3, 0x50, 0x01, 0x79,
	0x73, 0x04, 0x1b, 0xc5, 0x4b, 0xf7, 0xd6, 0x4e, 0x50, 0xe3, 0x05, 0xfa, 0xfb, 0xc5, 0xe1, 0x2f,
	0x4b, 0x49, 0xa9, 0x46, 0x3a, 0x86, 0x95, 0x09, 0x28, 0x52, 0x15, 0xb1, 0x54, 0x64, 0x63, 0x0c,
	0x11, 0x28, 0x20, 0x15, 0x31, 0x53, 0x8d, 0xbb, 0xfe, 0xcf, 0xaf, 0x73, 0xd0, 0x1e, 0x02, 0x0f,
	0xb9, 0x7a, 0x5e, 0xa8, 0x3d, 0x0c, 0xa7, 0x20, 0x45, 0x48, 0x61, 0xb9, 0xfc, 0xdc, 0xdb, 0xd1,
	0xff, 0x56, 0x36, 0xae, 0xf2, 0x83, 0xf5, 0x47, 0x77, 0x82, 0x9d, 0x97, 0x17, 0x4d, 0xf4, 0xea,
	0xa2, 0x89, 0xfe, 0xbb, 0x68, 0xa2, 0x3e, 0x1a, 0x6d, 0x98, 0x19, 0x3e, 0xfc, 0x3f, 0x00, 0x00,
	0xff, 0xff, 0x60, 0x36, 0xc0, 0x65, 0x9c, 0x07, 0x00, 0x00,
}
