//------------------------------------------------------------------------------
// {C} Copyright 2018 Pensando Systems Inc. All rights reserved
//
// protobuf specification for security group policy
//------------------------------------------------------------------------------

syntax = "proto3";
package netproto;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "match.proto";

// ---------------------------- NetworkSecurityPolicy API ----------------------------
// NetworkSecurityPolicy controller api
service NetworkSecurityPolicyApiV1 {
    // options for auto generating rest endpoints
    option(venice.naplesRestService) = {
        Object: "NetworkSecurityPolicy",
        Method: ["list", "post", "delete", "put"],
        Pattern: "/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}",
        Prefix: "api/security/policies"
    };

    rpc ListNetworkSecurityPolicys (api.ListWatchOptions) returns (NetworkSecurityPolicyList) {};
    rpc WatchNetworkSecurityPolicys (api.ListWatchOptions) returns (stream NetworkSecurityPolicyEventList) {};
    rpc NetworkSecurityPolicyOperUpdate (stream NetworkSecurityPolicyEvent) returns (api.TypeMeta) {};

//    rpc GetNetworkSecurityPolicy (api.ObjectMeta) returns (NetworkSecurityPolicy) {};
//    rpc ListNetworkSecurityPolicys (api.ObjectMeta) returns (NetworkSecurityPolicyList) {};
//    rpc WatchNetworkSecurityPolicys (api.ObjectMeta) returns (stream NetworkSecurityPolicyEventList) {};
//    rpc UpdateNetworkSecurityPolicy (NetworkSecurityPolicy) returns (NetworkSecurityPolicy) {};
//    rpc NetworkSecurityPolicyOperUpdate (stream NetworkSecurityPolicyEvent) returns (api.TypeMeta) {};

}

// NetworkSecurityPolicy object
message NetworkSecurityPolicy {
    api.TypeMeta                TypeMeta    = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta              ObjectMeta  = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    NetworkSecurityPolicySpec   Spec        = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
    NetworkSecurityPolicyStatus Status      = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}


// NetworkSecurityPolicySpec captures all the security policy configuration
message NetworkSecurityPolicySpec {
    // VrfName specifies the name of the VRF that the current SG Policy belongs to
    string VrfName              = 1 [(gogoproto.jsontag) = "vrf-name,omitempty"];

    // list of security groups on which the policy is applied.
    repeated string AttachGroup = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "attach-group,omitempty"];

    // specifies if the set of rules need to be attached globally to all the vrfs within a tenant
    bool AttachTenant           = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "attach-tenant,omitempty"];

    // list of rules
    repeated PolicyRule Rules   = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "policy-rules,omitempty"];
}

message PolicyRule {
    enum PolicyAction
    {
        PERMIT  = 0;  // permit traffic flow
        DENY    = 1;  // drop traffic without any response to the client
        REJECT  = 2;  // drop traffic and report unreachable to client
        LOG     = 3;  // log access
    }

    // list of actions for the rule. Some combinations are invalid, eg: ["PERMIT", "DENY"]
    string Action       = 1 [(venice.check) = "StrEnum(PolicyRule.PolicyAction)",
                             (gogoproto.nullable) = true, (gogoproto.jsontag) = "action,omitemtpy"];

    // inbound rule match. IP Address, CIDR based IP mask, or hyphen separeted IP Range or App info based selector.
    // Emtpy src is interpreted as match all
    MatchSelector Src   = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "source,omitempty"];

    // outbound rule match. IP Address, CIDR based IP mask, or hyphen separeted IP Range or App info based selector.
    // Emtpy dst is interpreted as match all
    MatchSelector Dst   = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "destination,omitempty"];

    // Allocated ID
    uint64 ID           = 4 [(gogoproto.jsontag) = "rule-id,omitempty"];

    // Optional AppName to fetch additional ALG configurations. ICMP Code is inferred from its corresponding App definition.
    // A single rule can have the match parameters through the selectors or its corresponding App object
    string AppName      = 5 [(gogoproto.jsontag) = "app-name,omitempty"];
}


// NetworkSecurityPolicyStatus captures the sg policy status
message NetworkSecurityPolicyStatus {
    uint64 NetworkSecurityPolicyID  = 1 [(gogoproto.jsontag) = "id,omitempty"];
}

message NetworkSecurityPolicyList {
    repeated NetworkSecurityPolicy NetworkSecurityPolicys  = 1;
}

// sg policy watch event
message NetworkSecurityPolicyEvent {
    api.EventType           EventType               = 1 [(gogoproto.jsontag) = "event-type,omitempty"];
    NetworkSecurityPolicy   NetworkSecurityPolicy   = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "sg-policy,omitempty"];
}

// sg policy watch events batched
message NetworkSecurityPolicyEventList {
    repeated NetworkSecurityPolicyEvent NetworkSecurityPolicyEvents  = 1;
}
