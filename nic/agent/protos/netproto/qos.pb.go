// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qos.proto

package netproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Scheduler_Type int32

const (
	Scheduler_SCHED_NONE   Scheduler_Type = 0
	Scheduler_SCHED_DWRR   Scheduler_Type = 1
	Scheduler_SCHED_STRICT Scheduler_Type = 2
)

var Scheduler_Type_name = map[int32]string{
	0: "SCHED_NONE",
	1: "SCHED_DWRR",
	2: "SCHED_STRICT",
}
var Scheduler_Type_value = map[string]int32{
	"SCHED_NONE":   0,
	"SCHED_DWRR":   1,
	"SCHED_STRICT": 2,
}

func (x Scheduler_Type) String() string {
	return proto.EnumName(Scheduler_Type_name, int32(x))
}
func (Scheduler_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorQos, []int{3, 0} }

// QosClass object
type QosClass struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           QosClassSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         QosClassStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *QosClass) Reset()                    { *m = QosClass{} }
func (m *QosClass) String() string            { return proto.CompactTextString(m) }
func (*QosClass) ProtoMessage()               {}
func (*QosClass) Descriptor() ([]byte, []int) { return fileDescriptorQos, []int{0} }

func (m *QosClass) GetSpec() QosClassSpec {
	if m != nil {
		return m.Spec
	}
	return QosClassSpec{}
}

func (m *QosClass) GetStatus() QosClassStatus {
	if m != nil {
		return m.Status
	}
	return QosClassStatus{}
}

// QosClassSpec captures all the qos class level configuration
type QosClassSpec struct {
	// MTU for the QoS Class. Range 1500 - 9216
	MTU uint32 `protobuf:"varint,1,opt,name=MTU,proto3" json:"mtu,omitempty"`
	// PFC Configuration for the class
	PFC *PFC `protobuf:"bytes,2,opt,name=PFC" json:"pfc,omitempty"`
	// Qos Scheduling configuration
	Scheduler *Scheduler `protobuf:"bytes,3,opt,name=Scheduler" json:"qos-scheduler,omitempty"`
	// UplinkClassMap captures the policy for classification of the traffic from the network
	UplinkClassMap *UplinkClassMap `protobuf:"bytes,4,opt,name=UplinkClassMap" json:"uplink-class-map,omitempty"`
	// Marking captures the policy fot the classification of traffic from host to the network
	Marking *Marking `protobuf:"bytes,5,opt,name=Marking" json:"marking,omitempty"`
}

func (m *QosClassSpec) Reset()                    { *m = QosClassSpec{} }
func (m *QosClassSpec) String() string            { return proto.CompactTextString(m) }
func (*QosClassSpec) ProtoMessage()               {}
func (*QosClassSpec) Descriptor() ([]byte, []int) { return fileDescriptorQos, []int{1} }

func (m *QosClassSpec) GetMTU() uint32 {
	if m != nil {
		return m.MTU
	}
	return 0
}

func (m *QosClassSpec) GetPFC() *PFC {
	if m != nil {
		return m.PFC
	}
	return nil
}

func (m *QosClassSpec) GetScheduler() *Scheduler {
	if m != nil {
		return m.Scheduler
	}
	return nil
}

func (m *QosClassSpec) GetUplinkClassMap() *UplinkClassMap {
	if m != nil {
		return m.UplinkClassMap
	}
	return nil
}

func (m *QosClassSpec) GetMarking() *Marking {
	if m != nil {
		return m.Marking
	}
	return nil
}

// PFC specifies the pfc cos to respond to
type PFC struct {
	// PFC cos value for no drop classes. Range 0 - 7
	COS uint32 `protobuf:"varint,1,opt,name=COS,proto3" json:"cos,omitempty"`
	// XOn Threshold for 2 - 4 MTUs. Range 3000 - 36864
	XonThreshold uint32 `protobuf:"varint,2,opt,name=XonThreshold,proto3" json:"xon-threshold,omitempty"`
	// XOff Threshold for 2 - 8 MTUs, Range 3000 - 73728
	XOffThreshold uint32 `protobuf:"varint,3,opt,name=XOffThreshold,proto3" json:"xoff-threshold,omitempty"`
}

func (m *PFC) Reset()                    { *m = PFC{} }
func (m *PFC) String() string            { return proto.CompactTextString(m) }
func (*PFC) ProtoMessage()               {}
func (*PFC) Descriptor() ([]byte, []int) { return fileDescriptorQos, []int{2} }

func (m *PFC) GetCOS() uint32 {
	if m != nil {
		return m.COS
	}
	return 0
}

func (m *PFC) GetXonThreshold() uint32 {
	if m != nil {
		return m.XonThreshold
	}
	return 0
}

func (m *PFC) GetXOffThreshold() uint32 {
	if m != nil {
		return m.XOffThreshold
	}
	return 0
}

type Scheduler struct {
	// Type of QoS Scheduler. One of DWRR or Strict.
	SchedulerType string `protobuf:"bytes,1,opt,name=SchedulerType,proto3" json:"scheduler-type,omitempty"`
	// Bandwidth Percentage for DWRR Scheduler. This captures bandwidth allocated.
	BandwidthPercentage uint32 `protobuf:"varint,2,opt,name=BandwidthPercentage,proto3" json:"bandwidth-percentage,omitemtpy"`
	// Bytes Per Second for Strict Scheduler. This captures rate limiting in bytes per second.
	BytesPerSecond uint32 `protobuf:"varint,3,opt,name=BytesPerSecond,proto3" json:"bytes-per-second,omitempty"`
}

func (m *Scheduler) Reset()                    { *m = Scheduler{} }
func (m *Scheduler) String() string            { return proto.CompactTextString(m) }
func (*Scheduler) ProtoMessage()               {}
func (*Scheduler) Descriptor() ([]byte, []int) { return fileDescriptorQos, []int{3} }

func (m *Scheduler) GetSchedulerType() string {
	if m != nil {
		return m.SchedulerType
	}
	return ""
}

func (m *Scheduler) GetBandwidthPercentage() uint32 {
	if m != nil {
		return m.BandwidthPercentage
	}
	return 0
}

func (m *Scheduler) GetBytesPerSecond() uint32 {
	if m != nil {
		return m.BytesPerSecond
	}
	return 0
}

type UplinkClassMap struct {
	// Classify traffic based on the outer tag pcp value. Range 0 - 7
	Dot1QPCP uint32 `protobuf:"varint,1,opt,name=Dot1QPCP,proto3" json:"dot1q-pcp,omitempty"`
	// Classify traffic based on the IP DSCP values. Range 0 - 63
	IPDSCP []uint32 `protobuf:"varint,2,rep,packed,name=IPDSCP" json:"ip-dscp,omitempty"`
}

func (m *UplinkClassMap) Reset()                    { *m = UplinkClassMap{} }
func (m *UplinkClassMap) String() string            { return proto.CompactTextString(m) }
func (*UplinkClassMap) ProtoMessage()               {}
func (*UplinkClassMap) Descriptor() ([]byte, []int) { return fileDescriptorQos, []int{4} }

func (m *UplinkClassMap) GetDot1QPCP() uint32 {
	if m != nil {
		return m.Dot1QPCP
	}
	return 0
}

func (m *UplinkClassMap) GetIPDSCP() []uint32 {
	if m != nil {
		return m.IPDSCP
	}
	return nil
}

type Marking struct {
	// Enable 802.1q PCP Rewrite
	EnableDot1QPCPRewrite bool `protobuf:"varint,1,opt,name=EnableDot1QPCPRewrite,proto3" json:"enable-dot1q-pcp-rewrite,omitempty"`
	// Enable IP DSCP Rewrite
	EnableIPDSCPRewrite bool `protobuf:"varint,2,opt,name=EnableIPDSCPRewrite,proto3" json:"enable-ip-dscp-rewrite,omitempty"`
	// Rewrite value for the 802.1q tag. Range 0 - 7
	Dot1QPCP uint32 `protobuf:"varint,3,opt,name=Dot1QPCP,proto3" json:"dot1q-pcp,omitempty"`
	// Rewrite value for the IP DSCP. Range 0 - 63
	IPDSCP uint32 `protobuf:"varint,4,opt,name=IPDSCP,proto3" json:"ip-dscp,omitempty"`
}

func (m *Marking) Reset()                    { *m = Marking{} }
func (m *Marking) String() string            { return proto.CompactTextString(m) }
func (*Marking) ProtoMessage()               {}
func (*Marking) Descriptor() ([]byte, []int) { return fileDescriptorQos, []int{5} }

func (m *Marking) GetEnableDot1QPCPRewrite() bool {
	if m != nil {
		return m.EnableDot1QPCPRewrite
	}
	return false
}

func (m *Marking) GetEnableIPDSCPRewrite() bool {
	if m != nil {
		return m.EnableIPDSCPRewrite
	}
	return false
}

func (m *Marking) GetDot1QPCP() uint32 {
	if m != nil {
		return m.Dot1QPCP
	}
	return 0
}

func (m *Marking) GetIPDSCP() uint32 {
	if m != nil {
		return m.IPDSCP
	}
	return 0
}

// QosClass Status
type QosClassStatus struct {
	// QosClassID in the datapath
	QosClassID uint64 `protobuf:"varint,1,opt,name=QosClassID,proto3" json:"id,omitempty"`
}

func (m *QosClassStatus) Reset()                    { *m = QosClassStatus{} }
func (m *QosClassStatus) String() string            { return proto.CompactTextString(m) }
func (*QosClassStatus) ProtoMessage()               {}
func (*QosClassStatus) Descriptor() ([]byte, []int) { return fileDescriptorQos, []int{6} }

func (m *QosClassStatus) GetQosClassID() uint64 {
	if m != nil {
		return m.QosClassID
	}
	return 0
}

type QosClassList struct {
	QoSClasses []*QosClass `protobuf:"bytes,1,rep,name=QoSClasses" json:"QoSClasses,omitempty"`
}

func (m *QosClassList) Reset()                    { *m = QosClassList{} }
func (m *QosClassList) String() string            { return proto.CompactTextString(m) }
func (*QosClassList) ProtoMessage()               {}
func (*QosClassList) Descriptor() ([]byte, []int) { return fileDescriptorQos, []int{7} }

func (m *QosClassList) GetQoSClasses() []*QosClass {
	if m != nil {
		return m.QoSClasses
	}
	return nil
}

// qos class watch event
type QosClassEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	QosClass  QosClass      `protobuf:"bytes,2,opt,name=QosClass" json:"qos-class,omitempty"`
}

func (m *QosClassEvent) Reset()                    { *m = QosClassEvent{} }
func (m *QosClassEvent) String() string            { return proto.CompactTextString(m) }
func (*QosClassEvent) ProtoMessage()               {}
func (*QosClassEvent) Descriptor() ([]byte, []int) { return fileDescriptorQos, []int{8} }

func (m *QosClassEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *QosClassEvent) GetQosClass() QosClass {
	if m != nil {
		return m.QosClass
	}
	return QosClass{}
}

// qos watch events batched
type QosClassEventList struct {
	QosClassEvents []*QosClassEvent `protobuf:"bytes,1,rep,name=QosClassEvents" json:"QosClassEvents,omitempty"`
}

func (m *QosClassEventList) Reset()                    { *m = QosClassEventList{} }
func (m *QosClassEventList) String() string            { return proto.CompactTextString(m) }
func (*QosClassEventList) ProtoMessage()               {}
func (*QosClassEventList) Descriptor() ([]byte, []int) { return fileDescriptorQos, []int{9} }

func (m *QosClassEventList) GetQosClassEvents() []*QosClassEvent {
	if m != nil {
		return m.QosClassEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*QosClass)(nil), "netproto.QosClass")
	proto.RegisterType((*QosClassSpec)(nil), "netproto.QosClassSpec")
	proto.RegisterType((*PFC)(nil), "netproto.PFC")
	proto.RegisterType((*Scheduler)(nil), "netproto.Scheduler")
	proto.RegisterType((*UplinkClassMap)(nil), "netproto.UplinkClassMap")
	proto.RegisterType((*Marking)(nil), "netproto.Marking")
	proto.RegisterType((*QosClassStatus)(nil), "netproto.QosClassStatus")
	proto.RegisterType((*QosClassList)(nil), "netproto.QosClassList")
	proto.RegisterType((*QosClassEvent)(nil), "netproto.QosClassEvent")
	proto.RegisterType((*QosClassEventList)(nil), "netproto.QosClassEventList")
	proto.RegisterEnum("netproto.Scheduler_Type", Scheduler_Type_name, Scheduler_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for QosClassApi service

type QosClassApiClient interface {
	GetQosClass(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*QosClass, error)
	ListQosClasses(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*QosClassList, error)
	WatchQosClasses(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (QosClassApi_WatchQosClassesClient, error)
}

type qosClassApiClient struct {
	cc *grpc.ClientConn
}

func NewQosClassApiClient(cc *grpc.ClientConn) QosClassApiClient {
	return &qosClassApiClient{cc}
}

func (c *qosClassApiClient) GetQosClass(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*QosClass, error) {
	out := new(QosClass)
	err := grpc.Invoke(ctx, "/netproto.QosClassApi/GetQosClass", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qosClassApiClient) ListQosClasses(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*QosClassList, error) {
	out := new(QosClassList)
	err := grpc.Invoke(ctx, "/netproto.QosClassApi/ListQosClasses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qosClassApiClient) WatchQosClasses(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (QosClassApi_WatchQosClassesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_QosClassApi_serviceDesc.Streams[0], c.cc, "/netproto.QosClassApi/WatchQosClasses", opts...)
	if err != nil {
		return nil, err
	}
	x := &qosClassApiWatchQosClassesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QosClassApi_WatchQosClassesClient interface {
	Recv() (*QosClassEventList, error)
	grpc.ClientStream
}

type qosClassApiWatchQosClassesClient struct {
	grpc.ClientStream
}

func (x *qosClassApiWatchQosClassesClient) Recv() (*QosClassEventList, error) {
	m := new(QosClassEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for QosClassApi service

type QosClassApiServer interface {
	GetQosClass(context.Context, *api.ObjectMeta) (*QosClass, error)
	ListQosClasses(context.Context, *api.ObjectMeta) (*QosClassList, error)
	WatchQosClasses(*api.ObjectMeta, QosClassApi_WatchQosClassesServer) error
}

func RegisterQosClassApiServer(s *grpc.Server, srv QosClassApiServer) {
	s.RegisterService(&_QosClassApi_serviceDesc, srv)
}

func _QosClassApi_GetQosClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QosClassApiServer).GetQosClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.QosClassApi/GetQosClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QosClassApiServer).GetQosClass(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _QosClassApi_ListQosClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QosClassApiServer).ListQosClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.QosClassApi/ListQosClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QosClassApiServer).ListQosClasses(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _QosClassApi_WatchQosClasses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QosClassApiServer).WatchQosClasses(m, &qosClassApiWatchQosClassesServer{stream})
}

type QosClassApi_WatchQosClassesServer interface {
	Send(*QosClassEventList) error
	grpc.ServerStream
}

type qosClassApiWatchQosClassesServer struct {
	grpc.ServerStream
}

func (x *qosClassApiWatchQosClassesServer) Send(m *QosClassEventList) error {
	return x.ServerStream.SendMsg(m)
}

var _QosClassApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.QosClassApi",
	HandlerType: (*QosClassApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQosClass",
			Handler:    _QosClassApi_GetQosClass_Handler,
		},
		{
			MethodName: "ListQosClasses",
			Handler:    _QosClassApi_ListQosClasses_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchQosClasses",
			Handler:       _QosClassApi_WatchQosClasses_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "qos.proto",
}

func (m *QosClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QosClass) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintQos(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintQos(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintQos(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintQos(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *QosClassSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QosClassSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MTU != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQos(dAtA, i, uint64(m.MTU))
	}
	if m.PFC != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQos(dAtA, i, uint64(m.PFC.Size()))
		n5, err := m.PFC.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Scheduler != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintQos(dAtA, i, uint64(m.Scheduler.Size()))
		n6, err := m.Scheduler.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.UplinkClassMap != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintQos(dAtA, i, uint64(m.UplinkClassMap.Size()))
		n7, err := m.UplinkClassMap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Marking != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintQos(dAtA, i, uint64(m.Marking.Size()))
		n8, err := m.Marking.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *PFC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PFC) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.COS != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQos(dAtA, i, uint64(m.COS))
	}
	if m.XonThreshold != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintQos(dAtA, i, uint64(m.XonThreshold))
	}
	if m.XOffThreshold != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintQos(dAtA, i, uint64(m.XOffThreshold))
	}
	return i, nil
}

func (m *Scheduler) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Scheduler) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SchedulerType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQos(dAtA, i, uint64(len(m.SchedulerType)))
		i += copy(dAtA[i:], m.SchedulerType)
	}
	if m.BandwidthPercentage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintQos(dAtA, i, uint64(m.BandwidthPercentage))
	}
	if m.BytesPerSecond != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintQos(dAtA, i, uint64(m.BytesPerSecond))
	}
	return i, nil
}

func (m *UplinkClassMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UplinkClassMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dot1QPCP != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQos(dAtA, i, uint64(m.Dot1QPCP))
	}
	if len(m.IPDSCP) > 0 {
		dAtA10 := make([]byte, len(m.IPDSCP)*10)
		var j9 int
		for _, num := range m.IPDSCP {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintQos(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	return i, nil
}

func (m *Marking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Marking) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EnableDot1QPCPRewrite {
		dAtA[i] = 0x8
		i++
		if m.EnableDot1QPCPRewrite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EnableIPDSCPRewrite {
		dAtA[i] = 0x10
		i++
		if m.EnableIPDSCPRewrite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dot1QPCP != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintQos(dAtA, i, uint64(m.Dot1QPCP))
	}
	if m.IPDSCP != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintQos(dAtA, i, uint64(m.IPDSCP))
	}
	return i, nil
}

func (m *QosClassStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QosClassStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.QosClassID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQos(dAtA, i, uint64(m.QosClassID))
	}
	return i, nil
}

func (m *QosClassList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QosClassList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.QoSClasses) > 0 {
		for _, msg := range m.QoSClasses {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QosClassEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QosClassEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQos(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintQos(dAtA, i, uint64(m.QosClass.Size()))
	n11, err := m.QosClass.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	return i, nil
}

func (m *QosClassEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QosClassEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.QosClassEvents) > 0 {
		for _, msg := range m.QosClassEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintQos(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *QosClass) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovQos(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovQos(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovQos(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovQos(uint64(l))
	return n
}

func (m *QosClassSpec) Size() (n int) {
	var l int
	_ = l
	if m.MTU != 0 {
		n += 1 + sovQos(uint64(m.MTU))
	}
	if m.PFC != nil {
		l = m.PFC.Size()
		n += 1 + l + sovQos(uint64(l))
	}
	if m.Scheduler != nil {
		l = m.Scheduler.Size()
		n += 1 + l + sovQos(uint64(l))
	}
	if m.UplinkClassMap != nil {
		l = m.UplinkClassMap.Size()
		n += 1 + l + sovQos(uint64(l))
	}
	if m.Marking != nil {
		l = m.Marking.Size()
		n += 1 + l + sovQos(uint64(l))
	}
	return n
}

func (m *PFC) Size() (n int) {
	var l int
	_ = l
	if m.COS != 0 {
		n += 1 + sovQos(uint64(m.COS))
	}
	if m.XonThreshold != 0 {
		n += 1 + sovQos(uint64(m.XonThreshold))
	}
	if m.XOffThreshold != 0 {
		n += 1 + sovQos(uint64(m.XOffThreshold))
	}
	return n
}

func (m *Scheduler) Size() (n int) {
	var l int
	_ = l
	l = len(m.SchedulerType)
	if l > 0 {
		n += 1 + l + sovQos(uint64(l))
	}
	if m.BandwidthPercentage != 0 {
		n += 1 + sovQos(uint64(m.BandwidthPercentage))
	}
	if m.BytesPerSecond != 0 {
		n += 1 + sovQos(uint64(m.BytesPerSecond))
	}
	return n
}

func (m *UplinkClassMap) Size() (n int) {
	var l int
	_ = l
	if m.Dot1QPCP != 0 {
		n += 1 + sovQos(uint64(m.Dot1QPCP))
	}
	if len(m.IPDSCP) > 0 {
		l = 0
		for _, e := range m.IPDSCP {
			l += sovQos(uint64(e))
		}
		n += 1 + sovQos(uint64(l)) + l
	}
	return n
}

func (m *Marking) Size() (n int) {
	var l int
	_ = l
	if m.EnableDot1QPCPRewrite {
		n += 2
	}
	if m.EnableIPDSCPRewrite {
		n += 2
	}
	if m.Dot1QPCP != 0 {
		n += 1 + sovQos(uint64(m.Dot1QPCP))
	}
	if m.IPDSCP != 0 {
		n += 1 + sovQos(uint64(m.IPDSCP))
	}
	return n
}

func (m *QosClassStatus) Size() (n int) {
	var l int
	_ = l
	if m.QosClassID != 0 {
		n += 1 + sovQos(uint64(m.QosClassID))
	}
	return n
}

func (m *QosClassList) Size() (n int) {
	var l int
	_ = l
	if len(m.QoSClasses) > 0 {
		for _, e := range m.QoSClasses {
			l = e.Size()
			n += 1 + l + sovQos(uint64(l))
		}
	}
	return n
}

func (m *QosClassEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovQos(uint64(m.EventType))
	}
	l = m.QosClass.Size()
	n += 1 + l + sovQos(uint64(l))
	return n
}

func (m *QosClassEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.QosClassEvents) > 0 {
		for _, e := range m.QosClassEvents {
			l = e.Size()
			n += 1 + l + sovQos(uint64(l))
		}
	}
	return n
}

func sovQos(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozQos(x uint64) (n int) {
	return sovQos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QosClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QosClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QosClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QosClassSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QosClassSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QosClassSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTU", wireType)
			}
			m.MTU = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTU |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PFC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PFC == nil {
				m.PFC = &PFC{}
			}
			if err := m.PFC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheduler", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scheduler == nil {
				m.Scheduler = &Scheduler{}
			}
			if err := m.Scheduler.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkClassMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UplinkClassMap == nil {
				m.UplinkClassMap = &UplinkClassMap{}
			}
			if err := m.UplinkClassMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Marking == nil {
				m.Marking = &Marking{}
			}
			if err := m.Marking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PFC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PFC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PFC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field COS", wireType)
			}
			m.COS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.COS |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XonThreshold", wireType)
			}
			m.XonThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XonThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XOffThreshold", wireType)
			}
			m.XOffThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XOffThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Scheduler) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Scheduler: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Scheduler: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchedulerType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandwidthPercentage", wireType)
			}
			m.BandwidthPercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BandwidthPercentage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesPerSecond", wireType)
			}
			m.BytesPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesPerSecond |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UplinkClassMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UplinkClassMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UplinkClassMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dot1QPCP", wireType)
			}
			m.Dot1QPCP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dot1QPCP |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IPDSCP = append(m.IPDSCP, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQos
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IPDSCP = append(m.IPDSCP, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IPDSCP", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Marking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Marking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Marking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDot1QPCPRewrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableDot1QPCPRewrite = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIPDSCPRewrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableIPDSCPRewrite = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dot1QPCP", wireType)
			}
			m.Dot1QPCP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dot1QPCP |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPDSCP", wireType)
			}
			m.IPDSCP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IPDSCP |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QosClassStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QosClassStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QosClassStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QosClassID", wireType)
			}
			m.QosClassID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QosClassID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QosClassList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QosClassList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QosClassList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QoSClasses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QoSClasses = append(m.QoSClasses, &QosClass{})
			if err := m.QoSClasses[len(m.QoSClasses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QosClassEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QosClassEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QosClassEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QosClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QosClass.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QosClassEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QosClassEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QosClassEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QosClassEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QosClassEvents = append(m.QosClassEvents, &QosClassEvent{})
			if err := m.QosClassEvents[len(m.QosClassEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthQos
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQos
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQos(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQos = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQos   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("qos.proto", fileDescriptorQos) }

var fileDescriptorQos = []byte{
	// 1109 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xc7, 0xb3, 0xb6, 0x49, 0x93, 0x49, 0xec, 0x3a, 0x63, 0xda, 0x38, 0x4e, 0xe5, 0x8d, 0x96,
	0x17, 0xe5, 0xd0, 0xb5, 0x5b, 0x97, 0x03, 0x08, 0x41, 0xc5, 0x3a, 0x0e, 0x84, 0x92, 0xc4, 0xb1,
	0x5d, 0xda, 0x03, 0x52, 0x59, 0xaf, 0xc7, 0xf6, 0xd2, 0xf5, 0xcc, 0xc4, 0x33, 0x6e, 0x1a, 0xa1,
	0x9e, 0x90, 0xf8, 0x0c, 0xdc, 0x41, 0x42, 0xe2, 0x82, 0xc4, 0x07, 0xe0, 0xc4, 0xa1, 0xc7, 0x7e,
	0x01, 0x56, 0x28, 0xdc, 0xf6, 0x53, 0xa0, 0x99, 0x7d, 0x1b, 0x27, 0x2e, 0x88, 0xdb, 0xce, 0xf3,
	0x3c, 0xff, 0xdf, 0x3c, 0xf3, 0xdf, 0xd9, 0x99, 0x05, 0xab, 0xa7, 0x84, 0xd5, 0xe8, 0x94, 0x70,
	0x02, 0x57, 0x30, 0xe2, 0xf2, 0xa9, 0x72, 0x6b, 0x44, 0xc8, 0xc8, 0x43, 0x75, 0x9b, 0xba, 0x75,
	0x1b, 0x63, 0xc2, 0x6d, 0xee, 0x12, 0x1c, 0xd5, 0x55, 0x5a, 0x23, 0x97, 0x8f, 0x67, 0xfd, 0x9a,
	0x43, 0x26, 0x75, 0x8a, 0x30, 0xb3, 0xf1, 0x80, 0xd4, 0xd9, 0x59, 0xfd, 0x19, 0xc2, 0xae, 0x83,
	0xea, 0x33, 0xee, 0x7a, 0x4c, 0x48, 0x47, 0x08, 0xab, 0xea, 0xba, 0x8b, 0x1d, 0x6f, 0x36, 0x40,
	0x31, 0xc6, 0x54, 0x30, 0x23, 0x32, 0x22, 0x75, 0x19, 0xee, 0xcf, 0x86, 0x72, 0x24, 0x07, 0xf2,
	0x29, 0x2a, 0x7f, 0xe7, 0x35, 0xb3, 0x8a, 0x1e, 0x27, 0x88, 0xdb, 0x61, 0x99, 0xf1, 0x73, 0x06,
	0xac, 0x9c, 0x10, 0xd6, 0xf4, 0x6c, 0xc6, 0xe0, 0xc7, 0x60, 0xa5, 0x77, 0x4e, 0xd1, 0x21, 0xe2,
	0x76, 0x59, 0xdb, 0xd1, 0x76, 0xd7, 0x1a, 0xf9, 0x9a, 0x4d, 0xdd, 0x5a, 0x1c, 0xb4, 0x4a, 0x2f,
	0x7d, 0x7d, 0xe9, 0x95, 0xaf, 0x6b, 0x81, 0xaf, 0x5f, 0xbb, 0xed, 0x62, 0xcf, 0xc5, 0xa8, 0x93,
	0x68, 0xe0, 0x03, 0x00, 0x8e, 0xfb, 0xdf, 0x20, 0x87, 0x4b, 0x42, 0x46, 0x12, 0xae, 0x4b, 0x42,
	0x1a, 0xb6, 0x2a, 0x0a, 0xa3, 0x20, 0x3a, 0xb9, 0x4d, 0x26, 0x2e, 0x47, 0x13, 0xca, 0xcf, 0x3b,
	0x8a, 0x1c, 0x5a, 0x20, 0xd7, 0xa5, 0xc8, 0x29, 0x67, 0x25, 0xe6, 0x66, 0x2d, 0x76, 0xbb, 0x16,
	0xb7, 0x2b, 0xb2, 0xd6, 0x4d, 0x41, 0x13, 0x24, 0x46, 0x91, 0xa3, 0x90, 0xa4, 0x16, 0x7e, 0x0e,
	0x96, 0xbb, 0xdc, 0xe6, 0x33, 0x56, 0xce, 0x49, 0x4a, 0x79, 0x01, 0x45, 0xe6, 0xad, 0x72, 0xc4,
	0x29, 0x32, 0x39, 0x56, 0x48, 0x11, 0xc1, 0xf8, 0x33, 0x03, 0xd6, 0xd5, 0xa9, 0xe1, 0x5b, 0x20,
	0x7b, 0xd8, 0x7b, 0x28, 0x8d, 0xca, 0x5b, 0x1b, 0x81, 0xaf, 0xe7, 0x27, 0x7c, 0xa6, 0x08, 0x45,
	0x16, 0x36, 0x40, 0xb6, 0xbd, 0xdf, 0x8c, 0xbc, 0xc8, 0xa7, 0xd3, 0xb7, 0xf7, 0x9b, 0xa1, 0x86,
	0x0e, 0xd5, 0xb6, 0x45, 0x31, 0x3c, 0x02, 0xab, 0x5d, 0x67, 0x8c, 0x06, 0x33, 0x0f, 0x4d, 0xa3,
	0xe5, 0x97, 0x52, 0x65, 0x92, 0xb2, 0xb6, 0x03, 0x5f, 0xdf, 0x3c, 0x25, 0xcc, 0x64, 0x71, 0x48,
	0x21, 0xa5, 0x08, 0xf8, 0x35, 0x28, 0x3c, 0xa4, 0x9e, 0x8b, 0x9f, 0xca, 0xde, 0x0f, 0x6d, 0x7a,
	0xd5, 0x8d, 0xf9, 0xbc, 0x55, 0x0d, 0x7c, 0xbd, 0x32, 0x93, 0x31, 0xd3, 0x11, 0x41, 0x73, 0x62,
	0x53, 0x05, 0x7e, 0x89, 0x07, 0x2d, 0x70, 0xed, 0xd0, 0x9e, 0x3e, 0x75, 0xf1, 0xa8, 0xfc, 0x86,
	0x44, 0x6f, 0xa4, 0xe8, 0x28, 0x61, 0xdd, 0x08, 0x7c, 0x7d, 0x63, 0x12, 0x0e, 0x14, 0x54, 0x2c,
	0x34, 0x7e, 0xd5, 0xa4, 0x55, 0xc2, 0xd6, 0xe6, 0x71, 0x57, 0xb5, 0xd5, 0x21, 0xea, 0xfb, 0x10,
	0x59, 0x78, 0x1f, 0xac, 0x3f, 0x26, 0xb8, 0x37, 0x9e, 0x22, 0x36, 0x26, 0xde, 0x40, 0xfa, 0x9b,
	0x0f, 0x0d, 0x79, 0x4e, 0xb0, 0xc9, 0xe3, 0x84, 0xa2, 0x9b, 0x13, 0x40, 0x0b, 0xe4, 0x1f, 0x1f,
	0x0f, 0x87, 0x29, 0x21, 0x2b, 0x09, 0xb7, 0x02, 0x5f, 0x2f, 0x3f, 0x27, 0xc3, 0xe1, 0x42, 0xc4,
	0xbc, 0xc4, 0xf8, 0x23, 0xa3, 0xbc, 0x28, 0xf8, 0x04, 0xe4, 0x93, 0x81, 0xf8, 0x22, 0xe4, 0x0a,
	0x56, 0xad, 0x0f, 0x7e, 0xf9, 0x7e, 0x6b, 0xab, 0xcb, 0xa7, 0x2d, 0x3c, 0x9b, 0xec, 0x9e, 0x10,
	0x96, 0xd4, 0xc8, 0xaf, 0x4a, 0x4c, 0x97, 0xbc, 0x3d, 0x93, 0x9f, 0x53, 0xa4, 0x4e, 0x37, 0xc7,
	0x83, 0x3d, 0x50, 0xb2, 0x6c, 0x3c, 0x38, 0x73, 0x07, 0x7c, 0xdc, 0x46, 0x53, 0x07, 0x61, 0x6e,
	0x8f, 0x50, 0xb4, 0x74, 0x23, 0xf0, 0xf5, 0x6a, 0x3f, 0x4e, 0x9b, 0x34, 0xc9, 0x47, 0x3c, 0x4e,
	0xcf, 0x3b, 0x8b, 0xe4, 0x70, 0x1f, 0x14, 0xac, 0x73, 0x8e, 0x58, 0x1b, 0x4d, 0xbb, 0xc8, 0x21,
	0x38, 0x76, 0x42, 0x6e, 0x81, 0xbe, 0xc8, 0x08, 0x98, 0xc9, 0x64, 0x4e, 0xdd, 0x02, 0xf3, 0x2a,
	0xe3, 0x7d, 0x90, 0x93, 0x5d, 0x16, 0x00, 0xe8, 0x36, 0x3f, 0x6b, 0xed, 0x3d, 0x39, 0x3a, 0x3e,
	0x6a, 0x15, 0x97, 0xd2, 0xf1, 0xde, 0xa3, 0x4e, 0xa7, 0xa8, 0xc1, 0x22, 0x58, 0x0f, 0xc7, 0xdd,
	0x5e, 0xe7, 0xa0, 0xd9, 0x2b, 0x66, 0x0c, 0x7e, 0x79, 0x7b, 0xc2, 0x7b, 0x60, 0x65, 0x8f, 0xf0,
	0xbb, 0x27, 0xed, 0x66, 0x3b, 0xda, 0x07, 0x9b, 0x81, 0xaf, 0x97, 0x06, 0x84, 0xdf, 0x3d, 0x35,
	0xa9, 0xa3, 0xee, 0xc4, 0xa4, 0x10, 0x9a, 0x60, 0xf9, 0xa0, 0xbd, 0xd7, 0x6d, 0xb6, 0xcb, 0x99,
	0x9d, 0xec, 0x6e, 0x3e, 0xdc, 0x6f, 0x2e, 0x35, 0x07, 0x6c, 0x4e, 0x10, 0x15, 0x19, 0x3f, 0x66,
	0x92, 0x3d, 0x0b, 0xbf, 0x02, 0x37, 0x5a, 0xd8, 0xee, 0x7b, 0x28, 0x86, 0x75, 0xd0, 0xd9, 0xd4,
	0xe5, 0xe1, 0x2b, 0x5c, 0xb1, 0xde, 0x0d, 0x7c, 0xdd, 0x40, 0xb2, 0xc0, 0x4c, 0x7a, 0x30, 0xa7,
	0x61, 0x8d, 0x82, 0x5e, 0x0c, 0x81, 0x5f, 0x82, 0x52, 0x98, 0x08, 0x67, 0x8e, 0xd9, 0x19, 0xc9,
	0x7e, 0x3b, 0xf0, 0xf5, 0x9d, 0x88, 0x1d, 0x35, 0xbb, 0x80, 0xbc, 0x08, 0x30, 0xe7, 0x52, 0xf6,
	0xff, 0xbb, 0x94, 0x93, 0x92, 0xff, 0x70, 0xc9, 0x02, 0x85, 0xf9, 0x83, 0x12, 0xde, 0x01, 0x20,
	0x8e, 0x1c, 0xec, 0x49, 0x83, 0x72, 0x56, 0x31, 0xf0, 0xf5, 0x75, 0x57, 0xdd, 0x1d, 0x4a, 0x8d,
	0x61, 0xa5, 0xe7, 0xe6, 0x17, 0x2e, 0xe3, 0xb0, 0x21, 0x08, 0x5d, 0x39, 0x46, 0xac, 0xac, 0xed,
	0x64, 0x77, 0xd7, 0x1a, 0xf0, 0xea, 0xc1, 0xdc, 0x51, 0xaa, 0x8c, 0x9f, 0x34, 0x90, 0x8f, 0x13,
	0xad, 0x67, 0x08, 0x73, 0xb8, 0x0f, 0x56, 0xe5, 0x43, 0xf2, 0xa9, 0x15, 0x1a, 0x05, 0x79, 0xd5,
	0x24, 0x51, 0xab, 0x1c, 0xf8, 0xfa, 0x9b, 0x48, 0x0c, 0x2f, 0x7f, 0x59, 0xa9, 0x14, 0x3e, 0x48,
	0xef, 0xbf, 0xe8, 0x94, 0x5e, 0xd0, 0x8b, 0xb5, 0x1d, 0x5d, 0x0f, 0x25, 0x71, 0xdc, 0xca, 0x13,
	0x51, 0x75, 0x37, 0x2e, 0x33, 0x7a, 0x60, 0x63, 0xae, 0x4b, 0xb9, 0xde, 0xfb, 0xa9, 0x87, 0x32,
	0x18, 0xaf, 0x79, 0xf3, 0xea, 0x3c, 0x32, 0xdf, 0xb9, 0x54, 0xde, 0xf8, 0x3d, 0x03, 0xd6, 0xe2,
	0xd0, 0x27, 0xd4, 0x85, 0xef, 0x81, 0xb5, 0x4f, 0x11, 0x4f, 0x6e, 0xed, 0xcb, 0x37, 0x6c, 0x65,
	0xc1, 0x02, 0x8c, 0x25, 0xf8, 0x21, 0x28, 0x88, 0x76, 0xe2, 0x08, 0x5a, 0x20, 0x5c, 0x70, 0xc9,
	0x0a, 0x89, 0xb1, 0x04, 0x9b, 0xe0, 0xfa, 0x23, 0x9b, 0x3b, 0xe3, 0x7f, 0x53, 0x6f, 0xbf, 0x66,
	0x3d, 0x21, 0xe2, 0x8e, 0x56, 0x39, 0xfb, 0xed, 0xbb, 0x2d, 0xa6, 0xfc, 0x6e, 0xe4, 0x3c, 0x61,
	0x4f, 0x8e, 0x12, 0xc6, 0xe1, 0xf2, 0x00, 0x79, 0x88, 0x23, 0x98, 0xa5, 0x33, 0x5e, 0xf9, 0xa8,
	0xfe, 0x6d, 0xca, 0xad, 0xf5, 0x10, 0xb6, 0x31, 0x7f, 0x31, 0x17, 0x3b, 0xb2, 0x27, 0x88, 0x51,
	0xdb, 0x41, 0x57, 0xc3, 0x2f, 0x8c, 0xeb, 0xe2, 0x1f, 0xe7, 0x94, 0xb0, 0xba, 0x13, 0xb6, 0x6a,
	0x15, 0x5f, 0x5e, 0x54, 0xb5, 0x57, 0x17, 0x55, 0xed, 0xaf, 0x8b, 0xaa, 0xf6, 0xc3, 0xdf, 0xd5,
	0xa5, 0xb6, 0xd6, 0x5f, 0x96, 0x9d, 0xde, 0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xb4, 0xb4,
	0x26, 0xd1, 0x09, 0x00, 0x00,
}
