// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: route.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BGPAddressFamily int32

const (
	BGPAddressFamily_IPv4Unicast BGPAddressFamily = 0
	BGPAddressFamily_EVPN        BGPAddressFamily = 1
)

var BGPAddressFamily_name = map[int32]string{
	0: "IPv4Unicast",
	1: "EVPN",
}
var BGPAddressFamily_value = map[string]int32{
	"IPv4Unicast": 0,
	"EVPN":        1,
}

func (x BGPAddressFamily) String() string {
	return proto.EnumName(BGPAddressFamily_name, int32(x))
}
func (BGPAddressFamily) EnumDescriptor() ([]byte, []int) { return fileDescriptorRoute, []int{0} }

type RouteDistinguisher_RDType int32

const (
	RouteDistinguisher_Type0 RouteDistinguisher_RDType = 0
	RouteDistinguisher_Type1 RouteDistinguisher_RDType = 1
	RouteDistinguisher_Type2 RouteDistinguisher_RDType = 2
)

var RouteDistinguisher_RDType_name = map[int32]string{
	0: "Type0",
	1: "Type1",
	2: "Type2",
}
var RouteDistinguisher_RDType_value = map[string]int32{
	"Type0": 0,
	"Type1": 1,
	"Type2": 2,
}

func (x RouteDistinguisher_RDType) String() string {
	return proto.EnumName(RouteDistinguisher_RDType_name, int32(x))
}
func (RouteDistinguisher_RDType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorRoute, []int{0, 0}
}

type RouteDistinguisher struct {
	Type          string `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	AdminValue    uint32 `protobuf:"varint,2,opt,name=AdminValue,proto3" json:"admin-value,omitempty"`
	AssignedValue uint32 `protobuf:"varint,3,opt,name=AssignedValue,proto3" json:"assigned-value,omitempty"`
}

func (m *RouteDistinguisher) Reset()                    { *m = RouteDistinguisher{} }
func (m *RouteDistinguisher) String() string            { return proto.CompactTextString(m) }
func (*RouteDistinguisher) ProtoMessage()               {}
func (*RouteDistinguisher) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{0} }

func (m *RouteDistinguisher) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RouteDistinguisher) GetAdminValue() uint32 {
	if m != nil {
		return m.AdminValue
	}
	return 0
}

func (m *RouteDistinguisher) GetAssignedValue() uint32 {
	if m != nil {
		return m.AssignedValue
	}
	return 0
}

type RDSpec struct {
	AddressFamily string                `protobuf:"bytes,1,opt,name=AddressFamily,proto3" json:"address-family,omitempty"`
	RDAuto        bool                  `protobuf:"varint,2,opt,name=RDAuto,proto3" json:"rd-auto,omitempty"`
	RD            *RouteDistinguisher   `protobuf:"bytes,3,opt,name=RD" json:"rd,omitempty"`
	ExportRTs     []*RouteDistinguisher `protobuf:"bytes,4,rep,name=ExportRTs" json:"rt-export,omitempty"`
	ImportRTs     []*RouteDistinguisher `protobuf:"bytes,5,rep,name=ImportRTs" json:"rt-import,omitempty"`
}

func (m *RDSpec) Reset()                    { *m = RDSpec{} }
func (m *RDSpec) String() string            { return proto.CompactTextString(m) }
func (*RDSpec) ProtoMessage()               {}
func (*RDSpec) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{1} }

func (m *RDSpec) GetAddressFamily() string {
	if m != nil {
		return m.AddressFamily
	}
	return ""
}

func (m *RDSpec) GetRDAuto() bool {
	if m != nil {
		return m.RDAuto
	}
	return false
}

func (m *RDSpec) GetRD() *RouteDistinguisher {
	if m != nil {
		return m.RD
	}
	return nil
}

func (m *RDSpec) GetExportRTs() []*RouteDistinguisher {
	if m != nil {
		return m.ExportRTs
	}
	return nil
}

func (m *RDSpec) GetImportRTs() []*RouteDistinguisher {
	if m != nil {
		return m.ImportRTs
	}
	return nil
}

type Route struct {
	Prefix              string `protobuf:"bytes,1,opt,name=Prefix,proto3" json:"prefix,omitempty"`
	NexhHop             string `protobuf:"bytes,2,opt,name=NexhHop,proto3" json:"next-hop,omitempty"`
	TargetVirtualRouter string `protobuf:"bytes,3,opt,name=TargetVirtualRouter,proto3" json:"target-virtual-router,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{2} }

func (m *Route) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Route) GetNexhHop() string {
	if m != nil {
		return m.NexhHop
	}
	return ""
}

func (m *Route) GetTargetVirtualRouter() string {
	if m != nil {
		return m.TargetVirtualRouter
	}
	return ""
}

type RouteTableSpec struct {
}

func (m *RouteTableSpec) Reset()                    { *m = RouteTableSpec{} }
func (m *RouteTableSpec) String() string            { return proto.CompactTextString(m) }
func (*RouteTableSpec) ProtoMessage()               {}
func (*RouteTableSpec) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{3} }

type RouteTableStatus struct {
	Routes []*Route `protobuf:"bytes,1,rep,name=Routes" json:"routes,omitempty"`
}

func (m *RouteTableStatus) Reset()                    { *m = RouteTableStatus{} }
func (m *RouteTableStatus) String() string            { return proto.CompactTextString(m) }
func (*RouteTableStatus) ProtoMessage()               {}
func (*RouteTableStatus) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{4} }

func (m *RouteTableStatus) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

type RouteTable struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           RouteTableSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         RouteTableStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *RouteTable) Reset()                    { *m = RouteTable{} }
func (m *RouteTable) String() string            { return proto.CompactTextString(m) }
func (*RouteTable) ProtoMessage()               {}
func (*RouteTable) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{5} }

func (m *RouteTable) GetSpec() RouteTableSpec {
	if m != nil {
		return m.Spec
	}
	return RouteTableSpec{}
}

func (m *RouteTable) GetStatus() RouteTableStatus {
	if m != nil {
		return m.Status
	}
	return RouteTableStatus{}
}

type RouteTableEvent struct {
	EventType  api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	RouteTable RouteTable    `protobuf:"bytes,2,opt,name=RouteTable" json:"route-table,omitempty"`
}

func (m *RouteTableEvent) Reset()                    { *m = RouteTableEvent{} }
func (m *RouteTableEvent) String() string            { return proto.CompactTextString(m) }
func (*RouteTableEvent) ProtoMessage()               {}
func (*RouteTableEvent) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{6} }

func (m *RouteTableEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *RouteTableEvent) GetRouteTable() RouteTable {
	if m != nil {
		return m.RouteTable
	}
	return RouteTable{}
}

type RouteTableEventList struct {
	RouteTableEvents []*RouteTableEvent `protobuf:"bytes,1,rep,name=routeTableEvents" json:"routeTableEvents,omitempty"`
}

func (m *RouteTableEventList) Reset()                    { *m = RouteTableEventList{} }
func (m *RouteTableEventList) String() string            { return proto.CompactTextString(m) }
func (*RouteTableEventList) ProtoMessage()               {}
func (*RouteTableEventList) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{7} }

func (m *RouteTableEventList) GetRouteTableEvents() []*RouteTableEvent {
	if m != nil {
		return m.RouteTableEvents
	}
	return nil
}

type RouteTableList struct {
	RouteTables []*RouteTable `protobuf:"bytes,1,rep,name=routeTables" json:"routeTables,omitempty"`
}

func (m *RouteTableList) Reset()                    { *m = RouteTableList{} }
func (m *RouteTableList) String() string            { return proto.CompactTextString(m) }
func (*RouteTableList) ProtoMessage()               {}
func (*RouteTableList) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{8} }

func (m *RouteTableList) GetRouteTables() []*RouteTable {
	if m != nil {
		return m.RouteTables
	}
	return nil
}

type EVPNConfig struct {
	Shutdown bool `protobuf:"varint,1,opt,name=Shutdown,proto3" json:"shutdown,omitempty"`
}

func (m *EVPNConfig) Reset()                    { *m = EVPNConfig{} }
func (m *EVPNConfig) String() string            { return proto.CompactTextString(m) }
func (*EVPNConfig) ProtoMessage()               {}
func (*EVPNConfig) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{9} }

func (m *EVPNConfig) GetShutdown() bool {
	if m != nil {
		return m.Shutdown
	}
	return false
}

type BGPNeighbor struct {
	Shutdown              bool     `protobuf:"varint,1,opt,name=Shutdown,proto3" json:"shutdown,omitempty"`
	IPAddress             string   `protobuf:"bytes,2,opt,name=IPAddress,proto3" json:"ip-address,omitempty"`
	RemoteAS              uint32   `protobuf:"varint,3,opt,name=RemoteAS,proto3" json:"remote-as,omitempty"`
	MultiHop              uint32   `protobuf:"varint,4,opt,name=MultiHop,proto3" json:"multi-hop,omitempty"`
	EnableAddressFamilies []string `protobuf:"bytes,5,rep,name=EnableAddressFamilies" json:"enable-address-families,omitempty"`
	Password              string   `protobuf:"bytes,6,opt,name=Password,proto3" json:"password,omitempty"`
}

func (m *BGPNeighbor) Reset()                    { *m = BGPNeighbor{} }
func (m *BGPNeighbor) String() string            { return proto.CompactTextString(m) }
func (*BGPNeighbor) ProtoMessage()               {}
func (*BGPNeighbor) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{10} }

func (m *BGPNeighbor) GetShutdown() bool {
	if m != nil {
		return m.Shutdown
	}
	return false
}

func (m *BGPNeighbor) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *BGPNeighbor) GetRemoteAS() uint32 {
	if m != nil {
		return m.RemoteAS
	}
	return 0
}

func (m *BGPNeighbor) GetMultiHop() uint32 {
	if m != nil {
		return m.MultiHop
	}
	return 0
}

func (m *BGPNeighbor) GetEnableAddressFamilies() []string {
	if m != nil {
		return m.EnableAddressFamilies
	}
	return nil
}

func (m *BGPNeighbor) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type BGPConfig struct {
	RouterId  string         `protobuf:"bytes,1,opt,name=RouterId,proto3" json:"router-id,omitempty"`
	ASNumber  uint32         `protobuf:"varint,2,opt,name=ASNumber,proto3" json:"as-number,omitempty"`
	Neighbors []*BGPNeighbor `protobuf:"bytes,3,rep,name=Neighbors" json:"neighbors,omitempty"`
}

func (m *BGPConfig) Reset()                    { *m = BGPConfig{} }
func (m *BGPConfig) String() string            { return proto.CompactTextString(m) }
func (*BGPConfig) ProtoMessage()               {}
func (*BGPConfig) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{11} }

func (m *BGPConfig) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

func (m *BGPConfig) GetASNumber() uint32 {
	if m != nil {
		return m.ASNumber
	}
	return 0
}

func (m *BGPConfig) GetNeighbors() []*BGPNeighbor {
	if m != nil {
		return m.Neighbors
	}
	return nil
}

type RoutingConfigSpec struct {
	BGPConfig  *BGPConfig  `protobuf:"bytes,1,opt,name=BGPConfig" json:"bgp-config,omitempty"`
	EVPNConfig *EVPNConfig `protobuf:"bytes,2,opt,name=EVPNConfig" json:"evpn-config,omitempty"`
}

func (m *RoutingConfigSpec) Reset()                    { *m = RoutingConfigSpec{} }
func (m *RoutingConfigSpec) String() string            { return proto.CompactTextString(m) }
func (*RoutingConfigSpec) ProtoMessage()               {}
func (*RoutingConfigSpec) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{12} }

func (m *RoutingConfigSpec) GetBGPConfig() *BGPConfig {
	if m != nil {
		return m.BGPConfig
	}
	return nil
}

func (m *RoutingConfigSpec) GetEVPNConfig() *EVPNConfig {
	if m != nil {
		return m.EVPNConfig
	}
	return nil
}

type RoutingConfigStatus struct {
}

func (m *RoutingConfigStatus) Reset()                    { *m = RoutingConfigStatus{} }
func (m *RoutingConfigStatus) String() string            { return proto.CompactTextString(m) }
func (*RoutingConfigStatus) ProtoMessage()               {}
func (*RoutingConfigStatus) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{13} }

type RoutingConfigEvent struct {
	EventType     api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	RoutingConfig RoutingConfig `protobuf:"bytes,2,opt,name=RoutingConfig" json:"routing-config,omitempty"`
}

func (m *RoutingConfigEvent) Reset()                    { *m = RoutingConfigEvent{} }
func (m *RoutingConfigEvent) String() string            { return proto.CompactTextString(m) }
func (*RoutingConfigEvent) ProtoMessage()               {}
func (*RoutingConfigEvent) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{14} }

func (m *RoutingConfigEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *RoutingConfigEvent) GetRoutingConfig() RoutingConfig {
	if m != nil {
		return m.RoutingConfig
	}
	return RoutingConfig{}
}

type RoutingConfigEventList struct {
	RoutingConfigEvents []*RoutingConfigEvent `protobuf:"bytes,1,rep,name=routingConfigEvents" json:"routingConfigEvents,omitempty"`
}

func (m *RoutingConfigEventList) Reset()                    { *m = RoutingConfigEventList{} }
func (m *RoutingConfigEventList) String() string            { return proto.CompactTextString(m) }
func (*RoutingConfigEventList) ProtoMessage()               {}
func (*RoutingConfigEventList) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{15} }

func (m *RoutingConfigEventList) GetRoutingConfigEvents() []*RoutingConfigEvent {
	if m != nil {
		return m.RoutingConfigEvents
	}
	return nil
}

type RoutingConfigList struct {
	RoutingConfigs []*RoutingConfig `protobuf:"bytes,1,rep,name=routingConfigs" json:"routingConfigs,omitempty"`
}

func (m *RoutingConfigList) Reset()                    { *m = RoutingConfigList{} }
func (m *RoutingConfigList) String() string            { return proto.CompactTextString(m) }
func (*RoutingConfigList) ProtoMessage()               {}
func (*RoutingConfigList) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{16} }

func (m *RoutingConfigList) GetRoutingConfigs() []*RoutingConfig {
	if m != nil {
		return m.RoutingConfigs
	}
	return nil
}

type RoutingConfig struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           RoutingConfigSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         RoutingConfigStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *RoutingConfig) Reset()                    { *m = RoutingConfig{} }
func (m *RoutingConfig) String() string            { return proto.CompactTextString(m) }
func (*RoutingConfig) ProtoMessage()               {}
func (*RoutingConfig) Descriptor() ([]byte, []int) { return fileDescriptorRoute, []int{17} }

func (m *RoutingConfig) GetSpec() RoutingConfigSpec {
	if m != nil {
		return m.Spec
	}
	return RoutingConfigSpec{}
}

func (m *RoutingConfig) GetStatus() RoutingConfigStatus {
	if m != nil {
		return m.Status
	}
	return RoutingConfigStatus{}
}

func init() {
	proto.RegisterType((*RouteDistinguisher)(nil), "netproto.RouteDistinguisher")
	proto.RegisterType((*RDSpec)(nil), "netproto.RDSpec")
	proto.RegisterType((*Route)(nil), "netproto.Route")
	proto.RegisterType((*RouteTableSpec)(nil), "netproto.RouteTableSpec")
	proto.RegisterType((*RouteTableStatus)(nil), "netproto.RouteTableStatus")
	proto.RegisterType((*RouteTable)(nil), "netproto.RouteTable")
	proto.RegisterType((*RouteTableEvent)(nil), "netproto.RouteTableEvent")
	proto.RegisterType((*RouteTableEventList)(nil), "netproto.RouteTableEventList")
	proto.RegisterType((*RouteTableList)(nil), "netproto.RouteTableList")
	proto.RegisterType((*EVPNConfig)(nil), "netproto.EVPNConfig")
	proto.RegisterType((*BGPNeighbor)(nil), "netproto.BGPNeighbor")
	proto.RegisterType((*BGPConfig)(nil), "netproto.BGPConfig")
	proto.RegisterType((*RoutingConfigSpec)(nil), "netproto.RoutingConfigSpec")
	proto.RegisterType((*RoutingConfigStatus)(nil), "netproto.RoutingConfigStatus")
	proto.RegisterType((*RoutingConfigEvent)(nil), "netproto.RoutingConfigEvent")
	proto.RegisterType((*RoutingConfigEventList)(nil), "netproto.RoutingConfigEventList")
	proto.RegisterType((*RoutingConfigList)(nil), "netproto.RoutingConfigList")
	proto.RegisterType((*RoutingConfig)(nil), "netproto.RoutingConfig")
	proto.RegisterEnum("netproto.BGPAddressFamily", BGPAddressFamily_name, BGPAddressFamily_value)
	proto.RegisterEnum("netproto.RouteDistinguisher_RDType", RouteDistinguisher_RDType_name, RouteDistinguisher_RDType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RoutingConfigApiV1 service

type RoutingConfigApiV1Client interface {
	ListRoutingConfigs(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RoutingConfigList, error)
	WatchRoutingConfigs(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (RoutingConfigApiV1_WatchRoutingConfigsClient, error)
	RoutingConfigOperUpdate(ctx context.Context, opts ...grpc.CallOption) (RoutingConfigApiV1_RoutingConfigOperUpdateClient, error)
}

type routingConfigApiV1Client struct {
	cc *grpc.ClientConn
}

func NewRoutingConfigApiV1Client(cc *grpc.ClientConn) RoutingConfigApiV1Client {
	return &routingConfigApiV1Client{cc}
}

func (c *routingConfigApiV1Client) ListRoutingConfigs(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RoutingConfigList, error) {
	out := new(RoutingConfigList)
	err := grpc.Invoke(ctx, "/netproto.RoutingConfigApiV1/ListRoutingConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingConfigApiV1Client) WatchRoutingConfigs(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (RoutingConfigApiV1_WatchRoutingConfigsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RoutingConfigApiV1_serviceDesc.Streams[0], c.cc, "/netproto.RoutingConfigApiV1/WatchRoutingConfigs", opts...)
	if err != nil {
		return nil, err
	}
	x := &routingConfigApiV1WatchRoutingConfigsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RoutingConfigApiV1_WatchRoutingConfigsClient interface {
	Recv() (*RoutingConfigEventList, error)
	grpc.ClientStream
}

type routingConfigApiV1WatchRoutingConfigsClient struct {
	grpc.ClientStream
}

func (x *routingConfigApiV1WatchRoutingConfigsClient) Recv() (*RoutingConfigEventList, error) {
	m := new(RoutingConfigEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routingConfigApiV1Client) RoutingConfigOperUpdate(ctx context.Context, opts ...grpc.CallOption) (RoutingConfigApiV1_RoutingConfigOperUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RoutingConfigApiV1_serviceDesc.Streams[1], c.cc, "/netproto.RoutingConfigApiV1/RoutingConfigOperUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &routingConfigApiV1RoutingConfigOperUpdateClient{stream}
	return x, nil
}

type RoutingConfigApiV1_RoutingConfigOperUpdateClient interface {
	Send(*RoutingConfigEvent) error
	CloseAndRecv() (*api.TypeMeta, error)
	grpc.ClientStream
}

type routingConfigApiV1RoutingConfigOperUpdateClient struct {
	grpc.ClientStream
}

func (x *routingConfigApiV1RoutingConfigOperUpdateClient) Send(m *RoutingConfigEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routingConfigApiV1RoutingConfigOperUpdateClient) CloseAndRecv() (*api.TypeMeta, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.TypeMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RoutingConfigApiV1 service

type RoutingConfigApiV1Server interface {
	ListRoutingConfigs(context.Context, *api.ListWatchOptions) (*RoutingConfigList, error)
	WatchRoutingConfigs(*api.ListWatchOptions, RoutingConfigApiV1_WatchRoutingConfigsServer) error
	RoutingConfigOperUpdate(RoutingConfigApiV1_RoutingConfigOperUpdateServer) error
}

func RegisterRoutingConfigApiV1Server(s *grpc.Server, srv RoutingConfigApiV1Server) {
	s.RegisterService(&_RoutingConfigApiV1_serviceDesc, srv)
}

func _RoutingConfigApiV1_ListRoutingConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingConfigApiV1Server).ListRoutingConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.RoutingConfigApiV1/ListRoutingConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingConfigApiV1Server).ListRoutingConfigs(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingConfigApiV1_WatchRoutingConfigs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoutingConfigApiV1Server).WatchRoutingConfigs(m, &routingConfigApiV1WatchRoutingConfigsServer{stream})
}

type RoutingConfigApiV1_WatchRoutingConfigsServer interface {
	Send(*RoutingConfigEventList) error
	grpc.ServerStream
}

type routingConfigApiV1WatchRoutingConfigsServer struct {
	grpc.ServerStream
}

func (x *routingConfigApiV1WatchRoutingConfigsServer) Send(m *RoutingConfigEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _RoutingConfigApiV1_RoutingConfigOperUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoutingConfigApiV1Server).RoutingConfigOperUpdate(&routingConfigApiV1RoutingConfigOperUpdateServer{stream})
}

type RoutingConfigApiV1_RoutingConfigOperUpdateServer interface {
	SendAndClose(*api.TypeMeta) error
	Recv() (*RoutingConfigEvent, error)
	grpc.ServerStream
}

type routingConfigApiV1RoutingConfigOperUpdateServer struct {
	grpc.ServerStream
}

func (x *routingConfigApiV1RoutingConfigOperUpdateServer) SendAndClose(m *api.TypeMeta) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routingConfigApiV1RoutingConfigOperUpdateServer) Recv() (*RoutingConfigEvent, error) {
	m := new(RoutingConfigEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RoutingConfigApiV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.RoutingConfigApiV1",
	HandlerType: (*RoutingConfigApiV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRoutingConfigs",
			Handler:    _RoutingConfigApiV1_ListRoutingConfigs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchRoutingConfigs",
			Handler:       _RoutingConfigApiV1_WatchRoutingConfigs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RoutingConfigOperUpdate",
			Handler:       _RoutingConfigApiV1_RoutingConfigOperUpdate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "route.proto",
}

// Client API for RouteTableApiV1 service

type RouteTableApiV1Client interface {
	ListRouteTables(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RouteTableList, error)
	WatchRouteTables(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (RouteTableApiV1_WatchRouteTablesClient, error)
	RouteTableOperUpdate(ctx context.Context, opts ...grpc.CallOption) (RouteTableApiV1_RouteTableOperUpdateClient, error)
}

type routeTableApiV1Client struct {
	cc *grpc.ClientConn
}

func NewRouteTableApiV1Client(cc *grpc.ClientConn) RouteTableApiV1Client {
	return &routeTableApiV1Client{cc}
}

func (c *routeTableApiV1Client) ListRouteTables(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RouteTableList, error) {
	out := new(RouteTableList)
	err := grpc.Invoke(ctx, "/netproto.RouteTableApiV1/ListRouteTables", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeTableApiV1Client) WatchRouteTables(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (RouteTableApiV1_WatchRouteTablesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RouteTableApiV1_serviceDesc.Streams[0], c.cc, "/netproto.RouteTableApiV1/WatchRouteTables", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeTableApiV1WatchRouteTablesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RouteTableApiV1_WatchRouteTablesClient interface {
	Recv() (*RouteTableEventList, error)
	grpc.ClientStream
}

type routeTableApiV1WatchRouteTablesClient struct {
	grpc.ClientStream
}

func (x *routeTableApiV1WatchRouteTablesClient) Recv() (*RouteTableEventList, error) {
	m := new(RouteTableEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeTableApiV1Client) RouteTableOperUpdate(ctx context.Context, opts ...grpc.CallOption) (RouteTableApiV1_RouteTableOperUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RouteTableApiV1_serviceDesc.Streams[1], c.cc, "/netproto.RouteTableApiV1/RouteTableOperUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeTableApiV1RouteTableOperUpdateClient{stream}
	return x, nil
}

type RouteTableApiV1_RouteTableOperUpdateClient interface {
	Send(*RouteTableEvent) error
	CloseAndRecv() (*api.TypeMeta, error)
	grpc.ClientStream
}

type routeTableApiV1RouteTableOperUpdateClient struct {
	grpc.ClientStream
}

func (x *routeTableApiV1RouteTableOperUpdateClient) Send(m *RouteTableEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeTableApiV1RouteTableOperUpdateClient) CloseAndRecv() (*api.TypeMeta, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.TypeMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RouteTableApiV1 service

type RouteTableApiV1Server interface {
	ListRouteTables(context.Context, *api.ListWatchOptions) (*RouteTableList, error)
	WatchRouteTables(*api.ListWatchOptions, RouteTableApiV1_WatchRouteTablesServer) error
	RouteTableOperUpdate(RouteTableApiV1_RouteTableOperUpdateServer) error
}

func RegisterRouteTableApiV1Server(s *grpc.Server, srv RouteTableApiV1Server) {
	s.RegisterService(&_RouteTableApiV1_serviceDesc, srv)
}

func _RouteTableApiV1_ListRouteTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteTableApiV1Server).ListRouteTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.RouteTableApiV1/ListRouteTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteTableApiV1Server).ListRouteTables(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteTableApiV1_WatchRouteTables_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouteTableApiV1Server).WatchRouteTables(m, &routeTableApiV1WatchRouteTablesServer{stream})
}

type RouteTableApiV1_WatchRouteTablesServer interface {
	Send(*RouteTableEventList) error
	grpc.ServerStream
}

type routeTableApiV1WatchRouteTablesServer struct {
	grpc.ServerStream
}

func (x *routeTableApiV1WatchRouteTablesServer) Send(m *RouteTableEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _RouteTableApiV1_RouteTableOperUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteTableApiV1Server).RouteTableOperUpdate(&routeTableApiV1RouteTableOperUpdateServer{stream})
}

type RouteTableApiV1_RouteTableOperUpdateServer interface {
	SendAndClose(*api.TypeMeta) error
	Recv() (*RouteTableEvent, error)
	grpc.ServerStream
}

type routeTableApiV1RouteTableOperUpdateServer struct {
	grpc.ServerStream
}

func (x *routeTableApiV1RouteTableOperUpdateServer) SendAndClose(m *api.TypeMeta) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeTableApiV1RouteTableOperUpdateServer) Recv() (*RouteTableEvent, error) {
	m := new(RouteTableEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RouteTableApiV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.RouteTableApiV1",
	HandlerType: (*RouteTableApiV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRouteTables",
			Handler:    _RouteTableApiV1_ListRouteTables_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchRouteTables",
			Handler:       _RouteTableApiV1_WatchRouteTables_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RouteTableOperUpdate",
			Handler:       _RouteTableApiV1_RouteTableOperUpdate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "route.proto",
}

func (m *RouteDistinguisher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteDistinguisher) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoute(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.AdminValue != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoute(dAtA, i, uint64(m.AdminValue))
	}
	if m.AssignedValue != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoute(dAtA, i, uint64(m.AssignedValue))
	}
	return i, nil
}

func (m *RDSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RDSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AddressFamily) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoute(dAtA, i, uint64(len(m.AddressFamily)))
		i += copy(dAtA[i:], m.AddressFamily)
	}
	if m.RDAuto {
		dAtA[i] = 0x10
		i++
		if m.RDAuto {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RD != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoute(dAtA, i, uint64(m.RD.Size()))
		n1, err := m.RD.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.ExportRTs) > 0 {
		for _, msg := range m.ExportRTs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ImportRTs) > 0 {
		for _, msg := range m.ImportRTs {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Route) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoute(dAtA, i, uint64(len(m.Prefix)))
		i += copy(dAtA[i:], m.Prefix)
	}
	if len(m.NexhHop) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoute(dAtA, i, uint64(len(m.NexhHop)))
		i += copy(dAtA[i:], m.NexhHop)
	}
	if len(m.TargetVirtualRouter) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoute(dAtA, i, uint64(len(m.TargetVirtualRouter)))
		i += copy(dAtA[i:], m.TargetVirtualRouter)
	}
	return i, nil
}

func (m *RouteTableSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTableSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RouteTableStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTableStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RouteTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTable) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRoute(dAtA, i, uint64(m.TypeMeta.Size()))
	n2, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintRoute(dAtA, i, uint64(m.ObjectMeta.Size()))
	n3, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRoute(dAtA, i, uint64(m.Spec.Size()))
	n4, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintRoute(dAtA, i, uint64(m.Status.Size()))
	n5, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *RouteTableEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTableEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoute(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintRoute(dAtA, i, uint64(m.RouteTable.Size()))
	n6, err := m.RouteTable.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *RouteTableEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTableEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RouteTableEvents) > 0 {
		for _, msg := range m.RouteTableEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RouteTableList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTableList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RouteTables) > 0 {
		for _, msg := range m.RouteTables {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EVPNConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EVPNConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Shutdown {
		dAtA[i] = 0x8
		i++
		if m.Shutdown {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *BGPNeighbor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BGPNeighbor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Shutdown {
		dAtA[i] = 0x8
		i++
		if m.Shutdown {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.IPAddress) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoute(dAtA, i, uint64(len(m.IPAddress)))
		i += copy(dAtA[i:], m.IPAddress)
	}
	if m.RemoteAS != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoute(dAtA, i, uint64(m.RemoteAS))
	}
	if m.MultiHop != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoute(dAtA, i, uint64(m.MultiHop))
	}
	if len(m.EnableAddressFamilies) > 0 {
		for _, s := range m.EnableAddressFamilies {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRoute(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *BGPConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BGPConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RouterId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoute(dAtA, i, uint64(len(m.RouterId)))
		i += copy(dAtA[i:], m.RouterId)
	}
	if m.ASNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoute(dAtA, i, uint64(m.ASNumber))
	}
	if len(m.Neighbors) > 0 {
		for _, msg := range m.Neighbors {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RoutingConfigSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingConfigSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BGPConfig != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoute(dAtA, i, uint64(m.BGPConfig.Size()))
		n7, err := m.BGPConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.EVPNConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoute(dAtA, i, uint64(m.EVPNConfig.Size()))
		n8, err := m.EVPNConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *RoutingConfigStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingConfigStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RoutingConfigEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingConfigEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoute(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintRoute(dAtA, i, uint64(m.RoutingConfig.Size()))
	n9, err := m.RoutingConfig.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *RoutingConfigEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingConfigEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoutingConfigEvents) > 0 {
		for _, msg := range m.RoutingConfigEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RoutingConfigList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingConfigList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoutingConfigs) > 0 {
		for _, msg := range m.RoutingConfigs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RoutingConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRoute(dAtA, i, uint64(m.TypeMeta.Size()))
	n10, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x12
	i++
	i = encodeVarintRoute(dAtA, i, uint64(m.ObjectMeta.Size()))
	n11, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRoute(dAtA, i, uint64(m.Spec.Size()))
	n12, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x22
	i++
	i = encodeVarintRoute(dAtA, i, uint64(m.Status.Size()))
	n13, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	return i, nil
}

func encodeVarintRoute(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RouteDistinguisher) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRoute(uint64(l))
	}
	if m.AdminValue != 0 {
		n += 1 + sovRoute(uint64(m.AdminValue))
	}
	if m.AssignedValue != 0 {
		n += 1 + sovRoute(uint64(m.AssignedValue))
	}
	return n
}

func (m *RDSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.AddressFamily)
	if l > 0 {
		n += 1 + l + sovRoute(uint64(l))
	}
	if m.RDAuto {
		n += 2
	}
	if m.RD != nil {
		l = m.RD.Size()
		n += 1 + l + sovRoute(uint64(l))
	}
	if len(m.ExportRTs) > 0 {
		for _, e := range m.ExportRTs {
			l = e.Size()
			n += 1 + l + sovRoute(uint64(l))
		}
	}
	if len(m.ImportRTs) > 0 {
		for _, e := range m.ImportRTs {
			l = e.Size()
			n += 1 + l + sovRoute(uint64(l))
		}
	}
	return n
}

func (m *Route) Size() (n int) {
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovRoute(uint64(l))
	}
	l = len(m.NexhHop)
	if l > 0 {
		n += 1 + l + sovRoute(uint64(l))
	}
	l = len(m.TargetVirtualRouter)
	if l > 0 {
		n += 1 + l + sovRoute(uint64(l))
	}
	return n
}

func (m *RouteTableSpec) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RouteTableStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovRoute(uint64(l))
		}
	}
	return n
}

func (m *RouteTable) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovRoute(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovRoute(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovRoute(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovRoute(uint64(l))
	return n
}

func (m *RouteTableEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovRoute(uint64(m.EventType))
	}
	l = m.RouteTable.Size()
	n += 1 + l + sovRoute(uint64(l))
	return n
}

func (m *RouteTableEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.RouteTableEvents) > 0 {
		for _, e := range m.RouteTableEvents {
			l = e.Size()
			n += 1 + l + sovRoute(uint64(l))
		}
	}
	return n
}

func (m *RouteTableList) Size() (n int) {
	var l int
	_ = l
	if len(m.RouteTables) > 0 {
		for _, e := range m.RouteTables {
			l = e.Size()
			n += 1 + l + sovRoute(uint64(l))
		}
	}
	return n
}

func (m *EVPNConfig) Size() (n int) {
	var l int
	_ = l
	if m.Shutdown {
		n += 2
	}
	return n
}

func (m *BGPNeighbor) Size() (n int) {
	var l int
	_ = l
	if m.Shutdown {
		n += 2
	}
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovRoute(uint64(l))
	}
	if m.RemoteAS != 0 {
		n += 1 + sovRoute(uint64(m.RemoteAS))
	}
	if m.MultiHop != 0 {
		n += 1 + sovRoute(uint64(m.MultiHop))
	}
	if len(m.EnableAddressFamilies) > 0 {
		for _, s := range m.EnableAddressFamilies {
			l = len(s)
			n += 1 + l + sovRoute(uint64(l))
		}
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovRoute(uint64(l))
	}
	return n
}

func (m *BGPConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.RouterId)
	if l > 0 {
		n += 1 + l + sovRoute(uint64(l))
	}
	if m.ASNumber != 0 {
		n += 1 + sovRoute(uint64(m.ASNumber))
	}
	if len(m.Neighbors) > 0 {
		for _, e := range m.Neighbors {
			l = e.Size()
			n += 1 + l + sovRoute(uint64(l))
		}
	}
	return n
}

func (m *RoutingConfigSpec) Size() (n int) {
	var l int
	_ = l
	if m.BGPConfig != nil {
		l = m.BGPConfig.Size()
		n += 1 + l + sovRoute(uint64(l))
	}
	if m.EVPNConfig != nil {
		l = m.EVPNConfig.Size()
		n += 1 + l + sovRoute(uint64(l))
	}
	return n
}

func (m *RoutingConfigStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RoutingConfigEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovRoute(uint64(m.EventType))
	}
	l = m.RoutingConfig.Size()
	n += 1 + l + sovRoute(uint64(l))
	return n
}

func (m *RoutingConfigEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.RoutingConfigEvents) > 0 {
		for _, e := range m.RoutingConfigEvents {
			l = e.Size()
			n += 1 + l + sovRoute(uint64(l))
		}
	}
	return n
}

func (m *RoutingConfigList) Size() (n int) {
	var l int
	_ = l
	if len(m.RoutingConfigs) > 0 {
		for _, e := range m.RoutingConfigs {
			l = e.Size()
			n += 1 + l + sovRoute(uint64(l))
		}
	}
	return n
}

func (m *RoutingConfig) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovRoute(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovRoute(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovRoute(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovRoute(uint64(l))
	return n
}

func sovRoute(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRoute(x uint64) (n int) {
	return sovRoute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RouteDistinguisher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteDistinguisher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteDistinguisher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminValue", wireType)
			}
			m.AdminValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminValue |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedValue", wireType)
			}
			m.AssignedValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssignedValue |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RDSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RDSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RDSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressFamily", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressFamily = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RDAuto", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RDAuto = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RD", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RD == nil {
				m.RD = &RouteDistinguisher{}
			}
			if err := m.RD.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportRTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportRTs = append(m.ExportRTs, &RouteDistinguisher{})
			if err := m.ExportRTs[len(m.ExportRTs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImportRTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImportRTs = append(m.ImportRTs, &RouteDistinguisher{})
			if err := m.ImportRTs[len(m.ImportRTs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NexhHop", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NexhHop = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetVirtualRouter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetVirtualRouter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTableSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTableSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTableSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTableStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTableStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTableStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTableEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTableEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTableEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RouteTable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTableEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTableEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTableEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTableEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteTableEvents = append(m.RouteTableEvents, &RouteTableEvent{})
			if err := m.RouteTableEvents[len(m.RouteTableEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTableList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTableList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTableList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteTables = append(m.RouteTables, &RouteTable{})
			if err := m.RouteTables[len(m.RouteTables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EVPNConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EVPNConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EVPNConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shutdown", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Shutdown = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BGPNeighbor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BGPNeighbor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BGPNeighbor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shutdown", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Shutdown = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAS", wireType)
			}
			m.RemoteAS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteAS |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiHop", wireType)
			}
			m.MultiHop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MultiHop |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableAddressFamilies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnableAddressFamilies = append(m.EnableAddressFamilies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BGPConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BGPConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BGPConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ASNumber", wireType)
			}
			m.ASNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ASNumber |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Neighbors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Neighbors = append(m.Neighbors, &BGPNeighbor{})
			if err := m.Neighbors[len(m.Neighbors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutingConfigSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutingConfigSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutingConfigSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BGPConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BGPConfig == nil {
				m.BGPConfig = &BGPConfig{}
			}
			if err := m.BGPConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EVPNConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EVPNConfig == nil {
				m.EVPNConfig = &EVPNConfig{}
			}
			if err := m.EVPNConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutingConfigStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutingConfigStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutingConfigStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutingConfigEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutingConfigEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutingConfigEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RoutingConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutingConfigEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutingConfigEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutingConfigEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingConfigEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoutingConfigEvents = append(m.RoutingConfigEvents, &RoutingConfigEvent{})
			if err := m.RoutingConfigEvents[len(m.RoutingConfigEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutingConfigList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutingConfigList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutingConfigList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoutingConfigs = append(m.RoutingConfigs, &RoutingConfig{})
			if err := m.RoutingConfigs[len(m.RoutingConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutingConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutingConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRoute
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRoute
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRoute(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRoute = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoute   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("route.proto", fileDescriptorRoute) }

var fileDescriptorRoute = []byte{
	// 1588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcf, 0x6f, 0x13, 0x49,
	0x16, 0x4e, 0x3b, 0xc6, 0xd8, 0x15, 0x92, 0x34, 0xe5, 0x18, 0x6c, 0x6f, 0x88, 0x4d, 0xef, 0xae,
	0x14, 0x76, 0x69, 0x1b, 0x0c, 0x8b, 0x96, 0x95, 0x80, 0x4d, 0xe3, 0x10, 0x02, 0x21, 0xf1, 0x76,
	0x42, 0x90, 0x56, 0x2b, 0xa1, 0xb6, 0x5d, 0x69, 0xd7, 0x62, 0x57, 0xb7, 0xba, 0xab, 0xf3, 0x43,
	0x08, 0x8d, 0x34, 0x48, 0xd1, 0x1c, 0xe6, 0xaf, 0x98, 0x63, 0xa4, 0x19, 0x09, 0x0e, 0x73, 0x9b,
	0x3b, 0xb7, 0xe1, 0x0f, 0x18, 0x59, 0xa3, 0x1c, 0xad, 0x39, 0xcf, 0x79, 0x54, 0xd5, 0xdd, 0x76,
	0xb5, 0x7f, 0x00, 0x33, 0x9a, 0xc3, 0x9c, 0xdc, 0xfd, 0xea, 0x7b, 0x5f, 0xbd, 0xfa, 0xea, 0xf5,
	0x57, 0x65, 0x30, 0xe3, 0x58, 0x1e, 0x45, 0x25, 0xdb, 0xb1, 0xa8, 0x05, 0x93, 0x04, 0x51, 0xfe,
	0x94, 0x5f, 0x34, 0x2d, 0xcb, 0x6c, 0xa3, 0xb2, 0x61, 0xe3, 0xb2, 0x41, 0x88, 0x45, 0x0d, 0x8a,
	0x2d, 0xe2, 0xfa, 0xb8, 0xfc, 0xaa, 0x89, 0x69, 0xcb, 0xab, 0x97, 0x1a, 0x56, 0xa7, 0x6c, 0x23,
	0xe2, 0x1a, 0xa4, 0x69, 0x95, 0xdd, 0x83, 0xf2, 0x3e, 0x22, 0xb8, 0x81, 0xca, 0x1e, 0xc5, 0x6d,
	0x97, 0xa5, 0x9a, 0x88, 0x88, 0xd9, 0x65, 0x4c, 0x1a, 0x6d, 0xaf, 0x89, 0x42, 0x1a, 0x55, 0xa0,
	0x31, 0x2d, 0xd3, 0x2a, 0xf3, 0x70, 0xdd, 0xdb, 0xe3, 0x6f, 0xfc, 0x85, 0x3f, 0x05, 0xf0, 0xbf,
	0x4e, 0x98, 0x95, 0xd5, 0xd8, 0x41, 0xd4, 0xf0, 0x61, 0xca, 0x97, 0x31, 0x00, 0x75, 0xb6, 0xa8,
	0x2a, 0x76, 0x29, 0x26, 0xa6, 0x87, 0xdd, 0x16, 0x72, 0xe0, 0x06, 0x88, 0xef, 0x1c, 0xd9, 0x28,
	0x2b, 0x15, 0xa5, 0xe5, 0x94, 0xf6, 0xcf, 0x93, 0xe3, 0x9c, 0xb2, 0x4d, 0x9d, 0x55, 0xe2, 0x75,
	0x96, 0x47, 0xd1, 0x25, 0xbd, 0xca, 0xc0, 0x57, 0x7a, 0xdd, 0xc2, 0x1c, 0x3d, 0xb2, 0xd1, 0x55,
	0xab, 0x83, 0x29, 0xea, 0xd8, 0xf4, 0x48, 0xe7, 0x2c, 0xf0, 0x36, 0x00, 0x2b, 0xcd, 0x0e, 0x26,
	0xbb, 0x46, 0xdb, 0x43, 0xd9, 0x58, 0x51, 0x5a, 0x9e, 0xd5, 0x72, 0xbd, 0x6e, 0x21, 0x63, 0xb0,
	0xa8, 0xba, 0xcf, 0xc2, 0x42, 0x92, 0x00, 0x86, 0x1a, 0x98, 0x5d, 0x71, 0x5d, 0x6c, 0x12, 0xd4,
	0xf4, 0xb3, 0xa7, 0x79, 0xf6, 0x62, 0xaf, 0x5b, 0xc8, 0x1a, 0xc1, 0xc0, 0x08, 0x41, 0x34, 0x45,
	0xb9, 0x02, 0x12, 0x7e, 0x85, 0x30, 0x05, 0xce, 0xb0, 0xdf, 0x6b, 0xf2, 0x54, 0xf8, 0x78, 0x5d,
	0x96, 0xc2, 0xc7, 0x8a, 0x1c, 0x53, 0x3e, 0x9f, 0x66, 0xd8, 0x6d, 0x1b, 0x35, 0xe0, 0x73, 0x30,
	0xbb, 0xd2, 0x6c, 0x3a, 0xc8, 0x75, 0x1f, 0x18, 0x1d, 0xdc, 0x3e, 0x0a, 0xb4, 0xb8, 0x7d, 0x72,
	0x9c, 0xcb, 0x85, 0x5a, 0x68, 0x6b, 0xb5, 0x08, 0xe6, 0x0a, 0x2f, 0xcb, 0x8f, 0xa8, 0x7b, 0x3c,
	0x14, 0x29, 0x4b, 0xc4, 0x42, 0x95, 0x4d, 0xb5, 0xe2, 0x51, 0x8b, 0x2b, 0x92, 0xd4, 0x32, 0xbd,
	0x6e, 0xe1, 0xbc, 0xd3, 0x54, 0x0d, 0x8f, 0x5a, 0x42, 0x56, 0x00, 0x82, 0x77, 0x41, 0x4c, 0xaf,
	0xf2, 0xe5, 0xcf, 0x54, 0x16, 0x4b, 0x61, 0xef, 0x95, 0x46, 0xb7, 0x43, 0x93, 0x7b, 0xdd, 0xc2,
	0x39, 0xa7, 0x29, 0x70, 0xc4, 0xf4, 0x2a, 0xdc, 0x06, 0xa9, 0xd5, 0x43, 0xdb, 0x72, 0xa8, 0xbe,
	0xe3, 0x66, 0xe3, 0xc5, 0xe9, 0x8f, 0xd2, 0x5c, 0xec, 0x75, 0x0b, 0x69, 0x87, 0xaa, 0x88, 0x67,
	0x09, 0x6c, 0x03, 0x1e, 0x46, 0xba, 0xde, 0x09, 0x49, 0xcf, 0xfc, 0x0a, 0x52, 0xdc, 0x19, 0x26,
	0xed, 0xf3, 0x28, 0x3f, 0x4b, 0xe0, 0x0c, 0x4f, 0x85, 0xb7, 0x40, 0xa2, 0xe6, 0xa0, 0x3d, 0x7c,
	0x18, 0x88, 0xbf, 0x74, 0x72, 0x9c, 0x4b, 0xdc, 0x5f, 0xaf, 0xea, 0xcb, 0x4c, 0x69, 0xd9, 0xe6,
	0x63, 0xa2, 0x56, 0x3e, 0x1a, 0xfe, 0x0b, 0x9c, 0xdd, 0x44, 0x87, 0xad, 0x87, 0x96, 0xcd, 0xb5,
	0x4d, 0x69, 0xc5, 0x48, 0x22, 0x24, 0xe8, 0x90, 0xaa, 0x2d, 0xcb, 0x16, 0x52, 0xc3, 0x04, 0x78,
	0x04, 0xd2, 0x3b, 0x86, 0x63, 0x22, 0xba, 0x8b, 0x1d, 0xea, 0x19, 0x6d, 0x5e, 0x89, 0xc3, 0x85,
	0x4f, 0x69, 0x6b, 0x5f, 0x1d, 0xe7, 0x8a, 0xe0, 0xec, 0x33, 0x64, 0xbc, 0xd0, 0xd1, 0x1e, 0xcc,
	0x10, 0x44, 0x0f, 0x2c, 0xe7, 0x45, 0x39, 0x82, 0xed, 0x75, 0x0b, 0x05, 0xca, 0x29, 0xd4, 0x7d,
	0x3f, 0xae, 0x72, 0xdf, 0x70, 0x84, 0xe9, 0xc6, 0xcd, 0xa1, 0xc8, 0x60, 0x8e, 0x3f, 0xed, 0x18,
	0xf5, 0x36, 0x62, 0x4d, 0xa8, 0xfc, 0x07, 0xc8, 0x42, 0x84, 0x1a, 0xd4, 0x73, 0xe1, 0x1d, 0x90,
	0xe0, 0x31, 0x37, 0x2b, 0x71, 0xc1, 0xe7, 0x87, 0x04, 0xd7, 0x16, 0x98, 0x36, 0x7c, 0x46, 0x37,
	0xd2, 0x47, 0x3c, 0xa2, 0x7c, 0x1d, 0x03, 0x60, 0xc0, 0x09, 0xef, 0x82, 0x24, 0x6b, 0xfe, 0x27,
	0x88, 0x1a, 0x5c, 0xe4, 0x99, 0xca, 0x6c, 0xc9, 0xb0, 0x71, 0x29, 0x0c, 0x6a, 0xe9, 0x77, 0xdd,
	0xc2, 0xd4, 0xfb, 0x6e, 0x41, 0xea, 0x75, 0x0b, 0x67, 0xaf, 0x62, 0xd2, 0xc6, 0x04, 0xe9, 0xfd,
	0x1c, 0xf8, 0x18, 0x80, 0xad, 0xfa, 0xff, 0x51, 0x83, 0x72, 0x86, 0x18, 0x67, 0x98, 0xe7, 0x0c,
	0x83, 0xb0, 0x96, 0x17, 0x38, 0xe6, 0x98, 0xfb, 0x88, 0x5f, 0xfb, 0x00, 0x07, 0xab, 0x20, 0xce,
	0x96, 0x1d, 0x74, 0x79, 0x76, 0x68, 0x61, 0x7d, 0x59, 0xb4, 0x0b, 0x8c, 0x8f, 0x71, 0xb9, 0x36,
	0x6a, 0x88, 0x76, 0xc3, 0xbf, 0xdc, 0x0d, 0x90, 0xf0, 0xa5, 0xca, 0xc6, 0x39, 0x4f, 0x7e, 0x2c,
	0x0f, 0x47, 0x68, 0xd9, 0x80, 0x49, 0x76, 0xf9, 0xbb, 0xa8, 0x97, 0x8f, 0x50, 0xbe, 0x91, 0xc0,
	0xfc, 0x20, 0x6d, 0x75, 0x1f, 0x11, 0x0a, 0x1f, 0x80, 0x14, 0x7f, 0xe8, 0x7b, 0xe4, 0x5c, 0x65,
	0x8e, 0xaf, 0xb9, 0x1f, 0xd5, 0xb2, 0xbd, 0x6e, 0x61, 0x01, 0xb1, 0x57, 0x75, 0xc8, 0x13, 0x07,
	0xa9, 0x70, 0x5b, 0xdc, 0x8a, 0x40, 0xbc, 0x85, 0x71, 0xd5, 0x6a, 0x97, 0x82, 0x3a, 0x33, 0x7c,
	0x5f, 0x55, 0xca, 0x82, 0xa2, 0x88, 0x03, 0xa8, 0xf2, 0x3f, 0x90, 0x1e, 0xaa, 0x77, 0x03, 0xbb,
	0x14, 0xae, 0x02, 0xbf, 0x27, 0x06, 0xe1, 0xb0, 0x81, 0x72, 0xe3, 0x66, 0xe4, 0x08, 0x7d, 0x24,
	0x45, 0x79, 0x28, 0xf6, 0x28, 0x27, 0xbe, 0x15, 0x1c, 0x8b, 0x3c, 0x12, 0x72, 0x8e, 0x5d, 0x85,
	0x2e, 0x02, 0x95, 0x7f, 0x03, 0xb0, 0xba, 0x5b, 0xdb, 0xbc, 0x6f, 0x91, 0x3d, 0x6c, 0xc2, 0x0a,
	0x48, 0x6e, 0xb7, 0x3c, 0xda, 0xb4, 0x0e, 0x08, 0x57, 0x34, 0xa9, 0x5d, 0x60, 0x5f, 0xaa, 0x1b,
	0xc4, 0x84, 0xb5, 0xf6, 0x71, 0xca, 0x9b, 0x69, 0x30, 0xa3, 0xad, 0xd5, 0x36, 0x11, 0x36, 0x5b,
	0x75, 0xcb, 0xf9, 0x2d, 0x1c, 0x50, 0x03, 0xa9, 0xf5, 0xd0, 0xc4, 0x03, 0xb3, 0xf8, 0xcb, 0xc9,
	0x71, 0x2e, 0xe9, 0x07, 0xb9, 0x5d, 0x2c, 0x60, 0x5b, 0x0d, 0x4c, 0x3d, 0x62, 0x58, 0x61, 0x1a,
	0xbc, 0x01, 0x92, 0x3a, 0xea, 0x58, 0x14, 0xad, 0x6c, 0x07, 0xe7, 0x93, 0x6f, 0x73, 0x3c, 0xa6,
	0x1a, 0x62, 0x56, 0x1f, 0x08, 0xd7, 0x40, 0xf2, 0x89, 0xd7, 0xa6, 0x98, 0x99, 0x54, 0x9c, 0x27,
	0xfd, 0xfd, 0xe4, 0x38, 0x27, 0xaf, 0x13, 0xaa, 0x1b, 0xc4, 0x44, 0xcb, 0xd7, 0xae, 0x16, 0x2b,
	0xff, 0xb8, 0xc5, 0xe6, 0x4f, 0x77, 0x18, 0x6e, 0xc8, 0xaf, 0xfa, 0xc9, 0xf0, 0x10, 0x64, 0x56,
	0x09, 0x93, 0x54, 0x3c, 0x5e, 0x30, 0xf2, 0xfd, 0x38, 0xa5, 0x69, 0x1f, 0x3b, 0xb0, 0x2e, 0x23,
	0x9e, 0xad, 0x46, 0xce, 0x2d, 0x1c, 0xf1, 0x8e, 0xf1, 0x13, 0x30, 0xbd, 0x6b, 0x86, 0xeb, 0x1e,
	0x58, 0x4e, 0x33, 0x9b, 0xe0, 0xd2, 0x71, 0xbd, 0xed, 0x20, 0x26, 0x56, 0x1b, 0xe2, 0x94, 0xef,
	0x25, 0x90, 0xd2, 0xd6, 0x6a, 0xc1, 0xae, 0xdf, 0x03, 0x49, 0xdf, 0xfb, 0xd6, 0x9b, 0x81, 0xc5,
	0xff, 0x79, 0x48, 0xfc, 0xb4, 0x6f, 0x9d, 0x2a, 0x8e, 0xd0, 0x85, 0x49, 0x4c, 0xfa, 0x95, 0xed,
	0x4d, 0xaf, 0x53, 0x47, 0x4e, 0x70, 0xb1, 0xe0, 0xd2, 0x1b, 0xae, 0x4a, 0x78, 0x50, 0x4c, 0x0a,
	0x81, 0x70, 0x03, 0xa4, 0xc2, 0x9e, 0x71, 0xb3, 0xd3, 0xbc, 0x5f, 0x33, 0x83, 0x7e, 0x15, 0x3a,
	0xca, 0x27, 0x23, 0x21, 0x56, 0xdc, 0xfd, 0x3e, 0x81, 0xf2, 0x46, 0x02, 0xe7, 0x59, 0x3d, 0x98,
	0x98, 0xfe, 0xaa, 0xb8, 0x09, 0x3d, 0x16, 0x96, 0x19, 0x18, 0x6b, 0x3a, 0x32, 0x87, 0x3f, 0xe4,
	0xfb, 0x44, 0xdd, 0xb4, 0xd5, 0x06, 0x7f, 0x17, 0xa7, 0x18, 0xc8, 0xb4, 0x25, 0x7e, 0x2a, 0xa3,
	0x3e, 0x31, 0x18, 0xf3, 0xaf, 0x55, 0x68, 0xdf, 0x26, 0xa3, 0x7c, 0x02, 0x85, 0x92, 0xf1, 0x3d,
	0x62, 0x50, 0xb2, 0xef, 0x75, 0xdf, 0x49, 0xfe, 0x6d, 0xb0, 0x1f, 0xff, 0x7d, 0xed, 0xee, 0x39,
	0x98, 0x8d, 0xb0, 0x07, 0x2b, 0xb9, 0x18, 0xf5, 0x8a, 0xfe, 0xb0, 0x56, 0x0c, 0x4c, 0x2f, 0xeb,
	0xf8, 0xe1, 0xd1, 0x35, 0x45, 0xf9, 0x94, 0x16, 0xb8, 0x30, 0x5a, 0x3e, 0x37, 0xa9, 0x4d, 0x90,
	0x76, 0x46, 0x46, 0x42, 0xb3, 0x5a, 0x9c, 0x50, 0x80, 0xef, 0x81, 0xe3, 0x12, 0x95, 0x9d, 0xa1,
	0x3d, 0xe7, 0x93, 0xdc, 0x03, 0x73, 0x11, 0x6c, 0xc8, 0x3f, 0x69, 0x81, 0xfa, 0x10, 0x5c, 0xf9,
	0x36, 0x36, 0xa4, 0xd0, 0x1f, 0xeb, 0x78, 0x5e, 0x8b, 0x1c, 0xcf, 0x7f, 0x9a, 0xb0, 0xaa, 0x4f,
	0x38, 0xa1, 0xb7, 0x86, 0x4e, 0xe8, 0x4b, 0x93, 0xa8, 0x3e, 0xf1, 0x90, 0xfe, 0xdb, 0x3d, 0x20,
	0x0f, 0x5b, 0x1b, 0xbc, 0x0c, 0x66, 0xd6, 0x6b, 0xfb, 0x37, 0x9f, 0x12, 0xdc, 0x30, 0x5c, 0x2a,
	0x4f, 0xe5, 0xe5, 0xd3, 0x2f, 0x72, 0xe7, 0xb0, 0xbd, 0x7f, 0x53, 0xf5, 0xfc, 0x18, 0x4c, 0x82,
	0x38, 0xfb, 0x28, 0x64, 0xa9, 0xf2, 0x43, 0x6c, 0xa8, 0xf3, 0x57, 0x6c, 0xbc, 0x7b, 0x1d, 0x3e,
	0x02, 0x90, 0xed, 0x6c, 0x64, 0xc4, 0x85, 0x19, 0x2e, 0x20, 0x1b, 0x78, 0x66, 0xd0, 0x46, 0x6b,
	0xcb, 0xe6, 0x7f, 0xd8, 0xf2, 0x93, 0x04, 0x61, 0x40, 0x65, 0x0a, 0xea, 0x20, 0xcd, 0xe1, 0x9f,
	0x46, 0x56, 0xfc, 0x50, 0x4f, 0xfa, 0x8c, 0xd7, 0x24, 0xf8, 0x08, 0x5c, 0x8c, 0x8c, 0x6e, 0xd9,
	0xc8, 0x79, 0x6a, 0x37, 0x0d, 0x8a, 0xe0, 0x07, 0x9b, 0x3a, 0x1f, 0xed, 0x22, 0x65, 0x6a, 0x59,
	0xca, 0xff, 0xf7, 0xed, 0xeb, 0xdc, 0xee, 0x70, 0xff, 0xc5, 0xdb, 0xac, 0xb1, 0xa7, 0x4d, 0x44,
	0x61, 0xdc, 0xb6, 0xd8, 0xa3, 0xed, 0x51, 0x98, 0x68, 0xa2, 0x36, 0xa2, 0x28, 0x0f, 0xcb, 0x2f,
	0x07, 0xed, 0x51, 0xda, 0x34, 0x3a, 0xe8, 0x95, 0x92, 0x66, 0xff, 0x30, 0xa3, 0x1f, 0xac, 0x5b,
	0xf9, 0x29, 0x26, 0x5e, 0xa2, 0x7c, 0x6d, 0xab, 0x60, 0x3e, 0xd4, 0x36, 0xb8, 0x12, 0x4c, 0xd2,
	0x62, 0xec, 0x45, 0x30, 0x50, 0x75, 0x03, 0xc8, 0x7d, 0x55, 0x3f, 0x42, 0x73, 0x69, 0xe2, 0x3d,
	0xa7, 0xaf, 0x67, 0x15, 0x2c, 0x0c, 0x86, 0x04, 0x31, 0x27, 0x5f, 0x91, 0xc6, 0x29, 0xf9, 0xd9,
	0xdb, 0xd7, 0xb9, 0x97, 0x91, 0x5b, 0xf6, 0x87, 0x65, 0xbc, 0x13, 0x91, 0x71, 0x07, 0x11, 0x83,
	0xd0, 0x57, 0x23, 0xd2, 0xba, 0xb6, 0xd1, 0x40, 0xaf, 0xc6, 0x28, 0x2e, 0x87, 0x8a, 0x07, 0xf7,
	0x42, 0x57, 0x3b, 0xf7, 0xee, 0x74, 0x49, 0x7a, 0x7f, 0xba, 0x24, 0xfd, 0x78, 0xba, 0x24, 0xd5,
	0xa4, 0x7a, 0x82, 0x97, 0x7e, 0xe3, 0x97, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xa0, 0x6f, 0x57,
	0xc0, 0x10, 0x00, 0x00,
}
