// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agg_watch.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AggKinds struct {
	Kinds []string `protobuf:"bytes,1,rep,name=kinds" json:"kind,omitempty"`
}

func (m *AggKinds) Reset()                    { *m = AggKinds{} }
func (m *AggKinds) String() string            { return proto.CompactTextString(m) }
func (*AggKinds) ProtoMessage()               {}
func (*AggKinds) Descriptor() ([]byte, []int) { return fileDescriptorAggWatch, []int{0} }

func (m *AggKinds) GetKinds() []string {
	if m != nil {
		return m.Kinds
	}
	return nil
}

// agg object
type AggObject struct {
	Kind   string   `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Object *api.Any `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AggObject) Reset()                    { *m = AggObject{} }
func (m *AggObject) String() string            { return proto.CompactTextString(m) }
func (*AggObject) ProtoMessage()               {}
func (*AggObject) Descriptor() ([]byte, []int) { return fileDescriptorAggWatch, []int{1} }

func (m *AggObject) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *AggObject) GetObject() *api.Any {
	if m != nil {
		return m.Object
	}
	return nil
}

// list of agg objects
type AggObjectList struct {
	Objects []*AggObject `protobuf:"bytes,1,rep,name=objects" json:"objects,omitempty"`
}

func (m *AggObjectList) Reset()                    { *m = AggObjectList{} }
func (m *AggObjectList) String() string            { return proto.CompactTextString(m) }
func (*AggObjectList) ProtoMessage()               {}
func (*AggObjectList) Descriptor() ([]byte, []int) { return fileDescriptorAggWatch, []int{2} }

func (m *AggObjectList) GetObjects() []*AggObject {
	if m != nil {
		return m.Objects
	}
	return nil
}

// app watch event
type AggObjectEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	AggObj    AggObject     `protobuf:"bytes,2,opt,name=AggObj" json:"agg,omitempty"`
}

func (m *AggObjectEvent) Reset()                    { *m = AggObjectEvent{} }
func (m *AggObjectEvent) String() string            { return proto.CompactTextString(m) }
func (*AggObjectEvent) ProtoMessage()               {}
func (*AggObjectEvent) Descriptor() ([]byte, []int) { return fileDescriptorAggWatch, []int{3} }

func (m *AggObjectEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *AggObjectEvent) GetAggObj() AggObject {
	if m != nil {
		return m.AggObj
	}
	return AggObject{}
}

// agg watch events batched
type AggObjectEventList struct {
	AggObjectEvents []*AggObjectEvent `protobuf:"bytes,1,rep,name=AggObjectEvents" json:"AggObjectEvents,omitempty"`
}

func (m *AggObjectEventList) Reset()                    { *m = AggObjectEventList{} }
func (m *AggObjectEventList) String() string            { return proto.CompactTextString(m) }
func (*AggObjectEventList) ProtoMessage()               {}
func (*AggObjectEventList) Descriptor() ([]byte, []int) { return fileDescriptorAggWatch, []int{4} }

func (m *AggObjectEventList) GetAggObjectEvents() []*AggObjectEvent {
	if m != nil {
		return m.AggObjectEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*AggKinds)(nil), "netproto.AggKinds")
	proto.RegisterType((*AggObject)(nil), "netproto.AggObject")
	proto.RegisterType((*AggObjectList)(nil), "netproto.AggObjectList")
	proto.RegisterType((*AggObjectEvent)(nil), "netproto.AggObjectEvent")
	proto.RegisterType((*AggObjectEventList)(nil), "netproto.AggObjectEventList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AggWatchApi service

type AggWatchApiClient interface {
	WatchObjects(ctx context.Context, in *AggKinds, opts ...grpc.CallOption) (AggWatchApi_WatchObjectsClient, error)
	ObjectOperUpdate(ctx context.Context, opts ...grpc.CallOption) (AggWatchApi_ObjectOperUpdateClient, error)
	ListObjects(ctx context.Context, in *AggKinds, opts ...grpc.CallOption) (*AggObjectList, error)
}

type aggWatchApiClient struct {
	cc *grpc.ClientConn
}

func NewAggWatchApiClient(cc *grpc.ClientConn) AggWatchApiClient {
	return &aggWatchApiClient{cc}
}

func (c *aggWatchApiClient) WatchObjects(ctx context.Context, in *AggKinds, opts ...grpc.CallOption) (AggWatchApi_WatchObjectsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AggWatchApi_serviceDesc.Streams[0], c.cc, "/netproto.AggWatchApi/WatchObjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &aggWatchApiWatchObjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AggWatchApi_WatchObjectsClient interface {
	Recv() (*AggObjectEventList, error)
	grpc.ClientStream
}

type aggWatchApiWatchObjectsClient struct {
	grpc.ClientStream
}

func (x *aggWatchApiWatchObjectsClient) Recv() (*AggObjectEventList, error) {
	m := new(AggObjectEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aggWatchApiClient) ObjectOperUpdate(ctx context.Context, opts ...grpc.CallOption) (AggWatchApi_ObjectOperUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AggWatchApi_serviceDesc.Streams[1], c.cc, "/netproto.AggWatchApi/ObjectOperUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &aggWatchApiObjectOperUpdateClient{stream}
	return x, nil
}

type AggWatchApi_ObjectOperUpdateClient interface {
	Send(*AggObjectEvent) error
	CloseAndRecv() (*api.TypeMeta, error)
	grpc.ClientStream
}

type aggWatchApiObjectOperUpdateClient struct {
	grpc.ClientStream
}

func (x *aggWatchApiObjectOperUpdateClient) Send(m *AggObjectEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aggWatchApiObjectOperUpdateClient) CloseAndRecv() (*api.TypeMeta, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.TypeMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aggWatchApiClient) ListObjects(ctx context.Context, in *AggKinds, opts ...grpc.CallOption) (*AggObjectList, error) {
	out := new(AggObjectList)
	err := grpc.Invoke(ctx, "/netproto.AggWatchApi/ListObjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AggWatchApi service

type AggWatchApiServer interface {
	WatchObjects(*AggKinds, AggWatchApi_WatchObjectsServer) error
	ObjectOperUpdate(AggWatchApi_ObjectOperUpdateServer) error
	ListObjects(context.Context, *AggKinds) (*AggObjectList, error)
}

func RegisterAggWatchApiServer(s *grpc.Server, srv AggWatchApiServer) {
	s.RegisterService(&_AggWatchApi_serviceDesc, srv)
}

func _AggWatchApi_WatchObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AggKinds)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AggWatchApiServer).WatchObjects(m, &aggWatchApiWatchObjectsServer{stream})
}

type AggWatchApi_WatchObjectsServer interface {
	Send(*AggObjectEventList) error
	grpc.ServerStream
}

type aggWatchApiWatchObjectsServer struct {
	grpc.ServerStream
}

func (x *aggWatchApiWatchObjectsServer) Send(m *AggObjectEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _AggWatchApi_ObjectOperUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AggWatchApiServer).ObjectOperUpdate(&aggWatchApiObjectOperUpdateServer{stream})
}

type AggWatchApi_ObjectOperUpdateServer interface {
	SendAndClose(*api.TypeMeta) error
	Recv() (*AggObjectEvent, error)
	grpc.ServerStream
}

type aggWatchApiObjectOperUpdateServer struct {
	grpc.ServerStream
}

func (x *aggWatchApiObjectOperUpdateServer) SendAndClose(m *api.TypeMeta) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aggWatchApiObjectOperUpdateServer) Recv() (*AggObjectEvent, error) {
	m := new(AggObjectEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AggWatchApi_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggKinds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggWatchApiServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.AggWatchApi/ListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggWatchApiServer).ListObjects(ctx, req.(*AggKinds))
	}
	return interceptor(ctx, in, info, handler)
}

var _AggWatchApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.AggWatchApi",
	HandlerType: (*AggWatchApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListObjects",
			Handler:    _AggWatchApi_ListObjects_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchObjects",
			Handler:       _AggWatchApi_WatchObjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObjectOperUpdate",
			Handler:       _AggWatchApi_ObjectOperUpdate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "agg_watch.proto",
}

func (m *AggKinds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggKinds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kinds) > 0 {
		for _, s := range m.Kinds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *AggObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAggWatch(dAtA, i, uint64(len(m.Kind)))
		i += copy(dAtA[i:], m.Kind)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAggWatch(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AggObjectList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggObjectList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for _, msg := range m.Objects {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAggWatch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AggObjectEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggObjectEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAggWatch(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintAggWatch(dAtA, i, uint64(m.AggObj.Size()))
	n2, err := m.AggObj.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *AggObjectEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggObjectEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AggObjectEvents) > 0 {
		for _, msg := range m.AggObjectEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAggWatch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintAggWatch(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AggKinds) Size() (n int) {
	var l int
	_ = l
	if len(m.Kinds) > 0 {
		for _, s := range m.Kinds {
			l = len(s)
			n += 1 + l + sovAggWatch(uint64(l))
		}
	}
	return n
}

func (m *AggObject) Size() (n int) {
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovAggWatch(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovAggWatch(uint64(l))
	}
	return n
}

func (m *AggObjectList) Size() (n int) {
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for _, e := range m.Objects {
			l = e.Size()
			n += 1 + l + sovAggWatch(uint64(l))
		}
	}
	return n
}

func (m *AggObjectEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovAggWatch(uint64(m.EventType))
	}
	l = m.AggObj.Size()
	n += 1 + l + sovAggWatch(uint64(l))
	return n
}

func (m *AggObjectEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.AggObjectEvents) > 0 {
		for _, e := range m.AggObjectEvents {
			l = e.Size()
			n += 1 + l + sovAggWatch(uint64(l))
		}
	}
	return n
}

func sovAggWatch(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAggWatch(x uint64) (n int) {
	return sovAggWatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AggKinds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggWatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggKinds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggKinds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kinds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggWatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAggWatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kinds = append(m.Kinds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAggWatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAggWatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggWatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggWatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAggWatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggWatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAggWatch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &api.Any{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAggWatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAggWatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggObjectList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggWatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggObjectList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggObjectList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggWatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAggWatch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objects = append(m.Objects, &AggObject{})
			if err := m.Objects[len(m.Objects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAggWatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAggWatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggObjectEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggWatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggObjectEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggObjectEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggWatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggObj", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggWatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAggWatch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AggObj.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAggWatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAggWatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggObjectEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggWatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggObjectEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggObjectEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggObjectEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggWatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAggWatch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggObjectEvents = append(m.AggObjectEvents, &AggObjectEvent{})
			if err := m.AggObjectEvents[len(m.AggObjectEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAggWatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAggWatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAggWatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAggWatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAggWatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAggWatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAggWatch
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAggWatch
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAggWatch(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAggWatch = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAggWatch   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("agg_watch.proto", fileDescriptorAggWatch) }

var fileDescriptorAggWatch = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x5d, 0x8f, 0x12, 0x31,
	0x14, 0xa5, 0x7e, 0x20, 0x94, 0x85, 0xdd, 0x54, 0x8d, 0x13, 0xb2, 0x61, 0xc8, 0x24, 0x1a, 0x1e,
	0x64, 0xc6, 0xa0, 0x4f, 0xc6, 0x68, 0x66, 0xe2, 0xfa, 0xa2, 0x66, 0x0d, 0xd1, 0xe8, 0x9b, 0x29,
	0xc3, 0xb5, 0x5b, 0x85, 0xb6, 0xd9, 0x29, 0x4b, 0xf8, 0x2f, 0xfe, 0x20, 0x1e, 0x8d, 0x3f, 0x60,
	0x62, 0x78, 0xe4, 0x57, 0x98, 0xb6, 0x80, 0x83, 0x61, 0xf6, 0xed, 0xde, 0xd3, 0x73, 0xce, 0x3d,
	0xb7, 0x2d, 0x3e, 0xa6, 0x8c, 0x7d, 0x9d, 0x53, 0x9d, 0x5e, 0x84, 0xea, 0x52, 0x6a, 0x49, 0x6a,
	0x02, 0xb4, 0xad, 0xda, 0xa7, 0x4c, 0x4a, 0x36, 0x81, 0x88, 0x2a, 0x1e, 0x51, 0x21, 0xa4, 0xa6,
	0x9a, 0x4b, 0x91, 0x39, 0x5e, 0xfb, 0x8c, 0x71, 0x7d, 0x31, 0x1b, 0x85, 0xa9, 0x9c, 0x46, 0x0a,
	0x44, 0x46, 0xc5, 0x58, 0x46, 0xd9, 0x3c, 0xba, 0x02, 0xc1, 0x53, 0x88, 0x66, 0x9a, 0x4f, 0x32,
	0x23, 0x65, 0x20, 0x8a, 0xea, 0x88, 0x8b, 0x74, 0x32, 0x1b, 0xc3, 0xd6, 0xa6, 0x5f, 0xb0, 0x61,
	0x92, 0xc9, 0xc8, 0xc2, 0xa3, 0xd9, 0x37, 0xdb, 0xd9, 0xc6, 0x56, 0x1b, 0xfa, 0xc3, 0x92, 0xa9,
	0x26, 0xe3, 0x14, 0x34, 0x75, 0xb4, 0xe0, 0x19, 0xae, 0xc5, 0x8c, 0xbd, 0xe5, 0x62, 0x9c, 0x91,
	0x1e, 0xbe, 0xfd, 0xc3, 0x14, 0x1e, 0xea, 0xde, 0xec, 0xd5, 0x13, 0xb2, 0xce, 0xfd, 0x96, 0x01,
	0x1e, 0xcb, 0x29, 0xd7, 0x30, 0x55, 0x7a, 0x31, 0x74, 0x84, 0x40, 0xe2, 0x7a, 0xcc, 0xd8, 0xf9,
	0xe8, 0x3b, 0xa4, 0x9a, 0x3c, 0xc2, 0xb7, 0x0c, 0xea, 0xa1, 0x2e, 0x2a, 0x51, 0xd9, 0x73, 0xf2,
	0x1c, 0x57, 0x9d, 0xc2, 0xbb, 0xd1, 0x45, 0xbd, 0xc6, 0xa0, 0x16, 0x52, 0xc5, 0xc3, 0x58, 0x2c,
	0x12, 0x6f, 0x99, 0xfb, 0x68, 0x9d, 0xfb, 0x27, 0xd2, 0x9e, 0x17, 0x94, 0x1b, 0x45, 0xf0, 0x12,
	0x37, 0x77, 0x03, 0xdf, 0xf1, 0x4c, 0x93, 0x3e, 0xbe, 0xe3, 0xc8, 0x2e, 0x6d, 0x63, 0x70, 0x37,
	0xdc, 0x3e, 0x47, 0xb8, 0x63, 0x0e, 0xb7, 0x9c, 0xe0, 0x27, 0xc2, 0xad, 0x1d, 0x7c, 0x76, 0x05,
	0x42, 0x93, 0x37, 0xb8, 0x6e, 0x8b, 0x8f, 0x0b, 0x05, 0x36, 0x7b, 0x6b, 0xd0, 0xb2, 0x89, 0x76,
	0x68, 0xe2, 0xad, 0x73, 0xff, 0x1e, 0x98, 0xb6, 0xaf, 0x17, 0x0a, 0x0a, 0xb9, 0xfe, 0x49, 0x49,
	0x82, 0xab, 0xce, 0x79, 0xb3, 0xd6, 0xa1, 0x20, 0xc9, 0xfd, 0x65, 0xee, 0x57, 0xd6, 0xb9, 0xdf,
	0xa4, 0x8c, 0x15, 0xd7, 0x73, 0x8c, 0xe0, 0x0b, 0x26, 0xfb, 0xe9, 0xec, 0x8e, 0x09, 0x3e, 0xde,
	0x47, 0xb7, 0xbb, 0x7a, 0x07, 0x46, 0x58, 0xc2, 0xf0, 0x7f, 0xc1, 0xe0, 0x37, 0xc2, 0x8d, 0x98,
	0xb1, 0xcf, 0xe6, 0xdf, 0xc6, 0x8a, 0x93, 0xd7, 0xf8, 0xc8, 0xd6, 0x8e, 0x94, 0x11, 0xb2, 0x67,
	0x65, 0xff, 0x41, 0xfb, 0xb4, 0xcc, 0xde, 0xa4, 0x0a, 0x2a, 0x4f, 0x10, 0x79, 0x85, 0x4f, 0x1c,
	0x7c, 0xae, 0xe0, 0xf2, 0x93, 0x1a, 0x53, 0x0d, 0xa4, 0x34, 0x54, 0xbb, 0x69, 0xaf, 0xd5, 0x5c,
	0xd6, 0x7b, 0xd0, 0x34, 0xa8, 0xf4, 0x10, 0x79, 0x81, 0x1b, 0xc6, 0xec, 0xba, 0x14, 0x0f, 0x0e,
	0xf8, 0xb9, 0x00, 0xc9, 0xd1, 0x72, 0xd5, 0x41, 0xbf, 0x56, 0x1d, 0xf4, 0x67, 0xd5, 0x41, 0x1f,
	0xd0, 0xa8, 0x6a, 0x69, 0x4f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x68, 0x48, 0xef, 0xa3,
	0x03, 0x00, 0x00,
}
