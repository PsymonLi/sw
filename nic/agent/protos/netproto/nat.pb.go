// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nat.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NatRule_NatAction int32

const (
	NatRule_SNAT NatRule_NatAction = 0
	NatRule_DNAT NatRule_NatAction = 1
	NatRule_SPAT NatRule_NatAction = 2
	NatRule_DPAT NatRule_NatAction = 3
)

var NatRule_NatAction_name = map[int32]string{
	0: "SNAT",
	1: "DNAT",
	2: "SPAT",
	3: "DPAT",
}
var NatRule_NatAction_value = map[string]int32{
	"SNAT": 0,
	"DNAT": 1,
	"SPAT": 2,
	"DPAT": 3,
}

func (x NatRule_NatAction) String() string {
	return proto.EnumName(NatRule_NatAction_name, int32(x))
}
func (NatRule_NatAction) EnumDescriptor() ([]byte, []int) { return fileDescriptorNat, []int{14, 0} }

// Nat Pool Object.
type NatPool struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           NatPoolSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         NatPoolStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *NatPool) Reset()                    { *m = NatPool{} }
func (m *NatPool) String() string            { return proto.CompactTextString(m) }
func (*NatPool) ProtoMessage()               {}
func (*NatPool) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{0} }

func (m *NatPool) GetSpec() NatPoolSpec {
	if m != nil {
		return m.Spec
	}
	return NatPoolSpec{}
}

func (m *NatPool) GetStatus() NatPoolStatus {
	if m != nil {
		return m.Status
	}
	return NatPoolStatus{}
}

// NatPoolSpec captures all nat pool configuration.
type NatPoolSpec struct {
	// VrfName specifies the name of the VRF that the current Nat Pool belongs to
	VrfName string `protobuf:"bytes,1,opt,name=VrfName,proto3" json:"vrf-name,omitempty"`
	// Hyphen separated range of IP Addresses for the nat pool. Required
	IPRange string `protobuf:"bytes,2,opt,name=IPRange,proto3" json:"ip-range,omitempty"`
}

func (m *NatPoolSpec) Reset()                    { *m = NatPoolSpec{} }
func (m *NatPoolSpec) String() string            { return proto.CompactTextString(m) }
func (*NatPoolSpec) ProtoMessage()               {}
func (*NatPoolSpec) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{1} }

func (m *NatPoolSpec) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *NatPoolSpec) GetIPRange() string {
	if m != nil {
		return m.IPRange
	}
	return ""
}

// nat pool status
type NatPoolStatus struct {
	NatPoolID   uint64                      `protobuf:"varint,1,opt,name=NatPoolID,proto3" json:"id,omitempty"`
	NatBindings []*NatPoolStatus_NatBinding `protobuf:"bytes,2,rep,name=NatBindings" json:"NatBindings,omitempty"`
}

func (m *NatPoolStatus) Reset()                    { *m = NatPoolStatus{} }
func (m *NatPoolStatus) String() string            { return proto.CompactTextString(m) }
func (*NatPoolStatus) ProtoMessage()               {}
func (*NatPoolStatus) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{2} }

func (m *NatPoolStatus) GetNatPoolID() uint64 {
	if m != nil {
		return m.NatPoolID
	}
	return 0
}

func (m *NatPoolStatus) GetNatBindings() []*NatPoolStatus_NatBinding {
	if m != nil {
		return m.NatBindings
	}
	return nil
}

type NatPoolStatus_NatBinding struct {
	LocalAddress  string `protobuf:"bytes,1,opt,name=LocalAddress,proto3" json:"LocalAddress,omitempty"`
	LocalPort     uint32 `protobuf:"varint,2,opt,name=LocalPort,proto3" json:"LocalPort,omitempty"`
	GlobalAddress string `protobuf:"bytes,3,opt,name=GlobalAddress,proto3" json:"GlobalAddress,omitempty"`
	GlobalPort    uint32 `protobuf:"varint,4,opt,name=GlobalPort,proto3" json:"GlobalPort,omitempty"`
	Protocol      uint32 `protobuf:"varint,5,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
}

func (m *NatPoolStatus_NatBinding) Reset()                    { *m = NatPoolStatus_NatBinding{} }
func (m *NatPoolStatus_NatBinding) String() string            { return proto.CompactTextString(m) }
func (*NatPoolStatus_NatBinding) ProtoMessage()               {}
func (*NatPoolStatus_NatBinding) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{2, 0} }

func (m *NatPoolStatus_NatBinding) GetLocalAddress() string {
	if m != nil {
		return m.LocalAddress
	}
	return ""
}

func (m *NatPoolStatus_NatBinding) GetLocalPort() uint32 {
	if m != nil {
		return m.LocalPort
	}
	return 0
}

func (m *NatPoolStatus_NatBinding) GetGlobalAddress() string {
	if m != nil {
		return m.GlobalAddress
	}
	return ""
}

func (m *NatPoolStatus_NatBinding) GetGlobalPort() uint32 {
	if m != nil {
		return m.GlobalPort
	}
	return 0
}

func (m *NatPoolStatus_NatBinding) GetProtocol() uint32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

// list of nat pools
type NatPoolList struct {
	NatPools []*NatPool `protobuf:"bytes,1,rep,name=NatPools" json:"NatPools,omitempty"`
}

func (m *NatPoolList) Reset()                    { *m = NatPoolList{} }
func (m *NatPoolList) String() string            { return proto.CompactTextString(m) }
func (*NatPoolList) ProtoMessage()               {}
func (*NatPoolList) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{3} }

func (m *NatPoolList) GetNatPools() []*NatPool {
	if m != nil {
		return m.NatPools
	}
	return nil
}

// nat pool watch event
type NatPoolEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	NatPool   NatPool       `protobuf:"bytes,2,opt,name=NatPool" json:"natpool,omitempty"`
}

func (m *NatPoolEvent) Reset()                    { *m = NatPoolEvent{} }
func (m *NatPoolEvent) String() string            { return proto.CompactTextString(m) }
func (*NatPoolEvent) ProtoMessage()               {}
func (*NatPoolEvent) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{4} }

func (m *NatPoolEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *NatPoolEvent) GetNatPool() NatPool {
	if m != nil {
		return m.NatPool
	}
	return NatPool{}
}

// NatPolicyEvent watch events batched
type NatPoolEventList struct {
	NatPoolEvents []*NatPoolEvent `protobuf:"bytes,1,rep,name=NatPoolEvents" json:"NatPoolEvents,omitempty"`
}

func (m *NatPoolEventList) Reset()                    { *m = NatPoolEventList{} }
func (m *NatPoolEventList) String() string            { return proto.CompactTextString(m) }
func (*NatPoolEventList) ProtoMessage()               {}
func (*NatPoolEventList) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{5} }

func (m *NatPoolEventList) GetNatPoolEvents() []*NatPoolEvent {
	if m != nil {
		return m.NatPoolEvents
	}
	return nil
}

type NatBinding struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           NatBindingSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         NatBindingStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *NatBinding) Reset()                    { *m = NatBinding{} }
func (m *NatBinding) String() string            { return proto.CompactTextString(m) }
func (*NatBinding) ProtoMessage()               {}
func (*NatBinding) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{6} }

func (m *NatBinding) GetSpec() NatBindingSpec {
	if m != nil {
		return m.Spec
	}
	return NatBindingSpec{}
}

func (m *NatBinding) GetStatus() NatBindingStatus {
	if m != nil {
		return m.Status
	}
	return NatBindingStatus{}
}

// NatBindingSpec captures all nat binding configuration.
type NatBindingSpec struct {
	// VrfName specifies the name of the VRF that the current Nat Binding belongs to
	VrfName string `protobuf:"bytes,1,opt,name=VrfName,proto3" json:"vrf-name,omitempty"`
	// Nat pool name from which the nat address is to allocated.
	// By default named references are scoped to the current namespace.
	// Should specify vrf/poolName to allow pools to be shared across the namespaces. Required
	NatPoolName string `protobuf:"bytes,2,opt,name=NatPoolName,proto3" json:"nat-pool,omitempty"`
	// Specify the IPAddress to be allocated from the nat pool. Required
	IPAddress string `protobuf:"bytes,3,opt,name=IPAddress,proto3" json:"ip-address,omitempty"`
}

func (m *NatBindingSpec) Reset()                    { *m = NatBindingSpec{} }
func (m *NatBindingSpec) String() string            { return proto.CompactTextString(m) }
func (*NatBindingSpec) ProtoMessage()               {}
func (*NatBindingSpec) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{7} }

func (m *NatBindingSpec) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *NatBindingSpec) GetNatPoolName() string {
	if m != nil {
		return m.NatPoolName
	}
	return ""
}

func (m *NatBindingSpec) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

type NatBindingStatus struct {
	// NatBinding ID in the datapath
	NatBindingID uint64 `protobuf:"varint,1,opt,name=NatBindingID,proto3" json:"id,omitempty"`
	// IP allocated by the datapath in the specified nat pool
	NatIP string `protobuf:"bytes,2,opt,name=NatIP,proto3" json:"nat-ip,omitempty"`
}

func (m *NatBindingStatus) Reset()                    { *m = NatBindingStatus{} }
func (m *NatBindingStatus) String() string            { return proto.CompactTextString(m) }
func (*NatBindingStatus) ProtoMessage()               {}
func (*NatBindingStatus) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{8} }

func (m *NatBindingStatus) GetNatBindingID() uint64 {
	if m != nil {
		return m.NatBindingID
	}
	return 0
}

func (m *NatBindingStatus) GetNatIP() string {
	if m != nil {
		return m.NatIP
	}
	return ""
}

// list of nat bindings
type NatBindingList struct {
	NatBindings []*NatBinding `protobuf:"bytes,1,rep,name=NatBindings" json:"NatBindings,omitempty"`
}

func (m *NatBindingList) Reset()                    { *m = NatBindingList{} }
func (m *NatBindingList) String() string            { return proto.CompactTextString(m) }
func (*NatBindingList) ProtoMessage()               {}
func (*NatBindingList) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{9} }

func (m *NatBindingList) GetNatBindings() []*NatBinding {
	if m != nil {
		return m.NatBindings
	}
	return nil
}

type NatBindingEvent struct {
	EventType  api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	NatBinding NatBinding    `protobuf:"bytes,2,opt,name=NatBinding" json:"nat-binding,omitempty"`
}

func (m *NatBindingEvent) Reset()                    { *m = NatBindingEvent{} }
func (m *NatBindingEvent) String() string            { return proto.CompactTextString(m) }
func (*NatBindingEvent) ProtoMessage()               {}
func (*NatBindingEvent) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{10} }

func (m *NatBindingEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *NatBindingEvent) GetNatBinding() NatBinding {
	if m != nil {
		return m.NatBinding
	}
	return NatBinding{}
}

// NatBindingEvent watch events batched
type NatBindingEventList struct {
	NatBindingEvents []*NatBindingEvent `protobuf:"bytes,1,rep,name=NatBindingEvents" json:"NatBindingEvents,omitempty"`
}

func (m *NatBindingEventList) Reset()                    { *m = NatBindingEventList{} }
func (m *NatBindingEventList) String() string            { return proto.CompactTextString(m) }
func (*NatBindingEventList) ProtoMessage()               {}
func (*NatBindingEventList) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{11} }

func (m *NatBindingEventList) GetNatBindingEvents() []*NatBindingEvent {
	if m != nil {
		return m.NatBindingEvents
	}
	return nil
}

// nat policy object
type NatPolicy struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           NatPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         NatPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *NatPolicy) Reset()                    { *m = NatPolicy{} }
func (m *NatPolicy) String() string            { return proto.CompactTextString(m) }
func (*NatPolicy) ProtoMessage()               {}
func (*NatPolicy) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{12} }

func (m *NatPolicy) GetSpec() NatPolicySpec {
	if m != nil {
		return m.Spec
	}
	return NatPolicySpec{}
}

func (m *NatPolicy) GetStatus() NatPolicyStatus {
	if m != nil {
		return m.Status
	}
	return NatPolicyStatus{}
}

type NatPolicySpec struct {
	// VrfName specifies the name of the VRF that the current Nat Policy belongs to
	VrfName string    `protobuf:"bytes,1,opt,name=VrfName,proto3" json:"vrf-name,omitempty"`
	Rules   []NatRule `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
}

func (m *NatPolicySpec) Reset()                    { *m = NatPolicySpec{} }
func (m *NatPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*NatPolicySpec) ProtoMessage()               {}
func (*NatPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{13} }

func (m *NatPolicySpec) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *NatPolicySpec) GetRules() []NatRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// nat rule
type NatRule struct {
	// Nat Rule From match selector.
	Src *MatchSelector `protobuf:"bytes,1,opt,name=Src" json:"source,omitempty"`
	// Nat Rule To match selector.
	Dst *MatchSelector `protobuf:"bytes,2,opt,name=Dst" json:"destination,omitempty"`
	// IP Protocol
	Protocol string `protobuf:"bytes,3,opt,name=Protocol,proto3" json:"protocol,omitempty"`
	// From tcp/udp port. Can be a single port or a port range separated by a hyphen
	FromPort string `protobuf:"bytes,4,opt,name=FromPort,proto3" json:"from-port,omitempty"`
	// To tcp/udp port. Can be a single port or a port range separated by a hyphen
	ToPort string `protobuf:"bytes,5,opt,name=ToPort,proto3" json:"to-port,omitempty"`
	// NAT pool to use
	NatPool string `protobuf:"bytes,6,opt,name=NatPool,proto3" json:"nat-pool,omitempty"`
	// Nat action
	Action string `protobuf:"bytes,7,opt,name=Action,proto3" json:"action,omitempty"`
	ID     uint64 `protobuf:"varint,8,opt,name=ID,proto3" json:"rule-id,omitempty"`
}

func (m *NatRule) Reset()                    { *m = NatRule{} }
func (m *NatRule) String() string            { return proto.CompactTextString(m) }
func (*NatRule) ProtoMessage()               {}
func (*NatRule) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{14} }

func (m *NatRule) GetSrc() *MatchSelector {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *NatRule) GetDst() *MatchSelector {
	if m != nil {
		return m.Dst
	}
	return nil
}

func (m *NatRule) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *NatRule) GetFromPort() string {
	if m != nil {
		return m.FromPort
	}
	return ""
}

func (m *NatRule) GetToPort() string {
	if m != nil {
		return m.ToPort
	}
	return ""
}

func (m *NatRule) GetNatPool() string {
	if m != nil {
		return m.NatPool
	}
	return ""
}

func (m *NatRule) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *NatRule) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type NatPolicyStatus struct {
	NatPolicyID uint64 `protobuf:"varint,1,opt,name=NatPolicyID,proto3" json:"id,omitempty"`
}

func (m *NatPolicyStatus) Reset()                    { *m = NatPolicyStatus{} }
func (m *NatPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyStatus) ProtoMessage()               {}
func (*NatPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{15} }

func (m *NatPolicyStatus) GetNatPolicyID() uint64 {
	if m != nil {
		return m.NatPolicyID
	}
	return 0
}

// list of nat policies
type NatPolicyList struct {
	NatPolicies []*NatPolicy `protobuf:"bytes,1,rep,name=NatPolicies" json:"NatPolicies,omitempty"`
}

func (m *NatPolicyList) Reset()                    { *m = NatPolicyList{} }
func (m *NatPolicyList) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyList) ProtoMessage()               {}
func (*NatPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{16} }

func (m *NatPolicyList) GetNatPolicies() []*NatPolicy {
	if m != nil {
		return m.NatPolicies
	}
	return nil
}

// security group watch event
type NatPolicyEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	NatPolicy NatPolicy     `protobuf:"bytes,2,opt,name=NatPolicy" json:"nat-policy,omitempty"`
}

func (m *NatPolicyEvent) Reset()                    { *m = NatPolicyEvent{} }
func (m *NatPolicyEvent) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyEvent) ProtoMessage()               {}
func (*NatPolicyEvent) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{17} }

func (m *NatPolicyEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *NatPolicyEvent) GetNatPolicy() NatPolicy {
	if m != nil {
		return m.NatPolicy
	}
	return NatPolicy{}
}

// NatPolicyEvent watch events batched
type NatPolicyEventList struct {
	NatPolicyEvents []*NatPolicyEvent `protobuf:"bytes,1,rep,name=NatPolicyEvents" json:"NatPolicyEvents,omitempty"`
}

func (m *NatPolicyEventList) Reset()                    { *m = NatPolicyEventList{} }
func (m *NatPolicyEventList) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyEventList) ProtoMessage()               {}
func (*NatPolicyEventList) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{18} }

func (m *NatPolicyEventList) GetNatPolicyEvents() []*NatPolicyEvent {
	if m != nil {
		return m.NatPolicyEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*NatPool)(nil), "netproto.NatPool")
	proto.RegisterType((*NatPoolSpec)(nil), "netproto.NatPoolSpec")
	proto.RegisterType((*NatPoolStatus)(nil), "netproto.NatPoolStatus")
	proto.RegisterType((*NatPoolStatus_NatBinding)(nil), "netproto.NatPoolStatus.NatBinding")
	proto.RegisterType((*NatPoolList)(nil), "netproto.NatPoolList")
	proto.RegisterType((*NatPoolEvent)(nil), "netproto.NatPoolEvent")
	proto.RegisterType((*NatPoolEventList)(nil), "netproto.NatPoolEventList")
	proto.RegisterType((*NatBinding)(nil), "netproto.NatBinding")
	proto.RegisterType((*NatBindingSpec)(nil), "netproto.NatBindingSpec")
	proto.RegisterType((*NatBindingStatus)(nil), "netproto.NatBindingStatus")
	proto.RegisterType((*NatBindingList)(nil), "netproto.NatBindingList")
	proto.RegisterType((*NatBindingEvent)(nil), "netproto.NatBindingEvent")
	proto.RegisterType((*NatBindingEventList)(nil), "netproto.NatBindingEventList")
	proto.RegisterType((*NatPolicy)(nil), "netproto.NatPolicy")
	proto.RegisterType((*NatPolicySpec)(nil), "netproto.NatPolicySpec")
	proto.RegisterType((*NatRule)(nil), "netproto.NatRule")
	proto.RegisterType((*NatPolicyStatus)(nil), "netproto.NatPolicyStatus")
	proto.RegisterType((*NatPolicyList)(nil), "netproto.NatPolicyList")
	proto.RegisterType((*NatPolicyEvent)(nil), "netproto.NatPolicyEvent")
	proto.RegisterType((*NatPolicyEventList)(nil), "netproto.NatPolicyEventList")
	proto.RegisterEnum("netproto.NatRule_NatAction", NatRule_NatAction_name, NatRule_NatAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NatPoolApi service

type NatPoolApiClient interface {
	GetNatPool(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*NatPool, error)
	ListNatPools(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NatPoolList, error)
	WatchNatPools(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NatPoolApi_WatchNatPoolsClient, error)
}

type natPoolApiClient struct {
	cc *grpc.ClientConn
}

func NewNatPoolApiClient(cc *grpc.ClientConn) NatPoolApiClient {
	return &natPoolApiClient{cc}
}

func (c *natPoolApiClient) GetNatPool(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*NatPool, error) {
	out := new(NatPool)
	err := grpc.Invoke(ctx, "/netproto.NatPoolApi/GetNatPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natPoolApiClient) ListNatPools(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NatPoolList, error) {
	out := new(NatPoolList)
	err := grpc.Invoke(ctx, "/netproto.NatPoolApi/ListNatPools", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natPoolApiClient) WatchNatPools(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NatPoolApi_WatchNatPoolsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NatPoolApi_serviceDesc.Streams[0], c.cc, "/netproto.NatPoolApi/WatchNatPools", opts...)
	if err != nil {
		return nil, err
	}
	x := &natPoolApiWatchNatPoolsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NatPoolApi_WatchNatPoolsClient interface {
	Recv() (*NatPoolEventList, error)
	grpc.ClientStream
}

type natPoolApiWatchNatPoolsClient struct {
	grpc.ClientStream
}

func (x *natPoolApiWatchNatPoolsClient) Recv() (*NatPoolEventList, error) {
	m := new(NatPoolEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NatPoolApi service

type NatPoolApiServer interface {
	GetNatPool(context.Context, *api.ObjectMeta) (*NatPool, error)
	ListNatPools(context.Context, *api.ListWatchOptions) (*NatPoolList, error)
	WatchNatPools(*api.ListWatchOptions, NatPoolApi_WatchNatPoolsServer) error
}

func RegisterNatPoolApiServer(s *grpc.Server, srv NatPoolApiServer) {
	s.RegisterService(&_NatPoolApi_serviceDesc, srv)
}

func _NatPoolApi_GetNatPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatPoolApiServer).GetNatPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.NatPoolApi/GetNatPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatPoolApiServer).GetNatPool(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatPoolApi_ListNatPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatPoolApiServer).ListNatPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.NatPoolApi/ListNatPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatPoolApiServer).ListNatPools(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatPoolApi_WatchNatPools_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NatPoolApiServer).WatchNatPools(m, &natPoolApiWatchNatPoolsServer{stream})
}

type NatPoolApi_WatchNatPoolsServer interface {
	Send(*NatPoolEventList) error
	grpc.ServerStream
}

type natPoolApiWatchNatPoolsServer struct {
	grpc.ServerStream
}

func (x *natPoolApiWatchNatPoolsServer) Send(m *NatPoolEventList) error {
	return x.ServerStream.SendMsg(m)
}

var _NatPoolApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.NatPoolApi",
	HandlerType: (*NatPoolApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNatPool",
			Handler:    _NatPoolApi_GetNatPool_Handler,
		},
		{
			MethodName: "ListNatPools",
			Handler:    _NatPoolApi_ListNatPools_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchNatPools",
			Handler:       _NatPoolApi_WatchNatPools_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nat.proto",
}

// Client API for NatBindingApi service

type NatBindingApiClient interface {
	GetNatBinding(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*NatBinding, error)
	ListNatBindings(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*NatBindingList, error)
	WatchNatBindings(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (NatBindingApi_WatchNatBindingsClient, error)
}

type natBindingApiClient struct {
	cc *grpc.ClientConn
}

func NewNatBindingApiClient(cc *grpc.ClientConn) NatBindingApiClient {
	return &natBindingApiClient{cc}
}

func (c *natBindingApiClient) GetNatBinding(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*NatBinding, error) {
	out := new(NatBinding)
	err := grpc.Invoke(ctx, "/netproto.NatBindingApi/GetNatBinding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natBindingApiClient) ListNatBindings(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*NatBindingList, error) {
	out := new(NatBindingList)
	err := grpc.Invoke(ctx, "/netproto.NatBindingApi/ListNatBindings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natBindingApiClient) WatchNatBindings(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (NatBindingApi_WatchNatBindingsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NatBindingApi_serviceDesc.Streams[0], c.cc, "/netproto.NatBindingApi/WatchNatBindings", opts...)
	if err != nil {
		return nil, err
	}
	x := &natBindingApiWatchNatBindingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NatBindingApi_WatchNatBindingsClient interface {
	Recv() (*NatBindingEventList, error)
	grpc.ClientStream
}

type natBindingApiWatchNatBindingsClient struct {
	grpc.ClientStream
}

func (x *natBindingApiWatchNatBindingsClient) Recv() (*NatBindingEventList, error) {
	m := new(NatBindingEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NatBindingApi service

type NatBindingApiServer interface {
	GetNatBinding(context.Context, *api.ObjectMeta) (*NatBinding, error)
	ListNatBindings(context.Context, *api.ObjectMeta) (*NatBindingList, error)
	WatchNatBindings(*api.ObjectMeta, NatBindingApi_WatchNatBindingsServer) error
}

func RegisterNatBindingApiServer(s *grpc.Server, srv NatBindingApiServer) {
	s.RegisterService(&_NatBindingApi_serviceDesc, srv)
}

func _NatBindingApi_GetNatBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatBindingApiServer).GetNatBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.NatBindingApi/GetNatBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatBindingApiServer).GetNatBinding(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatBindingApi_ListNatBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatBindingApiServer).ListNatBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.NatBindingApi/ListNatBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatBindingApiServer).ListNatBindings(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatBindingApi_WatchNatBindings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NatBindingApiServer).WatchNatBindings(m, &natBindingApiWatchNatBindingsServer{stream})
}

type NatBindingApi_WatchNatBindingsServer interface {
	Send(*NatBindingEventList) error
	grpc.ServerStream
}

type natBindingApiWatchNatBindingsServer struct {
	grpc.ServerStream
}

func (x *natBindingApiWatchNatBindingsServer) Send(m *NatBindingEventList) error {
	return x.ServerStream.SendMsg(m)
}

var _NatBindingApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.NatBindingApi",
	HandlerType: (*NatBindingApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNatBinding",
			Handler:    _NatBindingApi_GetNatBinding_Handler,
		},
		{
			MethodName: "ListNatBindings",
			Handler:    _NatBindingApi_ListNatBindings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchNatBindings",
			Handler:       _NatBindingApi_WatchNatBindings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nat.proto",
}

// Client API for NatPolicyApi service

type NatPolicyApiClient interface {
	GetNatPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*NatPolicy, error)
	ListNatPolicies(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*NatPolicyList, error)
	WatchNatPolicies(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (NatPolicyApi_WatchNatPoliciesClient, error)
}

type natPolicyApiClient struct {
	cc *grpc.ClientConn
}

func NewNatPolicyApiClient(cc *grpc.ClientConn) NatPolicyApiClient {
	return &natPolicyApiClient{cc}
}

func (c *natPolicyApiClient) GetNatPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*NatPolicy, error) {
	out := new(NatPolicy)
	err := grpc.Invoke(ctx, "/netproto.NatPolicyApi/GetNatPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natPolicyApiClient) ListNatPolicies(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*NatPolicyList, error) {
	out := new(NatPolicyList)
	err := grpc.Invoke(ctx, "/netproto.NatPolicyApi/ListNatPolicies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natPolicyApiClient) WatchNatPolicies(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (NatPolicyApi_WatchNatPoliciesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NatPolicyApi_serviceDesc.Streams[0], c.cc, "/netproto.NatPolicyApi/WatchNatPolicies", opts...)
	if err != nil {
		return nil, err
	}
	x := &natPolicyApiWatchNatPoliciesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NatPolicyApi_WatchNatPoliciesClient interface {
	Recv() (*NatPolicyEventList, error)
	grpc.ClientStream
}

type natPolicyApiWatchNatPoliciesClient struct {
	grpc.ClientStream
}

func (x *natPolicyApiWatchNatPoliciesClient) Recv() (*NatPolicyEventList, error) {
	m := new(NatPolicyEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NatPolicyApi service

type NatPolicyApiServer interface {
	GetNatPolicy(context.Context, *api.ObjectMeta) (*NatPolicy, error)
	ListNatPolicies(context.Context, *api.ObjectMeta) (*NatPolicyList, error)
	WatchNatPolicies(*api.ObjectMeta, NatPolicyApi_WatchNatPoliciesServer) error
}

func RegisterNatPolicyApiServer(s *grpc.Server, srv NatPolicyApiServer) {
	s.RegisterService(&_NatPolicyApi_serviceDesc, srv)
}

func _NatPolicyApi_GetNatPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatPolicyApiServer).GetNatPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.NatPolicyApi/GetNatPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatPolicyApiServer).GetNatPolicy(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatPolicyApi_ListNatPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatPolicyApiServer).ListNatPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.NatPolicyApi/ListNatPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatPolicyApiServer).ListNatPolicies(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatPolicyApi_WatchNatPolicies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NatPolicyApiServer).WatchNatPolicies(m, &natPolicyApiWatchNatPoliciesServer{stream})
}

type NatPolicyApi_WatchNatPoliciesServer interface {
	Send(*NatPolicyEventList) error
	grpc.ServerStream
}

type natPolicyApiWatchNatPoliciesServer struct {
	grpc.ServerStream
}

func (x *natPolicyApiWatchNatPoliciesServer) Send(m *NatPolicyEventList) error {
	return x.ServerStream.SendMsg(m)
}

var _NatPolicyApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.NatPolicyApi",
	HandlerType: (*NatPolicyApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNatPolicy",
			Handler:    _NatPolicyApi_GetNatPolicy_Handler,
		},
		{
			MethodName: "ListNatPolicies",
			Handler:    _NatPolicyApi_ListNatPolicies_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchNatPolicies",
			Handler:       _NatPolicyApi_WatchNatPolicies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nat.proto",
}

func (m *NatPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNat(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintNat(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNat(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintNat(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *NatPoolSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VrfName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNat(dAtA, i, uint64(len(m.VrfName)))
		i += copy(dAtA[i:], m.VrfName)
	}
	if len(m.IPRange) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(len(m.IPRange)))
		i += copy(dAtA[i:], m.IPRange)
	}
	return i, nil
}

func (m *NatPoolStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NatPoolID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.NatPoolID))
	}
	if len(m.NatBindings) > 0 {
		for _, msg := range m.NatBindings {
			dAtA[i] = 0x12
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatPoolStatus_NatBinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolStatus_NatBinding) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LocalAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNat(dAtA, i, uint64(len(m.LocalAddress)))
		i += copy(dAtA[i:], m.LocalAddress)
	}
	if m.LocalPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.LocalPort))
	}
	if len(m.GlobalAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNat(dAtA, i, uint64(len(m.GlobalAddress)))
		i += copy(dAtA[i:], m.GlobalAddress)
	}
	if m.GlobalPort != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.GlobalPort))
	}
	if m.Protocol != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Protocol))
	}
	return i, nil
}

func (m *NatPoolList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NatPools) > 0 {
		for _, msg := range m.NatPools {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatPoolEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintNat(dAtA, i, uint64(m.NatPool.Size()))
	n5, err := m.NatPool.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *NatPoolEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NatPoolEvents) > 0 {
		for _, msg := range m.NatPoolEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatBinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatBinding) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNat(dAtA, i, uint64(m.TypeMeta.Size()))
	n6, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x12
	i++
	i = encodeVarintNat(dAtA, i, uint64(m.ObjectMeta.Size()))
	n7, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNat(dAtA, i, uint64(m.Spec.Size()))
	n8, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x22
	i++
	i = encodeVarintNat(dAtA, i, uint64(m.Status.Size()))
	n9, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *NatBindingSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatBindingSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VrfName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNat(dAtA, i, uint64(len(m.VrfName)))
		i += copy(dAtA[i:], m.VrfName)
	}
	if len(m.NatPoolName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(len(m.NatPoolName)))
		i += copy(dAtA[i:], m.NatPoolName)
	}
	if len(m.IPAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNat(dAtA, i, uint64(len(m.IPAddress)))
		i += copy(dAtA[i:], m.IPAddress)
	}
	return i, nil
}

func (m *NatBindingStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatBindingStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NatBindingID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.NatBindingID))
	}
	if len(m.NatIP) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(len(m.NatIP)))
		i += copy(dAtA[i:], m.NatIP)
	}
	return i, nil
}

func (m *NatBindingList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatBindingList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NatBindings) > 0 {
		for _, msg := range m.NatBindings {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatBindingEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatBindingEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintNat(dAtA, i, uint64(m.NatBinding.Size()))
	n10, err := m.NatBinding.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}

func (m *NatBindingEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatBindingEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NatBindingEvents) > 0 {
		for _, msg := range m.NatBindingEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNat(dAtA, i, uint64(m.TypeMeta.Size()))
	n11, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x12
	i++
	i = encodeVarintNat(dAtA, i, uint64(m.ObjectMeta.Size()))
	n12, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNat(dAtA, i, uint64(m.Spec.Size()))
	n13, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x22
	i++
	i = encodeVarintNat(dAtA, i, uint64(m.Status.Size()))
	n14, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	return i, nil
}

func (m *NatPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VrfName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNat(dAtA, i, uint64(len(m.VrfName)))
		i += copy(dAtA[i:], m.VrfName)
	}
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0x12
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Src != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Src.Size()))
		n15, err := m.Src.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Dst != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Dst.Size()))
		n16, err := m.Dst.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNat(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if len(m.FromPort) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNat(dAtA, i, uint64(len(m.FromPort)))
		i += copy(dAtA[i:], m.FromPort)
	}
	if len(m.ToPort) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNat(dAtA, i, uint64(len(m.ToPort)))
		i += copy(dAtA[i:], m.ToPort)
	}
	if len(m.NatPool) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNat(dAtA, i, uint64(len(m.NatPool)))
		i += copy(dAtA[i:], m.NatPool)
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNat(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.ID != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.ID))
	}
	return i, nil
}

func (m *NatPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NatPolicyID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.NatPolicyID))
	}
	return i, nil
}

func (m *NatPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NatPolicies) > 0 {
		for _, msg := range m.NatPolicies {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatPolicyEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicyEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintNat(dAtA, i, uint64(m.NatPolicy.Size()))
	n17, err := m.NatPolicy.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	return i, nil
}

func (m *NatPolicyEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicyEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NatPolicyEvents) > 0 {
		for _, msg := range m.NatPolicyEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintNat(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NatPool) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNat(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNat(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNat(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNat(uint64(l))
	return n
}

func (m *NatPoolSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.VrfName)
	if l > 0 {
		n += 1 + l + sovNat(uint64(l))
	}
	l = len(m.IPRange)
	if l > 0 {
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatPoolStatus) Size() (n int) {
	var l int
	_ = l
	if m.NatPoolID != 0 {
		n += 1 + sovNat(uint64(m.NatPoolID))
	}
	if len(m.NatBindings) > 0 {
		for _, e := range m.NatBindings {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatPoolStatus_NatBinding) Size() (n int) {
	var l int
	_ = l
	l = len(m.LocalAddress)
	if l > 0 {
		n += 1 + l + sovNat(uint64(l))
	}
	if m.LocalPort != 0 {
		n += 1 + sovNat(uint64(m.LocalPort))
	}
	l = len(m.GlobalAddress)
	if l > 0 {
		n += 1 + l + sovNat(uint64(l))
	}
	if m.GlobalPort != 0 {
		n += 1 + sovNat(uint64(m.GlobalPort))
	}
	if m.Protocol != 0 {
		n += 1 + sovNat(uint64(m.Protocol))
	}
	return n
}

func (m *NatPoolList) Size() (n int) {
	var l int
	_ = l
	if len(m.NatPools) > 0 {
		for _, e := range m.NatPools {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatPoolEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovNat(uint64(m.EventType))
	}
	l = m.NatPool.Size()
	n += 1 + l + sovNat(uint64(l))
	return n
}

func (m *NatPoolEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.NatPoolEvents) > 0 {
		for _, e := range m.NatPoolEvents {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatBinding) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNat(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNat(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNat(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNat(uint64(l))
	return n
}

func (m *NatBindingSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.VrfName)
	if l > 0 {
		n += 1 + l + sovNat(uint64(l))
	}
	l = len(m.NatPoolName)
	if l > 0 {
		n += 1 + l + sovNat(uint64(l))
	}
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatBindingStatus) Size() (n int) {
	var l int
	_ = l
	if m.NatBindingID != 0 {
		n += 1 + sovNat(uint64(m.NatBindingID))
	}
	l = len(m.NatIP)
	if l > 0 {
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatBindingList) Size() (n int) {
	var l int
	_ = l
	if len(m.NatBindings) > 0 {
		for _, e := range m.NatBindings {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatBindingEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovNat(uint64(m.EventType))
	}
	l = m.NatBinding.Size()
	n += 1 + l + sovNat(uint64(l))
	return n
}

func (m *NatBindingEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.NatBindingEvents) > 0 {
		for _, e := range m.NatBindingEvents {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNat(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNat(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNat(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNat(uint64(l))
	return n
}

func (m *NatPolicySpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.VrfName)
	if l > 0 {
		n += 1 + l + sovNat(uint64(l))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatRule) Size() (n int) {
	var l int
	_ = l
	if m.Src != nil {
		l = m.Src.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if m.Dst != nil {
		l = m.Dst.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovNat(uint64(l))
	}
	l = len(m.FromPort)
	if l > 0 {
		n += 1 + l + sovNat(uint64(l))
	}
	l = len(m.ToPort)
	if l > 0 {
		n += 1 + l + sovNat(uint64(l))
	}
	l = len(m.NatPool)
	if l > 0 {
		n += 1 + l + sovNat(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovNat(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovNat(uint64(m.ID))
	}
	return n
}

func (m *NatPolicyStatus) Size() (n int) {
	var l int
	_ = l
	if m.NatPolicyID != 0 {
		n += 1 + sovNat(uint64(m.NatPolicyID))
	}
	return n
}

func (m *NatPolicyList) Size() (n int) {
	var l int
	_ = l
	if len(m.NatPolicies) > 0 {
		for _, e := range m.NatPolicies {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatPolicyEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovNat(uint64(m.EventType))
	}
	l = m.NatPolicy.Size()
	n += 1 + l + sovNat(uint64(l))
	return n
}

func (m *NatPolicyEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.NatPolicyEvents) > 0 {
		for _, e := range m.NatPolicyEvents {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func sovNat(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNat(x uint64) (n int) {
	return sovNat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NatPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPRange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPRange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatPoolID", wireType)
			}
			m.NatPoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NatPoolID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatBindings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NatBindings = append(m.NatBindings, &NatPoolStatus_NatBinding{})
			if err := m.NatBindings[len(m.NatBindings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolStatus_NatBinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatBinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatBinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPort", wireType)
			}
			m.LocalPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalPort", wireType)
			}
			m.GlobalPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NatPools = append(m.NatPools, &NatPool{})
			if err := m.NatPools[len(m.NatPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NatPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatPoolEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NatPoolEvents = append(m.NatPoolEvents, &NatPoolEvent{})
			if err := m.NatPoolEvents[len(m.NatPoolEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatBinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatBinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatBinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatBindingSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatBindingSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatBindingSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NatPoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatBindingStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatBindingStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatBindingStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatBindingID", wireType)
			}
			m.NatBindingID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NatBindingID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NatIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatBindingList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatBindingList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatBindingList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatBindings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NatBindings = append(m.NatBindings, &NatBinding{})
			if err := m.NatBindings[len(m.NatBindings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatBindingEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatBindingEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatBindingEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatBinding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NatBinding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatBindingEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatBindingEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatBindingEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatBindingEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NatBindingEvents = append(m.NatBindingEvents, &NatBindingEvent{})
			if err := m.NatBindingEvents[len(m.NatBindingEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, NatRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Src == nil {
				m.Src = &MatchSelector{}
			}
			if err := m.Src.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dst == nil {
				m.Dst = &MatchSelector{}
			}
			if err := m.Dst.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NatPool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatPolicyID", wireType)
			}
			m.NatPolicyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NatPolicyID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NatPolicies = append(m.NatPolicies, &NatPolicy{})
			if err := m.NatPolicies[len(m.NatPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicyEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicyEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicyEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NatPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicyEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicyEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicyEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatPolicyEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NatPolicyEvents = append(m.NatPolicyEvents, &NatPolicyEvent{})
			if err := m.NatPolicyEvents[len(m.NatPolicyEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNat
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNat
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNat(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNat = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNat   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("nat.proto", fileDescriptorNat) }

var fileDescriptorNat = []byte{
	// 1450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcf, 0x6e, 0xdb, 0x46,
	0x13, 0x37, 0x25, 0xd9, 0x96, 0xd6, 0x96, 0xad, 0xac, 0xed, 0x44, 0x12, 0x1c, 0x2b, 0x20, 0xbe,
	0x00, 0xf9, 0x8a, 0x48, 0x0a, 0x94, 0x36, 0xc8, 0x21, 0x49, 0x6b, 0x56, 0x76, 0xaa, 0x26, 0x71,
	0x04, 0xc9, 0x68, 0x7b, 0xe8, 0x85, 0xa6, 0xd6, 0x0a, 0x0b, 0x8a, 0xcb, 0x92, 0x2b, 0x17, 0x6e,
	0x91, 0x4b, 0x0d, 0xf4, 0x31, 0x7a, 0xea, 0xa5, 0x01, 0x5a, 0x14, 0x41, 0x0f, 0x3d, 0xf5, 0xda,
	0x5c, 0x0a, 0xe4, 0x09, 0x84, 0x22, 0x47, 0x3f, 0x45, 0xb1, 0xc3, 0x25, 0xb9, 0x14, 0x29, 0xd7,
	0x08, 0x12, 0x20, 0x37, 0xee, 0x70, 0xe6, 0xb7, 0x33, 0xbf, 0x9d, 0x3f, 0xbb, 0xa8, 0x60, 0xeb,
	0xac, 0xe1, 0xb8, 0x94, 0x51, 0x9c, 0xb7, 0x09, 0x83, 0xaf, 0xea, 0xe6, 0x90, 0xd2, 0xa1, 0x45,
	0x9a, 0xba, 0x63, 0x36, 0x75, 0xdb, 0xa6, 0x4c, 0x67, 0x26, 0xb5, 0x3d, 0x5f, 0xaf, 0xba, 0x33,
	0x34, 0xd9, 0x93, 0xf1, 0x41, 0xc3, 0xa0, 0xa3, 0xa6, 0x43, 0x6c, 0x4f, 0xb7, 0x07, 0xb4, 0xe9,
	0x7d, 0xd3, 0x3c, 0x22, 0xb6, 0x69, 0x90, 0xe6, 0x98, 0x99, 0x96, 0xc7, 0x4d, 0x87, 0xc4, 0x96,
	0xad, 0x9b, 0xa6, 0x6d, 0x58, 0xe3, 0x01, 0x09, 0x60, 0xea, 0x12, 0xcc, 0x90, 0x0e, 0x69, 0x13,
	0xc4, 0x07, 0xe3, 0x43, 0x58, 0xc1, 0x02, 0xbe, 0x84, 0xfa, 0xd5, 0x19, 0xbb, 0x72, 0x1f, 0x47,
	0x84, 0xe9, 0x42, 0x6d, 0x69, 0xa4, 0x33, 0xe3, 0x89, 0xbf, 0x50, 0x7f, 0xca, 0xa0, 0xc5, 0x3d,
	0x9d, 0x75, 0x29, 0xb5, 0xf0, 0x3d, 0x94, 0xdf, 0x3f, 0x76, 0xc8, 0x23, 0xc2, 0xf4, 0xb2, 0x72,
	0x45, 0xb9, 0xb6, 0xd4, 0x2a, 0x36, 0x74, 0xc7, 0x6c, 0x04, 0x42, 0x6d, 0xed, 0xc5, 0xa4, 0x36,
	0xf7, 0x72, 0x52, 0x53, 0x4e, 0x27, 0xb5, 0xc5, 0xeb, 0xa6, 0x6d, 0x99, 0x36, 0xe9, 0x85, 0x36,
	0xf8, 0x01, 0x42, 0x8f, 0x0f, 0xbe, 0x22, 0x06, 0x03, 0x84, 0x0c, 0x20, 0xac, 0x02, 0x42, 0x24,
	0xd6, 0xaa, 0x12, 0xc6, 0x0a, 0xf7, 0xea, 0x3a, 0x1d, 0x99, 0x8c, 0x8c, 0x1c, 0x76, 0xdc, 0x93,
	0xcc, 0xf1, 0x36, 0xca, 0xf5, 0x1d, 0x62, 0x94, 0xb3, 0x00, 0xb3, 0xd1, 0x08, 0x98, 0x6f, 0x08,
	0x6f, 0xf9, 0x4f, 0xed, 0x22, 0x07, 0xe3, 0x40, 0x9e, 0x43, 0x0c, 0x09, 0x08, 0x4c, 0x71, 0x07,
	0x2d, 0xf4, 0x99, 0xce, 0xc6, 0x5e, 0x39, 0x07, 0x20, 0x97, 0x92, 0x20, 0xf0, 0x5b, 0x2b, 0x0b,
	0x98, 0x92, 0x07, 0x6b, 0x09, 0x48, 0x00, 0xa8, 0x5f, 0xa3, 0x25, 0x69, 0x5f, 0x7c, 0x03, 0x2d,
	0x7e, 0xe6, 0x1e, 0xee, 0xe9, 0x23, 0x02, 0x44, 0x15, 0xb4, 0x8b, 0xa7, 0x93, 0x1a, 0x3e, 0x72,
	0x0f, 0xeb, 0xb6, 0x3e, 0x22, 0x92, 0x7d, 0xa0, 0xc6, 0x2d, 0x3a, 0xdd, 0x9e, 0x6e, 0x0f, 0x09,
	0x10, 0x23, 0x2c, 0x4c, 0xa7, 0xee, 0x72, 0x99, 0x6c, 0x21, 0xd4, 0xd4, 0x3f, 0x32, 0xa8, 0x18,
	0x73, 0x13, 0x37, 0x50, 0x41, 0x08, 0x3a, 0x6d, 0xd8, 0x37, 0xa7, 0x95, 0x4e, 0x27, 0xb5, 0x65,
	0x73, 0x20, 0xd9, 0x47, 0x2a, 0xb8, 0x0d, 0x4e, 0x6b, 0xa6, 0x3d, 0x30, 0xed, 0xa1, 0x57, 0xce,
	0x5c, 0xc9, 0x5e, 0x5b, 0x6a, 0xa9, 0x33, 0x48, 0x68, 0x44, 0xaa, 0x3d, 0xd9, 0xac, 0xfa, 0x9b,
	0x82, 0x50, 0xb4, 0xc6, 0x2a, 0x5a, 0x7e, 0x48, 0x0d, 0xdd, 0xda, 0x1e, 0x0c, 0x5c, 0xe2, 0x79,
	0x7e, 0xfc, 0xbd, 0x98, 0x0c, 0x6f, 0xa2, 0x02, 0xac, 0xbb, 0xd4, 0x65, 0x10, 0x6e, 0xb1, 0x17,
	0x09, 0xf0, 0xff, 0x50, 0xf1, 0xbe, 0x45, 0x0f, 0x22, 0x88, 0x2c, 0x40, 0xc4, 0x85, 0x78, 0x0b,
	0x21, 0x5f, 0x00, 0x20, 0x39, 0x00, 0x91, 0x24, 0xb8, 0x8a, 0xf2, 0x5d, 0x1e, 0x85, 0x41, 0xad,
	0xf2, 0x3c, 0xfc, 0x0d, 0xd7, 0xea, 0x9d, 0xf0, 0xb4, 0x1e, 0x9a, 0x1e, 0xc3, 0x75, 0x94, 0x17,
	0x4b, 0xee, 0x2e, 0x27, 0xe1, 0x42, 0x82, 0x84, 0x5e, 0xa8, 0xa2, 0xfe, 0xa8, 0xa0, 0x65, 0xb1,
	0xd8, 0x39, 0x22, 0x36, 0xc3, 0xbb, 0xa8, 0x00, 0x1f, 0x3c, 0xd1, 0x21, 0xde, 0x95, 0xd6, 0x0a,
	0xa4, 0x75, 0x28, 0xd5, 0xca, 0xa7, 0x93, 0xda, 0x3a, 0xe1, 0xcb, 0x3a, 0x3b, 0x76, 0xe4, 0xf3,
	0x8c, 0x4c, 0xf1, 0x6e, 0x58, 0x6a, 0xa2, 0x38, 0x92, 0x6e, 0x68, 0x15, 0x91, 0x8a, 0x17, 0x6c,
	0x9d, 0x39, 0x94, 0x5a, 0x72, 0x66, 0x08, 0x1d, 0xb5, 0x8b, 0x4a, 0xb2, 0x7f, 0x10, 0xe3, 0x9d,
	0x30, 0x59, 0x40, 0x16, 0x04, 0x7a, 0x31, 0xb1, 0x03, 0xfc, 0xee, 0xc5, 0x95, 0xd5, 0x5f, 0x32,
	0xb1, 0x33, 0x7e, 0xa7, 0x1a, 0x41, 0x3b, 0xd6, 0x08, 0xca, 0xb1, 0x80, 0x84, 0xc3, 0xe7, 0xe8,
	0x05, 0x0f, 0xa7, 0x7a, 0x41, 0x35, 0x15, 0xe7, 0xbc, 0xed, 0xe0, 0x77, 0x05, 0xad, 0xc4, 0xb7,
	0x7f, 0x8d, 0x96, 0x70, 0x3b, 0xcc, 0x52, 0xb0, 0x92, 0xda, 0x82, 0xad, 0xb3, 0xfa, 0xd4, 0xe1,
	0xcb, 0xaa, 0xf8, 0x16, 0x2a, 0x74, 0xba, 0xb1, 0xea, 0xf1, 0x13, 0xd0, 0x74, 0xea, 0xba, 0x2f,
	0x95, 0x13, 0x30, 0x54, 0x55, 0x19, 0x24, 0x4e, 0x2c, 0x58, 0xfc, 0x3e, 0x24, 0xbb, 0x90, 0x9d,
	0xd1, 0x57, 0x62, 0x5a, 0xf8, 0x3d, 0x34, 0xbf, 0xa7, 0xb3, 0x4e, 0x57, 0x78, 0xbd, 0xce, 0xd9,
	0xe2, 0x5e, 0x9b, 0x8e, 0x64, 0xe2, 0xab, 0xa8, 0x9f, 0xc8, 0x5c, 0x41, 0xb2, 0xde, 0x8a, 0x37,
	0x26, 0x3f, 0x55, 0xd7, 0xd3, 0x4e, 0x24, 0xd6, 0x8a, 0xd4, 0x5f, 0x15, 0xb4, 0x1a, 0xad, 0xdf,
	0x6c, 0x71, 0xf6, 0xe5, 0x0a, 0x10, 0x39, 0x9b, 0xea, 0x92, 0x76, 0x59, 0xa4, 0xc7, 0x06, 0x0f,
	0xf8, 0xc0, 0x17, 0xca, 0xb9, 0x1b, 0xa9, 0xaa, 0x5f, 0xa2, 0xb5, 0x29, 0x7f, 0x21, 0xfe, 0x1d,
	0xf9, 0x1c, 0x62, 0xf5, 0x5a, 0x49, 0xdb, 0xd1, 0x2f, 0xd9, 0x84, 0x89, 0xfa, 0x2c, 0x23, 0x06,
	0x82, 0x65, 0x1a, 0xc7, 0xef, 0x56, 0xd1, 0x7e, 0x1c, 0x2b, 0xda, 0xe9, 0xc1, 0xcb, 0xfd, 0x3d,
	0x47, 0xcd, 0x3e, 0x98, 0xaa, 0xd9, 0x4a, 0x1a, 0xcc, 0x79, 0x4b, 0xf6, 0x44, 0x11, 0x1d, 0x32,
	0xd8, 0xfc, 0x35, 0x2a, 0xf6, 0x23, 0x34, 0xef, 0x8e, 0x2d, 0x12, 0x8c, 0xd2, 0x78, 0xfb, 0xee,
	0x8d, 0x2d, 0xa2, 0x5d, 0x12, 0x7e, 0xac, 0x82, 0x9e, 0x5c, 0x0b, 0x20, 0x50, 0xbf, 0xcf, 0xc1,
	0x0c, 0xe0, 0xba, 0xf8, 0x43, 0x94, 0xed, 0xbb, 0x86, 0x38, 0x2b, 0x89, 0xa2, 0x47, 0xfc, 0x7a,
	0xd6, 0x27, 0x16, 0x31, 0x18, 0x75, 0xfd, 0xd2, 0xf2, 0xe8, 0xd8, 0x35, 0x64, 0x97, 0xb8, 0x25,
	0x6e, 0xa3, 0x6c, 0xdb, 0x63, 0xe2, 0xa8, 0x66, 0x02, 0x54, 0x78, 0xaa, 0x0e, 0x88, 0xc7, 0x4c,
	0x1b, 0x6e, 0x99, 0x32, 0x4a, 0xdb, 0x63, 0xb8, 0x25, 0x0d, 0xd2, 0x6c, 0xc4, 0x83, 0x23, 0x64,
	0x92, 0x7a, 0xa8, 0x87, 0x6f, 0xa2, 0xfc, 0xae, 0x4b, 0x47, 0xe1, 0x68, 0x2e, 0x68, 0x97, 0x4e,
	0x27, 0xb5, 0xb5, 0x43, 0x97, 0x8e, 0xea, 0x0e, 0x75, 0x99, 0x6c, 0x14, 0x28, 0xe2, 0x3a, 0x5a,
	0xd8, 0xa7, 0x60, 0x32, 0x0f, 0x26, 0x1b, 0x7c, 0xcc, 0x31, 0x3a, 0x6d, 0x20, 0x94, 0xf8, 0xf1,
	0x04, 0xd3, 0x72, 0xe1, 0xcc, 0xd6, 0x18, 0xde, 0x5f, 0x3f, 0x45, 0x0b, 0xdb, 0x06, 0x0f, 0xb1,
	0xbc, 0x08, 0x06, 0xad, 0x67, 0x3f, 0x54, 0xaa, 0x7d, 0xe6, 0xee, 0xd8, 0xe3, 0xd1, 0x35, 0xc1,
	0x3a, 0x3f, 0x29, 0x5f, 0xe9, 0xff, 0x9c, 0x58, 0xdd, 0x98, 0xa2, 0x44, 0x20, 0xe0, 0xab, 0x28,
	0xd3, 0x69, 0x97, 0xf3, 0xd0, 0x0c, 0xc1, 0x51, 0x7e, 0x7e, 0xf5, 0x58, 0x47, 0xcc, 0x74, 0xda,
	0xea, 0x4d, 0xa8, 0x40, 0x61, 0x93, 0x47, 0xb9, 0xfe, 0xde, 0xf6, 0x7e, 0x69, 0x8e, 0x7f, 0xb5,
	0xf9, 0x97, 0x02, 0xb2, 0xee, 0xf6, 0x7e, 0x29, 0x03, 0x32, 0xfe, 0x95, 0x55, 0x77, 0xa0, 0x8b,
	0xc9, 0xf9, 0x8b, 0x5b, 0x62, 0x16, 0x70, 0xd1, 0x19, 0x4d, 0x58, 0x56, 0x52, 0x77, 0xa5, 0x84,
	0x86, 0xb6, 0xf2, 0x41, 0x04, 0x62, 0x92, 0xa0, 0xa3, 0xac, 0xa5, 0x14, 0x4d, 0x4f, 0xd6, 0x53,
	0x7f, 0xf6, 0x87, 0x99, 0xff, 0xeb, 0xcd, 0x36, 0xd5, 0xc7, 0x52, 0x83, 0x12, 0x79, 0x9a, 0xe6,
	0x8f, 0xb6, 0x29, 0xca, 0x66, 0xdd, 0x3f, 0x5e, 0x2e, 0x4b, 0x5c, 0x69, 0xb9, 0x50, 0xfd, 0x02,
	0xe1, 0xb8, 0xab, 0x10, 0xb8, 0x26, 0x11, 0x1a, 0x6b, 0xa7, 0xe5, 0x94, 0xcd, 0xfc, 0x6e, 0x3a,
	0x6d, 0xd0, 0xfa, 0xd3, 0xbf, 0x02, 0xf1, 0x44, 0xda, 0x76, 0x4c, 0xdc, 0x42, 0xe8, 0x3e, 0x61,
	0x41, 0x66, 0x4d, 0xf7, 0xc1, 0x6a, 0xf2, 0xe6, 0xa6, 0xce, 0xe1, 0x7b, 0x68, 0x99, 0xbb, 0x13,
	0x5c, 0x24, 0xf1, 0x06, 0x58, 0x71, 0xd1, 0xe7, 0xbc, 0x22, 0x1f, 0x3b, 0xf0, 0xc8, 0xab, 0x26,
	0xdf, 0x32, 0x5c, 0x45, 0x9d, 0xc3, 0xbb, 0xa8, 0x08, 0x8a, 0xff, 0x05, 0x50, 0x4d, 0xbf, 0xd4,
	0xf9, 0x28, 0x37, 0x94, 0x2a, 0x7b, 0x7e, 0x52, 0x71, 0xa2, 0x67, 0x5d, 0xce, 0xe2, 0x1c, 0xe5,
	0x1c, 0xea, 0x31, 0x9c, 0x75, 0xc6, 0x0c, 0x2f, 0x0c, 0x88, 0x45, 0x18, 0xa9, 0xde, 0x6d, 0x7e,
	0x17, 0x85, 0xd4, 0xd8, 0x27, 0xb6, 0x6e, 0xb3, 0xa7, 0x31, 0x19, 0xef, 0x7a, 0x9e, 0xa3, 0x1b,
	0x24, 0x29, 0x7e, 0xaa, 0x16, 0xf9, 0xbb, 0xd2, 0xd6, 0x59, 0x93, 0xd7, 0xa3, 0xd7, 0xfa, 0xdb,
	0x7f, 0xaf, 0x88, 0x11, 0xc5, 0x39, 0xbc, 0x8d, 0x8a, 0x3e, 0x87, 0xc1, 0xbd, 0x32, 0x41, 0x63,
	0xea, 0x80, 0x05, 0x26, 0x57, 0x05, 0x93, 0xc1, 0xec, 0x4f, 0xda, 0xa6, 0xde, 0x04, 0x43, 0x26,
	0x4b, 0x01, 0x93, 0xb3, 0x01, 0x2e, 0xcf, 0x9c, 0xb5, 0x21, 0x93, 0xdf, 0x3e, 0x3f, 0xa9, 0x1c,
	0xc5, 0xae, 0xc6, 0x6f, 0x8b, 0xcc, 0x52, 0x40, 0xa6, 0xb8, 0x50, 0x78, 0xad, 0xbf, 0x32, 0xe2,
	0x19, 0xc2, 0x93, 0x94, 0xd3, 0x79, 0x0b, 0x2d, 0x07, 0x29, 0x09, 0x03, 0x3f, 0x11, 0x50, 0x5a,
	0x69, 0xa9, 0x73, 0xf8, 0x6e, 0x48, 0x66, 0x50, 0xf2, 0x49, 0xd3, 0xb4, 0x09, 0x2d, 0xb8, 0xdc,
	0x89, 0xb8, 0x9c, 0x6d, 0xbf, 0x39, 0xab, 0xd0, 0x42, 0x2a, 0x8f, 0x9f, 0x9f, 0x54, 0xc6, 0xf2,
	0x7d, 0xe5, 0xad, 0x33, 0xe9, 0x08, 0x6f, 0xb5, 0xe5, 0x17, 0xaf, 0xb6, 0x94, 0x97, 0xaf, 0xb6,
	0x94, 0x7f, 0x5e, 0x6d, 0x29, 0x5d, 0xe5, 0x60, 0x01, 0x1c, 0xbd, 0xf9, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x4f, 0x92, 0xf2, 0x95, 0xd9, 0x11, 0x00, 0x00,
}
