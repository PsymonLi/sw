// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mirror.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MirrorDir int32

const (
	MirrorDir_BOTH    MirrorDir = 0
	MirrorDir_INGRESS MirrorDir = 1
	MirrorDir_EGRESS  MirrorDir = 2
)

var MirrorDir_name = map[int32]string{
	0: "BOTH",
	1: "INGRESS",
	2: "EGRESS",
}
var MirrorDir_value = map[string]int32{
	"BOTH":    0,
	"INGRESS": 1,
	"EGRESS":  2,
}

func (x MirrorDir) String() string {
	return proto.EnumName(MirrorDir_name, int32(x))
}
func (MirrorDir) EnumDescriptor() ([]byte, []int) { return fileDescriptorMirror, []int{0} }

type MirrorSession struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           MirrorSessionSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         MirrorSessionStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *MirrorSession) Reset()                    { *m = MirrorSession{} }
func (m *MirrorSession) String() string            { return proto.CompactTextString(m) }
func (*MirrorSession) ProtoMessage()               {}
func (*MirrorSession) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{0} }

func (m *MirrorSession) GetSpec() MirrorSessionSpec {
	if m != nil {
		return m.Spec
	}
	return MirrorSessionSpec{}
}

func (m *MirrorSession) GetStatus() MirrorSessionStatus {
	if m != nil {
		return m.Status
	}
	return MirrorSessionStatus{}
}

type MirrorSessionSpec struct {
	VrfName string `protobuf:"bytes,1,opt,name=VrfName,proto3" json:"vrf-name,omitempty"`
	// Mirrored packet collectors
	Collectors []MirrorCollector `protobuf:"bytes,2,rep,name=Collectors" json:"collectors,inline"`
	// Traffic Selection Rules - Matching pakcets are mirrored, based on packet filters and start/stop conditions
	MatchRules      []MatchRule `protobuf:"bytes,3,rep,name=MatchRules" json:"match-rules,inline"`
	PacketSize      uint32      `protobuf:"varint,4,opt,name=PacketSize,proto3" json:"packet-size,omitempty"`
	MirrorDirection MirrorDir   `protobuf:"varint,5,opt,name=MirrorDirection,proto3,enum=netproto.MirrorDir" json:"mirror-direction,omitempty"`
}

func (m *MirrorSessionSpec) Reset()                    { *m = MirrorSessionSpec{} }
func (m *MirrorSessionSpec) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionSpec) ProtoMessage()               {}
func (*MirrorSessionSpec) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{1} }

func (m *MirrorSessionSpec) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *MirrorSessionSpec) GetCollectors() []MirrorCollector {
	if m != nil {
		return m.Collectors
	}
	return nil
}

func (m *MirrorSessionSpec) GetMatchRules() []MatchRule {
	if m != nil {
		return m.MatchRules
	}
	return nil
}

func (m *MirrorSessionSpec) GetPacketSize() uint32 {
	if m != nil {
		return m.PacketSize
	}
	return 0
}

func (m *MirrorSessionSpec) GetMirrorDirection() MirrorDir {
	if m != nil {
		return m.MirrorDirection
	}
	return MirrorDir_BOTH
}

// MirrorSessionStatus captures the sg policy status
type MirrorSessionStatus struct {
	MirrorSessionID uint64 `protobuf:"varint,1,opt,name=MirrorSessionID,proto3" json:"id,omitempty"`
}

func (m *MirrorSessionStatus) Reset()                    { *m = MirrorSessionStatus{} }
func (m *MirrorSessionStatus) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionStatus) ProtoMessage()               {}
func (*MirrorSessionStatus) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{2} }

func (m *MirrorSessionStatus) GetMirrorSessionID() uint64 {
	if m != nil {
		return m.MirrorSessionID
	}
	return 0
}

type MirrorSessionList struct {
	MirrorSessions []*MirrorSession `protobuf:"bytes,1,rep,name=MirrorSessions" json:"MirrorSessions,omitempty"`
}

func (m *MirrorSessionList) Reset()                    { *m = MirrorSessionList{} }
func (m *MirrorSessionList) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionList) ProtoMessage()               {}
func (*MirrorSessionList) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{3} }

func (m *MirrorSessionList) GetMirrorSessions() []*MirrorSession {
	if m != nil {
		return m.MirrorSessions
	}
	return nil
}

// mirror watch event
type MirrorSessionEvent struct {
	EventType     api.EventType  `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	MirrorSession *MirrorSession `protobuf:"bytes,2,opt,name=MirrorSession" json:"mirror-session,omitempty"`
}

func (m *MirrorSessionEvent) Reset()                    { *m = MirrorSessionEvent{} }
func (m *MirrorSessionEvent) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionEvent) ProtoMessage()               {}
func (*MirrorSessionEvent) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{4} }

func (m *MirrorSessionEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *MirrorSessionEvent) GetMirrorSession() *MirrorSession {
	if m != nil {
		return m.MirrorSession
	}
	return nil
}

// mirror watch events batched
type MirrorSessionEventList struct {
	MirrorSessionEvents []*MirrorSessionEvent `protobuf:"bytes,1,rep,name=MirrorSessionEvents" json:"MirrorSessionEvents,omitempty"`
}

func (m *MirrorSessionEventList) Reset()                    { *m = MirrorSessionEventList{} }
func (m *MirrorSessionEventList) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionEventList) ProtoMessage()               {}
func (*MirrorSessionEventList) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{5} }

func (m *MirrorSessionEventList) GetMirrorSessionEvents() []*MirrorSessionEvent {
	if m != nil {
		return m.MirrorSessionEvents
	}
	return nil
}

type MirrorExportConfig struct {
	// IP address or URL of the collector/entity to which the data is to be exported
	Destination string `protobuf:"bytes,1,opt,name=Destination,proto3" json:"destination,omitempty"`
	Gateway     string `protobuf:"bytes,2,opt,name=Gateway,proto3" json:"gateway,omitempty"`
}

func (m *MirrorExportConfig) Reset()                    { *m = MirrorExportConfig{} }
func (m *MirrorExportConfig) String() string            { return proto.CompactTextString(m) }
func (*MirrorExportConfig) ProtoMessage()               {}
func (*MirrorExportConfig) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{6} }

func (m *MirrorExportConfig) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *MirrorExportConfig) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

// Mirror collector - can be an external device (via ERSPAN) or Venice (internal packet capture)
type MirrorCollector struct {
	// Collector export information for ERSPAN. Not required for VENICE collector
	ExportCfg   MirrorExportConfig `protobuf:"bytes,1,opt,name=ExportCfg" json:"export-config,omitempty"`
	PcapDirName string             `protobuf:"bytes,2,opt,name=PcapDirName,proto3" json:"pcap-dir-name"`
}

func (m *MirrorCollector) Reset()                    { *m = MirrorCollector{} }
func (m *MirrorCollector) String() string            { return proto.CompactTextString(m) }
func (*MirrorCollector) ProtoMessage()               {}
func (*MirrorCollector) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{7} }

func (m *MirrorCollector) GetExportCfg() MirrorExportConfig {
	if m != nil {
		return m.ExportCfg
	}
	return MirrorExportConfig{}
}

func (m *MirrorCollector) GetPcapDirName() string {
	if m != nil {
		return m.PcapDirName
	}
	return ""
}

func init() {
	proto.RegisterType((*MirrorSession)(nil), "netproto.MirrorSession")
	proto.RegisterType((*MirrorSessionSpec)(nil), "netproto.MirrorSessionSpec")
	proto.RegisterType((*MirrorSessionStatus)(nil), "netproto.MirrorSessionStatus")
	proto.RegisterType((*MirrorSessionList)(nil), "netproto.MirrorSessionList")
	proto.RegisterType((*MirrorSessionEvent)(nil), "netproto.MirrorSessionEvent")
	proto.RegisterType((*MirrorSessionEventList)(nil), "netproto.MirrorSessionEventList")
	proto.RegisterType((*MirrorExportConfig)(nil), "netproto.MirrorExportConfig")
	proto.RegisterType((*MirrorCollector)(nil), "netproto.MirrorCollector")
	proto.RegisterEnum("netproto.MirrorDir", MirrorDir_name, MirrorDir_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MirrorSessionApiV1 service

type MirrorSessionApiV1Client interface {
	//    TODO uncomment this when TSM uses nimbus
	WatchMirrorSessions(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (MirrorSessionApiV1_WatchMirrorSessionsClient, error)
	ListMirrorSessions(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*MirrorSessionEventList, error)
}

type mirrorSessionApiV1Client struct {
	cc *grpc.ClientConn
}

func NewMirrorSessionApiV1Client(cc *grpc.ClientConn) MirrorSessionApiV1Client {
	return &mirrorSessionApiV1Client{cc}
}

func (c *mirrorSessionApiV1Client) WatchMirrorSessions(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (MirrorSessionApiV1_WatchMirrorSessionsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MirrorSessionApiV1_serviceDesc.Streams[0], c.cc, "/netproto.MirrorSessionApiV1/WatchMirrorSessions", opts...)
	if err != nil {
		return nil, err
	}
	x := &mirrorSessionApiV1WatchMirrorSessionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MirrorSessionApiV1_WatchMirrorSessionsClient interface {
	Recv() (*MirrorSessionEventList, error)
	grpc.ClientStream
}

type mirrorSessionApiV1WatchMirrorSessionsClient struct {
	grpc.ClientStream
}

func (x *mirrorSessionApiV1WatchMirrorSessionsClient) Recv() (*MirrorSessionEventList, error) {
	m := new(MirrorSessionEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mirrorSessionApiV1Client) ListMirrorSessions(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*MirrorSessionEventList, error) {
	out := new(MirrorSessionEventList)
	err := grpc.Invoke(ctx, "/netproto.MirrorSessionApiV1/ListMirrorSessions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MirrorSessionApiV1 service

type MirrorSessionApiV1Server interface {
	//    TODO uncomment this when TSM uses nimbus
	WatchMirrorSessions(*api.ObjectMeta, MirrorSessionApiV1_WatchMirrorSessionsServer) error
	ListMirrorSessions(context.Context, *api.ObjectMeta) (*MirrorSessionEventList, error)
}

func RegisterMirrorSessionApiV1Server(s *grpc.Server, srv MirrorSessionApiV1Server) {
	s.RegisterService(&_MirrorSessionApiV1_serviceDesc, srv)
}

func _MirrorSessionApiV1_WatchMirrorSessions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MirrorSessionApiV1Server).WatchMirrorSessions(m, &mirrorSessionApiV1WatchMirrorSessionsServer{stream})
}

type MirrorSessionApiV1_WatchMirrorSessionsServer interface {
	Send(*MirrorSessionEventList) error
	grpc.ServerStream
}

type mirrorSessionApiV1WatchMirrorSessionsServer struct {
	grpc.ServerStream
}

func (x *mirrorSessionApiV1WatchMirrorSessionsServer) Send(m *MirrorSessionEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _MirrorSessionApiV1_ListMirrorSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorSessionApiV1Server).ListMirrorSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.MirrorSessionApiV1/ListMirrorSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorSessionApiV1Server).ListMirrorSessions(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

var _MirrorSessionApiV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.MirrorSessionApiV1",
	HandlerType: (*MirrorSessionApiV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMirrorSessions",
			Handler:    _MirrorSessionApiV1_ListMirrorSessions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchMirrorSessions",
			Handler:       _MirrorSessionApiV1_WatchMirrorSessions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mirror.proto",
}

// Client API for MirrorSessionApiV2 service

type MirrorSessionApiV2Client interface {
	//    TODO uncomment this when TSM uses nimbus
	WatchMirrorSessions(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MirrorSessionApiV2_WatchMirrorSessionsClient, error)
	ListMirrorSessions(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*MirrorSessionList, error)
	MirrorSessionOperUpdate(ctx context.Context, opts ...grpc.CallOption) (MirrorSessionApiV2_MirrorSessionOperUpdateClient, error)
}

type mirrorSessionApiV2Client struct {
	cc *grpc.ClientConn
}

func NewMirrorSessionApiV2Client(cc *grpc.ClientConn) MirrorSessionApiV2Client {
	return &mirrorSessionApiV2Client{cc}
}

func (c *mirrorSessionApiV2Client) WatchMirrorSessions(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MirrorSessionApiV2_WatchMirrorSessionsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MirrorSessionApiV2_serviceDesc.Streams[0], c.cc, "/netproto.MirrorSessionApiV2/WatchMirrorSessions", opts...)
	if err != nil {
		return nil, err
	}
	x := &mirrorSessionApiV2WatchMirrorSessionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MirrorSessionApiV2_WatchMirrorSessionsClient interface {
	Recv() (*MirrorSessionEventList, error)
	grpc.ClientStream
}

type mirrorSessionApiV2WatchMirrorSessionsClient struct {
	grpc.ClientStream
}

func (x *mirrorSessionApiV2WatchMirrorSessionsClient) Recv() (*MirrorSessionEventList, error) {
	m := new(MirrorSessionEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mirrorSessionApiV2Client) ListMirrorSessions(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*MirrorSessionList, error) {
	out := new(MirrorSessionList)
	err := grpc.Invoke(ctx, "/netproto.MirrorSessionApiV2/ListMirrorSessions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorSessionApiV2Client) MirrorSessionOperUpdate(ctx context.Context, opts ...grpc.CallOption) (MirrorSessionApiV2_MirrorSessionOperUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MirrorSessionApiV2_serviceDesc.Streams[1], c.cc, "/netproto.MirrorSessionApiV2/MirrorSessionOperUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &mirrorSessionApiV2MirrorSessionOperUpdateClient{stream}
	return x, nil
}

type MirrorSessionApiV2_MirrorSessionOperUpdateClient interface {
	Send(*MirrorSessionEvent) error
	CloseAndRecv() (*api.TypeMeta, error)
	grpc.ClientStream
}

type mirrorSessionApiV2MirrorSessionOperUpdateClient struct {
	grpc.ClientStream
}

func (x *mirrorSessionApiV2MirrorSessionOperUpdateClient) Send(m *MirrorSessionEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mirrorSessionApiV2MirrorSessionOperUpdateClient) CloseAndRecv() (*api.TypeMeta, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.TypeMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MirrorSessionApiV2 service

type MirrorSessionApiV2Server interface {
	//    TODO uncomment this when TSM uses nimbus
	WatchMirrorSessions(*api.ListWatchOptions, MirrorSessionApiV2_WatchMirrorSessionsServer) error
	ListMirrorSessions(context.Context, *api.ListWatchOptions) (*MirrorSessionList, error)
	MirrorSessionOperUpdate(MirrorSessionApiV2_MirrorSessionOperUpdateServer) error
}

func RegisterMirrorSessionApiV2Server(s *grpc.Server, srv MirrorSessionApiV2Server) {
	s.RegisterService(&_MirrorSessionApiV2_serviceDesc, srv)
}

func _MirrorSessionApiV2_WatchMirrorSessions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MirrorSessionApiV2Server).WatchMirrorSessions(m, &mirrorSessionApiV2WatchMirrorSessionsServer{stream})
}

type MirrorSessionApiV2_WatchMirrorSessionsServer interface {
	Send(*MirrorSessionEventList) error
	grpc.ServerStream
}

type mirrorSessionApiV2WatchMirrorSessionsServer struct {
	grpc.ServerStream
}

func (x *mirrorSessionApiV2WatchMirrorSessionsServer) Send(m *MirrorSessionEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _MirrorSessionApiV2_ListMirrorSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorSessionApiV2Server).ListMirrorSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.MirrorSessionApiV2/ListMirrorSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorSessionApiV2Server).ListMirrorSessions(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MirrorSessionApiV2_MirrorSessionOperUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MirrorSessionApiV2Server).MirrorSessionOperUpdate(&mirrorSessionApiV2MirrorSessionOperUpdateServer{stream})
}

type MirrorSessionApiV2_MirrorSessionOperUpdateServer interface {
	SendAndClose(*api.TypeMeta) error
	Recv() (*MirrorSessionEvent, error)
	grpc.ServerStream
}

type mirrorSessionApiV2MirrorSessionOperUpdateServer struct {
	grpc.ServerStream
}

func (x *mirrorSessionApiV2MirrorSessionOperUpdateServer) SendAndClose(m *api.TypeMeta) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mirrorSessionApiV2MirrorSessionOperUpdateServer) Recv() (*MirrorSessionEvent, error) {
	m := new(MirrorSessionEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MirrorSessionApiV2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.MirrorSessionApiV2",
	HandlerType: (*MirrorSessionApiV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMirrorSessions",
			Handler:    _MirrorSessionApiV2_ListMirrorSessions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchMirrorSessions",
			Handler:       _MirrorSessionApiV2_WatchMirrorSessions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MirrorSessionOperUpdate",
			Handler:       _MirrorSessionApiV2_MirrorSessionOperUpdate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "mirror.proto",
}

func (m *MirrorSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *MirrorSessionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSessionSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VrfName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.VrfName)))
		i += copy(dAtA[i:], m.VrfName)
	}
	if len(m.Collectors) > 0 {
		for _, msg := range m.Collectors {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMirror(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MatchRules) > 0 {
		for _, msg := range m.MatchRules {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMirror(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.PacketSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.PacketSize))
	}
	if m.MirrorDirection != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.MirrorDirection))
	}
	return i, nil
}

func (m *MirrorSessionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSessionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MirrorSessionID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.MirrorSessionID))
	}
	return i, nil
}

func (m *MirrorSessionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSessionList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MirrorSessions) > 0 {
		for _, msg := range m.MirrorSessions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMirror(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MirrorSessionEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSessionEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.EventType))
	}
	if m.MirrorSession != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.MirrorSession.Size()))
		n5, err := m.MirrorSession.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *MirrorSessionEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSessionEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MirrorSessionEvents) > 0 {
		for _, msg := range m.MirrorSessionEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMirror(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MirrorExportConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorExportConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Destination) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.Destination)))
		i += copy(dAtA[i:], m.Destination)
	}
	if len(m.Gateway) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.Gateway)))
		i += copy(dAtA[i:], m.Gateway)
	}
	return i, nil
}

func (m *MirrorCollector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorCollector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.ExportCfg.Size()))
	n6, err := m.ExportCfg.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.PcapDirName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.PcapDirName)))
		i += copy(dAtA[i:], m.PcapDirName)
	}
	return i, nil
}

func encodeVarintMirror(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MirrorSession) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovMirror(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovMirror(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovMirror(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovMirror(uint64(l))
	return n
}

func (m *MirrorSessionSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.VrfName)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	if len(m.Collectors) > 0 {
		for _, e := range m.Collectors {
			l = e.Size()
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	if len(m.MatchRules) > 0 {
		for _, e := range m.MatchRules {
			l = e.Size()
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	if m.PacketSize != 0 {
		n += 1 + sovMirror(uint64(m.PacketSize))
	}
	if m.MirrorDirection != 0 {
		n += 1 + sovMirror(uint64(m.MirrorDirection))
	}
	return n
}

func (m *MirrorSessionStatus) Size() (n int) {
	var l int
	_ = l
	if m.MirrorSessionID != 0 {
		n += 1 + sovMirror(uint64(m.MirrorSessionID))
	}
	return n
}

func (m *MirrorSessionList) Size() (n int) {
	var l int
	_ = l
	if len(m.MirrorSessions) > 0 {
		for _, e := range m.MirrorSessions {
			l = e.Size()
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	return n
}

func (m *MirrorSessionEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovMirror(uint64(m.EventType))
	}
	if m.MirrorSession != nil {
		l = m.MirrorSession.Size()
		n += 1 + l + sovMirror(uint64(l))
	}
	return n
}

func (m *MirrorSessionEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.MirrorSessionEvents) > 0 {
		for _, e := range m.MirrorSessionEvents {
			l = e.Size()
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	return n
}

func (m *MirrorExportConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	return n
}

func (m *MirrorCollector) Size() (n int) {
	var l int
	_ = l
	l = m.ExportCfg.Size()
	n += 1 + l + sovMirror(uint64(l))
	l = len(m.PcapDirName)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	return n
}

func sovMirror(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMirror(x uint64) (n int) {
	return sovMirror(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MirrorSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorSessionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSessionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSessionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collectors = append(m.Collectors, MirrorCollector{})
			if err := m.Collectors[len(m.Collectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchRules = append(m.MatchRules, MatchRule{})
			if err := m.MatchRules[len(m.MatchRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketSize", wireType)
			}
			m.PacketSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MirrorDirection", wireType)
			}
			m.MirrorDirection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MirrorDirection |= (MirrorDir(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorSessionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSessionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSessionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MirrorSessionID", wireType)
			}
			m.MirrorSessionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MirrorSessionID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorSessionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSessionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSessionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MirrorSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MirrorSessions = append(m.MirrorSessions, &MirrorSession{})
			if err := m.MirrorSessions[len(m.MirrorSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorSessionEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSessionEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSessionEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MirrorSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MirrorSession == nil {
				m.MirrorSession = &MirrorSession{}
			}
			if err := m.MirrorSession.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorSessionEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSessionEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSessionEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MirrorSessionEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MirrorSessionEvents = append(m.MirrorSessionEvents, &MirrorSessionEvent{})
			if err := m.MirrorSessionEvents[len(m.MirrorSessionEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorExportConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorExportConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorExportConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorCollector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorCollector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorCollector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportCfg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExportCfg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcapDirName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PcapDirName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMirror(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMirror
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMirror
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMirror(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMirror = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMirror   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mirror.proto", fileDescriptorMirror) }

var fileDescriptorMirror = []byte{
	// 1031 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xc7, 0xb3, 0xb6, 0x49, 0xe2, 0x71, 0xe2, 0x26, 0x93, 0x26, 0x59, 0x9b, 0x92, 0xb5, 0x56,
	0x42, 0x98, 0x12, 0x7b, 0x53, 0xb7, 0x07, 0x40, 0x02, 0xd4, 0x6d, 0x4c, 0x48, 0x49, 0xe2, 0x60,
	0x9b, 0x70, 0xe0, 0x80, 0x36, 0xeb, 0xf1, 0x66, 0xc0, 0x9e, 0x1d, 0xed, 0x8c, 0x53, 0x52, 0xd4,
	0x13, 0x52, 0x2e, 0x48, 0x7c, 0x02, 0x6e, 0x48, 0x1c, 0x2a, 0x71, 0xe1, 0xc0, 0x8d, 0x7b, 0x8e,
	0xfd, 0x04, 0x16, 0xca, 0xd1, 0x9f, 0x02, 0xcd, 0xec, 0x8b, 0x77, 0xfd, 0x52, 0x71, 0xe8, 0x6d,
	0xe6, 0xf1, 0xf3, 0xfc, 0xe6, 0x3f, 0xcf, 0xcb, 0xac, 0xc1, 0x4a, 0x1f, 0x7b, 0x9e, 0xeb, 0x55,
	0xa9, 0xe7, 0x72, 0x17, 0x2e, 0x13, 0xc4, 0xe5, 0xaa, 0x78, 0xcf, 0x71, 0x5d, 0xa7, 0x87, 0x0c,
	0x8b, 0x62, 0xc3, 0x22, 0xc4, 0xe5, 0x16, 0xc7, 0x2e, 0x61, 0xbe, 0x5f, 0xb1, 0xee, 0x60, 0x7e,
	0x31, 0x38, 0xaf, 0xda, 0x6e, 0xdf, 0xa0, 0x88, 0x30, 0x8b, 0x74, 0x5c, 0x83, 0x3d, 0x33, 0x2e,
	0x11, 0xc1, 0x36, 0x32, 0x06, 0x1c, 0xf7, 0x98, 0x08, 0x75, 0x10, 0x89, 0x47, 0x1b, 0x98, 0xd8,
	0xbd, 0x41, 0x07, 0x85, 0x98, 0x4a, 0x0c, 0xe3, 0xb8, 0x8e, 0x6b, 0x48, 0xf3, 0xf9, 0xa0, 0x2b,
	0x77, 0x72, 0x23, 0x57, 0x81, 0xfb, 0xbb, 0x73, 0x4e, 0x15, 0x1a, 0xfb, 0x88, 0x5b, 0x81, 0x5b,
	0xae, 0x6f, 0x71, 0xfb, 0xc2, 0xdf, 0xe8, 0x7f, 0xa7, 0xc0, 0xea, 0xb1, 0xbc, 0x62, 0x0b, 0x31,
	0x86, 0x5d, 0x02, 0x3f, 0x05, 0xcb, 0xed, 0x2b, 0x8a, 0x8e, 0x11, 0xb7, 0x54, 0xa5, 0xa4, 0x94,
	0x73, 0xb5, 0xd5, 0xaa, 0x45, 0x71, 0x35, 0x34, 0x9a, 0x1b, 0x37, 0x43, 0x6d, 0xe1, 0xd5, 0x50,
	0x53, 0x46, 0x43, 0x6d, 0x69, 0x17, 0x93, 0x1e, 0x26, 0xa8, 0x19, 0xc5, 0xc0, 0x2f, 0x01, 0x68,
	0x9c, 0x7f, 0x8f, 0x6c, 0x2e, 0x09, 0x29, 0x49, 0xb8, 0x23, 0x09, 0x63, 0xb3, 0x59, 0x8c, 0x31,
	0xf2, 0x42, 0xdb, 0xae, 0xdb, 0xc7, 0x1c, 0xf5, 0x29, 0xbf, 0x6a, 0xc6, 0xc2, 0xe1, 0x01, 0xc8,
	0xb4, 0x28, 0xb2, 0xd5, 0xb4, 0xc4, 0xbc, 0x5d, 0x0d, 0xf3, 0x5f, 0x4d, 0x68, 0x16, 0x2e, 0xe6,
	0x96, 0x40, 0x0a, 0x1c, 0xa3, 0xc8, 0x8e, 0xe1, 0x24, 0x00, 0x36, 0xc0, 0x62, 0x8b, 0x5b, 0x7c,
	0xc0, 0xd4, 0x8c, 0x44, 0xbd, 0x33, 0x0f, 0x25, 0x9d, 0x4c, 0x35, 0x80, 0xad, 0x31, 0xb9, 0x8f,
	0xe1, 0x02, 0x8c, 0xfe, 0x5b, 0x1a, 0xac, 0x4f, 0x89, 0x80, 0x7b, 0x60, 0xe9, 0xcc, 0xeb, 0x9e,
	0x58, 0x7d, 0x24, 0x73, 0x97, 0x35, 0xb7, 0x46, 0x43, 0x0d, 0x5e, 0x7a, 0xdd, 0x0a, 0xb1, 0xfa,
	0x28, 0x86, 0x09, 0xdd, 0x60, 0x1b, 0x80, 0x27, 0x6e, 0xaf, 0x87, 0x6c, 0xee, 0x7a, 0x4c, 0x4d,
	0x95, 0xd2, 0xe5, 0x5c, 0xad, 0x30, 0x29, 0x2e, 0xf2, 0x30, 0x0b, 0x81, 0xb0, 0x75, 0x3b, 0x0a,
	0x0a, 0x4b, 0x10, 0xe3, 0xc0, 0x06, 0x00, 0xc7, 0xa2, 0xca, 0xcd, 0x41, 0x0f, 0x31, 0x35, 0x2d,
	0xa9, 0x1b, 0x31, 0x6a, 0xf8, 0x9b, 0x5f, 0x08, 0xa1, 0x51, 0x36, 0x45, 0xc5, 0x13, 0xfe, 0x11,
	0x70, 0x8c, 0x80, 0x1f, 0x01, 0x70, 0x6a, 0xd9, 0x3f, 0x20, 0xde, 0xc2, 0xcf, 0x91, 0xcc, 0xe1,
	0xaa, 0x59, 0x18, 0x0d, 0xb5, 0x4d, 0x2a, 0xad, 0x15, 0x86, 0x9f, 0xc7, 0xaf, 0x17, 0x73, 0x86,
	0x0c, 0xdc, 0xf1, 0x6f, 0xb1, 0x8f, 0x3d, 0x64, 0x8b, 0x46, 0x57, 0xdf, 0x2a, 0x29, 0xe5, 0x7c,
	0x42, 0x50, 0xe8, 0x60, 0x3e, 0x7a, 0x79, 0x5d, 0x80, 0x2d, 0xee, 0xd5, 0xc9, 0xa0, 0x5f, 0x8e,
	0xcc, 0xef, 0x8f, 0x86, 0x5a, 0xd1, 0x1f, 0xc5, 0x4a, 0x27, 0xc4, 0xc4, 0xce, 0x9b, 0x3c, 0x41,
	0xff, 0x0a, 0x6c, 0xcc, 0xa8, 0x2b, 0xfc, 0x38, 0xd4, 0x12, 0x98, 0x0f, 0xf7, 0x65, 0x9d, 0x32,
	0xe6, 0xda, 0x68, 0xa8, 0xad, 0xe0, 0xce, 0x34, 0x32, 0x72, 0xd4, 0xdb, 0x13, 0x05, 0x3f, 0xc2,
	0x8c, 0xc3, 0xcf, 0x40, 0x3e, 0x61, 0x64, 0xaa, 0x22, 0x93, 0xbd, 0x3d, 0xa7, 0xbf, 0x9a, 0x13,
	0xee, 0xfa, 0x3f, 0x0a, 0x80, 0x09, 0x53, 0xfd, 0x12, 0x11, 0x0e, 0x3f, 0x07, 0x59, 0xb9, 0x10,
	0x63, 0x25, 0x25, 0xe6, 0x6b, 0x79, 0x39, 0x44, 0x91, 0xd5, 0x54, 0x47, 0x43, 0xed, 0x2e, 0x12,
	0xdb, 0x0a, 0xbf, 0xa2, 0xf1, 0xec, 0x8f, 0x43, 0xe1, 0x77, 0x13, 0xe3, 0x1d, 0x0c, 0xe4, 0x3c,
	0x79, 0x66, 0xe9, 0xc6, 0x1f, 0x4a, 0x35, 0x48, 0x36, 0xf3, 0xed, 0x31, 0x78, 0x92, 0xa7, 0x5f,
	0x80, 0xad, 0x69, 0xf9, 0x32, 0x35, 0x27, 0x13, 0x25, 0x90, 0xbf, 0x84, 0xf9, 0xb9, 0x37, 0x47,
	0x80, 0x74, 0x6a, 0xce, 0x0a, 0xd4, 0xff, 0x88, 0x32, 0x55, 0xff, 0x91, 0xba, 0x1e, 0x7f, 0xe2,
	0x92, 0x2e, 0x76, 0xe0, 0x31, 0xc8, 0xed, 0x23, 0xc6, 0x31, 0x91, 0x6f, 0x68, 0x30, 0x76, 0x1f,
	0xbc, 0xbc, 0x2e, 0xe4, 0x5b, 0xdc, 0x3b, 0x42, 0xa4, 0xfc, 0x60, 0xb7, 0xb6, 0xf7, 0xe8, 0x43,
	0xd1, 0x41, 0x9b, 0x9d, 0xb1, 0x63, 0xec, 0x46, 0xf1, 0x78, 0xf8, 0x18, 0x2c, 0x1d, 0x58, 0x1c,
	0x3d, 0xb3, 0xae, 0x64, 0xaa, 0xb2, 0xe6, 0x7b, 0x33, 0x51, 0xeb, 0x8e, 0xef, 0x14, 0x1f, 0xe9,
	0x20, 0x4e, 0xff, 0x5d, 0x09, 0xbb, 0x2c, 0x9a, 0x48, 0xf8, 0x2d, 0xc8, 0x06, 0xaa, 0xbb, 0x4e,
	0xf0, 0xac, 0x4e, 0xa5, 0x20, 0x7e, 0x2d, 0x53, 0x0b, 0x06, 0x73, 0x1b, 0x49, 0x6b, 0xc5, 0x96,
	0xe6, 0x44, 0x91, 0x43, 0x1e, 0x7c, 0x08, 0x72, 0xa7, 0xb6, 0x45, 0xf7, 0xb1, 0x27, 0x5f, 0x1e,
	0x5f, 0xf7, 0xfa, 0x68, 0xa8, 0xad, 0x52, 0xdb, 0xa2, 0x62, 0x60, 0xe4, 0xf3, 0xd3, 0x8c, 0x7b,
	0xdd, 0xaf, 0x82, 0x6c, 0x34, 0x34, 0x70, 0x19, 0x64, 0xcc, 0x46, 0xfb, 0x8b, 0xb5, 0x05, 0x98,
	0x03, 0x4b, 0x87, 0x27, 0x07, 0xcd, 0x7a, 0xab, 0xb5, 0xa6, 0x40, 0x00, 0x16, 0xeb, 0xfe, 0x3a,
	0x55, 0xfb, 0x73, 0xb2, 0x51, 0x1f, 0x53, 0x7c, 0xf6, 0x00, 0x1e, 0x81, 0x8d, 0x6f, 0xc4, 0x33,
	0x91, 0x6c, 0x6b, 0x38, 0xf9, 0xe2, 0x17, 0x4b, 0xaf, 0x2b, 0xb8, 0xe8, 0x17, 0x7d, 0x61, 0x4f,
	0x81, 0x87, 0x00, 0x8a, 0xf5, 0x1b, 0x80, 0xd5, 0x7e, 0x4d, 0xcf, 0xd0, 0x5b, 0x83, 0xcd, 0xd9,
	0x7a, 0x37, 0xe5, 0x11, 0x22, 0x54, 0xfe, 0xda, 0xa0, 0xf2, 0x83, 0xfc, 0x3f, 0x55, 0x3f, 0x9d,
	0xa9, 0x7a, 0x0e, 0x72, 0xde, 0x47, 0xcc, 0xa7, 0xc1, 0xa7, 0x60, 0x3b, 0x61, 0x6e, 0x50, 0xe4,
	0x7d, 0x4d, 0x3b, 0x16, 0x47, 0xf0, 0xb5, 0x33, 0x53, 0x4c, 0x7e, 0xa5, 0xf5, 0x85, 0xb2, 0x52,
	0xfc, 0x45, 0xf9, 0xeb, 0xe7, 0xc2, 0xb5, 0x32, 0xf9, 0x85, 0xcf, 0xf4, 0xc4, 0x78, 0xa6, 0x1d,
	0xc4, 0x61, 0x86, 0xba, 0x8c, 0xc3, 0xc5, 0x0e, 0xea, 0x21, 0x8e, 0x60, 0x9a, 0x0e, 0x78, 0xf1,
	0x13, 0xe3, 0xa7, 0x71, 0xa6, 0xab, 0x6d, 0x44, 0x2c, 0xc2, 0x5f, 0x24, 0x6c, 0xa2, 0x7d, 0x18,
	0xb5, 0x6c, 0x34, 0x6d, 0x7e, 0xa1, 0xdf, 0x95, 0xff, 0x36, 0xe4, 0x79, 0x46, 0xf0, 0x78, 0x30,
	0xe3, 0x7e, 0xea, 0xac, 0x66, 0xae, 0xdc, 0xdc, 0xee, 0x28, 0xaf, 0x6e, 0x77, 0x94, 0x7f, 0x6f,
	0x77, 0x94, 0x53, 0xe5, 0x7c, 0x51, 0x5e, 0xe5, 0xe1, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xad,
	0xe0, 0xca, 0x8b, 0x63, 0x09, 0x00, 0x00,
}
