// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tcp_proxy.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TCPProxyRule_ActionType int32

const (
	TCPProxyRule_NONE    TCPProxyRule_ActionType = 0
	TCPProxyRule_ENABLE  TCPProxyRule_ActionType = 1
	TCPProxyRule_DISABLE TCPProxyRule_ActionType = 2
)

var TCPProxyRule_ActionType_name = map[int32]string{
	0: "NONE",
	1: "ENABLE",
	2: "DISABLE",
}
var TCPProxyRule_ActionType_value = map[string]int32{
	"NONE":    0,
	"ENABLE":  1,
	"DISABLE": 2,
}

func (x TCPProxyRule_ActionType) String() string {
	return proto.EnumName(TCPProxyRule_ActionType_name, int32(x))
}
func (TCPProxyRule_ActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTcpProxy, []int{2, 0}
}

// TCP Proxy Policy object
type TCPProxyPolicy struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           TCPProxyPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         TCPProxyPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *TCPProxyPolicy) Reset()                    { *m = TCPProxyPolicy{} }
func (m *TCPProxyPolicy) String() string            { return proto.CompactTextString(m) }
func (*TCPProxyPolicy) ProtoMessage()               {}
func (*TCPProxyPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxy, []int{0} }

func (m *TCPProxyPolicy) GetSpec() TCPProxyPolicySpec {
	if m != nil {
		return m.Spec
	}
	return TCPProxyPolicySpec{}
}

func (m *TCPProxyPolicy) GetStatus() TCPProxyPolicyStatus {
	if m != nil {
		return m.Status
	}
	return TCPProxyPolicyStatus{}
}

// TCPProxyPolicySpec
type TCPProxyPolicySpec struct {
	// VrfName specifies the name of the VRF that the current TCP Proxy Policy belongs to
	VrfName string `protobuf:"bytes,1,opt,name=VrfName,proto3" json:"vrf-name,omitempty"`
	// TCPProxy rules in a given policy
	Rules []TCPProxyRule `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
}

func (m *TCPProxyPolicySpec) Reset()                    { *m = TCPProxyPolicySpec{} }
func (m *TCPProxyPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*TCPProxyPolicySpec) ProtoMessage()               {}
func (*TCPProxyPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxy, []int{1} }

func (m *TCPProxyPolicySpec) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *TCPProxyPolicySpec) GetRules() []TCPProxyRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type TCPProxyRule struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id,omitempty"`
	// Security Association type
	Action string `protobuf:"bytes,2,opt,name=Action,proto3" json:"action,omitempty"`
	// TCP Proxy Rule From match selector.
	Src *MatchSelector `protobuf:"bytes,3,opt,name=Src" json:"source,omitempty"`
	// TCP Proxy Rule To match selector.
	Dst *MatchSelector `protobuf:"bytes,4,opt,name=Dst" json:"destination,omitempty"`
}

func (m *TCPProxyRule) Reset()                    { *m = TCPProxyRule{} }
func (m *TCPProxyRule) String() string            { return proto.CompactTextString(m) }
func (*TCPProxyRule) ProtoMessage()               {}
func (*TCPProxyRule) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxy, []int{2} }

func (m *TCPProxyRule) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TCPProxyRule) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *TCPProxyRule) GetSrc() *MatchSelector {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *TCPProxyRule) GetDst() *MatchSelector {
	if m != nil {
		return m.Dst
	}
	return nil
}

// TCPProxyPolicyStatus
type TCPProxyPolicyStatus struct {
	TCPProxyPolicyID uint64 `protobuf:"varint,1,opt,name=TCPProxyPolicyID,proto3" json:"id,omitempty"`
}

func (m *TCPProxyPolicyStatus) Reset()                    { *m = TCPProxyPolicyStatus{} }
func (m *TCPProxyPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*TCPProxyPolicyStatus) ProtoMessage()               {}
func (*TCPProxyPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxy, []int{3} }

func (m *TCPProxyPolicyStatus) GetTCPProxyPolicyID() uint64 {
	if m != nil {
		return m.TCPProxyPolicyID
	}
	return 0
}

// list of TCP Proxy Policies
type TCPProxyPolicyList struct {
	TCProxyPolicies []*TCPProxyPolicy `protobuf:"bytes,1,rep,name=TCProxyPolicies" json:"TCProxyPolicies,omitempty"`
}

func (m *TCPProxyPolicyList) Reset()                    { *m = TCPProxyPolicyList{} }
func (m *TCPProxyPolicyList) String() string            { return proto.CompactTextString(m) }
func (*TCPProxyPolicyList) ProtoMessage()               {}
func (*TCPProxyPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxy, []int{4} }

func (m *TCPProxyPolicyList) GetTCProxyPolicies() []*TCPProxyPolicy {
	if m != nil {
		return m.TCProxyPolicies
	}
	return nil
}

// TCPProxywatch event
type TCPProxyEvent struct {
	EventType      api.EventType  `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	TCPProxyPolicy TCPProxyPolicy `protobuf:"bytes,2,opt,name=TCPProxyPolicy" json:"tcp-proxy-policy,omitempty"`
}

func (m *TCPProxyEvent) Reset()                    { *m = TCPProxyEvent{} }
func (m *TCPProxyEvent) String() string            { return proto.CompactTextString(m) }
func (*TCPProxyEvent) ProtoMessage()               {}
func (*TCPProxyEvent) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxy, []int{5} }

func (m *TCPProxyEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *TCPProxyEvent) GetTCPProxyPolicy() TCPProxyPolicy {
	if m != nil {
		return m.TCPProxyPolicy
	}
	return TCPProxyPolicy{}
}

// tcp-proxy watch events batched
type TCPProxyEventList struct {
	TCPProxyEvents []*TCPProxyEvent `protobuf:"bytes,1,rep,name=TCPProxyEvents" json:"TCPProxyEvents,omitempty"`
}

func (m *TCPProxyEventList) Reset()                    { *m = TCPProxyEventList{} }
func (m *TCPProxyEventList) String() string            { return proto.CompactTextString(m) }
func (*TCPProxyEventList) ProtoMessage()               {}
func (*TCPProxyEventList) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxy, []int{6} }

func (m *TCPProxyEventList) GetTCPProxyEvents() []*TCPProxyEvent {
	if m != nil {
		return m.TCPProxyEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*TCPProxyPolicy)(nil), "netproto.TCPProxyPolicy")
	proto.RegisterType((*TCPProxyPolicySpec)(nil), "netproto.TCPProxyPolicySpec")
	proto.RegisterType((*TCPProxyRule)(nil), "netproto.TCPProxyRule")
	proto.RegisterType((*TCPProxyPolicyStatus)(nil), "netproto.TCPProxyPolicyStatus")
	proto.RegisterType((*TCPProxyPolicyList)(nil), "netproto.TCPProxyPolicyList")
	proto.RegisterType((*TCPProxyEvent)(nil), "netproto.TCPProxyEvent")
	proto.RegisterType((*TCPProxyEventList)(nil), "netproto.TCPProxyEventList")
	proto.RegisterEnum("netproto.TCPProxyRule_ActionType", TCPProxyRule_ActionType_name, TCPProxyRule_ActionType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TCPProxyPolicyApi service

type TCPProxyPolicyApiClient interface {
	GetTCPProxyPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*TCPProxyPolicy, error)
	ListTCPProxyPolicies(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*TCPProxyPolicyList, error)
	WatchTCPProxyPolicies(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (TCPProxyPolicyApi_WatchTCPProxyPoliciesClient, error)
}

type tCPProxyPolicyApiClient struct {
	cc *grpc.ClientConn
}

func NewTCPProxyPolicyApiClient(cc *grpc.ClientConn) TCPProxyPolicyApiClient {
	return &tCPProxyPolicyApiClient{cc}
}

func (c *tCPProxyPolicyApiClient) GetTCPProxyPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*TCPProxyPolicy, error) {
	out := new(TCPProxyPolicy)
	err := grpc.Invoke(ctx, "/netproto.TCPProxyPolicyApi/GetTCPProxyPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tCPProxyPolicyApiClient) ListTCPProxyPolicies(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*TCPProxyPolicyList, error) {
	out := new(TCPProxyPolicyList)
	err := grpc.Invoke(ctx, "/netproto.TCPProxyPolicyApi/ListTCPProxyPolicies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tCPProxyPolicyApiClient) WatchTCPProxyPolicies(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (TCPProxyPolicyApi_WatchTCPProxyPoliciesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TCPProxyPolicyApi_serviceDesc.Streams[0], c.cc, "/netproto.TCPProxyPolicyApi/WatchTCPProxyPolicies", opts...)
	if err != nil {
		return nil, err
	}
	x := &tCPProxyPolicyApiWatchTCPProxyPoliciesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TCPProxyPolicyApi_WatchTCPProxyPoliciesClient interface {
	Recv() (*TCPProxyEventList, error)
	grpc.ClientStream
}

type tCPProxyPolicyApiWatchTCPProxyPoliciesClient struct {
	grpc.ClientStream
}

func (x *tCPProxyPolicyApiWatchTCPProxyPoliciesClient) Recv() (*TCPProxyEventList, error) {
	m := new(TCPProxyEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TCPProxyPolicyApi service

type TCPProxyPolicyApiServer interface {
	GetTCPProxyPolicy(context.Context, *api.ObjectMeta) (*TCPProxyPolicy, error)
	ListTCPProxyPolicies(context.Context, *api.ObjectMeta) (*TCPProxyPolicyList, error)
	WatchTCPProxyPolicies(*api.ObjectMeta, TCPProxyPolicyApi_WatchTCPProxyPoliciesServer) error
}

func RegisterTCPProxyPolicyApiServer(s *grpc.Server, srv TCPProxyPolicyApiServer) {
	s.RegisterService(&_TCPProxyPolicyApi_serviceDesc, srv)
}

func _TCPProxyPolicyApi_GetTCPProxyPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TCPProxyPolicyApiServer).GetTCPProxyPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.TCPProxyPolicyApi/GetTCPProxyPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TCPProxyPolicyApiServer).GetTCPProxyPolicy(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _TCPProxyPolicyApi_ListTCPProxyPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TCPProxyPolicyApiServer).ListTCPProxyPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.TCPProxyPolicyApi/ListTCPProxyPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TCPProxyPolicyApiServer).ListTCPProxyPolicies(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _TCPProxyPolicyApi_WatchTCPProxyPolicies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TCPProxyPolicyApiServer).WatchTCPProxyPolicies(m, &tCPProxyPolicyApiWatchTCPProxyPoliciesServer{stream})
}

type TCPProxyPolicyApi_WatchTCPProxyPoliciesServer interface {
	Send(*TCPProxyEventList) error
	grpc.ServerStream
}

type tCPProxyPolicyApiWatchTCPProxyPoliciesServer struct {
	grpc.ServerStream
}

func (x *tCPProxyPolicyApiWatchTCPProxyPoliciesServer) Send(m *TCPProxyEventList) error {
	return x.ServerStream.SendMsg(m)
}

var _TCPProxyPolicyApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.TCPProxyPolicyApi",
	HandlerType: (*TCPProxyPolicyApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTCPProxyPolicy",
			Handler:    _TCPProxyPolicyApi_GetTCPProxyPolicy_Handler,
		},
		{
			MethodName: "ListTCPProxyPolicies",
			Handler:    _TCPProxyPolicyApi_ListTCPProxyPolicies_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTCPProxyPolicies",
			Handler:       _TCPProxyPolicyApi_WatchTCPProxyPolicies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tcp_proxy.proto",
}

func (m *TCPProxyPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPProxyPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTcpProxy(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintTcpProxy(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTcpProxy(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintTcpProxy(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *TCPProxyPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPProxyPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VrfName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTcpProxy(dAtA, i, uint64(len(m.VrfName)))
		i += copy(dAtA[i:], m.VrfName)
	}
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTcpProxy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TCPProxyRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPProxyRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTcpProxy(dAtA, i, uint64(m.ID))
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTcpProxy(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.Src != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTcpProxy(dAtA, i, uint64(m.Src.Size()))
		n5, err := m.Src.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Dst != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTcpProxy(dAtA, i, uint64(m.Dst.Size()))
		n6, err := m.Dst.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *TCPProxyPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPProxyPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TCPProxyPolicyID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTcpProxy(dAtA, i, uint64(m.TCPProxyPolicyID))
	}
	return i, nil
}

func (m *TCPProxyPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPProxyPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TCProxyPolicies) > 0 {
		for _, msg := range m.TCProxyPolicies {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTcpProxy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TCPProxyEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPProxyEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTcpProxy(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintTcpProxy(dAtA, i, uint64(m.TCPProxyPolicy.Size()))
	n7, err := m.TCPProxyPolicy.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func (m *TCPProxyEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPProxyEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TCPProxyEvents) > 0 {
		for _, msg := range m.TCPProxyEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTcpProxy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintTcpProxy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TCPProxyPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTcpProxy(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTcpProxy(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTcpProxy(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTcpProxy(uint64(l))
	return n
}

func (m *TCPProxyPolicySpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.VrfName)
	if l > 0 {
		n += 1 + l + sovTcpProxy(uint64(l))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTcpProxy(uint64(l))
		}
	}
	return n
}

func (m *TCPProxyRule) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTcpProxy(uint64(m.ID))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovTcpProxy(uint64(l))
	}
	if m.Src != nil {
		l = m.Src.Size()
		n += 1 + l + sovTcpProxy(uint64(l))
	}
	if m.Dst != nil {
		l = m.Dst.Size()
		n += 1 + l + sovTcpProxy(uint64(l))
	}
	return n
}

func (m *TCPProxyPolicyStatus) Size() (n int) {
	var l int
	_ = l
	if m.TCPProxyPolicyID != 0 {
		n += 1 + sovTcpProxy(uint64(m.TCPProxyPolicyID))
	}
	return n
}

func (m *TCPProxyPolicyList) Size() (n int) {
	var l int
	_ = l
	if len(m.TCProxyPolicies) > 0 {
		for _, e := range m.TCProxyPolicies {
			l = e.Size()
			n += 1 + l + sovTcpProxy(uint64(l))
		}
	}
	return n
}

func (m *TCPProxyEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovTcpProxy(uint64(m.EventType))
	}
	l = m.TCPProxyPolicy.Size()
	n += 1 + l + sovTcpProxy(uint64(l))
	return n
}

func (m *TCPProxyEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.TCPProxyEvents) > 0 {
		for _, e := range m.TCPProxyEvents {
			l = e.Size()
			n += 1 + l + sovTcpProxy(uint64(l))
		}
	}
	return n
}

func sovTcpProxy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTcpProxy(x uint64) (n int) {
	return sovTcpProxy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TCPProxyPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPProxyPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPProxyPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TCPProxyPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPProxyPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPProxyPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTcpProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, TCPProxyRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TCPProxyRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPProxyRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPProxyRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTcpProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Src == nil {
				m.Src = &MatchSelector{}
			}
			if err := m.Src.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dst == nil {
				m.Dst = &MatchSelector{}
			}
			if err := m.Dst.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TCPProxyPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPProxyPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPProxyPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCPProxyPolicyID", wireType)
			}
			m.TCPProxyPolicyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TCPProxyPolicyID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TCPProxyPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPProxyPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPProxyPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TCProxyPolicies = append(m.TCProxyPolicies, &TCPProxyPolicy{})
			if err := m.TCProxyPolicies[len(m.TCProxyPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TCPProxyEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPProxyEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPProxyEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCPProxyPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TCPProxyPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TCPProxyEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPProxyEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPProxyEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCPProxyEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TCPProxyEvents = append(m.TCPProxyEvents, &TCPProxyEvent{})
			if err := m.TCPProxyEvents[len(m.TCPProxyEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTcpProxy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTcpProxy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTcpProxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTcpProxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTcpProxy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTcpProxy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTcpProxy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTcpProxy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTcpProxy   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tcp_proxy.proto", fileDescriptorTcpProxy) }

var fileDescriptorTcpProxy = []byte{
	// 837 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x95, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x6b, 0x27, 0xf4, 0xc7, 0xb4, 0xdb, 0x64, 0x87, 0x6e, 0xeb, 0x86, 0x55, 0x53, 0x59,
	0x42, 0x2a, 0xd2, 0xc6, 0x5e, 0x95, 0x0b, 0x07, 0x60, 0xa9, 0x37, 0x61, 0xa9, 0xd8, 0xcd, 0x46,
	0x49, 0x04, 0xdc, 0x90, 0xe3, 0xbc, 0x66, 0x07, 0xd9, 0x33, 0x23, 0xcf, 0xb8, 0x6c, 0x84, 0x7a,
	0x42, 0xe2, 0xc6, 0x3f, 0xc2, 0x91, 0x1b, 0x48, 0xdc, 0xf7, 0xb8, 0x7f, 0x41, 0x84, 0x7a, 0x42,
	0xf9, 0x2b, 0xd0, 0x4c, 0x9c, 0xda, 0x71, 0x30, 0x7b, 0xf3, 0x7b, 0x7e, 0xef, 0x33, 0xdf, 0x79,
	0xef, 0xf9, 0x19, 0xd5, 0x64, 0xc0, 0xbf, 0xe7, 0x31, 0x7b, 0x3d, 0x75, 0x78, 0xcc, 0x24, 0xc3,
	0xdb, 0x14, 0xa4, 0x7e, 0x6a, 0x3c, 0x9c, 0x30, 0x36, 0x09, 0xc1, 0xf5, 0x39, 0x71, 0x7d, 0x4a,
	0x99, 0xf4, 0x25, 0x61, 0x54, 0x2c, 0xe2, 0x1a, 0x9d, 0x09, 0x91, 0xaf, 0x92, 0x91, 0x13, 0xb0,
	0xc8, 0xe5, 0x40, 0x85, 0x4f, 0xc7, 0xcc, 0x15, 0x3f, 0xba, 0xd7, 0x40, 0x49, 0x00, 0x6e, 0x22,
	0x49, 0x28, 0x54, 0xea, 0x04, 0x68, 0x3e, 0xdb, 0x25, 0x34, 0x08, 0x93, 0x31, 0x2c, 0x31, 0xad,
	0x1c, 0x66, 0xc2, 0x26, 0xcc, 0xd5, 0xee, 0x51, 0x72, 0xa5, 0x2d, 0x6d, 0xe8, 0xa7, 0x34, 0xfc,
	0xc3, 0x92, 0x53, 0x95, 0xc6, 0x08, 0xa4, 0x9f, 0x86, 0xed, 0x46, 0xbe, 0x0c, 0x5e, 0x2d, 0x0c,
	0xfb, 0x0f, 0x13, 0xed, 0x0f, 0x9f, 0xf6, 0x7a, 0xea, 0x92, 0x3d, 0x16, 0x92, 0x60, 0x8a, 0x3f,
	0x47, 0xdb, 0xc3, 0x29, 0x87, 0x17, 0x20, 0x7d, 0xcb, 0x38, 0x35, 0xce, 0x76, 0xcf, 0xef, 0x39,
	0x3e, 0x27, 0xce, 0xd2, 0xe9, 0xbd, 0xff, 0x66, 0xd6, 0xdc, 0x78, 0x3b, 0x6b, 0x1a, 0xf3, 0x59,
	0x73, 0xeb, 0x11, 0xa1, 0x21, 0xa1, 0xd0, 0xbf, 0xcb, 0xc1, 0x5f, 0x23, 0xf4, 0x72, 0xf4, 0x03,
	0x04, 0x52, 0x13, 0x4c, 0x4d, 0xa8, 0x69, 0x42, 0xe6, 0xf6, 0x1a, 0x39, 0xc6, 0xbe, 0x12, 0xf7,
	0x88, 0x45, 0x44, 0x42, 0xc4, 0xe5, 0xb4, 0x9f, 0x4b, 0xc7, 0x5f, 0xa1, 0xea, 0x80, 0x43, 0x60,
	0x55, 0x34, 0xe6, 0xa1, 0xb3, 0x6c, 0x80, 0xb3, 0x2a, 0x5a, 0xc5, 0x78, 0x87, 0x8a, 0xa9, 0x78,
	0x82, 0x43, 0x90, 0xe3, 0x69, 0x02, 0xee, 0xa1, 0xcd, 0x81, 0xf4, 0x65, 0x22, 0xac, 0xaa, 0x66,
	0x9d, 0x94, 0xb2, 0x74, 0x94, 0x67, 0xa5, 0xb4, 0xba, 0xd0, 0x76, 0x8e, 0x97, 0x72, 0xec, 0x5f,
	0x0d, 0x84, 0xd7, 0x65, 0xe0, 0xc7, 0x68, 0xeb, 0x9b, 0xf8, 0xaa, 0xeb, 0x47, 0xa0, 0xcb, 0xb7,
	0xe3, 0x1d, 0xce, 0x67, 0x4d, 0x7c, 0x1d, 0x5f, 0xb5, 0xa8, 0x1f, 0x41, 0x8e, 0xb3, 0x0c, 0xc3,
	0x1d, 0xf4, 0x5e, 0x9c, 0x84, 0x20, 0x2c, 0xf3, 0xb4, 0x72, 0xb6, 0x7b, 0x7e, 0xb8, 0xae, 0xac,
	0x9f, 0x84, 0xe0, 0x1d, 0xa5, 0x8a, 0x6a, 0x3a, 0x38, 0x07, 0x5a, 0x64, 0xdb, 0x7f, 0x9a, 0x68,
	0x2f, 0x9f, 0x80, 0x4f, 0x91, 0x79, 0xd9, 0xd6, 0x22, 0xaa, 0x5e, 0x7d, 0x3e, 0x6b, 0xee, 0x91,
	0x71, 0x2e, 0xcb, 0xbc, 0x6c, 0xab, 0xa2, 0x5c, 0x04, 0x6a, 0xf6, 0x74, 0x9f, 0x76, 0xbc, 0x4f,
	0x7e, 0xfb, 0xe5, 0xf8, 0x74, 0x20, 0xe3, 0x0e, 0x4d, 0xa2, 0xb3, 0x3c, 0xcb, 0x59, 0x84, 0xa9,
	0x26, 0x7f, 0xa4, 0x8a, 0xe2, 0x6b, 0x33, 0x5f, 0x94, 0x45, 0x00, 0x7e, 0x82, 0x2a, 0x83, 0x78,
	0xd9, 0xaf, 0xa3, 0xec, 0x26, 0x2f, 0xd4, 0xd0, 0x0d, 0x20, 0x84, 0x40, 0xb2, 0xd8, 0x3b, 0xd0,
	0x85, 0x65, 0x49, 0x1c, 0xe4, 0x0b, 0xa2, 0x32, 0x71, 0x1b, 0x55, 0xda, 0x42, 0xa6, 0x4d, 0x2a,
	0x05, 0x1c, 0xcf, 0x67, 0xcd, 0x07, 0x63, 0x10, 0x92, 0x50, 0xbf, 0xa0, 0x44, 0xa5, 0xdb, 0x2e,
	0x42, 0x99, 0x62, 0xbc, 0x8d, 0xaa, 0xdd, 0x97, 0xdd, 0x4e, 0x7d, 0x03, 0x23, 0xb4, 0xd9, 0xe9,
	0x5e, 0x78, 0xcf, 0x3b, 0x75, 0x03, 0xef, 0xa2, 0xad, 0xf6, 0xe5, 0x40, 0x1b, 0xa6, 0x3d, 0x44,
	0x07, 0xff, 0x35, 0x06, 0xf8, 0x53, 0x54, 0x5f, 0xf5, 0xff, 0x4f, 0x45, 0xd7, 0x22, 0xed, 0xef,
	0x8a, 0x13, 0xf2, 0x9c, 0x08, 0x89, 0x3d, 0x54, 0x1b, 0x3e, 0xcd, 0x9c, 0x04, 0x84, 0x65, 0xe8,
	0xce, 0x5b, 0x65, 0x33, 0xd9, 0x2f, 0x26, 0xd8, 0x7f, 0x19, 0xe8, 0xde, 0x32, 0xa6, 0x73, 0x0d,
	0x54, 0xe2, 0x2f, 0xd1, 0x8e, 0x7e, 0x50, 0x37, 0xd6, 0x12, 0xf7, 0xcf, 0xf7, 0xf5, 0x67, 0x77,
	0xe7, 0xf5, 0xac, 0xf9, 0xac, 0x79, 0x00, 0xca, 0x6c, 0xc9, 0x29, 0xcf, 0x97, 0x3e, 0x4b, 0xc5,
	0xe3, 0xe2, 0x46, 0x48, 0xbf, 0xe1, 0x52, 0x71, 0x9e, 0x9d, 0x0e, 0x66, 0x43, 0x06, 0xbc, 0xa5,
	0xf7, 0x65, 0x8b, 0xeb, 0x37, 0xb9, 0x03, 0x0a, 0x4c, 0x7b, 0x88, 0xee, 0xaf, 0xc8, 0xd7, 0x85,
	0x79, 0x92, 0x1d, 0xad, 0x9d, 0xcb, 0xba, 0x1c, 0xad, 0x1f, 0xad, 0xdf, 0xf7, 0x0b, 0xe1, 0xe7,
	0xff, 0x98, 0x19, 0x76, 0x71, 0xd0, 0x05, 0x27, 0xf8, 0x0b, 0x74, 0xff, 0x19, 0xc8, 0xc2, 0x9a,
	0x2b, 0xae, 0xa4, 0x46, 0xe9, 0xfd, 0xec, 0x0d, 0xfc, 0x0c, 0x1d, 0x28, 0x81, 0x2b, 0x7e, 0x02,
	0x62, 0x1d, 0x52, 0xba, 0xa1, 0x54, 0xba, 0xbd, 0x81, 0x2f, 0xd1, 0x83, 0x6f, 0xd5, 0x20, 0xbf,
	0x9b, 0xf4, 0x41, 0xc9, 0x9d, 0x17, 0xa0, 0xc7, 0x46, 0xe3, 0xe6, 0xf7, 0x9f, 0x8f, 0xa7, 0x6b,
	0xdb, 0xbb, 0x1a, 0xaa, 0x42, 0x56, 0x39, 0x13, 0x12, 0x57, 0x78, 0x22, 0xf1, 0xe6, 0x18, 0x42,
	0x90, 0xd0, 0xf8, 0xcc, 0xfd, 0x29, 0xa3, 0x3b, 0x43, 0xa0, 0x3e, 0x95, 0x37, 0x2b, 0x3e, 0xb5,
	0x8b, 0x04, 0xf7, 0x03, 0x58, 0x77, 0xdf, 0xd8, 0x35, 0xf5, 0x17, 0x91, 0x01, 0x57, 0xff, 0xa0,
	0xd7, 0x04, 0x84, 0xb7, 0xf7, 0xe6, 0xf6, 0xc4, 0x78, 0x7b, 0x7b, 0x62, 0xfc, 0x7d, 0x7b, 0x62,
	0xf4, 0x8c, 0xd1, 0xa6, 0xd6, 0xfa, 0xf1, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x9f, 0x16,
	0x0f, 0x35, 0x07, 0x00, 0x00,
}
