// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vr_peering_group.proto

package netproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VRPeeringRoute struct {
	IPv4Prefix string `protobuf:"bytes,1,opt,name=IPv4Prefix,proto3" json:"ipv4-prefix"`
	// Destination VR where this IP prefix belongs
	DestVirtualRouter string `protobuf:"bytes,2,opt,name=DestVirtualRouter,proto3" json:"dest-virtual-router"`
}

func (m *VRPeeringRoute) Reset()                    { *m = VRPeeringRoute{} }
func (m *VRPeeringRoute) String() string            { return proto.CompactTextString(m) }
func (*VRPeeringRoute) ProtoMessage()               {}
func (*VRPeeringRoute) Descriptor() ([]byte, []int) { return fileDescriptorVrPeeringGroup, []int{0} }

func (m *VRPeeringRoute) GetIPv4Prefix() string {
	if m != nil {
		return m.IPv4Prefix
	}
	return ""
}

func (m *VRPeeringRoute) GetDestVirtualRouter() string {
	if m != nil {
		return m.DestVirtualRouter
	}
	return ""
}

type VRPeeringRouteTable struct {
	VRPeeringRoutes []VRPeeringRoute `protobuf:"bytes,1,rep,name=VRPeeringRoutes" json:"vr-peering-routes,omitempty"`
}

func (m *VRPeeringRouteTable) Reset()         { *m = VRPeeringRouteTable{} }
func (m *VRPeeringRouteTable) String() string { return proto.CompactTextString(m) }
func (*VRPeeringRouteTable) ProtoMessage()    {}
func (*VRPeeringRouteTable) Descriptor() ([]byte, []int) {
	return fileDescriptorVrPeeringGroup, []int{1}
}

func (m *VRPeeringRouteTable) GetVRPeeringRoutes() []VRPeeringRoute {
	if m != nil {
		return m.VRPeeringRoutes
	}
	return nil
}

type VirtualRouterPeeringGroupSpec struct {
	// map [VirtualRouter] -> VRPeeringRouteTable, for all virtual routers in this peering group
	VRPeeringRouteTables map[string]*VRPeeringRouteTable `protobuf:"bytes,1,rep,name=VRPeeringRouteTables" json:"vr-peering-route-tables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *VirtualRouterPeeringGroupSpec) Reset()         { *m = VirtualRouterPeeringGroupSpec{} }
func (m *VirtualRouterPeeringGroupSpec) String() string { return proto.CompactTextString(m) }
func (*VirtualRouterPeeringGroupSpec) ProtoMessage()    {}
func (*VirtualRouterPeeringGroupSpec) Descriptor() ([]byte, []int) {
	return fileDescriptorVrPeeringGroup, []int{2}
}

func (m *VirtualRouterPeeringGroupSpec) GetVRPeeringRouteTables() map[string]*VRPeeringRouteTable {
	if m != nil {
		return m.VRPeeringRouteTables
	}
	return nil
}

type VirtualRouterPeeringGroupStatus struct {
	// map [VirtualRouter] -> VRPeeringRouteTable, for only those virtual-routers that this DSC is interested in
	VRPeeringRouteTables map[string]*VRPeeringRouteTable `protobuf:"bytes,1,rep,name=VRPeeringRouteTables" json:"vr-peering-route-tables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *VirtualRouterPeeringGroupStatus) Reset()         { *m = VirtualRouterPeeringGroupStatus{} }
func (m *VirtualRouterPeeringGroupStatus) String() string { return proto.CompactTextString(m) }
func (*VirtualRouterPeeringGroupStatus) ProtoMessage()    {}
func (*VirtualRouterPeeringGroupStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorVrPeeringGroup, []int{3}
}

func (m *VirtualRouterPeeringGroupStatus) GetVRPeeringRouteTables() map[string]*VRPeeringRouteTable {
	if m != nil {
		return m.VRPeeringRouteTables
	}
	return nil
}

type VirtualRouterPeeringGroupEvent struct {
	EventType                 api.EventType             `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	VirtualRouterPeeringGroup VirtualRouterPeeringGroup `protobuf:"bytes,2,opt,name=VirtualRouterPeeringGroup" json:"vr-peering-group,omitempty"`
}

func (m *VirtualRouterPeeringGroupEvent) Reset()         { *m = VirtualRouterPeeringGroupEvent{} }
func (m *VirtualRouterPeeringGroupEvent) String() string { return proto.CompactTextString(m) }
func (*VirtualRouterPeeringGroupEvent) ProtoMessage()    {}
func (*VirtualRouterPeeringGroupEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorVrPeeringGroup, []int{4}
}

func (m *VirtualRouterPeeringGroupEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *VirtualRouterPeeringGroupEvent) GetVirtualRouterPeeringGroup() VirtualRouterPeeringGroup {
	if m != nil {
		return m.VirtualRouterPeeringGroup
	}
	return VirtualRouterPeeringGroup{}
}

type VirtualRouterPeeringGroupEventList struct {
	VirtualRouterPeeringGroupEvents []*VirtualRouterPeeringGroupEvent `protobuf:"bytes,1,rep,name=virtualRouterPeeringGroupEvents" json:"virtualRouterPeeringGroupEvents,omitempty"`
}

func (m *VirtualRouterPeeringGroupEventList) Reset()         { *m = VirtualRouterPeeringGroupEventList{} }
func (m *VirtualRouterPeeringGroupEventList) String() string { return proto.CompactTextString(m) }
func (*VirtualRouterPeeringGroupEventList) ProtoMessage()    {}
func (*VirtualRouterPeeringGroupEventList) Descriptor() ([]byte, []int) {
	return fileDescriptorVrPeeringGroup, []int{5}
}

func (m *VirtualRouterPeeringGroupEventList) GetVirtualRouterPeeringGroupEvents() []*VirtualRouterPeeringGroupEvent {
	if m != nil {
		return m.VirtualRouterPeeringGroupEvents
	}
	return nil
}

type VirtualRouterPeeringGroupList struct {
	VirtualRouterPeeringGroups []*VirtualRouterPeeringGroup `protobuf:"bytes,1,rep,name=virtualRouterPeeringGroups" json:"virtualRouterPeeringGroups,omitempty"`
}

func (m *VirtualRouterPeeringGroupList) Reset()         { *m = VirtualRouterPeeringGroupList{} }
func (m *VirtualRouterPeeringGroupList) String() string { return proto.CompactTextString(m) }
func (*VirtualRouterPeeringGroupList) ProtoMessage()    {}
func (*VirtualRouterPeeringGroupList) Descriptor() ([]byte, []int) {
	return fileDescriptorVrPeeringGroup, []int{6}
}

func (m *VirtualRouterPeeringGroupList) GetVirtualRouterPeeringGroups() []*VirtualRouterPeeringGroup {
	if m != nil {
		return m.VirtualRouterPeeringGroups
	}
	return nil
}

type VirtualRouterPeeringGroup struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           VirtualRouterPeeringGroupSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         VirtualRouterPeeringGroupStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *VirtualRouterPeeringGroup) Reset()         { *m = VirtualRouterPeeringGroup{} }
func (m *VirtualRouterPeeringGroup) String() string { return proto.CompactTextString(m) }
func (*VirtualRouterPeeringGroup) ProtoMessage()    {}
func (*VirtualRouterPeeringGroup) Descriptor() ([]byte, []int) {
	return fileDescriptorVrPeeringGroup, []int{7}
}

func (m *VirtualRouterPeeringGroup) GetSpec() VirtualRouterPeeringGroupSpec {
	if m != nil {
		return m.Spec
	}
	return VirtualRouterPeeringGroupSpec{}
}

func (m *VirtualRouterPeeringGroup) GetStatus() VirtualRouterPeeringGroupStatus {
	if m != nil {
		return m.Status
	}
	return VirtualRouterPeeringGroupStatus{}
}

func init() {
	proto.RegisterType((*VRPeeringRoute)(nil), "netproto.VRPeeringRoute")
	proto.RegisterType((*VRPeeringRouteTable)(nil), "netproto.VRPeeringRouteTable")
	proto.RegisterType((*VirtualRouterPeeringGroupSpec)(nil), "netproto.VirtualRouterPeeringGroupSpec")
	proto.RegisterType((*VirtualRouterPeeringGroupStatus)(nil), "netproto.VirtualRouterPeeringGroupStatus")
	proto.RegisterType((*VirtualRouterPeeringGroupEvent)(nil), "netproto.VirtualRouterPeeringGroupEvent")
	proto.RegisterType((*VirtualRouterPeeringGroupEventList)(nil), "netproto.VirtualRouterPeeringGroupEventList")
	proto.RegisterType((*VirtualRouterPeeringGroupList)(nil), "netproto.VirtualRouterPeeringGroupList")
	proto.RegisterType((*VirtualRouterPeeringGroup)(nil), "netproto.VirtualRouterPeeringGroup")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VirtualRouterPeeringGroupApiV1 service

type VirtualRouterPeeringGroupApiV1Client interface {
	ListVirtualRouterPeeringGroups(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*VirtualRouterPeeringGroupList, error)
	WatchVirtualRouterPeeringGroups(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (VirtualRouterPeeringGroupApiV1_WatchVirtualRouterPeeringGroupsClient, error)
	VirtualRouterPeeringGroupOperUpdate(ctx context.Context, opts ...grpc.CallOption) (VirtualRouterPeeringGroupApiV1_VirtualRouterPeeringGroupOperUpdateClient, error)
}

type virtualRouterPeeringGroupApiV1Client struct {
	cc *grpc.ClientConn
}

func NewVirtualRouterPeeringGroupApiV1Client(cc *grpc.ClientConn) VirtualRouterPeeringGroupApiV1Client {
	return &virtualRouterPeeringGroupApiV1Client{cc}
}

func (c *virtualRouterPeeringGroupApiV1Client) ListVirtualRouterPeeringGroups(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*VirtualRouterPeeringGroupList, error) {
	out := new(VirtualRouterPeeringGroupList)
	err := grpc.Invoke(ctx, "/netproto.VirtualRouterPeeringGroupApiV1/ListVirtualRouterPeeringGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualRouterPeeringGroupApiV1Client) WatchVirtualRouterPeeringGroups(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (VirtualRouterPeeringGroupApiV1_WatchVirtualRouterPeeringGroupsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VirtualRouterPeeringGroupApiV1_serviceDesc.Streams[0], c.cc, "/netproto.VirtualRouterPeeringGroupApiV1/WatchVirtualRouterPeeringGroups", opts...)
	if err != nil {
		return nil, err
	}
	x := &virtualRouterPeeringGroupApiV1WatchVirtualRouterPeeringGroupsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VirtualRouterPeeringGroupApiV1_WatchVirtualRouterPeeringGroupsClient interface {
	Recv() (*VirtualRouterPeeringGroupEventList, error)
	grpc.ClientStream
}

type virtualRouterPeeringGroupApiV1WatchVirtualRouterPeeringGroupsClient struct {
	grpc.ClientStream
}

func (x *virtualRouterPeeringGroupApiV1WatchVirtualRouterPeeringGroupsClient) Recv() (*VirtualRouterPeeringGroupEventList, error) {
	m := new(VirtualRouterPeeringGroupEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *virtualRouterPeeringGroupApiV1Client) VirtualRouterPeeringGroupOperUpdate(ctx context.Context, opts ...grpc.CallOption) (VirtualRouterPeeringGroupApiV1_VirtualRouterPeeringGroupOperUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VirtualRouterPeeringGroupApiV1_serviceDesc.Streams[1], c.cc, "/netproto.VirtualRouterPeeringGroupApiV1/VirtualRouterPeeringGroupOperUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &virtualRouterPeeringGroupApiV1VirtualRouterPeeringGroupOperUpdateClient{stream}
	return x, nil
}

type VirtualRouterPeeringGroupApiV1_VirtualRouterPeeringGroupOperUpdateClient interface {
	Send(*VirtualRouterPeeringGroupEvent) error
	CloseAndRecv() (*api.TypeMeta, error)
	grpc.ClientStream
}

type virtualRouterPeeringGroupApiV1VirtualRouterPeeringGroupOperUpdateClient struct {
	grpc.ClientStream
}

func (x *virtualRouterPeeringGroupApiV1VirtualRouterPeeringGroupOperUpdateClient) Send(m *VirtualRouterPeeringGroupEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *virtualRouterPeeringGroupApiV1VirtualRouterPeeringGroupOperUpdateClient) CloseAndRecv() (*api.TypeMeta, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.TypeMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for VirtualRouterPeeringGroupApiV1 service

type VirtualRouterPeeringGroupApiV1Server interface {
	ListVirtualRouterPeeringGroups(context.Context, *api.ListWatchOptions) (*VirtualRouterPeeringGroupList, error)
	WatchVirtualRouterPeeringGroups(*api.ListWatchOptions, VirtualRouterPeeringGroupApiV1_WatchVirtualRouterPeeringGroupsServer) error
	VirtualRouterPeeringGroupOperUpdate(VirtualRouterPeeringGroupApiV1_VirtualRouterPeeringGroupOperUpdateServer) error
}

func RegisterVirtualRouterPeeringGroupApiV1Server(s *grpc.Server, srv VirtualRouterPeeringGroupApiV1Server) {
	s.RegisterService(&_VirtualRouterPeeringGroupApiV1_serviceDesc, srv)
}

func _VirtualRouterPeeringGroupApiV1_ListVirtualRouterPeeringGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualRouterPeeringGroupApiV1Server).ListVirtualRouterPeeringGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.VirtualRouterPeeringGroupApiV1/ListVirtualRouterPeeringGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualRouterPeeringGroupApiV1Server).ListVirtualRouterPeeringGroups(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualRouterPeeringGroupApiV1_WatchVirtualRouterPeeringGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VirtualRouterPeeringGroupApiV1Server).WatchVirtualRouterPeeringGroups(m, &virtualRouterPeeringGroupApiV1WatchVirtualRouterPeeringGroupsServer{stream})
}

type VirtualRouterPeeringGroupApiV1_WatchVirtualRouterPeeringGroupsServer interface {
	Send(*VirtualRouterPeeringGroupEventList) error
	grpc.ServerStream
}

type virtualRouterPeeringGroupApiV1WatchVirtualRouterPeeringGroupsServer struct {
	grpc.ServerStream
}

func (x *virtualRouterPeeringGroupApiV1WatchVirtualRouterPeeringGroupsServer) Send(m *VirtualRouterPeeringGroupEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _VirtualRouterPeeringGroupApiV1_VirtualRouterPeeringGroupOperUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VirtualRouterPeeringGroupApiV1Server).VirtualRouterPeeringGroupOperUpdate(&virtualRouterPeeringGroupApiV1VirtualRouterPeeringGroupOperUpdateServer{stream})
}

type VirtualRouterPeeringGroupApiV1_VirtualRouterPeeringGroupOperUpdateServer interface {
	SendAndClose(*api.TypeMeta) error
	Recv() (*VirtualRouterPeeringGroupEvent, error)
	grpc.ServerStream
}

type virtualRouterPeeringGroupApiV1VirtualRouterPeeringGroupOperUpdateServer struct {
	grpc.ServerStream
}

func (x *virtualRouterPeeringGroupApiV1VirtualRouterPeeringGroupOperUpdateServer) SendAndClose(m *api.TypeMeta) error {
	return x.ServerStream.SendMsg(m)
}

func (x *virtualRouterPeeringGroupApiV1VirtualRouterPeeringGroupOperUpdateServer) Recv() (*VirtualRouterPeeringGroupEvent, error) {
	m := new(VirtualRouterPeeringGroupEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _VirtualRouterPeeringGroupApiV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.VirtualRouterPeeringGroupApiV1",
	HandlerType: (*VirtualRouterPeeringGroupApiV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVirtualRouterPeeringGroups",
			Handler:    _VirtualRouterPeeringGroupApiV1_ListVirtualRouterPeeringGroups_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchVirtualRouterPeeringGroups",
			Handler:       _VirtualRouterPeeringGroupApiV1_WatchVirtualRouterPeeringGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "VirtualRouterPeeringGroupOperUpdate",
			Handler:       _VirtualRouterPeeringGroupApiV1_VirtualRouterPeeringGroupOperUpdate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "vr_peering_group.proto",
}

func (m *VRPeeringRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VRPeeringRoute) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IPv4Prefix) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVrPeeringGroup(dAtA, i, uint64(len(m.IPv4Prefix)))
		i += copy(dAtA[i:], m.IPv4Prefix)
	}
	if len(m.DestVirtualRouter) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVrPeeringGroup(dAtA, i, uint64(len(m.DestVirtualRouter)))
		i += copy(dAtA[i:], m.DestVirtualRouter)
	}
	return i, nil
}

func (m *VRPeeringRouteTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VRPeeringRouteTable) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VRPeeringRoutes) > 0 {
		for _, msg := range m.VRPeeringRoutes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVrPeeringGroup(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VirtualRouterPeeringGroupSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualRouterPeeringGroupSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VRPeeringRouteTables) > 0 {
		for k, _ := range m.VRPeeringRouteTables {
			dAtA[i] = 0xa
			i++
			v := m.VRPeeringRouteTables[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovVrPeeringGroup(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovVrPeeringGroup(uint64(len(k))) + msgSize
			i = encodeVarintVrPeeringGroup(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintVrPeeringGroup(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintVrPeeringGroup(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *VirtualRouterPeeringGroupStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualRouterPeeringGroupStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VRPeeringRouteTables) > 0 {
		for k, _ := range m.VRPeeringRouteTables {
			dAtA[i] = 0xa
			i++
			v := m.VRPeeringRouteTables[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovVrPeeringGroup(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovVrPeeringGroup(uint64(len(k))) + msgSize
			i = encodeVarintVrPeeringGroup(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintVrPeeringGroup(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintVrPeeringGroup(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	return i, nil
}

func (m *VirtualRouterPeeringGroupEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualRouterPeeringGroupEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVrPeeringGroup(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintVrPeeringGroup(dAtA, i, uint64(m.VirtualRouterPeeringGroup.Size()))
	n3, err := m.VirtualRouterPeeringGroup.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *VirtualRouterPeeringGroupEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualRouterPeeringGroupEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VirtualRouterPeeringGroupEvents) > 0 {
		for _, msg := range m.VirtualRouterPeeringGroupEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVrPeeringGroup(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VirtualRouterPeeringGroupList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualRouterPeeringGroupList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VirtualRouterPeeringGroups) > 0 {
		for _, msg := range m.VirtualRouterPeeringGroups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVrPeeringGroup(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VirtualRouterPeeringGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualRouterPeeringGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintVrPeeringGroup(dAtA, i, uint64(m.TypeMeta.Size()))
	n4, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x12
	i++
	i = encodeVarintVrPeeringGroup(dAtA, i, uint64(m.ObjectMeta.Size()))
	n5, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintVrPeeringGroup(dAtA, i, uint64(m.Spec.Size()))
	n6, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x22
	i++
	i = encodeVarintVrPeeringGroup(dAtA, i, uint64(m.Status.Size()))
	n7, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func encodeVarintVrPeeringGroup(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VRPeeringRoute) Size() (n int) {
	var l int
	_ = l
	l = len(m.IPv4Prefix)
	if l > 0 {
		n += 1 + l + sovVrPeeringGroup(uint64(l))
	}
	l = len(m.DestVirtualRouter)
	if l > 0 {
		n += 1 + l + sovVrPeeringGroup(uint64(l))
	}
	return n
}

func (m *VRPeeringRouteTable) Size() (n int) {
	var l int
	_ = l
	if len(m.VRPeeringRoutes) > 0 {
		for _, e := range m.VRPeeringRoutes {
			l = e.Size()
			n += 1 + l + sovVrPeeringGroup(uint64(l))
		}
	}
	return n
}

func (m *VirtualRouterPeeringGroupSpec) Size() (n int) {
	var l int
	_ = l
	if len(m.VRPeeringRouteTables) > 0 {
		for k, v := range m.VRPeeringRouteTables {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovVrPeeringGroup(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovVrPeeringGroup(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovVrPeeringGroup(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *VirtualRouterPeeringGroupStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.VRPeeringRouteTables) > 0 {
		for k, v := range m.VRPeeringRouteTables {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovVrPeeringGroup(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovVrPeeringGroup(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovVrPeeringGroup(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *VirtualRouterPeeringGroupEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovVrPeeringGroup(uint64(m.EventType))
	}
	l = m.VirtualRouterPeeringGroup.Size()
	n += 1 + l + sovVrPeeringGroup(uint64(l))
	return n
}

func (m *VirtualRouterPeeringGroupEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.VirtualRouterPeeringGroupEvents) > 0 {
		for _, e := range m.VirtualRouterPeeringGroupEvents {
			l = e.Size()
			n += 1 + l + sovVrPeeringGroup(uint64(l))
		}
	}
	return n
}

func (m *VirtualRouterPeeringGroupList) Size() (n int) {
	var l int
	_ = l
	if len(m.VirtualRouterPeeringGroups) > 0 {
		for _, e := range m.VirtualRouterPeeringGroups {
			l = e.Size()
			n += 1 + l + sovVrPeeringGroup(uint64(l))
		}
	}
	return n
}

func (m *VirtualRouterPeeringGroup) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovVrPeeringGroup(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovVrPeeringGroup(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovVrPeeringGroup(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovVrPeeringGroup(uint64(l))
	return n
}

func sovVrPeeringGroup(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVrPeeringGroup(x uint64) (n int) {
	return sovVrPeeringGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VRPeeringRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrPeeringGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VRPeeringRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VRPeeringRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrPeeringGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestVirtualRouter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrPeeringGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestVirtualRouter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrPeeringGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VRPeeringRouteTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrPeeringGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VRPeeringRouteTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VRPeeringRouteTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRPeeringRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrPeeringGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRPeeringRoutes = append(m.VRPeeringRoutes, VRPeeringRoute{})
			if err := m.VRPeeringRoutes[len(m.VRPeeringRoutes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrPeeringGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualRouterPeeringGroupSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrPeeringGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualRouterPeeringGroupSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualRouterPeeringGroupSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRPeeringRouteTables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrPeeringGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VRPeeringRouteTables == nil {
				m.VRPeeringRouteTables = make(map[string]*VRPeeringRouteTable)
			}
			var mapkey string
			var mapvalue *VRPeeringRouteTable
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVrPeeringGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVrPeeringGroup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthVrPeeringGroup
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVrPeeringGroup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthVrPeeringGroup
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthVrPeeringGroup
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VRPeeringRouteTable{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipVrPeeringGroup(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthVrPeeringGroup
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.VRPeeringRouteTables[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrPeeringGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualRouterPeeringGroupStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrPeeringGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualRouterPeeringGroupStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualRouterPeeringGroupStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRPeeringRouteTables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrPeeringGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VRPeeringRouteTables == nil {
				m.VRPeeringRouteTables = make(map[string]*VRPeeringRouteTable)
			}
			var mapkey string
			var mapvalue *VRPeeringRouteTable
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVrPeeringGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVrPeeringGroup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthVrPeeringGroup
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVrPeeringGroup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthVrPeeringGroup
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthVrPeeringGroup
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VRPeeringRouteTable{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipVrPeeringGroup(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthVrPeeringGroup
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.VRPeeringRouteTables[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrPeeringGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualRouterPeeringGroupEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrPeeringGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualRouterPeeringGroupEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualRouterPeeringGroupEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrPeeringGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualRouterPeeringGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrPeeringGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VirtualRouterPeeringGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrPeeringGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualRouterPeeringGroupEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrPeeringGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualRouterPeeringGroupEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualRouterPeeringGroupEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualRouterPeeringGroupEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrPeeringGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualRouterPeeringGroupEvents = append(m.VirtualRouterPeeringGroupEvents, &VirtualRouterPeeringGroupEvent{})
			if err := m.VirtualRouterPeeringGroupEvents[len(m.VirtualRouterPeeringGroupEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrPeeringGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualRouterPeeringGroupList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrPeeringGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualRouterPeeringGroupList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualRouterPeeringGroupList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualRouterPeeringGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrPeeringGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualRouterPeeringGroups = append(m.VirtualRouterPeeringGroups, &VirtualRouterPeeringGroup{})
			if err := m.VirtualRouterPeeringGroups[len(m.VirtualRouterPeeringGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrPeeringGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualRouterPeeringGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrPeeringGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualRouterPeeringGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualRouterPeeringGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrPeeringGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrPeeringGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrPeeringGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrPeeringGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrPeeringGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrPeeringGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVrPeeringGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVrPeeringGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVrPeeringGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVrPeeringGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVrPeeringGroup
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVrPeeringGroup
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVrPeeringGroup(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVrPeeringGroup = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVrPeeringGroup   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("vr_peering_group.proto", fileDescriptorVrPeeringGroup) }

var fileDescriptorVrPeeringGroup = []byte{
	// 869 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0x4d, 0x73, 0xdb, 0x44,
	0x18, 0xce, 0xda, 0x21, 0xb4, 0x1b, 0x70, 0xcb, 0xa6, 0x2d, 0xb6, 0xa0, 0x56, 0x51, 0x86, 0xc1,
	0x61, 0x62, 0x8b, 0xba, 0x3d, 0x00, 0x33, 0x30, 0x53, 0xb5, 0x81, 0xe9, 0xf0, 0x91, 0x8c, 0x1a,
	0xcc, 0x81, 0x43, 0x67, 0x2d, 0xbf, 0x51, 0xb7, 0xc8, 0xab, 0x1d, 0xed, 0x4a, 0xe0, 0x61, 0xca,
	0x85, 0x8f, 0x1f, 0x00, 0x97, 0x1e, 0x19, 0x8e, 0x3d, 0x70, 0xe0, 0x57, 0xe4, 0xd8, 0x33, 0x07,
	0x0f, 0x93, 0xa3, 0x2f, 0xf0, 0x13, 0x18, 0xad, 0xec, 0x46, 0x4e, 0x22, 0x21, 0xae, 0xdc, 0x76,
	0x5f, 0x3d, 0xef, 0xf3, 0x3e, 0xef, 0xd7, 0xda, 0xf8, 0x4a, 0x12, 0xdd, 0x17, 0x00, 0x11, 0xe3,
	0xfe, 0x7d, 0x3f, 0x0a, 0x63, 0xd1, 0x13, 0x51, 0xa8, 0x42, 0x72, 0x8e, 0x83, 0xd2, 0x27, 0xe3,
	0x55, 0x3f, 0x0c, 0xfd, 0x00, 0x6c, 0x2a, 0x98, 0x4d, 0x39, 0x0f, 0x15, 0x55, 0x2c, 0xe4, 0x32,
	0xc3, 0x19, 0x3b, 0x3e, 0x53, 0x0f, 0xe2, 0x61, 0xcf, 0x0b, 0xc7, 0xb6, 0x00, 0x2e, 0x29, 0x1f,
	0x85, 0xb6, 0xfc, 0xca, 0x4e, 0x80, 0x33, 0x0f, 0xec, 0x58, 0xb1, 0x40, 0xa6, 0xae, 0x3e, 0xf0,
	0xbc, 0xb7, 0xcd, 0xb8, 0x17, 0xc4, 0x23, 0x58, 0xd0, 0x74, 0x73, 0x34, 0x7e, 0xe8, 0x87, 0xb6,
	0x36, 0x0f, 0xe3, 0x03, 0x7d, 0xd3, 0x17, 0x7d, 0x9a, 0xc3, 0x5f, 0x2f, 0x88, 0x9a, 0x6a, 0x1c,
	0x83, 0xa2, 0x19, 0xcc, 0xfa, 0x09, 0xe1, 0xc6, 0xc0, 0xdd, 0xcb, 0xd2, 0x73, 0xc3, 0x58, 0x01,
	0x79, 0x07, 0xe3, 0xbb, 0x7b, 0xc9, 0xcd, 0xbd, 0x08, 0x0e, 0xd8, 0xd7, 0x4d, 0x74, 0x0d, 0x75,
	0xce, 0x3b, 0xad, 0x27, 0x3f, 0xb6, 0xd6, 0x6e, 0xdf, 0xbd, 0xe3, 0x76, 0xb6, 0x66, 0x53, 0x73,
	0x9d, 0x89, 0xe4, 0x66, 0x57, 0x68, 0x80, 0x9b, 0x03, 0x93, 0x1d, 0xfc, 0xd2, 0x1d, 0x90, 0x6a,
	0xc0, 0x22, 0x15, 0xd3, 0x40, 0xd3, 0x45, 0xcd, 0x9a, 0x66, 0x78, 0x79, 0x36, 0x35, 0x37, 0x46,
	0x20, 0x55, 0x37, 0xc9, 0xbe, 0x76, 0x23, 0xfd, 0xd9, 0x3d, 0xed, 0x61, 0x7d, 0x8b, 0x37, 0x96,
	0x35, 0xed, 0xd3, 0x61, 0x00, 0xc4, 0xc7, 0x17, 0x96, 0xcd, 0xb2, 0x89, 0xae, 0xd5, 0x3b, 0xeb,
	0xfd, 0x66, 0x6f, 0xd1, 0x8a, 0xde, 0x32, 0xc0, 0xd9, 0x3c, 0x9c, 0x9a, 0x2b, 0xb3, 0xa9, 0xf9,
	0x4a, 0x12, 0x75, 0xe7, 0x3d, 0xcc, 0xe2, 0xca, 0xed, 0x70, 0xcc, 0x14, 0x8c, 0x85, 0x9a, 0xb8,
	0x27, 0x59, 0xad, 0x27, 0x35, 0x7c, 0x75, 0x49, 0xd1, 0xfc, 0xf3, 0x87, 0x69, 0xf7, 0xef, 0x09,
	0xf0, 0xc8, 0x2f, 0x08, 0x5f, 0x3a, 0x43, 0xe2, 0x42, 0xd0, 0xad, 0x9c, 0xa0, 0x32, 0x9e, 0xde,
	0x59, 0x1c, 0x3b, 0x5c, 0x45, 0x13, 0x67, 0xeb, 0x70, 0x6a, 0xa2, 0xd9, 0xd4, 0x7c, 0xed, 0xa4,
	0xf2, 0xae, 0xd2, 0xa8, 0x9c, 0xfe, 0x33, 0x95, 0x18, 0x07, 0xb8, 0x55, 0xc8, 0x4e, 0x2e, 0xe2,
	0xfa, 0x97, 0x30, 0xc9, 0x9a, 0xeb, 0xa6, 0x47, 0x72, 0x03, 0x3f, 0x97, 0xd0, 0x20, 0x06, 0xdd,
	0xae, 0xf5, 0xfe, 0xd5, 0xa2, 0x92, 0x6a, 0x16, 0x37, 0xc3, 0xbe, 0x5b, 0x7b, 0x1b, 0x59, 0xbf,
	0xd5, 0xb0, 0x59, 0x9c, 0xa4, 0xa2, 0x2a, 0x96, 0xe4, 0xd7, 0xf2, 0x72, 0xdd, 0xae, 0x52, 0x2e,
	0xcd, 0xf4, 0x7f, 0x28, 0xd8, 0xdf, 0x08, 0xb7, 0x0b, 0xd3, 0xdc, 0x49, 0x80, 0x2b, 0xf2, 0x01,
	0x3e, 0xaf, 0x0f, 0xfb, 0x13, 0x01, 0x3a, 0x66, 0xa3, 0xdf, 0xe8, 0x51, 0xc1, 0x7a, 0xcf, 0xac,
	0x4e, 0x73, 0x36, 0x35, 0x2f, 0x41, 0x7a, 0xed, 0xaa, 0x89, 0x80, 0x5c, 0x76, 0xc7, 0xae, 0xe4,
	0x07, 0x84, 0x5b, 0x85, 0xa1, 0xe6, 0xc2, 0x37, 0x2b, 0x14, 0xdf, 0xb1, 0xe6, 0x7b, 0x64, 0xe4,
	0x8a, 0xab, 0xdf, 0xc2, 0x5c, 0xdc, 0xe2, 0x48, 0xd6, 0x63, 0x84, 0xad, 0xf2, 0x94, 0x3f, 0x66,
	0x52, 0x91, 0x08, 0x9b, 0x49, 0x29, 0x6a, 0x31, 0x30, 0x9d, 0x0a, 0x9a, 0xb5, 0x83, 0xfb, 0x6f,
	0x84, 0xd6, 0xf7, 0xa8, 0x64, 0xd7, 0xb5, 0x2a, 0x0f, 0x1b, 0x85, 0x24, 0x0b, 0x41, 0x55, 0x8a,
	0xe8, 0x96, 0xd0, 0x58, 0x7f, 0xd4, 0x4a, 0x3a, 0x45, 0xde, 0xc7, 0xe7, 0xd2, 0x7e, 0x7e, 0x02,
	0x8a, 0xea, 0x71, 0x58, 0xef, 0xbf, 0xa8, 0xc7, 0x61, 0x61, 0x74, 0x36, 0xd2, 0xfe, 0x3c, 0xcd,
	0x16, 0xe0, 0xf9, 0x6d, 0xc6, 0x03, 0xc6, 0xc1, 0x7d, 0xe6, 0x43, 0x3e, 0xc2, 0x78, 0x77, 0xf8,
	0x10, 0x3c, 0xa5, 0x19, 0xb2, 0xbe, 0x5f, 0xd0, 0x0c, 0xc7, 0x66, 0xc7, 0xc8, 0x71, 0x34, 0xd2,
	0x9f, 0x88, 0x5c, 0x6f, 0x73, 0xee, 0xe4, 0x1e, 0x5e, 0x4d, 0xdf, 0xae, 0x66, 0x5d, 0xd3, 0xbc,
	0x51, 0xf1, 0xa9, 0x73, 0xae, 0xcc, 0x47, 0xa8, 0x21, 0x05, 0x78, 0x39, 0x6a, 0x4d, 0x46, 0xbe,
	0xc0, 0x6b, 0xd9, 0x86, 0x37, 0x57, 0x35, 0xed, 0x56, 0xe5, 0x27, 0xc1, 0x69, 0xce, 0x89, 0x2f,
	0x4a, 0x7d, 0xcf, 0x51, 0xcf, 0x29, 0xfb, 0x7f, 0xd5, 0x4b, 0x36, 0xee, 0x96, 0x60, 0x83, 0xeb,
	0x64, 0x88, 0xdb, 0x69, 0xb3, 0x0b, 0x51, 0x92, 0x5c, 0xd6, 0xf5, 0x4a, 0x41, 0x9f, 0x53, 0xe5,
	0x3d, 0xd8, 0x15, 0xfa, 0x57, 0xda, 0xa8, 0x92, 0x7f, 0xea, 0x64, 0xad, 0x90, 0x87, 0xd8, 0xd4,
	0xae, 0xff, 0x3d, 0xc8, 0x76, 0xd5, 0x79, 0xcf, 0x22, 0xbd, 0x85, 0xc8, 0x10, 0x6f, 0x16, 0x22,
	0x77, 0x05, 0x44, 0x9f, 0x89, 0x11, 0x55, 0x40, 0x2a, 0x2f, 0x92, 0xb1, 0x3c, 0x70, 0xd6, 0x4a,
	0x07, 0x19, 0x8f, 0xd1, 0xef, 0xdf, 0xb5, 0x7e, 0x2e, 0x7b, 0x62, 0xc8, 0x6a, 0x90, 0x6e, 0x50,
	0xdd, 0x07, 0x45, 0x56, 0x45, 0x28, 0x15, 0x59, 0x1b, 0x41, 0x00, 0x0a, 0x48, 0x5d, 0xc4, 0xca,
	0x78, 0xcf, 0xfe, 0xe6, 0x78, 0xae, 0x7a, 0xfb, 0xc0, 0x29, 0x57, 0x8f, 0x96, 0x6c, 0x9f, 0xd2,
	0x31, 0x48, 0x41, 0x3d, 0x38, 0x6d, 0x7e, 0x64, 0x5d, 0x4e, 0xff, 0xcb, 0x9c, 0x7c, 0x90, 0xe4,
	0x9b, 0xb5, 0xc1, 0x75, 0xe7, 0x85, 0xc3, 0xa3, 0x36, 0x7a, 0x7a, 0xd4, 0x46, 0x7f, 0x1e, 0xb5,
	0xd1, 0x1e, 0x1a, 0xae, 0xe9, 0x1c, 0x6f, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x13, 0x4c, 0x78,
	0x80, 0xcc, 0x09, 0x00, 0x00,
}
