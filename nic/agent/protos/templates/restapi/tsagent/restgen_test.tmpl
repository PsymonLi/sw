// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package {{.GoPkg.Name}} is a auto generated package.
Input file: {{.Name}}
*/
package restapi_test

import (
	. "github.com/pensando/sw/venice/utils/testutils"
	"github.com/pensando/sw/api"
)

// Dummy imports
var _ Evaluator

{{range .Services}}
    {{$svcname := .Name}}
    {{if (hasExtension "venice.naplesRestService" .)}}
       {{$params := (getRestSvcOptions .)}}

       {{range $params}}
           {{$crudObject := .CrudObject}}
           {{$pattern := .Pattern}}
           {{$methods := .Methods}}
           {{if strEq $crudObject "MirrorSession"}}
           {{range $methods}}
                {{if strEq . "list"}}
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        t.Parallel()
                        var {{lower $crudObject}}{{title .}} []*netproto.{{title $crudObject}}
                        err := netutils.HTTPGet("http://"+agentRestURL+"/api/mirror/sessions/", &{{lower $crudObject}}{{title .}} )
                        AssertOk(t, err, "Error getting {{lower $crudObject}}s from the REST Server")
                    }
                {{else if strEq . "post"}}
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        t.Parallel()
                        var resp Response
                        var ok bool
                        var {{lower $crudObject}}Get netproto.{{title $crudObject}}
                        {{lower .}}Data := netproto.{{title $crudObject}}{
                            TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                            ObjectMeta: api.ObjectMeta{
                                Tenant: "default",
                                Namespace: "default",
                                Name: "test{{title .}}{{title $crudObject}}",
                            },
                            Spec:   netproto.{{title $crudObject}}Spec{
                                PacketSize: 128,
                                Enable: true,
                                PacketFilters: []string{"ALL_DROPS"},
                                CaptureAt: 0,
                                Collectors: []netproto.MirrorCollector{
                                    netproto.MirrorCollector{Type: "ERSPAN", ExportCfg: monitoring.ExportConfig{Destination: "10.10.10.1", Transport: "TCP/8181", }, },
                                },
                            },
                        }
                        err := netutils.HTTPPost("http://"+agentRestURL+"/api/mirror/sessions/", &{{lower .}}Data, &resp)
                        AssertOk(t, err, "Error posting {{lower $crudObject}} to REST Server")
                        getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/mirror/sessions/default/default/"+"test{{title .}}{{title $crudObject}}/", &{{lower $crudObject}}Get)
                        AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                        if {{lower $crudObject}}Get.Name == "test{{title .}}{{title $crudObject}}" {
                            ok = true
                        }
                        if !ok {
                            t.Errorf("Could not create test{{title .}}{{title $crudObject}} in Response: %v", {{lower $crudObject}}Get)
                        }

                        // post it again
                        nresp := Response{}
                        err = netutils.HTTPPost("http://"+agentRestURL+"/api/mirror/sessions/", &{{lower $crudObject}}Get, &nresp)
                        Assert(t, err != nil, "POST didn't fail for existing policy")
                    }
                {{else if strEq . "put"}}
                    func Test{{title $crudObject}}Update(t *testing.T){
                        t.Parallel()
                        var resp Response
                        var ok bool
                        var {{lower $crudObject}}Get netproto.{{title $crudObject}}
                        {{lower .}}Data := netproto.{{title $crudObject}}{
                            TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                            ObjectMeta: api.ObjectMeta{
                                Tenant: "default",
                                Namespace: "default",
                                Name: "test{{title .}}{{title $crudObject}}",
                            },
                            Spec:   netproto.{{title $crudObject}}Spec{
                                PacketSize: 128,
                                Enable: true,
                                PacketFilters: []string{"ALL_DROPS"},
                                CaptureAt: 0,
                                Collectors: []netproto.MirrorCollector{
                                    netproto.MirrorCollector{Type: "ERSPAN", ExportCfg: monitoring.ExportConfig{Destination: "10.10.10.1", Transport: "TCP/8181", }, },
                                },
                            },
                        }
                        // First post
                        err := netutils.HTTPPost("http://"+agentRestURL+"/api/mirror/sessions/", &{{lower .}}Data, &resp)
                        AssertOk(t, err, "Error posting {{lower $crudObject}} to REST Server")

                        // update using put
                        {{lower .}}Data = netproto.{{title $crudObject}}{
                            TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                            ObjectMeta: api.ObjectMeta{
                                Tenant: "default",
                                Namespace: "default",
                                Name: "test{{title .}}{{title $crudObject}}",
                            },
                            Spec:   netproto.{{title $crudObject}}Spec{
                                PacketSize: 256,
                                Enable: true,
                                PacketFilters: []string{"ALL_DROPS"},
                                CaptureAt: 1,
                                Collectors: []netproto.MirrorCollector{
                                    netproto.MirrorCollector{Type: "ERSPAN", ExportCfg: monitoring.ExportConfig{Destination: "10.10.10.1", Transport: "TCP/8181", }, },
                                },
                            },
                        }
                        err = netutils.HTTPPut("http://"+agentRestURL+"/api/mirror/sessions/default/default/"+"test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                        AssertOk(t, err, "Error puting {{lower $crudObject}} to REST Server")
                        getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/mirror/sessions/default/default/"+"test{{title .}}{{title $crudObject}}/", &{{lower $crudObject}}Get)
                        AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                        if {{lower $crudObject}}Get.Spec.PacketSize == 256 {
                            ok = true
                        }
                        if !ok {
                            t.Errorf("Could not update test{{title .}}{{title $crudObject}} in Response: %v", {{lower $crudObject}}Get)
                        }
                    }
                {{else if strEq . "delete"}}
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        t.Parallel()
                        var resp Response
                        {{lower .}}Data := netproto.{{title $crudObject}}{
                            TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                            ObjectMeta: api.ObjectMeta{
                                Tenant: "default",
                                Namespace: "default",
                                Name: "test{{title .}}{{title $crudObject}}",
                            },
                            Spec:   netproto.{{title $crudObject}}Spec{
                                PacketSize: 128,
                                Enable: true,
                                PacketFilters: []string{"ALL_DROPS"},
                                CaptureAt: 0,
                                Collectors: []netproto.MirrorCollector{
                                    netproto.MirrorCollector{Type: "ERSPAN", ExportCfg: monitoring.ExportConfig{Destination: "10.10.10.1", Transport: "TCP/8181", }, },
                                },
                            },
                        }
                        err := netutils.HTTPPost("http://"+agentRestURL+"/api/mirror/sessions/", &{{lower .}}Data, &resp)
                        AssertOk(t, err, "Error posting {{lower $crudObject}} to REST Server")
                        delErr := netutils.HTTPDelete("http://"+agentRestURL+"/api/mirror/sessions/default/default/"+"test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                        AssertOk(t, delErr, "Error deleting {{lower $crudObject}}s from the REST Server")
                    }
                {{end}}
           {{end}}
        {{end}}
      {{end}}
   {{end}}
{{end}}
