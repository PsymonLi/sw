// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package {{.GoPkg.Name}} is a auto generated package.
Input file: {{.Name}}
*/
package restapi
import (
    tpmprotos "github.com/pensando/sw/nic/agent/protos/tpmprotos"
    "github.com/pensando/sw/nic/agent/protos/tsprotos"
    . "github.com/pensando/sw/venice/utils/testutils"
)


{{range .Services}}
    {{$svcname := .Name}}
    {{if (hasExtension "venice.naplesRestService" .)}}
       {{$params := (getRestSvcOptions .)}}

       {{range $params}}
           {{$crudObject := .CrudObject}}
           {{$pattern := .Pattern}}
           {{$methods := .Methods}}
           {{range $methods}}
                {{if strEq . "list"}}
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        t.Parallel()
                        var {{lower $crudObject}}{{title .}} []*tpmprotos.{{title $crudObject}}
                        {{if strEq $crudObject "FlowExportPolicy"}}
                        err := netutils.HTTPGet("http://"+agentRestURL+"/api/telemetry/flowexports/", &{{lower $crudObject}}{{title .}} )
                        {{else if strEq $crudObject "FwlogPolicy"}}
                        err := netutils.HTTPGet("http://"+agentRestURL+"/api/telemetry/fwlog/", &{{lower $crudObject}}{{title .}} )
                        {{end}}
                        AssertOk(t, err, "Error getting {{lower $crudObject}}s from the REST Server")
                    }

                {{else if strEq . "put"}}
                   func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        t.Parallel()
                        var resp Response
                        var {{lower $crudObject}}Get tpmprotos.{{title $crudObject}}
                        {{if strEq $crudObject "FlowExportPolicy"}}
                          {{lower .}}Data := tpmprotos.{{title $crudObject}}{
                            TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                            ObjectMeta: api.ObjectMeta{
                            Tenant: "default",
                            Namespace: "default",
                            Name: "test{{title .}}{{title $crudObject}}",
                          },
                          Spec:   tpmprotos.{{title $crudObject}}Spec{
                            MatchRules: []tsproto.MatchRule{
                            {
                             Src: &tsproto.MatchSelector{
                              IPAddresses: []string{"1.1.1.1"},
                             },
                             Dst: &tsproto.MatchSelector{
                              IPAddresses: []string{"1.1.1.2"},
                             },
                             AppProtoSel: &tsproto.AppProtoSelector{
                              Ports: []string{"TCP/1000"},
                             },
                            },
                            },
                            Interval: "15s",
                            Format:"IPFIX",
                            Exports: []monitoring.ExportConfig{
                             {
                              Destination: "10.1.1.0",
                              Transport: "UDP/2055",
                             },
                            },
                           },
                          }
                          err := netutils.HTTPPost("http://"+agentRestURL+"/api/telemetry/flowexports/", &{{lower .}}Data, &resp)
                          AssertOk(t, err, "Error posting {{lower $crudObject}} to REST Server")

                          // change protocol & interval
                          {{lower .}}Data.Spec.Interval = "60s"
                          {{lower .}}Data.Spec.Exports[0].Transport = "TCP/2055"

                          // put
                          err = netutils.HTTPPut("http://"+agentRestURL+"/api/telemetry/flowexports/default/default/" + "test{{title .}}{{title $crudObject}}/", &{{lower .}}Data, &resp)
                          AssertOk(t, err, "Error in PUT {{lower $crudObject}} to REST Server")

                          getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/telemetry/flowexports/default/default/"+"test{{title .}}{{title $crudObject}}/", &{{lower $crudObject}}Get)
                          AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                          {{else if strEq $crudObject "FwlogPolicy"}}
                          {{lower .}}Data := tpmprotos.{{title $crudObject}}{
                              TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                              ObjectMeta: api.ObjectMeta{
                               Tenant: "default",
                               Namespace: "default",
                               Name: "test{{title .}}{{title $crudObject}}",
                              },
                              Spec:   monitoring.{{title $crudObject}}Spec{
                                Targets:[]monitoring.ExportConfig{
                                  {
                                    Destination: "192.168.1.100",
                                    Transport:   "TCP/514",
                                  },
                                  {
                                    Destination: "192.168.1.101",
                                    Transport: "UDP/514",
                                  },
                               },
                               Format: "SYSLOG_BSD",
                               Filter: []string{"FIREWALL_ACTION_ALL",},
                               Config:&monitoring.SyslogExportConfig{
                               FacilityOverride: "LOG_LOCAL0",
                               },
                              },
                              }
                              err := netutils.HTTPPost("http://"+agentRestURL+"/api/telemetry/fwlog/", &{{lower .}}Data, &resp)
                              AssertOk(t, err, "Error posting {{lower $crudObject}} to REST Server")

                              // change protocol & interval
                              {{lower .}}Data.Spec.Format = "SYSLOG_RFC5424"
                              {{lower .}}Data.Spec.Targets[0].Transport = "TCP/4055"

                              // put
                              err = netutils.HTTPPut("http://"+agentRestURL+"/api/telemetry/fwlog/default/default/" + "test{{title .}}{{title $crudObject}}/", &{{lower .}}Data, &resp)
                              AssertOk(t, err, "Error in PUT {{lower $crudObject}} to REST Server")

                              getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/telemetry/fwlog/default/default/"+"test{{title .}}{{title $crudObject}}/", &{{lower $crudObject}}Get)
                              AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                              {{end}}
                           }

                {{else if strEq . "post"}}
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        t.Parallel()
                        var resp Response
                        var {{lower $crudObject}}Get tpmprotos.{{title $crudObject}}
                        {{if strEq $crudObject "FlowExportPolicy"}}
                        {{lower .}}Data := tpmprotos.{{title $crudObject}}{
                            TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                            ObjectMeta: api.ObjectMeta{
                                Tenant: "default",
                                Namespace: "default",
                                Name: "test{{title .}}{{title $crudObject}}",
                            },
                            Spec:   tpmprotos.{{title $crudObject}}Spec{
                                   MatchRules: []tsproto.MatchRule{
                                     {
                                           Src: &tsproto.MatchSelector{
                                               IPAddresses: []string{"1.1.1.1"},
                                           },
                                           Dst: &tsproto.MatchSelector{
                                               IPAddresses: []string{"1.1.1.2"},
                                           },
                                           AppProtoSel: &tsproto.AppProtoSelector{
                                               Ports: []string{"TCP/1000"},
                                           },
                                     },
                                    },
                                    Interval: "15s",
                                    Format:"IPFIX",
                                    Exports: []monitoring.ExportConfig{
                                        {
                                        Destination: "10.1.1.0",
                                        Transport: "UDP/2055",
                                        },
                                   },
                                },
                        }
                        err := netutils.HTTPPost("http://"+agentRestURL+"/api/telemetry/flowexports/", &{{lower .}}Data, &resp)
                        AssertOk(t, err, "Error posting {{lower $crudObject}} to REST Server")
                        getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/telemetry/flowexports/default/default/"+"test{{title .}}{{title $crudObject}}/", &{{lower $crudObject}}Get)
                        AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")

                        {{else if strEq $crudObject "FwlogPolicy"}}
                                {{lower .}}Data := tpmprotos.{{title $crudObject}}{
                                    TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                    ObjectMeta: api.ObjectMeta{
                                    Tenant: "default",
                                    Namespace: "default",
                                    Name: "test{{title .}}{{title $crudObject}}",
                                    },
                                    Spec:   monitoring.{{title $crudObject}}Spec{
                                    Targets:[]monitoring.ExportConfig{
                                    {
                                     Destination: "192.168.1.100",
                                     Transport:   "TCP/514",
                                    },
                                    {
                                     Destination: "192.168.1.101",
                                     Transport: "UDP/514",
                                    },
                                    },
                                    Format: "SYSLOG_BSD",
                                    Filter: []string{"FIREWALL_ACTION_ALL",},
                                    Config:&monitoring.SyslogExportConfig{
                                     FacilityOverride: "LOG_LOCAL0",
                                    },
                                    },
                               }
                               err := netutils.HTTPPost("http://"+agentRestURL+"/api/telemetry/fwlog/", &{{lower .}}Data, &resp)
                               AssertOk(t, err, "Error posting {{lower $crudObject}} to REST Server")
                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/telemetry/fwlog/default/default/"+"test{{title .}}{{title $crudObject}}/", &{{lower $crudObject}}Get)
                               AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")

                        {{end}}
                    }

                {{else if strEq . "delete"}}
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                         t.Parallel()
                        var resp Response
                        {{if strEq $crudObject "FlowExportPolicy"}}
                        {{lower .}}Data := tpmprotos.{{title $crudObject}}{
                            TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                            ObjectMeta: api.ObjectMeta{
                                Tenant: "default",
                                Namespace: "default",
                                Name: "test{{title .}}{{title $crudObject}}",
                            },
                             Spec:   tpmprotos.{{title $crudObject}}Spec{
                                          MatchRules: []tsproto.MatchRule{
                                            {
                                                Src: &tsproto.MatchSelector{
                                                     IPAddresses: []string{"1.1.1.1"},
                                                 },
                                                 Dst: &tsproto.MatchSelector{
                                                    IPAddresses: []string{"1.1.1.2"},
                                                 },
                                                  AppProtoSel: &tsproto.AppProtoSelector{
                                                    Ports: []string{"TCP/1000"},
                                               },
                                            },
                                     },

                                    Interval: "15s",
                                    Format:"IPFIX",
                                    Exports: []monitoring.ExportConfig{
                                        {
                                        Destination: "10.1.1.0",
                                        Transport: "UDP/2055",
                                        },
                                   },
                                },
                        }

                         {{lower .}}Meta := tpmprotos.{{title $crudObject}}{
                            TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                            ObjectMeta: api.ObjectMeta{
                                Tenant: "default",
                                Namespace: "default",
                                Name: "test{{title .}}{{title $crudObject}}",
                            },
                          }
                        err := netutils.HTTPPost("http://"+agentRestURL+"/api/telemetry/flowexports/", &{{lower .}}Data, &resp)
                        AssertOk(t, err, "Error posting {{lower $crudObject}} to REST Server")
                        delErr := netutils.HTTPDelete("http://"+agentRestURL+"/api/telemetry/flowexports/default/default/"+"test{{title .}}{{title $crudObject}}", &{{lower .}}Meta, &resp)
                        AssertOk(t, delErr, "Error deleting {{lower $crudObject}}s from the REST Server")

                         {{else if strEq $crudObject "FwlogPolicy"}}
                             {{lower .}}Data := tpmprotos.{{title $crudObject}}{
                                   TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                   ObjectMeta: api.ObjectMeta{
                                    Tenant: "default",
                                    Namespace: "default",
                                    Name: "test{{title .}}{{title $crudObject}}",
                                   },
                                   Spec: monitoring.{{title $crudObject}}Spec{
                                          Targets:[]monitoring.ExportConfig{
                                             {
                                                             Destination: "192.168.1.100",
                                                             Transport:   "TCP/514",
                                             },
                                             {
                                                             Destination: "192.168.1.101",
                                                             Transport: "UDP/514",
                                             },
                                          },
                                          Format: "SYSLOG_BSD",
                                          Filter: []string{"FIREWALL_ACTION_ALL",},
                                          Config:&monitoring.SyslogExportConfig{
                                            FacilityOverride: "LOG_LOCAL0",
                                          },
                                   },
                             }

                             {{lower .}}Meta := tpmprotos.{{title $crudObject}}{
                                         TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                         ObjectMeta: api.ObjectMeta{
                                             Tenant: "default",
                                             Namespace: "default",
                                             Name: "test{{title .}}{{title $crudObject}}",
                                         },
                              }
                          err := netutils.HTTPPost("http://"+agentRestURL+"/api/telemetry/fwlog/", &{{lower .}}Data, &resp)
                          AssertOk(t, err, "Error posting {{lower $crudObject}} to REST Server")
                          delErr := netutils.HTTPDelete("http://"+agentRestURL+"/api/telemetry/fwlog/default/default/"+"test{{title .}}{{title $crudObject}}", &{{lower .}}Meta, &resp)
                          AssertOk(t, delErr, "Error deleting {{lower $crudObject}}s from the REST Server")
                       {{end}}
                    }
                {{end}}
           {{end}}

      {{end}}
   {{end}}
{{end}}
