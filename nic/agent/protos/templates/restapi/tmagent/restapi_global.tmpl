// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
This is a auto generated package.
*/
package restapi


import (
	"expvar"
	"net"
	"net/http"
	"net/http/pprof"

	"github.com/gorilla/mux"

	tpa "github.com/pensando/sw/nic/agent/tpa/state/types"
	troubleshooting "github.com/pensando/sw/nic/agent/troubleshooting/state/types"
	debugStats "github.com/pensando/sw/venice/utils/debug/stats"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ntranslate"
	"github.com/pensando/sw/venice/utils/tsdb"
)

// this package contains the REST API provided by the agent

const (
	agentRestURL      = "localhost:1337"
)


// RestServer is the REST api server
type RestServer struct {
	listenURL  string                     // URL where http server is listening
	TpAgent           tpa.CtrlerIntf         // telemetry policy agent
	keyTranslator     *ntranslate.Translator   // key to objMeta translator
	PrefixRoutes      map[string]routeAddFunc  // REST API route add functions
	GetPointsFuncList map[string]getPointsFunc // Get metrics points
}

type routeAddFunc func(*mux.Router)
type getPointsFunc func() ([]*tsdb.Point, error)

// Response captures the HTTP Response sent by Agent REST Server
type Response struct {
	StatusCode int      `json:"status-code,omitempty"`
	Error      string   `json:"error,omitempty"`
	References []string `json:"references,omitempty"`
}

// MakeErrorResponse generates error response for MakeHTTPHandler() API
func MakeErrorResponse(code int, err error) (*Response, error) {
	res := &Response{
		StatusCode: code,
	}

	if err != nil {
		res.Error = err.Error()
	}

	return res, err
}

// NewRestServer creates a new HTTP server servicg REST api
func NewRestServer(tpAgent tpa.CtrlerIntf, keyTranslator *ntranslate.Translator, listenURL string) (*RestServer, error) {
	// create server instance
	srv := RestServer{
		listenURL: listenURL,
		TpAgent: tpAgent,
		keyTranslator:     keyTranslator,
	}

	return &srv, nil
}

// getTagsFromMeta returns tags to store in Venice TSDB
func (s *RestServer) getTagsFromMeta(meta *api.ObjectMeta) map[string]string {
	return map[string]string{
		"tenant":    meta.Tenant,
		"namespace": meta.Namespace,
		"name":      meta.Name,
	}
}
