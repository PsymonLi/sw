// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
 * Package restapi is a auto generated package.
 * Input file: {{.Name}}
 */
package restapi
import (
    "github.com/gorilla/mux"
    "github.com/pensando/sw/api"
    evtsmgrprotos "github.com/pensando/sw/nic/agent/protos/evtprotos"
    "github.com/gogo/protobuf/types"
)

{{range .Services}}
    {{$svcname := .Name}}
    {{if (hasExtension "venice.naplesRestService" .)}}
       {{$params := (getRestSvcOptions .)}}
       {{range $params}}
            // Add{{.CrudObject}}APIRoutes adds {{.CrudObject}}
            func (srv *RestServer) Add{{.CrudObject}}APIRoutes(r *mux.Router){
            {{$crudObject := .CrudObject}}
            {{$pattern := .Pattern}}
            {{$methods := .Methods}}
            {{range $methods}}
                {{if strEq . "list"}}
                    r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.EventPolicy{{title .}}Handler))
                {{else if strEq . "post"}}
                    r.Methods("{{upper .}}").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.EventPolicy{{title .}}Handler))
                {{else}}
                    r.Methods("{{upper .}}").Subrouter().HandleFunc("{{$pattern}}", httputils.MakeHTTPHandler(srv.EventPolicy{{title .}}Handler))
                {{end}}
            {{end}}
            }
       {{end}}
       {{range $params}}
           {{$crudObject := .CrudObject}}
           {{$pattern := .Pattern}}
           {{$methods := .Methods}}
           {{range $methods}}
                {{if strEq . "list"}}
                    func (s *RestServer) EventPolicy{{title .}}Handler(r *http.Request) (interface{}, error){
                        p, err := s.handler.ListEventPolicy(r.Context())
                        return p, err
                    }
                {{else}}
                    func (s *RestServer) EventPolicy{{title .}}Handler(r *http.Request) (interface{}, error){
                        var o evtsmgrprotos.{{title $crudObject}}

                        {{if strEq . "get"}}
                             o.TypeMeta.Kind = "EventPolicy"
                             o.ObjectMeta.Tenant = mux.Vars(r)["ObjectMeta.Tenant"]
                             o.ObjectMeta.Namespace = mux.Vars(r)["ObjectMeta.Namespace"]
                             o.ObjectMeta.Name = mux.Vars(r)["ObjectMeta.Name"]

                             p, err := s.handler.GetEventPolicy(r.Context(),&o)
                             return p, err
                        {{else if strEq . "delete"}}
                             o.TypeMeta.Kind = "EventPolicy"
                             o.ObjectMeta.Tenant = mux.Vars(r)["ObjectMeta.Tenant"]
                             o.ObjectMeta.Namespace = mux.Vars(r)["ObjectMeta.Namespace"]
                             o.ObjectMeta.Name = mux.Vars(r)["ObjectMeta.Name"]

                             return Response{}, s.handler.DeleteEventPolicy(r.Context(), &o)
                        {{else if strEq . "post"}}
                            var res Response
                             b, _ := ioutil.ReadAll(r.Body)
                             err := json.Unmarshal(b, &o)
                             if err != nil {
                                 return nil, err
                             }
                             c, _ := types.TimestampProto(time.Now())
                             o.CreationTime = api.Timestamp{
                                Timestamp: *c,
                             }
                             o.ModTime = api.Timestamp{
                                Timestamp: *c,
                             }
                             err = s.handler.CreateEventPolicy(r.Context(), &o)
                             if err != nil {
                                 res.StatusCode = http.StatusInternalServerError
                                 res.Error = err.Error()
                                 return res, err
                             }
                             res.References = []string{fmt.Sprintf("%s%s/%s/%s",r.RequestURI, o.Tenant, o.Namespace, o.Name)}
                             res.StatusCode = http.StatusOK
                             return res, err
                        {{else if strEq . "put"}}
                             var res Response
                             b, _ := ioutil.ReadAll(r.Body)
                             err := json.Unmarshal(b, &o)
                             if err != nil {
                                 return nil, err
                             }
                             m, _ := types.TimestampProto(time.Now())
                             o.ModTime = api.Timestamp{
                                Timestamp: *m,
                             }
                             err = s.handler.UpdateEventPolicy(r.Context(), &o)
                             if err != nil {
                                 res.StatusCode = http.StatusInternalServerError
                                 res.Error = err.Error()
                                 return res, err
                             }
                             res.References = []string{fmt.Sprintf("%s%s/%s/%s",r.RequestURI, o.Tenant, o.Namespace, o.Name)}
                             res.StatusCode = http.StatusOK
                             return res, err
                        {{end}}
                    }
                {{end}}
           {{end}}
       {{end}}
    {{end}}
{{end}}
