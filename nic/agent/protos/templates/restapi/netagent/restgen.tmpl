// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package {{.GoPkg.Name}} is a auto generated package.
Input file: {{.Name}}
*/
package restapi
import (
    "github.com/gorilla/mux"
    "github.com/pensando/sw/api"
    protoTypes "github.com/gogo/protobuf/types"
    "github.com/pensando/sw/nic/agent/dscagent/types"
)
{{range .Services}}
    {{$svcname := .Name}}
    {{if (hasExtension "venice.naplesRestService" .)}}
       {{$params := (getRestSvcOptions .)}}
       {{range $params}}
            // Add{{.CrudObject}}APIRoutes adds {{.CrudObject}} routes
            func (s *RestServer) Add{{.CrudObject}}APIRoutes(r *mux.Router){
            {{$crudObject := .CrudObject}}
            {{$pattern := .Pattern}}
            {{$methods := .Methods}}
            {{range $methods}}
                {{if strEq . "list"}}
                    r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.{{lower .}}{{title $crudObject}}Handler))
                {{else if strEq . "post"}}
                    r.Methods("{{upper .}}").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.{{lower .}}{{title $crudObject}}Handler))
                {{else}}
                    r.Methods("{{upper .}}").Subrouter().HandleFunc("{{$pattern}}", httputils.MakeHTTPHandler(s.{{ lower .}}{{title $crudObject}}Handler))
                {{end}}
            {{end}}
            }
       {{end}}
       {{range $params}}
           {{$crudObject := .CrudObject}}
           {{$pattern := .Pattern}}
           {{$methods := .Methods}}
           {{range $methods}}
            {{if strEq . "post"}}
              func (s *RestServer) {{lower .}}{{title $crudObject}}Handler(r *http.Request) (interface{}, error){
               var o netproto.{{title $crudObject}}
               b, _ := ioutil.ReadAll(r.Body)
               err := json.Unmarshal(b, &o)
               if err != nil {
                   return nil, err
               }
               c, _ := protoTypes.TimestampProto(time.Now())
               o.CreationTime = api.Timestamp{
                   Timestamp: *c,
               }
               o.ModTime = api.Timestamp{
                   Timestamp: *c,
               }

               _, err = s.pipelineAPI.Handle{{title $crudObject}}(types.Create, o)

               if err != nil {
                 return Response {
                   StatusCode: http.StatusInternalServerError,
                 }, err
               }
               return Response {
                 StatusCode:http.StatusOK,
               }, nil
             }

             {{else if strEq . "list"}}
             func (s *RestServer) {{lower .}}{{title $crudObject}}Handler(r *http.Request) (interface{}, error){
              o := netproto.{{$crudObject}}{
 		                     TypeMeta:   api.TypeMeta{Kind: "{{$crudObject}}"},
 	                     }

              return s.pipelineAPI.Handle{{title $crudObject}}(types.List, o)
             }

            {{else if strEq . "get"}}
            func (s *RestServer) {{lower .}}{{title $crudObject}}Handler(r *http.Request) (interface{}, error){
              tenant, _ := mux.Vars(r)["ObjectMeta.Tenant"]
              namespace, _ := mux.Vars(r)["ObjectMeta.Namespace"]
              name, _ := mux.Vars(r)["ObjectMeta.Name"]
              o := netproto.{{$crudObject}}{
            		TypeMeta:   api.TypeMeta{Kind:"{{$crudObject}}"},
            		ObjectMeta: api.ObjectMeta{
            			Tenant: tenant,
            			Namespace: namespace,
            			Name: name,
            		},
            	}

             data, err := s.pipelineAPI.Handle{{title $crudObject}}(types.Get, o)
             if err != nil {
               return Response {
                 StatusCode: http.StatusInternalServerError,
               }, err
             }
             return data, nil

            }

            {{else if strEq . "put"}}
            func (s *RestServer) {{lower .}}{{title $crudObject}}Handler(r *http.Request) (interface{}, error){
              var o netproto.{{title $crudObject}}
              b, _ := ioutil.ReadAll(r.Body)
              err := json.Unmarshal(b, &o)
              if err != nil {
                  return nil, err
              }
              c, _ := protoTypes.TimestampProto(time.Now())
              o.CreationTime = api.Timestamp{
                  Timestamp: *c,
              }
              o.ModTime = api.Timestamp{
                  Timestamp: *c,
              }

             _, err = s.pipelineAPI.Handle{{title $crudObject}}(types.Update, o)
             if err != nil {
               return Response {
                 StatusCode: http.StatusInternalServerError,
               }, err
             }
             return Response {
               StatusCode: http.StatusOK,
             }, nil
            }

            {{else if strEq . "delete"}}
            func (s *RestServer) {{lower .}}{{title $crudObject}}Handler(r *http.Request) (interface{}, error){
              tenant, _ := mux.Vars(r)["ObjectMeta.Tenant"]
              namespace, _ := mux.Vars(r)["ObjectMeta.Namespace"]
              name, _ := mux.Vars(r)["ObjectMeta.Name"]
              o := netproto.{{$crudObject}}{
            		TypeMeta:   api.TypeMeta{Kind:"{{$crudObject}}"},
            		ObjectMeta: api.ObjectMeta{
            			Tenant: tenant,
            			Namespace: namespace,
            			Name: name,
            		},
            	}

             _, err := s.pipelineAPI.Handle{{title $crudObject}}(types.Delete, o)
             if err != nil {
               return Response {
                 StatusCode: http.StatusInternalServerError,
               }, err
             }
             return Response {
               StatusCode:http.StatusOK,
             }, nil
            }

            {{end}}
           {{end}}
       {{end}}
     {{end}}
   {{end}}
