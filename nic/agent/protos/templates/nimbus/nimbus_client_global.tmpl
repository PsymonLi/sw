// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package nimbus


import (
	"errors"
	"sync"

	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/memdb"
	"github.com/pensando/sw/venice/utils/rpckit"
    "github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/netagent/state"
	"github.com/pensando/sw/nic/agent/netagent/state/types"
	"github.com/pensando/sw/nic/agent/protos/netproto"
	"github.com/pensando/sw/venice/utils/balancer"
	debugStats "github.com/pensando/sw/venice/utils/debug/stats"
	"github.com/pensando/sw/venice/utils/resolver"
	"github.com/pensando/sw/venice/utils/tsdb"
)

const maxOpretry = 10
const evChanLength = 1024
const resyncInterval = time.Minute * 5
const DefaultRPCTimeout = time.Second * 30

// NimbusClient is the nimbus client
type NimbusClient struct {
	sync.Mutex                                    // lock the npm client
    clientName      string                        // client's name
	srvURL          string                        // rpc server URL
	waitGrp         sync.WaitGroup                // wait group to wait on all go routines to exit
	rpcClient       *rpckit.RPCClient             // grpc client for watch
	objlocks        map[string]*sync.Mutex // object level locks
	debugStats      *debugStats.Stats
}

// NewNimbusClient creates a new nimbus client
func NewNimbusClient(clientName, srvURL string, rpcClient *rpckit.RPCClient) (*NimbusClient, error) {
	// create NimbusClient object
	client := NimbusClient{
        clientName:      clientName,
		srvURL:          srvURL,
		rpcClient:       rpcClient,
		objlocks:        make(map[string]*sync.Mutex),
	}

	client.debugStats = debugStats.New(clientName).Tsdb().Kind("nimbusClientStats").TsdbPeriod(5 * time.Second).Build()

	return &client, nil
}


// Wait waits for all watchers to exit
func (client *NimbusClient) Wait() {
	client.waitGrp.Wait()
}


// lockObject locks an object
func (client *NimbusClient) lockObject(kind string, ometa api.ObjectMeta) {
	objkey := fmt.Sprintf("%s/%s", kind, ometa.GetKey())

	client.Lock()
	objlock, ok := client.objlocks[objkey]
	if !ok {
		client.objlocks[objkey] = &sync.Mutex{}
		objlock = client.objlocks[objkey]
	}
	client.Unlock()
	objlock.Lock()
}

// unlockObject unlocks an object
func (client *NimbusClient) unlockObject(kind string, ometa api.ObjectMeta) {
	objkey := fmt.Sprintf("%s/%s", kind, ometa.GetKey())
	client.Lock()
	objlock, ok := client.objlocks[objkey]
	if ok {
		objlock.Unlock()
	}
	client.Unlock()
}
