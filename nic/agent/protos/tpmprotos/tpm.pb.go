// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tpm.proto

/*
	Package tpmprotos is a generated protocol buffer package.

	It is generated from these files:
		tpm.proto

	It has these top-level messages:
		StatsPolicyEvent
		StatsPolicySpec
		StatsPolicyStatus
		StatsPolicy
		FwlogPolicyEvent
		FwlogPolicyEventList
		FwlogPolicy
		FlowExportPolicyEvent
		FlowExportPolicyEventList
		FlowExportPolicySpec
		FlowExportPolicyStatus
		FlowExportPolicy
*/
package tpmprotos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import monitoring "github.com/pensando/sw/api/generated/monitoring"
import tsproto "github.com/pensando/sw/nic/agent/protos/tsproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// stats policy watch events to agent
type StatsPolicyEvent struct {
	// event type create/update/delete
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	// stats policy
	Policy *StatsPolicy `protobuf:"bytes,2,opt,name=Policy" json:"policy,omitempty"`
}

func (m *StatsPolicyEvent) Reset()                    { *m = StatsPolicyEvent{} }
func (m *StatsPolicyEvent) String() string            { return proto.CompactTextString(m) }
func (*StatsPolicyEvent) ProtoMessage()               {}
func (*StatsPolicyEvent) Descriptor() ([]byte, []int) { return fileDescriptorTpm, []int{0} }

func (m *StatsPolicyEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *StatsPolicyEvent) GetPolicy() *StatsPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type StatsPolicySpec struct {
	// collection interval
	Interval string `protobuf:"bytes,1,opt,name=Interval,proto3" json:"interval,omitempty"`
}

func (m *StatsPolicySpec) Reset()                    { *m = StatsPolicySpec{} }
func (m *StatsPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*StatsPolicySpec) ProtoMessage()               {}
func (*StatsPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorTpm, []int{1} }

func (m *StatsPolicySpec) GetInterval() string {
	if m != nil {
		return m.Interval
	}
	return ""
}

type StatsPolicyStatus struct {
}

func (m *StatsPolicyStatus) Reset()                    { *m = StatsPolicyStatus{} }
func (m *StatsPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*StatsPolicyStatus) ProtoMessage()               {}
func (*StatsPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorTpm, []int{2} }

// StatsPolicy stats Policy object
type StatsPolicy struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           StatsPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         StatsPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *StatsPolicy) Reset()                    { *m = StatsPolicy{} }
func (m *StatsPolicy) String() string            { return proto.CompactTextString(m) }
func (*StatsPolicy) ProtoMessage()               {}
func (*StatsPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTpm, []int{3} }

func (m *StatsPolicy) GetSpec() StatsPolicySpec {
	if m != nil {
		return m.Spec
	}
	return StatsPolicySpec{}
}

func (m *StatsPolicy) GetStatus() StatsPolicyStatus {
	if m != nil {
		return m.Status
	}
	return StatsPolicyStatus{}
}

type FwlogPolicyEvent struct {
	// event type create/update/delete
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	// fwlog policy
	Policy *FwlogPolicy `protobuf:"bytes,2,opt,name=Policy" json:"policy,omitempty"`
}

func (m *FwlogPolicyEvent) Reset()                    { *m = FwlogPolicyEvent{} }
func (m *FwlogPolicyEvent) String() string            { return proto.CompactTextString(m) }
func (*FwlogPolicyEvent) ProtoMessage()               {}
func (*FwlogPolicyEvent) Descriptor() ([]byte, []int) { return fileDescriptorTpm, []int{4} }

func (m *FwlogPolicyEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *FwlogPolicyEvent) GetPolicy() *FwlogPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type FwlogPolicyEventList struct {
	EventList []*FwlogPolicyEvent `protobuf:"bytes,1,rep,name=EventList" json:"event-list,omitempty"`
}

func (m *FwlogPolicyEventList) Reset()                    { *m = FwlogPolicyEventList{} }
func (m *FwlogPolicyEventList) String() string            { return proto.CompactTextString(m) }
func (*FwlogPolicyEventList) ProtoMessage()               {}
func (*FwlogPolicyEventList) Descriptor() ([]byte, []int) { return fileDescriptorTpm, []int{5} }

func (m *FwlogPolicyEventList) GetEventList() []*FwlogPolicyEvent {
	if m != nil {
		return m.EventList
	}
	return nil
}

// FwlogPolicy firewall log Policy object
type FwlogPolicy struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           monitoring.FwlogPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         monitoring.FwlogPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *FwlogPolicy) Reset()                    { *m = FwlogPolicy{} }
func (m *FwlogPolicy) String() string            { return proto.CompactTextString(m) }
func (*FwlogPolicy) ProtoMessage()               {}
func (*FwlogPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTpm, []int{6} }

func (m *FwlogPolicy) GetSpec() monitoring.FwlogPolicySpec {
	if m != nil {
		return m.Spec
	}
	return monitoring.FwlogPolicySpec{}
}

func (m *FwlogPolicy) GetStatus() monitoring.FwlogPolicyStatus {
	if m != nil {
		return m.Status
	}
	return monitoring.FwlogPolicyStatus{}
}

type FlowExportPolicyEvent struct {
	// event type create/update/delete
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	// flow export policy
	Policy *FlowExportPolicy `protobuf:"bytes,2,opt,name=Policy" json:"policy,omitempty"`
}

func (m *FlowExportPolicyEvent) Reset()                    { *m = FlowExportPolicyEvent{} }
func (m *FlowExportPolicyEvent) String() string            { return proto.CompactTextString(m) }
func (*FlowExportPolicyEvent) ProtoMessage()               {}
func (*FlowExportPolicyEvent) Descriptor() ([]byte, []int) { return fileDescriptorTpm, []int{7} }

func (m *FlowExportPolicyEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *FlowExportPolicyEvent) GetPolicy() *FlowExportPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type FlowExportPolicyEventList struct {
	EventList []*FlowExportPolicyEvent `protobuf:"bytes,1,rep,name=EventList" json:"event-list,omitempty"`
}

func (m *FlowExportPolicyEventList) Reset()                    { *m = FlowExportPolicyEventList{} }
func (m *FlowExportPolicyEventList) String() string            { return proto.CompactTextString(m) }
func (*FlowExportPolicyEventList) ProtoMessage()               {}
func (*FlowExportPolicyEventList) Descriptor() ([]byte, []int) { return fileDescriptorTpm, []int{8} }

func (m *FlowExportPolicyEventList) GetEventList() []*FlowExportPolicyEvent {
	if m != nil {
		return m.EventList
	}
	return nil
}

type FlowExportPolicySpec struct {
	//  VrfName specifies the name of the VRF that the current Flow Export Policy belongs to
	VrfName string `protobuf:"bytes,1,opt,name=VrfName,proto3" json:"vrf-name,omitempty"`
	// Interval defines how often to push the records to an external or internal collector
	// The value is specified as a string format to be '10s', '20m', '20mins', '10secs', '10seconds'
	Interval string `protobuf:"bytes,2,opt,name=Interval,proto3" json:"interval,omitempty"`
	// TemplateInterval defines how often to send ipfix templates to an external collector
	// The value is specified as a string format, '3m', '10m'
	TemplateInterval string              `protobuf:"bytes,3,opt,name=TemplateInterval,proto3" json:"template-interval,omitempty"`
	Format           string              `protobuf:"bytes,4,opt,name=Format,proto3" json:"format,omitempty"`
	MatchRules       []tsproto.MatchRule `protobuf:"bytes,5,rep,name=MatchRules" json:"match-rules,omitempty"`
	// Export contains export parameters.
	Exports []monitoring.ExportConfig `protobuf:"bytes,6,rep,name=Exports" json:"exports,omitempty"`
}

func (m *FlowExportPolicySpec) Reset()                    { *m = FlowExportPolicySpec{} }
func (m *FlowExportPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*FlowExportPolicySpec) ProtoMessage()               {}
func (*FlowExportPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorTpm, []int{9} }

func (m *FlowExportPolicySpec) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *FlowExportPolicySpec) GetInterval() string {
	if m != nil {
		return m.Interval
	}
	return ""
}

func (m *FlowExportPolicySpec) GetTemplateInterval() string {
	if m != nil {
		return m.TemplateInterval
	}
	return ""
}

func (m *FlowExportPolicySpec) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *FlowExportPolicySpec) GetMatchRules() []tsproto.MatchRule {
	if m != nil {
		return m.MatchRules
	}
	return nil
}

func (m *FlowExportPolicySpec) GetExports() []monitoring.ExportConfig {
	if m != nil {
		return m.Exports
	}
	return nil
}

type FlowExportPolicyStatus struct {
}

func (m *FlowExportPolicyStatus) Reset()                    { *m = FlowExportPolicyStatus{} }
func (m *FlowExportPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*FlowExportPolicyStatus) ProtoMessage()               {}
func (*FlowExportPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorTpm, []int{10} }

// FlowExportPolicy flow export Policy object
type FlowExportPolicy struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           FlowExportPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         FlowExportPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *FlowExportPolicy) Reset()                    { *m = FlowExportPolicy{} }
func (m *FlowExportPolicy) String() string            { return proto.CompactTextString(m) }
func (*FlowExportPolicy) ProtoMessage()               {}
func (*FlowExportPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTpm, []int{11} }

func (m *FlowExportPolicy) GetSpec() FlowExportPolicySpec {
	if m != nil {
		return m.Spec
	}
	return FlowExportPolicySpec{}
}

func (m *FlowExportPolicy) GetStatus() FlowExportPolicyStatus {
	if m != nil {
		return m.Status
	}
	return FlowExportPolicyStatus{}
}

func init() {
	proto.RegisterType((*StatsPolicyEvent)(nil), "tpmprotos.statsPolicyEvent")
	proto.RegisterType((*StatsPolicySpec)(nil), "tpmprotos.StatsPolicySpec")
	proto.RegisterType((*StatsPolicyStatus)(nil), "tpmprotos.StatsPolicyStatus")
	proto.RegisterType((*StatsPolicy)(nil), "tpmprotos.StatsPolicy")
	proto.RegisterType((*FwlogPolicyEvent)(nil), "tpmprotos.FwlogPolicyEvent")
	proto.RegisterType((*FwlogPolicyEventList)(nil), "tpmprotos.FwlogPolicyEventList")
	proto.RegisterType((*FwlogPolicy)(nil), "tpmprotos.FwlogPolicy")
	proto.RegisterType((*FlowExportPolicyEvent)(nil), "tpmprotos.FlowExportPolicyEvent")
	proto.RegisterType((*FlowExportPolicyEventList)(nil), "tpmprotos.FlowExportPolicyEventList")
	proto.RegisterType((*FlowExportPolicySpec)(nil), "tpmprotos.FlowExportPolicySpec")
	proto.RegisterType((*FlowExportPolicyStatus)(nil), "tpmprotos.FlowExportPolicyStatus")
	proto.RegisterType((*FlowExportPolicy)(nil), "tpmprotos.FlowExportPolicy")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StatsPolicyApi service

type StatsPolicyApiClient interface {
	WatchStatsPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (StatsPolicyApi_WatchStatsPolicyClient, error)
}

type statsPolicyApiClient struct {
	cc *grpc.ClientConn
}

func NewStatsPolicyApiClient(cc *grpc.ClientConn) StatsPolicyApiClient {
	return &statsPolicyApiClient{cc}
}

func (c *statsPolicyApiClient) WatchStatsPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (StatsPolicyApi_WatchStatsPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StatsPolicyApi_serviceDesc.Streams[0], c.cc, "/tpmprotos.StatsPolicyApi/WatchStatsPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &statsPolicyApiWatchStatsPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatsPolicyApi_WatchStatsPolicyClient interface {
	Recv() (*StatsPolicyEvent, error)
	grpc.ClientStream
}

type statsPolicyApiWatchStatsPolicyClient struct {
	grpc.ClientStream
}

func (x *statsPolicyApiWatchStatsPolicyClient) Recv() (*StatsPolicyEvent, error) {
	m := new(StatsPolicyEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StatsPolicyApi service

type StatsPolicyApiServer interface {
	WatchStatsPolicy(*api.ObjectMeta, StatsPolicyApi_WatchStatsPolicyServer) error
}

func RegisterStatsPolicyApiServer(s *grpc.Server, srv StatsPolicyApiServer) {
	s.RegisterService(&_StatsPolicyApi_serviceDesc, srv)
}

func _StatsPolicyApi_WatchStatsPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsPolicyApiServer).WatchStatsPolicy(m, &statsPolicyApiWatchStatsPolicyServer{stream})
}

type StatsPolicyApi_WatchStatsPolicyServer interface {
	Send(*StatsPolicyEvent) error
	grpc.ServerStream
}

type statsPolicyApiWatchStatsPolicyServer struct {
	grpc.ServerStream
}

func (x *statsPolicyApiWatchStatsPolicyServer) Send(m *StatsPolicyEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _StatsPolicyApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tpmprotos.StatsPolicyApi",
	HandlerType: (*StatsPolicyApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchStatsPolicy",
			Handler:       _StatsPolicyApi_WatchStatsPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tpm.proto",
}

// Client API for FwlogPolicyApi service

type FwlogPolicyApiClient interface {
	ListFwlogPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*FwlogPolicyEventList, error)
	WatchFwlogPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (FwlogPolicyApi_WatchFwlogPolicyClient, error)
}

type fwlogPolicyApiClient struct {
	cc *grpc.ClientConn
}

func NewFwlogPolicyApiClient(cc *grpc.ClientConn) FwlogPolicyApiClient {
	return &fwlogPolicyApiClient{cc}
}

func (c *fwlogPolicyApiClient) ListFwlogPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*FwlogPolicyEventList, error) {
	out := new(FwlogPolicyEventList)
	err := grpc.Invoke(ctx, "/tpmprotos.FwlogPolicyApi/ListFwlogPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fwlogPolicyApiClient) WatchFwlogPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (FwlogPolicyApi_WatchFwlogPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FwlogPolicyApi_serviceDesc.Streams[0], c.cc, "/tpmprotos.FwlogPolicyApi/WatchFwlogPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &fwlogPolicyApiWatchFwlogPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FwlogPolicyApi_WatchFwlogPolicyClient interface {
	Recv() (*FwlogPolicyEvent, error)
	grpc.ClientStream
}

type fwlogPolicyApiWatchFwlogPolicyClient struct {
	grpc.ClientStream
}

func (x *fwlogPolicyApiWatchFwlogPolicyClient) Recv() (*FwlogPolicyEvent, error) {
	m := new(FwlogPolicyEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FwlogPolicyApi service

type FwlogPolicyApiServer interface {
	ListFwlogPolicy(context.Context, *api.ObjectMeta) (*FwlogPolicyEventList, error)
	WatchFwlogPolicy(*api.ObjectMeta, FwlogPolicyApi_WatchFwlogPolicyServer) error
}

func RegisterFwlogPolicyApiServer(s *grpc.Server, srv FwlogPolicyApiServer) {
	s.RegisterService(&_FwlogPolicyApi_serviceDesc, srv)
}

func _FwlogPolicyApi_ListFwlogPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FwlogPolicyApiServer).ListFwlogPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmprotos.FwlogPolicyApi/ListFwlogPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FwlogPolicyApiServer).ListFwlogPolicy(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _FwlogPolicyApi_WatchFwlogPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FwlogPolicyApiServer).WatchFwlogPolicy(m, &fwlogPolicyApiWatchFwlogPolicyServer{stream})
}

type FwlogPolicyApi_WatchFwlogPolicyServer interface {
	Send(*FwlogPolicyEvent) error
	grpc.ServerStream
}

type fwlogPolicyApiWatchFwlogPolicyServer struct {
	grpc.ServerStream
}

func (x *fwlogPolicyApiWatchFwlogPolicyServer) Send(m *FwlogPolicyEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _FwlogPolicyApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tpmprotos.FwlogPolicyApi",
	HandlerType: (*FwlogPolicyApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFwlogPolicy",
			Handler:    _FwlogPolicyApi_ListFwlogPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchFwlogPolicy",
			Handler:       _FwlogPolicyApi_WatchFwlogPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tpm.proto",
}

// Client API for FlowExportPolicyApi service

type FlowExportPolicyApiClient interface {
	ListFlowExportPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*FlowExportPolicyEventList, error)
	WatchFlowExportPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (FlowExportPolicyApi_WatchFlowExportPolicyClient, error)
}

type flowExportPolicyApiClient struct {
	cc *grpc.ClientConn
}

func NewFlowExportPolicyApiClient(cc *grpc.ClientConn) FlowExportPolicyApiClient {
	return &flowExportPolicyApiClient{cc}
}

func (c *flowExportPolicyApiClient) ListFlowExportPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*FlowExportPolicyEventList, error) {
	out := new(FlowExportPolicyEventList)
	err := grpc.Invoke(ctx, "/tpmprotos.FlowExportPolicyApi/ListFlowExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowExportPolicyApiClient) WatchFlowExportPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (FlowExportPolicyApi_WatchFlowExportPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FlowExportPolicyApi_serviceDesc.Streams[0], c.cc, "/tpmprotos.FlowExportPolicyApi/WatchFlowExportPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &flowExportPolicyApiWatchFlowExportPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlowExportPolicyApi_WatchFlowExportPolicyClient interface {
	Recv() (*FlowExportPolicyEvent, error)
	grpc.ClientStream
}

type flowExportPolicyApiWatchFlowExportPolicyClient struct {
	grpc.ClientStream
}

func (x *flowExportPolicyApiWatchFlowExportPolicyClient) Recv() (*FlowExportPolicyEvent, error) {
	m := new(FlowExportPolicyEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FlowExportPolicyApi service

type FlowExportPolicyApiServer interface {
	ListFlowExportPolicy(context.Context, *api.ObjectMeta) (*FlowExportPolicyEventList, error)
	WatchFlowExportPolicy(*api.ObjectMeta, FlowExportPolicyApi_WatchFlowExportPolicyServer) error
}

func RegisterFlowExportPolicyApiServer(s *grpc.Server, srv FlowExportPolicyApiServer) {
	s.RegisterService(&_FlowExportPolicyApi_serviceDesc, srv)
}

func _FlowExportPolicyApi_ListFlowExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowExportPolicyApiServer).ListFlowExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmprotos.FlowExportPolicyApi/ListFlowExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowExportPolicyApiServer).ListFlowExportPolicy(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowExportPolicyApi_WatchFlowExportPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlowExportPolicyApiServer).WatchFlowExportPolicy(m, &flowExportPolicyApiWatchFlowExportPolicyServer{stream})
}

type FlowExportPolicyApi_WatchFlowExportPolicyServer interface {
	Send(*FlowExportPolicyEvent) error
	grpc.ServerStream
}

type flowExportPolicyApiWatchFlowExportPolicyServer struct {
	grpc.ServerStream
}

func (x *flowExportPolicyApiWatchFlowExportPolicyServer) Send(m *FlowExportPolicyEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _FlowExportPolicyApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tpmprotos.FlowExportPolicyApi",
	HandlerType: (*FlowExportPolicyApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFlowExportPolicy",
			Handler:    _FlowExportPolicyApi_ListFlowExportPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchFlowExportPolicy",
			Handler:       _FlowExportPolicyApi_WatchFlowExportPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tpm.proto",
}

func (m *StatsPolicyEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsPolicyEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTpm(dAtA, i, uint64(m.EventType))
	}
	if m.Policy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTpm(dAtA, i, uint64(m.Policy.Size()))
		n1, err := m.Policy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *StatsPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Interval) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTpm(dAtA, i, uint64(len(m.Interval)))
		i += copy(dAtA[i:], m.Interval)
	}
	return i, nil
}

func (m *StatsPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StatsPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTpm(dAtA, i, uint64(m.TypeMeta.Size()))
	n2, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintTpm(dAtA, i, uint64(m.ObjectMeta.Size()))
	n3, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTpm(dAtA, i, uint64(m.Spec.Size()))
	n4, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintTpm(dAtA, i, uint64(m.Status.Size()))
	n5, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *FwlogPolicyEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogPolicyEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTpm(dAtA, i, uint64(m.EventType))
	}
	if m.Policy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTpm(dAtA, i, uint64(m.Policy.Size()))
		n6, err := m.Policy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *FwlogPolicyEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogPolicyEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EventList) > 0 {
		for _, msg := range m.EventList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTpm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FwlogPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTpm(dAtA, i, uint64(m.TypeMeta.Size()))
	n7, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x12
	i++
	i = encodeVarintTpm(dAtA, i, uint64(m.ObjectMeta.Size()))
	n8, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTpm(dAtA, i, uint64(m.Spec.Size()))
	n9, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x22
	i++
	i = encodeVarintTpm(dAtA, i, uint64(m.Status.Size()))
	n10, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}

func (m *FlowExportPolicyEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportPolicyEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTpm(dAtA, i, uint64(m.EventType))
	}
	if m.Policy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTpm(dAtA, i, uint64(m.Policy.Size()))
		n11, err := m.Policy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *FlowExportPolicyEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportPolicyEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EventList) > 0 {
		for _, msg := range m.EventList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTpm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FlowExportPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VrfName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTpm(dAtA, i, uint64(len(m.VrfName)))
		i += copy(dAtA[i:], m.VrfName)
	}
	if len(m.Interval) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTpm(dAtA, i, uint64(len(m.Interval)))
		i += copy(dAtA[i:], m.Interval)
	}
	if len(m.TemplateInterval) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTpm(dAtA, i, uint64(len(m.TemplateInterval)))
		i += copy(dAtA[i:], m.TemplateInterval)
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTpm(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if len(m.MatchRules) > 0 {
		for _, msg := range m.MatchRules {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTpm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Exports) > 0 {
		for _, msg := range m.Exports {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTpm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FlowExportPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *FlowExportPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTpm(dAtA, i, uint64(m.TypeMeta.Size()))
	n12, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x12
	i++
	i = encodeVarintTpm(dAtA, i, uint64(m.ObjectMeta.Size()))
	n13, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTpm(dAtA, i, uint64(m.Spec.Size()))
	n14, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x22
	i++
	i = encodeVarintTpm(dAtA, i, uint64(m.Status.Size()))
	n15, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	return i, nil
}

func encodeVarintTpm(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StatsPolicyEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovTpm(uint64(m.EventType))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovTpm(uint64(l))
	}
	return n
}

func (m *StatsPolicySpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Interval)
	if l > 0 {
		n += 1 + l + sovTpm(uint64(l))
	}
	return n
}

func (m *StatsPolicyStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StatsPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTpm(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTpm(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTpm(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTpm(uint64(l))
	return n
}

func (m *FwlogPolicyEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovTpm(uint64(m.EventType))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovTpm(uint64(l))
	}
	return n
}

func (m *FwlogPolicyEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.EventList) > 0 {
		for _, e := range m.EventList {
			l = e.Size()
			n += 1 + l + sovTpm(uint64(l))
		}
	}
	return n
}

func (m *FwlogPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTpm(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTpm(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTpm(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTpm(uint64(l))
	return n
}

func (m *FlowExportPolicyEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovTpm(uint64(m.EventType))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovTpm(uint64(l))
	}
	return n
}

func (m *FlowExportPolicyEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.EventList) > 0 {
		for _, e := range m.EventList {
			l = e.Size()
			n += 1 + l + sovTpm(uint64(l))
		}
	}
	return n
}

func (m *FlowExportPolicySpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.VrfName)
	if l > 0 {
		n += 1 + l + sovTpm(uint64(l))
	}
	l = len(m.Interval)
	if l > 0 {
		n += 1 + l + sovTpm(uint64(l))
	}
	l = len(m.TemplateInterval)
	if l > 0 {
		n += 1 + l + sovTpm(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovTpm(uint64(l))
	}
	if len(m.MatchRules) > 0 {
		for _, e := range m.MatchRules {
			l = e.Size()
			n += 1 + l + sovTpm(uint64(l))
		}
	}
	if len(m.Exports) > 0 {
		for _, e := range m.Exports {
			l = e.Size()
			n += 1 + l + sovTpm(uint64(l))
		}
	}
	return n
}

func (m *FlowExportPolicyStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *FlowExportPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTpm(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTpm(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTpm(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTpm(uint64(l))
	return n
}

func sovTpm(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTpm(x uint64) (n int) {
	return sovTpm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StatsPolicyEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: statsPolicyEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: statsPolicyEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &StatsPolicy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogPolicyEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogPolicyEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogPolicyEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &FwlogPolicy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogPolicyEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogPolicyEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogPolicyEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventList = append(m.EventList, &FwlogPolicyEvent{})
			if err := m.EventList[len(m.EventList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowExportPolicyEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportPolicyEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportPolicyEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &FlowExportPolicy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowExportPolicyEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportPolicyEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportPolicyEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventList = append(m.EventList, &FlowExportPolicyEvent{})
			if err := m.EventList[len(m.EventList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowExportPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchRules = append(m.MatchRules, tsproto.MatchRule{})
			if err := m.MatchRules[len(m.MatchRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exports = append(m.Exports, monitoring.ExportConfig{})
			if err := m.Exports[len(m.Exports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowExportPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowExportPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTpm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTpm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTpm
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTpm
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTpm(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTpm = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTpm   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tpm.proto", fileDescriptorTpm) }

var fileDescriptorTpm = []byte{
	// 996 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xaf, 0x93, 0x92, 0x6e, 0x27, 0x90, 0x66, 0xa7, 0x69, 0xe5, 0xa4, 0xbb, 0x75, 0x89, 0x40,
	0xea, 0xa1, 0xb1, 0x97, 0x70, 0x06, 0x84, 0xd9, 0x04, 0xad, 0xba, 0xfd, 0x43, 0x5b, 0x01, 0xd7,
	0xa9, 0x3b, 0xf1, 0xce, 0x62, 0xcf, 0x58, 0x99, 0x71, 0x4b, 0x84, 0xf6, 0xd4, 0x33, 0x77, 0xb8,
	0x71, 0x44, 0x70, 0xab, 0xf8, 0x02, 0xdc, 0xf6, 0xb8, 0x9f, 0x20, 0x42, 0xe5, 0x96, 0x4f, 0x81,
	0x66, 0xec, 0xa6, 0x13, 0x27, 0x4d, 0x82, 0xd0, 0xa2, 0xde, 0x66, 0x9e, 0xdf, 0xfb, 0xcd, 0x7b,
	0xbf, 0xf9, 0xcd, 0x7b, 0x06, 0xcb, 0x22, 0x0a, 0xed, 0xa8, 0xcb, 0x04, 0x83, 0x72, 0xa9, 0x56,
	0xbc, 0xf6, 0xc8, 0x67, 0xcc, 0x0f, 0xb0, 0x83, 0x22, 0xe2, 0x20, 0x4a, 0x99, 0x40, 0x82, 0x30,
	0xca, 0x13, 0xc7, 0x5a, 0xcb, 0x27, 0xe2, 0x45, 0x7c, 0x6a, 0x7b, 0x2c, 0x74, 0x22, 0x4c, 0x39,
	0xa2, 0x67, 0xcc, 0xe1, 0x17, 0xce, 0x39, 0xa6, 0xc4, 0xc3, 0x4e, 0x2c, 0x48, 0xc0, 0x65, 0xa8,
	0x8f, 0xa9, 0x1e, 0xed, 0x10, 0xea, 0x05, 0xf1, 0x19, 0xbe, 0x81, 0x69, 0x68, 0x30, 0x3e, 0xf3,
	0x99, 0xa3, 0xcc, 0xa7, 0x71, 0x47, 0xed, 0xd4, 0x46, 0xad, 0x52, 0xf7, 0x0f, 0xef, 0x38, 0x55,
	0xe6, 0x18, 0x62, 0x81, 0x52, 0xb7, 0x8f, 0xa6, 0xb8, 0x25, 0xd5, 0x39, 0x02, 0x07, 0x38, 0xc4,
	0xa2, 0xdb, 0x4b, 0x43, 0xde, 0xc5, 0xdf, 0x47, 0xac, 0x2b, 0xd2, 0xdd, 0x67, 0x77, 0x00, 0x50,
	0xe2, 0x39, 0xc8, 0xc7, 0x54, 0x0c, 0x61, 0x78, 0x92, 0x63, 0x88, 0x84, 0xf7, 0xa2, 0x1b, 0x07,
	0x38, 0x01, 0xa8, 0xff, 0x62, 0x80, 0x32, 0x17, 0x48, 0xf0, 0x43, 0x16, 0x10, 0xaf, 0xd7, 0x3a,
	0xc7, 0x54, 0xc0, 0x36, 0x58, 0x56, 0x8b, 0x93, 0x5e, 0x84, 0x4d, 0x63, 0xcb, 0xd8, 0x2e, 0x35,
	0x4b, 0x36, 0x8a, 0x88, 0x3d, 0xb4, 0xba, 0xe6, 0xa0, 0x6f, 0x55, 0xb0, 0xdc, 0x36, 0x44, 0x2f,
	0xc2, 0x3b, 0x2c, 0x24, 0x02, 0x87, 0x91, 0xe8, 0x1d, 0xdd, 0x86, 0xc2, 0xa7, 0xa0, 0x90, 0xc0,
	0x9a, 0xb9, 0x2d, 0x63, 0xbb, 0xd8, 0x5c, 0xb7, 0x87, 0xb7, 0x66, 0x1f, 0xdf, 0x1e, 0xea, 0x56,
	0x06, 0x7d, 0xab, 0x1c, 0xa9, 0xb5, 0x06, 0x94, 0xc6, 0xd6, 0x5b, 0x60, 0x45, 0x73, 0x3e, 0x8e,
	0xb0, 0x07, 0x9b, 0xe0, 0xc1, 0x33, 0x2a, 0x70, 0xf7, 0x1c, 0x05, 0x2a, 0xbf, 0x65, 0x77, 0x7d,
	0xd0, 0xb7, 0x20, 0x49, 0x6d, 0x1a, 0xc8, 0xd0, 0xaf, 0xbe, 0x0a, 0x1e, 0xea, 0x30, 0x02, 0x89,
	0x98, 0xd7, 0xaf, 0x72, 0xa0, 0xa8, 0x59, 0xe1, 0xa7, 0xe0, 0x81, 0xcc, 0x7c, 0x0f, 0x0b, 0xa4,
	0x80, 0x8b, 0xcd, 0xf7, 0x54, 0xe1, 0x37, 0x46, 0x77, 0xf5, 0x75, 0xdf, 0x5a, 0x78, 0xd3, 0xb7,
	0x8c, 0x41, 0xdf, 0x5a, 0xda, 0x21, 0x34, 0x20, 0x14, 0x1f, 0x0d, 0x63, 0xe0, 0x2e, 0x00, 0x07,
	0xa7, 0x2f, 0xb1, 0x27, 0x14, 0x42, 0x52, 0xf5, 0x8a, 0x42, 0xb8, 0x35, 0xbb, 0x35, 0x0d, 0xa3,
	0x24, 0xd5, 0xa0, 0xe5, 0xab, 0x85, 0xc3, 0x36, 0x58, 0x94, 0xd5, 0x9a, 0x79, 0x05, 0x53, 0x9b,
	0x4c, 0x9e, 0xf4, 0x70, 0xd7, 0x25, 0xa2, 0x44, 0xe3, 0x11, 0xf6, 0x34, 0x34, 0x15, 0x0f, 0xf7,
	0x41, 0x21, 0x29, 0xd7, 0x5c, 0x54, 0x48, 0x8f, 0xee, 0x40, 0x52, 0x3e, 0xae, 0x99, 0x62, 0x29,
	0x59, 0xc4, 0x5c, 0xbf, 0x90, 0x94, 0x34, 0xa9, 0x99, 0xf6, 0x45, 0xc0, 0xfc, 0xff, 0x5b, 0x33,
	0xda, 0xa1, 0x33, 0x34, 0xf3, 0x1d, 0xa8, 0x64, 0x33, 0x7c, 0x4e, 0xb8, 0x80, 0xc7, 0x69, 0x96,
	0x72, 0x63, 0x1a, 0x5b, 0xf9, 0xed, 0x62, 0x73, 0x63, 0xf2, 0x01, 0xca, 0x4d, 0x4f, 0x39, 0x20,
	0x5c, 0x8c, 0xa5, 0x2c, 0x71, 0xea, 0x7f, 0xe4, 0x40, 0x51, 0x8b, 0xbc, 0x5f, 0x22, 0xfa, 0x72,
	0x44, 0x44, 0x1b, 0x76, 0xc8, 0x28, 0x11, 0xac, 0x4b, 0xa8, 0xaf, 0x57, 0x3b, 0x87, 0x8a, 0x0e,
	0x32, 0x2a, 0x7a, 0x7c, 0x17, 0xd4, 0xbc, 0x32, 0xfa, 0xcd, 0x00, 0x6b, 0xed, 0x80, 0x5d, 0xb4,
	0x54, 0x43, 0x7b, 0x1b, 0x5a, 0x7a, 0x96, 0xd1, 0xd2, 0xc8, 0x55, 0x67, 0x4e, 0x9e, 0x21, 0xa8,
	0x18, 0x54, 0x27, 0xe6, 0xaa, 0x54, 0xf5, 0xed, 0xb8, 0xaa, 0xb6, 0xa6, 0x1c, 0xf5, 0x2f, 0xa4,
	0xf5, 0x73, 0x1e, 0x54, 0xb2, 0xe1, 0xea, 0x36, 0x9e, 0x80, 0xa5, 0xaf, 0xbb, 0x9d, 0x7d, 0x14,
	0x62, 0xbd, 0x01, 0x9e, 0x77, 0x3b, 0x0d, 0x8a, 0x42, 0x9d, 0x8e, 0x1b, 0xb7, 0x91, 0x9e, 0x99,
	0x9b, 0xaf, 0x67, 0xc2, 0x5d, 0x50, 0x3e, 0xc1, 0x61, 0x14, 0x20, 0x81, 0x87, 0xb1, 0x79, 0x15,
	0x6b, 0x0d, 0xfa, 0xd6, 0x86, 0x48, 0xbf, 0x35, 0x26, 0x80, 0x8c, 0x05, 0xc2, 0x1d, 0x50, 0x68,
	0xb3, 0x6e, 0x88, 0x84, 0x12, 0xd0, 0x72, 0x42, 0x78, 0x47, 0x59, 0x74, 0xc2, 0x13, 0x1f, 0xf8,
	0x15, 0x00, 0x7b, 0x72, 0x56, 0x1d, 0xc5, 0x01, 0xe6, 0xe6, 0x3b, 0x8a, 0x54, 0x68, 0xa7, 0x63,
	0xcc, 0x1e, 0x7e, 0x72, 0x1f, 0xa7, 0x3a, 0x5b, 0x53, 0x93, 0xad, 0x21, 0x47, 0x9b, 0x2e, 0x36,
	0x0d, 0x04, 0xee, 0x81, 0xa5, 0x84, 0x47, 0x6e, 0x16, 0x14, 0x9e, 0xa9, 0x4b, 0x38, 0xf9, 0xf4,
	0x05, 0xa3, 0x1d, 0xe2, 0xbb, 0xd5, 0x14, 0xf5, 0x61, 0x32, 0x6d, 0x75, 0xc4, 0x1b, 0x8c, 0xba,
	0x09, 0xd6, 0xc7, 0xae, 0x26, 0x51, 0xf6, 0x9f, 0x39, 0x50, 0xce, 0x7e, 0xba, 0x5f, 0x5d, 0x61,
	0x77, 0xa4, 0x2b, 0x58, 0x53, 0xc4, 0x3a, 0x47, 0x67, 0x38, 0xce, 0x74, 0x86, 0xf7, 0xa7, 0xc1,
	0xcd, 0xd9, 0x1d, 0x9a, 0xbf, 0x1a, 0xa0, 0xa4, 0x0d, 0xa7, 0xcf, 0x23, 0x02, 0x9f, 0x82, 0xf2,
	0x37, 0xf2, 0x36, 0xf5, 0x81, 0x9d, 0x65, 0xa0, 0xa6, 0xbf, 0xf1, 0xec, 0x8f, 0x4d, 0x7d, 0xe1,
	0x89, 0x51, 0x3b, 0xbc, 0xba, 0xac, 0x3e, 0x1f, 0x99, 0xfa, 0xb5, 0x4f, 0x9c, 0x1f, 0x6e, 0x11,
	0xec, 0x13, 0x4c, 0x11, 0x15, 0xaf, 0x46, 0x6c, 0xf2, 0x05, 0xf1, 0x08, 0x79, 0x78, 0xdc, 0xfc,
	0xaa, 0xf9, 0x63, 0x0e, 0x94, 0xb4, 0x06, 0x28, 0x53, 0x6d, 0x81, 0x15, 0xf9, 0x7e, 0xf5, 0xa9,
	0x30, 0x96, 0xa9, 0x35, 0x65, 0xf0, 0xa8, 0xc7, 0xbf, 0x30, 0xac, 0x78, 0x2a, 0xce, 0xb4, 0x01,
	0xa6, 0x2a, 0xa6, 0x57, 0x97, 0xd5, 0x97, 0xa3, 0x23, 0x2a, 0xef, 0x63, 0x01, 0x17, 0x65, 0xdf,
	0x81, 0x8b, 0x11, 0xe3, 0x02, 0x16, 0xce, 0x70, 0x80, 0x05, 0x86, 0xf9, 0x28, 0x16, 0xff, 0x95,
	0x8f, 0xdf, 0x73, 0x60, 0x35, 0x7b, 0xef, 0x92, 0x94, 0x03, 0x50, 0x51, 0xa4, 0x64, 0x5f, 0xc6,
	0x58, 0x45, 0x1f, 0xcc, 0x6a, 0x9e, 0x29, 0x3d, 0xfb, 0x60, 0x2d, 0xa1, 0x67, 0x26, 0xe2, 0xcc,
	0x76, 0xac, 0x88, 0xe2, 0x57, 0x97, 0x55, 0x36, 0xe1, 0xe9, 0xbe, 0x4d, 0xb6, 0xdc, 0xf2, 0xeb,
	0xeb, 0x4d, 0xe3, 0xcd, 0xf5, 0xa6, 0xf1, 0xd7, 0xf5, 0xa6, 0xf1, 0xd3, 0xdf, 0x9b, 0x0b, 0x87,
	0xc6, 0x69, 0x41, 0xa5, 0xfa, 0xf1, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x48, 0xb3, 0xd8, 0xfc,
	0xf1, 0x0c, 0x00, 0x00,
}
