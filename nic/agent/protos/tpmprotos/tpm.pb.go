// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tpm.proto

/*
	Package tpmprotos is a generated protocol buffer package.

	It is generated from these files:
		tpm.proto

	It has these top-level messages:
		FwlogPolicyEvent
		FwlogPolicyEventList
		FwlogPolicy
*/
package tpmprotos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import monitoring "github.com/pensando/sw/api/generated/monitoring"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FwlogPolicyEvent struct {
	// event type create/update/delete
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	// fwlog policy
	Policy *FwlogPolicy `protobuf:"bytes,2,opt,name=Policy" json:"policy,omitempty"`
}

func (m *FwlogPolicyEvent) Reset()                    { *m = FwlogPolicyEvent{} }
func (m *FwlogPolicyEvent) String() string            { return proto.CompactTextString(m) }
func (*FwlogPolicyEvent) ProtoMessage()               {}
func (*FwlogPolicyEvent) Descriptor() ([]byte, []int) { return fileDescriptorTpm, []int{0} }

func (m *FwlogPolicyEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *FwlogPolicyEvent) GetPolicy() *FwlogPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type FwlogPolicyEventList struct {
	EventList []*FwlogPolicyEvent `protobuf:"bytes,1,rep,name=EventList" json:"event-list,omitempty"`
}

func (m *FwlogPolicyEventList) Reset()                    { *m = FwlogPolicyEventList{} }
func (m *FwlogPolicyEventList) String() string            { return proto.CompactTextString(m) }
func (*FwlogPolicyEventList) ProtoMessage()               {}
func (*FwlogPolicyEventList) Descriptor() ([]byte, []int) { return fileDescriptorTpm, []int{1} }

func (m *FwlogPolicyEventList) GetEventList() []*FwlogPolicyEvent {
	if m != nil {
		return m.EventList
	}
	return nil
}

// FwlogPolicy firewall log Policy object
type FwlogPolicy struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           monitoring.FwlogPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         monitoring.FwlogPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *FwlogPolicy) Reset()                    { *m = FwlogPolicy{} }
func (m *FwlogPolicy) String() string            { return proto.CompactTextString(m) }
func (*FwlogPolicy) ProtoMessage()               {}
func (*FwlogPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTpm, []int{2} }

func (m *FwlogPolicy) GetSpec() monitoring.FwlogPolicySpec {
	if m != nil {
		return m.Spec
	}
	return monitoring.FwlogPolicySpec{}
}

func (m *FwlogPolicy) GetStatus() monitoring.FwlogPolicyStatus {
	if m != nil {
		return m.Status
	}
	return monitoring.FwlogPolicyStatus{}
}

func init() {
	proto.RegisterType((*FwlogPolicyEvent)(nil), "tpmprotos.FwlogPolicyEvent")
	proto.RegisterType((*FwlogPolicyEventList)(nil), "tpmprotos.FwlogPolicyEventList")
	proto.RegisterType((*FwlogPolicy)(nil), "tpmprotos.FwlogPolicy")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FwlogPolicyApiV1 service

type FwlogPolicyApiV1Client interface {
	ListFwlogPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*FwlogPolicyEventList, error)
	WatchFwlogPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (FwlogPolicyApiV1_WatchFwlogPolicyClient, error)
}

type fwlogPolicyApiV1Client struct {
	cc *grpc.ClientConn
}

func NewFwlogPolicyApiV1Client(cc *grpc.ClientConn) FwlogPolicyApiV1Client {
	return &fwlogPolicyApiV1Client{cc}
}

func (c *fwlogPolicyApiV1Client) ListFwlogPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*FwlogPolicyEventList, error) {
	out := new(FwlogPolicyEventList)
	err := grpc.Invoke(ctx, "/tpmprotos.FwlogPolicyApiV1/ListFwlogPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fwlogPolicyApiV1Client) WatchFwlogPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (FwlogPolicyApiV1_WatchFwlogPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FwlogPolicyApiV1_serviceDesc.Streams[0], c.cc, "/tpmprotos.FwlogPolicyApiV1/WatchFwlogPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &fwlogPolicyApiV1WatchFwlogPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FwlogPolicyApiV1_WatchFwlogPolicyClient interface {
	Recv() (*FwlogPolicyEvent, error)
	grpc.ClientStream
}

type fwlogPolicyApiV1WatchFwlogPolicyClient struct {
	grpc.ClientStream
}

func (x *fwlogPolicyApiV1WatchFwlogPolicyClient) Recv() (*FwlogPolicyEvent, error) {
	m := new(FwlogPolicyEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FwlogPolicyApiV1 service

type FwlogPolicyApiV1Server interface {
	ListFwlogPolicy(context.Context, *api.ObjectMeta) (*FwlogPolicyEventList, error)
	WatchFwlogPolicy(*api.ObjectMeta, FwlogPolicyApiV1_WatchFwlogPolicyServer) error
}

func RegisterFwlogPolicyApiV1Server(s *grpc.Server, srv FwlogPolicyApiV1Server) {
	s.RegisterService(&_FwlogPolicyApiV1_serviceDesc, srv)
}

func _FwlogPolicyApiV1_ListFwlogPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FwlogPolicyApiV1Server).ListFwlogPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmprotos.FwlogPolicyApiV1/ListFwlogPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FwlogPolicyApiV1Server).ListFwlogPolicy(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _FwlogPolicyApiV1_WatchFwlogPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FwlogPolicyApiV1Server).WatchFwlogPolicy(m, &fwlogPolicyApiV1WatchFwlogPolicyServer{stream})
}

type FwlogPolicyApiV1_WatchFwlogPolicyServer interface {
	Send(*FwlogPolicyEvent) error
	grpc.ServerStream
}

type fwlogPolicyApiV1WatchFwlogPolicyServer struct {
	grpc.ServerStream
}

func (x *fwlogPolicyApiV1WatchFwlogPolicyServer) Send(m *FwlogPolicyEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _FwlogPolicyApiV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tpmprotos.FwlogPolicyApiV1",
	HandlerType: (*FwlogPolicyApiV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFwlogPolicy",
			Handler:    _FwlogPolicyApiV1_ListFwlogPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchFwlogPolicy",
			Handler:       _FwlogPolicyApiV1_WatchFwlogPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tpm.proto",
}

func (m *FwlogPolicyEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogPolicyEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTpm(dAtA, i, uint64(m.EventType))
	}
	if m.Policy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTpm(dAtA, i, uint64(m.Policy.Size()))
		n1, err := m.Policy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *FwlogPolicyEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogPolicyEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EventList) > 0 {
		for _, msg := range m.EventList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTpm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FwlogPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTpm(dAtA, i, uint64(m.TypeMeta.Size()))
	n2, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintTpm(dAtA, i, uint64(m.ObjectMeta.Size()))
	n3, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTpm(dAtA, i, uint64(m.Spec.Size()))
	n4, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintTpm(dAtA, i, uint64(m.Status.Size()))
	n5, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func encodeVarintTpm(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FwlogPolicyEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovTpm(uint64(m.EventType))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovTpm(uint64(l))
	}
	return n
}

func (m *FwlogPolicyEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.EventList) > 0 {
		for _, e := range m.EventList {
			l = e.Size()
			n += 1 + l + sovTpm(uint64(l))
		}
	}
	return n
}

func (m *FwlogPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTpm(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTpm(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTpm(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTpm(uint64(l))
	return n
}

func sovTpm(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTpm(x uint64) (n int) {
	return sovTpm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FwlogPolicyEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogPolicyEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogPolicyEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &FwlogPolicy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogPolicyEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogPolicyEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogPolicyEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventList = append(m.EventList, &FwlogPolicyEvent{})
			if err := m.EventList[len(m.EventList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTpm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTpm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTpm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTpm
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTpm
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTpm(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTpm = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTpm   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tpm.proto", fileDescriptorTpm) }

var fileDescriptorTpm = []byte{
	// 569 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcd, 0x4e, 0xdb, 0x4c,
	0x14, 0x86, 0x63, 0x12, 0xe5, 0xfb, 0x98, 0xa8, 0x10, 0x4d, 0x11, 0x72, 0x4d, 0x1b, 0xa3, 0x48,
	0x95, 0x58, 0x80, 0x5d, 0xd2, 0x75, 0x2b, 0xd5, 0x02, 0xba, 0xe8, 0x0f, 0x08, 0x50, 0xbb, 0x9e,
	0x98, 0x53, 0x33, 0xd4, 0x9e, 0x19, 0x31, 0xc7, 0xa0, 0xa8, 0x62, 0xd5, 0x0b, 0xe8, 0xb6, 0xcb,
	0x5e, 0x43, 0xd5, 0x8b, 0x60, 0xc9, 0x15, 0x44, 0x15, 0xdd, 0x71, 0x15, 0xd5, 0x8c, 0x03, 0x99,
	0x40, 0xc9, 0xee, 0x9c, 0xa3, 0xf7, 0x7d, 0xe6, 0xfc, 0x0c, 0x99, 0x45, 0x55, 0x44, 0xea, 0x58,
	0xa2, 0xa4, 0x26, 0xb4, 0x91, 0x0e, 0x1e, 0x67, 0x52, 0x66, 0x39, 0xc4, 0x4c, 0xf1, 0x98, 0x09,
	0x21, 0x91, 0x21, 0x97, 0x42, 0x57, 0xc2, 0x60, 0x33, 0xe3, 0x78, 0x58, 0xf6, 0xa3, 0x54, 0x16,
	0xb1, 0x02, 0xa1, 0x99, 0x38, 0x90, 0xb1, 0x3e, 0x8d, 0x4f, 0x40, 0xf0, 0x14, 0xe2, 0x12, 0x79,
	0xae, 0x8d, 0x35, 0x03, 0xe1, 0xba, 0x63, 0x2e, 0xd2, 0xbc, 0x3c, 0x80, 0x6b, 0xcc, 0x9a, 0x83,
	0xc9, 0x64, 0x26, 0x63, 0x5b, 0xee, 0x97, 0x9f, 0x6c, 0x66, 0x13, 0x1b, 0x8d, 0xe4, 0x4f, 0xef,
	0x79, 0xd5, 0xf4, 0x58, 0x00, 0xb2, 0x91, 0x6c, 0x7d, 0x8a, 0xac, 0x9a, 0x2e, 0x46, 0xc8, 0xa1,
	0x00, 0x3c, 0x1e, 0x54, 0x96, 0xee, 0x0f, 0x8f, 0xb4, 0xb7, 0x4e, 0x73, 0x99, 0xed, 0xc8, 0x9c,
	0xa7, 0x83, 0xcd, 0x13, 0x10, 0x48, 0xb7, 0xc8, 0xac, 0x0d, 0xf6, 0x07, 0x0a, 0x7c, 0x6f, 0xd9,
	0x5b, 0x99, 0xeb, 0xcd, 0x45, 0x4c, 0xf1, 0xe8, 0xa6, 0x9a, 0xf8, 0x57, 0xc3, 0x70, 0x01, 0x4c,
	0xba, 0x86, 0x03, 0x05, 0xab, 0xb2, 0xe0, 0x08, 0x85, 0xc2, 0xc1, 0xee, 0xd8, 0x4a, 0x37, 0x48,
	0xb3, 0xc2, 0xfa, 0x33, 0xcb, 0xde, 0x4a, 0xab, 0xb7, 0x18, 0xdd, 0xac, 0x39, 0x72, 0x1e, 0x4d,
	0x16, 0xae, 0x86, 0x61, 0x5b, 0xd9, 0xd8, 0x01, 0x8d, 0xbc, 0xdd, 0xcf, 0x64, 0xe1, 0x76, 0x87,
	0x6f, 0xb9, 0x46, 0xba, 0x37, 0xea, 0xd2, 0x24, 0xbe, 0xb7, 0x5c, 0x5f, 0x69, 0xf5, 0x96, 0xfe,
	0xfd, 0x80, 0x95, 0xb9, 0x2d, 0xe7, 0x5c, 0xe3, 0x9d, 0x96, 0x0d, 0xa7, 0xfb, 0x6b, 0x86, 0xb4,
	0x1c, 0x27, 0x7d, 0x49, 0xfe, 0x37, 0xa3, 0xbc, 0x03, 0x64, 0x76, 0x13, 0xad, 0xde, 0x03, 0xbb,
	0x89, 0xeb, 0x62, 0xf2, 0xf0, 0x7c, 0x18, 0xd6, 0x2e, 0x86, 0xa1, 0x77, 0x35, 0x0c, 0xff, 0x5b,
	0xe5, 0x22, 0xe7, 0x02, 0x76, 0x6f, 0x3c, 0xf4, 0x0d, 0x21, 0xdb, 0xfd, 0x23, 0x48, 0xd1, 0x12,
	0xaa, 0x35, 0xcc, 0x5b, 0xc2, 0xb8, 0x9c, 0x04, 0x0e, 0x63, 0xce, 0xdc, 0xd3, 0xe9, 0xcd, 0xb1,
	0xd3, 0xd7, 0xa4, 0xb1, 0xa7, 0x20, 0xf5, 0xeb, 0x16, 0xb3, 0x14, 0x15, 0x52, 0x70, 0x94, 0xc7,
	0x5c, 0x64, 0xee, 0xb4, 0x46, 0x92, 0x2c, 0x1a, 0xa4, 0xc1, 0x69, 0x05, 0xa9, 0x83, 0xb3, 0x00,
	0xba, 0x4d, 0x9a, 0x7b, 0xc8, 0xb0, 0xd4, 0x7e, 0xc3, 0xa2, 0x9e, 0xdc, 0x87, 0xb2, 0xa2, 0xc4,
	0x1f, 0xc1, 0xda, 0xda, 0xe6, 0xee, 0x8d, 0x2a, 0x45, 0xef, 0xdb, 0xcc, 0xc4, 0x37, 0x7a, 0xa5,
	0xf8, 0x87, 0x75, 0xba, 0x49, 0xe6, 0xcd, 0x4e, 0xdd, 0x75, 0xde, 0x1e, 0x3d, 0x08, 0xa7, 0x5c,
	0xcc, 0x1e, 0xa4, 0x46, 0x37, 0x48, 0xfb, 0x23, 0xc3, 0xf4, 0x70, 0x2a, 0x67, 0xda, 0xe5, 0xbb,
	0xb5, 0x67, 0x5e, 0x20, 0x7e, 0x7e, 0x7d, 0x74, 0x34, 0x79, 0xdb, 0x7a, 0x06, 0x48, 0x1b, 0xe6,
	0x2f, 0xd0, 0x86, 0x92, 0x1a, 0x69, 0xf3, 0x00, 0x72, 0x40, 0xa0, 0x75, 0x55, 0x62, 0xf0, 0x22,
	0xfe, 0x32, 0xe6, 0x47, 0xfb, 0x20, 0x98, 0xc0, 0xb3, 0x89, 0xda, 0x7b, 0x56, 0x80, 0x56, 0x2c,
	0x85, 0xbb, 0xe5, 0xb3, 0xa4, 0x7d, 0x7e, 0xd9, 0xf1, 0x2e, 0x2e, 0x3b, 0xde, 0xef, 0xcb, 0x8e,
	0xf7, 0xfd, 0x4f, 0xa7, 0xb6, 0xe3, 0xf5, 0x9b, 0xb6, 0xc1, 0xe7, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x0f, 0x90, 0x69, 0x1d, 0x79, 0x04, 0x00, 0x00,
}
