// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package nimbus is a auto generated package.
Input file: profile.proto
*/

package nimbus

import (
	"context"
	"sync"
	"time"

	protoTypes "github.com/gogo/protobuf/types"
	"github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/dscagent/types"
	"github.com/pensando/sw/nic/agent/protos/netproto"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pkg/errors"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/connectivity"
	"google.golang.org/grpc/status"
)

type ProfileReactor interface {
	HandleProfile(oper types.Operation, profileObj netproto.Profile) ([]netproto.Profile, error)
	GetWatchOptions(cts context.Context, kind string) api.ListWatchOptions
}
type ProfileOStream struct {
	sync.Mutex
	stream netproto.ProfileApiV1_ProfileOperUpdateClient
}

// WatchProfiles runs Profile watcher loop
func (client *NimbusClient) WatchProfiles(ctx context.Context, reactor ProfileReactor) {
	// setup wait group
	client.waitGrp.Add(1)
	defer client.waitGrp.Done()
	client.debugStats.AddInt("ActiveProfileWatch", 1)

	// make sure rpc client is good
	if client.rpcClient == nil || client.rpcClient.ClientConn == nil || client.rpcClient.ClientConn.GetState() != connectivity.Ready {
		log.Errorf("RPC client is disconnected. Exiting watch")
		return
	}

	// start the watch
	watchOptions := reactor.GetWatchOptions(ctx, "Profile")
	profileRPCClient := netproto.NewProfileApiV1Client(client.rpcClient.ClientConn)
	stream, err := profileRPCClient.WatchProfiles(ctx, &watchOptions)
	if err != nil {
		log.Errorf("Error watching Profile. Err: %v", err)
		return
	}

	// start oper update stream
	opStream, err := profileRPCClient.ProfileOperUpdate(ctx)
	if err != nil {
		log.Errorf("Error starting Profile oper updates. Err: %v", err)
		return
	}

	ostream := &ProfileOStream{stream: opStream}

	// get a list of objects
	objList, err := profileRPCClient.ListProfiles(ctx, &watchOptions)
	if err != nil {
		st, ok := status.FromError(err)
		if !ok || st.Code() == codes.Unavailable {
			log.Errorf("Error getting Profile list. Err: %v", err)
			return
		}
	} else {
		// perform a diff of the states
		client.diffProfiles(objList, reactor, ostream)
	}

	// start grpc stream recv
	recvCh := make(chan *netproto.ProfileEvent, evChanLength)
	go client.watchProfileRecvLoop(stream, recvCh)

	// loop till the end
	for {
		evtWork := func(evt *netproto.ProfileEvent) {
			client.debugStats.AddInt("ProfileWatchEvents", 1)
			log.Infof("Ctrlerif: agent %s got Profile watch event: Type: {%+v} Profile:{%+v}", client.clientName, evt.EventType, evt.Profile.ObjectMeta)
			client.lockObject(evt.Profile.GetObjectKind(), evt.Profile.ObjectMeta)
			go client.processProfileEvent(*evt, reactor, ostream)
			//Give it some time to increment waitgrp
			time.Sleep(100 * time.Microsecond)
		}
		//Give priority to evnt work.
		select {
		case evt, ok := <-recvCh:
			if !ok {
				log.Warnf("Profile Watch channel closed. Exisint ProfileWatch")
				return
			}
			evtWork(evt)
		// periodic resync (Disabling as we have aggregate watch support)
		case <-time.After(resyncInterval):
			//Give priority to evt work
			//Wait for batch interval for inflight work
			time.Sleep(5 * DefaultWatchHoldInterval)
			select {
			case evt, ok := <-recvCh:
				if !ok {
					log.Warnf("Profile Watch channel closed. Exisint ProfileWatch")
					return
				}
				evtWork(evt)
				continue
			default:
			}
			// get a list of objects
			objList, err := profileRPCClient.ListProfiles(ctx, &watchOptions)
			if err != nil {
				st, ok := status.FromError(err)
				if !ok || st.Code() == codes.Unavailable {
					log.Errorf("Error getting Profile list. Err: %v", err)
					return
				}
			} else {
				client.debugStats.AddInt("ProfileWatchResyncs", 1)
				// perform a diff of the states
				client.diffProfiles(objList, reactor, ostream)
			}
		}
	}
}

// watchProfileRecvLoop receives from stream and write it to a channel
func (client *NimbusClient) watchProfileRecvLoop(stream netproto.ProfileApiV1_WatchProfilesClient, recvch chan<- *netproto.ProfileEvent) {
	defer close(recvch)
	client.waitGrp.Add(1)
	defer client.waitGrp.Done()

	// loop till the end
	for {
		// receive from stream
		objList, err := stream.Recv()
		if err != nil {
			log.Errorf("Error receiving from watch channel. Exiting Profile watch. Err: %v", err)
			return
		}
		for _, evt := range objList.ProfileEvents {
			recvch <- evt
		}
	}
}

// diffProfile diffs local state with controller state
// FIXME: this is not handling deletes today
func (client *NimbusClient) diffProfiles(objList *netproto.ProfileList, reactor ProfileReactor, ostream *ProfileOStream) {
	// build a map of objects
	objmap := make(map[string]*netproto.Profile)
	for _, obj := range objList.Profiles {
		key := obj.ObjectMeta.GetKey()
		objmap[key] = obj
	}

	// see if we need to delete any locally found object
	o := netproto.Profile{
		TypeMeta: api.TypeMeta{Kind: "Profile"},
	}

	localObjs, err := reactor.HandleProfile(types.List, o)
	if err != nil {
		log.Error(errors.Wrapf(types.ErrNimbusHandling, "Op: %s | Kind: Profile | Err: %v", types.Operation(types.List), err))
	}
	for _, lobj := range localObjs {
		ctby, ok := lobj.ObjectMeta.Labels["CreatedBy"]
		if ok && ctby == "Venice" {
			key := lobj.ObjectMeta.GetKey()
			if _, ok := objmap[key]; !ok {
				evt := netproto.ProfileEvent{
					EventType: api.EventType_DeleteEvent,
					Profile:   lobj,
				}
				log.Infof("diffProfiles(): Deleting object %+v", lobj.ObjectMeta)
				client.lockObject(evt.Profile.GetObjectKind(), evt.Profile.ObjectMeta)
				client.processProfileEvent(evt, reactor, ostream)
			}
		} else {
			log.Infof("Not deleting non-venice object %+v", lobj.ObjectMeta)
		}
	}

	// add/update all new objects
	for _, obj := range objList.Profiles {
		evt := netproto.ProfileEvent{
			EventType: api.EventType_UpdateEvent,
			Profile:   *obj,
		}
		client.lockObject(evt.Profile.GetObjectKind(), evt.Profile.ObjectMeta)
		client.processProfileEvent(evt, reactor, ostream)
	}
}

// processProfileEvent handles Profile event
func (client *NimbusClient) processProfileEvent(evt netproto.ProfileEvent, reactor ProfileReactor, ostream *ProfileOStream) error {
	var err error
	client.waitGrp.Add(1)
	defer client.waitGrp.Done()

	// add venice label to the object
	evt.Profile.ObjectMeta.Labels = make(map[string]string)
	evt.Profile.ObjectMeta.Labels["CreatedBy"] = "Venice"

	log.Infof("Profile: processProfileEvent | Evt: %+v", evt)
	// unlock the object once we are done
	defer client.unlockObject(evt.Profile.GetObjectKind(), evt.Profile.ObjectMeta)

	// retry till successful
	for iter := 0; iter < maxOpretry; iter++ {
		switch evt.EventType {
		case api.EventType_CreateEvent:
			fallthrough
		case api.EventType_UpdateEvent:
			_, err = reactor.HandleProfile(types.Get, evt.Profile)
			if err != nil {
				// create the Profile
				_, err = reactor.HandleProfile(types.Create, evt.Profile)
				if err != nil {
					log.Error(errors.Wrapf(types.ErrNimbusHandling, "Op: %s | Kind: Profile | Key: %s | Err: %v", types.Operation(types.Create), evt.Profile.GetKey(), err))
					client.debugStats.AddInt("CreateProfileError", 1)
				} else {
					client.debugStats.AddInt("CreateProfile", 1)
				}
			} else {
				// update the Profile
				_, err = reactor.HandleProfile(types.Update, evt.Profile)
				if err != nil {
					log.Error(errors.Wrapf(types.ErrNimbusHandling, "Op: %s | Kind: Profile | Key: %s | Err: %v", types.Operation(types.Update), evt.Profile.GetKey(), err))
					client.debugStats.AddInt("UpdateProfileError", 1)
				} else {
					client.debugStats.AddInt("UpdateProfile", 1)
				}
			}

		case api.EventType_DeleteEvent:
			// update the Profile
			_, err = reactor.HandleProfile(types.Delete, evt.Profile)
			if err != nil {
				log.Error(errors.Wrapf(types.ErrNimbusHandling, "Op: %s | Kind: Profile | Key: %s | Err: %v", types.Operation(types.Delete), evt.Profile.GetKey(), err))
				client.debugStats.AddInt("DeleteProfileError", 1)
			} else {
				client.debugStats.AddInt("DeleteProfile", 1)
			}
		}

		if ostream == nil {
			return err
		}
		// send oper status and return if there is no error
		if err == nil {
			robj := netproto.ProfileEvent{
				EventType: evt.EventType,
				Profile: netproto.Profile{
					TypeMeta:   evt.Profile.TypeMeta,
					ObjectMeta: evt.Profile.ObjectMeta,
					Status:     evt.Profile.Status,
				},
			}

			// send oper status
			ostream.Lock()
			modificationTime, _ := protoTypes.TimestampProto(time.Now())
			robj.Profile.ObjectMeta.ModTime = api.Timestamp{Timestamp: *modificationTime}
			err := ostream.stream.Send(&robj)
			if err != nil {
				log.Errorf("failed to send Profile oper Status, %s", err)
				client.debugStats.AddInt("ProfileOperSendError", 1)
			} else {
				client.debugStats.AddInt("ProfileOperSent", 1)
			}
			ostream.Unlock()

			return err
		}

		// else, retry after some time, with backoff
		time.Sleep(time.Second * time.Duration(2*iter))
	}

	return nil
}

func (client *NimbusClient) processProfileDynamic(evt api.EventType,
	object *netproto.Profile, reactor ProfileReactor) error {

	profileEvt := netproto.ProfileEvent{
		EventType: evt,
		Profile:   *object,
	}

	// add venice label to the object
	profileEvt.Profile.ObjectMeta.Labels = make(map[string]string)
	profileEvt.Profile.ObjectMeta.Labels["CreatedBy"] = "Venice"

	client.lockObject(profileEvt.Profile.GetObjectKind(), profileEvt.Profile.ObjectMeta)

	err := client.processProfileEvent(profileEvt, reactor, nil)
	modificationTime, _ := protoTypes.TimestampProto(time.Now())
	object.ObjectMeta.ModTime = api.Timestamp{Timestamp: *modificationTime}

	return err
}
