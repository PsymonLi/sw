// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package nimbus is a auto generated package.
Input file: mirror.proto
*/

package nimbus

import (
	"context"
	"sync"
	"time"

	protoTypes "github.com/gogo/protobuf/types"
	"github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/dscagent/types"
	"github.com/pensando/sw/nic/agent/protos/netproto"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pkg/errors"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/connectivity"
	"google.golang.org/grpc/status"
)

type InterfaceMirrorSessionReactor interface {
	HandleInterfaceMirrorSession(oper types.Operation, interfacemirrorsessionObj netproto.InterfaceMirrorSession) ([]netproto.InterfaceMirrorSession, error)
	GetWatchOptions(cts context.Context, kind string) api.ListWatchOptions
}
type InterfaceMirrorSessionOStream struct {
	sync.Mutex
	stream netproto.InterfaceMirrorSessionApiV1_InterfaceMirrorSessionOperUpdateClient
}

// WatchInterfaceMirrorSessions runs InterfaceMirrorSession watcher loop
func (client *NimbusClient) WatchInterfaceMirrorSessions(ctx context.Context, reactor InterfaceMirrorSessionReactor) {
	// setup wait group
	client.waitGrp.Add(1)
	defer client.waitGrp.Done()
	client.debugStats.AddInt("ActiveInterfaceMirrorSessionWatch", 1)

	// make sure rpc client is good
	if client.rpcClient == nil || client.rpcClient.ClientConn == nil || client.rpcClient.ClientConn.GetState() != connectivity.Ready {
		log.Errorf("RPC client is disconnected. Exiting watch")
		return
	}

	// start the watch
	watchOptions := reactor.GetWatchOptions(ctx, "InterfaceMirrorSession")
	interfacemirrorsessionRPCClient := netproto.NewInterfaceMirrorSessionApiV1Client(client.rpcClient.ClientConn)
	stream, err := interfacemirrorsessionRPCClient.WatchInterfaceMirrorSessions(ctx, &watchOptions)
	if err != nil {
		log.Errorf("Error watching InterfaceMirrorSession. Err: %v", err)
		return
	}

	// start oper update stream
	opStream, err := interfacemirrorsessionRPCClient.InterfaceMirrorSessionOperUpdate(ctx)
	if err != nil {
		log.Errorf("Error starting InterfaceMirrorSession oper updates. Err: %v", err)
		return
	}

	ostream := &InterfaceMirrorSessionOStream{stream: opStream}

	// get a list of objects
	objList, err := interfacemirrorsessionRPCClient.ListInterfaceMirrorSessions(ctx, &watchOptions)
	if err != nil {
		st, ok := status.FromError(err)
		if !ok || st.Code() == codes.Unavailable {
			log.Errorf("Error getting InterfaceMirrorSession list. Err: %v", err)
			return
		}
	} else {
		// perform a diff of the states
		client.diffInterfaceMirrorSessions(objList, reactor, ostream)
	}

	// start grpc stream recv
	recvCh := make(chan *netproto.InterfaceMirrorSessionEvent, evChanLength)
	go client.watchInterfaceMirrorSessionRecvLoop(stream, recvCh)

	// loop till the end
	for {
		evtWork := func(evt *netproto.InterfaceMirrorSessionEvent) {
			client.debugStats.AddInt("InterfaceMirrorSessionWatchEvents", 1)
			log.Infof("Ctrlerif: agent %s got InterfaceMirrorSession watch event: Type: {%+v} InterfaceMirrorSession:{%+v}", client.clientName, evt.EventType, evt.InterfaceMirrorSession.ObjectMeta)
			client.lockObject(evt.InterfaceMirrorSession.GetObjectKind(), evt.InterfaceMirrorSession.ObjectMeta)
			go client.processInterfaceMirrorSessionEvent(*evt, reactor, ostream)
			//Give it some time to increment waitgrp
			time.Sleep(100 * time.Microsecond)
		}
		//Give priority to evnt work.
		select {
		case evt, ok := <-recvCh:
			if !ok {
				log.Warnf("InterfaceMirrorSession Watch channel closed. Exisint InterfaceMirrorSessionWatch")
				return
			}
			evtWork(evt)
		// periodic resync (Disabling as we have aggregate watch support)
		case <-time.After(resyncInterval):
			//Give priority to evt work
			//Wait for batch interval for inflight work
			time.Sleep(5 * DefaultWatchHoldInterval)
			select {
			case evt, ok := <-recvCh:
				if !ok {
					log.Warnf("InterfaceMirrorSession Watch channel closed. Exisint InterfaceMirrorSessionWatch")
					return
				}
				evtWork(evt)
				continue
			default:
			}
			// get a list of objects
			objList, err := interfacemirrorsessionRPCClient.ListInterfaceMirrorSessions(ctx, &watchOptions)
			if err != nil {
				st, ok := status.FromError(err)
				if !ok || st.Code() == codes.Unavailable {
					log.Errorf("Error getting InterfaceMirrorSession list. Err: %v", err)
					return
				}
			} else {
				client.debugStats.AddInt("InterfaceMirrorSessionWatchResyncs", 1)
				// perform a diff of the states
				client.diffInterfaceMirrorSessions(objList, reactor, ostream)
			}
		}
	}
}

// watchInterfaceMirrorSessionRecvLoop receives from stream and write it to a channel
func (client *NimbusClient) watchInterfaceMirrorSessionRecvLoop(stream netproto.InterfaceMirrorSessionApiV1_WatchInterfaceMirrorSessionsClient, recvch chan<- *netproto.InterfaceMirrorSessionEvent) {
	defer close(recvch)
	client.waitGrp.Add(1)
	defer client.waitGrp.Done()

	// loop till the end
	for {
		// receive from stream
		objList, err := stream.Recv()
		if err != nil {
			log.Errorf("Error receiving from watch channel. Exiting InterfaceMirrorSession watch. Err: %v", err)
			return
		}
		for _, evt := range objList.InterfaceMirrorSessionEvents {
			recvch <- evt
		}
	}
}

// diffInterfaceMirrorSession diffs local state with controller state
// FIXME: this is not handling deletes today
func (client *NimbusClient) diffInterfaceMirrorSessions(objList *netproto.InterfaceMirrorSessionList, reactor InterfaceMirrorSessionReactor, ostream *InterfaceMirrorSessionOStream) {
	// build a map of objects
	objmap := make(map[string]*netproto.InterfaceMirrorSession)
	for _, obj := range objList.InterfaceMirrorSessions {
		key := obj.ObjectMeta.GetKey()
		objmap[key] = obj
	}

	// see if we need to delete any locally found object
	o := netproto.InterfaceMirrorSession{
		TypeMeta: api.TypeMeta{Kind: "InterfaceMirrorSession"},
	}

	localObjs, err := reactor.HandleInterfaceMirrorSession(types.List, o)
	if err != nil {
		log.Error(errors.Wrapf(types.ErrNimbusHandling, "Op: %s | Kind: InterfaceMirrorSession | Err: %v", types.Operation(types.List), err))
	}
	for _, lobj := range localObjs {
		ctby, ok := lobj.ObjectMeta.Labels["CreatedBy"]
		if ok && ctby == "Venice" {
			key := lobj.ObjectMeta.GetKey()
			if nobj, ok := objmap[key]; !ok {
				evt := netproto.InterfaceMirrorSessionEvent{
					EventType: api.EventType_DeleteEvent,

					InterfaceMirrorSession: lobj,
				}
				log.Infof("diffInterfaceMirrorSessions(): Deleting object %+v", lobj.ObjectMeta)
				client.lockObject(evt.InterfaceMirrorSession.GetObjectKind(), evt.InterfaceMirrorSession.ObjectMeta)
				client.processInterfaceMirrorSessionEvent(evt, reactor, ostream)
			} else if ok && (nobj.GenerationID == lobj.GenerationID) {
				//Delete it so that we don't add/update
				delete(objmap, key)
			}
		} else {
			log.Infof("Not deleting non-venice object %+v", lobj.ObjectMeta)
		}
	}

	// add/update all new objects
	for _, obj := range objmap {
		evt := netproto.InterfaceMirrorSessionEvent{
			EventType: api.EventType_UpdateEvent,

			InterfaceMirrorSession: *obj,
		}
		client.lockObject(evt.InterfaceMirrorSession.GetObjectKind(), evt.InterfaceMirrorSession.ObjectMeta)
		client.processInterfaceMirrorSessionEvent(evt, reactor, ostream)
	}
}

// processInterfaceMirrorSessionEvent handles InterfaceMirrorSession event
func (client *NimbusClient) processInterfaceMirrorSessionEvent(evt netproto.InterfaceMirrorSessionEvent, reactor InterfaceMirrorSessionReactor, ostream *InterfaceMirrorSessionOStream) error {
	var err error
	client.waitGrp.Add(1)
	defer client.waitGrp.Done()

	// add venice label to the object
	evt.InterfaceMirrorSession.ObjectMeta.Labels = make(map[string]string)
	evt.InterfaceMirrorSession.ObjectMeta.Labels["CreatedBy"] = "Venice"

	log.Infof("InterfaceMirrorSession: processInterfaceMirrorSessionEvent | Evt: %s | InterfaceMirrorSession: %s", evt.EventType, evt.InterfaceMirrorSession.GetKey())
	// unlock the object once we are done
	defer client.unlockObject(evt.InterfaceMirrorSession.GetObjectKind(), evt.InterfaceMirrorSession.ObjectMeta)

	// retry till successful
	for iter := 0; iter < maxOpretry; iter++ {
		switch evt.EventType {
		case api.EventType_CreateEvent:
			fallthrough
		case api.EventType_UpdateEvent:

			_, err = reactor.HandleInterfaceMirrorSession(types.Get, evt.InterfaceMirrorSession)

			if err != nil {
				// create the InterfaceMirrorSession

				_, err = reactor.HandleInterfaceMirrorSession(types.Create, evt.InterfaceMirrorSession)

				if err != nil {
					log.Error(errors.Wrapf(types.ErrNimbusHandling, "Op: %s | Kind: InterfaceMirrorSession | Key: %s | Err: %v", types.Operation(types.Create), evt.InterfaceMirrorSession.GetKey(), err))
					client.debugStats.AddInt("CreateInterfaceMirrorSessionError", 1)
				} else {
					client.debugStats.AddInt("CreateInterfaceMirrorSession", 1)
				}
			} else {
				// update the InterfaceMirrorSession

				_, err = reactor.HandleInterfaceMirrorSession(types.Update, evt.InterfaceMirrorSession)

				if err != nil {
					log.Error(errors.Wrapf(types.ErrNimbusHandling, "Op: %s | Kind: InterfaceMirrorSession | Key: %s | Err: %v", types.Operation(types.Update), evt.InterfaceMirrorSession.GetKey(), err))
					client.debugStats.AddInt("UpdateInterfaceMirrorSessionError", 1)
				} else {
					client.debugStats.AddInt("UpdateInterfaceMirrorSession", 1)
				}
			}

		case api.EventType_DeleteEvent:
			// update the InterfaceMirrorSession

			_, err = reactor.HandleInterfaceMirrorSession(types.Delete, evt.InterfaceMirrorSession)

			if err != nil {
				log.Error(errors.Wrapf(types.ErrNimbusHandling, "Op: %s | Kind: InterfaceMirrorSession | Key: %s | Err: %v", types.Operation(types.Delete), evt.InterfaceMirrorSession.GetKey(), err))
				client.debugStats.AddInt("DeleteInterfaceMirrorSessionError", 1)
			} else {
				client.debugStats.AddInt("DeleteInterfaceMirrorSession", 1)
			}
		}

		if ostream == nil {
			return err
		}
		// send oper status and return if there is no error
		if err == nil {

			robj := netproto.InterfaceMirrorSessionEvent{
				EventType: evt.EventType,
				InterfaceMirrorSession: netproto.InterfaceMirrorSession{

					TypeMeta:   evt.InterfaceMirrorSession.TypeMeta,
					ObjectMeta: evt.InterfaceMirrorSession.ObjectMeta,
					Status:     evt.InterfaceMirrorSession.Status,
				},
			}

			// send oper status
			ostream.Lock()
			modificationTime, _ := protoTypes.TimestampProto(time.Now())
			robj.InterfaceMirrorSession.ObjectMeta.ModTime = api.Timestamp{Timestamp: *modificationTime}

			err := ostream.stream.Send(&robj)

			if err != nil {
				log.Errorf("failed to send InterfaceMirrorSession oper Status, %s", err)
				client.debugStats.AddInt("InterfaceMirrorSessionOperSendError", 1)
			} else {
				client.debugStats.AddInt("InterfaceMirrorSessionOperSent", 1)
			}
			ostream.Unlock()

			return err
		}

		// else, retry after some time, with backoff
		time.Sleep(time.Second * time.Duration(2*iter))
	}

	return nil
}

func (client *NimbusClient) processInterfaceMirrorSessionDynamic(evt api.EventType,
	object *netproto.InterfaceMirrorSession, reactor InterfaceMirrorSessionReactor) error {

	interfacemirrorsessionEvt := netproto.InterfaceMirrorSessionEvent{
		EventType: evt,

		InterfaceMirrorSession: *object,
	}

	// add venice label to the object
	interfacemirrorsessionEvt.InterfaceMirrorSession.ObjectMeta.Labels = make(map[string]string)
	interfacemirrorsessionEvt.InterfaceMirrorSession.ObjectMeta.Labels["CreatedBy"] = "Venice"

	client.lockObject(interfacemirrorsessionEvt.InterfaceMirrorSession.GetObjectKind(), interfacemirrorsessionEvt.InterfaceMirrorSession.ObjectMeta)

	err := client.processInterfaceMirrorSessionEvent(interfacemirrorsessionEvt, reactor, nil)
	modificationTime, _ := protoTypes.TimestampProto(time.Now())
	object.ObjectMeta.ModTime = api.Timestamp{Timestamp: *modificationTime}

	return err
}

type MirrorSessionReactor interface {
	HandleMirrorSession(oper types.Operation, mirrorsessionObj netproto.MirrorSession) ([]netproto.MirrorSession, error)
	GetWatchOptions(cts context.Context, kind string) api.ListWatchOptions
}
type MirrorSessionOStream struct {
	sync.Mutex
	stream netproto.MirrorSessionApiV2_MirrorSessionOperUpdateClient
}

// WatchMirrorSessions runs MirrorSession watcher loop
func (client *NimbusClient) WatchMirrorSessions(ctx context.Context, reactor MirrorSessionReactor) {
	// setup wait group
	client.waitGrp.Add(1)
	defer client.waitGrp.Done()
	client.debugStats.AddInt("ActiveMirrorSessionWatch", 1)

	// make sure rpc client is good
	if client.rpcClient == nil || client.rpcClient.ClientConn == nil || client.rpcClient.ClientConn.GetState() != connectivity.Ready {
		log.Errorf("RPC client is disconnected. Exiting watch")
		return
	}

	// start the watch
	watchOptions := reactor.GetWatchOptions(ctx, "MirrorSession")
	mirrorsessionRPCClient := netproto.NewMirrorSessionApiV2Client(client.rpcClient.ClientConn)
	stream, err := mirrorsessionRPCClient.WatchMirrorSessions(ctx, &watchOptions)
	if err != nil {
		log.Errorf("Error watching MirrorSession. Err: %v", err)
		return
	}

	// start oper update stream
	opStream, err := mirrorsessionRPCClient.MirrorSessionOperUpdate(ctx)
	if err != nil {
		log.Errorf("Error starting MirrorSession oper updates. Err: %v", err)
		return
	}

	ostream := &MirrorSessionOStream{stream: opStream}

	// get a list of objects
	objList, err := mirrorsessionRPCClient.ListMirrorSessions(ctx, &watchOptions)
	if err != nil {
		st, ok := status.FromError(err)
		if !ok || st.Code() == codes.Unavailable {
			log.Errorf("Error getting MirrorSession list. Err: %v", err)
			return
		}
	} else {
		// perform a diff of the states
		client.diffMirrorSessions(objList, reactor, ostream)
	}

	// start grpc stream recv
	recvCh := make(chan *netproto.MirrorSessionEvent, evChanLength)
	go client.watchMirrorSessionRecvLoop(stream, recvCh)

	// loop till the end
	for {
		evtWork := func(evt *netproto.MirrorSessionEvent) {
			client.debugStats.AddInt("MirrorSessionWatchEvents", 1)
			log.Infof("Ctrlerif: agent %s got MirrorSession watch event: Type: {%+v} MirrorSession:{%+v}", client.clientName, evt.EventType, evt.MirrorSession.ObjectMeta)
			client.lockObject(evt.MirrorSession.GetObjectKind(), evt.MirrorSession.ObjectMeta)
			go client.processMirrorSessionEvent(*evt, reactor, ostream)
			//Give it some time to increment waitgrp
			time.Sleep(100 * time.Microsecond)
		}
		//Give priority to evnt work.
		select {
		case evt, ok := <-recvCh:
			if !ok {
				log.Warnf("MirrorSession Watch channel closed. Exisint MirrorSessionWatch")
				return
			}
			evtWork(evt)
		// periodic resync (Disabling as we have aggregate watch support)
		case <-time.After(resyncInterval):
			//Give priority to evt work
			//Wait for batch interval for inflight work
			time.Sleep(5 * DefaultWatchHoldInterval)
			select {
			case evt, ok := <-recvCh:
				if !ok {
					log.Warnf("MirrorSession Watch channel closed. Exisint MirrorSessionWatch")
					return
				}
				evtWork(evt)
				continue
			default:
			}
			// get a list of objects
			objList, err := mirrorsessionRPCClient.ListMirrorSessions(ctx, &watchOptions)
			if err != nil {
				st, ok := status.FromError(err)
				if !ok || st.Code() == codes.Unavailable {
					log.Errorf("Error getting MirrorSession list. Err: %v", err)
					return
				}
			} else {
				client.debugStats.AddInt("MirrorSessionWatchResyncs", 1)
				// perform a diff of the states
				client.diffMirrorSessions(objList, reactor, ostream)
			}
		}
	}
}

// watchMirrorSessionRecvLoop receives from stream and write it to a channel
func (client *NimbusClient) watchMirrorSessionRecvLoop(stream netproto.MirrorSessionApiV2_WatchMirrorSessionsClient, recvch chan<- *netproto.MirrorSessionEvent) {
	defer close(recvch)
	client.waitGrp.Add(1)
	defer client.waitGrp.Done()

	// loop till the end
	for {
		// receive from stream
		objList, err := stream.Recv()
		if err != nil {
			log.Errorf("Error receiving from watch channel. Exiting MirrorSession watch. Err: %v", err)
			return
		}
		for _, evt := range objList.MirrorSessionEvents {
			recvch <- evt
		}
	}
}

// diffMirrorSession diffs local state with controller state
// FIXME: this is not handling deletes today
func (client *NimbusClient) diffMirrorSessions(objList *netproto.MirrorSessionList, reactor MirrorSessionReactor, ostream *MirrorSessionOStream) {
	// build a map of objects
	objmap := make(map[string]*netproto.MirrorSession)
	for _, obj := range objList.MirrorSessions {
		key := obj.ObjectMeta.GetKey()
		objmap[key] = obj
	}

	// see if we need to delete any locally found object
	o := netproto.MirrorSession{
		TypeMeta: api.TypeMeta{Kind: "MirrorSession"},
	}

	localObjs, err := reactor.HandleMirrorSession(types.List, o)
	if err != nil {
		log.Error(errors.Wrapf(types.ErrNimbusHandling, "Op: %s | Kind: MirrorSession | Err: %v", types.Operation(types.List), err))
	}
	for _, lobj := range localObjs {
		ctby, ok := lobj.ObjectMeta.Labels["CreatedBy"]
		if ok && ctby == "Venice" {
			key := lobj.ObjectMeta.GetKey()
			if nobj, ok := objmap[key]; !ok {
				evt := netproto.MirrorSessionEvent{
					EventType: api.EventType_DeleteEvent,

					MirrorSession: &lobj,
				}
				log.Infof("diffMirrorSessions(): Deleting object %+v", lobj.ObjectMeta)
				client.lockObject(evt.MirrorSession.GetObjectKind(), evt.MirrorSession.ObjectMeta)
				client.processMirrorSessionEvent(evt, reactor, ostream)
			} else if ok && (nobj.GenerationID == lobj.GenerationID) {
				//Delete it so that we don't add/update
				delete(objmap, key)
			}
		} else {
			log.Infof("Not deleting non-venice object %+v", lobj.ObjectMeta)
		}
	}

	// add/update all new objects
	for _, obj := range objmap {
		evt := netproto.MirrorSessionEvent{
			EventType: api.EventType_UpdateEvent,

			MirrorSession: obj,
		}
		client.lockObject(evt.MirrorSession.GetObjectKind(), evt.MirrorSession.ObjectMeta)
		client.processMirrorSessionEvent(evt, reactor, ostream)
	}
}

// processMirrorSessionEvent handles MirrorSession event
func (client *NimbusClient) processMirrorSessionEvent(evt netproto.MirrorSessionEvent, reactor MirrorSessionReactor, ostream *MirrorSessionOStream) error {
	var err error
	client.waitGrp.Add(1)
	defer client.waitGrp.Done()

	// add venice label to the object
	evt.MirrorSession.ObjectMeta.Labels = make(map[string]string)
	evt.MirrorSession.ObjectMeta.Labels["CreatedBy"] = "Venice"

	log.Infof("MirrorSession: processMirrorSessionEvent | Evt: %s | MirrorSession: %s", evt.EventType, evt.MirrorSession.GetKey())
	// unlock the object once we are done
	defer client.unlockObject(evt.MirrorSession.GetObjectKind(), evt.MirrorSession.ObjectMeta)

	// retry till successful
	for iter := 0; iter < maxOpretry; iter++ {
		switch evt.EventType {
		case api.EventType_CreateEvent:
			fallthrough
		case api.EventType_UpdateEvent:

			_, err = reactor.HandleMirrorSession(types.Get, *evt.MirrorSession)

			if err != nil {
				// create the MirrorSession

				_, err = reactor.HandleMirrorSession(types.Create, *evt.MirrorSession)

				if err != nil {
					log.Error(errors.Wrapf(types.ErrNimbusHandling, "Op: %s | Kind: MirrorSession | Key: %s | Err: %v", types.Operation(types.Create), evt.MirrorSession.GetKey(), err))
					client.debugStats.AddInt("CreateMirrorSessionError", 1)
				} else {
					client.debugStats.AddInt("CreateMirrorSession", 1)
				}
			} else {
				// update the MirrorSession

				_, err = reactor.HandleMirrorSession(types.Update, *evt.MirrorSession)

				if err != nil {
					log.Error(errors.Wrapf(types.ErrNimbusHandling, "Op: %s | Kind: MirrorSession | Key: %s | Err: %v", types.Operation(types.Update), evt.MirrorSession.GetKey(), err))
					client.debugStats.AddInt("UpdateMirrorSessionError", 1)
				} else {
					client.debugStats.AddInt("UpdateMirrorSession", 1)
				}
			}

		case api.EventType_DeleteEvent:
			// update the MirrorSession

			_, err = reactor.HandleMirrorSession(types.Delete, *evt.MirrorSession)

			if err != nil {
				log.Error(errors.Wrapf(types.ErrNimbusHandling, "Op: %s | Kind: MirrorSession | Key: %s | Err: %v", types.Operation(types.Delete), evt.MirrorSession.GetKey(), err))
				client.debugStats.AddInt("DeleteMirrorSessionError", 1)
			} else {
				client.debugStats.AddInt("DeleteMirrorSession", 1)
			}
		}

		if ostream == nil {
			return err
		}
		// send oper status and return if there is no error
		if err == nil {

			robj := &netproto.MirrorSessionEvent{
				EventType: evt.EventType,
				MirrorSession: &netproto.MirrorSession{

					TypeMeta:   evt.MirrorSession.TypeMeta,
					ObjectMeta: evt.MirrorSession.ObjectMeta,
					Status:     evt.MirrorSession.Status,
				},
			}

			// send oper status
			ostream.Lock()
			modificationTime, _ := protoTypes.TimestampProto(time.Now())
			robj.MirrorSession.ObjectMeta.ModTime = api.Timestamp{Timestamp: *modificationTime}

			err := ostream.stream.Send(robj)

			if err != nil {
				log.Errorf("failed to send MirrorSession oper Status, %s", err)
				client.debugStats.AddInt("MirrorSessionOperSendError", 1)
			} else {
				client.debugStats.AddInt("MirrorSessionOperSent", 1)
			}
			ostream.Unlock()

			return err
		}

		// else, retry after some time, with backoff
		time.Sleep(time.Second * time.Duration(2*iter))
	}

	return nil
}

func (client *NimbusClient) processMirrorSessionDynamic(evt api.EventType,
	object *netproto.MirrorSession, reactor MirrorSessionReactor) error {

	mirrorsessionEvt := netproto.MirrorSessionEvent{
		EventType: evt,

		MirrorSession: object,
	}

	// add venice label to the object
	mirrorsessionEvt.MirrorSession.ObjectMeta.Labels = make(map[string]string)
	mirrorsessionEvt.MirrorSession.ObjectMeta.Labels["CreatedBy"] = "Venice"

	client.lockObject(mirrorsessionEvt.MirrorSession.GetObjectKind(), mirrorsessionEvt.MirrorSession.ObjectMeta)

	err := client.processMirrorSessionEvent(mirrorsessionEvt, reactor, nil)
	modificationTime, _ := protoTypes.TimestampProto(time.Now())
	object.ObjectMeta.ModTime = api.Timestamp{Timestamp: *modificationTime}

	return err
}
