// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package nimbus is a auto generated package.
Input file: interface.proto
*/

package nimbus

import (
	"context"
	"errors"
	"io"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/protos/netproto"
	"github.com/pensando/sw/venice/utils/log"
	memdb "github.com/pensando/sw/venice/utils/memdb2"
	"github.com/pensando/sw/venice/utils/netutils"
	"github.com/pensando/sw/venice/utils/rpckit"
)

// FindInterface finds an Interface by object meta
func (ms *MbusServer) FindInterface(objmeta *api.ObjectMeta) (*netproto.Interface, error) {
	// find the object
	obj, err := ms.memDB.FindObject("Interface", objmeta)
	if err != nil {
		return nil, err
	}

	return InterfaceFromObj(obj)
}

// ListInterfaces lists all Interfaces in the mbus
func (ms *MbusServer) ListInterfaces(ctx context.Context, filterFn func(memdb.Object) bool) ([]*netproto.Interface, error) {
	var objlist []*netproto.Interface

	// walk all objects
	objs := ms.memDB.ListObjects("Interface", filterFn)
	for _, oo := range objs {
		obj, err := InterfaceFromObj(oo)
		if err == nil {
			objlist = append(objlist, obj)
		}
	}

	return objlist, nil
}

// InterfaceStatusReactor is the reactor interface implemented by controllers
type InterfaceStatusReactor interface {
	OnInterfaceCreateReq(nodeID string, objinfo *netproto.Interface) error
	OnInterfaceUpdateReq(nodeID string, objinfo *netproto.Interface) error
	OnInterfaceDeleteReq(nodeID string, objinfo *netproto.Interface) error
	OnInterfaceOperUpdate(nodeID string, objinfo *netproto.Interface) error
	OnInterfaceOperDelete(nodeID string, objinfo *netproto.Interface) error
	GetWatchFilter(kind string, ometa *api.ObjectMeta) func(memdb.Object) bool
}

// InterfaceTopic is the Interface topic on message bus
type InterfaceTopic struct {
	grpcServer    *rpckit.RPCServer // gRPC server instance
	server        *MbusServer
	statusReactor InterfaceStatusReactor // status event reactor
}

// AddInterfaceTopic returns a network RPC server
func AddInterfaceTopic(server *MbusServer, reactor InterfaceStatusReactor) (*InterfaceTopic, error) {
	// RPC handler instance
	handler := InterfaceTopic{
		grpcServer:    server.grpcServer,
		server:        server,
		statusReactor: reactor,
	}

	// register the RPC handlers
	if server.grpcServer != nil {
		netproto.RegisterInterfaceApiServer(server.grpcServer.GrpcServer, &handler)
	}

	return &handler, nil
}

// CreateInterface creates Interface
func (eh *InterfaceTopic) CreateInterface(ctx context.Context, objinfo *netproto.Interface) (*netproto.Interface, error) {
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)
	log.Infof("Received CreateInterface from node %v: {%+v}", nodeID, objinfo)

	// trigger callbacks. we allow creates to happen before it exists in memdb
	if eh.statusReactor != nil {
		eh.statusReactor.OnInterfaceCreateReq(nodeID, objinfo)
	}

	// increment stats
	eh.server.Stats("Interface", "AgentCreate").Inc()

	return objinfo, nil
}

// UpdateInterface updates Interface
func (eh *InterfaceTopic) UpdateInterface(ctx context.Context, objinfo *netproto.Interface) (*netproto.Interface, error) {
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)
	log.Infof("Received UpdateInterface from node %v: {%+v}", nodeID, objinfo)

	// incr stats
	eh.server.Stats("Interface", "AgentUpdate").Inc()

	// trigger callbacks
	if eh.statusReactor != nil {
		eh.statusReactor.OnInterfaceUpdateReq(nodeID, objinfo)
	}

	return objinfo, nil
}

// DeleteInterface deletes an Interface
func (eh *InterfaceTopic) DeleteInterface(ctx context.Context, objinfo *netproto.Interface) (*netproto.Interface, error) {
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)
	log.Infof("Received DeleteInterface from node %v: {%+v}", nodeID, objinfo)

	// incr stats
	eh.server.Stats("Interface", "AgentDelete").Inc()

	// trigger callbacks
	if eh.statusReactor != nil {
		eh.statusReactor.OnInterfaceDeleteReq(nodeID, objinfo)
	}

	return objinfo, nil
}

// InterfaceFromObj converts memdb object to Interface
func InterfaceFromObj(obj memdb.Object) (*netproto.Interface, error) {
	switch obj.(type) {
	case *netproto.Interface:
		eobj := obj.(*netproto.Interface)
		return eobj, nil
	default:
		return nil, ErrIncorrectObjectType
	}
}

// GetInterface returns a specific Interface
func (eh *InterfaceTopic) GetInterface(ctx context.Context, objmeta *api.ObjectMeta) (*netproto.Interface, error) {
	// find the object
	obj, err := eh.server.memDB.FindObject("Interface", objmeta)
	if err != nil {
		return nil, err
	}

	return InterfaceFromObj(obj)
}

// ListInterfaces lists all Interfaces matching object selector
func (eh *InterfaceTopic) ListInterfaces(ctx context.Context, objsel *api.ObjectMeta) (*netproto.InterfaceList, error) {
	var objlist netproto.InterfaceList

	filterFn := func(memdb.Object) bool {
		return true
	}

	if eh.statusReactor != nil {
		filterFn = eh.statusReactor.GetWatchFilter("Interface", objsel)
	}

	// walk all objects
	objs := eh.server.memDB.ListObjects("Interface", filterFn)
	for _, oo := range objs {
		obj, err := InterfaceFromObj(oo)
		if err == nil {
			objlist.Interfaces = append(objlist.Interfaces, obj)
		}
	}

	return &objlist, nil
}

// WatchInterfaces watches Interfaces and sends streaming resp
func (eh *InterfaceTopic) WatchInterfaces(ometa *api.ObjectMeta, stream netproto.InterfaceApi_WatchInterfacesServer) error {
	// watch for changes
	watcher := memdb.Watcher{}
	watcher.Channel = make(chan memdb.Event, memdb.WatchLen)
	defer close(watcher.Channel)

	if eh.statusReactor != nil {
		watcher.Filter = eh.statusReactor.GetWatchFilter("Interface", ometa)
	} else {
		watcher.Filter = func(memdb.Object) bool {
			return true
		}
	}

	ctx := stream.Context()
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)
	watcher.Name = nodeID
	eh.server.memDB.WatchObjects("Interface", &watcher)
	defer eh.server.memDB.StopWatchObjects("Interface", &watcher)

	// get a list of all Interfaces
	objlist, err := eh.ListInterfaces(context.Background(), ometa)
	if err != nil {
		log.Errorf("Error getting a list of objects. Err: %v", err)
		return err
	}

	// increment stats
	eh.server.Stats("Interface", "ActiveWatch").Inc()
	eh.server.Stats("Interface", "WatchConnect").Inc()
	defer eh.server.Stats("Interface", "ActiveWatch").Dec()
	defer eh.server.Stats("Interface", "WatchDisconnect").Inc()

	// walk all Interfaces and send it out
	for _, obj := range objlist.Interfaces {
		watchEvt := netproto.InterfaceEvent{
			EventType: api.EventType_CreateEvent,
			Interface: *obj,
		}
		err = stream.Send(&watchEvt)
		if err != nil {
			log.Errorf("Error sending Interface to stream. Err: %v", err)
			return err
		}
	}

	// loop forever on watch channel
	for {
		select {
		// read from channel
		case evt, ok := <-watcher.Channel:
			if !ok {
				log.Errorf("Error reading from channel. Closing watch")
				return errors.New("Error reading from channel")
			}

			// convert the events
			var etype api.EventType
			switch evt.EventType {
			case memdb.CreateEvent:
				etype = api.EventType_CreateEvent
			case memdb.UpdateEvent:
				etype = api.EventType_UpdateEvent
			case memdb.DeleteEvent:
				etype = api.EventType_DeleteEvent
			}

			// get the object
			obj, err := InterfaceFromObj(evt.Obj)
			if err != nil {
				return err
			}

			// convert to netproto format
			watchEvt := netproto.InterfaceEvent{
				EventType: etype,
				Interface: *obj,
			}
			// streaming send
			err = stream.Send(&watchEvt)
			if err != nil {
				log.Errorf("Error sending Interface to stream. Err: %v", err)
				return err
			}
		case <-ctx.Done():
			return ctx.Err()
		}
	}

	// done
}

// updateInterfaceOper triggers oper update callbacks
func (eh *InterfaceTopic) updateInterfaceOper(oper *netproto.InterfaceEvent, nodeID string) error {
	switch oper.EventType {
	case api.EventType_CreateEvent:
		fallthrough
	case api.EventType_UpdateEvent:
		// incr stats
		eh.server.Stats("Interface", "AgentUpdate").Inc()

		// trigger callbacks
		if eh.statusReactor != nil {
			return eh.statusReactor.OnInterfaceOperUpdate(nodeID, &oper.Interface)
		}
	case api.EventType_DeleteEvent:
		// incr stats
		eh.server.Stats("Interface", "AgentDelete").Inc()

		// trigger callbacks
		if eh.statusReactor != nil {
			eh.statusReactor.OnInterfaceOperDelete(nodeID, &oper.Interface)
		}
	}

	return nil
}

func (eh *InterfaceTopic) InterfaceOperUpdate(stream netproto.InterfaceApi_InterfaceOperUpdateServer) error {
	ctx := stream.Context()
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)

	for {
		oper, err := stream.Recv()
		if err == io.EOF {
			log.Errorf("InterfaceOperUpdate stream ended. closing..")
			return stream.SendAndClose(&api.TypeMeta{})
		} else if err != nil {
			log.Errorf("Error receiving from InterfaceOperUpdate stream. Err: %v", err)
			return err
		}

		err = eh.updateInterfaceOper(oper, nodeID)
		if err != nil {
			log.Errorf("Error updating Interface oper state. Err: %v", err)
		}
	}
}
