// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package nimbus is a auto generated package.
Input file: collector.proto
*/

package nimbus

import (
	"context"
	"sync"
	"time"

	protoTypes "github.com/gogo/protobuf/types"
	"github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/dscagent/types"
	"github.com/pensando/sw/nic/agent/protos/netproto"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pkg/errors"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/connectivity"
	"google.golang.org/grpc/status"
)

type CollectorReactor interface {
	HandleCollector(oper types.Operation, collectorObj netproto.Collector) ([]netproto.Collector, error)
	GetWatchOptions(cts context.Context, kind string) api.ListWatchOptions
}
type CollectorOStream struct {
	sync.Mutex
	stream netproto.CollectorApiV1_CollectorOperUpdateClient
}

// WatchCollectors runs Collector watcher loop
func (client *NimbusClient) WatchCollectors(ctx context.Context, reactor CollectorReactor) {
	// setup wait group
	client.waitGrp.Add(1)
	defer client.waitGrp.Done()
	client.debugStats.AddInt("ActiveCollectorWatch", 1)

	// make sure rpc client is good
	if client.rpcClient == nil || client.rpcClient.ClientConn == nil || client.rpcClient.ClientConn.GetState() != connectivity.Ready {
		log.Errorf("RPC client is disconnected. Exiting watch")
		return
	}

	// start the watch
	watchOptions := reactor.GetWatchOptions(ctx, "Collector")
	collectorRPCClient := netproto.NewCollectorApiV1Client(client.rpcClient.ClientConn)
	stream, err := collectorRPCClient.WatchCollectors(ctx, &watchOptions)
	if err != nil {
		log.Errorf("Error watching Collector. Err: %v", err)
		return
	}

	// start oper update stream
	opStream, err := collectorRPCClient.CollectorOperUpdate(ctx)
	if err != nil {
		log.Errorf("Error starting Collector oper updates. Err: %v", err)
		return
	}

	ostream := &CollectorOStream{stream: opStream}

	// get a list of objects
	objList, err := collectorRPCClient.ListCollectors(ctx, &watchOptions)
	if err != nil {
		st, ok := status.FromError(err)
		if !ok || st.Code() == codes.Unavailable {
			log.Errorf("Error getting Collector list. Err: %v", err)
			return
		}
	} else {
		// perform a diff of the states
		client.diffCollectors(objList, reactor, ostream)
	}

	// start grpc stream recv
	recvCh := make(chan *netproto.CollectorEvent, evChanLength)
	go client.watchCollectorRecvLoop(stream, recvCh)

	// loop till the end
	for {
		evtWork := func(evt *netproto.CollectorEvent) {
			client.debugStats.AddInt("CollectorWatchEvents", 1)
			log.Infof("Ctrlerif: agent %s got Collector watch event: Type: {%+v} Collector:{%+v}", client.clientName, evt.EventType, evt.Collector.ObjectMeta)
			client.lockObject(evt.Collector.GetObjectKind(), evt.Collector.ObjectMeta)
			go client.processCollectorEvent(*evt, reactor, ostream)
			//Give it some time to increment waitgrp
			time.Sleep(100 * time.Microsecond)
		}
		//Give priority to evnt work.
		select {
		case evt, ok := <-recvCh:
			if !ok {
				log.Warnf("Collector Watch channel closed. Exisint CollectorWatch")
				return
			}
			evtWork(evt)
		// periodic resync (Disabling as we have aggregate watch support)
		case <-time.After(resyncInterval):
			//Give priority to evt work
			//Wait for batch interval for inflight work
			time.Sleep(5 * DefaultWatchHoldInterval)
			select {
			case evt, ok := <-recvCh:
				if !ok {
					log.Warnf("Collector Watch channel closed. Exisint CollectorWatch")
					return
				}
				evtWork(evt)
				continue
			default:
			}
			// get a list of objects
			objList, err := collectorRPCClient.ListCollectors(ctx, &watchOptions)
			if err != nil {
				st, ok := status.FromError(err)
				if !ok || st.Code() == codes.Unavailable {
					log.Errorf("Error getting Collector list. Err: %v", err)
					return
				}
			} else {
				client.debugStats.AddInt("CollectorWatchResyncs", 1)
				// perform a diff of the states
				client.diffCollectors(objList, reactor, ostream)
			}
		}
	}
}

// watchCollectorRecvLoop receives from stream and write it to a channel
func (client *NimbusClient) watchCollectorRecvLoop(stream netproto.CollectorApiV1_WatchCollectorsClient, recvch chan<- *netproto.CollectorEvent) {
	defer close(recvch)
	client.waitGrp.Add(1)
	defer client.waitGrp.Done()

	// loop till the end
	for {
		// receive from stream
		objList, err := stream.Recv()
		if err != nil {
			log.Errorf("Error receiving from watch channel. Exiting Collector watch. Err: %v", err)
			return
		}
		for _, evt := range objList.CollectorEvents {
			recvch <- evt
		}
	}
}

// diffCollector diffs local state with controller state
// FIXME: this is not handling deletes today
func (client *NimbusClient) diffCollectors(objList *netproto.CollectorList, reactor CollectorReactor, ostream *CollectorOStream) {
	// build a map of objects
	objmap := make(map[string]*netproto.Collector)
	for _, obj := range objList.Collectors {
		key := obj.ObjectMeta.GetKey()
		objmap[key] = obj
	}

	// see if we need to delete any locally found object
	o := netproto.Collector{
		TypeMeta: api.TypeMeta{Kind: "Collector"},
	}

	localObjs, err := reactor.HandleCollector(types.List, o)
	if err != nil {
		log.Error(errors.Wrapf(types.ErrNimbusHandling, "Op: %s | Kind: Collector | Err: %v", types.Operation(types.List), err))
	}
	for _, lobj := range localObjs {
		ctby, ok := lobj.ObjectMeta.Labels["CreatedBy"]
		if ok && ctby == "Venice" {
			key := lobj.ObjectMeta.GetKey()
			if nobj, ok := objmap[key]; !ok {
				evt := netproto.CollectorEvent{
					EventType: api.EventType_DeleteEvent,
					Collector: lobj,
				}
				log.Infof("diffCollectors(): Deleting object %+v", lobj.ObjectMeta)
				client.lockObject(evt.Collector.GetObjectKind(), evt.Collector.ObjectMeta)
				client.processCollectorEvent(evt, reactor, ostream)
			} else if ok && (nobj.GenerationID == lobj.GenerationID) {
				//Delete it so that we don't add/update
				delete(objmap, key)
			}
		} else {
			log.Infof("Not deleting non-venice object %+v", lobj.ObjectMeta)
		}
	}

	// add/update all new objects
	for _, obj := range objmap {
		evt := netproto.CollectorEvent{
			EventType: api.EventType_UpdateEvent,
			Collector: *obj,
		}
		client.lockObject(evt.Collector.GetObjectKind(), evt.Collector.ObjectMeta)
		client.processCollectorEvent(evt, reactor, ostream)
	}
}

// processCollectorEvent handles Collector event
func (client *NimbusClient) processCollectorEvent(evt netproto.CollectorEvent, reactor CollectorReactor, ostream *CollectorOStream) error {
	var err error
	client.waitGrp.Add(1)
	defer client.waitGrp.Done()

	// add venice label to the object
	evt.Collector.ObjectMeta.Labels = make(map[string]string)
	evt.Collector.ObjectMeta.Labels["CreatedBy"] = "Venice"

	log.Infof("Collector: processCollectorEvent | Evt: %+v", evt)
	// unlock the object once we are done
	defer client.unlockObject(evt.Collector.GetObjectKind(), evt.Collector.ObjectMeta)

	// retry till successful
	for iter := 0; iter < maxOpretry; iter++ {
		switch evt.EventType {
		case api.EventType_CreateEvent:
			fallthrough
		case api.EventType_UpdateEvent:
			_, err = reactor.HandleCollector(types.Get, evt.Collector)
			if err != nil {
				// create the Collector
				_, err = reactor.HandleCollector(types.Create, evt.Collector)
				if err != nil {
					log.Error(errors.Wrapf(types.ErrNimbusHandling, "Op: %s | Kind: Collector | Key: %s | Err: %v", types.Operation(types.Create), evt.Collector.GetKey(), err))
					client.debugStats.AddInt("CreateCollectorError", 1)
				} else {
					client.debugStats.AddInt("CreateCollector", 1)
				}
			} else {
				// update the Collector
				_, err = reactor.HandleCollector(types.Update, evt.Collector)
				if err != nil {
					log.Error(errors.Wrapf(types.ErrNimbusHandling, "Op: %s | Kind: Collector | Key: %s | Err: %v", types.Operation(types.Update), evt.Collector.GetKey(), err))
					client.debugStats.AddInt("UpdateCollectorError", 1)
				} else {
					client.debugStats.AddInt("UpdateCollector", 1)
				}
			}

		case api.EventType_DeleteEvent:
			// update the Collector
			_, err = reactor.HandleCollector(types.Delete, evt.Collector)
			if err != nil {
				log.Error(errors.Wrapf(types.ErrNimbusHandling, "Op: %s | Kind: Collector | Key: %s | Err: %v", types.Operation(types.Delete), evt.Collector.GetKey(), err))
				client.debugStats.AddInt("DeleteCollectorError", 1)
			} else {
				client.debugStats.AddInt("DeleteCollector", 1)
			}
		}

		if ostream == nil {
			return err
		}
		// send oper status and return if there is no error
		if err == nil {
			robj := netproto.CollectorEvent{
				EventType: evt.EventType,
				Collector: netproto.Collector{
					TypeMeta:   evt.Collector.TypeMeta,
					ObjectMeta: evt.Collector.ObjectMeta,
					Status:     evt.Collector.Status,
				},
			}

			// send oper status
			ostream.Lock()
			modificationTime, _ := protoTypes.TimestampProto(time.Now())
			robj.Collector.ObjectMeta.ModTime = api.Timestamp{Timestamp: *modificationTime}
			err := ostream.stream.Send(&robj)
			if err != nil {
				log.Errorf("failed to send Collector oper Status, %s", err)
				client.debugStats.AddInt("CollectorOperSendError", 1)
			} else {
				client.debugStats.AddInt("CollectorOperSent", 1)
			}
			ostream.Unlock()

			return err
		}

		// else, retry after some time, with backoff
		time.Sleep(time.Second * time.Duration(2*iter))
	}

	return nil
}

func (client *NimbusClient) processCollectorDynamic(evt api.EventType,
	object *netproto.Collector, reactor CollectorReactor) error {

	collectorEvt := netproto.CollectorEvent{
		EventType: evt,
		Collector: *object,
	}

	// add venice label to the object
	collectorEvt.Collector.ObjectMeta.Labels = make(map[string]string)
	collectorEvt.Collector.ObjectMeta.Labels["CreatedBy"] = "Venice"

	client.lockObject(collectorEvt.Collector.GetObjectKind(), collectorEvt.Collector.ObjectMeta)

	err := client.processCollectorEvent(collectorEvt, reactor, nil)
	modificationTime, _ := protoTypes.TimestampProto(time.Now())
	object.ObjectMeta.ModTime = api.Timestamp{Timestamp: *modificationTime}

	return err
}
