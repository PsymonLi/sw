// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package nimbus is a auto generated package.
Input file: sgpolicy.proto
*/

package nimbus

import (
	"context"
	"errors"
	"io"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/protos/netproto"
	"github.com/pensando/sw/venice/utils/log"
	memdb "github.com/pensando/sw/venice/utils/memdb"
	"github.com/pensando/sw/venice/utils/netutils"
	"github.com/pensando/sw/venice/utils/rpckit"
)

// FindNetworkSecurityPolicy finds an NetworkSecurityPolicy by object meta
func (ms *MbusServer) FindNetworkSecurityPolicy(objmeta *api.ObjectMeta) (*netproto.NetworkSecurityPolicy, error) {
	// find the object
	obj, err := ms.memDB.FindObject("NetworkSecurityPolicy", objmeta)
	if err != nil {
		return nil, err
	}

	return NetworkSecurityPolicyFromObj(obj)
}

// ListNetworkSecurityPolicys lists all NetworkSecurityPolicys in the mbus
func (ms *MbusServer) ListNetworkSecurityPolicys(ctx context.Context, filterFn func(memdb.Object) bool) ([]*netproto.NetworkSecurityPolicy, error) {
	var objlist []*netproto.NetworkSecurityPolicy

	// walk all objects
	objs := ms.memDB.ListObjects("NetworkSecurityPolicy", filterFn)
	for _, oo := range objs {
		obj, err := NetworkSecurityPolicyFromObj(oo)
		if err == nil {
			objlist = append(objlist, obj)
		}
	}

	return objlist, nil
}

// NetworkSecurityPolicyStatusReactor is the reactor interface implemented by controllers
type NetworkSecurityPolicyStatusReactor interface {
	OnNetworkSecurityPolicyCreateReq(nodeID string, objinfo *netproto.NetworkSecurityPolicy) error
	OnNetworkSecurityPolicyUpdateReq(nodeID string, objinfo *netproto.NetworkSecurityPolicy) error
	OnNetworkSecurityPolicyDeleteReq(nodeID string, objinfo *netproto.NetworkSecurityPolicy) error
	OnNetworkSecurityPolicyOperUpdate(nodeID string, objinfo *netproto.NetworkSecurityPolicy) error
	OnNetworkSecurityPolicyOperDelete(nodeID string, objinfo *netproto.NetworkSecurityPolicy) error
	GetWatchFilter(kind string, ometa *api.ObjectMeta) func(memdb.Object) bool
}

// NetworkSecurityPolicyTopic is the NetworkSecurityPolicy topic on message bus
type NetworkSecurityPolicyTopic struct {
	grpcServer    *rpckit.RPCServer // gRPC server instance
	server        *MbusServer
	statusReactor NetworkSecurityPolicyStatusReactor // status event reactor
}

// AddNetworkSecurityPolicyTopic returns a network RPC server
func AddNetworkSecurityPolicyTopic(server *MbusServer, reactor NetworkSecurityPolicyStatusReactor) (*NetworkSecurityPolicyTopic, error) {
	// RPC handler instance
	handler := NetworkSecurityPolicyTopic{
		grpcServer:    server.grpcServer,
		server:        server,
		statusReactor: reactor,
	}

	// register the RPC handlers
	if server.grpcServer != nil {
		netproto.RegisterNetworkSecurityPolicyApiServer(server.grpcServer.GrpcServer, &handler)
	}

	return &handler, nil
}

// CreateNetworkSecurityPolicy creates NetworkSecurityPolicy
func (eh *NetworkSecurityPolicyTopic) CreateNetworkSecurityPolicy(ctx context.Context, objinfo *netproto.NetworkSecurityPolicy) (*netproto.NetworkSecurityPolicy, error) {
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)
	log.Infof("Received CreateNetworkSecurityPolicy from node %v: {%+v}", nodeID, objinfo)

	// trigger callbacks. we allow creates to happen before it exists in memdb
	if eh.statusReactor != nil {
		eh.statusReactor.OnNetworkSecurityPolicyCreateReq(nodeID, objinfo)
	}

	// increment stats
	eh.server.Stats("NetworkSecurityPolicy", "AgentCreate").Inc()

	return objinfo, nil
}

// UpdateNetworkSecurityPolicy updates NetworkSecurityPolicy
func (eh *NetworkSecurityPolicyTopic) UpdateNetworkSecurityPolicy(ctx context.Context, objinfo *netproto.NetworkSecurityPolicy) (*netproto.NetworkSecurityPolicy, error) {
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)
	log.Infof("Received UpdateNetworkSecurityPolicy from node %v: {%+v}", nodeID, objinfo)

	// incr stats
	eh.server.Stats("NetworkSecurityPolicy", "AgentUpdate").Inc()

	// trigger callbacks
	if eh.statusReactor != nil {
		eh.statusReactor.OnNetworkSecurityPolicyUpdateReq(nodeID, objinfo)
	}

	return objinfo, nil
}

// DeleteNetworkSecurityPolicy deletes an NetworkSecurityPolicy
func (eh *NetworkSecurityPolicyTopic) DeleteNetworkSecurityPolicy(ctx context.Context, objinfo *netproto.NetworkSecurityPolicy) (*netproto.NetworkSecurityPolicy, error) {
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)
	log.Infof("Received DeleteNetworkSecurityPolicy from node %v: {%+v}", nodeID, objinfo)

	// incr stats
	eh.server.Stats("NetworkSecurityPolicy", "AgentDelete").Inc()

	// trigger callbacks
	if eh.statusReactor != nil {
		eh.statusReactor.OnNetworkSecurityPolicyDeleteReq(nodeID, objinfo)
	}

	return objinfo, nil
}

// NetworkSecurityPolicyFromObj converts memdb object to NetworkSecurityPolicy
func NetworkSecurityPolicyFromObj(obj memdb.Object) (*netproto.NetworkSecurityPolicy, error) {
	switch obj.(type) {
	case *netproto.NetworkSecurityPolicy:
		eobj := obj.(*netproto.NetworkSecurityPolicy)
		return eobj, nil
	default:
		return nil, ErrIncorrectObjectType
	}
}

// GetNetworkSecurityPolicy returns a specific NetworkSecurityPolicy
func (eh *NetworkSecurityPolicyTopic) GetNetworkSecurityPolicy(ctx context.Context, objmeta *api.ObjectMeta) (*netproto.NetworkSecurityPolicy, error) {
	// find the object
	obj, err := eh.server.memDB.FindObject("NetworkSecurityPolicy", objmeta)
	if err != nil {
		return nil, err
	}

	return NetworkSecurityPolicyFromObj(obj)
}

// ListNetworkSecurityPolicys lists all NetworkSecurityPolicys matching object selector
func (eh *NetworkSecurityPolicyTopic) ListNetworkSecurityPolicys(ctx context.Context, objsel *api.ObjectMeta) (*netproto.NetworkSecurityPolicyList, error) {
	var objlist netproto.NetworkSecurityPolicyList

	filterFn := func(memdb.Object) bool {
		return true
	}

	if eh.statusReactor != nil {
		filterFn = eh.statusReactor.GetWatchFilter("NetworkSecurityPolicy", objsel)
	}

	// walk all objects
	objs := eh.server.memDB.ListObjects("NetworkSecurityPolicy", filterFn)
	for _, oo := range objs {
		obj, err := NetworkSecurityPolicyFromObj(oo)
		if err == nil {
			objlist.NetworkSecurityPolicys = append(objlist.NetworkSecurityPolicys, obj)
		}
	}

	return &objlist, nil
}

// WatchNetworkSecurityPolicys watches NetworkSecurityPolicys and sends streaming resp
func (eh *NetworkSecurityPolicyTopic) WatchNetworkSecurityPolicys(ometa *api.ObjectMeta, stream netproto.NetworkSecurityPolicyApi_WatchNetworkSecurityPolicysServer) error {
	// watch for changes
	watcher := memdb.Watcher{}
	watcher.Channel = make(chan memdb.Event, memdb.WatchLen)
	defer close(watcher.Channel)

	if eh.statusReactor != nil {
		watcher.Filter = eh.statusReactor.GetWatchFilter("NetworkSecurityPolicy", ometa)
	} else {
		watcher.Filter = func(memdb.Object) bool {
			return true
		}
	}

	ctx := stream.Context()
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)
	watcher.Name = nodeID
	eh.server.memDB.WatchObjects("NetworkSecurityPolicy", &watcher)
	defer eh.server.memDB.StopWatchObjects("NetworkSecurityPolicy", &watcher)

	// get a list of all NetworkSecurityPolicys
	objlist, err := eh.ListNetworkSecurityPolicys(context.Background(), ometa)
	if err != nil {
		log.Errorf("Error getting a list of objects. Err: %v", err)
		return err
	}

	// increment stats
	eh.server.Stats("NetworkSecurityPolicy", "ActiveWatch").Inc()
	eh.server.Stats("NetworkSecurityPolicy", "WatchConnect").Inc()
	defer eh.server.Stats("NetworkSecurityPolicy", "ActiveWatch").Dec()
	defer eh.server.Stats("NetworkSecurityPolicy", "WatchDisconnect").Inc()

	// walk all NetworkSecurityPolicys and send it out
	for _, obj := range objlist.NetworkSecurityPolicys {
		watchEvt := netproto.NetworkSecurityPolicyEvent{
			EventType:             api.EventType_CreateEvent,
			NetworkSecurityPolicy: *obj,
		}
		err = stream.Send(&watchEvt)
		if err != nil {
			log.Errorf("Error sending NetworkSecurityPolicy to stream. Err: %v", err)
			return err
		}
	}

	// loop forever on watch channel
	for {
		select {
		// read from channel
		case evt, ok := <-watcher.Channel:
			if !ok {
				log.Errorf("Error reading from channel. Closing watch")
				return errors.New("Error reading from channel")
			}

			// convert the events
			var etype api.EventType
			switch evt.EventType {
			case memdb.CreateEvent:
				etype = api.EventType_CreateEvent
			case memdb.UpdateEvent:
				etype = api.EventType_UpdateEvent
			case memdb.DeleteEvent:
				etype = api.EventType_DeleteEvent
			}

			// get the object
			obj, err := NetworkSecurityPolicyFromObj(evt.Obj)
			if err != nil {
				return err
			}

			// convert to netproto format
			watchEvt := netproto.NetworkSecurityPolicyEvent{
				EventType:             etype,
				NetworkSecurityPolicy: *obj,
			}
			// streaming send
			err = stream.Send(&watchEvt)
			if err != nil {
				log.Errorf("Error sending NetworkSecurityPolicy to stream. Err: %v", err)
				return err
			}
		case <-ctx.Done():
			return ctx.Err()
		}
	}

	// done
}

// updateNetworkSecurityPolicyOper triggers oper update callbacks
func (eh *NetworkSecurityPolicyTopic) updateNetworkSecurityPolicyOper(oper *netproto.NetworkSecurityPolicyEvent, nodeID string) error {
	switch oper.EventType {
	case api.EventType_CreateEvent:
		fallthrough
	case api.EventType_UpdateEvent:
		// incr stats
		eh.server.Stats("NetworkSecurityPolicy", "AgentUpdate").Inc()

		// trigger callbacks
		if eh.statusReactor != nil {
			return eh.statusReactor.OnNetworkSecurityPolicyOperUpdate(nodeID, &oper.NetworkSecurityPolicy)
		}
	case api.EventType_DeleteEvent:
		// incr stats
		eh.server.Stats("NetworkSecurityPolicy", "AgentDelete").Inc()

		// trigger callbacks
		if eh.statusReactor != nil {
			eh.statusReactor.OnNetworkSecurityPolicyOperDelete(nodeID, &oper.NetworkSecurityPolicy)
		}
	}

	return nil
}

func (eh *NetworkSecurityPolicyTopic) NetworkSecurityPolicyOperUpdate(stream netproto.NetworkSecurityPolicyApi_NetworkSecurityPolicyOperUpdateServer) error {
	ctx := stream.Context()
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)

	for {
		oper, err := stream.Recv()
		if err == io.EOF {
			log.Errorf("NetworkSecurityPolicyOperUpdate stream ended. closing..")
			return stream.SendAndClose(&api.TypeMeta{})
		} else if err != nil {
			log.Errorf("Error receiving from NetworkSecurityPolicyOperUpdate stream. Err: %v", err)
			return err
		}

		err = eh.updateNetworkSecurityPolicyOper(oper, nodeID)
		if err != nil {
			log.Errorf("Error updating NetworkSecurityPolicy oper state. Err: %v", err)
		}
	}
}
