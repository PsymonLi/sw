// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package nimbus is a auto generated package.
Input file: tenant.proto
*/

package nimbus

import (
	"context"
	"errors"
	"io"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/protos/netproto"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/memdb"
	"github.com/pensando/sw/venice/utils/netutils"
	"github.com/pensando/sw/venice/utils/rpckit"
)

// FindTenant finds an Tenant by object meta
func (ms *MbusServer) FindTenant(objmeta *api.ObjectMeta) (*netproto.Tenant, error) {
	// find the object
	obj, err := ms.memDB.FindObject("Tenant", objmeta)
	if err != nil {
		return nil, err
	}

	return TenantFromObj(obj)
}

// ListTenants lists all Tenants in the mbus
func (ms *MbusServer) ListTenants(ctx context.Context) ([]*netproto.Tenant, error) {
	var objlist []*netproto.Tenant

	// walk all objects
	objs := ms.memDB.ListObjects("Tenant")
	for _, oo := range objs {
		obj, err := TenantFromObj(oo)
		if err == nil {
			objlist = append(objlist, obj)
		}
	}

	return objlist, nil
}

// TenantStatusReactor is the reactor interface implemented by controllers
type TenantStatusReactor interface {
	OnTenantCreateReq(nodeID string, objinfo *netproto.Tenant) error
	OnTenantUpdateReq(nodeID string, objinfo *netproto.Tenant) error
	OnTenantDeleteReq(nodeID string, objinfo *netproto.Tenant) error
	OnTenantOperUpdate(nodeID string, objinfo *netproto.Tenant) error
	OnTenantOperDelete(nodeID string, objinfo *netproto.Tenant) error
}

// TenantTopic is the Tenant topic on message bus
type TenantTopic struct {
	grpcServer    *rpckit.RPCServer // gRPC server instance
	server        *MbusServer
	statusReactor TenantStatusReactor // status event reactor
}

// AddTenantTopic returns a network RPC server
func AddTenantTopic(server *MbusServer, reactor TenantStatusReactor) (*TenantTopic, error) {
	// RPC handler instance
	handler := TenantTopic{
		grpcServer:    server.grpcServer,
		server:        server,
		statusReactor: reactor,
	}

	// register the RPC handlers
	if server.grpcServer != nil {
		netproto.RegisterTenantApiServer(server.grpcServer.GrpcServer, &handler)
	}

	return &handler, nil
}

// CreateTenant creates Tenant
func (eh *TenantTopic) CreateTenant(ctx context.Context, objinfo *netproto.Tenant) (*netproto.Tenant, error) {
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)
	log.Infof("Received CreateTenant from node %v: {%+v}", nodeID, objinfo)

	// trigger callbacks. we allow creates to happen before it exists in memdb
	if eh.statusReactor != nil {
		eh.statusReactor.OnTenantCreateReq(nodeID, objinfo)
	}

	// increment stats
	eh.server.Stats("Tenant", "AgentCreate").Inc()

	return objinfo, nil
}

// UpdateTenant updates Tenant
func (eh *TenantTopic) UpdateTenant(ctx context.Context, objinfo *netproto.Tenant) (*netproto.Tenant, error) {
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)
	log.Infof("Received UpdateTenant from node %v: {%+v}", nodeID, objinfo)

	// incr stats
	eh.server.Stats("Tenant", "AgentUpdate").Inc()

	// trigger callbacks
	if eh.statusReactor != nil {
		eh.statusReactor.OnTenantUpdateReq(nodeID, objinfo)
	}

	return objinfo, nil
}

// DeleteTenant deletes an Tenant
func (eh *TenantTopic) DeleteTenant(ctx context.Context, objinfo *netproto.Tenant) (*netproto.Tenant, error) {
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)
	log.Infof("Received DeleteTenant from node %v: {%+v}", nodeID, objinfo)

	// incr stats
	eh.server.Stats("Tenant", "AgentDelete").Inc()

	// trigger callbacks
	if eh.statusReactor != nil {
		eh.statusReactor.OnTenantDeleteReq(nodeID, objinfo)
	}

	return objinfo, nil
}

// TenantFromObj converts memdb object to Tenant
func TenantFromObj(obj memdb.Object) (*netproto.Tenant, error) {
	switch obj.(type) {
	case *netproto.Tenant:
		eobj := obj.(*netproto.Tenant)
		return eobj, nil
	default:
		return nil, ErrIncorrectObjectType
	}
}

// GetTenant returns a specific Tenant
func (eh *TenantTopic) GetTenant(ctx context.Context, objmeta *api.ObjectMeta) (*netproto.Tenant, error) {
	// find the object
	obj, err := eh.server.memDB.FindObject("Tenant", objmeta)
	if err != nil {
		return nil, err
	}

	return TenantFromObj(obj)
}

// ListTenants lists all Tenants matching object selector
func (eh *TenantTopic) ListTenants(ctx context.Context, objsel *api.ObjectMeta) (*netproto.TenantList, error) {
	var objlist netproto.TenantList

	// walk all objects
	objs := eh.server.memDB.ListObjects("Tenant")
	for _, oo := range objs {
		obj, err := TenantFromObj(oo)
		if err == nil {
			objlist.Tenants = append(objlist.Tenants, obj)
		}
	}

	return &objlist, nil
}

// WatchTenants watches Tenants and sends streaming resp
func (eh *TenantTopic) WatchTenants(ometa *api.ObjectMeta, stream netproto.TenantApi_WatchTenantsServer) error {
	// watch for changes
	watchChan := make(chan memdb.Event, memdb.WatchLen)
	defer close(watchChan)
	eh.server.memDB.WatchObjects("Tenant", watchChan)
	defer eh.server.memDB.StopWatchObjects("Tenant", watchChan)

	// get a list of all Tenants
	objlist, err := eh.ListTenants(context.Background(), ometa)
	if err != nil {
		log.Errorf("Error getting a list of objects. Err: %v", err)
		return err
	}

	// increment stats
	eh.server.Stats("Tenant", "ActiveWatch").Inc()
	eh.server.Stats("Tenant", "WatchConnect").Inc()
	defer eh.server.Stats("Tenant", "ActiveWatch").Dec()
	defer eh.server.Stats("Tenant", "WatchDisconnect").Inc()

	ctx := stream.Context()

	// walk all Tenants and send it out
	for _, obj := range objlist.Tenants {
		watchEvt := netproto.TenantEvent{
			EventType: api.EventType_CreateEvent,
			Tenant:    *obj,
		}
		err = stream.Send(&watchEvt)
		if err != nil {
			log.Errorf("Error sending Tenant to stream. Err: %v", err)
			return err
		}
	}

	// loop forever on watch channel
	for {
		select {
		// read from channel
		case evt, ok := <-watchChan:
			if !ok {
				log.Errorf("Error reading from channel. Closing watch")
				return errors.New("Error reading from channel")
			}

			// convert the events
			var etype api.EventType
			switch evt.EventType {
			case memdb.CreateEvent:
				etype = api.EventType_CreateEvent
			case memdb.UpdateEvent:
				etype = api.EventType_UpdateEvent
			case memdb.DeleteEvent:
				etype = api.EventType_DeleteEvent
			}

			// get the object
			obj, err := TenantFromObj(evt.Obj)
			if err != nil {
				return err
			}

			// convert to netproto format
			watchEvt := netproto.TenantEvent{
				EventType: etype,
				Tenant:    *obj,
			}

			// streaming send
			err = stream.Send(&watchEvt)
			if err != nil {
				log.Errorf("Error sending Tenant to stream. Err: %v", err)
				return err
			}
		case <-ctx.Done():
			return ctx.Err()
		}
	}

	// done
}

// updateTenantOper triggers oper update callbacks
func (eh *TenantTopic) updateTenantOper(oper *netproto.TenantEvent, nodeID string) error {
	switch oper.EventType {
	case api.EventType_CreateEvent:
		fallthrough
	case api.EventType_UpdateEvent:
		// incr stats
		eh.server.Stats("Tenant", "AgentUpdate").Inc()

		// trigger callbacks
		if eh.statusReactor != nil {
			return eh.statusReactor.OnTenantOperUpdate(nodeID, &oper.Tenant)
		}
	case api.EventType_DeleteEvent:
		// incr stats
		eh.server.Stats("Tenant", "AgentDelete").Inc()

		// trigger callbacks
		if eh.statusReactor != nil {
			eh.statusReactor.OnTenantOperDelete(nodeID, &oper.Tenant)
		}
	}

	return nil
}

func (eh *TenantTopic) TenantOperUpdate(stream netproto.TenantApi_TenantOperUpdateServer) error {
	ctx := stream.Context()
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)

	for {
		oper, err := stream.Recv()
		if err == io.EOF {
			log.Errorf("TenantOperUpdate stream ended. closing..")
			return stream.SendAndClose(&api.TypeMeta{})
		} else if err != nil {
			log.Errorf("Error receiving from TenantOperUpdate stream. Err: %v", err)
			return err
		}

		err = eh.updateTenantOper(oper, nodeID)
		if err != nil {
			log.Errorf("Error updating Tenant oper state. Err: %v", err)
		}
	}
}
