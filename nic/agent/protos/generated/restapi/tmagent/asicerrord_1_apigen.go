// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
/*
 * Package restapi is a auto generated package.
 * Input file: asicerrord_1.proto
 */

package restapi

import (
	"fmt"
	"net/http"

	"github.com/gorilla/mux"

	"github.com/pensando/sw/nic/agent/httputils"
	"github.com/pensando/sw/nic/delphi/proto/goproto"
	_ "github.com/pensando/sw/nic/utils/ntranslate/asicerrord"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/tsdb"
)

// AddBxbxintmacMetricsAPIRoutes adds routes for BxbxintmacMetrics
func (s *RestServer) AddBxbxintmacMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getBxbxintmacMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listBxbxintmacMetricsHandler))
}

// listBxbxintmacMetricsHandler is the List Handler for BxbxintmacMetrics
func (s *RestServer) listBxbxintmacMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewBxbxintmacMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.BxbxintmacMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("BxbxintmacMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for BxbxintmacMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getBxbxintmacMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getBxbxintmacMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getBxbxintmacMetricsHandler is the Get Handler for BxbxintmacMetrics
func (s *RestServer) getBxbxintmacMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request BxbxintmacMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDbwaintdbMetricsAPIRoutes adds routes for DbwaintdbMetrics
func (s *RestServer) AddDbwaintdbMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDbwaintdbMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDbwaintdbMetricsHandler))
}

// listDbwaintdbMetricsHandler is the List Handler for DbwaintdbMetrics
func (s *RestServer) listDbwaintdbMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDbwaintdbMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.DbwaintdbMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("DbwaintdbMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DbwaintdbMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDbwaintdbMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDbwaintdbMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDbwaintdbMetricsHandler is the Get Handler for DbwaintdbMetrics
func (s *RestServer) getDbwaintdbMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DbwaintdbMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDbwaintlifqstatemapMetricsAPIRoutes adds routes for DbwaintlifqstatemapMetrics
func (s *RestServer) AddDbwaintlifqstatemapMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDbwaintlifqstatemapMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDbwaintlifqstatemapMetricsHandler))
}

// listDbwaintlifqstatemapMetricsHandler is the List Handler for DbwaintlifqstatemapMetrics
func (s *RestServer) listDbwaintlifqstatemapMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDbwaintlifqstatemapMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.DbwaintlifqstatemapMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("DbwaintlifqstatemapMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DbwaintlifqstatemapMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDbwaintlifqstatemapMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDbwaintlifqstatemapMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDbwaintlifqstatemapMetricsHandler is the Get Handler for DbwaintlifqstatemapMetrics
func (s *RestServer) getDbwaintlifqstatemapMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DbwaintlifqstatemapMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr0intfifoMetricsAPIRoutes adds routes for Dprdpr0intfifoMetrics
func (s *RestServer) AddDprdpr0intfifoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr0intfifoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr0intfifoMetricsHandler))
}

// listDprdpr0intfifoMetricsHandler is the List Handler for Dprdpr0intfifoMetrics
func (s *RestServer) listDprdpr0intfifoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr0intfifoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr0intfifoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr0intfifoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr0intfifoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr0intfifoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr0intfifoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr0intfifoMetricsHandler is the Get Handler for Dprdpr0intfifoMetrics
func (s *RestServer) getDprdpr0intfifoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr0intfifoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr0intreg1MetricsAPIRoutes adds routes for Dprdpr0intreg1Metrics
func (s *RestServer) AddDprdpr0intreg1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr0intreg1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr0intreg1MetricsHandler))
}

// listDprdpr0intreg1MetricsHandler is the List Handler for Dprdpr0intreg1Metrics
func (s *RestServer) listDprdpr0intreg1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr0intreg1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr0intreg1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr0intreg1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr0intreg1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr0intreg1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr0intreg1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr0intreg1MetricsHandler is the Get Handler for Dprdpr0intreg1Metrics
func (s *RestServer) getDprdpr0intreg1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr0intreg1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr0intreg2MetricsAPIRoutes adds routes for Dprdpr0intreg2Metrics
func (s *RestServer) AddDprdpr0intreg2MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr0intreg2MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr0intreg2MetricsHandler))
}

// listDprdpr0intreg2MetricsHandler is the List Handler for Dprdpr0intreg2Metrics
func (s *RestServer) listDprdpr0intreg2MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr0intreg2MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr0intreg2Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr0intreg2MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr0intreg2Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr0intreg2MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr0intreg2MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr0intreg2MetricsHandler is the Get Handler for Dprdpr0intreg2Metrics
func (s *RestServer) getDprdpr0intreg2MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr0intreg2Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr0intsramseccMetricsAPIRoutes adds routes for Dprdpr0intsramseccMetrics
func (s *RestServer) AddDprdpr0intsramseccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr0intsramseccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr0intsramseccMetricsHandler))
}

// listDprdpr0intsramseccMetricsHandler is the List Handler for Dprdpr0intsramseccMetrics
func (s *RestServer) listDprdpr0intsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr0intsramseccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr0intsramseccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr0intsramseccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr0intsramseccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr0intsramseccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr0intsramseccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr0intsramseccMetricsHandler is the Get Handler for Dprdpr0intsramseccMetrics
func (s *RestServer) getDprdpr0intsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr0intsramseccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMdhensintaxierrMetricsAPIRoutes adds routes for MdhensintaxierrMetrics
func (s *RestServer) AddMdhensintaxierrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMdhensintaxierrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMdhensintaxierrMetricsHandler))
}

// listMdhensintaxierrMetricsHandler is the List Handler for MdhensintaxierrMetrics
func (s *RestServer) listMdhensintaxierrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMdhensintaxierrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MdhensintaxierrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("MdhensintaxierrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MdhensintaxierrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMdhensintaxierrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMdhensintaxierrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMdhensintaxierrMetricsHandler is the Get Handler for MdhensintaxierrMetrics
func (s *RestServer) getMdhensintaxierrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MdhensintaxierrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMdhensintdrbgcryptorameccMetricsAPIRoutes adds routes for MdhensintdrbgcryptorameccMetrics
func (s *RestServer) AddMdhensintdrbgcryptorameccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMdhensintdrbgcryptorameccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMdhensintdrbgcryptorameccMetricsHandler))
}

// listMdhensintdrbgcryptorameccMetricsHandler is the List Handler for MdhensintdrbgcryptorameccMetrics
func (s *RestServer) listMdhensintdrbgcryptorameccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMdhensintdrbgcryptorameccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MdhensintdrbgcryptorameccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("MdhensintdrbgcryptorameccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MdhensintdrbgcryptorameccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMdhensintdrbgcryptorameccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMdhensintdrbgcryptorameccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMdhensintdrbgcryptorameccMetricsHandler is the Get Handler for MdhensintdrbgcryptorameccMetrics
func (s *RestServer) getMdhensintdrbgcryptorameccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MdhensintdrbgcryptorameccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMdhensintdrbgintrameccMetricsAPIRoutes adds routes for MdhensintdrbgintrameccMetrics
func (s *RestServer) AddMdhensintdrbgintrameccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMdhensintdrbgintrameccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMdhensintdrbgintrameccMetricsHandler))
}

// listMdhensintdrbgintrameccMetricsHandler is the List Handler for MdhensintdrbgintrameccMetrics
func (s *RestServer) listMdhensintdrbgintrameccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMdhensintdrbgintrameccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MdhensintdrbgintrameccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("MdhensintdrbgintrameccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MdhensintdrbgintrameccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMdhensintdrbgintrameccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMdhensintdrbgintrameccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMdhensintdrbgintrameccMetricsHandler is the Get Handler for MdhensintdrbgintrameccMetrics
func (s *RestServer) getMdhensintdrbgintrameccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MdhensintdrbgintrameccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMdhensintpkeccMetricsAPIRoutes adds routes for MdhensintpkeccMetrics
func (s *RestServer) AddMdhensintpkeccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMdhensintpkeccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMdhensintpkeccMetricsHandler))
}

// listMdhensintpkeccMetricsHandler is the List Handler for MdhensintpkeccMetrics
func (s *RestServer) listMdhensintpkeccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMdhensintpkeccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MdhensintpkeccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("MdhensintpkeccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MdhensintpkeccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMdhensintpkeccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMdhensintpkeccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMdhensintpkeccMetricsHandler is the Get Handler for MdhensintpkeccMetrics
func (s *RestServer) getMdhensintpkeccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MdhensintpkeccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbmintecchbmhtMetricsAPIRoutes adds routes for PbpbchbmintecchbmhtMetrics
func (s *RestServer) AddPbpbchbmintecchbmhtMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbmintecchbmhtMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbmintecchbmhtMetricsHandler))
}

// listPbpbchbmintecchbmhtMetricsHandler is the List Handler for PbpbchbmintecchbmhtMetrics
func (s *RestServer) listPbpbchbmintecchbmhtMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbmintecchbmhtMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbmintecchbmhtMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbmintecchbmhtMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbmintecchbmhtMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbmintecchbmhtMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbmintecchbmhtMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbmintecchbmhtMetricsHandler is the Get Handler for PbpbchbmintecchbmhtMetrics
func (s *RestServer) getPbpbchbmintecchbmhtMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbmintecchbmhtMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbmintecchbmmtuMetricsAPIRoutes adds routes for PbpbchbmintecchbmmtuMetrics
func (s *RestServer) AddPbpbchbmintecchbmmtuMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbmintecchbmmtuMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbmintecchbmmtuMetricsHandler))
}

// listPbpbchbmintecchbmmtuMetricsHandler is the List Handler for PbpbchbmintecchbmmtuMetrics
func (s *RestServer) listPbpbchbmintecchbmmtuMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbmintecchbmmtuMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbmintecchbmmtuMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbmintecchbmmtuMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbmintecchbmmtuMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbmintecchbmmtuMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbmintecchbmmtuMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbmintecchbmmtuMetricsHandler is the Get Handler for PbpbchbmintecchbmmtuMetrics
func (s *RestServer) getPbpbchbmintecchbmmtuMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbmintecchbmmtuMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbmintecchbmrbMetricsAPIRoutes adds routes for PbpbchbmintecchbmrbMetrics
func (s *RestServer) AddPbpbchbmintecchbmrbMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbmintecchbmrbMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbmintecchbmrbMetricsHandler))
}

// listPbpbchbmintecchbmrbMetricsHandler is the List Handler for PbpbchbmintecchbmrbMetrics
func (s *RestServer) listPbpbchbmintecchbmrbMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbmintecchbmrbMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbmintecchbmrbMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbmintecchbmrbMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbmintecchbmrbMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbmintecchbmrbMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbmintecchbmrbMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbmintecchbmrbMetricsHandler is the Get Handler for PbpbchbmintecchbmrbMetrics
func (s *RestServer) getPbpbchbmintecchbmrbMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbmintecchbmrbMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbmintecchbmwbMetricsAPIRoutes adds routes for PbpbchbmintecchbmwbMetrics
func (s *RestServer) AddPbpbchbmintecchbmwbMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbmintecchbmwbMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbmintecchbmwbMetricsHandler))
}

// listPbpbchbmintecchbmwbMetricsHandler is the List Handler for PbpbchbmintecchbmwbMetrics
func (s *RestServer) listPbpbchbmintecchbmwbMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbmintecchbmwbMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbmintecchbmwbMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbmintecchbmwbMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbmintecchbmwbMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbmintecchbmwbMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbmintecchbmwbMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbmintecchbmwbMetricsHandler is the Get Handler for PbpbchbmintecchbmwbMetrics
func (s *RestServer) getPbpbchbmintecchbmwbMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbmintecchbmwbMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbminthbmaxierrrspMetricsAPIRoutes adds routes for PbpbchbminthbmaxierrrspMetrics
func (s *RestServer) AddPbpbchbminthbmaxierrrspMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbminthbmaxierrrspMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbminthbmaxierrrspMetricsHandler))
}

// listPbpbchbminthbmaxierrrspMetricsHandler is the List Handler for PbpbchbminthbmaxierrrspMetrics
func (s *RestServer) listPbpbchbminthbmaxierrrspMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmaxierrrspMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmaxierrrspMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbminthbmaxierrrspMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmaxierrrspMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmaxierrrspMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmaxierrrspMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbminthbmaxierrrspMetricsHandler is the Get Handler for PbpbchbminthbmaxierrrspMetrics
func (s *RestServer) getPbpbchbminthbmaxierrrspMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmaxierrrspMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbminthbmpbusviolationinMetricsAPIRoutes adds routes for PbpbchbminthbmpbusviolationinMetrics
func (s *RestServer) AddPbpbchbminthbmpbusviolationinMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbminthbmpbusviolationinMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbminthbmpbusviolationinMetricsHandler))
}

// listPbpbchbminthbmpbusviolationinMetricsHandler is the List Handler for PbpbchbminthbmpbusviolationinMetrics
func (s *RestServer) listPbpbchbminthbmpbusviolationinMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmpbusviolationinMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmpbusviolationinMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbminthbmpbusviolationinMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmpbusviolationinMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmpbusviolationinMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmpbusviolationinMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbminthbmpbusviolationinMetricsHandler is the Get Handler for PbpbchbminthbmpbusviolationinMetrics
func (s *RestServer) getPbpbchbminthbmpbusviolationinMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmpbusviolationinMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbminthbmpbusviolationoutMetricsAPIRoutes adds routes for PbpbchbminthbmpbusviolationoutMetrics
func (s *RestServer) AddPbpbchbminthbmpbusviolationoutMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbminthbmpbusviolationoutMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbminthbmpbusviolationoutMetricsHandler))
}

// listPbpbchbminthbmpbusviolationoutMetricsHandler is the List Handler for PbpbchbminthbmpbusviolationoutMetrics
func (s *RestServer) listPbpbchbminthbmpbusviolationoutMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmpbusviolationoutMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmpbusviolationoutMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbminthbmpbusviolationoutMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmpbusviolationoutMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmpbusviolationoutMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmpbusviolationoutMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbminthbmpbusviolationoutMetricsHandler is the Get Handler for PbpbchbminthbmpbusviolationoutMetrics
func (s *RestServer) getPbpbchbminthbmpbusviolationoutMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmpbusviolationoutMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcintcreditunderflowMetricsAPIRoutes adds routes for PbpbcintcreditunderflowMetrics
func (s *RestServer) AddPbpbcintcreditunderflowMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcintcreditunderflowMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcintcreditunderflowMetricsHandler))
}

// listPbpbcintcreditunderflowMetricsHandler is the List Handler for PbpbcintcreditunderflowMetrics
func (s *RestServer) listPbpbcintcreditunderflowMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintcreditunderflowMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbcintcreditunderflowMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbcintcreditunderflowMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcintcreditunderflowMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintcreditunderflowMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintcreditunderflowMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcintcreditunderflowMetricsHandler is the Get Handler for PbpbcintcreditunderflowMetrics
func (s *RestServer) getPbpbcintcreditunderflowMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcintcreditunderflowMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcinteccdesc0MetricsAPIRoutes adds routes for Pbpbcinteccdesc0Metrics
func (s *RestServer) AddPbpbcinteccdesc0MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcinteccdesc0MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcinteccdesc0MetricsHandler))
}

// listPbpbcinteccdesc0MetricsHandler is the List Handler for Pbpbcinteccdesc0Metrics
func (s *RestServer) listPbpbcinteccdesc0MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcinteccdesc0MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcinteccdesc0Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcinteccdesc0MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcinteccdesc0Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcinteccdesc0MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcinteccdesc0MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcinteccdesc0MetricsHandler is the Get Handler for Pbpbcinteccdesc0Metrics
func (s *RestServer) getPbpbcinteccdesc0MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcinteccdesc0Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcinteccdesc1MetricsAPIRoutes adds routes for Pbpbcinteccdesc1Metrics
func (s *RestServer) AddPbpbcinteccdesc1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcinteccdesc1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcinteccdesc1MetricsHandler))
}

// listPbpbcinteccdesc1MetricsHandler is the List Handler for Pbpbcinteccdesc1Metrics
func (s *RestServer) listPbpbcinteccdesc1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcinteccdesc1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcinteccdesc1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcinteccdesc1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcinteccdesc1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcinteccdesc1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcinteccdesc1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcinteccdesc1MetricsHandler is the Get Handler for Pbpbcinteccdesc1Metrics
func (s *RestServer) getPbpbcinteccdesc1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcinteccdesc1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcinteccfc0MetricsAPIRoutes adds routes for Pbpbcinteccfc0Metrics
func (s *RestServer) AddPbpbcinteccfc0MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcinteccfc0MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcinteccfc0MetricsHandler))
}

// listPbpbcinteccfc0MetricsHandler is the List Handler for Pbpbcinteccfc0Metrics
func (s *RestServer) listPbpbcinteccfc0MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcinteccfc0MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcinteccfc0Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcinteccfc0MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcinteccfc0Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcinteccfc0MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcinteccfc0MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcinteccfc0MetricsHandler is the Get Handler for Pbpbcinteccfc0Metrics
func (s *RestServer) getPbpbcinteccfc0MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcinteccfc0Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcinteccfc1MetricsAPIRoutes adds routes for Pbpbcinteccfc1Metrics
func (s *RestServer) AddPbpbcinteccfc1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcinteccfc1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcinteccfc1MetricsHandler))
}

// listPbpbcinteccfc1MetricsHandler is the List Handler for Pbpbcinteccfc1Metrics
func (s *RestServer) listPbpbcinteccfc1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcinteccfc1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcinteccfc1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcinteccfc1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcinteccfc1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcinteccfc1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcinteccfc1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcinteccfc1MetricsHandler is the Get Handler for Pbpbcinteccfc1Metrics
func (s *RestServer) getPbpbcinteccfc1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcinteccfc1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcinteccll0MetricsAPIRoutes adds routes for Pbpbcinteccll0Metrics
func (s *RestServer) AddPbpbcinteccll0MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcinteccll0MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcinteccll0MetricsHandler))
}

// listPbpbcinteccll0MetricsHandler is the List Handler for Pbpbcinteccll0Metrics
func (s *RestServer) listPbpbcinteccll0MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcinteccll0MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcinteccll0Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcinteccll0MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcinteccll0Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcinteccll0MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcinteccll0MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcinteccll0MetricsHandler is the Get Handler for Pbpbcinteccll0Metrics
func (s *RestServer) getPbpbcinteccll0MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcinteccll0Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcinteccll1MetricsAPIRoutes adds routes for Pbpbcinteccll1Metrics
func (s *RestServer) AddPbpbcinteccll1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcinteccll1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcinteccll1MetricsHandler))
}

// listPbpbcinteccll1MetricsHandler is the List Handler for Pbpbcinteccll1Metrics
func (s *RestServer) listPbpbcinteccll1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcinteccll1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcinteccll1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcinteccll1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcinteccll1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcinteccll1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcinteccll1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcinteccll1MetricsHandler is the Get Handler for Pbpbcinteccll1Metrics
func (s *RestServer) getPbpbcinteccll1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcinteccll1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcinteccncMetricsAPIRoutes adds routes for PbpbcinteccncMetrics
func (s *RestServer) AddPbpbcinteccncMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcinteccncMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcinteccncMetricsHandler))
}

// listPbpbcinteccncMetricsHandler is the List Handler for PbpbcinteccncMetrics
func (s *RestServer) listPbpbcinteccncMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcinteccncMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbcinteccncMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbcinteccncMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcinteccncMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcinteccncMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcinteccncMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcinteccncMetricsHandler is the Get Handler for PbpbcinteccncMetrics
func (s *RestServer) getPbpbcinteccncMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcinteccncMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcinteccpackMetricsAPIRoutes adds routes for PbpbcinteccpackMetrics
func (s *RestServer) AddPbpbcinteccpackMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcinteccpackMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcinteccpackMetricsHandler))
}

// listPbpbcinteccpackMetricsHandler is the List Handler for PbpbcinteccpackMetrics
func (s *RestServer) listPbpbcinteccpackMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcinteccpackMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbcinteccpackMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbcinteccpackMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcinteccpackMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcinteccpackMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcinteccpackMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcinteccpackMetricsHandler is the Get Handler for PbpbcinteccpackMetrics
func (s *RestServer) getPbpbcinteccpackMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcinteccpackMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcinteccportmoninMetricsAPIRoutes adds routes for PbpbcinteccportmoninMetrics
func (s *RestServer) AddPbpbcinteccportmoninMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcinteccportmoninMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcinteccportmoninMetricsHandler))
}

// listPbpbcinteccportmoninMetricsHandler is the List Handler for PbpbcinteccportmoninMetrics
func (s *RestServer) listPbpbcinteccportmoninMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcinteccportmoninMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbcinteccportmoninMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbcinteccportmoninMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcinteccportmoninMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcinteccportmoninMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcinteccportmoninMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcinteccportmoninMetricsHandler is the Get Handler for PbpbcinteccportmoninMetrics
func (s *RestServer) getPbpbcinteccportmoninMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcinteccportmoninMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcinteccportmonoutMetricsAPIRoutes adds routes for PbpbcinteccportmonoutMetrics
func (s *RestServer) AddPbpbcinteccportmonoutMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcinteccportmonoutMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcinteccportmonoutMetricsHandler))
}

// listPbpbcinteccportmonoutMetricsHandler is the List Handler for PbpbcinteccportmonoutMetrics
func (s *RestServer) listPbpbcinteccportmonoutMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcinteccportmonoutMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbcinteccportmonoutMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbcinteccportmonoutMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcinteccportmonoutMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcinteccportmonoutMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcinteccportmonoutMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcinteccportmonoutMetricsHandler is the Get Handler for PbpbcinteccportmonoutMetrics
func (s *RestServer) getPbpbcinteccportmonoutMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcinteccportmonoutMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcinteccrcMetricsAPIRoutes adds routes for PbpbcinteccrcMetrics
func (s *RestServer) AddPbpbcinteccrcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcinteccrcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcinteccrcMetricsHandler))
}

// listPbpbcinteccrcMetricsHandler is the List Handler for PbpbcinteccrcMetrics
func (s *RestServer) listPbpbcinteccrcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcinteccrcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbcinteccrcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbcinteccrcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcinteccrcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcinteccrcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcinteccrcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcinteccrcMetricsHandler is the Get Handler for PbpbcinteccrcMetrics
func (s *RestServer) getPbpbcinteccrcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcinteccrcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcinteccrwrMetricsAPIRoutes adds routes for PbpbcinteccrwrMetrics
func (s *RestServer) AddPbpbcinteccrwrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcinteccrwrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcinteccrwrMetricsHandler))
}

// listPbpbcinteccrwrMetricsHandler is the List Handler for PbpbcinteccrwrMetrics
func (s *RestServer) listPbpbcinteccrwrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcinteccrwrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbcinteccrwrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbcinteccrwrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcinteccrwrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcinteccrwrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcinteccrwrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcinteccrwrMetricsHandler is the Get Handler for PbpbcinteccrwrMetrics
func (s *RestServer) getPbpbcinteccrwrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcinteccrwrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcinteccschedMetricsAPIRoutes adds routes for PbpbcinteccschedMetrics
func (s *RestServer) AddPbpbcinteccschedMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcinteccschedMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcinteccschedMetricsHandler))
}

// listPbpbcinteccschedMetricsHandler is the List Handler for PbpbcinteccschedMetrics
func (s *RestServer) listPbpbcinteccschedMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcinteccschedMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbcinteccschedMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbcinteccschedMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcinteccschedMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcinteccschedMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcinteccschedMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcinteccschedMetricsHandler is the Get Handler for PbpbcinteccschedMetrics
func (s *RestServer) getPbpbcinteccschedMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcinteccschedMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcinteccsidebandMetricsAPIRoutes adds routes for PbpbcinteccsidebandMetrics
func (s *RestServer) AddPbpbcinteccsidebandMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcinteccsidebandMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcinteccsidebandMetricsHandler))
}

// listPbpbcinteccsidebandMetricsHandler is the List Handler for PbpbcinteccsidebandMetrics
func (s *RestServer) listPbpbcinteccsidebandMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcinteccsidebandMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbcinteccsidebandMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbcinteccsidebandMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcinteccsidebandMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcinteccsidebandMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcinteccsidebandMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcinteccsidebandMetricsHandler is the Get Handler for PbpbcinteccsidebandMetrics
func (s *RestServer) getPbpbcinteccsidebandMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcinteccsidebandMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcinteccucMetricsAPIRoutes adds routes for PbpbcinteccucMetrics
func (s *RestServer) AddPbpbcinteccucMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcinteccucMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcinteccucMetricsHandler))
}

// listPbpbcinteccucMetricsHandler is the List Handler for PbpbcinteccucMetrics
func (s *RestServer) listPbpbcinteccucMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcinteccucMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbcinteccucMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbcinteccucMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcinteccucMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcinteccucMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcinteccucMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcinteccucMetricsHandler is the Get Handler for PbpbcinteccucMetrics
func (s *RestServer) getPbpbcinteccucMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcinteccucMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcintpbusviolationinMetricsAPIRoutes adds routes for PbpbcintpbusviolationinMetrics
func (s *RestServer) AddPbpbcintpbusviolationinMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcintpbusviolationinMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcintpbusviolationinMetricsHandler))
}

// listPbpbcintpbusviolationinMetricsHandler is the List Handler for PbpbcintpbusviolationinMetrics
func (s *RestServer) listPbpbcintpbusviolationinMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintpbusviolationinMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbcintpbusviolationinMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbcintpbusviolationinMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcintpbusviolationinMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintpbusviolationinMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintpbusviolationinMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcintpbusviolationinMetricsHandler is the Get Handler for PbpbcintpbusviolationinMetrics
func (s *RestServer) getPbpbcintpbusviolationinMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcintpbusviolationinMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcintpbusviolationoutMetricsAPIRoutes adds routes for PbpbcintpbusviolationoutMetrics
func (s *RestServer) AddPbpbcintpbusviolationoutMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcintpbusviolationoutMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcintpbusviolationoutMetricsHandler))
}

// listPbpbcintpbusviolationoutMetricsHandler is the List Handler for PbpbcintpbusviolationoutMetrics
func (s *RestServer) listPbpbcintpbusviolationoutMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintpbusviolationoutMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbcintpbusviolationoutMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbcintpbusviolationoutMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcintpbusviolationoutMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintpbusviolationoutMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintpbusviolationoutMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcintpbusviolationoutMetricsHandler is the Get Handler for PbpbcintpbusviolationoutMetrics
func (s *RestServer) getPbpbcintpbusviolationoutMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcintpbusviolationoutMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcintrplMetricsAPIRoutes adds routes for PbpbcintrplMetrics
func (s *RestServer) AddPbpbcintrplMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcintrplMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcintrplMetricsHandler))
}

// listPbpbcintrplMetricsHandler is the List Handler for PbpbcintrplMetrics
func (s *RestServer) listPbpbcintrplMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintrplMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbcintrplMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbcintrplMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcintrplMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintrplMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintrplMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcintrplMetricsHandler is the Get Handler for PbpbcintrplMetrics
func (s *RestServer) getPbpbcintrplMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcintrplMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcintwrite0MetricsAPIRoutes adds routes for Pbpbcintwrite0Metrics
func (s *RestServer) AddPbpbcintwrite0MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcintwrite0MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcintwrite0MetricsHandler))
}

// listPbpbcintwrite0MetricsHandler is the List Handler for Pbpbcintwrite0Metrics
func (s *RestServer) listPbpbcintwrite0MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintwrite0MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcintwrite0Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcintwrite0MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcintwrite0Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintwrite0MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintwrite0MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcintwrite0MetricsHandler is the Get Handler for Pbpbcintwrite0Metrics
func (s *RestServer) getPbpbcintwrite0MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcintwrite0Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcintwrite10MetricsAPIRoutes adds routes for Pbpbcintwrite10Metrics
func (s *RestServer) AddPbpbcintwrite10MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcintwrite10MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcintwrite10MetricsHandler))
}

// listPbpbcintwrite10MetricsHandler is the List Handler for Pbpbcintwrite10Metrics
func (s *RestServer) listPbpbcintwrite10MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintwrite10MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcintwrite10Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcintwrite10MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcintwrite10Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintwrite10MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintwrite10MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcintwrite10MetricsHandler is the Get Handler for Pbpbcintwrite10Metrics
func (s *RestServer) getPbpbcintwrite10MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcintwrite10Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcintwrite11MetricsAPIRoutes adds routes for Pbpbcintwrite11Metrics
func (s *RestServer) AddPbpbcintwrite11MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcintwrite11MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcintwrite11MetricsHandler))
}

// listPbpbcintwrite11MetricsHandler is the List Handler for Pbpbcintwrite11Metrics
func (s *RestServer) listPbpbcintwrite11MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintwrite11MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcintwrite11Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcintwrite11MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcintwrite11Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintwrite11MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintwrite11MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcintwrite11MetricsHandler is the Get Handler for Pbpbcintwrite11Metrics
func (s *RestServer) getPbpbcintwrite11MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcintwrite11Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcintwrite1MetricsAPIRoutes adds routes for Pbpbcintwrite1Metrics
func (s *RestServer) AddPbpbcintwrite1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcintwrite1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcintwrite1MetricsHandler))
}

// listPbpbcintwrite1MetricsHandler is the List Handler for Pbpbcintwrite1Metrics
func (s *RestServer) listPbpbcintwrite1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintwrite1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcintwrite1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcintwrite1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcintwrite1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintwrite1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintwrite1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcintwrite1MetricsHandler is the Get Handler for Pbpbcintwrite1Metrics
func (s *RestServer) getPbpbcintwrite1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcintwrite1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcintwrite2MetricsAPIRoutes adds routes for Pbpbcintwrite2Metrics
func (s *RestServer) AddPbpbcintwrite2MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcintwrite2MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcintwrite2MetricsHandler))
}

// listPbpbcintwrite2MetricsHandler is the List Handler for Pbpbcintwrite2Metrics
func (s *RestServer) listPbpbcintwrite2MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintwrite2MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcintwrite2Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcintwrite2MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcintwrite2Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintwrite2MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintwrite2MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcintwrite2MetricsHandler is the Get Handler for Pbpbcintwrite2Metrics
func (s *RestServer) getPbpbcintwrite2MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcintwrite2Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcintwrite3MetricsAPIRoutes adds routes for Pbpbcintwrite3Metrics
func (s *RestServer) AddPbpbcintwrite3MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcintwrite3MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcintwrite3MetricsHandler))
}

// listPbpbcintwrite3MetricsHandler is the List Handler for Pbpbcintwrite3Metrics
func (s *RestServer) listPbpbcintwrite3MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintwrite3MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcintwrite3Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcintwrite3MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcintwrite3Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintwrite3MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintwrite3MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcintwrite3MetricsHandler is the Get Handler for Pbpbcintwrite3Metrics
func (s *RestServer) getPbpbcintwrite3MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcintwrite3Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcintwrite4MetricsAPIRoutes adds routes for Pbpbcintwrite4Metrics
func (s *RestServer) AddPbpbcintwrite4MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcintwrite4MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcintwrite4MetricsHandler))
}

// listPbpbcintwrite4MetricsHandler is the List Handler for Pbpbcintwrite4Metrics
func (s *RestServer) listPbpbcintwrite4MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintwrite4MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcintwrite4Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcintwrite4MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcintwrite4Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintwrite4MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintwrite4MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcintwrite4MetricsHandler is the Get Handler for Pbpbcintwrite4Metrics
func (s *RestServer) getPbpbcintwrite4MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcintwrite4Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcintwrite5MetricsAPIRoutes adds routes for Pbpbcintwrite5Metrics
func (s *RestServer) AddPbpbcintwrite5MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcintwrite5MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcintwrite5MetricsHandler))
}

// listPbpbcintwrite5MetricsHandler is the List Handler for Pbpbcintwrite5Metrics
func (s *RestServer) listPbpbcintwrite5MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintwrite5MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcintwrite5Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcintwrite5MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcintwrite5Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintwrite5MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintwrite5MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcintwrite5MetricsHandler is the Get Handler for Pbpbcintwrite5Metrics
func (s *RestServer) getPbpbcintwrite5MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcintwrite5Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcintwrite6MetricsAPIRoutes adds routes for Pbpbcintwrite6Metrics
func (s *RestServer) AddPbpbcintwrite6MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcintwrite6MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcintwrite6MetricsHandler))
}

// listPbpbcintwrite6MetricsHandler is the List Handler for Pbpbcintwrite6Metrics
func (s *RestServer) listPbpbcintwrite6MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintwrite6MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcintwrite6Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcintwrite6MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcintwrite6Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintwrite6MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintwrite6MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcintwrite6MetricsHandler is the Get Handler for Pbpbcintwrite6Metrics
func (s *RestServer) getPbpbcintwrite6MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcintwrite6Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcintwrite7MetricsAPIRoutes adds routes for Pbpbcintwrite7Metrics
func (s *RestServer) AddPbpbcintwrite7MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcintwrite7MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcintwrite7MetricsHandler))
}

// listPbpbcintwrite7MetricsHandler is the List Handler for Pbpbcintwrite7Metrics
func (s *RestServer) listPbpbcintwrite7MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintwrite7MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcintwrite7Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcintwrite7MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcintwrite7Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintwrite7MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintwrite7MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcintwrite7MetricsHandler is the Get Handler for Pbpbcintwrite7Metrics
func (s *RestServer) getPbpbcintwrite7MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcintwrite7Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcintwrite8MetricsAPIRoutes adds routes for Pbpbcintwrite8Metrics
func (s *RestServer) AddPbpbcintwrite8MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcintwrite8MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcintwrite8MetricsHandler))
}

// listPbpbcintwrite8MetricsHandler is the List Handler for Pbpbcintwrite8Metrics
func (s *RestServer) listPbpbcintwrite8MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintwrite8MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcintwrite8Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcintwrite8MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcintwrite8Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintwrite8MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintwrite8MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcintwrite8MetricsHandler is the Get Handler for Pbpbcintwrite8Metrics
func (s *RestServer) getPbpbcintwrite8MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcintwrite8Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbcintwrite9MetricsAPIRoutes adds routes for Pbpbcintwrite9Metrics
func (s *RestServer) AddPbpbcintwrite9MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbcintwrite9MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbcintwrite9MetricsHandler))
}

// listPbpbcintwrite9MetricsHandler is the List Handler for Pbpbcintwrite9Metrics
func (s *RestServer) listPbpbcintwrite9MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintwrite9MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pbpbcintwrite9Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pbpbcintwrite9MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pbpbcintwrite9Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintwrite9MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintwrite9MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbcintwrite9MetricsHandler is the Get Handler for Pbpbcintwrite9Metrics
func (s *RestServer) getPbpbcintwrite9MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pbpbcintwrite9Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrmpu0interrMetricsAPIRoutes adds routes for Pcrmpu0interrMetrics
func (s *RestServer) AddPcrmpu0interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrmpu0interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrmpu0interrMetricsHandler))
}

// listPcrmpu0interrMetricsHandler is the List Handler for Pcrmpu0interrMetrics
func (s *RestServer) listPcrmpu0interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrmpu0interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrmpu0interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrmpu0interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrmpu0interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrmpu0interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrmpu0interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrmpu0interrMetricsHandler is the Get Handler for Pcrmpu0interrMetrics
func (s *RestServer) getPcrmpu0interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrmpu0interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrmpu0intinfoMetricsAPIRoutes adds routes for Pcrmpu0intinfoMetrics
func (s *RestServer) AddPcrmpu0intinfoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrmpu0intinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrmpu0intinfoMetricsHandler))
}

// listPcrmpu0intinfoMetricsHandler is the List Handler for Pcrmpu0intinfoMetrics
func (s *RestServer) listPcrmpu0intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrmpu0intinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrmpu0intinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrmpu0intinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrmpu0intinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrmpu0intinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrmpu0intinfoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrmpu0intinfoMetricsHandler is the Get Handler for Pcrmpu0intinfoMetrics
func (s *RestServer) getPcrmpu0intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrmpu0intinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrmpu1interrMetricsAPIRoutes adds routes for Pcrmpu1interrMetrics
func (s *RestServer) AddPcrmpu1interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrmpu1interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrmpu1interrMetricsHandler))
}

// listPcrmpu1interrMetricsHandler is the List Handler for Pcrmpu1interrMetrics
func (s *RestServer) listPcrmpu1interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrmpu1interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrmpu1interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrmpu1interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrmpu1interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrmpu1interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrmpu1interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrmpu1interrMetricsHandler is the Get Handler for Pcrmpu1interrMetrics
func (s *RestServer) getPcrmpu1interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrmpu1interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrmpu1intinfoMetricsAPIRoutes adds routes for Pcrmpu1intinfoMetrics
func (s *RestServer) AddPcrmpu1intinfoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrmpu1intinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrmpu1intinfoMetricsHandler))
}

// listPcrmpu1intinfoMetricsHandler is the List Handler for Pcrmpu1intinfoMetrics
func (s *RestServer) listPcrmpu1intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrmpu1intinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrmpu1intinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrmpu1intinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrmpu1intinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrmpu1intinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrmpu1intinfoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrmpu1intinfoMetricsHandler is the Get Handler for Pcrmpu1intinfoMetrics
func (s *RestServer) getPcrmpu1intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrmpu1intinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrmpu2interrMetricsAPIRoutes adds routes for Pcrmpu2interrMetrics
func (s *RestServer) AddPcrmpu2interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrmpu2interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrmpu2interrMetricsHandler))
}

// listPcrmpu2interrMetricsHandler is the List Handler for Pcrmpu2interrMetrics
func (s *RestServer) listPcrmpu2interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrmpu2interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrmpu2interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrmpu2interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrmpu2interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrmpu2interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrmpu2interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrmpu2interrMetricsHandler is the Get Handler for Pcrmpu2interrMetrics
func (s *RestServer) getPcrmpu2interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrmpu2interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrmpu2intinfoMetricsAPIRoutes adds routes for Pcrmpu2intinfoMetrics
func (s *RestServer) AddPcrmpu2intinfoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrmpu2intinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrmpu2intinfoMetricsHandler))
}

// listPcrmpu2intinfoMetricsHandler is the List Handler for Pcrmpu2intinfoMetrics
func (s *RestServer) listPcrmpu2intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrmpu2intinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrmpu2intinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrmpu2intinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrmpu2intinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrmpu2intinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrmpu2intinfoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrmpu2intinfoMetricsHandler is the Get Handler for Pcrmpu2intinfoMetrics
func (s *RestServer) getPcrmpu2intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrmpu2intinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrmpu3interrMetricsAPIRoutes adds routes for Pcrmpu3interrMetrics
func (s *RestServer) AddPcrmpu3interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrmpu3interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrmpu3interrMetricsHandler))
}

// listPcrmpu3interrMetricsHandler is the List Handler for Pcrmpu3interrMetrics
func (s *RestServer) listPcrmpu3interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrmpu3interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrmpu3interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrmpu3interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrmpu3interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrmpu3interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrmpu3interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrmpu3interrMetricsHandler is the Get Handler for Pcrmpu3interrMetrics
func (s *RestServer) getPcrmpu3interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrmpu3interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrmpu3intinfoMetricsAPIRoutes adds routes for Pcrmpu3intinfoMetrics
func (s *RestServer) AddPcrmpu3intinfoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrmpu3intinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrmpu3intinfoMetricsHandler))
}

// listPcrmpu3intinfoMetricsHandler is the List Handler for Pcrmpu3intinfoMetrics
func (s *RestServer) listPcrmpu3intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrmpu3intinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrmpu3intinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrmpu3intinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrmpu3intinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrmpu3intinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrmpu3intinfoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrmpu3intinfoMetricsHandler is the Get Handler for Pcrmpu3intinfoMetrics
func (s *RestServer) getPcrmpu3intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrmpu3intinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrmpu4interrMetricsAPIRoutes adds routes for Pcrmpu4interrMetrics
func (s *RestServer) AddPcrmpu4interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrmpu4interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrmpu4interrMetricsHandler))
}

// listPcrmpu4interrMetricsHandler is the List Handler for Pcrmpu4interrMetrics
func (s *RestServer) listPcrmpu4interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrmpu4interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrmpu4interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrmpu4interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrmpu4interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrmpu4interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrmpu4interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrmpu4interrMetricsHandler is the Get Handler for Pcrmpu4interrMetrics
func (s *RestServer) getPcrmpu4interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrmpu4interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrmpu4intinfoMetricsAPIRoutes adds routes for Pcrmpu4intinfoMetrics
func (s *RestServer) AddPcrmpu4intinfoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrmpu4intinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrmpu4intinfoMetricsHandler))
}

// listPcrmpu4intinfoMetricsHandler is the List Handler for Pcrmpu4intinfoMetrics
func (s *RestServer) listPcrmpu4intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrmpu4intinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrmpu4intinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrmpu4intinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrmpu4intinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrmpu4intinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrmpu4intinfoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrmpu4intinfoMetricsHandler is the Get Handler for Pcrmpu4intinfoMetrics
func (s *RestServer) getPcrmpu4intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrmpu4intinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrmpu5interrMetricsAPIRoutes adds routes for Pcrmpu5interrMetrics
func (s *RestServer) AddPcrmpu5interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrmpu5interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrmpu5interrMetricsHandler))
}

// listPcrmpu5interrMetricsHandler is the List Handler for Pcrmpu5interrMetrics
func (s *RestServer) listPcrmpu5interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrmpu5interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrmpu5interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrmpu5interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrmpu5interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrmpu5interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrmpu5interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrmpu5interrMetricsHandler is the Get Handler for Pcrmpu5interrMetrics
func (s *RestServer) getPcrmpu5interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrmpu5interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrmpu5intinfoMetricsAPIRoutes adds routes for Pcrmpu5intinfoMetrics
func (s *RestServer) AddPcrmpu5intinfoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrmpu5intinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrmpu5intinfoMetricsHandler))
}

// listPcrmpu5intinfoMetricsHandler is the List Handler for Pcrmpu5intinfoMetrics
func (s *RestServer) listPcrmpu5intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrmpu5intinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrmpu5intinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrmpu5intinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrmpu5intinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrmpu5intinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrmpu5intinfoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrmpu5intinfoMetricsHandler is the Get Handler for Pcrmpu5intinfoMetrics
func (s *RestServer) getPcrmpu5intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrmpu5intinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrmpu6interrMetricsAPIRoutes adds routes for Pcrmpu6interrMetrics
func (s *RestServer) AddPcrmpu6interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrmpu6interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrmpu6interrMetricsHandler))
}

// listPcrmpu6interrMetricsHandler is the List Handler for Pcrmpu6interrMetrics
func (s *RestServer) listPcrmpu6interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrmpu6interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrmpu6interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrmpu6interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrmpu6interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrmpu6interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrmpu6interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrmpu6interrMetricsHandler is the Get Handler for Pcrmpu6interrMetrics
func (s *RestServer) getPcrmpu6interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrmpu6interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrmpu6intinfoMetricsAPIRoutes adds routes for Pcrmpu6intinfoMetrics
func (s *RestServer) AddPcrmpu6intinfoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrmpu6intinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrmpu6intinfoMetricsHandler))
}

// listPcrmpu6intinfoMetricsHandler is the List Handler for Pcrmpu6intinfoMetrics
func (s *RestServer) listPcrmpu6intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrmpu6intinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrmpu6intinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrmpu6intinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrmpu6intinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrmpu6intinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrmpu6intinfoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrmpu6intinfoMetricsHandler is the Get Handler for Pcrmpu6intinfoMetrics
func (s *RestServer) getPcrmpu6intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrmpu6intinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrmpu7interrMetricsAPIRoutes adds routes for Pcrmpu7interrMetrics
func (s *RestServer) AddPcrmpu7interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrmpu7interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrmpu7interrMetricsHandler))
}

// listPcrmpu7interrMetricsHandler is the List Handler for Pcrmpu7interrMetrics
func (s *RestServer) listPcrmpu7interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrmpu7interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrmpu7interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrmpu7interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrmpu7interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrmpu7interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrmpu7interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrmpu7interrMetricsHandler is the Get Handler for Pcrmpu7interrMetrics
func (s *RestServer) getPcrmpu7interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrmpu7interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrmpu7intinfoMetricsAPIRoutes adds routes for Pcrmpu7intinfoMetrics
func (s *RestServer) AddPcrmpu7intinfoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrmpu7intinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrmpu7intinfoMetricsHandler))
}

// listPcrmpu7intinfoMetricsHandler is the List Handler for Pcrmpu7intinfoMetrics
func (s *RestServer) listPcrmpu7intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrmpu7intinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrmpu7intinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrmpu7intinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrmpu7intinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrmpu7intinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrmpu7intinfoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrmpu7intinfoMetricsHandler is the Get Handler for Pcrmpu7intinfoMetrics
func (s *RestServer) getPcrmpu7intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrmpu7intinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrte0interrMetricsAPIRoutes adds routes for Pcrte0interrMetrics
func (s *RestServer) AddPcrte0interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrte0interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrte0interrMetricsHandler))
}

// listPcrte0interrMetricsHandler is the List Handler for Pcrte0interrMetrics
func (s *RestServer) listPcrte0interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrte0interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrte0interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrte0interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrte0interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrte0interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrte0interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrte0interrMetricsHandler is the Get Handler for Pcrte0interrMetrics
func (s *RestServer) getPcrte0interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrte0interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrte1interrMetricsAPIRoutes adds routes for Pcrte1interrMetrics
func (s *RestServer) AddPcrte1interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrte1interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrte1interrMetricsHandler))
}

// listPcrte1interrMetricsHandler is the List Handler for Pcrte1interrMetrics
func (s *RestServer) listPcrte1interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrte1interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrte1interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrte1interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrte1interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrte1interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrte1interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrte1interrMetricsHandler is the Get Handler for Pcrte1interrMetrics
func (s *RestServer) getPcrte1interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrte1interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrte2interrMetricsAPIRoutes adds routes for Pcrte2interrMetrics
func (s *RestServer) AddPcrte2interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrte2interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrte2interrMetricsHandler))
}

// listPcrte2interrMetricsHandler is the List Handler for Pcrte2interrMetrics
func (s *RestServer) listPcrte2interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrte2interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrte2interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrte2interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrte2interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrte2interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrte2interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrte2interrMetricsHandler is the Get Handler for Pcrte2interrMetrics
func (s *RestServer) getPcrte2interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrte2interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrte3interrMetricsAPIRoutes adds routes for Pcrte3interrMetrics
func (s *RestServer) AddPcrte3interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrte3interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrte3interrMetricsHandler))
}

// listPcrte3interrMetricsHandler is the List Handler for Pcrte3interrMetrics
func (s *RestServer) listPcrte3interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrte3interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrte3interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrte3interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrte3interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrte3interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrte3interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrte3interrMetricsHandler is the Get Handler for Pcrte3interrMetrics
func (s *RestServer) getPcrte3interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrte3interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrte4interrMetricsAPIRoutes adds routes for Pcrte4interrMetrics
func (s *RestServer) AddPcrte4interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrte4interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrte4interrMetricsHandler))
}

// listPcrte4interrMetricsHandler is the List Handler for Pcrte4interrMetrics
func (s *RestServer) listPcrte4interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrte4interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrte4interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrte4interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrte4interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrte4interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrte4interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrte4interrMetricsHandler is the Get Handler for Pcrte4interrMetrics
func (s *RestServer) getPcrte4interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrte4interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrte5interrMetricsAPIRoutes adds routes for Pcrte5interrMetrics
func (s *RestServer) AddPcrte5interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrte5interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrte5interrMetricsHandler))
}

// listPcrte5interrMetricsHandler is the List Handler for Pcrte5interrMetrics
func (s *RestServer) listPcrte5interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrte5interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrte5interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrte5interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrte5interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrte5interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrte5interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrte5interrMetricsHandler is the Get Handler for Pcrte5interrMetrics
func (s *RestServer) getPcrte5interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrte5interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrte6interrMetricsAPIRoutes adds routes for Pcrte6interrMetrics
func (s *RestServer) AddPcrte6interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrte6interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrte6interrMetricsHandler))
}

// listPcrte6interrMetricsHandler is the List Handler for Pcrte6interrMetrics
func (s *RestServer) listPcrte6interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrte6interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrte6interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrte6interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrte6interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrte6interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrte6interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrte6interrMetricsHandler is the Get Handler for Pcrte6interrMetrics
func (s *RestServer) getPcrte6interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrte6interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPcrte7interrMetricsAPIRoutes adds routes for Pcrte7interrMetrics
func (s *RestServer) AddPcrte7interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPcrte7interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPcrte7interrMetricsHandler))
}

// listPcrte7interrMetricsHandler is the List Handler for Pcrte7interrMetrics
func (s *RestServer) listPcrte7interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPcrte7interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pcrte7interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pcrte7interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pcrte7interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPcrte7interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPcrte7interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPcrte7interrMetricsHandler is the Get Handler for Pcrte7interrMetrics
func (s *RestServer) getPcrte7interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pcrte7interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctmpu0interrMetricsAPIRoutes adds routes for Pctmpu0interrMetrics
func (s *RestServer) AddPctmpu0interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctmpu0interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctmpu0interrMetricsHandler))
}

// listPctmpu0interrMetricsHandler is the List Handler for Pctmpu0interrMetrics
func (s *RestServer) listPctmpu0interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctmpu0interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctmpu0interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctmpu0interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctmpu0interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctmpu0interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctmpu0interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctmpu0interrMetricsHandler is the Get Handler for Pctmpu0interrMetrics
func (s *RestServer) getPctmpu0interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctmpu0interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctmpu0intinfoMetricsAPIRoutes adds routes for Pctmpu0intinfoMetrics
func (s *RestServer) AddPctmpu0intinfoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctmpu0intinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctmpu0intinfoMetricsHandler))
}

// listPctmpu0intinfoMetricsHandler is the List Handler for Pctmpu0intinfoMetrics
func (s *RestServer) listPctmpu0intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctmpu0intinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctmpu0intinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctmpu0intinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctmpu0intinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctmpu0intinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctmpu0intinfoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctmpu0intinfoMetricsHandler is the Get Handler for Pctmpu0intinfoMetrics
func (s *RestServer) getPctmpu0intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctmpu0intinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctmpu1interrMetricsAPIRoutes adds routes for Pctmpu1interrMetrics
func (s *RestServer) AddPctmpu1interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctmpu1interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctmpu1interrMetricsHandler))
}

// listPctmpu1interrMetricsHandler is the List Handler for Pctmpu1interrMetrics
func (s *RestServer) listPctmpu1interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctmpu1interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctmpu1interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctmpu1interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctmpu1interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctmpu1interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctmpu1interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctmpu1interrMetricsHandler is the Get Handler for Pctmpu1interrMetrics
func (s *RestServer) getPctmpu1interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctmpu1interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctmpu1intinfoMetricsAPIRoutes adds routes for Pctmpu1intinfoMetrics
func (s *RestServer) AddPctmpu1intinfoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctmpu1intinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctmpu1intinfoMetricsHandler))
}

// listPctmpu1intinfoMetricsHandler is the List Handler for Pctmpu1intinfoMetrics
func (s *RestServer) listPctmpu1intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctmpu1intinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctmpu1intinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctmpu1intinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctmpu1intinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctmpu1intinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctmpu1intinfoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctmpu1intinfoMetricsHandler is the Get Handler for Pctmpu1intinfoMetrics
func (s *RestServer) getPctmpu1intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctmpu1intinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctmpu2interrMetricsAPIRoutes adds routes for Pctmpu2interrMetrics
func (s *RestServer) AddPctmpu2interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctmpu2interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctmpu2interrMetricsHandler))
}

// listPctmpu2interrMetricsHandler is the List Handler for Pctmpu2interrMetrics
func (s *RestServer) listPctmpu2interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctmpu2interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctmpu2interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctmpu2interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctmpu2interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctmpu2interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctmpu2interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctmpu2interrMetricsHandler is the Get Handler for Pctmpu2interrMetrics
func (s *RestServer) getPctmpu2interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctmpu2interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctmpu2intinfoMetricsAPIRoutes adds routes for Pctmpu2intinfoMetrics
func (s *RestServer) AddPctmpu2intinfoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctmpu2intinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctmpu2intinfoMetricsHandler))
}

// listPctmpu2intinfoMetricsHandler is the List Handler for Pctmpu2intinfoMetrics
func (s *RestServer) listPctmpu2intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctmpu2intinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctmpu2intinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctmpu2intinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctmpu2intinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctmpu2intinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctmpu2intinfoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctmpu2intinfoMetricsHandler is the Get Handler for Pctmpu2intinfoMetrics
func (s *RestServer) getPctmpu2intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctmpu2intinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctmpu3interrMetricsAPIRoutes adds routes for Pctmpu3interrMetrics
func (s *RestServer) AddPctmpu3interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctmpu3interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctmpu3interrMetricsHandler))
}

// listPctmpu3interrMetricsHandler is the List Handler for Pctmpu3interrMetrics
func (s *RestServer) listPctmpu3interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctmpu3interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctmpu3interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctmpu3interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctmpu3interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctmpu3interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctmpu3interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctmpu3interrMetricsHandler is the Get Handler for Pctmpu3interrMetrics
func (s *RestServer) getPctmpu3interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctmpu3interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctmpu3intinfoMetricsAPIRoutes adds routes for Pctmpu3intinfoMetrics
func (s *RestServer) AddPctmpu3intinfoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctmpu3intinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctmpu3intinfoMetricsHandler))
}

// listPctmpu3intinfoMetricsHandler is the List Handler for Pctmpu3intinfoMetrics
func (s *RestServer) listPctmpu3intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctmpu3intinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctmpu3intinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctmpu3intinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctmpu3intinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctmpu3intinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctmpu3intinfoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctmpu3intinfoMetricsHandler is the Get Handler for Pctmpu3intinfoMetrics
func (s *RestServer) getPctmpu3intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctmpu3intinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctmpu4interrMetricsAPIRoutes adds routes for Pctmpu4interrMetrics
func (s *RestServer) AddPctmpu4interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctmpu4interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctmpu4interrMetricsHandler))
}

// listPctmpu4interrMetricsHandler is the List Handler for Pctmpu4interrMetrics
func (s *RestServer) listPctmpu4interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctmpu4interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctmpu4interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctmpu4interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctmpu4interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctmpu4interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctmpu4interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctmpu4interrMetricsHandler is the Get Handler for Pctmpu4interrMetrics
func (s *RestServer) getPctmpu4interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctmpu4interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctmpu4intinfoMetricsAPIRoutes adds routes for Pctmpu4intinfoMetrics
func (s *RestServer) AddPctmpu4intinfoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctmpu4intinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctmpu4intinfoMetricsHandler))
}

// listPctmpu4intinfoMetricsHandler is the List Handler for Pctmpu4intinfoMetrics
func (s *RestServer) listPctmpu4intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctmpu4intinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctmpu4intinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctmpu4intinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctmpu4intinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctmpu4intinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctmpu4intinfoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctmpu4intinfoMetricsHandler is the Get Handler for Pctmpu4intinfoMetrics
func (s *RestServer) getPctmpu4intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctmpu4intinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctmpu5interrMetricsAPIRoutes adds routes for Pctmpu5interrMetrics
func (s *RestServer) AddPctmpu5interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctmpu5interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctmpu5interrMetricsHandler))
}

// listPctmpu5interrMetricsHandler is the List Handler for Pctmpu5interrMetrics
func (s *RestServer) listPctmpu5interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctmpu5interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctmpu5interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctmpu5interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctmpu5interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctmpu5interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctmpu5interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctmpu5interrMetricsHandler is the Get Handler for Pctmpu5interrMetrics
func (s *RestServer) getPctmpu5interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctmpu5interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctmpu5intinfoMetricsAPIRoutes adds routes for Pctmpu5intinfoMetrics
func (s *RestServer) AddPctmpu5intinfoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctmpu5intinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctmpu5intinfoMetricsHandler))
}

// listPctmpu5intinfoMetricsHandler is the List Handler for Pctmpu5intinfoMetrics
func (s *RestServer) listPctmpu5intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctmpu5intinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctmpu5intinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctmpu5intinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctmpu5intinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctmpu5intinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctmpu5intinfoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctmpu5intinfoMetricsHandler is the Get Handler for Pctmpu5intinfoMetrics
func (s *RestServer) getPctmpu5intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctmpu5intinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctmpu6interrMetricsAPIRoutes adds routes for Pctmpu6interrMetrics
func (s *RestServer) AddPctmpu6interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctmpu6interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctmpu6interrMetricsHandler))
}

// listPctmpu6interrMetricsHandler is the List Handler for Pctmpu6interrMetrics
func (s *RestServer) listPctmpu6interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctmpu6interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctmpu6interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctmpu6interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctmpu6interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctmpu6interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctmpu6interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctmpu6interrMetricsHandler is the Get Handler for Pctmpu6interrMetrics
func (s *RestServer) getPctmpu6interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctmpu6interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctmpu6intinfoMetricsAPIRoutes adds routes for Pctmpu6intinfoMetrics
func (s *RestServer) AddPctmpu6intinfoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctmpu6intinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctmpu6intinfoMetricsHandler))
}

// listPctmpu6intinfoMetricsHandler is the List Handler for Pctmpu6intinfoMetrics
func (s *RestServer) listPctmpu6intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctmpu6intinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctmpu6intinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctmpu6intinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctmpu6intinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctmpu6intinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctmpu6intinfoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctmpu6intinfoMetricsHandler is the Get Handler for Pctmpu6intinfoMetrics
func (s *RestServer) getPctmpu6intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctmpu6intinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctmpu7interrMetricsAPIRoutes adds routes for Pctmpu7interrMetrics
func (s *RestServer) AddPctmpu7interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctmpu7interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctmpu7interrMetricsHandler))
}

// listPctmpu7interrMetricsHandler is the List Handler for Pctmpu7interrMetrics
func (s *RestServer) listPctmpu7interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctmpu7interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctmpu7interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctmpu7interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctmpu7interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctmpu7interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctmpu7interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctmpu7interrMetricsHandler is the Get Handler for Pctmpu7interrMetrics
func (s *RestServer) getPctmpu7interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctmpu7interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctmpu7intinfoMetricsAPIRoutes adds routes for Pctmpu7intinfoMetrics
func (s *RestServer) AddPctmpu7intinfoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctmpu7intinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctmpu7intinfoMetricsHandler))
}

// listPctmpu7intinfoMetricsHandler is the List Handler for Pctmpu7intinfoMetrics
func (s *RestServer) listPctmpu7intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctmpu7intinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctmpu7intinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctmpu7intinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctmpu7intinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctmpu7intinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctmpu7intinfoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctmpu7intinfoMetricsHandler is the Get Handler for Pctmpu7intinfoMetrics
func (s *RestServer) getPctmpu7intinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctmpu7intinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctte0interrMetricsAPIRoutes adds routes for Pctte0interrMetrics
func (s *RestServer) AddPctte0interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctte0interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctte0interrMetricsHandler))
}

// listPctte0interrMetricsHandler is the List Handler for Pctte0interrMetrics
func (s *RestServer) listPctte0interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctte0interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctte0interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctte0interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctte0interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctte0interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctte0interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctte0interrMetricsHandler is the Get Handler for Pctte0interrMetrics
func (s *RestServer) getPctte0interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctte0interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctte1interrMetricsAPIRoutes adds routes for Pctte1interrMetrics
func (s *RestServer) AddPctte1interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctte1interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctte1interrMetricsHandler))
}

// listPctte1interrMetricsHandler is the List Handler for Pctte1interrMetrics
func (s *RestServer) listPctte1interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctte1interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctte1interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctte1interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctte1interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctte1interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctte1interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctte1interrMetricsHandler is the Get Handler for Pctte1interrMetrics
func (s *RestServer) getPctte1interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctte1interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctte2interrMetricsAPIRoutes adds routes for Pctte2interrMetrics
func (s *RestServer) AddPctte2interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctte2interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctte2interrMetricsHandler))
}

// listPctte2interrMetricsHandler is the List Handler for Pctte2interrMetrics
func (s *RestServer) listPctte2interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctte2interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctte2interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctte2interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctte2interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctte2interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctte2interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctte2interrMetricsHandler is the Get Handler for Pctte2interrMetrics
func (s *RestServer) getPctte2interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctte2interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctte3interrMetricsAPIRoutes adds routes for Pctte3interrMetrics
func (s *RestServer) AddPctte3interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctte3interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctte3interrMetricsHandler))
}

// listPctte3interrMetricsHandler is the List Handler for Pctte3interrMetrics
func (s *RestServer) listPctte3interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctte3interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctte3interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctte3interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctte3interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctte3interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctte3interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctte3interrMetricsHandler is the Get Handler for Pctte3interrMetrics
func (s *RestServer) getPctte3interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctte3interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctte4interrMetricsAPIRoutes adds routes for Pctte4interrMetrics
func (s *RestServer) AddPctte4interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctte4interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctte4interrMetricsHandler))
}

// listPctte4interrMetricsHandler is the List Handler for Pctte4interrMetrics
func (s *RestServer) listPctte4interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctte4interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctte4interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctte4interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctte4interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctte4interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctte4interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctte4interrMetricsHandler is the Get Handler for Pctte4interrMetrics
func (s *RestServer) getPctte4interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctte4interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctte5interrMetricsAPIRoutes adds routes for Pctte5interrMetrics
func (s *RestServer) AddPctte5interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctte5interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctte5interrMetricsHandler))
}

// listPctte5interrMetricsHandler is the List Handler for Pctte5interrMetrics
func (s *RestServer) listPctte5interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctte5interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctte5interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctte5interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctte5interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctte5interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctte5interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctte5interrMetricsHandler is the Get Handler for Pctte5interrMetrics
func (s *RestServer) getPctte5interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctte5interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctte6interrMetricsAPIRoutes adds routes for Pctte6interrMetrics
func (s *RestServer) AddPctte6interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctte6interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctte6interrMetricsHandler))
}

// listPctte6interrMetricsHandler is the List Handler for Pctte6interrMetrics
func (s *RestServer) listPctte6interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctte6interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctte6interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctte6interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctte6interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctte6interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctte6interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctte6interrMetricsHandler is the Get Handler for Pctte6interrMetrics
func (s *RestServer) getPctte6interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctte6interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPctte7interrMetricsAPIRoutes adds routes for Pctte7interrMetrics
func (s *RestServer) AddPctte7interrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPctte7interrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPctte7interrMetricsHandler))
}

// listPctte7interrMetricsHandler is the List Handler for Pctte7interrMetrics
func (s *RestServer) listPctte7interrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPctte7interrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pctte7interrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pctte7interrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pctte7interrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPctte7interrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPctte7interrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPctte7interrMetricsHandler is the Get Handler for Pctte7interrMetrics
func (s *RestServer) getPctte7interrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pctte7interrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPmpbmintecccol0MetricsAPIRoutes adds routes for Pmpbmintecccol0Metrics
func (s *RestServer) AddPmpbmintecccol0MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPmpbmintecccol0MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPmpbmintecccol0MetricsHandler))
}

// listPmpbmintecccol0MetricsHandler is the List Handler for Pmpbmintecccol0Metrics
func (s *RestServer) listPmpbmintecccol0MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPmpbmintecccol0MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pmpbmintecccol0Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pmpbmintecccol0MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pmpbmintecccol0Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPmpbmintecccol0MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPmpbmintecccol0MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPmpbmintecccol0MetricsHandler is the Get Handler for Pmpbmintecccol0Metrics
func (s *RestServer) getPmpbmintecccol0MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pmpbmintecccol0Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPmpbmintecccol1MetricsAPIRoutes adds routes for Pmpbmintecccol1Metrics
func (s *RestServer) AddPmpbmintecccol1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPmpbmintecccol1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPmpbmintecccol1MetricsHandler))
}

// listPmpbmintecccol1MetricsHandler is the List Handler for Pmpbmintecccol1Metrics
func (s *RestServer) listPmpbmintecccol1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPmpbmintecccol1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pmpbmintecccol1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pmpbmintecccol1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pmpbmintecccol1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPmpbmintecccol1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPmpbmintecccol1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPmpbmintecccol1MetricsHandler is the Get Handler for Pmpbmintecccol1Metrics
func (s *RestServer) getPmpbmintecccol1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pmpbmintecccol1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPmpbmintecccol2MetricsAPIRoutes adds routes for Pmpbmintecccol2Metrics
func (s *RestServer) AddPmpbmintecccol2MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPmpbmintecccol2MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPmpbmintecccol2MetricsHandler))
}

// listPmpbmintecccol2MetricsHandler is the List Handler for Pmpbmintecccol2Metrics
func (s *RestServer) listPmpbmintecccol2MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPmpbmintecccol2MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pmpbmintecccol2Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pmpbmintecccol2MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pmpbmintecccol2Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPmpbmintecccol2MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPmpbmintecccol2MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPmpbmintecccol2MetricsHandler is the Get Handler for Pmpbmintecccol2Metrics
func (s *RestServer) getPmpbmintecccol2MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pmpbmintecccol2Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPmpbmintecccol3MetricsAPIRoutes adds routes for Pmpbmintecccol3Metrics
func (s *RestServer) AddPmpbmintecccol3MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPmpbmintecccol3MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPmpbmintecccol3MetricsHandler))
}

// listPmpbmintecccol3MetricsHandler is the List Handler for Pmpbmintecccol3Metrics
func (s *RestServer) listPmpbmintecccol3MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPmpbmintecccol3MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pmpbmintecccol3Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pmpbmintecccol3MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pmpbmintecccol3Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPmpbmintecccol3MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPmpbmintecccol3MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPmpbmintecccol3MetricsHandler is the Get Handler for Pmpbmintecccol3Metrics
func (s *RestServer) getPmpbmintecccol3MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pmpbmintecccol3Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPmpbmintecccol4MetricsAPIRoutes adds routes for Pmpbmintecccol4Metrics
func (s *RestServer) AddPmpbmintecccol4MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPmpbmintecccol4MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPmpbmintecccol4MetricsHandler))
}

// listPmpbmintecccol4MetricsHandler is the List Handler for Pmpbmintecccol4Metrics
func (s *RestServer) listPmpbmintecccol4MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPmpbmintecccol4MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pmpbmintecccol4Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pmpbmintecccol4MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pmpbmintecccol4Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPmpbmintecccol4MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPmpbmintecccol4MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPmpbmintecccol4MetricsHandler is the Get Handler for Pmpbmintecccol4Metrics
func (s *RestServer) getPmpbmintecccol4MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pmpbmintecccol4Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPtptptdintgrp1MetricsAPIRoutes adds routes for Ptptptdintgrp1Metrics
func (s *RestServer) AddPtptptdintgrp1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPtptptdintgrp1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPtptptdintgrp1MetricsHandler))
}

// listPtptptdintgrp1MetricsHandler is the List Handler for Ptptptdintgrp1Metrics
func (s *RestServer) listPtptptdintgrp1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPtptptdintgrp1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Ptptptdintgrp1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Ptptptdintgrp1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Ptptptdintgrp1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPtptptdintgrp1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPtptptdintgrp1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPtptptdintgrp1MetricsHandler is the Get Handler for Ptptptdintgrp1Metrics
func (s *RestServer) getPtptptdintgrp1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Ptptptdintgrp1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPtptptdintgrp2MetricsAPIRoutes adds routes for Ptptptdintgrp2Metrics
func (s *RestServer) AddPtptptdintgrp2MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPtptptdintgrp2MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPtptptdintgrp2MetricsHandler))
}

// listPtptptdintgrp2MetricsHandler is the List Handler for Ptptptdintgrp2Metrics
func (s *RestServer) listPtptptdintgrp2MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPtptptdintgrp2MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Ptptptdintgrp2Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Ptptptdintgrp2MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Ptptptdintgrp2Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPtptptdintgrp2MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPtptptdintgrp2MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPtptptdintgrp2MetricsHandler is the Get Handler for Ptptptdintgrp2Metrics
func (s *RestServer) getPtptptdintgrp2MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Ptptptdintgrp2Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPtptptdintintfMetricsAPIRoutes adds routes for PtptptdintintfMetrics
func (s *RestServer) AddPtptptdintintfMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPtptptdintintfMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPtptptdintintfMetricsHandler))
}

// listPtptptdintintfMetricsHandler is the List Handler for PtptptdintintfMetrics
func (s *RestServer) listPtptptdintintfMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPtptptdintintfMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PtptptdintintfMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PtptptdintintfMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PtptptdintintfMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPtptptdintintfMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPtptptdintintfMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPtptptdintintfMetricsHandler is the Get Handler for PtptptdintintfMetrics
func (s *RestServer) getPtptptdintintfMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PtptptdintintfMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddSsepicsintbadaddrMetricsAPIRoutes adds routes for SsepicsintbadaddrMetrics
func (s *RestServer) AddSsepicsintbadaddrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getSsepicsintbadaddrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listSsepicsintbadaddrMetricsHandler))
}

// listSsepicsintbadaddrMetricsHandler is the List Handler for SsepicsintbadaddrMetrics
func (s *RestServer) listSsepicsintbadaddrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsepicsintbadaddrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsepicsintbadaddrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("SsepicsintbadaddrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsepicsintbadaddrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsepicsintbadaddrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsepicsintbadaddrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getSsepicsintbadaddrMetricsHandler is the Get Handler for SsepicsintbadaddrMetrics
func (s *RestServer) getSsepicsintbadaddrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsepicsintbadaddrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddSsepicsintbgMetricsAPIRoutes adds routes for SsepicsintbgMetrics
func (s *RestServer) AddSsepicsintbgMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getSsepicsintbgMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listSsepicsintbgMetricsHandler))
}

// listSsepicsintbgMetricsHandler is the List Handler for SsepicsintbgMetrics
func (s *RestServer) listSsepicsintbgMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsepicsintbgMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsepicsintbgMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("SsepicsintbgMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsepicsintbgMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsepicsintbgMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsepicsintbgMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getSsepicsintbgMetricsHandler is the Get Handler for SsepicsintbgMetrics
func (s *RestServer) getSsepicsintbgMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsepicsintbgMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddSsepicsintpicsMetricsAPIRoutes adds routes for SsepicsintpicsMetrics
func (s *RestServer) AddSsepicsintpicsMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getSsepicsintpicsMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listSsepicsintpicsMetricsHandler))
}

// listSsepicsintpicsMetricsHandler is the List Handler for SsepicsintpicsMetrics
func (s *RestServer) listSsepicsintpicsMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsepicsintpicsMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsepicsintpicsMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("SsepicsintpicsMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsepicsintpicsMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsepicsintpicsMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsepicsintpicsMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getSsepicsintpicsMetricsHandler is the Get Handler for SsepicsintpicsMetrics
func (s *RestServer) getSsepicsintpicsMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsepicsintpicsMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddSsepicspiccintpiccMetricsAPIRoutes adds routes for SsepicspiccintpiccMetrics
func (s *RestServer) AddSsepicspiccintpiccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getSsepicspiccintpiccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listSsepicspiccintpiccMetricsHandler))
}

// listSsepicspiccintpiccMetricsHandler is the List Handler for SsepicspiccintpiccMetrics
func (s *RestServer) listSsepicspiccintpiccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsepicspiccintpiccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsepicspiccintpiccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("SsepicspiccintpiccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsepicspiccintpiccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsepicspiccintpiccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsepicspiccintpiccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getSsepicspiccintpiccMetricsHandler is the Get Handler for SsepicspiccintpiccMetrics
func (s *RestServer) getSsepicspiccintpiccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsepicspiccintpiccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddSsipicsintbadaddrMetricsAPIRoutes adds routes for SsipicsintbadaddrMetrics
func (s *RestServer) AddSsipicsintbadaddrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getSsipicsintbadaddrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listSsipicsintbadaddrMetricsHandler))
}

// listSsipicsintbadaddrMetricsHandler is the List Handler for SsipicsintbadaddrMetrics
func (s *RestServer) listSsipicsintbadaddrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsipicsintbadaddrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsipicsintbadaddrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("SsipicsintbadaddrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsipicsintbadaddrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsipicsintbadaddrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsipicsintbadaddrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getSsipicsintbadaddrMetricsHandler is the Get Handler for SsipicsintbadaddrMetrics
func (s *RestServer) getSsipicsintbadaddrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsipicsintbadaddrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddSsipicsintbgMetricsAPIRoutes adds routes for SsipicsintbgMetrics
func (s *RestServer) AddSsipicsintbgMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getSsipicsintbgMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listSsipicsintbgMetricsHandler))
}

// listSsipicsintbgMetricsHandler is the List Handler for SsipicsintbgMetrics
func (s *RestServer) listSsipicsintbgMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsipicsintbgMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsipicsintbgMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("SsipicsintbgMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsipicsintbgMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsipicsintbgMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsipicsintbgMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getSsipicsintbgMetricsHandler is the Get Handler for SsipicsintbgMetrics
func (s *RestServer) getSsipicsintbgMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsipicsintbgMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddSsipicsintpicsMetricsAPIRoutes adds routes for SsipicsintpicsMetrics
func (s *RestServer) AddSsipicsintpicsMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getSsipicsintpicsMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listSsipicsintpicsMetricsHandler))
}

// listSsipicsintpicsMetricsHandler is the List Handler for SsipicsintpicsMetrics
func (s *RestServer) listSsipicsintpicsMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsipicsintpicsMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsipicsintpicsMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("SsipicsintpicsMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsipicsintpicsMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsipicsintpicsMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsipicsintpicsMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getSsipicsintpicsMetricsHandler is the Get Handler for SsipicsintpicsMetrics
func (s *RestServer) getSsipicsintpicsMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsipicsintpicsMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddSsipicspiccintpiccMetricsAPIRoutes adds routes for SsipicspiccintpiccMetrics
func (s *RestServer) AddSsipicspiccintpiccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getSsipicspiccintpiccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listSsipicspiccintpiccMetricsHandler))
}

// listSsipicspiccintpiccMetricsHandler is the List Handler for SsipicspiccintpiccMetrics
func (s *RestServer) listSsipicspiccintpiccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsipicspiccintpiccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsipicspiccintpiccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("SsipicspiccintpiccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsipicspiccintpiccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsipicspiccintpiccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsipicspiccintpiccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getSsipicspiccintpiccMetricsHandler is the Get Handler for SsipicspiccintpiccMetrics
func (s *RestServer) getSsipicspiccintpiccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsipicspiccintpiccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddTpcpicsintbadaddrMetricsAPIRoutes adds routes for TpcpicsintbadaddrMetrics
func (s *RestServer) AddTpcpicsintbadaddrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getTpcpicsintbadaddrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listTpcpicsintbadaddrMetricsHandler))
}

// listTpcpicsintbadaddrMetricsHandler is the List Handler for TpcpicsintbadaddrMetrics
func (s *RestServer) listTpcpicsintbadaddrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewTpcpicsintbadaddrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.TpcpicsintbadaddrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("TpcpicsintbadaddrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for TpcpicsintbadaddrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getTpcpicsintbadaddrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getTpcpicsintbadaddrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getTpcpicsintbadaddrMetricsHandler is the Get Handler for TpcpicsintbadaddrMetrics
func (s *RestServer) getTpcpicsintbadaddrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request TpcpicsintbadaddrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddTpcpicsintbgMetricsAPIRoutes adds routes for TpcpicsintbgMetrics
func (s *RestServer) AddTpcpicsintbgMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getTpcpicsintbgMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listTpcpicsintbgMetricsHandler))
}

// listTpcpicsintbgMetricsHandler is the List Handler for TpcpicsintbgMetrics
func (s *RestServer) listTpcpicsintbgMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewTpcpicsintbgMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.TpcpicsintbgMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("TpcpicsintbgMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for TpcpicsintbgMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getTpcpicsintbgMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getTpcpicsintbgMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getTpcpicsintbgMetricsHandler is the Get Handler for TpcpicsintbgMetrics
func (s *RestServer) getTpcpicsintbgMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request TpcpicsintbgMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddTpcpicsintpicsMetricsAPIRoutes adds routes for TpcpicsintpicsMetrics
func (s *RestServer) AddTpcpicsintpicsMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getTpcpicsintpicsMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listTpcpicsintpicsMetricsHandler))
}

// listTpcpicsintpicsMetricsHandler is the List Handler for TpcpicsintpicsMetrics
func (s *RestServer) listTpcpicsintpicsMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewTpcpicsintpicsMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.TpcpicsintpicsMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("TpcpicsintpicsMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for TpcpicsintpicsMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getTpcpicsintpicsMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getTpcpicsintpicsMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getTpcpicsintpicsMetricsHandler is the Get Handler for TpcpicsintpicsMetrics
func (s *RestServer) getTpcpicsintpicsMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request TpcpicsintpicsMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddTpcpicspiccintpiccMetricsAPIRoutes adds routes for TpcpicspiccintpiccMetrics
func (s *RestServer) AddTpcpicspiccintpiccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getTpcpicspiccintpiccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listTpcpicspiccintpiccMetricsHandler))
}

// listTpcpicspiccintpiccMetricsHandler is the List Handler for TpcpicspiccintpiccMetrics
func (s *RestServer) listTpcpicspiccintpiccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewTpcpicspiccintpiccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.TpcpicspiccintpiccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("TpcpicspiccintpiccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for TpcpicspiccintpiccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getTpcpicspiccintpiccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getTpcpicspiccintpiccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getTpcpicspiccintpiccMetricsHandler is the Get Handler for TpcpicspiccintpiccMetrics
func (s *RestServer) getTpcpicspiccintpiccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request TpcpicspiccintpiccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddTxstxsintschMetricsAPIRoutes adds routes for TxstxsintschMetrics
func (s *RestServer) AddTxstxsintschMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getTxstxsintschMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listTxstxsintschMetricsHandler))
}

// listTxstxsintschMetricsHandler is the List Handler for TxstxsintschMetrics
func (s *RestServer) listTxstxsintschMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewTxstxsintschMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.TxstxsintschMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("TxstxsintschMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for TxstxsintschMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getTxstxsintschMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getTxstxsintschMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getTxstxsintschMetricsHandler is the Get Handler for TxstxsintschMetrics
func (s *RestServer) getTxstxsintschMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request TxstxsintschMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddTxstxsintsramseccMetricsAPIRoutes adds routes for TxstxsintsramseccMetrics
func (s *RestServer) AddTxstxsintsramseccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getTxstxsintsramseccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listTxstxsintsramseccMetricsHandler))
}

// listTxstxsintsramseccMetricsHandler is the List Handler for TxstxsintsramseccMetrics
func (s *RestServer) listTxstxsintsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewTxstxsintsramseccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.TxstxsintsramseccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("TxstxsintsramseccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for TxstxsintsramseccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getTxstxsintsramseccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getTxstxsintsramseccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getTxstxsintsramseccMetricsHandler is the Get Handler for TxstxsintsramseccMetrics
func (s *RestServer) getTxstxsintsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request TxstxsintsramseccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddTxstxsinttmrMetricsAPIRoutes adds routes for TxstxsinttmrMetrics
func (s *RestServer) AddTxstxsinttmrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getTxstxsinttmrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listTxstxsinttmrMetricsHandler))
}

// listTxstxsinttmrMetricsHandler is the List Handler for TxstxsinttmrMetrics
func (s *RestServer) listTxstxsinttmrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewTxstxsinttmrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.TxstxsinttmrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("TxstxsinttmrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for TxstxsinttmrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getTxstxsinttmrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getTxstxsinttmrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getTxstxsinttmrMetricsHandler is the Get Handler for TxstxsinttmrMetrics
func (s *RestServer) getTxstxsinttmrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request TxstxsinttmrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}
