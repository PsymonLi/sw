// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
/*
 * Package restapi is a auto generated package.
 * Input file: asicerrord_2.proto
 */

package restapi

import (
	"fmt"
	"net/http"

	"github.com/gorilla/mux"

	"github.com/pensando/sw/nic/agent/httputils"
	"github.com/pensando/sw/nic/delphi/proto/goproto"
	_ "github.com/pensando/sw/nic/utils/ntranslate/asicerrord"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/tsdb"
)

// AddDppdpp0intcreditMetricsAPIRoutes adds routes for Dppdpp0intcreditMetrics
func (s *RestServer) AddDppdpp0intcreditMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp0intcreditMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp0intcreditMetricsHandler))
}

// listDppdpp0intcreditMetricsHandler is the List Handler for Dppdpp0intcreditMetrics
func (s *RestServer) listDppdpp0intcreditMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp0intcreditMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp0intcreditMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp0intcreditMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp0intcreditMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp0intcreditMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp0intcreditMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp0intcreditMetricsHandler is the Get Handler for Dppdpp0intcreditMetrics
func (s *RestServer) getDppdpp0intcreditMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp0intcreditMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp0intfifoMetricsAPIRoutes adds routes for Dppdpp0intfifoMetrics
func (s *RestServer) AddDppdpp0intfifoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp0intfifoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp0intfifoMetricsHandler))
}

// listDppdpp0intfifoMetricsHandler is the List Handler for Dppdpp0intfifoMetrics
func (s *RestServer) listDppdpp0intfifoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp0intfifoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp0intfifoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp0intfifoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp0intfifoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp0intfifoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp0intfifoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp0intfifoMetricsHandler is the Get Handler for Dppdpp0intfifoMetrics
func (s *RestServer) getDppdpp0intfifoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp0intfifoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp0intreg1MetricsAPIRoutes adds routes for Dppdpp0intreg1Metrics
func (s *RestServer) AddDppdpp0intreg1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp0intreg1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp0intreg1MetricsHandler))
}

// listDppdpp0intreg1MetricsHandler is the List Handler for Dppdpp0intreg1Metrics
func (s *RestServer) listDppdpp0intreg1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp0intreg1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp0intreg1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp0intreg1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp0intreg1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp0intreg1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp0intreg1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp0intreg1MetricsHandler is the Get Handler for Dppdpp0intreg1Metrics
func (s *RestServer) getDppdpp0intreg1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp0intreg1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp0intspareMetricsAPIRoutes adds routes for Dppdpp0intspareMetrics
func (s *RestServer) AddDppdpp0intspareMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp0intspareMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp0intspareMetricsHandler))
}

// listDppdpp0intspareMetricsHandler is the List Handler for Dppdpp0intspareMetrics
func (s *RestServer) listDppdpp0intspareMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp0intspareMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp0intspareMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp0intspareMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp0intspareMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp0intspareMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp0intspareMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp0intspareMetricsHandler is the Get Handler for Dppdpp0intspareMetrics
func (s *RestServer) getDppdpp0intspareMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp0intspareMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp0intsramseccMetricsAPIRoutes adds routes for Dppdpp0intsramseccMetrics
func (s *RestServer) AddDppdpp0intsramseccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp0intsramseccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp0intsramseccMetricsHandler))
}

// listDppdpp0intsramseccMetricsHandler is the List Handler for Dppdpp0intsramseccMetrics
func (s *RestServer) listDppdpp0intsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp0intsramseccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp0intsramseccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp0intsramseccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp0intsramseccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp0intsramseccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp0intsramseccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp0intsramseccMetricsHandler is the Get Handler for Dppdpp0intsramseccMetrics
func (s *RestServer) getDppdpp0intsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp0intsramseccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp1intcreditMetricsAPIRoutes adds routes for Dppdpp1intcreditMetrics
func (s *RestServer) AddDppdpp1intcreditMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp1intcreditMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp1intcreditMetricsHandler))
}

// listDppdpp1intcreditMetricsHandler is the List Handler for Dppdpp1intcreditMetrics
func (s *RestServer) listDppdpp1intcreditMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp1intcreditMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp1intcreditMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp1intcreditMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp1intcreditMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp1intcreditMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp1intcreditMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp1intcreditMetricsHandler is the Get Handler for Dppdpp1intcreditMetrics
func (s *RestServer) getDppdpp1intcreditMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp1intcreditMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp1intfifoMetricsAPIRoutes adds routes for Dppdpp1intfifoMetrics
func (s *RestServer) AddDppdpp1intfifoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp1intfifoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp1intfifoMetricsHandler))
}

// listDppdpp1intfifoMetricsHandler is the List Handler for Dppdpp1intfifoMetrics
func (s *RestServer) listDppdpp1intfifoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp1intfifoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp1intfifoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp1intfifoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp1intfifoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp1intfifoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp1intfifoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp1intfifoMetricsHandler is the Get Handler for Dppdpp1intfifoMetrics
func (s *RestServer) getDppdpp1intfifoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp1intfifoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp1intreg1MetricsAPIRoutes adds routes for Dppdpp1intreg1Metrics
func (s *RestServer) AddDppdpp1intreg1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp1intreg1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp1intreg1MetricsHandler))
}

// listDppdpp1intreg1MetricsHandler is the List Handler for Dppdpp1intreg1Metrics
func (s *RestServer) listDppdpp1intreg1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp1intreg1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp1intreg1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp1intreg1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp1intreg1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp1intreg1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp1intreg1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp1intreg1MetricsHandler is the Get Handler for Dppdpp1intreg1Metrics
func (s *RestServer) getDppdpp1intreg1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp1intreg1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp1intspareMetricsAPIRoutes adds routes for Dppdpp1intspareMetrics
func (s *RestServer) AddDppdpp1intspareMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp1intspareMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp1intspareMetricsHandler))
}

// listDppdpp1intspareMetricsHandler is the List Handler for Dppdpp1intspareMetrics
func (s *RestServer) listDppdpp1intspareMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp1intspareMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp1intspareMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp1intspareMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp1intspareMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp1intspareMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp1intspareMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp1intspareMetricsHandler is the Get Handler for Dppdpp1intspareMetrics
func (s *RestServer) getDppdpp1intspareMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp1intspareMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp1intsramseccMetricsAPIRoutes adds routes for Dppdpp1intsramseccMetrics
func (s *RestServer) AddDppdpp1intsramseccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp1intsramseccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp1intsramseccMetricsHandler))
}

// listDppdpp1intsramseccMetricsHandler is the List Handler for Dppdpp1intsramseccMetrics
func (s *RestServer) listDppdpp1intsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp1intsramseccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp1intsramseccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp1intsramseccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp1intsramseccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp1intsramseccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp1intsramseccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp1intsramseccMetricsHandler is the Get Handler for Dppdpp1intsramseccMetrics
func (s *RestServer) getDppdpp1intsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp1intsramseccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr0intcreditMetricsAPIRoutes adds routes for Dprdpr0intcreditMetrics
func (s *RestServer) AddDprdpr0intcreditMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr0intcreditMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr0intcreditMetricsHandler))
}

// listDprdpr0intcreditMetricsHandler is the List Handler for Dprdpr0intcreditMetrics
func (s *RestServer) listDprdpr0intcreditMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr0intcreditMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr0intcreditMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr0intcreditMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr0intcreditMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr0intcreditMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr0intcreditMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr0intcreditMetricsHandler is the Get Handler for Dprdpr0intcreditMetrics
func (s *RestServer) getDprdpr0intcreditMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr0intcreditMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr0intflopfifo0MetricsAPIRoutes adds routes for Dprdpr0intflopfifo0Metrics
func (s *RestServer) AddDprdpr0intflopfifo0MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr0intflopfifo0MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr0intflopfifo0MetricsHandler))
}

// listDprdpr0intflopfifo0MetricsHandler is the List Handler for Dprdpr0intflopfifo0Metrics
func (s *RestServer) listDprdpr0intflopfifo0MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr0intflopfifo0MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr0intflopfifo0Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr0intflopfifo0MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr0intflopfifo0Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr0intflopfifo0MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr0intflopfifo0MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr0intflopfifo0MetricsHandler is the Get Handler for Dprdpr0intflopfifo0Metrics
func (s *RestServer) getDprdpr0intflopfifo0MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr0intflopfifo0Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr0intflopfifo1MetricsAPIRoutes adds routes for Dprdpr0intflopfifo1Metrics
func (s *RestServer) AddDprdpr0intflopfifo1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr0intflopfifo1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr0intflopfifo1MetricsHandler))
}

// listDprdpr0intflopfifo1MetricsHandler is the List Handler for Dprdpr0intflopfifo1Metrics
func (s *RestServer) listDprdpr0intflopfifo1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr0intflopfifo1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr0intflopfifo1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr0intflopfifo1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr0intflopfifo1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr0intflopfifo1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr0intflopfifo1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr0intflopfifo1MetricsHandler is the Get Handler for Dprdpr0intflopfifo1Metrics
func (s *RestServer) getDprdpr0intflopfifo1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr0intflopfifo1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr0intspareMetricsAPIRoutes adds routes for Dprdpr0intspareMetrics
func (s *RestServer) AddDprdpr0intspareMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr0intspareMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr0intspareMetricsHandler))
}

// listDprdpr0intspareMetricsHandler is the List Handler for Dprdpr0intspareMetrics
func (s *RestServer) listDprdpr0intspareMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr0intspareMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr0intspareMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr0intspareMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr0intspareMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr0intspareMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr0intspareMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr0intspareMetricsHandler is the Get Handler for Dprdpr0intspareMetrics
func (s *RestServer) getDprdpr0intspareMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr0intspareMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr1intcreditMetricsAPIRoutes adds routes for Dprdpr1intcreditMetrics
func (s *RestServer) AddDprdpr1intcreditMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr1intcreditMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr1intcreditMetricsHandler))
}

// listDprdpr1intcreditMetricsHandler is the List Handler for Dprdpr1intcreditMetrics
func (s *RestServer) listDprdpr1intcreditMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr1intcreditMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr1intcreditMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr1intcreditMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr1intcreditMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr1intcreditMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr1intcreditMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr1intcreditMetricsHandler is the Get Handler for Dprdpr1intcreditMetrics
func (s *RestServer) getDprdpr1intcreditMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr1intcreditMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr1intfifoMetricsAPIRoutes adds routes for Dprdpr1intfifoMetrics
func (s *RestServer) AddDprdpr1intfifoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr1intfifoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr1intfifoMetricsHandler))
}

// listDprdpr1intfifoMetricsHandler is the List Handler for Dprdpr1intfifoMetrics
func (s *RestServer) listDprdpr1intfifoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr1intfifoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr1intfifoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr1intfifoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr1intfifoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr1intfifoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr1intfifoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr1intfifoMetricsHandler is the Get Handler for Dprdpr1intfifoMetrics
func (s *RestServer) getDprdpr1intfifoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr1intfifoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr1intflopfifo0MetricsAPIRoutes adds routes for Dprdpr1intflopfifo0Metrics
func (s *RestServer) AddDprdpr1intflopfifo0MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr1intflopfifo0MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr1intflopfifo0MetricsHandler))
}

// listDprdpr1intflopfifo0MetricsHandler is the List Handler for Dprdpr1intflopfifo0Metrics
func (s *RestServer) listDprdpr1intflopfifo0MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr1intflopfifo0MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr1intflopfifo0Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr1intflopfifo0MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr1intflopfifo0Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr1intflopfifo0MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr1intflopfifo0MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr1intflopfifo0MetricsHandler is the Get Handler for Dprdpr1intflopfifo0Metrics
func (s *RestServer) getDprdpr1intflopfifo0MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr1intflopfifo0Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr1intflopfifo1MetricsAPIRoutes adds routes for Dprdpr1intflopfifo1Metrics
func (s *RestServer) AddDprdpr1intflopfifo1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr1intflopfifo1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr1intflopfifo1MetricsHandler))
}

// listDprdpr1intflopfifo1MetricsHandler is the List Handler for Dprdpr1intflopfifo1Metrics
func (s *RestServer) listDprdpr1intflopfifo1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr1intflopfifo1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr1intflopfifo1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr1intflopfifo1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr1intflopfifo1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr1intflopfifo1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr1intflopfifo1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr1intflopfifo1MetricsHandler is the Get Handler for Dprdpr1intflopfifo1Metrics
func (s *RestServer) getDprdpr1intflopfifo1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr1intflopfifo1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr1intreg1MetricsAPIRoutes adds routes for Dprdpr1intreg1Metrics
func (s *RestServer) AddDprdpr1intreg1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr1intreg1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr1intreg1MetricsHandler))
}

// listDprdpr1intreg1MetricsHandler is the List Handler for Dprdpr1intreg1Metrics
func (s *RestServer) listDprdpr1intreg1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr1intreg1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr1intreg1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr1intreg1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr1intreg1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr1intreg1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr1intreg1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr1intreg1MetricsHandler is the Get Handler for Dprdpr1intreg1Metrics
func (s *RestServer) getDprdpr1intreg1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr1intreg1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr1intreg2MetricsAPIRoutes adds routes for Dprdpr1intreg2Metrics
func (s *RestServer) AddDprdpr1intreg2MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr1intreg2MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr1intreg2MetricsHandler))
}

// listDprdpr1intreg2MetricsHandler is the List Handler for Dprdpr1intreg2Metrics
func (s *RestServer) listDprdpr1intreg2MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr1intreg2MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr1intreg2Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr1intreg2MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr1intreg2Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr1intreg2MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr1intreg2MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr1intreg2MetricsHandler is the Get Handler for Dprdpr1intreg2Metrics
func (s *RestServer) getDprdpr1intreg2MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr1intreg2Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr1intspareMetricsAPIRoutes adds routes for Dprdpr1intspareMetrics
func (s *RestServer) AddDprdpr1intspareMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr1intspareMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr1intspareMetricsHandler))
}

// listDprdpr1intspareMetricsHandler is the List Handler for Dprdpr1intspareMetrics
func (s *RestServer) listDprdpr1intspareMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr1intspareMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr1intspareMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr1intspareMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr1intspareMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr1intspareMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr1intspareMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr1intspareMetricsHandler is the Get Handler for Dprdpr1intspareMetrics
func (s *RestServer) getDprdpr1intspareMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr1intspareMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr1intsramseccMetricsAPIRoutes adds routes for Dprdpr1intsramseccMetrics
func (s *RestServer) AddDprdpr1intsramseccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr1intsramseccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr1intsramseccMetricsHandler))
}

// listDprdpr1intsramseccMetricsHandler is the List Handler for Dprdpr1intsramseccMetrics
func (s *RestServer) listDprdpr1intsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr1intsramseccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr1intsramseccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr1intsramseccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr1intsramseccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr1intsramseccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr1intsramseccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr1intsramseccMetricsHandler is the Get Handler for Dprdpr1intsramseccMetrics
func (s *RestServer) getDprdpr1intsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr1intsramseccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc0intmcMetricsAPIRoutes adds routes for Mcmc0intmcMetrics
func (s *RestServer) AddMcmc0intmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc0intmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc0intmcMetricsHandler))
}

// listMcmc0intmcMetricsHandler is the List Handler for Mcmc0intmcMetrics
func (s *RestServer) listMcmc0intmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc0intmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc0intmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc0intmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc0intmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc0intmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc0intmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc0intmcMetricsHandler is the Get Handler for Mcmc0intmcMetrics
func (s *RestServer) getMcmc0intmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc0intmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc0mchintmcMetricsAPIRoutes adds routes for Mcmc0mchintmcMetrics
func (s *RestServer) AddMcmc0mchintmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc0mchintmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc0mchintmcMetricsHandler))
}

// listMcmc0mchintmcMetricsHandler is the List Handler for Mcmc0mchintmcMetrics
func (s *RestServer) listMcmc0mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc0mchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc0mchintmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc0mchintmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc0mchintmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc0mchintmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc0mchintmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc0mchintmcMetricsHandler is the Get Handler for Mcmc0mchintmcMetrics
func (s *RestServer) getMcmc0mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc0mchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc1intmcMetricsAPIRoutes adds routes for Mcmc1intmcMetrics
func (s *RestServer) AddMcmc1intmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc1intmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc1intmcMetricsHandler))
}

// listMcmc1intmcMetricsHandler is the List Handler for Mcmc1intmcMetrics
func (s *RestServer) listMcmc1intmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc1intmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc1intmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc1intmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc1intmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc1intmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc1intmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc1intmcMetricsHandler is the Get Handler for Mcmc1intmcMetrics
func (s *RestServer) getMcmc1intmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc1intmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc1mchintmcMetricsAPIRoutes adds routes for Mcmc1mchintmcMetrics
func (s *RestServer) AddMcmc1mchintmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc1mchintmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc1mchintmcMetricsHandler))
}

// listMcmc1mchintmcMetricsHandler is the List Handler for Mcmc1mchintmcMetrics
func (s *RestServer) listMcmc1mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc1mchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc1mchintmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc1mchintmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc1mchintmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc1mchintmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc1mchintmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc1mchintmcMetricsHandler is the Get Handler for Mcmc1mchintmcMetrics
func (s *RestServer) getMcmc1mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc1mchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc2intmcMetricsAPIRoutes adds routes for Mcmc2intmcMetrics
func (s *RestServer) AddMcmc2intmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc2intmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc2intmcMetricsHandler))
}

// listMcmc2intmcMetricsHandler is the List Handler for Mcmc2intmcMetrics
func (s *RestServer) listMcmc2intmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc2intmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc2intmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc2intmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc2intmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc2intmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc2intmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc2intmcMetricsHandler is the Get Handler for Mcmc2intmcMetrics
func (s *RestServer) getMcmc2intmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc2intmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc2mchintmcMetricsAPIRoutes adds routes for Mcmc2mchintmcMetrics
func (s *RestServer) AddMcmc2mchintmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc2mchintmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc2mchintmcMetricsHandler))
}

// listMcmc2mchintmcMetricsHandler is the List Handler for Mcmc2mchintmcMetrics
func (s *RestServer) listMcmc2mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc2mchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc2mchintmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc2mchintmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc2mchintmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc2mchintmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc2mchintmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc2mchintmcMetricsHandler is the Get Handler for Mcmc2mchintmcMetrics
func (s *RestServer) getMcmc2mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc2mchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc3intmcMetricsAPIRoutes adds routes for Mcmc3intmcMetrics
func (s *RestServer) AddMcmc3intmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc3intmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc3intmcMetricsHandler))
}

// listMcmc3intmcMetricsHandler is the List Handler for Mcmc3intmcMetrics
func (s *RestServer) listMcmc3intmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc3intmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc3intmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc3intmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc3intmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc3intmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc3intmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc3intmcMetricsHandler is the Get Handler for Mcmc3intmcMetrics
func (s *RestServer) getMcmc3intmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc3intmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc3mchintmcMetricsAPIRoutes adds routes for Mcmc3mchintmcMetrics
func (s *RestServer) AddMcmc3mchintmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc3mchintmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc3mchintmcMetricsHandler))
}

// listMcmc3mchintmcMetricsHandler is the List Handler for Mcmc3mchintmcMetrics
func (s *RestServer) listMcmc3mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc3mchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc3mchintmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc3mchintmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc3mchintmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc3mchintmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc3mchintmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc3mchintmcMetricsHandler is the Get Handler for Mcmc3mchintmcMetrics
func (s *RestServer) getMcmc3mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc3mchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc4intmcMetricsAPIRoutes adds routes for Mcmc4intmcMetrics
func (s *RestServer) AddMcmc4intmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc4intmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc4intmcMetricsHandler))
}

// listMcmc4intmcMetricsHandler is the List Handler for Mcmc4intmcMetrics
func (s *RestServer) listMcmc4intmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc4intmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc4intmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc4intmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc4intmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc4intmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc4intmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc4intmcMetricsHandler is the Get Handler for Mcmc4intmcMetrics
func (s *RestServer) getMcmc4intmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc4intmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc4mchintmcMetricsAPIRoutes adds routes for Mcmc4mchintmcMetrics
func (s *RestServer) AddMcmc4mchintmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc4mchintmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc4mchintmcMetricsHandler))
}

// listMcmc4mchintmcMetricsHandler is the List Handler for Mcmc4mchintmcMetrics
func (s *RestServer) listMcmc4mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc4mchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc4mchintmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc4mchintmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc4mchintmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc4mchintmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc4mchintmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc4mchintmcMetricsHandler is the Get Handler for Mcmc4mchintmcMetrics
func (s *RestServer) getMcmc4mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc4mchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc5intmcMetricsAPIRoutes adds routes for Mcmc5intmcMetrics
func (s *RestServer) AddMcmc5intmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc5intmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc5intmcMetricsHandler))
}

// listMcmc5intmcMetricsHandler is the List Handler for Mcmc5intmcMetrics
func (s *RestServer) listMcmc5intmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc5intmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc5intmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc5intmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc5intmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc5intmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc5intmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc5intmcMetricsHandler is the Get Handler for Mcmc5intmcMetrics
func (s *RestServer) getMcmc5intmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc5intmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc5mchintmcMetricsAPIRoutes adds routes for Mcmc5mchintmcMetrics
func (s *RestServer) AddMcmc5mchintmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc5mchintmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc5mchintmcMetricsHandler))
}

// listMcmc5mchintmcMetricsHandler is the List Handler for Mcmc5mchintmcMetrics
func (s *RestServer) listMcmc5mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc5mchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc5mchintmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc5mchintmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc5mchintmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc5mchintmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc5mchintmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc5mchintmcMetricsHandler is the Get Handler for Mcmc5mchintmcMetrics
func (s *RestServer) getMcmc5mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc5mchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc6intmcMetricsAPIRoutes adds routes for Mcmc6intmcMetrics
func (s *RestServer) AddMcmc6intmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc6intmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc6intmcMetricsHandler))
}

// listMcmc6intmcMetricsHandler is the List Handler for Mcmc6intmcMetrics
func (s *RestServer) listMcmc6intmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc6intmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc6intmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc6intmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc6intmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc6intmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc6intmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc6intmcMetricsHandler is the Get Handler for Mcmc6intmcMetrics
func (s *RestServer) getMcmc6intmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc6intmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc6mchintmcMetricsAPIRoutes adds routes for Mcmc6mchintmcMetrics
func (s *RestServer) AddMcmc6mchintmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc6mchintmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc6mchintmcMetricsHandler))
}

// listMcmc6mchintmcMetricsHandler is the List Handler for Mcmc6mchintmcMetrics
func (s *RestServer) listMcmc6mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc6mchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc6mchintmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc6mchintmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc6mchintmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc6mchintmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc6mchintmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc6mchintmcMetricsHandler is the Get Handler for Mcmc6mchintmcMetrics
func (s *RestServer) getMcmc6mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc6mchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc7intmcMetricsAPIRoutes adds routes for Mcmc7intmcMetrics
func (s *RestServer) AddMcmc7intmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc7intmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc7intmcMetricsHandler))
}

// listMcmc7intmcMetricsHandler is the List Handler for Mcmc7intmcMetrics
func (s *RestServer) listMcmc7intmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc7intmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc7intmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc7intmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc7intmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc7intmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc7intmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc7intmcMetricsHandler is the Get Handler for Mcmc7intmcMetrics
func (s *RestServer) getMcmc7intmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc7intmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc7mchintmcMetricsAPIRoutes adds routes for Mcmc7mchintmcMetrics
func (s *RestServer) AddMcmc7mchintmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc7mchintmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc7mchintmcMetricsHandler))
}

// listMcmc7mchintmcMetricsHandler is the List Handler for Mcmc7mchintmcMetrics
func (s *RestServer) listMcmc7mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc7mchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc7mchintmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc7mchintmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc7mchintmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc7mchintmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc7mchintmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc7mchintmcMetricsHandler is the Get Handler for Mcmc7mchintmcMetrics
func (s *RestServer) getMcmc7mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc7mchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintmiscMetricsAPIRoutes adds routes for MsmsintmiscMetrics
func (s *RestServer) AddMsmsintmiscMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintmiscMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintmiscMetricsHandler))
}

// listMsmsintmiscMetricsHandler is the List Handler for MsmsintmiscMetrics
func (s *RestServer) listMsmsintmiscMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintmiscMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MsmsintmiscMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("MsmsintmiscMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MsmsintmiscMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintmiscMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintmiscMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintmiscMetricsHandler is the Get Handler for MsmsintmiscMetrics
func (s *RestServer) getMsmsintmiscMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MsmsintmiscMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintmsMetricsAPIRoutes adds routes for MsmsintmsMetrics
func (s *RestServer) AddMsmsintmsMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintmsMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintmsMetricsHandler))
}

// listMsmsintmsMetricsHandler is the List Handler for MsmsintmsMetrics
func (s *RestServer) listMsmsintmsMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintmsMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MsmsintmsMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("MsmsintmsMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MsmsintmsMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintmsMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintmsMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintmsMetricsHandler is the Get Handler for MsmsintmsMetrics
func (s *RestServer) getMsmsintmsMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MsmsintmsMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintprp1MetricsAPIRoutes adds routes for Msmsintprp1Metrics
func (s *RestServer) AddMsmsintprp1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintprp1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintprp1MetricsHandler))
}

// listMsmsintprp1MetricsHandler is the List Handler for Msmsintprp1Metrics
func (s *RestServer) listMsmsintprp1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintprp1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintprp1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintprp1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintprp1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintprp1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintprp1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintprp1MetricsHandler is the Get Handler for Msmsintprp1Metrics
func (s *RestServer) getMsmsintprp1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintprp1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintprp2MetricsAPIRoutes adds routes for Msmsintprp2Metrics
func (s *RestServer) AddMsmsintprp2MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintprp2MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintprp2MetricsHandler))
}

// listMsmsintprp2MetricsHandler is the List Handler for Msmsintprp2Metrics
func (s *RestServer) listMsmsintprp2MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintprp2MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintprp2Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintprp2MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintprp2Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintprp2MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintprp2MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintprp2MetricsHandler is the Get Handler for Msmsintprp2Metrics
func (s *RestServer) getMsmsintprp2MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintprp2Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintprp3MetricsAPIRoutes adds routes for Msmsintprp3Metrics
func (s *RestServer) AddMsmsintprp3MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintprp3MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintprp3MetricsHandler))
}

// listMsmsintprp3MetricsHandler is the List Handler for Msmsintprp3Metrics
func (s *RestServer) listMsmsintprp3MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintprp3MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintprp3Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintprp3MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintprp3Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintprp3MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintprp3MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintprp3MetricsHandler is the Get Handler for Msmsintprp3Metrics
func (s *RestServer) getMsmsintprp3MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintprp3Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintprp4MetricsAPIRoutes adds routes for Msmsintprp4Metrics
func (s *RestServer) AddMsmsintprp4MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintprp4MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintprp4MetricsHandler))
}

// listMsmsintprp4MetricsHandler is the List Handler for Msmsintprp4Metrics
func (s *RestServer) listMsmsintprp4MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintprp4MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintprp4Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintprp4MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintprp4Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintprp4MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintprp4MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintprp4MetricsHandler is the Get Handler for Msmsintprp4Metrics
func (s *RestServer) getMsmsintprp4MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintprp4Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintprp5MetricsAPIRoutes adds routes for Msmsintprp5Metrics
func (s *RestServer) AddMsmsintprp5MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintprp5MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintprp5MetricsHandler))
}

// listMsmsintprp5MetricsHandler is the List Handler for Msmsintprp5Metrics
func (s *RestServer) listMsmsintprp5MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintprp5MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintprp5Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintprp5MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintprp5Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintprp5MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintprp5MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintprp5MetricsHandler is the Get Handler for Msmsintprp5Metrics
func (s *RestServer) getMsmsintprp5MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintprp5Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMxmx0inteccMetricsAPIRoutes adds routes for Mxmx0inteccMetrics
func (s *RestServer) AddMxmx0inteccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMxmx0inteccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMxmx0inteccMetricsHandler))
}

// listMxmx0inteccMetricsHandler is the List Handler for Mxmx0inteccMetrics
func (s *RestServer) listMxmx0inteccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMxmx0inteccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mxmx0inteccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mxmx0inteccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mxmx0inteccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMxmx0inteccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMxmx0inteccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMxmx0inteccMetricsHandler is the Get Handler for Mxmx0inteccMetrics
func (s *RestServer) getMxmx0inteccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mxmx0inteccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMxmx0intmacMetricsAPIRoutes adds routes for Mxmx0intmacMetrics
func (s *RestServer) AddMxmx0intmacMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMxmx0intmacMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMxmx0intmacMetricsHandler))
}

// listMxmx0intmacMetricsHandler is the List Handler for Mxmx0intmacMetrics
func (s *RestServer) listMxmx0intmacMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMxmx0intmacMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mxmx0intmacMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mxmx0intmacMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mxmx0intmacMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMxmx0intmacMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMxmx0intmacMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMxmx0intmacMetricsHandler is the Get Handler for Mxmx0intmacMetrics
func (s *RestServer) getMxmx0intmacMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mxmx0intmacMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMxmx1inteccMetricsAPIRoutes adds routes for Mxmx1inteccMetrics
func (s *RestServer) AddMxmx1inteccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMxmx1inteccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMxmx1inteccMetricsHandler))
}

// listMxmx1inteccMetricsHandler is the List Handler for Mxmx1inteccMetrics
func (s *RestServer) listMxmx1inteccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMxmx1inteccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mxmx1inteccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mxmx1inteccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mxmx1inteccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMxmx1inteccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMxmx1inteccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMxmx1inteccMetricsHandler is the Get Handler for Mxmx1inteccMetrics
func (s *RestServer) getMxmx1inteccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mxmx1inteccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMxmx1intmacMetricsAPIRoutes adds routes for Mxmx1intmacMetrics
func (s *RestServer) AddMxmx1intmacMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMxmx1intmacMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMxmx1intmacMetricsHandler))
}

// listMxmx1intmacMetricsHandler is the List Handler for Mxmx1intmacMetrics
func (s *RestServer) listMxmx1intmacMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMxmx1intmacMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mxmx1intmacMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mxmx1intmacMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mxmx1intmacMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMxmx1intmacMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMxmx1intmacMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMxmx1intmacMetricsHandler is the Get Handler for Mxmx1intmacMetrics
func (s *RestServer) getMxmx1intmacMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mxmx1intmacMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}
