// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
/*
 * Package restapi is a auto generated package.
 * Input file: asicerrord_2.proto
 */

package restapi

import (
	"fmt"
	"net/http"

	"github.com/gorilla/mux"

	"github.com/pensando/sw/nic/agent/httputils"
	"github.com/pensando/sw/nic/delphi/proto/goproto"
	_ "github.com/pensando/sw/nic/utils/ntranslate/asicerrord"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/tsdb"
)

// AddBxbxintmacMetricsAPIRoutes adds routes for BxbxintmacMetrics
func (s *RestServer) AddBxbxintmacMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getBxbxintmacMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listBxbxintmacMetricsHandler))
}

// listBxbxintmacMetricsHandler is the List Handler for BxbxintmacMetrics
func (s *RestServer) listBxbxintmacMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewBxbxintmacMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.BxbxintmacMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("BxbxintmacMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for BxbxintmacMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getBxbxintmacMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getBxbxintmacMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getBxbxintmacMetricsHandler is the Get Handler for BxbxintmacMetrics
func (s *RestServer) getBxbxintmacMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request BxbxintmacMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDbwaintdbMetricsAPIRoutes adds routes for DbwaintdbMetrics
func (s *RestServer) AddDbwaintdbMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDbwaintdbMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDbwaintdbMetricsHandler))
}

// listDbwaintdbMetricsHandler is the List Handler for DbwaintdbMetrics
func (s *RestServer) listDbwaintdbMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDbwaintdbMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.DbwaintdbMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("DbwaintdbMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DbwaintdbMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDbwaintdbMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDbwaintdbMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDbwaintdbMetricsHandler is the Get Handler for DbwaintdbMetrics
func (s *RestServer) getDbwaintdbMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DbwaintdbMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDbwaintlifqstatemapMetricsAPIRoutes adds routes for DbwaintlifqstatemapMetrics
func (s *RestServer) AddDbwaintlifqstatemapMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDbwaintlifqstatemapMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDbwaintlifqstatemapMetricsHandler))
}

// listDbwaintlifqstatemapMetricsHandler is the List Handler for DbwaintlifqstatemapMetrics
func (s *RestServer) listDbwaintlifqstatemapMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDbwaintlifqstatemapMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.DbwaintlifqstatemapMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("DbwaintlifqstatemapMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DbwaintlifqstatemapMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDbwaintlifqstatemapMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDbwaintlifqstatemapMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDbwaintlifqstatemapMetricsHandler is the Get Handler for DbwaintlifqstatemapMetrics
func (s *RestServer) getDbwaintlifqstatemapMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DbwaintlifqstatemapMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp0intcreditMetricsAPIRoutes adds routes for Dppdpp0intcreditMetrics
func (s *RestServer) AddDppdpp0intcreditMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp0intcreditMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp0intcreditMetricsHandler))
}

// listDppdpp0intcreditMetricsHandler is the List Handler for Dppdpp0intcreditMetrics
func (s *RestServer) listDppdpp0intcreditMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp0intcreditMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp0intcreditMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp0intcreditMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp0intcreditMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp0intcreditMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp0intcreditMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp0intcreditMetricsHandler is the Get Handler for Dppdpp0intcreditMetrics
func (s *RestServer) getDppdpp0intcreditMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp0intcreditMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp0intfifoMetricsAPIRoutes adds routes for Dppdpp0intfifoMetrics
func (s *RestServer) AddDppdpp0intfifoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp0intfifoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp0intfifoMetricsHandler))
}

// listDppdpp0intfifoMetricsHandler is the List Handler for Dppdpp0intfifoMetrics
func (s *RestServer) listDppdpp0intfifoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp0intfifoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp0intfifoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp0intfifoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp0intfifoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp0intfifoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp0intfifoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp0intfifoMetricsHandler is the Get Handler for Dppdpp0intfifoMetrics
func (s *RestServer) getDppdpp0intfifoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp0intfifoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp0intreg1MetricsAPIRoutes adds routes for Dppdpp0intreg1Metrics
func (s *RestServer) AddDppdpp0intreg1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp0intreg1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp0intreg1MetricsHandler))
}

// listDppdpp0intreg1MetricsHandler is the List Handler for Dppdpp0intreg1Metrics
func (s *RestServer) listDppdpp0intreg1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp0intreg1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp0intreg1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp0intreg1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp0intreg1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp0intreg1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp0intreg1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp0intreg1MetricsHandler is the Get Handler for Dppdpp0intreg1Metrics
func (s *RestServer) getDppdpp0intreg1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp0intreg1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp0intreg2MetricsAPIRoutes adds routes for Dppdpp0intreg2Metrics
func (s *RestServer) AddDppdpp0intreg2MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp0intreg2MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp0intreg2MetricsHandler))
}

// listDppdpp0intreg2MetricsHandler is the List Handler for Dppdpp0intreg2Metrics
func (s *RestServer) listDppdpp0intreg2MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp0intreg2MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp0intreg2Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp0intreg2MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp0intreg2Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp0intreg2MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp0intreg2MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp0intreg2MetricsHandler is the Get Handler for Dppdpp0intreg2Metrics
func (s *RestServer) getDppdpp0intreg2MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp0intreg2Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp0intspareMetricsAPIRoutes adds routes for Dppdpp0intspareMetrics
func (s *RestServer) AddDppdpp0intspareMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp0intspareMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp0intspareMetricsHandler))
}

// listDppdpp0intspareMetricsHandler is the List Handler for Dppdpp0intspareMetrics
func (s *RestServer) listDppdpp0intspareMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp0intspareMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp0intspareMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp0intspareMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp0intspareMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp0intspareMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp0intspareMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp0intspareMetricsHandler is the Get Handler for Dppdpp0intspareMetrics
func (s *RestServer) getDppdpp0intspareMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp0intspareMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp0intsramseccMetricsAPIRoutes adds routes for Dppdpp0intsramseccMetrics
func (s *RestServer) AddDppdpp0intsramseccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp0intsramseccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp0intsramseccMetricsHandler))
}

// listDppdpp0intsramseccMetricsHandler is the List Handler for Dppdpp0intsramseccMetrics
func (s *RestServer) listDppdpp0intsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp0intsramseccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp0intsramseccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp0intsramseccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp0intsramseccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp0intsramseccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp0intsramseccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp0intsramseccMetricsHandler is the Get Handler for Dppdpp0intsramseccMetrics
func (s *RestServer) getDppdpp0intsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp0intsramseccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp1intcreditMetricsAPIRoutes adds routes for Dppdpp1intcreditMetrics
func (s *RestServer) AddDppdpp1intcreditMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp1intcreditMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp1intcreditMetricsHandler))
}

// listDppdpp1intcreditMetricsHandler is the List Handler for Dppdpp1intcreditMetrics
func (s *RestServer) listDppdpp1intcreditMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp1intcreditMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp1intcreditMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp1intcreditMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp1intcreditMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp1intcreditMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp1intcreditMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp1intcreditMetricsHandler is the Get Handler for Dppdpp1intcreditMetrics
func (s *RestServer) getDppdpp1intcreditMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp1intcreditMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp1intfifoMetricsAPIRoutes adds routes for Dppdpp1intfifoMetrics
func (s *RestServer) AddDppdpp1intfifoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp1intfifoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp1intfifoMetricsHandler))
}

// listDppdpp1intfifoMetricsHandler is the List Handler for Dppdpp1intfifoMetrics
func (s *RestServer) listDppdpp1intfifoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp1intfifoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp1intfifoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp1intfifoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp1intfifoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp1intfifoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp1intfifoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp1intfifoMetricsHandler is the Get Handler for Dppdpp1intfifoMetrics
func (s *RestServer) getDppdpp1intfifoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp1intfifoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp1intreg1MetricsAPIRoutes adds routes for Dppdpp1intreg1Metrics
func (s *RestServer) AddDppdpp1intreg1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp1intreg1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp1intreg1MetricsHandler))
}

// listDppdpp1intreg1MetricsHandler is the List Handler for Dppdpp1intreg1Metrics
func (s *RestServer) listDppdpp1intreg1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp1intreg1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp1intreg1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp1intreg1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp1intreg1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp1intreg1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp1intreg1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp1intreg1MetricsHandler is the Get Handler for Dppdpp1intreg1Metrics
func (s *RestServer) getDppdpp1intreg1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp1intreg1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp1intreg2MetricsAPIRoutes adds routes for Dppdpp1intreg2Metrics
func (s *RestServer) AddDppdpp1intreg2MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp1intreg2MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp1intreg2MetricsHandler))
}

// listDppdpp1intreg2MetricsHandler is the List Handler for Dppdpp1intreg2Metrics
func (s *RestServer) listDppdpp1intreg2MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp1intreg2MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp1intreg2Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp1intreg2MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp1intreg2Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp1intreg2MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp1intreg2MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp1intreg2MetricsHandler is the Get Handler for Dppdpp1intreg2Metrics
func (s *RestServer) getDppdpp1intreg2MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp1intreg2Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp1intspareMetricsAPIRoutes adds routes for Dppdpp1intspareMetrics
func (s *RestServer) AddDppdpp1intspareMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp1intspareMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp1intspareMetricsHandler))
}

// listDppdpp1intspareMetricsHandler is the List Handler for Dppdpp1intspareMetrics
func (s *RestServer) listDppdpp1intspareMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp1intspareMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp1intspareMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp1intspareMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp1intspareMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp1intspareMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp1intspareMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp1intspareMetricsHandler is the Get Handler for Dppdpp1intspareMetrics
func (s *RestServer) getDppdpp1intspareMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp1intspareMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDppdpp1intsramseccMetricsAPIRoutes adds routes for Dppdpp1intsramseccMetrics
func (s *RestServer) AddDppdpp1intsramseccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDppdpp1intsramseccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDppdpp1intsramseccMetricsHandler))
}

// listDppdpp1intsramseccMetricsHandler is the List Handler for Dppdpp1intsramseccMetrics
func (s *RestServer) listDppdpp1intsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppdpp1intsramseccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppdpp1intsramseccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dppdpp1intsramseccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppdpp1intsramseccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppdpp1intsramseccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppdpp1intsramseccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDppdpp1intsramseccMetricsHandler is the Get Handler for Dppdpp1intsramseccMetrics
func (s *RestServer) getDppdpp1intsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppdpp1intsramseccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr0intcreditMetricsAPIRoutes adds routes for Dprdpr0intcreditMetrics
func (s *RestServer) AddDprdpr0intcreditMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr0intcreditMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr0intcreditMetricsHandler))
}

// listDprdpr0intcreditMetricsHandler is the List Handler for Dprdpr0intcreditMetrics
func (s *RestServer) listDprdpr0intcreditMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr0intcreditMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr0intcreditMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr0intcreditMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr0intcreditMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr0intcreditMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr0intcreditMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr0intcreditMetricsHandler is the Get Handler for Dprdpr0intcreditMetrics
func (s *RestServer) getDprdpr0intcreditMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr0intcreditMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr0intfifoMetricsAPIRoutes adds routes for Dprdpr0intfifoMetrics
func (s *RestServer) AddDprdpr0intfifoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr0intfifoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr0intfifoMetricsHandler))
}

// listDprdpr0intfifoMetricsHandler is the List Handler for Dprdpr0intfifoMetrics
func (s *RestServer) listDprdpr0intfifoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr0intfifoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr0intfifoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr0intfifoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr0intfifoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr0intfifoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr0intfifoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr0intfifoMetricsHandler is the Get Handler for Dprdpr0intfifoMetrics
func (s *RestServer) getDprdpr0intfifoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr0intfifoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr0intflopfifo0MetricsAPIRoutes adds routes for Dprdpr0intflopfifo0Metrics
func (s *RestServer) AddDprdpr0intflopfifo0MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr0intflopfifo0MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr0intflopfifo0MetricsHandler))
}

// listDprdpr0intflopfifo0MetricsHandler is the List Handler for Dprdpr0intflopfifo0Metrics
func (s *RestServer) listDprdpr0intflopfifo0MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr0intflopfifo0MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr0intflopfifo0Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr0intflopfifo0MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr0intflopfifo0Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr0intflopfifo0MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr0intflopfifo0MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr0intflopfifo0MetricsHandler is the Get Handler for Dprdpr0intflopfifo0Metrics
func (s *RestServer) getDprdpr0intflopfifo0MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr0intflopfifo0Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr0intflopfifo1MetricsAPIRoutes adds routes for Dprdpr0intflopfifo1Metrics
func (s *RestServer) AddDprdpr0intflopfifo1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr0intflopfifo1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr0intflopfifo1MetricsHandler))
}

// listDprdpr0intflopfifo1MetricsHandler is the List Handler for Dprdpr0intflopfifo1Metrics
func (s *RestServer) listDprdpr0intflopfifo1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr0intflopfifo1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr0intflopfifo1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr0intflopfifo1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr0intflopfifo1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr0intflopfifo1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr0intflopfifo1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr0intflopfifo1MetricsHandler is the Get Handler for Dprdpr0intflopfifo1Metrics
func (s *RestServer) getDprdpr0intflopfifo1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr0intflopfifo1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr0intreg1MetricsAPIRoutes adds routes for Dprdpr0intreg1Metrics
func (s *RestServer) AddDprdpr0intreg1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr0intreg1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr0intreg1MetricsHandler))
}

// listDprdpr0intreg1MetricsHandler is the List Handler for Dprdpr0intreg1Metrics
func (s *RestServer) listDprdpr0intreg1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr0intreg1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr0intreg1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr0intreg1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr0intreg1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr0intreg1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr0intreg1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr0intreg1MetricsHandler is the Get Handler for Dprdpr0intreg1Metrics
func (s *RestServer) getDprdpr0intreg1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr0intreg1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr0intreg2MetricsAPIRoutes adds routes for Dprdpr0intreg2Metrics
func (s *RestServer) AddDprdpr0intreg2MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr0intreg2MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr0intreg2MetricsHandler))
}

// listDprdpr0intreg2MetricsHandler is the List Handler for Dprdpr0intreg2Metrics
func (s *RestServer) listDprdpr0intreg2MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr0intreg2MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr0intreg2Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr0intreg2MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr0intreg2Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr0intreg2MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr0intreg2MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr0intreg2MetricsHandler is the Get Handler for Dprdpr0intreg2Metrics
func (s *RestServer) getDprdpr0intreg2MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr0intreg2Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr0intspareMetricsAPIRoutes adds routes for Dprdpr0intspareMetrics
func (s *RestServer) AddDprdpr0intspareMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr0intspareMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr0intspareMetricsHandler))
}

// listDprdpr0intspareMetricsHandler is the List Handler for Dprdpr0intspareMetrics
func (s *RestServer) listDprdpr0intspareMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr0intspareMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr0intspareMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr0intspareMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr0intspareMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr0intspareMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr0intspareMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr0intspareMetricsHandler is the Get Handler for Dprdpr0intspareMetrics
func (s *RestServer) getDprdpr0intspareMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr0intspareMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr0intsramseccMetricsAPIRoutes adds routes for Dprdpr0intsramseccMetrics
func (s *RestServer) AddDprdpr0intsramseccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr0intsramseccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr0intsramseccMetricsHandler))
}

// listDprdpr0intsramseccMetricsHandler is the List Handler for Dprdpr0intsramseccMetrics
func (s *RestServer) listDprdpr0intsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr0intsramseccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr0intsramseccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr0intsramseccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr0intsramseccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr0intsramseccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr0intsramseccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr0intsramseccMetricsHandler is the Get Handler for Dprdpr0intsramseccMetrics
func (s *RestServer) getDprdpr0intsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr0intsramseccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr1intcreditMetricsAPIRoutes adds routes for Dprdpr1intcreditMetrics
func (s *RestServer) AddDprdpr1intcreditMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr1intcreditMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr1intcreditMetricsHandler))
}

// listDprdpr1intcreditMetricsHandler is the List Handler for Dprdpr1intcreditMetrics
func (s *RestServer) listDprdpr1intcreditMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr1intcreditMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr1intcreditMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr1intcreditMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr1intcreditMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr1intcreditMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr1intcreditMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr1intcreditMetricsHandler is the Get Handler for Dprdpr1intcreditMetrics
func (s *RestServer) getDprdpr1intcreditMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr1intcreditMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr1intfifoMetricsAPIRoutes adds routes for Dprdpr1intfifoMetrics
func (s *RestServer) AddDprdpr1intfifoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr1intfifoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr1intfifoMetricsHandler))
}

// listDprdpr1intfifoMetricsHandler is the List Handler for Dprdpr1intfifoMetrics
func (s *RestServer) listDprdpr1intfifoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr1intfifoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr1intfifoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr1intfifoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr1intfifoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr1intfifoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr1intfifoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr1intfifoMetricsHandler is the Get Handler for Dprdpr1intfifoMetrics
func (s *RestServer) getDprdpr1intfifoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr1intfifoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr1intflopfifo0MetricsAPIRoutes adds routes for Dprdpr1intflopfifo0Metrics
func (s *RestServer) AddDprdpr1intflopfifo0MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr1intflopfifo0MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr1intflopfifo0MetricsHandler))
}

// listDprdpr1intflopfifo0MetricsHandler is the List Handler for Dprdpr1intflopfifo0Metrics
func (s *RestServer) listDprdpr1intflopfifo0MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr1intflopfifo0MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr1intflopfifo0Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr1intflopfifo0MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr1intflopfifo0Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr1intflopfifo0MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr1intflopfifo0MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr1intflopfifo0MetricsHandler is the Get Handler for Dprdpr1intflopfifo0Metrics
func (s *RestServer) getDprdpr1intflopfifo0MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr1intflopfifo0Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr1intflopfifo1MetricsAPIRoutes adds routes for Dprdpr1intflopfifo1Metrics
func (s *RestServer) AddDprdpr1intflopfifo1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr1intflopfifo1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr1intflopfifo1MetricsHandler))
}

// listDprdpr1intflopfifo1MetricsHandler is the List Handler for Dprdpr1intflopfifo1Metrics
func (s *RestServer) listDprdpr1intflopfifo1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr1intflopfifo1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr1intflopfifo1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr1intflopfifo1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr1intflopfifo1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr1intflopfifo1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr1intflopfifo1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr1intflopfifo1MetricsHandler is the Get Handler for Dprdpr1intflopfifo1Metrics
func (s *RestServer) getDprdpr1intflopfifo1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr1intflopfifo1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr1intreg1MetricsAPIRoutes adds routes for Dprdpr1intreg1Metrics
func (s *RestServer) AddDprdpr1intreg1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr1intreg1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr1intreg1MetricsHandler))
}

// listDprdpr1intreg1MetricsHandler is the List Handler for Dprdpr1intreg1Metrics
func (s *RestServer) listDprdpr1intreg1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr1intreg1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr1intreg1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr1intreg1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr1intreg1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr1intreg1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr1intreg1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr1intreg1MetricsHandler is the Get Handler for Dprdpr1intreg1Metrics
func (s *RestServer) getDprdpr1intreg1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr1intreg1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr1intreg2MetricsAPIRoutes adds routes for Dprdpr1intreg2Metrics
func (s *RestServer) AddDprdpr1intreg2MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr1intreg2MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr1intreg2MetricsHandler))
}

// listDprdpr1intreg2MetricsHandler is the List Handler for Dprdpr1intreg2Metrics
func (s *RestServer) listDprdpr1intreg2MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr1intreg2MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr1intreg2Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr1intreg2MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr1intreg2Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr1intreg2MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr1intreg2MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr1intreg2MetricsHandler is the Get Handler for Dprdpr1intreg2Metrics
func (s *RestServer) getDprdpr1intreg2MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr1intreg2Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr1intspareMetricsAPIRoutes adds routes for Dprdpr1intspareMetrics
func (s *RestServer) AddDprdpr1intspareMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr1intspareMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr1intspareMetricsHandler))
}

// listDprdpr1intspareMetricsHandler is the List Handler for Dprdpr1intspareMetrics
func (s *RestServer) listDprdpr1intspareMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr1intspareMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr1intspareMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr1intspareMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr1intspareMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr1intspareMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr1intspareMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr1intspareMetricsHandler is the Get Handler for Dprdpr1intspareMetrics
func (s *RestServer) getDprdpr1intspareMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr1intspareMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddDprdpr1intsramseccMetricsAPIRoutes adds routes for Dprdpr1intsramseccMetrics
func (s *RestServer) AddDprdpr1intsramseccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getDprdpr1intsramseccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listDprdpr1intsramseccMetricsHandler))
}

// listDprdpr1intsramseccMetricsHandler is the List Handler for Dprdpr1intsramseccMetrics
func (s *RestServer) listDprdpr1intsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprdpr1intsramseccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprdpr1intsramseccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Dprdpr1intsramseccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprdpr1intsramseccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprdpr1intsramseccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprdpr1intsramseccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getDprdpr1intsramseccMetricsHandler is the Get Handler for Dprdpr1intsramseccMetrics
func (s *RestServer) getDprdpr1intsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprdpr1intsramseccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc0intmcMetricsAPIRoutes adds routes for Mcmc0intmcMetrics
func (s *RestServer) AddMcmc0intmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc0intmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc0intmcMetricsHandler))
}

// listMcmc0intmcMetricsHandler is the List Handler for Mcmc0intmcMetrics
func (s *RestServer) listMcmc0intmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc0intmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc0intmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc0intmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc0intmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc0intmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc0intmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc0intmcMetricsHandler is the Get Handler for Mcmc0intmcMetrics
func (s *RestServer) getMcmc0intmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc0intmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc0mchintmcMetricsAPIRoutes adds routes for Mcmc0mchintmcMetrics
func (s *RestServer) AddMcmc0mchintmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc0mchintmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc0mchintmcMetricsHandler))
}

// listMcmc0mchintmcMetricsHandler is the List Handler for Mcmc0mchintmcMetrics
func (s *RestServer) listMcmc0mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc0mchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc0mchintmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc0mchintmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc0mchintmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc0mchintmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc0mchintmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc0mchintmcMetricsHandler is the Get Handler for Mcmc0mchintmcMetrics
func (s *RestServer) getMcmc0mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc0mchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc1intmcMetricsAPIRoutes adds routes for Mcmc1intmcMetrics
func (s *RestServer) AddMcmc1intmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc1intmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc1intmcMetricsHandler))
}

// listMcmc1intmcMetricsHandler is the List Handler for Mcmc1intmcMetrics
func (s *RestServer) listMcmc1intmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc1intmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc1intmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc1intmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc1intmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc1intmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc1intmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc1intmcMetricsHandler is the Get Handler for Mcmc1intmcMetrics
func (s *RestServer) getMcmc1intmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc1intmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc1mchintmcMetricsAPIRoutes adds routes for Mcmc1mchintmcMetrics
func (s *RestServer) AddMcmc1mchintmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc1mchintmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc1mchintmcMetricsHandler))
}

// listMcmc1mchintmcMetricsHandler is the List Handler for Mcmc1mchintmcMetrics
func (s *RestServer) listMcmc1mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc1mchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc1mchintmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc1mchintmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc1mchintmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc1mchintmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc1mchintmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc1mchintmcMetricsHandler is the Get Handler for Mcmc1mchintmcMetrics
func (s *RestServer) getMcmc1mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc1mchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc2intmcMetricsAPIRoutes adds routes for Mcmc2intmcMetrics
func (s *RestServer) AddMcmc2intmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc2intmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc2intmcMetricsHandler))
}

// listMcmc2intmcMetricsHandler is the List Handler for Mcmc2intmcMetrics
func (s *RestServer) listMcmc2intmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc2intmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc2intmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc2intmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc2intmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc2intmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc2intmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc2intmcMetricsHandler is the Get Handler for Mcmc2intmcMetrics
func (s *RestServer) getMcmc2intmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc2intmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc2mchintmcMetricsAPIRoutes adds routes for Mcmc2mchintmcMetrics
func (s *RestServer) AddMcmc2mchintmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc2mchintmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc2mchintmcMetricsHandler))
}

// listMcmc2mchintmcMetricsHandler is the List Handler for Mcmc2mchintmcMetrics
func (s *RestServer) listMcmc2mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc2mchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc2mchintmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc2mchintmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc2mchintmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc2mchintmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc2mchintmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc2mchintmcMetricsHandler is the Get Handler for Mcmc2mchintmcMetrics
func (s *RestServer) getMcmc2mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc2mchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc3intmcMetricsAPIRoutes adds routes for Mcmc3intmcMetrics
func (s *RestServer) AddMcmc3intmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc3intmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc3intmcMetricsHandler))
}

// listMcmc3intmcMetricsHandler is the List Handler for Mcmc3intmcMetrics
func (s *RestServer) listMcmc3intmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc3intmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc3intmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc3intmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc3intmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc3intmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc3intmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc3intmcMetricsHandler is the Get Handler for Mcmc3intmcMetrics
func (s *RestServer) getMcmc3intmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc3intmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc3mchintmcMetricsAPIRoutes adds routes for Mcmc3mchintmcMetrics
func (s *RestServer) AddMcmc3mchintmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc3mchintmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc3mchintmcMetricsHandler))
}

// listMcmc3mchintmcMetricsHandler is the List Handler for Mcmc3mchintmcMetrics
func (s *RestServer) listMcmc3mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc3mchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc3mchintmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc3mchintmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc3mchintmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc3mchintmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc3mchintmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc3mchintmcMetricsHandler is the Get Handler for Mcmc3mchintmcMetrics
func (s *RestServer) getMcmc3mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc3mchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc4intmcMetricsAPIRoutes adds routes for Mcmc4intmcMetrics
func (s *RestServer) AddMcmc4intmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc4intmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc4intmcMetricsHandler))
}

// listMcmc4intmcMetricsHandler is the List Handler for Mcmc4intmcMetrics
func (s *RestServer) listMcmc4intmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc4intmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc4intmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc4intmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc4intmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc4intmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc4intmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc4intmcMetricsHandler is the Get Handler for Mcmc4intmcMetrics
func (s *RestServer) getMcmc4intmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc4intmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc4mchintmcMetricsAPIRoutes adds routes for Mcmc4mchintmcMetrics
func (s *RestServer) AddMcmc4mchintmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc4mchintmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc4mchintmcMetricsHandler))
}

// listMcmc4mchintmcMetricsHandler is the List Handler for Mcmc4mchintmcMetrics
func (s *RestServer) listMcmc4mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc4mchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc4mchintmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc4mchintmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc4mchintmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc4mchintmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc4mchintmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc4mchintmcMetricsHandler is the Get Handler for Mcmc4mchintmcMetrics
func (s *RestServer) getMcmc4mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc4mchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc5intmcMetricsAPIRoutes adds routes for Mcmc5intmcMetrics
func (s *RestServer) AddMcmc5intmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc5intmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc5intmcMetricsHandler))
}

// listMcmc5intmcMetricsHandler is the List Handler for Mcmc5intmcMetrics
func (s *RestServer) listMcmc5intmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc5intmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc5intmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc5intmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc5intmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc5intmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc5intmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc5intmcMetricsHandler is the Get Handler for Mcmc5intmcMetrics
func (s *RestServer) getMcmc5intmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc5intmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc5mchintmcMetricsAPIRoutes adds routes for Mcmc5mchintmcMetrics
func (s *RestServer) AddMcmc5mchintmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc5mchintmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc5mchintmcMetricsHandler))
}

// listMcmc5mchintmcMetricsHandler is the List Handler for Mcmc5mchintmcMetrics
func (s *RestServer) listMcmc5mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc5mchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc5mchintmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc5mchintmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc5mchintmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc5mchintmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc5mchintmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc5mchintmcMetricsHandler is the Get Handler for Mcmc5mchintmcMetrics
func (s *RestServer) getMcmc5mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc5mchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc6intmcMetricsAPIRoutes adds routes for Mcmc6intmcMetrics
func (s *RestServer) AddMcmc6intmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc6intmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc6intmcMetricsHandler))
}

// listMcmc6intmcMetricsHandler is the List Handler for Mcmc6intmcMetrics
func (s *RestServer) listMcmc6intmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc6intmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc6intmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc6intmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc6intmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc6intmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc6intmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc6intmcMetricsHandler is the Get Handler for Mcmc6intmcMetrics
func (s *RestServer) getMcmc6intmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc6intmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc6mchintmcMetricsAPIRoutes adds routes for Mcmc6mchintmcMetrics
func (s *RestServer) AddMcmc6mchintmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc6mchintmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc6mchintmcMetricsHandler))
}

// listMcmc6mchintmcMetricsHandler is the List Handler for Mcmc6mchintmcMetrics
func (s *RestServer) listMcmc6mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc6mchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc6mchintmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc6mchintmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc6mchintmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc6mchintmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc6mchintmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc6mchintmcMetricsHandler is the Get Handler for Mcmc6mchintmcMetrics
func (s *RestServer) getMcmc6mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc6mchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc7intmcMetricsAPIRoutes adds routes for Mcmc7intmcMetrics
func (s *RestServer) AddMcmc7intmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc7intmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc7intmcMetricsHandler))
}

// listMcmc7intmcMetricsHandler is the List Handler for Mcmc7intmcMetrics
func (s *RestServer) listMcmc7intmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc7intmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc7intmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc7intmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc7intmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc7intmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc7intmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc7intmcMetricsHandler is the Get Handler for Mcmc7intmcMetrics
func (s *RestServer) getMcmc7intmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc7intmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMcmc7mchintmcMetricsAPIRoutes adds routes for Mcmc7mchintmcMetrics
func (s *RestServer) AddMcmc7mchintmcMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMcmc7mchintmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMcmc7mchintmcMetricsHandler))
}

// listMcmc7mchintmcMetricsHandler is the List Handler for Mcmc7mchintmcMetrics
func (s *RestServer) listMcmc7mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmc7mchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mcmc7mchintmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mcmc7mchintmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mcmc7mchintmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmc7mchintmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmc7mchintmcMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMcmc7mchintmcMetricsHandler is the Get Handler for Mcmc7mchintmcMetrics
func (s *RestServer) getMcmc7mchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mcmc7mchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMdhensintaxierrMetricsAPIRoutes adds routes for MdhensintaxierrMetrics
func (s *RestServer) AddMdhensintaxierrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMdhensintaxierrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMdhensintaxierrMetricsHandler))
}

// listMdhensintaxierrMetricsHandler is the List Handler for MdhensintaxierrMetrics
func (s *RestServer) listMdhensintaxierrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMdhensintaxierrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MdhensintaxierrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("MdhensintaxierrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MdhensintaxierrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMdhensintaxierrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMdhensintaxierrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMdhensintaxierrMetricsHandler is the Get Handler for MdhensintaxierrMetrics
func (s *RestServer) getMdhensintaxierrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MdhensintaxierrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMdhensintdrbgcryptorameccMetricsAPIRoutes adds routes for MdhensintdrbgcryptorameccMetrics
func (s *RestServer) AddMdhensintdrbgcryptorameccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMdhensintdrbgcryptorameccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMdhensintdrbgcryptorameccMetricsHandler))
}

// listMdhensintdrbgcryptorameccMetricsHandler is the List Handler for MdhensintdrbgcryptorameccMetrics
func (s *RestServer) listMdhensintdrbgcryptorameccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMdhensintdrbgcryptorameccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MdhensintdrbgcryptorameccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("MdhensintdrbgcryptorameccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MdhensintdrbgcryptorameccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMdhensintdrbgcryptorameccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMdhensintdrbgcryptorameccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMdhensintdrbgcryptorameccMetricsHandler is the Get Handler for MdhensintdrbgcryptorameccMetrics
func (s *RestServer) getMdhensintdrbgcryptorameccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MdhensintdrbgcryptorameccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMdhensintdrbgintrameccMetricsAPIRoutes adds routes for MdhensintdrbgintrameccMetrics
func (s *RestServer) AddMdhensintdrbgintrameccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMdhensintdrbgintrameccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMdhensintdrbgintrameccMetricsHandler))
}

// listMdhensintdrbgintrameccMetricsHandler is the List Handler for MdhensintdrbgintrameccMetrics
func (s *RestServer) listMdhensintdrbgintrameccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMdhensintdrbgintrameccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MdhensintdrbgintrameccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("MdhensintdrbgintrameccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MdhensintdrbgintrameccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMdhensintdrbgintrameccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMdhensintdrbgintrameccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMdhensintdrbgintrameccMetricsHandler is the Get Handler for MdhensintdrbgintrameccMetrics
func (s *RestServer) getMdhensintdrbgintrameccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MdhensintdrbgintrameccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMdhensintipcoreMetricsAPIRoutes adds routes for MdhensintipcoreMetrics
func (s *RestServer) AddMdhensintipcoreMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMdhensintipcoreMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMdhensintipcoreMetricsHandler))
}

// listMdhensintipcoreMetricsHandler is the List Handler for MdhensintipcoreMetrics
func (s *RestServer) listMdhensintipcoreMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMdhensintipcoreMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MdhensintipcoreMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("MdhensintipcoreMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MdhensintipcoreMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMdhensintipcoreMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMdhensintipcoreMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMdhensintipcoreMetricsHandler is the Get Handler for MdhensintipcoreMetrics
func (s *RestServer) getMdhensintipcoreMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MdhensintipcoreMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMdhensintpkeccMetricsAPIRoutes adds routes for MdhensintpkeccMetrics
func (s *RestServer) AddMdhensintpkeccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMdhensintpkeccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMdhensintpkeccMetricsHandler))
}

// listMdhensintpkeccMetricsHandler is the List Handler for MdhensintpkeccMetrics
func (s *RestServer) listMdhensintpkeccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMdhensintpkeccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MdhensintpkeccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("MdhensintpkeccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MdhensintpkeccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMdhensintpkeccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMdhensintpkeccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMdhensintpkeccMetricsHandler is the Get Handler for MdhensintpkeccMetrics
func (s *RestServer) getMdhensintpkeccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MdhensintpkeccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMpmpnsintcryptoMetricsAPIRoutes adds routes for MpmpnsintcryptoMetrics
func (s *RestServer) AddMpmpnsintcryptoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMpmpnsintcryptoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMpmpnsintcryptoMetricsHandler))
}

// listMpmpnsintcryptoMetricsHandler is the List Handler for MpmpnsintcryptoMetrics
func (s *RestServer) listMpmpnsintcryptoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMpmpnsintcryptoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MpmpnsintcryptoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("MpmpnsintcryptoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MpmpnsintcryptoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMpmpnsintcryptoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMpmpnsintcryptoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMpmpnsintcryptoMetricsHandler is the Get Handler for MpmpnsintcryptoMetrics
func (s *RestServer) getMpmpnsintcryptoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MpmpnsintcryptoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsemintgroupsintregMetricsAPIRoutes adds routes for MsemintgroupsintregMetrics
func (s *RestServer) AddMsemintgroupsintregMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsemintgroupsintregMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsemintgroupsintregMetricsHandler))
}

// listMsemintgroupsintregMetricsHandler is the List Handler for MsemintgroupsintregMetrics
func (s *RestServer) listMsemintgroupsintregMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsemintgroupsintregMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MsemintgroupsintregMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("MsemintgroupsintregMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MsemintgroupsintregMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsemintgroupsintregMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsemintgroupsintregMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsemintgroupsintregMetricsHandler is the Get Handler for MsemintgroupsintregMetrics
func (s *RestServer) getMsemintgroupsintregMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MsemintgroupsintregMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintesecureMetricsAPIRoutes adds routes for MsmsintesecureMetrics
func (s *RestServer) AddMsmsintesecureMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintesecureMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintesecureMetricsHandler))
}

// listMsmsintesecureMetricsHandler is the List Handler for MsmsintesecureMetrics
func (s *RestServer) listMsmsintesecureMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintesecureMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MsmsintesecureMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("MsmsintesecureMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MsmsintesecureMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintesecureMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintesecureMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintesecureMetricsHandler is the Get Handler for MsmsintesecureMetrics
func (s *RestServer) getMsmsintesecureMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MsmsintesecureMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic0MetricsAPIRoutes adds routes for Msmsintgic0Metrics
func (s *RestServer) AddMsmsintgic0MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic0MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic0MetricsHandler))
}

// listMsmsintgic0MetricsHandler is the List Handler for Msmsintgic0Metrics
func (s *RestServer) listMsmsintgic0MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic0MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic0Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic0MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic0Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic0MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic0MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic0MetricsHandler is the Get Handler for Msmsintgic0Metrics
func (s *RestServer) getMsmsintgic0MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic0Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic10MetricsAPIRoutes adds routes for Msmsintgic10Metrics
func (s *RestServer) AddMsmsintgic10MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic10MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic10MetricsHandler))
}

// listMsmsintgic10MetricsHandler is the List Handler for Msmsintgic10Metrics
func (s *RestServer) listMsmsintgic10MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic10MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic10Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic10MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic10Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic10MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic10MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic10MetricsHandler is the Get Handler for Msmsintgic10Metrics
func (s *RestServer) getMsmsintgic10MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic10Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic11MetricsAPIRoutes adds routes for Msmsintgic11Metrics
func (s *RestServer) AddMsmsintgic11MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic11MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic11MetricsHandler))
}

// listMsmsintgic11MetricsHandler is the List Handler for Msmsintgic11Metrics
func (s *RestServer) listMsmsintgic11MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic11MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic11Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic11MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic11Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic11MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic11MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic11MetricsHandler is the Get Handler for Msmsintgic11Metrics
func (s *RestServer) getMsmsintgic11MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic11Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic12MetricsAPIRoutes adds routes for Msmsintgic12Metrics
func (s *RestServer) AddMsmsintgic12MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic12MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic12MetricsHandler))
}

// listMsmsintgic12MetricsHandler is the List Handler for Msmsintgic12Metrics
func (s *RestServer) listMsmsintgic12MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic12MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic12Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic12MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic12Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic12MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic12MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic12MetricsHandler is the Get Handler for Msmsintgic12Metrics
func (s *RestServer) getMsmsintgic12MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic12Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic13MetricsAPIRoutes adds routes for Msmsintgic13Metrics
func (s *RestServer) AddMsmsintgic13MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic13MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic13MetricsHandler))
}

// listMsmsintgic13MetricsHandler is the List Handler for Msmsintgic13Metrics
func (s *RestServer) listMsmsintgic13MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic13MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic13Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic13MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic13Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic13MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic13MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic13MetricsHandler is the Get Handler for Msmsintgic13Metrics
func (s *RestServer) getMsmsintgic13MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic13Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic14MetricsAPIRoutes adds routes for Msmsintgic14Metrics
func (s *RestServer) AddMsmsintgic14MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic14MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic14MetricsHandler))
}

// listMsmsintgic14MetricsHandler is the List Handler for Msmsintgic14Metrics
func (s *RestServer) listMsmsintgic14MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic14MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic14Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic14MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic14Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic14MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic14MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic14MetricsHandler is the Get Handler for Msmsintgic14Metrics
func (s *RestServer) getMsmsintgic14MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic14Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic15MetricsAPIRoutes adds routes for Msmsintgic15Metrics
func (s *RestServer) AddMsmsintgic15MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic15MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic15MetricsHandler))
}

// listMsmsintgic15MetricsHandler is the List Handler for Msmsintgic15Metrics
func (s *RestServer) listMsmsintgic15MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic15MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic15Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic15MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic15Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic15MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic15MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic15MetricsHandler is the Get Handler for Msmsintgic15Metrics
func (s *RestServer) getMsmsintgic15MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic15Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic16MetricsAPIRoutes adds routes for Msmsintgic16Metrics
func (s *RestServer) AddMsmsintgic16MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic16MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic16MetricsHandler))
}

// listMsmsintgic16MetricsHandler is the List Handler for Msmsintgic16Metrics
func (s *RestServer) listMsmsintgic16MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic16MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic16Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic16MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic16Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic16MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic16MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic16MetricsHandler is the Get Handler for Msmsintgic16Metrics
func (s *RestServer) getMsmsintgic16MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic16Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic17MetricsAPIRoutes adds routes for Msmsintgic17Metrics
func (s *RestServer) AddMsmsintgic17MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic17MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic17MetricsHandler))
}

// listMsmsintgic17MetricsHandler is the List Handler for Msmsintgic17Metrics
func (s *RestServer) listMsmsintgic17MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic17MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic17Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic17MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic17Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic17MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic17MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic17MetricsHandler is the Get Handler for Msmsintgic17Metrics
func (s *RestServer) getMsmsintgic17MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic17Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic18MetricsAPIRoutes adds routes for Msmsintgic18Metrics
func (s *RestServer) AddMsmsintgic18MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic18MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic18MetricsHandler))
}

// listMsmsintgic18MetricsHandler is the List Handler for Msmsintgic18Metrics
func (s *RestServer) listMsmsintgic18MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic18MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic18Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic18MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic18Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic18MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic18MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic18MetricsHandler is the Get Handler for Msmsintgic18Metrics
func (s *RestServer) getMsmsintgic18MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic18Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic19MetricsAPIRoutes adds routes for Msmsintgic19Metrics
func (s *RestServer) AddMsmsintgic19MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic19MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic19MetricsHandler))
}

// listMsmsintgic19MetricsHandler is the List Handler for Msmsintgic19Metrics
func (s *RestServer) listMsmsintgic19MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic19MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic19Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic19MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic19Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic19MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic19MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic19MetricsHandler is the Get Handler for Msmsintgic19Metrics
func (s *RestServer) getMsmsintgic19MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic19Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic1MetricsAPIRoutes adds routes for Msmsintgic1Metrics
func (s *RestServer) AddMsmsintgic1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic1MetricsHandler))
}

// listMsmsintgic1MetricsHandler is the List Handler for Msmsintgic1Metrics
func (s *RestServer) listMsmsintgic1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic1MetricsHandler is the Get Handler for Msmsintgic1Metrics
func (s *RestServer) getMsmsintgic1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic20MetricsAPIRoutes adds routes for Msmsintgic20Metrics
func (s *RestServer) AddMsmsintgic20MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic20MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic20MetricsHandler))
}

// listMsmsintgic20MetricsHandler is the List Handler for Msmsintgic20Metrics
func (s *RestServer) listMsmsintgic20MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic20MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic20Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic20MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic20Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic20MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic20MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic20MetricsHandler is the Get Handler for Msmsintgic20Metrics
func (s *RestServer) getMsmsintgic20MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic20Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic21MetricsAPIRoutes adds routes for Msmsintgic21Metrics
func (s *RestServer) AddMsmsintgic21MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic21MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic21MetricsHandler))
}

// listMsmsintgic21MetricsHandler is the List Handler for Msmsintgic21Metrics
func (s *RestServer) listMsmsintgic21MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic21MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic21Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic21MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic21Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic21MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic21MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic21MetricsHandler is the Get Handler for Msmsintgic21Metrics
func (s *RestServer) getMsmsintgic21MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic21Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic22MetricsAPIRoutes adds routes for Msmsintgic22Metrics
func (s *RestServer) AddMsmsintgic22MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic22MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic22MetricsHandler))
}

// listMsmsintgic22MetricsHandler is the List Handler for Msmsintgic22Metrics
func (s *RestServer) listMsmsintgic22MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic22MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic22Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic22MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic22Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic22MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic22MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic22MetricsHandler is the Get Handler for Msmsintgic22Metrics
func (s *RestServer) getMsmsintgic22MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic22Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic23MetricsAPIRoutes adds routes for Msmsintgic23Metrics
func (s *RestServer) AddMsmsintgic23MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic23MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic23MetricsHandler))
}

// listMsmsintgic23MetricsHandler is the List Handler for Msmsintgic23Metrics
func (s *RestServer) listMsmsintgic23MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic23MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic23Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic23MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic23Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic23MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic23MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic23MetricsHandler is the Get Handler for Msmsintgic23Metrics
func (s *RestServer) getMsmsintgic23MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic23Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic2MetricsAPIRoutes adds routes for Msmsintgic2Metrics
func (s *RestServer) AddMsmsintgic2MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic2MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic2MetricsHandler))
}

// listMsmsintgic2MetricsHandler is the List Handler for Msmsintgic2Metrics
func (s *RestServer) listMsmsintgic2MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic2MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic2Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic2MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic2Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic2MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic2MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic2MetricsHandler is the Get Handler for Msmsintgic2Metrics
func (s *RestServer) getMsmsintgic2MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic2Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic3MetricsAPIRoutes adds routes for Msmsintgic3Metrics
func (s *RestServer) AddMsmsintgic3MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic3MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic3MetricsHandler))
}

// listMsmsintgic3MetricsHandler is the List Handler for Msmsintgic3Metrics
func (s *RestServer) listMsmsintgic3MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic3MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic3Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic3MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic3Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic3MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic3MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic3MetricsHandler is the Get Handler for Msmsintgic3Metrics
func (s *RestServer) getMsmsintgic3MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic3Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic4MetricsAPIRoutes adds routes for Msmsintgic4Metrics
func (s *RestServer) AddMsmsintgic4MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic4MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic4MetricsHandler))
}

// listMsmsintgic4MetricsHandler is the List Handler for Msmsintgic4Metrics
func (s *RestServer) listMsmsintgic4MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic4MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic4Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic4MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic4Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic4MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic4MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic4MetricsHandler is the Get Handler for Msmsintgic4Metrics
func (s *RestServer) getMsmsintgic4MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic4Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic5MetricsAPIRoutes adds routes for Msmsintgic5Metrics
func (s *RestServer) AddMsmsintgic5MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic5MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic5MetricsHandler))
}

// listMsmsintgic5MetricsHandler is the List Handler for Msmsintgic5Metrics
func (s *RestServer) listMsmsintgic5MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic5MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic5Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic5MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic5Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic5MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic5MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic5MetricsHandler is the Get Handler for Msmsintgic5Metrics
func (s *RestServer) getMsmsintgic5MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic5Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic6MetricsAPIRoutes adds routes for Msmsintgic6Metrics
func (s *RestServer) AddMsmsintgic6MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic6MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic6MetricsHandler))
}

// listMsmsintgic6MetricsHandler is the List Handler for Msmsintgic6Metrics
func (s *RestServer) listMsmsintgic6MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic6MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic6Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic6MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic6Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic6MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic6MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic6MetricsHandler is the Get Handler for Msmsintgic6Metrics
func (s *RestServer) getMsmsintgic6MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic6Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic7MetricsAPIRoutes adds routes for Msmsintgic7Metrics
func (s *RestServer) AddMsmsintgic7MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic7MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic7MetricsHandler))
}

// listMsmsintgic7MetricsHandler is the List Handler for Msmsintgic7Metrics
func (s *RestServer) listMsmsintgic7MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic7MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic7Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic7MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic7Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic7MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic7MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic7MetricsHandler is the Get Handler for Msmsintgic7Metrics
func (s *RestServer) getMsmsintgic7MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic7Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic8MetricsAPIRoutes adds routes for Msmsintgic8Metrics
func (s *RestServer) AddMsmsintgic8MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic8MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic8MetricsHandler))
}

// listMsmsintgic8MetricsHandler is the List Handler for Msmsintgic8Metrics
func (s *RestServer) listMsmsintgic8MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic8MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic8Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic8MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic8Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic8MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic8MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic8MetricsHandler is the Get Handler for Msmsintgic8Metrics
func (s *RestServer) getMsmsintgic8MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic8Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintgic9MetricsAPIRoutes adds routes for Msmsintgic9Metrics
func (s *RestServer) AddMsmsintgic9MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintgic9MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintgic9MetricsHandler))
}

// listMsmsintgic9MetricsHandler is the List Handler for Msmsintgic9Metrics
func (s *RestServer) listMsmsintgic9MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintgic9MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintgic9Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintgic9MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintgic9Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintgic9MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintgic9MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintgic9MetricsHandler is the Get Handler for Msmsintgic9Metrics
func (s *RestServer) getMsmsintgic9MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintgic9Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintmiscMetricsAPIRoutes adds routes for MsmsintmiscMetrics
func (s *RestServer) AddMsmsintmiscMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintmiscMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintmiscMetricsHandler))
}

// listMsmsintmiscMetricsHandler is the List Handler for MsmsintmiscMetrics
func (s *RestServer) listMsmsintmiscMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintmiscMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MsmsintmiscMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("MsmsintmiscMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MsmsintmiscMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintmiscMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintmiscMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintmiscMetricsHandler is the Get Handler for MsmsintmiscMetrics
func (s *RestServer) getMsmsintmiscMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MsmsintmiscMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintmsMetricsAPIRoutes adds routes for MsmsintmsMetrics
func (s *RestServer) AddMsmsintmsMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintmsMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintmsMetricsHandler))
}

// listMsmsintmsMetricsHandler is the List Handler for MsmsintmsMetrics
func (s *RestServer) listMsmsintmsMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintmsMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MsmsintmsMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("MsmsintmsMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MsmsintmsMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintmsMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintmsMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintmsMetricsHandler is the Get Handler for MsmsintmsMetrics
func (s *RestServer) getMsmsintmsMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MsmsintmsMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintprp1MetricsAPIRoutes adds routes for Msmsintprp1Metrics
func (s *RestServer) AddMsmsintprp1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintprp1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintprp1MetricsHandler))
}

// listMsmsintprp1MetricsHandler is the List Handler for Msmsintprp1Metrics
func (s *RestServer) listMsmsintprp1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintprp1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintprp1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintprp1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintprp1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintprp1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintprp1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintprp1MetricsHandler is the Get Handler for Msmsintprp1Metrics
func (s *RestServer) getMsmsintprp1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintprp1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintprp2MetricsAPIRoutes adds routes for Msmsintprp2Metrics
func (s *RestServer) AddMsmsintprp2MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintprp2MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintprp2MetricsHandler))
}

// listMsmsintprp2MetricsHandler is the List Handler for Msmsintprp2Metrics
func (s *RestServer) listMsmsintprp2MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintprp2MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintprp2Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintprp2MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintprp2Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintprp2MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintprp2MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintprp2MetricsHandler is the Get Handler for Msmsintprp2Metrics
func (s *RestServer) getMsmsintprp2MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintprp2Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintprp3MetricsAPIRoutes adds routes for Msmsintprp3Metrics
func (s *RestServer) AddMsmsintprp3MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintprp3MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintprp3MetricsHandler))
}

// listMsmsintprp3MetricsHandler is the List Handler for Msmsintprp3Metrics
func (s *RestServer) listMsmsintprp3MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintprp3MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintprp3Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintprp3MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintprp3Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintprp3MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintprp3MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintprp3MetricsHandler is the Get Handler for Msmsintprp3Metrics
func (s *RestServer) getMsmsintprp3MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintprp3Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintprp4MetricsAPIRoutes adds routes for Msmsintprp4Metrics
func (s *RestServer) AddMsmsintprp4MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintprp4MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintprp4MetricsHandler))
}

// listMsmsintprp4MetricsHandler is the List Handler for Msmsintprp4Metrics
func (s *RestServer) listMsmsintprp4MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintprp4MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintprp4Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintprp4MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintprp4Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintprp4MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintprp4MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintprp4MetricsHandler is the Get Handler for Msmsintprp4Metrics
func (s *RestServer) getMsmsintprp4MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintprp4Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMsmsintprp5MetricsAPIRoutes adds routes for Msmsintprp5Metrics
func (s *RestServer) AddMsmsintprp5MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMsmsintprp5MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMsmsintprp5MetricsHandler))
}

// listMsmsintprp5MetricsHandler is the List Handler for Msmsintprp5Metrics
func (s *RestServer) listMsmsintprp5MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMsmsintprp5MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Msmsintprp5Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Msmsintprp5MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Msmsintprp5Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMsmsintprp5MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMsmsintprp5MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMsmsintprp5MetricsHandler is the Get Handler for Msmsintprp5Metrics
func (s *RestServer) getMsmsintprp5MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Msmsintprp5Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMxmx0inteccMetricsAPIRoutes adds routes for Mxmx0inteccMetrics
func (s *RestServer) AddMxmx0inteccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMxmx0inteccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMxmx0inteccMetricsHandler))
}

// listMxmx0inteccMetricsHandler is the List Handler for Mxmx0inteccMetrics
func (s *RestServer) listMxmx0inteccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMxmx0inteccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mxmx0inteccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mxmx0inteccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mxmx0inteccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMxmx0inteccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMxmx0inteccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMxmx0inteccMetricsHandler is the Get Handler for Mxmx0inteccMetrics
func (s *RestServer) getMxmx0inteccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mxmx0inteccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMxmx0intmacMetricsAPIRoutes adds routes for Mxmx0intmacMetrics
func (s *RestServer) AddMxmx0intmacMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMxmx0intmacMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMxmx0intmacMetricsHandler))
}

// listMxmx0intmacMetricsHandler is the List Handler for Mxmx0intmacMetrics
func (s *RestServer) listMxmx0intmacMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMxmx0intmacMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mxmx0intmacMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mxmx0intmacMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mxmx0intmacMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMxmx0intmacMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMxmx0intmacMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMxmx0intmacMetricsHandler is the Get Handler for Mxmx0intmacMetrics
func (s *RestServer) getMxmx0intmacMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mxmx0intmacMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMxmx1inteccMetricsAPIRoutes adds routes for Mxmx1inteccMetrics
func (s *RestServer) AddMxmx1inteccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMxmx1inteccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMxmx1inteccMetricsHandler))
}

// listMxmx1inteccMetricsHandler is the List Handler for Mxmx1inteccMetrics
func (s *RestServer) listMxmx1inteccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMxmx1inteccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mxmx1inteccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mxmx1inteccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mxmx1inteccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMxmx1inteccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMxmx1inteccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMxmx1inteccMetricsHandler is the Get Handler for Mxmx1inteccMetrics
func (s *RestServer) getMxmx1inteccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mxmx1inteccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddMxmx1intmacMetricsAPIRoutes adds routes for Mxmx1intmacMetrics
func (s *RestServer) AddMxmx1intmacMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getMxmx1intmacMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listMxmx1intmacMetricsHandler))
}

// listMxmx1intmacMetricsHandler is the List Handler for Mxmx1intmacMetrics
func (s *RestServer) listMxmx1intmacMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMxmx1intmacMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Mxmx1intmacMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Mxmx1intmacMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Mxmx1intmacMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMxmx1intmacMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMxmx1intmacMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getMxmx1intmacMetricsHandler is the Get Handler for Mxmx1intmacMetrics
func (s *RestServer) getMxmx1intmacMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Mxmx1intmacMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbmintecchbmhtMetricsAPIRoutes adds routes for PbpbchbmintecchbmhtMetrics
func (s *RestServer) AddPbpbchbmintecchbmhtMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbmintecchbmhtMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbmintecchbmhtMetricsHandler))
}

// listPbpbchbmintecchbmhtMetricsHandler is the List Handler for PbpbchbmintecchbmhtMetrics
func (s *RestServer) listPbpbchbmintecchbmhtMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbmintecchbmhtMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbmintecchbmhtMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbmintecchbmhtMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbmintecchbmhtMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbmintecchbmhtMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbmintecchbmhtMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbmintecchbmhtMetricsHandler is the Get Handler for PbpbchbmintecchbmhtMetrics
func (s *RestServer) getPbpbchbmintecchbmhtMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbmintecchbmhtMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbminthbmaxierrrspMetricsAPIRoutes adds routes for PbpbchbminthbmaxierrrspMetrics
func (s *RestServer) AddPbpbchbminthbmaxierrrspMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbminthbmaxierrrspMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbminthbmaxierrrspMetricsHandler))
}

// listPbpbchbminthbmaxierrrspMetricsHandler is the List Handler for PbpbchbminthbmaxierrrspMetrics
func (s *RestServer) listPbpbchbminthbmaxierrrspMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmaxierrrspMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmaxierrrspMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbminthbmaxierrrspMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmaxierrrspMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmaxierrrspMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmaxierrrspMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbminthbmaxierrrspMetricsHandler is the Get Handler for PbpbchbminthbmaxierrrspMetrics
func (s *RestServer) getPbpbchbminthbmaxierrrspMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmaxierrrspMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbminthbmdropMetricsAPIRoutes adds routes for PbpbchbminthbmdropMetrics
func (s *RestServer) AddPbpbchbminthbmdropMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbminthbmdropMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbminthbmdropMetricsHandler))
}

// listPbpbchbminthbmdropMetricsHandler is the List Handler for PbpbchbminthbmdropMetrics
func (s *RestServer) listPbpbchbminthbmdropMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmdropMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmdropMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbminthbmdropMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmdropMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmdropMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmdropMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbminthbmdropMetricsHandler is the Get Handler for PbpbchbminthbmdropMetrics
func (s *RestServer) getPbpbchbminthbmdropMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmdropMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbminthbmdropctrlMetricsAPIRoutes adds routes for PbpbchbminthbmdropctrlMetrics
func (s *RestServer) AddPbpbchbminthbmdropctrlMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbminthbmdropctrlMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbminthbmdropctrlMetricsHandler))
}

// listPbpbchbminthbmdropctrlMetricsHandler is the List Handler for PbpbchbminthbmdropctrlMetrics
func (s *RestServer) listPbpbchbminthbmdropctrlMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmdropctrlMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmdropctrlMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbminthbmdropctrlMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmdropctrlMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmdropctrlMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmdropctrlMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbminthbmdropctrlMetricsHandler is the Get Handler for PbpbchbminthbmdropctrlMetrics
func (s *RestServer) getPbpbchbminthbmdropctrlMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmdropctrlMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbminthbmdropemergencyMetricsAPIRoutes adds routes for PbpbchbminthbmdropemergencyMetrics
func (s *RestServer) AddPbpbchbminthbmdropemergencyMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbminthbmdropemergencyMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbminthbmdropemergencyMetricsHandler))
}

// listPbpbchbminthbmdropemergencyMetricsHandler is the List Handler for PbpbchbminthbmdropemergencyMetrics
func (s *RestServer) listPbpbchbminthbmdropemergencyMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmdropemergencyMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmdropemergencyMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbminthbmdropemergencyMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmdropemergencyMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmdropemergencyMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmdropemergencyMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbminthbmdropemergencyMetricsHandler is the Get Handler for PbpbchbminthbmdropemergencyMetrics
func (s *RestServer) getPbpbchbminthbmdropemergencyMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmdropemergencyMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbminthbmdropthresholdMetricsAPIRoutes adds routes for PbpbchbminthbmdropthresholdMetrics
func (s *RestServer) AddPbpbchbminthbmdropthresholdMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbminthbmdropthresholdMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbminthbmdropthresholdMetricsHandler))
}

// listPbpbchbminthbmdropthresholdMetricsHandler is the List Handler for PbpbchbminthbmdropthresholdMetrics
func (s *RestServer) listPbpbchbminthbmdropthresholdMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmdropthresholdMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmdropthresholdMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbminthbmdropthresholdMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmdropthresholdMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmdropthresholdMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmdropthresholdMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbminthbmdropthresholdMetricsHandler is the Get Handler for PbpbchbminthbmdropthresholdMetrics
func (s *RestServer) getPbpbchbminthbmdropthresholdMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmdropthresholdMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbminthbmdropwriteackMetricsAPIRoutes adds routes for PbpbchbminthbmdropwriteackMetrics
func (s *RestServer) AddPbpbchbminthbmdropwriteackMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbminthbmdropwriteackMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbminthbmdropwriteackMetricsHandler))
}

// listPbpbchbminthbmdropwriteackMetricsHandler is the List Handler for PbpbchbminthbmdropwriteackMetrics
func (s *RestServer) listPbpbchbminthbmdropwriteackMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmdropwriteackMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmdropwriteackMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbminthbmdropwriteackMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmdropwriteackMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmdropwriteackMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmdropwriteackMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbminthbmdropwriteackMetricsHandler is the Get Handler for PbpbchbminthbmdropwriteackMetrics
func (s *RestServer) getPbpbchbminthbmdropwriteackMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmdropwriteackMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbminthbmpbusviolationinMetricsAPIRoutes adds routes for PbpbchbminthbmpbusviolationinMetrics
func (s *RestServer) AddPbpbchbminthbmpbusviolationinMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbminthbmpbusviolationinMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbminthbmpbusviolationinMetricsHandler))
}

// listPbpbchbminthbmpbusviolationinMetricsHandler is the List Handler for PbpbchbminthbmpbusviolationinMetrics
func (s *RestServer) listPbpbchbminthbmpbusviolationinMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmpbusviolationinMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmpbusviolationinMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbminthbmpbusviolationinMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmpbusviolationinMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmpbusviolationinMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmpbusviolationinMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbminthbmpbusviolationinMetricsHandler is the Get Handler for PbpbchbminthbmpbusviolationinMetrics
func (s *RestServer) getPbpbchbminthbmpbusviolationinMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmpbusviolationinMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbminthbmpbusviolationoutMetricsAPIRoutes adds routes for PbpbchbminthbmpbusviolationoutMetrics
func (s *RestServer) AddPbpbchbminthbmpbusviolationoutMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbminthbmpbusviolationoutMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbminthbmpbusviolationoutMetricsHandler))
}

// listPbpbchbminthbmpbusviolationoutMetricsHandler is the List Handler for PbpbchbminthbmpbusviolationoutMetrics
func (s *RestServer) listPbpbchbminthbmpbusviolationoutMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmpbusviolationoutMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmpbusviolationoutMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbminthbmpbusviolationoutMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmpbusviolationoutMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmpbusviolationoutMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmpbusviolationoutMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbminthbmpbusviolationoutMetricsHandler is the Get Handler for PbpbchbminthbmpbusviolationoutMetrics
func (s *RestServer) getPbpbchbminthbmpbusviolationoutMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmpbusviolationoutMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbminthbmstopMetricsAPIRoutes adds routes for PbpbchbminthbmstopMetrics
func (s *RestServer) AddPbpbchbminthbmstopMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbminthbmstopMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbminthbmstopMetricsHandler))
}

// listPbpbchbminthbmstopMetricsHandler is the List Handler for PbpbchbminthbmstopMetrics
func (s *RestServer) listPbpbchbminthbmstopMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmstopMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmstopMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbminthbmstopMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmstopMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmstopMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmstopMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbminthbmstopMetricsHandler is the Get Handler for PbpbchbminthbmstopMetrics
func (s *RestServer) getPbpbchbminthbmstopMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmstopMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbminthbmtruncatenoMetricsAPIRoutes adds routes for PbpbchbminthbmtruncatenoMetrics
func (s *RestServer) AddPbpbchbminthbmtruncatenoMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbminthbmtruncatenoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbminthbmtruncatenoMetricsHandler))
}

// listPbpbchbminthbmtruncatenoMetricsHandler is the List Handler for PbpbchbminthbmtruncatenoMetrics
func (s *RestServer) listPbpbchbminthbmtruncatenoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmtruncatenoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmtruncatenoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbminthbmtruncatenoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmtruncatenoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmtruncatenoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmtruncatenoMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbminthbmtruncatenoMetricsHandler is the Get Handler for PbpbchbminthbmtruncatenoMetrics
func (s *RestServer) getPbpbchbminthbmtruncatenoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmtruncatenoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPbpbchbminthbmxoffMetricsAPIRoutes adds routes for PbpbchbminthbmxoffMetrics
func (s *RestServer) AddPbpbchbminthbmxoffMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPbpbchbminthbmxoffMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPbpbchbminthbmxoffMetricsHandler))
}

// listPbpbchbminthbmxoffMetricsHandler is the List Handler for PbpbchbminthbmxoffMetrics
func (s *RestServer) listPbpbchbminthbmxoffMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmxoffMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmxoffMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("PbpbchbminthbmxoffMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmxoffMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmxoffMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmxoffMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPbpbchbminthbmxoffMetricsHandler is the Get Handler for PbpbchbminthbmxoffMetrics
func (s *RestServer) getPbpbchbminthbmxoffMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmxoffMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPmpbmintecccol0MetricsAPIRoutes adds routes for Pmpbmintecccol0Metrics
func (s *RestServer) AddPmpbmintecccol0MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPmpbmintecccol0MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPmpbmintecccol0MetricsHandler))
}

// listPmpbmintecccol0MetricsHandler is the List Handler for Pmpbmintecccol0Metrics
func (s *RestServer) listPmpbmintecccol0MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPmpbmintecccol0MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pmpbmintecccol0Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pmpbmintecccol0MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pmpbmintecccol0Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPmpbmintecccol0MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPmpbmintecccol0MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPmpbmintecccol0MetricsHandler is the Get Handler for Pmpbmintecccol0Metrics
func (s *RestServer) getPmpbmintecccol0MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pmpbmintecccol0Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPmpbmintecccol1MetricsAPIRoutes adds routes for Pmpbmintecccol1Metrics
func (s *RestServer) AddPmpbmintecccol1MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPmpbmintecccol1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPmpbmintecccol1MetricsHandler))
}

// listPmpbmintecccol1MetricsHandler is the List Handler for Pmpbmintecccol1Metrics
func (s *RestServer) listPmpbmintecccol1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPmpbmintecccol1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pmpbmintecccol1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pmpbmintecccol1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pmpbmintecccol1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPmpbmintecccol1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPmpbmintecccol1MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPmpbmintecccol1MetricsHandler is the Get Handler for Pmpbmintecccol1Metrics
func (s *RestServer) getPmpbmintecccol1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pmpbmintecccol1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPmpbmintecccol2MetricsAPIRoutes adds routes for Pmpbmintecccol2Metrics
func (s *RestServer) AddPmpbmintecccol2MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPmpbmintecccol2MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPmpbmintecccol2MetricsHandler))
}

// listPmpbmintecccol2MetricsHandler is the List Handler for Pmpbmintecccol2Metrics
func (s *RestServer) listPmpbmintecccol2MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPmpbmintecccol2MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pmpbmintecccol2Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pmpbmintecccol2MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pmpbmintecccol2Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPmpbmintecccol2MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPmpbmintecccol2MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPmpbmintecccol2MetricsHandler is the Get Handler for Pmpbmintecccol2Metrics
func (s *RestServer) getPmpbmintecccol2MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pmpbmintecccol2Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPmpbmintecccol3MetricsAPIRoutes adds routes for Pmpbmintecccol3Metrics
func (s *RestServer) AddPmpbmintecccol3MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPmpbmintecccol3MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPmpbmintecccol3MetricsHandler))
}

// listPmpbmintecccol3MetricsHandler is the List Handler for Pmpbmintecccol3Metrics
func (s *RestServer) listPmpbmintecccol3MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPmpbmintecccol3MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pmpbmintecccol3Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pmpbmintecccol3MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pmpbmintecccol3Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPmpbmintecccol3MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPmpbmintecccol3MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPmpbmintecccol3MetricsHandler is the Get Handler for Pmpbmintecccol3Metrics
func (s *RestServer) getPmpbmintecccol3MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pmpbmintecccol3Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddPmpbmintecccol4MetricsAPIRoutes adds routes for Pmpbmintecccol4Metrics
func (s *RestServer) AddPmpbmintecccol4MetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getPmpbmintecccol4MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listPmpbmintecccol4MetricsHandler))
}

// listPmpbmintecccol4MetricsHandler is the List Handler for Pmpbmintecccol4Metrics
func (s *RestServer) listPmpbmintecccol4MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPmpbmintecccol4MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Pmpbmintecccol4Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("Pmpbmintecccol4MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Pmpbmintecccol4Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPmpbmintecccol4MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPmpbmintecccol4MetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getPmpbmintecccol4MetricsHandler is the Get Handler for Pmpbmintecccol4Metrics
func (s *RestServer) getPmpbmintecccol4MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Pmpbmintecccol4Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddSemasemaintgroupsintregMetricsAPIRoutes adds routes for SemasemaintgroupsintregMetrics
func (s *RestServer) AddSemasemaintgroupsintregMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getSemasemaintgroupsintregMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listSemasemaintgroupsintregMetricsHandler))
}

// listSemasemaintgroupsintregMetricsHandler is the List Handler for SemasemaintgroupsintregMetrics
func (s *RestServer) listSemasemaintgroupsintregMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSemasemaintgroupsintregMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SemasemaintgroupsintregMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("SemasemaintgroupsintregMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SemasemaintgroupsintregMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSemasemaintgroupsintregMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSemasemaintgroupsintregMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getSemasemaintgroupsintregMetricsHandler is the Get Handler for SemasemaintgroupsintregMetrics
func (s *RestServer) getSemasemaintgroupsintregMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SemasemaintgroupsintregMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddSsepicsintbadaddrMetricsAPIRoutes adds routes for SsepicsintbadaddrMetrics
func (s *RestServer) AddSsepicsintbadaddrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getSsepicsintbadaddrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listSsepicsintbadaddrMetricsHandler))
}

// listSsepicsintbadaddrMetricsHandler is the List Handler for SsepicsintbadaddrMetrics
func (s *RestServer) listSsepicsintbadaddrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsepicsintbadaddrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsepicsintbadaddrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("SsepicsintbadaddrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsepicsintbadaddrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsepicsintbadaddrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsepicsintbadaddrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getSsepicsintbadaddrMetricsHandler is the Get Handler for SsepicsintbadaddrMetrics
func (s *RestServer) getSsepicsintbadaddrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsepicsintbadaddrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddSsepicsintbgMetricsAPIRoutes adds routes for SsepicsintbgMetrics
func (s *RestServer) AddSsepicsintbgMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getSsepicsintbgMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listSsepicsintbgMetricsHandler))
}

// listSsepicsintbgMetricsHandler is the List Handler for SsepicsintbgMetrics
func (s *RestServer) listSsepicsintbgMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsepicsintbgMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsepicsintbgMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("SsepicsintbgMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsepicsintbgMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsepicsintbgMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsepicsintbgMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getSsepicsintbgMetricsHandler is the Get Handler for SsepicsintbgMetrics
func (s *RestServer) getSsepicsintbgMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsepicsintbgMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddSsepicsintpicsMetricsAPIRoutes adds routes for SsepicsintpicsMetrics
func (s *RestServer) AddSsepicsintpicsMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getSsepicsintpicsMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listSsepicsintpicsMetricsHandler))
}

// listSsepicsintpicsMetricsHandler is the List Handler for SsepicsintpicsMetrics
func (s *RestServer) listSsepicsintpicsMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsepicsintpicsMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsepicsintpicsMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("SsepicsintpicsMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsepicsintpicsMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsepicsintpicsMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsepicsintpicsMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getSsepicsintpicsMetricsHandler is the Get Handler for SsepicsintpicsMetrics
func (s *RestServer) getSsepicsintpicsMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsepicsintpicsMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddSsepicspiccintpiccMetricsAPIRoutes adds routes for SsepicspiccintpiccMetrics
func (s *RestServer) AddSsepicspiccintpiccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getSsepicspiccintpiccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listSsepicspiccintpiccMetricsHandler))
}

// listSsepicspiccintpiccMetricsHandler is the List Handler for SsepicspiccintpiccMetrics
func (s *RestServer) listSsepicspiccintpiccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsepicspiccintpiccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsepicspiccintpiccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("SsepicspiccintpiccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsepicspiccintpiccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsepicspiccintpiccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsepicspiccintpiccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getSsepicspiccintpiccMetricsHandler is the Get Handler for SsepicspiccintpiccMetrics
func (s *RestServer) getSsepicspiccintpiccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsepicspiccintpiccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddSsipicsintbadaddrMetricsAPIRoutes adds routes for SsipicsintbadaddrMetrics
func (s *RestServer) AddSsipicsintbadaddrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getSsipicsintbadaddrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listSsipicsintbadaddrMetricsHandler))
}

// listSsipicsintbadaddrMetricsHandler is the List Handler for SsipicsintbadaddrMetrics
func (s *RestServer) listSsipicsintbadaddrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsipicsintbadaddrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsipicsintbadaddrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("SsipicsintbadaddrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsipicsintbadaddrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsipicsintbadaddrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsipicsintbadaddrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getSsipicsintbadaddrMetricsHandler is the Get Handler for SsipicsintbadaddrMetrics
func (s *RestServer) getSsipicsintbadaddrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsipicsintbadaddrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddSsipicsintbgMetricsAPIRoutes adds routes for SsipicsintbgMetrics
func (s *RestServer) AddSsipicsintbgMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getSsipicsintbgMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listSsipicsintbgMetricsHandler))
}

// listSsipicsintbgMetricsHandler is the List Handler for SsipicsintbgMetrics
func (s *RestServer) listSsipicsintbgMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsipicsintbgMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsipicsintbgMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("SsipicsintbgMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsipicsintbgMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsipicsintbgMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsipicsintbgMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getSsipicsintbgMetricsHandler is the Get Handler for SsipicsintbgMetrics
func (s *RestServer) getSsipicsintbgMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsipicsintbgMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddSsipicsintpicsMetricsAPIRoutes adds routes for SsipicsintpicsMetrics
func (s *RestServer) AddSsipicsintpicsMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getSsipicsintpicsMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listSsipicsintpicsMetricsHandler))
}

// listSsipicsintpicsMetricsHandler is the List Handler for SsipicsintpicsMetrics
func (s *RestServer) listSsipicsintpicsMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsipicsintpicsMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsipicsintpicsMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("SsipicsintpicsMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsipicsintpicsMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsipicsintpicsMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsipicsintpicsMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getSsipicsintpicsMetricsHandler is the Get Handler for SsipicsintpicsMetrics
func (s *RestServer) getSsipicsintpicsMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsipicsintpicsMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddSsipicspiccintpiccMetricsAPIRoutes adds routes for SsipicspiccintpiccMetrics
func (s *RestServer) AddSsipicspiccintpiccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getSsipicspiccintpiccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listSsipicspiccintpiccMetricsHandler))
}

// listSsipicspiccintpiccMetricsHandler is the List Handler for SsipicspiccintpiccMetrics
func (s *RestServer) listSsipicspiccintpiccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsipicspiccintpiccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsipicspiccintpiccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("SsipicspiccintpiccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsipicspiccintpiccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsipicspiccintpiccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsipicspiccintpiccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getSsipicspiccintpiccMetricsHandler is the Get Handler for SsipicspiccintpiccMetrics
func (s *RestServer) getSsipicspiccintpiccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsipicspiccintpiccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddTpcpicsintbadaddrMetricsAPIRoutes adds routes for TpcpicsintbadaddrMetrics
func (s *RestServer) AddTpcpicsintbadaddrMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getTpcpicsintbadaddrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listTpcpicsintbadaddrMetricsHandler))
}

// listTpcpicsintbadaddrMetricsHandler is the List Handler for TpcpicsintbadaddrMetrics
func (s *RestServer) listTpcpicsintbadaddrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewTpcpicsintbadaddrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.TpcpicsintbadaddrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("TpcpicsintbadaddrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for TpcpicsintbadaddrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getTpcpicsintbadaddrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getTpcpicsintbadaddrMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getTpcpicsintbadaddrMetricsHandler is the Get Handler for TpcpicsintbadaddrMetrics
func (s *RestServer) getTpcpicsintbadaddrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request TpcpicsintbadaddrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddTpcpicsintbgMetricsAPIRoutes adds routes for TpcpicsintbgMetrics
func (s *RestServer) AddTpcpicsintbgMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getTpcpicsintbgMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listTpcpicsintbgMetricsHandler))
}

// listTpcpicsintbgMetricsHandler is the List Handler for TpcpicsintbgMetrics
func (s *RestServer) listTpcpicsintbgMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewTpcpicsintbgMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.TpcpicsintbgMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("TpcpicsintbgMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for TpcpicsintbgMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getTpcpicsintbgMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getTpcpicsintbgMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getTpcpicsintbgMetricsHandler is the Get Handler for TpcpicsintbgMetrics
func (s *RestServer) getTpcpicsintbgMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request TpcpicsintbgMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddTpcpicsintpicsMetricsAPIRoutes adds routes for TpcpicsintpicsMetrics
func (s *RestServer) AddTpcpicsintpicsMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getTpcpicsintpicsMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listTpcpicsintpicsMetricsHandler))
}

// listTpcpicsintpicsMetricsHandler is the List Handler for TpcpicsintpicsMetrics
func (s *RestServer) listTpcpicsintpicsMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewTpcpicsintpicsMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.TpcpicsintpicsMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("TpcpicsintpicsMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for TpcpicsintpicsMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getTpcpicsintpicsMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getTpcpicsintpicsMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getTpcpicsintpicsMetricsHandler is the Get Handler for TpcpicsintpicsMetrics
func (s *RestServer) getTpcpicsintpicsMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request TpcpicsintpicsMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// AddTpcpicspiccintpiccMetricsAPIRoutes adds routes for TpcpicspiccintpiccMetrics
func (s *RestServer) AddTpcpicspiccintpiccMetricsAPIRoutes(r *mux.Router) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(s.getTpcpicspiccintpiccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listTpcpicspiccintpiccMetricsHandler))
}

// listTpcpicspiccintpiccMetricsHandler is the List Handler for TpcpicspiccintpiccMetrics
func (s *RestServer) listTpcpicspiccintpiccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewTpcpicspiccintpiccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.TpcpicspiccintpiccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.GetObjectMeta("TpcpicspiccintpiccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for TpcpicspiccintpiccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getTpcpicspiccintpiccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getTpcpicspiccintpiccMetricsPoints() ([]*tsdb.Point, error) {

	return nil, nil

}

// getTpcpicspiccintpiccMetricsHandler is the Get Handler for TpcpicspiccintpiccMetrics
func (s *RestServer) getTpcpicspiccintpiccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request TpcpicspiccintpiccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}
