// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package netproto is a auto generated package.
Input file: endpoint.proto
*/
package restapi_test

import (
	"testing"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/protos/netproto"
	"github.com/pensando/sw/venice/utils/netutils"
	. "github.com/pensando/sw/venice/utils/testutils"
)

func TestEndpointList(t *testing.T) {
	t.Parallel()
	var ok bool
	var endpointList []*netproto.Endpoint

	err := netutils.HTTPGet("http://"+agentRestURL+"/api/endpoints/", &endpointList)

	AssertOk(t, err, "Error getting endpoints from the REST Server")
	for _, o := range endpointList {
		if o.Name == "preCreatedEndpoint" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find preCreatedEndpoint in Response: %v", endpointList)
	}

}

func TestEndpointPost(t *testing.T) {
	t.Parallel()
	var resp Response
	var ok bool
	var endpointList []*netproto.Endpoint

	postData := netproto.Endpoint{
		TypeMeta: api.TypeMeta{Kind: "Endpoint"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testPostEndpoint",
		},
		Spec: netproto.EndpointSpec{
			VrfName:       "default",
			EndpointUUID:  "testEndpointUUID",
			WorkloadUUID:  "testWorkloadUUID",
			NetworkName:   "preCreatedNetwork",
			InterfaceType: "UPLINK",
			Interface:     "uplink128",
			NodeUUID:      "dummy-node-uuid",
			IPv4Addresses: []string{"10.1.1.0/24"},
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/endpoints/", &postData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/endpoints/", &endpointList)

	AssertOk(t, err, "Error posting endpoint to REST Server")
	AssertOk(t, getErr, "Error getting endpoints from the REST Server")
	for _, o := range endpointList {
		if o.Name == "testPostEndpoint" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find testPostEndpoint in Response: %v", endpointList)
	}

}

func TestEndpointUpdate(t *testing.T) {
	t.Parallel()
	var resp Response
	var endpointList []*netproto.Endpoint

	var actualEndpointSpec netproto.EndpointSpec
	updatedEndpointSpec := netproto.EndpointSpec{
		VrfName:       "default",
		EndpointUUID:  "testEndpointUUID",
		WorkloadUUID:  "updatedWorkloadUUID",
		NetworkName:   "preCreatedNetwork",
		InterfaceType: "UPLINK",
		Interface:     "uplink128",
		NodeUUID:      "dummy-node-uuid",
		IPv4Address:   "10.1.1.0/24",
	}
	putData := netproto.Endpoint{
		TypeMeta: api.TypeMeta{Kind: "Endpoint"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "preCreatedEndpoint",
		},
		Spec: updatedEndpointSpec,
	}
	err := netutils.HTTPPut("http://"+agentRestURL+"/api/endpoints/default/default/preCreatedEndpoint", &putData, &resp)
	AssertOk(t, err, "Error updating endpoint to REST Server")

	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/endpoints/", &endpointList)
	AssertOk(t, getErr, "Error getting endpoints from the REST Server")

	for _, o := range endpointList {
		if o.Name == "preCreatedEndpoint" {
			actualEndpointSpec = o.Spec
			break
		}
	}
	AssertEquals(t, updatedEndpointSpec, actualEndpointSpec, "Could not validate updated spec.")

}

func TestEndpointDelete(t *testing.T) {
	t.Parallel()
	var resp Response
	var found bool
	var endpointList []*netproto.Endpoint

	deleteData := netproto.Endpoint{
		TypeMeta: api.TypeMeta{Kind: "Endpoint"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testDeleteEndpoint",
		},
		Spec: netproto.EndpointSpec{
			VrfName:       "default",
			EndpointUUID:  "testEndpointUUID",
			WorkloadUUID:  "testWorkloadUUID",
			NetworkName:   "preCreatedNetwork",
			InterfaceType: "UPLINK",
			Interface:     "uplink128",
			NodeUUID:      "dummy-node-uuid",
			IPv4Addresses: []string{"10.1.1.0/24"},
		},
	}
	postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/endpoints/", &deleteData, &resp)
	err := netutils.HTTPDelete("http://"+agentRestURL+"/api/endpoints/default/default/testDeleteEndpoint", &deleteData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/endpoints/", &endpointList)

	AssertOk(t, postErr, "Error posting endpoint to REST Server")
	AssertOk(t, err, "Error deleting endpoint from REST Server")
	AssertOk(t, getErr, "Error getting endpoints from the REST Server")
	for _, o := range endpointList {
		if o.Name == "testDeleteEndpoint" {
			found = true
			break
		}
	}
	if found {
		t.Errorf("Found testDeleteEndpoint in Response after deleting: %v", endpointList)
	}

}

func TestEndpointCreateErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badPostData := netproto.Endpoint{
		TypeMeta: api.TypeMeta{Kind: "Endpoint"},
		ObjectMeta: api.ObjectMeta{
			Name: "",
		},
	}

	err := netutils.HTTPPost("http://"+agentRestURL+"/api/endpoints/", &badPostData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}

func TestEndpointDeleteErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badDelData := netproto.Endpoint{
		TypeMeta: api.TypeMeta{Kind: "Endpoint"},
		ObjectMeta: api.ObjectMeta{Tenant: "default",
			Namespace: "default",
			Name:      "badObject"},
	}

	err := netutils.HTTPDelete("http://"+agentRestURL+"/api/endpoints/default/default/badObject", &badDelData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}

func TestEndpointUpdateErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badDelData := netproto.Endpoint{
		TypeMeta: api.TypeMeta{Kind: "Endpoint"},
		ObjectMeta: api.ObjectMeta{Tenant: "default",
			Namespace: "default",
			Name:      "badObject"},
	}

	err := netutils.HTTPPut("http://"+agentRestURL+"/api/endpoints/default/default/badObject", &badDelData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}
