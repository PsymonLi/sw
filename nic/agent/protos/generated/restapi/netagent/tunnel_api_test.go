// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package netproto is a auto generated package.
Input file: tunnel.proto
*/
package restapi_test

import (
	"testing"

	api "github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/protos/netproto"
	"github.com/pensando/sw/venice/utils/netutils"
	. "github.com/pensando/sw/venice/utils/testutils"
)

func TestTunnelList(t *testing.T) {
	t.Parallel()
	var ok bool
	var tunnelList []*netproto.Tunnel

	err := netutils.HTTPGet("http://"+agentRestURL+"/api/tunnels/", &tunnelList)

	AssertOk(t, err, "Error getting tunnels from the REST Server")
	for _, o := range tunnelList {
		if o.Name == "preCreatedTunnel" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find preCreatedTunnel in Response: %v", tunnelList)
	}

}

func TestTunnelPost(t *testing.T) {
	t.Parallel()
	var resp Response
	var ok bool
	var tunnelList []*netproto.Tunnel

	postData := netproto.Tunnel{
		TypeMeta: api.TypeMeta{Kind: "Tunnel"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testPostTunnel",
		},
		Spec: netproto.TunnelSpec{
			VrfName:     "default",
			Type:        "VXLAN",
			AdminStatus: "UP",
			Src:         "10.1.1.1",
			Dst:         "192.168.1.1",
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/tunnels/", &postData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/tunnels/", &tunnelList)

	AssertOk(t, err, "Error posting tunnel to REST Server")
	AssertOk(t, getErr, "Error getting tunnels from the REST Server")
	for _, o := range tunnelList {
		if o.Name == "testPostTunnel" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find testPostTunnel in Response: %v", tunnelList)
	}

}

func TestTunnelDelete(t *testing.T) {
	t.Parallel()
	var resp Response
	var found bool
	var tunnelList []*netproto.Tunnel

	deleteData := netproto.Tunnel{
		TypeMeta: api.TypeMeta{Kind: "Tunnel"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testDeleteTunnel",
		},
		Spec: netproto.TunnelSpec{
			VrfName:     "default",
			Type:        "VXLAN",
			AdminStatus: "UP",
			Src:         "10.1.1.1",
			Dst:         "192.168.1.1",
		},
	}
	postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/tunnels/", &deleteData, &resp)
	err := netutils.HTTPDelete("http://"+agentRestURL+"/api/tunnels/default/default/testDeleteTunnel", &deleteData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/tunnels/", &tunnelList)

	AssertOk(t, postErr, "Error posting tunnel to REST Server")
	AssertOk(t, err, "Error deleting tunnel from REST Server")
	AssertOk(t, getErr, "Error getting tunnels from the REST Server")
	for _, o := range tunnelList {
		if o.Name == "testDeleteTunnel" {
			found = true
			break
		}
	}
	if found {
		t.Errorf("Found testDeleteTunnel in Response after deleting: %v", tunnelList)
	}

}

func TestTunnelUpdate(t *testing.T) {
	t.Parallel()
	var resp Response
	var tunnelList []*netproto.Tunnel

	var actualTunnelSpec netproto.TunnelSpec
	updatedTunnelSpec := netproto.TunnelSpec{
		VrfName: "default",
		Src:     "172.0.0.1",
	}
	putData := netproto.Tunnel{
		TypeMeta: api.TypeMeta{Kind: "Tunnel"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "preCreatedTunnel",
		},
		Spec: updatedTunnelSpec,
	}
	err := netutils.HTTPPut("http://"+agentRestURL+"/api/tunnels/default/default/preCreatedTunnel", &putData, &resp)
	AssertOk(t, err, "Error updating tunnel to REST Server")

	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/tunnels/", &tunnelList)
	AssertOk(t, getErr, "Error getting tunnels from the REST Server")
	for _, o := range tunnelList {
		if o.Name == "preCreatedTunnel" {
			actualTunnelSpec = o.Spec
			break
		}
	}
	AssertEquals(t, updatedTunnelSpec, actualTunnelSpec, "Could not validate updated spec.")

}

func TestTunnelCreateErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badPostData := netproto.Tunnel{
		TypeMeta: api.TypeMeta{Kind: "Tunnel"},
		ObjectMeta: api.ObjectMeta{
			Name: "",
		},
	}

	err := netutils.HTTPPost("http://"+agentRestURL+"/api/tunnels/", &badPostData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}

func TestTunnelDeleteErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badDelData := netproto.Tunnel{
		TypeMeta: api.TypeMeta{Kind: "Tunnel"},
		ObjectMeta: api.ObjectMeta{Tenant: "default",
			Namespace: "default",
			Name:      "badObject"},
	}

	err := netutils.HTTPDelete("http://"+agentRestURL+"/api/tunnels/default/default/badObject", &badDelData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}

func TestTunnelUpdateErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badDelData := netproto.Tunnel{
		TypeMeta: api.TypeMeta{Kind: "Tunnel"},
		ObjectMeta: api.ObjectMeta{Tenant: "default",
			Namespace: "default",
			Name:      "badObject"},
	}

	err := netutils.HTTPPut("http://"+agentRestURL+"/api/tunnels/default/default/badObject", &badDelData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}
