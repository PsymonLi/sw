// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package netproto is a auto generated package.
Input file: ipsec.proto
*/
package restapi

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/gogo/protobuf/types"
	"github.com/gorilla/mux"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/httputils"
	agentTypes "github.com/pensando/sw/nic/agent/netagent/state/types"
	"github.com/pensando/sw/nic/agent/protos/netproto"
)

// AddIPSecPolicyAPIRoutes adds IPSecPolicy routes
func (s *RestServer) AddIPSecPolicyAPIRoutes(r *mux.Router) {

	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listIPSecPolicyHandler))

	r.Methods("POST").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.postIPSecPolicyHandler))

	r.Methods("PUT").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(s.putIPSecPolicyHandler))

	r.Methods("DELETE").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(s.deleteIPSecPolicyHandler))

}

func (s *RestServer) listIPSecPolicyHandler(r *http.Request) (interface{}, error) {
	return s.agent.ListIPSecPolicy(), nil
}

func (s *RestServer) postIPSecPolicyHandler(r *http.Request) (interface{}, error) {
	var res Response

	var o netproto.IPSecPolicy
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}
	c, _ := types.TimestampProto(time.Now())
	o.CreationTime = api.Timestamp{
		Timestamp: *c,
	}
	o.ModTime = api.Timestamp{
		Timestamp: *c,
	}

	err = s.agent.CreateIPSecPolicy(&o)

	res.References = []string{fmt.Sprintf("%s%s/%s/%s", r.RequestURI, o.Tenant, o.Namespace, o.Name)}

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()

		return res, err
	}

	res.StatusCode = http.StatusOK
	return res, err
}

func (s *RestServer) putIPSecPolicyHandler(r *http.Request) (interface{}, error) {
	var res Response

	var o netproto.IPSecPolicy
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}
	m, _ := types.TimestampProto(time.Now())
	o.ModTime = api.Timestamp{
		Timestamp: *m,
	}
	err = s.agent.UpdateIPSecPolicy(&o)

	res.References = []string{r.RequestURI}

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()

		return res, err
	}

	res.StatusCode = http.StatusOK
	return res, err
}

func (s *RestServer) deleteIPSecPolicyHandler(r *http.Request) (interface{}, error) {
	var res Response

	tenant, _ := mux.Vars(r)["ObjectMeta.Tenant"]
	namespace, _ := mux.Vars(r)["ObjectMeta.Namespace"]
	name, _ := mux.Vars(r)["ObjectMeta.Name"]
	err := s.agent.DeleteIPSecPolicy(tenant, namespace, name)

	res.References = []string{r.RequestURI}

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()

		// check if its a cannot delete type err
		delErr, ok := err.(*agentTypes.ErrCannotDelete)
		if ok {
			res.References = delErr.References
		}

		return res, err
	}

	res.StatusCode = http.StatusOK
	return res, err
}

// AddIPSecSADecryptAPIRoutes adds IPSecSADecrypt routes
func (s *RestServer) AddIPSecSADecryptAPIRoutes(r *mux.Router) {

	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listIPSecSADecryptHandler))

	r.Methods("POST").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.postIPSecSADecryptHandler))

	r.Methods("PUT").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(s.putIPSecSADecryptHandler))

	r.Methods("DELETE").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(s.deleteIPSecSADecryptHandler))

}

func (s *RestServer) listIPSecSADecryptHandler(r *http.Request) (interface{}, error) {
	return s.agent.ListIPSecSADecrypt(), nil
}

func (s *RestServer) postIPSecSADecryptHandler(r *http.Request) (interface{}, error) {
	var res Response

	var o netproto.IPSecSADecrypt
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}
	c, _ := types.TimestampProto(time.Now())
	o.CreationTime = api.Timestamp{
		Timestamp: *c,
	}
	o.ModTime = api.Timestamp{
		Timestamp: *c,
	}

	err = s.agent.CreateIPSecSADecrypt(&o)

	res.References = []string{fmt.Sprintf("%s%s/%s/%s", r.RequestURI, o.Tenant, o.Namespace, o.Name)}

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()

		return res, err
	}

	res.StatusCode = http.StatusOK
	return res, err
}

func (s *RestServer) putIPSecSADecryptHandler(r *http.Request) (interface{}, error) {
	var res Response

	var o netproto.IPSecSADecrypt
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}
	m, _ := types.TimestampProto(time.Now())
	o.ModTime = api.Timestamp{
		Timestamp: *m,
	}
	err = s.agent.UpdateIPSecSADecrypt(&o)

	res.References = []string{r.RequestURI}

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()

		return res, err
	}

	res.StatusCode = http.StatusOK
	return res, err
}

func (s *RestServer) deleteIPSecSADecryptHandler(r *http.Request) (interface{}, error) {
	var res Response

	tenant, _ := mux.Vars(r)["ObjectMeta.Tenant"]
	namespace, _ := mux.Vars(r)["ObjectMeta.Namespace"]
	name, _ := mux.Vars(r)["ObjectMeta.Name"]
	err := s.agent.DeleteIPSecSADecrypt(tenant, namespace, name)

	res.References = []string{r.RequestURI}

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()

		// check if its a cannot delete type err
		delErr, ok := err.(*agentTypes.ErrCannotDelete)
		if ok {
			res.References = delErr.References
		}

		return res, err
	}

	res.StatusCode = http.StatusOK
	return res, err
}

// AddIPSecSAEncryptAPIRoutes adds IPSecSAEncrypt routes
func (s *RestServer) AddIPSecSAEncryptAPIRoutes(r *mux.Router) {

	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listIPSecSAEncryptHandler))

	r.Methods("POST").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.postIPSecSAEncryptHandler))

	r.Methods("PUT").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(s.putIPSecSAEncryptHandler))

	r.Methods("DELETE").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(s.deleteIPSecSAEncryptHandler))

}

func (s *RestServer) listIPSecSAEncryptHandler(r *http.Request) (interface{}, error) {
	return s.agent.ListIPSecSAEncrypt(), nil
}

func (s *RestServer) postIPSecSAEncryptHandler(r *http.Request) (interface{}, error) {
	var res Response

	var o netproto.IPSecSAEncrypt
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}
	c, _ := types.TimestampProto(time.Now())
	o.CreationTime = api.Timestamp{
		Timestamp: *c,
	}
	o.ModTime = api.Timestamp{
		Timestamp: *c,
	}

	err = s.agent.CreateIPSecSAEncrypt(&o)

	res.References = []string{fmt.Sprintf("%s%s/%s/%s", r.RequestURI, o.Tenant, o.Namespace, o.Name)}

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()

		return res, err
	}

	res.StatusCode = http.StatusOK
	return res, err
}

func (s *RestServer) putIPSecSAEncryptHandler(r *http.Request) (interface{}, error) {
	var res Response

	var o netproto.IPSecSAEncrypt
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}
	m, _ := types.TimestampProto(time.Now())
	o.ModTime = api.Timestamp{
		Timestamp: *m,
	}
	err = s.agent.UpdateIPSecSAEncrypt(&o)

	res.References = []string{r.RequestURI}

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()

		return res, err
	}

	res.StatusCode = http.StatusOK
	return res, err
}

func (s *RestServer) deleteIPSecSAEncryptHandler(r *http.Request) (interface{}, error) {
	var res Response

	tenant, _ := mux.Vars(r)["ObjectMeta.Tenant"]
	namespace, _ := mux.Vars(r)["ObjectMeta.Namespace"]
	name, _ := mux.Vars(r)["ObjectMeta.Name"]
	err := s.agent.DeleteIPSecSAEncrypt(tenant, namespace, name)

	res.References = []string{r.RequestURI}

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()

		// check if its a cannot delete type err
		delErr, ok := err.(*agentTypes.ErrCannotDelete)
		if ok {
			res.References = delErr.References
		}

		return res, err
	}

	res.StatusCode = http.StatusOK
	return res, err
}
