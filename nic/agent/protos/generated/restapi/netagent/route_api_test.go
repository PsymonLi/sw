// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package netproto is a auto generated package.
Input file: route.proto
*/
package restapi_test

import (
	"testing"

	api "github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/protos/netproto"
	"github.com/pensando/sw/venice/utils/netutils"
	. "github.com/pensando/sw/venice/utils/testutils"
)

func TestRouteList(t *testing.T) {
	t.Parallel()
	var ok bool
	var routeList []*netproto.Route

	err := netutils.HTTPGet("http://"+agentRestURL+"/api/routes/", &routeList)

	AssertOk(t, err, "Error getting routes from the REST Server")
	for _, o := range routeList {
		if o.Name == "preCreatedRoute" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find preCreatedRoute in Response: %v", routeList)
	}

}

func TestRoutePost(t *testing.T) {
	t.Parallel()
	var resp Response
	var ok bool
	var routeList []*netproto.Route

	postData := netproto.Route{
		TypeMeta: api.TypeMeta{Kind: "Route"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testPostRoute",
		},
		Spec: netproto.RouteSpec{
			VrfName:   "default",
			IPPrefix:  "10.1.1.0/24",
			Interface: "uplink129",
			GatewayIP: "10.1.1.1",
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/routes/", &postData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/routes/", &routeList)

	AssertOk(t, err, "Error posting route to REST Server")
	AssertOk(t, getErr, "Error getting routes from the REST Server")
	for _, o := range routeList {
		if o.Name == "testPostRoute" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find testPostRoute in Response: %v", routeList)
	}

}

func TestRouteDelete(t *testing.T) {
	t.Parallel()
	var resp Response
	var found bool
	var routeList []*netproto.Route

	deleteData := netproto.Route{
		TypeMeta: api.TypeMeta{Kind: "Route"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testDeleteRoute",
		},
		Spec: netproto.RouteSpec{
			VrfName:   "default",
			GatewayIP: "10.1.1.1",
			IPPrefix:  "10.1.1.0/24",
		},
	}
	postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/routes/", &deleteData, &resp)
	err := netutils.HTTPDelete("http://"+agentRestURL+"/api/routes/default/default/testDeleteRoute", &deleteData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/routes/", &routeList)

	AssertOk(t, postErr, "Error posting route to REST Server")
	AssertOk(t, err, "Error deleting route from REST Server")
	AssertOk(t, getErr, "Error getting routes from the REST Server")
	for _, o := range routeList {
		if o.Name == "testDeleteRoute" {
			found = true
			break
		}
	}
	if found {
		t.Errorf("Found testDeleteRoute in Response after deleting: %v", routeList)
	}

}

func TestRouteUpdate(t *testing.T) {
	t.Parallel()
	var resp Response
	var routeList []*netproto.Route

	var actualRouteSpec netproto.RouteSpec
	updatedRouteSpec := netproto.RouteSpec{
		VrfName:   "default",
		Interface: "uplink129",
	}
	putData := netproto.Route{
		TypeMeta: api.TypeMeta{Kind: "Route"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "preCreatedTenant",
			Name:      "preCreatedRoute",
			Namespace: "preCreatedNamespace",
		},
		Spec: updatedRouteSpec,
	}
	err := netutils.HTTPPut("http://"+agentRestURL+"/api/routes/default/default/preCreatedRoute", &putData, &resp)
	AssertOk(t, err, "Error updating route to REST Server")

	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/routes/", &routeList)
	AssertOk(t, getErr, "Error getting routes from the REST Server")
	for _, o := range routeList {
		if o.Name == "preCreatedRoute" {
			actualRouteSpec = o.Spec
			break
		}
	}
	AssertEquals(t, updatedRouteSpec, actualRouteSpec, "Could not validate updated spec.")

}

func TestRouteCreateErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badPostData := netproto.Route{
		TypeMeta: api.TypeMeta{Kind: "Route"},
		ObjectMeta: api.ObjectMeta{
			Name: "",
		},
	}

	err := netutils.HTTPPost("http://"+agentRestURL+"/api/routes/", &badPostData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}

func TestRouteDeleteErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badDelData := netproto.Route{
		TypeMeta: api.TypeMeta{Kind: "Route"},
		ObjectMeta: api.ObjectMeta{Tenant: "default",
			Namespace: "default",
			Name:      "badObject"},
	}

	err := netutils.HTTPDelete("http://"+agentRestURL+"/api/routes/default/default/badObject", &badDelData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}

func TestRouteUpdateErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badDelData := netproto.Route{
		TypeMeta: api.TypeMeta{Kind: "Route"},
		ObjectMeta: api.ObjectMeta{Tenant: "default",
			Namespace: "default",
			Name:      "badObject"},
	}

	err := netutils.HTTPPut("http://"+agentRestURL+"/api/routes/default/default/badObject", &badDelData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}
