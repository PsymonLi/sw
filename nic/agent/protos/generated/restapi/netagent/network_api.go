// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package netproto is a auto generated package.
Input file: network.proto
*/
package restapi

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/gogo/protobuf/types"
	"github.com/gorilla/mux"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/httputils"
	agentTypes "github.com/pensando/sw/nic/agent/netagent/state/types"
	"github.com/pensando/sw/nic/agent/protos/netproto"
)

// AddNetworkAPIRoutes adds Network routes
func (s *RestServer) AddNetworkAPIRoutes(r *mux.Router) {

	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.listNetworkHandler))

	r.Methods("POST").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(s.postNetworkHandler))

	r.Methods("PUT").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(s.putNetworkHandler))

	r.Methods("DELETE").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(s.deleteNetworkHandler))

}

func (s *RestServer) listNetworkHandler(r *http.Request) (interface{}, error) {
	return s.agent.ListNetwork(), nil
}

func (s *RestServer) postNetworkHandler(r *http.Request) (interface{}, error) {
	var res Response

	var o netproto.Network
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}
	c, _ := types.TimestampProto(time.Now())
	o.CreationTime = api.Timestamp{
		Timestamp: *c,
	}
	o.ModTime = api.Timestamp{
		Timestamp: *c,
	}

	err = s.agent.CreateNetwork(&o)

	res.References = []string{fmt.Sprintf("%s%s/%s/%s", r.RequestURI, o.Tenant, o.Namespace, o.Name)}

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()

		return res, err
	}

	res.StatusCode = http.StatusOK
	return res, err
}

func (s *RestServer) putNetworkHandler(r *http.Request) (interface{}, error) {
	var res Response

	var o netproto.Network
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}
	m, _ := types.TimestampProto(time.Now())
	o.ModTime = api.Timestamp{
		Timestamp: *m,
	}
	err = s.agent.UpdateNetwork(&o)

	res.References = []string{r.RequestURI}

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()

		return res, err
	}

	res.StatusCode = http.StatusOK
	return res, err
}

func (s *RestServer) deleteNetworkHandler(r *http.Request) (interface{}, error) {
	var res Response

	tenant, _ := mux.Vars(r)["ObjectMeta.Tenant"]
	namespace, _ := mux.Vars(r)["ObjectMeta.Namespace"]
	name, _ := mux.Vars(r)["ObjectMeta.Name"]
	err := s.agent.DeleteNetwork(tenant, namespace, name)

	res.References = []string{r.RequestURI}

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()

		// check if its a cannot delete type err
		delErr, ok := err.(*agentTypes.ErrCannotDelete)
		if ok {
			res.References = delErr.References
		}

		return res, err
	}

	res.StatusCode = http.StatusOK
	return res, err
}
