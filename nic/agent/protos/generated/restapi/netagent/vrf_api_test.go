// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package netproto is a auto generated package.
Input file: vrf.proto
*/
package restapi_test

import (
	"testing"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/protos/netproto"
	"github.com/pensando/sw/venice/utils/netutils"
	. "github.com/pensando/sw/venice/utils/testutils"
)

func TestVrfList(t *testing.T) {
	t.Parallel()
	var ok bool
	var vrfList []*netproto.Vrf

	err := netutils.HTTPGet("http://"+agentRestURL+"/api/vrfs/", &vrfList)

	AssertOk(t, err, "Error getting vrfs from the REST Server")
	for _, o := range vrfList {
		if o.Name == "preCreatedVrf" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find preCreatedVrf in Response: %v", vrfList)
	}

}

func TestVrfPost(t *testing.T) {
	t.Parallel()
	var resp Response
	var ok bool
	var vrfList []*netproto.Vrf

	postData := netproto.Vrf{
		TypeMeta: api.TypeMeta{Kind: "Vrf"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testPostVrf",
		},
		Spec: netproto.VrfSpec{
			VrfType: "CUSTOMER",
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/vrfs/", &postData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/vrfs/", &vrfList)

	AssertOk(t, err, "Error posting vrf to REST Server")
	AssertOk(t, getErr, "Error getting vrfs from the REST Server")
	for _, o := range vrfList {
		if o.Name == "testPostVrf" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find testPostVrf in Response: %v", vrfList)
	}

}

func TestVrfDelete(t *testing.T) {
	t.Parallel()
	var resp Response
	var found bool
	var vrfList []*netproto.Vrf

	deleteData := netproto.Vrf{
		TypeMeta: api.TypeMeta{Kind: "Vrf"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testDeleteVrf",
		},
		Spec: netproto.VrfSpec{
			VrfType: "CUSTOMER",
		},
	}
	postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/vrfs/", &deleteData, &resp)
	err := netutils.HTTPDelete("http://"+agentRestURL+"/api/vrfs/default/default/testDeleteVrf", &deleteData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/vrfs/", &vrfList)

	AssertOk(t, postErr, "Error posting vrf to REST Server")
	AssertOk(t, err, "Error deleting vrf from REST Server")
	AssertOk(t, getErr, "Error getting vrfs from the REST Server")
	for _, o := range vrfList {
		if o.Name == "testDeleteVrf" {
			found = true
			break
		}
	}
	if found {
		t.Errorf("Found testDeleteVrf in Response after deleting: %v", vrfList)
	}

}

func TestVrfUpdate(t *testing.T) {
	t.Parallel()
	var resp Response
	var vrfList []*netproto.Vrf

	updatedVrfSpec := netproto.VrfSpec{
		VrfType: "INFRA",
	}
	var actualVrfSpec netproto.VrfSpec
	putData := netproto.Vrf{
		TypeMeta: api.TypeMeta{Kind: "Vrf"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "preCreatedVrf",
		},
		Spec: updatedVrfSpec,
	}
	err := netutils.HTTPPut("http://"+agentRestURL+"/api/vrfs/default/default/preCreatedVrf", &putData, &resp)
	AssertOk(t, err, "Error updating vrf to REST Server")

	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/vrfs/", &vrfList)
	AssertOk(t, getErr, "Error getting vrfs from the REST Server")
	for _, o := range vrfList {
		if o.Name == "preCreatedVrf" {
			actualVrfSpec = o.Spec
			break
		}
	}
	AssertEquals(t, updatedVrfSpec, actualVrfSpec, "Could not validated updated spec.")

}

func TestVrfCreateErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badPostData := netproto.Vrf{
		TypeMeta: api.TypeMeta{Kind: "Vrf"},
		ObjectMeta: api.ObjectMeta{
			Name: "",
		},
	}

	err := netutils.HTTPPost("http://"+agentRestURL+"/api/vrfs/", &badPostData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}

func TestVrfDeleteErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badDelData := netproto.Vrf{
		TypeMeta: api.TypeMeta{Kind: "Vrf"},
		ObjectMeta: api.ObjectMeta{Tenant: "default",
			Namespace: "default",
			Name:      "badObject"},
	}

	err := netutils.HTTPDelete("http://"+agentRestURL+"/api/vrfs/default/default/badObject", &badDelData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}

func TestVrfUpdateErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badDelData := netproto.Vrf{
		TypeMeta: api.TypeMeta{Kind: "Vrf"},
		ObjectMeta: api.ObjectMeta{Tenant: "default",
			Namespace: "default",
			Name:      "badObject"},
	}

	err := netutils.HTTPPut("http://"+agentRestURL+"/api/vrfs/default/default/badObject", &badDelData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}
