// Code generated by protoc-gen-go. DO NOT EDIT.
// source: delphi/route.proto

package dnetproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import netproto5 "github.com/pensando/sw/nic/agent/protos/netproto"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// RoutingConfig object
type RoutingConfig struct {
	Meta          *delphi.ObjectMeta       `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	Key           string                   `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	RoutingConfig *netproto5.RoutingConfig `protobuf:"bytes,3,opt,name=RoutingConfig" json:"RoutingConfig,omitempty"`
}

func (m *RoutingConfig) GetDelphiMessage() proto.Message {
	return m
}

func (m *RoutingConfig) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *RoutingConfig) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *RoutingConfig) GetDelphiKey() string {
	return fmt.Sprintf("%v", m.Key)
}

func (m *RoutingConfig) GetDelphiKind() string {
	return "RoutingConfig"
}

func (m *RoutingConfig) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *RoutingConfig) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*RoutingConfig)
	return obj
}

func RoutingConfigMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("RoutingConfig", mode)
}

func RoutingConfigMountKey(client clientApi.Client, key string, mode delphi.MountMode) {
	client.MountKindKey("RoutingConfig", fmt.Sprintf("%v", key), mode)
}

func GetRoutingConfig(client clientApi.Client, key string) *RoutingConfig {
	o := client.GetObject("RoutingConfig", fmt.Sprintf("%v", key))
	if o == nil {
		return nil
	}
	obj, ok := o.(*RoutingConfig)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func (m *RoutingConfig) IsPersistent() bool {
	return false
}
func RoutingConfigFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg RoutingConfig
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func RoutingConfigWatch(client clientApi.Client, reactor RoutingConfigReactor) {
	client.WatchKind("RoutingConfig", reactor)
}
func RoutingConfigList(client clientApi.Client) []*RoutingConfig {
	bobjs := client.List("RoutingConfig")
	objs := make([]*RoutingConfig, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*RoutingConfig)
		objs = append(objs, obj)
	}
	return objs
}
func (m *RoutingConfig) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(RoutingConfigReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnRoutingConfigCreate(m)
			} else {
				oldObj, ok := old.(*RoutingConfig)
				if ok == false {
					panic("Not an RoutingConfig object")
				}
				rctr.OnRoutingConfigUpdate(oldObj, m)
			}
		} else {
			rctr.OnRoutingConfigDelete(m)
		}
	}
}

type RoutingConfigReactor interface {
	OnRoutingConfigCreate(obj *RoutingConfig)
	OnRoutingConfigUpdate(old *RoutingConfig, obj *RoutingConfig)
	OnRoutingConfigDelete(obj *RoutingConfig)
}

func (m *RoutingConfig) Reset()                    { *m = RoutingConfig{} }
func (m *RoutingConfig) String() string            { return proto.CompactTextString(m) }
func (*RoutingConfig) ProtoMessage()               {}
func (*RoutingConfig) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *RoutingConfig) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RoutingConfig) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RoutingConfig) GetRoutingConfig() *netproto5.RoutingConfig {
	if m != nil {
		return m.RoutingConfig
	}
	return nil
}

func init() {
	clientApi.RegisterFactory("RoutingConfig", RoutingConfigFactory)
	proto.RegisterType((*RoutingConfig)(nil), "dnetproto.RoutingConfig")
}

func init() { proto.RegisterFile("delphi/route.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x49, 0xcd, 0x29,
	0xc8, 0xc8, 0xd4, 0x2f, 0xca, 0x2f, 0x2d, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x4c, 0xc9, 0x4b, 0x2d, 0x01, 0x33, 0xa5, 0x6c, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92,
	0xf3, 0x73, 0xf5, 0x0b, 0x52, 0xf3, 0x8a, 0x13, 0xf3, 0x52, 0xf2, 0xf5, 0x8b, 0xcb, 0xf5, 0xf3,
	0x32, 0x93, 0xf5, 0x13, 0xd3, 0x53, 0xf3, 0x4a, 0xf4, 0xc1, 0xea, 0x8a, 0xf5, 0x61, 0x3a, 0x90,
	0x0d, 0x92, 0xe2, 0x81, 0x18, 0x0e, 0xe1, 0x29, 0xf5, 0x31, 0x72, 0xf1, 0x06, 0xe5, 0x97, 0x96,
	0x64, 0xe6, 0xa5, 0x3b, 0xe7, 0xe7, 0xa5, 0x65, 0xa6, 0x0b, 0xa9, 0x71, 0xb1, 0xf8, 0xa6, 0x96,
	0x24, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0x09, 0xe9, 0x41, 0x95, 0xfb, 0x27, 0x65, 0xa5,
	0x26, 0x97, 0x80, 0x64, 0x82, 0xc0, 0xf2, 0x42, 0x02, 0x5c, 0xcc, 0xde, 0xa9, 0x95, 0x12, 0x4c,
	0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x20, 0xa6, 0x90, 0x2d, 0x9a, 0x51, 0x12, 0xcc, 0x60, 0x23, 0xc4,
	0xf5, 0x60, 0xee, 0xd0, 0x43, 0x91, 0x0e, 0x42, 0x55, 0x6d, 0xc5, 0xd2, 0x30, 0x5d, 0x89, 0x31,
	0x89, 0x0d, 0xac, 0xd2, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xef, 0x7f, 0x28, 0xe3, 0x04, 0x01,
	0x00, 0x00,
}
