// Code generated by protoc-gen-go. DO NOT EDIT.
// source: delphi/security.proto

package dnetproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import netproto4 "github.com/pensando/sw/nic/agent/protos/netproto"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// security group object
type SecurityGroup struct {
	Meta          *delphi.ObjectMeta       `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	Key           string                   `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	SecurityGroup *netproto4.SecurityGroup `protobuf:"bytes,3,opt,name=SecurityGroup" json:"SecurityGroup,omitempty"`
}

func (m *SecurityGroup) GetDelphiMessage() proto.Message {
	return m
}

func (m *SecurityGroup) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *SecurityGroup) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *SecurityGroup) GetDelphiKey() string {
	return fmt.Sprintf("%v", m.Key)
}

func (m *SecurityGroup) GetDelphiKind() string {
	return "SecurityGroup"
}

func (m *SecurityGroup) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *SecurityGroup) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*SecurityGroup)
	return obj
}

func SecurityGroupMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("SecurityGroup", mode)
}

func SecurityGroupMountKey(client clientApi.Client, key string, mode delphi.MountMode) {
	client.MountKindKey("SecurityGroup", fmt.Sprintf("%v", key), mode)
}

func GetSecurityGroup(client clientApi.Client, key string) *SecurityGroup {
	o := client.GetObject("SecurityGroup", fmt.Sprintf("%v", key))
	if o == nil {
		return nil
	}
	obj, ok := o.(*SecurityGroup)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func (m *SecurityGroup) IsPersistent() bool {
	return false
}
func SecurityGroupFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg SecurityGroup
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func SecurityGroupWatch(client clientApi.Client, reactor SecurityGroupReactor) {
	client.WatchKind("SecurityGroup", reactor)
}
func SecurityGroupList(client clientApi.Client) []*SecurityGroup {
	bobjs := client.List("SecurityGroup")
	objs := make([]*SecurityGroup, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*SecurityGroup)
		objs = append(objs, obj)
	}
	return objs
}
func (m *SecurityGroup) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(SecurityGroupReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnSecurityGroupCreate(m)
			} else {
				oldObj, ok := old.(*SecurityGroup)
				if ok == false {
					panic("Not an SecurityGroup object")
				}
				rctr.OnSecurityGroupUpdate(oldObj, m)
			}
		} else {
			rctr.OnSecurityGroupDelete(m)
		}
	}
}

type SecurityGroupReactor interface {
	OnSecurityGroupCreate(obj *SecurityGroup)
	OnSecurityGroupUpdate(old *SecurityGroup, obj *SecurityGroup)
	OnSecurityGroupDelete(obj *SecurityGroup)
}

func (m *SecurityGroup) Reset()                    { *m = SecurityGroup{} }
func (m *SecurityGroup) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroup) ProtoMessage()               {}
func (*SecurityGroup) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *SecurityGroup) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SecurityGroup) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SecurityGroup) GetSecurityGroup() *netproto4.SecurityGroup {
	if m != nil {
		return m.SecurityGroup
	}
	return nil
}

func init() {
	clientApi.RegisterFactory("SecurityGroup", SecurityGroupFactory)
	proto.RegisterType((*SecurityGroup)(nil), "dnetproto.SecurityGroup")
}

func init() { proto.RegisterFile("delphi/security.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0x49, 0xcd, 0x29,
	0xc8, 0xc8, 0xd4, 0x2f, 0x4e, 0x4d, 0x2e, 0x2d, 0xca, 0x2c, 0xa9, 0xd4, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x4c, 0xc9, 0x4b, 0x2d, 0x01, 0x33, 0xa5, 0xec, 0xd3, 0x33, 0x4b, 0x32, 0x4a,
	0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x0b, 0x52, 0xf3, 0x8a, 0x13, 0xf3, 0x52, 0xf2, 0xf5, 0x8b,
	0xcb, 0xf5, 0xf3, 0x32, 0x93, 0xf5, 0x13, 0xd3, 0x53, 0xf3, 0x4a, 0xf4, 0xc1, 0xea, 0x8a, 0xf5,
	0x61, 0x3a, 0xd0, 0xcc, 0x92, 0xe2, 0x81, 0x58, 0x01, 0xe1, 0x29, 0xf5, 0x31, 0x72, 0xf1, 0x06,
	0x43, 0x15, 0xb8, 0x17, 0xe5, 0x97, 0x16, 0x08, 0xa9, 0x71, 0xb1, 0xf8, 0xa6, 0x96, 0x24, 0x4a,
	0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0x09, 0xe9, 0x41, 0x95, 0xfb, 0x27, 0x65, 0xa5, 0x26, 0x97,
	0x80, 0x64, 0x82, 0xc0, 0xf2, 0x42, 0x02, 0x5c, 0xcc, 0xde, 0xa9, 0x95, 0x12, 0x4c, 0x0a, 0x8c,
	0x1a, 0x9c, 0x41, 0x20, 0xa6, 0x90, 0x2d, 0x9a, 0x51, 0x12, 0xcc, 0x60, 0x23, 0xc4, 0xf5, 0x60,
	0x4e, 0xd1, 0x43, 0x91, 0x0e, 0x42, 0x55, 0x6d, 0xc5, 0xd2, 0x30, 0x5d, 0x89, 0x31, 0x89, 0x0d,
	0xac, 0xd2, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x53, 0x06, 0x53, 0x0a, 0x01, 0x00, 0x00,
}
