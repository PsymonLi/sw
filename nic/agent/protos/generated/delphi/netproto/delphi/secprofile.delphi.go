// Code generated by protoc-gen-go. DO NOT EDIT.
// source: delphi/secprofile.proto

package dnetproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import netproto9 "github.com/pensando/sw/nic/agent/protos/netproto"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SecurityProfile object
type SecurityProfile struct {
	Meta            *delphi.ObjectMeta         `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	Key             string                     `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	SecurityProfile *netproto9.SecurityProfile `protobuf:"bytes,3,opt,name=SecurityProfile" json:"SecurityProfile,omitempty"`
}

func (m *SecurityProfile) GetDelphiMessage() proto.Message {
	return m
}

func (m *SecurityProfile) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *SecurityProfile) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *SecurityProfile) GetDelphiKey() string {
	return fmt.Sprintf("%v", m.Key)
}

func (m *SecurityProfile) GetDelphiKind() string {
	return "SecurityProfile"
}

func (m *SecurityProfile) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *SecurityProfile) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*SecurityProfile)
	return obj
}

func SecurityProfileMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("SecurityProfile", mode)
}

func SecurityProfileMountKey(client clientApi.Client, key string, mode delphi.MountMode) {
	client.MountKindKey("SecurityProfile", fmt.Sprintf("%v", key), mode)
}

func GetSecurityProfile(client clientApi.Client, key string) *SecurityProfile {
	o := client.GetObject("SecurityProfile", fmt.Sprintf("%v", key))
	if o == nil {
		return nil
	}
	obj, ok := o.(*SecurityProfile)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func (m *SecurityProfile) IsPersistent() bool {
	return false
}
func SecurityProfileFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg SecurityProfile
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func SecurityProfileWatch(client clientApi.Client, reactor SecurityProfileReactor) {
	client.WatchKind("SecurityProfile", reactor)
}
func SecurityProfileList(client clientApi.Client) []*SecurityProfile {
	bobjs := client.List("SecurityProfile")
	objs := make([]*SecurityProfile, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*SecurityProfile)
		objs = append(objs, obj)
	}
	return objs
}
func (m *SecurityProfile) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(SecurityProfileReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnSecurityProfileCreate(m)
			} else {
				oldObj, ok := old.(*SecurityProfile)
				if ok == false {
					panic("Not an SecurityProfile object")
				}
				rctr.OnSecurityProfileUpdate(oldObj, m)
			}
		} else {
			rctr.OnSecurityProfileDelete(m)
		}
	}
}

type SecurityProfileReactor interface {
	OnSecurityProfileCreate(obj *SecurityProfile)
	OnSecurityProfileUpdate(old *SecurityProfile, obj *SecurityProfile)
	OnSecurityProfileDelete(obj *SecurityProfile)
}

func (m *SecurityProfile) Reset()                    { *m = SecurityProfile{} }
func (m *SecurityProfile) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfile) ProtoMessage()               {}
func (*SecurityProfile) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *SecurityProfile) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SecurityProfile) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SecurityProfile) GetSecurityProfile() *netproto9.SecurityProfile {
	if m != nil {
		return m.SecurityProfile
	}
	return nil
}

func init() {
	clientApi.RegisterFactory("SecurityProfile", SecurityProfileFactory)
	proto.RegisterType((*SecurityProfile)(nil), "dnetproto.SecurityProfile")
}

func init() { proto.RegisterFile("delphi/secprofile.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0x49, 0xcd, 0x29,
	0xc8, 0xc8, 0xd4, 0x2f, 0x4e, 0x4d, 0x2e, 0x28, 0xca, 0x4f, 0xcb, 0xcc, 0x49, 0xd5, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0xc9, 0x4b, 0x2d, 0x01, 0x33, 0xa5, 0x1c, 0xd3, 0x33, 0x4b,
	0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x0b, 0x52, 0xf3, 0x8a, 0x13, 0xf3, 0x52, 0xf2,
	0xf5, 0x8b, 0xcb, 0xf5, 0xf3, 0x32, 0x93, 0xf5, 0x13, 0xd3, 0x53, 0xf3, 0x4a, 0xf4, 0xc1, 0xea,
	0x8a, 0xf5, 0x61, 0x3a, 0x30, 0x4c, 0x93, 0xe2, 0x81, 0x58, 0x03, 0xe1, 0x29, 0x4d, 0x63, 0xe4,
	0xe2, 0x0f, 0x4e, 0x4d, 0x2e, 0x2d, 0xca, 0x2c, 0xa9, 0x0c, 0x80, 0xa8, 0x13, 0x52, 0xe3, 0x62,
	0xf1, 0x4d, 0x2d, 0x49, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x36, 0x12, 0xd2, 0x83, 0x6a, 0xf0,
	0x4f, 0xca, 0x4a, 0x4d, 0x2e, 0x01, 0xc9, 0x04, 0x81, 0xe5, 0x85, 0x04, 0xb8, 0x98, 0xbd, 0x53,
	0x2b, 0x25, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x21, 0x67, 0x0c, 0xc3, 0x24, 0x98,
	0xc1, 0x86, 0x48, 0xea, 0xc1, 0x1c, 0xa4, 0x87, 0xa6, 0x20, 0x08, 0x5d, 0x87, 0x15, 0x4b, 0xc3,
	0x74, 0x25, 0xc6, 0x24, 0x36, 0xb0, 0x6a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x18,
	0x1e, 0x59, 0x16, 0x01, 0x00, 0x00,
}
