// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nmd.proto

/*
	Package nmd is a generated protocol buffer package.

	Service name

	It is generated from these files:
		nmd.proto

	It has these top-level messages:
		DistributedServiceCardFru
		DistributedServiceCard
		DistributedServiceCardSpec
		DistributedServiceCardStatus
		DistributedServiceCardCmdExecute
*/
package nmd

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import cluster2 "github.com/pensando/sw/api/generated/cluster"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Operational mode of a DistributedServiceCard
type MgmtMode int32

const (
	MgmtMode_HOST    MgmtMode = 0
	MgmtMode_NETWORK MgmtMode = 1
)

var MgmtMode_name = map[int32]string{
	0: "HOST",
	1: "NETWORK",
}
var MgmtMode_value = map[string]int32{
	"HOST":    0,
	"NETWORK": 1,
}

func (x MgmtMode) String() string {
	return proto.EnumName(MgmtMode_name, int32(x))
}
func (MgmtMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorNmd, []int{0} }

// Network Connectivity Mode (only if network managed)
type NetworkMode int32

const (
	NetworkMode_NONE   NetworkMode = 0
	NetworkMode_OOB    NetworkMode = 1
	NetworkMode_INBAND NetworkMode = 2
)

var NetworkMode_name = map[int32]string{
	0: "NONE",
	1: "OOB",
	2: "INBAND",
}
var NetworkMode_value = map[string]int32{
	"NONE":   0,
	"OOB":    1,
	"INBAND": 2,
}

func (x NetworkMode) String() string {
	return proto.EnumName(NetworkMode_name, int32(x))
}
func (NetworkMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorNmd, []int{1} }

type DistributedServiceCardStatus_Transition int32

const (
	DistributedServiceCardStatus_NONE                                DistributedServiceCardStatus_Transition = 0
	DistributedServiceCardStatus_DHCP_SENT                           DistributedServiceCardStatus_Transition = 1
	DistributedServiceCardStatus_DHCP_DONE                           DistributedServiceCardStatus_Transition = 2
	DistributedServiceCardStatus_DHCP_TIMEDOUT                       DistributedServiceCardStatus_Transition = 3
	DistributedServiceCardStatus_MISSING_VENDOR_SPECIFIED_ATTRIBUTES DistributedServiceCardStatus_Transition = 4
	DistributedServiceCardStatus_VENICE_REGISTRATION_SENT            DistributedServiceCardStatus_Transition = 5
	DistributedServiceCardStatus_VENICE_REGISTRATION_DONE            DistributedServiceCardStatus_Transition = 6
	DistributedServiceCardStatus_VENICE_UNREACHABLE                  DistributedServiceCardStatus_Transition = 7
	DistributedServiceCardStatus_REBOOT_PENDING                      DistributedServiceCardStatus_Transition = 8
)

var DistributedServiceCardStatus_Transition_name = map[int32]string{
	0: "NONE",
	1: "DHCP_SENT",
	2: "DHCP_DONE",
	3: "DHCP_TIMEDOUT",
	4: "MISSING_VENDOR_SPECIFIED_ATTRIBUTES",
	5: "VENICE_REGISTRATION_SENT",
	6: "VENICE_REGISTRATION_DONE",
	7: "VENICE_UNREACHABLE",
	8: "REBOOT_PENDING",
}
var DistributedServiceCardStatus_Transition_value = map[string]int32{
	"NONE":                                0,
	"DHCP_SENT":                           1,
	"DHCP_DONE":                           2,
	"DHCP_TIMEDOUT":                       3,
	"MISSING_VENDOR_SPECIFIED_ATTRIBUTES": 4,
	"VENICE_REGISTRATION_SENT":            5,
	"VENICE_REGISTRATION_DONE":            6,
	"VENICE_UNREACHABLE":                  7,
	"REBOOT_PENDING":                      8,
}

func (x DistributedServiceCardStatus_Transition) String() string {
	return proto.EnumName(DistributedServiceCardStatus_Transition_name, int32(x))
}
func (DistributedServiceCardStatus_Transition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorNmd, []int{3, 0}
}

// DistributedServiceCard Fru object
type DistributedServiceCardFru struct {
	ManufacturingDate string `protobuf:"bytes,1,opt,name=ManufacturingDate,proto3" json:"manufacturing-date,omitempty"`
	Manufacturer      string `protobuf:"bytes,2,opt,name=Manufacturer,proto3" json:"manufacturer,omitempty"`
	ProductName       string `protobuf:"bytes,3,opt,name=ProductName,proto3" json:"product-name,omitempty"`
	SerialNum         string `protobuf:"bytes,4,opt,name=SerialNum,proto3" json:"serial-number,omitempty"`
	PartNum           string `protobuf:"bytes,5,opt,name=PartNum,proto3" json:"part-number,omitempty"`
	BoardId           string `protobuf:"bytes,6,opt,name=BoardId,proto3" json:"board-id,omitempty"`
	EngChangeLevel    string `protobuf:"bytes,7,opt,name=EngChangeLevel,proto3" json:"change-level,omitempty"`
	NumMacAddr        string `protobuf:"bytes,8,opt,name=NumMacAddr,proto3" json:"number-mac-addresses,omitempty"`
	MacStr            string `protobuf:"bytes,9,opt,name=MacStr,proto3" json:"mac-string,omitempty"`
}

func (m *DistributedServiceCardFru) Reset()                    { *m = DistributedServiceCardFru{} }
func (m *DistributedServiceCardFru) String() string            { return proto.CompactTextString(m) }
func (*DistributedServiceCardFru) ProtoMessage()               {}
func (*DistributedServiceCardFru) Descriptor() ([]byte, []int) { return fileDescriptorNmd, []int{0} }

func (m *DistributedServiceCardFru) GetManufacturingDate() string {
	if m != nil {
		return m.ManufacturingDate
	}
	return ""
}

func (m *DistributedServiceCardFru) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *DistributedServiceCardFru) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *DistributedServiceCardFru) GetSerialNum() string {
	if m != nil {
		return m.SerialNum
	}
	return ""
}

func (m *DistributedServiceCardFru) GetPartNum() string {
	if m != nil {
		return m.PartNum
	}
	return ""
}

func (m *DistributedServiceCardFru) GetBoardId() string {
	if m != nil {
		return m.BoardId
	}
	return ""
}

func (m *DistributedServiceCardFru) GetEngChangeLevel() string {
	if m != nil {
		return m.EngChangeLevel
	}
	return ""
}

func (m *DistributedServiceCardFru) GetNumMacAddr() string {
	if m != nil {
		return m.NumMacAddr
	}
	return ""
}

func (m *DistributedServiceCardFru) GetMacStr() string {
	if m != nil {
		return m.MacStr
	}
	return ""
}

// DistributedServiceCard config object
type DistributedServiceCard struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of the NIC.
	Spec DistributedServiceCardSpec `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	// Status contains the current state of the NIC.
	Status DistributedServiceCardStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *DistributedServiceCard) Reset()                    { *m = DistributedServiceCard{} }
func (m *DistributedServiceCard) String() string            { return proto.CompactTextString(m) }
func (*DistributedServiceCard) ProtoMessage()               {}
func (*DistributedServiceCard) Descriptor() ([]byte, []int) { return fileDescriptorNmd, []int{1} }

func (m *DistributedServiceCard) GetSpec() DistributedServiceCardSpec {
	if m != nil {
		return m.Spec
	}
	return DistributedServiceCardSpec{}
}

func (m *DistributedServiceCard) GetStatus() DistributedServiceCardStatus {
	if m != nil {
		return m.Status
	}
	return DistributedServiceCardStatus{}
}

// DistributedServiceCardSpec contains initial bootstrap configuration of the DistributedServiceCard I/O subsystem
type DistributedServiceCardSpec struct {
	// PrimaryMAC is the MAC address of the primary PF exposed by DSC
	PrimaryMAC string `protobuf:"bytes,1,opt,name=PrimaryMAC,proto3" json:"primary-mac,omitempty"`
	// ID is used as a user friendly identifier in logs/events
	ID string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	// IPConfig defines the static IP configuration. If not specified, DHCP will be attempted
	IPConfig *cluster2.IPConfig `protobuf:"bytes,3,opt,name=IPConfig" json:"ip-config,omitempty"`
	// Operational mode of the NIC
	Mode string `protobuf:"bytes,4,opt,name=Mode,proto3" json:"mode"`
	// Operational mode of the NIC
	NetworkMode string `protobuf:"bytes,5,opt,name=NetworkMode,proto3" json:"network-mode"`
	// MgmtVlan defines the vlan to be used in network managed mode. The default of 0
	// implies OOB 1G mgmt port is used for management. A non 0 vlan switches the
	// management port to a vlan on data ports.
	MgmtVlan uint32 `protobuf:"varint,6,opt,name=MgmtVlan,proto3" json:"vlan,omitempty"`
	// Controllers contains the list of controller IPs or Hostnames
	Controllers []string `protobuf:"bytes,7,rep,name=Controllers" json:"controllers,omitempty"`
	// DSCProfile captures the profile that is associated with this DistributedServiceCard
	DSCProfile string `protobuf:"bytes,8,opt,name=DSCProfile,proto3" json:"dsc-profile,omitempty"`
}

func (m *DistributedServiceCardSpec) Reset()                    { *m = DistributedServiceCardSpec{} }
func (m *DistributedServiceCardSpec) String() string            { return proto.CompactTextString(m) }
func (*DistributedServiceCardSpec) ProtoMessage()               {}
func (*DistributedServiceCardSpec) Descriptor() ([]byte, []int) { return fileDescriptorNmd, []int{2} }

func (m *DistributedServiceCardSpec) GetPrimaryMAC() string {
	if m != nil {
		return m.PrimaryMAC
	}
	return ""
}

func (m *DistributedServiceCardSpec) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *DistributedServiceCardSpec) GetIPConfig() *cluster2.IPConfig {
	if m != nil {
		return m.IPConfig
	}
	return nil
}

func (m *DistributedServiceCardSpec) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *DistributedServiceCardSpec) GetNetworkMode() string {
	if m != nil {
		return m.NetworkMode
	}
	return ""
}

func (m *DistributedServiceCardSpec) GetMgmtVlan() uint32 {
	if m != nil {
		return m.MgmtVlan
	}
	return 0
}

func (m *DistributedServiceCardSpec) GetControllers() []string {
	if m != nil {
		return m.Controllers
	}
	return nil
}

func (m *DistributedServiceCardSpec) GetDSCProfile() string {
	if m != nil {
		return m.DSCProfile
	}
	return ""
}

// DistributedServiceCardStatus contains current status of a DistributedServiceCard I/O subsystem
type DistributedServiceCardStatus struct {
	// Current phase of the NIC adapter in the system
	AdmissionPhase string             `protobuf:"bytes,1,opt,name=AdmissionPhase,proto3" json:"phase,omitempty"`
	IPConfig       *cluster2.IPConfig `protobuf:"bytes,2,opt,name=IPConfig" json:"ip-config,omitempty"`
	// Resolved Controllers/Venice IPs
	Controllers     []string `protobuf:"bytes,3,rep,name=Controllers" json:"controllers,omitempty"`
	TransitionPhase string   `protobuf:"bytes,4,opt,name=TransitionPhase,proto3" json:"transition-phase,omitempty"`
	// Operational mode of the NIC
	Mode string `protobuf:"bytes,5,opt,name=Mode,proto3" json:"mode"`
	// FRU information read from FRU.json
	Fru *DistributedServiceCardFru `protobuf:"bytes,7,opt,name=Fru" json:"fru,omitempty"`
	// DistributedServiceCard generated DSC name which should be used as UUID for DistributedServiceCard
	DSCName string `protobuf:"bytes,8,opt,name=DSCName,proto3" json:"dsc-name,omitempty"`
	// TimeZone
	TimeZone string `protobuf:"bytes,9,opt,name=TimeZone,proto3" json:"timezone,omitempty"`
	// The reason why the DSC is not in admitted phase, if known
	AdmissionPhaseReason string `protobuf:"bytes,10,opt,name=AdmissionPhaseReason,proto3" json:"adm-phase-reason,omitempty"`
	// ManagementInterface where Venice was discovered
	ManagementInterface string `protobuf:"bytes,11,opt,name=ManagementInterface,proto3" json:"management-interface,omitempty"`
}

func (m *DistributedServiceCardStatus) Reset()                    { *m = DistributedServiceCardStatus{} }
func (m *DistributedServiceCardStatus) String() string            { return proto.CompactTextString(m) }
func (*DistributedServiceCardStatus) ProtoMessage()               {}
func (*DistributedServiceCardStatus) Descriptor() ([]byte, []int) { return fileDescriptorNmd, []int{3} }

func (m *DistributedServiceCardStatus) GetAdmissionPhase() string {
	if m != nil {
		return m.AdmissionPhase
	}
	return ""
}

func (m *DistributedServiceCardStatus) GetIPConfig() *cluster2.IPConfig {
	if m != nil {
		return m.IPConfig
	}
	return nil
}

func (m *DistributedServiceCardStatus) GetControllers() []string {
	if m != nil {
		return m.Controllers
	}
	return nil
}

func (m *DistributedServiceCardStatus) GetTransitionPhase() string {
	if m != nil {
		return m.TransitionPhase
	}
	return ""
}

func (m *DistributedServiceCardStatus) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *DistributedServiceCardStatus) GetFru() *DistributedServiceCardFru {
	if m != nil {
		return m.Fru
	}
	return nil
}

func (m *DistributedServiceCardStatus) GetDSCName() string {
	if m != nil {
		return m.DSCName
	}
	return ""
}

func (m *DistributedServiceCardStatus) GetTimeZone() string {
	if m != nil {
		return m.TimeZone
	}
	return ""
}

func (m *DistributedServiceCardStatus) GetAdmissionPhaseReason() string {
	if m != nil {
		return m.AdmissionPhaseReason
	}
	return ""
}

func (m *DistributedServiceCardStatus) GetManagementInterface() string {
	if m != nil {
		return m.ManagementInterface
	}
	return ""
}

// DistributedServiceCardCmdExecute contains information on what command to execute
type DistributedServiceCardCmdExecute struct {
	// Executable to run on DSC side
	Executable string `protobuf:"bytes,1,opt,name=Executable,proto3" json:"executable,omitempty"`
	// Flags for the executable to run on DSC side
	Opts string `protobuf:"bytes,2,opt,name=Opts,proto3" json:"opts,omitempty"`
	// Environment variables to set on DSC side to execute the command
	Env string `protobuf:"bytes,3,opt,name=Env,proto3" json:"env,omitempty"`
}

func (m *DistributedServiceCardCmdExecute) Reset()         { *m = DistributedServiceCardCmdExecute{} }
func (m *DistributedServiceCardCmdExecute) String() string { return proto.CompactTextString(m) }
func (*DistributedServiceCardCmdExecute) ProtoMessage()    {}
func (*DistributedServiceCardCmdExecute) Descriptor() ([]byte, []int) {
	return fileDescriptorNmd, []int{4}
}

func (m *DistributedServiceCardCmdExecute) GetExecutable() string {
	if m != nil {
		return m.Executable
	}
	return ""
}

func (m *DistributedServiceCardCmdExecute) GetOpts() string {
	if m != nil {
		return m.Opts
	}
	return ""
}

func (m *DistributedServiceCardCmdExecute) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func init() {
	proto.RegisterType((*DistributedServiceCardFru)(nil), "nmd.DistributedServiceCardFru")
	proto.RegisterType((*DistributedServiceCard)(nil), "nmd.DistributedServiceCard")
	proto.RegisterType((*DistributedServiceCardSpec)(nil), "nmd.DistributedServiceCardSpec")
	proto.RegisterType((*DistributedServiceCardStatus)(nil), "nmd.DistributedServiceCardStatus")
	proto.RegisterType((*DistributedServiceCardCmdExecute)(nil), "nmd.DistributedServiceCardCmdExecute")
	proto.RegisterEnum("nmd.MgmtMode", MgmtMode_name, MgmtMode_value)
	proto.RegisterEnum("nmd.NetworkMode", NetworkMode_name, NetworkMode_value)
	proto.RegisterEnum("nmd.DistributedServiceCardStatus_Transition", DistributedServiceCardStatus_Transition_name, DistributedServiceCardStatus_Transition_value)
}
func (m *DistributedServiceCardFru) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributedServiceCardFru) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ManufacturingDate) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.ManufacturingDate)))
		i += copy(dAtA[i:], m.ManufacturingDate)
	}
	if len(m.Manufacturer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.Manufacturer)))
		i += copy(dAtA[i:], m.Manufacturer)
	}
	if len(m.ProductName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.ProductName)))
		i += copy(dAtA[i:], m.ProductName)
	}
	if len(m.SerialNum) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.SerialNum)))
		i += copy(dAtA[i:], m.SerialNum)
	}
	if len(m.PartNum) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.PartNum)))
		i += copy(dAtA[i:], m.PartNum)
	}
	if len(m.BoardId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.BoardId)))
		i += copy(dAtA[i:], m.BoardId)
	}
	if len(m.EngChangeLevel) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.EngChangeLevel)))
		i += copy(dAtA[i:], m.EngChangeLevel)
	}
	if len(m.NumMacAddr) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.NumMacAddr)))
		i += copy(dAtA[i:], m.NumMacAddr)
	}
	if len(m.MacStr) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.MacStr)))
		i += copy(dAtA[i:], m.MacStr)
	}
	return i, nil
}

func (m *DistributedServiceCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributedServiceCard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNmd(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintNmd(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNmd(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintNmd(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *DistributedServiceCardSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributedServiceCardSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PrimaryMAC) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.PrimaryMAC)))
		i += copy(dAtA[i:], m.PrimaryMAC)
	}
	if len(m.ID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.IPConfig != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(m.IPConfig.Size()))
		n5, err := m.IPConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Mode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.Mode)))
		i += copy(dAtA[i:], m.Mode)
	}
	if len(m.NetworkMode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.NetworkMode)))
		i += copy(dAtA[i:], m.NetworkMode)
	}
	if m.MgmtVlan != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNmd(dAtA, i, uint64(m.MgmtVlan))
	}
	if len(m.Controllers) > 0 {
		for _, s := range m.Controllers {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.DSCProfile) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.DSCProfile)))
		i += copy(dAtA[i:], m.DSCProfile)
	}
	return i, nil
}

func (m *DistributedServiceCardStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributedServiceCardStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AdmissionPhase) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.AdmissionPhase)))
		i += copy(dAtA[i:], m.AdmissionPhase)
	}
	if m.IPConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNmd(dAtA, i, uint64(m.IPConfig.Size()))
		n6, err := m.IPConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Controllers) > 0 {
		for _, s := range m.Controllers {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.TransitionPhase) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.TransitionPhase)))
		i += copy(dAtA[i:], m.TransitionPhase)
	}
	if len(m.Mode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.Mode)))
		i += copy(dAtA[i:], m.Mode)
	}
	if m.Fru != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(m.Fru.Size()))
		n7, err := m.Fru.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.DSCName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.DSCName)))
		i += copy(dAtA[i:], m.DSCName)
	}
	if len(m.TimeZone) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.TimeZone)))
		i += copy(dAtA[i:], m.TimeZone)
	}
	if len(m.AdmissionPhaseReason) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.AdmissionPhaseReason)))
		i += copy(dAtA[i:], m.AdmissionPhaseReason)
	}
	if len(m.ManagementInterface) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.ManagementInterface)))
		i += copy(dAtA[i:], m.ManagementInterface)
	}
	return i, nil
}

func (m *DistributedServiceCardCmdExecute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributedServiceCardCmdExecute) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Executable) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.Executable)))
		i += copy(dAtA[i:], m.Executable)
	}
	if len(m.Opts) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.Opts)))
		i += copy(dAtA[i:], m.Opts)
	}
	if len(m.Env) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.Env)))
		i += copy(dAtA[i:], m.Env)
	}
	return i, nil
}

func encodeVarintNmd(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DistributedServiceCardFru) Size() (n int) {
	var l int
	_ = l
	l = len(m.ManufacturingDate)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.Manufacturer)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.SerialNum)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.PartNum)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.BoardId)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.EngChangeLevel)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.NumMacAddr)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.MacStr)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	return n
}

func (m *DistributedServiceCard) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNmd(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNmd(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNmd(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNmd(uint64(l))
	return n
}

func (m *DistributedServiceCardSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.PrimaryMAC)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	if m.IPConfig != nil {
		l = m.IPConfig.Size()
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.NetworkMode)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	if m.MgmtVlan != 0 {
		n += 1 + sovNmd(uint64(m.MgmtVlan))
	}
	if len(m.Controllers) > 0 {
		for _, s := range m.Controllers {
			l = len(s)
			n += 1 + l + sovNmd(uint64(l))
		}
	}
	l = len(m.DSCProfile)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	return n
}

func (m *DistributedServiceCardStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.AdmissionPhase)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	if m.IPConfig != nil {
		l = m.IPConfig.Size()
		n += 1 + l + sovNmd(uint64(l))
	}
	if len(m.Controllers) > 0 {
		for _, s := range m.Controllers {
			l = len(s)
			n += 1 + l + sovNmd(uint64(l))
		}
	}
	l = len(m.TransitionPhase)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	if m.Fru != nil {
		l = m.Fru.Size()
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.DSCName)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.TimeZone)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.AdmissionPhaseReason)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.ManagementInterface)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	return n
}

func (m *DistributedServiceCardCmdExecute) Size() (n int) {
	var l int
	_ = l
	l = len(m.Executable)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.Opts)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	return n
}

func sovNmd(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNmd(x uint64) (n int) {
	return sovNmd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DistributedServiceCardFru) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributedServiceCardFru: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributedServiceCardFru: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManufacturingDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManufacturingDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manufacturer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manufacturer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngChangeLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EngChangeLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumMacAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumMacAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistributedServiceCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributedServiceCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributedServiceCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistributedServiceCardSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributedServiceCardSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributedServiceCardSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryMAC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryMAC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IPConfig == nil {
				m.IPConfig = &cluster2.IPConfig{}
			}
			if err := m.IPConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MgmtVlan", wireType)
			}
			m.MgmtVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MgmtVlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controllers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controllers = append(m.Controllers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSCProfile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DSCProfile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistributedServiceCardStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributedServiceCardStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributedServiceCardStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdmissionPhase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdmissionPhase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IPConfig == nil {
				m.IPConfig = &cluster2.IPConfig{}
			}
			if err := m.IPConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controllers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controllers = append(m.Controllers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransitionPhase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransitionPhase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fru", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fru == nil {
				m.Fru = &DistributedServiceCardFru{}
			}
			if err := m.Fru.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSCName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DSCName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdmissionPhaseReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdmissionPhaseReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagementInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagementInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistributedServiceCardCmdExecute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributedServiceCardCmdExecute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributedServiceCardCmdExecute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNmd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNmd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNmd
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNmd
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNmd(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNmd = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNmd   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("nmd.proto", fileDescriptorNmd) }

var fileDescriptorNmd = []byte{
	// 1383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x17, 0x0d, 0x2d, 0xc5, 0x92, 0x47, 0xb6, 0x23, 0x4f, 0x12, 0x47, 0xf2, 0xe7, 0xcf, 0x72, 0x5c,
	0x14, 0x71, 0xd2, 0x48, 0x32, 0x9c, 0x6e, 0xdc, 0x06, 0x2d, 0x44, 0x89, 0x8e, 0xd9, 0x44, 0xa4,
	0x20, 0xd2, 0x29, 0xd0, 0x8d, 0x31, 0x22, 0xc7, 0x0a, 0x5b, 0x72, 0x48, 0x0c, 0x87, 0x4e, 0x53,
	0x74, 0x5b, 0x3f, 0x42, 0x1e, 0xc2, 0xcb, 0x02, 0x79, 0x87, 0x2c, 0x83, 0xae, 0x0a, 0x14, 0x10,
	0x8a, 0x2c, 0xf5, 0x14, 0xc5, 0x0c, 0x29, 0x69, 0xec, 0x38, 0x2e, 0x8a, 0xec, 0x38, 0x77, 0xce,
	0x39, 0xf3, 0x73, 0xcf, 0xbd, 0x43, 0xb0, 0x40, 0x02, 0xb7, 0x11, 0xd1, 0x90, 0x85, 0x30, 0x47,
	0x02, 0x77, 0x6d, 0x7d, 0x18, 0x86, 0x43, 0x1f, 0x37, 0x51, 0xe4, 0x35, 0x11, 0x21, 0x21, 0x43,
	0xcc, 0x0b, 0x49, 0x9c, 0x42, 0xd6, 0xb4, 0xa1, 0xc7, 0x5e, 0x24, 0x83, 0x86, 0x13, 0x06, 0xcd,
	0x08, 0x93, 0x18, 0x11, 0x37, 0x6c, 0xc6, 0x2f, 0x9b, 0x27, 0x98, 0x78, 0x0e, 0x6e, 0x26, 0xcc,
	0xf3, 0x63, 0x4e, 0x1d, 0x62, 0x22, 0xb3, 0x9b, 0x1e, 0x71, 0xfc, 0xc4, 0xc5, 0x13, 0x99, 0xba,
	0x24, 0x33, 0x0c, 0x87, 0x61, 0x53, 0x84, 0x07, 0xc9, 0xb1, 0x18, 0x89, 0x81, 0xf8, 0xca, 0xe0,
	0x9f, 0x7f, 0x64, 0x55, 0xbe, 0xc7, 0x00, 0x33, 0x94, 0xc1, 0x76, 0xae, 0x80, 0x09, 0x44, 0xdc,
	0x8c, 0x03, 0x44, 0x19, 0xf1, 0x9c, 0x94, 0xb1, 0xf5, 0x57, 0x1e, 0x54, 0x3b, 0x5e, 0xcc, 0xa8,
	0x37, 0x48, 0x18, 0x76, 0x2d, 0x4c, 0x4f, 0x3c, 0x07, 0xb7, 0x11, 0x75, 0xf7, 0x69, 0x02, 0x0d,
	0xb0, 0xd2, 0x45, 0x24, 0x39, 0x46, 0x0e, 0x4b, 0xa8, 0x47, 0x86, 0x1d, 0xc4, 0x70, 0x45, 0xd9,
	0x54, 0xb6, 0x17, 0xd4, 0xcd, 0xf1, 0xa8, 0xb6, 0x1e, 0xc8, 0x93, 0x75, 0x17, 0x31, 0xfc, 0x30,
	0x0c, 0x3c, 0x86, 0x83, 0x88, 0xbd, 0xea, 0x7f, 0x48, 0x85, 0xdf, 0x80, 0xc5, 0x59, 0x10, 0xd3,
	0xca, 0x9c, 0x90, 0x5a, 0x1b, 0x8f, 0x6a, 0xab, 0x81, 0x14, 0x97, 0x44, 0xce, 0xe1, 0xe1, 0x63,
	0x50, 0xea, 0xd1, 0xd0, 0x4d, 0x1c, 0x66, 0xa0, 0x00, 0x57, 0x72, 0x33, 0x7a, 0x94, 0x86, 0xeb,
	0x04, 0x05, 0xf2, 0x1e, 0x64, 0x38, 0xdc, 0x03, 0x0b, 0x16, 0xa6, 0x1e, 0xf2, 0x8d, 0x24, 0xa8,
	0xe4, 0x05, 0xf7, 0x7f, 0xe3, 0x51, 0xed, 0x4e, 0x2c, 0x82, 0x75, 0x92, 0x04, 0x83, 0x73, 0x6b,
	0xcf, 0xd0, 0xf0, 0x11, 0x28, 0xf4, 0x10, 0x65, 0x9c, 0x78, 0x5d, 0x10, 0xab, 0xe3, 0x51, 0xed,
	0x76, 0x84, 0x28, 0xfb, 0x90, 0x36, 0x41, 0xc2, 0x1d, 0x50, 0x50, 0x43, 0x44, 0x5d, 0xdd, 0xad,
	0xcc, 0x0b, 0xd2, 0xea, 0x78, 0x54, 0x83, 0x03, 0x1e, 0xaa, 0x7b, 0xae, 0xcc, 0xc8, 0x60, 0x50,
	0x05, 0xcb, 0x1a, 0x19, 0xb6, 0x5f, 0x20, 0x32, 0xc4, 0xcf, 0xf0, 0x09, 0xf6, 0x2b, 0x85, 0xd9,
	0x11, 0x1d, 0x11, 0xae, 0xfb, 0x3c, 0x2e, 0x91, 0x2f, 0x30, 0xa0, 0x0a, 0x80, 0x91, 0x04, 0x5d,
	0xe4, 0xb4, 0x5c, 0x97, 0x56, 0x8a, 0x82, 0xbf, 0x35, 0x1e, 0xd5, 0x36, 0xd2, 0x8d, 0xd6, 0x03,
	0xe4, 0xd4, 0x91, 0xeb, 0x52, 0x1c, 0xc7, 0x38, 0x96, 0x74, 0x24, 0x16, 0xdc, 0x07, 0xf3, 0x5d,
	0xe4, 0x58, 0x8c, 0x56, 0x16, 0x04, 0xbf, 0x71, 0x76, 0x5a, 0x85, 0x1a, 0x87, 0x99, 0x74, 0x3b,
	0x03, 0x6d, 0xdf, 0xbf, 0x3f, 0x1e, 0xd5, 0x6e, 0x71, 0x39, 0x6e, 0x1f, 0x32, 0x94, 0xb4, 0x32,
	0xf6, 0xd6, 0x9b, 0x39, 0xb0, 0x7a, 0xb9, 0xbb, 0xe0, 0x0e, 0x50, 0x6c, 0x61, 0xa5, 0xd2, 0xee,
	0x52, 0x03, 0x45, 0x5e, 0xc3, 0x7e, 0x15, 0xe1, 0x2e, 0x66, 0x48, 0xbd, 0xf9, 0x76, 0x54, 0xbb,
	0xf6, 0x6e, 0x54, 0x53, 0xc6, 0xa3, 0x5a, 0xe1, 0xa1, 0x47, 0x7c, 0x8f, 0xe0, 0xbe, 0x62, 0xc3,
	0x3d, 0xa0, 0x98, 0xc2, 0x31, 0xa5, 0xdd, 0x1b, 0x82, 0x61, 0x0e, 0x7e, 0xc4, 0x0e, 0x13, 0x9c,
	0x35, 0x89, 0xb3, 0xcc, 0x0b, 0x42, 0xda, 0x8c, 0x62, 0xc2, 0xa7, 0x20, 0x6f, 0x45, 0xd8, 0x11,
	0x86, 0x29, 0xed, 0xd6, 0x1a, 0xbc, 0xe2, 0x2f, 0xdf, 0x17, 0x87, 0xa9, 0xab, 0x5c, 0x8d, 0x2b,
	0xc5, 0x11, 0x76, 0x24, 0x25, 0x21, 0x02, 0x2d, 0x30, 0x6f, 0x31, 0xc4, 0x92, 0x58, 0x78, 0xa8,
	0xb4, 0x7b, 0xf7, 0x2a, 0x39, 0x01, 0x54, 0x2b, 0x99, 0x60, 0x39, 0x16, 0x63, 0xf9, 0xa6, 0x52,
	0xc4, 0x57, 0x8b, 0x7f, 0xfc, 0x56, 0x2d, 0xc2, 0x79, 0x27, 0x24, 0xc7, 0xde, 0x70, 0xeb, 0x75,
	0x1e, 0xac, 0x7d, 0x7c, 0x7f, 0x70, 0x0f, 0x80, 0x1e, 0xf5, 0x02, 0x44, 0x5f, 0x75, 0x5b, 0xed,
	0xac, 0x1e, 0x53, 0x43, 0xa6, 0x51, 0x9e, 0x63, 0x39, 0xb3, 0x33, 0x30, 0xdc, 0x04, 0x73, 0x7a,
	0x27, 0xab, 0xbb, 0xf2, 0x78, 0x54, 0x5b, 0xd4, 0x3b, 0x12, 0x72, 0x4e, 0xef, 0xc0, 0x7d, 0x50,
	0xd4, 0x7b, 0x6d, 0xb1, 0x8f, 0xec, 0xbe, 0x56, 0x1a, 0x8e, 0x9f, 0xc4, 0x0c, 0xd3, 0xc6, 0x64,
	0x42, 0xbd, 0x33, 0x1e, 0xd5, 0x6e, 0x7a, 0x51, 0x3d, 0xdd, 0xaf, 0xa4, 0x30, 0xe5, 0xc2, 0x03,
	0x90, 0xef, 0x86, 0x2e, 0xce, 0x0a, 0xed, 0xcb, 0xb3, 0xd3, 0xea, 0xb6, 0xc5, 0xa8, 0x46, 0x92,
	0x60, 0xfb, 0xf2, 0xa3, 0x35, 0xba, 0xc3, 0x80, 0x71, 0x0a, 0xf7, 0x55, 0x3e, 0x08, 0x5d, 0xdc,
	0x17, 0x0a, 0x10, 0x81, 0x92, 0x81, 0xd9, 0xcb, 0x90, 0xfe, 0x24, 0x04, 0xd3, 0x02, 0xfc, 0xf6,
	0xec, 0xb4, 0xfa, 0xc5, 0xbf, 0x08, 0x4a, 0x2c, 0xae, 0xb9, 0x48, 0xd2, 0x71, 0x5d, 0x68, 0xcb,
	0x9a, 0xb0, 0x01, 0x8a, 0x7c, 0xf5, 0xe7, 0x3e, 0x22, 0xa2, 0x56, 0x97, 0x54, 0xc8, 0xf3, 0x7f,
	0xe2, 0x23, 0x22, 0x1f, 0x6e, 0x82, 0x81, 0x5f, 0x83, 0x52, 0x3b, 0x24, 0x8c, 0x86, 0xbe, 0x8f,
	0x69, 0x5c, 0x29, 0x6c, 0xe6, 0x26, 0x29, 0x70, 0x66, 0x61, 0xb9, 0x0f, 0x49, 0x68, 0x9e, 0xbe,
	0x8e, 0xd5, 0xee, 0xd1, 0xf0, 0xd8, 0xf3, 0x71, 0x56, 0xa1, 0x82, 0xeb, 0xc6, 0x4e, 0x3d, 0x4a,
	0xc3, 0x72, 0xfa, 0x66, 0xe0, 0xad, 0xd7, 0x45, 0xb0, 0x7e, 0x95, 0xd3, 0x20, 0x05, 0xcb, 0x2d,
	0x37, 0xf0, 0xe2, 0xd8, 0x0b, 0x49, 0xef, 0x05, 0x8a, 0x27, 0xed, 0xfa, 0xbb, 0xb3, 0xd3, 0xea,
	0xa3, 0xc9, 0x75, 0x4d, 0xd2, 0x79, 0x95, 0x52, 0x43, 0xb0, 0xf9, 0xb5, 0xdd, 0x88, 0xf8, 0x97,
	0xdc, 0x71, 0xce, 0xaf, 0x70, 0xce, 0x31, 0x73, 0x9f, 0xe0, 0x98, 0x0b, 0x97, 0x9a, 0xfb, 0x4f,
	0x97, 0xfa, 0x2b, 0xb8, 0x61, 0x53, 0x44, 0x62, 0x8f, 0x4d, 0x4f, 0x9e, 0x3a, 0xaf, 0x7f, 0x76,
	0x5a, 0xdd, 0xb9, 0xda, 0x28, 0xd9, 0x89, 0x67, 0x7c, 0x7e, 0xec, 0x35, 0x36, 0x1d, 0xd6, 0x2f,
	0xde, 0xc0, 0xc5, 0xa5, 0xa6, 0x66, 0xbf, 0xfe, 0xc9, 0x66, 0x6f, 0x83, 0xdc, 0x3e, 0x4d, 0x44,
	0xdf, 0x2f, 0xed, 0x6e, 0x5c, 0xd1, 0x5a, 0xf6, 0x69, 0xa2, 0xae, 0x8c, 0x47, 0xb5, 0xa5, 0x63,
	0x9a, 0x48, 0x5b, 0xe3, 0x6c, 0xfe, 0xf2, 0x74, 0xac, 0xb6, 0x78, 0x23, 0x8b, 0xb3, 0x97, 0x87,
	0xdb, 0xeb, 0xc2, 0xfb, 0x38, 0x81, 0xc1, 0x3d, 0x50, 0xb4, 0xbd, 0x00, 0xff, 0x10, 0x12, 0x9c,
	0xf5, 0xfc, 0xff, 0xff, 0x7e, 0x5a, 0xcd, 0x1d, 0xda, 0x6d, 0xce, 0x64, 0x5e, 0x80, 0x7f, 0x09,
	0x89, 0xcc, 0x9c, 0xc2, 0x61, 0x1f, 0xdc, 0x3a, 0x6f, 0x88, 0x3e, 0x46, 0x71, 0x48, 0x2a, 0x40,
	0xc8, 0x6c, 0xf0, 0xab, 0x44, 0x6e, 0x90, 0xde, 0x61, 0x9d, 0x8a, 0x39, 0x49, 0xe7, 0x52, 0x2e,
	0xb4, 0xc1, 0xcd, 0x2e, 0x22, 0x68, 0x88, 0x03, 0x4c, 0x98, 0x4e, 0x18, 0xa6, 0xc7, 0xc8, 0xc1,
	0x95, 0xd2, 0xec, 0x35, 0x0b, 0xa6, 0xd3, 0x75, 0x6f, 0x32, 0x2f, 0xc9, 0x5e, 0x46, 0xdf, 0xfa,
	0x53, 0x01, 0x60, 0x96, 0x39, 0x58, 0x04, 0x79, 0xc3, 0x34, 0xb4, 0xf2, 0x35, 0xb8, 0x04, 0x16,
	0x3a, 0x07, 0xed, 0xde, 0x91, 0xa5, 0x19, 0x76, 0x59, 0x99, 0x0e, 0x3b, 0x7c, 0x76, 0x0e, 0xae,
	0x80, 0x25, 0x31, 0xb4, 0xf5, 0xae, 0xd6, 0x31, 0x0f, 0xed, 0x72, 0x0e, 0xde, 0x03, 0x9f, 0x75,
	0x75, 0xcb, 0xd2, 0x8d, 0x27, 0x47, 0xcf, 0x35, 0xa3, 0x63, 0xf6, 0x8f, 0xac, 0x9e, 0xd6, 0xd6,
	0xf7, 0x75, 0xad, 0x73, 0xd4, 0xb2, 0xed, 0xbe, 0xae, 0x1e, 0xda, 0x9a, 0x55, 0xce, 0xc3, 0x75,
	0x50, 0x79, 0xae, 0x19, 0x7a, 0x5b, 0x3b, 0xea, 0x6b, 0x4f, 0x74, 0xcb, 0xee, 0xb7, 0x6c, 0xdd,
	0x34, 0xd2, 0x85, 0xae, 0x7f, 0x6c, 0x56, 0xac, 0x3b, 0x0f, 0x57, 0x01, 0xcc, 0x66, 0x0f, 0x8d,
	0xbe, 0xd6, 0x6a, 0x1f, 0xb4, 0xd4, 0x67, 0x5a, 0xb9, 0x00, 0x21, 0x58, 0xee, 0x6b, 0xaa, 0x69,
	0xda, 0x47, 0x3d, 0xcd, 0xe8, 0xe8, 0xc6, 0x93, 0x72, 0x71, 0xeb, 0x8d, 0x02, 0x36, 0x2f, 0xf7,
	0x49, 0x3b, 0x70, 0xb5, 0x9f, 0xb1, 0x93, 0x30, 0x0c, 0x1f, 0x03, 0x90, 0x7e, 0xa2, 0x81, 0x3f,
	0x69, 0x0c, 0xeb, 0x6f, 0xd3, 0x57, 0xf3, 0x16, 0x9e, 0xce, 0xc8, 0xbd, 0x67, 0x86, 0x87, 0x0f,
	0x40, 0xde, 0x8c, 0x58, 0x9c, 0x3d, 0x1e, 0xab, 0x19, 0x6f, 0x39, 0x8c, 0x98, 0x5c, 0x94, 0x02,
	0x03, 0xef, 0x81, 0x9c, 0x46, 0x4e, 0xb2, 0x1f, 0xb4, 0xdb, 0x19, 0x74, 0x09, 0x93, 0x13, 0xd9,
	0xa9, 0x1a, 0x39, 0x79, 0x70, 0x37, 0x6d, 0xbc, 0xc2, 0xfa, 0x45, 0x90, 0x3f, 0x30, 0x2d, 0xbb,
	0x7c, 0x0d, 0x96, 0x40, 0xc1, 0xd0, 0xec, 0xef, 0xcd, 0xfe, 0xd3, 0xb2, 0xf2, 0xe0, 0xe1, 0xb9,
	0xf6, 0x2f, 0x65, 0xad, 0x00, 0x72, 0xa6, 0xa9, 0x96, 0x15, 0x08, 0xc0, 0xbc, 0x6e, 0xa8, 0x2d,
	0xa3, 0x53, 0x9e, 0x53, 0x17, 0xdf, 0xbe, 0xdf, 0x50, 0xde, 0xbd, 0xdf, 0x50, 0xfe, 0x7e, 0xbf,
	0xa1, 0xf4, 0x94, 0xc1, 0xbc, 0xf8, 0xcf, 0x7d, 0xf4, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb0,
	0x74, 0xa1, 0x03, 0xe6, 0x0b, 0x00, 0x00,
}
