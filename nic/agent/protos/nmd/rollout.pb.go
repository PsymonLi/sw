// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rollout.proto

/*
	Package nmd is a generated protocol buffer package.

	Service name

	It is generated from these files:
		rollout.proto

	It has these top-level messages:
		NaplesRollout
*/
package nmd

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import protos "github.com/pensando/sw/venice/ctrler/rollout/rpcserver/protos"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Naples rollout object
type NaplesRollout struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	PendingOps     []protos.SmartNICOpSpec   `protobuf:"bytes,3,rep,name=PendingOps" json:"pending,omitempty"`
	OpStatus       []protos.SmartNICOpStatus `protobuf:"bytes,4,rep,name=OpStatus" json:"completed,omitempty"`
	InProgressOp   protos.SmartNICOpSpec     `protobuf:"bytes,5,opt,name=InProgressOp" json:"inprogress,omitempty"`
}

func (m *NaplesRollout) Reset()                    { *m = NaplesRollout{} }
func (m *NaplesRollout) String() string            { return proto.CompactTextString(m) }
func (*NaplesRollout) ProtoMessage()               {}
func (*NaplesRollout) Descriptor() ([]byte, []int) { return fileDescriptorRollout, []int{0} }

func (m *NaplesRollout) GetPendingOps() []protos.SmartNICOpSpec {
	if m != nil {
		return m.PendingOps
	}
	return nil
}

func (m *NaplesRollout) GetOpStatus() []protos.SmartNICOpStatus {
	if m != nil {
		return m.OpStatus
	}
	return nil
}

func (m *NaplesRollout) GetInProgressOp() protos.SmartNICOpSpec {
	if m != nil {
		return m.InProgressOp
	}
	return protos.SmartNICOpSpec{}
}

func init() {
	proto.RegisterType((*NaplesRollout)(nil), "nmd.NaplesRollout")
}
func (m *NaplesRollout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NaplesRollout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRollout(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintRollout(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.PendingOps) > 0 {
		for _, msg := range m.PendingOps {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRollout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OpStatus) > 0 {
		for _, msg := range m.OpStatus {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRollout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintRollout(dAtA, i, uint64(m.InProgressOp.Size()))
	n3, err := m.InProgressOp.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func encodeVarintRollout(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NaplesRollout) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovRollout(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovRollout(uint64(l))
	if len(m.PendingOps) > 0 {
		for _, e := range m.PendingOps {
			l = e.Size()
			n += 1 + l + sovRollout(uint64(l))
		}
	}
	if len(m.OpStatus) > 0 {
		for _, e := range m.OpStatus {
			l = e.Size()
			n += 1 + l + sovRollout(uint64(l))
		}
	}
	l = m.InProgressOp.Size()
	n += 1 + l + sovRollout(uint64(l))
	return n
}

func sovRollout(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRollout(x uint64) (n int) {
	return sovRollout(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NaplesRollout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NaplesRollout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NaplesRollout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingOps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingOps = append(m.PendingOps, protos.SmartNICOpSpec{})
			if err := m.PendingOps[len(m.PendingOps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpStatus = append(m.OpStatus, protos.SmartNICOpStatus{})
			if err := m.OpStatus[len(m.OpStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InProgressOp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InProgressOp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRollout(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRollout
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRollout
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRollout
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRollout(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRollout = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRollout   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rollout.proto", fileDescriptorRollout) }

var fileDescriptorRollout = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x86, 0x31, 0x81, 0x52, 0xb9, 0x09, 0x88, 0x2d, 0x42, 0xdb, 0x50, 0x25, 0x15, 0x12, 0x52,
	0x0f, 0x65, 0x8d, 0xca, 0x09, 0x8e, 0x41, 0x1c, 0x2a, 0x44, 0x37, 0x4d, 0x72, 0xe0, 0xea, 0x78,
	0xa7, 0xc6, 0xc8, 0x6b, 0x5b, 0xf6, 0x6c, 0x51, 0x1f, 0x80, 0x0b, 0x4f, 0xd6, 0x63, 0xc5, 0x03,
	0x44, 0x28, 0xc7, 0x3e, 0x05, 0x5a, 0xef, 0x82, 0xb6, 0x12, 0xe9, 0x6d, 0x67, 0x76, 0xbe, 0x6f,
	0xfe, 0x31, 0x1d, 0x78, 0xab, 0xb5, 0xad, 0x30, 0x73, 0xde, 0xa2, 0x4d, 0x7a, 0xa6, 0x2c, 0x86,
	0xfb, 0xd2, 0x5a, 0xa9, 0x81, 0x71, 0xa7, 0x18, 0x37, 0xc6, 0x22, 0x47, 0x65, 0x4d, 0x68, 0x46,
	0x86, 0x1f, 0xa5, 0xc2, 0xaf, 0xd5, 0x32, 0x13, 0xb6, 0x64, 0x0e, 0x4c, 0xe0, 0xa6, 0xb0, 0x2c,
	0x7c, 0x67, 0x17, 0x60, 0x94, 0x00, 0x56, 0xa1, 0xd2, 0xa1, 0x46, 0x25, 0x98, 0x2e, 0xcd, 0x94,
	0x11, 0xba, 0x2a, 0xe0, 0xaf, 0xe6, 0x75, 0x47, 0x23, 0xad, 0xb4, 0x2c, 0xb6, 0x97, 0xd5, 0x79,
	0xac, 0x62, 0x11, 0xbf, 0xda, 0xf1, 0x57, 0x1b, 0xb6, 0xd6, 0x19, 0x4b, 0x40, 0xde, 0x8e, 0x7d,
	0xba, 0x3b, 0x9c, 0x40, 0xaf, 0xc1, 0xb3, 0xf6, 0x66, 0xe6, 0x9d, 0x08, 0xe0, 0x2f, 0xc0, 0x37,
	0xcb, 0x03, 0xbb, 0xf5, 0x18, 0x2f, 0x7f, 0xf6, 0xe8, 0xe0, 0x94, 0x3b, 0x0d, 0x61, 0xd6, 0xf4,
	0x93, 0x37, 0x94, 0x2c, 0x52, 0x72, 0x40, 0x0e, 0x77, 0x8e, 0x07, 0x19, 0x77, 0x2a, 0x5b, 0x5c,
	0x3a, 0xf8, 0x0c, 0xc8, 0x27, 0xbb, 0x57, 0xab, 0xf1, 0xbd, 0xeb, 0xd5, 0x98, 0xdc, 0xac, 0xc6,
	0x8f, 0x8e, 0x94, 0xd1, 0xca, 0xc0, 0x8c, 0x2c, 0x92, 0x77, 0x94, 0xe4, 0xe9, 0xfd, 0x48, 0x3c,
	0x89, 0x44, 0xbe, 0xfc, 0x06, 0x02, 0x23, 0x33, 0xec, 0x30, 0x8f, 0xeb, 0x23, 0x8e, 0x6c, 0xa9,
	0x10, 0x4a, 0x87, 0x97, 0x33, 0x92, 0x27, 0x67, 0x94, 0x4e, 0xc1, 0x14, 0xca, 0xc8, 0xdc, 0x85,
	0xb4, 0x77, 0xd0, 0x3b, 0xdc, 0x39, 0x7e, 0xde, 0x44, 0x0b, 0xd9, 0xbc, 0xe4, 0x1e, 0x4f, 0x4f,
	0x3e, 0xe4, 0x6e, 0xee, 0x40, 0x4c, 0xf6, 0x6a, 0xd5, 0xcd, 0x6a, 0xfc, 0xd4, 0x35, 0x44, 0xc7,
	0xd4, 0x91, 0x24, 0x67, 0x74, 0x3b, 0x77, 0x73, 0xe4, 0x58, 0x85, 0xf4, 0x41, 0x14, 0xa6, 0xff,
	0x11, 0xc6, 0xff, 0x93, 0x17, 0xad, 0x72, 0x57, 0xd8, 0xd2, 0x69, 0x40, 0x28, 0x3a, 0xd2, 0x7f,
	0x9a, 0xe4, 0x0b, 0xed, 0x9f, 0x98, 0xa9, 0xb7, 0xd2, 0x43, 0x08, 0xb9, 0x4b, 0x1f, 0xc6, 0x5b,
	0x37, 0xe5, 0xdc, 0x6f, 0xa5, 0xcf, 0x94, 0x71, 0x2d, 0xd3, 0xb1, 0xde, 0x32, 0xbd, 0xef, 0xff,
	0xfa, 0xb1, 0xb7, 0x9d, 0x6c, 0x09, 0x6b, 0xce, 0x95, 0x9c, 0xf4, 0xaf, 0xd6, 0x23, 0x72, 0xbd,
	0x1e, 0x91, 0xdf, 0xeb, 0x11, 0x99, 0x92, 0xe5, 0x56, 0x5c, 0xf0, 0xf6, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xee, 0xa3, 0xdd, 0xee, 0xc1, 0x02, 0x00, 0x00,
}
