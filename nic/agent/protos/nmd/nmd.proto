// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package nmd;

import "google/api/annotations.proto";
import  public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/protos/smartnic.proto";

// DistributedServiceCard Fru object
message DistributedServiceCardFru {
    string ManufacturingDate = 1[(gogoproto.jsontag) = "manufacturing-date,omitempty"];
    string Manufacturer      = 2[(gogoproto.jsontag) = "manufacturer,omitempty"];
    string ProductName       = 3[(gogoproto.jsontag) = "product-name,omitempty"];
    string SerialNum         = 4[(gogoproto.jsontag) = "serial-number,omitempty"];
    string PartNum           = 5[(gogoproto.jsontag) = "part-number,omitempty"];
    string BoardId           = 6[(gogoproto.jsontag) = "board-id,omitempty"];
    string EngChangeLevel    = 7[(gogoproto.jsontag) = "change-level,omitempty"];
    string NumMacAddr        = 8[(gogoproto.jsontag) = "number-mac-addresses,omitempty"];
    string MacStr            = 9[(gogoproto.jsontag) = "mac-string,omitempty", (venice.check) = "EmptyOr(MacAddr())"];
}

// DistributedServiceCard config object
message DistributedServiceCard {
    option (venice.objectPrefix) = {Collection: "config"};

    api.TypeMeta T      = 1 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O    = 2 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the NIC.
    DistributedServiceCardSpec Spec     = 3 [(gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the NIC.
    DistributedServiceCardStatus Status = 4 [(gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "status,omitempty"];
}

// Operational mode of a DistributedServiceCard
enum MgmtMode {
    HOST     = 0; // Host managed mode
    NETWORK  = 1; // Network managed mode
}

// Network Connectivity Mode (only if network managed)
enum NetworkMode {
    NONE     = 0;
    OOB      = 1; // Out Of Band Network Management
    INBAND   = 2; // Inband Network Management
}

// DistributedServiceCardSpec contains initial bootstrap configuration of the DistributedServiceCard I/O subsystem
message DistributedServiceCardSpec {

    // PrimaryMAC is the MAC address of the primary PF exposed by DSC
    string PrimaryMAC               = 1 [(gogoproto.jsontag) = "primary-mac,omitempty"];

    // ID is used as a user friendly identifier in logs/events
    string ID                 = 2 [(gogoproto.jsontag) = "ID,omitempty"];

    // IPConfig defines the static IP configuration. If not specified, DHCP will be attempted
    cluster.IPConfig IPConfig       = 3 [(gogoproto.jsontag) = "ip-config,omitempty"];

    // Operational mode of the NIC
    string Mode                     = 4 [(gogoproto.jsontag) = "mode",
                                         (venice.check) = "StrEnum(DistributedServiceCard.MgmtMode)"];

    // Operational mode of the NIC
    string NetworkMode              = 5 [(gogoproto.jsontag) = "network-mode",
                                         (venice.check) = "StrEnum(DistributedServiceCard.NetworkMode)"];

    // MgmtVlan defines the vlan to be used in network managed mode. The default of 0
    // implies OOB 1G mgmt port is used for management. A non 0 vlan switches the
    // management port to a vlan on data ports.
    uint32 MgmtVlan                 = 6 [(gogoproto.jsontag) = "vlan,omitempty"];

    // Controllers contains the list of controller IPs or Hostnames
    repeated string Controllers     = 7 [(gogoproto.jsontag) = "controllers,omitempty"];

    // DSCProfile captures the profile that is associated with this DistributedServiceCard
    string DSCProfile            = 8 [(gogoproto.jsontag) = "device-profile,omitempty"];

    // IP of bond0 interface for mirroring applications
    cluster.IPConfig InbandIPConfig     = 9 [(gogoproto.jsontag) = "inband-ip-config,omitempty"];
}

// DistributedServiceCardStatus contains current status of a DistributedServiceCard I/O subsystem
message DistributedServiceCardStatus {
    enum Transition {
        NONE                                = 0;
        DHCP_SENT                           = 1;
        DHCP_DONE                           = 2;
        DHCP_TIMEDOUT                       = 3;
        MISSING_VENDOR_SPECIFIED_ATTRIBUTES = 4;
        VENICE_REGISTRATION_SENT            = 5;
        VENICE_REGISTRATION_DONE            = 6;
        VENICE_UNREACHABLE                  = 7;
        REBOOT_PENDING                      = 8;
    }
    // Current phase of the NIC adapter in the system
    string    AdmissionPhase                = 1 [(gogoproto.jsontag) = "phase,omitempty",
                                                 (venice.check) = "StrEnum(cluster.DistributedServiceCardStatus.Phase)"];

    cluster.IPConfig IPConfig       	    = 2 [(gogoproto.jsontag) = "ip-config,omitempty"];

    // Resolved Controllers/Venice IPs
    repeated string Controllers             = 3 [(gogoproto.jsontag) = "controllers,omitempty"];

    string TransitionPhase                  = 4 [(gogoproto.jsontag) = "transition-phase,omitempty",
                                                 (venice.check) = "StrEnum(DistributedServiceCardStatus.Transition)"];
    // Operational mode of the NIC
    string Mode                   	        = 5 [(gogoproto.jsontag) = "mode",
                                                 (venice.check) = "StrEnum(DistributedServiceCard.MgmtMode)"];

    // FRU information read from FRU.json
    DistributedServiceCardFru Fru                = 7  [(gogoproto.jsontag) = "fru,omitempty"];

    // DistributedServiceCard generated DSC name which should be used as UUID for DistributedServiceCard
    string DSCName           = 8 [(gogoproto.jsontag) = "dsc-name,omitempty"];

    // TimeZone
    string TimeZone                 = 9 [(gogoproto.jsontag) = "timezone,omitempty", (venice.default)="UTC"];

    // The reason why the DSC is not in admitted phase, if known
    string AdmissionPhaseReason     = 10 [(gogoproto.jsontag) = "adm-phase-reason,omitempty"];

    // ManagementInterface where Venice was discovered
    string ManagementInterface      = 11 [(gogoproto.jsontag) = "management-interface,omitempty"];

    // IP of bond0 interface for mirroring applications
    cluster.IPConfig InbandIPConfig     = 12 [(gogoproto.jsontag) = "inband-ip-config,omitempty"];
}

// DistributedServiceCardCmdExecute contains information on what command to execute
message DistributedServiceCardCmdExecute {
    // Executable to run on DSC side
    string Executable               = 1 [(gogoproto.nullable) = true,
                                        (gogoproto.jsontag) = "executable,omitempty"];

    // Flags for the executable to run on DSC side
    string Opts                     = 2 [(gogoproto.nullable) = true,
                                        (gogoproto.jsontag) = "opts,omitempty"];

    // Environment variables to set on DSC side to execute the command
    string Env                      = 3 [(gogoproto.nullable) = true,
                                        (gogoproto.jsontag) = "env,omitempty"];
}
