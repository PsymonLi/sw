// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eventpolicy.proto

/*
	Package evtsmgrprotos is a generated protocol buffer package.

	It is generated from these files:
		eventpolicy.proto

	It has these top-level messages:
		EventPolicy
		EventPolicyEvent
*/
package evtsmgrprotos

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import monitoring1 "github.com/pensando/sw/api/generated/monitoring"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EventPolicy struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           monitoring1.EventPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         monitoring1.EventPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *EventPolicy) Reset()                    { *m = EventPolicy{} }
func (m *EventPolicy) String() string            { return proto.CompactTextString(m) }
func (*EventPolicy) ProtoMessage()               {}
func (*EventPolicy) Descriptor() ([]byte, []int) { return fileDescriptorEventpolicy, []int{0} }

func (m *EventPolicy) GetSpec() monitoring1.EventPolicySpec {
	if m != nil {
		return m.Spec
	}
	return monitoring1.EventPolicySpec{}
}

func (m *EventPolicy) GetStatus() monitoring1.EventPolicyStatus {
	if m != nil {
		return m.Status
	}
	return monitoring1.EventPolicyStatus{}
}

// network watch event
type EventPolicyEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	Policy    *EventPolicy  `protobuf:"bytes,2,opt,name=Policy" json:"policy,omitempty"`
}

func (m *EventPolicyEvent) Reset()                    { *m = EventPolicyEvent{} }
func (m *EventPolicyEvent) String() string            { return proto.CompactTextString(m) }
func (*EventPolicyEvent) ProtoMessage()               {}
func (*EventPolicyEvent) Descriptor() ([]byte, []int) { return fileDescriptorEventpolicy, []int{1} }

func (m *EventPolicyEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *EventPolicyEvent) GetPolicy() *EventPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func init() {
	proto.RegisterType((*EventPolicy)(nil), "evtsmgrprotos.EventPolicy")
	proto.RegisterType((*EventPolicyEvent)(nil), "evtsmgrprotos.EventPolicyEvent")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventPolicyAPI service

type EventPolicyAPIClient interface {
	WatchEventPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (EventPolicyAPI_WatchEventPolicyClient, error)
}

type eventPolicyAPIClient struct {
	cc *grpc.ClientConn
}

func NewEventPolicyAPIClient(cc *grpc.ClientConn) EventPolicyAPIClient {
	return &eventPolicyAPIClient{cc}
}

func (c *eventPolicyAPIClient) WatchEventPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (EventPolicyAPI_WatchEventPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventPolicyAPI_serviceDesc.Streams[0], c.cc, "/evtsmgrprotos.EventPolicyAPI/WatchEventPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventPolicyAPIWatchEventPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventPolicyAPI_WatchEventPolicyClient interface {
	Recv() (*EventPolicyEvent, error)
	grpc.ClientStream
}

type eventPolicyAPIWatchEventPolicyClient struct {
	grpc.ClientStream
}

func (x *eventPolicyAPIWatchEventPolicyClient) Recv() (*EventPolicyEvent, error) {
	m := new(EventPolicyEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EventPolicyAPI service

type EventPolicyAPIServer interface {
	WatchEventPolicy(*api.ObjectMeta, EventPolicyAPI_WatchEventPolicyServer) error
}

func RegisterEventPolicyAPIServer(s *grpc.Server, srv EventPolicyAPIServer) {
	s.RegisterService(&_EventPolicyAPI_serviceDesc, srv)
}

func _EventPolicyAPI_WatchEventPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventPolicyAPIServer).WatchEventPolicy(m, &eventPolicyAPIWatchEventPolicyServer{stream})
}

type EventPolicyAPI_WatchEventPolicyServer interface {
	Send(*EventPolicyEvent) error
	grpc.ServerStream
}

type eventPolicyAPIWatchEventPolicyServer struct {
	grpc.ServerStream
}

func (x *eventPolicyAPIWatchEventPolicyServer) Send(m *EventPolicyEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _EventPolicyAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evtsmgrprotos.EventPolicyAPI",
	HandlerType: (*EventPolicyAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchEventPolicy",
			Handler:       _EventPolicyAPI_WatchEventPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eventpolicy.proto",
}

func (m *EventPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEventpolicy(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintEventpolicy(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEventpolicy(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintEventpolicy(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *EventPolicyEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPolicyEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEventpolicy(dAtA, i, uint64(m.EventType))
	}
	if m.Policy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEventpolicy(dAtA, i, uint64(m.Policy.Size()))
		n5, err := m.Policy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeVarintEventpolicy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EventPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovEventpolicy(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovEventpolicy(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovEventpolicy(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovEventpolicy(uint64(l))
	return n
}

func (m *EventPolicyEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovEventpolicy(uint64(m.EventType))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovEventpolicy(uint64(l))
	}
	return n
}

func sovEventpolicy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEventpolicy(x uint64) (n int) {
	return sovEventpolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPolicyEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPolicyEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPolicyEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &EventPolicy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEventpolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEventpolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEventpolicy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEventpolicy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEventpolicy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEventpolicy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEventpolicy   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("eventpolicy.proto", fileDescriptorEventpolicy) }

var fileDescriptorEventpolicy = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xdf, 0x6a, 0x13, 0x41,
	0x14, 0xc6, 0xbb, 0x4d, 0x88, 0x3a, 0xb5, 0x31, 0x8e, 0x45, 0xe2, 0xaa, 0x89, 0x04, 0x04, 0x2f,
	0xda, 0x1d, 0x49, 0xaf, 0x15, 0x5c, 0xa8, 0x56, 0x44, 0x1b, 0xda, 0x82, 0xd7, 0x93, 0xcd, 0x71,
	0x3b, 0x65, 0x77, 0x66, 0xc8, 0x9c, 0x8d, 0x04, 0xe9, 0x95, 0xaf, 0xe2, 0x13, 0x88, 0x0f, 0x51,
	0xbc, 0xea, 0x13, 0x04, 0xc9, 0x65, 0x9f, 0x42, 0xf6, 0x24, 0x6d, 0x26, 0x96, 0x78, 0x77, 0xce,
	0xb7, 0xdf, 0xf9, 0xcd, 0xf9, 0xb3, 0xec, 0x3e, 0x8c, 0x40, 0xa3, 0x35, 0x99, 0x4a, 0xc6, 0x91,
	0x1d, 0x1a, 0x34, 0x7c, 0x13, 0x46, 0xe8, 0xf2, 0x74, 0x48, 0x99, 0x0b, 0x9f, 0xa4, 0xc6, 0xa4,
	0x19, 0x08, 0x69, 0x95, 0x90, 0x5a, 0x1b, 0x94, 0xa8, 0x8c, 0x76, 0x33, 0x73, 0xb8, 0x97, 0x2a,
	0x3c, 0x29, 0xfa, 0x51, 0x62, 0x72, 0x61, 0x41, 0x3b, 0xa9, 0x07, 0x46, 0xb8, 0xaf, 0x62, 0x04,
	0x5a, 0x25, 0x20, 0x0a, 0x54, 0x99, 0x2b, 0x4b, 0x53, 0xd0, 0x7e, 0xb5, 0x50, 0x3a, 0xc9, 0x8a,
	0x01, 0x5c, 0x61, 0x76, 0x3c, 0x4c, 0x6a, 0x52, 0x23, 0x48, 0xee, 0x17, 0x5f, 0x28, 0xa3, 0x84,
	0xa2, 0xb9, 0xfd, 0xf9, 0x8a, 0x57, 0xcb, 0x1e, 0x73, 0x40, 0x39, 0xb7, 0xed, 0xfe, 0xc7, 0x36,
	0x9b, 0x4e, 0xdc, 0x18, 0xbf, 0xf3, 0x6b, 0x9d, 0x6d, 0xec, 0x95, 0x6a, 0x8f, 0x54, 0xfe, 0x9a,
	0xdd, 0x3e, 0x1e, 0x5b, 0xf8, 0x08, 0x28, 0x9b, 0xc1, 0xb3, 0xe0, 0xc5, 0x46, 0x77, 0x33, 0x92,
	0x56, 0x45, 0x57, 0x62, 0xfc, 0xe0, 0x7c, 0xd2, 0x5e, 0xbb, 0x98, 0xb4, 0x83, 0xcb, 0x49, 0xfb,
	0xd6, 0xb6, 0xd2, 0x99, 0xd2, 0x70, 0x78, 0x5d, 0xc3, 0x3f, 0x30, 0x76, 0xd0, 0x3f, 0x85, 0x04,
	0x89, 0xb0, 0x4e, 0x84, 0x7b, 0x44, 0x58, 0xc8, 0x71, 0xe8, 0x31, 0xea, 0xe5, 0x04, 0xdb, 0x26,
	0x57, 0x08, 0xb9, 0xc5, 0xf1, 0xa1, 0x57, 0xce, 0xdf, 0xb1, 0xea, 0x91, 0x85, 0xa4, 0x59, 0x21,
	0xcc, 0xe3, 0x28, 0x37, 0x5a, 0xa1, 0x19, 0x2a, 0x9d, 0x46, 0x5e, 0xcf, 0xa5, 0x25, 0x7e, 0x58,
	0x22, 0x4b, 0x9c, 0xb3, 0x90, 0x78, 0x38, 0x02, 0xf0, 0x03, 0x56, 0x3b, 0x42, 0x89, 0x85, 0x6b,
	0x56, 0x09, 0xf5, 0x74, 0x15, 0x8a, 0x4c, 0x71, 0x73, 0x0e, 0x6b, 0x38, 0xca, 0x3d, 0xdc, 0x1c,
	0xd3, 0xf9, 0x11, 0xb0, 0x86, 0x57, 0x47, 0x21, 0x7f, 0xcb, 0xee, 0x50, 0x50, 0x2e, 0x83, 0x96,
	0x57, 0xef, 0xd6, 0x69, 0xf4, 0x6b, 0x35, 0x6e, 0x5e, 0x4e, 0xda, 0x5b, 0x74, 0x85, 0x1d, 0x1c,
	0x5b, 0xf0, 0xc8, 0x8b, 0x52, 0xbe, 0xcf, 0x6a, 0x33, 0xec, 0x7c, 0x7f, 0x61, 0xb4, 0xf4, 0x8f,
	0xfa, 0x0d, 0xc7, 0x5b, 0x65, 0x9b, 0xb3, 0x8b, 0xfa, 0x6d, 0xce, 0xbe, 0x76, 0x7f, 0x07, 0xac,
	0xee, 0xb9, 0xdf, 0xf4, 0xde, 0xf3, 0x7d, 0xd6, 0xf8, 0x2c, 0x31, 0x39, 0xf1, 0x8f, 0xfe, 0xef,
	0x81, 0xc2, 0xf6, 0xea, 0x17, 0x29, 0xec, 0xac, 0xbd, 0x0c, 0x42, 0xfd, 0xf3, 0xfb, 0xa3, 0xd3,
	0xe5, 0xbf, 0xa7, 0x92, 0x02, 0xf2, 0x6a, 0xa6, 0x1c, 0xf2, 0xaa, 0x35, 0x0e, 0x79, 0x6d, 0x00,
	0x19, 0x20, 0xf0, 0x8a, 0x2d, 0x30, 0x7c, 0x25, 0xbe, 0x2d, 0xde, 0x88, 0x8e, 0x41, 0x4b, 0x8d,
	0x67, 0x4b, 0xda, 0x27, 0x99, 0x83, 0xb3, 0x32, 0x81, 0x9b, 0xf2, 0x59, 0x7c, 0xf7, 0x7c, 0xda,
	0x0a, 0x2e, 0xa6, 0xad, 0xe0, 0xcf, 0xb4, 0x15, 0xf4, 0x82, 0x7e, 0x8d, 0x9a, 0xdb, 0xfd, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0xd6, 0x4d, 0x2d, 0xa3, 0xd5, 0x03, 0x00, 0x00,
}
