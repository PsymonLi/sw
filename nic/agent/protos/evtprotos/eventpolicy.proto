// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

 syntax = "proto3";

 package evtsmgrprotos;

 // Mandatory imports.
 import "google/api/annotations.proto";
 import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
 import "github.com/gogo/protobuf/gogoproto/gogo.proto";
 import "github.com/pensando/sw/api/meta.proto";
 import "github.com/pensando/sw/api/protos/eventpolicy.proto";

 // ---------------------------- Event Policy API ----------------------------
 service EventPolicyAPI {
     // options for auto generating rest endpoints
     option(venice.naplesRestService) = {
         Object: "EventPolicy",
         Method: ["get", "list", "post", "delete", "put"],
         Pattern: "/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}"
     };

     rpc WatchEventPolicy (api.ObjectMeta) returns (stream EventPolicyEvent) {};
 }

 message EventPolicy {
     api.TypeMeta                  TypeMeta    = 1 [(gogoproto.embed) = true,
                                                    (gogoproto.nullable) = false,
                                                    (gogoproto.jsontag) = ",inline"];

     api.ObjectMeta                ObjectMeta  = 2 [(gogoproto.embed) = true,
                                                    (gogoproto.nullable) = false,
                                                    (gogoproto.jsontag) = "meta,omitempty"];

     monitoring.EventPolicySpec    Spec        = 3 [(gogoproto.nullable) = false,
                                                    (gogoproto.jsontag) = "spec,omitempty"];

     monitoring.EventPolicyStatus  Status      = 4 [(gogoproto.nullable) = false,
                                                    (gogoproto.jsontag) = "status,omitempty"];
 }

 // network watch event
 message EventPolicyEvent {
     api.EventType  EventType  = 1 [(gogoproto.jsontag) = "event-type,omitempty"];

     EventPolicy    Policy     = 2 [(gogoproto.jsontag) = "policy,omitempty"];
 }