// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: matchrule.proto

/*
	Package tsproto is a generated protocol buffer package.

	Trouble shooting: Mirroring APIs

	It is generated from these files:
		matchrule.proto

	It has these top-level messages:
		MatchSelector
		AppProtoSelector
		MatchRule
*/
package tsproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Traffic Selection Rules
// Traffic can be matched using EP names or IPv4/v6 addresses/ranges/prefixes or MAC addresses
type MatchSelector struct {
	// only one of the following match selector can be specified to select a packet from mirroring
	Endpoints []string `protobuf:"bytes,1,rep,name=Endpoints" json:"endpoints,omitempty"`
	// Each IPAddress can be single address(10.1.1.1)/range(10.1.1.10-20)/subnet(10.1.0.0/16)
	IPAddresses []string `protobuf:"bytes,2,rep,name=IPAddresses" json:"ip-addresses,omitempty"`
	// List of MacAddresses - "aabb.ccdd.eeff", "0001.0203.0405"
	MACAddresses []string `protobuf:"bytes,3,rep,name=MACAddresses" json:"mac-addresses,omitempty"`
}

func (m *MatchSelector) Reset()                    { *m = MatchSelector{} }
func (m *MatchSelector) String() string            { return proto.CompactTextString(m) }
func (*MatchSelector) ProtoMessage()               {}
func (*MatchSelector) Descriptor() ([]byte, []int) { return fileDescriptorMatchrule, []int{0} }

func (m *MatchSelector) GetEndpoints() []string {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *MatchSelector) GetIPAddresses() []string {
	if m != nil {
		return m.IPAddresses
	}
	return nil
}

func (m *MatchSelector) GetMACAddresses() []string {
	if m != nil {
		return m.MACAddresses
	}
	return nil
}

// Application/protocol selector
type AppProtoSelector struct {
	// ports - Includes protocol name and port Eg ["tcp/1234", "udp"]
	Ports []string `protobuf:"bytes,1,rep,name=Ports" json:"ports,omitempty"`
	// Apps - E.g. ["Redis"]
	Apps []string `protobuf:"bytes,2,rep,name=Apps" json:"applications,omitempty"`
}

func (m *AppProtoSelector) Reset()                    { *m = AppProtoSelector{} }
func (m *AppProtoSelector) String() string            { return proto.CompactTextString(m) }
func (*AppProtoSelector) ProtoMessage()               {}
func (*AppProtoSelector) Descriptor() ([]byte, []int) { return fileDescriptorMatchrule, []int{1} }

func (m *AppProtoSelector) GetPorts() []string {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *AppProtoSelector) GetApps() []string {
	if m != nil {
		return m.Apps
	}
	return nil
}

// MatchRule : This is used to select packets that need to be monitored (mirrored)
type MatchRule struct {
	// Either Src or Dst or both must be specified, both cannot be *
	// Src = * when not specified
	// When Src is specified and resides on Pesnsando SmartNIC, matching pkts to/from src will be mirrored
	Src *MatchSelector `protobuf:"bytes,1,opt,name=Src" json:"source,omitempty"`
	// Dst = * when not specified
	// When Dst is specified and resides on Pesnsando SmartNIC, matching pkts to/from dst will be mirrored
	Dst *MatchSelector `protobuf:"bytes,2,opt,name=Dst" json:"destination,omitempty"`
	// App = * when not specified
	AppProtoSel *AppProtoSelector `protobuf:"bytes,3,opt,name=AppProtoSel" json:"app-protocol-selectors,omitempty"`
}

func (m *MatchRule) Reset()                    { *m = MatchRule{} }
func (m *MatchRule) String() string            { return proto.CompactTextString(m) }
func (*MatchRule) ProtoMessage()               {}
func (*MatchRule) Descriptor() ([]byte, []int) { return fileDescriptorMatchrule, []int{2} }

func (m *MatchRule) GetSrc() *MatchSelector {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *MatchRule) GetDst() *MatchSelector {
	if m != nil {
		return m.Dst
	}
	return nil
}

func (m *MatchRule) GetAppProtoSel() *AppProtoSelector {
	if m != nil {
		return m.AppProtoSel
	}
	return nil
}

func init() {
	proto.RegisterType((*MatchSelector)(nil), "tsproto.MatchSelector")
	proto.RegisterType((*AppProtoSelector)(nil), "tsproto.AppProtoSelector")
	proto.RegisterType((*MatchRule)(nil), "tsproto.MatchRule")
}
func (m *MatchSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, s := range m.Endpoints {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.IPAddresses) > 0 {
		for _, s := range m.IPAddresses {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.MACAddresses) > 0 {
		for _, s := range m.MACAddresses {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *AppProtoSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppProtoSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ports) > 0 {
		for _, s := range m.Ports {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Apps) > 0 {
		for _, s := range m.Apps {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *MatchRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Src != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMatchrule(dAtA, i, uint64(m.Src.Size()))
		n1, err := m.Src.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Dst != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMatchrule(dAtA, i, uint64(m.Dst.Size()))
		n2, err := m.Dst.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.AppProtoSel != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMatchrule(dAtA, i, uint64(m.AppProtoSel.Size()))
		n3, err := m.AppProtoSel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintMatchrule(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MatchSelector) Size() (n int) {
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, s := range m.Endpoints {
			l = len(s)
			n += 1 + l + sovMatchrule(uint64(l))
		}
	}
	if len(m.IPAddresses) > 0 {
		for _, s := range m.IPAddresses {
			l = len(s)
			n += 1 + l + sovMatchrule(uint64(l))
		}
	}
	if len(m.MACAddresses) > 0 {
		for _, s := range m.MACAddresses {
			l = len(s)
			n += 1 + l + sovMatchrule(uint64(l))
		}
	}
	return n
}

func (m *AppProtoSelector) Size() (n int) {
	var l int
	_ = l
	if len(m.Ports) > 0 {
		for _, s := range m.Ports {
			l = len(s)
			n += 1 + l + sovMatchrule(uint64(l))
		}
	}
	if len(m.Apps) > 0 {
		for _, s := range m.Apps {
			l = len(s)
			n += 1 + l + sovMatchrule(uint64(l))
		}
	}
	return n
}

func (m *MatchRule) Size() (n int) {
	var l int
	_ = l
	if m.Src != nil {
		l = m.Src.Size()
		n += 1 + l + sovMatchrule(uint64(l))
	}
	if m.Dst != nil {
		l = m.Dst.Size()
		n += 1 + l + sovMatchrule(uint64(l))
	}
	if m.AppProtoSel != nil {
		l = m.AppProtoSel.Size()
		n += 1 + l + sovMatchrule(uint64(l))
	}
	return n
}

func sovMatchrule(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMatchrule(x uint64) (n int) {
	return sovMatchrule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MatchSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatchrule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchrule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatchrule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchrule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatchrule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddresses = append(m.IPAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchrule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatchrule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MACAddresses = append(m.MACAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatchrule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMatchrule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppProtoSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatchrule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppProtoSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppProtoSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchrule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatchrule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchrule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatchrule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apps = append(m.Apps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatchrule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMatchrule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatchrule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchrule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatchrule
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Src == nil {
				m.Src = &MatchSelector{}
			}
			if err := m.Src.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchrule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatchrule
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dst == nil {
				m.Dst = &MatchSelector{}
			}
			if err := m.Dst.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppProtoSel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchrule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatchrule
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppProtoSel == nil {
				m.AppProtoSel = &AppProtoSelector{}
			}
			if err := m.AppProtoSel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatchrule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMatchrule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMatchrule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMatchrule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatchrule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatchrule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMatchrule
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMatchrule
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMatchrule(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMatchrule = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMatchrule   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("matchrule.proto", fileDescriptorMatchrule) }

var fileDescriptorMatchrule = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4f, 0x8e, 0xd3, 0x30,
	0x18, 0xc5, 0xf1, 0x84, 0x3f, 0xaa, 0x0b, 0x9a, 0xca, 0x03, 0x33, 0x69, 0x17, 0x4d, 0x55, 0xb1,
	0x68, 0x25, 0x1a, 0x0b, 0x10, 0x3b, 0x84, 0xd4, 0xce, 0x74, 0xc1, 0xa2, 0x22, 0x9a, 0x11, 0x07,
	0x70, 0x1d, 0x93, 0xb1, 0x94, 0xd8, 0x96, 0xed, 0x80, 0xb8, 0x00, 0x67, 0xe0, 0x0c, 0x9c, 0x84,
	0x25, 0x7b, 0xa4, 0x08, 0x95, 0x5d, 0xb6, 0x5c, 0x00, 0xc5, 0x99, 0xe9, 0x38, 0x08, 0xcd, 0xce,
	0xfe, 0xbe, 0xf7, 0x7b, 0xf2, 0x7b, 0x86, 0x87, 0x05, 0xb1, 0xf4, 0x52, 0x97, 0x39, 0x8b, 0x95,
	0x96, 0x56, 0xa2, 0x07, 0xd6, 0xb8, 0xc3, 0x68, 0x91, 0x71, 0x7b, 0x59, 0x6e, 0x63, 0x2a, 0x0b,
	0x9c, 0xc9, 0x4c, 0x62, 0x37, 0xde, 0x96, 0x1f, 0xdc, 0xcd, 0x5d, 0xdc, 0xa9, 0xe5, 0x46, 0x6b,
	0x4f, 0xae, 0x98, 0x30, 0x44, 0xa4, 0x12, 0x9b, 0x4f, 0xf8, 0x23, 0x13, 0x9c, 0x32, 0x5c, 0x5a,
	0x9e, 0x1b, 0x4c, 0x14, 0xcf, 0x98, 0xc0, 0x44, 0x08, 0x69, 0x89, 0xe5, 0x52, 0x18, 0xcc, 0x05,
	0xcd, 0xcb, 0x94, 0x99, 0xd6, 0x66, 0xfa, 0x13, 0xc0, 0x47, 0x9b, 0xe6, 0x49, 0x17, 0x2c, 0x67,
	0xd4, 0x4a, 0x8d, 0x5e, 0xc1, 0xde, 0x5a, 0xa4, 0x4a, 0x72, 0x61, 0x4d, 0x08, 0x26, 0xc1, 0xac,
	0xb7, 0x3a, 0xa9, 0xab, 0xe8, 0x88, 0x5d, 0x0f, 0x9f, 0xc9, 0x82, 0x5b, 0x56, 0x28, 0xfb, 0xf9,
	0xfc, 0x46, 0x89, 0x5e, 0xc3, 0xfe, 0xdb, 0x64, 0x99, 0xa6, 0x9a, 0x19, 0xc3, 0x4c, 0x78, 0xe0,
	0xc0, 0x51, 0x5d, 0x45, 0xc7, 0x5c, 0x2d, 0xc8, 0xf5, 0xdc, 0x63, 0x7d, 0x39, 0x7a, 0x0f, 0x1f,
	0x6e, 0x96, 0xa7, 0x37, 0x78, 0xe0, 0xf0, 0xe7, 0xdf, 0xbe, 0x0c, 0xd1, 0xba, 0x51, 0xbf, 0xd3,
	0xb3, 0x0d, 0xa1, 0xcd, 0x7e, 0x36, 0x9f, 0xd7, 0x55, 0x74, 0x52, 0x10, 0xfa, 0x5f, 0xd7, 0x8e,
	0xcd, 0xb4, 0x80, 0x83, 0xa5, 0x52, 0x49, 0x93, 0x74, 0x9f, 0x6f, 0x0e, 0xef, 0x25, 0x52, 0xef,
	0xb3, 0x1d, 0xd5, 0x55, 0x74, 0xa8, 0x9a, 0x81, 0xe7, 0xd2, 0x2a, 0x50, 0x0c, 0xef, 0x2e, 0x95,
	0xea, 0x84, 0x21, 0x4a, 0xe5, 0x9c, 0xb6, 0x5d, 0x7a, 0x80, 0xd3, 0x4d, 0xff, 0x00, 0xd8, 0x73,
	0x65, 0x9e, 0x97, 0x39, 0x43, 0x6f, 0x60, 0x70, 0xa1, 0x69, 0x08, 0x26, 0x60, 0xd6, 0x7f, 0x71,
	0x1c, 0x5f, 0xfd, 0x73, 0xdc, 0x69, 0x7b, 0xf5, 0xb8, 0xae, 0xa2, 0x81, 0x91, 0xa5, 0xa6, 0xcc,
	0xb3, 0x6b, 0x40, 0x74, 0x0a, 0x83, 0x33, 0x63, 0xc3, 0x83, 0x5b, 0xf9, 0x61, 0x5d, 0x45, 0x4f,
	0x52, 0x66, 0x2c, 0x17, 0xee, 0x51, 0xbe, 0xc9, 0x99, 0xb1, 0x88, 0xc0, 0xbe, 0xd7, 0x40, 0x18,
	0x38, 0xb3, 0xe1, 0xde, 0xec, 0xdf, 0x76, 0x56, 0x4f, 0xeb, 0x2a, 0x9a, 0x10, 0xa5, 0x16, 0x6e,
	0x4f, 0x65, 0xbe, 0x30, 0x57, 0xab, 0xce, 0xdf, 0x79, 0xdc, 0x6a, 0xf0, 0x7d, 0x37, 0x06, 0x3f,
	0x76, 0x63, 0xf0, 0x6b, 0x37, 0x06, 0x5f, 0x7f, 0x8f, 0xef, 0x24, 0x60, 0x7b, 0xdf, 0xe1, 0x2f,
	0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x0f, 0xb3, 0xb8, 0xef, 0x02, 0x00, 0x00,
}
