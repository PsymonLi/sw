// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: techsupport.proto

/*
	Package tsproto is a generated protocol buffer package.

	It is generated from these files:
		techsupport.proto

	It has these top-level messages:
		DestinationSpec
		TechSupportRequestSpec
		TechSupportRequestStatus
		TechSupportRequest
		TechSupportRequestEvent
		WatchTechSupportRequestsParameters
		TechSupportRequestEventList
		UpdateTechSupportResultParameters
		UpdateTechSupportResultResponse
*/
package tsproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import labels "github.com/pensando/sw/api/labels"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DestinationSpec_Protocol int32

const (
	DestinationSpec_Local  DestinationSpec_Protocol = 0
	DestinationSpec_SCP    DestinationSpec_Protocol = 1
	DestinationSpec_Venice DestinationSpec_Protocol = 2
	DestinationSpec_HTTPS  DestinationSpec_Protocol = 3
)

var DestinationSpec_Protocol_name = map[int32]string{
	0: "Local",
	1: "SCP",
	2: "Venice",
	3: "HTTPS",
}
var DestinationSpec_Protocol_value = map[string]int32{
	"Local":  0,
	"SCP":    1,
	"Venice": 2,
	"HTTPS":  3,
}

func (x DestinationSpec_Protocol) String() string {
	return proto.EnumName(DestinationSpec_Protocol_name, int32(x))
}
func (DestinationSpec_Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTechsupport, []int{0, 0}
}

type TechSupportRequestStatus_ActionStatus int32

const (
	TechSupportRequestStatus_Queued     TechSupportRequestStatus_ActionStatus = 0
	TechSupportRequestStatus_Scheduled  TechSupportRequestStatus_ActionStatus = 1
	TechSupportRequestStatus_InProgress TechSupportRequestStatus_ActionStatus = 2
	TechSupportRequestStatus_Failed     TechSupportRequestStatus_ActionStatus = 3
	TechSupportRequestStatus_Completed  TechSupportRequestStatus_ActionStatus = 4
)

var TechSupportRequestStatus_ActionStatus_name = map[int32]string{
	0: "Queued",
	1: "Scheduled",
	2: "InProgress",
	3: "Failed",
	4: "Completed",
}
var TechSupportRequestStatus_ActionStatus_value = map[string]int32{
	"Queued":     0,
	"Scheduled":  1,
	"InProgress": 2,
	"Failed":     3,
	"Completed":  4,
}

func (x TechSupportRequestStatus_ActionStatus) String() string {
	return proto.EnumName(TechSupportRequestStatus_ActionStatus_name, int32(x))
}
func (TechSupportRequestStatus_ActionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTechsupport, []int{2, 0}
}

type DestinationSpec struct {
	Proto       DestinationSpec_Protocol `protobuf:"varint,1,opt,name=Proto,proto3,enum=tsproto.DestinationSpec_Protocol" json:"proto,omitempty"`
	Path        string                   `protobuf:"bytes,2,opt,name=Path,proto3" json:"path,omitempty"`
	Destination string                   `protobuf:"bytes,3,opt,name=Destination,proto3" json:"destination,omitempty"`
}

func (m *DestinationSpec) Reset()                    { *m = DestinationSpec{} }
func (m *DestinationSpec) String() string            { return proto.CompactTextString(m) }
func (*DestinationSpec) ProtoMessage()               {}
func (*DestinationSpec) Descriptor() ([]byte, []int) { return fileDescriptorTechsupport, []int{0} }

func (m *DestinationSpec) GetProto() DestinationSpec_Protocol {
	if m != nil {
		return m.Proto
	}
	return DestinationSpec_Local
}

func (m *DestinationSpec) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DestinationSpec) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

type TechSupportRequestSpec struct {
	InstanceID   string             `protobuf:"bytes,1,opt,name=InstanceID,proto3" json:"instance-id,omitempty"`
	Labels       *labels.Selector   `protobuf:"bytes,2,opt,name=Labels" json:"labels,omitempty"`
	Destinations []*DestinationSpec `protobuf:"bytes,3,rep,name=Destinations" json:"destinations,omitempty"`
	Verbosity    int32              `protobuf:"varint,4,opt,name=Verbosity,proto3" json:"verbosity,omitempty"`
}

func (m *TechSupportRequestSpec) Reset()         { *m = TechSupportRequestSpec{} }
func (m *TechSupportRequestSpec) String() string { return proto.CompactTextString(m) }
func (*TechSupportRequestSpec) ProtoMessage()    {}
func (*TechSupportRequestSpec) Descriptor() ([]byte, []int) {
	return fileDescriptorTechsupport, []int{1}
}

func (m *TechSupportRequestSpec) GetInstanceID() string {
	if m != nil {
		return m.InstanceID
	}
	return ""
}

func (m *TechSupportRequestSpec) GetLabels() *labels.Selector {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *TechSupportRequestSpec) GetDestinations() []*DestinationSpec {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *TechSupportRequestSpec) GetVerbosity() int32 {
	if m != nil {
		return m.Verbosity
	}
	return 0
}

type TechSupportRequestStatus struct {
	Status    TechSupportRequestStatus_ActionStatus `protobuf:"varint,1,opt,name=Status,proto3,enum=tsproto.TechSupportRequestStatus_ActionStatus" json:"status,omitempty"`
	StartTime *api.Timestamp                        `protobuf:"bytes,2,opt,name=StartTime" json:"start-time,omitempty"`
	EndTime   *api.Timestamp                        `protobuf:"bytes,3,opt,name=EndTime" json:"end-time,omitempty"`
	Reason    string                                `protobuf:"bytes,4,opt,name=Reason,proto3" json:"reason,omitempty"`
	URI       string                                `protobuf:"bytes,5,opt,name=URI,proto3" json:"uri,omitempty"`
}

func (m *TechSupportRequestStatus) Reset()         { *m = TechSupportRequestStatus{} }
func (m *TechSupportRequestStatus) String() string { return proto.CompactTextString(m) }
func (*TechSupportRequestStatus) ProtoMessage()    {}
func (*TechSupportRequestStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorTechsupport, []int{2}
}

func (m *TechSupportRequestStatus) GetStatus() TechSupportRequestStatus_ActionStatus {
	if m != nil {
		return m.Status
	}
	return TechSupportRequestStatus_Queued
}

func (m *TechSupportRequestStatus) GetStartTime() *api.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *TechSupportRequestStatus) GetEndTime() *api.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *TechSupportRequestStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *TechSupportRequestStatus) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

type TechSupportRequest struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           TechSupportRequestSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         TechSupportRequestStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *TechSupportRequest) Reset()                    { *m = TechSupportRequest{} }
func (m *TechSupportRequest) String() string            { return proto.CompactTextString(m) }
func (*TechSupportRequest) ProtoMessage()               {}
func (*TechSupportRequest) Descriptor() ([]byte, []int) { return fileDescriptorTechsupport, []int{3} }

func (m *TechSupportRequest) GetSpec() TechSupportRequestSpec {
	if m != nil {
		return m.Spec
	}
	return TechSupportRequestSpec{}
}

func (m *TechSupportRequest) GetStatus() TechSupportRequestStatus {
	if m != nil {
		return m.Status
	}
	return TechSupportRequestStatus{}
}

type TechSupportRequestEvent struct {
	EventType api.EventType       `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	Request   *TechSupportRequest `protobuf:"bytes,2,opt,name=Request" json:"request,omitempty"`
}

func (m *TechSupportRequestEvent) Reset()         { *m = TechSupportRequestEvent{} }
func (m *TechSupportRequestEvent) String() string { return proto.CompactTextString(m) }
func (*TechSupportRequestEvent) ProtoMessage()    {}
func (*TechSupportRequestEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorTechsupport, []int{4}
}

func (m *TechSupportRequestEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *TechSupportRequestEvent) GetRequest() *TechSupportRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type WatchTechSupportRequestsParameters struct {
	NodeName string                `protobuf:"bytes,1,opt,name=NodeName,proto3" json:"node-name,omitempty"`
	NodeKind string                `protobuf:"bytes,2,opt,name=NodeKind,proto3" json:"node-kind,omitempty"`
	Options  *api.ListWatchOptions `protobuf:"bytes,3,opt,name=Options" json:"options,omitempty"`
}

func (m *WatchTechSupportRequestsParameters) Reset()         { *m = WatchTechSupportRequestsParameters{} }
func (m *WatchTechSupportRequestsParameters) String() string { return proto.CompactTextString(m) }
func (*WatchTechSupportRequestsParameters) ProtoMessage()    {}
func (*WatchTechSupportRequestsParameters) Descriptor() ([]byte, []int) {
	return fileDescriptorTechsupport, []int{5}
}

func (m *WatchTechSupportRequestsParameters) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *WatchTechSupportRequestsParameters) GetNodeKind() string {
	if m != nil {
		return m.NodeKind
	}
	return ""
}

func (m *WatchTechSupportRequestsParameters) GetOptions() *api.ListWatchOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type TechSupportRequestEventList struct {
	Events []*TechSupportRequestEvent `protobuf:"bytes,1,rep,name=Events" json:"events,omitempty"`
}

func (m *TechSupportRequestEventList) Reset()         { *m = TechSupportRequestEventList{} }
func (m *TechSupportRequestEventList) String() string { return proto.CompactTextString(m) }
func (*TechSupportRequestEventList) ProtoMessage()    {}
func (*TechSupportRequestEventList) Descriptor() ([]byte, []int) {
	return fileDescriptorTechsupport, []int{6}
}

func (m *TechSupportRequestEventList) GetEvents() []*TechSupportRequestEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type UpdateTechSupportResultParameters struct {
	NodeName string              `protobuf:"bytes,1,opt,name=NodeName,proto3" json:"node-name,omitempty"`
	NodeKind string              `protobuf:"bytes,2,opt,name=NodeKind,proto3" json:"node-kind,omitempty"`
	Request  *TechSupportRequest `protobuf:"bytes,3,opt,name=Request" json:"request,omitempty"`
}

func (m *UpdateTechSupportResultParameters) Reset()         { *m = UpdateTechSupportResultParameters{} }
func (m *UpdateTechSupportResultParameters) String() string { return proto.CompactTextString(m) }
func (*UpdateTechSupportResultParameters) ProtoMessage()    {}
func (*UpdateTechSupportResultParameters) Descriptor() ([]byte, []int) {
	return fileDescriptorTechsupport, []int{7}
}

func (m *UpdateTechSupportResultParameters) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *UpdateTechSupportResultParameters) GetNodeKind() string {
	if m != nil {
		return m.NodeKind
	}
	return ""
}

func (m *UpdateTechSupportResultParameters) GetRequest() *TechSupportRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type UpdateTechSupportResultResponse struct {
	Status string `protobuf:"bytes,1,opt,name=Status,proto3" json:"status,omitempty"`
}

func (m *UpdateTechSupportResultResponse) Reset()         { *m = UpdateTechSupportResultResponse{} }
func (m *UpdateTechSupportResultResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateTechSupportResultResponse) ProtoMessage()    {}
func (*UpdateTechSupportResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTechsupport, []int{8}
}

func (m *UpdateTechSupportResultResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*DestinationSpec)(nil), "tsproto.DestinationSpec")
	proto.RegisterType((*TechSupportRequestSpec)(nil), "tsproto.TechSupportRequestSpec")
	proto.RegisterType((*TechSupportRequestStatus)(nil), "tsproto.TechSupportRequestStatus")
	proto.RegisterType((*TechSupportRequest)(nil), "tsproto.TechSupportRequest")
	proto.RegisterType((*TechSupportRequestEvent)(nil), "tsproto.TechSupportRequestEvent")
	proto.RegisterType((*WatchTechSupportRequestsParameters)(nil), "tsproto.WatchTechSupportRequestsParameters")
	proto.RegisterType((*TechSupportRequestEventList)(nil), "tsproto.TechSupportRequestEventList")
	proto.RegisterType((*UpdateTechSupportResultParameters)(nil), "tsproto.UpdateTechSupportResultParameters")
	proto.RegisterType((*UpdateTechSupportResultResponse)(nil), "tsproto.UpdateTechSupportResultResponse")
	proto.RegisterEnum("tsproto.DestinationSpec_Protocol", DestinationSpec_Protocol_name, DestinationSpec_Protocol_value)
	proto.RegisterEnum("tsproto.TechSupportRequestStatus_ActionStatus", TechSupportRequestStatus_ActionStatus_name, TechSupportRequestStatus_ActionStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TechSupportApi service

type TechSupportApiClient interface {
	WatchTechSupportRequests(ctx context.Context, in *WatchTechSupportRequestsParameters, opts ...grpc.CallOption) (TechSupportApi_WatchTechSupportRequestsClient, error)
	UpdateTechSupportResult(ctx context.Context, in *UpdateTechSupportResultParameters, opts ...grpc.CallOption) (*UpdateTechSupportResultResponse, error)
}

type techSupportApiClient struct {
	cc *grpc.ClientConn
}

func NewTechSupportApiClient(cc *grpc.ClientConn) TechSupportApiClient {
	return &techSupportApiClient{cc}
}

func (c *techSupportApiClient) WatchTechSupportRequests(ctx context.Context, in *WatchTechSupportRequestsParameters, opts ...grpc.CallOption) (TechSupportApi_WatchTechSupportRequestsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TechSupportApi_serviceDesc.Streams[0], c.cc, "/tsproto.TechSupportApi/WatchTechSupportRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &techSupportApiWatchTechSupportRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TechSupportApi_WatchTechSupportRequestsClient interface {
	Recv() (*TechSupportRequestEventList, error)
	grpc.ClientStream
}

type techSupportApiWatchTechSupportRequestsClient struct {
	grpc.ClientStream
}

func (x *techSupportApiWatchTechSupportRequestsClient) Recv() (*TechSupportRequestEventList, error) {
	m := new(TechSupportRequestEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *techSupportApiClient) UpdateTechSupportResult(ctx context.Context, in *UpdateTechSupportResultParameters, opts ...grpc.CallOption) (*UpdateTechSupportResultResponse, error) {
	out := new(UpdateTechSupportResultResponse)
	err := grpc.Invoke(ctx, "/tsproto.TechSupportApi/UpdateTechSupportResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TechSupportApi service

type TechSupportApiServer interface {
	WatchTechSupportRequests(*WatchTechSupportRequestsParameters, TechSupportApi_WatchTechSupportRequestsServer) error
	UpdateTechSupportResult(context.Context, *UpdateTechSupportResultParameters) (*UpdateTechSupportResultResponse, error)
}

func RegisterTechSupportApiServer(s *grpc.Server, srv TechSupportApiServer) {
	s.RegisterService(&_TechSupportApi_serviceDesc, srv)
}

func _TechSupportApi_WatchTechSupportRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchTechSupportRequestsParameters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TechSupportApiServer).WatchTechSupportRequests(m, &techSupportApiWatchTechSupportRequestsServer{stream})
}

type TechSupportApi_WatchTechSupportRequestsServer interface {
	Send(*TechSupportRequestEventList) error
	grpc.ServerStream
}

type techSupportApiWatchTechSupportRequestsServer struct {
	grpc.ServerStream
}

func (x *techSupportApiWatchTechSupportRequestsServer) Send(m *TechSupportRequestEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _TechSupportApi_UpdateTechSupportResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTechSupportResultParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechSupportApiServer).UpdateTechSupportResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsproto.TechSupportApi/UpdateTechSupportResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechSupportApiServer).UpdateTechSupportResult(ctx, req.(*UpdateTechSupportResultParameters))
	}
	return interceptor(ctx, in, info, handler)
}

var _TechSupportApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tsproto.TechSupportApi",
	HandlerType: (*TechSupportApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateTechSupportResult",
			Handler:    _TechSupportApi_UpdateTechSupportResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTechSupportRequests",
			Handler:       _TechSupportApi_WatchTechSupportRequests_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "techsupport.proto",
}

func (m *DestinationSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DestinationSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Proto != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(m.Proto))
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Destination) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(len(m.Destination)))
		i += copy(dAtA[i:], m.Destination)
	}
	return i, nil
}

func (m *TechSupportRequestSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechSupportRequestSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InstanceID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(len(m.InstanceID)))
		i += copy(dAtA[i:], m.InstanceID)
	}
	if m.Labels != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(m.Labels.Size()))
		n1, err := m.Labels.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Destinations) > 0 {
		for _, msg := range m.Destinations {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTechsupport(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Verbosity != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(m.Verbosity))
	}
	return i, nil
}

func (m *TechSupportRequestStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechSupportRequestStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(m.Status))
	}
	if m.StartTime != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(m.StartTime.Size()))
		n2, err := m.StartTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.EndTime != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(m.EndTime.Size()))
		n3, err := m.EndTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if len(m.URI) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(len(m.URI)))
		i += copy(dAtA[i:], m.URI)
	}
	return i, nil
}

func (m *TechSupportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechSupportRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTechsupport(dAtA, i, uint64(m.TypeMeta.Size()))
	n4, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x12
	i++
	i = encodeVarintTechsupport(dAtA, i, uint64(m.ObjectMeta.Size()))
	n5, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTechsupport(dAtA, i, uint64(m.Spec.Size()))
	n6, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x22
	i++
	i = encodeVarintTechsupport(dAtA, i, uint64(m.Status.Size()))
	n7, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func (m *TechSupportRequestEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechSupportRequestEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(m.EventType))
	}
	if m.Request != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(m.Request.Size()))
		n8, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *WatchTechSupportRequestsParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchTechSupportRequestsParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	if len(m.NodeKind) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(len(m.NodeKind)))
		i += copy(dAtA[i:], m.NodeKind)
	}
	if m.Options != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(m.Options.Size()))
		n9, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *TechSupportRequestEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechSupportRequestEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTechsupport(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateTechSupportResultParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTechSupportResultParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	if len(m.NodeKind) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(len(m.NodeKind)))
		i += copy(dAtA[i:], m.NodeKind)
	}
	if m.Request != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(m.Request.Size()))
		n10, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *UpdateTechSupportResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTechSupportResultResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	return i, nil
}

func encodeVarintTechsupport(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DestinationSpec) Size() (n int) {
	var l int
	_ = l
	if m.Proto != 0 {
		n += 1 + sovTechsupport(uint64(m.Proto))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovTechsupport(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovTechsupport(uint64(l))
	}
	return n
}

func (m *TechSupportRequestSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.InstanceID)
	if l > 0 {
		n += 1 + l + sovTechsupport(uint64(l))
	}
	if m.Labels != nil {
		l = m.Labels.Size()
		n += 1 + l + sovTechsupport(uint64(l))
	}
	if len(m.Destinations) > 0 {
		for _, e := range m.Destinations {
			l = e.Size()
			n += 1 + l + sovTechsupport(uint64(l))
		}
	}
	if m.Verbosity != 0 {
		n += 1 + sovTechsupport(uint64(m.Verbosity))
	}
	return n
}

func (m *TechSupportRequestStatus) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTechsupport(uint64(m.Status))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovTechsupport(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovTechsupport(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTechsupport(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovTechsupport(uint64(l))
	}
	return n
}

func (m *TechSupportRequest) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTechsupport(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTechsupport(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTechsupport(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTechsupport(uint64(l))
	return n
}

func (m *TechSupportRequestEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovTechsupport(uint64(m.EventType))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTechsupport(uint64(l))
	}
	return n
}

func (m *WatchTechSupportRequestsParameters) Size() (n int) {
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovTechsupport(uint64(l))
	}
	l = len(m.NodeKind)
	if l > 0 {
		n += 1 + l + sovTechsupport(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovTechsupport(uint64(l))
	}
	return n
}

func (m *TechSupportRequestEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovTechsupport(uint64(l))
		}
	}
	return n
}

func (m *UpdateTechSupportResultParameters) Size() (n int) {
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovTechsupport(uint64(l))
	}
	l = len(m.NodeKind)
	if l > 0 {
		n += 1 + l + sovTechsupport(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTechsupport(uint64(l))
	}
	return n
}

func (m *UpdateTechSupportResultResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTechsupport(uint64(l))
	}
	return n
}

func sovTechsupport(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTechsupport(x uint64) (n int) {
	return sovTechsupport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DestinationSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTechsupport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DestinationSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DestinationSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			m.Proto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proto |= (DestinationSpec_Protocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTechsupport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTechsupport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechSupportRequestSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTechsupport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechSupportRequestSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechSupportRequestSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = &labels.Selector{}
			}
			if err := m.Labels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destinations = append(m.Destinations, &DestinationSpec{})
			if err := m.Destinations[len(m.Destinations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verbosity", wireType)
			}
			m.Verbosity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Verbosity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTechsupport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTechsupport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechSupportRequestStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTechsupport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechSupportRequestStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechSupportRequestStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (TechSupportRequestStatus_ActionStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &api.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &api.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTechsupport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTechsupport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechSupportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTechsupport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechSupportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechSupportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTechsupport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTechsupport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechSupportRequestEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTechsupport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechSupportRequestEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechSupportRequestEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &TechSupportRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTechsupport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTechsupport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchTechSupportRequestsParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTechsupport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchTechSupportRequestsParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchTechSupportRequestsParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeKind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &api.ListWatchOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTechsupport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTechsupport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechSupportRequestEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTechsupport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechSupportRequestEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechSupportRequestEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &TechSupportRequestEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTechsupport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTechsupport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTechSupportResultParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTechsupport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTechSupportResultParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTechSupportResultParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeKind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &TechSupportRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTechsupport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTechsupport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTechSupportResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTechsupport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTechSupportResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTechSupportResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTechsupport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTechsupport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTechsupport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTechsupport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTechsupport
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTechsupport
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTechsupport(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTechsupport = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTechsupport   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("techsupport.proto", fileDescriptorTechsupport) }

var fileDescriptorTechsupport = []byte{
	// 1113 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x17, 0x15, 0x25, 0x59, 0x8a, 0xc6, 0x89, 0x2c, 0x8f, 0x63, 0x5b, 0x51, 0x3e, 0x98, 0x36, 0xbf,
	0xb4, 0x30, 0x5a, 0x9b, 0x32, 0x1c, 0x64, 0x11, 0x14, 0x28, 0x1a, 0x25, 0x36, 0x6a, 0xc4, 0xb5,
	0x55, 0x49, 0x49, 0xb3, 0xc8, 0x66, 0x44, 0xde, 0x4a, 0x6c, 0xa9, 0x19, 0x9a, 0x33, 0x74, 0x61,
	0x04, 0x59, 0xf5, 0x25, 0xba, 0x6f, 0x77, 0x5d, 0x14, 0xe8, 0x53, 0x64, 0x99, 0x45, 0xd1, 0x4d,
	0x01, 0xa2, 0x70, 0x77, 0x7c, 0x85, 0x6e, 0x8a, 0x19, 0x52, 0xf2, 0xf8, 0x47, 0xf6, 0xa2, 0x8b,
	0xee, 0xe6, 0xe7, 0x9c, 0xa3, 0x7b, 0xcf, 0x1c, 0x5e, 0x08, 0xcd, 0x0b, 0x70, 0x86, 0x3c, 0x0a,
	0x02, 0x16, 0x0a, 0x3b, 0x08, 0x99, 0x60, 0xb8, 0x2c, 0xb8, 0x5a, 0x34, 0xfe, 0x37, 0x60, 0x6c,
	0xe0, 0x43, 0x93, 0x04, 0x5e, 0x93, 0x50, 0xca, 0x04, 0x11, 0x1e, 0xa3, 0x3c, 0x85, 0x35, 0x76,
	0x06, 0x9e, 0x18, 0x46, 0x7d, 0xdb, 0x61, 0xa3, 0x66, 0x00, 0x94, 0x13, 0xea, 0xb2, 0x26, 0xff,
	0xae, 0x79, 0x0c, 0xd4, 0x73, 0xa0, 0x19, 0x09, 0xcf, 0xe7, 0x92, 0x3a, 0x00, 0xaa, 0xb3, 0x9b,
	0x1e, 0x75, 0xfc, 0xc8, 0x85, 0xb1, 0xcc, 0xa6, 0x26, 0x33, 0x60, 0x03, 0xd6, 0x54, 0xc7, 0xfd,
	0xe8, 0x6b, 0xb5, 0x53, 0x1b, 0xb5, 0xca, 0xe0, 0x1f, 0x4c, 0xf9, 0x55, 0x59, 0xe3, 0x08, 0x04,
	0xc9, 0x60, 0x5b, 0xd7, 0xc0, 0x7c, 0xd2, 0x07, 0x9f, 0x37, 0x39, 0xf8, 0xe0, 0x08, 0x16, 0xa6,
	0x0c, 0xeb, 0x6f, 0x03, 0xcd, 0x3d, 0x03, 0x2e, 0x3c, 0xaa, 0xea, 0xec, 0x06, 0xe0, 0xe0, 0x7d,
	0x34, 0xd3, 0x96, 0x97, 0x75, 0x63, 0xd5, 0x58, 0xaf, 0x6e, 0xaf, 0xd9, 0x99, 0x33, 0xf6, 0x05,
	0xa0, 0xad, 0x50, 0x0e, 0xf3, 0x5b, 0x0b, 0x49, 0x6c, 0xce, 0x29, 0xcc, 0x06, 0x1b, 0x79, 0x02,
	0x46, 0x81, 0x38, 0xe9, 0xa4, 0x22, 0xf8, 0x43, 0x54, 0x6c, 0x13, 0x31, 0xac, 0xe7, 0x57, 0x8d,
	0xf5, 0x4a, 0x0b, 0x27, 0xb1, 0x59, 0x0d, 0x88, 0x18, 0x6a, 0x40, 0x75, 0x8f, 0x3f, 0x41, 0xb3,
	0x9a, 0x7e, 0xbd, 0xa0, 0xe0, 0xf7, 0x92, 0xd8, 0x5c, 0x74, 0xcf, 0x8e, 0x35, 0x96, 0x8e, 0xb6,
	0x1e, 0xa1, 0x5b, 0xe3, 0x62, 0x70, 0x05, 0xcd, 0xec, 0x33, 0x87, 0xf8, 0xb5, 0x1c, 0x2e, 0xa3,
	0x42, 0xf7, 0x69, 0xbb, 0x66, 0x60, 0x84, 0x4a, 0x2f, 0xd5, 0x03, 0xd5, 0xf2, 0xf2, 0xfe, 0xf3,
	0x5e, 0xaf, 0xdd, 0xad, 0x15, 0xac, 0x9f, 0xf2, 0x68, 0xa9, 0x07, 0xce, 0xb0, 0x9b, 0x26, 0xa1,
	0x03, 0x47, 0x11, 0x70, 0xa1, 0x4c, 0x78, 0x8c, 0xd0, 0x1e, 0xe5, 0x82, 0x50, 0x07, 0xf6, 0x9e,
	0x29, 0x27, 0xb2, 0x6a, 0xbc, 0xec, 0x74, 0xd3, 0x73, 0xb5, 0x6a, 0x34, 0x30, 0xfe, 0x14, 0x95,
	0xf6, 0x95, 0xd9, 0xaa, 0xe7, 0xd9, 0xed, 0x9a, 0x9d, 0x7a, 0x6f, 0x77, 0x33, 0xef, 0x5b, 0x77,
	0x93, 0xd8, 0xac, 0xa5, 0x87, 0x9a, 0x46, 0xc6, 0xc2, 0xaf, 0xd0, 0x6d, 0xad, 0x37, 0x5e, 0x2f,
	0xac, 0x16, 0xd6, 0x67, 0xb7, 0xeb, 0xd3, 0x9e, 0xa1, 0xd5, 0x48, 0x62, 0x73, 0x49, 0x33, 0x49,
	0xd7, 0x3c, 0xa7, 0x84, 0x1f, 0xa1, 0xca, 0x4b, 0x08, 0xfb, 0x8c, 0x7b, 0xe2, 0xa4, 0x5e, 0x5c,
	0x35, 0xd6, 0x67, 0x5a, 0xcb, 0x49, 0x6c, 0x2e, 0x1c, 0x8f, 0x0f, 0x35, 0xe6, 0x19, 0xd2, 0xfa,
	0xb9, 0x80, 0xea, 0x57, 0xd8, 0x24, 0x88, 0x88, 0x38, 0x7e, 0x8d, 0x4a, 0xe9, 0x2a, 0x8b, 0x8b,
	0x3d, 0xa9, 0x73, 0x1a, 0xc5, 0x7e, 0xe2, 0xa8, 0xda, 0xd5, 0x26, 0xf5, 0x82, 0xab, 0xb5, 0xee,
	0x45, 0xa6, 0xbe, 0x8b, 0x2a, 0x5d, 0x41, 0x42, 0xd1, 0xf3, 0x46, 0x90, 0xd9, 0x59, 0xb5, 0x49,
	0xe0, 0xd9, 0xf2, 0x80, 0x0b, 0x32, 0x0a, 0x5a, 0xf5, 0x24, 0x36, 0xef, 0x72, 0x09, 0xda, 0x14,
	0xde, 0x08, 0xf4, 0x16, 0x26, 0x54, 0xfc, 0x19, 0x2a, 0xef, 0x50, 0x57, 0xa9, 0x14, 0xae, 0x54,
	0x59, 0x4a, 0x62, 0x13, 0x03, 0x75, 0x2f, 0x6a, 0x8c, 0x69, 0x78, 0x03, 0x95, 0x3a, 0x40, 0x38,
	0xa3, 0xca, 0xb8, 0x4a, 0x5a, 0x77, 0xa8, 0x4e, 0xf4, 0xba, 0x53, 0x0c, 0xfe, 0x3f, 0x2a, 0xbc,
	0xe8, 0xec, 0xd5, 0x67, 0x14, 0x74, 0x3e, 0x89, 0xcd, 0x3b, 0x51, 0xe8, 0x69, 0x38, 0x79, 0x6b,
	0xf5, 0xd0, 0x6d, 0xdd, 0x0a, 0x99, 0xd2, 0x2f, 0x23, 0x88, 0xc0, 0xad, 0xe5, 0xf0, 0x1d, 0x54,
	0xe9, 0x3a, 0x43, 0x70, 0x23, 0x1f, 0xdc, 0x9a, 0x81, 0xab, 0x32, 0x8e, 0xed, 0x90, 0x0d, 0x42,
	0xe0, 0xbc, 0x96, 0x97, 0xd0, 0x5d, 0xe2, 0xc9, 0xbb, 0x82, 0x84, 0x3e, 0x65, 0xa3, 0xc0, 0x07,
	0x01, 0x6e, 0xad, 0x68, 0xfd, 0x98, 0x47, 0xf8, 0xb2, 0xf5, 0x78, 0x0b, 0x19, 0x3d, 0xf5, 0x44,
	0xb3, 0xdb, 0x77, 0xd2, 0xde, 0x4f, 0x02, 0xf8, 0x02, 0x04, 0x69, 0x2d, 0xbc, 0x8b, 0xcd, 0xdc,
	0xfb, 0xd8, 0x34, 0x92, 0xd8, 0x2c, 0x6f, 0x78, 0xd4, 0xf7, 0x28, 0x74, 0x8c, 0x1e, 0x7e, 0x8c,
	0x8c, 0xc3, 0xcc, 0xf3, 0x39, 0xc5, 0x38, 0xec, 0x7f, 0x03, 0x8e, 0x50, 0x9c, 0x86, 0xc6, 0xa9,
	0xca, 0x09, 0xa4, 0xf5, 0x66, 0x1c, 0xe2, 0xe7, 0xa8, 0x28, 0xa3, 0x99, 0x79, 0x6d, 0x5e, 0x17,
	0x09, 0x99, 0xe0, 0x25, 0xa9, 0x26, 0x95, 0x78, 0x00, 0x8e, 0x3e, 0x19, 0xd4, 0xa7, 0xd8, 0x9d,
	0x24, 0xac, 0xa8, 0xe4, 0xd6, 0x6e, 0x4c, 0x58, 0xab, 0x9e, 0x09, 0x4e, 0x0d, 0x96, 0xf5, 0x8b,
	0x81, 0x96, 0x2f, 0xd3, 0x77, 0x8e, 0x81, 0x0a, 0x19, 0x3a, 0xb5, 0x90, 0x0e, 0x65, 0xa9, 0x4e,
	0xe3, 0x32, 0x39, 0x4d, 0x43, 0x07, 0x72, 0xbb, 0x29, 0x4e, 0x82, 0x73, 0xa1, 0x9b, 0x80, 0xf0,
	0x3e, 0x2a, 0x67, 0xba, 0x99, 0x8d, 0xf7, 0xaf, 0xa9, 0xbc, 0xb5, 0x98, 0xc4, 0xe6, 0x7c, 0x98,
	0x6e, 0xf4, 0x00, 0x66, 0xf7, 0xd6, 0xef, 0x06, 0xb2, 0xbe, 0x22, 0xc2, 0x19, 0x5e, 0xe6, 0xf2,
	0x36, 0x09, 0xc9, 0x08, 0x04, 0x84, 0x1c, 0x3f, 0x44, 0xb7, 0x0e, 0x98, 0x0b, 0x07, 0x64, 0x04,
	0xd9, 0xd8, 0x52, 0x9f, 0x38, 0x65, 0x2e, 0x6c, 0x52, 0x72, 0x2e, 0xdb, 0x13, 0xe0, 0x98, 0xf4,
	0xdc, 0xa3, 0x6e, 0x36, 0xa8, 0xcf, 0x48, 0xdf, 0x7a, 0xd4, 0xbd, 0x48, 0x92, 0x40, 0xbc, 0x8b,
	0xca, 0x87, 0xc1, 0x78, 0x44, 0xc9, 0xf6, 0x16, 0x95, 0x49, 0xfb, 0x1e, 0x17, 0xaa, 0xce, 0xec,
	0x32, 0x6d, 0x8c, 0x05, 0x17, 0x47, 0xd3, 0x98, 0x6c, 0x8d, 0xd0, 0xfd, 0x29, 0x2f, 0x21, 0xa5,
	0xf0, 0x01, 0x2a, 0xa9, 0x8d, 0x1c, 0x30, 0x72, 0x10, 0xae, 0x5e, 0x63, 0xa2, 0x02, 0xa6, 0x9f,
	0xa6, 0x7a, 0x9c, 0x73, 0x2f, 0x9f, 0xaa, 0x58, 0x7f, 0x18, 0x68, 0xed, 0x45, 0xe0, 0x12, 0x01,
	0xe7, 0xf8, 0x3c, 0xf2, 0xc5, 0x7f, 0x62, 0xa3, 0x96, 0x92, 0xc2, 0xbf, 0x4f, 0xc9, 0x21, 0x32,
	0xa7, 0x34, 0xd7, 0x01, 0x1e, 0x30, 0xca, 0xd5, 0x24, 0xd3, 0x26, 0x76, 0xe5, 0xfa, 0x09, 0xbc,
	0xfd, 0x5b, 0x1e, 0x55, 0x35, 0xad, 0x27, 0x81, 0x87, 0x8f, 0x50, 0x7d, 0x5a, 0x10, 0xf1, 0xc7,
	0x93, 0xe2, 0x6f, 0xce, 0x6a, 0xe3, 0xc1, 0x4d, 0x4f, 0x29, 0x03, 0x60, 0xe5, 0xb6, 0x0c, 0x7c,
	0x84, 0x96, 0xa7, 0xb4, 0x85, 0x3f, 0x9a, 0x88, 0xdc, 0xf8, 0xaa, 0x8d, 0xf5, 0x9b, 0xb0, 0x63,
	0x93, 0xac, 0x5c, 0xe3, 0xf5, 0xaf, 0xdf, 0xdf, 0x7b, 0x75, 0xe5, 0x28, 0x2d, 0x0c, 0x40, 0xe0,
	0xa2, 0x2f, 0xc3, 0x59, 0x0c, 0x98, 0x3c, 0x08, 0x22, 0x81, 0x4b, 0x2e, 0xc8, 0x11, 0xdc, 0x78,
	0xd0, 0x7c, 0x73, 0x36, 0x28, 0x6d, 0x99, 0x8b, 0xb7, 0xcd, 0x37, 0xea, 0xff, 0xd2, 0xe4, 0x3f,
	0x82, 0xfb, 0xb6, 0x55, 0x7b, 0x77, 0xba, 0x62, 0xbc, 0x3f, 0x5d, 0x31, 0xfe, 0x3c, 0x5d, 0x31,
	0x7e, 0xf8, 0x6b, 0x25, 0xd7, 0x36, 0xfa, 0x25, 0x55, 0xda, 0xc3, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x3d, 0xeb, 0x30, 0x62, 0x9e, 0x0a, 0x00, 0x00,
}
