// TechSupport

syntax = "proto3";

package tsproto;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/labels/selector.proto";

message DestinationSpec {
  enum Protocol {
    Local   = 0;
    SCP     = 1;
    Venice  = 2;
    HTTPS   = 3;
  }
  Protocol        Proto           = 1 [(gogoproto.jsontag) = "proto,omitempty"];
  string          Path            = 2 [(gogoproto.jsontag) = "path,omitempty"];
  string          Destination    = 3 [(gogoproto.jsontag) = "destination,omitempty"];
}

message TechSupportRequestSpec {
  string                    InstanceID    = 1 [(gogoproto.jsontag) = "instance-id,omitempty"];
  labels.Selector           Labels = 2 [(gogoproto.jsontag) = "labels,omitempty"];
  repeated DestinationSpec  Destinations  = 3 [(gogoproto.jsontag) = "destinations,omitempty"];
  int32                     Verbosity     = 4 [(gogoproto.jsontag) = "verbosity,omitempty"];
}

message TechSupportRequestStatus {
  enum ActionStatus {
    Queued      = 0;
    Scheduled   = 1;
    InProgress  = 2;
    Failed      = 3;
    Completed   = 4;
  }
  ActionStatus      Status        = 1 [(gogoproto.jsontag) = "status,omitempty"];
  api.Timestamp     StartTime     = 2 [(gogoproto.jsontag) = "start-time,omitempty"];
  api.Timestamp     EndTime       = 3 [(gogoproto.jsontag) = "end-time,omitempty"];
  string            Reason        = 4 [(gogoproto.jsontag) = "reason,omitempty"];
  string            URI           = 5 [(gogoproto.jsontag) = "uri,omitempty"];
}

message TechSupportRequest {
  api.TypeMeta              T       = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
  api.ObjectMeta            O       = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
  TechSupportRequestSpec    Spec    = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
  TechSupportRequestStatus  Status  = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

message TechSupportRequestEvent {
  api.EventType       EventType = 1 [(gogoproto.jsontag) = "event-type,omitempty"];
  TechSupportRequest  Request   = 2 [(gogoproto.jsontag) = "request,omitempty"];
}

message WatchTechSupportRequestsParameters {
  string                NodeName = 1 [(gogoproto.jsontag) = "node-name,omitempty"];
  string                NodeKind = 2 [(gogoproto.jsontag) = "node-kind,omitempty"];
  api.ListWatchOptions  Options  = 3 [(gogoproto.jsontag) = "options,omitempty"];
}

message TechSupportRequestEventList {
  repeated TechSupportRequestEvent Events = 1 [(gogoproto.jsontag) = "events,omitempty"];
}

message UpdateTechSupportResultParameters {
  string              NodeName = 1 [(gogoproto.jsontag) = "node-name,omitempty"];
  string              NodeKind = 2 [(gogoproto.jsontag) = "node-kind,omitempty"];
  TechSupportRequest  Request  = 3 [(gogoproto.jsontag) = "request,omitempty"];
}

message UpdateTechSupportResultResponse {
  string Status = 1 [(gogoproto.jsontag) = "status,omitempty"];
}

service TechSupportApi {
  option(venice.naplesRestService) = {
      Object: "TechSupportRequest",
      Method: ["get", "list", "post", "put", "delete"],
      Pattern: "/{ObjectMeta.Name}/{Spec.InstanceId}"
  };

  rpc WatchTechSupportRequests (WatchTechSupportRequestsParameters) returns (stream TechSupportRequestEventList) {};
  rpc UpdateTechSupportResult(UpdateTechSupportResultParameters) returns (UpdateTechSupportResultResponse) {};
}
