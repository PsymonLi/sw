// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package nmd;

import "google/api/annotations.proto";
import  public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/protos/smartnic.proto";


// Naples config object
message Naples {
    option (venice.objectPrefix) = {Collection: "config"};

    api.TypeMeta T      = 1 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O    = 2 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the NIC.
    NaplesSpec Spec     = 3 [(gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the NIC.
    NaplesStatus Status = 4 [(gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "status,omitempty"];
}

// Operational mode of a Naples
enum MgmtMode {
    HOST     = 0; // Host managed mode
    NETWORK  = 1; // Network managed mode
}

// Network Connectivity Mode (only if network managed)
enum NetworkMode {
    NONE     = 0;
    OOB      = 1; // Out Of Band Network Management
    INBAND   = 2; // Inband Network Management
}

// NaplesSpec contains initial bootstrap configuration of the Naples I/O subsystem
message NaplesSpec {

    // PrimaryMAC is the MAC address of the primary PF exposed by SmartNIC
    string PrimaryMAC               = 1 [(gogoproto.jsontag) = "primary-mac,omitempty"];

    // Hostname is used as a user friendly identifier in logs/events
    string Hostname                 = 2 [(gogoproto.jsontag) = "hostname,omitempty"];

    // IPConfig defines the static IP configuration. If not specified, DHCP will be attempted
    cluster.IPConfig IPConfig       = 3 [(gogoproto.jsontag) = "ip-config,omitempty"];

    // Operational mode of the NIC
    string Mode                     = 4 [(gogoproto.jsontag) = "mode",
                                                 (venice.check) = "StrEnum(Naples.MgmtMode)"];

    // Operational mode of the NIC
    string NetworkMode              = 5 [(gogoproto.jsontag) = "network-mode",
                                         (venice.check) = "StrEnum(Naples.NetworkMode)"];

    // MgmtVlan defines the vlan to be used in network managed mode. The default of 0
    // implies OOB 1G mgmt port is used for management. A non 0 vlan switches the
    // management port to a vlan on data ports.
    uint32 MgmtVlan                 = 6 [(gogoproto.jsontag) = "vlan,omitempty"];

    // Controllers contains the list of controller IPs or Hostnames
    repeated string Controllers     = 7 [(gogoproto.jsontag) = "controllers,omitempty"];

    // Profile captures the smart nic profile that is associated with this Naples
    string Profile                  = 8 [(gogoproto.jsontag) = "feature-profile,omitempty"];
}

// NaplesStatus contains current status of a Naples I/O subsystem
message NaplesStatus {
    enum Transition {
        NONE                                = 0;
        DHCP_SENT                           = 1;
        DHCP_DONE                           = 2;
        DHCP_TIMEDOUT                       = 3;
        MISSING_VENDOR_SPECIFIED_ATTRIBUTES = 4;
        VENICE_REGISTRATION_SENT            = 5;
        VENICE_REGISTRATION_DONE            = 6;
        VENICE_UNREACHABLE                  = 7;
        REBOOT_PENDING                      = 8;
    }
    // Current phase of the NIC adapter in the system
    cluster.SmartNICStatus.Phase    AdmissionPhase  = 1 [(gogoproto.jsontag) = "phase,omitempty",
					        (venice.check) = "StrEnum(cluster.SmartNICStatus.Phase)"];

    cluster.IPConfig IPConfig       	            = 2 [(gogoproto.jsontag) = "ip-config"];

    // Resolved Controllers/Venice IPs
    repeated string Controllers                     = 3 [(gogoproto.jsontag) = "controllers,omitempty"];

    string TransitionPhase                             = 4 [(gogoproto.jsontag) = "transition-phase,omitempty",
                                                 (venice.check) = "StrEnum(NaplesStatus.Transition)"];
    // Operational mode of the NIC
    string Mode                   	    = 5 [(gogoproto.jsontag) = "mode",
                                                 (venice.check) = "StrEnum(Naples.MgmtMode)"];

    // Operational mode of the NIC
    string NetworkMode                      = 6 [(gogoproto.jsontag) = "network-mode",
                                                 (venice.check) = "StrEnum(Naples.NetworkMode)"];

}

// NaplesCmdExecute contains information on what command to execute
message NaplesCmdExecute {
    // Executable to run on naples side
    string Executable               = 1 [(gogoproto.nullable) = true,
                                        (gogoproto.jsontag) = "executable,omitempty"];

    // Flags for the executable to run on naples side
    string Opts                     = 2 [(gogoproto.nullable) = true,
                                        (gogoproto.jsontag) = "opts,omitempty"];
}
