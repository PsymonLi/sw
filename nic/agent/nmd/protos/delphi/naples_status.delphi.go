// Code generated by protoc-gen-go. DO NOT EDIT.
// source: naples_status.proto

/*
Package nmd is a generated protocol buffer package.

Service name

It is generated from these files:
	naples_status.proto

It has these top-level messages:
	NaplesStatus
*/
package nmd

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NaplesStatus_Mode int32

const (
	// ui-hint: None
	NaplesStatus_NONE NaplesStatus_Mode = 0
	// ui-hint: Host Managed
	NaplesStatus_HOST_MANAGED NaplesStatus_Mode = 1
	// ui-hint: Network Managed Inband
	NaplesStatus_NETWORK_MANAGED_INBAND NaplesStatus_Mode = 2
	// ui-hint: Network Managed Out of Band
	NaplesStatus_NETWORK_MANAGED_OOB NaplesStatus_Mode = 3
)

var NaplesStatus_Mode_name = map[int32]string{
	0: "NONE",
	1: "HOST_MANAGED",
	2: "NETWORK_MANAGED_INBAND",
	3: "NETWORK_MANAGED_OOB",
}
var NaplesStatus_Mode_value = map[string]int32{
	"NONE":                   0,
	"HOST_MANAGED":           1,
	"NETWORK_MANAGED_INBAND": 2,
	"NETWORK_MANAGED_OOB":    3,
}

func (x NaplesStatus_Mode) String() string {
	return proto.EnumName(NaplesStatus_Mode_name, int32(x))
}
func (NaplesStatus_Mode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type NaplesStatus_RegistrationPhase int32

const (
	// ui-hint: Unknown
	NaplesStatus_UNKNOWN NaplesStatus_RegistrationPhase = 0
	// ui-hint: Registering
	NaplesStatus_REGISTERING NaplesStatus_RegistrationPhase = 1
	// ui-hint: Rejected
	NaplesStatus_REJECTED NaplesStatus_RegistrationPhase = 2
	// ui-hint: Pending
	NaplesStatus_PENDING NaplesStatus_RegistrationPhase = 3
	// ui-hint: Admitted
	NaplesStatus_ADMITTED NaplesStatus_RegistrationPhase = 4
)

var NaplesStatus_RegistrationPhase_name = map[int32]string{
	0: "UNKNOWN",
	1: "REGISTERING",
	2: "REJECTED",
	3: "PENDING",
	4: "ADMITTED",
}
var NaplesStatus_RegistrationPhase_value = map[string]int32{
	"UNKNOWN":     0,
	"REGISTERING": 1,
	"REJECTED":    2,
	"PENDING":     3,
	"ADMITTED":    4,
}

func (x NaplesStatus_RegistrationPhase) String() string {
	return proto.EnumName(NaplesStatus_RegistrationPhase_name, int32(x))
}
func (NaplesStatus_RegistrationPhase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 1}
}

// NaplesStatus contains current status of a Naples I/O subsystem
type NaplesStatus struct {
	Meta *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	// Current phase of the NIC adapter in the system
	Phase NaplesStatus_RegistrationPhase `protobuf:"varint,2,opt,name=Phase,enum=nmd.NaplesStatus_RegistrationPhase" json:"Phase,omitempty"`
	// Resolved Controllers/Venice IPs
	Controllers []string `protobuf:"bytes,3,rep,name=Controllers" json:"Controllers,omitempty"`
	// Naples management mode
	NaplesMode NaplesStatus_Mode `protobuf:"varint,4,opt,name=NaplesMode,enum=nmd.NaplesStatus_Mode" json:"NaplesMode,omitempty"`
}

func (m *NaplesStatus) GetDelphiMessage() proto.Message {
	return m
}

func (m *NaplesStatus) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *NaplesStatus) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *NaplesStatus) GetDelphiKey() string {
	return "default"
}

func (m *NaplesStatus) GetDelphiKind() string {
	return "NaplesStatus"
}

func (m *NaplesStatus) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *NaplesStatus) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*NaplesStatus)
	return obj
}

func NaplesStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("NaplesStatus", mode)
}

func GetNaplesStatus(client clientApi.Client) *NaplesStatus {
	o := client.GetObject("NaplesStatus", "default")
	if o == nil {
		return nil
	}
	obj, ok := o.(*NaplesStatus)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func NaplesStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg NaplesStatus
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func NaplesStatusWatch(client clientApi.Client, reactor NaplesStatusReactor) {
	client.WatchKind("NaplesStatus", reactor)
}
func NaplesStatusList(client clientApi.Client) []*NaplesStatus {
	bobjs := client.List("NaplesStatus")
	objs := make([]*NaplesStatus, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*NaplesStatus)
		objs = append(objs, obj)
	}
	return objs
}
func (m *NaplesStatus) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(NaplesStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnNaplesStatusCreate(m)
			} else {
				oldObj, ok := old.(*NaplesStatus)
				if ok == false {
					panic("Not an NaplesStatus object")
				}
				rctr.OnNaplesStatusUpdate(oldObj, m)
			}
		} else {
			rctr.OnNaplesStatusDelete(m)
		}
	}
}

type NaplesStatusReactor interface {
	OnNaplesStatusCreate(obj *NaplesStatus)
	OnNaplesStatusUpdate(old *NaplesStatus, obj *NaplesStatus)
	OnNaplesStatusDelete(obj *NaplesStatus)
}

func (m *NaplesStatus) Reset()                    { *m = NaplesStatus{} }
func (m *NaplesStatus) String() string            { return proto.CompactTextString(m) }
func (*NaplesStatus) ProtoMessage()               {}
func (*NaplesStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NaplesStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NaplesStatus) GetPhase() NaplesStatus_RegistrationPhase {
	if m != nil {
		return m.Phase
	}
	return NaplesStatus_UNKNOWN
}

func (m *NaplesStatus) GetControllers() []string {
	if m != nil {
		return m.Controllers
	}
	return nil
}

func (m *NaplesStatus) GetNaplesMode() NaplesStatus_Mode {
	if m != nil {
		return m.NaplesMode
	}
	return NaplesStatus_NONE
}

func init() {
	clientApi.RegisterFactory("NaplesStatus", NaplesStatusFactory)
	proto.RegisterType((*NaplesStatus)(nil), "nmd.NaplesStatus")
	proto.RegisterEnum("nmd.NaplesStatus_Mode", NaplesStatus_Mode_name, NaplesStatus_Mode_value)
	proto.RegisterEnum("nmd.NaplesStatus_RegistrationPhase", NaplesStatus_RegistrationPhase_name, NaplesStatus_RegistrationPhase_value)
}

func init() { proto.RegisterFile("naples_status.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x41, 0x4b, 0xc3, 0x30,
	0x1c, 0xc5, 0xd7, 0xb5, 0xba, 0xf9, 0x6f, 0xd1, 0x98, 0xc1, 0x2c, 0x3b, 0x95, 0x0a, 0xb2, 0x53,
	0x0f, 0x13, 0x04, 0xbd, 0x75, 0x6b, 0x98, 0x75, 0x34, 0x19, 0x59, 0x65, 0xe0, 0x65, 0x74, 0x36,
	0xb8, 0x49, 0xd7, 0x8e, 0x36, 0xde, 0x3d, 0x8a, 0x5f, 0x60, 0x5f, 0x57, 0xd2, 0x29, 0x0c, 0x77,
	0x0a, 0xbc, 0xdf, 0x2f, 0xef, 0x11, 0x02, 0x9d, 0x3c, 0xd9, 0x66, 0xa2, 0x5a, 0x54, 0x32, 0x91,
	0x1f, 0x95, 0xb7, 0x2d, 0x0b, 0x59, 0x60, 0x3d, 0xdf, 0xa4, 0x3d, 0x2b, 0x15, 0xd9, 0x76, 0xb5,
	0xde, 0x47, 0xee, 0xb7, 0x0e, 0x16, 0xad, 0xd5, 0x59, 0x6d, 0xe2, 0x1b, 0x30, 0x22, 0x21, 0x13,
	0x5b, 0x73, 0xb4, 0xbe, 0x39, 0xc0, 0xde, 0xaf, 0xcd, 0x96, 0xef, 0xe2, 0x55, 0x2a, 0xc2, 0x6b,
	0x8e, 0xef, 0xe1, 0x64, 0xba, 0x4a, 0x2a, 0x61, 0x37, 0x1d, 0xad, 0x7f, 0x3e, 0xb8, 0xf6, 0xf2,
	0x4d, 0xea, 0x1d, 0x36, 0x79, 0x5c, 0xbc, 0xad, 0x2b, 0x59, 0x26, 0x72, 0x5d, 0xe4, 0xb5, 0xca,
	0xf7, 0x37, 0xb0, 0x03, 0xe6, 0xa8, 0xc8, 0x65, 0x59, 0x64, 0x99, 0x28, 0x2b, 0x5b, 0x77, 0xf4,
	0xfe, 0x19, 0x3f, 0x8c, 0xf0, 0x1d, 0xc0, 0xbe, 0x2a, 0x2a, 0x52, 0x61, 0x1b, 0xf5, 0x42, 0xf7,
	0x78, 0x41, 0x51, 0x7e, 0x60, 0xba, 0x73, 0x30, 0xd4, 0x89, 0xdb, 0x60, 0x50, 0x46, 0x09, 0x6a,
	0x60, 0x04, 0xd6, 0x23, 0x9b, 0xc5, 0x8b, 0xc8, 0xa7, 0xfe, 0x98, 0x04, 0x48, 0xc3, 0x3d, 0xe8,
	0x52, 0x12, 0xcf, 0x19, 0x9f, 0xfc, 0x85, 0x8b, 0x90, 0x0e, 0x7d, 0x1a, 0xa0, 0x26, 0xbe, 0x82,
	0xce, 0x7f, 0xc6, 0xd8, 0x10, 0xe9, 0xee, 0x0b, 0x5c, 0x1e, 0x3d, 0x07, 0x9b, 0xd0, 0x7a, 0xa6,
	0x13, 0xca, 0xe6, 0x14, 0x35, 0xf0, 0x05, 0x98, 0x9c, 0x8c, 0xc3, 0x59, 0x4c, 0x78, 0x48, 0xc7,
	0x48, 0xc3, 0x16, 0xb4, 0x39, 0x79, 0x22, 0xa3, 0x98, 0xa8, 0x66, 0x13, 0x5a, 0x53, 0x42, 0x03,
	0x85, 0x74, 0x85, 0xfc, 0x20, 0x0a, 0x63, 0x85, 0x8c, 0x87, 0xf6, 0xe7, 0xce, 0xd5, 0xbe, 0x76,
	0xae, 0xb6, 0x3c, 0xad, 0xff, 0xe4, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x91, 0x03, 0xaa,
	0xbd, 0x01, 0x00, 0x00,
}
