// Code generated by protoc-gen-go. DO NOT EDIT.
// source: naples_status.proto

/*
Package nmd is a generated protocol buffer package.

Service name

It is generated from these files:
	naples_status.proto

It has these top-level messages:
	DistributedServiceCardFru
	DistributedServiceCardStatus
*/
package nmd

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DistributedServiceCardStatus_Mode int32

const (
	// ui-hint: None
	DistributedServiceCardStatus_NONE DistributedServiceCardStatus_Mode = 0
	// ui-hint: Host Managed
	DistributedServiceCardStatus_HOST_MANAGED DistributedServiceCardStatus_Mode = 1
	// ui-hint: Network Managed Inband
	DistributedServiceCardStatus_NETWORK_MANAGED_INBAND DistributedServiceCardStatus_Mode = 2
	// ui-hint: Network Managed Out of Band
	DistributedServiceCardStatus_NETWORK_MANAGED_OOB DistributedServiceCardStatus_Mode = 3
)

var DistributedServiceCardStatus_Mode_name = map[int32]string{
	0: "NONE",
	1: "HOST_MANAGED",
	2: "NETWORK_MANAGED_INBAND",
	3: "NETWORK_MANAGED_OOB",
}
var DistributedServiceCardStatus_Mode_value = map[string]int32{
	"NONE":                   0,
	"HOST_MANAGED":           1,
	"NETWORK_MANAGED_INBAND": 2,
	"NETWORK_MANAGED_OOB":    3,
}

func (x DistributedServiceCardStatus_Mode) String() string {
	return proto.EnumName(DistributedServiceCardStatus_Mode_name, int32(x))
}
func (DistributedServiceCardStatus_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

type DistributedServiceCardStatus_Transition int32

const (
	DistributedServiceCardStatus_TRANSITION_NONE                     DistributedServiceCardStatus_Transition = 0
	DistributedServiceCardStatus_DHCP_SENT                           DistributedServiceCardStatus_Transition = 1
	DistributedServiceCardStatus_DHCP_DONE                           DistributedServiceCardStatus_Transition = 2
	DistributedServiceCardStatus_DHCP_TIMEDOUT                       DistributedServiceCardStatus_Transition = 3
	DistributedServiceCardStatus_MISSING_VENDOR_SPECIFIED_ATTRIBUTES DistributedServiceCardStatus_Transition = 4
	DistributedServiceCardStatus_VENICE_REGISTRATION_SENT            DistributedServiceCardStatus_Transition = 5
	DistributedServiceCardStatus_VENICE_REGISTRATION_DONE            DistributedServiceCardStatus_Transition = 6
	DistributedServiceCardStatus_VENICE_UNREACHABLE                  DistributedServiceCardStatus_Transition = 7
	DistributedServiceCardStatus_REBOOT_PENDING                      DistributedServiceCardStatus_Transition = 8
)

var DistributedServiceCardStatus_Transition_name = map[int32]string{
	0: "TRANSITION_NONE",
	1: "DHCP_SENT",
	2: "DHCP_DONE",
	3: "DHCP_TIMEDOUT",
	4: "MISSING_VENDOR_SPECIFIED_ATTRIBUTES",
	5: "VENICE_REGISTRATION_SENT",
	6: "VENICE_REGISTRATION_DONE",
	7: "VENICE_UNREACHABLE",
	8: "REBOOT_PENDING",
}
var DistributedServiceCardStatus_Transition_value = map[string]int32{
	"TRANSITION_NONE":                     0,
	"DHCP_SENT":                           1,
	"DHCP_DONE":                           2,
	"DHCP_TIMEDOUT":                       3,
	"MISSING_VENDOR_SPECIFIED_ATTRIBUTES": 4,
	"VENICE_REGISTRATION_SENT":            5,
	"VENICE_REGISTRATION_DONE":            6,
	"VENICE_UNREACHABLE":                  7,
	"REBOOT_PENDING":                      8,
}

func (x DistributedServiceCardStatus_Transition) String() string {
	return proto.EnumName(DistributedServiceCardStatus_Transition_name, int32(x))
}
func (DistributedServiceCardStatus_Transition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 1}
}

// Has all the information read from FRU.json
type DistributedServiceCardFru struct {
	ManufacturingDate string `protobuf:"bytes,1,opt,name=ManufacturingDate" json:"ManufacturingDate,omitempty"`
	Manufacturer      string `protobuf:"bytes,2,opt,name=Manufacturer" json:"Manufacturer,omitempty"`
	ProductName       string `protobuf:"bytes,3,opt,name=ProductName" json:"ProductName,omitempty"`
	SerialNum         string `protobuf:"bytes,4,opt,name=SerialNum" json:"SerialNum,omitempty"`
	PartNum           string `protobuf:"bytes,5,opt,name=PartNum" json:"PartNum,omitempty"`
	BoardId           string `protobuf:"bytes,6,opt,name=BoardId" json:"BoardId,omitempty"`
	EngChangeLevel    string `protobuf:"bytes,7,opt,name=EngChangeLevel" json:"EngChangeLevel,omitempty"`
	NumMacAddr        string `protobuf:"bytes,8,opt,name=NumMacAddr" json:"NumMacAddr,omitempty"`
	MacStr            string `protobuf:"bytes,9,opt,name=MacStr" json:"MacStr,omitempty"`
}

func (m *DistributedServiceCardFru) Reset()                    { *m = DistributedServiceCardFru{} }
func (m *DistributedServiceCardFru) String() string            { return proto.CompactTextString(m) }
func (*DistributedServiceCardFru) ProtoMessage()               {}
func (*DistributedServiceCardFru) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DistributedServiceCardFru) GetManufacturingDate() string {
	if m != nil {
		return m.ManufacturingDate
	}
	return ""
}

func (m *DistributedServiceCardFru) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *DistributedServiceCardFru) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *DistributedServiceCardFru) GetSerialNum() string {
	if m != nil {
		return m.SerialNum
	}
	return ""
}

func (m *DistributedServiceCardFru) GetPartNum() string {
	if m != nil {
		return m.PartNum
	}
	return ""
}

func (m *DistributedServiceCardFru) GetBoardId() string {
	if m != nil {
		return m.BoardId
	}
	return ""
}

func (m *DistributedServiceCardFru) GetEngChangeLevel() string {
	if m != nil {
		return m.EngChangeLevel
	}
	return ""
}

func (m *DistributedServiceCardFru) GetNumMacAddr() string {
	if m != nil {
		return m.NumMacAddr
	}
	return ""
}

func (m *DistributedServiceCardFru) GetMacStr() string {
	if m != nil {
		return m.MacStr
	}
	return ""
}

// DistributedServiceCardStatus contains current status of a DistributedServiceCard I/O subsystem
type DistributedServiceCardStatus struct {
	Meta *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	// Resolved Controllers/Venice IPs
	Controllers []string `protobuf:"bytes,3,rep,name=Controllers" json:"Controllers,omitempty"`
	// DistributedServiceCard management mode
	DistributedServiceCardMode DistributedServiceCardStatus_Mode       `protobuf:"varint,4,opt,name=DistributedServiceCardMode,enum=nmd.DistributedServiceCardStatus_Mode" json:"DistributedServiceCardMode,omitempty"`
	TransitionPhase            DistributedServiceCardStatus_Transition `protobuf:"varint,5,opt,name=TransitionPhase,enum=nmd.DistributedServiceCardStatus_Transition" json:"TransitionPhase,omitempty"`
	// ID is used as a user friendly identifier in logs/events
	ID string `protobuf:"bytes,6,opt,name=ID" json:"ID,omitempty"`
	// IPConfig defines the static IP configuration. If not specified, DHCP will be attempted
	MgmtIP  string                     `protobuf:"bytes,7,opt,name=MgmtIP" json:"MgmtIP,omitempty"`
	DSCName string                     `protobuf:"bytes,8,opt,name=DSCName" json:"DSCName,omitempty"`
	Fru     *DistributedServiceCardFru `protobuf:"bytes,9,opt,name=Fru" json:"Fru,omitempty"`
}

func (m *DistributedServiceCardStatus) GetDelphiMessage() proto.Message {
	return m
}

func (m *DistributedServiceCardStatus) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *DistributedServiceCardStatus) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *DistributedServiceCardStatus) GetDelphiKey() string {
	return "default"
}

func (m *DistributedServiceCardStatus) GetDelphiKind() string {
	return "DistributedServiceCardStatus"
}

func (m *DistributedServiceCardStatus) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *DistributedServiceCardStatus) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*DistributedServiceCardStatus)
	return obj
}

func DistributedServiceCardStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("DistributedServiceCardStatus", mode)
}

func GetDistributedServiceCardStatus(client clientApi.Client) *DistributedServiceCardStatus {
	o := client.GetObject("DistributedServiceCardStatus", "default")
	if o == nil {
		return nil
	}
	obj, ok := o.(*DistributedServiceCardStatus)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func (m *DistributedServiceCardStatus) IsPersistent() bool {
	return false
}
func DistributedServiceCardStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg DistributedServiceCardStatus
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func DistributedServiceCardStatusWatch(client clientApi.Client, reactor DistributedServiceCardStatusReactor) {
	client.WatchKind("DistributedServiceCardStatus", reactor)
}
func DistributedServiceCardStatusList(client clientApi.Client) []*DistributedServiceCardStatus {
	bobjs := client.List("DistributedServiceCardStatus")
	objs := make([]*DistributedServiceCardStatus, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*DistributedServiceCardStatus)
		objs = append(objs, obj)
	}
	return objs
}
func (m *DistributedServiceCardStatus) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(DistributedServiceCardStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnDistributedServiceCardStatusCreate(m)
			} else {
				oldObj, ok := old.(*DistributedServiceCardStatus)
				if ok == false {
					panic("Not an DistributedServiceCardStatus object")
				}
				rctr.OnDistributedServiceCardStatusUpdate(oldObj, m)
			}
		} else {
			rctr.OnDistributedServiceCardStatusDelete(m)
		}
	}
}

type DistributedServiceCardStatusReactor interface {
	OnDistributedServiceCardStatusCreate(obj *DistributedServiceCardStatus)
	OnDistributedServiceCardStatusUpdate(old *DistributedServiceCardStatus, obj *DistributedServiceCardStatus)
	OnDistributedServiceCardStatusDelete(obj *DistributedServiceCardStatus)
}

func (m *DistributedServiceCardStatus) Reset()                    { *m = DistributedServiceCardStatus{} }
func (m *DistributedServiceCardStatus) String() string            { return proto.CompactTextString(m) }
func (*DistributedServiceCardStatus) ProtoMessage()               {}
func (*DistributedServiceCardStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DistributedServiceCardStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *DistributedServiceCardStatus) GetControllers() []string {
	if m != nil {
		return m.Controllers
	}
	return nil
}

func (m *DistributedServiceCardStatus) GetDistributedServiceCardMode() DistributedServiceCardStatus_Mode {
	if m != nil {
		return m.DistributedServiceCardMode
	}
	return DistributedServiceCardStatus_NONE
}

func (m *DistributedServiceCardStatus) GetTransitionPhase() DistributedServiceCardStatus_Transition {
	if m != nil {
		return m.TransitionPhase
	}
	return DistributedServiceCardStatus_TRANSITION_NONE
}

func (m *DistributedServiceCardStatus) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *DistributedServiceCardStatus) GetMgmtIP() string {
	if m != nil {
		return m.MgmtIP
	}
	return ""
}

func (m *DistributedServiceCardStatus) GetDSCName() string {
	if m != nil {
		return m.DSCName
	}
	return ""
}

func (m *DistributedServiceCardStatus) GetFru() *DistributedServiceCardFru {
	if m != nil {
		return m.Fru
	}
	return nil
}

func init() {
	proto.RegisterType((*DistributedServiceCardFru)(nil), "nmd.DistributedServiceCardFru")
	clientApi.RegisterFactory("DistributedServiceCardStatus", DistributedServiceCardStatusFactory)
	proto.RegisterType((*DistributedServiceCardStatus)(nil), "nmd.DistributedServiceCardStatus")
	proto.RegisterEnum("nmd.DistributedServiceCardStatus_Mode", DistributedServiceCardStatus_Mode_name, DistributedServiceCardStatus_Mode_value)
	proto.RegisterEnum("nmd.DistributedServiceCardStatus_Transition", DistributedServiceCardStatus_Transition_name, DistributedServiceCardStatus_Transition_value)
}

func init() { proto.RegisterFile("naples_status.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xd1, 0x4e, 0xdb, 0x30,
	0x18, 0x85, 0x97, 0xa6, 0x94, 0xf6, 0x07, 0x4a, 0x30, 0x12, 0xcb, 0x10, 0x42, 0x28, 0x93, 0xd8,
	0x2e, 0x50, 0x35, 0x75, 0x77, 0xbb, 0x4b, 0x13, 0xb7, 0x58, 0x23, 0x4e, 0x94, 0x04, 0xb8, 0x8c,
	0x4c, 0x63, 0x4a, 0xa6, 0x36, 0x41, 0x8e, 0xc3, 0xf5, 0x2e, 0xf7, 0x06, 0x3c, 0xcf, 0x9e, 0x65,
	0xda, 0x7b, 0x4c, 0x31, 0x61, 0x65, 0x8c, 0x75, 0x97, 0xe7, 0x7c, 0x7f, 0xfd, 0xdb, 0xe7, 0x54,
	0x81, 0xdd, 0x9c, 0xdd, 0xce, 0x79, 0x99, 0x94, 0x92, 0xc9, 0xaa, 0x1c, 0xdc, 0x8a, 0x42, 0x16,
	0x48, 0xcf, 0x17, 0xe9, 0xfe, 0x66, 0xca, 0xe7, 0xb7, 0x37, 0xd9, 0x83, 0x65, 0x7d, 0x6f, 0xc1,
	0x1b, 0x37, 0x2b, 0xa5, 0xc8, 0xae, 0x2a, 0xc9, 0xd3, 0x88, 0x8b, 0xbb, 0x6c, 0xca, 0x1d, 0x26,
	0xd2, 0xb1, 0xa8, 0xd0, 0x09, 0xec, 0x78, 0x2c, 0xaf, 0xae, 0xd9, 0x54, 0x56, 0x22, 0xcb, 0x67,
	0x2e, 0x93, 0xdc, 0xd4, 0x8e, 0xb4, 0xf7, 0xbd, 0xf0, 0x6f, 0x80, 0x2c, 0xd8, 0x5c, 0x9a, 0x5c,
	0x98, 0x2d, 0x35, 0xf8, 0x87, 0x87, 0x8e, 0x60, 0x23, 0x10, 0x45, 0x5a, 0x4d, 0x25, 0x65, 0x0b,
	0x6e, 0xea, 0x6a, 0xe4, 0xa9, 0x85, 0x0e, 0xa0, 0x17, 0x71, 0x91, 0xb1, 0x39, 0xad, 0x16, 0x66,
	0x5b, 0xf1, 0xa5, 0x81, 0x4c, 0x58, 0x0f, 0x98, 0x90, 0x35, 0x5b, 0x53, 0xec, 0x51, 0xd6, 0x64,
	0x54, 0x30, 0x91, 0x92, 0xd4, 0xec, 0x3c, 0x90, 0x46, 0xa2, 0x63, 0xe8, 0xe3, 0x7c, 0xe6, 0xdc,
	0xb0, 0x7c, 0xc6, 0xcf, 0xf8, 0x1d, 0x9f, 0x9b, 0xeb, 0x6a, 0xe0, 0x99, 0x8b, 0x0e, 0x01, 0x68,
	0xb5, 0xf0, 0xd8, 0xd4, 0x4e, 0x53, 0x61, 0x76, 0xd5, 0xcc, 0x13, 0x07, 0xed, 0x41, 0xc7, 0x63,
	0xd3, 0x48, 0x0a, 0xb3, 0xa7, 0x58, 0xa3, 0xac, 0x9f, 0x6b, 0x70, 0xf0, 0x72, 0x86, 0x91, 0x4a,
	0x1f, 0x1d, 0x43, 0xdb, 0xe3, 0x92, 0xa9, 0xe4, 0x36, 0x86, 0x68, 0xd0, 0x34, 0xe0, 0x5f, 0x7d,
	0xe1, 0x53, 0x59, 0x93, 0x50, 0xf1, 0x3a, 0x1c, 0xa7, 0xc8, 0xa5, 0x28, 0xe6, 0x73, 0x2e, 0x4a,
	0x53, 0x3f, 0xd2, 0xeb, 0x70, 0x9e, 0x58, 0xe8, 0x1a, 0xf6, 0x5f, 0xde, 0xe4, 0x15, 0x29, 0x57,
	0x69, 0xf5, 0x87, 0xc7, 0x83, 0x7c, 0x91, 0x0e, 0x56, 0x5d, 0x68, 0x50, 0x4f, 0x87, 0x2b, 0x4e,
	0x42, 0x17, 0xb0, 0x1d, 0x0b, 0x96, 0x97, 0x99, 0xcc, 0x8a, 0x3c, 0xb8, 0x61, 0x25, 0x57, 0x71,
	0xf7, 0x87, 0x27, 0xff, 0x3f, 0x7c, 0xf9, 0xc3, 0xf0, 0xf9, 0x21, 0xa8, 0x0f, 0x2d, 0xe2, 0x36,
	0xfd, 0xb4, 0x88, 0xab, 0x22, 0x9d, 0x2d, 0x24, 0x09, 0x9a, 0x4a, 0x1a, 0x55, 0x97, 0xe9, 0x46,
	0x8e, 0xfa, 0x8b, 0x3c, 0xf4, 0xf0, 0x28, 0xd1, 0x07, 0xd0, 0xc7, 0xa2, 0x52, 0x0d, 0x6c, 0x0c,
	0x0f, 0x57, 0xdc, 0x66, 0x2c, 0xaa, 0xb0, 0x1e, 0xb5, 0x2e, 0xa1, 0xad, 0xde, 0xd4, 0x85, 0x36,
	0xf5, 0x29, 0x36, 0x5e, 0x21, 0x03, 0x36, 0x4f, 0xfd, 0x28, 0x4e, 0x3c, 0x9b, 0xda, 0x13, 0xec,
	0x1a, 0x1a, 0xda, 0x87, 0x3d, 0x8a, 0xe3, 0x4b, 0x3f, 0xfc, 0xfc, 0x68, 0x26, 0x84, 0x8e, 0x6c,
	0xea, 0x1a, 0x2d, 0xf4, 0x1a, 0x76, 0x9f, 0x33, 0xdf, 0x1f, 0x19, 0xba, 0xf5, 0x43, 0x03, 0x58,
	0x3e, 0x10, 0xed, 0xc2, 0x76, 0x1c, 0xda, 0x34, 0x22, 0x31, 0xf1, 0x69, 0xd2, 0xac, 0xda, 0x82,
	0x9e, 0x7b, 0xea, 0x04, 0x49, 0x84, 0x69, 0x6c, 0x68, 0xbf, 0xa5, 0x5b, 0xd3, 0x16, 0xda, 0x81,
	0x2d, 0x25, 0x63, 0xe2, 0x61, 0xd7, 0x3f, 0x8f, 0x0d, 0x1d, 0xbd, 0x83, 0xb7, 0x1e, 0x89, 0x22,
	0x42, 0x27, 0xc9, 0x05, 0xa6, 0xae, 0x1f, 0x26, 0x51, 0x80, 0x1d, 0x32, 0x26, 0xd8, 0x4d, 0xec,
	0x38, 0x0e, 0xc9, 0xe8, 0x3c, 0xc6, 0x91, 0xd1, 0x46, 0x07, 0x60, 0x5e, 0x60, 0x4a, 0x1c, 0x9c,
	0x84, 0x78, 0x42, 0xa2, 0x38, 0xb4, 0xd5, 0x5e, 0xb5, 0x68, 0xed, 0x5f, 0x54, 0xed, 0xed, 0xa0,
	0x3d, 0x40, 0x0d, 0x3d, 0xa7, 0x21, 0xb6, 0x9d, 0x53, 0x7b, 0x74, 0x86, 0x8d, 0x75, 0x84, 0xa0,
	0x1f, 0xe2, 0x91, 0xef, 0xc7, 0x49, 0x80, 0xa9, 0x4b, 0xe8, 0xc4, 0xe8, 0x7e, 0xea, 0x7e, 0xbd,
	0xb7, 0xb4, 0x6f, 0xf7, 0x96, 0x76, 0xd5, 0x51, 0x9f, 0x8c, 0x8f, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xdc, 0x74, 0xb8, 0xe5, 0x5c, 0x04, 0x00, 0x00,
}
