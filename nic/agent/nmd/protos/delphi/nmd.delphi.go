// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nmd.proto

/*
Package nmd is a generated protocol buffer package.

Service name

It is generated from these files:
	nmd.proto

It has these top-level messages:
	Naples
	NaplesSpec
	NaplesStatus
	NaplesCmdExecute
*/
package nmd

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import cluster2 "github.com/pensando/sw/api/generated/cluster"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Operational mode of a Naples
type MgmtMode int32

const (
	MgmtMode_HOST    MgmtMode = 0
	MgmtMode_NETWORK MgmtMode = 1
)

var MgmtMode_name = map[int32]string{
	0: "HOST",
	1: "NETWORK",
}
var MgmtMode_value = map[string]int32{
	"HOST":    0,
	"NETWORK": 1,
}

func (x MgmtMode) String() string {
	return proto.EnumName(MgmtMode_name, int32(x))
}
func (MgmtMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Network Connectivity Mode (only if network managed)
type NetworkMode int32

const (
	NetworkMode_OOB    NetworkMode = 0
	NetworkMode_INBAND NetworkMode = 1
)

var NetworkMode_name = map[int32]string{
	0: "OOB",
	1: "INBAND",
}
var NetworkMode_value = map[string]int32{
	"OOB":    0,
	"INBAND": 1,
}

func (x NetworkMode) String() string {
	return proto.EnumName(NetworkMode_name, int32(x))
}
func (NetworkMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Naples config object
type Naples struct {
	T *api.TypeMeta   `protobuf:"bytes,1,opt,name=T" json:"T,omitempty"`
	O *api.ObjectMeta `protobuf:"bytes,2,opt,name=O" json:"O,omitempty"`
	// Spec contains the configuration of the NIC.
	Spec *NaplesSpec `protobuf:"bytes,3,opt,name=Spec" json:"Spec,omitempty"`
	// Status contains the current state of the NIC.
	Status *NaplesStatus `protobuf:"bytes,4,opt,name=Status" json:"Status,omitempty"`
}

func (m *Naples) Reset()                    { *m = Naples{} }
func (m *Naples) String() string            { return proto.CompactTextString(m) }
func (*Naples) ProtoMessage()               {}
func (*Naples) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Naples) GetT() *api.TypeMeta {
	if m != nil {
		return m.T
	}
	return nil
}

func (m *Naples) GetO() *api.ObjectMeta {
	if m != nil {
		return m.O
	}
	return nil
}

func (m *Naples) GetSpec() *NaplesSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Naples) GetStatus() *NaplesStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// NaplesSpec contains initial bootstrap configuration of the Naples I/O subsystem
type NaplesSpec struct {
	// PrimaryMAC is the MAC address of the primary PF exposed by SmartNIC
	PrimaryMAC string `protobuf:"bytes,1,opt,name=PrimaryMAC" json:"PrimaryMAC,omitempty"`
	// Hostname is used as a user friendly identifier in logs/events
	Hostname string `protobuf:"bytes,2,opt,name=Hostname" json:"Hostname,omitempty"`
	// IPConfig defines the static IP configuration. If not specified, DHCP will be attempted
	IPConfig *cluster2.IPConfig `protobuf:"bytes,3,opt,name=IPConfig" json:"IPConfig,omitempty"`
	// Operational mode of the NIC
	Mode MgmtMode `protobuf:"varint,4,opt,name=Mode,enum=nmd.MgmtMode" json:"Mode,omitempty"`
	// Operational mode of the NIC
	NetworkMode NetworkMode `protobuf:"varint,5,opt,name=NetworkMode,enum=nmd.NetworkMode" json:"NetworkMode,omitempty"`
	// MgmtVlan defines the vlan to be used in network managed mode. The default of 0
	// implies OOB 1G mgmt port is used for management. A non 0 vlan switches the
	// management port to a vlan on data ports.
	MgmtVlan uint32 `protobuf:"varint,6,opt,name=MgmtVlan" json:"MgmtVlan,omitempty"`
	// Controllers contains the list of controller IPs or Hostnames
	Controllers []string `protobuf:"bytes,7,rep,name=Controllers" json:"Controllers,omitempty"`
}

func (m *NaplesSpec) Reset()                    { *m = NaplesSpec{} }
func (m *NaplesSpec) String() string            { return proto.CompactTextString(m) }
func (*NaplesSpec) ProtoMessage()               {}
func (*NaplesSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NaplesSpec) GetPrimaryMAC() string {
	if m != nil {
		return m.PrimaryMAC
	}
	return ""
}

func (m *NaplesSpec) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NaplesSpec) GetIPConfig() *cluster2.IPConfig {
	if m != nil {
		return m.IPConfig
	}
	return nil
}

func (m *NaplesSpec) GetMode() MgmtMode {
	if m != nil {
		return m.Mode
	}
	return MgmtMode_HOST
}

func (m *NaplesSpec) GetNetworkMode() NetworkMode {
	if m != nil {
		return m.NetworkMode
	}
	return NetworkMode_OOB
}

func (m *NaplesSpec) GetMgmtVlan() uint32 {
	if m != nil {
		return m.MgmtVlan
	}
	return 0
}

func (m *NaplesSpec) GetControllers() []string {
	if m != nil {
		return m.Controllers
	}
	return nil
}

// NaplesStatus contains current status of a Naples I/O subsystem
type NaplesStatus struct {
	Meta *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	// Current phase of the NIC adapter in the system
	Phase cluster2.SmartNICStatus_Phase `protobuf:"varint,2,opt,name=Phase,enum=cluster.SmartNICStatus_Phase" json:"Phase,omitempty"`
	// Resolved Controllers/Venice IPs
	Controllers []string `protobuf:"bytes,3,rep,name=Controllers" json:"Controllers,omitempty"`
}

func (m *NaplesStatus) GetDelphiMessage() proto.Message {
	return m
}

func (m *NaplesStatus) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *NaplesStatus) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *NaplesStatus) GetDelphiKey() string {
	return "default"
}

func (m *NaplesStatus) GetDelphiKind() string {
	return "NaplesStatus"
}

func (m *NaplesStatus) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *NaplesStatus) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*NaplesStatus)
	return obj
}

func NaplesStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("NaplesStatus", mode)
}

func GetNaplesStatus(client clientApi.Client) *NaplesStatus {
	o := client.GetObject("NaplesStatus", "default")
	if o == nil {
		return nil
	}
	obj, ok := o.(*NaplesStatus)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func NaplesStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg NaplesStatus
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func NaplesStatusWatch(client clientApi.Client, reactor NaplesStatusReactor) {
	client.WatchKind("NaplesStatus", reactor)
}
func NaplesStatusList(client clientApi.Client) []*NaplesStatus {
	bobjs := client.List("NaplesStatus")
	objs := make([]*NaplesStatus, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*NaplesStatus)
		objs = append(objs, obj)
	}
	return objs
}
func (m *NaplesStatus) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(NaplesStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnNaplesStatusCreate(m)
			} else {
				oldObj, ok := old.(*NaplesStatus)
				if ok == false {
					panic("Not an NaplesStatus object")
				}
				rctr.OnNaplesStatusUpdate(oldObj, m)
			}
		} else {
			rctr.OnNaplesStatusDelete(m)
		}
	}
}

type NaplesStatusReactor interface {
	OnNaplesStatusCreate(obj *NaplesStatus)
	OnNaplesStatusUpdate(old *NaplesStatus, obj *NaplesStatus)
	OnNaplesStatusDelete(obj *NaplesStatus)
}

func (m *NaplesStatus) Reset()                    { *m = NaplesStatus{} }
func (m *NaplesStatus) String() string            { return proto.CompactTextString(m) }
func (*NaplesStatus) ProtoMessage()               {}
func (*NaplesStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NaplesStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NaplesStatus) GetPhase() cluster2.SmartNICStatus_Phase {
	if m != nil {
		return m.Phase
	}
	return cluster2.SmartNICStatus_UNKNOWN
}

func (m *NaplesStatus) GetControllers() []string {
	if m != nil {
		return m.Controllers
	}
	return nil
}

// NaplesCmdExecute contains information on what command to execute
type NaplesCmdExecute struct {
	// Executable to run on naples side
	Executable string `protobuf:"bytes,1,opt,name=Executable" json:"Executable,omitempty"`
	// Flags for the executable to run on naples side
	Opts string `protobuf:"bytes,2,opt,name=Opts" json:"Opts,omitempty"`
}

func (m *NaplesCmdExecute) Reset()                    { *m = NaplesCmdExecute{} }
func (m *NaplesCmdExecute) String() string            { return proto.CompactTextString(m) }
func (*NaplesCmdExecute) ProtoMessage()               {}
func (*NaplesCmdExecute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NaplesCmdExecute) GetExecutable() string {
	if m != nil {
		return m.Executable
	}
	return ""
}

func (m *NaplesCmdExecute) GetOpts() string {
	if m != nil {
		return m.Opts
	}
	return ""
}

func init() {
	proto.RegisterType((*Naples)(nil), "nmd.Naples")
	proto.RegisterType((*NaplesSpec)(nil), "nmd.NaplesSpec")
	clientApi.RegisterFactory("NaplesStatus", NaplesStatusFactory)
	proto.RegisterType((*NaplesStatus)(nil), "nmd.NaplesStatus")
	proto.RegisterType((*NaplesCmdExecute)(nil), "nmd.NaplesCmdExecute")
	proto.RegisterEnum("nmd.MgmtMode", MgmtMode_name, MgmtMode_value)
	proto.RegisterEnum("nmd.NetworkMode", NetworkMode_name, NetworkMode_value)
}

func init() { proto.RegisterFile("nmd.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 728 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xd1, 0x4e, 0xdb, 0x48,
	0x14, 0x86, 0x31, 0x31, 0x49, 0x98, 0x84, 0x60, 0x86, 0x5d, 0x36, 0x20, 0x56, 0x66, 0x23, 0xed,
	0x0a, 0xb1, 0xc4, 0x46, 0xd9, 0x2b, 0x60, 0x6f, 0x70, 0x60, 0x05, 0x5a, 0x25, 0x8e, 0x92, 0xa8,
	0xbd, 0x9e, 0xd8, 0x83, 0xe3, 0xd6, 0x9e, 0x19, 0x79, 0x26, 0x50, 0xa4, 0x5e, 0xf4, 0x86, 0x67,
	0xe8, 0x03, 0xf4, 0x51, 0x7a, 0xc3, 0x65, 0xd5, 0x07, 0xf0, 0x03, 0xe4, 0x29, 0x2a, 0x8f, 0x1d,
	0x32, 0xad, 0xd4, 0x4a, 0xbd, 0x9b, 0x39, 0xe7, 0xff, 0xce, 0xfc, 0x39, 0xe7, 0x38, 0x60, 0x9d,
	0xc4, 0xbe, 0xc5, 0x12, 0x2a, 0x28, 0x2c, 0x91, 0xd8, 0xdf, 0xdb, 0x0f, 0x28, 0x0d, 0x22, 0x6c,
	0x23, 0x16, 0xda, 0x88, 0x10, 0x2a, 0x90, 0x08, 0x29, 0xe1, 0xb9, 0x64, 0xef, 0x2a, 0x08, 0xc5,
	0x74, 0x36, 0xb1, 0x3c, 0x1a, 0xdb, 0x0c, 0x13, 0x8e, 0x88, 0x4f, 0x6d, 0x7e, 0x6f, 0xdf, 0x61,
	0x12, 0x7a, 0xd8, 0x9e, 0x89, 0x30, 0xe2, 0x19, 0x1a, 0x60, 0xa2, 0xd2, 0x76, 0x48, 0xbc, 0x68,
	0xe6, 0xe3, 0x45, 0x99, 0xb6, 0x52, 0x26, 0xa0, 0x01, 0xb5, 0x65, 0x78, 0x32, 0xbb, 0x95, 0x37,
	0x79, 0x91, 0xa7, 0x42, 0xfe, 0xe7, 0x77, 0x5e, 0xcd, 0x3c, 0xc6, 0x58, 0xa0, 0x42, 0x76, 0xf2,
	0x03, 0x99, 0x54, 0x70, 0x9b, 0xc7, 0x28, 0x11, 0x24, 0xf4, 0x0a, 0xa2, 0xee, 0xe3, 0x88, 0x4d,
	0xc3, 0xfc, 0xd6, 0x7a, 0x5c, 0x05, 0xe5, 0x3e, 0x62, 0x11, 0xe6, 0xf0, 0x04, 0x68, 0xe3, 0xa6,
	0x76, 0xa0, 0x1d, 0xd6, 0x3a, 0x1b, 0x16, 0x62, 0xa1, 0x35, 0x7e, 0x60, 0xb8, 0x87, 0x05, 0x72,
	0xb6, 0x9f, 0x52, 0x73, 0xe5, 0x53, 0x6a, 0x6a, 0xf3, 0xd4, 0xac, 0x1c, 0x87, 0x24, 0x0a, 0x09,
	0x1e, 0x6a, 0x63, 0x78, 0x0a, 0x34, 0xb7, 0xb9, 0x2a, 0x89, 0x4d, 0x49, 0xb8, 0x93, 0x57, 0xd8,
	0x13, 0x92, 0xd9, 0x53, 0x98, 0x46, 0x66, 0xf8, 0x98, 0xc6, 0xa1, 0xc0, 0x31, 0x13, 0x0f, 0x43,
	0xcd, 0x85, 0xe7, 0x40, 0x1f, 0x31, 0xec, 0x35, 0x4b, 0x05, 0x9d, 0x4d, 0x24, 0xf7, 0x91, 0x85,
	0x9d, 0x9d, 0x8c, 0xce, 0x48, 0xce, 0xb0, 0xa7, 0x90, 0x12, 0x82, 0x5d, 0x50, 0x1e, 0x09, 0x24,
	0x66, 0xbc, 0xa9, 0x4b, 0x7c, 0x4b, 0xc5, 0x65, 0xc2, 0x69, 0x16, 0x05, 0x0c, 0x2e, 0xef, 0x4a,
	0x89, 0x02, 0x3d, 0xab, 0x7f, 0x7e, 0xdc, 0xad, 0xc2, 0xb2, 0x47, 0xc9, 0x6d, 0x18, 0xb4, 0x3e,
	0x94, 0x00, 0x58, 0xbe, 0x0f, 0x4f, 0x01, 0x18, 0x24, 0x61, 0x8c, 0x92, 0x87, 0xde, 0x45, 0x57,
	0x36, 0x65, 0xdd, 0xd9, 0x9d, 0xa7, 0xe6, 0xaf, 0x2c, 0x8f, 0xb6, 0x63, 0xa4, 0xda, 0x52, 0xc4,
	0xb0, 0x03, 0xaa, 0xd7, 0x94, 0x0b, 0x82, 0x62, 0x2c, 0x7b, 0xb3, 0xee, 0xec, 0xcc, 0x53, 0x13,
	0x4e, 0x8b, 0x98, 0x42, 0x3d, 0xeb, 0xe0, 0x7f, 0xa0, 0x7a, 0x33, 0xe8, 0x4a, 0x27, 0x45, 0x47,
	0xb6, 0x2c, 0x2f, 0x9a, 0x71, 0x81, 0x13, 0x6b, 0x91, 0x70, 0x7e, 0x9b, 0xa7, 0xe6, 0x76, 0xc8,
	0xda, 0xb9, 0x63, 0xb5, 0xce, 0x42, 0x02, 0xff, 0x06, 0x7a, 0x8f, 0xfa, 0x58, 0xb6, 0xa5, 0xd1,
	0xd9, 0x90, 0x6d, 0xe9, 0x05, 0xb1, 0xc8, 0x82, 0x4e, 0x75, 0x9e, 0x9a, 0x7a, 0x4c, 0x7d, 0x3c,
	0x94, 0x22, 0x78, 0x09, 0x6a, 0x7d, 0x2c, 0xee, 0x69, 0xf2, 0x5a, 0x32, 0x6b, 0x92, 0x31, 0xf2,
	0x56, 0x2e, 0xe3, 0x8e, 0x31, 0x4f, 0xcd, 0x3a, 0xc9, 0x03, 0x6d, 0x89, 0xab, 0x18, 0xb4, 0x40,
	0x35, 0x7b, 0xe1, 0x45, 0x84, 0x48, 0xb3, 0x7c, 0xa0, 0x1d, 0x6e, 0x38, 0x30, 0x9b, 0xdb, 0x5d,
	0x84, 0x88, 0x6a, 0x71, 0xa1, 0x81, 0xe7, 0xa0, 0xd6, 0xa5, 0x44, 0x24, 0x34, 0x8a, 0x70, 0xc2,
	0x9b, 0x95, 0x83, 0xd2, 0xa2, 0xb5, 0xde, 0x32, 0xac, 0x90, 0xaa, 0xba, 0xf5, 0x51, 0x03, 0x75,
	0x75, 0xcc, 0xf0, 0x2f, 0xa0, 0x67, 0xdb, 0x56, 0xac, 0x2d, 0xb4, 0x8a, 0xdd, 0x5e, 0xee, 0xe1,
	0x50, 0xe6, 0xe1, 0x35, 0x58, 0x1b, 0x4c, 0x11, 0xcf, 0x27, 0xd2, 0xe8, 0xfc, 0xfe, 0xdc, 0xdd,
	0x51, 0xf6, 0x71, 0xf4, 0x6f, 0xba, 0x79, 0x3d, 0x4b, 0x8a, 0x9c, 0xed, 0x79, 0x6a, 0x6e, 0xb2,
	0xec, 0xa8, 0x18, 0xc9, 0x0b, 0x7c, 0xeb, 0xbf, 0xf4, 0x33, 0xfe, 0xcf, 0xf4, 0x77, 0xef, 0x5b,
	0x5a, 0xeb, 0x2d, 0x30, 0xf2, 0x1f, 0xd1, 0x8d, 0xfd, 0xab, 0x37, 0xd8, 0x9b, 0x09, 0x0c, 0xff,
	0x05, 0x20, 0x3f, 0xa2, 0x49, 0x84, 0x8b, 0x85, 0xdb, 0x7f, 0xca, 0x3f, 0x9f, 0x5f, 0xf0, 0x73,
	0x46, 0xdd, 0xb9, 0xa5, 0x1e, 0x1e, 0x01, 0xdd, 0x65, 0x82, 0x2f, 0xf6, 0xad, 0xe0, 0x1a, 0x94,
	0x09, 0xd5, 0x8a, 0xd4, 0x1c, 0xfd, 0x91, 0x0f, 0x4c, 0x0e, 0xaf, 0x0a, 0xf4, 0x6b, 0x77, 0x34,
	0x36, 0x56, 0x60, 0x0d, 0x54, 0xfa, 0x57, 0xe3, 0x97, 0xee, 0xf0, 0x7f, 0x43, 0x3b, 0x6a, 0x7d,
	0xb5, 0x19, 0xb0, 0x02, 0x4a, 0xae, 0xeb, 0x18, 0x2b, 0x10, 0x80, 0xf2, 0x4d, 0xdf, 0xb9, 0xe8,
	0x5f, 0x1a, 0xda, 0x40, 0x9b, 0x94, 0xe5, 0x3f, 0xc8, 0x3f, 0x5f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xd0, 0x41, 0xf3, 0x86, 0x4e, 0x05, 0x00, 0x00,
}
