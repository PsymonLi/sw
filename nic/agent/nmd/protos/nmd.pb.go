// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nmd.proto

/*
	Package nmd is a generated protocol buffer package.

	Service name

	It is generated from these files:
		nmd.proto

	It has these top-level messages:
		NaplesFru
		Naples
		NaplesSpec
		NaplesStatus
		NaplesCmdExecute
*/
package nmd

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import cluster2 "github.com/pensando/sw/api/generated/cluster"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Operational mode of a Naples
type MgmtMode int32

const (
	MgmtMode_HOST    MgmtMode = 0
	MgmtMode_NETWORK MgmtMode = 1
)

var MgmtMode_name = map[int32]string{
	0: "HOST",
	1: "NETWORK",
}
var MgmtMode_value = map[string]int32{
	"HOST":    0,
	"NETWORK": 1,
}

func (x MgmtMode) String() string {
	return proto.EnumName(MgmtMode_name, int32(x))
}
func (MgmtMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorNmd, []int{0} }

// Network Connectivity Mode (only if network managed)
type NetworkMode int32

const (
	NetworkMode_NONE   NetworkMode = 0
	NetworkMode_OOB    NetworkMode = 1
	NetworkMode_INBAND NetworkMode = 2
)

var NetworkMode_name = map[int32]string{
	0: "NONE",
	1: "OOB",
	2: "INBAND",
}
var NetworkMode_value = map[string]int32{
	"NONE":   0,
	"OOB":    1,
	"INBAND": 2,
}

func (x NetworkMode) String() string {
	return proto.EnumName(NetworkMode_name, int32(x))
}
func (NetworkMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorNmd, []int{1} }

type NaplesStatus_Transition int32

const (
	NaplesStatus_NONE                                NaplesStatus_Transition = 0
	NaplesStatus_DHCP_SENT                           NaplesStatus_Transition = 1
	NaplesStatus_DHCP_DONE                           NaplesStatus_Transition = 2
	NaplesStatus_DHCP_TIMEDOUT                       NaplesStatus_Transition = 3
	NaplesStatus_MISSING_VENDOR_SPECIFIED_ATTRIBUTES NaplesStatus_Transition = 4
	NaplesStatus_VENICE_REGISTRATION_SENT            NaplesStatus_Transition = 5
	NaplesStatus_VENICE_REGISTRATION_DONE            NaplesStatus_Transition = 6
	NaplesStatus_VENICE_UNREACHABLE                  NaplesStatus_Transition = 7
	NaplesStatus_REBOOT_PENDING                      NaplesStatus_Transition = 8
)

var NaplesStatus_Transition_name = map[int32]string{
	0: "NONE",
	1: "DHCP_SENT",
	2: "DHCP_DONE",
	3: "DHCP_TIMEDOUT",
	4: "MISSING_VENDOR_SPECIFIED_ATTRIBUTES",
	5: "VENICE_REGISTRATION_SENT",
	6: "VENICE_REGISTRATION_DONE",
	7: "VENICE_UNREACHABLE",
	8: "REBOOT_PENDING",
}
var NaplesStatus_Transition_value = map[string]int32{
	"NONE":                                0,
	"DHCP_SENT":                           1,
	"DHCP_DONE":                           2,
	"DHCP_TIMEDOUT":                       3,
	"MISSING_VENDOR_SPECIFIED_ATTRIBUTES": 4,
	"VENICE_REGISTRATION_SENT":            5,
	"VENICE_REGISTRATION_DONE":            6,
	"VENICE_UNREACHABLE":                  7,
	"REBOOT_PENDING":                      8,
}

func (x NaplesStatus_Transition) String() string {
	return proto.EnumName(NaplesStatus_Transition_name, int32(x))
}
func (NaplesStatus_Transition) EnumDescriptor() ([]byte, []int) { return fileDescriptorNmd, []int{3, 0} }

// Naples Fru object
type NaplesFru struct {
	ManufacturingDate string `protobuf:"bytes,1,opt,name=ManufacturingDate,proto3" json:"manufacturing-date,omitempty"`
	Manufacturer      string `protobuf:"bytes,2,opt,name=Manufacturer,proto3" json:"manufacturer,omitempty"`
	ProductName       string `protobuf:"bytes,3,opt,name=ProductName,proto3" json:"product-name,omitempty"`
	SerialNum         string `protobuf:"bytes,4,opt,name=SerialNum,proto3" json:"serial-number,omitempty"`
	PartNum           string `protobuf:"bytes,5,opt,name=PartNum,proto3" json:"part-number,omitempty"`
	BoardId           string `protobuf:"bytes,6,opt,name=BoardId,proto3" json:"board-id,omitempty"`
	EngChangeLevel    string `protobuf:"bytes,7,opt,name=EngChangeLevel,proto3" json:"change-level,omitempty"`
	NumMacAddr        string `protobuf:"bytes,8,opt,name=NumMacAddr,proto3" json:"number-mac-addresses,omitempty"`
	MacStr            string `protobuf:"bytes,9,opt,name=MacStr,proto3" json:"mac-string,omitempty"`
}

func (m *NaplesFru) Reset()                    { *m = NaplesFru{} }
func (m *NaplesFru) String() string            { return proto.CompactTextString(m) }
func (*NaplesFru) ProtoMessage()               {}
func (*NaplesFru) Descriptor() ([]byte, []int) { return fileDescriptorNmd, []int{0} }

func (m *NaplesFru) GetManufacturingDate() string {
	if m != nil {
		return m.ManufacturingDate
	}
	return ""
}

func (m *NaplesFru) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *NaplesFru) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *NaplesFru) GetSerialNum() string {
	if m != nil {
		return m.SerialNum
	}
	return ""
}

func (m *NaplesFru) GetPartNum() string {
	if m != nil {
		return m.PartNum
	}
	return ""
}

func (m *NaplesFru) GetBoardId() string {
	if m != nil {
		return m.BoardId
	}
	return ""
}

func (m *NaplesFru) GetEngChangeLevel() string {
	if m != nil {
		return m.EngChangeLevel
	}
	return ""
}

func (m *NaplesFru) GetNumMacAddr() string {
	if m != nil {
		return m.NumMacAddr
	}
	return ""
}

func (m *NaplesFru) GetMacStr() string {
	if m != nil {
		return m.MacStr
	}
	return ""
}

// Naples config object
type Naples struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of the NIC.
	Spec NaplesSpec `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	// Status contains the current state of the NIC.
	Status NaplesStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Naples) Reset()                    { *m = Naples{} }
func (m *Naples) String() string            { return proto.CompactTextString(m) }
func (*Naples) ProtoMessage()               {}
func (*Naples) Descriptor() ([]byte, []int) { return fileDescriptorNmd, []int{1} }

func (m *Naples) GetSpec() NaplesSpec {
	if m != nil {
		return m.Spec
	}
	return NaplesSpec{}
}

func (m *Naples) GetStatus() NaplesStatus {
	if m != nil {
		return m.Status
	}
	return NaplesStatus{}
}

// NaplesSpec contains initial bootstrap configuration of the Naples I/O subsystem
type NaplesSpec struct {
	// PrimaryMAC is the MAC address of the primary PF exposed by SmartNIC
	PrimaryMAC string `protobuf:"bytes,1,opt,name=PrimaryMAC,proto3" json:"primary-mac,omitempty"`
	// Hostname is used as a user friendly identifier in logs/events
	Hostname string `protobuf:"bytes,2,opt,name=Hostname,proto3" json:"hostname,omitempty"`
	// IPConfig defines the static IP configuration. If not specified, DHCP will be attempted
	IPConfig *cluster2.IPConfig `protobuf:"bytes,3,opt,name=IPConfig" json:"ip-config,omitempty"`
	// Operational mode of the NIC
	Mode string `protobuf:"bytes,4,opt,name=Mode,proto3" json:"mode"`
	// Operational mode of the NIC
	NetworkMode string `protobuf:"bytes,5,opt,name=NetworkMode,proto3" json:"network-mode"`
	// MgmtVlan defines the vlan to be used in network managed mode. The default of 0
	// implies OOB 1G mgmt port is used for management. A non 0 vlan switches the
	// management port to a vlan on data ports.
	MgmtVlan uint32 `protobuf:"varint,6,opt,name=MgmtVlan,proto3" json:"vlan,omitempty"`
	// Controllers contains the list of controller IPs or Hostnames
	Controllers []string `protobuf:"bytes,7,rep,name=Controllers" json:"controllers,omitempty"`
	// NaplesProfile captures the smart nic profile that is associated with this Naples
	NaplesProfile string `protobuf:"bytes,8,opt,name=NaplesProfile,proto3" json:"naples-profile,omitempty"`
}

func (m *NaplesSpec) Reset()                    { *m = NaplesSpec{} }
func (m *NaplesSpec) String() string            { return proto.CompactTextString(m) }
func (*NaplesSpec) ProtoMessage()               {}
func (*NaplesSpec) Descriptor() ([]byte, []int) { return fileDescriptorNmd, []int{2} }

func (m *NaplesSpec) GetPrimaryMAC() string {
	if m != nil {
		return m.PrimaryMAC
	}
	return ""
}

func (m *NaplesSpec) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NaplesSpec) GetIPConfig() *cluster2.IPConfig {
	if m != nil {
		return m.IPConfig
	}
	return nil
}

func (m *NaplesSpec) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *NaplesSpec) GetNetworkMode() string {
	if m != nil {
		return m.NetworkMode
	}
	return ""
}

func (m *NaplesSpec) GetMgmtVlan() uint32 {
	if m != nil {
		return m.MgmtVlan
	}
	return 0
}

func (m *NaplesSpec) GetControllers() []string {
	if m != nil {
		return m.Controllers
	}
	return nil
}

func (m *NaplesSpec) GetNaplesProfile() string {
	if m != nil {
		return m.NaplesProfile
	}
	return ""
}

// NaplesStatus contains current status of a Naples I/O subsystem
type NaplesStatus struct {
	// Current phase of the NIC adapter in the system
	AdmissionPhase string             `protobuf:"bytes,1,opt,name=AdmissionPhase,proto3" json:"phase,omitempty"`
	IPConfig       *cluster2.IPConfig `protobuf:"bytes,2,opt,name=IPConfig" json:"ip-config,omitempty"`
	// Resolved Controllers/Venice IPs
	Controllers     []string `protobuf:"bytes,3,rep,name=Controllers" json:"controllers,omitempty"`
	TransitionPhase string   `protobuf:"bytes,4,opt,name=TransitionPhase,proto3" json:"transition-phase,omitempty"`
	// Operational mode of the NIC
	Mode string `protobuf:"bytes,5,opt,name=Mode,proto3" json:"mode"`
	// FRU information read from FRU.json
	Fru *NaplesFru `protobuf:"bytes,7,opt,name=Fru" json:"fru,omitempty"`
	// Naples generated SmartNIC name which should be used as UUID for Naples
	SmartNicName string `protobuf:"bytes,8,opt,name=SmartNicName,proto3" json:"smartnic-name,omitempty"`
}

func (m *NaplesStatus) Reset()                    { *m = NaplesStatus{} }
func (m *NaplesStatus) String() string            { return proto.CompactTextString(m) }
func (*NaplesStatus) ProtoMessage()               {}
func (*NaplesStatus) Descriptor() ([]byte, []int) { return fileDescriptorNmd, []int{3} }

func (m *NaplesStatus) GetAdmissionPhase() string {
	if m != nil {
		return m.AdmissionPhase
	}
	return ""
}

func (m *NaplesStatus) GetIPConfig() *cluster2.IPConfig {
	if m != nil {
		return m.IPConfig
	}
	return nil
}

func (m *NaplesStatus) GetControllers() []string {
	if m != nil {
		return m.Controllers
	}
	return nil
}

func (m *NaplesStatus) GetTransitionPhase() string {
	if m != nil {
		return m.TransitionPhase
	}
	return ""
}

func (m *NaplesStatus) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *NaplesStatus) GetFru() *NaplesFru {
	if m != nil {
		return m.Fru
	}
	return nil
}

func (m *NaplesStatus) GetSmartNicName() string {
	if m != nil {
		return m.SmartNicName
	}
	return ""
}

// NaplesCmdExecute contains information on what command to execute
type NaplesCmdExecute struct {
	// Executable to run on naples side
	Executable string `protobuf:"bytes,1,opt,name=Executable,proto3" json:"executable,omitempty"`
	// Flags for the executable to run on naples side
	Opts string `protobuf:"bytes,2,opt,name=Opts,proto3" json:"opts,omitempty"`
	// Environment variables to set on naples side to execute the command
	Env string `protobuf:"bytes,3,opt,name=Env,proto3" json:"env,omitempty"`
}

func (m *NaplesCmdExecute) Reset()                    { *m = NaplesCmdExecute{} }
func (m *NaplesCmdExecute) String() string            { return proto.CompactTextString(m) }
func (*NaplesCmdExecute) ProtoMessage()               {}
func (*NaplesCmdExecute) Descriptor() ([]byte, []int) { return fileDescriptorNmd, []int{4} }

func (m *NaplesCmdExecute) GetExecutable() string {
	if m != nil {
		return m.Executable
	}
	return ""
}

func (m *NaplesCmdExecute) GetOpts() string {
	if m != nil {
		return m.Opts
	}
	return ""
}

func (m *NaplesCmdExecute) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func init() {
	proto.RegisterType((*NaplesFru)(nil), "nmd.NaplesFru")
	proto.RegisterType((*Naples)(nil), "nmd.Naples")
	proto.RegisterType((*NaplesSpec)(nil), "nmd.NaplesSpec")
	proto.RegisterType((*NaplesStatus)(nil), "nmd.NaplesStatus")
	proto.RegisterType((*NaplesCmdExecute)(nil), "nmd.NaplesCmdExecute")
	proto.RegisterEnum("nmd.MgmtMode", MgmtMode_name, MgmtMode_value)
	proto.RegisterEnum("nmd.NetworkMode", NetworkMode_name, NetworkMode_value)
	proto.RegisterEnum("nmd.NaplesStatus_Transition", NaplesStatus_Transition_name, NaplesStatus_Transition_value)
}
func (m *NaplesFru) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NaplesFru) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ManufacturingDate) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.ManufacturingDate)))
		i += copy(dAtA[i:], m.ManufacturingDate)
	}
	if len(m.Manufacturer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.Manufacturer)))
		i += copy(dAtA[i:], m.Manufacturer)
	}
	if len(m.ProductName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.ProductName)))
		i += copy(dAtA[i:], m.ProductName)
	}
	if len(m.SerialNum) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.SerialNum)))
		i += copy(dAtA[i:], m.SerialNum)
	}
	if len(m.PartNum) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.PartNum)))
		i += copy(dAtA[i:], m.PartNum)
	}
	if len(m.BoardId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.BoardId)))
		i += copy(dAtA[i:], m.BoardId)
	}
	if len(m.EngChangeLevel) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.EngChangeLevel)))
		i += copy(dAtA[i:], m.EngChangeLevel)
	}
	if len(m.NumMacAddr) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.NumMacAddr)))
		i += copy(dAtA[i:], m.NumMacAddr)
	}
	if len(m.MacStr) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.MacStr)))
		i += copy(dAtA[i:], m.MacStr)
	}
	return i, nil
}

func (m *Naples) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Naples) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNmd(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintNmd(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNmd(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintNmd(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *NaplesSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NaplesSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PrimaryMAC) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.PrimaryMAC)))
		i += copy(dAtA[i:], m.PrimaryMAC)
	}
	if len(m.Hostname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	if m.IPConfig != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(m.IPConfig.Size()))
		n5, err := m.IPConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Mode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.Mode)))
		i += copy(dAtA[i:], m.Mode)
	}
	if len(m.NetworkMode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.NetworkMode)))
		i += copy(dAtA[i:], m.NetworkMode)
	}
	if m.MgmtVlan != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNmd(dAtA, i, uint64(m.MgmtVlan))
	}
	if len(m.Controllers) > 0 {
		for _, s := range m.Controllers {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.NaplesProfile) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.NaplesProfile)))
		i += copy(dAtA[i:], m.NaplesProfile)
	}
	return i, nil
}

func (m *NaplesStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NaplesStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AdmissionPhase) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.AdmissionPhase)))
		i += copy(dAtA[i:], m.AdmissionPhase)
	}
	if m.IPConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNmd(dAtA, i, uint64(m.IPConfig.Size()))
		n6, err := m.IPConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Controllers) > 0 {
		for _, s := range m.Controllers {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.TransitionPhase) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.TransitionPhase)))
		i += copy(dAtA[i:], m.TransitionPhase)
	}
	if len(m.Mode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.Mode)))
		i += copy(dAtA[i:], m.Mode)
	}
	if m.Fru != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(m.Fru.Size()))
		n7, err := m.Fru.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.SmartNicName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.SmartNicName)))
		i += copy(dAtA[i:], m.SmartNicName)
	}
	return i, nil
}

func (m *NaplesCmdExecute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NaplesCmdExecute) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Executable) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.Executable)))
		i += copy(dAtA[i:], m.Executable)
	}
	if len(m.Opts) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.Opts)))
		i += copy(dAtA[i:], m.Opts)
	}
	if len(m.Env) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.Env)))
		i += copy(dAtA[i:], m.Env)
	}
	return i, nil
}

func encodeVarintNmd(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NaplesFru) Size() (n int) {
	var l int
	_ = l
	l = len(m.ManufacturingDate)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.Manufacturer)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.SerialNum)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.PartNum)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.BoardId)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.EngChangeLevel)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.NumMacAddr)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.MacStr)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	return n
}

func (m *Naples) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNmd(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNmd(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNmd(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNmd(uint64(l))
	return n
}

func (m *NaplesSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.PrimaryMAC)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	if m.IPConfig != nil {
		l = m.IPConfig.Size()
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.NetworkMode)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	if m.MgmtVlan != 0 {
		n += 1 + sovNmd(uint64(m.MgmtVlan))
	}
	if len(m.Controllers) > 0 {
		for _, s := range m.Controllers {
			l = len(s)
			n += 1 + l + sovNmd(uint64(l))
		}
	}
	l = len(m.NaplesProfile)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	return n
}

func (m *NaplesStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.AdmissionPhase)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	if m.IPConfig != nil {
		l = m.IPConfig.Size()
		n += 1 + l + sovNmd(uint64(l))
	}
	if len(m.Controllers) > 0 {
		for _, s := range m.Controllers {
			l = len(s)
			n += 1 + l + sovNmd(uint64(l))
		}
	}
	l = len(m.TransitionPhase)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	if m.Fru != nil {
		l = m.Fru.Size()
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.SmartNicName)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	return n
}

func (m *NaplesCmdExecute) Size() (n int) {
	var l int
	_ = l
	l = len(m.Executable)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.Opts)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	return n
}

func sovNmd(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNmd(x uint64) (n int) {
	return sovNmd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NaplesFru) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NaplesFru: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NaplesFru: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManufacturingDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManufacturingDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manufacturer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manufacturer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngChangeLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EngChangeLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumMacAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumMacAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Naples) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Naples: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Naples: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NaplesSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NaplesSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NaplesSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryMAC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryMAC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IPConfig == nil {
				m.IPConfig = &cluster2.IPConfig{}
			}
			if err := m.IPConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MgmtVlan", wireType)
			}
			m.MgmtVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MgmtVlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controllers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controllers = append(m.Controllers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NaplesProfile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NaplesProfile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NaplesStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NaplesStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NaplesStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdmissionPhase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdmissionPhase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IPConfig == nil {
				m.IPConfig = &cluster2.IPConfig{}
			}
			if err := m.IPConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controllers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controllers = append(m.Controllers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransitionPhase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransitionPhase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fru", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fru == nil {
				m.Fru = &NaplesFru{}
			}
			if err := m.Fru.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartNicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmartNicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NaplesCmdExecute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NaplesCmdExecute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NaplesCmdExecute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNmd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNmd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNmd
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNmd
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNmd(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNmd = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNmd   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("nmd.proto", fileDescriptorNmd) }

var fileDescriptorNmd = []byte{
	// 1268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x41, 0x6f, 0xdb, 0xc6,
	0x12, 0x0e, 0x2d, 0x59, 0x92, 0x47, 0xb6, 0x23, 0x6f, 0x12, 0x87, 0x76, 0x0c, 0xd3, 0xcf, 0xef,
	0x05, 0xc9, 0x0b, 0x22, 0xc9, 0x70, 0x2e, 0x4d, 0x13, 0xb4, 0x10, 0x25, 0x3a, 0x26, 0x1a, 0x91,
	0xaa, 0xc4, 0xa4, 0x47, 0x63, 0x45, 0xae, 0x65, 0xb6, 0xe4, 0x92, 0x20, 0x97, 0x4e, 0x73, 0xec,
	0x21, 0xfe, 0x27, 0xbd, 0xf8, 0xde, 0xff, 0x90, 0x63, 0xd0, 0x53, 0x4f, 0x44, 0x91, 0xa3, 0x8e,
	0xfd, 0x05, 0x05, 0x97, 0x94, 0xb5, 0x72, 0x90, 0x02, 0x41, 0x6f, 0xdc, 0x99, 0xef, 0x9b, 0xdd,
	0xd9, 0xf9, 0x66, 0x96, 0xb0, 0x42, 0x7d, 0xa7, 0x15, 0x46, 0x01, 0x0b, 0x50, 0x89, 0xfa, 0xce,
	0xf6, 0xce, 0x24, 0x08, 0x26, 0x1e, 0x69, 0xe3, 0xd0, 0x6d, 0x63, 0x4a, 0x03, 0x86, 0x99, 0x1b,
	0xd0, 0x38, 0x87, 0x6c, 0x6b, 0x13, 0x97, 0x9d, 0x25, 0xe3, 0x96, 0x1d, 0xf8, 0xed, 0x90, 0xd0,
	0x18, 0x53, 0x27, 0x68, 0xc7, 0x6f, 0xda, 0xe7, 0x84, 0xba, 0x36, 0x69, 0x27, 0xcc, 0xf5, 0xe2,
	0x8c, 0x3a, 0x21, 0x54, 0x64, 0xb7, 0x5d, 0x6a, 0x7b, 0x89, 0x43, 0x66, 0x61, 0x9a, 0x42, 0x98,
	0x49, 0x30, 0x09, 0xda, 0xdc, 0x3c, 0x4e, 0x4e, 0xf9, 0x8a, 0x2f, 0xf8, 0x57, 0x01, 0xbf, 0xff,
	0x99, 0x5d, 0xb3, 0x33, 0xfa, 0x84, 0xe1, 0x02, 0x76, 0xf0, 0x0f, 0x30, 0x8e, 0x88, 0xdb, 0xb1,
	0x8f, 0x23, 0x46, 0x5d, 0x3b, 0x67, 0xec, 0xff, 0x56, 0x86, 0x15, 0x03, 0x87, 0x1e, 0x89, 0x8f,
	0xa2, 0x04, 0x19, 0xb0, 0xd1, 0xc7, 0x34, 0x39, 0xc5, 0x36, 0x4b, 0x22, 0x97, 0x4e, 0x7a, 0x98,
	0x11, 0x59, 0xda, 0x93, 0x1e, 0xae, 0xa8, 0x7b, 0xd3, 0x54, 0xd9, 0xf1, 0x45, 0x67, 0xd3, 0xc1,
	0x8c, 0x3c, 0x0e, 0x7c, 0x97, 0x11, 0x3f, 0x64, 0x6f, 0x87, 0x9f, 0x52, 0xd1, 0x37, 0xb0, 0x3a,
	0x37, 0x92, 0x48, 0x5e, 0xe2, 0xa1, 0xb6, 0xa7, 0xa9, 0xb2, 0xe9, 0x0b, 0x76, 0x21, 0xc8, 0x02,
	0x1e, 0x3d, 0x87, 0xfa, 0x20, 0x0a, 0x9c, 0xc4, 0x66, 0x06, 0xf6, 0x89, 0x5c, 0x9a, 0xd3, 0xc3,
	0xdc, 0xdc, 0xa4, 0xd8, 0x17, 0xcf, 0x20, 0xc2, 0xd1, 0x53, 0x58, 0x19, 0x91, 0xc8, 0xc5, 0x9e,
	0x91, 0xf8, 0x72, 0x99, 0x73, 0xef, 0x4d, 0x53, 0xe5, 0x6e, 0xcc, 0x8d, 0x4d, 0x9a, 0xf8, 0xe3,
	0x85, 0xbd, 0xe7, 0x68, 0xf4, 0x04, 0xaa, 0x03, 0x1c, 0xb1, 0x8c, 0xb8, 0xcc, 0x89, 0x5b, 0xd3,
	0x54, 0xb9, 0x13, 0xe2, 0x88, 0x7d, 0x4a, 0x9b, 0x21, 0xd1, 0x01, 0x54, 0xd5, 0x00, 0x47, 0x8e,
	0xee, 0xc8, 0x15, 0x4e, 0xda, 0x9c, 0xa6, 0x0a, 0x1a, 0x67, 0xa6, 0xa6, 0xeb, 0x88, 0x8c, 0x02,
	0x86, 0x54, 0x58, 0xd7, 0xe8, 0xa4, 0x7b, 0x86, 0xe9, 0x84, 0xbc, 0x24, 0xe7, 0xc4, 0x93, 0xab,
	0xf3, 0x14, 0x6d, 0x6e, 0x6e, 0x7a, 0x99, 0x5d, 0x20, 0x5f, 0x63, 0x20, 0x15, 0xc0, 0x48, 0xfc,
	0x3e, 0xb6, 0x3b, 0x8e, 0x13, 0xc9, 0x35, 0xce, 0xdf, 0x9f, 0xa6, 0xca, 0x6e, 0x7e, 0xd0, 0xa6,
	0x8f, 0xed, 0x26, 0x76, 0x9c, 0x88, 0xc4, 0x31, 0x89, 0x85, 0x38, 0x02, 0x0b, 0x1d, 0x40, 0xa5,
	0x8f, 0xed, 0x11, 0x8b, 0xe4, 0x15, 0xce, 0x97, 0xa7, 0xa9, 0x72, 0x3b, 0x23, 0xc6, 0x2c, 0xab,
	0xa5, 0xc0, 0x2a, 0x70, 0xfb, 0xef, 0x96, 0xa0, 0x92, 0xeb, 0x06, 0x1d, 0x80, 0x64, 0x71, 0x91,
	0xd4, 0x0f, 0xd7, 0x5a, 0x38, 0x74, 0x5b, 0xd6, 0xdb, 0x90, 0xf4, 0x09, 0xc3, 0xea, 0xad, 0xf7,
	0xa9, 0x72, 0xe3, 0x43, 0xaa, 0x48, 0xd3, 0x54, 0xa9, 0x3e, 0x76, 0xa9, 0xe7, 0x52, 0x32, 0x94,
	0x2c, 0xf4, 0x14, 0x24, 0x93, 0x6b, 0xa1, 0x7e, 0x78, 0x93, 0x33, 0xcc, 0xf1, 0x8f, 0xc4, 0x66,
	0x9c, 0xb3, 0x2d, 0x70, 0xd6, 0x33, 0x69, 0x0b, 0x9b, 0x4b, 0x26, 0x7a, 0x06, 0xe5, 0x51, 0x48,
	0x6c, 0x2e, 0x85, 0x8c, 0x9d, 0xf5, 0x6e, 0x7e, 0x8e, 0xcc, 0xac, 0x6e, 0x66, 0xec, 0x8c, 0x19,
	0x87, 0xc4, 0x16, 0x98, 0x9c, 0x84, 0xba, 0x50, 0x19, 0x31, 0xcc, 0x92, 0x98, 0xab, 0xa1, 0x7e,
	0xb8, 0x21, 0xd2, 0xb9, 0x43, 0x95, 0x8b, 0x00, 0x8d, 0x98, 0xaf, 0xc5, 0xcc, 0x73, 0xc4, 0xd7,
	0xab, 0xbf, 0xbf, 0xdb, 0xaa, 0xa1, 0x8a, 0x1d, 0xd0, 0x53, 0x77, 0xb2, 0xff, 0x4b, 0x19, 0x60,
	0xbe, 0x3f, 0x7a, 0x0a, 0x30, 0x88, 0x5c, 0x1f, 0x47, 0x6f, 0xfb, 0x9d, 0x6e, 0xd1, 0x39, 0xb9,
	0x74, 0x72, 0x6b, 0x56, 0x0d, 0xb1, 0x06, 0x73, 0x30, 0x3a, 0x84, 0xda, 0x71, 0x10, 0xb3, 0x4c,
	0xd0, 0x45, 0x9f, 0x70, 0xf9, 0x9c, 0x15, 0x36, 0x81, 0x75, 0x85, 0x43, 0x47, 0x50, 0xd3, 0x07,
	0x5d, 0x7e, 0x92, 0xe2, 0x46, 0x36, 0x5a, 0xb6, 0x97, 0xc4, 0x8c, 0x44, 0xad, 0x99, 0x43, 0xbd,
	0x3b, 0x4d, 0x95, 0x5b, 0x6e, 0xd8, 0xcc, 0x4f, 0x2c, 0xc6, 0x99, 0x41, 0xd0, 0x57, 0x50, 0xee,
	0x07, 0x0e, 0x29, 0x9a, 0xe4, 0x7f, 0x97, 0x17, 0x5b, 0xf2, 0x88, 0x45, 0x1a, 0x4d, 0xfc, 0x87,
	0x79, 0x72, 0xad, 0xfe, 0xc4, 0x67, 0x19, 0xe4, 0xff, 0xd3, 0x54, 0x29, 0xfb, 0x81, 0x43, 0x86,
	0x9c, 0x81, 0xbe, 0x87, 0xba, 0x41, 0xd8, 0x9b, 0x20, 0xfa, 0x89, 0x07, 0xc8, 0x9b, 0xa5, 0x7d,
	0x79, 0xb1, 0x75, 0xef, 0x5a, 0x00, 0x01, 0x95, 0xc5, 0x58, 0xa5, 0xf9, 0xba, 0xc9, 0x63, 0x89,
	0x31, 0x50, 0x0b, 0x6a, 0xd9, 0x6e, 0xaf, 0x3d, 0x4c, 0x79, 0x1f, 0xad, 0xa9, 0x28, 0xab, 0xe8,
	0xb9, 0x87, 0xa9, 0x78, 0xf8, 0x19, 0x06, 0x3d, 0x83, 0x7a, 0x37, 0xa0, 0x2c, 0x0a, 0x3c, 0x8f,
	0x44, 0xb1, 0x5c, 0xdd, 0x2b, 0xcd, 0x2e, 0xdd, 0x9e, 0x9b, 0xc5, 0x19, 0x21, 0xa0, 0x91, 0x0a,
	0x6b, 0xf9, 0x01, 0x07, 0x51, 0x70, 0xea, 0x7a, 0xa4, 0x68, 0xa0, 0x9d, 0x69, 0xaa, 0xc8, 0x94,
	0x3b, 0x9a, 0x61, 0xee, 0x11, 0x22, 0x2c, 0x52, 0xf6, 0xff, 0x5a, 0x86, 0x55, 0x51, 0x44, 0xc8,
	0x81, 0xf5, 0x8e, 0xe3, 0xbb, 0x71, 0xec, 0x06, 0x74, 0x70, 0x86, 0xe3, 0xd9, 0x0c, 0x7d, 0x7e,
	0x79, 0xb1, 0x75, 0x7f, 0x76, 0x2f, 0xb3, 0x3a, 0x8d, 0xb2, 0x81, 0x6c, 0xe8, 0xdd, 0x9c, 0xdb,
	0xe2, 0xf8, 0xec, 0x86, 0x6e, 0x86, 0xd9, 0x97, 0xd8, 0xf8, 0x8b, 0x31, 0x17, 0x8a, 0xbf, 0xf4,
	0x2f, 0x8a, 0x7f, 0xed, 0xfe, 0x4a, 0x5f, 0x74, 0x7f, 0x1e, 0xdc, 0xb4, 0x22, 0x4c, 0x63, 0x97,
	0x5d, 0xe5, 0x9a, 0x8b, 0x48, 0xbd, 0xbc, 0xd8, 0xda, 0x5b, 0xd4, 0x40, 0x91, 0xe1, 0x1c, 0x9f,
	0xa5, 0xb9, 0xcd, 0xae, 0x96, 0xcd, 0xeb, 0x19, 0x5f, 0x0f, 0x7d, 0xa5, 0xd3, 0xe5, 0x2f, 0xd6,
	0xe9, 0x13, 0x28, 0x1d, 0x45, 0x09, 0x1f, 0xaf, 0xf5, 0xc3, 0x75, 0xa1, 0xef, 0x8f, 0xa2, 0x44,
	0xdd, 0x98, 0xa6, 0xca, 0xda, 0x69, 0x94, 0x08, 0x5b, 0x67, 0x68, 0xf4, 0x2d, 0xac, 0xe6, 0xd5,
	0x71, 0x6d, 0xfe, 0xfe, 0xd4, 0x84, 0x37, 0xa4, 0x78, 0x46, 0xaf, 0x3f, 0x40, 0x0b, 0x84, 0xfd,
	0x3f, 0x24, 0x80, 0x79, 0x0e, 0xa8, 0x06, 0x65, 0xc3, 0x34, 0xb4, 0xc6, 0x0d, 0xb4, 0x06, 0x2b,
	0xbd, 0xe3, 0xee, 0xe0, 0x64, 0xa4, 0x19, 0x56, 0x43, 0xba, 0x5a, 0xf6, 0x32, 0xef, 0x12, 0xda,
	0x80, 0x35, 0xbe, 0xb4, 0xf4, 0xbe, 0xd6, 0x33, 0x5f, 0x59, 0x8d, 0x12, 0x7a, 0x00, 0xff, 0xed,
	0xeb, 0xa3, 0x91, 0x6e, 0xbc, 0x38, 0x79, 0xad, 0x19, 0x3d, 0x73, 0x78, 0x32, 0x1a, 0x68, 0x5d,
	0xfd, 0x48, 0xd7, 0x7a, 0x27, 0x1d, 0xcb, 0x1a, 0xea, 0xea, 0x2b, 0x4b, 0x1b, 0x35, 0xca, 0x68,
	0x07, 0xe4, 0xd7, 0x9a, 0xa1, 0x77, 0xb5, 0x93, 0xa1, 0xf6, 0x42, 0x1f, 0x59, 0xc3, 0x8e, 0xa5,
	0x9b, 0x46, 0xbe, 0xd1, 0xf2, 0xe7, 0xbc, 0x7c, 0xdf, 0x0a, 0xda, 0x04, 0x54, 0x78, 0x5f, 0x19,
	0x43, 0xad, 0xd3, 0x3d, 0xee, 0xa8, 0x2f, 0xb5, 0x46, 0x15, 0x21, 0x58, 0x1f, 0x6a, 0xaa, 0x69,
	0x5a, 0x27, 0x03, 0xcd, 0xe8, 0xe9, 0xc6, 0x8b, 0x46, 0x6d, 0xff, 0x57, 0x09, 0x1a, 0xf9, 0x0d,
	0x76, 0x7d, 0x47, 0xfb, 0x99, 0xd8, 0x09, 0x23, 0xe8, 0x39, 0x40, 0xfe, 0x89, 0xc7, 0xde, 0x4c,
	0xf4, 0x3b, 0xef, 0xf3, 0x61, 0x7e, 0x9b, 0x5c, 0x79, 0xc4, 0x09, 0x38, 0xc7, 0xa3, 0x47, 0x50,
	0x36, 0x43, 0x16, 0xcf, 0xa6, 0x5f, 0xc1, 0x5b, 0x0f, 0x42, 0x26, 0xca, 0x8f, 0x63, 0xd0, 0x03,
	0x28, 0x69, 0xf4, 0xbc, 0xf8, 0x23, 0xb8, 0x53, 0x40, 0xd7, 0x08, 0x3d, 0x17, 0x6b, 0xa8, 0xd1,
	0xf3, 0x47, 0xff, 0xc9, 0xa7, 0x09, 0x17, 0x41, 0x0d, 0xca, 0xc7, 0xe6, 0xc8, 0x6a, 0xdc, 0x40,
	0x75, 0xa8, 0x1a, 0x9a, 0xf5, 0x83, 0x39, 0xfc, 0xae, 0x21, 0x3d, 0x7a, 0xbc, 0x30, 0xc3, 0x84,
	0x2a, 0x55, 0xa1, 0x64, 0x9a, 0x6a, 0x43, 0x42, 0x00, 0x15, 0xdd, 0x50, 0x3b, 0x46, 0xaf, 0xb1,
	0xa4, 0xae, 0xbe, 0xff, 0xb8, 0x2b, 0x7d, 0xf8, 0xb8, 0x2b, 0xfd, 0xf9, 0x71, 0x57, 0x1a, 0x48,
	0xe3, 0x0a, 0xff, 0x91, 0x7a, 0xf2, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x57, 0x7b, 0xdd, 0xdf,
	0x47, 0x0a, 0x00, 0x00,
}
