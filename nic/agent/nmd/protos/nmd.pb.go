// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nmd.proto

/*
	Package nmd is a generated protocol buffer package.

	Service name

	It is generated from these files:
		nmd.proto

	It has these top-level messages:
		Naples
		NaplesSpec
		NaplesStatus
*/
package nmd

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import cluster "github.com/pensando/sw/api/generated/cluster"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Operational mode of a Naples
type NaplesMode int32

const (
	NaplesMode_CLASSIC_MODE NaplesMode = 0
	NaplesMode_MANAGED_MODE NaplesMode = 1
)

var NaplesMode_name = map[int32]string{
	0: "CLASSIC_MODE",
	1: "MANAGED_MODE",
}
var NaplesMode_value = map[string]int32{
	"CLASSIC_MODE": 0,
	"MANAGED_MODE": 1,
}

func (x NaplesMode) String() string {
	return proto.EnumName(NaplesMode_name, int32(x))
}
func (NaplesMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorNmd, []int{0} }

// Naples config object
type Naples struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of the NIC.
	Spec NaplesSpec `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	// Status contains the current state of the NIC.
	Status NaplesStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Naples) Reset()                    { *m = Naples{} }
func (m *Naples) String() string            { return proto.CompactTextString(m) }
func (*Naples) ProtoMessage()               {}
func (*Naples) Descriptor() ([]byte, []int) { return fileDescriptorNmd, []int{0} }

func (m *Naples) GetSpec() NaplesSpec {
	if m != nil {
		return m.Spec
	}
	return NaplesSpec{}
}

func (m *Naples) GetStatus() NaplesStatus {
	if m != nil {
		return m.Status
	}
	return NaplesStatus{}
}

// NaplesSpec contains initial bootstrap configuration of the Naples I/O subsystem
type NaplesSpec struct {
	// Operational mode of the NIC
	Mode NaplesMode `protobuf:"varint,1,opt,name=Mode,proto3,enum=nmd.NaplesMode" json:"mode,omitempty"`
	// List of IP/hostname:Port address of Venice quorum nodes in comma separated format
	// For eg: IP1:port1,IP2:port2,IP3:port3
	ClusterAddress []string `protobuf:"bytes,2,rep,name=ClusterAddress" json:"clusterAddress,omitempty"`
	// PrimaryMac of the NIC adapter
	PrimaryMac string `protobuf:"bytes,3,opt,name=PrimaryMac,proto3" json:"primaryMac,omitempty"`
	// Name of the Host
	NodeName string `protobuf:"bytes,4,opt,name=NodeName,proto3" json:"nodeName,omitempty"`
	// Management IP address of the naples node
	MgmtIp string `protobuf:"bytes,5,opt,name=MgmtIp,proto3" json:"mgmtIp,omitempty"`
}

func (m *NaplesSpec) Reset()                    { *m = NaplesSpec{} }
func (m *NaplesSpec) String() string            { return proto.CompactTextString(m) }
func (*NaplesSpec) ProtoMessage()               {}
func (*NaplesSpec) Descriptor() ([]byte, []int) { return fileDescriptorNmd, []int{1} }

func (m *NaplesSpec) GetMode() NaplesMode {
	if m != nil {
		return m.Mode
	}
	return NaplesMode_CLASSIC_MODE
}

func (m *NaplesSpec) GetClusterAddress() []string {
	if m != nil {
		return m.ClusterAddress
	}
	return nil
}

func (m *NaplesSpec) GetPrimaryMac() string {
	if m != nil {
		return m.PrimaryMac
	}
	return ""
}

func (m *NaplesSpec) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *NaplesSpec) GetMgmtIp() string {
	if m != nil {
		return m.MgmtIp
	}
	return ""
}

// NaplesStatus contains current status of a Naples I/O subsystem
type NaplesStatus struct {
	// Current phase of the NIC adapter in the system
	Phase cluster.SmartNICSpec_SmartNICPhase `protobuf:"varint,1,opt,name=Phase,proto3,enum=cluster.SmartNICSpec_SmartNICPhase" json:"phase,omitempty"`
}

func (m *NaplesStatus) Reset()                    { *m = NaplesStatus{} }
func (m *NaplesStatus) String() string            { return proto.CompactTextString(m) }
func (*NaplesStatus) ProtoMessage()               {}
func (*NaplesStatus) Descriptor() ([]byte, []int) { return fileDescriptorNmd, []int{2} }

func (m *NaplesStatus) GetPhase() cluster.SmartNICSpec_SmartNICPhase {
	if m != nil {
		return m.Phase
	}
	return cluster.SmartNICSpec_UNKNOWN
}

func init() {
	proto.RegisterType((*Naples)(nil), "nmd.Naples")
	proto.RegisterType((*NaplesSpec)(nil), "nmd.NaplesSpec")
	proto.RegisterType((*NaplesStatus)(nil), "nmd.NaplesStatus")
	proto.RegisterEnum("nmd.NaplesMode", NaplesMode_name, NaplesMode_value)
}
func (m *Naples) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Naples) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNmd(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintNmd(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNmd(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintNmd(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *NaplesSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NaplesSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNmd(dAtA, i, uint64(m.Mode))
	}
	if len(m.ClusterAddress) > 0 {
		for _, s := range m.ClusterAddress {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.PrimaryMac) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.PrimaryMac)))
		i += copy(dAtA[i:], m.PrimaryMac)
	}
	if len(m.NodeName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	if len(m.MgmtIp) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNmd(dAtA, i, uint64(len(m.MgmtIp)))
		i += copy(dAtA[i:], m.MgmtIp)
	}
	return i, nil
}

func (m *NaplesStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NaplesStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Phase != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNmd(dAtA, i, uint64(m.Phase))
	}
	return i, nil
}

func encodeVarintNmd(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Naples) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNmd(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNmd(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNmd(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNmd(uint64(l))
	return n
}

func (m *NaplesSpec) Size() (n int) {
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovNmd(uint64(m.Mode))
	}
	if len(m.ClusterAddress) > 0 {
		for _, s := range m.ClusterAddress {
			l = len(s)
			n += 1 + l + sovNmd(uint64(l))
		}
	}
	l = len(m.PrimaryMac)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	l = len(m.MgmtIp)
	if l > 0 {
		n += 1 + l + sovNmd(uint64(l))
	}
	return n
}

func (m *NaplesStatus) Size() (n int) {
	var l int
	_ = l
	if m.Phase != 0 {
		n += 1 + sovNmd(uint64(m.Phase))
	}
	return n
}

func sovNmd(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNmd(x uint64) (n int) {
	return sovNmd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Naples) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Naples: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Naples: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NaplesSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NaplesSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NaplesSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (NaplesMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterAddress = append(m.ClusterAddress, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryMac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryMac = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MgmtIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MgmtIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NaplesStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NaplesStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NaplesStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= (cluster.SmartNICSpec_SmartNICPhase(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNmd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNmd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNmd
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNmd
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNmd(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNmd = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNmd   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("nmd.proto", fileDescriptorNmd) }

var fileDescriptorNmd = []byte{
	// 562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0xc7, 0xe7, 0x6e, 0xeb, 0x6f, 0xf5, 0x6f, 0x6c, 0xc5, 0x20, 0x08, 0xd3, 0xd4, 0x56, 0x45,
	0x48, 0x13, 0x8c, 0xa4, 0x02, 0x09, 0x89, 0x3f, 0x37, 0x4d, 0x57, 0x41, 0x25, 0xd2, 0x56, 0x6d,
	0xef, 0x91, 0x9b, 0x78, 0x99, 0x51, 0x62, 0x5b, 0xb1, 0x03, 0xea, 0x03, 0xec, 0x1d, 0x78, 0x17,
	0x5e, 0x60, 0x97, 0x13, 0x0f, 0x50, 0xa1, 0x72, 0xc7, 0x53, 0x20, 0x3b, 0x69, 0xf1, 0x90, 0xe0,
	0xae, 0xe7, 0x9c, 0xef, 0xe7, 0x9c, 0xaf, 0xbf, 0x29, 0xac, 0xb1, 0x34, 0x72, 0x45, 0xc6, 0x15,
	0x47, 0xdb, 0x2c, 0x8d, 0x8e, 0x8e, 0x63, 0xce, 0xe3, 0x84, 0x78, 0x58, 0x50, 0x0f, 0x33, 0xc6,
	0x15, 0x56, 0x94, 0x33, 0x59, 0x48, 0x8e, 0xfa, 0x31, 0x55, 0x17, 0xf9, 0xdc, 0x0d, 0x79, 0xea,
	0x09, 0xc2, 0x24, 0x66, 0x11, 0xf7, 0xe4, 0x67, 0xef, 0x13, 0x61, 0x34, 0x24, 0x5e, 0xae, 0x68,
	0x22, 0x35, 0x1a, 0x13, 0x66, 0xd3, 0x1e, 0x65, 0x61, 0x92, 0x47, 0x64, 0xbd, 0xe6, 0xa9, 0xb5,
	0x26, 0xe6, 0x31, 0xf7, 0x4c, 0x7b, 0x9e, 0x9f, 0x9b, 0xca, 0x14, 0xe6, 0x57, 0x29, 0x7f, 0xf4,
	0x97, 0xab, 0xda, 0x63, 0x4a, 0x14, 0x2e, 0x65, 0x4f, 0xfe, 0x21, 0x33, 0x0a, 0xe9, 0x85, 0xeb,
	0xc7, 0xb6, 0x2f, 0x2b, 0xb0, 0x3a, 0xc4, 0x22, 0x21, 0x12, 0x75, 0x20, 0x98, 0x39, 0xa0, 0x05,
	0x4e, 0xfe, 0x7f, 0x76, 0xcb, 0xc5, 0x82, 0xba, 0xb3, 0x85, 0x20, 0x01, 0x51, 0xd8, 0xbf, 0x73,
	0xb5, 0x6c, 0x6e, 0x5d, 0x2f, 0x9b, 0xe0, 0xe7, 0xb2, 0xf9, 0xdf, 0x29, 0x65, 0x09, 0x65, 0x64,
	0x02, 0x66, 0xe8, 0x25, 0x04, 0x23, 0xa7, 0x62, 0x88, 0x43, 0x43, 0x8c, 0xe6, 0x1f, 0x49, 0xa8,
	0x0c, 0x73, 0x64, 0x31, 0x07, 0xda, 0xdd, 0x29, 0x4f, 0xa9, 0x22, 0xa9, 0x50, 0x8b, 0x09, 0x18,
	0xa1, 0xd7, 0x70, 0x67, 0x2a, 0x48, 0xe8, 0x6c, 0x97, 0xb4, 0x8e, 0xbf, 0xf0, 0xa1, 0xdb, 0xfe,
	0x3d, 0x4d, 0x6b, 0x52, 0x0a, 0x12, 0x5a, 0xa4, 0x81, 0x50, 0x0f, 0x56, 0xa7, 0x0a, 0xab, 0x5c,
	0x3a, 0x3b, 0x06, 0xbf, 0x6d, 0xe3, 0x66, 0xe0, 0x3b, 0xe5, 0x82, 0xba, 0x34, 0xb5, 0xb5, 0xa2,
	0x44, 0x5f, 0xed, 0x7f, 0xbb, 0x7c, 0xb0, 0x87, 0xaa, 0x21, 0x67, 0xe7, 0x34, 0x6e, 0x7f, 0xad,
	0x40, 0xf8, 0xfb, 0xbe, 0xb6, 0x17, 0xf0, 0x88, 0x98, 0x38, 0x0e, 0x6e, 0xd8, 0xd3, 0x6d, 0x63,
	0xaf, 0x78, 0x18, 0x8f, 0x88, 0x6d, 0x4f, 0x4f, 0xd1, 0x3b, 0x78, 0xd0, 0x4b, 0x72, 0xa9, 0x48,
	0xd6, 0x8d, 0xa2, 0x8c, 0x48, 0xe9, 0x54, 0x5a, 0xdb, 0x27, 0x35, 0xbf, 0x55, 0x52, 0x4e, 0x78,
	0x63, 0x6a, 0xf1, 0x7f, 0x70, 0xe8, 0x0d, 0x84, 0xe3, 0x8c, 0xa6, 0x38, 0x5b, 0x04, 0xb8, 0xc8,
	0xaa, 0xe6, 0x1f, 0x97, 0x5b, 0xee, 0x8a, 0xcd, 0xc4, 0xda, 0x60, 0xe9, 0xd1, 0x0b, 0xb8, 0x37,
	0xe4, 0x11, 0x19, 0xe2, 0x94, 0x98, 0xa0, 0x6a, 0xe6, 0xa3, 0x68, 0x16, 0xb1, 0xb2, 0x6f, 0x91,
	0x1b, 0x2d, 0xea, 0xc0, 0x6a, 0x10, 0xa7, 0x6a, 0x20, 0x9c, 0x5d, 0x43, 0x39, 0x25, 0x55, 0x4f,
	0x4d, 0xd7, 0xce, 0xb2, 0xd0, 0xb5, 0xe7, 0x70, 0xdf, 0x4e, 0x1f, 0x4d, 0xe0, 0xee, 0xf8, 0x02,
	0xcb, 0x75, 0x7e, 0x0f, 0xdd, 0xf2, 0xc5, 0xee, 0x34, 0xc5, 0x99, 0x1a, 0x0e, 0x7a, 0x3a, 0xe4,
	0x4d, 0x61, 0xa4, 0xfe, 0xfd, 0xf2, 0xca, 0xa1, 0xd0, 0xa5, 0x75, 0xa4, 0x58, 0xf5, 0xb8, 0xb3,
	0xfe, 0x40, 0x26, 0xe3, 0x3a, 0xdc, 0xef, 0xbd, 0xef, 0x4e, 0xa7, 0x83, 0xde, 0x87, 0x60, 0x74,
	0xd6, 0xaf, 0x6f, 0xe9, 0x4e, 0xd0, 0x1d, 0x76, 0xdf, 0xf6, 0xcf, 0x8a, 0x0e, 0xf0, 0xeb, 0x57,
	0xab, 0x06, 0xb8, 0x5e, 0x35, 0xc0, 0xf7, 0x55, 0x03, 0x7c, 0xf9, 0xd1, 0xd8, 0x1a, 0x83, 0x79,
	0xd5, 0xfc, 0xed, 0x9f, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x3b, 0x77, 0x3f, 0xf0, 0x03,
	0x00, 0x00,
}
