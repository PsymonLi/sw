// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: naples_profile.proto

/*
	Package nmd is a generated protocol buffer package.

	Service name

	It is generated from these files:
		naples_profile.proto

	It has these top-level messages:
		NaplesProfile
		NaplesProfileSpec
		NaplesProfileStatus
*/
package nmd

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PortAdminState int32

const (
	PortAdminState_PORT_ADMIN_STATE_ENABLE  PortAdminState = 0
	PortAdminState_PORT_ADMIN_STATE_DISABLE PortAdminState = 1
)

var PortAdminState_name = map[int32]string{
	0: "PORT_ADMIN_STATE_ENABLE",
	1: "PORT_ADMIN_STATE_DISABLE",
}
var PortAdminState_value = map[string]int32{
	"PORT_ADMIN_STATE_ENABLE":  0,
	"PORT_ADMIN_STATE_DISABLE": 1,
}

func (x PortAdminState) String() string {
	return proto.EnumName(PortAdminState_name, int32(x))
}
func (PortAdminState) EnumDescriptor() ([]byte, []int) { return fileDescriptorNaplesProfile, []int{0} }

// Naples config object
type NaplesProfile struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of the NIC.
	Spec NaplesProfileSpec `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	// Status contains the current state of the NIC.
	Status NaplesProfileStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *NaplesProfile) Reset()                    { *m = NaplesProfile{} }
func (m *NaplesProfile) String() string            { return proto.CompactTextString(m) }
func (*NaplesProfile) ProtoMessage()               {}
func (*NaplesProfile) Descriptor() ([]byte, []int) { return fileDescriptorNaplesProfile, []int{0} }

func (m *NaplesProfile) GetSpec() NaplesProfileSpec {
	if m != nil {
		return m.Spec
	}
	return NaplesProfileSpec{}
}

func (m *NaplesProfile) GetStatus() NaplesProfileStatus {
	if m != nil {
		return m.Status
	}
	return NaplesProfileStatus{}
}

// NaplesSpec contains initial bootstrap configuration of the Naples I/O subsystem
type NaplesProfileSpec struct {
	// Num Lifs contains the number of LIFs on the ETH Device. Supports either 1 or 16
	NumLifs          int32  `protobuf:"varint,1,opt,name=NumLifs,proto3" json:"num-lifs,omitempty"`
	DefaultPortAdmin string `protobuf:"bytes,4,opt,name=DefaultPortAdmin,proto3" json:"default-port-admin"`
}

func (m *NaplesProfileSpec) Reset()                    { *m = NaplesProfileSpec{} }
func (m *NaplesProfileSpec) String() string            { return proto.CompactTextString(m) }
func (*NaplesProfileSpec) ProtoMessage()               {}
func (*NaplesProfileSpec) Descriptor() ([]byte, []int) { return fileDescriptorNaplesProfile, []int{1} }

func (m *NaplesProfileSpec) GetNumLifs() int32 {
	if m != nil {
		return m.NumLifs
	}
	return 0
}

func (m *NaplesProfileSpec) GetDefaultPortAdmin() string {
	if m != nil {
		return m.DefaultPortAdmin
	}
	return ""
}

// NaplesStatus contains current status of a Naples I/O subsystem
type NaplesProfileStatus struct {
}

func (m *NaplesProfileStatus) Reset()                    { *m = NaplesProfileStatus{} }
func (m *NaplesProfileStatus) String() string            { return proto.CompactTextString(m) }
func (*NaplesProfileStatus) ProtoMessage()               {}
func (*NaplesProfileStatus) Descriptor() ([]byte, []int) { return fileDescriptorNaplesProfile, []int{2} }

func init() {
	proto.RegisterType((*NaplesProfile)(nil), "nmd.NaplesProfile")
	proto.RegisterType((*NaplesProfileSpec)(nil), "nmd.NaplesProfileSpec")
	proto.RegisterType((*NaplesProfileStatus)(nil), "nmd.NaplesProfileStatus")
	proto.RegisterEnum("nmd.PortAdminState", PortAdminState_name, PortAdminState_value)
}
func (m *NaplesProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NaplesProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNaplesProfile(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintNaplesProfile(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNaplesProfile(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintNaplesProfile(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *NaplesProfileSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NaplesProfileSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumLifs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNaplesProfile(dAtA, i, uint64(m.NumLifs))
	}
	if len(m.DefaultPortAdmin) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNaplesProfile(dAtA, i, uint64(len(m.DefaultPortAdmin)))
		i += copy(dAtA[i:], m.DefaultPortAdmin)
	}
	return i, nil
}

func (m *NaplesProfileStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NaplesProfileStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintNaplesProfile(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NaplesProfile) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNaplesProfile(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNaplesProfile(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNaplesProfile(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNaplesProfile(uint64(l))
	return n
}

func (m *NaplesProfileSpec) Size() (n int) {
	var l int
	_ = l
	if m.NumLifs != 0 {
		n += 1 + sovNaplesProfile(uint64(m.NumLifs))
	}
	l = len(m.DefaultPortAdmin)
	if l > 0 {
		n += 1 + l + sovNaplesProfile(uint64(l))
	}
	return n
}

func (m *NaplesProfileStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovNaplesProfile(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNaplesProfile(x uint64) (n int) {
	return sovNaplesProfile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NaplesProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNaplesProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NaplesProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NaplesProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNaplesProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNaplesProfile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNaplesProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNaplesProfile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNaplesProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNaplesProfile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNaplesProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNaplesProfile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNaplesProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNaplesProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NaplesProfileSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNaplesProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NaplesProfileSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NaplesProfileSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumLifs", wireType)
			}
			m.NumLifs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNaplesProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumLifs |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPortAdmin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNaplesProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNaplesProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultPortAdmin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNaplesProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNaplesProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NaplesProfileStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNaplesProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NaplesProfileStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NaplesProfileStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNaplesProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNaplesProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNaplesProfile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNaplesProfile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNaplesProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNaplesProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNaplesProfile
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNaplesProfile
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNaplesProfile(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNaplesProfile = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNaplesProfile   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("naples_profile.proto", fileDescriptorNaplesProfile) }

var fileDescriptorNaplesProfile = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x86, 0xe7, 0x6d, 0x74, 0x60, 0xb6, 0x51, 0x3c, 0x28, 0xa1, 0x4c, 0x2d, 0xaa, 0x84, 0x84,
	0xd0, 0x9a, 0x4c, 0x70, 0x05, 0x77, 0x8d, 0xda, 0x8b, 0xc1, 0xd6, 0x56, 0x6d, 0xee, 0x2b, 0x37,
	0x39, 0x09, 0x46, 0x89, 0x6d, 0xd5, 0x0e, 0x68, 0x0f, 0xc0, 0x05, 0xaf, 0xc0, 0x13, 0xed, 0x72,
	0xe2, 0x01, 0x2a, 0xd4, 0xcb, 0x3d, 0x05, 0xca, 0x49, 0x87, 0x82, 0x3a, 0xee, 0x72, 0xfc, 0xff,
	0xff, 0xe7, 0xff, 0x44, 0xa6, 0x4f, 0x24, 0xd7, 0x29, 0x98, 0x99, 0x5e, 0xa8, 0x58, 0xa4, 0xe0,
	0xea, 0x85, 0xb2, 0x8a, 0xed, 0xc8, 0x2c, 0x6a, 0x1e, 0x27, 0x4a, 0x25, 0x29, 0x78, 0x5c, 0x0b,
	0x8f, 0x4b, 0xa9, 0x2c, 0xb7, 0x42, 0x49, 0x53, 0x5a, 0x9a, 0x83, 0x44, 0xd8, 0xcf, 0xf9, 0xdc,
	0x0d, 0x55, 0xe6, 0x69, 0x90, 0x86, 0xcb, 0x48, 0x79, 0xe6, 0x9b, 0xf7, 0x15, 0xa4, 0x08, 0xc1,
	0xcb, 0xad, 0x48, 0x4d, 0x11, 0x4d, 0x40, 0x56, 0xd3, 0x9e, 0x90, 0x61, 0x9a, 0x47, 0x70, 0x8b,
	0xe9, 0x56, 0x30, 0x89, 0x4a, 0x94, 0x87, 0xc7, 0xf3, 0x3c, 0xc6, 0x09, 0x07, 0xfc, 0x5a, 0xdb,
	0x5f, 0xfd, 0xe7, 0xd6, 0xa2, 0x63, 0x06, 0x96, 0x97, 0xb6, 0xce, 0xcf, 0x6d, 0x7a, 0x30, 0xc4,
	0xc5, 0xc6, 0xe5, 0x5e, 0xec, 0x94, 0x92, 0xc0, 0x21, 0x2f, 0xc9, 0xeb, 0x87, 0x6f, 0x0f, 0x5c,
	0xae, 0x85, 0x1b, 0x5c, 0x6a, 0xb8, 0x00, 0xcb, 0xfd, 0xa3, 0xab, 0x65, 0x7b, 0xeb, 0x7a, 0xd9,
	0x26, 0x37, 0xcb, 0xf6, 0xde, 0x89, 0x90, 0xa9, 0x90, 0x30, 0x21, 0x01, 0x7b, 0x4f, 0xc9, 0xc8,
	0xd9, 0xc6, 0xc4, 0x23, 0x4c, 0x8c, 0xe6, 0x5f, 0x20, 0xb4, 0x98, 0x69, 0x56, 0x32, 0x87, 0xc5,
	0xbd, 0x27, 0x2a, 0x13, 0x16, 0x32, 0x6d, 0x2f, 0x27, 0x64, 0xc4, 0x7c, 0xba, 0x3b, 0xd5, 0x10,
	0x3a, 0x3b, 0x98, 0x6e, 0xb8, 0x32, 0x8b, 0xdc, 0x7f, 0xea, 0x14, 0xaa, 0xdf, 0x28, 0x20, 0x05,
	0xc0, 0x68, 0x08, 0x2b, 0x00, 0xcc, 0xb2, 0x8f, 0xb4, 0x36, 0xb5, 0xdc, 0xe6, 0xc6, 0xd9, 0x45,
	0x8a, 0x73, 0x07, 0x05, 0x75, 0xdf, 0x59, 0x73, 0xea, 0x06, 0xe7, 0x0a, 0x69, 0x4d, 0xf8, 0xb0,
	0xff, 0xeb, 0xfb, 0xf3, 0xfb, 0xac, 0x16, 0x2a, 0x19, 0x8b, 0xa4, 0xf3, 0x83, 0xd0, 0xc7, 0x1b,
	0x6d, 0xd8, 0x29, 0xdd, 0x1b, 0xe6, 0xd9, 0xb9, 0x88, 0x0d, 0xfe, 0xa6, 0x7b, 0x7e, 0xe3, 0x66,
	0xd9, 0x66, 0x32, 0xcf, 0xba, 0xa9, 0x88, 0xab, 0xd0, 0x5b, 0x1b, 0xf3, 0x69, 0xbd, 0x0f, 0x31,
	0xcf, 0x53, 0x3b, 0x56, 0x0b, 0xdb, 0x8b, 0x32, 0x21, 0xb1, 0xeb, 0x83, 0x32, 0x1a, 0x95, 0x5a,
	0x57, 0xab, 0x85, 0xed, 0xf2, 0x42, 0x9d, 0x6c, 0xf8, 0x3b, 0x4f, 0xe9, 0xd1, 0x1d, 0x2b, 0xbd,
	0xf9, 0x44, 0x0f, 0xff, 0x7a, 0x8a, 0x23, 0x60, 0x2f, 0xe8, 0xb3, 0xf1, 0x68, 0x12, 0xcc, 0x7a,
	0xfd, 0x8b, 0xb3, 0xe1, 0x6c, 0x1a, 0xf4, 0x82, 0xc1, 0x6c, 0x30, 0xec, 0xf9, 0xe7, 0x83, 0xfa,
	0x16, 0x3b, 0xa6, 0xce, 0x86, 0xd8, 0x3f, 0x9b, 0xa2, 0x4a, 0xfc, 0xfd, 0xab, 0x55, 0x8b, 0x5c,
	0xaf, 0x5a, 0xe4, 0xf7, 0xaa, 0x45, 0xc6, 0x64, 0x5e, 0xc3, 0x37, 0xf2, 0xee, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x6e, 0xb2, 0xfd, 0x02, 0xfb, 0x02, 0x00, 0x00,
}
