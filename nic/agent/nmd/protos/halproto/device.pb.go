// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: device.proto

/*
	Package device is a generated protocol buffer package.

	It is generated from these files:
		device.proto

	It has these top-level messages:
		SystemSpec
*/
package device

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ------------------------------------------------------------------------------
// supported forwarding modes
// ------------------------------------------------------------------------------
type ForwardingMode int32

const (
	ForwardingMode_FORWARDING_MODE_NONE    ForwardingMode = 0
	ForwardingMode_FORWARDING_MODE_CLASSIC ForwardingMode = 1
	ForwardingMode_FORWARDING_MODE_HOSTPIN ForwardingMode = 2
	ForwardingMode_FORWARDING_MODE_SWITCH  ForwardingMode = 3
)

var ForwardingMode_name = map[int32]string{
	0: "FORWARDING_MODE_NONE",
	1: "FORWARDING_MODE_CLASSIC",
	2: "FORWARDING_MODE_HOSTPIN",
	3: "FORWARDING_MODE_SWITCH",
}
var ForwardingMode_value = map[string]int32{
	"FORWARDING_MODE_NONE":    0,
	"FORWARDING_MODE_CLASSIC": 1,
	"FORWARDING_MODE_HOSTPIN": 2,
	"FORWARDING_MODE_SWITCH":  3,
}

func (x ForwardingMode) String() string {
	return proto.EnumName(ForwardingMode_name, int32(x))
}
func (ForwardingMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorDevice, []int{0} }

// ------------------------------------------------------------------------------
// supported feature profiles
// ------------------------------------------------------------------------------
type FeatureProfile int32

const (
	FeatureProfile_FEATURE_PROFILE_NONE                  FeatureProfile = 0
	FeatureProfile_FEATURE_PROFILE_CLASSIC_DEFAULT       FeatureProfile = 1
	FeatureProfile_FEATURE_PROFILE_CLASSIC_ETH_DEV_SCALE FeatureProfile = 2
)

var FeatureProfile_name = map[int32]string{
	0: "FEATURE_PROFILE_NONE",
	1: "FEATURE_PROFILE_CLASSIC_DEFAULT",
	2: "FEATURE_PROFILE_CLASSIC_ETH_DEV_SCALE",
}
var FeatureProfile_value = map[string]int32{
	"FEATURE_PROFILE_NONE":                  0,
	"FEATURE_PROFILE_CLASSIC_DEFAULT":       1,
	"FEATURE_PROFILE_CLASSIC_ETH_DEV_SCALE": 2,
}

func (x FeatureProfile) String() string {
	return proto.EnumName(FeatureProfile_name, int32(x))
}
func (FeatureProfile) EnumDescriptor() ([]byte, []int) { return fileDescriptorDevice, []int{1} }

type PortAdminState int32

const (
	PortAdminState_PORT_ADMIN_STATE_ENABLE  PortAdminState = 0
	PortAdminState_PORT_ADMIN_STATE_DISABLE PortAdminState = 1
)

var PortAdminState_name = map[int32]string{
	0: "PORT_ADMIN_STATE_ENABLE",
	1: "PORT_ADMIN_STATE_DISABLE",
}
var PortAdminState_value = map[string]int32{
	"PORT_ADMIN_STATE_ENABLE":  0,
	"PORT_ADMIN_STATE_DISABLE": 1,
}

func (x PortAdminState) String() string {
	return proto.EnumName(PortAdminState_name, int32(x))
}
func (PortAdminState) EnumDescriptor() ([]byte, []int) { return fileDescriptorDevice, []int{2} }

// ------------------------------------------------------------------------------
// SystemSpec captures the system level global configuraiton
// NOTE:
// fwd_mode is init time configuration and this object must be pushed
// by delphi and client handler should be invoked before any other
// config object is
// ------------------------------------------------------------------------------
type SystemSpec struct {
	Meta           *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	FwdMode        ForwardingMode     `protobuf:"varint,2,opt,name=fwd_mode,json=fwdMode,proto3,enum=device.ForwardingMode" json:"forwarding-mode,omitempty"`
	FeatureProfile FeatureProfile     `protobuf:"varint,3,opt,name=feature_profile,json=featureProfile,proto3,enum=device.FeatureProfile" json:"feature-profile"`
	PortAdminState string             `protobuf:"bytes,4,opt,name=port_admin_state,json=portAdminState,proto3" json:"port-admin-state"`
}

func (m *SystemSpec) Reset()                    { *m = SystemSpec{} }
func (m *SystemSpec) String() string            { return proto.CompactTextString(m) }
func (*SystemSpec) ProtoMessage()               {}
func (*SystemSpec) Descriptor() ([]byte, []int) { return fileDescriptorDevice, []int{0} }

func (m *SystemSpec) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SystemSpec) GetFwdMode() ForwardingMode {
	if m != nil {
		return m.FwdMode
	}
	return ForwardingMode_FORWARDING_MODE_NONE
}

func (m *SystemSpec) GetFeatureProfile() FeatureProfile {
	if m != nil {
		return m.FeatureProfile
	}
	return FeatureProfile_FEATURE_PROFILE_NONE
}

func (m *SystemSpec) GetPortAdminState() string {
	if m != nil {
		return m.PortAdminState
	}
	return ""
}

func init() {
	proto.RegisterType((*SystemSpec)(nil), "device.SystemSpec")
	proto.RegisterEnum("device.ForwardingMode", ForwardingMode_name, ForwardingMode_value)
	proto.RegisterEnum("device.FeatureProfile", FeatureProfile_name, FeatureProfile_value)
	proto.RegisterEnum("device.PortAdminState", PortAdminState_name, PortAdminState_value)
}
func (m *SystemSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevice(dAtA, i, uint64(m.Meta.Size()))
		n1, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.FwdMode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDevice(dAtA, i, uint64(m.FwdMode))
	}
	if m.FeatureProfile != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDevice(dAtA, i, uint64(m.FeatureProfile))
	}
	if len(m.PortAdminState) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDevice(dAtA, i, uint64(len(m.PortAdminState)))
		i += copy(dAtA[i:], m.PortAdminState)
	}
	return i, nil
}

func encodeVarintDevice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SystemSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovDevice(uint64(l))
	}
	if m.FwdMode != 0 {
		n += 1 + sovDevice(uint64(m.FwdMode))
	}
	if m.FeatureProfile != 0 {
		n += 1 + sovDevice(uint64(m.FeatureProfile))
	}
	l = len(m.PortAdminState)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	return n
}

func sovDevice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDevice(x uint64) (n int) {
	return sovDevice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SystemSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &delphi.ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwdMode", wireType)
			}
			m.FwdMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FwdMode |= (ForwardingMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureProfile", wireType)
			}
			m.FeatureProfile = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeatureProfile |= (FeatureProfile(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortAdminState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortAdminState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDevice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDevice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDevice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDevice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDevice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDevice   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("device.proto", fileDescriptorDevice) }

var fileDescriptorDevice = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0x99, 0xb4, 0x2a, 0x65, 0x88, 0x8c, 0x35, 0x54, 0xc5, 0x04, 0x48, 0xa2, 0x20, 0x50,
	0x88, 0x48, 0x16, 0x65, 0xc7, 0x02, 0xc9, 0x8e, 0x27, 0xc4, 0xc2, 0xb1, 0xad, 0x99, 0x29, 0x5d,
	0x8e, 0xdc, 0x78, 0x1c, 0x8c, 0xea, 0x8e, 0xe5, 0x0e, 0x44, 0x65, 0xd5, 0x25, 0x37, 0xe8, 0x0d,
	0x38, 0x0b, 0x4b, 0x4e, 0x10, 0xa1, 0x2c, 0x73, 0x0a, 0x64, 0x3b, 0x54, 0x4a, 0xa0, 0x3b, 0xbf,
	0xff, 0x7b, 0xbf, 0xdf, 0xff, 0x9e, 0x06, 0xd6, 0x23, 0xf1, 0x35, 0x99, 0x8a, 0x41, 0x96, 0x4b,
	0x25, 0xd1, 0x5e, 0x55, 0x35, 0xea, 0x91, 0x38, 0xcb, 0x3e, 0x25, 0x95, 0xda, 0x80, 0x33, 0x39,
	0x93, 0xd5, 0x77, 0xe7, 0x47, 0x0d, 0x42, 0x7a, 0x79, 0xa1, 0x44, 0x4a, 0x33, 0x31, 0x45, 0x2f,
	0xe1, 0xee, 0x44, 0xa8, 0xd0, 0x00, 0x6d, 0xd0, 0xbd, 0x7f, 0x84, 0x06, 0x6b, 0x9f, 0x7f, 0xfa,
	0x59, 0x4c, 0x55, 0x41, 0x48, 0xc9, 0x51, 0x00, 0xf7, 0xe3, 0x79, 0xc4, 0x53, 0x19, 0x09, 0xa3,
	0xd6, 0x06, 0x5d, 0xed, 0xe8, 0x70, 0xb0, 0x9e, 0x3c, 0x92, 0xf9, 0x3c, 0xcc, 0xa3, 0xe4, 0x7c,
	0x36, 0x91, 0x91, 0xb0, 0x9e, 0xad, 0x16, 0xad, 0xc7, 0xf1, 0x8d, 0xd6, 0x2f, 0x2c, 0xaf, 0x65,
	0x9a, 0x28, 0x91, 0x66, 0xea, 0x92, 0xdc, 0x8d, 0xe7, 0x51, 0xd1, 0x87, 0x18, 0x7c, 0x10, 0x8b,
	0x50, 0x7d, 0xc9, 0x05, 0xcf, 0x72, 0x19, 0x27, 0x67, 0xc2, 0xd8, 0xd9, 0xfa, 0x71, 0x85, 0x83,
	0x8a, 0x5a, 0x0f, 0x57, 0x8b, 0xd6, 0x5f, 0x4b, 0x7f, 0x6d, 0x21, 0x5a, 0xbc, 0xd1, 0x84, 0xde,
	0x41, 0x3d, 0x93, 0xb9, 0xe2, 0x61, 0x94, 0x26, 0xe7, 0xfc, 0x42, 0x85, 0x4a, 0x18, 0xbb, 0x6d,
	0xd0, 0xbd, 0x67, 0x1d, 0xac, 0x16, 0xad, 0x92, 0xf5, 0x4b, 0xd6, 0x2f, 0x19, 0xd1, 0x0a, 0xc5,
	0x2c, 0x04, 0x5a, 0xd4, 0x6f, 0xf7, 0xaf, 0xae, 0x3b, 0xe0, 0xfb, 0x75, 0x07, 0xf4, 0xae, 0x00,
	0xd4, 0x36, 0x57, 0x43, 0x06, 0x3c, 0x18, 0xf9, 0xe4, 0xc4, 0x24, 0xb6, 0xe3, 0xbd, 0xe7, 0x13,
	0xdf, 0xc6, 0xdc, 0xf3, 0x3d, 0xac, 0xdf, 0x41, 0x4f, 0xe0, 0xa3, 0x6d, 0x32, 0x74, 0x4d, 0x4a,
	0x9d, 0xa1, 0x0e, 0xfe, 0x07, 0xc7, 0x3e, 0x65, 0x81, 0xe3, 0xe9, 0x35, 0xd4, 0x80, 0x87, 0xdb,
	0x90, 0x9e, 0x38, 0x6c, 0x38, 0xd6, 0x77, 0x7a, 0xdf, 0xa0, 0xb6, 0x79, 0x83, 0x32, 0x01, 0x36,
	0xd9, 0x31, 0xc1, 0x3c, 0x20, 0xfe, 0xc8, 0x71, 0x6f, 0x12, 0x3c, 0x87, 0xad, 0x6d, 0xb2, 0x4e,
	0xc0, 0x6d, 0x3c, 0x32, 0x8f, 0x5d, 0xa6, 0x03, 0xf4, 0x0a, 0xbe, 0xb8, 0xad, 0x09, 0xb3, 0x31,
	0xb7, 0xf1, 0x47, 0x4e, 0x87, 0xa6, 0x8b, 0xf5, 0x5a, 0xef, 0x03, 0xd4, 0x82, 0x8d, 0xd3, 0x14,
	0x6b, 0x04, 0x3e, 0x61, 0xdc, 0xb4, 0x27, 0x8e, 0xc7, 0x29, 0x33, 0x19, 0xe6, 0xd8, 0x33, 0x2d,
	0xb7, 0x18, 0xff, 0x14, 0x1a, 0xff, 0x40, 0xdb, 0xa1, 0x25, 0x05, 0x56, 0xfd, 0xe7, 0xb2, 0x09,
	0x7e, 0x2d, 0x9b, 0xe0, 0xf7, 0xb2, 0x09, 0x4e, 0xf7, 0xca, 0x97, 0xf8, 0xe6, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xfd, 0xe9, 0x2a, 0x31, 0xbb, 0x02, 0x00, 0x00,
}
