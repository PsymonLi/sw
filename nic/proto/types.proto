//------------------------------------------------------------------------------
// common messages, headers and enums that are useful across all services
// and also shared between agent(s) and HAL
//------------------------------------------------------------------------------

syntax = "proto3";

import public "protos/github/gogo/protobuf/gogoproto/gogo.proto";

package types;
option go_package="halproto";

// IP protocol numbers
enum IPProtocol {
  IPPROTO_NONE          = 0;
  IPPROTO_ICMP          = 1;
  IPPROTO_IPV4          = 4;
  IPPROTO_TCP           = 6;
  IPPROTO_UDP           = 17;
  IPPROTO_GRE           = 47;
  IPPROTO_ESP           = 50;
  IPPROTO_AH            = 51;
  IPPROTO_ICMPV6        = 58;
}

// ICMP message types
// TBD - add more here !!
enum ICMPMsgType {
  ICMP_MSG_TYPE_NONE = 0;
  ICMP_MSG_TYPE_ECHO = 1;
}

// API return codes (more descriptive than protobuf enums)
enum ApiStatus {
  API_STATUS_OK                           = 0;     // success
  API_STATUS_ERR                          = 1;     // catch-all error
  API_STATUS_INVALID_ARG                  = 2;     // invalid argument
  API_STATUS_EXISTS_ALREADY               = 3;     // object already exists
  API_STATUS_OUT_OF_MEM                   = 4;     // out of memory
  API_STATUS_NOT_FOUND                    = 5;     // object not found
  API_STATUS_OUT_OF_RESOURCE              = 6;     // out of resource
  API_STATUS_ENCAP_INVALID                = 7;     // encap invalid
  API_STATUS_TENANT_ID_INVALID            = 8;     // invalid tenant id
  API_STATUS_TENANT_NOT_FOUND             = 9;     // tenant not found
  API_STATUS_L2_SEGMENT_ID_INVALID        = 10;    // invalid L2 segment id
  API_STATUS_L2_SEGMENT_NOT_FOUND         = 11;    // invalid L2 segment id
  API_STATUS_INTERFACE_ID_INVALID         = 12;    // invalid interface id
  API_STATUS_INTERFACE_NOT_FOUND          = 13;    // interface not found
  API_STATUS_IF_TYPE_INVALID              = 14;    // invalid inteface type
  API_STATUS_IF_INFO_INVALID              = 15;    // invalid interface info
  API_STATUS_IF_L2SEGMENT_INVALID         = 16;    // invalid L2 segment in interface spec
  API_STATUS_IF_ENIC_INFO_INVALID         = 17;    // invalid enic info in interface spec
  API_STATUS_IF_ENIC_TYPE_INVALID         = 18;    // invalid enic type in interface spec
  API_STATUS_IF_LIF_INFO_NOT_INVALID      = 19;    // lif info not valid
  API_STATUS_IF_LIFQ_INFO_NOT_INVALID     = 20;    // lif queue info not valid
  API_STATUS_ENDPOINT_NOT_FOUND           = 21;    // unknown endpoint
  API_STATUS_FLOW_KEY_INVALID             = 22;    // flow key invalid
  API_STATUS_FLOW_INFO_INVALID            = 23;    // flow information invalid
  API_STATUS_FLOW_NOT_FOUND               = 24;    // flow lookup failed
  API_STATUS_SESSION_NOT_FOUND            = 25;    // session lookup failed
  API_STATUS_HANDLE_INVALID               = 26;    // HAL handle passed is invalid
  API_STATUS_HW_PROG_ERR                  = 27;    // hardware programming error
  API_STATUS_LIF_ID_INVALID               = 28;    // invalid LIF id
  API_STATUS_LIF_NOT_FOUND                = 29;    // LIF not found
  API_STATUS_NWSEC_PROFILE_ID_INVALID     = 30;    // security profile id invalid
  API_STATUS_NWSEC_PROFILE_NOT_FOUND      = 31;    // security profile not found
  API_STATUS_TLS_CB_ID_INVALID            = 32;    // invalid TLS CB id
  API_STATUS_TLS_CB_NOT_FOUND             = 33;    // invalid TLS CB
  API_STATUS_TCP_CB_ID_INVALID            = 34;    // invalid TCP CB id
  API_STATUS_TCP_CB_NOT_FOUND             = 35;    // invalid TCP CB
  API_STATUS_BUF_POOL_ID_INVALID          = 36;    // invalid BUF_POOL id
  API_STATUS_BUF_POOL_NOT_FOUND           = 37;    // BUF_POOL not found
  API_STATUS_BUF_POOL_COS_MAP_EXISTS      = 38;    // COS to Buf pool mapping already exists
  API_STATUS_QUEUE_ID_INVALID             = 39;    // invalid QUEUE id
  API_STATUS_QUEUE_COUNT_INVALID          = 40;    // Invalid number of queue and l1 nodes
  API_STATUS_QUEUE_NOT_FOUND              = 41;    // QUEUE not found
  API_STATUS_POLICER_ID_INVALID           = 42;    // invalid POLICER id
  API_STATUS_POLICER_NOT_FOUND            = 43;    // POLICER not found
  API_STATUS_NETWORK_NOT_FOUND            = 44;    // network not found
  API_STATUS_ACL_ID_INVALID               = 45;    // invalid ACL id
  API_STATUS_ACL_NOT_FOUND                = 46;    // ACL not found
  API_STATUS_WRING_ID_INVALID             = 47;    // invalid WRING id
  API_STATUS_WRING_NOT_FOUND              = 48;    // invalid WRING
  API_STATUS_WRING_TYPE_INVALID           = 49;    // invalid WRING type
  API_STATUS_PROXY_TYPE_INVALID           = 50;    // invalid Proxy Service type 
  API_STATUS_IPSEC_CB_ID_INVALID          = 51;    // invalid IPSEC CB id
  API_STATUS_IPSEC_CB_NOT_FOUND           = 52;    // invalid IPSEC CB
  API_STATUS_L4LB_KEY_INVALID             = 53;    // invalid L4LB key
  API_STATUS_CPU_CB_ID_INVALID            = 54;    // invalid CPU CB id
  API_STATUS_CPU_CB_NOT_FOUND             = 55;    // invalid CPU CB
  API_STATUS_PROXY_NOT_ENABLED            = 56;    // proxy service not enabled
  API_STATUS_PROXY_FLOW_NOT_FOUND         = 57;    // proxy service not found for a flow
  API_STATUS_CFG_DB_ERR                   = 58;    // config database inconsistency
  API_STATUS_SECURITY_GROUP_ID_INVALID    = 59;    // Security group id invalid
  API_STATUS_ENDPOINT_UPD_KEY_HDL_INVALID = 60;    // ep update with no key and hdl
  API_STATUS_DOS_POLICY_ID_INVALID        = 61;    // dos policy id invalid
  API_STATUS_DOS_POLICY_NOT_FOUND         = 62;    // dos policy not found
  API_STATUS_RAWR_CB_ID_INVALID           = 63;    // invalid Raw Redirect CB id
  API_STATUS_RAWR_CB_NOT_FOUND            = 64;    // invalid Raw Redirect CB
  API_STATUS_OBJECT_IN_USE                = 65;    // object is in use
}

// common meta object that is part of all other top level objects
// TODO: should we add last updated timestamp, revision etc. here ?
message ObjectMeta {
  fixed32        tenant_id = 1;     // tenant identifier
}

// Types of L2 segments
enum L2SegmentType {
  L2_SEGMENT_TYPE_NONE          = 0;
  L2_SEGMENT_TYPE_TENANT        = 1;    // tenant/user VLAN
  L2_SEGMENT_TYPE_MGMT          = 2;    // mgmt VLAN
  L2_SEGMENT_TYPE_INFRA         = 3;    // infra VLAN
  L2_SEGMENT_PRIMARY            = 4;    // primary VLAN of PVLAN
  L2_SEGMENT_ISOLATED           = 5;    // isolated VLAN of PVLAN
}

// Supported wire encaps for the L2 segments
enum encapType {
  ENCAP_TYPE_NONE               = 0;
  ENCAP_TYPE_DOT1Q              = 1;    // .1q encapsulation
  ENCAP_TYPE_VXLAN              = 2;    // VXLAN encapsulation
  ENCAP_TYPE_IP_IN_IP           = 3;    // IP-in-IP encapsulation
  ENCAP_TYPE_GRE                = 4;    // GRE encapsulation
  ENCAP_TYPE_IPSEC              = 5;    // IPSec tunnel encapsulation
}

// EncapInfo captures wire encap information
message EncapInfo {
  encapType        encap_type  = 1;    // wire encap type
  uint32           encap_value = 2;    // encap value (vlan/vnid etc.)
}

// IP address families
enum IPAddressFamily {
  IP_AF_NONE     = 0;
  IP_AF_INET     = 1;    // IPv4
  IP_AF_INET6    = 2;    // IPv6
}

// IP address object
message IPAddress {
  IPAddressFamily    ip_af   = 1;      // IP address family
  oneof v4_or_v6 {
    fixed32          v4_addr = 2;      // IPv4 address
    bytes            v6_addr = 3;      // IPv6 address  (TODO: need better representation here)
  }
}

// IP Prefix object
message IPPrefix {
  IPAddress    address       = 1;      // IP address
  uint32       prefix_len    = 2;      // prefix length
}

// PortRange object has low and high end of the port ranges
message L4PortRange {
  uint32    port_low  = 1;    // source port
  uint32    port_high = 2;    // destination port
}

message Empty {}

// Types of Work Ring
enum WRingType {
  WRING_TYPE_NONE           = 0;    
  WRING_TYPE_SERQ           = 1;    
  WRING_TYPE_NMDR_TX        = 2;    
  WRING_TYPE_NMDR_RX        = 3;    
  WRING_TYPE_NMPR_SMALL_TX  = 4;    
  WRING_TYPE_NMPR_SMALL_RX  = 5;    
  WRING_TYPE_NMPR_BIG_TX    = 6;    
  WRING_TYPE_NMPR_BIG_RX    = 7;    
  WRING_TYPE_BSQ            = 8;
  WRING_TYPE_BRQ            = 9;
  WRING_TYPE_SESQ           = 10;    
  WRING_TYPE_IPSECCBQ       = 11;
  WRING_TYPE_ARQRX          = 12;
  WRING_TYPE_ASQ            = 13;
  WRING_TYPE_ASESQ          = 14;    
  WRING_TYPE_RAWRCB         = 15;
}

// Types of Proxy Service
enum ProxyType {
  PROXY_TYPE_NONE          = 0;    
  PROXY_TYPE_TCP           = 1;    
  PROXY_TYPE_TLS           = 2;    
  PROXY_TYPE_IPSEC         = 3;    
  PROXY_TYPE_CPU           = 4;
  PROXY_TYPE_IPFIX         = 5;
  PROXY_TYPE_RAW_REDIR     = 6;
}

// Types of Cryptographic keys
enum CryptoKeyType {
    CRYPTO_KEY_TYPE_AES128      = 0;
    CRYPTO_KEY_TYPE_AES192      = 1;
    CRYPTO_KEY_TYPE_AES256      = 2;
    CRYPTO_KEY_TYPE_DES         = 3;
    CRYPTO_KEY_TYPE_CHACHA20    = 4;
    CRYPTO_KEY_TYPE_POLY1305    = 5;
    CRYPTO_KEY_TYPE_HMAC        = 6;
}

