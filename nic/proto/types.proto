//------------------------------------------------------------------------------
// common messages, headers and enums that are useful across all services
// and also shared between agent(s) and HAL
//------------------------------------------------------------------------------

syntax = "proto3";

package types;

// IP protocol numbers
enum IPProtocol {
  IP_PROTO_NONE          = 0;
  IP_PROTO_ICMP          = 1;
  IP_PROTO_IPV4          = 4;
  IP_PROTO_TCP           = 6;
  IP_PROTO_UDP           = 17;
  IP_PROTO_GRE           = 47;
  IP_PROTO_ESP           = 50;
  IP_PROTO_AH            = 51;
  IP_PROTO_ICMPV6        = 58;
}

// API return codes (more descriptive than protobuf enums)
enum ApiStatus {
  API_STATUS_OK                       = 0;     // success
  API_STATUS_ERR                      = 1;     // catch-all error
  API_STATUS_INVALID_ARG              = 2;     // invalid argument
  API_STATUS_EXISTS_ALREADY           = 3;     // object already exists
  API_STATUS_OUT_OF_MEM               = 4;     // out of memory
  API_STATUS_NOT_FOUND                = 5;     // object not found
  API_STATUS_OUT_OF_RESOURCE          = 6;     // out of resource
  API_STATUS_ENCAP_INVALID            = 7;     // encap invalid
  API_STATUS_TENANT_ID_INVALID        = 8;     // invalid tenant id
  API_STATUS_TENANT_NOT_FOUND         = 9;     // tenant not found
  API_STATUS_L2_SEGMENT_ID_INVALID    = 10;    // invalid L2 segment id
  API_STATUS_L2_SEGMENT_NOT_FOUND     = 11;    // invalid L2 segment id
  API_STATUS_INTERFACE_ID_INVALID     = 12;    // invalid interface id
  API_STATUS_INTERFACE_NOT_FOUND      = 13;    // interface not found
  API_STATUS_IF_TYPE_INVALID          = 14;    // invalid inteface type
  API_STATUS_IF_INFO_INVALID          = 15;    // invalid interface info
  API_STATUS_IF_L2SEGMENT_INVALID     = 16;    // invalid L2 segment in interface spec
  API_STATUS_IF_ENIC_INFO_INVALID     = 17;    // invalid enic info in interface spec
  API_STATUS_IF_ENIC_TYPE_INVALID     = 18;    // invalid enic type in interface spec
  API_STATUS_IF_LIF_INFO_NOT_INVALID  = 19;    // lif info not valid
  API_STATUS_IF_LIFQ_INFO_NOT_INVALID = 20;    // lif queue info not valid
  API_STATUS_ENDPOINT_NOT_FOUND       = 21;    // unknown endpoint
  API_STATUS_FLOW_KEY_INVALID         = 22;    // flow key invalid
  API_STATUS_FLOW_INFO_INVALID        = 23;    // flow information invalid
  API_STATUS_FLOW_NOT_FOUND           = 24;    // flow lookup failed
  API_STATUS_SESSION_NOT_FOUND        = 25;    // session lookup failed
  API_STATUS_HANDLE_INVALID           = 26;    // HAL handle passed is invalid
  API_STATUS_HW_PROG_ERR              = 27;    // hardware programming error
  API_STATUS_LIF_ID_INVALID           = 28;    // invalid LIF id
  API_STATUS_LIF_NOT_FOUND            = 29;    // LIF not found
  API_STATUS_NWSEC_PROFILE_ID_INVALID = 30;    // security profile id invalid
  API_STATUS_NWSEC_PROFILE_NOT_FOUND  = 31;    // security profile not found
}

// common meta object that is part of all other top level objects
// TODO: should we add last updated timestamp, revision etc. here ?
message ObjectMeta {
  fixed32        tenant_id = 1;     // tenant identifier
}

// Types of L2 segments
enum L2SegmentType {
  L2_SEGMENT_TYPE_NONE          = 0;
  L2_SEGMENT_TYPE_TENANT        = 1;    // tenant/user VLAN
  L2_SEGMENT_TYPE_MGMT          = 2;    // mgmt VLAN
  L2_SEGMENT_TYPE_INFRA         = 3;    // infra VLAN
  L2_SEGMENT_PRIMARY            = 4;    // primary VLAN of PVLAN
  L2_SEGMENT_ISOLATED           = 5;    // isolated VLAN of PVLAN
}

// Supported wire encaps for the L2 segments
enum encapType {
  ENCAP_TYPE_NONE               = 0;
  ENCAP_TYPE_DOT1Q              = 1;    // .1q encapsulation
  ENCAP_TYPE_VXLAN              = 2;    // VXLAN encapsulation
  ENCAP_TYPE_IP_IN_IP           = 3;    // IP-in-IP encapsulation
  ENCAP_TYPE_GRE                = 4;    // GRE encapsulation
  ENCAP_TYPE_IPSEC              = 5;    // IPSec tunnel encapsulation
}

// EncapInfo captures wire encap information
message EncapInfo {
  encapType        encap_type  = 1;    // wire encap type
  uint32           encap_value = 2;    // encap value (vlan/vnid etc.)
}

// IP address families
enum IPAddressFamily {
  IP_AF_NONE     = 0;
  IP_AF_INET     = 1;    // IPv4
  IP_AF_INET6    = 2;    // IPv6
}

// IP address object
message IPAddress {
  IPAddressFamily    ip_af   = 1;      // IP address family
  oneof v4_or_v6 {
    fixed32          v4_addr = 2;      // IPv4 address
    bytes            v6_addr = 3;      // IPv6 address  (TODO: need better representation here)
  }
}

// IP Prefix object
message IPPrefix {
  IPAddress    address       = 1;      // IP address
  uint32       prefix_len    = 2;      // prefix length
}

// PortRange object has low and high end of the port ranges
message L4PortRange {
  uint32    port_low  = 1;    // source port
  uint32    port_high = 2;    // destination port
}
