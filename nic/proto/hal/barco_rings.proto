//------------------------------------------------------------------------------
// protobuf specification for Barco Ring related APIs
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
//import public "gogo.proto";

package barcoRings;
option go_package="halproto";

service BarcoRings {
    rpc GetOpaqueTagAddr (GetOpaqueTagAddrRequestMsg) returns (GetOpaqueTagAddrResponseMsg) {}
    rpc BarcoGetReqDescrEntry (BarcoGetReqDescrEntryRequestMsg) returns (BarcoGetReqDescrEntryResponseMsg) {}
    rpc BarcoGetRingMeta      (BarcoGetRingMetaRequestMsg) returns (BarcoGetRingMetaResponseMsg) {}
}

message GetOpaqueTagAddrRequest {
    types.BarcoRings ring_type = 1;
}

message GetOpaqueTagAddrRequestMsg {
    repeated  GetOpaqueTagAddrRequest request = 1;
}

message GetOpaqueTagAddrResponse {
    uint64 opaque_tag_addr = 1;
    types.ApiStatus api_status = 2;    // API status code
}

message GetOpaqueTagAddrResponseMsg {
    repeated  GetOpaqueTagAddrResponse response = 1;
}

// BarcoGetReqDescrEntryRequest - get request descriptor entry from a barco ring slot
message BarcoGetReqDescrEntryRequest {
  types.BarcoRings     ring_type     = 1;    // Barco Ring Type
  uint32               slot_index    = 2;    // Index of the slot in the ring
}

// BarcoGetReqDescrEntryRequestMsg is batched GET requests for barco rings
message BarcoGetReqDescrEntryRequestMsg {
  repeated BarcoGetReqDescrEntryRequest    request = 1;    // batched get request
}

// Required fields of the Barco Symmetric crypto Request descriptor
message BarcoSymmReqDescrMsg {
  fixed64           ilist_addr            = 1;
  fixed64           olist_addr            = 2;
  uint32            command               = 3;
  uint32            key_desc_index        = 4;
  fixed64           iv_addr               = 5;
  fixed64           status_addr           = 6;
  fixed64           doorbell_addr         = 7;
  fixed64           doorbell_data         = 8;
  uint32            salt                  = 9;
  fixed64           explicit_iv           = 10;
  uint32            header_size           = 11;
  uint32            barco_status          = 12;
  uint32            second_key_desc_index = 13;
}

// Required fields of the Barco ASymmetric crypto Request descriptor
message BarcoASymReqDescrMsg {
  fixed64           ilist_addr          = 1;
  fixed64           olist_addr          = 2;
  uint32            key_desc_index      = 3;
  fixed64           status_addr         = 4;
  uint32            opaque_tag_value    = 5;
  uint32            opaque_tag_wr_en    = 6;
  uint32            flag_a              = 7;
  uint32            flag_b              = 8;
}

// BarcoGetReqDescrEntryResponse returns the barco request descriptor content
// only if api_status indicates success, other fields are valid
message BarcoGetReqDescrEntryResponse {
  types.ApiStatus    api_status     = 1;    // API status code
  types.BarcoRings   ring_type      = 2;    // Barco Ring Type
  uint32             slot_index     = 3;    // Index of the slot in the ring
  oneof ReqDescrMsg {
     BarcoSymmReqDescrMsg  symm_req_descr = 4;  // Symmetric Request Descriptor content
     BarcoASymReqDescrMsg  asym_req_descr = 5;  // ASymmetric Request Descriptor content
  }
}

// BarcoGetReqDescrEntryResponseMsg is batched response to BarcoGetReqDescrEntryRequestMsg
message BarcoGetReqDescrEntryResponseMsg {
  repeated BarcoGetReqDescrEntryResponse    response = 1;    // batch get response
}


// BarcoGetRingMetaRequest - get ring meta data for a barco ring
message BarcoGetRingMetaRequest {
  types.BarcoRings     ring_type     = 1;    // Barco Ring Type
}

// BarcoGetRingMetaRequestMsg is batched GET requests for barco rings
message BarcoGetRingMetaRequestMsg {
  repeated BarcoGetRingMetaRequest    request = 1;    // batched get request
}

// BarcoGetRingMetaResponse returns the barco ring meta data
// only if api_status indicates success, other fields are valid
message BarcoGetRingMetaResponse {
  types.ApiStatus    api_status     = 1;    // API status code
  types.BarcoRings   ring_type      = 2;    // Barco Ring Type
  uint32             pi             = 3;    // Current value of Hw producer idx in the ring
  uint32             ci             = 4;    // Current value of Hw consumer ifx in the ring
}

// BarcoGetRingMetaResponseMsg is batched response to BarcoGetRingMetaRequestMsg
message BarcoGetRingMetaResponseMsg {
  repeated BarcoGetRingMetaResponse    response = 1;    // batch get response
}
