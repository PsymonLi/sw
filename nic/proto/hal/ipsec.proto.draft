//------------------------------------------------------------------------------
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved
//
// protobuf specification for IPSec
//------------------------------------------------------------------------------

syntax = "proto3";
import "types.proto";
import "kh.proto";

package ipsec;
option go_package="halproto";

// The IPSec service definition
service Ipsec {

  rpc IpsecRuleCreate (IpsecRuleRequestMsg) returns (IpsecRuleResponseMsg) {}
  rpc IpsecRuleUpdate (IpsecRuleRequestMsg) returns (IpsecRuleResponseMsg) {}
  rpc IpsecRuleDelete (IpsecRuleDeleteRequestMsg) returns (IpsecRuleDeleteResponseMsg) {}
  rpc IpsecRuleGet (IpsecRuleGetRequestMsg) returns (IpsecRuleGetRequestMsg) {}

  rpc IpsecSAEncryptCreate (IpsecSAEncryptRequestMsg) returns (IpsecSAEncryptResponseMsg) {}
  rpc IpsecSAEncryptUpdate (IpsecSAEncryptRequestMsg) returns (IpsecSAEncryptResponseMsg) {}
  rpc IpsecSAEncryptDelete (IpsecSAEncryptDeleteRequestMsg) returns (IpsecSAEncryptDeleteResponseMsg) {}
  rpc IpsecSAEncryptGet (IpsecSAEncryptGetRequestMsg) returns (IpsecSAEncryptGetRequestMsg) {}

  rpc IpsecSADecryptCreate (IpsecSADecryptRequestMsg) returns (IpsecSADecryptResponseMsg) {}
  rpc IpsecSADecryptUpdate (IpsecSADecryptRequestMsg) returns (IpsecSADecryptResponseMsg) {}
  rpc IpsecSADecryptDelete (IpsecSADecryptDeleteRequestMsg) returns (IpsecSADecryptDeleteResponseMsg) {}
  rpc IpsecSADecryptGet (IpsecSADecryptGetRequestMsg) returns (IpsecSADecryptGetRequestMsg) {}

}

// IPSec protocols
enum IpsecProtocol {
    IPSEC_PROTOCOL_NONE    = 0;
    IPSEC_PROTOCOL_AH      = 1;
    IPSEC_PROTOCOL_ESP     = 2;
}

// Encryption algorithms
enum EncryptionAlgorithm {
    ENCRYPTION_ALGORITHM_NONE           = 0;
    ENCRYPTION_ALGORITHM_AES_GCM_128    = 1;
    ENCRYPTION_ALGORITHM_AES_GCM_256    = 2;
    ENCRYPTION_ALGORITHM_AES_CCM_128    = 3;
    ENCRYPTION_ALGORITHM_AES_CCM_192    = 4;
    ENCRYPTION_ALGORITHM_AES_CCM_256    = 5;
    ENCRYPTION_ALGORITHM_AES_CBC_128    = 6;
    ENCRYPTION_ALGORITHM_AES_CBC_192    = 7;
    ENCRYPTION_ALGORITHM_AES_CBC_256    = 8;
    ENCRYPTION_ALGORITHM_DES3           = 9;
    ENCRYPTION_ALGORITHM_CHA_CHA        = 10;
}

// Authentication algorithms
enum AuthenticationAlgorithm {
    AUTHENTICATION_ALGORITHM_NONE    = 0;
    AUTHENTICATION_AES_GCM           = 1;
    AUTHENTICATION_AES_CCM           = 2;
    AUTHENTICATION_HMAC              = 3;
    AUTHENTICATION_AES_CBC_SHA       = 4;
}

// Key object
message Key {
  oneof key_info {
    bytes     key    = 1;          // ascii or hex key
    uint32    key_location = 2;    // key location in HSM
  }
}

// IPSec security association object
message IpsecSAEncrypt {
  types.ObjectMeta               meta                      = 1;    // common object meta
  kh.IpsecSAEncryptKeyHandle     key_or_handle             = 2 [(gogoproto.moretags) = "venice:\"key\""];    // key or handle of this object
  IpsecProtocol                  protocol                  = 3;    // ESP or AH
  AuthenticationAlgorithm        authentication_algorithm  = 4;   // authentication algorithm
  Key                            authentication_key        = 5;   // authenticaion key
  EncryptionAlgorithm            encryption_algorithm      = 6;   // encryption algorithm
  Key                            encryption_key            = 7;   // encryption key
  // Following are assumed and not configurable right now - iv_size (8 by default), icv_size (16 by default), block_size (16 by default)
  types.IPAddress                local_gateway_ip          = 8;   // local VPN GW IP, helps derive local MAC as well
  types.IPAddress                remote_gateway_ip         = 9;   // remote VPN GW IP, derive remote MAC using ARP database
  uint32                         spi                       = 10;   // security parameters index
  uint32                         nat_traversal_port        = 11;   // NAT-T port, if non-zero - NAT-T header is added.
  // Nonce = salt+iv - whether salt has to go into key (like ip xfrm ?? - lets see)
  uint32                         salt                      = 12;  // Initial Random number - 32 bits (need to be same on peer)
  uint64                         iv                        = 13;  // Initial Random number that goes in packet - can be assigned from top or generated locally
}

// IPSec security association object
message IpsecSADecrypt {
  types.ObjectMeta               meta                      = 1;    // common object meta
  kh.IpsecSADecryptKeyHandle     key_or_handle             = 2 [(gogoproto.moretags) = "venice:\"key\""];    // key or handle of this object
  IpsecProtocol                  protocol                  = 3;    // ESP or AH
  AuthenticationAlgorithm        authentication_algorithm  = 4;   // authentication algorithm
  Key                            authentication_key        = 5;   // authenticaion key
  EncryptionAlgorithm            decryption_algorithm      = 6;   // encryption algorithm
  EncryptionAlgorithm            rekey_dec_algorithm       = 7;   // encryption algorithm
  Key                            decryption_key            = 8;   // encryption key
  Key                            rekey_authentication_key  = 9;   // authenticaion key
  Key                            rekey_decryption_key      = 10;   // encryption key
  // Following are assumed and not configurable right now - iv_size (8 by default), icv_size (16 by default), block_size (16 by default)
  types.IPAddress                local_gateway_ip          = 11;   // local VPN GW IP, helps derive local MAC as well
  types.IPAddress                remote_gateway_ip         = 12;   // remote VPN GW IP, derive remote MAC using ARP database
  uint32                         spi                       = 13;   // security parameters index
  uint32                         rekey_active              = 14;
  uint32                         rekey_spi                 = 15;  // Valid when rekey is active - part of update 
  // Nonce = salt+iv - whether salt has to go into key (like ip xfrm ?? - lets see)
  uint32                         salt                      = 16;  // Initial Random number - 32 bits (need to be same on peer)
}
// IpsecRuleSpec is the user intent for the IPSec rule
message IpsecRuleSpec {
  types.ObjectMeta               meta                      = 1;    // common object meta
  kh.IpsecRuleKeyHandle          key_or_handle             = 2 [(gogoproto.moretags) = "venice:\"key\""];    // key or handle of this object
  kh.VrfKeyHandle                vrf_key_handle            = 3 [(gogoproto.moretags) = "venice:ref"];

  // IPSec rule match conditions
  repeated types.IPAddressObj    src_address               = 4;    // source address(es)
  repeated uint32                src_sg                    = 5;    // source security group(s)
  repeated types.IPAddressObj    dst_address               = 6;    // destination address(es)
  repeated uint32                dst_sg                    = 7;    // destination security group(s)
  repeated types.L4PortRange     dst_port_range            = 8;    // dst port range
  repeated types.L4PortRange     src_port_range            = 9;    // src port range

  // IPSec security associaton parameters
  IpsecSAEncrypt                        security_association      = 10;   // security association parameters
}

// IpsecRuleRequestMsg is the batched add or modify of NAT rule request
message IpsecRuleRequestMsg {
  repeated IpsecRuleSpec    request = 1;    // batched request
}

// IpsecRuleStatus reflects the current operational status of the IPSec rule
message IpsecRuleStatus {
  fixed64    handle = 1;    // id of the IPSec rule returned by HAL
}

// IpsecRuleResponse is the response to IpsecRuleSpec
message IpsecRuleResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.jsontag) = "api_status"];  // API status code
  IpsecRuleStatus    status     = 2;    // operational status of the rule
}

// IpsecRuleResponseMsg is batched response to IpsecRuleRequestMsg
message IpsecRuleResponseMsg {
  repeated IpsecRuleResponse    response = 1;    // batched response
}

// IpsecRuleDeleteRequest is used to delete a policy rule 
message IpsecRuleDeleteRequest {
  types.ObjectMeta        meta          = 1;    // object meta
  kh.IpsecRuleKeyHandle      key_or_handle = 2;    // IpsecRule key or handle
}

// IpsecRuleDeleteRequestMsg is used to delete a batch of ipsec rules
message IpsecRuleDeleteRequestMsg {
  repeated IpsecRuleDeleteRequest    request = 1;    // batched delete request
}

// IpsecRuleDeleteResponseMsg is batched response to IpsecRuleDeleteRequestMsg
message IpsecRuleDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// IpsecRuleGetRequest is used to get information about a ipsec rule
message IpsecRuleGetRequest {
  types.ObjectMeta          meta          = 1;    // object meta
  kh.IpsecRuleKeyHandle        key_or_handle = 2;    // IpsecRule key or handle
}

// IpsecRuleGetRequestMsg is batched GET requests for ipsec rule
message IpsecRuleGetRequestMsg {
  repeated IpsecRuleGetRequest    request = 1;    // batched get request
}



// IpsecSAEncryptRequestMsg is batched add or modify ipseccb request
message IpsecSAEncryptRequestMsg {
  repeated IpsecSAEncrypt   request = 1;    // batched request
}

// IpsecSAEncryptStatus is the operational status of a given ipseccb
message IpsecSAEncryptStatus {
  fixed64    ipseccb_handle     = 1;    // id of ipseccb returned by HAL
}

// IpsecSAEncryptResponse is response to IpsecSA
message IpsecSAEncryptResponse {
  types.ApiStatus        api_status            = 1;    // API status code
  IpsecSAEncryptStatus       ipseccb_status   = 2;    // ipseccb status, if api succeeded
}

// IpsecSAEncryptResponseMsg is batched response to IpsecSAEncryptRequestMsg
message IpsecSAEncryptResponseMsg {
  repeated IpsecSAEncryptResponse    response = 1;    // batched response
}

// IpsecSAEncryptDeleteRequest is used to delete a ipseccb
message IpsecSAEncryptDeleteRequest {
  types.ObjectMeta        meta          = 1;    // object meta
  kh.IpsecSAEncryptKeyHandle     key_or_handle = 2;    // IpsecSA key or handle
}

// IpsecSAEncryptDeleteRequestMsg is used to delete a batch of ipseccbs
message IpsecSAEncryptDeleteRequestMsg {
  repeated IpsecSAEncryptDeleteRequest    request = 1;    // batched delete request
}

// IpsecSAEncryptDeleteResponseMsg is batched response to IpsecSADeleteRequestMsg
message IpsecSAEncryptDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// IpsecSAEncryptGetRequest is used to get information about a ipseccb
message IpsecSAEncryptGetRequest {
  types.ObjectMeta          meta          = 1;    // object meta
  kh.IpsecSAEncryptKeyHandle            key_or_handle = 2;    // IpsecSA key or handle
}

// IpsecSAEncryptGetRequestMsg is batched GET requests for ipseccbs
message IpsecSAEncryptGetRequestMsg {
  repeated IpsecSAEncryptGetRequest    request = 1;    // batched get request
}


// IpsecSADecryptRequestMsg is batched add or modify ipseccb request
message IpsecSADecryptRequestMsg {
  repeated IpsecSADecrypt   request = 1;    // batched request
}

// IpsecSADecryptStatus is the operational status of a given ipseccb
message IpsecSADecryptStatus {
  fixed64    ipseccb_handle     = 1;    // id of ipseccb returned by HAL
}

// IpsecSADecryptResponse is response to IpsecSA
message IpsecSADecryptResponse {
  types.ApiStatus        api_status            = 1;    // API status code
  IpsecSADecryptStatus       ipseccb_status   = 2;    // ipseccb status, if api succeeded
}

// IpsecSADecryptResponseMsg is batched response to IpsecSADecryptRequestMsg
message IpsecSADecryptResponseMsg {
  repeated IpsecSADecryptResponse    response = 1;    // batched response
}

// IpsecSADecryptDeleteRequest is used to delete a ipseccb
message IpsecSADecryptDeleteRequest {
  types.ObjectMeta        meta          = 1;    // object meta
  kh.IpsecSADecryptKeyHandle     key_or_handle = 2;    // IpsecSA key or handle
}

// IpsecSADecryptDeleteRequestMsg is used to delete a batch of ipseccbs
message IpsecSADecryptDeleteRequestMsg {
  repeated IpsecSADecryptDeleteRequest    request = 1;    // batched delete request
}

// IpsecSADecryptDeleteResponseMsg is batched response to IpsecSADeleteRequestMsg
message IpsecSADecryptDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// IpsecSADecryptGetRequest is used to get information about a ipseccb
message IpsecSADecryptGetRequest {
  types.ObjectMeta          meta          = 1;    // object meta
  kh.IpsecSADecryptKeyHandle            key_or_handle = 2;    // IpsecSA key or handle
}

// IpsecSADecryptGetRequestMsg is batched GET requests for ipseccbs
message IpsecSADecryptGetRequestMsg {
  repeated IpsecSADecryptGetRequest    request = 1;    // batched get request
}
