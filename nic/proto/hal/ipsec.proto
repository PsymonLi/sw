//------------------------------------------------------------------------------
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved
//
// protobuf specification for IPSec
//------------------------------------------------------------------------------

syntax = "proto3";
import "types.proto";
import "kh.proto";

package ipsec;
option go_package="halproto";

// The IPSec service definition
service Ipsec {

  rpc IpsecRuleCreate (IpsecRuleRequestMsg) returns (IpsecRuleResponseMsg) {}
  rpc IpsecRuleUpdate (IpsecRuleRequestMsg) returns (IpsecRuleResponseMsg) {}
  rpc IpsecRuleDelete (IpsecRuleDeleteRequestMsg) returns (IpsecRuleDeleteResponseMsg) {}
  rpc IpsecRuleGet (IpsecRuleGetRequestMsg) returns (IpsecRuleGetResponseMsg) {}

  rpc IpsecSAEncryptCreate (IpsecSAEncryptRequestMsg) returns (IpsecSAEncryptResponseMsg) {}
  rpc IpsecSAEncryptUpdate (IpsecSAEncryptRequestMsg) returns (IpsecSAEncryptResponseMsg) {}
  rpc IpsecSAEncryptDelete (IpsecSAEncryptDeleteRequestMsg) returns (IpsecSAEncryptDeleteResponseMsg) {}
  rpc IpsecSAEncryptGet (IpsecSAEncryptGetRequestMsg) returns (IpsecSAEncryptGetResponseMsg) {}

  rpc IpsecSADecryptCreate (IpsecSADecryptRequestMsg) returns (IpsecSADecryptResponseMsg) {}
  rpc IpsecSADecryptUpdate (IpsecSADecryptRequestMsg) returns (IpsecSADecryptResponseMsg) {}
  rpc IpsecSADecryptDelete (IpsecSADecryptDeleteRequestMsg) returns (IpsecSADecryptDeleteResponseMsg) {}
  rpc IpsecSADecryptGet (IpsecSADecryptGetRequestMsg) returns (IpsecSADecryptGetResponseMsg) {}

  rpc IpsecGlobalStatisticsGet (IpsecGlobalStatisticsGetRequestMsg) returns (IpsecGlobalStatisticsGetResponseMsg) {}
}

// IPSec protocols
enum IpsecProtocol {
    IPSEC_PROTOCOL_NONE    = 0;
    IPSEC_PROTOCOL_AH      = 1;
    IPSEC_PROTOCOL_ESP     = 2;
}

// Encryption algorithms
enum EncryptionAlgorithm {
    ENCRYPTION_ALGORITHM_NONE           = 0;
    ENCRYPTION_ALGORITHM_AES_GCM_128    = 1;
    ENCRYPTION_ALGORITHM_AES_GCM_256    = 2;
    ENCRYPTION_ALGORITHM_AES_CCM_128    = 3;
    ENCRYPTION_ALGORITHM_AES_CCM_192    = 4;
    ENCRYPTION_ALGORITHM_AES_CCM_256    = 5;
    ENCRYPTION_ALGORITHM_AES_CBC_128    = 6;
    ENCRYPTION_ALGORITHM_AES_CBC_192    = 7;
    ENCRYPTION_ALGORITHM_AES_CBC_256    = 8;
    ENCRYPTION_ALGORITHM_DES3           = 9;
    ENCRYPTION_ALGORITHM_CHA_CHA        = 10;
}

// Authentication algorithms
enum AuthenticationAlgorithm {
    AUTHENTICATION_ALGORITHM_NONE    = 0;
    AUTHENTICATION_AES_GCM           = 1;
    AUTHENTICATION_AES_CCM           = 2;
    AUTHENTICATION_HMAC              = 3;
    AUTHENTICATION_AES_CBC_SHA       = 4;
}

// Key object
message Key {
  oneof key_info {
    bytes     key    = 1;          // ascii or hex key
    uint32    key_location = 2;    // key location in HSM
  }
}

// IPSec security association object
message IpsecSAEncrypt {
  kh.IpsecSAEncryptKeyHandle     key_or_handle             = 1 [(gogoproto.moretags) = "venice:key"];    // key or handle of this object
  IpsecProtocol                  protocol                  = 2;    // ESP or AH
  AuthenticationAlgorithm        authentication_algorithm  = 3;   // authentication algorithm
  Key                            authentication_key        = 4;   // authenticaion key
  EncryptionAlgorithm            encryption_algorithm      = 5;   // encryption algorithm
  Key                            encryption_key            = 6;   // encryption key
  types.IPAddress                local_gateway_ip          = 7;   // local VPN GW IP, helps derive local MAC as well
  types.IPAddress                remote_gateway_ip         = 8;   // remote VPN GW IP, derive remote MAC using ARP database
  uint32                         spi                       = 9;   // security parameters index
  uint32                         nat_traversal_port        = 10;   // NAT-T port, if non-zero - NAT-T header is added.
  uint32                         salt                      = 11;  // Initial Random number - 32 bits (need to be same on peer)
  uint64                         iv                        = 12;  // Initial Random number that goes in packet - can be assigned from top or generated locally
  kh.VrfKeyHandle                tep_vrf                   = 13; 
}

// IPSec security association object
message IpsecSADecrypt {
  kh.IpsecSADecryptKeyHandle     key_or_handle             = 1 [(gogoproto.moretags) = "venice:key"];    // key or handle of this object
  IpsecProtocol                  protocol                  = 2;    // ESP or AH
  AuthenticationAlgorithm        authentication_algorithm  = 3;   // authentication algorithm
  Key                            authentication_key        = 4;   // authenticaion key
  EncryptionAlgorithm            decryption_algorithm      = 5;   // encryption algorithm
  EncryptionAlgorithm            rekey_dec_algorithm       = 6;   // encryption algorithm
  Key                            decryption_key            = 7;   // encryption key
  Key                            rekey_authentication_key  = 8;   // authenticaion key
  Key                            rekey_decryption_key      = 9;   // encryption key
  uint32                         spi                       = 10;   // security parameters index
  uint32                         rekey_active              = 11;
  uint32                         rekey_spi                 = 12;  // Valid when rekey is active - part of update 
  uint32                         salt                      = 13;  // Initial Random number - 32 bits (need to be same on peer)
  kh.VrfKeyHandle                tep_vrf                   = 14; 
}


message IPSecSAEncryptGetSpec {
  kh.IpsecSAEncryptKeyHandle     key_or_handle             = 1 [(gogoproto.moretags) = "venice:key"];    // key or handle of this object
  IpsecProtocol                  protocol                  = 2;    // ESP or AH
  AuthenticationAlgorithm        authentication_algorithm  = 3;   // authentication algorithm
  Key                            authentication_key        = 4;   // authenticaion key
  EncryptionAlgorithm            encryption_algorithm      = 5;   // encryption algorithm
  Key                            encryption_key            = 6;   // encryption key
  types.IPAddress                local_gateway_ip          = 7;   // local VPN GW IP, helps derive local MAC as well
  types.IPAddress                remote_gateway_ip         = 8;   // remote VPN GW IP, derive remote MAC using ARP database
  uint32                         spi                       = 9;   // security parameters index
  uint32                         nat_traversal_port        = 10;   // NAT-T port, if non-zero - NAT-T header is added.
  uint32                         salt                      = 11;  // Initial Random number - 32 bits (need to be same on peer)
  uint64                         iv                        = 12;  // Initial Random number that goes in packet - can be assigned from top or generated locally
  uint32                         key_index                 = 13;
  uint32                         iv_size                   = 14;
  uint32                         icv_size                  = 15;
  uint64                         seq_no                    = 16;
  uint64                         total_pkts                = 17;
  uint64                         total_bytes               = 18;
  uint64                         total_drops               = 19;
  uint64                         total_rx_pkts             = 20;
  uint64                         total_rx_bytes            = 21;
  uint64                         total_rx_drops            = 22;
  kh.VrfKeyHandle                tep_vrf                   = 23; 
}

message IPSecSADecryptGetSpec {
  kh.IpsecSADecryptKeyHandle     key_or_handle             = 1 [(gogoproto.moretags) = "venice:key"];    // key or handle of this object
  IpsecProtocol                  protocol                  = 2;    // ESP or AH
  AuthenticationAlgorithm        authentication_algorithm  = 3;   // authentication algorithm
  Key                            authentication_key        = 4;   // authenticaion key
  EncryptionAlgorithm            decryption_algorithm      = 5;   // encryption algorithm
  EncryptionAlgorithm            rekey_dec_algorithm       = 6;   // encryption algorithm
  Key                            decryption_key            = 7;   // encryption key
  Key                            rekey_authentication_key  = 8;   // authenticaion key
  Key                            rekey_decryption_key      = 9;   // encryption key
  types.IPAddress                local_gateway_ip          = 10;   // local VPN GW IP, helps derive local MAC as well
  types.IPAddress                remote_gateway_ip         = 11;   // remote VPN GW IP, derive remote MAC using ARP database
  uint32                         spi                       = 12;   // security parameters index
  uint32                         rekey_active              = 13;
  uint32                         rekey_spi                 = 14;  // Valid when rekey is active - part of update 
  uint32                         salt                      = 15;  // Initial Random number - 32 bits (need to be same on peer)
  uint32                         key_index                 = 16;
  uint32                         new_key_index             = 17;
  uint32                         iv_size                   = 18;
  uint32                         icv_size                  = 19;
  uint64                         seq_no                    = 20;
  uint64                         total_pkts                = 21;
  uint64                         total_bytes               = 22;
  uint64                         total_drops               = 23;
  uint64                         total_rx_pkts             = 24;
  uint64                         total_rx_bytes            = 25;
  uint64                         total_rx_drops            = 26;
  kh.VrfKeyHandle                tep_vrf                   = 27; 
  uint64                         seq_no_bmp                = 28;
  uint64                         last_replay_seq_no        = 29;
}

message IPSecGlobalStatisticsGetSpec {
    uint64         encrypt_input_desc_errors         = 1;
    uint64         encrypt_output_desc_errors        = 2;
    uint64         encrypt_cb_ring_base_errors       = 3;
    uint64         encrypt_input_page_errors         = 4;
    uint64         encrypt_barco_req_addr_errors     = 5;
    uint64         encrypt_barco_cb_base_errors      = 6;
    uint64         encrypt_pad_addr_errors           = 7;
    uint64         encrypt_tail_bytes_errors         = 8;
    uint64         encrypt_output_page_errors        = 9;
    uint64         encrypt_stage4_inpage_errors      = 10;
    uint64         encrypt_table0_inpage_errors      = 11;
    uint64         encrypt_table2_inpage_errors      = 12;
    uint64         encrypt_table3_inpage_errors      = 13;
    uint64         encrypt_bad_barco_addr_errors     = 14;
    uint64         encrypt_barco_full_errors         = 15;
    uint64         encrypt_cb_ring_dma_errors        = 16;
    uint64         encrypt_desc_exhaust_errors       = 17;
    uint64         encrypt_txdma1_enter_counters     = 18;
    uint64         encrypt_txdma2_enter_counters     = 19;
    uint64         encrypt_txdma1_dummy_errors       = 20;
    uint64         encrypt_rxdma_dummy_desc_errors   = 21;
    uint64         encrypt_rxdma_enter_counters      = 22;
    uint64         encrypt_barco_bad_indesc_errors   = 23;
    uint64         encrypt_barco_bad_outdesc_errors  = 24;
    uint64         encrypt_txdma2_bad_indesc_free_errors    = 25;
    uint64         encrypt_txdma2_bad_outdesc_free_errors   = 26;
    uint64         encrypt_txdma1_bad_indesc_free_errors    = 27;
    uint64         encrypt_txdma1_bad_outdesc_free_errors   = 28;
    uint64         encrypt_txdma1_sem_free_errors           = 29;
    uint64         encrypt_txdma2_sem_free_errors           = 30;
    uint64         encrypt_txdma1_barco_ring_full_errors    = 31;

    uint64         decrypt_input_desc_errors         = 32;
    uint64         decrypt_output_desc_errors        = 33;
    uint64         decrypt_cb_ring_base_errors       = 34;
    uint64         decrypt_input_page_errors         = 35;
    uint64         decrypt_barco_req_addr_errors     = 36;
    uint64         decrypt_barco_cb_addr_errors      = 37;
    uint64         decrypt_stage4_inpage_errors      = 38;
    uint64         decrypt_output_page_errors        = 39;
    uint64         decrypt_txdma1_enter_counters     = 40;
    uint64         decrypt_txdma2_enter_counters     = 41;
    uint64         decrypt_txdma1_drop_counters      = 42;
    uint64         decrypt_desc_exhaust_errors       = 43;
    uint64         decrypt_load_ipsec_int_errors     = 44;
    uint64         decrypt_txdma1_dummy_errors       = 45;
    uint64         decrypt_txdma2_dummy_free         = 46;
    uint64         decrypt_rxdma_dummy_desc_errors   = 47;
    uint64         decrypt_rxdma_enter_counters      = 48;
    uint64         decrypt_txdma2_barco_bad_indesc_errors   = 49;
    uint64         decrypt_txdma2_barco_bad_outdesc_errors  = 50;
    uint64         decrypt_txdma2_bad_indesc_free_errors    = 51;
    uint64         decrypt_txdma2_bad_outdesc_free_errors   = 52;
    uint64         decrypt_txdma1_sem_free_errors           = 53;
    uint64         decrypt_txdma2_sem_free_errors           = 54;
    uint64         decrypt_txdma1_bad_indesc_free_errors    = 55;
    uint64         decrypt_txdma1_bad_outdesc_free_errors   = 56;
    uint64         decrypt_rxdma_cb_ring_full_errors        = 57;
    uint64         decrypt_txdma1_barco_ring_full_errors    = 58;
    
    uint32         rnmdpr_sem_pindex                 = 59;
    uint32         rnmdpr_sem_cindex                 = 60;
    uint32         gcm0_barco_full_errors            = 61;
    uint32         gcm1_barco_full_errors            = 62;
}

  
   
   

enum IpsecSAActionType {
  IPSEC_SA_ACTION_TYPE_NONE = 0;
  IPSEC_SA_ACTION_TYPE_ENCRYPT = 1;
  IPSEC_SA_ACTION_TYPE_DECRYPT = 2;
  IPSEC_SA_ACTION_TYPE_DROP = 3;
}
 
message IpsecSAAction {
  IpsecSAActionType sa_action_type = 1;
  oneof sa_handle {
    kh.IpsecSAEncryptKeyHandle   enc_handle = 2;
    kh.IpsecSADecryptKeyHandle   dec_handle = 3;
   }
}
    
message IpsecRuleMatchSpec {
  uint64             rule_id    = 1;    // rule id
  types.RuleMatch    match      = 2;    // match conditions
  IpsecSAAction      sa_action  = 3;
}

// IpsecRuleSpec is the user intent for the IPSec rule
message IpsecRuleSpec {
  kh.IpsecRuleKeyHandle          key_or_handle             = 1 [(gogoproto.moretags) = "venice:key"];    // key or handle of this object
  kh.VrfKeyHandle                vrf_key_handle            = 2 [(gogoproto.moretags) = "venice:ref"];
  repeated IpsecRuleMatchSpec    rules                     = 3;
}

// IpsecRuleRequestMsg is the batched add or modify of NAT rule request
message IpsecRuleRequestMsg {
  repeated IpsecRuleSpec    request = 1;    // batched request
}

// IpsecRuleStatus reflects the current operational status of the IPSec rule
message IpsecRuleStatus {
  fixed64    handle = 1;    // id of the IPSec rule returned by HAL
}

// IpsecRuleResponse is the response to IpsecRuleSpec
message IpsecRuleResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.jsontag) = "api_status"];  // API status code
  IpsecRuleStatus    status     = 2;    // operational status of the rule
}

// IpsecRuleResponseMsg is batched response to IpsecRuleRequestMsg
message IpsecRuleResponseMsg {
  repeated IpsecRuleResponse    response = 1;    // batched response
}

// IpsecRuleDeleteRequest is used to delete a policy rule 
message IpsecRuleDeleteRequest {
  kh.IpsecRuleKeyHandle      key_or_handle = 1;    // IpsecRule key or handle
}

// IpsecRuleDeleteRequestMsg is used to delete a batch of ipsec rules
message IpsecRuleDeleteRequestMsg {
  repeated IpsecRuleDeleteRequest    request = 1;    // batched delete request
}

// IpsecRuleDeleteResponse is response to IpsecRuleDeleteRequest
message IpsecRuleDeleteResponse {
  types.ApiStatus    api_status     = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

// IpsecRuleDeleteResponseMsg is batched response to IpsecRuleDeleteRequestMsg
message IpsecRuleDeleteResponseMsg {
  repeated IpsecRuleDeleteResponse   response = 1;    // batched delete response
}

// IpsecRuleGetRequest is used to get information about a ipsec rule
message IpsecRuleGetRequest {
  kh.IpsecRuleKeyHandle        key_or_handle = 1;    // IpsecRule key or handle
}

// IpsecRuleGetRequestMsg is batched GET requests for ipsec rule
message IpsecRuleGetRequestMsg {
  repeated IpsecRuleGetRequest    request = 1;    // batched get request
}

// per rule stats
message IpsecRuleEntryStats {
  uint32    num_tcp_sessions   = 1;
  uint32    num_udp_sessions   = 2;
  uint32    num_other_sessions = 3;
}

// per policy stats
message IpsecRuleStats {
  repeated IpsecRuleEntryStats    stats = 1;    // batched rule stats
}

// IpsecRuleGetResponse catpures all information about IPSec policy
message IpsecRuleGetResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"]; // API status code
  IpsecRuleSpec      spec       = 2;    // config
  IpsecRuleStatus    status     = 3;    // operational state
  IpsecRuleStats     stats      = 4;    // stats
}

// IpsecRuleGetResponseMsg is batched response to IpsecRuleGetRequestMsg
message IpsecRuleGetResponseMsg {
  repeated IpsecRuleGetResponse    response = 1;
}

// IpsecSAEncryptRequestMsg is batched add or modify ipsec_sa request
message IpsecSAEncryptRequestMsg {
  repeated IpsecSAEncrypt   request = 1;    // batched request
}

// IpsecSAEncryptStatus is the operational status of a given ipsec_sa
message IpsecSAEncryptStatus {
  fixed64    ipsec_sa_handle     = 1;    // id of ipsec_sa returned by HAL
}

// IpsecSAEncryptResponse is response to IpsecSA
message IpsecSAEncryptResponse {
  types.ApiStatus        api_status            = 1;    // API status code
  IpsecSAEncryptStatus       ipsec_sa_status   = 2;    // ipsec_sa status, if api succeeded
}

// IpsecSAEncryptResponseMsg is batched response to IpsecSAEncryptRequestMsg
message IpsecSAEncryptResponseMsg {
  repeated IpsecSAEncryptResponse    response = 1;    // batched response
}

// IpsecSAEncryptDeleteRequest is used to delete a ipsec_sa
message IpsecSAEncryptDeleteRequest {
  kh.IpsecSAEncryptKeyHandle     key_or_handle = 1;    // IpsecSA key or handle
}

// IpsecSAEncryptDeleteRequestMsg is used to delete a batch of ipsec_sas
message IpsecSAEncryptDeleteRequestMsg {
  repeated IpsecSAEncryptDeleteRequest    request = 1;    // batched delete request
}

// IpsecSAEncryptDeleteResponse is response to delete a ipsec_sa
message IpsecSAEncryptDeleteResponse {
  types.ApiStatus api_status = 1 [(gogoproto.moretags) = "venice:api_status"]; // API status code
}

// IpsecSAEncryptDeleteResponseMsg is batched response to IpsecSADeleteRequestMsg
message IpsecSAEncryptDeleteResponseMsg {
  repeated IpsecSAEncryptDeleteResponse    response = 1;    // batched delete response
}

// IpsecSAEncryptGetRequest is used to get information about a ipsec_sa
message IpsecSAEncryptGetRequest {
  kh.IpsecSAEncryptKeyHandle            key_or_handle = 1;    // IpsecSA key or handle
}

// IpsecSAEncryptGetRequestMsg is batched GET requests for ipsec_sas
message IpsecSAEncryptGetRequestMsg {
  repeated IpsecSAEncryptGetRequest    request = 1;    // batched get request
}

message IpsecSAEncryptGetResponse {
  types.ApiStatus        api_status = 1;
  IPSecSAEncryptGetSpec  spec       = 2;
  IpsecSAEncryptStatus   status     = 3;
}

message IpsecSAEncryptGetResponseMsg {
    repeated IpsecSAEncryptGetResponse response = 1;
}

// IpsecSADecryptRequestMsg is batched add or modify ipsec_sa request
message IpsecSADecryptRequestMsg {
  repeated IpsecSADecrypt   request = 1;    // batched request
}

// IpsecSADecryptStatus is the operational status of a given ipsec_sa
message IpsecSADecryptStatus {
  fixed64    ipsec_sa_handle     = 1;    // id of ipsec_sa returned by HAL
}

// IpsecSADecryptResponse is response to IpsecSA
message IpsecSADecryptResponse {
  types.ApiStatus        api_status            = 1;    // API status code
  IpsecSADecryptStatus       ipsec_sa_status   = 2;    // ipsec_sa status, if api succeeded
}

// IpsecSADecryptResponseMsg is batched response to IpsecSADecryptRequestMsg
message IpsecSADecryptResponseMsg {
  repeated IpsecSADecryptResponse    response = 1;    // batched response
}

// IpsecSADecryptDeleteRequest is used to delete a ipsec_sa
message IpsecSADecryptDeleteRequest {
  kh.IpsecSADecryptKeyHandle     key_or_handle = 1;    // IpsecSA key or handle
}

// IpsecSADecryptDeleteRequestMsg is used to delete a batch of ipsec_sas
message IpsecSADecryptDeleteRequestMsg {
  repeated IpsecSADecryptDeleteRequest    request = 1;    // batched delete request
}

// IpsecSADecryptDeleteResponse is response to delete a ipsec_sa
message IpsecSADecryptDeleteResponse {
  types.ApiStatus api_status = 1 [(gogoproto.moretags) = "venice:api_status"]; // API status code
}

// IpsecSADecryptDeleteResponseMsg is batched response to IpsecSADeleteRequestMsg
message IpsecSADecryptDeleteResponseMsg {
  repeated IpsecSADecryptDeleteResponse    response = 1;    // batched delete response
}

// IpsecSADecryptGetRequest is used to get information about a ipsec_sa
message IpsecSADecryptGetRequest {
  kh.IpsecSADecryptKeyHandle            key_or_handle = 1;    // IpsecSA key or handle
}

// IpsecSADecryptGetRequestMsg is batched GET requests for ipsec_sas
message IpsecSADecryptGetRequestMsg {
  repeated IpsecSADecryptGetRequest    request = 1;    // batched get request
}

message IpsecSADecryptGetResponse {
  types.ApiStatus        api_status = 1;
  IPSecSADecryptGetSpec  spec       = 2;
  IpsecSADecryptStatus   status     = 3;
}

message IpsecSADecryptGetResponseMsg {
    repeated IpsecSADecryptGetResponse response = 1;
}

message IpsecGlobalStatisticsGetRequest {
    uint32     clear_on_read = 1;
}

message IpsecGlobalStatisticsGetRequestMsg {
    repeated IpsecGlobalStatisticsGetRequest request = 1;
}

message IpsecGlobalStatisticsGetResponse {
    types.ApiStatus              api_status = 1;
    IPSecGlobalStatisticsGetSpec spec = 2;
}
   
message IpsecGlobalStatisticsGetResponseMsg {
    repeated IpsecGlobalStatisticsGetResponse response = 1;
}

