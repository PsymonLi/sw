//------------------------------------------------------------------------------
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved
//
// protobuf specification for IPSec
//------------------------------------------------------------------------------

syntax = "proto3";
import "types.proto";
import "kh.proto";

package ipsec;
option go_package="halproto";

// The IPSec service definition
service Ipsec {
  rpc IpsecRuleCreate (IpsecRuleRequestMsg) returns (IpsecRuleResponseMsg) {}
}

// IPSec protocols
enum IpsecProtocol {
    IPSEC_PROTOCOL_NONE    = 0;
    IPSEC_PROTOCOL_AH      = 1;
    IPSEC_PROTOCOL_ESP     = 2;
}

// Encryption algorithms
enum EncryptionAlgorithm {
    ENCRYPTION_ALGORITHM_NONE           = 0;
    ENCRYPTION_ALGORITHM_AES_GCM_128    = 1;
    ENCRYPTION_ALGORITHM_AES_GCM_256    = 2;
    ENCRYPTION_ALGORITHM_AES_CCM_128    = 3;
    ENCRYPTION_ALGORITHM_AES_CCM_192    = 4;
    ENCRYPTION_ALGORITHM_AES_CCM_256    = 5;
    ENCRYPTION_ALGORITHM_AES_CBC_128    = 6;
    ENCRYPTION_ALGORITHM_AES_CBC_192    = 7;
    ENCRYPTION_ALGORITHM_AES_CBC_256    = 8;
    ENCRYPTION_ALGORITHM_DES3           = 9;
    ENCRYPTION_ALGORITHM_CHA_CHA        = 10;
}

// Authentication algorithms
enum AuthenticationAlgorithm {
    AUTHENTICATION_ALGORITHM_NONE    = 0;
    AUTHENTICATION_AES_GCM           = 1;
    AUTHENTICATION_AES_CCM           = 2;
    AUTHENTICATION_HMAC              = 3;
    AUTHENTICATION_AES_CBC_SHA       = 4;
}

// Key object
message Key {
  oneof key_info {
    bytes     key    = 1;          // ascii or hex key
    uint32    key_location = 2;    // key location in HSM
  }
}

// IpsecRuleSpec is the user intent for the IPSec rule
message IpsecRuleSpec {
  types.ObjectMeta               meta                      = 1;    // common object meta
  kh.IpsecRuleKeyHandle          key_or_handle             = 2 [(gogoproto.moretags) = "venice:\"key\""];    // key or handle of this object
  kh.VrfKeyHandle                vrf_key_handle            = 3 [(gogoproto.moretags) = "venice:ref"];

  // IPSec rule match conditions
  repeated types.IPAddressObj    src_address               = 4;    // source address(es)
  repeated uint32                src_sg                    = 5;    // source security group(s)
  repeated types.IPAddressObj    dst_address               = 6;    // destination address(es)
  repeated uint32                dst_sg                    = 7;    // destination security group(s)
  repeated types.L4PortRange     dst_port_range            = 8;    // dst port range
  repeated types.L4PortRange     src_port_range            = 9;    // src port range

  // action parameters
  IpsecProtocol                  protocol                  = 10;    // ESP or AH
  AuthenticationAlgorithm        authentication_algorithm  = 11;   // authentication algorithm
  Key                            authentication_key        = 12;   // authenticaion key
  EncryptionAlgorithm            encryption_algorithm      = 13;   // encryption algorithm
  Key                            encryption_key            = 14;   // encryption key
  types.IPAddress                local_gateway_ip          = 15;   // local VPN GW IP
  types.IPAddress                remote_gateway_ip         = 16;   // remote VPN GW IP
  uint32                         spi                       = 17;   // security parameters index
  uint32                         nat_traversal_port        = 18;   // NAT-T port, if non-zero
}

// IpsecRuleRequestMsg is the batched add or modify of NAT rule request
message IpsecRuleRequestMsg {
  repeated IpsecRuleSpec    request = 1;    // batched request
}

// IpsecRuleStatus reflects the current opertional status of the IPSec rule
message IpsecRuleStatus {
  fixed64    handle = 1;    // id of the IPSec rule returned by HAL
}

// IpsecRuleResponse is the response to IpsecRuleSpec
message IpsecRuleResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.jsontag) = "api_status"];  // API status code
  IpsecRuleStatus    status     = 2;    // operational status of the rule
}

// IpsecRuleResponseMsg is batched response to IpsecRuleRequestMsg
message IpsecRuleResponseMsg {
  repeated IpsecRuleResponse    response = 1;    // batched response
}
