//------------------------------------------------------------------------------
// protobuf specification for tls_proxy_cb
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";

package tls_proxy;
option go_package="halproto";

// The tcp  cb service definition
service TlsProxyCb {
  rpc TlsProxyCbCreate (TlsProxyCbRequestMsg) returns (TlsProxyCbResponseMsg) {}
  rpc TlsProxyCbUpdate (TlsProxyCbRequestMsg) returns (TlsProxyCbResponseMsg) {}
  rpc TlsProxyCbDelete (TlsProxyCbDeleteRequestMsg) returns (TlsProxyCbDeleteResponseMsg) {}
  rpc TlsProxyCbGet (TlsProxyCbGetRequestMsg) returns (TlsProxyCbGetResponseMsg) {}
}

// TlsProxyCbKeyHandle is used to operate on a tls_proxy_cb either by its key or handle
message TlsProxyCbKeyHandle {
  oneof key_or_handle {
    uint32     tls_proxy_cb_id          = 1;    // unique tls_proxy_cb id allocated by app
    fixed64    tls_proxy_cb_handle      = 2;    // tls_proxy_cb handle returned by HAL
  }
}

// TlsProxyCbSpec captures all the tls_proxy_cb level configuration
message TlsProxyCbSpec {
  types.ObjectMeta      meta                       = 1;    // common object meta
  TlsProxyCbKeyHandle   key_or_handle                   = 2;    // tls_proxy_cb being created/updated
  uint32                nic_dec_head               = 3;
  uint32                nic_dec_tail               = 4;
  uint32                command                    = 5;
  uint32                debug_dol                  = 6;
  uint32                serq_pi                    = 7;
  uint32                serq_ci                    = 8;
  uint32                bsq_pi                     = 9;
  uint32                bsq_ci                     = 10;
  uint32                crypto_key_idx             = 11;
  uint32                serq_base                  = 12;
  uint32                sesq_base                  = 13;
  fixed64               tnmdr_alloc                = 14;
  fixed64               tnmpr_alloc                = 15;
  fixed64               rnmdr_free                 = 16;
  fixed64               rnmpr_free                 = 17;
  fixed64               enc_requests               = 18;
  fixed64               enc_completions            = 19;
  fixed64               enc_failures               = 20;
  fixed64               dec_requests               = 21;
  fixed64               dec_completions            = 22;
  fixed64               dec_failures               = 23;
  uint32                salt                       = 24;
  uint64                explicit_iv                = 25;
  uint32                pre_debug_stage0_7_thread  = 26;
  uint32                post_debug_stage0_7_thread = 27;
  bool                  is_decrypt_flow            = 28;
  uint32                other_fid                  = 29;
  types.AppRedirType    l7_proxy_type              = 30;
  uint32                crypto_hmac_key_idx        = 31;
  fixed64               mac_requests               = 32;
  fixed64               mac_completions            = 33;
  fixed64               mac_failures               = 34;
  uint32                cpu_id                     = 35;
}

// TlsProxyCbRequestMsg is batched add or modify tls_proxy_cb request
message TlsProxyCbRequestMsg {
  repeated TlsProxyCbSpec    request = 1;    // batched request
}

// TlsProxyCbStatus is the operational status of a given tls_proxy_cb
message TlsProxyCbStatus {
  fixed64    tls_proxy_cb_handle     = 1;    // id of tls_proxy_cb returned by HAL
}

// TlsProxyCbResponse is response to TlsProxyCbSpec
message TlsProxyCbResponse {
  types.ApiStatus        api_status            = 1;    // API status code
  TlsProxyCbStatus       tls_proxy_cb_status   = 2;    // tls_proxy_cb status, if api succeeded
}

// TlsProxyCbResponseMsg is batched response to TlsProxyCbRequestMsg
message TlsProxyCbResponseMsg {
  repeated TlsProxyCbResponse    response = 1;    // batched response
}

// TlsProxyCbDeleteRequest is used to delete a tls_proxy_cb
message TlsProxyCbDeleteRequest {
  types.ObjectMeta        meta          = 1;    // object meta
  TlsProxyCbKeyHandle     key_or_handle = 2;    // TlsProxyCb key or handle
}

// TlsProxyCbDeleteRequestMsg is used to delete a batch of tls_proxy_cbs
message TlsProxyCbDeleteRequestMsg {
  repeated TlsProxyCbDeleteRequest    request = 1;    // batched delete request
}

// TlsProxyCbDeleteResponseMsg is batched response to TlsProxyCbDeleteRequestMsg
message TlsProxyCbDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// TlsProxyCbGetRequest is used to get information about a tls_proxy_cb
message TlsProxyCbGetRequest {
  types.ObjectMeta          meta          = 1;    // object meta
  TlsProxyCbKeyHandle       key_or_handle = 2;    // TlsProxyCb key or handle
}

// TlsProxyCbGetRequestMsg is batched GET requests for tls_proxy_cbs
message TlsProxyCbGetRequestMsg {
  repeated TlsProxyCbGetRequest    request = 1;    // batched get request
}

// TlsProxyCbStats is the statistics object for each tls_proxy_cb
message TlsProxyCbStats {
}

// TlsProxyCbGetResponse captures all the information about a tls_proxy_cb
// only if api_status indicates success, other fields are valid
message TlsProxyCbGetResponse {
  types.ApiStatus        api_status = 1;    // API status code
  TlsProxyCbSpec         spec       = 2;    // tls_proxy_cb configuration
  TlsProxyCbStatus       status     = 3;    // operational state of tls_proxy_cb
  TlsProxyCbStats        stats      = 4;    // stats of the tls_proxy_cb
}

// TlsProxyCbGetResponseMsg is batched response to TlsProxyCbGetRequestMsg
message TlsProxyCbGetResponseMsg {
  repeated TlsProxyCbGetResponse    response = 1;    // batch get response
}
