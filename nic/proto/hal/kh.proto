//------------------------------------------------------------------------------
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved
// protobuf specification for keys and handles of all HAL objects
//------------------------------------------------------------------------------

syntax = "proto3";
package kh;
option go_package="halproto";

// import public "protos/github/gogo/protobuf/gogoproto/gogo.proto";
import "types.proto";
//import public "gogo.proto";

// SecurityProfileKeyHandle is used to operate on a security profile
// either by its id or HAL allocated handle
message SecurityProfileKeyHandle {
  oneof key_or_handle {
    uint32     profile_id     = 1;     // App allocated unique security profile id
    fixed64    profile_handle = 2;     // id of the SecurityProfile returned by HAL
  }
}

// CollectorKeyHandle is used to operate on a collector either by its key or handle
message CollectorKeyHandle {
  oneof key_or_handle {
    uint64     collector_id     = 1;   // unique collector id allocated by app
    fixed64    collector_handle = 2;   // collector handle returned by HAL
  }
}

// ExportControlKeyHandle is used to operate on a Export Control object either by its key or handle
message ExportControlKeyHandle {
  oneof key_or_handle {
    uint64     exportcontrol_id     = 1;   // unique export control id allocated by app
    fixed64    exportcontrol_handle = 2;   // export control handle returned by HAL
  }
}

// FlowMonitorRuleKeyHandle is used to operate on a FlowMonitorRule object either by its key or handle
message FlowMonitorRuleKeyHandle {
  oneof key_or_handle {
    uint64     flowmonitorrule_id     = 1 [(gogoproto.moretags) = "venice:range:0-1024"];   // unique flowmon rule id allocated by app
    fixed64    flowmonitorrule_handle = 2;   // flowmon handle returned by HAL
  }
}

// DropMonitorRuleKeyHandle is used to operate on a DropMonitorRule object either by its key or handle
message DropMonitorRuleKeyHandle {
  oneof key_or_handle {
    uint64     dropmonitorrule_id     = 1;   // unique dropmon rule id allocated by app
    fixed64    dropmonitorrule_handle = 2;   // dropmon handle returned by HAL
  }
}

// MirrorSessionKeyHandle is used to operate on a MirrorSession object either by its key or handle
message MirrorSessionKeyHandle {
  oneof key_or_handle {
    uint64     mirrorsession_id     = 1 [(gogoproto.moretags) = "venice:range:0-7"]; // unique mirror session id allocated by app
    fixed64    mirrorsession_handle = 2;   // mirror session handle returned by HAL
  }
}

// VrfKeyHandle is used to operate on a vrf either by its key or handle
message VrfKeyHandle {
  oneof key_or_handle {
    uint64     vrf_id     = 1;   // unique vrf id allocated by app
    fixed64    vrf_handle = 2;    // vrf handle returned by HAL
  }
}

// NetworkKey uniquely identifies a network by its key
message NetworkKey {
  VrfKeyHandle      vrf_key_handle = 1 [(gogoproto.moretags) = "venice:ref"];    // VRF key or handle
  types.IPPrefix    ip_prefix      = 2;    // IP prefix
}

// NetworkKeyHandle uniquely identifies a Network
message NetworkKeyHandle {
  oneof key_or_handle {
    NetworkKey         nw_key       = 1;    // network's key
    fixed64            nw_handle    = 2;    // network's handle returned by HAL
  }
}

// NexthopKeyHandle uniquely identifies a Nexthop
message NexthopKeyHandle {
  oneof key_or_handle {
    uint64     nexthop_id     = 1;    // nexthop id
    fixed64    nexthop_handle = 2;    // nexthop's handle returned bu HAL
  }
}

// RouteKey uniquely identifies a route by its key
message RouteKey {
  VrfKeyHandle      vrf_key_handle = 1 [(gogoproto.moretags) = "venice:ref"];    // VRF key or handle
  types.IPPrefix    ip_prefix      = 2;    // IP prefix
}

// RouteKeyHandle uniquely identifies a Route
message RouteKeyHandle {
  oneof key_or_handle {
    RouteKey    route_key    = 1;    // route's key
    fixed64     route_handle = 2;    // route's handle returned by HAL
  }
}

// L2SegmentKeyHandle is used to operate on a L2 segment either by its
// segment id or HAL allocated handle
message L2SegmentKeyHandle {
  oneof key_or_handle {
    uint64     segment_id        = 1;     // App allocated unique L2 segment id
                                          // NOTE:
                                          // 1. this is unique across all types of L2 segments
                                          // 2. this is allocated by the HAL app
    fixed64    l2segment_handle  = 2;     // id of the L2 segment returned by HAL
  }
}

message SecurityPolicyKey {
  uint64       security_policy_id  = 1;
  VrfKeyHandle vrf_id_or_handle    = 2 [(gogoproto.moretags) = "venice:ref"];
}

// SecurityPolicyKeyHandle uniquely identifies a security policy and is used
// to create/update/delete/get secutiry rules
message SecurityPolicyKeyHandle {
  oneof policy_key_or_handle {
    SecurityPolicyKey   security_policy_key    = 1;  // rule id idenfied by a number
    fixed64             security_policy_handle = 2;  // handle for security policy returned by hal
  }
}

message SecurityGroupPolicyId {
  uint64     security_group_id         = 1;    // security group id or label
  uint64     peer_security_group_id    = 2;    // peer security group id
}

// SecurityGroupKeyPolicyHandle uniquely identifies a security group and is used
// to create/update/delete/get security group Policy
message SecurityGroupPolicyKeyHandle {
  oneof policy_key_or_handle {
    SecurityGroupPolicyId   security_group_policy_id      = 1;
    fixed64                 security_group_policy_handle  = 2;// handle for security group policy
  }
}

// security_group obj definition
// SecurityGroupKeyHandle uniquely identifies a security group and is used
// to create/update/delete/get security groups
message SecurityGroupKeyHandle {
  oneof key_or_handle {
    uint64     security_group_id      = 1;    // security group id or label
    fixed64    security_group_handle  = 2;    // id of security group returned by HAL
  }
}

// PortKeyHandle uniquely identifies a Port
message PortKeyHandle {
  oneof key_or_handle {
    fixed32   port_id       = 1;     // app allocated unique (across all ports) port id
    fixed64   port_handle   = 2;     // id of port returned by HAL
  }
}

// LifKeyHandle uniquely identifies a LIF
message LifKeyHandle {
  oneof key_or_handle {
    fixed64         lif_id     = 1;     // app allocated unique LIF id
    fixed64         lif_handle = 2;     // id of interface returned by HAL
  }
}

// InterfaceKeyHandle uniquely identifies a Interface
message InterfaceKeyHandle {
  oneof key_or_handle {
    fixed64         interface_id = 1;     // app allocated unique (across all interface types) interface id
    fixed64         if_handle    = 2;     // id of interface returned by HAL
  }
}

// EndpointL2Key is L2 key of the endpoint
// NOTE: An endpoint can have only one L2 key
message EndpointL2Key {
  kh.L2SegmentKeyHandle l2segment_key_handle = 1 [(gogoproto.moretags) = "venice:ref"];
  uint64     mac_address          = 2;
}

// EndpointL3Key is the L3 key of the endpoint
// NOTE: An endpoint can have many L3 keys
message EndpointL3Key {
  VrfKeyHandle      vrf_key_handle = 1 [(gogoproto.moretags) = "venice:ref"];;    // VRF key or handle
  types.IPAddress   ip_address = 2;    // IP address of the endpoint
}

// Endpoint can be uniquely identified by its L2 or one of its L3 keys
message EndpointKey {
  oneof endpoint_l2_l3_key {
    EndpointL2Key    l2_key = 1;    // L2 key
    EndpointL3Key    l3_key = 2;    // L3 key
  }
}

// Endpoint is accessible via its key or handle
message EndpointKeyHandle {
  oneof key_or_handle {
    EndpointKey        endpoint_key        = 1;    // endpoint's key
    fixed64            endpoint_handle     = 2;    // endpoint's handle
  }
}

// Filter Type
enum FilterType {
    FILTER_NONE         = 0; // None
    FILTER_LIF          = 1; // (Lif, *, *) Filter
    FILTER_LIF_MAC      = 2; // (Lif, Mac, *) Filter
    FILTER_LIF_VLAN     = 3; // (Lif, *, Vlan) Filter
    FILTER_LIF_MAC_VLAN = 4; // (Lif, Mac, Vlan) Filter
}

// Filter key
message FilterKey {
    kh.LifKeyHandle     lif_key_or_handle   = 1;    // filter on lif
    FilterType          type                = 2;    // type decides which of mac, vlan are valid
    uint64              mac_address         = 3;    // allow packets to this mac
    uint32              vlan_id             = 4;    // allow packets to this vlan
}

// Filter is accessible via its key or handle
message FilterKeyHandle {
  oneof key_or_handle {
    FilterKey           filter_key        = 1;    // filter's key
    fixed64             filter_handle     = 2;    // filter's handle
  }
}

message MulticastEntryKeyIP {
  types.IPAddress          source = 1;              // Source IP
  types.IPAddress          group  = 2;              // Destination IP
}

message MulticastEntryKeyMac {
  fixed64 group = 1;                                // Multicast MAC
}

message MulticastEntryKey {
  oneof ip_or_mac {
    MulticastEntryKeyIP  ip  = 1;
    MulticastEntryKeyMac mac = 2;
  }
  L2SegmentKeyHandle l2segment_key_handle  = 3 [(gogoproto.moretags) = "venice:ref"];    // L2 segment handle
}

// MulticastEntryKeyHandle
message MulticastEntryKeyHandle {
  oneof key_or_handle {
    MulticastEntryKey key    = 1;
    fixed64 multicast_handle = 2;
  }
}

// AclKeyHandle uniquely identifies a Acl
message AclKeyHandle {
  oneof key_or_handle {
    fixed32   acl_id     = 1;    // app allocated unique Acl id
    fixed64   acl_handle = 2;    // id of acl returned by HAL
  }
}

// GftExactMatchProfileKeyHandle is used to operate on a GFT exact match profile
// either by its profile id or HAL allocated handle
message GftExactMatchProfileKeyHandle {
  oneof key_or_handle {
    uint64     profile_id      = 1;   // App allocated unique profile id
    fixed64    profile_handle  = 2;   // handle of the profile returned by HAL
  }
}

// GftHeaderTranspositionProfileKeyHandle is used to operate on a GFT header
// transposition profile either by its profile id or HAL allocated handle
message GftHeaderTranspositionProfileKeyHandle {
  oneof key_or_handle {
    uint64     profile_id      = 1;   // App allocated unique profile id
    fixed64    profile_handle  = 2;   // handle of the profile returned by HAL
  }
}

// GftExactMatchFlowEntryKeyHandle is used to operate on a GFT exact match
// flow entry either by its entry id or or HAL allocated handle
message GftExactMatchFlowEntryKeyHandle {
  oneof key_or_handle {
    uint64     flow_entry_id     = 1;   // App allocated unique profile id
    fixed64    flow_entry_handle = 2;   // handle of the profile returned by HAL
  }
}

// NAT pool key object
message NatPoolKey {
  VrfKeyHandle    vrf_kh  = 1 [(gogoproto.moretags) = "venice:ref"];    // VRF's key or handle
  uint64          pool_id = 2;    // nat pool id
}

// NAT pool key/handle object
message NatPoolKeyHandle {
  oneof key_or_handle {
    NatPoolKey    pool_key    = 1;    // NAT pool key
    fixed64       pool_handle = 2;    // unique id allocated by HAL
  }
}

// Key for the NAT policy
message NATPolicyKey {
  uint64          nat_policy_id     = 1;    // NAT policy id
  VrfKeyHandle    vrf_key_or_handle = 2 [(gogoproto.moretags) = "venice:ref"];    // VRF key or handle
}

// NatPolicyKeyHandle uniquely identifies a NAT policy and is used
// to create/update/delete/get NAT rules
message NatPolicyKeyHandle {
  oneof key_or_handle {
    NATPolicyKey    policy_key    = 1;  // key for the NAT policy
    fixed64         policy_handle = 2;  // handle for NAT policy returned by hal
  }
}

// Svc object identies an app, while a service can run on multiple IPs
// in general case where the service is spread out, an optional IP address
// specified explicitly to nail a service to particular IP where a single
// instance of service is run. Similarlt, port is not mandatory when only
// single instance of service is running on a given IP and nothing else
message Svc {
  kh.VrfKeyHandle    vrf_kh  = 1 [(gogoproto.moretags) = "venice:ref"];
  types.IPAddress    ip_addr = 2;    // IP address on which service is running
  uint32             port    = 3;    // L4 port on which the service runs on
}

// NatMappingKeyHandle uniquely identifies a NAT mapping and is used
// to create/update/delete/get NAT mappings
message NatMappingKeyHandle {
  oneof key_or_handle {
    Svc        svc            = 1;  // (VRF, IP, port) that identifies the service
    fixed64    mapping_handle = 2;  // handle for NAT mapping returned by HAL
  }
}

// Key for the IPSec rule policy
message IPSecRuleKey {
  uint64          ipsec_rule_id     = 1;    // IPSec rule policy id
  VrfKeyHandle    vrf_key_or_handle = 2 [(gogoproto.moretags) = "venice:ref"];    // VRF key or handle
}

// IpsecRuleKeyHandle uniquely identifies a IPSec rule and is used
// to create/update/delete/get IPSec rules
message IpsecRuleKeyHandle {
  oneof key_or_handle {
    IPSecRuleKey rule_key = 1;     // key for the IPSec policy
    fixed64      rule_handle = 2;  // handle for IPSec rule returned by HAL
  }
}

// IpsecSAEncryptKeyHandle uniquely identifies a IPSec CB and is used
// to create/update/delete/get IPSec CBs
message IpsecSAEncryptKeyHandle {
  oneof key_or_handle {
    uint64     cb_id     = 1;  // CB id idenfied by a number
    fixed64    cb_handle = 2;  // handle for IPSec CB returned by HAL
  }
  VrfKeyHandle    vrf_key_or_handle = 3 [(gogoproto.moretags) = "venice:ref"];    // VRF key or handle
}

// IpsecSADecryptKeyHandle uniquely identifies a IPSec CB and is used
// to create/update/delete/get IPSec CBs
message IpsecSADecryptKeyHandle {
  oneof key_or_handle {
    uint64     cb_id     = 1;  // CB id idenfied by a number
    fixed64    cb_handle = 2;  // handle for IPSec CB returned by HAL
  }
  VrfKeyHandle    vrf_key_or_handle = 3 [(gogoproto.moretags) = "venice:ref"];    // VRF key or handle
}


// Key for the TcpProxy rule policy
message TcpProxyRuleKey {
  uint64          tcp_proxy_rule_id     = 1;    // TcpProxy rule policy id
  VrfKeyHandle    vrf_key_or_handle = 2 [(gogoproto.moretags) = "venice:ref"];    // VRF key or handle
}

// TcpProxyRuleKeyHandle uniquely identifies a TcpProxy rule and is used
// to create/update/delete/get TcpProxy rules
message TcpProxyRuleKeyHandle {
  oneof key_or_handle {
    TcpProxyRuleKey rule_key = 1;     // key for the TcpProxy policy
    fixed64      rule_handle = 2;  // handle for TcpProxy rule returned by HAL
  }
}

// QosGroup identifier
enum QosGroup {
  DEFAULT                   = 0;     // Default qos group
  USER_DEFINED_1            = 1;     // User defined qos group 1
  USER_DEFINED_2            = 2;     // User defined qos group 2
  USER_DEFINED_3            = 3;     // User defined qos group 3
  USER_DEFINED_4            = 4;     // User defined qos group 4
  USER_DEFINED_5            = 5;     // User defined qos group 5
  USER_DEFINED_6            = 6;     // User defined qos group 6
  CONTROL                   = 7;     // Control traffic
  SPAN                      = 8;     // Span traffic
  INTERNAL_RX_PROXY_NO_DROP = 9;     // TODO: REMOVE DOL only - Internal group for Rx Proxy no drop traffic
  INTERNAL_RX_PROXY_DROP    = 10;    // TODO: REMOVE DOL only - Internal group for Rx Proxy drop traffic
  INTERNAL_TX_PROXY_NO_DROP = 11;    // TODO: REMOVE DOL only - Internal group for Tx Proxy no drop traffic
  INTERNAL_TX_PROXY_DROP    = 12;    // TODO: REMOVE DOL only - Internal group for Tx Proxy drop traffic
  INTERNAL_CPU_COPY         = 13;    // TODO: REMOVE DOL only - Internal group for CPU Copy traffic
}

// QosClassKeyHandle uniquely identifies a QosClass
message QosClassKeyHandle {
  oneof key_or_handle {
    QosGroup qos_group        = 1;    // Qos Group
    fixed64  qos_class_handle = 2;    // id of QosClass returned by HAL
  }
}

// CoppType identifies the type of traffic for the copp policy
enum CoppType {
  COPP_TYPE_FLOW_MISS = 0;    // Flow miss pkts
  COPP_TYPE_ARP       = 1;    // ARP
  COPP_TYPE_DHCP      = 2;    // DHCP
}

// CoppKeyHandle uniquely identifies a Copp
message CoppKeyHandle {
  oneof key_or_handle {
    CoppType copp_type   = 1;    // Copp type
    fixed64  copp_handle = 2;    // id of Copp returned by HAL
  }
}

message AppKeyHandle {
    oneof key_or_handle {
        fixed64 app_id     = 1;      // Number assigned by upper layers to identify app
        fixed64 app_handle = 2;      // id of app returned by HAL
    }
}

