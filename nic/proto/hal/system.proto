//------------------------------------------------------------------------------
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved
//
// protobuf specification for system level information.
//  - Status
//  - Stats
//      - Drop Stats
//      - Table Stats
//      - Proxy Stats
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
option go_package="halproto";

package sys;

// System service definition
service System {
  // System related APIs
  rpc SystemGet(types.Empty) returns (SystemResponse) {}
}

message DropStatsEntry {
  bool      drop_input_mapping                      = 1;        // input mapping table miss
  bool      drop_input_mapping_dejavu               = 2;        // deja-vu drop
  bool      drop_flow_hit                           = 3;        // flow hit drop
  bool      drop_flow_miss                          = 4;        // flow miss drop
  bool      drop_ipsg                               = 5;        // ipsg drop
  bool      drop_ingress_policer                    = 6;        // ingress pol. drop    
  bool      drop_egress_policer                     = 7;        // egress pol. drop
  bool      drop_nacl                               = 8;        // nacl drop
  bool      drop_malformed_pkt                      = 9;        // malformed pkt drop
  bool      drop_ping_of_death                      = 10;       // ping of death drop
  bool      drop_fragment_too_small                 = 11;       // fragement is too small
  bool      drop_ip_normalization                   = 12;       // ip norm. drop
  bool      drop_tcp_normalization                  = 13;       // tcp norm. drop
  bool      drop_tcp_xmas_tree_pkt                  = 14;       // xmas tree pkt 
  bool      drop_tcp_non_syn_first_pkt              = 15;       // non-syn first pkt
  bool      drop_icmp_normalization                 = 16;       // icmp norm. drop
  bool      drop_icmp_src_quench_msg                = 17;       // src quench drop
  bool      drop_icmp_redirect_msg                  = 18;       // icmp redirect drop
  bool      drop_icmp_info_req_msg                  = 19;       // icmp req drop
  bool      drop_icmp_addr_req_msg                  = 20;       // icmp addr req drop
  bool      drop_icmp_traceroute_msg                = 21;       // icmp traceroute drop
  bool      drop_icmp_rsvd_type_msg                 = 22;       // icmp rsvd. type 
  bool      drop_input_properties_miss              = 23;       // input properties miss
  bool      drop_tcp_out_of_window                  = 24;       // tcp OOW drop
  bool      drop_tcp_split_handshake                = 25;       // split handshake drop
  bool      drop_tcp_win_zero_drop                  = 26;       // tcp win. zero
  bool      drop_tcp_ack_err                        = 27;       // tcp ack err
  bool      drop_tcp_data_after_fin                 = 28;       // tcp data after fin
  bool      drop_tcp_non_rst_pkt_after_rst          = 29;       // tcp non rst
  bool      drop_tcp_invalid_responder_first_pkt    = 30;       // tcp invalid resp.
  bool      drop_tcp_unexpected_syn                 = 31;       // tcp unexpected syn
  uint64    drop_count                              = 32;       // drop count for multiple drop reasons
}

// Table types
enum TableType {
  TABLE_TYPE_NONE                                   = 0;
  TABLE_TYPE_INDEX                                  = 1;
  TABLE_TYPE_HASH                                   = 2;
  TABLE_TYPE_HASH_TCAM                              = 3;
  TABLE_TYPE_TCAM                                   = 4;
}

// TableStatsEntry captures table specific stats for h/w table health monitoring
message TableStatsEntry {
  TableType    table_type                           = 1;   // type of the table
  string       table_name                           = 2;   // table name
  uint32       table_size                           = 3;   // table size
  uint32       overflow_table_size                  = 4;   // overflow table size, if applicable
  uint32       entries_in_use                       = 5;   // number of entries in use
  uint32       overflow_entries_in_use              = 6;   // number of overflow entries in use, if applicable
  uint32       num_inserts                          = 7;   // number of insert operations attemtped
  uint32       num_insert_errors                    = 8;   // number of failed insert operations
  uint32       num_deletes                          = 9;  // number of delete operations attempted
  uint32       num_delete_errors                    = 10;  // number of failed delete operations
}

// TableStats is container for statistics of all tables in the data path
message TableStats {
  repeated TableStatsEntry    table_stats           = 1;
}

// Status captures the operating status of various components in the HAL
// including "ready" status, thread health etc.
message Status {
}

// Global system object
message SystemResponse {
  types.ApiStatus    api_status      = 1;                  // API status code
  Stats              stats           = 2;                  // Statistics
  Status             status          = 3;                  // System status
}

// Stats object
message Stats {
  DropStats     drop_stats          = 1;                   // Drop statistics
  TableStats    table_stats         = 2;                   // Table statistics
}

// Drop Stats object
message DropStats {
  repeated DropStatsEntry drop_entries  = 1;               // list of drop statistics
}

