//------------------------------------------------------------------------------
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved
//
// protobuf specification for system level information.
//  - Status
//  - Stats
//      - Drop Stats
//      - Table Stats
//      - Proxy Stats
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "qos.proto";
option go_package="halproto";

package sys;

// System service definition
service System {
  // System related APIs
  rpc ApiStatsGet(types.Empty) returns (ApiStatsResponse) {}
  rpc SystemGet(types.Empty) returns (SystemResponse) {}
  rpc SystemUuidGet(types.Empty) returns (SystemResponse) {}
  rpc ClearIngressDropStats(types.Empty) returns (types.Empty) {}
  rpc ClearEgressDropStats(types.Empty) returns (types.Empty) {}
  rpc ClearPbDropStats(types.Empty) returns (types.Empty) {}
  rpc ClearFteStats(types.Empty) returns (types.Empty) {}
  rpc ClearFteTxRxStats(types.Empty) returns (types.Empty) {}
  rpc ClearTableStats(types.Empty) returns (types.Empty) {}
  rpc ClearPbStats(types.Empty) returns (types.Empty) {}
}

enum ApiCounter {
  API_COUNTER_NONE                                      = 0;
  API_COUNTER_VRF_CREATE                                = 1;
  API_COUNTER_VRF_UPDATE                                = 2;
  API_COUNTER_VRF_DELETE                                = 3;
  API_COUNTER_VRF_GET                                   = 4;
  API_COUNTER_ACL_CREATE                                = 5;
  API_COUNTER_ACL_UPDATE                                = 6;
  API_COUNTER_ACL_DELETE                                = 7;
  API_COUNTER_ACL_GET                                   = 8;
  API_COUNTER_CPUCB_CREATE                              = 9;
  API_COUNTER_CPUCB_UPDATE                              = 10;
  API_COUNTER_CPUCB_DELETE                              = 11;
  API_COUNTER_CPUCB_GET                                 = 12;
  API_COUNTER_CRYPTOAPI_INVOKE                          = 13;
  API_COUNTER_CRYPTOKEY_CREATE                          = 14;
  API_COUNTER_CRYPTOKEY_UPDATE                          = 15;
  API_COUNTER_CRYPTOKEY_DELETE                          = 16;
  API_COUNTER_CRYPTOKEY_READ                            = 17;
  API_COUNTER_DESCRAOL_GET                              = 18;
  API_COUNTER_ENDPOINT_CREATE                           = 19;
  API_COUNTER_ENDPOINT_UPDATE                           = 20;
  API_COUNTER_ENDPOINT_DELETE                           = 21;
  API_COUNTER_ENDPOINT_GET                              = 22;
  API_COUNTER_GFT_EXACT_MATCH_PROFILE_CREATE            = 23;
  API_COUNTER_GFT_HEADER_TRANSPOSITION_PROFILE_CREATE   = 24;
  API_COUNTER_GFT_EXACT_MATCH_FLOW_ENTRY_CREATE         = 25;
  API_COUNTER_GETPROGRAM_ADDRESS                        = 26;
  API_COUNTER_ALLOCHBM_ADDRESS                          = 27;
  API_COUNTER_CONFIGURELIF_BDF                          = 28;
  API_COUNTER_IPSECCB_CREATE                            = 29;
  API_COUNTER_IPSECCB_UPDATE                            = 30;
  API_COUNTER_IPSECCB_DELETE                            = 31;
  API_COUNTER_IPSECCB_GET                               = 32;
  API_COUNTER_L2SEGMENT_CREATE                          = 33;
  API_COUNTER_L2SEGMENT_UPDATE                          = 34;
  API_COUNTER_L2SEGMENT_DELETE                          = 35;
  API_COUNTER_L2SEGMENT_GET                             = 36;
  API_COUNTER_L4LBSERVICE_CREATE                        = 37;
  API_COUNTER_MULTICASTENTRY_CREATE                     = 38;
  API_COUNTER_MULTICASTENTRY_UPDATE                     = 39;
  API_COUNTER_MULTICASTENTRY_DELETE                     = 40;
  API_COUNTER_MULTICASTENTRY_GET                        = 41;
  API_COUNTER_SECURITYPROFILE_CREATE                    = 42;
  API_COUNTER_SECURITYPROFILE_UPDATE                    = 43;
  API_COUNTER_SECURITYPROFILE_DELETE                    = 44;
  API_COUNTER_SECURITYPROFILE_GET                       = 45;
  API_COUNTER_SECURITYGROUPPOLICY_CREATE                = 46;
  API_COUNTER_SECURITYGROUPPOLICY_UPDATE                = 47;
  API_COUNTER_SECURITYGROUPPOLICY_DELETE                = 48;
  API_COUNTER_SECURITYGROUPPOLICY_GET                   = 49;
  API_COUNTER_SECURITYGROUP_CREATE                      = 50;
  API_COUNTER_SECURITYGROUP_UPDATE                      = 51;
  API_COUNTER_SECURITYGROUP_DELETE                      = 52;
  API_COUNTER_SECURITYGROUP_GET                         = 53;
  API_COUNTER_DOSPOLICY_CREATE                          = 54;
  API_COUNTER_DOSPOLICY_UPDATE                          = 55;
  API_COUNTER_DOSPOLICY_DELETE                          = 56;
  API_COUNTER_DOSPOLICY_GET                             = 57;
  API_COUNTER_PROXYCCB_CREATE                           = 58;
  API_COUNTER_PROXYCCB_UPDATE                           = 59;
  API_COUNTER_PROXYCCB_DELETE                           = 60;
  API_COUNTER_PROXYCCB_GET                              = 61;
  API_COUNTER_PROXYRCB_CREATE                           = 62;
  API_COUNTER_PROXYRCB_UPDATE                           = 63;
  API_COUNTER_PROXYRCB_DELETE                           = 64;
  API_COUNTER_PROXYRCB_GET                              = 65;
  API_COUNTER_QOSCLASS_CREATE                           = 66;
  API_COUNTER_QOSCLASS_UPDATE                           = 67;
  API_COUNTER_QOSCLASS_DELETE                           = 68;
  API_COUNTER_QOSCLASS_GET                              = 69;
  API_COUNTER_COPP_UPDATE                               = 70;
  API_COUNTER_COPP_GET                                  = 71;
  API_COUNTER_RAWCCB_CREATE                             = 72;
  API_COUNTER_RAWCCB_UPDATE                             = 73;
  API_COUNTER_RAWCCB_DELETE                             = 74;
  API_COUNTER_RAWCCB_GET                                = 75;
  API_COUNTER_TCPCB_CREATE                              = 76;
  API_COUNTER_TCPCB_UPDATE                              = 77;
  API_COUNTER_TCPCB_DELETE                              = 78;
  API_COUNTER_TCPCB_GET                                 = 79;
  API_COUNTER_TLSCB_CREATE                              = 80;
  API_COUNTER_TLSCB_UPDATE                              = 81;
  API_COUNTER_TLSCB_DELETE                              = 82;
  API_COUNTER_TLSCB_GET                                 = 83;
  API_COUNTER_MAX                                       = 84;
}

message ApiStatsEntry {
  ApiCounter    api_type                                = 1;
  uint32        num_api_call                            = 2;
  uint32        num_api_success                         = 3;
  uint32        num_api_fail                            = 4;
}

// API Stats object
message ApiStatsResponse {
  repeated ApiStatsEntry api_entries  = 1;                      // list of API statistics
}

message DropStatsEntry {
  types.DropReasons   reasons                       = 1;    // drop reasons
  uint64              drop_count                    = 2;    // drop count for multiple drop reasons
}

message EgressDropStatsEntry {
  types.EgressDropReasons   reasons                 = 1;    // drop reasons
  uint64                    drop_count              = 2;    // drop count for multiple drop reasons
}

// BufferDropStats captures instantaneous drop counts due to buffering drops
enum BufferDropReasons {
   INTRINSIC_DROP            = 0;     // Pkts dropped due to intrinsic drop bit being set
   DISCARDED                 = 1;     // Pkts dropped due to error
   ADMITTED                  = 2;     // Errored pkts admitted to buffering
   OUT_OF_CELLS_DROP         = 3;     // Pkts dropped due to cell exhaustion (first cell)
   OUT_OF_CELLS_DROP_2       = 4;     // Pkts dropped due to cell exhaustion (subsequent cell)
   OUT_OF_CREDIT_DROP        = 5;     // Pkts dropped due to cell-credits exhaustion
   TRUNCATION_DROP           = 6;     // Pkts dropped due to size bigger than the configured MTU
   PORT_DISABLED_DROP        = 7;     // Pkts dropped due to port disable
   COPY_TO_CPU_TAIL_DROP     = 8;     // Copy-to-cpu pkts tail dropped
   SPAN_TAIL_DROP            = 9;     // Span pkts tail dropped
   MIN_SIZE_VIOLATION_DROP   = 10;    // Pkts dropped due to lesser than min size
   ENQUEUE_ERROR_DROP        = 11;    // Pkts dropped due to enqueue to reserved queues
   INVALID_PORT_DROP         = 12;    // Pkts dropped due to destined to invalid ports
   INVALID_OUTPUT_QUEUE_DROP = 13;    // Pkts dropped due to destined to invalid output queues
}

message BufferDropStatsEntry {
  BufferDropReasons   reasons                 = 1;    // drop reasons
  uint32              drop_count              = 2;    // drop count for multiple drop reasons
}

message BufferDropStats {
  repeated BufferDropStatsEntry     stats_entries = 1;
}

// Table types
enum TableType {
  TABLE_TYPE_NONE                                   = 0;
  TABLE_TYPE_INDEX                                  = 1;
  TABLE_TYPE_HASH                                   = 2;
  TABLE_TYPE_HASH_TCAM                              = 3;
  TABLE_TYPE_TCAM                                   = 4;
}

// TableStatsEntry captures table specific stats for h/w table health monitoring
message TableStatsEntry {
  TableType    table_type                           = 1;   // type of the table
  string       table_name                           = 2;   // table name
  uint32       table_size                           = 3;   // table size
  uint32       overflow_table_size                  = 4;   // overflow table size, if applicable
  uint32       entries_in_use                       = 5;   // number of entries in use
  uint32       overflow_entries_in_use              = 6;   // number of overflow entries in use, if applicable
  uint32       num_inserts                          = 7;   // number of insert operations attemtped
  uint32       num_insert_errors                    = 8;   // number of failed insert operations
  uint32       num_deletes                          = 9;   // number of delete operations attempted
  uint32       num_delete_errors                    = 10;  // number of failed delete operations
}

// TableStats is container for statistics of all tables in the data path
message TableStats {
  repeated TableStatsEntry    table_stats           = 1;
}

// BufferStats captures instantaneous counters of the buffering module
message BufferStats {
  uint32          sop_count_in  = 1;    // Count of start-of-packets in
  uint32          eop_count_in  = 2;    // Count of end-of-packets in
  uint32          sop_count_out = 3;    // Count of start-of-packets out
  uint32          eop_count_out = 4;    // Count of end-of-packets out
  BufferDropStats drop_counts   = 5;    // Drop counts 
}

// OflowFifoDropStats captures instantaneous drop counts at the overflow fifo interface
enum OflowFifoDropType {
  OCCUPANCY_DROP                = 0;    // Pkts dropped due to fifo full
  EMERGENCY_STOP_DROP           = 1;    // Pkts dropped due to emergency condition hit due to slow oflow memory to write-buffer communication
  WRITE_BUFFER_ACK_FILL_UP_DROP = 2;    // Pkts dropped due to write buffer's ack fifo filling up
  WRITE_BUFFER_ACK_FULL_DROP    = 3;    // Pkts dropped due to write buffer's ack fifo full
  WRITE_BUFFER_FULL_DROP        = 4;    // Pkts dropped due to write buffer filling up
  CONTROL_FIFO_FULL_DROP        = 5;    // Pkts dropped due to control fifo full
}

message OflowFifoDropStatsEntry {
  OflowFifoDropType     type    = 1;
  uint32                count   = 2;
}

message OflowFifoDropStats {
  repeated OflowFifoDropStatsEntry  entry = 1;
}

// OflowFifoStats captures instantaneous counters at the overflow fifo interface
message OflowFifoStats {
  uint32             sop_count_in  = 1;    // Count of start-of-packets in
  uint32             eop_count_in  = 2;    // Count of end-of-packets in
  uint32             sop_count_out = 3;    // Count of start-of-packets out
  uint32             eop_count_out = 4;    // Count of end-of-packets out
  OflowFifoDropStats drop_counts   = 5;    // Drop counts
}

// PacketBufferPortStats is container to capture all counters exposed by the buffering
// module at the port level
message PacketBufferPortStats {
  qos.PacketBufferPort   packet_buffer_port = 1;    // Port identifier
  BufferStats            buffer_stats       = 2;    // PBC block statistics
  OflowFifoStats         oflow_fifo_stats   = 3;    // Overflow fifo statistics
  qos.QosClassQueueStats qos_queue_stats    = 4;    // Qos queue statistics
}

// PacketBufferStats captures all the statistics of the packet buffering module
message PacketBufferStats {
  repeated PacketBufferPortStats port_stats = 1; // list of stats, one per packet buffer port
}

// Status captures the operating status of various components in the HAL
// including "ready" status, thread health etc.
message Status {
}

// Global system object
message SystemResponse {
  types.ApiStatus    api_status      = 1;                  // API status code
  Stats              stats           = 2;                  // Statistics
  Status             status          = 3;                  // System status
  string             uuid            = 4;                  // System UUID
}

// Stats object
message Stats {
  DropStats            drop_stats          = 1;    // Drop statistics
  EgressDropStats      egress_drop_stats   = 2;    // Egress drop statistics
  TableStats           table_stats         = 3;    // Table statistics
  PacketBufferStats    packet_buffer_stats = 4;    // Packet buffer block statistics
  FTEStats             fte_stats           = 5;    // FTE Stats
  SessionSummaryStats  session_stats       = 6;    // Session Stats Summary
  PMDStats             pmd_stats           = 7;    // Poll mode driver stats
}

// Drop Stats object
message DropStats {
  repeated DropStatsEntry drop_entries  = 1;               // list of drop statistics
}

message EgressDropStats {
  repeated EgressDropStatsEntry drop_entries  = 1;         // list of egress drop statistics
}

message FTEError {
  string fte_error  = 1; // Errors seen during FTE processing
  uint64 count      = 2; // Error count seen during FTE processing
}

message FTEFeatureStats {
  string                   feature_name = 1;
  uint64                   drop_pkts    = 2;
  repeated FTEError        drop_reason  = 3;
} 

// per FTE Stats
message FTEStatsInfo {
  uint64                   conn_per_second   = 1;
  uint64                   flow_miss_pkts    = 2;
  uint64                   retransmit_pkts   = 3;
  uint64                   redir_pkts        = 4;
  uint64                   cflow_pkts        = 5;
  uint64                   tcp_close_pkts    = 6;
  uint64                   tls_proxy_pkts    = 7;
  uint64                   softq_reqs        = 8;
  uint64                   queued_tx_pkts    = 9;
  uint64                   max_conn_per_sec  = 10;
  repeated FTEError        fte_errors        = 11;
  repeated FTEFeatureStats feature_stats     = 12;
}

// FTE Global Stats
message FTEStats {
  types.ApiStatus          api_status        = 1;
  repeated FTEStatsInfo    fte_stats_info    = 2;
}

// Session Summary Stats
message SessionSummaryStats {
  uint64      total_active_sessions    = 1;
  uint64      l2_sessions              = 2;
  uint64      tcp_sessions             = 3;
  uint64      tcp_established_sessions = 4;
  uint64      tcp_closed_sessions      = 5;
  uint64      udp_sessions             = 6;
  uint64      icmp_sessions            = 7;
  uint64      drop_sessions            = 8;
  uint64      aged_sessions            = 9;
  uint64      num_tcp_reset_sent       = 10;        // Number of TCP resets sent as part of SFW reject
  uint64      num_icmp_error_sent      = 11;       // Number of ICMP errors sent as part of SFW reject
  uint64      num_connection_timeout_sessions = 12;// Number of TCP sessions that timedout before going to established state
  uint64      num_session_create_errors = 13;       // # of session create errors
}

message QCtr {
  uint64        send_pkts                = 1;
  uint64        recv_pkts                = 2;
  uint32        rx_sem_wr_err            = 3;
  uint32        rx_slot_value_read_err   = 4;
  uint32        rx_descr_read_err        = 5;
  uint32        rx_descr_to_hdr_err      = 6;
  uint32        rx_descr_free_err        = 7;
  uint32        tx_descr_free_err        = 8;
  uint32        tx_page_alloc_err        = 9;
  uint32        tx_page_copy_err         = 10;
  uint32        tx_descr_pgm_err         = 11;
  uint32        tx_send_err              = 12;
  uint32        rx_descr_addr_oob        = 13;
  uint64        poll_count               = 14;
  uint32        tx_doorbell_err          = 15;
}

message QGlobalInfo {
  uint32  gc_pindex           = 1;
  uint32  cpu_tx_page_pindex  = 2;
  uint32  cpu_tx_page_cindex  = 3;
  uint32  cpu_tx_descr_pindex = 4;
  uint32  cpu_tx_descr_cindex = 5;
  uint32  cpu_rx_dpr_cindex   = 6;
  uint32  cpu_rx_dpr_sem_cindex = 7;
  uint32  cpu_rx_dpr_descr_free_err = 8;
}

message QInfo {
  uint32      queue_id        = 1;
  uint64      base_addr       = 2;
  uint32      pc_index        = 3;
  uint32      pc_index_addr   = 4;
  uint64      valid_bit_value = 5;
  uint32      queue_type      = 6;
  QCtr        ctr             = 7;
}

message FTEInfo {
  uint32       queue_id       = 1;
  QGlobalInfo  glbal          = 2;
  repeated     QInfo qinfo    = 3;
}

message PMDStats {
  repeated FTEInfo  fte_info = 1;
}
