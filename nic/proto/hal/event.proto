//------------------------------------------------------------------------------
// protobuf specification for HAL events
// This is modeled as client side streaming gRPC (with HAL being the client) and
// app being the server
//------------------------------------------------------------------------------

syntax = "proto3";
import "types.proto";
import "interface.proto";
import "port.proto";
import "system.proto";
import "endpoint.proto";
package event;
option go_package="halproto";

// Event service definition
service Event {
  // TODO: rename this API - with bidir streaming, this name doesn't make sense
  rpc EventListen (EventRequest) returns (stream EventResponse) {}
}

// events that HAL generates and app(s) can listen to
enum EventId {
  EVENT_ID_NONE            = 0;
  EVENT_ID_PORT_STATE      = 1;
  EVENT_ID_LIF_ADD_UPDATE  = 2;
  EVENT_ID_MICRO_SEG_STATE = 3;
  EVENT_ID_EP_MIGRATION    = 4;
}

enum EventOp {
  EVENT_OP_NONE        = 0;
  EVENT_OP_SUBSCRIBE   = 1;
  EVENT_OP_UNSUBSCRIBE = 2;
}

// EventSpec captures the event of interest to the app
message EventRequest {
    EventId             event_id        = 1;    // event of interest
    EventOp             event_operation = 2;    // subscribe or unsubscribe
}

message EventResponse {
  types.ApiStatus                 api_status        = 1;    // API status code
  EventId                         event_id          = 2;
  oneof event_info {
      intf.LifGetResponse         lif_event         = 3;    // Lif Info
      port.PortResponse           port_event        = 4;    // Port Info
      sys.MicroSegEvent           micro_seg_event   = 5;    // Micro Seg Event
      endpoint.MigrationResponse  migration_event   = 6;    // EP Migration Info
  }
}
