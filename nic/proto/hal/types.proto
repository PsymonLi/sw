//------------------------------------------------------------------------------
// common messages, headers and enums that are useful across all services
// and also shared between agent(s) and HAL
//------------------------------------------------------------------------------

syntax = "proto3";

import public "gogo.proto";

package types;
option go_package="halproto";

// IP protocol numbers
enum IPProtocol {
  IPPROTO_NONE          = 0;
  IPPROTO_ICMP          = 1;
  IPPROTO_IPV4          = 4;
  IPPROTO_TCP           = 6;
  IPPROTO_UDP           = 17;
  IPPROTO_GRE           = 47;
  IPPROTO_ESP           = 50;
  IPPROTO_AH            = 51;
  IPPROTO_ICMPV6        = 58;
}

// ICMP message types
// TBD - add more here !!
enum ICMPMsgType {
  ICMP_MSG_TYPE_NONE = 0;
  ICMP_MSG_TYPE_ECHO = 1;
}

// API return codes (more descriptive than protobuf enums)
enum ApiStatus {
  API_STATUS_OK                                           = 0;     // success
  API_STATUS_ERR                                          = 1;     // catch-all error
  API_STATUS_INVALID_ARG                                  = 2;     // invalid argument
  API_STATUS_EXISTS_ALREADY                               = 3;     // object already exists
  API_STATUS_OUT_OF_MEM                                   = 4;     // out of memory
  API_STATUS_NOT_FOUND                                    = 5;     // object not found
  API_STATUS_OUT_OF_RESOURCE                              = 6;     // out of resource
  API_STATUS_ENCAP_INVALID                                = 7;     // encap invalid
  API_STATUS_VRF_ID_INVALID                               = 8;     // invalid tenant id
  API_STATUS_L2_SEGMENT_ID_INVALID                        = 9;    // invalid L2 segment id
  API_STATUS_INTERFACE_ID_INVALID                         = 10;    // invalid interface id
  API_STATUS_IF_TYPE_INVALID                              = 11;    // invalid inteface type
  API_STATUS_IF_INFO_INVALID                              = 12;    // invalid interface info
  API_STATUS_IF_L2SEGMENT_INVALID                         = 13;    // invalid L2 segment in interface spec
  API_STATUS_IF_ENIC_INFO_INVALID                         = 14;    // invalid enic info in interface spec
  API_STATUS_IF_ENIC_TYPE_INVALID                         = 15;    // invalid enic type in interface spec
  API_STATUS_IF_LIF_INFO_NOT_INVALID                      = 16;    // lif info not valid
  API_STATUS_IF_LIFQ_INFO_NOT_INVALID                     = 17;    // lif queue info not valid
  API_STATUS_FLOW_KEY_INVALID                             = 18;    // flow key invalid
  API_STATUS_FLOW_INFO_INVALID                            = 19;    // flow information invalid
  API_STATUS_HANDLE_INVALID                               = 20;    // HAL handle passed is invalid
  API_STATUS_HW_PROG_ERR                                  = 21;    // hardware programming error
  API_STATUS_LIF_ID_INVALID                               = 22;    // invalid LIF id
  API_STATUS_NWSEC_PROFILE_ID_INVALID                     = 23;    // security profile id invalid
  API_STATUS_TLS_CB_ID_INVALID                            = 24;    // invalid TLS CB id
  API_STATUS_TCP_CB_ID_INVALID                            = 25;    // invalid TCP CB id
  API_STATUS_ACL_ID_INVALID                               = 26;    // invalid ACL id
  API_STATUS_WRING_ID_INVALID                             = 27;    // invalid WRING id
  API_STATUS_WRING_TYPE_INVALID                           = 28;    // invalid WRING type
  API_STATUS_PROXY_TYPE_INVALID                           = 29;    // invalid Proxy Service type
  API_STATUS_IPSEC_CB_ID_INVALID                          = 30;    // invalid IPSEC CB id
  API_STATUS_L4LB_KEY_INVALID                             = 31;    // invalid L4LB key
  API_STATUS_CPU_CB_ID_INVALID                            = 32;    // invalid CPU CB id
  API_STATUS_PROXY_NOT_ENABLED                            = 33;    // proxy service not enabled
  API_STATUS_CFG_DB_ERR                                   = 34;    // config database inconsistency
  API_STATUS_SECURITY_GROUP_ID_INVALID                    = 35;    // Security group id invalid
  API_STATUS_SECURITY_POLICY_ID_INVALID                   = 36;    // Security Group id invalid
  API_STATUS_ENDPOINT_UPD_KEY_HDL_INVALID                 = 37;    // ep update with no key and hdl
  API_STATUS_DOS_POLICY_ID_INVALID                        = 38;    // dos policy id invalid
  API_STATUS_RAWR_CB_ID_INVALID                           = 39;    // invalid Raw Redirect CB id
  API_STATUS_OBJECT_IN_USE                                = 40;    // object is in use
  API_STATUS_RAWC_CB_ID_INVALID                           = 41;    // invalid Raw Chain CB id
  API_STATUS_PORT_ID_INVALID                              = 42;    // invalid port number
  API_STATUS_PORT_TYPE_INVALID                            = 43;    // invalid port type
  API_STATUS_PORT_SPEED_INVALID                           = 44;    // invalid port speed
  API_STATUS_PORT_NUM_LANES_INVALID                       = 45;    // invalid num lanes for port
  API_STATUS_MC_ENTRY_ID_INVALID                          = 46;    // invalid mc_entry id
  API_STATUS_PROXYR_CB_ID_INVALID                         = 47;    // invalid Proxy Redirect CB id
  API_STATUS_PROXYC_CB_ID_INVALID                         = 48;    // invalid Proxy Chain CB id
  API_STATUS_HW_READ_ERROR                                = 49;    // hardware read error
  API_STATUS_HW_WRITE_ERROR                               = 50;    // hardware write error
  API_STATUS_L2_SEGMENT_TYPE_INVALID                      = 51;    // L2 Segment set to invalide type
  API_STATUS_NAT_POOL_KEY_INVALID                         = 52;    // invalid NAT pool key
  API_STATUS_NAT_MAPPING_KEY_INVALID                      = 53;    // invalid NAT mapping key
  API_STATUS_QOS_CLASS_MTU_INVALID                        = 54;    // invalid MTU
  API_STATUS_QOS_CLASS_XON_THRESHOLD_INVALID              = 55;    // invalid xon threshold
  API_STATUS_QOS_CLASS_XOFF_THRESHOLD_INVALID             = 56;    // invalid xoff threshold
  API_STATUS_QOS_CLASS_SCHEDULER_NOT_SET                  = 57;    // scheduler not set
  API_STATUS_QOS_CLASS_DWRR_INVALID                       = 58;    // invalid dwrr
  API_STATUS_QOS_CLASS_QOS_GROUP_INVALID                  = 59;    // invalid qos group
  API_STATUS_QOS_CLASS_UPLINK_CLASS_MAP_NOT_SET           = 60;    // uplink class map not set
  API_STATUS_QOS_CLASS_UPLINK_CLASS_MAP_SET               = 61;    // uplink class map set
  API_STATUS_QOS_CLASS_DOT1Q_PCP_INVALID                  = 62;    // dot1q pcp invalid
  API_STATUS_QOS_CLASS_IP_DSCP_INVALID                    = 63;    // ip dscp invalid
  API_STATUS_QOS_CLASS_DOT1Q_PCP_MARKING_INVALID          = 64;    // dot1q pcp marking invalid
  API_STATUS_QOS_CLASS_IP_DSCP_MARKING_INVALID            = 65;    // ip dscp marking invalid
  API_STATUS_QOS_CLASS_DOT1Q_PCP_ALREADY_IN_USE           = 66;    // dot1q pcp already in use
  API_STATUS_QOS_CLASS_IP_DSCP_ALREADY_IN_USE             = 67;    // ip dscp already in use
  API_STATUS_QOS_CLASS_DROP_NO_DROP_CHANGE_NOT_ALLOWED    = 68; // drop no-drop change not allowed
}

// common meta object that is part of all other top level objects
// TODO: should we add last updated timestamp, revision etc. here ?
message ObjectMeta {
  fixed64        vrf_id = 1;     // vrf identifier
}

// Types of Vrfs
enum VrfType {
  VRF_TYPE_NONE                 = 0;
  VRF_TYPE_INFRA                = 1;    // infra Vrf
  VRF_TYPE_CUSTOMER             = 2;    // customer Vrf
  VRF_TYPE_OOB_MANAGEMENT       = 3;    // oob management Vrf
  VRF_TYPE_INTERNAL_MANAGEMENT  = 4;    // internal management Vrf host <-> naples
  VRF_TYPE_INBAND_MANAGEMENT    = 5;    // inband management Vrf (host/naples)
}

// Types of L2 segments
enum L2SegmentType {
  L2_SEGMENT_TYPE_NONE   = 0;
  L2_SEGMENT_PRIMARY     = 1;    // primary VLAN of PVLAN
  L2_SEGMENT_ISOLATED    = 2;    // isolated VLAN of PVLAN
}

// Captures the MPLS tag information
message MplsTag {
  uint32           label = 1 [(gogoproto.moretags) = "venice:mandatory"];    // mpls label value
  uint32           exp   = 2 [(gogoproto.moretags) = "venice:default=0"];    // mpls experimental bits value
  uint32           ttl   = 3 [(gogoproto.moretags) = "venice:default=64"];   // mpls ttl value
}

// Supported wire encaps for the L2 segments
enum encapType {
  ENCAP_TYPE_NONE               = 0;
  ENCAP_TYPE_DOT1Q              = 1;    // .1q encapsulation
  ENCAP_TYPE_VXLAN              = 2;    // VXLAN encapsulation
  ENCAP_TYPE_IP_IN_IP           = 3;    // IP-in-IP encapsulation
  ENCAP_TYPE_GRE                = 4;    // GRE encapsulation
  ENCAP_TYPE_IPSEC              = 5;    // IPSec tunnel encapsulation
}

// EncapInfo captures wire encap information
message EncapInfo {
  encapType        encap_type  = 1;    // wire encap type
  uint32           encap_value = 2;    // encap value (vlan/vnid etc.)
}

enum SnakeTestType {
    SNAKE_TEST_TYPE_NONE        = 0;
    SNAKE_TEST_TYPE_ARM_TO_ARM  = 1;
    SNAKE_TEST_TYPE_LOOP        = 2;
}

// IP address families
enum IPAddressFamily {
  IP_AF_NONE     = 0;
  IP_AF_INET     = 1;    // IPv4
  IP_AF_INET6    = 2;    // IPv6
}

// IP address object
message IPAddress {
  IPAddressFamily    ip_af   = 1[(gogoproto.moretags) = "venice:mandatory"];      // IP address family
  oneof v4_or_v6 {
    fixed32          v4_addr = 2;      // IPv4 address
    bytes            v6_addr = 3;      // IPv6 address  (TODO: need better representation here)
  }
}

// IP Range
message IPRange {
  IPAddress    low_ipaddr  = 1;    // start ip address
  IPAddress    high_ipaddr = 2;    // end ip address
}

// IP Prefix object
message IPPrefix {
  IPAddress    address       = 1;      // IP address
  uint32       prefix_len    = 2[(gogoproto.moretags) = "venice:range:0-128"];      // prefix length
}

enum IPAddressType {
  IP_ADDRESS_NONE           = 0;
  IP_ADDRESS_IPV4_ANY       = 1;  // any IPv4 address
  IP_ADDRESS_IPV6_ANY       = 2;  // any IPv6 address
  IP_ADDRESS_ANY            = 3;  // any IP address
  IP_ADDRESS_IPV4_MULTICAST = 4;  // any IPv4 multicast address
  IP_ADDRESS_IPV6_MULTICAST = 5;  // any IPv6 multicast address
  IP_ADDRESS_MULTICAST      = 6;  // any IP multicast address
  IP_ADDRESS_V6_LINK_LOCAL  = 7;  // IPv6 link local address
}

// IPSubnet represents an IPv4 or IPv6 subnet
message IPSubnet {
  oneof subnet {
    types.IPPrefix ipv4_subnet      = 1;     // V4 Subnet
    types.IPPrefix ipv6_subnet      = 2;     // V6 Subnet
  }
}

// AddressRange represents an IPv4 or IPv6 address range
message AddressRange {
  oneof range {
    types.IPRange ipv4_range       = 1;  // V4 address range
    types.IPRange ipv6_range       = 2;  // V6 address range
  }
}

// Address object is the prefix or range
message Address {
  oneof   Address {
    IPSubnet      prefix     = 1;    // v4 or v6 address prefix
    AddressRange  range      = 2;    // v4 or v6 address range
  }
}

message IPAddressObj {
  oneof Formats {
    IPAddressType   type        = 1;
    Address         address     = 2;
  }
  bool negate                     = 3;
}

// PortRange object has low and high end of the port ranges
message L4PortRange {
  uint32    port_low  = 1 [(gogoproto.moretags) = "venice:range:0-65535"];   // port range start
  uint32    port_high = 2 [(gogoproto.moretags) = "venice:range:0-65535"];   // port range end
}


message Empty {}

// Types of lif
enum LifType {
  LIF_TYPE_NONE                     = 0;
  LIF_TYPE_HOST                     = 1;
  LIF_TYPE_HOST_MANAGEMENT          = 2;
  LIF_TYPE_MNIC_OOB_MANAGEMENT      = 3;
  LIF_TYPE_MNIC_INTERNAL_MANAGEMENT = 4;
  LIF_TYPE_MNIC_INBAND_MANAGEMENT   = 5;
}

// Types of Work Ring
enum WRingType {
  WRING_TYPE_NONE             = 0;
  WRING_TYPE_SERQ             = 1;
  WRING_TYPE_BSQ              = 2;
  WRING_TYPE_BRQ              = 3;
  WRING_TYPE_SESQ             = 4;
  WRING_TYPE_IPSECCBQ         = 5;
  WRING_TYPE_ARQRX            = 6;
  WRING_TYPE_ASQ              = 7;
  WRING_TYPE_ASESQ            = 8;
  WRING_TYPE_RAWRCB           = 9;
  WRING_TYPE_IPSECCBQ_BARCO   = 10;
  WRING_TYPE_APP_REDIR_RAWC   = 11;
  WRING_TYPE_APP_REDIR_PROXYR = 12;
  WRING_TYPE_APP_REDIR_PROXYC = 13;
  WRING_TYPE_NMDR_RX_GC       = 14;
  WRING_TYPE_NMDR_TX_GC       = 15;
  WRING_TYPE_ARQTX            = 16;
  WRING_TYPE_ASCQ             = 17;
  WRING_TYPE_CPU_TX_DR        = 18;
  WRING_TYPE_CPU_TX_PR        = 19;
  WRING_TYPE_IPSEC_NMDR_TX    = 20;
  WRING_TYPE_IPSEC_NMDR_RX    = 21;
  WRING_TYPE_IPSEC_NMPR_TX    = 22;
  WRING_TYPE_IPSEC_NMPR_RX    = 23;
  WRING_TYPE_IPSEC_BIG_NMDR_TX  = 24;
  WRING_TYPE_IPSEC_BIG_NMDR_RX  = 25;
  WRING_TYPE_IPSEC_BIG_NMPR_TX  = 26;
  WRING_TYPE_IPSEC_BIG_NMPR_RX  = 27;
  WRING_TYPE_NMDPR_SMALL_TX     = 28;
  WRING_TYPE_NMDPR_SMALL_RX     = 29;
  WRING_TYPE_NMDPR_BIG_TX       = 30;
  WRING_TYPE_NMDPR_BIG_RX       = 31;
  WRING_TYPE_TCP_OOO_RX         = 32;
  WRING_TYPE_TCP_OOO_RX2TX      = 33;
  WRING_TYPE_CPU_RX_DPR         = 34;
}

// Types of Proxy Service
enum ProxyType {
  PROXY_TYPE_NONE                     = 0;
  PROXY_TYPE_TCP                      = 1;
  PROXY_TYPE_TLS                      = 2;
  PROXY_TYPE_IPSEC                    = 3;
  PROXY_TYPE_GC                       = 4;
  PROXY_TYPE_IPFIX                    = 6;
  PROXY_TYPE_APP_REDIR                = 7;
  PROXY_TYPE_P4PT                     = 8;
  PROXY_TYPE_APP_REDIR_PROXY_TCP      = 9;
  PROXY_TYPE_APP_REDIR_SPAN           = 10;
  PROXY_TYPE_APP_REDIR_PROXY_TCP_SPAN = 11;
}

// Types of Cryptographic Asymmetric keys
enum CryptoAsymKeyType {
    CRYPTO_ASYM_KEY_TYPE_ECDSA  = 0;
    CRYPTO_ASYM_KEY_TYPE_RSA    = 1;
}

// Types of Cryptographic keys
enum CryptoKeyType {
    CRYPTO_KEY_TYPE_AES128      = 0;
    CRYPTO_KEY_TYPE_AES192      = 1;
    CRYPTO_KEY_TYPE_AES256      = 2;
    CRYPTO_KEY_TYPE_DES         = 3;
    CRYPTO_KEY_TYPE_CHACHA20    = 4;
    CRYPTO_KEY_TYPE_POLY1305    = 5;
    CRYPTO_KEY_TYPE_HMAC        = 6;
}

// Types of Barco Rings
enum BarcoRings {
    BARCO_RING_ASYM             = 0;
    BARCO_RING_GCM0             = 1;
    BARCO_RING_GCM1             = 2;
    BARCO_RING_XTS0             = 3;
    BARCO_RING_XTS1             = 4;
    BARCO_RING_MPP0             = 5;
    BARCO_RING_MPP1             = 6;
    BARCO_RING_MPP2             = 7;
    BARCO_RING_MPP3             = 8;
    BARCO_RING_MPP4             = 9;
    BARCO_RING_MPP5             = 10;
    BARCO_RING_MPP6             = 11;
    BARCO_RING_MPP7             = 12;
    BARCO_RING_CP               = 13;
    BARCO_RING_CP_HOT           = 14;
    BARCO_RING_DC               = 15;
    BARCO_RING_DC_HOT           = 16;
}

enum AppRedirType {
    APP_REDIR_TYPE_NONE         = 0;
    APP_REDIR_TYPE_REDIRECT     = 1;
    APP_REDIR_TYPE_SPAN         = 2;
}

// Types of CPU CB/QIDs
enum CpucbId {
    CPUCB_ID_FLOWMISS      = 0;
    CPUCB_ID_TCP_CLOSE     = 1;
    CPUCB_ID_RELIABLE_COPY = 2;
    CPUCB_ID_NACL_REDIRECT = 3;
    CPUCB_ID_QUIESCE       = 4;
    CPUCB_ID_NACL_LOG      = 5;
    CPUCB_ID_FTE_SPAN      = 6;
}

message DropReasons {
  bool      drop_malformed_pkt                      = 1;        // malformed pkt drop
  bool      drop_parser_icrc_error                  = 2;       // RDMA ICRC Errors
  bool      drop_parse_len_error                    = 3;       // Packet Length Errors
  bool      drop_hardware_error                     = 4;
  bool      drop_input_mapping                      = 5;        // input mapping table miss
  bool      drop_input_mapping_dejavu               = 6;        // deja-vu drop
  bool      drop_multi_dest_not_pinned_uplink       = 7;        // Multi destination frame recieved for a l2seg on not pinned uplink
  bool      drop_flow_hit                           = 8;        // flow hit drop
  bool      drop_flow_miss                          = 9;        // flow miss drop
  bool      drop_nacl                               = 10;        // nacl drop
  bool      drop_ipsg                               = 11;        // ipsg drop
  bool      drop_ip_normalization                   = 12;        // ip norm. drop
  bool      drop_tcp_normalization                  = 13;        // tcp norm. drop
  bool      drop_tcp_rst_with_invalid_ack_num       = 14;       // rst with invalid ack num
  bool      drop_tcp_non_syn_first_pkt              = 15;       // non-syn first pkt
  bool      drop_icmp_normalization                 = 16;       // icmp norm. drop
  bool      drop_input_properties_miss              = 17;       // input properties miss
  bool      drop_tcp_out_of_window                  = 18;       // tcp OOW drop
  bool      drop_tcp_split_handshake                = 19;       // split handshake drop
  bool      drop_tcp_win_zero_drop                  = 20;       // tcp win. zero
  bool      drop_tcp_data_after_fin                 = 21;       // tcp data after fin
  bool      drop_tcp_non_rst_pkt_after_rst          = 22;       // tcp non rst
  bool      drop_tcp_invalid_responder_first_pkt    = 23;       // tcp invalid resp.
  bool      drop_tcp_unexpected_pkt                 = 24;       // tcp unexpected packet
  bool      drop_src_lif_mismatch                   = 25;
  bool      drop_vf_ip_label_mismatch               = 26;
  bool      drop_vf_bad_rr_dst_ip                   = 27;
}

message EgressDropReasons {
  bool      drop_output_mapping                     = 1;        // output mapping table miss
  bool      drop_prune_src_port                     = 2;        // prune source port drop
  bool      drop_mirror                             = 3;        // mirror drop
  bool      drop_policer                            = 4;        // policer drop
  bool      drop_copp                               = 5;        // copp drop
  bool      drop_checksum_err                       = 6;        // checksum error drop
}

message RuleMatch {
  message L4PortAppInfo {
    repeated types.L4PortRange    dst_port_range = 1; // dst port range low, high value
    repeated types.L4PortRange    src_port_range = 2; // src port range low, high value
  }
  message ICMPAppInfo {
    uint32    icmp_type        = 1;  // Idenfity v4 icmp type
    uint32    icmp_code        = 2;  // Identify v4 icmp code
  }
  message ICMPv6AppInfo {
    uint32    icmpv6_type      = 1;  // Identify v6 icmp type
    uint32    icmpv6_code      = 2;  // Identify v6 icmp code
  }
  message ESPInfo {
    uint32 spi = 1;
  }
  // cannot have repeated of oneof hence this intermediate message
  message AppMatch {
    oneof App {
      L4PortAppInfo   port_info               = 1;   // Matching port based apps
      ICMPAppInfo     icmp_info               = 2;   // Matching icmp based apps
      ICMPv6AppInfo   icmpv6_info             = 3;   // Matching icmpv6 based apps
      ESPInfo         esp_info                = 6;   // Matching esp based apps
    }
  }

  repeated types.IPAddressObj   src_address     = 1;     // Match on the src address range
  repeated fixed64              src_mac_address = 2;     // Match on the src mac addresses
  repeated uint32               src_sg          = 3;     // Match on the src security group
  repeated types.IPAddressObj   dst_address     = 4;     // Match on the dst address range
  repeated fixed64              dst_mac_address = 5;     // Match on the dst mac addresses
  repeated uint32               dst_sg          = 6;     // Match on the dst sg
  types.IPProtocol              protocol        = 7;     // Match protocol
  uint32                        ether_type      = 8;     // Match Ethertype
  AppMatch                      app_match       = 9;     // apps that the rules are matching
}

// FTE Span Match Selectors
enum FTESpanMatchSelector {
  SRC_LIF               = 0;
  SRC_LPORT             = 1;
  DST_LPORT             = 2;
  DROP_REASON           = 3;
  FLOW_LKUP_DIR         = 4;
  FLOW_LKUP_TYPE        = 5;
  FLOW_LKUP_VRF         = 6;
  FLOW_LKUP_SRC         = 7;
  FLOW_LKUP_DST         = 8;
  FLOW_LKUP_PROTO       = 9;
  FLOW_LKUP_SPORT       = 10;
  FLOW_LKUP_DPORT       = 11;
  ETH_DMAC              = 12;
  FROM_CPU              = 13;
  MATCH_ANY             = 14;
}

// flow direction
enum FlowDirection {
  FLOW_DIRECTION_NONE        = 0;
  FLOW_DIRECTION_FROM_HOST   = 1;
  FLOW_DIRECTION_FROM_UPLINK = 2;
}

enum HashType {
    SHA1        = 0;
    SHA224      = 1;
    SHA256      = 2;
    SHA384      = 3;
    SHA512      = 4;
}

enum RSASignatureScheme {
    RSASSA_PSS          = 0;
    RSASSA_PKCS1_v1_5   = 1;
}
