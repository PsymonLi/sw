syntax = "proto3";

import "types.proto";
import "interface.proto";

package telemetry;
option go_package="halproto";

// L4Port is a representation of the L4 port defined as a nested type for nullability
message L4Port {
    uint32 port = 1;
}

// MacAddress is a represenation of the MAC address defined as a nested type for nullability
message MacAddress {
    uint64 address = 1; // 48 bit MAC address
}

// CollectorSpec is the configuration specification for a telemetry collector
message CollectorSpec {
  types.ObjectMeta  meta              = 1; // Common object meta
  ExportControlId   export_controlId  = 2; // Controller ID that this Collector is attached to
  types.EncapInfo   encap             = 3; // VLAN encap to be applied to traffic
  fixed64           l2seg_handle  = 4; // Hal Handle for the L2 segment (ideally remove encap)
  types.IPAddress   dest_ip           = 5; // Destination IP of the Collector
  types.IPAddress   src_ip            = 6; // Source IP to use
  types.IPProtocol  protocol          = 7; // L4 IP Protocol to use
  L4Port            dest_port         = 8; // L4 Port for the collector
  ExportFormat      format            = 9; // Format that the collector expects
  uint32            template_id       = 10; // Data Template ID used to send to the collector 
}

// CollectorSpec is the operational status of the collector
message CollectorStatus {
  // CollectorStatus Codes
  enum CollectorStatusCode {
    SUCCESS			    = 0;
    INVALID_CONFIG	= 1;
    TEMP_FAILURE		= 2;
    PERM_FAILURE		= 3;
  }
  CollectorStatusCode 	code 		= 1; // Status code
  string 		status 		= 2; // Status of the collector
}

// Collector is a container that holds both the configuration and the operational 
//  state of the collector
message Collector {
  types.ApiStatus     api_status    = 1;
  CollectorSpec       spec          = 2; // Configuration Specification 
  CollectorStatus     status        = 3; // Operational Status
}

// CollectorConfigsMsg is used in requests and is a batchable request message
message CollectorConfigMsg {
  repeated CollectorSpec request = 1;
}

// CollectorConfigsMsg message is used as response for API requests.
message CollectorResponseMsg {
  types.ApiStatus     status      = 1; // Status of the API request the resulted in this response
  repeated Collector  response  = 2; // List of collectors
}

// ExportFormat is a enumeration of export formats supported
enum ExportFormat {
  IPFIX = 0;
  NETFLOWV9 = 1;
}

// ExportControlId is a identifier for a ExportControl configuration
message ExportControlId {
  types.ObjectMeta  meta  = 1; // COmmon object meta
  uint64            Id    = 2; // Unique ID
}

// ExportControlId is the configuration specification for Export Control
message ExportControlSpec {
  ExportControlId Id                = 1; // Identifier
  uint32          active_timeout    = 2; // time before which active flows are exported
  uint32          inactive_timeout  = 3; // time before which in-active flows are exported
}

// ExportControlStatus is the operational status of the Export Control configuration
message ExportControlStatus {
  // Export control status codes
  enum ExportControlStatusCode {
    SUCCESS			= 0;
    INVALID_CONFIG		= 1;
    TEMP_FAILURE		= 2;
    PERM_FAILURE		= 3;
  }
  ExportControlStatusCode 	code 	= 1;
  string 			status 	= 2;
}

// ExportControl is a container for the configuration and the operational status for ExportControl
message ExportControl {
  ExportControlSpec     spec    = 1;
  ExportControlStatus   status  = 2;
}

// ExportControlConfigMsg is used as input to RPC call for ExportControl. It is a batchable message
message ExportControlConfigMsg {
  repeated ExportControlSpec configs = 1; //
}

// ExportControlResponseMsg is used in responses for operations on the ExportControl configuration.
message ExportControlResponseMsg {
  types.ApiStatus         status          = 1;  // Status of the API
  repeated ExportControl  export_control  = 2;  // List of export control objects. 
}

// RuleAction is an enumeration of support telemetry actions
enum RuleAction {
    COLLECT_FLOW_STATS  = 0;
    MIRROR              = 1;
}

// AggregationScheme is an enumeration of aggregation schemes supported
enum AggregationScheme {
  NONE              = 0; // Full Flow tuple with no aggregation
  IPSOURCE          = 1; // Aggregation by source IP address
  IPDESTINATION     = 2; // Aggregation by destination IP address
  IPPAIR            = 3; // Aggregation by source-destination IP pair
  SOURCE_PORT       = 4; // Aggregation by source port in tuple
  DESTINATION_PORT  = 5; // Aggregation by destination port in tuple
  SERVICE           = 6; // Aggregation by service (source or destination used as per direction of flow)
  IPPAIR_SERVICE    = 7; // Aggregation by (source ip, destination ip, service)
  SOURCE_SEC_GROUP  = 8; // Source security group tags
  DEST_SEC_GROUP    = 9; // Destination security group tags
  SEC_GROUP_PAIR    = 10; // set of source and destination tags
}

// MonitorAction defines the action for a flow monitor rule
message MonitorAction {
  repeated RuleAction         action                = 1;
  repeated AggregationScheme  agg_scheme            = 2;
  repeated uint32             mirror_destinations   = 3;
}

// FlowMonitorRuleSpec flow monitor rule specification
message FlowMonitorRuleSpec {
  types.ObjectMeta  meta              = 1; // Common object meta
  ExportControlId   export_configId   = 2; // Export control traffic the rule is attached to
  MacAddress        source_mac        = 3; // Source MAC of the tuple to match
  MacAddress        dest_mac          = 4; // Destination MAC to match
  types.IPProtocol  protocol          = 5; // IP Protocol to match
  types.IPPrefix    source_ip         = 6; // Source IP prefix to match
  types.IPPrefix    dest_ip           = 7; // Destination IP prefix to match
  L4Port            source_l4_port    = 8; // Souce L4 port 
  L4Port            dest_l4_port      = 9; // Destination L4 port
  repeated uint64   source_tags       = 10; // Set of source TAGs to match (all)
  repeated uint64   dest_tags         = 11; // Set of destination TAGs to match (all)
  MonitorAction     action            = 12; // Action for flows that meet the match criteria
}

// FlowMonitorRuleStatus is the operational status of the rule
message FlowMonitorRuleStatus {
  // FlowMonitorRule status codes
  enum FlowMonitorRuleStatusCode {
    SUCCESS			= 0;
    INVALID_CONFIG		= 1;
    TEMP_FAILURE		= 2;
    PERM_FAILURE		= 3;
  }
  FlowMonitorRuleStatusCode 	code 		= 1; // Status code
  string 			status       	= 2; // Current operational status
  uint32 			active_flows 	= 3; // Number of active Flows that matched this rule
}

// FlowMonitorRule is a container for the configuration and operational status
message FlowMonitorRule {
  FlowMonitorRuleSpec     spec    = 1;
  FlowMonitorRuleStatus   status  = 2;
}

// FlowMonitorRuleConfigMsg is used in api requests for flow monitor configuration
message FlowMonitorRuleConfigMsg {
  repeated FlowMonitorRuleSpec rules = 1;
}

// FlowMonitorRuleResponseMsg is used in responses for flow monitor rule operations
message FlowMonitorRuleResponseMsg {
  types.ApiStatus           status  = 1; // Status of the API
  repeated FlowMonitorRule  rules   = 2; // Flow monitor rule ressults
}

// RspanSpec is the configuration specification for RSPAN.
message RSpanSpec {
  intf.InterfaceKeyHandle 	intf 		= 1; // Interface handle
  types.EncapInfo		rspan_encap 	= 2; // VLAN encapsulation
}

// ERSpanSpec is the configuration specification for ERSPAN 
message ERSpanSpec {
  types.IPAddress dest_ip     = 1; // IP address of the ERSPAN destination
  types.IPAddress src_ip      = 2; //  Source IP address to be used for ERSPAN
  string          dscp        = 3; // DSCP value to use
  uint32          span_id     = 4; // Span ID to use
}

// MirrorSessionId is a key for the SPAN session
message MirrorSessionId {
  uint32 session_id = 1;
}

// MirrorSessionSpec is the configuration specification for mirror config
message MirrorSessionSpec {
  types.ObjectMeta  meta            = 1; // Common object meta
  MirrorSessionId	id              = 2; // Session ID
  uint32		snaplen		        = 3; // maximum  bytes of packet to mirror.
  oneof destination {
    intf.InterfaceKeyHandle	local_span_if  = 4; // Local span destination
    RSpanSpec   		rspan_spec     = 5; // VLAN encap to use when configuration is for RSPAN
    ERSpanSpec        		erspan_spec    = 6; // ERSPAN configuration in case of ERSPAN
  }
}

// MirrorSessionStatus is the operational status of the SPAN session.
message MirrorSessionStatus {
  // Mirror Session  status codes
  enum MirrorSessionStatusCode {
    SUCCESS			= 0;
    INVALID_CONFIG		= 1;
    TEMP_FAILURE		= 2;
    PERM_FAILURE		= 3;
  }
  MirrorSessionStatusCode 	code		= 1;
  string  			status        	= 2;
  int32   			active_flows  	= 3;
}

// MirrorSession is a container of the configuration and the operational status for mirror sessions.
message MirrorSession {
  types.ApiStatus       api_status  = 1;
  MirrorSessionSpec     spec        = 2;
  MirrorSessionStatus   status      = 3;
}

// MirrorSessionConfigMsg is a batchable message used for request messages for mirror session configuration.
message  MirrorSessionConfigMsg {
  repeated MirrorSessionSpec request = 1;
}

// MirrorSessionConfigMsg is a batchable message used for request messages for mirror session configuration.
message  MirrorSessionDeleteMsg {
  repeated MirrorSessionId request = 1;
}

// MirrorSessionResponseMsg is used as responses to the MirrorSession configuration APIs
message MirrorSessionResponseMsg {
  types.ApiStatus               status    = 1; // Response status of the API
  repeated MirrorSession    	response  = 2; // Operational status of the mirror session
}


service Telemetry {
  // Collector operations CRUD operations
  rpc CollectorCreate(CollectorConfigMsg) returns (CollectorResponseMsg) {}
  rpc CollectorUpdate(CollectorConfigMsg) returns (CollectorResponseMsg) {}
  rpc CollectorList(ExportControlId) returns (CollectorResponseMsg) {}
  rpc CollectorDelete(CollectorConfigMsg) returns (CollectorResponseMsg) {}

  // ExportConfig CRUD operations
  rpc ExportControlCreate(ExportControlConfigMsg) returns (ExportControlResponseMsg) {}
  rpc ExportControlUpdate(ExportControlConfigMsg) returns (ExportControlResponseMsg) {}
  rpc ExportControlGet(ExportControlId) returns (ExportControlResponseMsg) {}
  rpc ExportControlDelete(ExportControlId) returns (ExportControlResponseMsg) {}

  // FlowMonitorRules CRUD Operations
  rpc FlowMonitorRuleCreate(FlowMonitorRuleConfigMsg) returns (FlowMonitorRuleResponseMsg) {}
  rpc FlowMonitorRuleUpdate(FlowMonitorRuleConfigMsg) returns (FlowMonitorRuleResponseMsg) {}
  rpc FlowMonitorRuleList(ExportControlId) returns (FlowMonitorRuleResponseMsg)  {}
  rpc FlowMonitorRuleGet(FlowMonitorRuleConfigMsg) returns (FlowMonitorRuleResponseMsg)  {}
  rpc FlowMonitorRuleDelete(FlowMonitorRuleConfigMsg) returns (FlowMonitorRuleResponseMsg) {}

  // MirrorSession CRUD Operations
  rpc MirrorSessionCreate(MirrorSessionConfigMsg) returns (MirrorSessionResponseMsg) {}
  rpc MirrorSessionUpdate(MirrorSessionConfigMsg) returns (MirrorSessionResponseMsg) {}
  rpc MirrorSessionGet(MirrorSessionId) returns (MirrorSessionResponseMsg) {}
  rpc MirrorSessionList(types.Empty) returns (MirrorSessionResponseMsg) {}
  rpc MirrorSessionDelete(MirrorSessionDeleteMsg) returns (MirrorSessionResponseMsg) {}
}
