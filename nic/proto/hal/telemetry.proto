syntax = "proto3";

import "types.proto";
import "kh.proto";

package telemetry;
option go_package="halproto";

// Telemetry sevice definition
service Telemetry {
  // Collector operations CRUD operations
  rpc CollectorCreate (CollectorRequestMsg) returns (CollectorResponseMsg) {}
  rpc CollectorUpdate (CollectorRequestMsg) returns (CollectorResponseMsg) {}
  rpc CollectorDelete (CollectorDeleteRequestMsg) returns (CollectorDeleteResponseMsg) {}
  rpc CollectorGet (CollectorGetRequestMsg) returns (CollectorGetResponseMsg) {}

  // FlowMonitorRules CRUD Operations
  rpc FlowMonitorRuleCreate (FlowMonitorRuleRequestMsg) returns (FlowMonitorRuleResponseMsg) {}
  rpc FlowMonitorRuleUpdate (FlowMonitorRuleRequestMsg) returns (FlowMonitorRuleResponseMsg) {}
  rpc FlowMonitorRuleDelete (FlowMonitorRuleDeleteRequestMsg) returns (FlowMonitorRuleDeleteResponseMsg) {}
  rpc FlowMonitorRuleGet (FlowMonitorRuleGetRequestMsg) returns (FlowMonitorRuleGetResponseMsg)  {}

  // DropMonitorRules CRUD Operations
  rpc DropMonitorRuleCreate (DropMonitorRuleRequestMsg) returns (DropMonitorRuleResponseMsg) {}
  rpc DropMonitorRuleUpdate (DropMonitorRuleRequestMsg) returns (DropMonitorRuleResponseMsg) {}
  rpc DropMonitorRuleDelete (DropMonitorRuleDeleteRequestMsg) returns (DropMonitorRuleDeleteResponseMsg) {}
  rpc DropMonitorRuleGet (DropMonitorRuleGetRequestMsg) returns (DropMonitorRuleGetResponseMsg)  {}

  // MirrorSession CRUD Operations
  rpc MirrorSessionCreate (MirrorSessionRequestMsg) returns (MirrorSessionResponseMsg) {}
  rpc MirrorSessionUpdate (MirrorSessionRequestMsg) returns (MirrorSessionResponseMsg) {}
  rpc MirrorSessionDelete (MirrorSessionDeleteRequestMsg) returns (MirrorSessionDeleteResponseMsg) {}
  rpc MirrorSessionGet (MirrorSessionGetRequestMsg) returns (MirrorSessionGetResponseMsg) {}

}

// ExportFormat is a enumeration of export formats supported
enum ExportFormat {
  IPFIX     = 0;
  NETFLOWV9 = 1;
}

// RuleAction is an enumeration of support telemetry actions
enum RuleAction {
    COLLECT_FLOW_STATS  = 0;
    MIRROR              = 1;
    MIRROR_TO_CPU       = 2;
}

// CollectorSpec is the configuration specification for a telemetry collector
message CollectorSpec {
  kh.CollectorKeyHandle key_or_handle     = 1 [(gogoproto.moretags) = "venice:key"]; // Collector key or handle
  kh.VrfKeyHandle       vrf_key_handle    = 2 [(gogoproto.moretags) = "venice:ref"];
  types.EncapInfo       encap             = 3; // VLAN encap to be applied to traffic
  kh.L2SegmentKeyHandle l2seg_key_handle  = 4 [(gogoproto.moretags) = "venice:ref"]; // Hal Handle for the L2 segment (ideally remove encap)
  types.IPAddress       dest_ip           = 5 [(gogoproto.moretags) = "venice:mandatory"]; // Destination IP of the Collector
  types.IPAddress       src_ip            = 6 [(gogoproto.moretags) = "venice:mandatory"]; // Source IP to use
  types.IPProtocol      protocol          = 7 [(gogoproto.moretags) = "venice:mandatory"]; // L4 IP Protocol to use
  uint32                dest_port         = 8 [(gogoproto.moretags) = "venice:mandatory"]; // L4 Port for the collector
  ExportFormat          format            = 9 [(gogoproto.moretags) = "venice:mandatory"]; // Format that the collector expects
  uint32                template_id       = 10 [(gogoproto.moretags) = "venice:mandatory"]; // Data Template ID used to send to the collector 
  uint32                export_interval   = 11 [(gogoproto.moretags) = "venice:mandatory"]; // Export interval (in seconds)
}

// CollectorSpec is the operational status of the collector
message CollectorStatus {
  fixed64               handle  = 1; // id of collector returned by HAL
}

// Collector is a container that holds both the configuration and the operational 
//  state of the collector
message CollectorResponse {
  types.ApiStatus     api_status    = 1 [(gogoproto.moretags) = "venice:api_status"];  // API status code
  CollectorStatus     status        = 2; // Collector status, if api succeeds
}

// CollectorConfigsMsg is used in requests and is a batchable request message
message CollectorRequestMsg {
  repeated CollectorSpec request = 1;
}

// CollectorConfigsMsg message is used as response for API requests.
message CollectorResponseMsg {
  repeated CollectorResponse  response = 1; // batched reponse
}

// CollectorDeleteRequest is used to delete a collector
message CollectorDeleteRequest {
  kh.CollectorKeyHandle          key_or_handle = 1 [(gogoproto.moretags) = "venice:key"]; // unique identifier
}

// CollectorDeleteResponse is response to CollectorDeleteRequest
message CollectorDeleteResponse {
  types.ApiStatus       api_status     = 1 [(gogoproto.moretags) = "venice:api_status"];  // API status code
  kh.CollectorKeyHandle key_or_handle  = 2;
}

// CollectorDeleteRequestMsg is used to delete a batch of collectors
message CollectorDeleteRequestMsg {
  repeated CollectorDeleteRequest    request = 1;    // batched delete request
}

// CollectorDeleteResponseMsg is batched response to CollectorDeleteRequestMsg
message CollectorDeleteResponseMsg {
  repeated CollectorDeleteResponse    response = 1;    // batched response
}

// CollectorGetRequest is used to get information about a collector
message CollectorGetRequest {
  kh.CollectorKeyHandle   key_or_handle       = 1 [(gogoproto.moretags) = "venice:key"];
}

// CollectorGetRequestMsg is batched GET requests for collectors 
message CollectorGetRequestMsg {
  repeated CollectorGetRequest    request = 1;    // batched get request
}

message CollectorGetResponse {
  types.ApiStatus   api_status = 1 [(gogoproto.moretags) = "venice:api_status"];  // API status code
  CollectorSpec     spec       = 2;     // Collector configuration
  CollectorStats    stats      = 3;    // stats
}

// CollectorGetResponseMsg is batched response to CollectorGetRequestMsg
message CollectorGetResponseMsg {
  repeated CollectorGetResponse    response   = 1;    // batch get response
}

/*
 * CollectorStats captures P4Plus statistics
 * The offsets of fields here MUST match the offsets of fields defined in
 * ipfix_defines.h
 */
message CollectorStats {
  uint64         num_exported_bytes = 1;
  uint64         num_exported_packets = 2;
  uint64         num_exported_records_nonip = 3;
  uint64         num_exported_records_ipv4 = 4;
  uint64         num_exported_records_ipv6 = 5;
}

// AggregationScheme is an enumeration of aggregation schemes supported
enum AggregationScheme {
  NONE              = 0; // Full Flow tuple with no aggregation
  IPSOURCE          = 1; // Aggregation by source IP address
  IPDESTINATION     = 2; // Aggregation by destination IP address
  IPPAIR            = 3; // Aggregation by source-destination IP pair
  SOURCE_PORT       = 4; // Aggregation by source port in tuple
  DESTINATION_PORT  = 5; // Aggregation by destination port in tuple
  SERVICE           = 6; // Aggregation by service (source or destination used as per direction of flow)
  IPPAIR_SERVICE    = 7; // Aggregation by (source ip, destination ip, service)
  SOURCE_SEC_GROUP  = 8; // Source security group tags
  DEST_SEC_GROUP    = 9; // Destination security group tags
  SEC_GROUP_PAIR    = 10; // set of source and destination tags
}

// MonitorAction defines the action for a flow monitor rule
message MonitorAction {
  repeated RuleAction                action        = 1;
  repeated AggregationScheme         agg_scheme    = 2;
  repeated kh.MirrorSessionKeyHandle ms_key_handle = 3 [(gogoproto.moretags) = "venice:ref"]; // MirrorSession destinations
}

// FlowMonitorRuleSpec flow monitor rule specification
message FlowMonitorRuleSpec {
  kh.FlowMonitorRuleKeyHandle       key_or_handle           = 1 [(gogoproto.moretags) = "venice:key"]; // FlowMonitor key or handle
  repeated kh.CollectorKeyHandle    collector_key_handle    = 2 [(gogoproto.moretags) = "venice:ref"]; // Collector key or handle
  kh.VrfKeyHandle                   vrf_key_handle          = 3 [(gogoproto.moretags) = "venice:ref"];
  types.RuleMatch                   match                   = 4; // match conditions 
  MonitorAction                     action                  = 5; // Action for flows that meet the match criteria
}

// FlowMonitorRuleStatus is the operational status of the rule
message FlowMonitorRuleStatus {
  fixed64                       handle       = 1; // id of flowmonitor returned by HAL
  uint32                        active_flows = 2; // Number of active Flows that matched this rule
}

// FlowMonitorRule is a container that holds both the configuration and the operational 
// state of the flowmonitor
message FlowMonitorRuleResponse {
  types.ApiStatus       api_status = 1 [(gogoproto.moretags) = "venice:api_status"];  // API status code
  FlowMonitorRuleStatus status     = 2; // FlowMonitorRule status, if api succeeds
}

// FlowMonitorRuleConfigsMsg is used in requests and is a batchable request message
message FlowMonitorRuleRequestMsg {
  repeated FlowMonitorRuleSpec request = 1;
}

// FlowMonitorRuleConfigsMsg message is used as response for API requests.
message FlowMonitorRuleResponseMsg {
  repeated FlowMonitorRuleResponse  response = 1; // batched reponse
}

// FlowMonitorRuleDeleteRequest is used to delete a flowmonitor
message FlowMonitorRuleDeleteRequest {
  kh.FlowMonitorRuleKeyHandle   key_or_handle   = 1 [(gogoproto.moretags) = "venice:key"]; // unique identifier
  kh.VrfKeyHandle               vrf_key_handle  = 2 [(gogoproto.moretags) = "venice:ref"];
}

// FlowMonitorRuleDeleteResponse is response to FlowMonitorRuleDeleteRequest
message FlowMonitorRuleDeleteResponse {
  types.ApiStatus             api_status    = 1 [(gogoproto.moretags) = "venice:api_status"];  // API status code
  kh.FlowMonitorRuleKeyHandle key_or_handle = 2 [(gogoproto.moretags) = "venice:key"];
}

// FlowMonitorRuleDeleteRequestMsg is used to delete a batch of flowmonitors
message FlowMonitorRuleDeleteRequestMsg {
  repeated FlowMonitorRuleDeleteRequest    request = 1;    // batched delete request
}

// FlowMonitorRuleDeleteResponseMsg is batched response to FlowMonitorRuleDeleteRequestMsg
message FlowMonitorRuleDeleteResponseMsg {
  repeated FlowMonitorRuleDeleteResponse    response = 1;    // batched response
}

// FlowMonitorRuleGetRequest is used to get information about a flowmonitor
message FlowMonitorRuleGetRequest {
  kh.FlowMonitorRuleKeyHandle   key_or_handle       = 1 [(gogoproto.moretags) = "venice:key"];
}

// FlowMonitorRuleGetRequestMsg is batched GET requests for flowmonitors 
message FlowMonitorRuleGetRequestMsg {
  repeated FlowMonitorRuleGetRequest    request = 1;    // batched get request
}

message FlowMonitorRuleStats {
}

message FlowMonitorRuleGetResponse {
  types.ApiStatus       api_status = 1 [(gogoproto.moretags) = "venice:api_status"];  // API status code
  FlowMonitorRuleSpec   spec       = 2;     // FlowMonitor configuration
  FlowMonitorRuleStats  stats      = 3;    // stats
}

// FlowMonitorGetResponseMsg is batched response to FlowMonitorGetRequestMsg
message FlowMonitorRuleGetResponseMsg {
  repeated FlowMonitorRuleGetResponse    response   = 1;    // batch get response
}

// Drop Monitor Rule specification
message DropMonitorRuleSpec {
  kh.DropMonitorRuleKeyHandle        key_or_handle       = 1 [(gogoproto.moretags) = "venice:key"]; // DropMonitor key or handle
  repeated kh.MirrorSessionKeyHandle ms_key_handle       = 2 [(gogoproto.moretags) = "venice:constraints={range:0-7}"]; // list of mirror destinations
  types.DropReasons                  reasons             = 3; // drop reasons
}

// DropMonitorRuleStatus is the operational status of the rule
message DropMonitorRuleStatus {
  fixed64                       handle       = 1; // id of dropmonitor returned by HAL
  uint32                        active_flows = 3; // Number of active Flows that matched this rule
}

// DropMonitorRule is a container that holds both the configuration and the operational 
// state of the dropmonitor
message DropMonitorRuleResponse {
  types.ApiStatus       api_status = 1 [(gogoproto.moretags) = "venice:api_status"];  // API status code
  DropMonitorRuleStatus status     = 2; // DropMonitorRule status, if api succeeds
}

// DropMonitorRuleConfigsMsg is used in requests and is a batchable request message
message DropMonitorRuleRequestMsg {
  repeated DropMonitorRuleSpec request = 1;
}

// DropMonitorRuleConfigsMsg message is used as response for API requests.
message DropMonitorRuleResponseMsg {
  repeated DropMonitorRuleResponse  response = 1; // batched reponse
}

// DropMonitorRuleDeleteRequest is used to delete a dropmonitor
message DropMonitorRuleDeleteRequest {
  kh.DropMonitorRuleKeyHandle   key_or_handle = 1 [(gogoproto.moretags) = "venice:key"]; // unique identifier
}

// DropMonitorRuleDeleteResponse is response to DropMonitorRuleDeleteRequest
message DropMonitorRuleDeleteResponse {
  types.ApiStatus             api_status    = 1 [(gogoproto.moretags) = "venice:api_status"];  // API status code
  kh.DropMonitorRuleKeyHandle key_or_handle = 2 [(gogoproto.moretags) = "venice:key"];
}

// DropMonitorRuleDeleteRequestMsg is used to delete a batch of dropmonitors
message DropMonitorRuleDeleteRequestMsg {
  repeated DropMonitorRuleDeleteRequest    request = 1;    // batched delete request
}

// DropMonitorRuleDeleteResponseMsg is batched response to DropMonitorRuleDeleteRequestMsg
message DropMonitorRuleDeleteResponseMsg {
  repeated DropMonitorRuleDeleteResponse    response = 1;    // batched response
}

// DropMonitorRuleGetRequest is used to get information about a dropmonitor
message DropMonitorRuleGetRequest {
  kh.DropMonitorRuleKeyHandle   key_or_handle       = 1 [(gogoproto.moretags) = "venice:key"];
}

// DropMonitorRuleGetRequestMsg is batched GET requests for dropmonitors 
message DropMonitorRuleGetRequestMsg {
  repeated DropMonitorRuleGetRequest    request = 1;    // batched get request
}

message DropMonitorRuleStats {
}

message DropMonitorRuleGetResponse {
  types.ApiStatus       api_status = 1 [(gogoproto.moretags) = "venice:api_status"];  // API status code
  DropMonitorRuleSpec   spec       = 2;     // DropMonitorRule configuration
  DropMonitorRuleStats  stats      = 3;    // stats
}

// DropMonitorRuleGetResponseMsg is batched response to DropMonitorRuleGetRequestMsg
message DropMonitorRuleGetResponseMsg {
  repeated DropMonitorRuleGetResponse    response   = 1;    // batch get response
}

// RspanSpec is the configuration specification for RSPAN.
message RSpanSpec {
  kh.InterfaceKeyHandle     intf         = 1 [(gogoproto.moretags) = "venice:ref"]; // Interface handle
  types.EncapInfo           rspan_encap  = 2; // VLAN encapsulation
}

// ERspanType is an enumeration of supported erspan types
enum ERSpanType {
  ERSPAN_TYPE_NONE    = 0;
  ERSPAN_TYPE_1       = 1;
  ERSPAN_TYPE_2       = 2;
  ERSPAN_TYPE_3       = 3;
}

// ERSpanSpec is the configuration specification for ERSPAN 
message ERSpanSpec {
  types.IPAddress dest_ip       = 1; // IP address of the ERSPAN destination
  types.IPAddress src_ip        = 2; //  Source IP address to be used for ERSPAN
  string          dscp          = 3; // DSCP value to use
  uint32          span_id       = 4; // Span ID to use
  ERSpanType      type          = 5; // ERSpan type
  bool            vlan_strip_en = 6; // Strip vlan of original packet
}

// MirrorSessionSpec is the configuration specification for mirror config
message MirrorSessionSpec {
  kh.MirrorSessionKeyHandle key_or_handle   = 1 [(gogoproto.moretags) = "venice:key"]; // MirrorSession key or handle
  kh.VrfKeyHandle           vrf_key_handle  = 2 [(gogoproto.moretags) = "venice:ref"];
  uint32                    snaplen         = 3; // maximum  bytes of packet to mirror.
  oneof destination {
    kh.InterfaceKeyHandle   local_span_if   = 4 [(gogoproto.moretags) = "venice:ref"]; // Local span destination
    RSpanSpec               rspan_spec      = 5; // VLAN encap to use when configuration is for RSPAN
    ERSpanSpec              erspan_spec     = 6; // ERSPAN configuration in case of ERSPAN
  }
}

// MirrorSessionStatus is the operational status of the rule
message MirrorSessionStatus {
  fixed64                       handle       = 1; // id of mirrorsession returned by HAL
  uint32                        active_flows = 2; // Number of active Flows that matched this rule
}

// MirrorSession is a container that holds both the configuration and the operational 
// state of the mirrorsession
message MirrorSessionResponse {
  types.ApiStatus       api_status = 1 [(gogoproto.moretags) = "venice:api_status"];  // API status code
  MirrorSessionStatus   status     = 2; // MirrorSession status, if api succeeds
}

// MirrorSessionConfigsMsg is used in requests and is a batchable request message
message MirrorSessionRequestMsg {
  repeated MirrorSessionSpec request = 1;
}

// MirrorSessionConfigsMsg message is used as response for API requests.
message MirrorSessionResponseMsg {
  repeated MirrorSessionResponse  response = 1; // batched reponse
}

// MirrorSessionDeleteRequest is used to delete a mirrorsession
message MirrorSessionDeleteRequest {
  kh.MirrorSessionKeyHandle     key_or_handle = 1 [(gogoproto.moretags) = "venice:key"]; // unique identifier
}

// MirrorSessionDeleteResponse is response to MirrorSessionDeleteRequest
message MirrorSessionDeleteResponse {
  types.ApiStatus           api_status    = 1 [(gogoproto.moretags) = "venice:api_status"];  // API status code
  kh.MirrorSessionKeyHandle key_or_handle = 2;
}

// MirrorSessionDeleteRequestMsg is used to delete a batch of mirrorsessions
message MirrorSessionDeleteRequestMsg {
  repeated MirrorSessionDeleteRequest    request = 1;    // batched delete request
}

// MirrorSessionDeleteResponseMsg is batched response to MirrorSessionDeleteRequestMsg
message MirrorSessionDeleteResponseMsg {
  repeated MirrorSessionDeleteResponse    response = 1;    // batched response
}

// MirrorSessionGetRequest is used to get information about a mirrorsession
message MirrorSessionGetRequest {
  kh.MirrorSessionKeyHandle     key_or_handle       = 1 [(gogoproto.moretags) = "venice:key"];
}

// MirrorSessionGetRequestMsg is batched GET requests for mirrorsessions 
message MirrorSessionGetRequestMsg {
  repeated MirrorSessionGetRequest    request = 1;    // batched get request
}

message MirrorSessionStats {
}

message MirrorSessionGetResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];  // API status code
  MirrorSessionSpec  spec       = 2;     // MirrorSession configuration
  MirrorSessionStats stats      = 3;    // stats
  MirrorSessionStatus status    = 4;    // status
}

// MirrorSessionGetResponseMsg is batched response to MirrorSessionGetRequestMsg
message MirrorSessionGetResponseMsg {
  repeated MirrorSessionGetResponse    response   = 1;    // batch get response
}
