//------------------------------------------------------------------------------
// protobuf specification for RDMA HAL APIs
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
option go_package="halproto";

package rdma;

// Interface service definition
service Rdma {
  // Queue Pair related APIs
  rpc RdmaQpCreate(RdmaQpRequestMsg) returns (RdmaQpResponseMsg) {}
  rpc RdmaQpUpdate(RdmaQpUpdateRequestMsg) returns (RdmaQpUpdateResponseMsg) {}

  rpc RdmaAhCreate(RdmaAhRequestMsg) returns (RdmaAhResponseMsg) {}
  
  // Completion Q related APIs
  rpc RdmaCqCreate(RdmaCqRequestMsg) returns (RdmaCqResponseMsg) {}

  // Completion Q related APIs
  rpc RdmaEqCreate(RdmaEqRequestMsg) returns (RdmaEqResponseMsg) {}

  // Register Memory related APIs
  rpc RdmaMemReg(RdmaMemRegRequestMsg) returns (RdmaMemRegResponseMsg) {}

  // Allocated Lkey  related APIs
  rpc RdmaAllocLkey(RdmaAllocLkeyRequestMsg) returns (RdmaAllocLkeyResponseMsg) {}

  // Memory Window related APIs
  rpc RdmaMemWindow(RdmaMemWindowRequestMsg) returns (RdmaMemWindowResponseMsg) {}

  // Create the admin queue
  rpc RdmaAqCreate(RdmaAqRequestMsg) returns (RdmaAqResponseMsg) {}
}

// types of interfaces
enum RdmaServiceType {
    RDMA_SERV_TYPE_RC          = 0;  // Reliable Connection
    RDMA_SERV_TYPE_UC          = 1;  // UnReliable Connection
    RDMA_SERV_TYPE_RD          = 2;  // Reliable Datagram
    RDMA_SERV_TYPE_UD          = 3;  // UnReliable Datagram
    RDMA_SERV_TYPE_CNP         = 4;  // Congestion Notification Pkt
    RDMA_SERV_TYPE_XRC         = 5;  // Extended Reliable Connection
    RDMA_SERV_TYPE_VEND_1      = 6;  // Vendor-1
    RDMA_SERV_TYPE_VEND_2      = 7;  // Vendor-2
}

//**********************    Queue Pair  ********************************//
// RdmaQp object
message RdmaQpSpec {
  types.ObjectMeta         meta            = 1;    // object meta
  uint32                   qp_num          = 2;    // qp number
  uint32                   hw_lif_id       = 3;    // hw lif id
  uint32                   sq_wqe_size     = 4;    // SQWQE size
  uint32                   rq_wqe_size     = 5;    // RQWQE size
  uint32                   num_sq_wqes     = 6;    // Num SQWQEs
  uint32                   num_rq_wqes     = 7;    // Num RQWQEs
  uint32                   num_rsq_wqes    = 8;    // Num RSQWQEs
  uint32                   num_rrq_wqes    = 9;    // Num RRQWQEs
  uint32                   pd              = 10;   // Protection domain
  uint32                   pmtu            = 11;   // Path MTU
  uint32                   hostmem_pg_size = 12;   // Host Memory Page Size
  RdmaServiceType          svc             = 13;   // RDMA service type
  bool                     atomic_enabled  = 14;   // enable Atomic Ops
  uint32                   sq_lkey         = 15;   // SQ's lkey
  uint32                   rq_lkey         = 16;   // RQ's lkey
  uint32                   rq_cq_num       = 17;   // RQ's CQ Number
  uint32                   sq_cq_num       = 18;   // SQ's CQ Number
  bool                     immdt_as_dbell  = 19;   // Use immdt data to ring dbell
  bool                     sq_in_nic_memory= 20;   // Allocate SQ in NIC Memory
  bool                     rq_in_nic_memory= 21;   // Allocate RQ in NIC Memory
  fixed64                  if_handle       = 22;   // EP's/ENIC's interface
                                                   // handle
  repeated uint64          va_pages_phy_addr = 23;  // Virtual memory pages's
                                                       // phy addr
  uint32                   num_sq_pages      = 24;  // rq num PT entries
  //repeated uint64          rq_va_pages_phy_addr = 25;  // Virtual memory pages's
                                                       // phy addr
  //uint32                   num_rq_pages      = 26;  // rq num PT entries
}

// RdmaQpRequestMsg is batched request used to create/update of Rdma QPs
message RdmaQpRequestMsg {
  repeated RdmaQpSpec    request = 1;    // batch of requests
}

// RdmaQpResponse response to one RdmaQpSpec
message RdmaQpResponse {
  types.ApiStatus     api_status       = 1;    // API status code
  //RdmaQpStatus        status           = 2;    // operational status
  uint64              rsq_base_addr    = 3;    // RSQ base addr
  uint64              rrq_base_addr    = 4;    // RRQ base addr
  uint64              nic_sq_base_addr = 5;    // NIC SQ base addr
  uint64              nic_rq_base_addr = 6;    // NIC RQ base addr
  uint64              rdma_atomic_res_addr = 7; // RDMA atomic resource addr
}

// RdmaQpResponseMsg is response to RdmaQpRequestMsg
message RdmaQpResponseMsg {
  repeated RdmaQpResponse    response = 1;    // batch of responses
}

// types of Update QP operations
enum RdmaQpUpdateOper {
    RDMA_UPDATE_QP_OPER_SET_DEST_QP    = 0;  // Dest QP
    RDMA_UPDATE_QP_OPER_SET_HEADER_TEMPLATE = 1;  // L2/L3 Header Params
    RDMA_UPDATE_QP_OPER_SET_Q_KEY = 2; // Q_KEY
    RDMA_UPDATE_QP_OPER_SET_E_PSN = 3; // E_PSN
    RDMA_UPDATE_QP_OPER_SET_TX_PSN = 4; // TX_PSN
    RDMA_UPDATE_QP_OPER_SET_RD_ATM = 5; // RRQ_DEPTH
    RDMA_UPDATE_QP_OPER_SET_DEST_RD_ATM = 6; // RSQ_DEPTH
    RDMA_UPDATE_QP_OPER_SET_PMTU = 7; // PATH MTU
}
 
//****************   Update Queue Pair  ********************************//
// RdmaQpUpdate object
message RdmaQpUpdateSpec {
  types.ObjectMeta         meta            = 1;    // object meta
  uint32                   qp_num          = 2;    // QP number
  uint32                   hw_lif_id       = 3;    // hw lif id
  RdmaQpUpdateOper         oper            = 4;    // type of Update operation
  uint32                   dst_qp_num      = 5;    // Dest QP value
  bytes                    header_template = 6;    // Header Vector Params
  uint32                   q_key           = 7;    // Q_KEY
  uint32                   e_psn           = 8;
  uint32                   tx_psn          = 9;
  uint32                   ahid            = 10;
  uint32                   pmtu            = 11;
}

// RdmaQpRequestMsg is batched request used to create/update of Rdma QPs
message RdmaQpUpdateRequestMsg {
  repeated RdmaQpUpdateSpec    request = 1;    // batch of requests
}

// RdmaQpResponse response to one RdmaQpSpec
message RdmaQpUpdateResponse {
  types.ApiStatus     api_status       = 1;    // API status code
  //RdmaQpUpdateStatus        status           = 2;    // operational status
}

// RdmaQpUpdateResponseMsg is response to RdmaQpUpdateRequestMsg
message RdmaQpUpdateResponseMsg {
  repeated RdmaQpUpdateResponse    response = 1;    // batch of responses
}

//**********************    Address Handle  ********************************//
// RdmaAh object
message RdmaAhSpec {
  types.ObjectMeta         meta            = 1;    // object meta
  bytes                    smac            = 2;    // smac
  bytes                    dmac            = 3;    // dmac
  uint32                   hw_lif_id       = 4;    // hw lif id
  uint32                   ethtype         = 5;    // ipv4 or ipv6

  uint32                   vlan            = 6;
  uint32                   vlan_pri        = 7;
  uint32                   vlan_cfi        = 8;

  uint32                   ip_ver          = 9;
  uint32                   ip_tos          = 10;
  uint32                   ip_ttl          = 11;
  types.IPAddress          ip_saddr        = 12;
  types.IPAddress          ip_daddr        = 13;

  uint32                   udp_sport       = 14;
  uint32                   udp_dport       = 15;
  uint64                   ahid            = 16;
}

// RdmaAhRequestmsg is batched request used to create/update of Rdma QPs
message RdmaAhRequestMsg {
  repeated RdmaAhSpec    request = 1;    // batch of requests
}

// RdmaAhResponse to one RdmaAhSpec
message RdmaAhResponse {
  types.ApiStatus     api_status       = 1;    // API status code
}

// RdmaAhResponseMsg is response to RdmaAhRequestmsg
message RdmaAhResponseMsg {
  repeated RdmaAhResponse    response = 1;    // batch of responses
}

//**********************   Completion Queue  *****************************//
// RdmaCq object
message RdmaCqSpec {
  types.ObjectMeta         meta            = 1;    // object meta
  uint32                   cq_num          = 2;    // CQ Number
  uint32                   hw_lif_id       = 3;    // LIF id
  uint32                   cq_wqe_size     = 4;    // CQWQE size
  uint32                   num_cq_wqes     = 5;    // Num CQWQEs
  uint32                   hostmem_pg_size = 6;    // Path MTU
  uint32                   cq_lkey         = 7;    // CQ's lkey
  uint32                   eq_id           = 8;    // EQ id
  bool                     wakeup_dpath    = 9;    // Wake up of Datapath thread required
  uint32                   wakeup_lif      = 10;   // Wake up LIF
  uint32                   wakeup_qtype    = 11;   // Wake up Qtype
  uint32                   wakeup_qid      = 12;   // Wake up QID
  uint32                   wakeup_ring_id  = 13;   // Wake up RING_ID
  repeated uint64          cq_va_pages_phy_addr = 14;  // Virtual memory pages's
                                                       // phy addr
}

// RdmaCqRequestMsg is batched request used to create/update of Rdma QPs
message RdmaCqRequestMsg {
  repeated RdmaCqSpec    request = 1;    // batch of requests
}

// RdmaCqResponse response to one RdmaCqSpec
message RdmaCqResponse {
  types.ApiStatus     api_status       = 1;    // API status code
  //RdmaCqStatus        status           = 2;    // operational status
}

// RdmaCqResponseMsg is response to RdmaCqRequestMsg
message RdmaCqResponseMsg {
  repeated RdmaCqResponse    response = 1;    // batch of responses
}

//**********************   Event Queue  *****************************//
// RdmaEq object
message RdmaEqSpec {
  types.ObjectMeta         meta               = 1;    // object meta
  uint32                   eq_id              = 2;    // EQ Number
  uint32                   hw_lif_id          = 3;    // LIF id
  uint32                   eq_wqe_size        = 4;    // EQWQE size
  uint32                   num_eq_wqes        = 5;    // Num EQWQEs
  uint64                   eqe_base_addr_phy  = 6;    // EQE's base addres- physical
  uint32                   int_num            = 7;    // Interrupt num
}

// RdmaEqRequestMsg is batched request used to create/update of Rdma QPs
message RdmaEqRequestMsg {
  repeated RdmaEqSpec    request = 1;    // batch of requests
}

// RdmaEqResponse response to one RdmaEqSpec
message RdmaEqResponse {
  types.ApiStatus     api_status       = 1;        // API status code
  uint32              eq_intr_tbl_addr     = 2;    // EQ interrupt table addr
}

// RdmaEqResponseMsg is response to RdmaEqRequestMsg
message RdmaEqResponseMsg {
  repeated RdmaEqResponse    response = 1;    // batch of responses
}

//**********************   Memory Registratin(MR)  *********************//
// RdmaMemReg object
message RdmaMemRegSpec {
  types.ObjectMeta         meta            = 1;    // object meta
  uint64                   hw_lif_id       = 2;    // Hardware Lif Id
  uint32                   pd              = 3;    // Protection domain
  uint64                   va              = 4;    // Virtual address
  uint32                   len             = 5;    // Length of memory
  bool                     ac_local_wr     = 6;    // Acc control/permissions
  bool                     ac_remote_wr    = 7;    // Acc control/permissions
  bool                     ac_remote_rd    = 8;    // Acc control/permissions
  bool                     ac_remote_atomic= 9;    // Acc control/permissions
  uint32                   lkey            = 10;   // Lkey for this memory
  uint32                   rkey            = 11;   // Rkey for this memory
  uint32                   hostmem_pg_size = 12;   // Host Memory Page Size
  uint32                   override_lif    = 13;   // Override LIF value
  bool                     override_lif_vld  = 14; // Override LIF valid
  repeated uint64          va_pages_phy_addr = 15;  // Virtual memory pages's phy addr     
}

// RdmaMemRegRequestMsg is batched request used to create/update of Rdma QPs
message RdmaMemRegRequestMsg {
  repeated RdmaMemRegSpec    request = 1;    // batch of requests
}

// RdmaMemRegResponse response to one RdmaMemRegSpec
message RdmaMemRegResponse {
  types.ApiStatus     api_status       = 1;    // API status code
}

// RdmaMemRegResponseMsg is response to RdmaMemRegRequestMsg
message RdmaMemRegResponseMsg {
  repeated RdmaMemRegResponse    response = 1;    // batch of responses
}


//**********************   Allocate L_Key  *********************//
// RdmaAllocLkey object
message RdmaAllocLkeySpec {
  types.ObjectMeta         meta                 = 1;    // object meta
  uint64                   hw_lif_id            = 2;    // Hardware Lif Id
  uint32                   pd                   = 3;    // Protection domain
  bool                     remote_access        = 4;    // Remote access requested
  uint32                   lkey                 = 5;    // Lkey for this memory
  uint32                   rkey                 = 6;    // Rkey for this memory
  uint32                   num_pt_entries_rsvd  = 7;    // Size of PBL resources to be allocated
}

// RdmaAllocLkeyRequestMsg is batched request used to create/update of Rdma QPs
message RdmaAllocLkeyRequestMsg {
  repeated RdmaAllocLkeySpec    request = 1;    // batch of requests
}

// RdmaAllocLkeyResponse response to one RdmaAllocLkeySpec
message RdmaAllocLkeyResponse {
  types.ApiStatus     api_status       = 1;    // API status code
}

// RdmaAllocLkeyResponseMsg is response to RdmaAllocLkeyRequestMsg
message RdmaAllocLkeyResponseMsg {
  repeated RdmaAllocLkeyResponse    response = 1;    // batch of responses
}

//**********************   Memory Window(MW)  *********************//
// RdmaMemWindow object
enum RdmaMemoryWindowType {
    RDMA_MEMORY_WINDOW_TYPE_NONE = 0;
    RDMA_MEMORY_WINDOW_TYPE1   = 1;
    RDMA_MEMORY_WINDOW_TYPE2   = 2;
}

message RdmaMemWindowSpec {
  types.ObjectMeta         meta            = 1;    // object meta
  uint64                   hw_lif_id       = 2;    // Hardware Lif Id
  uint32                   pd              = 3;    // Protection domain
  RdmaMemoryWindowType     mw_type         = 4;    // memory window type
  bool                     ac_remote_wr    = 5;    // Acc control/permissions
  bool                     ac_remote_rd    = 6;    // Acc control/permissions
  bool                     ac_remote_atomic= 7;    // Acc control/permissions
  uint32                   rkey            = 8;   // Rkey for this memory
  uint32                   override_lif    = 9;   // Override LIF value
  bool                     override_lif_vld  = 10; // Override LIF valid
}

// RdmaMemWindowRequestMsg is batched request used to create/update of Rdma QPs
message RdmaMemWindowRequestMsg {
  repeated RdmaMemWindowSpec    request = 1;    // batch of requests
}

// RdmaMemWindowResponse response to one RdmaMemWindowSpec
message RdmaMemWindowResponse {
  types.ApiStatus     api_status       = 1;    // API status code
}

// RdmaMemWindowResponseMsg is response to RdmaMemWindowRequestMsg
message RdmaMemWindowResponseMsg {
  repeated RdmaMemWindowResponse    response = 1;    // batch of responses
}

//************************* AdminQ Create *****************************//
// RdmaAQCreate

message RdmaAqSpec {
  types.ObjectMeta         meta            = 1;    // object meta
  uint32                   aq_num          = 2;    // aq number
  uint32                   hw_lif_id       = 3;    // hw lif id
  uint32                   log_wqe_size    = 4;    // WQE size
  uint32                   log_num_wqes    = 5;    // Num WQEs
  uint32                   cq_num          = 6;    // CQ Number
  uint64                   phy_base_addr   = 7;    // physical address base of AQ
}

// RdmaAQRequestMsg is batched request used to create of Rdma AQs
message RdmaAqRequestMsg {
  repeated RdmaAqSpec    request = 1;    // batch of requests
}

// RdmaQpResponse response to one RdmaAQSpec
message RdmaAqResponse {
  types.ApiStatus     api_status       = 1;    // API status code
}

// RdmaAQResponseMsg is response to RdmaAQRequestMsg
message RdmaAqResponseMsg {
  repeated RdmaAqResponse    response = 1;    // batch of responses
}
