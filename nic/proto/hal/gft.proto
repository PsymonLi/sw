//------------------------------------------------------------------------------
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved
//
// protobuf specification for GFT
//------------------------------------------------------------------------------

syntax = "proto3";
import "types.proto";
import "kh.proto";

package gft;
option go_package="halproto";

// The GFT service definition
service Gft {
  rpc GftExactMatchProfileCreate (GftExactMatchProfileRequestMsg) returns (GftExactMatchProfileResponseMsg) {}
  rpc GftHeaderTranspositionProfileCreate (GftHeaderTranspositionProfileRequestMsg) returns (GftHeaderTranspositionProfileResponseMsg) {}
  rpc GftExactMatchFlowEntryCreate (GftExactMatchFlowEntryRequestMsg) returns (GftExactMatchFlowEntryResponseMsg) {}
}

message GftEthFields {
  uint64    dst_mac_addr     = 1;
  uint64    src_mac_addr     = 2;
  uint32    eth_type         = 3;
  uint32    customer_vlan_id = 4;
  uint32    provider_vlan_id = 5;
  uint32    priority         = 6;
}

enum GftTableType {
  GFT_TABLE_TYPE_NONE                = 0;
  GFT_TABLE_TYPE_WILDCARD_INGRESS    = 1;
  GFT_TABLE_TYPE_WILDCARD_EGRESS     = 2;
  GFT_TABLE_TYPE_EXACT_MATCH_INGRESS = 3;
  GFT_TABLE_TYPE_EXACT_MATCH_EGRESS  = 4;
}

message GftHeaders {
  bool ethernet_header = 1;
  bool ipv4_header     = 2;
  bool ipv6_header     = 3;
  bool tcp_header      = 4;
  bool udp_header      = 5;
  bool icmp_header     = 6;
  bool no_encap        = 7;
  bool ip_in_ip_encap  = 8;
  bool ip_in_gre_encap = 9;
  bool nvgre_encap     = 10;
  bool vxlan_encap     = 11;
}

message GftHeaderFields {
  bool dst_mac_addr     = 1;
  bool src_mac_addr     = 2;
  bool eth_type         = 3;
  bool customer_vlan_id = 4;
  bool provider_vlan_id = 5;
  bool dot1p_priority   = 6;
  bool src_ip_addr      = 7;
  bool dst_ip_addr      = 8;
  bool ip_ttl           = 9;
  bool ip_protocol      = 10;
  bool ip_dscp          = 11;
  bool src_port         = 12;
  bool dst_port         = 13;
  bool tcp_flags        = 14;
  bool tenant_id        = 15;
  bool icmp_type        = 16;
  bool icmp_code        = 17;
  bool oob_vlan         = 18;
  bool oob_tenant_id    = 19;
  bool gre_protocol     = 20;
}

message GftHeaderGroupExactMatchProfile {
  GftHeaders      headers      = 1;
  GftHeaderFields match_fields = 2;
} 

message GftExactMatchProfileSpec {
  types.ObjectMeta                            meta                 = 1;    // common object meta
  kh.GftExactMatchProfileKeyHandle            key_or_handle        = 2 [(gogoproto.moretags) = "venice:\"key\""];
  bool                                        rdma_flow            = 3;
  GftTableType                                table_type           = 4;
  repeated GftHeaderGroupExactMatchProfile    exact_match_profiles = 5;
}

// GftExactMatchProfileRequestMsg is used to do batched add or modify of GFT
// exact match profile
message GftExactMatchProfileRequestMsg {
  repeated GftExactMatchProfileSpec    request = 1;    // batched request
}

// GftExactMatchProfileStatus represents the current status of GFT exact match profile
message GftExactMatchProfileStatus {
  fixed64    profile_handle = 1;    // handle of the GFT exact match profile returned by HAL
}

// GftExactMatchProfileResponse is response to GftExactMatchProfileSpec
message GftExactMatchProfileResponse {
  types.ApiStatus               api_status = 1 [(gogoproto.moretags) = "venice:api_status"];
  GftExactMatchProfileStatus    status     = 2;    // operational status
}

// GftExactMatchProfileResponseMsg is batched response to GftExactMatchProfileRequestMsg
message GftExactMatchProfileResponseMsg {
  repeated GftExactMatchProfileResponse    response = 1;    // batched response
}

message UdpMatchFields {
  uint32     sport        = 1;
  uint32     dport        = 2;
}

message TcpMatchFields {
  uint32     sport        = 1;
  uint32     dport        = 2;
  uint32     tcp_flags    = 3;
}

message IcmpMatchFields {
  uint32     type         = 1;
  uint32     code         = 2;
}

message EncapMatchFields {
  uint32     tenant_id    = 1;
  uint32     gre_protocol = 2;
}

enum GftHeaderGroupTranspostionAction {
  TRANSPOSITION_ACTION_NONE   = 0;
  TRANSPOSITION_ACTION_MODIFY = 1;
  TRANSPOSITION_ACTION_IGNORE = 2;
  TRANSPOSITION_ACTION_PUSH   = 3;
  TRANSPOSITION_ACTION_POP    = 4;
}

message GftHeaderGroupTranspositionProfile {
  GftHeaderGroupTranspostionAction action       = 1;
  GftHeaders                       headers      = 2;
  GftHeaderFields                  match_fields = 3;
}

message GftHeaderTranspositionProfileSpec {
  types.ObjectMeta                               meta                                          = 1;    // common object meta
  kh.GftHeaderTranspositionProfileKeyHandle      key_or_handle                                 = 2 [(gogoproto.moretags) = "venice:\"key\""];
  bool                                           redirect_to_vport_ingress_queue               = 3;
  bool                                           redirect_to_vport_egress_queue                = 4;
  bool                                           redirect_to_vport_ingress_queue_if_ttl_is_one = 5;
  bool                                           redirect_to_vport_egress_queue_if_ttl_is_one  = 6;
  bool                                           copy_all_packets                              = 7;
  bool                                           copy_first_packet                             = 8;
  bool                                           copy_when_tcp_flag_set                        = 9;
  bool                                           custom_action_present                         = 10;
  bool                                           meta_action_before_transposition              = 11;
  GftTableType                                   table_type                                    = 12;
  repeated GftHeaderGroupTranspositionProfile    transposition_profiles                        = 13;
}

// GftHeaderTranspositionProfileRequestMsg is used to do batched add or modify of GFT
// header transposition profile
message GftHeaderTranspositionProfileRequestMsg {
  repeated GftHeaderTranspositionProfileSpec    request = 1;    // batched request
}

// GftHeaderTranspositionProfileStatus represents the current status of GFT header transposition profile
message GftHeaderTranspositionProfileStatus {
  fixed64    profile_handle = 1;    // handle of the GFT header transposition profile returned by HAL
}

// GftHeaderTranspositionProfileResponse is response to GftHeaderTranspositionProfileSpec
message GftHeaderTranspositionProfileResponse {
  types.ApiStatus                        api_status = 1 [(gogoproto.moretags) = "venice:api_status"];
  GftHeaderTranspositionProfileStatus    status     = 2;
}

// GftHeaderTranspositionProfileResponseMsg is batched response to GftHeaderTranspositionProfileRequestMsg
message GftHeaderTranspositionProfileResponseMsg {
  repeated GftHeaderTranspositionProfileResponse    response = 1;    // batched response
}

message EncapOrTransportMatch {
  oneof encap_or_transport {
    UdpMatchFields      udp_fields   = 1;
    TcpMatchFields      tcp_fields   = 2;
    IcmpMatchFields     icmp_fields  = 3;
    EncapMatchFields    encap_fields = 4;
  }
}

message GftHeaderGroupExactMatch {
  GftHeaders               headers            = 1;
  GftHeaderFields          match_fields       = 2;
  GftEthFields             eth_fields         = 3;
  types.IPAddress          src_ip_addr        = 4;
  types.IPAddress          dst_ip_addr        = 5;
  uint32                   ip_ttl             = 6;
  uint32                   ip_dscp            = 7;
  uint32                   ip_protocol        = 8;
  EncapOrTransportMatch    encap_or_transport = 9;
}

message UdpTranspositionFields {
  uint32     sport        = 1;
  uint32     dport        = 2;
}

message TcpTranspositionFields {
  uint32     sport        = 1;
  uint32     dport        = 2;
}

message IcmpTranspositionFields {
  uint32     type         = 1;
  uint32     code         = 2;
}

message EncapTranspositionFields {
  uint32     tenant_id    = 1;
  uint32     gre_protocol = 2;
}

message EncapOrTransportTransposition {
  oneof encap_or_transport {
    UdpTranspositionFields      udp_fields    = 1;
    TcpTranspositionFields      tcp_fields    = 2;
    IcmpTranspositionFields     icmp_fields   = 3;
    EncapTranspositionFields    encap_fields  = 4;
  }
}

message GftHeaderGroupTransposition {
  GftHeaderGroupTranspostionAction     action             = 1;
  GftHeaders                           headers            = 2;
  GftHeaderFields                      header_fields      = 3;
  GftEthFields                         eth_fields         = 4;
  types.IPAddress                      src_ip_addr        = 5;
  types.IPAddress                      dst_ip_addr        = 6;
  uint32                               ip_ttl             = 7;
  uint32                               ip_dscp            = 8;
  uint32                               ip_protocol        = 9;
  EncapOrTransportTransposition        encap_or_transport = 10;
}

message GftExactMatchFlowEntrySpec {
  types.ObjectMeta                             meta                                           = 1;    // common object meta
  GftTableType                                 table_type                                     = 2;
  kh.GftExactMatchFlowEntryKeyHandle           key_or_handle                                  = 3 [(gogoproto.moretags) = "venice:\"key\""];
  kh.GftExactMatchProfileKeyHandle             exact_match_profile                            = 4 [(gogoproto.moretags) = "venice:ref"];
  kh.GftHeaderTranspositionProfileKeyHandle    transposition_profile                          = 5 [(gogoproto.moretags) = "venice:ref"];
  bool                                         add_in_activated_state                         = 6;
  bool                                         rdma_flow                                      = 7;
  bool                                         redirect_to_vport_ingress_queue                = 8;
  bool                                         redirect_to_vport_egress_queue                 = 9;
  bool                                         redirect_to_vport_ingress_queue_if_ttl_is_one  = 10;
  bool                                         redirect_to_vport_egress_queue_if_ttl_is_one   = 11;
  bool                                         copy_all_packets                               = 12;
  bool                                         copy_first_packet                              = 13;
  bool                                         copy_when_tcp_flag_set                         = 14;
  bool                                         custom_action_present                          = 15;
  bool                                         meta_action_before_transposition               = 16;
  bool                                         copy_after_tcp_fin_flag_set                    = 17;
  bool                                         copy_after_tcp_rst_flag_set                    = 18;
  uint32                                       vport_id                                       = 19;
  uint32                                       redirect_vport_id                              = 20;
  uint32                                       ttl_one_redirect_vport_id                      = 21;
  repeated GftHeaderGroupExactMatch            exact_matches                                  = 22;
  repeated GftHeaderGroupTransposition         transpositions                                 = 23;
}

// GftExactMatchFlowEntryRequestMsg is used to do batched add or modify of GFT
// exact match flow entry
message GftExactMatchFlowEntryRequestMsg {
  repeated GftExactMatchFlowEntrySpec    request = 1;    // batched request
}

// GftExactMatchFlowEntryStatus represents the current status of GFT exact match flow entry
message GftExactMatchFlowEntryStatus {
  fixed64    flow_entry_handle = 1;    // handle of the GFT exact match flow entry returned by HAL
  uint64     flow_index        = 2;    // sw index for this flow
  uint64     flow_info_index   = 3;    // flow info index
}

// GftExactMatchFlowEntryResponse is response to GftExactMatchFlowEntrySpec
message GftExactMatchFlowEntryResponse {
  types.ApiStatus                 api_status = 1 [(gogoproto.moretags) = "venice:api_status"];
  GftExactMatchFlowEntryStatus    status = 2;
}

// GftExactMatchFlowEntryResponseMsg is batched response to GftExactMatchFlowEntryRequestMsg
message GftExactMatchFlowEntryResponseMsg {
  repeated GftExactMatchFlowEntryResponse    response = 1;    // batched response
}
