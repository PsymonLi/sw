//------------------------------------------------------------------------------
// protobuf specification for rawrcb (App Raw Redir control block)
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";

package rawrcb;

// The tcp  cb service definition
service RawrCb {
  rpc RawrCbCreate (RawrCbRequestMsg) returns (RawrCbResponseMsg) {}
  rpc RawrCbUpdate (RawrCbRequestMsg) returns (RawrCbResponseMsg) {}
  rpc RawrCbDelete (RawrCbDeleteRequestMsg) returns (RawrCbDeleteResponseMsg) {}
  rpc RawrCbGet (RawrCbGetRequestMsg) returns (RawrCbGetResponseMsg) {}
}

// RawrCbKeyHandle is used to operate on a rawrcb either by its key or handle
message RawrCbKeyHandle {
  oneof key_or_handle {
    uint32     rawrcb_id          = 1;    // unique rawrcb id allocated by app
    fixed64    rawrcb_handle      = 2;    // rawrcb handle returned by HAL
  }
}

// RawrCbSpec captures all the rawrcb level configuration
message RawrCbSpec {
  types.ObjectMeta      meta                       = 1;    // common object meta
  RawrCbKeyHandle       key_or_handle              = 2;    // rawrcb being created/updated
  uint32                rawrcb_deactivated         = 3;
  uint32                rawrcb_flags               = 4;
  uint32                chain_rxq_base             = 5;    // next service chain RxQ base
  uint32                chain_rxq_ring_indices_addr= 6;
  uint32                chain_rxq_ring_size_shift  = 7;
  uint32                chain_rxq_entry_size_shift = 8;
  uint32                chain_rxq_ring_index_select= 9;
  uint32                chain_txq_base             = 10;   // next service chain TxQ base
  uint32                chain_txq_ring_indices_addr= 11;
  uint32                chain_txq_ring_size_shift  = 12;
  uint32                chain_txq_entry_size_shift = 13;
  uint32                chain_txq_ring_index_select= 14;
  uint32                chain_txq_lif              = 15;
  uint32                chain_txq_qtype            = 16;
  uint32                chain_txq_qid              = 17;
  uint32                rawrcb_activated           = 18;
}

// RawrCbRequestMsg is batched add or modify rawrcb request
message RawrCbRequestMsg {
  repeated RawrCbSpec    request = 1;    // batched request
}

// RawrCbStatus is the operational status of a given rawrcb
message RawrCbStatus {
  fixed64    rawrcb_handle = 1;    // id of rawrcb returned by HAL
}

// RawrCbResponse is response to RawrCbSpec
message RawrCbResponse {
  types.ApiStatus        api_status      = 1;    // API status code
  RawrCbStatus           rawrcb_status   = 2;    // rawrcb status, if api succeeded
}

// RawrCbResponseMsg is batched response to RawrCbRequestMsg
message RawrCbResponseMsg {
  repeated RawrCbResponse    response = 1;    // batched response
}

// RawrCbDeleteRequest is used to delete a rawrcb
message RawrCbDeleteRequest {
  types.ObjectMeta        meta          = 1;    // object meta
  RawrCbKeyHandle         key_or_handle = 2;    // RawrCb key or handle
}

// RawrCbDeleteRequestMsg is used to delete a batch of rawrcbs
message RawrCbDeleteRequestMsg {
  repeated RawrCbDeleteRequest    request = 1;    // batched delete request
}

// RawrCbDeleteResponseMsg is batched response to RawrCbDeleteRequestMsg
message RawrCbDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// RawrCbGetRequest is used to get information about a rawrcb
message RawrCbGetRequest {
  types.ObjectMeta          meta          = 1;    // object meta
  RawrCbKeyHandle       key_or_handle = 2;    // RawrCb key or handle
}

// RawrCbGetRequestMsg is batched GET requests for rawrcbs
message RawrCbGetRequestMsg {
  repeated RawrCbGetRequest    request = 1;    // batched get request
}

// RawrCbStats is the statistics object for each rawrcb
message RawrCbStats {
}

// RawrCbGetResponse captures all the information about a rawrcb
// only if api_status indicates success, other fields are valid
message RawrCbGetResponse {
  types.ApiStatus    api_status = 1;    // API status code
  RawrCbSpec         spec       = 2;    // rawrcb configuration
  RawrCbStatus       status     = 3;    // operational state of rawrcb
  RawrCbStats        stats      = 4;    // stats of the rawrcb
}

// RawrCbGetResponseMsg is batched response to RawrCbGetRequestMsg
message RawrCbGetResponseMsg {
  repeated RawrCbGetResponse    response = 1;    // batch get response
}
