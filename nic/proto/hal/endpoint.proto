//------------------------------------------------------------------------------
// protobuf specification for endpoints
//
// Endpoint is equivalent to a VM's vnic or container's veth interface. A
// VM/container can hanve multiple endpoints, however that higher level grouping
// is not known to HAL. HAL treats each of them independently. Each endpoint
// has one MAC and optionally one or more IP addresses.
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "kh.proto";
import "eplearn.proto";
import "delphi.proto";

package endpoint;
option go_package="halproto";

// The Endpoint service definition
service Endpoint {
  rpc EndpointCreate (EndpointRequestMsg) returns (EndpointResponseMsg) {}
  rpc EndpointUpdate (EndpointUpdateRequestMsg) returns (EndpointUpdateResponseMsg) {}
  rpc EndpointDelete (EndpointDeleteRequestMsg) returns (EndpointDeleteResponseMsg) {}
  rpc EndpointGet (EndpointGetRequestMsg) returns (EndpointGetResponseMsg) {}
  //rpc EndpointGetAll(EndpointGetAllRequestMsg) returns (EndpointGetResponseMsg) {}
  //rpc EndpointGetByInterface(EndpointGetByInterfaceRequestMsg) returns (EndpointGetResponseMsg) {}

  // Filter
  rpc FilterCreate (FilterRequestMsg) returns (FilterResponseMsg) {}
  // rpc FilterUpdate (FilterRequestMsg) returns (FilterResponseMsg) {}
  rpc FilterDelete (FilterDeleteRequestMsg) returns (FilterDeleteResponseMsg) {}
  rpc FilterGet (FilterGetRequestMsg) returns (FilterGetResponseMsg) {}
}

message EndpointAttributes {
    kh.InterfaceKeyHandle       interface_key_handle             = 1 [(gogoproto.moretags) = "venice:ref"];
    uint32                      useg_vlan                        = 2;    // microseg vlan assigned to this EP
    repeated types.IPAddress    ip_address                       = 3;    // IP address(es) of endpoint
    repeated kh.SecurityGroupKeyHandle sg_key_handle             = 4 [(gogoproto.moretags) = "venice:ref"];
    types.IPAddress             old_homing_host_ip               = 5;    // IP address of host where this endpoint exists
    MigrationState              vmotion_state                    = 6;    // vMotion state
}

enum MigrationState {
    NONE        = 0;  // No Migration in progress
    IN_PROGRESS = 1;  // Migration in progress
    SUCCESS     = 2;  // Migration succeeded
    FAILED      = 3;  // Migration failed in the middle because of internal reasons
    ABORTED     = 4;  // Migration aborted in the middle by vCenter
    COLD        = 5;  // Cold Migration. Scenarios like migration from Non Pensando devices
}

// EndpointSpec is used to add or update an endpoint
message EndpointSpec {
    option (delphi.update_event) = true;
    delphi.ObjectMeta       Meta              = 1;

    kh.EndpointKeyHandle    key_or_handle     = 2 [(gogoproto.moretags) = "venice:key"];
    kh.VrfKeyHandle         vrf_key_handle    = 3 [(gogoproto.moretags) = "venice:ref"];
    EndpointAttributes      endpoint_attrs    = 4;    // endpoint's attributes
}

// EndpointRequestMsg is batched add or modify endpoint request
message EndpointRequestMsg {
  repeated EndpointSpec    request = 1;    // batched request
}

//Endpoint IP address information.
message EndpointIpAddress {
  types.IPAddress        ip_address          = 1;    // IP addresses learnt.
  bool                   learn_source_dhcp   = 2;    // TRUE if learnt via DHCP
  bool                   learn_source_arp    = 3;    // TRUE if learnt via ARP/GARP
  bool                   learn_source_rarp   = 4;    // TRUE if learnt via RARP
  bool                   learn_source_config = 5;    // TRUE if learnt via configuration
  eplearn.EplearnStatus  learn_status        = 6;    // ep learning status
  uint32                 ipsg_tbl_idx        = 7;    // ipsg tbl index
};

message EndpointStatusEpd {
  uint32                 reg_mac_tbl_idx     = 1;
  repeated uint32        rw_tbl_idx          = 2;
}

message EndpointStatusCpd {
}

// EndpointStatus has the current status of an endpoint
// TODO: capturing aging information, if any
message EndpointStatus {
  option (delphi.update_event) = true;
  delphi.ObjectMeta               Meta                             = 1;

  kh.EndpointKeyHandle            key_or_handle                    = 2 [(gogoproto.moretags) = "venice:key"];
  kh.InterfaceKeyHandle           enic_pinned_uplink_if_key_handle = 3 [(gogoproto.moretags) = "venice:ref"]; // uplink this enic is pinned to
  repeated EndpointIpAddress      ip_address                       = 4;    // IP addresses learnt, if any
  bool                            is_endpoint_local                = 5;    // TRUE if endpoint is local
  bool                            learn_source_config              = 6;    // TRUE if ep entry was created by config.
  oneof ep_pd_status {
      EndpointStatusEpd  epd_status                                = 7;    // Endpoint oper state for enterprise pipeline
      EndpointStatusCpd  cpd_status                                = 8;    // Endpoint oper state for cloud pipeline
  }
}

// EndpointResponse is response to EndpointSpec
message EndpointResponse {
  types.ApiStatus       api_status      = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  EndpointStatus        endpoint_status = 2;    // endpoint status, if api succeeded
}

// EndpointResponseMsg is batched response to EndpointRequestMsg
message EndpointResponseMsg {
  repeated EndpointResponse    response = 1;    // batched response
}

// Endpoint Update message
message EndpointUpdateRequest {
  // key_or_handle is used to identify an endpoint uniquely
  kh.EndpointKeyHandle key_or_handle  = 1 [(gogoproto.moretags) = "venice:key"];
  kh.VrfKeyHandle      vrf_key_handle = 2 [(gogoproto.moretags) = "venice:ref"];
  EndpointAttributes   endpoint_attrs = 3;    // endpoint's attributes
}

// EndpointUpdateRequestMsg is batched endpoint update request
message EndpointUpdateRequestMsg {
  repeated EndpointUpdateRequest    request = 1;    // batched request
}

// EndpointUpdateResponseMsg is used to update a batch of Endpoints
message EndpointUpdateResponseMsg {
  repeated EndpointResponse    response = 1;    // batched response
}

// EndpointFilter is attributes by which endpoints can be manipulated
// or queried. As the endpoint database can be huge, this is provided
// so that agent and HAL are less chatty when doing bulk deletes (e.g.
// when a L2 segment is deleted or interfae goes down etc.)
message EndpointFilter {
  kh.VrfKeyHandle       vrf_key_handle       = 1 [(gogoproto.moretags) = "venice:ref"];
  kh.InterfaceKeyHandle interface_key_handle = 2 [(gogoproto.moretags) = "venice:ref"];
  kh.L2SegmentKeyHandle l2Segment_key_handle = 3 [(gogoproto.moretags) = "venice:ref"];
}

// EndpointDeleteRequest is used to delete an endpoint
message EndpointDeleteRequest {
  oneof delete_by {
  // key_or_handle is used to identify the endpoint being deleted
    kh.EndpointKeyHandle key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
    EndpointFilter       filter        = 2;    // delete by interface and/or L2 segment etc.
  }
  kh.VrfKeyHandle vrf_key_handle       = 3 [(gogoproto.moretags) = "venice:ref"];
}

// EndpointDeleteRequestMsg is batched endpoint delete request
message EndpointDeleteRequestMsg {
  repeated EndpointDeleteRequest    request = 1;    // batched request
}

message EndpointDeleteResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

// EndpointDeleteResponseMsg is used to delete a batch of Endpoints
message EndpointDeleteResponseMsg {
  repeated EndpointDeleteResponse  response = 1;
}

// EndpointGetRequest is used to get information about an endpoint
message EndpointGetRequest {
  // key_or_handle is the endpoint's identifier for retrieval
  kh.EndpointKeyHandle key_or_handle  = 1 [(gogoproto.moretags) = "venice:key"];
  kh.VrfKeyHandle      vrf_key_handle = 2 [(gogoproto.moretags) = "venice:ref"];
}

// EndpointGetRequestMsg is batched GET request for endpoints
message EndpointGetRequestMsg {
  repeated EndpointGetRequest    request = 1;    // batched get request
}

message EndpointGetByInterfaceRequest {
  kh.VrfKeyHandle       vrf_key_handle       = 1 [(gogoproto.moretags) = "venice:ref"];
  kh.InterfaceKeyHandle interface_key_handle = 2 [(gogoproto.moretags) = "venice:ref"];
}

// EndpointGetByInterfaceRequestMsg is used to GET endpoints by interface
message EndpointGetByInterfaceRequestMsg {
  repeated EndpointGetByInterfaceRequest    request = 1;
}

// EndpointGetAllRequestMsg is used to GET all the endpoints
message EndpointGetAllRequestMsg {
}

// EndpointStats is the statistics object for each Endpoint
message EndpointStats {
	eplearn.EplearnStats ep_learn_stats = 1; // Eplearning stats.
}

// EndpointGetResponse captures all the information about one Endpoint
message EndpointGetResponse {
  types.ApiStatus   api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  EndpointSpec      spec       = 2;    // Endpoint config
  EndpointStatus    status     = 3;    // Endpoint operational status
  EndpointStats     stats      = 4;    // Endpoint stats, if any
}

// EndpointGetResponseMsg is batched response to EndpointGetRequestMsg
message EndpointGetResponseMsg {
  types.ApiStatus                 api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  repeated EndpointGetResponse    response   = 2;    // batched get response
}

message MigrationResponse {
  EndpointSpec      spec            =  1;  // EP for which migration action happened
  MigrationState    migration_state =  2;  // Current migration state
}

// Filter Spec
message FilterSpec {
    kh.FilterKeyHandle  key_or_handle       = 1 [(gogoproto.moretags) = "venice:key"];
}

// Filter Request Message
message FilterRequestMsg {
    repeated FilterSpec request = 1;
}

// FilterStatus has the current status of an endpoint
message FilterStatus {
  fixed64 filter_handle = 1;    // handle for the filter
}

// FilterResponse is response to FilterSpec
message FilterResponse {
  types.ApiStatus       api_status      = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  FilterStatus          filter_status   = 2;    // filter status, if api succeeded
}

// FilterResponseMsg is batched response to FilterRequestMsg
message FilterResponseMsg {
  repeated FilterResponse    response = 1;    // batched response
}

// FilterDeleteRequest is used to delete an filter
message FilterDeleteRequest {
  kh.FilterKeyHandle    key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
}

// FilterDeleteRequestMsg is batched filter delete request
message FilterDeleteRequestMsg {
  repeated FilterDeleteRequest    request = 1;    // batched request
}

message FilterDeleteResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

// FilterDeleteResponseMsg is used to delete a batch of Filters
message FilterDeleteResponseMsg {
  repeated FilterDeleteResponse  response = 1;
}

// FilterGetRequest is used to get information about an filter
message FilterGetRequest {
  // key_or_handle is the filter's identifier for retrieval
  kh.FilterKeyHandle key_or_handle  = 1 [(gogoproto.moretags) = "venice:key"];
}

// FilterGetRequestMsg is batched GET request for filters
message FilterGetRequestMsg {
  repeated FilterGetRequest    request = 1;    // batched get request
}

// FilterGetResponse captures all the information about one Filter
message FilterGetResponse {
  types.ApiStatus   api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  FilterSpec        spec       = 2;    // Filter config
  FilterStatus      status     = 3;    // Filter operational status
}

// FilterGetResponseMsg is batched response to FilterGetRequestMsg
message FilterGetResponseMsg {
  types.ApiStatus               api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  repeated FilterGetResponse    response   = 2;    // batched get response
}

