//------------------------------------------------------------------------------
// protobuf specification for endpoints
//
// Endpoint is equivalent to a VM's vnic or container's veth interface. A
// VM/container can hanve multiple endpoints, however that higher level grouping
// is not known to HAL. HAL treats each of them independently. Each endpoint
// has one MAC and optionally one or more IP addresses.
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "kh.proto";
import "eplearn.proto";

package endpoint;
option go_package="halproto";

// The Endpoint service definition
service Endpoint {
  rpc EndpointCreate (EndpointRequestMsg) returns (EndpointResponseMsg) {}
  rpc EndpointUpdate (EndpointUpdateRequestMsg) returns (EndpointUpdateResponseMsg) {}
  rpc EndpointDelete (EndpointDeleteRequestMsg) returns (EndpointDeleteResponseMsg) {}
  rpc EndpointGet (EndpointGetRequestMsg) returns (EndpointGetResponseMsg) {}
  rpc EndpointGetAll(EndpointGetAllRequestMsg) returns (EndpointGetResponseMsg) {}
  rpc EndpointGetByInterface(EndpointGetByInterfaceRequestMsg) returns (EndpointGetResponseMsg) {}
}

enum EndpointVMotionState {
    VMOTION_STATE_NONE     = 0; // No VMotion State
    VMOTION_STATE_START    = 1; // VMotion Start
    VMOTION_STATE_SETUP    = 2; // VMotion Setup
    VMOTION_STATE_ACTIVATE = 3; // VMotion Activate
    VMOTION_END            = 4; // VMotion End
}

message EndpointAttributes {
    kh.InterfaceKeyHandle       interface_key_handle = 1 [(gogoproto.moretags) = "venice:ref"];
    uint32                      useg_vlan            = 2;    // microseg vlan assigned to this EP
    repeated types.IPAddress    ip_address           = 3;    // IP address(es) of endpoint
    repeated kh.SecurityGroupKeyHandle sg_key_handle = 4 [(gogoproto.moretags) = "venice:ref"];
    EndpointVMotionState        vmotion_state        = 5;    // Vmotion state
}


// EndpointSpec is used to add or update an endpoint
message EndpointSpec {
    types.ObjectMeta        meta              = 1;    // common object meta
    kh.EndpointKeyHandle    key_or_handle     = 2 [(gogoproto.moretags) = "venice:\"key\""];
    kh.VrfKeyHandle         vrf_key_handle    = 3 [(gogoproto.moretags) = "venice:ref"];
    EndpointAttributes      endpoint_attrs    = 4;    // endpoint's attributes
}

// EndpointRequestMsg is batched add or modify endpoint request
message EndpointRequestMsg {
  repeated EndpointSpec    request = 1;    // batched request
}

// EndpointStatus has the current status of an endpoint
// TODO: capturing aging information, if any
message EndpointStatus {
  fixed64                     endpoint_handle     = 1;    // id of endpoint returned by HAL
  repeated types.IPAddress    ip_address          = 2;    // IP addresses learnt, if any
  bool                        learn_source_dhcp   = 3;    // TRUE if learnt via DHCP
  bool                        learn_source_arp    = 4;    // TRUE if learnt via ARP/GARP
  bool                        learn_source_rarp   = 5;    // TRUE if learnt via RARP
  bool                        learn_source_config = 6;    // TRUE if learnt via configuration
  bool                        is_endpoint_local   = 7;    // TRUE if endpoint is local
  eplearn.EplearnStatus       learn_status        = 8;    // ep learning status
}

// EndpointResponse is response to EndpointSpec
message EndpointResponse {
  types.ApiStatus       api_status      = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  EndpointStatus        endpoint_status = 2;    // endpoint status, if api succeeded
}

// EndpointResponseMsg is batched response to EndpointRequestMsg
message EndpointResponseMsg {
  repeated EndpointResponse    response = 1;    // batched response
}

// Endpoint Update message
message EndpointUpdateRequest {
  types.ObjectMeta     meta           = 1;    // object meta
  // key_or_handle is used to identify an endpoint uniquely
  kh.EndpointKeyHandle key_or_handle  = 2 [(gogoproto.moretags) = "venice:\"key\""];
  kh.VrfKeyHandle      vrf_key_handle = 3 [(gogoproto.moretags) = "venice:ref"];
  EndpointAttributes   endpoint_attrs = 4;    // endpoint's attributes
}

// EndpointUpdateRequestMsg is batched endpoint update request
message EndpointUpdateRequestMsg {
  repeated EndpointUpdateRequest    request = 1;    // batched request
}

// EndpointUpdateResponseMsg is used to update a batch of Endpoints
message EndpointUpdateResponseMsg {
  repeated EndpointResponse    response = 1;    // batched response
}

// EndpointFilter is attributes by which endpoints can be manipulated
// or queried. As the endpoint database can be huge, this is provided
// so that agent and HAL are less chatty when doing bulk deletes (e.g.
// when a L2 segment is deleted or interfae goes down etc.)
message EndpointFilter {
  kh.VrfKeyHandle       vrf_key_handle       = 1 [(gogoproto.moretags) = "venice:ref"];
  kh.InterfaceKeyHandle interface_key_handle = 2 [(gogoproto.moretags) = "venice:ref"];
  kh.L2SegmentKeyHandle l2Segment_key_handle = 3 [(gogoproto.moretags) = "venice:ref"];
}

// EndpointDeleteRequest is used to delete an endpoint
message EndpointDeleteRequest {
  types.ObjectMeta       meta          = 1;    // object meta
  oneof delete_by {
  // key_or_handle is used to identify the endpoint being deleted
    kh.EndpointKeyHandle key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
    EndpointFilter       filter        = 3;    // delete by interface and/or L2 segment etc.
  }
  kh.VrfKeyHandle vrf_key_handle       = 4 [(gogoproto.moretags) = "venice:ref"];
}

// EndpointDeleteRequestMsg is batched endpoint delete request
message EndpointDeleteRequestMsg {
  repeated EndpointDeleteRequest    request = 1;    // batched request
}

message EndpointDeleteResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

// EndpointDeleteResponseMsg is used to delete a batch of Endpoints
message EndpointDeleteResponseMsg {
  repeated EndpointDeleteResponse  response = 1;  
}

// EndpointGetRequest is used to get information about an endpoint
message EndpointGetRequest {
  types.ObjectMeta     meta           = 1;    // object meta
  // key_or_handle is the endpoint's identifier for retrieval
  kh.EndpointKeyHandle key_or_handle  = 2 [(gogoproto.moretags) = "venice:\"key\""];
  kh.VrfKeyHandle      vrf_key_handle = 3 [(gogoproto.moretags) = "venice:ref"];
}

// EndpointGetRequestMsg is batched GET request for endpoints
message EndpointGetRequestMsg {
  repeated EndpointGetRequest    request = 1;    // batched get request
}

// EndpointGetByInterfaceRequestMsg is used to GET endpoints by interface
message EndpointGetByInterfaceRequestMsg {
  types.ObjectMeta      meta                 = 1;    // object meta
  kh.VrfKeyHandle       vrf_key_handle       = 2 [(gogoproto.moretags) = "venice:ref"];
  kh.InterfaceKeyHandle interface_key_handle = 3 [(gogoproto.moretags) = "venice:ref"];
}

// EndpointGetAllRequestMsg is used to GET all the endpoints
message EndpointGetAllRequestMsg {
}

// EndpointStats is the statistics object for each Endpoint
message EndpointStats {
	eplearn.EplearnStats ep_learn_stats = 1; // Eplearning stats.
}

// EndpointGetResponse captures all the information about one Endpoint
message EndpointGetResponse {
  types.ApiStatus   api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  EndpointSpec      spec       = 2;    // Endpoint config
  EndpointStatus    status     = 3;    // Endpoint operational status
  EndpointStats     stats      = 4;    // Endpoint stats, if any
}

// EndpointGetResponseMsg is batched response to EndpointGetRequestMsg
message EndpointGetResponseMsg {
  types.ApiStatus                 api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  repeated EndpointGetResponse    response   = 2;    // batched get response
}
