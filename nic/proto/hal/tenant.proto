//------------------------------------------------------------------------------
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved
//
// protobuf specification for tenant
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";

package tenant;
option go_package="halproto";

// The tenant service definition
service Tenant {
  rpc TenantCreate (TenantRequestMsg) returns (TenantResponseMsg) {}
  rpc TenantUpdate (TenantRequestMsg) returns (TenantResponseMsg) {}
  rpc TenantDelete (TenantDeleteRequestMsg) returns (TenantDeleteResponseMsg) {}
  rpc TenantGet (TenantGetRequestMsg) returns (TenantGetResponseMsg) {}
}

// TenantKeyHandle is used to operate on a tenant either by its key or handle
message TenantKeyHandle {
  oneof key_or_handle {
    uint32     tenant_id = 1;        // unique tenant id allocated by app
    fixed64    tenant_handle = 2;    // tenant handle returned by HAL
  }
}

// TenantSpec captures all the tenant level configuration
message TenantSpec {
  types.ObjectMeta    meta                       = 1;    // common object meta
  // key_or_handle is tenant's unique identifier
  TenantKeyHandle     key_or_handle              = 2 [(gogoproto.moretags) = "venice:\"key\""];
  fixed64             security_profile_handle    = 3;    // security profile, if any
  types.TenantType    tenant_type                = 4;
  types.IPAddress     mytep_ip                   = 5;    // Local VTEP IP address for vxlan tunnels
  types.IPPrefix      gipo_prefix                = 6;    // GIPo prefix
}

// TenantRequestMsg is batched add or modify tenant request
message TenantRequestMsg {
  repeated TenantSpec    request = 1;    // batched request
}

// TenantStatus is the operational status of a given tenant
message TenantStatus {
  fixed64    tenant_handle     = 1;    // id of tenant returned by HAL
}

// TenantResponse is response to TenantSpec
message TenantResponse {
  types.ApiStatus    api_status      = 1;    // API status code
  TenantStatus       tenant_status   = 2;    // tenant status, if api succeeded
}

// TenantResponseMsg is batched response to TenantRequestMsg
message TenantResponseMsg {
  repeated TenantResponse    response = 1;    // batched response
}

// TenantDeleteRequest is used to delete a tenant
message TenantDeleteRequest {
  types.ObjectMeta    meta          = 1;    // object meta
  // key_or_handle is tenant's unique identifier
  TenantKeyHandle     key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// TenantDeleteRequestMsg is used to delete a batch of tenants
message TenantDeleteRequestMsg {
  repeated TenantDeleteRequest    request = 1;    // batched delete request
}

// TenantDeleteResponseMsg is batched response to TenantDeleteRequestMsg
message TenantDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// TenantGetRequest is used to get information about a tenant
message TenantGetRequest {
  types.ObjectMeta      meta          = 1;    // object meta
  // key_or_handle is tenant's unique identifier
  TenantKeyHandle       key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// TenantGetRequestMsg is batched GET requests for tenants
message TenantGetRequestMsg {
  repeated TenantGetRequest    request = 1;    // batched get request
}

// TenantStats is the statistics object for each tenant
message TenantStats {
  uint32    num_l2_segments     = 1;
  uint32    num_security_groups = 2;
  uint32    num_l4lb_services   = 3;
  uint32    num_endpoints       = 4;
}

// TenantGetResponse captures all the information about a tenant
// only if api_status indicates success, other fields are valid
message TenantGetResponse {
  types.ApiStatus    api_status = 1;    // API status code
  TenantSpec         spec       = 2;    // tenant configuration
  TenantStatus       status     = 3;    // operational state of tenant
  TenantStats        stats      = 4;    // stats of the tenant
}

// TenantGetResponseMsg is batched response to TenantGetRequestMsg
message TenantGetResponseMsg {
  types.ApiStatus               api_status = 1;    // API status code
  repeated TenantGetResponse    response   = 2;    // batch get response
}
