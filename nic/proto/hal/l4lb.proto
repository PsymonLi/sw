//------------------------------------------------------------------------------
// protobuf specification for L4 LB HAL APIs
//------------------------------------------------------------------------------

syntax = "proto3";

import "nic/proto/types.proto";
import "nic/proto/hal/qos.proto";

package l4lb;

// The L4 LB service definition
service L4Lb {
  rpc L4LbServiceCreate (L4LbServiceRequestMsg) returns (L4LbServiceResponseMsg) {}
  rpc L4LbServiceUpdate (L4LbServiceRequestMsg) returns (L4LbServiceResponseMsg) {}
  rpc L4LbServiceDelete (L4LbServiceDeleteRequestMsg) returns (L4LbServiceDeleteResponseMsg) {}
  // L4LbServiceGet API will also cover "get all"
  rpc L4LbServiceGet (L4LbServiceGetRequestMsg) returns (L4LbServiceGetResponseMsg) {}
  rpc L4LbBackendCreate (L4LbBackendRequestMsg) returns (L4LbBackendResponseMsg) {}
  rpc L4LbBackendUpdate (L4LbBackendRequestMsg) returns (L4LbBackendResponseMsg) {}
  rpc L4LbBackendDelete (L4LbBackendDeleteRequestMsg) returns (L4LbBackendDeleteResponseMsg) {}
  // L4LbBackendGet API will also cover "get all"
  rpc L4LbBackendGet (L4LbBackendGetRequestMsg) returns (L4LbBackendGetResponseMsg) {}
}

// session stickiness selectors - once a session is load balanced to a backend
// server, new sessions from same client from that point on will be pinned to
// the same backend as long as there is atleast one session active towards that
// backend. once all sessions from that client age out, if a new session comes
// from same client, LB algorithm can pick a new backend again
enum SessionAffinity {
  L4LB_SESSION_AFFINITY_NONE      = 0;
  L4LB_SESSION_AFFINITY_SIP       = 1;
  L4LB_SESSION_AFFINITY_SIP_SPORT = 2;
}

// supported LB algorithms
enum LBAlgorithm {
  L4LB_ALGORITHM_NONE                    = 0;
  L4LB_ALGORITHM_ROUND_ROBIN             = 1;
  L4LB_ALGORITHM_WEIGHTED_ROUND_ROBIN    = 2;
  L4LB_ALGORITHM_RANDOM                  = 3;
  L4LB_ALGORITHM_LEAST_CONNECTIONS       = 4;
  L4LB_ALGORITHM_PICK2_RANDOM            = 5;
  L4LB_ALGORITHM_MIN_CONNECTIONS         = 6;
  L4LB_ALGORITHM_HASH_ON_SOURCE_IP       = 7;
}

// protocol types (i.e., traffic types) that can be load balanced based
enum L4LBProtocol {
  L4LB_PROTO_NONE    = 0;
  L4LB_PROTO_TCP     = 6;
  L4LB_PROTO_UDP     = 17;
}

// IP protocol type supported for LB probes
enum L4LBProbeProtocol {
  L4LB_PROBE_PROTO_NONE    = 0;
  L4LB_PROBE_PROTO_ICMP    = 1;
  L4LB_PROBE_PROTO_TCP     = 6;
  L4LB_PROBE_PROTO_UDP     = 17;
}

// L4LbStatus status reflects the current status of either whole service
// or each backend service instance at any given time
enum L4LbStatus {
  L4LB_STATUS_NONE    = 0;
  L4LB_STATUS_UP      = 1;
  L4LB_STATUS_DOWN    = 2;
}

// LB algorithm and any parameters needed by these algorithms
message LBMethod {
  LBAlgorithm        algorithm = 1;        // LB algorithm
}

// HealthCheck captures the L4 LB health check configuration
message HealthCheck {
    fixed32             probe_port          = 1;    // L4 port number to send probes to
    L4LBProbeProtocol   probe_protocol      = 2;    // protocol = TCP|UDP|ICMP
    fixed32             probe_interval      = 3;    // inter probe gap in seconds
    fixed32             probes_per_interval = 4;    // no. of probes per interval
}

// L4LbServiceKey uniquely identifies a service
message L4LbServiceKey {
  types.IPAddress       service_ip_address = 1;    // service VIP
  L4LBProtocol          ip_protocol        = 2;    // IP protocol
  uint32                service_port       = 3;    // service VIP port
}

// L4 LB service key or handle object
message L4LbServiceKeyHandle {
  oneof key_or_handle {
    L4LbServiceKey    service_key    = 1;             // key identifying the service
    fixed64           service_handle = 2;             // (HAL) id of the service
  }
}

// L4LbServiceSpec message represents one service request
message L4LbServiceSpec {
  types.ObjectMeta     meta               = 1;    // object meta
  L4LbServiceKeyHandle key_or_handle      = 2;    // service being created/updated
  bool                 proxy_arp_enable   = 3;    // proxy ARP for VIP or not
  fixed64              service_mac        = 4;    // service MAC to use in case proxy ARP is enabled
  SessionAffinity      session_affinity   = 5;    // session affinity, if any
  LBMethod             load_balancer_type = 6;    // load balancing method
  HealthCheck          health_check       = 7;    // health check configuration
  qos.QOSActions       qos_actions        = 8;    // QOS actions
}

// L4LbServiceRequestMsg is batched request message that is used to do
// add/mod of L4 LB service(s)
message L4LbServiceRequestMsg {
  repeated L4LbServiceSpec    request = 1;      // batch of requests
}

// L4LbServiceStatus represents the current status of the service
message L4LbServiceStatus {
  L4LbStatus    service_status      = 1;    // currrent status of the service
  fixed64       service_handle      = 2;    // id of the service returned by HAL
}

// L4LbServiceResponse is response to one L4LbServiceSpec
message L4LbServiceResponse {
  types.ApiStatus       api_status  = 1;    // API status code
  L4LbServiceStatus     status      = 2;    // operational status
}

// L4LbServiceResponseMsg is response to L4LbServiceRequestMsg
message L4LbServiceResponseMsg {
  repeated L4LbServiceResponse    response = 1;    // batch of responses
}

// L4LbServiceDeleteRequest is used to delete a service object, all backend
// servers should be delete before deleting the service itself or else delete
// operation will fail
message L4LbServiceDeleteRequest {
  types.ObjectMeta        meta             = 1;    // object meta
  L4LbServiceKeyHandle    key_or_handle    = 2;    // service being deleted
}

// L4LbServiceDeleteRequestMsg is used to delete a batch of services
message L4LbServiceDeleteRequestMsg {
  repeated L4LbServiceDeleteRequest request = 1;   // batched delete request
}

// L4LbServiceDeleteResponseMsg is batched response to L4LbServiceDeleteRequestMsg
message L4LbServiceDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;      // API status code
}

// L4LbServiceStats captures all the statistics of given L4LB service
message L4LbServiceStats {
  fixed32        num_active_backends             = 1;    // no. of backends currently up
  fixed32        num_active_sessions             = 2;    // no. of sessions currently active
  fixed32        num_sessions_load_balanced      = 3;    // total no. of sessions load balanced so far
  fixed32        num_sessions_failed             = 4;    // no. of sessions failed to load balance
  fixed32        num_health_change_events        = 5;    // no. of times health status flipped
}

// L4LbBackendKey uniquely identifies a backend server
message L4LbBackendKey {
  types.IPAddress         backend_ip_address     = 1;    // backend server's IP address
  uint32                  backend_port           = 2;    // server PIP port
}

// L4 LB backend key or handle object
message L4LbBackendKeyHandle {
  oneof key_or_handle {
    L4LbBackendKey    backend_key    = 1;    // key to identify a backend
    fixed64           service_handle = 2;   // (HAL) id of the backend
  }
}

// Backend server representation
message L4LbBackendSpec {
  types.ObjectMeta        meta                   = 1;    // object meta
  L4LbBackendKeyHandle    backend_key_or_handle  = 2;    // backend being created/updated
  L4LbServiceKeyHandle    service_key_or_handle  = 3;    // service this backend is part of
}

// L4LbBackendRequestMsg is batched request message for add/mod of backends
message L4LbBackendRequestMsg {
  repeated L4LbBackendSpec    request = 1;
}

// L4LbBackendStatus represents the current status of the backend server
message L4LbBackendStatus {
  L4LbStatus    status             = 1;        // current status of the backend
  fixed64       service_handle     = 2;        // id of the backend returned by HAL
}

// L4LbBackendResponse is response to L4LbBackendSpec
message L4LbBackendResponse {
  types.ApiStatus      api_status  = 1;    // API status code
  L4LbBackendStatus    status      = 2;    // operational status
}

// L4LbBackendResponseMsg is response to L4LbBackendRequestMsg
message L4LbBackendResponseMsg {
  repeated L4LbBackendResponse    response = 1;  // batch of responses
}

// L4LbBackendDeleteRequest is used to delete a backend service instance
message L4LbBackendDeleteRequest {
  types.ObjectMeta        meta             = 1;    // object meta
  L4LbBackendKeyHandle    key_or_handle    = 2;    // backend key or handle
}

// L4LbBackendDeleteRequestMsg is used to delete a batch of backends
message L4LbBackendDeleteRequestMsg {
  repeated L4LbBackendDeleteRequest request = 1;   // batched delete request
}

// L4LbBackendDeleteResponseMsg is batched response to L4LbBackendDeleteRequestMsg
message L4LbBackendDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// L4LbBackendStats captures all statistics for given backend instance
message L4LbBackendStats {
  fixed32              num_active_sessions        = 1;    // no. of currently active session
  fixed32              num_total_sessions         = 2;    // no. of total sessions load balanced so far
  fixed32              num_health_check_failures  = 3;    // no. of times backend failed health checks
  fixed32              num_health_probe_failures  = 4;    // no. of times backend didn't respond to probes on time
}

// L4LbBackendGetRequest is used to get information about a particular backend
message L4LbBackendGetRequest {
  types.ObjectMeta        meta          = 1;    // object meta
  L4LbBackendKeyHandle    key_or_handle = 2;    // backend key or handle
}

// L4LbBackendGetRequestMsg is batched GET request for backends
message L4LbBackendGetRequestMsg {
  repeated L4LbBackendGetRequest    request = 1;  // batched get request
}

// L4LbBackendGetResponse returns all the information about a backend
message L4LbBackendGetResponse {
  L4LbBackendSpec          spec    = 1;     // backend spec
  L4LbBackendStatus        status  = 2;     // backend status
  L4LbBackendStats         stats   = 3;     // backend statistics
}

// L4LbBackendGetResponseMsg is response to L4LbBackendGetRequestMsg
message L4LbBackendGetResponseMsg {
  repeated L4LbBackendGetResponse    response = 1;    // batched GET response
}

// L4LbServiceGetRequest is used to get information about a service
message L4LbServiceGetRequest {
  types.ObjectMeta        meta          = 1;    // object meta
  L4LbServiceKeyHandle    key_or_handle = 2;    // service key or handle
}

// L4LbServiceGetRequestMsg is batched GET request for services
message L4LbServiceGetRequestMsg {
  repeated L4LbServiceGetRequest    request = 1;    // batched get request
}

// L4LbServiceGetResponse captures all the information about a service
message L4LbServiceGetResponse {
  L4LbServiceSpec                    spec     = 1;
  L4LbServiceStatus                  status   = 2;
  L4LbServiceStats                   stats    = 3;
  repeated L4LbBackendGetResponse    backends = 4;
}

// L4LbServiceGetResponseMsg is response to L4LbServiceGetRequestMsg
message L4LbServiceGetResponseMsg {
  repeated L4LbServiceGetResponse    response = 1;
}
