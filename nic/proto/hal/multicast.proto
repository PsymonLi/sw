//------------------------------------------------------------------------------
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved
//
// protobuf specification for Multicast APIs
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "kh.proto";

package multicast;
option go_package="halproto";

service Multicast {
  rpc MulticastEntryCreate (MulticastEntryRequestMsg) returns (MulticastEntryResponseMsg) {}
  rpc MulticastEntryUpdate (MulticastEntryRequestMsg) returns (MulticastEntryResponseMsg) {}
  rpc MulticastEntryDelete (MulticastEntryDeleteRequestMsg) returns (MulticastEntryDeleteResponseMsg) {}
  rpc MulticastEntryGet (MulticastEntryGetRequestMsg) returns (MulticastEntryGetResponseMsg) {}
}

message MulticastEntrySpec {
  types.ObjectMeta               meta            = 1;
  kh.MulticastEntryKeyHandle     key_or_handle   = 2 [(gogoproto.moretags) = "venice:\"key\""];
  repeated kh.InterfaceKeyHandle oif_key_handles = 3 [(gogoproto.moretags) = "venice:ref"]; // output interface handles
}

message MulticastEntryRequestMsg {
  repeated MulticastEntrySpec request = 1;          // batched request
}

message MulticastEntryStatus {
  fixed64 multicast_handle = 1;
}

message MulticastEntryResponse {
  types.ApiStatus      api_status   = 1 [(gogoproto.moretags) = "venice:api_status"];    // status
  MulticastEntryStatus entry_status = 2;
}

message MulticastEntryResponseMsg {
  repeated MulticastEntryResponse response = 1;         // batched reponse
}

message MulticastEntryDeleteRequest {
  types.ObjectMeta           meta          = 1;
  kh.MulticastEntryKeyHandle key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

message MulticastEntryDeleteRequestMsg {
  repeated MulticastEntryDeleteRequest request = 1; // batched request
}

message MulticastEntryDeleteResponse {
  types.ApiStatus api_status = 1 [(gogoproto.moretags) = "venice:api_status"];
}

message MulticastEntryDeleteResponseMsg {
  repeated MulticastEntryDeleteResponse response = 1;          // batched response
}

message MulticastEntryGetRequest {
  types.ObjectMeta           meta          = 1;
  kh.MulticastEntryKeyHandle key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

message MulticastEntryGetRequestMsg {
  repeated MulticastEntryGetRequest request = 1;    // batched request
}

message MulticastEntryGetResponse {
  types.ApiStatus  api_status  = 1 [(gogoproto.jsontag) = "venice:api_status"];
  repeated fixed64 oif_handles = 2;    // output interface handles
}

message MulticastEntryGetResponseMsg {
  repeated MulticastEntryGetResponse response = 1;      // batched reponse
}
