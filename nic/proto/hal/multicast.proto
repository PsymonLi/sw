//------------------------------------------------------------------------------
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved
//
// protobuf specification for Multicast APIs
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "kh.proto";

package multicast;
option go_package="halproto";

service Multicast {
  rpc MulticastEntryCreate (MulticastEntryRequestMsg) returns (MulticastEntryResponseMsg) {}
  rpc MulticastEntryUpdate (MulticastEntryRequestMsg) returns (MulticastEntryResponseMsg) {}
  rpc MulticastEntryDelete (MulticastEntryDeleteRequestMsg) returns (MulticastEntryDeleteResponseMsg) {}
  rpc MulticastEntryGet (MulticastEntryGetRequestMsg) returns (MulticastEntryGetResponseMsg) {}
}

message Oif {
  fixed64 if_handle        = 1;
  fixed64 l2seg_handle     = 2;
  fixed32 qid              = 3;
  fixed32 q_purpose        = 4;
}

// OIF List oper state for enterprise pipeline
message OifListEpd {
  fixed32 rep_index = 1;
}

// OIF List oper state for cloud pipeline
message OifListCpd {
}

message OifList {
  fixed32       id                 = 1;
  repeated Oif  oifs               = 2;
  fixed32       attached_list_id   = 3;
  bool          is_honor_ingress   = 4;
  oneof         pd_info {
    OifListEpd epd_info            = 5;  // OIF List oper state for enterprise pipeline
    OifListCpd cpd_info            = 6;  // OIF List oper state for cloud pipeline
  }
}

// Multicast entry oper state for enterprise pipeline
message MulticastEntryStatusEpd {
  fixed32 reg_mac_tbl_idx  = 1;
}

// Multicast entry oper state for cloud pipeline
message MulticastEntryStatusCpd {
}

message MulticastEntryStatus {
  fixed64 handle   = 1;
  OifList oif_list = 2;
  oneof pd_info {
    MulticastEntryStatusEpd epd_info = 3;  // Multicast entry oper state for enterprise pipeline
    MulticastEntryStatusCpd cpd_info = 4;  // Multicast entry oper state for cloud pipeline
  }
}

message MulticastEntrySpec {
  kh.MulticastEntryKeyHandle     key_or_handle   = 1 [(gogoproto.moretags) = "venice:key"];
  repeated kh.InterfaceKeyHandle oif_key_handles = 2 [(gogoproto.moretags) = "venice:ref, venice:constraints={intf.InterfaceSpec.type=interface_pb2.IF_TYPE_ENIC}"]; // output interface handles
}

message MulticastEntryRequestMsg {
  repeated MulticastEntrySpec request = 1;          // batched request
}

message MulticastEntryResponse {
  types.ApiStatus      api_status   = 1 [(gogoproto.moretags) = "venice:api_status"];    // status
  MulticastEntryStatus entry_status = 2;
}

message MulticastEntryResponseMsg {
  repeated MulticastEntryResponse response = 1;         // batched reponse
}

message MulticastEntryDeleteRequest {
  kh.MulticastEntryKeyHandle key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
}

message MulticastEntryDeleteRequestMsg {
  repeated MulticastEntryDeleteRequest request = 1; // batched request
}

message MulticastEntryDeleteResponse {
  types.ApiStatus api_status = 1 [(gogoproto.moretags) = "venice:api_status"];
}

message MulticastEntryDeleteResponseMsg {
  repeated MulticastEntryDeleteResponse response = 1;          // batched response
}

message MulticastEntryGetRequest {
  kh.MulticastEntryKeyHandle key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
}

message MulticastEntryGetRequestMsg {
  repeated MulticastEntryGetRequest request = 1;    // batched request
}

// MulticastEntryStats is the statistics object of multicast entry type
message MulticastEntryStats {
  uint32                num_oifs      = 1;    // number of OIFs in this multicast entry
}

message MulticastEntryGetResponse {
  types.ApiStatus       api_status    = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  MulticastEntrySpec    spec          = 2;    // Multicast Entry Configuration
  MulticastEntryStatus  status        = 3;    // operational state of the multicast entry
  MulticastEntryStats   stats         = 4;    // stats of the multicast entry
}

message MulticastEntryGetResponseMsg {
  repeated MulticastEntryGetResponse response = 1;      // batched reponse
}
