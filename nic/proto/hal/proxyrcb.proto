//------------------------------------------------------------------------------
// protobuf specification for proxyrcb (App Proxy Redir control block)
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";

package proxyrcb;

// The App Proxy Redir cb service definition
service ProxyrCb {
  rpc ProxyrCbCreate (ProxyrCbRequestMsg) returns (ProxyrCbResponseMsg) {}
  rpc ProxyrCbUpdate (ProxyrCbRequestMsg) returns (ProxyrCbResponseMsg) {}
  rpc ProxyrCbDelete (ProxyrCbDeleteRequestMsg) returns (ProxyrCbDeleteResponseMsg) {}
  rpc ProxyrCbGet (ProxyrCbGetRequestMsg) returns (ProxyrCbGetResponseMsg) {}
}

// ProxyrCbKeyHandle is used to operate on a proxyrcb either by its key or handle
message ProxyrCbKeyHandle {
  oneof key_or_handle {
    uint32     proxyrcb_id          = 1;    // unique proxyrcb id allocated by app
    fixed64    proxyrcb_handle      = 2;    // proxyrcb handle returned by HAL
  }
}

// ProxyrCbSpec captures all the proxyrcb level configuration
message ProxyrCbSpec {
  types.ObjectMeta      meta                       = 1;    // common object meta
  ProxyrCbKeyHandle     key_or_handle              = 2;    // proxyrcb being created/updated
  uint32                pi                         = 3;
  uint32                ci                         = 4;
  uint32                proxyrcb_flags             = 5;
  uint64                my_txq_base                = 6;
  uint32                my_txq_ring_size_shift     = 7;
  uint32                my_txq_entry_size_shift    = 8;
  uint64                chain_rxq_base             = 9;    // next service chain RxQ base
  uint64                chain_rxq_ring_indices_addr= 10;
  uint32                chain_rxq_ring_size_shift  = 11;
  uint32                chain_rxq_entry_size_shift = 12;
  uint32                chain_rxq_ring_index_select= 13;
  
  types.IPAddress       ip_sa                      = 14;
  types.IPAddress       ip_da                      = 15;
  uint32                sport                      = 16;
  uint32                dport                      = 17;
  uint32                vrf                        = 18;
  uint32                af                         = 19;
  types.IPProtocol      ip_proto                   = 20;
  uint32                dir                        = 21;
  uint32                role                       = 22;
  uint32                rev_cb_id                  = 23;

  /*
   * 64-bit statistic counters
   */
  uint64                stat_pkts_redir            = 24;
  uint64                stat_pkts_discard          = 25;
  
  /*
   * 32-bit saturating statistic counters
   */
  uint32                stat_cb_not_ready          = 26;
  uint32                stat_null_ring_indices_addr= 27;
  uint32                stat_aol_err               = 28;
  uint32                stat_rxq_full              = 29;
  uint32                stat_txq_empty             = 30;
  uint32                stat_sem_alloc_full        = 31;
  uint32                stat_sem_free_full         = 32;
}

// ProxyrCbRequestMsg is batched add or modify proxyrcb request
message ProxyrCbRequestMsg {
  repeated ProxyrCbSpec  request = 1;    // batched request
}

// ProxyrCbStatus is the operational status of a given proxyrcb
message ProxyrCbStatus {
  fixed64    proxyrcb_handle = 1;    // id of proxyrcb returned by HAL
}

// ProxyrCbResponse is response to ProxyrCbSpec
message ProxyrCbResponse {
  types.ApiStatus        api_status      = 1;    // API status code
  ProxyrCbStatus         proxyrcb_status = 2;    // proxyrcb status, if api succeeded
}

// ProxyrCbResponseMsg is batched response to ProxyrCbRequestMsg
message ProxyrCbResponseMsg {
  repeated ProxyrCbResponse  response = 1;    // batched response
}

// ProxyrCbDeleteRequest is used to delete a proxyrcb
message ProxyrCbDeleteRequest {
  types.ObjectMeta        meta          = 1;    // object meta
  ProxyrCbKeyHandle       key_or_handle = 2;    // ProxyrCb key or handle
}

// ProxyrCbDeleteRequestMsg is used to delete a batch of proxyrcbs
message ProxyrCbDeleteRequestMsg {
  repeated ProxyrCbDeleteRequest  request = 1;    // batched delete request
}

// ProxyrCbDeleteResponseMsg is batched response to ProxyrCbDeleteRequestMsg
message ProxyrCbDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// ProxyrCbGetRequest is used to get information about a proxyrcb
message ProxyrCbGetRequest {
  types.ObjectMeta          meta          = 1;    // object meta
  ProxyrCbKeyHandle         key_or_handle = 2;    // ProxyrCb key or handle
}

// ProxyrCbGetRequestMsg is batched GET requests for proxyrcbs
message ProxyrCbGetRequestMsg {
  repeated ProxyrCbGetRequest  request = 1;    // batched get request
}

// ProxyrCbStats is the statistics object for each proxyrcb
message ProxyrCbStats {
}

// ProxyrCbGetResponse captures all the information about a proxyrcb
// only if api_status indicates success, other fields are valid
message ProxyrCbGetResponse {
  types.ApiStatus    api_status = 1;    // API status code
  ProxyrCbSpec       spec       = 2;    // proxyrcb configuration
  ProxyrCbStatus     status     = 3;    // operational state of proxyrcb
  ProxyrCbStats      stats      = 4;    // stats of the proxyrcb
}

// ProxyrCbGetResponseMsg is batched response to ProxyrCbGetRequestMsg
message ProxyrCbGetResponseMsg {
  repeated ProxyrCbGetResponse  response = 1;    // batch get response
}
