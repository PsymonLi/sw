//------------------------------------------------------------------------------
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved
//
// protobuf specification for vrf
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "kh.proto";

package vrf;
option go_package="halproto";

// The vrf service definition
service Vrf {
  rpc VrfCreate (VrfRequestMsg) returns (VrfResponseMsg) {}
  rpc VrfUpdate (VrfRequestMsg) returns (VrfResponseMsg) {}
  rpc VrfDelete (VrfDeleteRequestMsg) returns (VrfDeleteResponseMsg) {}
  rpc VrfGet (VrfGetRequestMsg) returns (VrfGetResponseMsg) {}
}


// VrfSpec captures all the vrf level configuration
message VrfSpec {
  types.ObjectMeta                      meta                 = 1;    // common object meta
  // key_or_handle is vrf's unique identifier
  kh.VrfKeyHandle                       key_or_handle        = 2 [(gogoproto.moretags) = "venice:\"key\""];
  kh.SecurityProfileKeyHandle           security_key_handle  = 3 [(gogoproto.moretags) = "venice:ref"];    // security profile, if any
  types.VrfType    					    vrf_type             = 4;
  types.IPAddress     					mytep_ip             = 5;    // Local VTEP IP address for vxlan tunnels
  types.IPPrefix      					gipo_prefix          = 6;    // GIPo prefix
}

// VrfRequestMsg is batched add or modify vrf request
message VrfRequestMsg {
  repeated VrfSpec    request = 1;    // batched request
}

// VrfStatus is the operational status of a given vrf
message VrfStatus {
  fixed64    vrf_handle     = 1;    // id of vrf returned by HAL
}

// VrfResponse is response to VrfSpec
message VrfResponse {
  types.ApiStatus    api_status      = 1 [(gogoproto.moretags) = "venice:api_status"];  // API status code
  VrfStatus          vrf_status      = 2;    // vrf status, if api succeeded
}

// VrfResponseMsg is batched response to VrfRequestMsg
message VrfResponseMsg {
  repeated VrfResponse    response = 1;    // batched response
}

// VrfDeleteRequest is used to delete a vrf
message VrfDeleteRequest {
  types.ObjectMeta                  meta          = 1;    // object meta
  // key_or_handle is vrf's unique identifier
  kh.VrfKeyHandle          key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// VrfDeleteResponse is response to VrfDeleteRequest
message VrfDeleteResponse {
  types.ApiStatus    api_status     = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  kh.VrfKeyHandle    key_or_handle  = 2;
}

// VrfDeleteRequestMsg is used to delete a batch of vrfs
message VrfDeleteRequestMsg {
  repeated VrfDeleteRequest    request = 1;    // batched delete request
}

// VrfDeleteResponseMsg is batched response to VrfDeleteRequestMsg
message VrfDeleteResponseMsg {
  repeated VrfDeleteResponse    response = 1;    // batched response
}

// VrfGetRequest is used to get information about a vrf
message VrfGetRequest {
  types.ObjectMeta             meta          = 1;    // object meta
  // key_or_handle is vrf's unique identifier
  kh.VrfKeyHandle     key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// VrfGetRequestMsg is batched GET requests for vrfs
message VrfGetRequestMsg {
  repeated VrfGetRequest    request = 1;    // batched get request
}

// VrfStats is the statistics object for each vrf
message VrfStats {
  uint32    num_l2_segments     = 1;
  uint32    num_security_groups = 2;
  uint32    num_l4lb_services   = 3;
  uint32    num_endpoints       = 4;
}

// VrfGetResponse captures all the information about a vrf
// only if api_status indicates success, other fields are valid
message VrfGetResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];     // API status code
  VrfSpec            spec       = 2;    // vrf configuration
  VrfStatus          status     = 3;    // operational state of vrf
  VrfStats           stats      = 4;    // stats of the vrf
}

// VrfGetResponseMsg is batched response to VrfGetRequestMsg
message VrfGetResponseMsg {
  repeated VrfGetResponse    response   = 1;    // batch get response
}
