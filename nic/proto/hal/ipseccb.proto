//------------------------------------------------------------------------------
// protobuf specification for ipseccb
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";

package ipseccb;
option go_package="halproto";

// The ipsec cb service definition
service IpsecCb {
  rpc IpsecCbCreate (IpsecCbRequestMsg) returns (IpsecCbResponseMsg) {}
  rpc IpsecCbUpdate (IpsecCbRequestMsg) returns (IpsecCbResponseMsg) {}
  rpc IpsecCbDelete (IpsecCbDeleteRequestMsg) returns (IpsecCbDeleteResponseMsg) {}
  rpc IpsecCbGet (IpsecCbGetRequestMsg) returns (IpsecCbGetResponseMsg) {}
}

// IpsecCbKeyHandle is used to operate on a ipsec_cb either by its key or handle
message IpsecCbKeyHandle {
  oneof key_or_handle {
    uint32     ipseccb_id          = 1;    // unique ipsec_cb id allocated by app
    fixed64    ipseccb_handle      = 2;    // ipsec_cb handle returned by HAL
  }
}

// IpsecCbSpec captures all the ipsec_cb level configuration
message IpsecCbSpec {
  IpsecCbKeyHandle      key_or_handle              = 1;    // ipsec_cb being created/updated
  uint32                pi                    = 2;
  uint32                ci                    = 3;
  uint32                tunnel_sip4           = 4;
  uint32                tunnel_dip4           = 5;
  uint32                iv_size               = 6;
  uint32                icv_size              = 7;
  uint32                block_size            = 8;
  uint32                key_index             = 9;
  uint32                barco_enc_cmd         = 10;
  fixed64               iv                    = 11;
  uint32                iv_salt               = 12;
  uint32                esn_hi                = 13;
  uint32                esn_lo                = 14;
  uint32                spi                   = 15;
  uint32                expected_seq_no       = 16;
  fixed64               seq_no_bmp            = 17;
  types.IPAddress       sip6                  = 18;
  types.IPAddress       dip6                  = 19;
  uint32                is_v6                 = 20;
  uint32                vrf_vlan              = 21;
  uint32                last_replay_seq_no    = 22;
  uint32                new_spi               = 23;
  uint32                new_key_index         = 24;
  uint32                is_nat_t              = 25;
  uint32                flags                 = 26;
  uint32                is_random             = 27;
}

// IpsecCbRequestMsg is batched add or modify ipseccb request
message IpsecCbRequestMsg {
  repeated IpsecCbSpec    request = 1;    // batched request
}

// IpsecCbStatus is the operational status of a given ipseccb
message IpsecCbStatus {
  fixed64    ipseccb_handle     = 1;    // id of ipseccb returned by HAL
}

// IpsecCbResponse is response to IpsecCbSpec
message IpsecCbResponse {
  types.ApiStatus        api_status            = 1;    // API status code
  IpsecCbStatus       ipseccb_status   = 2;    // ipseccb status, if api succeeded
}

// IpsecCbResponseMsg is batched response to IpsecCbRequestMsg
message IpsecCbResponseMsg {
  repeated IpsecCbResponse    response = 1;    // batched response
}

// IpsecCbDeleteRequest is used to delete a ipseccb
message IpsecCbDeleteRequest {
  types.ObjectMeta        meta          = 1;    // object meta
  IpsecCbKeyHandle     key_or_handle = 2;    // IpsecCb key or handle
}

// IpsecCbDeleteRequestMsg is used to delete a batch of ipseccbs
message IpsecCbDeleteRequestMsg {
  repeated IpsecCbDeleteRequest    request = 1;    // batched delete request
}

// IpsecCbDeleteResponseMsg is batched response to IpsecCbDeleteRequestMsg
message IpsecCbDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// IpsecCbGetRequest is used to get information about a ipseccb
message IpsecCbGetRequest {
  types.ObjectMeta          meta          = 1;    // object meta
  IpsecCbKeyHandle            key_or_handle = 2;    // IpsecCb key or handle
}

// IpsecCbGetRequestMsg is batched GET requests for ipseccbs
message IpsecCbGetRequestMsg {
  repeated IpsecCbGetRequest    request = 1;    // batched get request
}

// IpsecCbStats is the statistics object for each ipseccb
message IpsecCbStats {
}

// IpsecCbGetResponse captures all the information about a ipseccb
// only if api_status indicates success, other fields are valid
message IpsecCbGetResponse {
  types.ApiStatus        api_status = 1;    // API status code
  IpsecCbSpec         spec       = 2;    // ipseccb configuration
  IpsecCbStatus       status     = 3;    // operational state of ipseccb
  IpsecCbStats        stats      = 4;    // stats of the ipseccb
}

// IpsecCbGetResponseMsg is batched response to IpsecCbGetRequestMsg
message IpsecCbGetResponseMsg {
  repeated IpsecCbGetResponse    response = 1;    // batch get response
}
