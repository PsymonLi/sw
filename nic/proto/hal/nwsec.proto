//------------------------------------------------------------------------------
// protobuf specification for network security objects
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";

package nwsec;
option go_package="halproto";

service NwSecurity {
    rpc SecurityProfileCreate (SecurityProfileRequestMsg) returns (SecurityProfileResponseMsg) {}
    rpc SecurityProfileUpdate (SecurityProfileRequestMsg) returns (SecurityProfileResponseMsg) {}
    rpc SecurityProfileDelete (SecurityProfileDeleteRequestMsg) returns (SecurityProfileDeleteResponseMsg) {}
    rpc SecurityProfileGet (SecurityProfileGetRequestMsg) returns (SecurityProfileGetResponseMsg) {}

    rpc SecurityGroupCreate (SecurityGroupRequestMsg) returns (SecurityGroupResponseMsg) {}
    rpc SecurityGroupUpdate (SecurityGroupRequestMsg) returns (SecurityGroupResponseMsg) {}
    rpc SecurityGroupDelete (SecurityGroupDeleteRequestMsg) returns (SecurityGroupDeleteResponseMsg) {}
    rpc SecurityGroupGet (SecurityGroupGetRequestMsg) returns (SecurityGroupGetResponseMsg) {}
    
    rpc DoSPolicyCreate (DoSPolicyRequestMsg) returns (DoSPolicyResponseMsg) {}
    rpc DoSPolicyUpdate (DoSPolicyRequestMsg) returns (DoSPolicyResponseMsg) {}
    rpc DoSPolicyDelete (DoSPolicyDeleteRequestMsg) returns (DoSPolicyDeleteResponseMsg) {}
    rpc DoSPolicyGet (DoSPolicyGetRequestMsg) returns (DoSPolicyGetResponseMsg) {}
}

// normalization feature actions upon detecting malformed packets
enum NormalizationAction {
  NORM_ACTION_NONE    = 0;
  NORM_ACTION_ALLOW   = 1;    // allow the packet as is
  NORM_ACTION_DROP    = 2;    // drop the packet
  NORM_ACTION_EDIT    = 3;    // reset/trim/fix invalid fields/flags
}

// SecurityProfileKeyHandle is used to operate on a security profile
// either by its id or HAL allocated handle
message SecurityProfileKeyHandle {
  oneof key_or_handle {
    uint32     profile_id     = 1;     // App allocated unique security profile id
    fixed64    profile_handle = 2;     // id of the SecurityProfile returned by HAL
  }
}

// SecurityProfileSpec object captures feature knobs that are most likely
// shareable across L2 segments, tenants, or even interfaces and most of the
// time operates on defaults. It is possible that there is only object of this
// kind in the system.
// NOTE: user is not expected to fill in all the fields explicitly, that job is
//       done by the agent. Agent will be exposing user visible knobs and fill
//       in the defaults when interacting with HAL.
message SecurityProfileSpec {
  types.ObjectMeta             meta                            = 1;    // common object meta
  SecurityProfileKeyHandle     key_or_handle                   = 2 [(gogoproto.moretags) = "venice:\"key\""];
  bool                         cnxn_tracking_en                = 3;
  bool                         ipsg_en                         = 4;
  bool                         tcp_rtt_estimate_en             = 5;
  uint32                       session_idle_timeout            = 6;
  uint32                       tcp_cnxn_setup_timeout          = 7;
  uint32                       tcp_close_timeout               = 8;
  uint32                       tcp_close_wait_timeout          = 9;

  bool                              ip_normalization_en             = 10;
  bool                              tcp_normalization_en            = 11;
  bool                              icmp_normalization_en           = 12;

  // IP normalization knobs
  bool                              ip_ttl_change_detect_en         = 20;
  NormalizationAction          ip_rsvd_flags_action            = 21;
  NormalizationAction          ip_df_action                    = 22;
  NormalizationAction          ip_options_action               = 23;
  NormalizationAction          ip_invalid_len_action           = 24;
  uint32                       ip_normalize_ttl                = 25;

  // ICMP/ICMPv6 normalization knobs
  NormalizationAction          icmp_invalid_code_action        = 30;
  bool                         icmp_deprecated_msgs_drop       = 31;
  bool                         icmp_redirect_msg_drop          = 32;

  // TCP normalization knobs
  bool                              tcp_non_syn_first_pkt_drop      = 40;
  bool                         tcp_syncookie_en                = 41;
  bool                              tcp_split_handshake_detect_en   = 42;
  bool                              tcp_split_handshake_drop        = 43;
  NormalizationAction          tcp_rsvd_flags_action           = 44;
  NormalizationAction          tcp_unexpected_mss_action       = 45;
  NormalizationAction          tcp_unexpected_win_scale_action = 46;
  NormalizationAction          tcp_urg_ptr_not_set_action      = 47;
  NormalizationAction          tcp_urg_flag_not_set_action     = 48;
  NormalizationAction          tcp_urg_payload_missing_action  = 49;
  NormalizationAction          tcp_rst_with_data_action        = 50;
  NormalizationAction          tcp_data_len_gt_mss_action      = 51;
  NormalizationAction          tcp_data_len_gt_win_size_action = 52;
  NormalizationAction          tcp_unexpected_ts_option_action = 53;
  NormalizationAction          tcp_unexpected_echo_ts_action   = 54;
  bool                         tcp_ts_not_present_drop         = 55;
  bool                         tcp_invalid_flags_drop          = 56;
  bool                         tcp_nonsyn_noack_drop           = 57;
}

// SecurityProfileRequestMsg is batched add or modify profile request
message SecurityProfileRequestMsg {
  repeated SecurityProfileSpec    request = 1;    // batched request
}

// SecurityProfile operational status
message SecurityProfileStatus {
  fixed64    profile_handle = 1;    // id of the security profile returned by HAL
}

// SecurityProfileResponse is response to SecurityProfileSpec
message SecurityProfileResponse {
  types.ApiStatus          api_status     = 1;    // API status code
  SecurityProfileStatus    profile_status = 2;    // SecurityProfile profile operational status
}

// SecurityProfileResponseMsg is batched response to SecurityProfileRequestMsg
message SecurityProfileResponseMsg {
  repeated SecurityProfileResponse    response = 1;    // batched response
}

// SecurityProfileDeleteRequest is used to delete a SecurityProfile profile
message SecurityProfileDeleteRequest {
  types.ObjectMeta            meta          = 1;    // object meta
  // key_or_handle is to identify SecurityProfile being deleted
  SecurityProfileKeyHandle    key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// SecurityProfileDeleteRequestMsg is used to delete a batch of SecurityProfile profiles
message SecurityProfileDeleteRequestMsg {
  repeated SecurityProfileDeleteRequest request = 1;    // batched delete request
}

// SecurityProfileDeleteResponseMsg is batched response to SecurityProfileDeleteRequestMsg
message SecurityProfileDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// SecurityProfileGetRequest is used to get information about a L2 Segment
message SecurityProfileGetRequest {
  types.ObjectMeta            meta          = 1;    // object meta
  // key_or_handle is the security profile's identifier for retrieval
  SecurityProfileKeyHandle    key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// SecurityProfileGetRequestMsg is batched GET request for SecurityProfile profiles
message SecurityProfileGetRequestMsg {
  repeated SecurityProfileGetRequest    request = 1;    // batched get request
}

// SecurityProfileStats is the statistics object for each SecurityProfile profile
message SecurityProfileStats {
}

// SecurityProfileGetResponse captures all the information about a SecurityProfile profile
message SecurityProfileGetResponse {
  types.ApiStatus          api_status = 1;    // API status code
  SecurityProfileSpec      spec       = 2;    // config spec
  SecurityProfileStatus    status     = 3;    // operational status
  SecurityProfileStats     stats      = 4;    // stats, if any
}

// SecurityProfileGetResponseMsg is the batched response to SecurityProfileGetRequestMsg
message SecurityProfileGetResponseMsg {
  types.ApiStatus     		          api_status = 1;    // API status code
  repeated SecurityProfileGetResponse     response   = 2;    // batched get response
}

// Firewall policy actions
enum FirewallAction {
  FIREWALL_ACTION_NONE   = 0;
  FIREWALL_ACTION_ALLOW  = 1;
  FIREWALL_ACTION_DENY   = 2;
  FIREWALL_ACTION_REJECT = 3;
}

// Service object identifies an app defined by IP protocol and TCP/UDP port
// in most cases. This object also can specify blanket apps like all TCP or
// UDP traffic, all IP traffic, ICMP type/code combinations etc.
message Service {
    types.IPProtocol           ip_protocol   = 1;    // IP protocol
    oneof l4_info {
        uint32                 dst_port      = 2;    // TCP or UDP port, 
                                                     // 0 for other protocols
        types.ICMPMsgType      icmp_msg_type = 3;
    }
    ALGName                    alg           = 4;                //  Identifies ALG name
}

message DoSService {
    types.IPProtocol           ip_protocol   = 1;    // IP protocol
    oneof l4_info {
        uint32                 dst_port      = 2;    // TCP or UDP port, 
                                                     // 0 for other protocols
        types.ICMPMsgType      icmp_msg_type = 3;
    }
}

// Applicaion Layer Gateway (ALG) names for invoking appropriate ALG
enum ALGName {
   APP_SVC_NONE       = 0;
   APP_SVC_TFTP       = 1;    // Trivial File Transfer Protocol
   APP_SVC_FTP        = 2;    // File Transfer Protocol
   APP_SVC_DNS        = 3;    // Domain Name System
   APP_SVC_SIP        = 4;    // Session Initiation Protocol
   APP_SVC_SUN_RPC    = 5;    // SUN Remote Procedure Call
   APP_SVC_MSFT_RPC   = 6;    // Microsoft Remote Procedure Call
}

// FirewallRuleSpec defines a stateful firewall rule that is part of a
// SecurityGroupSpec
message FirewallRuleSpec {
    uint32              peer_security_group = 1;    // TO security group for
                                                   // egress rules, FROM
                                                   // security group for ingress
                                                   // rules
    repeated  Service   svc                = 2;    // application service
    FirewallAction      action             = 3;    // action to take
    bool                log                = 4;    // log if this rule is hit
}

// ingress policy for the security group
message IngressSGPolicy {
  repeated FirewallRuleSpec    fw_rules       = 1;    // ingress firewall rules
}

// egress policy for the security group
message EgressSGPolicy {
  repeated FirewallRuleSpec    fw_rules       = 1;    // egress firewall rules
}

// SecurityGroupKeyHandle uniquely identifies a security group and is used
// to create/update/delete/get security groups
message SecurityGroupKeyHandle {
  oneof key_or_handle {
    uint32     security_group_id     = 1;    // security group id or label
    fixed64    security_group_handle = 2;    // id of security group returned by HAL
  }
}

// SecurityGroupSpec captures the policy for a security group (aka. group of
// endpoints or enic interfaces) in both directions from workload's perspective.
// This policy will be attached to enic interface or an endpoint so it applies
// to the traffic from/to that workload. If no match is found for the new
// session in the slow path, either a drop flow will be installed or packet will
// be dropped without creating drop flow
message SecurityGroupSpec {
  types.ObjectMeta          meta           = 1;    // object meta
  // key_or_handle is the security group's unique identifier
  SecurityGroupKeyHandle    key_or_handle  = 2 [(gogoproto.jsontag) = "key"];
  IngressSGPolicy           ingress_policy = 3;    // ingress policy
  EgressSGPolicy            egress_policy  = 4;    // egress policy
}

// SecurityGroupRequestMsg is batched add or modify security group policy request
message SecurityGroupRequestMsg {
  repeated SecurityGroupSpec    request = 1;    // batched request
}

// security group operational status
message SecurityGroupStatus {
  fixed64    sg_handle = 1;    // id of the security group returned by HAL
}

// SecurityGroupResponse is the response to SecurityGroupSpec
message SecurityGroupResponse {
  types.ApiStatus        api_status  = 1;    // API status code
  SecurityGroupStatus    status      = 2;    // operational status
}

// SecurityGroupResponseMsg is batched response to SecurityGroupRequestMsg
message SecurityGroupResponseMsg {
  repeated SecurityGroupResponse    response = 1;    // batched response
}

// SecurityGroupDeleteRequest is used to delete a security group
message SecurityGroupDeleteRequest {
  types.ObjectMeta          meta           = 1;    // object meta
  // key_or_handle is the security group's unique identifier
  SecurityGroupKeyHandle    key_or_handle  = 2 [(gogoproto.jsontag) = "key"];
}

// SecurityGroupDeleteRequestMsg is used to delete a batch of security groups
message SecurityGroupDeleteRequestMsg {
  repeated SecurityGroupDeleteRequest    request = 1;
}

// SecurityGroupDeleteResponseMsg is batched response to
// SecurityGroupDeleteRequestMsg
message SecurityGroupDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// SecurityGroupGetRequest is used to get information about a security group
message SecurityGroupGetRequest {
  types.ObjectMeta          meta           = 1;    // object meta
  // key_or_handle is the security group's unique identifier
  SecurityGroupKeyHandle    key_or_handle  = 2 [(gogoproto.jsontag) = "key"];
}

// SecurityGroupGetRequestMsg is batched GET request for security groups
message SecurityGroupGetRequestMsg {
  repeated SecurityGroupGetRequest    request = 1;    // batched get request
}

// SecurityGroupStats is the statistics object for a security group
message SecurityGroupStats {
}

// SecurityGroupGetResponse captures all the information about a security group
message SecurityGroupGetResponse {
  types.ApiStatus        api_status = 1;    // API status code
  SecurityGroupSpec      spec       = 2;    // configuration of security group
  SecurityGroupStatus    status     = 3;    // operational state of security group
  SecurityGroupStats     stats      = 4;    // debug status of security group
}

// SecurityGroupGetResponseMsg is batched response to SecurityGroupGetRequestMsg
message SecurityGroupGetResponseMsg {
  repeated SecurityGroupGetResponse    response = 1;    // batched get response
}

// DoSSessionLimits captures the session limits to be enforced on a security
// group
message DoSSessionLimits {
  uint32    max_sessions       = 1;    // max. no of sessions
  uint32    blocking_timeout   = 2;    // cool off period once session count
                                       // comes below the above limit
}

// DoSPolicer is aggregate DoS policer object
message DoSPolicer {
  uint32    bytes_per_second = 1;    // max. bytes per second
  uint32    peak_rate        = 2;    // in bytes-per-second
  uint32    burst_size       = 3;    // in bytes
}

// DoSFloodLimits object captures the flood limits configuration
message DoSFloodLimits {
  // default and only action in restrict phase is Random Early Drop (RED)
  message RestrictLimits {
    uint32    pps               = 1;    // packet-per-second limit
    uint32    burst_pps         = 2;    // packets-per-second burst
    uint32    duration          = 3;    // restrict action duration in seconds
  }
  // default and only action in protection phase is drop
  message ProtectLimits {
    uint32    pps               = 1;    // packet-per-second limit
    uint32    burst_pps         = 2;    // packets-per-second burst
    uint32    duration          = 3;    // protect action duration in seconds
  }
  RestrictLimits    restrict_limits = 1;
  ProtectLimits     protect_limits  = 2;
}

// DoSProtectionSpec defines DoS protection policy for a security group
message DoSProtectionSpec {
  DoSService          svc                  = 1;    // (optional) application
                                                   // service for which rest of
                                                   // the DoS config to be
                                                   // applied on
  uint32              session_setup_rate   = 2;    // 0 inidicates no limits
  DoSSessionLimits    session_limits       = 3;    // session limits config
  DoSPolicer          policer              = 4;    // DoS policer configuration
  DoSFloodLimits      tcp_syn_flood_limits = 5;    // TCP SYN flood limits
  DoSFloodLimits      udp_flood_limits     = 6;    // UDP flood limits
  DoSFloodLimits      icmp_flood_limits    = 7;    // ICMP flood limits
  DoSFloodLimits      other_flood_limits   = 8;    // flood limits for all other
                                                   // traffic (IP and non-IP)
  uint32              peer_security_group  = 9;    // TO security group
}


// ingress policy for DoS
message IngressDoSPolicy {
    DoSProtectionSpec dos_protection = 1;   //ingress (D)DoS protection policy
}

// egress policy for DoS
message EgressDoSPolicy {
    DoSProtectionSpec dos_protection = 1;  //egress (D)DoS Protection policy
}

// DoSPolicySpec that has the ingressDosPolicy and EgressDoSPolicy,
// Spec is identified by the handle. HAL will assign a unique handle for each
// DoSPolicy object and the clients are expected to pass the handle for
// Get/Modify/Delete calls. Note that there is no identifier for this object
message DoSPolicySpec {
   types.ObjectMeta           meta              = 1;    // object meta
   IngressDoSPolicy           ingress_policy    = 2;    // ingress policy
   EgressDoSPolicy            egress_policy     = 3;    // egress policy
   fixed64                    dos_handle        = 4;    // dos policy handle
   repeated uint32            security_group_id = 5;    // List of security groups
}

// DoSPolicyRequestMsg is batched add or modify DoS request
message DoSPolicyRequestMsg {
  repeated DoSPolicySpec    request = 1;    // batched request
}

// DoS operational status
message DoSPolicyStatus {
  fixed64    dos_handle = 1;    // id of the dos returned by HAL
}

// DoSResponse is the response to DoSPolicySpec
message DoSPolicyResponse {
  types.ApiStatus       api_status  = 1;    // API status code
  DoSPolicyStatus       status      = 2;    // operational status
}

// DoSPolicyResponseMsg is batched response to DoSPolicyRequestMsg
message DoSPolicyResponseMsg {
  repeated DoSPolicyResponse    response = 1;    // batched response
}

// DoSRequest is used to delete a DoS
message DoSPolicyDeleteRequest {
  types.ObjectMeta  meta           = 1;    // object meta
  fixed64           dos_handle     = 2;    // object handle
}

// DoSPolicyDeleteRequestMsg is used to delete a batch of security groups
message DoSPolicyDeleteRequestMsg {
  repeated DoSPolicyDeleteRequest    request = 1;
}

// DoSPolicyDeleteResponseMsg is batched response to
// DoSPolicyDeleteRequestMsg
message DoSPolicyDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// DoSGetRequest is used to get information about a DoS
message DoSPolicyGetRequest {
  types.ObjectMeta  meta           = 1;    // object meta
  fixed64           dos_handle     = 2;    // object handle
}

// DoSPolicyGetRequestMsg is batched GET request for DoS
message DoSPolicyGetRequestMsg {
  repeated DoSPolicyGetRequest    request = 1;    // batched get request
}

// DoSPolicyStats is the statistics object for a security group
message DoSPolicyStats {
}

// DoSGetResponse captures all the information about a security group
message DoSPolicyGetResponse {
  types.ApiStatus         api_status = 1;    // API status code
  DoSPolicySpec           spec       = 2;    // configuration of DoS
  DoSPolicyStatus         status     = 3;    // operational state of DoS
  DoSPolicyStats          stats      = 4;    // debug status of DoS
}

// DoSPolicyGetResponseMsg is batched response to DoSPolicyGetRequestMsg
message DoSPolicyGetResponseMsg {
  repeated DoSPolicyGetResponse    response = 1;    // batched get response
}
