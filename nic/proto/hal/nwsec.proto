//------------------------------------------------------------------------------
// protobuf specification for network security objects
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "kh.proto";

package nwsec;
option go_package="halproto";

service NwSecurity {
    rpc SecurityProfileCreate (SecurityProfileRequestMsg) returns (SecurityProfileResponseMsg) {}
    rpc SecurityProfileUpdate (SecurityProfileRequestMsg) returns (SecurityProfileResponseMsg) {}
    rpc SecurityProfileDelete (SecurityProfileDeleteRequestMsg) returns (SecurityProfileDeleteResponseMsg) {}
    rpc SecurityProfileGet (SecurityProfileGetRequestMsg) returns (SecurityProfileGetResponseMsg) {}

    rpc SecurityGroupPolicyCreate (SecurityGroupPolicyRequestMsg) returns (SecurityGroupPolicyResponseMsg) {}
    rpc SecurityGroupPolicyUpdate (SecurityGroupPolicyRequestMsg) returns (SecurityGroupPolicyResponseMsg) {}
    rpc SecurityGroupPolicyDelete (SecurityGroupPolicyDeleteRequestMsg) returns (SecurityGroupPolicyDeleteResponseMsg) {}
    rpc SecurityGroupPolicyGet (SecurityGroupPolicyGetRequestMsg) returns (SecurityGroupPolicyGetResponseMsg) {}

    rpc SecurityGroupCreate (SecurityGroupRequestMsg) returns (SecurityGroupResponseMsg) {}
    rpc SecurityGroupUpdate (SecurityGroupRequestMsg) returns (SecurityGroupResponseMsg) {}
    rpc SecurityGroupDelete (SecurityGroupDeleteRequestMsg) returns (SecurityGroupDeleteResponseMsg) {}
    rpc SecurityGroupGet (SecurityGroupGetRequestMsg) returns (SecurityGroupGetResponseMsg) {}

    rpc DoSPolicyCreate (DoSPolicyRequestMsg) returns (DoSPolicyResponseMsg) {}
    rpc DoSPolicyUpdate (DoSPolicyRequestMsg) returns (DoSPolicyResponseMsg) {}
    rpc DoSPolicyDelete (DoSPolicyDeleteRequestMsg) returns (DoSPolicyDeleteResponseMsg) {}
    rpc DoSPolicyGet (DoSPolicyGetRequestMsg) returns (DoSPolicyGetResponseMsg) {}

    rpc SecurityPolicyCreate (SecurityPolicyRequestMsg) returns (SecurityPolicyResponseMsg) {}
    rpc SecurityPolicyUpdate (SecurityPolicyRequestMsg) returns (SecurityPolicyResponseMsg) {}
    rpc SecurityPolicyDelete (SecurityPolicyDeleteRequestMsg) returns (SecurityPolicyDeleteResponseMsg) {}
    rpc SecurityPolicyGet (SecurityPolicyGetRequestMsg) returns (SecurityPolicyGetResponseMsg) {}
}

// normalization feature actions upon detecting malformed packets
enum NormalizationAction {
  NORM_ACTION_NONE    = 0;
  NORM_ACTION_ALLOW   = 1;    // allow the packet as is
  NORM_ACTION_DROP    = 2;    // drop the packet
  NORM_ACTION_EDIT    = 3;    // reset/trim/fix invalid fields/flags
}


//------------------------------------------------------------------------------
// SecurityProfileSpec object captures feature knobs that are most likely
// shareable across L2 segments, vrfs, or even interfaces and most of the
// time operates on defaults. It is possible that there is only object of this
// kind in the system.
// NOTE: user is not expected to fill in all the fields explicitly, that job is
//       done by the agent. Agent will be exposing user visible knobs and fill
//       in the defaults when interacting with HAL.
//
// Expected defaults:
//
// 1. Any abnormal behavior w.r.t flags (IP or TCP), default action is drop
// 2. Anything to do with options, default behavior is to reset/trim
// 3. Any length related errors, default is truncate the pkt
//
// {
//     cnxn_tracking_en                    = true
//     tcp_non_syn_first_pkt_drop          = true
//
//     ip_normalization_en                 = true
//     {
//         ip_ttl_change_detect_en         = false
//         ip_rsvd_flags_action            = drop
//         ip_df_action                    = allow
//         ip_options_action               = allow
//         ip_invalid_len_action           = trim
//         ip_normalize_ttl                = 0 (applicable only for workload
//                                              generated traffic)
//     }
//
//     icmp_normalization_en               = true
//     {
//         icmp_invalid_code_action        = drop
//         icmp_deprecated_msgs_drop       = true
//         icmp_redirect_msg_drop          = true
//     }
//
//     tcp_normalization_en                = true
//     {
//         tcp_split_handshake_drop        = false
//         tcp_rsvd_flags_action           = drop
//         tcp_unexpected_mss_action       = strip
//         tcp_unexpected_win_scale_action = strip
//         tcp_urg_ptr_not_set_action      = reset
//         tcp_urg_flag_not_set_action     = reset
//         tcp_urg_payload_missing_action  = reset
//         tcp_rst_with_data_action        = drop
//         tcp_data_len_gt_mss_action      = trim  (if conntrack is enabled)
//         tcp_data_len_gt_win_size_action = trim  (if conntrack is enabled)
//         tcp_unexpected_ts_option_action = reset (if conntrack is enabled)
//         tcp_unexpected_echo_ts_action   = drop
//         tcp_ts_not_present_drop         = true  (if conntrack is enabled)
//         tcp_invalid_flags_drop          = true
//         tcp_nonsyn_noack_drop           = true
//         tcp_normalize_mss               = 0 (no tcp_mss normalization)
//     }
// }
//------------------------------------------------------------------------------
message SecurityProfileSpec {
  types.ObjectMeta             meta                               = 1;    // common object meta
  kh.SecurityProfileKeyHandle  key_or_handle                      = 2 [(gogoproto.moretags) = "venice:\"key\""];

  uint32                       session_idle_timeout               = 3 [(gogoproto.moretags) = "range:30-172800, venice:default=90"];
  uint32                       tcp_cnxn_setup_timeout             = 4 [(gogoproto.moretags) = "range:1-60, venice:default=30"];
  uint32                       tcp_close_timeout                  = 5 [(gogoproto.moretags) = "range:1-300, venice:default=15"];
  uint32                       tcp_half_closed_timeout            = 6 [(gogoproto.moretags) = "range:1-600, venice:default=120"];
  uint32                       ip_normalize_ttl                   = 7 [(gogoproto.moretags) = "range:0-255, venice:default=0"];
  uint32                       tcp_drop_timeout                   = 8 [(gogoproto.moretags) = "range:1-300, venice:default=90"];
  uint32                       udp_drop_timeout                   = 9 [(gogoproto.moretags) = "range:1-172800, venice:default=60"];
  uint32                       icmp_drop_timeout                  = 10 [(gogoproto.moretags) = "range:1-300, venice:default=60"];
  uint32                       drop_timeout                       = 11 [(gogoproto.moretags) = "range:1-300, venice:default=60"];
  uint32                       tcp_timeout                        = 12 [(gogoproto.moretags) = "range:1-172800, venice:default=3600"];
  uint32                       udp_timeout                        = 13 [(gogoproto.moretags) = "range:1-172800, venice:default=30"];
  uint32                       icmp_timeout                       = 14 [(gogoproto.moretags) = "range:1-172800, venice:default=6"];

  bool                         cnxn_tracking_en                   = 15 [(gogoproto.moretags) = "venice:default=true"];
  bool                         ipsg_en                            = 16 [(gogoproto.moretags) = "venice:default=false"];
  bool                         tcp_rtt_estimate_en                = 17 [(gogoproto.moretags) = "venice:default=false"];
  bool                         ip_normalization_en                = 18 [(gogoproto.moretags) = "venice:default=true"];
  bool                         tcp_normalization_en               = 19 [(gogoproto.moretags) = "venice:default=true"];
  bool                         icmp_normalization_en              = 20 [(gogoproto.moretags) = "venice:default=true"];
  bool                         ip_reassembly_en                   = 21 [(gogoproto.moretags) = "venice:default=false"];

  // IP normalization knobs
  bool                         ip_ttl_change_detect_en            = 22 [(gogoproto.moretags) = "venice:default=false"];
  bool                         ip_src_guard_en                    = 23 [(gogoproto.moretags) = "venice:default=false"];
  NormalizationAction          ip_rsvd_flags_action               = 24 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_DROP"];
  NormalizationAction          ip_df_action                       = 25 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_ALLOW"];
  NormalizationAction          ip_options_action                  = 26 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_ALLOW"];
  NormalizationAction          ip_invalid_len_action              = 27 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_TRIM"];
  bool                         ip_spoof_pkt_drop                  = 28 [(gogoproto.moretags) = "venice:default=false"];
  bool                         ip_loose_src_routing_pkt_drop      = 29 [(gogoproto.moretags) = "venice:default=false"];
  bool                         ip_malformed_option_pkt_drop       = 30 [(gogoproto.moretags) = "venice:default=false"];
  bool                         ip_record_route_option_pkt_drop    = 31 [(gogoproto.moretags) = "venice:default=false"];
  bool                         ip_strict_src_routing_pkt_drop     = 32 [(gogoproto.moretags) = "venice:default=false"];
  bool                         ip_ts_option_pkt_drop              = 33 [(gogoproto.moretags) = "venice:default=false"];
  bool                         ip_unknown_option_pkt_drop         = 34 [(gogoproto.moretags) = "venice:default=false"];
  bool                         ip_stream_id_option_pkt_drop       = 35 [(gogoproto.moretags) = "venice:default=false"];
  bool                         ip_rsvd_fld_set_pkt_drop           = 36 [(gogoproto.moretags) = "venice:default=false"];
  bool                         ip_clear_df_bit                    = 37 [(gogoproto.moretags) = "venice:default=false"];

  // IPv6 knobs
  bool                         ipv6_anycast_src_drop              = 40 [(gogoproto.moretags) = "venice:default=false"];;
  bool                         ipv6_v4_compatible_addr_drop       = 41 [(gogoproto.moretags) = "venice:default=false"];;
  bool                         ipv6_needless_ip_frag_hdr_drop     = 42 [(gogoproto.moretags) = "venice:default=false"];;
  bool                         ipv6_invalid_options_pkt_drop      = 43 [(gogoproto.moretags) = "venice:default=false"];;
  bool                         ipv6_rsvd_fld_set_pkt_drop         = 44 [(gogoproto.moretags) = "venice:default=false"];;
  bool                         ipv6_rtg_hdr_pkt_drop              = 45 [(gogoproto.moretags) = "venice:default=false"];;
  bool                         ipv6_dst_options_hdr_pkt_drop      = 46 [(gogoproto.moretags) = "venice:default=false"];;
  bool                         ipv6_hop_by_hop_options_pkt_drop   = 47 [(gogoproto.moretags) = "venice:default=false"];;


  // ICMP/ICMPv6 normalization knobs
  NormalizationAction          icmp_invalid_code_action           = 50 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_DROP"];
  bool                         icmp_deprecated_msgs_drop          = 51 [(gogoproto.moretags) = "venice:default=true"];
  bool                         icmp_redirect_msg_drop             = 52 [(gogoproto.moretags) = "venice:default=true"];
  bool                         icmp_dst_unreach_ignore_payload    = 53 [(gogoproto.moretags) = "venice:default=false"];
  bool                         icmp_param_prblm_ignore_payload    = 54 [(gogoproto.moretags) = "venice:default=false"];
  bool                         icmp_pkt_too_big_ignore_payload    = 55 [(gogoproto.moretags) = "venice:default=false"];
  bool                         icmp_redirect_ignore_payload       = 56 [(gogoproto.moretags) = "venice:default=false"];
  bool                         icmp_time_exceed_ignore_payload    = 57 [(gogoproto.moretags) = "venice:default=false"];
  bool                         icmp_error_drop                    = 58 [(gogoproto.moretags) = "venice:default=false"];
  bool                         icmp_fragments_drop                = 59 [(gogoproto.moretags) = "venice:default=false"];
  bool                         icmp_large_pkt_drop                = 60 [(gogoproto.moretags) = "venice:default=false"];
  bool                         icmp_ping_zero_id_drop             = 61 [(gogoproto.moretags) = "venice:default=false"];
  bool                         icmp_need_frag_suppress            = 62 [(gogoproto.moretags) = "venice:default=false"];
  bool                         icmp_time_exceed_suppress          = 63 [(gogoproto.moretags) = "venice:default=false"];
  bool                         icmpv6_large_msg_mtu_small_drop    = 64 [(gogoproto.moretags) = "venice:default=false"];


  // TCP normalization knobs
  bool                         tcp_split_handshake_drop           = 71 [(gogoproto.moretags) = "venice:default=false"];
  NormalizationAction          tcp_rsvd_flags_action              = 72 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_DROP"];
  NormalizationAction          tcp_unexpected_mss_action          = 73 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_STRIP"];
  NormalizationAction          tcp_unexpected_win_scale_action    = 74 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_STRIP"];
  NormalizationAction          tcp_unexpected_sack_perm_action    = 75 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_STRIP"];
  NormalizationAction          tcp_urg_ptr_not_set_action         = 76 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_RESET"];
  NormalizationAction          tcp_urg_flag_not_set_action        = 77 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_RESET"];
  NormalizationAction          tcp_urg_payload_missing_action     = 78 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_RESET"];
  NormalizationAction          tcp_rst_with_data_action           = 79 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_DROP"];
  NormalizationAction          tcp_data_len_gt_mss_action         = 80 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_TRIM"];
  NormalizationAction          tcp_data_len_gt_win_size_action    = 81 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_TRIM"];
  NormalizationAction          tcp_unexpected_ts_option_action    = 82 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_RESET"];
  NormalizationAction          tcp_unexpected_echo_ts_action      = 83 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_DROP"];
  NormalizationAction          tcp_unexpected_sack_option_action  = 84 [(gogoproto.moretags) = "venice:default=nwsec.NormalizationAction.NORM_ACTION_DROP"];
  bool                         tcp_ts_not_present_drop            = 85 [(gogoproto.moretags) = "venice:default=true"];
  bool                         tcp_non_syn_first_pkt_drop         = 86 [(gogoproto.moretags)="venice:default=true"];

  // We will check for the following cases for invalid TCP flags
  // 1. SYN + FIN
  // 2. SYN + RST
  // 3. All TCP flags set (tcp_flags = 0xFF)
  // 4. No TCP flags set (tcp_flags = 0x0)
  bool                         tcp_invalid_flags_drop             = 87 [(gogoproto.moretags) = "venice:default=true"];
  bool                         tcp_nonsyn_noack_drop              = 88 [(gogoproto.moretags) = "venice:default=true"];
  bool                         tcp_syn_with_data_drop             = 89 [(gogoproto.moretags) = "venice:default=false"];
  bool                         tcp_syn_ack_with_data_drop         = 90 [(gogoproto.moretags) = "venice:default=false"];
  bool                         tcp_overlapping_segments_drop      = 91 [(gogoproto.moretags) = "venice:default=false"];
  bool                         tcp_strip_timestamp_option         = 92 [(gogoproto.moretags) = "venice:default=false"];
  bool                         tcp_conn_track_bypass_window_err   = 93 [(gogoproto.moretags) = "venice:default=false"];
  bool                         tcp_conn_track_fin_rst_disable     = 94 [(gogoproto.moretags) = "venice:default=false"];
  bool                         tcp_urg_flag_ptr_clear             = 95 [(gogoproto.moretags) = "venice:default=false"];
  // Can we have zero as default but when configured the range is between 576 - 9216 ?
  uint32                       tcp_normalize_mss                  = 96 [(gogoproto.moretags) = "range:0-9216, venice:default=0"];
  bool                         multicast_src_drop                 = 101 [(gogoproto.moretags) = "venice:default=true"];
}

// SecurityProfileRequestMsg is batched add or modify profile request
message SecurityProfileRequestMsg {
  repeated SecurityProfileSpec    request = 1;    // batched request
}

// SecurityProfile operational status
message SecurityProfileStatus {
  fixed64    profile_handle = 1;    // id of the security profile returned by HAL
}

// SecurityProfileResponse is response to SecurityProfileSpec
message SecurityProfileResponse {
  types.ApiStatus          api_status     = 1	[(gogoproto.moretags) = "venice:api_status"]; // API status code
  SecurityProfileStatus    profile_status = 2;    // SecurityProfile profile operational status
}

// SecurityProfileResponseMsg is batched response to SecurityProfileRequestMsg
message SecurityProfileResponseMsg {
  repeated SecurityProfileResponse    response = 1;    // batched response
}

// SecurityProfileDeleteRequest is used to delete a SecurityProfile profile
message SecurityProfileDeleteRequest {
  types.ObjectMeta            meta          = 1;    // object meta
  // key_or_handle is to identify SecurityProfile being deleted
  kh.SecurityProfileKeyHandle key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// SecurityProfileDeleteRequestMsg is used to delete a batch of SecurityProfile profiles
message SecurityProfileDeleteRequestMsg {
  repeated SecurityProfileDeleteRequest request = 1;    // batched delete request
}

// SecurityProfileResponse is response to SecurityProfileSpec
message SecurityProfileDeleteResponse {
  types.ApiStatus          api_status     = 1 [(gogoproto.moretags) = "venice:api_status"]; // API status code
  SecurityProfileStatus    profile_status = 2;    // SecurityProfile profile operational status
}

// SecurityProfileDeleteResponseMsg is batched response to SecurityProfileDeleteRequestMsg
message SecurityProfileDeleteResponseMsg {
  repeated SecurityProfileDeleteResponse    response = 1;    // batched response
}

// SecurityProfileGetRequest is used to get information about a L2 Segment
message SecurityProfileGetRequest {
  types.ObjectMeta             meta          = 1;    // object meta
  // key_or_handle is the security profile's identifier for retrieval
   kh.SecurityProfileKeyHandle key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// SecurityProfileGetRequestMsg is batched GET request for SecurityProfile profiles
message SecurityProfileGetRequestMsg {
  repeated SecurityProfileGetRequest    request = 1;    // batched get request
}

// SecurityProfileStats is the statistics object for each SecurityProfile profile
message SecurityProfileStats {
}

// SecurityProfileGetResponse captures all the information about a SecurityProfile profile
message SecurityProfileGetResponse {
  types.ApiStatus          api_status = 1    [(gogoproto.moretags) = "venice:api_status"];// API status code
  SecurityProfileSpec      spec       = 2;    // config spec
  SecurityProfileStatus    status     = 3;    // operational status
  SecurityProfileStats     stats      = 4;    // stats, if any
}

// SecurityProfileGetResponseMsg is the batched response to SecurityProfileGetRequestMsg
message SecurityProfileGetResponseMsg {
  repeated SecurityProfileGetResponse     response   = 1;    // batched get response
}

// Firewall policy actions
enum FirewallAction {
  FIREWALL_ACTION_NONE   = 0;
  FIREWALL_ACTION_ALLOW  = 1;
  FIREWALL_ACTION_DENY   = 2;
  FIREWALL_ACTION_REJECT = 3;
}

// Service object identifies an app defined by IP protocol and TCP/UDP port
// in most cases. This object also can specify blanket apps like all TCP or
// UDP traffic, all IP traffic, ICMP type/code combinations etc.
message Service {
    types.IPProtocol           ip_protocol   = 1;    // IP protocol
    oneof l4_info {
        uint32                 dst_port      = 2;    // TCP or UDP port, 
                                                     // 0 for other protocols
        types.ICMPMsgType      icmp_msg_type = 3;
    }
    ALGName                    alg           = 4;                //  Identifies ALG name
}

// Applicaion Layer Gateway (ALG) names for invoking appropriate ALG
enum ALGName {
   APP_SVC_NONE       = 0;
   APP_SVC_TFTP       = 1;    // Trivial File Transfer Protocol
   APP_SVC_FTP        = 2;    // File Transfer Protocol
   APP_SVC_DNS        = 3;    // Domain Name System
   APP_SVC_SIP        = 4;    // Session Initiation Protocol
   APP_SVC_SUN_RPC    = 5;    // SUN Remote Procedure Call
   APP_SVC_MSFT_RPC   = 6;    // Microsoft Remote Procedure Call
   APP_SVC_RTSP       = 7;    // Real-Time Streaming Protocol
}

// FirewallRuleSpec defines a stateful firewall rule that is part of a
// SecurityGroupSpec
message FirewallRuleSpec {
    repeated  Service   svc                = 2;    // application service
    repeated  string    apps               = 3;    // For appid based policy enforcement
    FirewallAction      action             = 4;    // action to take
    bool                log                = 5;    // log if this rule is hit 
}

// ingress policy for the security group
message SGPolicy {
  repeated FirewallRuleSpec    in_fw_rules       = 1;    // ingress firewall rules
  repeated FirewallRuleSpec    eg_fw_rules    = 2;    // egress firewall rules
}

// egress policy for the security group
//message EgressSGPolicy {
  //repeated FirewallRuleSpec    fw_rules       = 1;    // egress firewall rules
//}



// SecurityGroupPolicySpec captures the policy for a security group pair (aka. group of
// endpoints or enic interfaces) in both directions from workload's perspective.
// This policy will be attached to enic interface or an endpoint so it applies
// to the traffic from/to that workload. If no match is found for the new
// session in the slow path, either a drop flow will be installed or packet will
// be dropped without creating drop flow
message SecurityGroupPolicySpec {
  types.ObjectMeta                meta           = 1;    // object meta
  // key_or_handle is the security group's unique identifier
  kh.SecurityGroupPolicyKeyHandle key_or_handle  = 2 [(gogoproto.moretags) = "venice:\"key\""];
  SGPolicy                        policy_rules   = 3;    // ingress policy
}

// SecurityGroupPolicyRequestMsg is batched add or modify security group policy request
message SecurityGroupPolicyRequestMsg {
  repeated SecurityGroupPolicySpec    request = 1;    // batched request
}

// security group operational status
message SecurityGroupPolicyStatus {
  fixed64    policy_handle = 1;    // id of the security group returned by HAL
}

// SecurityGroupResponse is the response to SecurityGroupPolicySpec
message SecurityGroupPolicyResponse {
  types.ApiStatus              api_status  = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  SecurityGroupPolicyStatus    status      = 2;    // operational status
}

// SecurityGroupResponseMsg is batched response to SecurityGroupPolicyRequestMsg
message SecurityGroupPolicyResponseMsg {
  repeated SecurityGroupPolicyResponse    response = 1;    // batched response
}

// SecurityGroupPolicyDeleteRequest is used to delete a security group policy
message SecurityGroupPolicyDeleteRequest {
  types.ObjectMeta                meta           = 1;    // object meta
  // key_or_handle is the security group's unique identifier
  kh.SecurityGroupPolicyKeyHandle key_or_handle  = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// SecurityGroupDeleteRequestMsg is used to delete a batch of security group policies.
message SecurityGroupPolicyDeleteRequestMsg {
  repeated SecurityGroupPolicyDeleteRequest    request = 1;
}

message SecurityGroupPolicyDeleteResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}
// SecurityGroupPolicyDeleteResponseMsg is batched response to
// SecurityGroupPolicyDeleteRequestMsg
message SecurityGroupPolicyDeleteResponseMsg {
  repeated SecurityGroupPolicyDeleteResponse response = 1;    // API status code
}

// SecurityGroupPolicyGetRequest is used to get information about a security group policy
message SecurityGroupPolicyGetRequest {
  types.ObjectMeta                meta           = 1;    // object meta
  // key_or_handle is the security group's unique identifier
  kh.SecurityGroupPolicyKeyHandle key_or_handle  = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// SecurityGroupGetRequestMsg is batched GET request for security group policies
message SecurityGroupPolicyGetRequestMsg {
  repeated SecurityGroupPolicyGetRequest    request = 1;    // batched get request
}


// SecurityGroupStats is the statistics object for a security group
message SecurityGroupPolicyStats {
}

// SecurityGroupGetResponse captures all the information about a security group
message SecurityGroupPolicyGetResponse {
  types.ApiStatus              api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  SecurityGroupPolicySpec      spec       = 2;    // configuration of security policy
  SecurityGroupPolicyStatus    status     = 3;    // operational state of security policy
  SecurityGroupPolicyStats     stats      = 4;    // debug status of security policy
}

// SecurityGroupPolicyGetResponseMsg is batched response to SecurityGroupGetRequestMsg
message SecurityGroupPolicyGetResponseMsg {
  repeated SecurityGroupPolicyGetResponse    response   = 1;    // batched get response
  types.ApiStatus                            api_status = 2;    // Batch API Statu code
}

message SecurityGroupSpec {
    types.ObjectMeta          meta          = 1; // object meta
    // key_or_handle is the security group's unique identifier
    kh.SecurityGroupKeyHandle key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// SecurityGroupRequestMsg is batched add or modify security group policy request
message SecurityGroupRequestMsg {
  repeated SecurityGroupSpec    request = 1;    // batched request
}

// security group operational status
message SecurityGroupStatus {
  fixed64    sg_handle = 1;    // id of the security group returned by HAL
}

// SecurityGroupResponse is the response to SecurityGroupSpec
message SecurityGroupResponse {
  types.ApiStatus        api_status  = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  SecurityGroupStatus    status      = 2;    // operational status
}

// SecurityGroupResponseMsg is batched response to SecurityGroupRequestMsg
message SecurityGroupResponseMsg {
  repeated SecurityGroupResponse    response = 1;    // batched response
}

// SecurityGroupDeleteRequest is used to delete a security group
message SecurityGroupDeleteRequest {
  types.ObjectMeta          meta           = 1;    // object meta
  // key_or_handle is the security group's unique identifier
  kh.SecurityGroupKeyHandle key_or_handle  = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// SecurityGroupDeleteRequestMsg is used to delete a batch of security groups
message SecurityGroupDeleteRequestMsg {
  repeated SecurityGroupDeleteRequest    request = 1;
}

// SecurityGroupDeleteResponseMsg is batched response to
// SecurityGroupDeleteRequestMsg
message SecurityGroupDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

// SecurityGroupGetRequest is used to get information about a security group
message SecurityGroupGetRequest {
  types.ObjectMeta          meta           = 1;    // object meta
  // key_or_handle is the security group's unique identifier
  kh.SecurityGroupKeyHandle key_or_handle  = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// SecurityGroupGetRequestMsg is batched GET request for security groups
message SecurityGroupGetRequestMsg {
  repeated SecurityGroupGetRequest    request = 1;    // batched get request
}

// SecurityGroupStats is the statistics object for a security group
message SecurityGroupStats {
}

// SecurityGroupGetResponse captures all the information about a security group
message SecurityGroupGetResponse {
  types.ApiStatus        api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  SecurityGroupSpec      spec       = 2;    // configuration of security group
  SecurityGroupStatus    status     = 3;    // operational state of security group
  SecurityGroupStats     stats      = 4;    // debug status of security group
}

// SecurityGroupGetResponseMsg is batched response to SecurityGroupGetRequestMsg
message SecurityGroupGetResponseMsg {
  repeated SecurityGroupGetResponse    response   = 1;    // batched get response
  types.ApiStatus                      api_status = 2;    // batch status
}

message ICMPMsg {
  types.ICMPMsgType     type = 1;  // ICMP Type
  uint32                code = 2;  // ICMP code
}

message DoSService {
    types.IPProtocol           ip_protocol   = 1;    // IP protocol
    oneof l4_info {
        uint32                 dst_port      = 2;    // TCP or UDP port, 
                                                     // 0 for other protocols
        ICMPMsg                icmp_msg      = 3;
    }
}

// DoSSessionLimits captures the session limits to be enforced on a security
// group
message DoSSessionLimits {
  uint32    max_sessions       = 1;    // max. no of sessions
  uint32    blocking_timeout   = 2;    // cool off period once session count
                                       // comes below the above limit
}

// DoSPolicer is aggregate DoS policer object
message DoSPolicer {
  uint32    bytes_per_second = 1;    // max. bytes per second
  uint32    peak_rate        = 2;    // in bytes-per-second
  uint32    burst_size       = 3;    // in bytes
}

// DoSFloodLimits object captures the flood limits configuration
message DoSFloodLimits {
  // default and only action in restrict phase is Random Early Drop (RED)
  message RestrictLimits {
    uint32    pps               = 1;    // packet-per-second limit
    uint32    burst_pps         = 2;    // packets-per-second burst
    uint32    duration          = 3;    // restrict action duration in seconds
  }
  // default and only action in protection phase is drop
  message ProtectLimits {
    uint32    pps               = 1;    // packet-per-second limit
    uint32    burst_pps         = 2;    // packets-per-second burst
    uint32    duration          = 3;    // protect action duration in seconds
  }
  RestrictLimits    restrict_limits = 1;
  ProtectLimits     protect_limits  = 2;
}

// DoSProtectionSpec defines DoS protection policy for a security group
message DoSProtectionSpec {
  DoSService          svc                  = 1;    // (optional) application
                                                   // service for which rest of
                                                   // the DoS config to be
                                                   // applied on
  uint32              session_setup_rate   = 2;    // 0 inidicates no limits
  DoSSessionLimits    session_limits       = 3;    // session limits config
  DoSPolicer          policer              = 4;    // DoS policer configuration
  DoSFloodLimits      tcp_syn_flood_limits = 5;    // TCP SYN flood limits
  DoSFloodLimits      udp_flood_limits     = 6;    // UDP flood limits
  DoSFloodLimits      icmp_flood_limits    = 7;    // ICMP flood limits
  DoSFloodLimits      other_flood_limits   = 8;    // flood limits for all other
                                                   // traffic (IP and non-IP)
  uint64              peer_sg_handle       = 9;    // TO security group handle
}

// ingress policy for DoS
message IngressDoSPolicy {
    DoSProtectionSpec dos_protection = 1;   //ingress (D)DoS protection policy
}

// egress policy for DoS
message EgressDoSPolicy {
    DoSProtectionSpec dos_protection = 1;  //egress (D)DoS Protection policy
}

// DoSPolicySpec that has the ingressDosPolicy and EgressDoSPolicy,
// Spec is identified by the handle. HAL will assign a unique handle for each
// DoSPolicy object and the clients are expected to pass the handle for
// Get/Modify/Delete calls. Note that there is no identifier for this object
message DoSPolicySpec {
   types.ObjectMeta           meta              = 1;    // object meta
   IngressDoSPolicy           ingress_policy    = 2;    // ingress policy
   EgressDoSPolicy            egress_policy     = 3;    // egress policy
   fixed64                    dos_handle        = 4;    // dos policy handle
   repeated uint64            sg_handle         = 5;    // list of security group handles
}

// DoSPolicyRequestMsg is batched add or modify DoS request
message DoSPolicyRequestMsg {
  repeated DoSPolicySpec    request = 1;    // batched request
}

// DoS operational status
message DoSPolicyStatus {
  fixed64    dos_handle = 1;    // id of the dos returned by HAL
}

// DoSResponse is the response to DoSPolicySpec
message DoSPolicyResponse {
  types.ApiStatus       api_status  = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  DoSPolicyStatus       status      = 2;    // operational status
}

// DoSPolicyResponseMsg is batched response to DoSPolicyRequestMsg
message DoSPolicyResponseMsg {
  repeated DoSPolicyResponse    response = 1;    // batched response
}

// DoSRequest is used to delete a DoS
message DoSPolicyDeleteRequest {
  types.ObjectMeta  meta           = 1;    // object meta
  fixed64           dos_handle     = 2;    // object handle
}

// DoSPolicyDeleteRequestMsg is used to delete a batch of security groups
message DoSPolicyDeleteRequestMsg {
  repeated DoSPolicyDeleteRequest    request = 1;
}

message DoSPolicyDeleteResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

// DoSPolicyDeleteResponseMsg is batched response to
// DoSPolicyDeleteRequestMsg
message DoSPolicyDeleteResponseMsg {
  repeated DoSPolicyDeleteResponse response = 1;
}

// DoSGetRequest is used to get information about a DoS
message DoSPolicyGetRequest {
  types.ObjectMeta  meta           = 1;    // object meta
  fixed64           dos_handle     = 2;    // object handle
}

// DoSPolicyGetRequestMsg is batched GET request for DoS
message DoSPolicyGetRequestMsg {
  repeated DoSPolicyGetRequest    request = 1;    // batched get request
}

// DoSPolicyStats is the statistics object for a security group
message DoSPolicyStats {
}

// DoSGetResponse captures all the information about a security group
message DoSPolicyGetResponse {
  types.ApiStatus         api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  DoSPolicySpec           spec       = 2;    // configuration of DoS
  DoSPolicyStatus         status     = 3;    // operational state of DoS
  DoSPolicyStats          stats      = 4;    // debug status of DoS
}

// DoSPolicyGetResponseMsg is batched response to DoSPolicyGetRequestMsg
message DoSPolicyGetResponseMsg {
  repeated DoSPolicyGetResponse    response = 1;    // batched get response
}


// predefined apps - default apps for which ALG functionality is invoked
enum PredefinedApps {
  APP_NAME_NONE           = 0;
  APP_NAME_TFTP           = 1;  // TFTP ALG
  APP_NAME_FTP            = 2;  // FTP ALG
  APP_NAME_SUNRPC_TCP     = 3;  // SUNRPC ALG
  APP_NAME_MSRPC          = 4;  // MSRPC ALG
  APP_NAME_DNS            = 5;  // DNS ALG
  APP_NAME_SIP            = 6;  // SIP ALG
  APP_NAME_RTSP           = 7;  // RTSP ALG
  APP_NAME_TRACEROUTE     = 8;  // TRACEROUTE ALG
  APP_NAME_IP             = 9;  // IP ALG (uni-directional flow per session)
  APP_NAME_ANY            = 10; // "any" app
}

// App - represents an application defined by (Protocol, port) combination
// along with all applicable parameters
message App {
    message AppPortInfo {
        repeated types.L4PortRange    dst_port_range = 1; // dst port range low, high value
        repeated types.L4PortRange    src_port_range = 2; // src port range low, high value
    }
    message ICMPAppInfo {
        uint32    icmp_type        = 1;
        uint32    icmp_code        = 2;
    }
    message ICMPv6AppInfo {
        uint32    icmpv6_type      = 1;
        uint32    icmpv6_code      = 2;
    }
    message RPCAppInfo {
        uint32    program_number   = 1;
    }
    message MSRPCAppInfo {
        uint32    uuid            = 1;
    }

    enum TraceLevel {
        TRACE_LEVEL_NONE      = 0;
        TRACE_LEVEL_BRIEF     = 1;
        TRACE_LEVEL_DETAIL    = 2;
        TRACE_LEVEL_EXTENSIVE = 3;
        TRACE_LEVEL_VERBOSE   = 4;
    }
    message TraceOptions {
        TraceLevel    level = 1;
    }

    types.IPProtocol    protocol        = 1;
    oneof L4AppInfo {
        AppPortInfo   port_info         = 2;
        ICMPAppInfo   icmp_info         = 3;
        ICMPv6AppInfo icmpv6_info       = 4;
        RPCAppInfo    rpc_info          = 5;
        MSRPCAppInfo  msrpc_cinfo       = 6;
    }
    PredefinedApps    alg               = 7;

    message FTPOptions {
        bool allow_mismatch_ip_address  = 1; // pass FTP packets with mismatched IP header address and payload
    }
    message DNSOptions {
        bool      drop_multi_question_packets       = 1; // drop pkt if number of questions > 1
        bool      drop_large_domain_name_packets    = 2; // drop if domain name size is > 255 bytes
        uint32    drop_long_label_packets           = 3; // drop if label length > 63
        uint32    drop_multizone_packets            = 4; // (DDNS) drop if number of zones > 1
        uint32    max_msg_length                    = 5; // default 512 (max. 8192) bytes
    }
    message MSRPCOptions {
        uint32 map_entry_timeout             = 1;
    }
    message SunRPCOptions {
        uint32 map_entry_timeout             = 1;
    }
    message SIPOptions {
        uint32 ctimeout                      = 1;
        uint32 dscp_code_point               = 2;
        uint32 media_inactivity_timeout      = 3;
        uint32 max_call_duration             = 4;
        uint32 t1_timer_value                = 5;
        uint32 t4_timer_value                = 6;
    }
    oneof AppOptions {
        FTPOptions    ftp_option_info        = 8;
        DNSOptions    dns_option_info        = 9;
        MSRPCOptions  msrp_coption_info      = 10;
        SunRPCOptions sun_rpc_pption_info    = 11;
        SIPOptions    sip_options            = 12;
    }
    uint32            idle_timeout           = 13;
    TraceOptions      trace_opts             = 14;
}

// ApplicationSpec is either a pre-defined pensando application or user-defined
// custom application
message ApplicationSpec {
    oneof apps {
        PredefinedApps    predefined_apps        = 1; //  Predefined apps
        App               application            = 2;
    }
}

message ApplicationStatus {
}

message Application {
    types.ObjectMeta     meta   = 1;
    ApplicationSpec      spec   = 2;
    ApplicationStatus    status = 3;
}

// group of applications to apply same policy on
message AppGroupSpec {
    repeated Application Apps = 2;
}

message AppGroupStatus {
}

message AppGroup {
    types.ObjectMeta    meta      = 1;
    AppGroupSpec        spec      = 2;
    AppGroupStatus      status    = 3;
}

// AppSec represents an application 
enum SecurityAction {
    SECURITY_RULE_ACTION_NONE   = 0;
    SECURITY_RULE_ACTION_ALLOW  = 1;
    SECURITY_RULE_ACTION_DENY   = 2;
    SECURITY_RULE_ACTION_REJECT = 3;
}

enum LogAction {
    LOG_NONE                     = 0;
    LOG_ON_SESSION_START         = 1;
    LOG_ON_SESSION_END           = 2;
    LOG_ON_SESSION_START_AND_END = 3;
}

message SecurityRuleAction {
    SecurityAction  sec_action = 1;  // Identifies the security action related to the rule
    LogAction       log_action = 2;  // Identifies log actions related to the rule
}

message SecurityRuleSpec {
    uint64                          rule_id            = 1;
    bool                            enable             = 2;        // enable/disable
    SecurityRuleAction              action             = 3;        // action related to the rule 
    bool                            count              = 4;        // Enable count of packets hitting the rule
    repeated Application            app                = 5;        // applications, if any, to invoke ALG
    repeated AppGroup               app_group          = 6;        // Comment TBD
    repeated types.IPAddressObj     src_address        = 7;        // source address(es)
    repeated uint32                 src_sg             = 8;       // source security group
    repeated types.IPAddressObj     dst_address        = 9;       // destination address(es)
    repeated uint32                 dst_sg             = 10;       // destination security group
    repeated types.L4PortRange      dst_port_range     = 11;       // dst port
    repeated types.L4PortRange      src_port_range     = 12;       // src port range

    bool                            conn_track_en      = 13;       // Enable connection tracking
}

// SecurityPolicySpec that contains set of SecurityRules
message SecurityPolicySpec {
    types.ObjectMeta              meta                   = 1;
    kh.SecurityPolicyKeyHandle    policy_key_or_handle   = 2;      // Policy Name that identifies the security Policy
    repeated SecurityRuleSpec     rule                   = 3;      // List of security rules
}

// SecurityPolicyRequestMsg is batched add or modify security policy request
message SecurityPolicyRequestMsg {
    repeated SecurityPolicySpec       request = 1;  //  batched request
}



message SecurityPolicyStatus {
    fixed64  security_policy_handle  = 1; // id of the security policy returned by HAL
}

// SecurityPolicyResponse is the response to SecurityPolicyRequest 
message SecurityPolicyResponse {
    types.ApiStatus       api_status         = 1 [(gogoproto.moretags) = "venice:api_status"];  // API status code
    SecurityPolicyStatus  policy_status      = 2;  // operational status
}

message SecurityPolicyResponseMsg {
    repeated SecurityPolicyResponse response = 1;
}


// SecurityPolicyDeleteRequest is used to delete a security rule 
message SecurityPolicyDeleteRequest {
    types.ObjectMeta                meta                  = 1; // object meta
    kh.SecurityPolicyKeyHandle      policy_key_or_handle  = 2 [(gogoproto.moretags) = "venice:\"key\""]; // policy_handle 
}

// SecurityPolicyDeleteRequestMsg is used to delete a batch of security policy
message SecurityPolicyDeleteRequestMsg {
    repeated SecurityPolicyDeleteRequest  request = 1;
}

message SecurityPolicyDeleteResponse {
    types.ApiStatus api_status = 1 [(gogoproto.moretags) = "venice:api_status"]; // API status code
}

// SecurityPolicyDeleteResponseMsg is batched response to SecurityPolicyDeleteRequestMsg
message SecurityPolicyDeleteResponseMsg {
    repeated SecurityPolicyDeleteResponse response = 1;  // API status code
}

// SecurityPolicyGet is used to get information about a security policy 
message SecurityPolicyGetRequest {
    types.ObjectMeta              meta          = 1; // object meta
    // key_or_handle is the security policy's unique identifier
    kh.SecurityPolicyKeyHandle    key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// SecurityPolicyGetRequestMsg is batched GET request for security policy
message SecurityPolicyGetRequestMsg {
    repeated SecurityPolicyGetRequest    request = 1; // batched get request
}

// SecurityPolicyStats - place holder
message SecurityPolicyStats {
}

// SecurityPolicyGetResponse caputres all the information about a security policy
// only if api_status indicates success, other fields are valid
message SecurityPolicyGetResponse {
    types.ApiStatus       api_status  = 1 [(gogoproto.moretags) = "venice:api_status"]; // API status code
    SecurityPolicySpec    spec        = 2;  // SecurityPolicy configuration
    SecurityPolicyStatus  status      = 3;  // operational state of the security policy
    SecurityPolicyStats   stats       = 4;  // Stats related to security policy
}

// SecurityPolicyGetResponse Msg is batched response to SecurityPolicyGetRequestMsg
message SecurityPolicyGetResponseMsg {
    repeated SecurityPolicyGetResponse   response   = 1;
}
