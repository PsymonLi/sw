//------------------------------------------------------------------------------
// protobuf specification for VLAN HAL APIs
//
// L2 segment is user provisioned vlan that will be configured on NIC uplink(s)
// Endpoints or vNICs are put in useg vlan which will be mapped to user vlan
// when packet is put on the wire towards uplink(s)
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "kh.proto";
import "eplearn.proto";
import "delphi.proto";

package l2segment;
option go_package="halproto";
// The L2 Segment service definition
service L2Segment {
  rpc L2SegmentCreate (L2SegmentRequestMsg) returns (L2SegmentResponseMsg) {}
  rpc L2SegmentUpdate (L2SegmentRequestMsg) returns (L2SegmentResponseMsg) {}
  rpc L2SegmentDelete (L2SegmentDeleteRequestMsg) returns (L2SegmentDeleteResponseMsg) {}
  rpc L2SegmentGet (L2SegmentGetRequestMsg) returns (L2SegmentGetResponseMsg) {}
}


// BroadcastFwdPolicy defines various forwarding options to deal with
// broadcast traffic
enum BroadcastFwdPolicy {
  BROADCAST_FWD_POLICY_NONE     = 0;
  BROADCAST_FWD_POLICY_DROP     = 1;    // drop action
  BROADCAST_FWD_POLICY_FLOOD    = 2;    // flood in L2 segment
}

// MulticastFwdPolicy defines various forwarding options to deal with
// multicast traffic
enum MulticastFwdPolicy {
  MULTICAST_FWD_POLICY_NONE         = 0;
  MULTICAST_FWD_POLICY_FLOOD        = 1;    // flood mcast traffic in the L2 segment
  MULTICAST_FWD_POLICY_REPLICATE    = 2;    // replicate based on mcast group subscription (or static config)
  MULTICAST_FWD_POLICY_DROP         = 3;    // drop action
}

// L2SegmentSpec message is used to do add/mod of vlan
message L2SegmentSpec {
  option (delphi.update_event) = true;
  delphi.ObjectMeta      Meta                           = 1;

  // key_or_handle is L2 segment's unique identifier
  kh.L2SegmentKeyHandle  key_or_handle                  = 2 [(gogoproto.moretags) = "venice:key"];
  repeated kh.NetworkKeyHandle network_key_handle       = 3 [(gogoproto.moretags) = "venice:ref"];
  kh.VrfKeyHandle        vrf_key_handle                 = 4 [(gogoproto.moretags) = "venice:immutable,venice:ref"];
  types.L2SegmentType    segment_type                   = 5 [(gogoproto.moretags) = "venice:immutable"];    // L2 segment type
  MulticastFwdPolicy     mcast_fwd_policy               = 6;                                                // multicast forwarding policy
  BroadcastFwdPolicy     bcast_fwd_policy               = 7;                                                // broadcast forwarding policy
  types.EncapInfo        wire_encap                     = 8 [(gogoproto.moretags) = "venice:immutable"];    // wire encap
  types.EncapInfo        tunnel_encap                   = 9 [(gogoproto.moretags) = "venice:immutable"];    // tunnel encap
  types.IPAddress        gipo                           = 10 [(gogoproto.moretags) = "venice:immutable"];   // gipo for mcast vxlan traffic
  eplearn.EplearnCfg     eplearn_cfg                    = 11;                                               // ep learning config
  kh.InterfaceKeyHandle  pinned_uplink_if_key_handle    = 12 [(gogoproto.moretags) = "venice:ref"];         // The pinned uplink
  bool                   proxy_arp_enabled              = 13;                                               // proxy arp response enabled.
  repeated kh.InterfaceKeyHandle  if_key_handle         = 14 [(gogoproto.moretags) = "venice:ref,venice:constraints={intf.InterfaceSpec.type=interface_pb2.IF_TYPE_UPLINK}"];         // L2seg Member IFs
}

// L2SegmentRequestMsg is batched add or modify L2 segment request
message L2SegmentRequestMsg {
  repeated L2SegmentSpec    request = 1;    // batched request
}

// L2segment oper state for enterprise pipeline
message L2segmentStatusEpd {
  uint32                hw_l2seg_id         = 3;    // used to compute l2seg_lookup_id along with hw_vrf_id
  uint32                l2seg_lookup_id     = 4;    // l2seg id for flow lookup
  uint32                l2seg_vlan_id_cpu   = 5;    // vlan carried by CPU Tx packets to map to this l2seg
  uint32                inp_prop_cpu_idx    = 6;    // inpurt properties table idx, installed for
                                                    // for CPU TX packets with CPU injecting into a VRF.
  repeated uint32       inp_prop_idx        = 7;    // input properties table idx for every Uplink/UplinkPC
                                                    // for .1q tagged packets
  repeated uint32       inp_prop_idx_pr_tag = 8;    // input properties table idx for every Uplink/UplinkPC
                                                    //  for priority tagged packets.
}

// L2segment oper state for cloud pipeline
message L2segmentStatusCpd {
}


// L2SegmentStatus represents the current status of the L2 segment
message L2SegmentStatus {
  option (delphi.update_event) = true;
  delphi.ObjectMeta         Meta                = 1;

  kh.L2SegmentKeyHandle     key_or_handle       = 2 [(gogoproto.moretags) = "venice:key"];
  uint32                    vrf_id              = 3;    // TODO REMOVE DOL ONLY - hw vrf id
  uint32                    bcast_idx           = 4;    // Bcast replication list
  uint32                    mcast_idx           = 5;    // Mcast replication list
  uint32                    prom_idx            = 6;    // Prom replication list
  // TODO - add vNICs/uplinks this vlan is up on
  oneof l2seg_status {
      L2segmentStatusEpd    epd_info            = 7;    // L2seg oper state for enterprise pipeline
      L2segmentStatusCpd    cpd_info            = 8;    // L2seg oper state for cloud pipeline
  }
}

// L2SegmentResponse is response to L2SegmentSpec
message L2SegmentResponse {
  types.ApiStatus       api_status        = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  L2SegmentStatus       l2segment_status  = 2;    // L2 segment operational status
}

// L2SegmentResponseMsg is batched response to L2SegmentRequestMsg
message L2SegmentResponseMsg {
  repeated L2SegmentResponse    response = 1;    // batched response
}

// L2SegmentDeleteRequest is used to delete a L2 segment
message L2SegmentDeleteRequest {
  // key_or_handle is L2 segment's unique identifier
  kh.L2SegmentKeyHandle key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
  kh.VrfKeyHandle vrf_key_handle      = 2 [(gogoproto.moretags) = "venice:ref"];
}

// L2SegmentDeleteRequestMsg is used to delete a batch of L2 segments
message L2SegmentDeleteRequestMsg {
  repeated L2SegmentDeleteRequest request = 1;    // batched delete request
}

// L2SegmentDeleteResponse is response to L2SegmentDeleteRequest
message L2SegmentDeleteResponse {
    types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

// L2SegmentDeleteResponseMsg is batched response to L2SegmentDeleteRequestMsg
message L2SegmentDeleteResponseMsg {
  repeated L2SegmentDeleteResponse response = 1;
}

// L2SegmentGetRequest is used to get information about a L2 Segment
message L2SegmentGetRequest {
  kh.L2SegmentKeyHandle key_or_handle       = 1 [(gogoproto.moretags) = "venice:key"];
  kh.VrfKeyHandle       vrf_key_handle      = 2 [(gogoproto.moretags) = "venice:ref"];
}

// L2SegmentGetRequestMsg is batched GET request for L2 segments
message L2SegmentGetRequestMsg {
  repeated L2SegmentGetRequest    request = 1;    // batched get request
}

// L2SegmentStats is the statistics object for each L2 segment
message L2SegmentStats {
  uint32                          num_endpoints = 1;    // number of endpoints in this L2 segment
  eplearn.L2EplearnStats          eplearn_stats = 2;    // Eplearn stats
}

// L2SegmentGetResponse captures all the information about a L2 segment
// only if api_status indicates success, other fields are valid
message L2SegmentGetResponse {
  types.ApiStatus       api_status          = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  L2SegmentSpec         spec                = 2;    // L2 segment configuration
  L2SegmentStatus       status              = 3;    // operational state of L2 segment
  L2SegmentStats        stats               = 4;    // stats of the L2 segment
}

// L2SegmentGetResponseMsg is the batched response to L2SegmentGetRequestMsg
message L2SegmentGetResponseMsg {
  repeated L2SegmentGetResponse    response = 1;    // batched get response
}
