//------------------------------------------------------------------------------
// protobuf specification for tcpcb
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";

package tcpcb;
option go_package="halproto";

// The tcp cb service definition
service TcpCb {
  rpc TcpCbCreate (TcpCbRequestMsg) returns (TcpCbResponseMsg) {}
  rpc TcpCbUpdate (TcpCbRequestMsg) returns (TcpCbResponseMsg) {}
  rpc TcpCbDelete (TcpCbDeleteRequestMsg) returns (TcpCbDeleteResponseMsg) {}
  rpc TcpCbGet (TcpCbGetRequestMsg) returns (TcpCbGetResponseMsg) {}
}

// TcpCbKeyHandle is used to operate on a tcp_cb either by its key or handle
message TcpCbKeyHandle {
  oneof key_or_handle {
    uint32     tcpcb_id          = 1;    // unique tcp_cb id allocated by app
    fixed64    tcpcb_handle      = 2;    // tcp_cb handle returned by HAL
  }
}

// TcpCbSpec captures all the tcp_cb level configuration
message TcpCbSpec {
  TcpCbKeyHandle        key_or_handle              = 1;    // tcp_cb being created/updated
  uint32                rcv_nxt                    = 2;
  uint32                snd_nxt                    = 3;
  uint32                snd_una                    = 4;
  uint32                rcv_tsval                  = 5;
  uint32                ts_recent                  = 6;
  fixed64               serq_base                  = 7;
  uint32                debug_dol                  = 8;
  fixed64               sesq_base                  = 9;
  uint32                sesq_pi                    = 10;
  uint32                sesq_ci                    = 11;
  uint32                snd_wnd                    = 12;
  uint32                snd_cwnd                   = 13;
  uint32                rcv_mss                    = 14;
  uint32                source_port                = 15;
  uint32                dest_port                  = 16;
  bytes                 header_template            = 17;
  uint32                state                      = 18;
  uint32                source_lif                 = 19;
  fixed64               asesq_base                 = 20;
  uint32                asesq_pi                   = 21;
  uint32                asesq_ci                   = 22;
  uint32                debug_dol_tx               = 23;
  uint32                header_len                 = 24;
  bool                  pending_ack_send           = 25;
  types.AppRedirType    l7_proxy_type              = 26;
  uint32                sesq_retx_ci               = 27;
  uint64                retx_snd_una               = 28;
  uint64                rx_ts                      = 29;
  uint64                rto                        = 30;
  uint32                snd_cwnd_cnt               = 31;
  uint32                debug_dol_tblsetaddr       = 32;
  uint32                serq_pi                    = 33;
  uint32                pred_flags                 = 34;
  uint32                other_qid                  = 35;
  uint32                packets_out                = 36;
  uint32                rto_pi                     = 37;
  uint32                retx_timer_ci              = 38;
  uint32                rto_backoff                = 39;
  uint32                cpu_id                     = 40;
  uint32                serq_ci                    = 41;
}

// TcpCbRequestMsg is batched add or modify tcpcb request
message TcpCbRequestMsg {
  repeated TcpCbSpec    request = 1;    // batched request
}

// TcpCbStatus is the operational status of a given tcpcb
message TcpCbStatus {
  fixed64    tcpcb_handle     = 1;    // id of tcpcb returned by HAL
}

// TcpCbResponse is response to TcpCbSpec
message TcpCbResponse {
  types.ApiStatus        api_status            = 1;    // API status code
  TcpCbStatus       tcpcb_status   = 2;    // tcpcb status, if api succeeded
}

// TcpCbResponseMsg is batched response to TcpCbRequestMsg
message TcpCbResponseMsg {
  repeated TcpCbResponse    response = 1;    // batched response
}

// TcpCbDeleteRequest is used to delete a tcpcb
message TcpCbDeleteRequest {
  types.ObjectMeta        meta          = 1;    // object meta
  TcpCbKeyHandle     key_or_handle = 2;    // TcpCb key or handle
}

// TcpCbDeleteRequestMsg is used to delete a batch of tcpcbs
message TcpCbDeleteRequestMsg {
  repeated TcpCbDeleteRequest    request = 1;    // batched delete request
}

// TcpCbDeleteResponseMsg is batched response to TcpCbDeleteRequestMsg
message TcpCbDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// TcpCbGetRequest is used to get information about a tcpcb
message TcpCbGetRequest {
  types.ObjectMeta          meta          = 1;    // object meta
  TcpCbKeyHandle            key_or_handle = 2;    // TcpCb key or handle
}

// TcpCbGetRequestMsg is batched GET requests for tcpcbs
message TcpCbGetRequestMsg {
  repeated TcpCbGetRequest    request = 1;    // batched get request
}

// TcpCbStats is the statistics object for each tcpcb
message TcpCbStats {
  uint64                bytes_rcvd                 = 1;
  uint64                pkts_rcvd                  = 2;
  uint64                pages_alloced              = 3;
  uint64                desc_alloced               = 4;
  uint64                debug_num_pkt_to_mem       = 5;
  uint64                debug_num_phv_to_mem       = 6;
  uint32                debug_atomic_delta         = 8;
  uint32                debug_atomic0_incr1247     = 9;
  uint32                debug_atomic1_incr247      = 10;
  uint32                debug_atomic2_incr47       = 11;
  uint32                debug_atomic3_incr47       = 12;
  uint32                debug_atomic4_incr7        = 13;
  uint32                debug_atomic5_incr7        = 14;
  uint32                debug_atomic6_incr7        = 15;
  uint64                bytes_acked                = 16;
  uint64                slow_path_cnt              = 17;
  uint64                serq_full_cnt              = 18;
  uint64                ooo_cnt                    = 19;

  uint64                bytes_sent                 = 10001;
  uint64                pkts_sent                  = 10002;
  uint64                debug_num_phv_to_pkt       = 10003;
  uint64                debug_num_mem_to_pkt       = 10004;
}

// TcpCbGetResponse captures all the information about a tcpcb
// only if api_status indicates success, other fields are valid
message TcpCbGetResponse {
  types.ApiStatus        api_status = 1;    // API status code
  TcpCbSpec         spec       = 2;    // tcpcb configuration
  TcpCbStatus       status     = 3;    // operational state of tcpcb
  TcpCbStats        stats      = 4;    // stats of the tcpcb
}

// TcpCbGetResponseMsg is batched response to TcpCbGetRequestMsg
message TcpCbGetResponseMsg {
  repeated TcpCbGetResponse    response = 1;    // batch get response
}
