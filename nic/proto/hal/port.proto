// {C} Copyright 2017 Pensando Systems Inc. All rights reserved

//------------------------------------------------------------------------------
// protobuf specification for Port HAL APIs
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "kh.proto";
import "delphi.proto";

package port;
option go_package="halproto";

// port service definition
service Port {
  rpc PortCreate  (PortRequestMsg)        returns (PortResponseMsg)        {}
  rpc PortUpdate  (PortRequestMsg)        returns (PortResponseMsg)        {}
  rpc PortDelete  (PortDeleteRequestMsg)  returns (PortDeleteResponseMsg)  {}
  rpc PortGet     (PortGetRequestMsg)     returns (PortGetResponseMsg)     {}
  rpc PortInfoGet (PortInfoGetRequestMsg) returns (PortInfoGetResponseMsg) {}
}

// Port breakout modes
enum PortBreakoutMode {
  PORT_BREAKOUT_MODE_NONE  = 0;
  PORT_BREAKOUT_MODE_4x25G = 1;
  PORT_BREAKOUT_MODE_4x10G = 2;
  PORT_BREAKOUT_MODE_2x50G = 3;
}

// PortOperStatus reflects the current status of the port
enum PortOperStatus {
  PORT_OPER_STATUS_NONE  = 0;
  PORT_OPER_STATUS_UP    = 1;    // port is linked up
  PORT_OPER_STATUS_DOWN  = 2;    // port link status is down
}

// PortAdminState specifies if the port is enabled (admin up) or disabled (admin down)
enum PortAdminState {
  PORT_ADMIN_STATE_NONE = 0;   // port admin state not configured
  PORT_ADMIN_STATE_DOWN = 1;   // port is admin disabled
  PORT_ADMIN_STATE_UP   = 2;   // port is admin enabled
}

// PortType specifies the type of port
enum PortType {
  PORT_TYPE_NONE = 0;  // port type not configured
  PORT_TYPE_ETH  = 1;  // port carries ethernet traffic
  PORT_TYPE_MGMT = 2;  // port carries mgmt ethernet traffic
}

// PortSpeed specifies the speed of the port
enum PortSpeed {
  PORT_SPEED_NONE = 0;     // port speed not configured
  PORT_SPEED_1G   = 1;     // port speed is 1Gbps
  PORT_SPEED_10G  = 2;     // port speed is 10Gbps
  PORT_SPEED_25G  = 3;     // port speed is 25Gbps
  PORT_SPEED_40G  = 4;     // port speed is 40Gbps
  PORT_SPEED_50G  = 5;     // port speed is 50Gbps
  PORT_SPEED_100G = 6;     // port speed is 100Gbps
}

enum PortFecType {
  PORT_FEC_TYPE_NONE = 0;  // Disable FEC
  PORT_FEC_TYPE_FC   = 1;  // Enable FireCode FEC
  PORT_FEC_TYPE_RS   = 2;  // Enable ReedSolomon FEC
}

enum PortXcvrState {
  XCVR_STATE_REMOVED        = 0;
  XCVR_STATE_INSERTED       = 1;
  XCVR_STATE_SPROM_READ     = 2;
  XCVR_STATE_SPROM_READ_ERR = 3;
}

enum PortXcvrPid {
  XCVR_PID_UNKNOWN       = 0;
  XCVR_PID_SFP_10G_CR    = 1;
  XCVR_PID_QSFP_100G_CR4 = 2;
}

message PortXcvrStatus {
  PortXcvrState state = 1;
  PortXcvrPid   pid   = 2;
}

enum PortPauseType {
  PORT_PAUSE_TYPE_NONE = 0;   // Disable Pause
  PORT_PAUSE_TYPE_LINK = 1;   // Link level pause
  PORT_PAUSE_TYPE_PFC  = 2;   // PFC
}

// PortSpec message is used to do add/mod properties of a port
message PortSpec {
  option (delphi.update_event) = true;
  delphi.ObjectMeta      Meta        = 1;

  // key_or_handle is the port number
  kh.PortKeyHandle  key_or_handle    = 2 [(gogoproto.moretags) = "venice:key"];

  PortType          port_type        = 3 [(gogoproto.moretags) = "venice:immutable"];    // port type
  PortAdminState    admin_state      = 4;   // admin status of the port
  PortSpeed         port_speed       = 5;   // speed of the port
  uint32            mac_id           = 6 [(gogoproto.moretags) = "venice:immutable"];    // mac associated with the port
  uint32            mac_ch           = 7 [(gogoproto.moretags) = "venice:immutable"];    // mac channel associated with the port
  uint32            num_lanes        = 8 [(gogoproto.moretags) = "venice:immutable"];    // number of lanes for the port
  PortFecType       fec_type         = 9;   // FEC type
  bool              auto_neg_enable  = 10;  // Enable AutoNeg
  uint32            debounce_time    = 11;  // Debounce time in ms
  uint32            mtu              = 12;  // port mtu
  PortPauseType     pause            = 13;  // MAC pause
  bool              mac_stats_reset  = 14;  // Reset port mac stats. Only during update
}

message PortStatus {
    option (delphi.update_event) = true;
    delphi.ObjectMeta      Meta        = 1;
    kh.PortKeyHandle  key_or_handle    = 2 [(gogoproto.moretags) = "venice:key"];
    PortOperStatus    oper_status      = 3;    // operational state of port
    PortXcvrStatus    xcvr_status      = 4;
}

//------------------------------------------------------------------------------
// PortRequestMsg is batched add or modify port request
//------------------------------------------------------------------------------
message PortRequestMsg {
  repeated PortSpec  request = 1;    // batched request
}

// PortResponse is response to PortSpec
message PortResponse {
  types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  PortStatus       status     = 2;    // status of port
}

//------------------------------------------------------------------------------
// PortResponseMsg is batched response to PortRequestMsg
//------------------------------------------------------------------------------
message PortResponseMsg {
  repeated PortResponse  response = 1;    // batched response
}

// PortDeleteRequest is used to delete a port
message PortDeleteRequest {
  // key_or_handle is the port number
  kh.PortKeyHandle  key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
}

//------------------------------------------------------------------------------
// PortDeleteRequestMsg is used to delete a batch of ports
//------------------------------------------------------------------------------
message PortDeleteRequestMsg {
  repeated PortDeleteRequest request = 1;    // batched delete request
}

//------------------------------------------------------------------------------
// PortDeleteResponse is response to PortDeleteRequest
//------------------------------------------------------------------------------
message PortDeleteResponse {
  types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

//------------------------------------------------------------------------------
// PortDeleteResponseMsg is batched response to PortDeleteRequestMsg
//------------------------------------------------------------------------------
message PortDeleteResponseMsg {
  repeated PortDeleteResponse response = 1;
}

//------------------------------------------------------------------------------
// MacStats consists of MacStatsType and count
//------------------------------------------------------------------------------
enum MacStatsType {
   FRAMES_RX_OK            =  0;
   FRAMES_RX_ALL           =  1;
   FRAMES_RX_BAD_FCS       =  2;
   FRAMES_RX_BAD_ALL       =  3;
   OCTETS_RX_OK            =  4;
   OCTETS_RX_ALL           =  5;
   FRAMES_RX_UNICAST       =  6;
   FRAMES_RX_MULTICAST     =  7;
   FRAMES_RX_BROADCAST     =  8;
   FRAMES_RX_PAUSE         =  9;
   FRAMES_RX_BAD_LENGTH    = 10;
   FRAMES_RX_UNDERSIZED    = 11;
   FRAMES_RX_OVERSIZED     = 12;
   FRAMES_RX_FRAGMENTS     = 13;
   FRAMES_RX_JABBER        = 14;
   FRAMES_RX_PRIPAUSE      = 15;
   FRAMES_RX_STOMPED_CRC   = 16;
   FRAMES_RX_TOO_LONG      = 17;
   FRAMES_RX_VLAN_GOOD     = 18;
   FRAMES_RX_DROPPED       = 19;
   FRAMES_RX_LESS_THAN_64B = 20;
   FRAMES_RX_64B           = 21;
   FRAMES_RX_65B_127B      = 22;
   FRAMES_RX_128B_255B     = 23;
   FRAMES_RX_256B_511B     = 24;
   FRAMES_RX_512B_1023B    = 25;
   FRAMES_RX_1024B_1518B   = 26;
   FRAMES_RX_1519B_2047B   = 27;
   FRAMES_RX_2048B_4095B   = 28;
   FRAMES_RX_4096B_8191B   = 29;
   FRAMES_RX_8192B_9215B   = 30;
   FRAMES_RX_OTHER         = 31;
   FRAMES_TX_OK            = 32;
   FRAMES_TX_ALL           = 33;
   FRAMES_TX_BAD           = 34;
   OCTETS_TX_OK            = 35;
   OCTETS_TX_TOTAL         = 36;
   FRAMES_TX_UNICAST       = 37;
   FRAMES_TX_MULTICAST     = 38;
   FRAMES_TX_BROADCAST     = 39;
   FRAMES_TX_PAUSE         = 40;
   FRAMES_TX_PRIPAUSE      = 41;
   FRAMES_TX_VLAN          = 42;
   FRAMES_TX_LESS_THAN_64B = 43;
   FRAMES_TX_64B           = 44;
   FRAMES_TX_65B_127B      = 45;
   FRAMES_TX_128B_255B     = 46;
   FRAMES_TX_256B_511B     = 47;
   FRAMES_TX_512B_1023B    = 48;
   FRAMES_TX_1024B_1518B   = 49;
   FRAMES_TX_1519B_2047B   = 50;
   FRAMES_TX_2048B_4095B   = 51;
   FRAMES_TX_4096B_8191B   = 52;
   FRAMES_TX_8192B_9215B   = 53;
   FRAMES_TX_OTHER         = 54;
   FRAMES_TX_PRI_0         = 55;
   FRAMES_TX_PRI_1         = 56;
   FRAMES_TX_PRI_2         = 57;
   FRAMES_TX_PRI_3         = 58;
   FRAMES_TX_PRI_4         = 59;
   FRAMES_TX_PRI_5         = 60;
   FRAMES_TX_PRI_6         = 61;
   FRAMES_TX_PRI_7         = 62;
   FRAMES_RX_PRI_0         = 63;
   FRAMES_RX_PRI_1         = 64;
   FRAMES_RX_PRI_2         = 65;
   FRAMES_RX_PRI_3         = 66;
   FRAMES_RX_PRI_4         = 67;
   FRAMES_RX_PRI_5         = 68;
   FRAMES_RX_PRI_6         = 69;
   FRAMES_RX_PRI_7         = 70;
   TX_PRIPAUSE_0_1US_COUNT = 71;
   TX_PRIPAUSE_1_1US_COUNT = 72;
   TX_PRIPAUSE_2_1US_COUNT = 73;
   TX_PRIPAUSE_3_1US_COUNT = 74;
   TX_PRIPAUSE_4_1US_COUNT = 75;
   TX_PRIPAUSE_5_1US_COUNT = 76;
   TX_PRIPAUSE_6_1US_COUNT = 77;
   TX_PRIPAUSE_7_1US_COUNT = 78;
   RX_PRIPAUSE_0_1US_COUNT = 79;
   RX_PRIPAUSE_1_1US_COUNT = 80;
   RX_PRIPAUSE_2_1US_COUNT = 81;
   RX_PRIPAUSE_3_1US_COUNT = 82;
   RX_PRIPAUSE_4_1US_COUNT = 83;
   RX_PRIPAUSE_5_1US_COUNT = 84;
   RX_PRIPAUSE_6_1US_COUNT = 85;
   RX_PRIPAUSE_7_1US_COUNT = 86;
   RX_PAUSE_1US_COUNT      = 87;
   FRAMES_TX_TRUNCATED     = 88;
}

message MacStats {
  MacStatsType   type  = 1;
  uint64         count = 2;
}

// PortStats captures all the statistics of given Port
message PortStats {
    repeated MacStats mac_stats =  1;  // Port MAC stats
}

// PortGetRequest is used to get information about a port
message PortGetRequest {
  // key_or_handle is the port number
  kh.PortKeyHandle  key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
}

//------------------------------------------------------------------------------
// PortGetRequestMsg is batched GET request for ports
//------------------------------------------------------------------------------
message PortGetRequestMsg {
  repeated PortGetRequest  request = 1;    // batched get request
}

// PortGetResponse captures all the information about a port
// only if api_status indicates success, other fields are valid
message PortGetResponse {
  types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  PortSpec         spec       = 2;    // port configuration
  PortStatus       status     = 3;    // status of port
  PortStats        stats      = 4;    // Port statistics
}

//------------------------------------------------------------------------------
// PortGetResponseMsg is the batched response to PortGetRequestMsg
//------------------------------------------------------------------------------
message PortGetResponseMsg {
  repeated PortGetResponse  response = 1;    // batched get response
}

message PortInfoGetRequest {
  // key_or_handle is the port number
  kh.PortKeyHandle  key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
}

message PortInfoGetRequestMsg {
  repeated PortInfoGetRequest  request = 1;    // batched get request
}

message PortInfoSpec {
  // key_or_handle is the port number
  kh.PortKeyHandle          key_or_handle  = 1 [(gogoproto.moretags) = "venice:key"];

  PortType                  port_type      = 3;    // port type
  uint32                    num_lanes      = 4;    // number of lanes for port
  repeated PortBreakoutMode breakout_modes = 5;    // breakout modes supported with this port
}

message PortInfoGetResponse {
  types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  PortInfoSpec     spec       = 2;    // port configuration
}

message PortInfoGetResponseMsg {
  repeated PortInfoGetResponse  response = 1;    // batched get response
}

//------------------------------------------------------------------------------
// port related events
//------------------------------------------------------------------------------
message PortEvent {
  kh.PortKeyHandle  key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
  PortOperStatus    oper_status   = 2;
  PortAdminState    admin_status  = 3;
  string            msg           = 4;    // message with relevant information about the event
}
