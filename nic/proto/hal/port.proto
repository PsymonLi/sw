// {C} Copyright 2017 Pensando Systems Inc. All rights reserved

//------------------------------------------------------------------------------
// protobuf specification for Port HAL APIs
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "kh.proto";

package port;
option go_package="halproto";

// port service definition
service Port {
  rpc PortCreate  (PortRequestMsg)        returns (PortResponseMsg)        {}
  rpc PortUpdate  (PortRequestMsg)        returns (PortResponseMsg)        {}
  rpc PortDelete  (PortDeleteRequestMsg)  returns (PortDeleteResponseMsg)  {}
  rpc PortGet     (PortGetRequestMsg)     returns (PortGetResponseMsg)     {}
  rpc PortInfoGet (PortInfoGetRequestMsg) returns (PortInfoGetResponseMsg) {}
}

// Port breakout modes
enum PortBreakoutMode {
    PORT_BREAKOUT_MODE_NONE  = 0;
    PORT_BREAKOUT_MODE_4x25G = 1;
    PORT_BREAKOUT_MODE_4x10G = 2;
    PORT_BREAKOUT_MODE_2x50G = 3;
}

// PortOperStatus reflects the current status of the port
enum PortOperStatus {
  PORT_OPER_STATUS_NONE  = 0;
  PORT_OPER_STATUS_UP    = 1;    // port is linked up
  PORT_OPER_STATUS_DOWN  = 2;    // port link status is down
}

// PortAdminState specifies if the port is enabled (admin up) or disabled (admin down)
enum PortAdminState {
    PORT_ADMIN_STATE_NONE = 0;   // port admin state not configured
    PORT_ADMIN_STATE_DOWN = 1;   // port is admin disabled
    PORT_ADMIN_STATE_UP   = 2;   // port is admin enabled
}

// PortType specifies the type of port
enum PortType {
    PORT_TYPE_NONE = 0;  // port type not configured
    PORT_TYPE_ETH  = 1;  // port carries ethernet traffic
    PORT_TYPE_MGMT = 2;  // port carries mgmt ethernet traffic
}

// PortSpeed specifies the speed of the port
enum PortSpeed {
    PORT_SPEED_NONE = 0;     // port speed not configured
    PORT_SPEED_1G   = 1;     // port speed is 1Gbps
    PORT_SPEED_10G  = 2;     // port speed is 10Gbps
    PORT_SPEED_25G  = 3;     // port speed is 25Gbps
    PORT_SPEED_40G  = 4;     // port speed is 40Gbps
    PORT_SPEED_50G  = 5;     // port speed is 50Gbps
    PORT_SPEED_100G = 6;     // port speed is 100Gbps
}

enum PortFecType {
    PORT_FEC_TYPE_NONE = 0;  // Disable FEC
    PORT_FEC_TYPE_FC   = 1;  // Enable FireCode FEC
    PORT_FEC_TYPE_RS   = 2;  // Enable ReedSolomon FEC
}

// PortSpec message is used to do add/mod properties of a port
message PortSpec {
  types.ObjectMeta  meta             = 1;    // common object meta

  // key_or_handle is the port number
  kh.PortKeyHandle  key_or_handle    = 2 [(gogoproto.moretags) = "venice:key"];

  PortType          port_type        = 3 [(gogoproto.moretags) = "venice:immutable"];    // port type
  PortAdminState    admin_state      = 4;    // admin status of the port
  PortSpeed         port_speed       = 6;    // speed of the port
  uint32            mac_id           = 7 [(gogoproto.moretags) = "venice:immutable"];    // mac associated with the port
  uint32            mac_ch           = 8 [(gogoproto.moretags) = "venice:immutable"];    // mac channel associated with the port
  uint32            num_lanes        = 9 [(gogoproto.moretags) = "venice:immutable"];    // number of lanes for the port
  PortFecType       fec_type         = 10;   // FEC type
  bool              auto_neg_enable  = 11;   // Enable AutoNeg
  uint32            debounce_time    = 12;   // Debounce time in ms
  uint32            mtu              = 13;   // port mtu
}

message PortStatus {
    PortOperStatus   oper_status  = 1;    // operational state of port
}

//------------------------------------------------------------------------------
// PortRequestMsg is batched add or modify port request
//------------------------------------------------------------------------------
message PortRequestMsg {
  repeated PortSpec  request = 1;    // batched request
}

// PortResponse is response to PortSpec
message PortResponse {
  types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  PortStatus       status     = 2;    // status of port
}

//------------------------------------------------------------------------------
// PortResponseMsg is batched response to PortRequestMsg
//------------------------------------------------------------------------------
message PortResponseMsg {
  repeated PortResponse  response = 1;    // batched response
}

// PortDeleteRequest is used to delete a port
message PortDeleteRequest {
  types.ObjectMeta  meta          = 1;    // object meta

  // key_or_handle is the port number
  kh.PortKeyHandle  key_or_handle = 2 [(gogoproto.moretags) = "venice:key"];
}

//------------------------------------------------------------------------------
// PortDeleteRequestMsg is used to delete a batch of ports
//------------------------------------------------------------------------------
message PortDeleteRequestMsg {
  repeated PortDeleteRequest request = 1;    // batched delete request
}

//------------------------------------------------------------------------------
// PortDeleteResponse is response to PortDeleteRequest
//------------------------------------------------------------------------------
message PortDeleteResponse {
  types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

//------------------------------------------------------------------------------
// PortDeleteResponseMsg is batched response to PortDeleteRequestMsg
//------------------------------------------------------------------------------
message PortDeleteResponseMsg {
  repeated PortDeleteResponse response = 1;
}

// PortStats captures all the statistics of given Port
message PortStats {
    MacStats mac_stats            =  1;  // Port MAC stats
}

message MacStats {
   uint64 frames_rx_ok            =  1;
   uint64 frames_rx_all           =  2;
   uint64 frames_rx_bad_fcs       =  3;
   uint64 frames_rx_bad_all       =  4;
   uint64 octets_rx_ok            =  5;
   uint64 octets_rx_all           =  6;
   uint64 frames_rx_unicast       =  7;
   uint64 frames_rx_multicast     =  8;
   uint64 frames_rx_broadcast     =  9;
   uint64 frames_rx_pause         = 10;
   uint64 frames_rx_bad_length    = 11;
   uint64 frames_rx_undersized    = 12;
   uint64 frames_rx_oversized     = 13;
   uint64 frames_rx_fragments     = 14;
   uint64 frames_rx_jabber        = 15;
   uint64 frames_rx_pripause      = 16;
   uint64 frames_rx_stomped_crc   = 17;
   uint64 frames_rx_too_long      = 18;
   uint64 frames_rx_vlan_good     = 19;
   uint64 frames_rx_dropped       = 20;
   uint64 frames_rx_less_than_64b = 21;
   uint64 frames_rx_64b           = 22;
   uint64 frames_rx_65b_127b      = 23;
   uint64 frames_rx_128b_255b     = 24;
   uint64 frames_rx_256b_511b     = 25;
   uint64 frames_rx_512b_1023b    = 26;
   uint64 frames_rx_1024b_1518b   = 27;
   uint64 frames_rx_1519b_2047b   = 28;
   uint64 frames_rx_2048b_4095b   = 29;
   uint64 frames_rx_4096b_8191b   = 30;
   uint64 frames_rx_8192b_9215b   = 31;
   uint64 frames_rx_other         = 32;
   uint64 frames_tx_ok            = 33;
   uint64 frames_tx_all           = 34;
   uint64 frames_tx_bad           = 35;
   uint64 octets_tx_ok            = 36;
   uint64 octets_tx_total         = 37;
   uint64 frames_tx_unicast       = 38;
   uint64 frames_tx_multicast     = 39;
   uint64 frames_tx_broadcast     = 40;
   uint64 frames_tx_pause         = 41;
   uint64 frames_tx_pripause      = 42;
   uint64 frames_tx_vlan          = 43;
   uint64 frames_tx_less_than_64b = 44;
   uint64 frames_tx_64b           = 45;
   uint64 frames_tx_65b_127b      = 46;
   uint64 frames_tx_128b_255b     = 47;
   uint64 frames_tx_256b_511b     = 48;
   uint64 frames_tx_512b_1023b    = 49;
   uint64 frames_tx_1024b_1518b   = 50;
   uint64 frames_tx_1519b_2047b   = 51;
   uint64 frames_tx_2048b_4095b   = 52;
   uint64 frames_tx_4096b_8191b   = 53;
   uint64 frames_tx_8192b_9215b   = 54;
   uint64 frames_tx_other         = 55;
   uint64 frames_tx_pri_0         = 56;
   uint64 frames_tx_pri_1         = 57;
   uint64 frames_tx_pri_2         = 58;
   uint64 frames_tx_pri_3         = 59;
   uint64 frames_tx_pri_4         = 60;
   uint64 frames_tx_pri_5         = 61;
   uint64 frames_tx_pri_6         = 62;
   uint64 frames_tx_pri_7         = 63;
   uint64 frames_rx_pri_0         = 64;
   uint64 frames_rx_pri_1         = 65;
   uint64 frames_rx_pri_2         = 66;
   uint64 frames_rx_pri_3         = 67;
   uint64 frames_rx_pri_4         = 68;
   uint64 frames_rx_pri_5         = 69;
   uint64 frames_rx_pri_6         = 70;
   uint64 frames_rx_pri_7         = 71;
   uint64 tx_pripause_0_1us_count = 72;
   uint64 tx_pripause_1_1us_count = 73;
   uint64 tx_pripause_2_1us_count = 74;
   uint64 tx_pripause_3_1us_count = 75;
   uint64 tx_pripause_4_1us_count = 76;
   uint64 tx_pripause_5_1us_count = 77;
   uint64 tx_pripause_6_1us_count = 78;
   uint64 tx_pripause_7_1us_count = 79;
   uint64 rx_pripause_0_1us_count = 80;
   uint64 rx_pripause_1_1us_count = 81;
   uint64 rx_pripause_2_1us_count = 82;
   uint64 rx_pripause_3_1us_count = 83;
   uint64 rx_pripause_4_1us_count = 84;
   uint64 rx_pripause_5_1us_count = 85;
   uint64 rx_pripause_6_1us_count = 86;
   uint64 rx_pripause_7_1us_count = 87;
   uint64 rx_pause_1us_count      = 88;
   uint64 frames_tx_truncated     = 89;
}

// PortGetRequest is used to get information about a port
message PortGetRequest {
  types.ObjectMeta  meta          = 1;    // object meta

  // key_or_handle is the port number
  kh.PortKeyHandle  key_or_handle = 2 [(gogoproto.moretags) = "venice:key"];
}

//------------------------------------------------------------------------------
// PortGetRequestMsg is batched GET request for ports
//------------------------------------------------------------------------------
message PortGetRequestMsg {
  repeated PortGetRequest  request = 1;    // batched get request
}

// PortGetResponse captures all the information about a port
// only if api_status indicates success, other fields are valid
message PortGetResponse {
  types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  PortSpec         spec       = 2;    // port configuration
  PortStatus       status     = 3;    // status of port
  PortStats        stats      = 4;    // Port statistics
}

//------------------------------------------------------------------------------
// PortGetResponseMsg is the batched response to PortGetRequestMsg
//------------------------------------------------------------------------------
message PortGetResponseMsg {
  repeated PortGetResponse  response = 1;    // batched get response
}

message PortInfoGetRequest {
  types.ObjectMeta  meta          = 1;    // object meta

  // key_or_handle is the port number
  kh.PortKeyHandle  key_or_handle = 2 [(gogoproto.moretags) = "venice:key"];
}

message PortInfoGetRequestMsg {
  repeated PortInfoGetRequest  request = 1;    // batched get request
}

message PortInfoSpec {
  types.ObjectMeta          meta           = 1;    // common object meta

  // key_or_handle is the port number
  kh.PortKeyHandle          key_or_handle  = 2 [(gogoproto.moretags) = "venice:key"];

  uint32                    num_lanes      = 3;    // number of lanes for port
  repeated PortBreakoutMode breakout_modes = 4;    // breakout modes supported with this port
}

message PortInfoGetResponse {
  types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  PortInfoSpec     spec       = 2;    // port configuration
}

message PortInfoGetResponseMsg {
  repeated PortInfoGetResponse  response = 1;    // batched get response
}

