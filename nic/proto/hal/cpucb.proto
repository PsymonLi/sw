//------------------------------------------------------------------------------
// protobuf specification for cpucb
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";

package cpucb;
option go_package="halproto";

// The cpu cb service definition
service CpuCb {
  rpc CpuCbCreate (CpuCbRequestMsg) returns (CpuCbResponseMsg) {}
  rpc CpuCbUpdate (CpuCbRequestMsg) returns (CpuCbResponseMsg) {}
  rpc CpuCbDelete (CpuCbDeleteRequestMsg) returns (CpuCbDeleteResponseMsg) {}
  rpc CpuCbGet (CpuCbGetRequestMsg) returns (CpuCbGetResponseMsg) {}
}

// CpuCbKeyHandle is used to operate on a cpu_cb either by its key or handle
message CpuCbKeyHandle {
  oneof key_or_handle {
    uint32     cpucb_id          = 1;    // unique cpu_cb id allocated by app
    fixed64    cpucb_handle      = 2;    // cpu_cb handle returned by HAL
  }
}

// CpuCbSpec captures all the cpu_cb level configuration
message CpuCbSpec {
  CpuCbKeyHandle        key_or_handle              = 1;    // cpu_cb being created/updated
  uint32                debug_dol                  = 2;
  uint64                descr_addr_oob_count       = 3;
  uint64                total_tx_pkts              = 4;
  uint64                total_rx_pkts              = 5;
  uint64                rx_qfull_drop_errors       = 6;
  uint64                tx_sem_full_drops          = 7;
}

// CpuCbRequestMsg is batched add or modify cpucb request
message CpuCbRequestMsg {
  repeated CpuCbSpec    request = 1;    // batched request
}

// CpuCbStatus is the operational status of a given cpucb
message CpuCbStatus {
  fixed64    cpucb_handle     = 1;    // id of cpucb returned by HAL
}

// CpuCbResponse is response to CpuCbSpec
message CpuCbResponse {
  types.ApiStatus        api_status            = 1;    // API status code
  CpuCbStatus       cpucb_status   = 2;    // cpucb status, if api succeeded
}

// CpuCbResponseMsg is batched response to CpuCbRequestMsg
message CpuCbResponseMsg {
  repeated CpuCbResponse    response = 1;    // batched response
}

// CpuCbDeleteRequest is used to delete a cpucb
message CpuCbDeleteRequest {
  CpuCbKeyHandle     key_or_handle = 1;    // CpuCb key or handle
}

// CpuCbDeleteRequestMsg is used to delete a batch of cpucbs
message CpuCbDeleteRequestMsg {
  repeated CpuCbDeleteRequest    request = 1;    // batched delete request
}

message CpuCbDeleteResponse {
  types.ApiStatus    api_status = 1;    // API status code
}

// CpuCbDeleteResponseMsg is batched response to CpuCbDeleteRequestMsg
message CpuCbDeleteResponseMsg {
  repeated CpuCbDeleteResponse response = 1;
}

// CpuCbGetRequest is used to get information about a cpucb
message CpuCbGetRequest {
  CpuCbKeyHandle            key_or_handle = 1;    // CpuCb key or handle
}

// CpuCbGetRequestMsg is batched GET requests for cpucbs
message CpuCbGetRequestMsg {
  repeated CpuCbGetRequest    request = 1;    // batched get request
}

// CpuCbStats is the statistics object for each cpucb
message CpuCbStats {
}

// CpuCbGetResponse captures all the information about a cpucb
// only if api_status indicates success, other fields are valid
message CpuCbGetResponse {
  types.ApiStatus        api_status = 1;    // API status code
  CpuCbSpec         spec       = 2;    // cpucb configuration
  CpuCbStatus       status     = 3;    // operational state of cpucb
  CpuCbStats        stats      = 4;    // stats of the cpucb
}

// CpuCbGetResponseMsg is batched response to CpuCbGetRequestMsg
message CpuCbGetResponseMsg {
  repeated CpuCbGetResponse    response = 1;    // batch get response
}
