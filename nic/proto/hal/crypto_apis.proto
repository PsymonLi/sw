//------------------------------------------------------------------------------
// protobuf specification for Crypto Asym APIs
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";

package cryptoapis;
option go_package="halproto";

service CryptoApis {
    rpc CryptoApiInvoke (CryptoApiRequestMsg) returns (CryptoApiResponseMsg) {}
}

enum CryptoApiType {
  ASYMAPI_ECC_POINT_MUL_FP              = 0;
  ASYMAPI_ECDSA_SIG_GEN_FP              = 1;
  ASYMAPI_ECDSA_SIG_VERIFY_FP           = 2;
  ASYMAPI_RSA_ENCRYPT                   = 3;
  ASYMAPI_RSA_DECRYPT                   = 4;
  ASYMAPI_RSA_CRT_DECRYPT               = 5;
}

message ECCPoint {
  bytes         x                       = 1;
  bytes         y                       = 2;
}

message CryptoAsymApiECCDomainParamsFp {
  uint32        KeySize                 = 1;
  bytes         p                       = 2;
  bytes         a                       = 3;
  bytes         b                       = 4;
  ECCPoint      G                       = 5;
  bytes         n                       = 6;
//  bytes         h                       = 7;
}

//  ECC Point Multiplication 

message CryptoAsymApiReqECCPointMulFp {
  CryptoAsymApiECCDomainParamsFp    ecc_domain_params   = 1;
  ECCPoint                          ecc_point           = 2;
  bytes                             k                   = 3;
}
message CryptoAsymApiRespECCPointMulFp {
  ECCPoint                          Q                   = 1;
}


// ESCDA Signature Generation
message CryptoAsymApiReqECDSASignatureGenFp {
  CryptoAsymApiECCDomainParamsFp    ecc_domain_params   = 1;
  bytes                             da                  = 2;
  bytes                             k                   = 3;
  bytes                             h                   = 4;
}
message CryptoAsymApiRespECDSASignatureGenFp {
  bytes                             r                   = 1;
  bytes                             s                   = 2;
}

// ECDSA Signature Verification
message CryptoAsymApiReqECDSASignatureVerifyFp {
  CryptoAsymApiECCDomainParamsFp    ecc_domain_params   = 1;
  ECCPoint                          Q                   = 2;
  bytes                             r                   = 3;
  bytes                             s                   = 4;
  bytes                             h                   = 5;
}

// RSA Encryption
message CryptoAsymApiReqRSAEncrypt {
  uint32                            KeySize             = 1;
  bytes                             mod_n               = 2;
  bytes                             e                   = 3;
  bytes                             plain_text          = 4;
}

message CryptoAsymApiRespRSAEncrypt {
  bytes                             cipher_text         = 1;
}

// RSA Decryption
message CryptoAsymApiReqRSADecrypt {
  uint32                            KeySize             = 1;
  bytes                             mod_n               = 2;
  bytes                             d                   = 3;
  bytes                             cipher_text         = 4;
}

message CryptoAsymApiRespRSADecrypt {
  bytes                             plain_text         = 1;
}

// RSA CRT Decryption
message CryptoAsymApiReqRSACRTDecrypt {
  uint32                            KeySize             = 1;
  bytes                             p                   = 2;
  bytes                             q                   = 3;
  bytes                             dp                  = 4;
  bytes                             dq                  = 5;
  bytes                             qinv                = 6;
  bytes                             cipher_text         = 7;
}

message CryptoAsymApiRespRSACRTDecrypt {
  bytes                             plain_text         = 1;
}


// Top Level Request and Response message definition

message CryptoApiRequest {
  CryptoApiType                     api_type            = 1;
  oneof CryptoApiReq {
    CryptoAsymApiReqECCPointMulFp   ecc_point_mul_fp    = 2;
    CryptoAsymApiReqECDSASignatureGenFp     ecdsa_sig_gen_fp        = 3;
    CryptoAsymApiReqECDSASignatureVerifyFp  ecdsa_sig_verify_fp     = 4;
    CryptoAsymApiReqRSAEncrypt      rsa_encrypt         = 5;
    CryptoAsymApiReqRSADecrypt      rsa_decrypt         = 6;
    CryptoAsymApiReqRSACRTDecrypt   rsa_crt_decrypt     = 7;
  }
}

message CryptoApiResponse {
  types.ApiStatus                   api_status          = 1;
  oneof CryptoApiResp {
    CryptoAsymApiRespECCPointMulFp  ecc_point_mul_fp    = 2;
    CryptoAsymApiRespECDSASignatureGenFp    ecdsa_sig_gen_fp        = 3;
    CryptoAsymApiRespRSAEncrypt     rsa_encrypt         = 4;
    CryptoAsymApiRespRSADecrypt     rsa_decrypt         = 5;
    CryptoAsymApiRespRSACRTDecrypt  rsa_crt_decrypt     = 6;
  }
}

message CryptoApiRequestMsg {
    repeated CryptoApiRequest       request             = 1;
}

message CryptoApiResponseMsg {
    repeated CryptoApiResponse      response            = 1;
}
