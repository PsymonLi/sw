//------------------------------------------------------------------------------
// protobuf specification for Crypto Asym APIs
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
//import public "gogo.proto";
//import "google/protobuf/descriptor.proto";

package cryptoapis;
option go_package="halproto";

//extend google.protobuf.EnumValueOptions {
//  string name = 61234;
//}

service CryptoApis {
    rpc CryptoApiInvoke (CryptoApiRequestMsg) returns (CryptoApiResponseMsg) {}
}

// Types of Crypto Hash algos
enum CryptoApiHashType {
    CRYPTOAPI_HASHTYPE_NONE = 0 [(gogoproto.enumvalue_customname) = "none"];
    CRYPTOAPI_HASHTYPE_MD5 = 1 [(gogoproto.enumvalue_customname) = "MD5"];
    CRYPTOAPI_HASHTYPE_SHA1 = 2 [(gogoproto.enumvalue_customname) = "SHA1"];
    CRYPTOAPI_HASHTYPE_SHA224 = 3 [(gogoproto.enumvalue_customname) = "SHA224"];
    CRYPTOAPI_HASHTYPE_SHA256 = 4 [(gogoproto.enumvalue_customname) = "SHA256"];
    CRYPTOAPI_HASHTYPE_SHA384 = 5 [(gogoproto.enumvalue_customname) = "SHA384"];
    CRYPTOAPI_HASHTYPE_SHA512 = 6 [(gogoproto.enumvalue_customname) = "SHA512"];
    CRYPTOAPI_HASHTYPE_SHA512_224 = 7 [(gogoproto.enumvalue_customname) = "SHA512_224"];
    CRYPTOAPI_HASHTYPE_SHA512_256 = 8 [(gogoproto.enumvalue_customname) = "SHA512_256"];
    CRYPTOAPI_HASHTYPE_HMAC_MD5 = 9 [(gogoproto.enumvalue_customname) = "HMAC_MD5"];
    CRYPTOAPI_HASHTYPE_HMAC_SHA1 = 10 [(gogoproto.enumvalue_customname) = "HMAC_SHA1"];
    CRYPTOAPI_HASHTYPE_HMAC_SHA224 = 11 [(gogoproto.enumvalue_customname) = "HMAC_SHA224"];
    CRYPTOAPI_HASHTYPE_HMAC_SHA256 = 12 [(gogoproto.enumvalue_customname) = "HMAC_SHA256"];
    CRYPTOAPI_HASHTYPE_HMAC_SHA384 = 13 [(gogoproto.enumvalue_customname) = "HMAC_SHA384"];
    CRYPTOAPI_HASHTYPE_HMAC_SHA512 = 14 [(gogoproto.enumvalue_customname) = "HMAC_SHA512"];
}

enum CryptoApiType {
  ASYMAPI_ECC_POINT_MUL_FP              = 0;
  ASYMAPI_ECDSA_SIG_GEN_FP              = 1;
  ASYMAPI_ECDSA_SIG_VERIFY_FP           = 2;
  ASYMAPI_RSA_ENCRYPT                   = 3;
  ASYMAPI_RSA_DECRYPT                   = 4;
  ASYMAPI_RSA_CRT_DECRYPT               = 5;
  SYMMAPI_HASH_GENERATE                 = 6;
  SYMMAPI_HASH_VERIFY                   = 7;
  ASYMAPI_RSA_SIG_GEN                   = 8;
  ASYMAPI_RSA_SIG_VERIFY                = 9;
  ASYMAPI_SETUP_PRIV_KEY                = 10;
  ASYMAPI_SETUP_CERT                    = 11;
}

enum UpdateType {
    ADD_UPDATE = 0;
    DELETE     = 1;
}

message ECCPoint {
  bytes         x                       = 1;
  bytes         y                       = 2;
}

message CryptoAsymApiECCDomainParamsFp {
  uint32        KeySize                 = 1;
  bytes         p                       = 2;
  bytes         a                       = 3;
  bytes         b                       = 4;
  ECCPoint      G                       = 5;
  bytes         n                       = 6;
//  bytes         h                       = 7;
}

//  ECC Point Multiplication 

message CryptoAsymApiReqECCPointMulFp {
  CryptoAsymApiECCDomainParamsFp    ecc_domain_params   = 1;
  ECCPoint                          ecc_point           = 2;
  bytes                             k                   = 3;
}
message CryptoAsymApiRespECCPointMulFp {
  ECCPoint                          Q                   = 1;
}


// ESCDA Signature Generation
message CryptoAsymApiReqECDSASignatureGenFp {
  CryptoAsymApiECCDomainParamsFp    ecc_domain_params   = 1;
  bytes                             da                  = 2;
  bytes                             k                   = 3;
  bytes                             h                   = 4;
  int32                             key_idx             = 5;
}
message CryptoAsymApiRespECDSASignatureGenFp {
  bytes                             r                   = 1;
  bytes                             s                   = 2;
}

// ECDSA Signature Verification
message CryptoAsymApiReqECDSASignatureVerifyFp {
  CryptoAsymApiECCDomainParamsFp    ecc_domain_params   = 1;
  ECCPoint                          Q                   = 2;
  bytes                             r                   = 3;
  bytes                             s                   = 4;
  bytes                             h                   = 5;
}

// RSA Encryption
message CryptoAsymApiReqRSAEncrypt {
  uint32                            KeySize             = 1;
  bytes                             mod_n               = 2;
  bytes                             e                   = 3;
  bytes                             plain_text          = 4;
  bool                              async_en            = 5;
}

message CryptoAsymApiRespRSAEncrypt {
  bytes                             cipher_text         = 1;
}

// RSA Decryption
message CryptoAsymApiReqRSADecrypt {
  uint32                            KeySize             = 1;
  bytes                             mod_n               = 2;
  bytes                             d                   = 3;
  bytes                             cipher_text         = 4;
}

message CryptoAsymApiRespRSADecrypt {
  bytes                             plain_text         = 1;
}

// RSA CRT Decryption
message CryptoAsymApiReqRSACRTDecrypt {
  uint32                            KeySize             = 1;
  bytes                             p                   = 2;
  bytes                             q                   = 3;
  bytes                             dp                  = 4;
  bytes                             dq                  = 5;
  bytes                             qinv                = 6;
  bytes                             cipher_text         = 7;
  int32                             key_idx             = 8;
}

message CryptoAsymApiRespRSACRTDecrypt {
  bytes                             plain_text         = 1;
}

// Asymmetric Private Key Setup
// Temp API as a workaround until securemon is ready
message CryptoAsymApiReqSetupPrivateKey {
    string                          key                 = 1;
}

message CryptoAsymApiRespECDSAKeyInfo {
    int32                           sign_key_idx        = 1;
}

message CryptoAsymApiRespRSAKeyInfo {
    int32                           sign_key_idx        = 1;
    int32                           decrypt_key_idx     = 2;
}

message CryptoAsymApiRespSetupPrivateKey {
    types.CryptoAsymKeyType             key_type            = 1;
    oneof KeyInfo {
        CryptoAsymApiRespECDSAKeyInfo   ecdsa_key_info  = 2;
        CryptoAsymApiRespRSAKeyInfo     rsa_key_info    = 3;
    }
}

// Certificate Setup
message CryptoAsymApiReqSetupCert {
    UpdateType                      update_type         = 1;    // Add/Update delete
    int32                           cert_id             = 2;    // Cert id
    string                          body                = 3;    // Body
    int32                           next_cert_id        = 5;    // Next Cert in the chain
}

message CryptoAsymApiRespSetupCert {
}

// RSA Signature Generation
message CryptoAsymApiReqRSASignatureGen {
  uint32                            KeySize             = 1;
  bytes                             mod_n               = 2;
  bytes                             d                   = 3;
  bytes                             h                   = 4;
  int32                             key_idx             = 5;                       
}

message CryptoAsymApiRespRSASignatureGen {
  bytes                             s                   = 1;
}

// RSA Signature Verification
message CryptoAsymApiReqRSASignatureVerify {
  uint32                            KeySize             = 1;
  bytes                             mod_n               = 2;
  bytes                             e                   = 3;
  bytes                             h                   = 4;
  bytes                             s                   = 5;
}

// Crypto Hash digest generate request
message CryptoSymmApiReqHashGenerate {
  CryptoApiHashType                hashtype            = 1;
  bytes                            key                 = 2;
  int32                            key_len             = 3;
  bytes                            data                = 4;
  int32                            data_len            = 5;
  int32                            digest_len          = 6;
}

message CryptoSymmApiRespHashGenerate {
  bytes                            digest              = 1;
}

// Crypto Hash digest verify request
message CryptoSymmApiReqHashVerify {
  CryptoApiHashType                hashtype            = 1;
  bytes                            key                 = 2;
  int32                            key_len             = 3;
  bytes                            data                = 4;
  int32                            data_len            = 5;
  bytes                            digest              = 6;
  int32                            digest_len          = 7;
}

//message CryptoSymmApiRespHashVerify {
//  bytes                            digest              = 1;
//}

// Top Level Request and Response message definition

message CryptoApiRequest {
  CryptoApiType                     api_type            = 1;
  oneof CryptoApiReq {
    CryptoAsymApiReqECCPointMulFp   ecc_point_mul_fp    = 2;
    CryptoAsymApiReqECDSASignatureGenFp     ecdsa_sig_gen_fp        = 3;
    CryptoAsymApiReqECDSASignatureVerifyFp  ecdsa_sig_verify_fp     = 4;
    CryptoAsymApiReqRSAEncrypt      rsa_encrypt         = 5;
    CryptoAsymApiReqRSADecrypt      rsa_decrypt         = 6;
    CryptoAsymApiReqRSACRTDecrypt   rsa_crt_decrypt     = 7;
    CryptoSymmApiReqHashGenerate    hash_generate       = 8;
    CryptoSymmApiReqHashVerify      hash_verify         = 9;
    CryptoAsymApiReqRSASignatureGen rsa_sig_gen         = 10;
    CryptoAsymApiReqRSASignatureVerify  rsa_sig_verify  = 11;
    CryptoAsymApiReqSetupPrivateKey setup_priv_key      = 12;
    CryptoAsymApiReqSetupCert       setup_cert          = 13;
  }
}

message CryptoApiResponse {
  types.ApiStatus                   api_status          = 1;
  oneof CryptoApiResp {
    CryptoAsymApiRespECCPointMulFp  ecc_point_mul_fp    = 2;
    CryptoAsymApiRespECDSASignatureGenFp    ecdsa_sig_gen_fp        = 3;
    CryptoAsymApiRespRSAEncrypt     rsa_encrypt         = 4;
    CryptoAsymApiRespRSADecrypt     rsa_decrypt         = 5;
    CryptoAsymApiRespRSACRTDecrypt  rsa_crt_decrypt     = 6;
    CryptoSymmApiRespHashGenerate   hash_generate       = 7;
    CryptoAsymApiRespRSASignatureGen    rsa_sig_gen     = 8;
    CryptoAsymApiRespSetupPrivateKey setup_priv_key     = 9;
    CryptoAsymApiRespSetupCert       setup_cert         = 10;
  }
}

message CryptoApiRequestMsg {
    repeated CryptoApiRequest       request             = 1;
}

message CryptoApiResponseMsg {
    repeated CryptoApiResponse      response            = 1;
}
