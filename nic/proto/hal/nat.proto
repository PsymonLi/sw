//------------------------------------------------------------------------------
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved
//
// protobuf specification for NAT
//------------------------------------------------------------------------------

syntax = "proto3";
import "types.proto";
import "kh.proto";

package nat;
option go_package="halproto";

// The NAT service definition
service Nat {
  // NAT policy related APIs
  rpc NatPolicyCreate (NatPolicyRequestMsg) returns (NatPolicyResponseMsg) {}
  rpc NatPolicyUpdate (NatPolicyRequestMsg) returns (NatPolicyResponseMsg) {}
  rpc NatPolicyDelete (NatPolicyDeleteRequestMsg) returns (NatPolicyDeleteResponseMsg) {}
  rpc NatPolicyGet (NatPolicyGetRequestMsg) returns (NatPolicyGetResponseMsg) {}

  // NAT-VPN mappings related APIs
  rpc NatVpnMappingCreate (NatVpnMappingRequestMsg) returns (NatVpnMappingResponseMsg) {}
  rpc NatVpnMappingGet (NatVpnMappingGetRequestMsg) returns (NatVpnMappingGetResponseMsg) {}
}

// types of NAT actions supported
enum NatAction {
  NAT_TYPE_NONE                 = 0;
  NAT_TYPE_STATIC_ADDRESS       = 1;
  NAT_TYPE_DYNAMIC_ADDRESS      = 2;
  NAT_TYPE_DYNAMIC_ADDRESS_PORT = 3;
}

// NAT pool definition
// NOTE: addresses inside the NAT pool are "owned" by the device, so device is
// expected to advertise the routes for the same and respond to ARP requests
message NatPool {
  repeated types.Address   address    = 1;    // NAT address range(s)
  types.L4PortRange        port_range = 2;    // port range (for NAPT)
}

// NatRuleSpec is the user intent for the NAT rule
message NatRuleSpec {
  uint64                         rule_id         = 1;    // rule id

  // NAT rule match conditions
  repeated types.IPAddressObj    src_address     = 2;    // source address(es)
  repeated uint32                src_sg          = 3;    // source security group(s)
  repeated types.IPAddressObj    dst_address     = 4;    // destination address(es)
  repeated uint32                dst_sg          = 5;    // destination security group(s)
  repeated types.L4PortRange     dst_port_range  = 6;    // dst port range
  repeated types.L4PortRange     src_port_range  = 7;    // src port range

  // NAT rule action related attributes
  NatAction                      src_nat_action  = 8;    // action related to the rule
  NatAction                      dst_nat_action  = 9;    // action related to the rule
  NatPool                        src_nat_pool    = 10;   // src NAT pool
  NatPool                        dst_nat_pool    = 11;   // dst NAT pool
}

// NatPolicySpec captures the NAT policy which is a group of NAT rules
message NatPolicySpec {
  types.ObjectMeta         meta          = 1; // object meta
  kh.NatPolicyKeyHandle    key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];  // unique key
  repeated NatRuleSpec     rules         = 3; // list of NAT rules
}

// NatPolicyRequestMsg is the batched NAT policy
message NatPolicyRequestMsg {
  repeated NatPolicySpec    request = 1;    // batched request
}

// NatPolicyStatus is the operational status of NatPolicySpec
message NatPolicyStatus {
  fixed64    nat_policy_handle = 1;    // id of the policy returnd by HAL
}

// NatPolicyResponse is response to NatPolicySpec
message NatPolicyResponse {
  types.ApiStatus    api_status    = 1 [(gogoproto.moretags) = "venice:api_status"];  // API status code
  NatPolicyStatus    policy_status = 2;    // operational status
}

// NatPolicyResponseMsg is the batched NatPolicyResponse
message NatPolicyResponseMsg {
  repeated NatPolicyResponse    response = 1;    // batched response
}

// NatPolicyDeleteRequest is used to delete a NAT policy
message NatPolicyDeleteRequest {
  types.ObjectMeta         meta          = 1;    // object meta
  kh.NatPolicyKeyHandle    key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// NatPolicyDeleteRequestMsg is batched NatPolicyDeleteRequest
message NatPolicyDeleteRequestMsg {
  repeated NatPolicyDeleteRequest    request = 1;    // batched request
}

// NatPolicyDeleteResponse is response to NatPolicyDeleteRequest
message NatPolicyDeleteResponse {
  types.ApiStatus api_status = 1 [(gogoproto.moretags) = "venice:api_status"]; // API status code
}

// NatPolicyDeleteResponseMsg is batched response to NatPolicyDeleteRequestMsg
message NatPolicyDeleteResponseMsg {
  repeated NatPolicyDeleteResponse    response = 1;    // batched response
}

// NatPolicyGetRequest is used to get information about a NAT policy
message NatPolicyGetRequest {
  types.ObjectMeta         meta          = 1; // object meta
  kh.NatPolicyKeyHandle    key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];  // unique key
}

// NatPolicyGetRequestMsg is batched GET request
message NatPolicyGetRequestMsg {
  repeated NatPolicyGetRequest    request = 1;    // batched get request
}

// per rule stats
message NatRuleStats {
  uint32    num_tcp_sessions   = 1;
  uint32    num_udp_sessions   = 2;
  uint32    num_other_sessions = 3;
}

// per policy stats
message NatPolicyStats {
  repeated NatRuleStats    stats = 1;    // batched rule stats
}

// NatPolicyGetResponse catpures all information about NAT policy
message NatPolicyGetResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"]; // API status code
  NatPolicySpec      spec       = 2;    // config
  NatPolicyStatus    status     = 3;    // operational state
  NatPolicyStats     stats      = 4;    // stats
}

// NatPolicyGetResponseMsg is batched response to NatPolicyGetRequestMsg
message NatPolicyGetResponseMsg {
  repeated NatPolicyGetResponse    response = 1;
}

// NatVpnMappingSpec is the user intent for the NAT-VPN mapping
message NatVpnMappingSpec {
  types.ObjectMeta             meta            = 1;    // common object meta
  kh.NatVpnMappingKeyHandle    key_or_handle   = 2 [(gogoproto.moretags) = "venice:\"key\""];    // key or handle of this object
}

// NatVpnMappingRequestMsg is the batched add or modify of NAT VPN mapping request
message NatVpnMappingRequestMsg {
  repeated NatVpnMappingSpec    request = 1;    // batched request
}

// NatVpnMappingStatus reflects the current operational status of a NAT VPN mapping
message NatVpnMappingStatus  {
  fixed64    handle      = 1;    // id of the NAT VPN mapping returned by HAL
  kh.Svc     svc_mapping = 2;    // NAT VPN mapping allocated for the service
}

// NatVpnMappingResponse is the response to NatVpnMappingSpec
message NatVpnMappingResponse {
  types.ApiStatus        api_status = 1 [(gogoproto.jsontag) = "api_status"];  // API status code
  NatVpnMappingStatus    status     = 2;
}

// NatVpnMappingResponseMsg is batched response to NatVpnMappingRequestMsg
message NatVpnMappingResponseMsg {
  repeated NatVpnMappingResponse    response = 1;    // batched response
}

// NatVpnMappingGetRequest is used to get information about a NAT VPN mapping
message NatVpnMappingGetRequest {
  types.ObjectMeta             meta          = 1;    // object meta
  kh.NatVpnMappingKeyHandle    key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// NatVpnMappingGetRequestMsg is batched GET request for NAT VPN mappings
message NatVpnMappingGetRequestMsg {
  repeated NatVpnMappingGetRequest    request = 1;    // batched get request
}

// NatVpnMappingStats is the statistics object for each NAT VPN mapping
message NatVpnMappingStats {
  uint64    rx_bytes               = 1;
  uint64    rx_packets             = 2;
  uint64    tx_bytes               = 3;
  uint64    tx_packets             = 4;
  uint64    rx_bytes_dropped       = 5;
  uint64    rx_packets_dropped     = 6;
  uint64    tx_bytes_dropped       = 7;
  uint64    tx_packets_dropped     = 8;
  uint32    num_tcp_sessions       = 9;
  uint32    num_udp_sessions       = 10;
  uint32    num_other_sessions     = 11;
  uint32    num_active_connections = 12;
}

// NatVpnMappingGetResponse reflects all the information about a NAT VPN mapping
message NatVpnMappingGetResponse {
  types.ApiStatus        api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  NatVpnMappingSpec      spec       = 2;    // NAT VPN mapping config
  NatVpnMappingStatus    status     = 3;    // NAT VPN mapping operational status
  NatVpnMappingStats     stats      = 4;    // NAT VPN mapping stats, if any
}

// NatVpnMappingGetResponseMsg is batched response to NatVpnMappingGetRequestMsg
message NatVpnMappingGetResponseMsg {
  repeated NatVpnMappingGetResponse    response   = 1;    // batched get response
}
