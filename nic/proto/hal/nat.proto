//------------------------------------------------------------------------------
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved
//
// protobuf specification for NAT
//------------------------------------------------------------------------------

syntax = "proto3";
import "types.proto";
import "kh.proto";

package nat;
option go_package="halproto";

// The NAT service definition
service Nat {
  // NAT pool related APIs
  rpc NatPoolCreate (NatPoolRequestMsg) returns (NatPoolResponseMsg) {}
  rpc NatPoolUpdate (NatPoolRequestMsg) returns (NatPoolResponseMsg) {}
  rpc NatPoolDelete (NatPoolDeleteRequestMsg) returns (NatPoolDeleteResponseMsg) {}
  rpc NatPoolGet (NatPoolGetRequestMsg) returns (NatPoolGetResponseMsg) {}

  // NAT policy related APIs
  rpc NatPolicyCreate (NatPolicyRequestMsg) returns (NatPolicyResponseMsg) {}
  rpc NatPolicyUpdate (NatPolicyRequestMsg) returns (NatPolicyResponseMsg) {}
  rpc NatPolicyDelete (NatPolicyDeleteRequestMsg) returns (NatPolicyDeleteResponseMsg) {}
  rpc NatPolicyGet (NatPolicyGetRequestMsg) returns (NatPolicyGetResponseMsg) {}

  // NAT mappings related APIs
  rpc NatMappingCreate (NatMappingRequestMsg) returns (NatMappingResponseMsg) {}
  rpc NatMappingDelete (NatMappingDeleteRequestMsg) returns (NatMappingDeleteResponseMsg) {}
  rpc NatMappingGet (NatMappingGetRequestMsg) returns (NatMappingGetResponseMsg) {}
}

// types of NAT actions supported
enum NatAction {
  NAT_TYPE_NONE                 = 0;
  NAT_TYPE_STATIC_ADDRESS       = 1;
  NAT_TYPE_DYNAMIC_ADDRESS      = 2;
  NAT_TYPE_DYNAMIC_ADDRESS_PORT = 3;
}

// NAT pool configuration
// NOTE: addresses inside the NAT pool are "owned" by the device, so device is
// expected to advertise the routes for the same and respond to ARP requests
message NatPoolSpec {
  types.ObjectMeta         meta          = 1;    // object meta
  kh.NatPoolKeyHandle      key_or_handle = 2 [(gogoproto.moretags) = "venice:key"];    // identifier of NAT pool
  repeated types.Address   address       = 3 [(gogoproto.moretags) = "venice:mandatory"];  // NAT address range(s)
  types.L4PortRange        port_range    = 4;    // optional port range (for NAPT)
}

message NatPoolRequestMsg {
  repeated NatPoolSpec    request = 1;    // batched request
}

// NatPoolStatus is the operational status of a given NAT pool
// TODO: Add NAT mappings here
message NatPoolStatus {
  fixed64           pool_handle          = 1;    // id of pool returned by HAL
}

// NatPoolResponse is response to NatPoolSpec
message NatPoolResponse {
  types.ApiStatus    api_status     = 1 [(gogoproto.moretags) = "venice:api_status"];  // API status code
  NatPoolStatus      pool_status    = 2;    // NAT pool status
}

// NatPoolResponseMsg is batched response to NatPoolRequestMsg
message NatPoolResponseMsg {
  repeated NatPoolResponse    response = 1;    // batched response
}

// NatPoolDeleteRequest is used to delete a NAT pool
message NatPoolDeleteRequest {
  types.ObjectMeta       meta          = 1;    // object meta
  kh.NatPoolKeyHandle    key_or_handle = 2 [(gogoproto.moretags) = "venice:key"];    // identifier of NAT pool
}

// NatPoolDeleteRequestMsg is used to delete batch of NAT pools
message NatPoolDeleteRequestMsg {
  repeated NatPoolDeleteRequest    request = 1;    // batched delete request
}

// NatPoolDeleteResponse is response to NatPoolDeleteRequest
message NatPoolDeleteResponse {
  types.ApiStatus    api_status     = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

// NatPoolDeleteResponseMsg is batched response to NatPoolDeleteRequestMsg
message NatPoolDeleteResponseMsg {
  repeated NatPoolDeleteResponse    response = 1;    // batched delete response
}

// NatPoolGetRequest is used to get all the information about a pool
message NatPoolGetRequest {
  types.ObjectMeta       meta               = 1;    // object meta
  kh.NatPoolKeyHandle    key_or_handle      = 2  [(gogoproto.moretags) = "venice:key"];    // key or handle (optional)
}

// NatPoolGetRequestMsg is batched GET requests for NAT pools
message NatPoolGetRequestMsg {
  repeated NatPoolGetRequest    request = 1;    // batched GET request
}

// NatPoolStats is the statistics object for NAT pool
message NatPoolStats {
}

// NatPoolGetResponse captures all the information for a given NAT pool
message NatPoolGetResponse {
  types.ApiStatus   api_status = 1 [(gogoproto.moretags) = "venice:api_status"];     // API status code
  NatPoolSpec       spec       = 2;    // NAT pool configuration
  NatPoolStatus     status     = 3;    // operational state of NAT pool
  NatPoolStats      stats      = 4;    // stats of the NAT pool
}

// NatPoolGetResponseMsg is the batched response to NatPoolGetRequestMsg
message NatPoolGetResponseMsg {
  repeated NatPoolGetResponse    response = 1;     // batched get response
}

message NatRuleAction {
  NatAction              src_nat_action  = 1 [(gogoproto.moretags) = "venice:immutable"];    // src NAT action related to the rule
  NatAction              dst_nat_action  = 2 [(gogoproto.moretags) = "venice:immutable"];    // dst NAT action related to the rule
  kh.NatPoolKeyHandle    src_nat_pool    = 3 [(gogoproto.moretags) = "venice:ref,venice:constraints={nat.NatRuleAction.src_nat_action!=nat_pb2.NAT_TYPE_NONE}"];  // src NAT pool
  kh.NatPoolKeyHandle    dst_nat_pool    = 4 [(gogoproto.moretags) = "venice:ref,venice:constraints={nat.NatRuleAction.dst_nat_action!=nat_pb2.NAT_TYPE_NONE}"];    // dst NAT pool
}

// NatRuleSpec is the user intent for the NAT rule
message NatRuleSpec {
  uint64             rule_id    = 1;    // rule id
  types.RuleMatch    match      = 2;    // match conditions
  NatRuleAction      action     = 3;    // action related to the rule
}

// NatPolicySpec captures the NAT policy which is a group of NAT rules
message NatPolicySpec {
  types.ObjectMeta         meta          = 1; // object meta
  kh.NatPolicyKeyHandle    key_or_handle = 2 [(gogoproto.moretags) = "venice:key"];  // unique key
  repeated NatRuleSpec     rules         = 3 [(gogoproto.moretags) = "venice:ref"]; // list of NAT rules
}

// NatPolicyRequestMsg is the batched NAT policy
message NatPolicyRequestMsg {
  repeated NatPolicySpec    request = 1;    // batched request
}

// NatPolicyStatus is the operational status of NatPolicySpec
message NatPolicyStatus {
  fixed64    nat_policy_handle = 1;    // id of the policy returnd by HAL
}

// NatPolicyResponse is response to NatPolicySpec
message NatPolicyResponse {
  types.ApiStatus    api_status    = 1 [(gogoproto.moretags) = "venice:api_status"];  // API status code
  NatPolicyStatus    policy_status = 2;    // operational status
}

// NatPolicyResponseMsg is the batched NatPolicyResponse
message NatPolicyResponseMsg {
  repeated NatPolicyResponse    response = 1;    // batched response
}

// NatPolicyDeleteRequest is used to delete a NAT policy
message NatPolicyDeleteRequest {
  types.ObjectMeta         meta          = 1;    // object meta
  kh.NatPolicyKeyHandle    key_or_handle = 2 [(gogoproto.moretags) = "venice:key"];
}

// NatPolicyDeleteRequestMsg is batched NatPolicyDeleteRequest
message NatPolicyDeleteRequestMsg {
  repeated NatPolicyDeleteRequest    request = 1;    // batched request
}

// NatPolicyDeleteResponse is response to NatPolicyDeleteRequest
message NatPolicyDeleteResponse {
  types.ApiStatus api_status = 1 [(gogoproto.moretags) = "venice:api_status"]; // API status code
}

// NatPolicyDeleteResponseMsg is batched response to NatPolicyDeleteRequestMsg
message NatPolicyDeleteResponseMsg {
  repeated NatPolicyDeleteResponse    response = 1;    // batched response
}

// NatPolicyGetRequest is used to get information about a NAT policy
message NatPolicyGetRequest {
  types.ObjectMeta         meta          = 1; // object meta
  kh.NatPolicyKeyHandle    key_or_handle = 2 [(gogoproto.moretags) = "venice:key"];  // unique key
}

// NatPolicyGetRequestMsg is batched GET request
message NatPolicyGetRequestMsg {
  repeated NatPolicyGetRequest    request = 1;    // batched get request
}

// per rule stats
message NatRuleStats {
  uint32    num_tcp_sessions   = 1;
  uint32    num_udp_sessions   = 2;
  uint32    num_other_sessions = 3;
}

// per policy stats
message NatPolicyStats {
  repeated NatRuleStats    stats = 1;    // batched rule stats
}

// NatPolicyGetResponse catpures all information about NAT policy
message NatPolicyGetResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"]; // API status code
  NatPolicySpec      spec       = 2;    // config
  NatPolicyStatus    status     = 3;    // operational state
  NatPolicyStats     stats      = 4;    // stats
}

// NatPolicyGetResponseMsg is batched response to NatPolicyGetRequestMsg
message NatPolicyGetResponseMsg {
  repeated NatPolicyGetResponse    response = 1;
}

// NatMappingSpec is the user intent for the NAT mapping
message NatMappingSpec {
  types.ObjectMeta          meta            = 1;    // common object meta
  kh.NatMappingKeyHandle    key_or_handle   = 2 [(gogoproto.moretags) = "venice:key"];    // key or handle of this object
  kh.NatPoolKeyHandle       nat_pool        = 3 [(gogoproto.moretags) = "venice:mandatory, venice:ref"];  // NAT pool to allocate mapping from
  bool                      bidir           = 4;    // true if reverse mapping should be added as well
}

// NatMappingRequestMsg is the batched add or modify of NAT mapping request
message NatMappingRequestMsg {
  repeated NatMappingSpec    request = 1;    // batched request
}

// NatMappingStatus reflects the current operational status of a NAT mapping
message NatMappingStatus  {
  fixed64            handle        = 1;    // id of the NAT mapping returned by HAL
  types.IPAddress    mapped_ip     = 2;    // NAT address allocated
  bool               configured    = 3;    // 0 FTE, 1 config
  uint32             flow_count    = 4;    // Num of flows using the mapping

}

// NatMappingResponse is the response to NatMappingSpec
message NatMappingResponse {
  types.ApiStatus     api_status = 1 [(gogoproto.jsontag) = "api_status"];  // API status code
  NatMappingStatus    status     = 2;
}

// NatMappingResponseMsg is batched response to NatMappingRequestMsg
message NatMappingResponseMsg {
  repeated NatMappingResponse    response = 1;    // batched response
}

// NatMappingDeleteRequest is used to delete a NAT mapping
message NatMappingDeleteRequest {
  types.ObjectMeta          meta          = 1;    // object meta
  kh.NatMappingKeyHandle    key_or_handle = 2 [(gogoproto.moretags) = "venice:key"];  // identifier of NAT pool
}

// NatMappingDeleteRequestMsg is used to delete batch of NAT mappings
message NatMappingDeleteRequestMsg {
  repeated NatMappingDeleteRequest    request = 1;    // batched delete request
}

// NatMappingDeleteResponse is response to NatMappingDeleteRequest
message NatMappingDeleteResponse {
  types.ApiStatus    api_status     = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

// NatMappingDeleteResponseMsg is batched response to NatMappingDeleteRequestMsg
message NatMappingDeleteResponseMsg {
  repeated NatMappingDeleteResponse    response = 1;    // batched delete response
}

// NatMappingGetRequest is used to get information about a NAT mapping
message NatMappingGetRequest {
  types.ObjectMeta          meta          = 1;    // object meta
  kh.NatMappingKeyHandle    key_or_handle = 2 [(gogoproto.moretags) = "venice:key"];
}

// NatMappingGetRequestMsg is batched GET request for NAT mappings
message NatMappingGetRequestMsg {
  repeated NatMappingGetRequest    request = 1;    // batched get request
}

// NatMappingStats is the statistics object for each NAT mapping
message NatMappingStats {
  uint32    num_tcp_sessions       = 1;
  uint32    num_udp_sessions       = 2;
  uint32    num_other_sessions     = 3;
}

// NatMappingGetResponse reflects all the information about a NAT mapping
message NatMappingGetResponse {
  types.ApiStatus     api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  NatMappingSpec      spec       = 2;    // NAT mapping config
  NatMappingStatus    status     = 3;    // NAT mapping operational status
  NatMappingStats     stats      = 4;    // NAT mapping stats, if any
}

// NatMappingGetResponseMsg is batched response to NatMappingGetRequestMsg
message NatMappingGetResponseMsg {
  repeated NatMappingGetResponse    response   = 1;    // batched get response
}
