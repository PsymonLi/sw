//------------------------------------------------------------------------------
// protobuf specification for ACLs
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "kh.proto";

package acl;
option go_package="halproto";

// ACL service definition
service Acl {
  // Acl related APIs
  rpc AclCreate(AclRequestMsg) returns (AclResponseMsg) {}
  rpc AclUpdate(AclRequestMsg) returns (AclResponseMsg) {}
  rpc AclDelete(AclDeleteRequestMsg) returns (AclDeleteResponseMsg) {}
  rpc AclGet(AclGetRequestMsg) returns (AclGetResponseMsg) {}
}

// EthSelector has match criteria for non-IP packets
message EthSelector {
  uint32 eth_type       = 1 [(gogoproto.moretags) = "venice:constraints={range:0-65535}"];
  uint32 eth_type_mask  = 2 [(gogoproto.moretags) = "venice:constraints={range:0-65535}"];
  uint64 src_mac        = 3 [(gogoproto.moretags) = "venice:constraints={range:0-0xffffffffffff}"];
  uint64 src_mac_mask   = 4 [(gogoproto.moretags) = "venice:constraints={range:0-0xffffffffffff}"];
  uint64 dst_mac        = 5 [(gogoproto.moretags) = "venice:constraints={range:0-0xffffffffffff}"];
  uint64 dst_mac_mask   = 6 [(gogoproto.moretags) = "venice:constraints={range:0-0xffffffffffff}"];
}

// UDPSelector is used to specify match criteria for UDP traffic
message UDPSelector {
  types.L4PortRange src_port_range = 1;    // UDP src port range
  types.L4PortRange dst_port_range = 2;    // UDP dest port range
}

// TCPSelector is used to specify match criteria for TCP traffic
message TCPSelector {
  oneof tcp_syn {
    bool            tcp_syn_set     = 1;    // TCP SYN flag set
    bool            tcp_syn_clear   = 2;    // TCP SYN flag cleared
  }
  oneof tcp_ack {
    bool            tcp_ack_set     = 3;    // TCP ACK flag set
    bool            tcp_ack_clear   = 4;    // TCP ACK flag cleared
  }
  oneof tcp_fin {
    bool            tcp_fin_set     = 5;    // TCP FIN flag set
    bool            tcp_fin_clear   = 6;    // TCP FIN flag set
  }
  oneof tcp_rst {
    bool            tcp_rst_set     = 7;    // TCP RST flag set
    bool            tcp_rst_clear   = 8;    // TCP RST flag set
  }
  oneof tcp_urg {
    bool            tcp_urg_set     = 9;    // TCP URG flag set
    bool            tcp_urg_clear   = 10;   // TCP URG flag set
  }
  types.L4PortRange src_port_range  = 11;   // TCP src port range
  types.L4PortRange dst_port_range  = 12;   // TCP dest port range
}

// ICMPSelector has match criteria for ICMP packets
message ICMPSelector {
  uint32 icmp_code      = 1 [(gogoproto.moretags) = "venice:constraints={range:0-0xff}"];    // ICMP code
  uint32 icmp_code_mask = 2 [(gogoproto.moretags) = "venice:constraints={range:0-0xff}"];    // Mask for ICMP code
  uint32 icmp_type      = 3 [(gogoproto.moretags) = "venice:constraints={range:0-0xff}"];    // ICMP type
  uint32 icmp_type_mask = 4 [(gogoproto.moretags) = "venice:constraints={range:0-0xff}"];    // Mask for ICMP type
}

// IPSelector has match criteria for selecting IP packets
message IPSelector {
  types.IPAddressFamily ip_af           = 1;    // IP address family
  types.IPPrefix        src_prefix      = 2;    // source IP prefix
  types.IPPrefix        dst_prefix      = 3;    // destination IP prefix
  oneof l4_selectors {
    types.IPProtocol    ip_protocol     = 4;    // IP protocol
    ICMPSelector        icmp_selector   = 5;    // ICMP selector
    UDPSelector         udp_selector    = 6;    // UDP selector
    TCPSelector         tcp_selector    = 7;    // TCP selector
  }
}

// AclInternalSelector has match criteria which are for internal use only with 
// DOL/testing infra
// For production builds this needs to be removed
// TODO: REMOVE
message AclInternalSelector {
  bool                flow_miss        = 1;    // Flow miss
  uint64              outer_dst_mac    = 2 [(gogoproto.moretags) = "venice:constraints={range:0-0xffffffffffff}"];    // Outer MAC DA
  bool                ip_options       = 3;    // Match on IP options
  bool                ip_frag          = 4;    // IP fragmentation
  types.DropReasons   drop_reasons     = 5;    // Drop reasons
  bool                tunnel_terminate = 6;    // Tunnel terminate
  bool                direction        = 7;    // Flow direction
  bool                from_cpu         = 8;    // Match if from cpu
  bool                no_drop          = 9;    // Match on no drop packets
}

// AclInternalActionInfo has action parameters for internal use only with 
// DOL/testing infra
// For production builds this needs to be removed
// TODO: REMOVE
message AclInternalActionInfo {
  bool            mac_sa_rewrite_en = 1;    // MAC SA rewrite
  uint64          mac_sa            = 2 [(gogoproto.moretags) = "venice:constraints={range:0-0xffffffffffff}"];    // MAC SA to rewrite with
  bool            mac_da_rewrite_en = 3;    // MAC DA rewrite
  uint64          mac_da            = 4 [(gogoproto.moretags) = "venice:constraints={range:0-0xffffffffffff}"];    // MAC DA to rewrite with
  bool            ttl_dec_en        = 5;    // Perform a ttl decrement
  types.EncapInfo encap_info        = 6;    // encap info
  types.CpucbId   qid               = 7;    // qid
  bool            qid_valid         = 8;    // qid is valid
}

// AclSelector has all the match criteria for an ACL entry
message AclSelector {
  kh.InterfaceKeyHandle     src_if_key_handle    = 1 [(gogoproto.moretags) = "venice:ref"];    // source interface
  kh.InterfaceKeyHandle     dst_if_key_handle    = 2 [(gogoproto.moretags) = "venice:ref"];    // destination interface
  oneof seg_selector {
      kh.VrfKeyHandle       vrf_key_handle       = 3 [(gogoproto.moretags) = "venice:ref"];    // Vrf match
      kh.L2SegmentKeyHandle l2segment_key_handle = 4 [(gogoproto.moretags) = "venice:ref"];    // L2 segment
  }
  oneof pkt_selector {
    EthSelector             eth_selector         = 5;    // non-IP packet selector
    IPSelector              ip_selector          = 6;    // IP packet selector
  }

  // TODO: REMOVE
  AclInternalSelector       internal_key         = 7;    // Internal fields
  AclInternalSelector       internal_mask        = 8;    // Internal fields
}

// AclAction specifies all possible actions for ACL entries
enum AclAction {
  ACL_ACTION_NONE     = 0;
  ACL_ACTION_PERMIT   = 1;    // permit all the matched the packets
  ACL_ACTION_LOG      = 2;    // log all the matched packets
  ACL_ACTION_DENY     = 3;    // deny all the matched packets
  ACL_ACTION_REDIRECT = 4;    // redirect all the matched packets
}

message AclActionInfo {
  AclAction                          action                 = 1 [(gogoproto.moretags) = "venice:mandatory"];    // forwarding action
  repeated kh.MirrorSessionKeyHandle ing_mirror_sessions    = 2 [(gogoproto.moretags) = "venice:constraints={range:0-7}"]; // list of mirror destinations
  repeated kh.MirrorSessionKeyHandle egr_mirror_sessions    = 3 [(gogoproto.moretags) = "venice:constraints={range:0-7}"];// list of mirror destinations
  kh.CoppKeyHandle                   copp_key_handle        = 4 [(gogoproto.moretags) = "venice:ref"];    // copp policer
  kh.InterfaceKeyHandle              redirect_if_key_handle = 5 [(gogoproto.moretags) = "venice:ref,venice:constraints={acl.AclActionInfo.action==acl_pb2.ACL_ACTION_REDIRECT}"];    // redirect interface
                                                                    // TODO: REMOVE
  AclInternalActionInfo              internal_actions       = 6 [(gogoproto.moretags) = "venice:constraints={acl.AclActionInfo.action!=acl_pb2.ACL_ACTION_DENY}"];    // Internal action fields
}

// ACL entry configuration
message AclSpec {
  // key_or_handle is ACL's key or handle
  kh.AclKeyHandle  key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
  uint32           priority      = 2 [(gogoproto.moretags) = "venice:unique,venice:constraints={range:100-4294967295}"];    // priority of the rule (0 being highest)
                                         // TBD: is this per-vrf priority ? or global ?
  AclSelector      match         = 3;    // match conditions
  AclActionInfo    action        = 4 [(gogoproto.moretags) = "venice:mandatory"];    // action(s)
}

// Batched requests to create/update acls
message AclRequestMsg {
  repeated AclSpec request = 1;    // batched acls
}

// Acl oper state for enterprise pipeline
message AclStatusEpd {
  uint32 hw_tcam_idx = 1; // HW tcam index
}

// Acl oper state for cloud pipeline
message AclStatusCpd {
}

// AclStatus represents the operational status of an ACL entry
message AclStatus {
  fixed64        acl_handle = 1;    // id of the acl returned by HAL
  oneof qos_class_pd_status {
    AclStatusEpd epd_status = 2;    // Acl oper state for enterprise pipeline
    AclStatusCpd cpd_status = 3;    // Acl oper state for cloud pipeline
  }
}

// AclResponse is response to one Acl
message AclResponse {
  types.ApiStatus api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  AclStatus       status     = 2;    // Acl operational state
}

// Batched responses to create/update acls
message AclResponseMsg {
  repeated AclResponse response = 1;    // batched responses
}

message AclDeleteRequest {
  // key_or_handle is unique identifier of ACL being deleted
  kh.AclKeyHandle  key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
}

// Batched requests to delete acls
message AclDeleteRequestMsg {
  repeated AclDeleteRequest request = 1;    // batched request
}

// AclDeleteResponse is response to Acl delete request
message AclDeleteResponse {
  types.ApiStatus api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

// AclDeleteResponseMsg is batched response to AclDeleteRequestMsg
message AclDeleteResponseMsg {
  repeated AclDeleteResponse response = 1;    // batched responses
}

// AclGetRequest is used to get information about a acl
message AclGetRequest {
  // key_or_handle is ACL's identifier for retrieval
  kh.AclKeyHandle  key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
}

message AclGetRequestMsg {
  repeated AclGetRequest request = 1;    // batched get request
}

// AclStats captures all the statistics of a acl
message AclStats {
}

// AclGetResponse captures all the information about a acl
message AclGetResponse {
  types.ApiStatus api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  AclSpec         spec       = 2;    // Acl configuration
  AclStatus       status     = 3;    // Acl operational status
  AclStats        stats      = 4;    // Acl statistics
}

// AclGetResponseMsg is response to AclGetRequestMsg
message AclGetResponseMsg {
  repeated AclGetResponse response = 1;    // batched get response
}
