//------------------------------------------------------------------------------
// protobuf specification for global objects. HAL's static global configuration
// comes from hal.json that HAL uses when it comes up. However, there are few
// knobs that are global to the NIC and can be changed after init time. Those
// are captured here. For example, NIC can boot in classic mode and then connect
// to Pensando controller that can make it trasition to flow mode.
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";

package device;
option go_package="halproto";

service Nic {
  rpc DeviceCreate (DeviceRequestMsg) returns (DeviceResponseMsg) {}
  rpc DeviceUpdate (DeviceRequestMsg) returns (DeviceResponseMsg) {}
  rpc DeviceGet (DeviceGetRequestMsg) returns (DeviceGetResponseMsg) {}
}

// NIC boots in classic mode first and may later transition to flow mode
enum DeviceMode {
  DEVICE_MODE_NONE             = 0;
  DEVICE_MODE_MANAGED_SWITCH   = 1;    // Managed NIC mode
  DEVICE_MODE_MANAGED_HOST_PIN = 2;    // Managed NIC mode
  DEVICE_MODE_STANDALONE       = 3;    // flow based forwarding mode
}

// Global config object for NIC
message DeviceSpec {
  DeviceMode        device_mode            = 1;  // one of the operating modes
  bool              allow_dynamic_pinning  = 2;  // Allows HAL to dynamic pin Enics to uplinks in host-pin mode
  fixed64           local_mac_address      = 3;  // Local Mac address used for probing
}

message DeviceRequest {
  DeviceSpec        device      = 1;         // Device Mode
}

message DeviceRequestMsg {
  DeviceRequest     request     = 1;    // batched request
}

message DeviceResponse {
  types.ApiStatus   api_status  = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

message DeviceResponseMsg {
  DeviceResponse    response    = 1;   // batched responses
}

message DeviceGetRequest {
}

message DeviceGetRequestMsg {
  DeviceGetRequest  request     = 1; // batched request
}

message DeviceGetResponse {
  types.ApiStatus   api_status  = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  DeviceSpec        device      = 2; // Device Mode
}

message DeviceGetResponseMsg {
  DeviceGetResponse   response = 1; // batched response
}
