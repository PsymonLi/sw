//{C} Copyright 2017 Pensando Systems Inc. All rights reserved.
//------------------------------------------------------------------------------
// protobuf specification for network security objects
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "kh.proto";

package nwsec;
option go_package="halproto";


service NwSecurityRule {
    rpc SecurityRuleCreate (SecurityRuleRequestMsg) returns (SecurityRuleResponseMsg) {}
    rpc SecurityRuleUpdate (SecurityRuleRequestMsg) returns (SecurityRuleResponseMsg) {}
    rpc SecurityRuleDelete (SecurityRuleDeleteRequestMsg) returns (SecurityRuleDeleteResponseMsg) {}
    rpc SecurityRuleGet (SecurityRuleGetMsg) returns (SecurityRuleGetResponseMsg) {}
}

enum IPAddressType {
    IP_ADDRESS_NONE           = 0;
    IP_ADDRESS_IPV4_ANY       = 1;  // any IPv4 address
    IP_ADDRESS_IPV6_ANY       = 2;  // any IPv6 address
    IP_ADDRESS_ANY            = 3;  // any IP address
    IP_ADDRESS_IPV4_MULTICAST = 4;  // any IPv4 multicast address
    IP_ADDRESS_IPV6_MULTICAST = 5;  // any IPv6 multicast address
    IP_ADDRESS_MULTICAST      = 6;  // any IP multicast address
    IP_ADDRESS_V6_LINK_LOCAL  = 7;  // IPv6 link local address
}

message IPSubnet {
    oneof subnet {
        types.IPPrefix ipv4_subnet      = 1;     // V4 Subnet
        types.IPPrefix ipv6_subnet      = 2;     // V6 Subnet
    }
}

message AddressRange {
    oneof range {
        types.IPRange ipv4_range       = 1;  // V4 address range
        types.IPRange ipv6_range       = 2;  // V6 address range
    }
}

// AddressSpec is the named prefix or range
message AddressSpec {
    oneof   Address {
        IPSubnet      prefix     = 1;    // v4 or v6 address prefix
        AddressRange  range      = 2;    // v4 or v6 address range
    }
}

message AddressStatus {
}

message Address {
    types.ObjectMeta    meta            = 1;
    AddressSpec         spec            = 2;
    AddressStatus       status          = 3;
}

message AddressGroupSpec {
    repeated Address address = 1;
}

message AddressGroupStatus {
}

message AddressGroup {
    types.ObjectMeta        meta     = 1;
    AddressGroupSpec        spec     = 2;
    AddressGroupStatus      status   = 3;
}

message IPAddressSpec {

    oneof Formats {
        IPAddressType   type        = 1;
        IPSubnet        prefix      = 2;
        AddressRange    range       = 3;
        Address         address     = 4;
        AddressGroup    addr_grp    = 5;
    }
    bool negate                     = 6;
}

// predefined apps - default apps for which ALG functionality is invoked
enum PredefinedApps {
    APP_NAME_NONE           = 0;
    APP_NAME_TFTP           = 1;  // TFTP ALG
    APP_NAME_FTP            = 2;  // FTP ALG
    APP_NAME_SUNRPC_TCP     = 3;  // SUNRPC ALG
    APP_NAME_MSRPC          = 4;  // MSRPC ALG
    APP_NAME_DNS            = 5;  // DNS ALG
    APP_NAME_SIP            = 6;  // SIP ALG
    APP_NAME_RTSP           = 7;  // RTSP ALG
    APP_NAME_TRACEROUTE     = 8;  // TRACEROUTE ALG
    APP_NAME_IP             = 9;  // IP ALG (uni-directional flow per session)
    APP_NAME_ANY            = 10; // "any" app
}

// App - represents an application defined by (Protocol, port) combination
// along with all applicable parameters
message App {
    message AppPortInfo {
        repeated types.L4PortRange    dst_port_range = 1; // dst port range low, high value
        repeated types.L4PortRange    src_port_range = 2; // src port range low, high value
    }
    message ICMPAppInfo {
        uint32    icmp_type        = 1;
        uint32    icmp_code        = 2;
    }
    message ICMPv6AppInfo {
        uint32    icmpv6_type      = 1;
        uint32    icmpv6_code      = 2;
    }
    message RPCAppInfo {
        uint32    program_number   = 1;
    }
    message MSRPCAppInfo {
        uint32    uuid            = 1;
    }

    enum TraceLevel {
        TRACE_LEVEL_NONE      = 0;
        TRACE_LEVEL_BRIEF     = 1;
        TRACE_LEVEL_DETAIL    = 2;
        TRACE_LEVEL_EXTENSIVE = 3;
        TRACE_LEVEL_VERBOSE   = 4;
    }
    message TraceOptions {
        TraceLevel    level = 1;
    }

    types.IPProtocol    protocol              = 1;
    oneof L4AppInfo {
        AppPortInfo   port_info         = 2;
        ICMPAppInfo   icmp_info         = 3;
        ICMPv6AppInfo icmpv6_info       = 4;
        RPCAppInfo    rpc_info          = 5;
        MSRPCAppInfo  msrpc_cinfo        = 6;
    }
    PredefinedApps    alg               = 7;

    message FTPOptions {
        bool allow_mismatch_ip_address  = 1; // pass FTP packets with mismatched IP header address and payload
        bool ftp_ssl_extension          = 2; // Enable secure FTP and FTP-ssl protocols
        bool line_break_extension       = 3; // Enable LF line termination
    }
    message DNSOptions {
        bool      drop_multi_question_packets       = 1; // drop pkt if number of questions > 1
        bool      drop_large_domain_name_packets    = 2; // drop if domain name size is > 255 bytes
        uint32    drop_long_label_packets           = 3; // drop if label length > 63
        uint32    drop_multizone_packets            = 4; // (DDNS) drop if number of zones > 1
        uint32    max_msg_length                    = 5; // default 512 (max. 8192) bytes
    }
    message MSRPCOptions {
        uint32 map_entry_timeout             = 1;
    }
    message SunRPCOptions {
        uint32 map_entry_timeout             = 1;
    }
    message SIPOptions {
        uint32 ctimeout                      = 1;
        uint32 dscp_code_point               = 2;
        uint32 media_inactivity_timeout      = 3;
        uint32 max_call_duration             = 4;
        uint32 t1_timer_value                = 5;
        uint32 t4_timer_value                = 6;
    }
    oneof AppOptions {
        FTPOptions    ftp_option_info        = 8;
        DNSOptions    dns_option_info        = 9;
        MSRPCOptions  msrp_coption_info      = 10;
        SunRPCOptions sun_rpc_pption_info    = 11;
        SIPOptions    sip_options            = 12;
    }
    uint32            idle_timeout           = 13;
    TraceOptions      trace_opts             = 14;
}

// ApplicationSpec is either a pre-defined pensando application or user-defined
// custom application
message ApplicationSpec {
    oneof apps {
        PredefinedApps    predefined_apps  = 1; //  Predefined apps
        App               appln            = 2;
    }
}

message ApplicationStatus {
}

message Application {
    types.ObjectMeta     meta   = 1;
    ApplicationSpec      spec   = 2;
    ApplicationStatus    status = 3;
}

// group of applications to apply same policy on
message AppGroupSpec {
    repeated Application Apps = 2;
}

message AppGroupStatus {
}

message AppGroup {
    types.ObjectMeta    meta      = 1;
    AppGroupSpec        spec      = 2;
    AppGroupStatus      status    = 3;
}

// AppSec represents an application 
enum SecurityAction {
    SECURITY_RULE_ACTION_NONE   = 0;
    SECURITY_RULE_ACTION_ALLOW  = 1;
    SECURITY_RULE_ACTION_DENY   = 2;
    SECURITY_RULE_ACTION_REJECT = 3;
}

enum LogAction {
    LOG_NONE                     = 0;
    LOG_ON_SESSION_START         = 1;
    LOG_ON_SESSION_END           = 2;
    LOG_ON_SESSION_START_AND_END = 3;
}

message SecurityRuleAction {
    SecurityAction  sec_action = 1;  // Identifies the security action related to the rule
    LogAction       log_action = 2;  // Identifies log actions related to the rule
}

message SecurityRuleSpec {
    uint32                          rule_id         = 1;
    bool                            enable          = 2;        // enable/disable
    bool                            enforce         = 100;      // TBD
    SecurityRuleAction              action          = 3;        // action related to the rule 
    bool                            count           = 4;        // Enable count of packets hitting the rule
    repeated Application            app             = 5;        // applications, if any, to invoke ALG
    repeated AppGroup               app_group       = 6;        // Comment TBD
    repeated IPAddressSpec          src_address     = 7;        // source address(es)
    repeated uint32                 src_sg          = 8;        // source security group
    repeated IPAddressSpec          dst_address     = 9;        // destination address(es)
    repeated uint32                 dst_sg          = 10;       // destination security group
    repeated types.L4PortRange      dst_port_range  = 11;       // dst port
    repeated types.L4PortRange      src_port_range  = 12;       // src port range

    bool                            conn_track_en   = 13;       // Enable connection tracking
}

message SecurityRuleStatus {
    fixed64  security_rule_handle  = 1; // id of the security rule returned by HAL
}

message SecurityRule {
    types.ObjectMeta    meta     = 1;
    SecurityRuleSpec    spec     = 2;
    SecurityRuleStatus  status   = 3;
}

// SecurityRuleRequestMsg is batched add or modify security rule request
message SecurityRuleRequestMsg {
    repeated SecurityRule       request = 1;  //  batched request
}

// SecurityRuleResponse is the response to SecurityRule
message SecurityRuleResponse {
    types.ApiStatus     api_status  = 1 [(gogoproto.jsontag) = "api_status"];  // API status code
    SecurityRuleStatus  status      = 2;  // operational status
}

message SecurityRuleResponseMsg {
    repeated SecurityRuleResponse response = 1;
}

// SecurityRuleDeleteRequest is used to delete a security rule 
message SecurityRuleDeleteRequest {
    types.ObjectMeta                meta                = 1; // object meta
    kh.SecurityRuleKeyHandle        rule_key_or_handle  = 2 [(gogoproto.jsontag) = "key"]; // rule_handle 
}

// SecurityRuleDeleteRequestMsg is used to delete a batch of security rules
message SecurityRuleDeleteRequestMsg {
    repeated SecurityRuleDeleteRequest  request = 1;
}

message SecurityRuleDeleteResponse {
    types.ApiStatus api_status = 1 [(gogoproto.jsontag) = "api_status"]; // API status code
}

// SecurityRuleDeleteResponseMsg is batched response to SecurityRuleDeleteRequestMsg
message SecurityRuleDeleteResponseMsg {
    repeated SecurityRuleDeleteResponse response = 1;  // API status code
}

// SecurityRuleGet is used to get information about a security rule 
message SecurityRuleGet {
    types.ObjectMeta            meta = 1; // object meta
    // key_or_handle is the security rule's unique identifier
    kh.SecurityRuleKeyHandle    key_or_handle = 2 [(gogoproto.jsontag) = "key"];
}

// SecurityRuleGetRequestMsg is batched GET request for security rules
message SecurityRuleGetMsg {
    repeated SecurityRuleGet    request = 1; // batched get request
}

// SecurityRuleGetResponse caputres all the information about a security rule
message SecurityRuleGetResponse {
    types.ApiStatus     api_status  = 1 [(gogoproto.jsontag) = "api_status"]; // API status code
    SecurityRuleSpec    spec       = 2;
    SecurityRuleStatus  status     = 3;
    //TBD - Add stats here
}

message SecurityRuleGetResponseMsg {
    repeated SecurityRuleGetResponse     response   = 1;
    types.ApiStatus                      api_status = 2;
}
// Security rule stats
