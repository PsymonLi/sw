//------------------------------------------------------------------------------
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved
//
// protobuf specification for network related policy objects
//
// Network object defined here is used to enforce policies (like firewall/NAT
// etc.) whereas Route object is used for forwarding
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "kh.proto";

package nw;
option go_package="halproto";

service Network {
  // Network
  rpc NetworkCreate (NetworkRequestMsg) returns (NetworkResponseMsg) {}
  rpc NetworkUpdate (NetworkRequestMsg) returns (NetworkResponseMsg) {}
  rpc NetworkDelete (NetworkDeleteRequestMsg) returns (NetworkDeleteResponseMsg) {}
  rpc NetworkGet (NetworkGetRequestMsg) returns (NetworkGetResponseMsg) {}
  // Nexthop
  rpc NexthopCreate (NexthopRequestMsg) returns (NexthopResponseMsg) {}
  rpc NexthopUpdate (NexthopRequestMsg) returns (NexthopResponseMsg) {}
  rpc NexthopDelete (NexthopDeleteRequestMsg) returns (NexthopDeleteResponseMsg) {}
  rpc NexthopGet (NexthopGetRequestMsg) returns (NexthopGetResponseMsg) {}
  // Route
  rpc RouteCreate (RouteRequestMsg) returns (RouteResponseMsg) {}
  rpc RouteUpdate (RouteRequestMsg) returns (RouteResponseMsg) {}
  rpc RouteDelete (RouteDeleteRequestMsg) returns (RouteDeleteResponseMsg) {}
  rpc RouteGet (RouteGetRequestMsg) returns (RouteGetResponseMsg) {}
}

// NetworkSpec is used to add or modify a network object
message NetworkSpec {
  // key_or_handle is the network being create or updated
  kh.NetworkKeyHandle                key_or_handle     = 1 [(gogoproto.moretags) = "venice:key"];
  uint64                             rmac              = 2;    // router mac for this network
  types.IPAddress                    gateway_ip        = 3;
  repeated kh.SecurityGroupKeyHandle sg_key_handle     = 4 [(gogoproto.moretags) = "venice:ref"];    // list of security group handles
}

// NetworkRequestMsg is batched request message used to create/update network
// objects
message NetworkRequestMsg {
  repeated NetworkSpec    request = 1;    // batch of requests
}

// NetworkStatus represents the current status of the network policy object
message NetworkStatus {
  fixed64    nw_handle = 1;    // id of the network policy object returned by HAL
}

// NetworkResponse is response to one NetworkSpec
message NetworkResponse {
  types.ApiStatus    api_status = 1[(gogoproto.moretags) = "venice:api_status"];    // API status code
  NetworkStatus      status     = 2;    // operational status
}

// NetworkResponseMsg is response to NetworkRequestMsg
message NetworkResponseMsg {
  repeated NetworkResponse    response = 1;    // batch of responses
}

// NetworkDeleteRequest is used to delete a network policy object
message NetworkDeleteRequest {
  // key_or_handle is the network being deleted
  kh.NetworkKeyHandle    key_or_handle  = 1 [(gogoproto.moretags) = "venice:key"];
  kh.VrfKeyHandle        vrf_key_handle = 2 [(gogoproto.moretags) = "venice:ref"];
}

// NetworkDeleteRequestMsg is used to delete a batch of network policy objects
message NetworkDeleteRequestMsg {
  repeated NetworkDeleteRequest    request = 1;   // batched delete request
}

// NetworkDeleteResponse is response to NetworkDeleteRequest
message NetworkDeleteResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

// NetworkDeleteResponseMsg is batched response to NetworkDeleteRequestMsg
message NetworkDeleteResponseMsg {
  repeated NetworkDeleteResponse    response = 1;    // batched response
}

// NetworkStats captures all the statistics of given network
message NetworkStats {
}

// NetworkGetRequest is used to get information about a network
message NetworkGetRequest {
  // key_or_handle is the key or handle of the network object being retrieved
  kh.NetworkKeyHandle    key_or_handle  = 1 [(gogoproto.moretags) = "venice:key"];
  kh.VrfKeyHandle        vrf_key_handle = 2 [(gogoproto.moretags) = "venice:ref"];
}

// NetworkGetRequestMsg is batched GET request for networks
message NetworkGetRequestMsg {
  repeated NetworkGetRequest    request = 1;    // batched get request
}

// NetworkGetResponse captures all the information about a network
message NetworkGetResponse {
  types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  NetworkSpec      spec       = 2;    // network specification/configuration
  NetworkStatus    status     = 3;    // network status
  NetworkStats     stats      = 4;    // network statistics
}

// NetworkGetResponseMsg is response to NetworkGetRequestMsg
message NetworkGetResponseMsg {
  repeated NetworkGetResponse    response = 2;    // batched get response
}

// RouteSpec is used to add or modify a route object
message RouteSpec {
  kh.RouteKeyHandle      key_or_handle    = 1  [(gogoproto.moretags) = "venice:key"];
  kh.NexthopKeyHandle    nh_key_or_handle = 2  [(gogoproto.moretags) = "venice:ref"];
}

// RouteRequestMsg is batched request message used to create/update
// route objects
message RouteRequestMsg {
  repeated RouteSpec    request = 1;    // batch of requests
}

// RouteStatus represents the current status of the route object
message RouteStatus {
  fixed64    route_handle = 1;    // id of the route object returned by HAL
}

// RouteResponse is response to one RouteSpec
message RouteResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  RouteStatus        status     = 2;    // operational status
}

// RouteResponseMsg is response to RouteRequestMsg
message RouteResponseMsg {
  repeated RouteResponse    response = 1;    // batch of responses
}

// RouteDeleteRequest is used to delete a route object
message RouteDeleteRequest {
  kh.RouteKeyHandle    key_or_handle = 1  [(gogoproto.moretags) = "venice:key"];
}

// RouteDeleteRequestMsg is used to delete a batch of route objects
message RouteDeleteRequestMsg {
  repeated RouteDeleteRequest    request = 1;   // batched delete request
}

// RouteDeleteResponse is response to RouteDeleteRequest
message RouteDeleteResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

// RouteDeleteResponseMsg is batched response to RouteDeleteRequestMsg
message RouteDeleteResponseMsg {
  repeated RouteDeleteResponse    response = 1;    // batched response
}

// RouteStats captures all the statistics of given route
message RouteStats {
}

// RouteGetRequest is used to get information about a route
message RouteGetRequest {
  kh.RouteKeyHandle    key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
}

// RouteGetRequestMsg is batched GET request for routes
message RouteGetRequestMsg {
  repeated RouteGetRequest    request = 1;    // batched get request
}

// RouteGetResponse captures all the information about a route
message RouteGetResponse {
  types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  RouteSpec        spec       = 2;    // route specification/configuration
  RouteStatus      status     = 3;    // route status
  RouteStats       stats      = 4;    // route statistics
}

// RouteGetResponseMsg is response to RouteGetRequestMsg
message RouteGetResponseMsg {
  repeated RouteGetResponse    response = 2;    // batched get response
}

// NexthopSpec is used to add or modify a nexthop object
message NexthopSpec {
  kh.NexthopKeyHandle          key_or_handle    = 1  [(gogoproto.moretags) = "venice:key"];
  oneof if_or_ep {
      kh.InterfaceKeyHandle    if_key_or_handle = 2  [(gogoproto.moretags) = "venice:ref"];
      kh.EndpointKeyHandle     ep_key_or_handle = 3  [(gogoproto.moretags) = "venice:ref"];
  }
}

// NexthopRequestMsg is batched request message used to create/update
// nexthop objects
message NexthopRequestMsg {
  repeated NexthopSpec    request = 1;    // batch of requests
}

// NexthopStatus represents the current status of the nexthop object
message NexthopStatus {
  fixed64    nexthop_handle = 1;    // id of the nexthop object returned by HAL
}

// NexthopResponse is response to one NexthopSpec
message NexthopResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  NexthopStatus        status   = 2;    // operational status
}

// NexthopResponseMsg is response to NexthopRequestMsg
message NexthopResponseMsg {
  repeated NexthopResponse    response = 1;    // batch of responses
}

// NexthopDeleteRequest is used to delete a nexthop object
message NexthopDeleteRequest {
  kh.NexthopKeyHandle    key_or_handle = 1  [(gogoproto.moretags) = "venice:key"];
}

// NexthopDeleteRequestMsg is used to delete a batch of nexthop objects
message NexthopDeleteRequestMsg {
  repeated NexthopDeleteRequest    request = 1;   // batched delete request
}

// NexthopDeleteResponse is response to NexthopDeleteRequest
message NexthopDeleteResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

// NexthopDeleteResponseMsg is batched response to NexthopDeleteRequestMsg
message NexthopDeleteResponseMsg {
  repeated NexthopDeleteResponse    response = 1;    // batched response
}

// NexthopStats captures all the statistics of given nexthop
message NexthopStats {
}

// NexthopGetRequest is used to get information about a nexthop
message NexthopGetRequest {
  kh.NexthopKeyHandle    key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
}

// NexthopGetRequestMsg is batched GET request for nexthops
message NexthopGetRequestMsg {
  repeated NexthopGetRequest    request = 1;    // batched get request
}

// NexthopGetResponse captures all the information about a nexthop
message NexthopGetResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  NexthopSpec        spec       = 2;    // nexthop specification/configuration
  NexthopStatus      status     = 3;    // nexthop status
  NexthopStats       stats      = 4;    // nexthop statistics
}

// NexthopGetResponseMsg is response to NexthopGetRequestMsg
message NexthopGetResponseMsg {
  repeated NexthopGetResponse    response = 2;    // batched get response
}
