//------------------------------------------------------------------------------
// protobuf specification for QOS APIs
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "kh.proto";

package qos;
option go_package="halproto";

// QOS service definition
service QOS {
  // QOS class related APIs
  rpc QosClassCreate(QosClassRequestMsg) returns (QosClassResponseMsg) {}
  rpc QosClassUpdate(QosClassRequestMsg) returns (QosClassResponseMsg) {}
  rpc QosClassDelete(QosClassDeleteRequestMsg) returns (QosClassDeleteResponseMsg) {}
  rpc QosClassGet(QosClassGetRequestMsg) returns (QosClassGetResponseMsg) {}
  rpc QosClassThresholdsGet(QosClassThresholdsGetRequestMsg) returns (QosClassThresholdsGetResponseMsg) {}
  rpc QosClassSetGlobalPauseType(QosClassSetGlobalPauseTypeRequestMsg) returns (QosClassSetGlobalPauseTypeResponseMsg) {}

  // Copp related APIs
  rpc CoppUpdate(CoppRequestMsg) returns (CoppResponseMsg) {}
  rpc CoppGet(CoppGetRequestMsg) returns (CoppGetResponseMsg) {}

}

message PolicerPPSSpec {
  uint32 packets_per_sec = 1 [(gogoproto.moretags) = "venice:mandatory,venice:constraints={range:4000-2000000000}"];    // Packets-per-second rate (range max is about 1Tbps)
  uint32 burst_packets   = 2 [(gogoproto.moretags) = "venice:mandatory,venice:constraints={range:0-2000000000}"];    // Packet burst to absorb
}

message PolicerBPSSpec {
  uint64 bytes_per_sec = 1 [(gogoproto.moretags) = "venice:mandatory,venice:constraints={range:4000-125000000000}"];    // rate for this policer in bytes-per-second (range max is about 1Tbps)
  uint64 burst_bytes   = 2 [(gogoproto.moretags) = "venice:mandatory,venice:constraints={range:0-125000000000}"];    // Burst size allowed for the policer in bytes
}

// Specifications of a policer
message PolicerSpec {
  oneof policer_type {
    PolicerPPSSpec pps_policer = 1;
    PolicerBPSSpec bps_policer = 2;
  }
}

// PolicerStats captures all the statistics of a policer
message PolicerStats {
  uint64 permitted_packets = 1;    // Count of permitted packets by the policer
  uint64 permitted_bytes   = 2;    // Count of permitted bytes by the policer
  uint64 dropped_packets   = 3;    // Count of dropped packets by the policer
  uint64 dropped_bytes     = 4;    // Count of dropped bytes by the policer
}

enum QosPauseType {
    QOS_PAUSE_TYPE_NONE       = 0;  // Puase disabled
    QOS_PAUSE_TYPE_LINK_LEVEL = 1;  // Link level pause
    QOS_PAUSE_TYPE_PFC        = 2;  // Priority pause
}

// QosPause specifies the link-level or PFC configuration
message QosPause {
  uint32       xon_threshold  = 1;    // Threshold at which to send xon
  uint32       xoff_threshold = 2;    // Threshold at which to send xoff
  QosPauseType type           = 3;    // Link-level or PFC
  uint32       pfc_cos        = 4 [(gogoproto.moretags) = "venice:constraints={range:0-7}"];
}

// QosSched specifies the QosClass scheduling configuration
message QosSched {
  // DWRR specific information
  message DWRRInfo {
    uint32             bw_percentage = 1 [(gogoproto.moretags) = "venice:constraints={range:0-100}"];    // Bandwidth allocated
  }

  // Strict Priority specific information for the class
  message StrictPriorityInfo {
    uint64             bps           = 1;    // Rate in bytes-per-sec, 0 for disabling rate-limit
  }

  oneof SchedType {
    DWRRInfo           dwrr          = 1;    // Class is DWRR type scheduling
    StrictPriorityInfo strict        = 2;    // Class is Strict priority type scheduling
  }
}

enum QosClassMapType {
  QOS_CLASS_MAP_TYPE_NONE       = 0;
  QOS_CLASS_MAP_TYPE_PCP        = 1;
  QOS_CLASS_MAP_TYPE_DSCP       = 2;
  QOS_CLASS_MAP_TYPE_PCP_DSCP   = 3;
}

// QosClassMap specifies the policy with which traffic from network
// is classified
message QosClassMap {
  QosClassMapType type      = 1;
  uint32          dot1q_pcp = 2 [(gogoproto.moretags) = "venice:constraints={range:0-7}"];     // Classify based on outer qtag pcp value
  repeated uint32 ip_dscp   = 3 [(gogoproto.moretags) = "venice:constraints={range:0-63}"];    // Classify based on ipv4/v6 dscp values
}

// QosMarking specifies the policy to mark the host-to-network traffic
message QosMarking {
  bool   dot1q_pcp_rewrite_en = 1;    // Enable 802.1q PCP rewrite
  uint32 dot1q_pcp            = 2 [(gogoproto.moretags) = "venice:constraints={range:0-7}"];    // Value of PCP to rewrite with
  bool   ip_dscp_rewrite_en   = 3;    // Enable ip dscp rewrite
  uint32 ip_dscp              = 4 [(gogoproto.moretags) = "venice:constraints={range:0-63}"];    // Value of dscp to rewrite with
}

// QosClass specification
message QosClassSpec {
  // key_or_handle is QosClass's key or handle
  kh.QosClassKeyHandle key_or_handle    = 1 [(gogoproto.moretags) = "venice:key"];
  uint32               mtu              = 2 [(gogoproto.moretags) = "venice:mandatory,venice:constraints={range:1500-9216}"];    // MTU
  QosPause             pause            = 3;    // Pause configuration
  QosSched             sched            = 4 [(gogoproto.moretags) = "venice:mandatory"];    // Scheduling configuration
  QosClassMap          class_map        = 5;    // Class map for class derivation on uplinks
  QosMarking           marking          = 6;    // Marking policy for host-to-network traffic
}

// QosClassRequestMsg is batched request to create/update the QosClasss
message QosClassRequestMsg {
  repeated QosClassSpec request = 1;    // batch of requests
}

enum PacketBufferPortType {
  PACKET_BUFFER_PORT_TYPE_DMA    = 0;
  PACKET_BUFFER_PORT_TYPE_P4IG   = 1;
  PACKET_BUFFER_PORT_TYPE_P4EG   = 2;
  PACKET_BUFFER_PORT_TYPE_UPLINK = 3;
}

message PacketBufferPort {
  PacketBufferPortType port_type = 1;
  uint32               port_num  = 2;
}

message QosClassPortStatus {
  PacketBufferPort packet_buffer_port = 1;
  repeated uint32  input_queues       = 2;    // List of input queues
  repeated uint32  output_queues      = 3;    // List of output queues
}

// QosClass oper state for enterprise pipeline
message QosClassStatusEpd {
  repeated QosClassPortStatus port_status            = 1;    // List of status per port
  repeated uint32             tx_traffic_class_coses = 2;    // List of tx traffic class coses
                                                             // that can be used by applications
}

// QosClass oper state for cloud pipeline
message QosClassStatusCpd {
}

// QosClassStatus represents the operational status of QosClass
message QosClassStatus {
  fixed64             qos_class_handle = 1;    // Handle for the QosClass
  oneof qos_class_pd_status {
    QosClassStatusEpd epd_status       = 2;    // QosClass oper state for enterprise pipeline
    QosClassStatusCpd cpd_status       = 3;    // QosClass oper state for cloud pipeline
  }
}

// QosClassResponse is response to one QosClassSpec
message QosClassResponse {
  types.ApiStatus api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  QosClassStatus  status     = 2;    // operational status
}

// QosClassResponseMsg is response to QosClassRequestMsg
message QosClassResponseMsg {
  repeated QosClassResponse response = 1;    // batch of responses
}

// QosClassDeleteRequest  is used to delete a QosClass object
message QosClassDeleteRequest {
  // key_or_handle is to identify QosClass being deleted
  kh.QosClassKeyHandle key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
}

// QosClassDeleteRequestMsg is used to delete a batch of QosClasss
message QosClassDeleteRequestMsg {
  repeated QosClassDeleteRequest request = 1;    // batch of requests
}

// QosClassDeleteResponse is response to QosClass delete request
message QosClassDeleteResponse {
  types.ApiStatus api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

// QosClassDeleteResponseMsg is batched response to QosClassDeleteRequestMsg
message QosClassDeleteResponseMsg {
  repeated QosClassDeleteResponse response = 1;    // batched responses
}

message QosClassInputOflowQueueStats {
  uint64 good_pkts_in    = 1;    // Cumulative count of good packets in
  uint64 good_pkts_out   = 2;    // Cumulative count of good packets out
  uint64 errored_pkts_in = 3;    // Cumulative count of errored packets in
  uint32 fifo_depth      = 4;    // Instantaneous Overflow fifo depth in bytes
  uint32 max_fifo_depth  = 5;    // Maximum Overflow fifo depth observed in bytes
}

message QosClassInputQueueStats {
  uint32                       input_queue_idx  = 1;
  QosClassInputOflowQueueStats oflow_fifo_stats = 2;    // Overflow fifo stats
  uint32                       buffer_occupancy = 3;    // Instantaneous buffer occupancy in bytes
  uint32                       peak_occupancy   = 4;    // Peak buffer occupancy in bytes
  uint64                       port_monitor     = 5;    // port monitor counter
}

message QosClassOutputQueueStats {
  uint32 output_queue_idx = 1;
  uint32 queue_depth      = 2;    // Instantaneous output queue depth in pkts
  uint64 port_monitor     = 3;    // port monitor counter
}

message QosClassQueueStats {
  repeated QosClassInputQueueStats  input_queue_stats  = 1;    // List of input queue statistics per each input queue
  repeated QosClassOutputQueueStats output_queue_stats = 2;    // List of output queue statistics per each output queue
}

message QosClassPortStats {
  PacketBufferPort   packet_buffer_port = 1;    // Port identifier
  QosClassQueueStats qos_queue_stats    = 2;
}

// QosClassStats captures all the statistics of given QosClass
message QosClassStats {
  uint32                     num_lifs_tx = 1;    // Number of lifs referencing this class in tx
  uint32                     num_lifs_rx = 2;    // Number of lifs referencing this class in rx
  repeated QosClassPortStats port_stats  = 3;
}

// QosClassGetRequest is used to get information about a QosClass
message QosClassGetRequest {
  // key_or_handle is to identify QosClass being deleted
  kh.QosClassKeyHandle key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
}

// Batched request message to get the stats about a batch of QosClasss
message QosClassGetRequestMsg {
  repeated QosClassGetRequest request = 1;    // batch of requests
}

// QosClassGetResponse captures all the information about a QosClass
message QosClassGetResponse {
  types.ApiStatus    api_status  = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  QosClassSpec       spec        = 2;    // QosClass configuration
  QosClassStatus     status      = 3;    // QosClass operational status
  QosClassStats      stats       = 4;    // QosClass statistics
}

message OccupancyPerQueue {
  uint32 queue_idx = 1;
  uint32 occupancy = 2;
}

message PortOccupancy {
  uint32 port_num                      = 1;
  repeated OccupancyPerQueue occupancy = 2;
}

message Thresholds {
  uint32 hbm_context    = 1;
  uint32 xon_threshold  = 2;
  uint32 xoff_threshold = 3;
}

message QosClassThresholdsGetResponse {
  types.ApiStatus        api_status     = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  repeated PortOccupancy port_occupancy = 2;
  repeated Thresholds    thresholds     = 3;
}

message QosClassThresholdsGetResponseMsg {
  repeated QosClassThresholdsGetResponse response = 1;
}

message QosClassThresholdsGetRequest {
}

message QosClassThresholdsGetRequestMsg {
  repeated QosClassThresholdsGetRequest request = 1;
}

// QosClassGetResponseMsg is response to QosClassGetRequestMsg
message QosClassGetResponseMsg {
  repeated QosClassGetResponse response  = 1;    // batched get responses
}

message QosClassSetGlobalPauseTypeRequest {
    QosPauseType pause_type = 1;    // Global pause type - link-level or PFC
}

message QosClassSetGlobalPauseTypeRequestMsg {
    repeated QosClassSetGlobalPauseTypeRequest request = 1;
}

message QosClassSetGlobalPauseTypeResponseMsg {
}

// Specifications of a Copp
message CoppSpec {
  // key_or_handle is Copp's unique identifier
  kh.CoppKeyHandle key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
  PolicerSpec      policer       = 3 [(gogoproto.moretags) = "venice:mandatory"];    // Policer specification
}

// Batched requests to create/update Copps
message CoppRequestMsg {
  repeated CoppSpec request = 1;    // batched Copps
}

// Copp oper state for enterprise pipeline
message CoppStatusEpd {
  uint32 hw_policer_idx = 1; // HW policer index
}

// Copp oper state for cloud pipeline
message CoppStatusCpd {
}

message CoppStatus {
  fixed64         copp_handle = 1;    // id of the Copp returned by HAL
  oneof qos_class_pd_status {
    CoppStatusEpd epd_status  = 2;    // Copp oper state for enterprise pipeline
    CoppStatusCpd cpd_status  = 3;    // Copp oper state for cloud pipeline
  }
}

// CoppResponse is response to one Copp
message CoppResponse {
  types.ApiStatus api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  CoppStatus      status     = 2;    // Copp operational state
}

// Batched responses to create/update Copps
message CoppResponseMsg {
  repeated CoppResponse response = 1;    // batched responses
}

// CoppDeleteRequest  is used to delete a Copp object
message CoppDeleteRequest {
  // key_or_handle is to identify Copp being deleted
  kh.CoppKeyHandle key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
}

// CoppDeleteRequestMsg is used to delete a batch of Copps
message CoppDeleteRequestMsg {
  repeated CoppDeleteRequest request = 1;    // batch of requests
}

// CoppDeleteResponse is response to Copp delete request
message CoppDeleteResponse {
  types.ApiStatus api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

// CoppDeleteResponseMsg is batched response to CoppDeleteRequestMsg
message CoppDeleteResponseMsg {
  repeated CoppDeleteResponse response = 1;    // batched responses
}

// CoppStats captures all the statistics of given Copp
message CoppStats {
  PolicerStats    policer_stats = 1;    // Policer statistics
  uint32          num_acls      = 2;    // Number of acls referencing this copp 
}

// CoppGetRequest is used to get information about a Copp
message CoppGetRequest {
  // key_or_handle is Copp's unique identifier
  kh.CoppKeyHandle key_or_handle = 1 [(gogoproto.moretags) = "venice:key"];
}

message CoppGetRequestMsg {
  repeated CoppGetRequest request = 1;    // batched get request
}

// CoppGetResponse captures all the information about a Copp
message CoppGetResponse {
  types.ApiStatus api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  CoppSpec        spec       = 2;    // Copp configuration
  CoppStatus      status     = 3;    // Copp operational status
  CoppStats       stats      = 4;    // Copp statistics
}

// CoppGetResponseMsg is response to CoppGetRequestMsg
message CoppGetResponseMsg {
  repeated CoppGetResponse response = 1;    // batched get response
}
