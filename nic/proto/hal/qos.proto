//------------------------------------------------------------------------------
// protobuf specification for QOS APIs
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";

package qos;
option go_package="halproto";

// QOS service definition
service QOS {
  // QOS class related APIs
  rpc QosClassCreate(QosClassRequestMsg) returns (QosClassResponseMsg) {}
  rpc QosClassUpdate(QosClassRequestMsg) returns (QosClassResponseMsg) {}
  rpc QosClassDelete(QosClassDeleteRequestMsg) returns (QosClassDeleteResponseMsg) {}
  rpc QosClassGet(QosClassGetRequestMsg) returns (QosClassGetResponseMsg) {}

  // Copp related APIs
  rpc CoppUpdate(CoppRequestMsg) returns (CoppResponseMsg) {}
  rpc CoppGet(CoppGetRequestMsg) returns (CoppGetResponseMsg) {}

}

// Specifications of a policer
message PolicerSpec {
  uint32 bps_rate   = 1;    // rate for this policer in bytes-per-second
  uint32 burst_size = 2;    // Burst size allowed for the policer in bytes
}

// PolicerStats captures all the statistics of a policer
message PolicerStats {
  uint64 permitted_packets = 1;    // Count of permitted packets by the policer
  uint64 permitted_bytes   = 2;    // Count of permitted bytes by the policer
  uint64 dropped_packets   = 3;    // Count of dropped packets by the policer
  uint64 dropped_bytes     = 4;    // Count of dropped bytes by the policer
}

// QosGroup identifier
enum QosGroup {
  DEFAULT                   = 0;     // Default qos group
  USER_DEFINED_1            = 1;     // User defined qos group 1
  USER_DEFINED_2            = 2;     // User defined qos group 2
  USER_DEFINED_3            = 3;     // User defined qos group 3
  USER_DEFINED_4            = 4;     // User defined qos group 4
  USER_DEFINED_5            = 5;     // User defined qos group 5
  USER_DEFINED_6            = 6;     // User defined qos group 6
  CONTROL                   = 7;     // Control traffic
  SPAN                      = 8;     // Span traffic
  INTERNAL_ADMIN            = 9;     // TODO: REMOVE DOL only - Internal group for admin
  INTERNAL_RX_PROXY_NO_DROP = 10;    // TODO: REMOVE DOL only - Internal group for Rx Proxy no drop traffic
  INTERNAL_RX_PROXY_DROP    = 11;    // TODO: REMOVE DOL only - Internal group for Rx Proxy drop traffic
  INTERNAL_TX_PROXY_NO_DROP = 12;    // TODO: REMOVE DOL only - Internal group for Tx Proxy no drop traffic
  INTERNAL_TX_PROXY_DROP    = 13;    // TODO: REMOVE DOL only - Internal group for Tx Proxy drop traffic
  INTERNAL_CPU_COPY         = 14;    // TODO: REMOVE DOL only - Internal group for CPU Copy traffic
}

// QosClassKeyHandle uniquely identifies a QosClass
message QosClassKeyHandle {
  oneof key_or_handle {
    QosGroup qos_group        = 1;    // Qos Group
    fixed64  qos_class_handle = 2;    // id of QosClass returned by HAL
  }
}

// QosBuffer specifies the buffer parameters
message QosBuffer {
  uint32 reserved_mtus    = 1;    // Number of bytes reserved in #mtus
  uint32 headroom_mtus    = 2;    // Number of bytes reserved to absorb in-flight
                                  // pkts for no-drop classes in #mtus
  uint32 xon_threshold    = 3;    // Relative threshold from the
                                  // max occupancy at which to clear the xoff
  uint32 xoff_clear_limit = 4;    // When the buffer occupancy goes
                                  // below this limit, xoff will be cleared
}

// QosPFC specifies the pfc cos-es
message QosPFC {
  repeated uint32 pfc_cos = 1;    // PFC cos values for no-drop classes
}

// QosSched specifies the QosClass scheduling configuration
message QosSched {
  // DWRR specific information
  message DWRRInfo {
    uint32             bw_percentage = 1;    // Bandwidth allocated
  }

  // Strict Priority specific information for the class
  message StrictPriorityInfo {
    uint32             bps           = 1;    // Rate in bytes-per-sec, 0 for disabling rate-limit
  }

  oneof SchedType {
    DWRRInfo           dwrr          = 1;    // Class is DWRR type scheduling
    StrictPriorityInfo strict        = 2;    // Class is Strict priority type scheduling
  }
}

// QosUplinkClassMap specifies the policy with which traffic from network
// is classified
message QosUplinkClassMap {
  uint32          dot1q_pcp = 1;    // Classify based on this outer qtag pcp value
  repeated uint32 ip_dscp   = 2;    // Classify based on these ipv4/v6 dscp values
}

// QosMarking specifies the policy to mark the host-to-network traffic
message QosMarking {
  bool   dot1q_pcp_rewrite_en = 1;    // Enable 802.1q PCP rewrite
  uint32 dot1q_pcp            = 2;    // Value of PCP to rewrite with
  bool   ip_dscp_rewrite_en   = 3;    // Enable ip dscp rewrite
  uint32 ip_dscp              = 4;    // Value of dscp to rewrite with
}

// QosClass specification
message QosClassSpec {
  types.ObjectMeta  meta             = 1;    // object meta
  // key_or_handle is QosClass's key or handle
  QosClassKeyHandle key_or_handle    = 2 [(gogoproto.moretags) = "venice:\"key\""];
  uint32            mtu              = 3;    // MTU
  QosBuffer         buffer           = 4;    // Buffering configuration
  QosPFC            pfc              = 5;    // PFC configuration
  QosSched          sched            = 6;    // Scheduling configuration
  QosUplinkClassMap uplink_class_map = 7;    // Class map for class derivation on uplinks
  QosMarking        marking          = 8;    // Marking policy for host-to-network traffic
}

// QosClassRequestMsg is batched request to create/update the QosClasss
message QosClassRequestMsg {
  repeated QosClassSpec request = 1;    // batch of requests
}

// QosClassStatus represents the operational status of QosClass
message QosClassStatus {
  fixed64 qos_class_handle = 1;    // Handle for the QosClass
}

// QosClassResponse is response to one QosClassSpec
message QosClassResponse {
  types.ApiStatus api_status = 1;    // API status code
  QosClassStatus  status     = 2;    // operational status
}

// QosClassResponseMsg is response to QosClassRequestMsg
message QosClassResponseMsg {
  repeated QosClassResponse response = 1;    // batch of responses
}

// QosClassDeleteRequest  is used to delete a QosClass object
message QosClassDeleteRequest {
  types.ObjectMeta  meta          = 1;    // object meta
  // key_or_handle is to identify QosClass being deleted
  QosClassKeyHandle key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// QosClassDeleteRequestMsg is used to delete a batch of QosClasss
message QosClassDeleteRequestMsg {
  repeated QosClassDeleteRequest request = 1;    // batch of requests
}

// QosClassDeleteResponseMsg is batched response to QosClassDeleteRequestMsg
message QosClassDeleteResponseMsg {
  repeated types.ApiStatus api_status = 1;    // API status code
}

// QosClassStats captures all the statistics of given QosClass
message QosClassStats {
}

// QosClassGetRequest is used to get information about a QosClass
message QosClassGetRequest {
  types.ObjectMeta  meta          = 1;    // object meta
  // key_or_handle is to identify QosClass being deleted
  QosClassKeyHandle key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

// Batched request message to get the stats about a batch of QosClasss
message QosClassGetRequestMsg {
  repeated QosClassGetRequest request = 1;    // batch of requests
}

// QosClassGetResponse captures all the information about a QosClass
message QosClassGetResponse {
  QosClassSpec   spec   = 1;    // QosClass configuration
  QosClassStatus status = 2;    // QosClass operational status
  QosClassStats  stats  = 3;    // QosClass statistics
}

// QosClassGetResponseMsg is response to QosClassGetRequestMsg
message QosClassGetResponseMsg {
  repeated QosClassGetResponse response = 1;    // batched get responses
}

// CoppType identifies the type of traffic for the copp policy
enum CoppType {
  COPP_TYPE_FLOW_MISS = 0;    // Flow miss pkts
  COPP_TYPE_ARP       = 1;    // ARP
  COPP_TYPE_DHCP      = 2;    // DHCP
}

// CoppKeyHandle uniquely identifies a Copp
message CoppKeyHandle {
  oneof key_or_handle {
    CoppType copp_type   = 1;    // Copp type
    fixed64  copp_handle = 2;    // id of Copp returned by HAL
  }
}

// Specifications of a Copp
message CoppSpec {
  types.ObjectMeta meta          = 1;    // object meta
  // key_or_handle is Copp's unique identifier
  CoppKeyHandle    key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
  PolicerSpec      policer       = 3;    // Policer specification
}

// Batched requests to create/update Copps
message CoppRequestMsg {
  repeated CoppSpec request = 1;    // batched Copps
}

message CoppStatus {
  fixed64 copp_handle = 1;    // id of the Copp returned by HAL
}

// CoppResponse is response to one Copp
message CoppResponse {
  types.ApiStatus api_status = 1;    // API status code
  CoppStatus      status     = 2;    // Copp operational state
}

// Batched responses to create/update Copps
message CoppResponseMsg {
  repeated CoppResponse response = 1;    // batched responses
}

// CoppGetRequest is used to get information about a Copp
message CoppGetRequest {
  types.ObjectMeta meta          = 1;    // object meta
                                         // key_or_handle is Copp's unique identifier
  CoppKeyHandle    key_or_handle = 2 [(gogoproto.moretags) = "venice:\"key\""];
}

message CoppGetRequestMsg {
  repeated CoppGetRequest request = 1;    // batched get request
}

// CoppGetResponse captures all the information about a Copp
message CoppGetResponse {
  CoppSpec     spec   = 1;    // Copp configuration
  CoppStatus   status = 2;    // Copp operational status
  PolicerStats stats  = 3;    // Copp statistics
}

// CoppGetResponseMsg is response to CoppGetRequestMsg
message CoppGetResponseMsg {
  repeated CoppGetResponse response = 1;    // batched get response
}
