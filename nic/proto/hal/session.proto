//------------------------------------------------------------------------------
// protobuf specification for session/lif APIs
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "nwsec.proto";
import "kh.proto";

package session;
option go_package="halproto";

// The session service definition
service Session {
  rpc SessionCreate (SessionRequestMsg) returns (SessionResponseMsg) {}
  rpc SessionDelete (SessionDeleteRequestMsg) returns (SessionDeleteResponseMsg) {}
  rpc SessionGet (SessionGetRequestMsg) returns (stream SessionGetResponseMsg) {}
}

// Key for L2 flows (i.e, non-IP flows)
message FlowKeyL2 {
  fixed64    smac           = 1;   // source MAC address
  fixed64    dmac           = 2;   // destination MAC address
  uint32     ether_type     = 4;   // ether type 
  uint32     l2_segment_id  = 3;   // L2 segment id
}

message FlowKeyTcpUdpInfo {
  uint32    sport = 1;         // TCP/UDP source port
  uint32    dport = 2;         // TCP/UDP destination port
}

message FlowKeyICMPInfo {
  uint32    type = 1;          // ICMP type
  uint32    code = 2;          // ICMP code
  uint32    id   = 3;          // ICMP id, if any
}

message FlowKeyESPInfo {
  uint32   spi = 1;            // Security Parameters Index (SPI)
}

// Key for IPv4 flows
message FlowKeyV4 {
  fixed32                  sip      = 1;    // source IP address
  fixed32                  dip      = 2;    // destination IP address
  types.IPProtocol         ip_proto = 3;    // IP protocol
  // TODO: add AH etc. here
  oneof l4_fields {
      FlowKeyTcpUdpInfo    tcp_udp  = 4;    // TCP/UDP ports
      FlowKeyICMPInfo      icmp     = 5;    // ICMP type, code and id
      FlowKeyESPInfo       esp      = 6;    // ESP type
  }
}

// Key for IPv6 flows
message FlowKeyV6 {
  types.IPAddress     sip           = 1;    // source IP address
  types.IPAddress     dip           = 2;    // destination IP address
  types.IPProtocol    ip_proto      = 3;    // IP protocol
  // TODO: add AH etc. here
  oneof l4_fields {
      FlowKeyTcpUdpInfo    tcp_udp  = 4;    // TCP/UDP ports
      FlowKeyICMPInfo      icmp     = 5;    // ICMP type, code and id
      FlowKeyESPInfo       esp      = 6;    // ESP type
  }
}

// FlowKey is the key for uni-directional flow
message FlowKey {
 fixed64         src_vrf_id    = 1;    // Flow Src Vrf Id
 fixed64         dst_vrf_id    = 2;    // Flow Dst Vrf Id
 oneof flow_key {
    FlowKeyL2    l2_key    = 3;    // L2 key
    FlowKeyV4    v4_key    = 4;    // IPv4 key
    FlowKeyV6    v6_key    = 5;    // IPv6 key
  }
}

// Types of NAT
enum NatType {
  NAT_TYPE_NONE         = 0;
  NAT_TYPE_SNAT         = 1;    // source NAT
  NAT_TYPE_DNAT         = 2;    // destination NAT
  NAT_TYPE_TWICE_NAT    = 3;    // twice NAT
}

// Flow actions
enum FlowAction {
  FLOW_ACTION_NONE        = 0;
  FLOW_ACTION_ALLOW       = 1;    // allow the packets
  FLOW_ACTION_DROP        = 2;    // drop the packets
}

// Flow TCP states
// TODO: Srini, please define all other states
enum FlowTCPState {
  FLOW_TCP_STATE_INIT            = 0;
  FLOW_TCP_STATE_SYN_RCVD        = 1;
  FLOW_TCP_STATE_ACK_RCVD        = 2;
  FLOW_TCP_STATE_SYN_ACK_RCVD    = 3;
  FLOW_TCP_STATE_ESTABLISHED     = 4;
  FLOW_TCP_STATE_FIN_RCVD        = 5;
  FLOW_TCP_STATE_BIDIR_FIN_RCVD  = 6;
  FLOW_TCP_STATE_RESET           = 7;
}

// App Types ... In sync with p4/nw/include/defines.h
// TODO: Revisit once we decide if flow drives app_id or service_lif
enum FlowType {
  FLOW_TYPE_NONE         = 0;
  FLOW_TYPE_CLASSIC_NIC  = 1;
  FLOW_TYPE_RDMA         = 2;
  FLOW_TYPE_TCPTLS       = 3;
  FLOW_TYPE_IPSEC        = 4;
  FLOW_TYPE_NDE          = 5;
  FLOW_TYPE_STORAGE      = 6;
  FLOW_TYPE_TELEMETRY    = 7;
}

// flow instance primary vs secondary
enum FlowInstance {
  FLOW_INSTANCE_NONE      = 0;
  FLOW_INSTANCE_PRIMARY   = 1;
  FLOW_INSTANCE_SECONDARY = 2;
}

// FlowInfo contains flow information like counters, forwarding information,
// NAT rewrite information etc.
message FlowInfo {
  FlowAction                         flow_action                  = 1;     // flow action(s)
  uint32                             flow_age                     = 2;     // Flow Age
  uint32                             time_to_age                  = 3;     // Remaining timeout for flow aging to kick in
  uint64                             last_packet_seen_time        = 4;     // Last packet seen by P4 in nano seconds
  NatType                            nat_type                     = 5;     // NAT mode
  types.IPAddress                    nat_sip                      = 6;     // source IP to NAT to
  uint32                             nat_sport                    = 7;     // source port to NAT to
  types.IPAddress                    nat_dip                      = 8;     // destination IP to NAT to
  uint32                             nat_dport                    = 9;     // dstination port to NAT to
  fixed64                            nat_dmac                     = 10;    // For DSR
  FlowTCPState                       tcp_state                    = 11;    // TCP state, if any
  FlowTCPState                       hal_tcp_state                = 12;    // TCP state in hal
  bool                               source_lif_check_enable      = 13;    // Is expected source lif check programmed ?
  uint32                             expected_source_lif          = 14;    // Expected source lif for the flow. 
  repeated kh.MirrorSessionKeyHandle ing_mirror_sessions          = 15  [(gogoproto.moretags) = "venice:constraints={range:0-7}"]; // list of mirror destinations
  repeated kh.MirrorSessionKeyHandle egr_mirror_sessions          = 16 [(gogoproto.moretags) = "venice:constraints={range:0-7}"];// list of mirror destinations
  uint32                             idle_timeout                 = 17;    // Idle timeout of the flow
}

message ConnTrackExceptions {
  bool tcp_syn_retransmit                   = 1;
  bool tcp_win_zero_drop                    = 2;
  bool tcp_full_retransmit                  = 3;
  bool tcp_partial_overlap                  = 4;
  bool tcp_packet_reorder                   = 5;
  bool tcp_out_of_window                    = 6;
  bool tcp_invalid_ack_num                  = 7;
  bool tcp_normalization_drop               = 8;
  bool tcp_split_handshake_detected         = 9;
  bool tcp_data_after_fin                   = 10;
  bool tcp_non_rst_pkt_after_rst            = 11;
  bool tcp_invalid_first_pkt_from_responder = 12;
  bool tcp_unexpected_pkt                   = 13;
  bool tcp_rst_with_invalid_ack_num         = 14;
}

// ConnTrackInfo contains dynamic information that was recorded due to connection tracking
message ConnTrackInfo {
  fixed64              flow_create_ts             = 1;    // flow creation timestamp
  fixed64              flow_bytes                 = 2;    // number of bytes seen
  fixed32              flow_packets               = 3;    // number of packets seen
  ConnTrackExceptions  exceptions                 = 4;    // exceptions seen in the flow
  fixed32              tcp_seq_num                = 5;    // TCP sequence number
  fixed32              tcp_ack_num                = 6;    // TCP ack number
  uint32               tcp_win_sz                 = 7;    // TCP window size
  uint32               tcp_win_scale              = 8;    // TCP window scale
  uint32               tcp_mss                    = 9;    // TCP MSS
  bool                 tcp_sack_perm_option_sent  = 10;   // TCP SACK Permitted option negotiated or not
  sint32               iflow_syn_ack_delta        = 11;   // syn cookie delta of iflow
  bool                 tcp_ws_option_sent         = 12;   // TCP ws option sent or not
  bool                 tcp_ts_option_sent         = 13;   // TCP ts option sent or not
}

message TelemetryInfo {
  bool                 ingress_mirror_session_enable = 1;  // Is Ingress mirror enabled ?
  bool                 egress_mirror_session_enable  = 2;  // Is Egress mirror enabled ?
  uint32               ingress_mirror_session        = 3;  // Ingress mirror session id
  uint32               egress_mirror_session         = 4;  // Egress mirror session id
  uint32               flow_export_enable_bitmap     = 5;  // Flow Export enable bitmap
  uint32               flow_export_id1               = 6;  // Flow Export id 1
  uint32               flow_export_id2               = 7;  // Flow Export id 2
  uint32               flow_export_id3               = 8;  // Flow Export id 3
  uint32               flow_export_id4               = 9;  // Flow Export id 4
}

// FlowData captures all the flow information
message FlowData {
  FlowInfo         flow_info = 1;          // flow forwarding, rewriting information
  ConnTrackInfo    conn_track_info = 2;    // connection state of the flow
  TelemetryInfo    telemetry_info = 3;     // Telemetry state of the flow
}

// FlowSpec contains all information needed to install a uni-directional flow
//   - FlowKey is the key to uniquely identify a flow
//   - FlowInfo contains flow information like counters, forwarding information,
//     NAT rewrite information etc.
//   - ConnTrackInfo contains all the information gathered so far about the flow
//     when connection tracking is enabled. In vMotion case, this will be
//     carried from old location to new location
message FlowSpec {
  FlowKey          flow_key        = 1;    // flow key
  FlowData         flow_data       = 2;    // flow data
}

// SessionSpec represents a full session with forward and reverse flow
// It is possible to have a session with just one flow (for L2 mcast/bcast)
message SessionSpec {
  kh.VrfKeyHandle      vrf_key_handle         = 1;
  // session_id is unique session identifier
  fixed32              session_id             = 2 [(gogoproto.moretags) = "venice:key"];
  bool                 conn_track_en          = 3;   // TRUE if connection tracking is ON
  bool                 tcp_ts_option          = 4;   // TCP timestamp option seen or not
  bool                 tcp_sack_perm_option   = 5;   // TCP SACK Permitted option negotiated or not
  FlowSpec             initiator_flow         = 6;   // initiator flow
  FlowSpec             responder_flow         = 7;   // responder flow
  FlowSpec             peer_initiator_flow    = 8;   // peer initiator flow
  FlowSpec             peer_responder_flow    = 9;   // peer responder flow
  bool                 deleting               = 10;  // is the session to be deleted
  bool                 tcp_aging_enqueued     = 11;  // is TCP aging enqueued
}

// SessionRequestMsg is batched session request message
message SessionRequestMsg {
  repeated SessionSpec    request = 1;  // batched sessions
}

// FlowStatus captures the operational status of flows
// TODO - add all the indices we allocated internally - rewrite indices,
// dst lif or mcast replication index, rtt info etc.
message FlowStatus {
  fixed64             flow_handle     = 1;    // id of the flow (returned by HAL)
  ConnTrackInfo       conn_track_info = 2;    // connection tracking info
  TelemetryInfo       telemetry_info  = 3;    // telemetry info per session
  bool                flow_coll       = 4;    // TODO: flow collision. Only till recirc works  
  uint32              flow_hash       = 5;    // TODO: REMOVE flow hash. Only for DOL testing
  types.FlowDirection flow_direction  = 6;    // flow direction
  FlowInstance        flow_instance   = 7;    // flow instance (for proxy etc.)
}

message ALGStatus {
  types.IPAddress           src_ip          = 1;
  types.IPAddress           dst_ip          = 2;
  uint32                    proto           = 3;
  uint32                    sport           = 4;
  uint32                    dport           = 5;
  bool                      iscontrol       = 6;
}

message EXPECTEDFlows {
  repeated nwsec.FlowGateKey flow   = 1; 
}

message ACTIVESessions {
  repeated nwsec.FlowGateKey active_session   = 1; 
}

message TCPSegment {
  uint32              start           = 1;
  uint32              end             = 2;
}

// TCPBuffer captures TCP Buffer information used by ALG Apps
message TCPBuffer {
  uint32               current_seq     = 1;
  uint32               end_buff_seq    = 2;
  uint32               buff_size       = 3;
  uint32               num_segments    = 4;
  repeated TCPSegment  segments        = 5;
  uint32               current_slab    = 6;
  bytes                payload         = 7;
}

// TFTPInfo captures the operational status of TFTP ALG session
message TFTPALGInfo {
  bool                 iscontrol        = 1; // Is this flow control/data TFTP flow
  uint32               parse_error      = 2; // Number of parse errors recorded for this session
  uint32               unknown_opcode   = 3; // Number of unknown opcode received
  uint32               tftpop           = 4; // TFTP Operation received
}

// RPCInfo captures the operational status of SUNRPC/MSFT RPC ALG session
message RPCALGInfo {
  bool                 iscontrol            = 1; // Is this flow control/data TFTP flow
  uint32               parse_error          = 2; // Number of parse errors recorded for this session
  uint32               num_data_sess        = 3; // Number of active data sessions associated with this control session
  uint32               num_exp_flows        = 4; // Number of expected flows opened by this session
  uint32               maxpkt_size_exceeded = 5; // Number of packets that exceeded maximum packet size while L7 reassembly 
} 

// SIPInfo captures the operational status of SIP ALG session
message SIPALGInfo {
  uint32               parse_error    = 1; // Number of parse errors recorded for this session
}

// Types of NAT
enum FTPCmdType {
  FTP_CMD_REQUEST       = 0;
  FTP_CMD_RESPONSE      = 1;
}

// FTPInfo captures the operational status of FTP ALG session
message FTPALGInfo {
  bool                 iscontrol         = 1; // Is this flow control/data FTP flow
  uint32               parse_error       = 2; // Number of parse errors recorded for this session
  uint32               num_data_sess     = 3; // Number of active data sessions associated with this control session
  uint32               num_exp_flows     = 4; // Number of expected flows opened by this session
  TCPBuffer            iflow_tcp_buf     = 5;
  TCPBuffer            rflow_tcp_buf     = 6;
  FTPCmdType           expected_cmd_type = 7; 
  EXPECTEDFlows        expected_flows    = 8; 
  ACTIVESessions       created_sessions  = 9; 
}

// RTSPALGInfo captures the operational status of RTSP ALG session
message RTSPALGInfo {
  bool                 iscontrol         = 1; // Is this flow control/data RTSP flow
  string               sessionid         = 2; // RTSP Session id
  uint32               parse_errors      = 3; // Number of parse errors recorded for this session
  uint32               num_data_sess     = 4; // Number of active data sessions associated with this control session
  uint32               num_exp_flows     = 5; // Number of expected flows opened by this session
  uint32               num_rtsp_sessions = 6; // Number of RTSP app sessions
}

// DNSALGInfo captures the operational status of DNS ALG session
message DNSALGInfo {
  uint32               parse_errors   = 1; // Number of parse errors recorded for this session
  uint32               dns_id         = 2; // DNS id of seen by this session
  uint32               time_remaining = 3; // Remaining time to timer expiry for session cleanup
}

// SessionStatus captures the operational status of the session
message SessionStatus {
  fixed64                session_handle    = 1;    // id of the session (returned by HAL)
  FlowStatus             iflow_status      = 2;    // operational status of iflow
  FlowStatus             rflow_status      = 3;    // operational status of rflow
  FlowStatus             peer_iflow_status = 4;    // operational status of peer iflow
  FlowStatus             peer_rflow_status = 5;    // operational status of peer rflow
  uint32                 app_id            = 6;    // L7 app id
  uint32                 app_id_state      = 7;    // L7 app id state
  nwsec.ALGName          alg               = 8;    // ALG applied on the session
  oneof alg_info {
      TFTPALGInfo        tftp_info         = 9;
      RPCALGInfo         rpc_info          = 10;
      SIPALGInfo         sip_info          = 11;
      RTSPALGInfo        rtsp_info         = 12;
      DNSALGInfo         dns_info          = 13;
      FTPALGInfo         ftp_info          = 14;
  } 
  bool                   session_syncing   = 15;    // Session in the midst of syncing by vMotion
  fixed64                lookup_vrf        = 16;    // Hardware lookup VRF of the L2Seg
  fixed64                smac              = 17;   // source MAC address
  fixed64                dmac              = 18;   // destination MAC address
  uint32                 l2seg_id          = 19;   // L2 segment id
}

// SessionResponse is the response to one SessionSpec
message SessionResponse {
  types.ApiStatus       api_status  = 1;    // API status code
  SessionStatus         status      = 2;    // operational status
}

// SessionResponseMsg is the response to SessionRequestMsg
message SessionResponseMsg {
  repeated SessionResponse    response = 1;    // batched responses
}

// SessionDeleteRequest is used to delete a session
message SessionDeleteRequest {
  // session_handle is the handle of the session
  oneof get_by {
      fixed64             session_handle  = 1 [(gogoproto.moretags) = "venice:key"];
      SessionFilter       session_filter  = 2;
  }
}

// SessionDeleteRequestMsg is batched session delete request
message SessionDeleteRequestMsg {
  repeated SessionDeleteRequest    request = 1;  // batched delete request
}

// SessionDeleteResponse is response to session delete request
message SessionDeleteResponse {
  types.ApiStatus api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  fixed64         session_handle = 2;         // session handle for which the API status is set
}

// SessionDeleteResponseMsg is batched response to SessionDeleteRequestMsg
message SessionDeleteResponseMsg {
  repeated SessionDeleteResponse response = 1;    // batched response
}

message SessionFilter {
  types.IPAddress           src_ip          = 1;
  types.IPAddress           dst_ip          = 2;
  uint32                    src_port        = 3;
  uint32                    dst_port        = 4;
  types.IPProtocol          ip_proto        = 5;
  fixed64                   vrf_id          = 6;
  uint32                    l2_segment_id   = 7;
  nwsec.ALGName             alg             = 8;
}

// SessionGetRequest  is used to get information about a session
message SessionGetRequest {
  // session_handle is the handle of the session
  oneof get_by {
      fixed64             session_handle  = 1 [(gogoproto.moretags) = "venice:key"];
      SessionFilter       session_filter  = 2;
  }
}

// SessionGetRequestMsg  is batched get request
message SessionGetRequestMsg {
  repeated SessionGetRequest    request = 1; // batched get request
}

// FlowStats contains all the stats collected per flow
message FlowStats {
  fixed64    flow_permitted_packets      = 1;
  fixed64    flow_permitted_bytes        = 2;
  fixed64    flow_dropped_packets        = 3;
  fixed64    flow_dropped_bytes          = 4;
  fixed64    num_tcp_tickles_sent        = 5; 
  fixed64    num_tcp_rst_sent            = 6; 
}

// SessionStats captures statistics of all its constituent flows
message SessionStats {
  FlowStats    initiator_flow_stats      = 1;     // stats of initiator flow
  FlowStats    responder_flow_stats      = 2;     // stats of responder flow
  FlowStats    peer_initiator_flow_stats = 3;     // stats of peer initiator flow
  FlowStats    peer_responder_flow_stats = 4;     // stats of peer responder flow
}

// SessionGetResponse is response to one SessionGetRequest
message SessionGetResponse {
 types.ApiStatus      api_status = 1;    // API status code
  SessionSpec         spec       = 2;
  SessionStatus       status     = 3;
  SessionStats        stats      = 4;
}

// SesssionGetResponseMsg is batched response to SesssionGetRequestMsg
message SessionGetResponseMsg {
  types.ApiStatus                api_status = 1;    // API status code
  repeated SessionGetResponse    response   = 2;    // batched response
}
