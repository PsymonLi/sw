//------------------------------------------------------------------------------
// protobuf specification for rawccb (App Raw Chain control block)
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";

package rawccb;

// The tcp  cb service definition
service RawcCb {
  rpc RawcCbCreate (RawcCbRequestMsg) returns (RawcCbResponseMsg) {}
  rpc RawcCbUpdate (RawcCbRequestMsg) returns (RawcCbResponseMsg) {}
  rpc RawcCbDelete (RawcCbDeleteRequestMsg) returns (RawcCbDeleteResponseMsg) {}
  rpc RawcCbGet (RawcCbGetRequestMsg) returns (RawcCbGetResponseMsg) {}
}

// RawcCbKeyHandle is used to operate on a rawccb either by its key or handle
message RawcCbKeyHandle {
  oneof key_or_handle {
    uint32     rawccb_id          = 1;    // unique rawccb id allocated by app
    fixed64    rawccb_handle      = 2;    // rawccb handle returned by HAL
  }
}

// RawcCbSpec captures all the rawccb level configuration
message RawcCbSpec {
  types.ObjectMeta      meta                       = 1;    // common object meta
  RawcCbKeyHandle       key_or_handle              = 2;    // rawccb being created/updated
  uint32                pi                         = 3;
  uint32                ci                         = 4;
  uint32                rawccb_flags               = 5;
  uint32                my_txq_base                = 6;
  uint32                my_txq_ring_size_shift     = 7;
  uint32                my_txq_entry_size_shift    = 8;
  uint32                chain_txq_base             = 9;    // next service chain TxQ base
  uint32                chain_txq_ring_indices_addr= 10;
  uint32                chain_txq_ring_size_shift  = 11;
  uint32                chain_txq_entry_size_shift = 12;
  uint32                chain_txq_lif              = 13;
  uint32                chain_txq_qtype            = 14;
  uint32                chain_txq_qid              = 15;
  uint32                chain_txq_ring             = 16;
}

// RawcCbRequestMsg is batched add or modify rawccb request
message RawcCbRequestMsg {
  repeated RawcCbSpec    request = 1;    // batched request
}

// RawcCbStatus is the operational status of a given rawccb
message RawcCbStatus {
  fixed64    rawccb_handle = 1;    // id of rawccb returned by HAL
}

// RawcCbResponse is response to RawcCbSpec
message RawcCbResponse {
  types.ApiStatus        api_status      = 1;    // API status code
  RawcCbStatus           rawccb_status   = 2;    // rawccb status, if api succeeded
}

// RawcCbResponseMsg is batched response to RawcCbRequestMsg
message RawcCbResponseMsg {
  repeated RawcCbResponse    response = 1;    // batched response
}

// RawcCbDeleteRequest is used to delete a rawccb
message RawcCbDeleteRequest {
  types.ObjectMeta        meta          = 1;    // object meta
  RawcCbKeyHandle         key_or_handle = 2;    // RawcCb key or handle
}

// RawcCbDeleteRequestMsg is used to delete a batch of rawccbs
message RawcCbDeleteRequestMsg {
  repeated RawcCbDeleteRequest    request = 1;    // batched delete request
}

// RawcCbDeleteResponseMsg is batched response to RawcCbDeleteRequestMsg
message RawcCbDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// RawcCbGetRequest is used to get information about a rawccb
message RawcCbGetRequest {
  types.ObjectMeta          meta          = 1;    // object meta
  RawcCbKeyHandle       key_or_handle = 2;    // RawcCb key or handle
}

// RawcCbGetRequestMsg is batched GET requests for rawccbs
message RawcCbGetRequestMsg {
  repeated RawcCbGetRequest    request = 1;    // batched get request
}

// RawcCbStats is the statistics object for each rawccb
message RawcCbStats {
}

// RawcCbGetResponse captures all the information about a rawccb
// only if api_status indicates success, other fields are valid
message RawcCbGetResponse {
  types.ApiStatus    api_status = 1;    // API status code
  RawcCbSpec         spec       = 2;    // rawccb configuration
  RawcCbStatus       status     = 3;    // operational state of rawccb
  RawcCbStats        stats      = 4;    // stats of the rawccb
}

// RawcCbGetResponseMsg is batched response to RawcCbGetRequestMsg
message RawcCbGetResponseMsg {
  repeated RawcCbGetResponse    response = 1;    // batch get response
}
