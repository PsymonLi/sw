// {C} Copyright 2017 Pensando Systems Inc. All rights reserved

//------------------------------------------------------------------------------
// protobuf specification for HAL debug package
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";

package debug;
option go_package="halproto";

// HAL debug service
service Debug {
  rpc RegisterGet    (RegisterRequestMsg) returns (RegisterResponseMsg) {}
  rpc RegisterUpdate (RegisterRequestMsg) returns (RegisterResponseMsg) {}

  rpc MemoryGet      (MemoryRequestMsg)   returns (MemoryResponseMsg) {}
  rpc MemoryUpdate   (MemoryRequestMsg)   returns (MemoryResponseMsg) {}

  rpc MemoryRawGet(MemoryRawRequestMsg)     returns (MemoryRawResponseMsg) {}
  rpc MemoryRawUpdate(MemoryRawUpdateRequestMsg)     returns (MemoryRawUpdateResponseMsg) {}

  rpc MpuTraceUpdate (MpuTraceRequestMsg) returns (MpuTraceResponseMsg) {}

  rpc MemTrackGet(MemTrackGetRequestMsg) returns (MemTrackGetResponseMsg) {}
  rpc SlabGet(SlabGetRequestMsg) returns (SlabGetResponseMsg){}
  rpc TraceUpdate(TraceRequestMsg) returns (TraceResponseMsg){}
  rpc TraceGet(types.Empty) returns (TraceResponseMsg) {}
}

message RegisterRequest {
  oneof id_or_name {
    fixed32    reg_id     = 1;    // register ID being accessed
    string     reg_name   = 2;    // register name being accessed
  }
  string       block_name = 3;    // block name being accessed
  uint64       addr       = 4;    // address to be read/write
  uint32       reg_data   = 5;    // data to write
}

message RegisterRequestMsg {
  repeated RegisterRequest    request = 1;    // batched request
}

message RegisterResponse {
    types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
    RegisterData     data       = 2;   // return data for register read operations
}

message RegisterResponseMsg {
    repeated RegisterResponse response = 1;
}

message MemoryRequest {
  oneof id_or_name {
    fixed32    table_id      = 1;    // table ID being accessed
    string     table_name    = 2;    // table name being accessed
  }

  uint32     index           = 3;      // index for tables
  bytes      swkey           = 4;      // structure typecast to char* and wrapped with string
  bytes      swkey_mask      = 5;      // structure typecast to char* and wrapped with string
  bytes      actiondata      = 6;      // structure typecast to char* and wrapped with string
}

message MemoryRequestMsg {
  repeated MemoryRequest    request = 1;    // batched request
}

message MemoryResponse {
    types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
    uint32           index      = 2;      // index for tables
    bytes            swkey      = 3;
    bytes            swkey_mask = 4;
    bytes            actiondata = 5;
}

message MemoryResponseMsg {
    repeated MemoryResponse response = 1;
}

message MemoryRawRequest {
    uint64          address     = 1;
    uint32          len         = 2;
}

message MemoryRawRequestMsg {
    repeated MemoryRawRequest request = 1;
}

message MemoryRawResponse {
    types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
    bytes            actiondata = 2;
}

message MemoryRawResponseMsg {
    repeated MemoryRawResponse  response = 1;
}

message MemoryRawUpdateRequest {
    uint64          address     = 1;
    bytes           actiondata  = 2;
    uint32          len         = 3;
}

message MemoryRawUpdateRequestMsg {
    repeated MemoryRawUpdateRequest request = 1;
}

message MemoryRawUpdateResponse {
    types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

message MemoryRawUpdateResponseMsg {
    repeated MemoryRawUpdateResponse  response = 1;
}

// Captures the return data for registers
message RegisterData {
  string reg_name   = 1;   // Register name 
  string address    = 2;   // Register address
  string value      = 3;   // Register value
}

message MemTrackSpec {
  uint32    alloc_id = 1;    // allocation id stats are requested for (0xFFFFFFFF for all)
}

// MemTrackGetRequest is request msg with allocation id that info is requested for
message MemTrackGetRequest {
  types.ObjectMeta      meta             = 1;    // object meta
  MemTrackSpec          spec             = 2;    // qualifiers
}

// MemTrackGetRequestMsg is batched MemTrackGetRequest
message MemTrackGetRequestMsg {
  repeated MemTrackGetRequest    request = 1;    // individual request
}

// operational status of memory tracker object
message MemTrackStatus {
}

// stats per memory tracker object
message MemTrackStats {
  uint32    num_allocs    = 1;    // number of allocations with alloc_id
  uint32    num_frees     = 2;    // number of frees with alloc_id
}

// MemTrackGetResponse captures debug information per allocation id
message MemTrackGetResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  MemTrackSpec       spec       = 2;    // spec (aka. identifier of mem track object)
  MemTrackStatus     status     = 3;    // oper status, if any
  MemTrackStats      stats      = 4;    // statistics
}

// MemTrackGetResponseMsg is batched MemTrackGetResponse
message MemTrackGetResponseMsg {
  repeated MemTrackGetResponse    response   = 1;    // response per allocation id
}

// SlabSpec identifies a slab
message SlabSpec {
  string name                 = 1;    // name of the slab
  uint32 id                   = 2;    // slab identifier
  uint32 element_size         = 3;    // size of each element
  uint32 elements_per_block   = 4;    // # of elements per block
  bool   thread_safe          = 5;    // thread safe allocation/free, if TRUE
  bool   grow_on_demand       = 6;    // grow the slab on demand, if TRUE
  bool   delay_delete         = 7;    // delay delete each element, if TRUE, instead of freeing immediately
  bool   zero_on_allocation   = 8;    // zero allocated mem. if TRUE
}

// operational status of slab, if any
message SlabStatus {
}

// per slab statistics
message SlabStats {
  uint32 num_elements_in_use = 1;    // number of elements in use
  uint32 num_allocs          = 2;    // number of alloc operations
  uint32 num_frees           = 3;    // number of free operations
  uint32 num_alloc_errors    = 4;    // number of alloc errors
  uint32 num_blocks          = 5;    // number of blocks allocated
}

// SlabGetRequest is GET request per slab
message SlabGetRequest {
  types.ObjectMeta      meta = 1;    // object meta
  uint32 id                  = 2;    // slab identifier
}

// SlabGetResponse is batched GET request
message SlabGetRequestMsg {
  repeated SlabGetRequest    request = 1;    // batched get request
}

// SlabGetResponse captures all information about a slab
message SlabGetResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  SlabSpec           spec       = 2;    // slab attributes
  SlabStatus         status     = 3;    // operational status of the slab
  SlabStats          stats      = 4;    // stats of the slab
}

// SlabGetResponseMsg is batched response for GET operation
message SlabGetResponseMsg {
  repeated SlabGetResponse     response = 1;    // batched get response
}

enum TraceLevel {
  TRACE_LEVEL_NONE  = 0;    // no tracing at all
  TRACE_LEVEL_ERROR = 1;    // enable tracing only for error messages
  TRACE_LEVEL_DEBUG = 2;    // enable tracing only for debug messages
}

message TraceSpec {
  types.ObjectMeta    meta        = 1;    // common object meta
  TraceLevel          trace_level = 2;    // trace level to set to
}

message TraceRequestMsg {
  repeated TraceSpec    request = 1;    // batched request
}

message TraceResponse {
  types.ApiStatus   api_status  = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  TraceLevel        trace_level = 2;    // current trace level
}

message TraceResponseMsg {
  repeated TraceResponse    response = 1;    // batched response
}

// pipeline type for MPU trace
enum MpuTracePipelineType {
  MPU_TRACE_PIPELINE_NONE       = 0;   // pipeline type not set
  MPU_TRACE_PIPELINE_P4_INGRESS = 1;   // P4 ingress pipeline
  MPU_TRACE_PIPELINE_P4_EGRESS  = 2;   // P4 egress pipeline
  MPU_TRACE_PIPELINE_P4P_RXDMA  = 3;   // P4+ RXDMA pipeline
  MPU_TRACE_PIPELINE_P4P_TXDMA  = 4;   // P4+ TXDMA pipeline
}

message MpuTraceSpec {
  bool     enable        =  1;    // enable/disable trace for every table result
  bool     trace_enable  =  2;    // trace is enable only if TRACE instruction is executed
  bool     phv_debug     =  3;    // trace if PHV has phv_debug set
  bool     phv_error     =  4;    // trace if PHV has table error set
  uint64   watch_pc      =  5;    // start trace when PC == watch_pc
  uint64   base_addr     =  6;    // base addr where trace is present
  uint32   buf_size      =  7;    // size of the trace in number of entries
  bool     table_key     =  8;    // set table and key trace
  bool     instructions  =  9;    // set instructions trace
  bool     wrap          =  10;    // wrap the trace
  bool     reset         =  11;   // reset trace buffer index to 0. Clear wrap.
}

// parameters to enable/disable MPU tracing
message MpuTraceRequest {
  MpuTracePipelineType  pipeline_type =  1;    // pipeline type
  uint32                stage_id      =  2;    // stage id
  uint32                mpu           =  3;    // MPU number
  MpuTraceSpec          spec          =  4;    // MPU trace info
}

// Batched MPU trace enable/disable request msg
message MpuTraceRequestMsg {
  repeated MpuTraceRequest request = 1;
}

// MPU trace enable/disable status
message MpuTraceResponse {
  types.ApiStatus  api_status  = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  MpuTraceSpec     spec        = 2;    // MPU trace info
  uint32           debug_index = 3;    // current index in trace buffer
}

// Batched MPU trace response
message MpuTraceResponseMsg {
  repeated MpuTraceResponse    response = 1;
}

