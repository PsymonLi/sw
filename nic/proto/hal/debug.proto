// {C} Copyright 2017 Pensando Systems Inc. All rights reserved

//------------------------------------------------------------------------------
// protobuf specification for HAL debug package
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "kh.proto";
import "interface.proto";
import "multicast.proto";

package debug;
option go_package="halproto";

// HAL debug service
service Debug {
  // low level APIs for debugging
  rpc RegisterGet    (RegisterRequestMsg) returns (RegisterResponseMsg) {}
  rpc RegisterUpdate (RegisterRequestMsg) returns (RegisterResponseMsg) {}
  rpc MemoryGet      (MemoryRequestMsg)   returns (MemoryResponseMsg) {}
  rpc MemoryUpdate   (MemoryRequestMsg)   returns (MemoryResponseMsg) {}
  rpc MemoryRawGet(MemoryRawRequestMsg)     returns (MemoryRawResponseMsg) {}
  rpc MemoryRawUpdate(MemoryRawUpdateRequestMsg)     returns (MemoryRawUpdateResponseMsg) {}
  rpc MpuTraceUpdate (MpuTraceRequestMsg) returns (MpuTraceResponseMsg) {}

  rpc MemTrackGet(MemTrackGetRequestMsg) returns (MemTrackGetResponseMsg) {}
  rpc SlabGet(SlabGetRequestMsg) returns (SlabGetResponseMsg){}
  rpc HashTableGet(types.Empty) returns (HashTableGetResponseMsg){}
  rpc TraceUpdate(TraceRequestMsg) returns (TraceResponseMsg){}
  rpc TraceGet(types.Empty) returns (TraceResponseMsg) {}
  rpc ThreadGet(types.Empty) returns (ThreadResponseMsg) {}
  rpc ClockGet(types.Empty)  returns (ClockResponse) {}

  rpc FlushLogs(types.Empty) returns (FlushLogsResponseMsg) {}

  // generic debug operations
  // used only for linkmgr
  rpc GenericOpn(GenericOpnRequestMsg) returns (GenericOpnResponseMsg) {}

  // FTE span
  rpc FteSpanGet    (types.Empty) returns (FteSpanResponseMsg) {}
  rpc FteSpanUpdate (FteSpanRequestMsg) returns (FteSpanResponseMsg) {}

  // Snake Test
  rpc SnakeTestCreate (SnakeTestRequestMsg) returns (SnakeTestResponseMsg) {}
  rpc SnakeTestDelete (SnakeTestDeleteRequestMsg) returns (SnakeTestDeleteResponseMsg) {}
  rpc SnakeTestGet    (types.Empty) returns (SnakeTestResponseMsg) {}

  rpc HbmBwGet (HbmBwGetRequestMsg) returns (HbmBwGetResponseMsg) {}
  rpc LlcClear (types.Empty) returns (types.Empty) {}
  rpc LlcSetup (LlcSetupRequestMsg) returns (LlcSetupResponseMsg) {}
  rpc LlcGet   (types.Empty)   returns (LlcGetResponseMsg)   {}
  rpc HbmCacheSetup (HbmCacheRequestMsg) returns (HbmCacheResponseMsg) {}

  rpc SchedulerStatsGet (types.Empty) returns (SchedulerStatsResponseMsg) {}
  rpc SchedulerActiveQGet (SchedulerActiveQRequestMsg) returns (SchedulerActiveQResponseMsg) {}

  rpc PacketBufferUpdate (PacketBufferRequestMsg) returns (PacketBufferResponseMsg) {}

  rpc XcvrValidCheckEnable  (types.Empty) returns (types.Empty) {}
  rpc XcvrValidCheckDisable (types.Empty) returns (types.Empty) {}

  rpc MemoryTrim (types.Empty) returns (types.Empty) {}
  rpc QueueCreditsGet (types.Empty) returns (QueueCreditsGetResponse) {}
  rpc SessionCtrlUpdate (SessionCtrlRequestMsg) returns (types.Empty) {}    

  rpc OifListGet (OifListGetRequestMsg) returns (stream OifListGetResponseMsg) {}
}


// FTE Span
message FteSpanRequest {
  uint32                        selector         = 1;    // FTE Span Selectors. Each bit of type types.FTESpanMatchSelector
  uint32                        src_lif          = 2;    // Source Lport
  uint32                        src_lport        = 3;    // Source Lport
  uint32                        dst_lport        = 4;    // Destination Lport
  uint32                        drop_reason      = 5;    // Drop Reason
  uint32                        flow_lkup_dir    = 6;    // Flow lookup Direction. 0: From Host, 1: From Uplink
  uint32                        flow_lkup_type   = 7;    // Flow lookup Type.
  uint32                        flow_lkup_vrf    = 8;    // Flow lookup Vrf
  types.IPAddress               flow_lkup_src    = 9;    // Flow lookup Src. IP/Mac
  types.IPAddress               flow_lkup_dst    = 10;    // Flow lookup Dst. IP/Mac
  uint32                        flow_lkup_proto  = 11;   // Flow lookup Proto
  uint32                        flow_lkup_sport  = 12;   // Flow lookup Sport
  uint32                        flow_lkup_dport  = 13;   // Flow lookup Dport
  uint64                        eth_dmac         = 14;   // Ethernet dmac
  bool                          from_cpu         = 15;   // From CPU
  bool                          is_egress        = 16;   // Enable egress span
  kh.InterfaceKeyHandle         egress_if        = 17;   // Egress span on this interface
  uint32                        span_lport       = 18;   // Span Destination Lport
  bool                          attach_stats     = 19;   // Attach NACL Stats
}

message FteSpanRequestMsg {
  repeated FteSpanRequest    request = 1;    // batched request
}

message FteSpanResponse {
    types.ApiStatus  api_status   = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
    FteSpanRequest   request      = 2;
    uint32           stats_index  = 3; // NACL Stats idx if stats are attached
}

message FteSpanResponseMsg {
    repeated FteSpanResponse response = 1;
}

// Snake Test
message SnakeTestRequest {
    types.SnakeTestType type = 1; // Type of Snake Test
    uint32 vlan              = 2; // Vlan
}
message SnakeTestRequestMsg {
    repeated SnakeTestRequest request = 1;
}

message SnakeTestResponse {
    types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
    SnakeTestRequest request    = 2;
}

message SnakeTestResponseMsg {
    repeated SnakeTestResponse response = 1;
}

message SnakeTestDeleteRequest {
    types.SnakeTestType type = 1; // Type of Snake Test
}

message SnakeTestDeleteRequestMsg {
    repeated SnakeTestDeleteRequest request = 1;
}

message SnakeTestDeleteResponse {
    types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];
}

message SnakeTestDeleteResponseMsg {
    repeated SnakeTestDeleteResponse response = 1;
}

// -----------------------------------------------
// Generic debug operation messages
// -----------------------------------------------

message GenericOpnRequest {
  uint32     opn  = 1;    // operation type
  uint64     val1 = 2;    // operands
  uint64     val2 = 3;    // operands
  uint64     val3 = 4;    // operands
  uint64     val4 = 5;    // operands
}

message GenericOpnRequestMsg {
  repeated GenericOpnRequest    request = 1;    // batched request
}

message GenericOpnStatus {
  uint64     val1 = 1;
  uint64     val2 = 2;
  uint64     val3 = 3;
  uint64     val4 = 4;
}

message GenericOpnResponse {
    types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
    GenericOpnStatus status     = 2;
}

message GenericOpnResponseMsg {
    repeated GenericOpnResponse response = 1;
}

message RegisterRequest {
  oneof id_name_or_addr {
    fixed32    reg_id     = 1;    // register ID being accessed
    string     reg_name   = 2;    // register name being accessed
    uint64     addr       = 3;    // address to be read/write
  }
  string       block_name = 4;    // block name being accessed
  uint32       instance   = 5;
  uint32       reg_data   = 6;    // data to write
}

message RegisterRequestMsg {
  repeated RegisterRequest    request = 1;    // batched request
}

message RegisterResponse {
    types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
    RegisterData     data       = 2;   // return data for register read operations
}

message RegisterResponseMsg {
    repeated RegisterResponse response = 1;
}

message MemoryRequest {
  oneof id_or_name {
    fixed32    table_id      = 1;    // table ID being accessed
    string     table_name    = 2;    // table name being accessed
  }

  uint32     index           = 3;      // index for tables
  bytes      swkey           = 4;      // structure typecast to char* and wrapped with string
  bytes      swkey_mask      = 5;      // structure typecast to char* and wrapped with string
  bytes      actiondata      = 6;      // structure typecast to char* and wrapped with string
}

message MemoryRequestMsg {
  repeated MemoryRequest    request = 1;    // batched request
}

message MemoryResponse {
    types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
    uint32           index      = 2;      // index for tables
    bytes            swkey      = 3;
    bytes            swkey_mask = 4;
    bytes            actiondata = 5;
}

message MemoryResponseMsg {
    repeated MemoryResponse response = 1;
}

message MemoryRawRequest {
    uint64          address     = 1;
    uint32          len         = 2;
}

message MemoryRawRequestMsg {
    repeated MemoryRawRequest request = 1;
}

message MemoryRawResponse {
    types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
    bytes            actiondata = 2;
}

message MemoryRawResponseMsg {
    repeated MemoryRawResponse  response = 1;
}

message MemoryRawUpdateRequest {
    uint64          address     = 1;
    bytes           actiondata  = 2;
    uint32          len         = 3;
}

message MemoryRawUpdateRequestMsg {
    repeated MemoryRawUpdateRequest request = 1;
}

message MemoryRawUpdateResponse {
    types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

message MemoryRawUpdateResponseMsg {
    repeated MemoryRawUpdateResponse  response = 1;
}

// Captures the return data for registers
message RegisterData {
  string reg_name   = 1;   // Register name
  string address    = 2;   // Register address
  string value      = 3;   // Register value
}

message MemTrackSpec {
  uint32    alloc_id = 1;    // allocation id stats are requested for (0xFFFFFFFF for all)
}

// MemTrackGetRequest is request msg with allocation id that info is requested for
message MemTrackGetRequest {
  MemTrackSpec          spec             = 1;    // qualifiers
}

// MemTrackGetRequestMsg is batched MemTrackGetRequest
message MemTrackGetRequestMsg {
  repeated MemTrackGetRequest    request = 1;    // individual request
}

// operational status of memory tracker object
message MemTrackStatus {
}

// stats per memory tracker object
message MemTrackStats {
  uint32    num_allocs    = 1;    // number of allocations with alloc_id
  uint32    num_frees     = 2;    // number of frees with alloc_id
}

// MemTrackGetResponse captures debug information per allocation id
message MemTrackGetResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  MemTrackSpec       spec       = 2;    // spec (aka. identifier of mem track object)
  MemTrackStatus     status     = 3;    // oper status, if any
  MemTrackStats      stats      = 4;    // statistics
}

// MemTrackGetResponseMsg is batched MemTrackGetResponse
message MemTrackGetResponseMsg {
  repeated MemTrackGetResponse    response   = 1;    // response per allocation id
}

// SlabSpec identifies a slab
message SlabSpec {
  string name                 = 1;    // name of the slab
  uint32 id                   = 2;    // slab identifier
  uint32 element_size         = 3;    // size of each element
  uint32 elements_per_block   = 4;    // # of elements per block
  bool   thread_safe          = 5;    // thread safe allocation/free, if TRUE
  bool   grow_on_demand       = 6;    // grow the slab on demand, if TRUE
  bool   delay_delete         = 7;    // delay delete each element, if TRUE, instead of freeing immediately
  bool   zero_on_allocation   = 8;    // zero allocated mem. if TRUE
  uint32 raw_block_size       = 9;    // raw block size
}

// operational status of slab, if any
message SlabStatus {
}

// per slab statistics
message SlabStats {
  uint32 num_elements_in_use = 1;    // number of elements in use
  uint32 num_allocs          = 2;    // number of alloc operations
  uint32 num_frees           = 3;    // number of free operations
  uint32 num_alloc_errors    = 4;    // number of alloc errors
  uint32 num_blocks          = 5;    // number of blocks allocated
}

// SlabGetRequest is GET request per slab
message SlabGetRequest {
  uint32 id                  = 1;    // slab identifier
}

// SlabGetResponse is batched GET request
message SlabGetRequestMsg {
  repeated SlabGetRequest    request = 1;    // batched get request
}

// SlabGetResponse captures all information about a slab
message SlabGetResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  SlabSpec           spec       = 2;    // slab attributes
  SlabStatus         status     = 3;    // operational status of the slab
  SlabStats          stats      = 4;    // stats of the slab
}

// SlabGetResponseMsg is batched response for GET operation
message SlabGetResponseMsg {
  repeated SlabGetResponse     response = 1;    // batched get response
}

// HashTableSpec identifies a hash table
message HashTableSpec {
  string name             = 1;    // name of the hash table
  uint32 num_buckets      = 2;    // number of buckets
  bool   thread_safe      = 3;    // thread safe or not
  uint32 max_bucket_depth = 4;    // max. bucket depth
  uint32 avg_bucket_depth = 5;    // avg. bucket depth
}

// operational status of slab, if any
message HashTableStatus {
}

// per hash table statisitics
message HashTableStats {
  uint32 num_entries       = 1;    // total no. of entries in the table
  uint32 num_inserts       = 2;    // no. of insert operations so far
  uint32 num_insert_errors = 3;    // no. of insert errors
  uint32 num_deletes       = 4;    // no. of delete operations so far
  uint32 num_delete_errors = 5;    // no. of delete errors
  uint32 num_lookups       = 6;    // no. of lookup operations
}

message HashTableGetResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  HashTableSpec      spec       = 2;    // hash table attributes
  HashTableStatus    status     = 3;    // operational status of the table
  HashTableStats     stats      = 4;    // stats of the table
}

message HashTableGetResponseMsg {
  repeated HashTableGetResponse    response = 1;    // backend get response
}

enum SchedPolicy {
  SCHED_POLICY_OTHER   = 0;
  SCHED_POLICY_FIFO    = 1;
  SCHED_POLICY_RR      = 2;
}

enum ThreadRole {
  THREAD_ROLE_CONTROL   = 0;
  THREAD_ROLE_DATA      = 1;
}

message ThreadSpec {
  string        name         = 1;    // thread name
  uint32        id           = 2;    // HAL thread id
  uint32        pthread_id   = 3;    // pthread id
  int32         prio         = 4;    // thread priority
  SchedPolicy   sched_policy = 5;    // scheduling policy (SCHED_FIFO| SCHED_RR | SCHED_OTHER)
  bool          running      = 6;    // true if thread is in running state
  ThreadRole    role         = 7;    // "control" or "data" thread
  uint64        core_mask    = 8;    // core ids this thread is allowed to run on
}

message ThreadStatus {
  uint64  last_hb = 1;    // nanoseconds since last heart beat
}

message ThreadStats {
}

message ThreadResponse {
  types.ApiStatus    api_status         = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  uint64             control_core_mask  = 2;    // control core mask for the system
  uint64             data_core_mask     = 3;    // data core mask for the system
  ThreadSpec         spec               = 4;    // thread attributes
  ThreadStatus       status             = 5;    // operational status of the thread
  ThreadStats        stats              = 6;    // stats of the thread
}

message ThreadResponseMsg {
  repeated ThreadResponse    response = 1;
}

enum TraceLevel {
  TRACE_LEVEL_NONE    = 0;    // no tracing at all
  TRACE_LEVEL_ERROR   = 1;    // enable tracing only for error messages
  TRACE_LEVEL_DEBUG   = 2;    // enable tracing only for debug messages
  TRACE_LEVEL_VERBOSE = 3;    // enable tracing for verbose messages
}

message TraceSpec {
  TraceLevel          trace_level = 1;    // trace level to set to
}

message TraceRequestMsg {
  repeated TraceSpec    request = 1;    // batched request
}

message TraceResponse {
  types.ApiStatus   api_status  = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  TraceLevel        trace_level = 2;    // current trace level
}

message TraceResponseMsg {
  repeated TraceResponse    response = 1;    // batched response
}

// pipeline type for MPU trace
enum MpuTracePipelineType {
  MPU_TRACE_PIPELINE_NONE       = 0;   // pipeline type not set
  MPU_TRACE_PIPELINE_P4_INGRESS = 1;   // P4 ingress pipeline
  MPU_TRACE_PIPELINE_P4_EGRESS  = 2;   // P4 egress pipeline
  MPU_TRACE_PIPELINE_P4P_RXDMA  = 3;   // P4+ RXDMA pipeline
  MPU_TRACE_PIPELINE_P4P_TXDMA  = 4;   // P4+ TXDMA pipeline
}

message MpuTraceSpec {
  bool     enable        =  1;    // enable/disable trace for every table result
  bool     trace_enable  =  2;    // trace is enable only if TRACE instruction is executed
  bool     phv_debug     =  3;    // trace if PHV has phv_debug set
  bool     phv_error     =  4;    // trace if PHV has table error set
  uint64   watch_pc      =  5;    // start trace when PC == watch_pc
  uint64   base_addr     =  6;    // base addr where trace is present
  uint32   buf_size      =  7;    // size of the trace in number of entries
  bool     table_key     =  8;    // set table and key trace
  bool     instructions  =  9;    // set instructions trace
  bool     wrap          =  10;    // wrap the trace
  bool     reset         =  11;   // reset trace buffer index to 0. Clear wrap.
}

// parameters to enable/disable MPU tracing
message MpuTraceRequest {
  MpuTracePipelineType  pipeline_type =  1;    // pipeline type
  uint32                stage_id      =  2;    // stage id
  uint32                mpu           =  3;    // MPU number
  MpuTraceSpec          spec          =  4;    // MPU trace info
}

// Batched MPU trace enable/disable request msg
message MpuTraceRequestMsg {
  repeated MpuTraceRequest request = 1;
}

// MPU trace enable/disable status
message MpuTraceResponse {
  types.ApiStatus  api_status  = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  MpuTraceSpec     spec        = 2;    // MPU trace info
  uint32           debug_index = 3;    // current index in trace buffer
}

// Batched MPU trace response
message MpuTraceResponseMsg {
  repeated MpuTraceResponse    response = 1;
}

// Flush logs response
message FlushLogsResponse {
  types.ApiStatus  api_status  = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

// Flush logs response message
message FlushLogsResponseMsg {
  repeated FlushLogsResponse    response = 1;
}

// Clock Delta Op
enum ClockOpType {
  CLOCK_DELTA_OP_ADD                                = 0;
  CLOCK_DELTA_OP_DEL                                = 1;
}

message ClockSpec {
  uint64      hardware_clock      = 1; // Hardware clock in nanoseconds
  ClockOpType clock_op_type       = 2; // Clock delta operation type
  uint64      software_delta      = 3; // Computed software delta in nanoseconds
  uint64      software_clock      = 4; // Software clock after the delta has been applied
}

message ClockStatus {
}

message ClockStats {
}

message ClockResponse {
  types.ApiStatus   api_status         = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  ClockSpec         spec               = 2;    // Clock Info
  ClockStatus       status             = 3;    // clock status
  ClockStats        stats              = 4;    // clock stats
}

enum CapriBlock {
  CAPRI_BLOCK_PB    = 0;
  CAPRI_BLOCK_TXDMA = 1;
  CAPRI_BLOCK_RXDMA = 2;
  CAPRI_BLOCK_MS    = 3;
  CAPRI_BLOCK_PCIE  = 4;
}

message Bandwidth {
  double read  = 1;
  double write = 2;
}

message HbmBwGetRequest {
  uint32 num_samples    = 1;
  uint32 sleep_interval = 2;
}

message HbmBwGetRequestMsg {
  repeated HbmBwGetRequest     request = 1;
}

message HbmBwGetResponse {
  CapriBlock type     = 1;
  Bandwidth  average  = 2;
  Bandwidth  maximum  = 3;
  uint64     clk_diff = 4;
}

message HbmBwGetResponseMsg {
  repeated HbmBwGetResponse    response = 1;
}

enum LlcCounterType {
  LLC_COUNTER_CACHE_NONE        = 0;
  LLC_COUNTER_CACHE_READ        = 1;
  LLC_COUNTER_CACHE_WRITE       = 2;
  LLC_COUNTER_SCRATCHPAD_ACCESS = 3;
  LLC_COUNTER_CACHE_HIT         = 4;
  LLC_COUNTER_CACHE_MISS        = 5;
  LLC_COUNTER_PARTIAL_WRITE     = 6;
  LLC_COUNTER_CACHE_MAINT_OP    = 7;
  LLC_COUNTER_EVICTION          = 8;
  LLC_COUNTER_RETRY_NEEDED      = 9;
  LLC_COUNTER_RETRY_ACCESS      = 10;
}

message LlcSetupRequest {
  LlcCounterType        type    = 1;
}

message LlcSetupRequestMsg {
  repeated LlcSetupRequest     request = 1;
}

message LlcSetupResponse {
  types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

message LlcSetupResponseMsg {
  repeated LlcSetupResponse    response = 1;
}

message LlcGetResponse {
  types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  LlcCounterType  type        = 2;
  repeated uint32 count       = 3;
}

message LlcGetResponseMsg {
  repeated LlcGetResponse     response = 1;
}

enum HbmSramType {
  SRAM_P4_INGRESS    = 0;
  SRAM_P4_EGRESS     = 1;
  SRAM_P4_ALL        = 2;
  SRAM_P4PLUS_RXDMA  = 3;
  SRAM_P4PLUS_TXDMA  = 4;
  SRAM_P4PLUS_ALL    = 5;
  SRAM_ALL           = 6;
}

message HbmCacheSram {
  HbmSramType type   = 1;
  bool        enable = 2;
}

message HbmCacheLlc {
  bool        enable = 1;
}

message HbmCacheRequest {
  oneof cache_regions {
    HbmCacheSram sram = 1;
    HbmCacheLlc  llc  = 2;
  }
}

message HbmCacheRequestMsg {
  repeated HbmCacheRequest   request = 1;
}

message HbmCacheResponse {
  types.ApiStatus  api_status = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

message HbmCacheResponseMsg {
  repeated HbmCacheResponse  response = 1;
}

message CosStats {
  uint32 cos            = 1;
  uint32 doorbell_count = 2;
  bool   xon_status     = 3;
}

message SchedulerStatsResponse {
  types.ApiStatus   api_status            = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  uint32            doorbell_set_count    = 2;
  uint32            doorbell_clear_count  = 3;
  uint32            ratelimit_start_count = 4;
  uint32            ratelimit_stop_count  = 5;
  repeated CosStats cos_entry             = 6;
}

message SchedulerStatsResponseMsg {
  repeated SchedulerStatsResponse  response = 1;
}

message QRange {
  // inclusive of both q_beg and q_end
  uint32 q_beg = 1;
  uint32 q_end = 2;
}

message QRanges {
  repeated QRange range = 1;
}

message SchedulerActiveQRequest {
  kh.LifKeyHandle   lif        = 1;
  intf.LifQPurpose  q_type     = 2;
  oneof num_or_ranges {
    uint32          q_num      = 3;
    QRanges         q_ranges   = 4;
  }
  uint32            poll_count = 5;
}

message SchedulerActiveQRequestMsg {
  repeated SchedulerActiveQRequest  request = 1;
}

message SchedulerActiveQResponse {
  repeated uint32  active_q_num = 1;
}

message SchedulerActiveQResponseMsg {
  repeated SchedulerActiveQResponse response = 1;
}

message PacketBufferPause {
  bool pause = 1;
}

message PacketBufferSpan {
  uint32 span_threshold = 1; // SPAN queue threshold
}

message PacketBufferSpec {
  PacketBufferPause pause = 1;
  PacketBufferSpan span = 2;
}

message PacketBufferRequest {
  PacketBufferSpec spec = 1;
}

message PacketBufferRequestMsg {
  repeated PacketBufferRequest request = 1;
}

message PacketBufferResponse {
  types.ApiStatus   api_status            = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
}

message PacketBufferResponseMsg {
  repeated PacketBufferResponse response = 1;
}

message QueueCredit {
  uint32 Queue  = 1;
  uint32 Credit = 2;
}

message PortQueueCredit {
  uint32               Port        = 1;
  repeated QueueCredit QueueCredit = 2;
}

message QueueCreditsGetResponse {
  types.ApiStatus          ApiStatus       = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  repeated PortQueueCredit PortQueueCredit = 2;
}

message SessionCtrlSpec {
  uint64         max_session     = 1;
}
message SessionCtrlRequestMsg {
  repeated SessionCtrlSpec spec = 1;
}

message OifListGetRequest {
    fixed32 id = 1;
}

message OifListGetRequestMsg {
    repeated OifListGetRequest request = 1;
}

message OifListGetResponse {
  types.ApiStatus       api_status    = 1 [(gogoproto.moretags) = "venice:api_status"];    // API status code
  multicast.OifList     oif_list      = 2;
}

message OifListGetResponseMsg {
  types.ApiStatus               api_status = 1;  // API status code
  repeated OifListGetResponse   response = 2;    // batched response
}
