//------------------------------------------------------------------------------
// protobuf specification for internal HAL APIs
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "fwlog.proto";
import "session.proto";
import "interface.proto";
import "kh.proto";

package internal;
option go_package="halproto";

// Internal service definition
service Internal {
  // Program resolution related APIs
  rpc GetProgramAddress(GetProgramAddressRequestMsg) returns (ProgramAddressResponseMsg) {}
  // Program resolution related APIs
  rpc AllocHbmAddress(AllocHbmAddressRequestMsg) returns (AllocHbmAddressResponseMsg) {}
  // LIF BDF association APIs
  rpc ConfigureLifBdf(ConfigureLifBdfRequestMsg) returns (ConfigureLifBdfResponseMsg) {}
  // Inject a software PHV
  rpc SoftwarePhvInject (SoftwarePhvInjectMsg) returns (SoftwarePhvResponseMsg) {}
  // Get software PHV injection status
  rpc SoftwarePhvGet (SoftwarePhvGetRequestMsg) returns (SoftwarePhvGetResponseMsg) {}
  // Simulator service definition
  rpc LogFlow (LogFlowRequestMsg) returns (LogFlowResponseMsg) {}

  // Quiesce RPCs
  rpc QuiesceMsgSnd (EmptyRequest) returns (EmptyResponse) {}
  rpc QuiesceStart (EmptyRequest) returns (EmptyResponse) {}
  rpc QuiesceStop (EmptyRequest) returns (EmptyResponse) {}

  //TcpCb
  rpc TcpCbCreate (TcpCbRequestMsg) returns (TcpCbResponseMsg) {}
  rpc TcpCbUpdate (TcpCbRequestMsg) returns (TcpCbResponseMsg) {}
  rpc TcpCbDelete (TcpCbDeleteRequestMsg) returns (TcpCbDeleteResponseMsg) {}
  rpc TcpCbGet (TcpCbGetRequestMsg) returns (TcpCbGetResponseMsg) {}

  //TlsCb
  rpc TlsCbCreate (TlsCbRequestMsg) returns (TlsCbResponseMsg) {}
  rpc TlsCbUpdate (TlsCbRequestMsg) returns (TlsCbResponseMsg) {}
  rpc TlsCbDelete (TlsCbDeleteRequestMsg) returns (TlsCbDeleteResponseMsg) {}
  rpc TlsCbGet (TlsCbGetRequestMsg) returns (TlsCbGetResponseMsg) {}

  //Wring
  rpc WRingCreate (WRingRequestMsg) returns (WRingResponseMsg) {}
  rpc WRingUpdate (WRingRequestMsg) returns (WRingResponseMsg) {}
  //rpc WRingDelete (WRingDeleteRequestMsg) returns (WRingDeleteResponseMsg) {}
  rpc WRingGetEntries (WRingGetEntriesRequestMsg) returns (WRingGetEntriesResponseMsg) {}
  rpc WRingGetMeta (WRingRequestMsg) returns (WRingGetMetaResponseMsg) {}
  rpc WRingSetMeta (WRingRequestMsg) returns (WRingSetMetaResponseMsg) {}

  // barco
  rpc GetOpaqueTagAddr (GetOpaqueTagAddrRequestMsg) returns (GetOpaqueTagAddrResponseMsg) {}
  rpc BarcoGetReqDescrEntry (BarcoGetReqDescrEntryRequestMsg) returns (BarcoGetReqDescrEntryResponseMsg) {}
  rpc BarcoGetRingMeta      (BarcoGetRingMetaRequestMsg) returns (BarcoGetRingMetaResponseMsg) {}
  rpc BarcoGetRingMetaConfig (BarcoGetRingMetaConfigRequestMsg) returns (BarcoGetRingMetaConfigResponseMsg) {}

  // Crypto keys
  rpc CryptoKeyCreate (CryptoKeyCreateRequestMsg) returns (CryptoKeyCreateResponseMsg) {}
  rpc CryptoKeyCreateWithId (CryptoKeyCreateWithIdRequestMsg) returns (CryptoKeyCreateWithIdResponseMsg) {}
  rpc CryptoKeyRead (CryptoKeyReadRequestMsg) returns (CryptoKeyReadResponseMsg) {}
  rpc CryptoKeyUpdate (CryptoKeyUpdateRequestMsg) returns (CryptoKeyUpdateResponseMsg) {}
  rpc CryptoKeyDelete (CryptoKeyDeleteRequestMsg) returns (CryptoKeyDeleteResponseMsg) {}
  rpc CryptoAsymKeyCreate (CryptoAsymKeyCreateRequestMsg) returns (CryptoAsymKeyCreateResponseMsg) {}
  rpc CryptoAsymKeyDelete (CryptoAsymKeyDeleteRequestMsg) returns (CryptoAsymKeyDeleteResponseMsg) {}
  rpc CryptoAsymKeyWrite (CryptoAsymKeyWriteRequestMsg) returns (CryptoAsymKeyWriteResponseMsg) {}

  //CryptoApi
  rpc CryptoApiInvoke (CryptoApiRequestMsg) returns (CryptoApiResponseMsg) {}

  // DescrAol
  rpc DescrAolGet (DescrAolRequestMsg) returns (DescrAolResponseMsg) {}

  rpc ProxycCbCreate (ProxycCbRequestMsg) returns (ProxycCbResponseMsg) {}
  rpc ProxycCbUpdate (ProxycCbRequestMsg) returns (ProxycCbResponseMsg) {}
  rpc ProxycCbDelete (ProxycCbDeleteRequestMsg) returns (ProxycCbDeleteResponseMsg) {}
  rpc ProxycCbGet (ProxycCbGetRequestMsg) returns (ProxycCbGetResponseMsg) {}

  rpc ProxyrCbCreate (ProxyrCbRequestMsg) returns (ProxyrCbResponseMsg) {}
  rpc ProxyrCbUpdate (ProxyrCbRequestMsg) returns (ProxyrCbResponseMsg) {}
  rpc ProxyrCbDelete (ProxyrCbDeleteRequestMsg) returns (ProxyrCbDeleteResponseMsg) {}
  rpc ProxyrCbGet (ProxyrCbGetRequestMsg) returns (ProxyrCbGetResponseMsg) {}

  rpc RawrCbCreate (RawrCbRequestMsg) returns (RawrCbResponseMsg) {}
  rpc RawrCbUpdate (RawrCbRequestMsg) returns (RawrCbResponseMsg) {}
  rpc RawrCbDelete (RawrCbDeleteRequestMsg) returns (RawrCbDeleteResponseMsg) {}
  rpc RawrCbGet (RawrCbGetRequestMsg) returns (RawrCbGetResponseMsg) {}

  rpc RawcCbCreate (RawcCbRequestMsg) returns (RawcCbResponseMsg) {}
  rpc RawcCbUpdate (RawcCbRequestMsg) returns (RawcCbResponseMsg) {}
  rpc RawcCbDelete (RawcCbDeleteRequestMsg) returns (RawcCbDeleteResponseMsg) {}
  rpc RawcCbGet (RawcCbGetRequestMsg) returns (RawcCbGetResponseMsg) {}

  // vMotion debug dump
  rpc VmotionDebugReq (VmotionDebugSendRequestMsg) returns (VmotionDebugResponseMsg) {}

  // Test send fin
  rpc TestSendFinReq (TestSendFinRequestMsg) returns (TestSendFinResponseMsg) {}

  // Test clock sync
  rpc TestClockSyncReq (TestClockSyncRequestMsg) returns (TestClockSyncResponseMsg) {}

  rpc FlowHashGet (FlowHashGetRequestMsg) returns (FlowHashGetResponseMsg) {}

  // Internal (Marvell) port status
  rpc InternalPortGet (InternalPortRequestMsg) returns (InternalPortResponseMsg) {}

  // Internal (Marvell) port stats clear
  rpc InternalPortStatsClear (InternalPortRequestMsg) returns (EmptyResponse) {}

  // Inject Packets to FTE
  rpc TestFteInjectPackets (TestInjectFtePacketRequestMsg) returns (TestInjectFtePacketResponseMsg) {}
}

message ProgramAddressReq {
  // Handle. E.g.: 'iris', 'p4plus'.
  string handle = 1;

  // Program name to resolve
  string prog_name = 2;

  // If resolve_label is false, returns the base address of the program.
  // Otherwise returns the PC offset (14 bits) of the program.
  bool resolve_label = 3;

  // Label name to resolve
  string label = 4;
}

message ProgramAddressResp {
  int64 addr = 1;    // -errno, in case of error
}

message GetProgramAddressRequestMsg {
  repeated ProgramAddressReq request = 1;
}

message ProgramAddressResponseMsg {
  repeated ProgramAddressResp response = 1;
}

message HbmAddressReq {
  // handle that specifies region in config (json) file
  string handle = 1;
}

message HbmAddressResp {
  int64 addr = 1;    // -errno, in case of error
  uint32 size = 2;
}

message AllocHbmAddressRequestMsg {
  repeated HbmAddressReq request = 1;
}

message AllocHbmAddressResponseMsg {
  repeated HbmAddressResp response = 1;
}

message LifBdfReq {
  uint32 lif = 1;
  uint32 bdf = 2;
}

message LifBdfResp {
  uint32 lif = 1;
  uint32 bdf = 2;
  int32  status = 3;
}
message ConfigureLifBdfRequestMsg {
  repeated LifBdfReq request = 1;
}

message ConfigureLifBdfResponseMsg {
  repeated LifBdfResp response = 1;
}

// The Software PHV service definition
service SoftwarePhv {
}

// SoftwarePhvPipeline: pipeline to inject the software phv
enum SoftwarePhvPipeline {
  SOFTWARE_PHV_RXDMA       = 0;
  SOFTWARE_PHV_TXDMA       = 1;
  SOFTWARE_PHV_INGRESS     = 2;
  SOFTWARE_PHV_EGRESS      = 3;
}

// SoftwarePhvStatus represents the current status of the PHVs
message SoftwarePhvStatus {
  SoftwarePhvPipeline   pipeline          = 1;    // pipeline to inject into
  bool                  enabled           = 2;    // PHV injection is enabled
  bool                  done              = 3;    // PHV injection is done
  uint32                current_cntr      = 4;    // current counter
  uint32                inject_cntr       = 5;    // injected PHV counter
}

// SoftwarePhvResponse is generic response
message SoftwarePhvResponse {
  types.ApiStatus       api_status        = 1 [(gogoproto.jsontag) = "api_status"];    // API status code
}

// SoftwarePhvResponseMsg is batched response to SoftwarePhvRequestMsg
message SoftwarePhvResponseMsg {
  repeated SoftwarePhvResponse    response = 1;    // batched response
}

// SoftwarePhvGetRequest is used to get information about a PHV
message SoftwarePhvGetRequest {
  SoftwarePhvPipeline   pipeline         = 1;    // pipeline to inject into
}

// SoftwarePhvGetRequestMsg is batched GET request for PHV
message SoftwarePhvGetRequestMsg {
  repeated SoftwarePhvGetRequest    request = 1;    // batched get request
}


// SoftwarePhvGetResponse captures all the information about a Sw PHV
// only if api_status indicates success, other fields are valid
message SoftwarePhvGetResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.jsontag) = "api_status"];    // API status code
  SoftwarePhvStatus    status     = 2;    // operational state of PHV
}

// SoftwarePhvGetResponseMsg is the batched response to SoftwarePhvGetRequestMsg
message SoftwarePhvGetResponseMsg {
  repeated SoftwarePhvGetResponse    response = 1;    // batched get response
}

// SoftwarePhvInject is the packet inject spec
message SoftwarePhvInject {
  SoftwarePhvPipeline   pipeline         = 1;    // pipeline to inject into
}

// SoftwarePhvInjectMsg is the inject message
message SoftwarePhvInjectMsg {
  repeated SoftwarePhvInject  request = 1; // sw phv inject request
}

message LogFlowRequestMsg {
  repeated fwlog.FWEvent request = 1;
}

message LogFlowResponseMsg {
  repeated LogFlowResponse response = 1;
}

message LogFlowResponse {
  types.ApiStatus api_status  = 1 [(gogoproto.jsontag) = "api_status"];    // API status code
}

// Codegen forms the Request and Response messages using the package name "internal"
// This is to calm the autogenerator
message EmptyRequest{
  repeated types.Empty request = 1;
}

message EmptyResponse{
  repeated types.Empty response = 1;
}

// TcpCbKeyHandle is used to operate on a tcp_cb either by its key or handle
message TcpCbKeyHandle {
  oneof key_or_handle {
    uint32     tcpcb_id          = 1;    // unique tcp_cb id allocated by app
    fixed64    tcpcb_handle      = 2;    // tcp_cb handle returned by HAL
  }
}

// TcpCbSpec captures all the tcp_cb level configuration
message TcpCbSpec {
  TcpCbKeyHandle        key_or_handle              = 1;    // tcp_cb being created/updated
  uint32                rcv_nxt                    = 2;
  uint32                snd_nxt                    = 3;
  uint32                snd_una                    = 4;
  uint32                rcv_tsval                  = 5;
  uint32                ts_recent                  = 6;
  fixed64               serq_base                  = 7;
  uint32                debug_dol                  = 8;
  fixed64               sesq_base                  = 9;
  uint32                sesq_pi                    = 10;
  uint32                sesq_ci                    = 11;
  uint32                snd_wnd                    = 12;
  uint32                snd_cwnd                   = 13;
  uint32                rcv_mss                    = 14;
  uint32                source_port                = 15;
  uint32                dest_port                  = 16;
  bytes                 header_template            = 17;
  uint32                state                      = 18;
  uint32                source_lif                 = 19;
  fixed64               asesq_base                 = 20;
  uint32                asesq_pi                   = 21;
  uint32                asesq_ci                   = 22;
  uint32                debug_dol_tx               = 23;
  uint32                header_len                 = 24;
  bool                  pending_ack_send           = 25;
  types.AppRedirType    l7_proxy_type              = 26;
  uint32                sesq_retx_ci               = 27;
  uint64                retx_snd_una               = 28;
  uint64                rx_ts                      = 29;
  uint64                rto                        = 30;
  uint32                snd_cwnd_cnt               = 31;
  uint32                debug_dol_tblsetaddr       = 32;
  uint32                serq_pi                    = 33;
  uint32                pred_flags                 = 34;
  uint32                other_qid                  = 35;
  uint32                packets_out                = 36;
  uint32                snd_ssthresh               = 37;
  uint32                cc_algo                    = 38;
  uint32                rto_backoff                = 39;
  uint32                cpu_id                     = 40;
  uint32                serq_ci                    = 41;
  uint32                rcv_wnd                    = 42;
  uint32                snd_wscale                 = 43;
  uint32                rcv_wscale                 = 44;
  uint32                sesq_tx_ci                 = 45;
  bool                  delay_ack                  = 46;
  uint32                ato                        = 47;
  uint32                snd_recover                = 48;
  uint32                smss                       = 49;
  uint32                initial_window             = 50;
  uint32                abc_l_var                  = 51;
  bool                  ooo_queue                  = 52;
  uint64                ooo_rx2tx_qbase            = 53;
  uint32                rcv_wup                    = 54;
  fixed64               cb_base                    = 55;
  uint32                zero_window_sent           = 56;
  fixed64               cb_base_qtype1             = 57;
  uint32                srtt_us                    = 58;
  bool                  sack_perm                  = 59;
  bool                  timestamps                 = 60;
  uint32                tx_window_update_pi        = 61;
  uint32                rtt_seq_tsoffset           = 62;
  uint32                rtt_time                   = 63;
  uint32                ts_learned                 = 64;
  uint32                ts_offset                  = 65;
  uint32                ts_time                    = 66;
  types.ProxyType       proxy_type                 = 68;
}

// TcpCbRequestMsg is batched add or modify tcpcb request
message TcpCbRequestMsg {
  repeated TcpCbSpec    request = 1;    // batched request
}

message TcpCbOoqStatus {
    uint64              queue_addr                  = 1;
    uint32              start_seq                   = 2;
    uint32              end_seq                     = 3;
    uint32              num_entries                 = 4;
}

// TcpCbStatus is the operational status of a given tcpcb
message TcpCbStatus {
  fixed64 tcpcb_handle = 1;    // id of tcpcb returned by HAL

  bool ooq_not_empty = 2;
  repeated TcpCbOoqStatus ooq_status = 3;
}

// TcpCbResponse is response to TcpCbSpec
message TcpCbResponse {
  types.ApiStatus        api_status            = 1;    // API status code
  TcpCbStatus       tcpcb_status   = 2;    // tcpcb status, if api succeeded
}

// TcpCbResponseMsg is batched response to TcpCbRequestMsg
message TcpCbResponseMsg {
  repeated TcpCbResponse    response = 1;    // batched response
}

// TcpCbDeleteRequest is used to delete a tcpcb
message TcpCbDeleteRequest {
  TcpCbKeyHandle     key_or_handle = 1;    // TcpCb key or handle
}

// TcpCbDeleteRequestMsg is used to delete a batch of tcpcbs
message TcpCbDeleteRequestMsg {
  repeated TcpCbDeleteRequest    request = 1;    // batched delete request
}

// TcpCbDeleteResponseMsg is batched response to TcpCbDeleteRequestMsg
message TcpCbDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// TcpCbGetRequest is used to get information about a tcpcb
message TcpCbGetRequest {
  TcpCbKeyHandle            key_or_handle = 1;    // TcpCb key or handle
}

// TcpCbGetRequestMsg is batched GET requests for tcpcbs
message TcpCbGetRequestMsg {
  repeated TcpCbGetRequest    request = 1;    // batched get request
}

// TcpCbStats is the statistics object for each tcpcb
message TcpCbStats {
  // rx stats
  uint64                bytes_rcvd                 = 1;
  uint64                pkts_rcvd                  = 2;
  uint64                bytes_acked                = 3;
  uint64                pure_acks_rcvd             = 4;
  uint64                dup_acks_rcvd              = 5;
  uint64                slow_path_cnt              = 6;
  uint64                serq_full_cnt              = 7;
  uint64                ooo_cnt                    = 8;
  uint64                rx_drop_cnt                = 9;

  // tx stats
  uint64                bytes_sent                 = 10001;
  uint64                pkts_sent                  = 10002;
  uint64                pure_acks_sent             = 10003;
  uint32                sesq_pi                    = 10005;
  uint32                sesq_ci                    = 10006;
  uint32                send_ack_pi                = 10007;
  uint32                send_ack_ci                = 10008;
  uint32                fast_timer_pi              = 10009;
  uint32                fast_timer_ci              = 10010;
  uint32                del_ack_pi                 = 10011;
  uint32                del_ack_ci                 = 10012;
  uint32                asesq_pi                   = 10013;
  uint32                asesq_ci                   = 10014;
  uint32                pending_tx_pi              = 10015;
  uint32                pending_tx_ci              = 10016;
  uint32                fast_retrans_pi            = 10017;
  uint32                fast_retrans_ci            = 10018;
  uint32                clean_retx_pi              = 10019;
  uint32                clean_retx_ci              = 10020;
  uint32                packets_out                = 10021;
  uint32                sesq_tx_ci                 = 10022;
  uint32                sesq_retx_ci               = 10023;
  uint32                asesq_retx_ci              = 10024;
  uint32                tx_ring_pi                 = 10025;
  uint32                partial_pkt_ack_cnt        = 10026;
  uint32                ato_deadline               = 10027;
  uint32                rto_deadline               = 10028;
  uint32                cc_flags                   = 10029;
  uint32                idle_deadline              = 10030;
  uint32                window_full_cnt            = 10031;
  uint32                ooq_rx2tx_pi               = 10032;
  uint32                ooq_rx2tx_ci               = 10033;
  uint32                retx_cnt                   = 10034;
  uint32                window_update_pi           = 10035;
  uint32                window_update_ci           = 10036;
}

// TcpCbGetResponse captures all the information about a tcpcb
// only if api_status indicates success, other fields are valid
message TcpCbGetResponse {
  types.ApiStatus        api_status = 1;    // API status code
  TcpCbSpec         spec       = 2;    // tcpcb configuration
  TcpCbStatus       status     = 3;    // operational state of tcpcb
  TcpCbStats        stats      = 4;    // stats of the tcpcb
}

// TcpCbGetResponseMsg is batched response to TcpCbGetRequestMsg
message TcpCbGetResponseMsg {
  repeated TcpCbGetResponse    response = 1;    // batch get response
}

// TlsCbKeyHandle is used to operate on a tlscb either by its key or handle
message TlsCbKeyHandle {
  oneof key_or_handle {
    uint32     tlscb_id          = 1;    // unique tlscb id allocated by app
    fixed64    tlscb_handle      = 2;    // tlscb handle returned by HAL
  }
}

// TlsCbSpec captures all the tlscb level configuration
message TlsCbSpec {
  TlsCbKeyHandle   key_or_handle                   = 1;    // tlscb being created/updated
  uint32                nic_dec_head               = 2;
  uint32                nic_dec_tail               = 3;
  uint32                command                    = 4;
  uint32                debug_dol                  = 5;
  uint32                serq_pi                    = 6;
  uint32                serq_ci                    = 7;
  uint32                bsq_pi                     = 8;
  uint32                bsq_ci                     = 9;
  uint32                crypto_key_idx             = 10;
  uint32                serq_base                  = 11;
  uint32                sesq_base                  = 12;
  fixed64               tnmdpr_alloc                = 13;
  fixed64               rnmdpr_free                 = 14;
  fixed64               enc_requests               = 15;
  fixed64               enc_completions            = 16;
  fixed64               enc_failures               = 17;
  fixed64               dec_requests               = 18;
  fixed64               dec_completions            = 19;
  fixed64               dec_failures               = 20;
  uint32                salt                       = 21;
  uint64                explicit_iv                = 22;
  uint32                pre_debug_stage0_7_thread  = 23;
  uint32                post_debug_stage0_7_thread = 24;
  bool                  is_decrypt_flow            = 25;
  uint32                other_fid                  = 26;
  types.AppRedirType    l7_proxy_type              = 27;
  uint32                crypto_hmac_key_idx        = 28;
  fixed64               mac_requests               = 29;
  fixed64               mac_completions            = 30;
  fixed64               mac_failures               = 31;
  uint32                cpu_id                     = 32;
}

// TlsCbRequestMsg is batched add or modify tlscb request
message TlsCbRequestMsg {
  repeated TlsCbSpec    request = 1;    // batched request
}

// TlsCbStatus is the operational status of a given tlscb
message TlsCbStatus {
  fixed64    tlscb_handle     = 1;    // id of tlscb returned by HAL
}

// TlsCbResponse is response to TlsCbSpec
message TlsCbResponse {
  types.ApiStatus        api_status            = 1;    // API status code
  TlsCbStatus       tlscb_status   = 2;    // tlscb status, if api succeeded
}

// TlsCbResponseMsg is batched response to TlsCbRequestMsg
message TlsCbResponseMsg {
  repeated TlsCbResponse    response = 1;    // batched response
}

// TlsCbDeleteRequest is used to delete a tlscb
message TlsCbDeleteRequest {
  TlsCbKeyHandle     key_or_handle = 1;    // TlsCb key or handle
}

// TlsCbDeleteRequestMsg is used to delete a batch of tlscbs
message TlsCbDeleteRequestMsg {
  repeated TlsCbDeleteRequest    request = 1;    // batched delete request
}

// TlsCbDeleteResponseMsg is batched response to TlsCbDeleteRequestMsg
message TlsCbDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// TlsCbGetRequest is used to get information about a tlscb
message TlsCbGetRequest {
  TlsCbKeyHandle       key_or_handle = 1;    // TlsCb key or handle
}

// TlsCbGetRequestMsg is batched GET requests for tlscbs
message TlsCbGetRequestMsg {
  repeated TlsCbGetRequest    request = 1;    // batched get request
}

// TlsCbStats is the statistics object for each tlscb
message TlsCbStats {
}

// TlsCbGetResponse captures all the information about a tlscb
// only if api_status indicates success, other fields are valid
message TlsCbGetResponse {
  types.ApiStatus        api_status = 1;    // API status code
  TlsCbSpec         spec       = 2;    // tlscb configuration
  TlsCbStatus       status     = 3;    // operational state of tlscb
  TlsCbStats        stats      = 4;    // stats of the tlscb
}

// TlsCbGetResponseMsg is batched response to TlsCbGetRequestMsg
message TlsCbGetResponseMsg {
  repeated TlsCbGetResponse    response = 1;    // batch get response
}



// WRingKeyHandle is used to operate either by its key or handle
message WRingKeyHandle {
  oneof key_or_handle {
    uint32     wring_id          = 1;    // unique wring id allocated by app
    fixed64    wring_handle      = 2;    // wring handle returned by HAL
  }
}

// WRingSpec captures all the WRing level configuration
message WRingSpec {
  WRingKeyHandle        key_or_handle             = 1;
  types.WRingType       type                      = 2;
  uint32                pi                        = 3;
  uint32                ci                        = 4;
}

// WRingRequestMsg is batched add or modify wring request
message WRingRequestMsg {
  repeated WRingSpec    request = 1;    // batched request
}

// WRingStatus is the operational status of a given wring
message WRingStatus {
  fixed64    wring_handle     = 1;    // id of wring returned by HAL
}

// WRingResponse is response to WRingSpec
message WRingResponse {
  types.ApiStatus       api_status         = 1;    // API status code
  WRingStatus          wring_status   = 2;    // status
}

// WRingResponseMsg is batched response to WRingRequestMsg
message WRingResponseMsg {
  repeated WRingResponse    response = 1;    // batched response
}

// WRingDeleteRequest is used to delete a wring
message WRingDeleteRequest {
  WRingKeyHandle     key_or_handle = 1;    // WRing key or handle
}

// WRingDeleteRequestMsg is used to delete a batch of wrings
message WRingDeleteRequestMsg {
  repeated WRingDeleteRequest    request = 1;    // batched delete request
}

// WRingDeleteResponseMsg is batched response to WRingDeleteRequestMsg
message WRingDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// WRingGetRequest is used to get information about a wring
message WRingGetEntriesRequest {
  WRingKeyHandle       key_or_handle = 1;    // WRing key or handle
  types.WRingType      type          = 2;    // Wring Type
  uint32               index         = 3;    // Index of the slot in the ring
}

// WRingGetEntriesRequestMsg is batched GET requests for wrings
message WRingGetEntriesRequestMsg {
  repeated WRingGetEntriesRequest    request = 1;    // batched get request
}

// WRingStats is the statistics object for each wring
message WRingStats {
}

message WRingBarcoGCMDescMsg {
  fixed64           ilist_addr          = 1;
  fixed64           olist_addr          = 2;
  uint32            command             = 3;
  uint32            key_desc_index      = 4;
  fixed64           iv_addr             = 5;
  fixed64           status_addr         = 6;
  fixed64           doorbell_addr       = 7;
  fixed64           doorbell_data       = 8;
  uint32            salt                = 9;
  fixed64           explicit_iv         = 10;
  uint32            header_size         = 11;
  uint32            barco_status        = 12;
}

// WRingGetResponse captures all the information about a wring
// only if api_status indicates success, other fields are valid
message WRingGetEntriesResponse {
  types.ApiStatus    api_status = 1;    // API status code
  WRingSpec         spec        = 2;    // wring configuration
  uint32            index       = 3;
  WRingStatus       status      = 4;    // operational state
  WRingStats        stats       = 5;    // stats
  oneof WRingSlotInfo {
    fixed64                 value           = 6;
    WRingBarcoGCMDescMsg    barco_gcm_desc  = 7;
    bytes                   raw             = 8;
  }
}

// WRingGetEntriesResponseMsg is batched response to WRingGetEntriesRequestMsg
message WRingGetEntriesResponseMsg {
  repeated WRingGetEntriesResponse    response = 1;    // batch get response
}

// WRingGetMetaResponseMsg captures all the information about a wring metadata
// only if api_status indicates success, other fields are valid
message WRingGetMetaResponse {
  types.ApiStatus   api_status = 1;    // API status code
  WRingSpec         spec       = 2;    // wring configuration
  //uint32            pi          = 3;
  //uint32            ci          = 4;
}

// WRingGetMetaResponse is batched response to WRingGetMetaResponseMsg
message WRingGetMetaResponseMsg {
  repeated WRingGetMetaResponse    response = 1;    // batch get response
}

// WRingSetMetaResponseMsg captures all the information about a wring metadata
// only if api_status indicates success, other fields are valid
message WRingSetMetaResponse {
  types.ApiStatus   api_status = 1;    // API status code
  WRingSpec         spec       = 2;    // wring configuration
}

// WRingSetMetaResponse is batched response to WRingSetMetaResponseMsg
message WRingSetMetaResponseMsg {
  repeated WRingSetMetaResponse    response = 1;    // batch set response
}

message GetOpaqueTagAddrRequest {
    types.BarcoRings ring_type = 1;
}

message GetOpaqueTagAddrRequestMsg {
    repeated  GetOpaqueTagAddrRequest request = 1;
}

message GetOpaqueTagAddrResponse {
    uint64 opaque_tag_addr = 1;
    types.ApiStatus api_status = 2;    // API status code
}

message GetOpaqueTagAddrResponseMsg {
    repeated  GetOpaqueTagAddrResponse response = 1;
}

// BarcoGetReqDescrEntryRequest - get request descriptor entry from a barco ring slot
message BarcoGetReqDescrEntryRequest {
  types.BarcoRings     ring_type     = 1;    // Barco Ring Type
  uint32               slot_index    = 2;    // Index of the slot in the ring
}

// BarcoGetReqDescrEntryRequestMsg is batched GET requests for barco rings
message BarcoGetReqDescrEntryRequestMsg {
  repeated BarcoGetReqDescrEntryRequest    request = 1;    // batched get request
}

// Required fields of the Barco Symmetric crypto Request descriptor
message BarcoSymmReqDescrMsg {
  fixed64           ilist_addr            = 1;
  fixed64           olist_addr            = 2;
  uint32            command               = 3;
  uint32            key_desc_index        = 4;
  fixed64           iv_addr               = 5;
  fixed64           status_addr           = 6;
  fixed64           doorbell_addr         = 7;
  fixed64           doorbell_data         = 8;
  uint32            salt                  = 9;
  fixed64           explicit_iv           = 10;
  uint32            header_size           = 11;
  uint32            barco_status          = 12;
  uint32            second_key_desc_index = 13;
}

// Required fields of the Barco ASymmetric crypto Request descriptor
message BarcoASymReqDescrMsg {
  fixed64           ilist_addr          = 1;
  fixed64           olist_addr          = 2;
  uint32            key_desc_index      = 3;
  fixed64           status_addr         = 4;
  uint32            opaque_tag_value    = 5;
  uint32            opaque_tag_wr_en    = 6;
  uint32            flag_a              = 7;
  uint32            flag_b              = 8;
}

// BarcoGetReqDescrEntryResponse returns the barco request descriptor content
// only if api_status indicates success, other fields are valid
message BarcoGetReqDescrEntryResponse {
  types.ApiStatus    api_status     = 1;    // API status code
  types.BarcoRings   ring_type      = 2;    // Barco Ring Type
  uint32             slot_index     = 3;    // Index of the slot in the ring
  oneof ReqDescrMsg {
     BarcoSymmReqDescrMsg  symm_req_descr = 4;  // Symmetric Request Descriptor content
     BarcoASymReqDescrMsg  asym_req_descr = 5;  // ASymmetric Request Descriptor content
  }
}

// BarcoGetReqDescrEntryResponseMsg is batched response to BarcoGetReqDescrEntryRequestMsg
message BarcoGetReqDescrEntryResponseMsg {
  repeated BarcoGetReqDescrEntryResponse    response = 1;    // batch get response
}


// BarcoGetRingMetaRequest - get ring meta data for a barco ring
message BarcoGetRingMetaRequest {
  types.BarcoRings     ring_type     = 1;    // Barco Ring Type
}

// BarcoGetRingMetaRequestMsg is batched GET requests for barco rings
message BarcoGetRingMetaRequestMsg {
  repeated BarcoGetRingMetaRequest    request = 1;    // batched get request
}

// BarcoGetRingMetaResponse returns the barco ring meta data
// only if api_status indicates success, other fields are valid
message BarcoGetRingMetaResponse {
  types.ApiStatus    api_status     = 1;    // API status code
  types.BarcoRings   ring_type      = 2;    // Barco Ring Type
  uint32             pi             = 3;    // Current value of Hw producer idx in the ring
  uint32             ci             = 4;    // Current value of Hw consumer ifx in the ring
}

// BarcoGetRingMetaResponseMsg is batched response to BarcoGetRingMetaRequestMsg
message BarcoGetRingMetaResponseMsg {
  repeated BarcoGetRingMetaResponse    response = 1;    // batch get response
}

// BarcoGetRingMetaConfigRequest - get ring meta config data for a barco ring
message BarcoGetRingMetaConfigRequest {
  types.BarcoRings     ring_type     = 1;    // Barco Ring Type
}

// BarcoGetRingMetaConfigRequestMsg is batched GET requests for barco rings
message BarcoGetRingMetaConfigRequestMsg {
  repeated BarcoGetRingMetaConfigRequest    request = 1;    // batched get request
}

// BarcoGetRingMetaConfigResponse returns the barco ring meta data
// only if api_status indicates success, other fields are valid
message BarcoGetRingMetaConfigResponse {
  types.ApiStatus    api_status     = 1;    // API status code
  types.BarcoRings   ring_type      = 2;    // Barco Ring Type
  uint64             ring_base      = 3;
  uint64             producer_idx_addr = 4;
  uint64             shadow_pndx_addr  = 5;
  uint64             opaque_tag_addr   = 6;
  uint32             ring_size         = 7;
  uint32             desc_size         = 8;
  uint32             pndx_size         = 9;
  uint32             opaque_tag_size   = 10;
}

// BarcoGetRingMetaConfigResponseMsg is batched response to BarcoGetRingMetaConfigRequestMsg
message BarcoGetRingMetaConfigResponseMsg {
  repeated BarcoGetRingMetaConfigResponse    response = 1;    // batch get response
}

message CryptoKeyCreateRequest {
}
message CryptoKeyCreateRequestMsg {
    repeated CryptoKeyCreateRequest request     = 1;
}
message CryptoKeyCreateResponse {
  types.ApiStatus       api_status              = 1;    // API status code
  uint32                keyindex                = 2;
}
message CryptoKeyCreateResponseMsg {
    repeated CryptoKeyCreateResponse response   = 1;
}

message CryptoKeyCreateWithIdRequest {
  uint32                keyindex                = 1;
  uint32                allow_dup_alloc         = 2;
}
message CryptoKeyCreateWithIdRequestMsg {
    repeated CryptoKeyCreateWithIdRequest request = 1;
}
message CryptoKeyCreateWithIdResponse {
  types.ApiStatus       api_status              = 1;    // API status code
  uint32                keyindex                = 2;
}
message CryptoKeyCreateWithIdResponseMsg {
    repeated CryptoKeyCreateWithIdResponse response   = 1;
}

message CryptoKeySpec {
  uint32                keyindex                = 1;
  types.CryptoKeyType   key_type                = 2;
  uint32                key_size                = 3;
  bytes                 key                     = 4;
}


message CryptoKeyReadRequest {
  uint32                keyindex                = 1;
}
message CryptoKeyReadRequestMsg {
    repeated CryptoKeyReadRequest request       = 1;
}
message CryptoKeyReadResponse {
  types.ApiStatus       api_status              = 1;    // API status code
  CryptoKeySpec         key                     = 2;
}
message CryptoKeyReadResponseMsg {
    repeated CryptoKeyReadResponse response     = 1;
}


message CryptoKeyUpdateRequest {
  CryptoKeySpec         key                     = 1;
}
message CryptoKeyUpdateRequestMsg {
    repeated CryptoKeyUpdateRequest request     = 1;
}
message CryptoKeyUpdateResponse{
  types.ApiStatus       api_status              = 1;    // API status code
  uint32                keyindex                = 2;
}
message CryptoKeyUpdateResponseMsg {
    repeated CryptoKeyUpdateResponse response   = 1;
}


message CryptoKeyDeleteRequest {
  uint32                keyindex                = 1;
}
message CryptoKeyDeleteRequestMsg {
    repeated CryptoKeyDeleteRequest request     = 1;
}
message CryptoKeyDeleteResponse {
  types.ApiStatus       api_status              = 1;    // API status code
  uint32                keyindex                = 2;
}
message CryptoKeyDeleteResponseMsg {
    repeated CryptoKeyDeleteResponse response   = 1;
}

message CryptoAsymKeyCreateRequest {
}
message CryptoAsymKeyCreateRequestMsg {
    repeated CryptoAsymKeyCreateRequest request = 1;
}
message CryptoAsymKeyCreateResponse {
  types.ApiStatus       api_status              = 1;    // API status code
  uint32                keyindex                = 2;
}
message CryptoAsymKeyCreateResponseMsg {
    repeated CryptoAsymKeyCreateResponse response= 1;
}

message CryptoAsymKeyDeleteRequest {
  uint32                keyindex                = 1;
}
message CryptoAsymKeyDeleteRequestMsg {
    repeated CryptoAsymKeyDeleteRequest request = 1;
}
message CryptoAsymKeyDeleteResponse {
  types.ApiStatus       api_status              = 1;    // API status code
  uint32                keyindex                = 2;
}
message CryptoAsymKeyDeleteResponseMsg {
    repeated CryptoAsymKeyDeleteResponse response= 1;
}

message CryptoAsymKeySpec {
  uint32                keyindex                = 1;
  bytes                 key                     = 2;
}

message CryptoAsymKeyWriteRequest {
  CryptoAsymKeySpec         key                 = 1;
}
message CryptoAsymKeyWriteRequestMsg {
    repeated CryptoAsymKeyWriteRequest request  = 1;
}
message CryptoAsymKeyWriteResponse{
  types.ApiStatus       api_status              = 1;    // API status code
  uint32                keyindex                = 2;
}
message CryptoAsymKeyWriteResponseMsg {
    repeated CryptoAsymKeyWriteResponse response= 1;
}

// Types of Crypto Hash algos
enum CryptoApiHashType {
    CRYPTOAPI_HASHTYPE_NONE = 0 [(gogoproto.enumvalue_customname) = "none"];
    CRYPTOAPI_HASHTYPE_MD5 = 1 [(gogoproto.enumvalue_customname) = "MD5"];
    CRYPTOAPI_HASHTYPE_SHA1 = 2 [(gogoproto.enumvalue_customname) = "SHA1"];
    CRYPTOAPI_HASHTYPE_SHA224 = 3 [(gogoproto.enumvalue_customname) = "SHA224"];
    CRYPTOAPI_HASHTYPE_SHA256 = 4 [(gogoproto.enumvalue_customname) = "SHA256"];
    CRYPTOAPI_HASHTYPE_SHA384 = 5 [(gogoproto.enumvalue_customname) = "SHA384"];
    CRYPTOAPI_HASHTYPE_SHA512 = 6 [(gogoproto.enumvalue_customname) = "SHA512"];
    CRYPTOAPI_HASHTYPE_SHA512_224 = 7 [(gogoproto.enumvalue_customname) = "SHA512_224"];
    CRYPTOAPI_HASHTYPE_SHA512_256 = 8 [(gogoproto.enumvalue_customname) = "SHA512_256"];
    CRYPTOAPI_HASHTYPE_HMAC_MD5 = 9 [(gogoproto.enumvalue_customname) = "HMAC_MD5"];
    CRYPTOAPI_HASHTYPE_HMAC_SHA1 = 10 [(gogoproto.enumvalue_customname) = "HMAC_SHA1"];
    CRYPTOAPI_HASHTYPE_HMAC_SHA224 = 11 [(gogoproto.enumvalue_customname) = "HMAC_SHA224"];
    CRYPTOAPI_HASHTYPE_HMAC_SHA256 = 12 [(gogoproto.enumvalue_customname) = "HMAC_SHA256"];
    CRYPTOAPI_HASHTYPE_HMAC_SHA384 = 13 [(gogoproto.enumvalue_customname) = "HMAC_SHA384"];
    CRYPTOAPI_HASHTYPE_HMAC_SHA512 = 14 [(gogoproto.enumvalue_customname) = "HMAC_SHA512"];
    CRYPTOAPI_HASHTYPE_SHA3_224 = 15 [(gogoproto.enumvalue_customname) = "SHA3_224"];
    CRYPTOAPI_HASHTYPE_SHA3_256 = 16 [(gogoproto.enumvalue_customname) = "SHA3_256"];
    CRYPTOAPI_HASHTYPE_SHA3_384 = 17 [(gogoproto.enumvalue_customname) = "SHA3_384"];
    CRYPTOAPI_HASHTYPE_SHA3_512 = 18 [(gogoproto.enumvalue_customname) = "SHA3_512"];
}

enum CryptoApiType {
  ASYMAPI_ECC_POINT_MUL_FP              = 0;
  ASYMAPI_ECDSA_SIG_GEN_FP              = 1;
  ASYMAPI_ECDSA_SIG_VERIFY_FP           = 2;
  ASYMAPI_RSA_ENCRYPT                   = 3;
  ASYMAPI_RSA_DECRYPT                   = 4;
  ASYMAPI_RSA_CRT_DECRYPT               = 5;
  SYMMAPI_HASH_GENERATE                 = 6;
  SYMMAPI_HASH_VERIFY                   = 7;
  ASYMAPI_RSA_SIG_GEN                   = 8;
  ASYMAPI_RSA_SIG_VERIFY                = 9;
  ASYMAPI_SETUP_PRIV_KEY                = 10;
  ASYMAPI_SETUP_CERT                    = 11;
  ASYMAPI_SETUP_PRIV_KEY_EX             = 13;
  ASYMAPI_FIPS_RSA_SIG_GEN              = 14;
  ASYMAPI_FIPS_RSA_SIG_VERIFY           = 15;
}

enum UpdateType {
    ADD_UPDATE = 0;
    DELETE     = 1;
}

message ECCPoint {
  bytes         x                       = 1;
  bytes         y                       = 2;
}

message CryptoAsymApiECCDomainParamsFp {
  uint32        KeySize                 = 1;
  bytes         p                       = 2;
  bytes         a                       = 3;
  bytes         b                       = 4;
  ECCPoint      G                       = 5;
  bytes         n                       = 6;
//  bytes         h                       = 7;
}

//  ECC Point Multiplication

message CryptoAsymApiReqECCPointMulFp {
  CryptoAsymApiECCDomainParamsFp    ecc_domain_params   = 1;
  ECCPoint                          ecc_point           = 2;
  bytes                             k                   = 3;
}
message CryptoAsymApiRespECCPointMulFp {
  ECCPoint                          Q                   = 1;
}


// ESCDA Signature Generation
message CryptoAsymApiReqECDSASignatureGenFp {
  CryptoAsymApiECCDomainParamsFp    ecc_domain_params   = 1;
  bytes                             da                  = 2;
  bytes                             k                   = 3;
  bytes                             h                   = 4;
  int32                             key_idx             = 5;
  bool                              async_en            = 6;
}
message CryptoAsymApiRespECDSASignatureGenFp {
  bytes                             r                   = 1;
  bytes                             s                   = 2;
}

// ECDSA Signature Verification
message CryptoAsymApiReqECDSASignatureVerifyFp {
  CryptoAsymApiECCDomainParamsFp    ecc_domain_params   = 1;
  ECCPoint                          Q                   = 2;
  bytes                             r                   = 3;
  bytes                             s                   = 4;
  bytes                             h                   = 5;
  bool                              async_en            = 6;
}

// RSA Encryption
message CryptoAsymApiReqRSAEncrypt {
  uint32                            KeySize             = 1;
  bytes                             mod_n               = 2;
  bytes                             e                   = 3;
  bytes                             plain_text          = 4;
  bool                              async_en            = 5;
}

message CryptoAsymApiRespRSAEncrypt {
  bytes                             cipher_text         = 1;
}

// RSA Decryption
message CryptoAsymApiReqRSADecrypt {
  uint32                            KeySize             = 1;
  bytes                             mod_n               = 2;
  bytes                             d                   = 3;
  bytes                             cipher_text         = 4;
}

message CryptoAsymApiRespRSADecrypt {
  bytes                             plain_text         = 1;
}

// RSA CRT Decryption
message CryptoAsymApiReqRSACRTDecrypt {
  uint32                            KeySize             = 1;
  bytes                             p                   = 2;
  bytes                             q                   = 3;
  bytes                             dp                  = 4;
  bytes                             dq                  = 5;
  bytes                             qinv                = 6;
  bytes                             cipher_text         = 7;
  int32                             key_idx             = 8;
  bool                              async_en            = 9;
}

message CryptoAsymApiRespRSACRTDecrypt {
  bytes                             plain_text         = 1;
}

// Asymmetric Private Key Setup
// Temp API as a workaround until securemon is ready
message CryptoAsymApiReqSetupPrivateKey {
    string                          key                 = 1;
}

message CryptoAsymApiRespECDSAKeyInfo {
    int32                           sign_key_idx        = 1;
}

message CryptoAsymApiRespRSAKeyInfo {
    int32                           sign_key_idx        = 1;
    int32                           decrypt_key_idx     = 2;
}

message CryptoAsymApiRespSetupPrivateKey {
    types.CryptoAsymKeyType             key_type            = 1;
    oneof KeyInfo {
        CryptoAsymApiRespECDSAKeyInfo   ecdsa_key_info  = 2;
        CryptoAsymApiRespRSAKeyInfo     rsa_key_info    = 3;
    }
}

// Certificate Setup
message CryptoAsymApiReqSetupCert {
    UpdateType                      update_type         = 1;    // Add/Update delete
    int32                           cert_id             = 2;    // Cert id
    string                          body                = 3;    // Body
    int32                           next_cert_id        = 5;    // Next Cert in the chain
}

message CryptoAsymApiRespSetupCert {
}

// Asymmetric Private Key Setup - key elements
message CryptoAsymRsaKey    {
    uint32                          key_size            = 1;    // modulus size in bytes
    bytes                           n                   = 2;
    bytes                           e                   = 3;
    bytes                           d                   = 4;
}
message CryptoAsymApiReqSetupPrivateKeyEx {
    types.CryptoAsymKeyType         key_type            = 1;
    oneof   Key {
        CryptoAsymRsaKey            rsa_key             = 2;
    }
}

message CryptoAsymApiRespSetupPrivateKeyEx {
    types.CryptoAsymKeyType             key_type        = 1;
    int32                               key_idx         = 2;
}

// RSA Signature Generation
message CryptoAsymApiReqRSASignatureGen {
  uint32                            KeySize             = 1;
  bytes                             mod_n               = 2;
  bytes                             d                   = 3;
  bytes                             h                   = 4;
  int32                             key_idx             = 5;
  bool                              async_en            = 6;
}

message CryptoAsymApiRespRSASignatureGen {
  bytes                             s                   = 1;
}

// RSA Signature Verification
message CryptoAsymApiReqRSASignatureVerify {
  uint32                            KeySize             = 1;
  bytes                             mod_n               = 2;
  bytes                             e                   = 3;
  bytes                             h                   = 4;
  bytes                             s                   = 5;
}

// Crypto Hash digest generate request
message CryptoSymmApiReqHashGenerate {
  CryptoApiHashType                hashtype            = 1;
  bytes                            key                 = 2;
  int32                            key_len             = 3;
  bytes                            data                = 4;
  int32                            data_len            = 5;
  int32                            digest_len          = 6;
}

message CryptoSymmApiRespHashGenerate {
  bytes                            digest              = 1;
}

// Crypto Hash digest verify request
message CryptoSymmApiReqHashVerify {
  CryptoApiHashType                hashtype            = 1;
  bytes                            key                 = 2;
  int32                            key_len             = 3;
  bytes                            data                = 4;
  int32                            data_len            = 5;
  bytes                            digest              = 6;
  int32                            digest_len          = 7;
}


// FIPS RSA Signature Generation
message CryptoAsymApiReqFIPSRSASignatureGen {
  int32                             key_idx             = 1;
  bytes                             mod_n               = 2;
  bytes                             e                   = 3;
  bytes                             msg                 = 4;
  types.HashType                    hash_type           = 5;
  types.RSASignatureScheme          sig_scheme          = 6;
}

message CryptoAsymApiRespFIPSRSASignatureGen {
  bytes                             s                   = 1;
}

// FIPS RSA Signature Verification
message CryptoAsymApiReqFIPSRSASignatureVerify {
  bytes                             mod_n               = 1;
  bytes                             e                   = 2;
  bytes                             msg                 = 3;
  bytes                             s                   = 4;
  types.HashType                    hash_type           = 5;
  types.RSASignatureScheme          sig_scheme          = 6;
}
// CryptoAsymApiReqFIPSRSASignatureVerify Response in api_status

//message CryptoSymmApiRespHashVerify {
//  bytes                            digest              = 1;
//}

// Top Level Request and Response message definition

message CryptoApiRequest {
  CryptoApiType                     api_type            = 1;
  oneof CryptoApiReq {
    CryptoAsymApiReqECCPointMulFp   ecc_point_mul_fp    = 2;
    CryptoAsymApiReqECDSASignatureGenFp     ecdsa_sig_gen_fp        = 3;
    CryptoAsymApiReqECDSASignatureVerifyFp  ecdsa_sig_verify_fp     = 4;
    CryptoAsymApiReqRSAEncrypt      rsa_encrypt         = 5;
    CryptoAsymApiReqRSADecrypt      rsa_decrypt         = 6;
    CryptoAsymApiReqRSACRTDecrypt   rsa_crt_decrypt     = 7;
    CryptoSymmApiReqHashGenerate    hash_generate       = 8;
    CryptoSymmApiReqHashVerify      hash_verify         = 9;
    CryptoAsymApiReqRSASignatureGen rsa_sig_gen         = 10;
    CryptoAsymApiReqRSASignatureVerify  rsa_sig_verify  = 11;
    CryptoAsymApiReqSetupPrivateKey setup_priv_key      = 12;
    CryptoAsymApiReqSetupCert       setup_cert          = 13;
    CryptoAsymApiReqSetupPrivateKeyEx setup_priv_key_ex = 14;
    CryptoAsymApiReqFIPSRSASignatureGen     fips_rsa_sig_gen    = 15;
    CryptoAsymApiReqFIPSRSASignatureVerify  fips_rsa_sig_verify = 16;
  }
}

message CryptoApiResponse {
  types.ApiStatus                   api_status          = 1;
  oneof CryptoApiResp {
    CryptoAsymApiRespECCPointMulFp  ecc_point_mul_fp    = 2;
    CryptoAsymApiRespECDSASignatureGenFp    ecdsa_sig_gen_fp        = 3;
    CryptoAsymApiRespRSAEncrypt     rsa_encrypt         = 4;
    CryptoAsymApiRespRSADecrypt     rsa_decrypt         = 5;
    CryptoAsymApiRespRSACRTDecrypt  rsa_crt_decrypt     = 6;
    CryptoSymmApiRespHashGenerate   hash_generate       = 7;
    CryptoAsymApiRespRSASignatureGen    rsa_sig_gen     = 8;
    CryptoAsymApiRespSetupPrivateKey setup_priv_key     = 9;
    CryptoAsymApiRespSetupCert       setup_cert         = 10;
    CryptoAsymApiRespSetupPrivateKeyEx setup_priv_key_ex = 11;
    CryptoAsymApiRespFIPSRSASignatureGen fips_rsa_sig_gen = 12;
  }
}

message CryptoApiRequestMsg {
    repeated CryptoApiRequest       request             = 1;
}

message CryptoApiResponseMsg {
    repeated CryptoApiResponse      response            = 1;
}

message DescrAolRequest {
  fixed64               descr_aol_handle            = 1;    // Handle to the AOL Descriptor
}

message DescrAolRequestMsg {
  repeated DescrAolRequest request                  = 1;    // batched request
}


message DescrAolSpec {
  types.ApiStatus       api_status                  = 1;    // API status code
  fixed64               descr_aol_handle            = 2;    // Handle to the AOL Descriptor
  fixed64               Address1                    = 3;    // Address 1
  fixed32               Offset1                     = 4;    // Offset 1
  fixed32               Length1                     = 5;    // Length 1
  fixed64               Address2                    = 6;    // Address 2
  fixed32               Offset2                     = 7;    // Offset 2
  fixed32               Length2                     = 8;    // Length 2
  fixed64               Address3                    = 9;    // Address 3
  fixed32               Offset3                     = 10;    // Offset 3
  fixed32               Length3                     = 11;    // Length 3
  fixed64               next_descr_aol_handle       = 12;    // Handle to the next chained AOL Descriptor
}

message DescrAolResponseMsg {
  repeated DescrAolSpec    response                 = 1;    // batched request
}

// ProxycCbKeyHandle is used to operate on a proxyccb either by its key or handle
message ProxycCbKeyHandle {
  oneof key_or_handle {
    uint32     proxyccb_id          = 1;    // unique proxyccb id allocated by app
    fixed64    proxyccb_handle      = 2;    // proxyccb handle returned by HAL
  }
}

// ProxycCbSpec captures all the proxyccb level configuration
message ProxycCbSpec {
  ProxycCbKeyHandle     key_or_handle              = 1;    // proxyccb being created/updated
  uint32                pi                         = 2;
  uint32                ci                         = 3;
  uint32                proxyccb_flags             = 4;
  uint64                my_txq_base                = 5;
  uint32                my_txq_ring_size_shift     = 6;
  uint32                my_txq_entry_size_shift    = 7;
  uint64                chain_txq_base             = 8;    // next service chain TxQ base
  uint64                chain_txq_ring_indices_addr= 9;
  uint32                chain_txq_ring_size_shift  = 10;
  uint32                chain_txq_entry_size_shift = 11;
  uint32                chain_txq_lif              = 12;
  uint32                chain_txq_qtype            = 13;
  uint32                chain_txq_qid              = 14;
  uint32                chain_txq_ring             = 15;
  uint32                redir_span                 = 16;

  /*
   * 64-bit statistic counters
   */
  uint64                stat_pkts_chain            = 17;
  uint64                stat_pkts_discard          = 18;

  /*
   * 32-bit saturating statistic counters
   */
  uint32                stat_cb_not_ready          = 19;
  uint32                stat_my_txq_empty          = 20;
  uint32                stat_aol_err               = 21;
  uint32                stat_txq_full              = 22;
  uint32                stat_desc_sem_free_full    = 23;
  uint32                stat_page_sem_free_full    = 24;
}

// ProxycCbRequestMsg is batched add or modify proxyccb request
message ProxycCbRequestMsg {
  repeated ProxycCbSpec  request = 1;    // batched request
}

// ProxycCbStatus is the operational status of a given proxyccb
message ProxycCbStatus {
  fixed64    proxyccb_handle = 1;    // id of proxyccb returned by HAL
}

// ProxycCbResponse is response to ProxycCbSpec
message ProxycCbResponse {
  types.ApiStatus        api_status      = 1;    // API status code
  ProxycCbStatus         proxyccb_status = 2;    // proxyccb status, if api succeeded
}

// ProxycCbResponseMsg is batched response to ProxycCbRequestMsg
message ProxycCbResponseMsg {
  repeated ProxycCbResponse  response = 1;    // batched response
}

// ProxycCbDeleteRequest is used to delete a proxyccb
message ProxycCbDeleteRequest {
  ProxycCbKeyHandle       key_or_handle = 1;    // ProxycCb key or handle
}

// ProxycCbDeleteRequestMsg is used to delete a batch of proxyccbs
message ProxycCbDeleteRequestMsg {
  repeated ProxycCbDeleteRequest  request = 1;    // batched delete request
}

// ProxycCbDeleteResponseMsg is batched response to ProxycCbDeleteRequestMsg
message ProxycCbDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// ProxycCbGetRequest is used to get information about a proxyccb
message ProxycCbGetRequest {
  ProxycCbKeyHandle         key_or_handle = 1;    // ProxycCb key or handle
}

// ProxycCbGetRequestMsg is batched GET requests for proxyccbs
message ProxycCbGetRequestMsg {
  repeated ProxycCbGetRequest  request = 1;    // batched get request
}

// ProxycCbStats is the statistics object for each proxyccb
message ProxycCbStats {
}

// ProxycCbGetResponse captures all the information about a proxyccb
// only if api_status indicates success, other fields are valid
message ProxycCbGetResponse {
  types.ApiStatus    api_status = 1;    // API status code
  ProxycCbSpec       spec       = 2;    // proxyccb configuration
  ProxycCbStatus     status     = 3;    // operational state of proxyccb
  ProxycCbStats      stats      = 4;    // stats of the proxyccb
}

// ProxycCbGetResponseMsg is batched response to ProxycCbGetRequestMsg
message ProxycCbGetResponseMsg {
  repeated ProxycCbGetResponse  response = 1;    // batch get response
}

// ProxyrCbKeyHandle is used to operate on a proxyrcb either by its key or handle
message ProxyrCbKeyHandle {
  oneof key_or_handle {
    uint32     proxyrcb_id          = 1;    // unique proxyrcb id allocated by app
    fixed64    proxyrcb_handle      = 2;    // proxyrcb handle returned by HAL
  }
}

// ProxyrCbSpec captures all the proxyrcb level configuration
message ProxyrCbSpec {
  types.ObjectMeta      meta                       = 1;    // common object meta
  ProxyrCbKeyHandle     key_or_handle              = 2;    // proxyrcb being created/updated
  uint32                pi                         = 3;
  uint32                ci                         = 4;
  uint32                proxyrcb_flags             = 5;
  uint64                my_txq_base                = 6;
  uint32                my_txq_ring_size_shift     = 7;
  uint32                my_txq_entry_size_shift    = 8;
  uint64                chain_rxq_base             = 9;    // next service chain RxQ base
  uint64                chain_rxq_ring_indices_addr= 10;
  uint32                chain_rxq_ring_size_shift  = 11;
  uint32                chain_rxq_entry_size_shift = 12;
  uint32                chain_rxq_ring_index_select= 13;
  uint32                redir_span                 = 14;

  types.IPAddress       ip_sa                      = 15;
  types.IPAddress       ip_da                      = 16;
  uint32                sport                      = 17;
  uint32                dport                      = 18;
  uint32                vrf                        = 19;
  uint32                af                         = 20;
  types.IPProtocol      ip_proto                   = 21;
  uint32                dir                        = 22;
  uint32                role                       = 23;
  uint32                rev_cb_id                  = 24;

  /*
   * 64-bit statistic counters
   */
  uint64                stat_pkts_redir            = 25;
  uint64                stat_pkts_discard          = 26;

  /*
   * 32-bit saturating statistic counters
   */
  uint32                stat_cb_not_ready          = 27;
  uint32                stat_null_ring_indices_addr= 28;
  uint32                stat_aol_err               = 29;
  uint32                stat_rxq_full              = 30;
  uint32                stat_txq_empty             = 31;
  uint32                stat_sem_alloc_full        = 32;
  uint32                stat_sem_free_full         = 33;
}

// ProxyrCbRequestMsg is batched add or modify proxyrcb request
message ProxyrCbRequestMsg {
  repeated ProxyrCbSpec  request = 1;    // batched request
}

// ProxyrCbStatus is the operational status of a given proxyrcb
message ProxyrCbStatus {
  fixed64    proxyrcb_handle = 1;    // id of proxyrcb returned by HAL
}

// ProxyrCbResponse is response to ProxyrCbSpec
message ProxyrCbResponse {
  types.ApiStatus        api_status      = 1;    // API status code
  ProxyrCbStatus         proxyrcb_status = 2;    // proxyrcb status, if api succeeded
}

// ProxyrCbResponseMsg is batched response to ProxyrCbRequestMsg
message ProxyrCbResponseMsg {
  repeated ProxyrCbResponse  response = 1;    // batched response
}

// ProxyrCbDeleteRequest is used to delete a proxyrcb
message ProxyrCbDeleteRequest {
  types.ObjectMeta        meta          = 1;    // object meta
  ProxyrCbKeyHandle       key_or_handle = 2;    // ProxyrCb key or handle
}

// ProxyrCbDeleteRequestMsg is used to delete a batch of proxyrcbs
message ProxyrCbDeleteRequestMsg {
  repeated ProxyrCbDeleteRequest  request = 1;    // batched delete request
}

// ProxyrCbDeleteResponseMsg is batched response to ProxyrCbDeleteRequestMsg
message ProxyrCbDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// ProxyrCbGetRequest is used to get information about a proxyrcb
message ProxyrCbGetRequest {
  types.ObjectMeta          meta          = 1;    // object meta
  ProxyrCbKeyHandle         key_or_handle = 2;    // ProxyrCb key or handle
}

// ProxyrCbGetRequestMsg is batched GET requests for proxyrcbs
message ProxyrCbGetRequestMsg {
  repeated ProxyrCbGetRequest  request = 1;    // batched get request
}

// ProxyrCbStats is the statistics object for each proxyrcb
message ProxyrCbStats {
}

// ProxyrCbGetResponse captures all the information about a proxyrcb
// only if api_status indicates success, other fields are valid
message ProxyrCbGetResponse {
  types.ApiStatus    api_status = 1;    // API status code
  ProxyrCbSpec       spec       = 2;    // proxyrcb configuration
  ProxyrCbStatus     status     = 3;    // operational state of proxyrcb
  ProxyrCbStats      stats      = 4;    // stats of the proxyrcb
}

// ProxyrCbGetResponseMsg is batched response to ProxyrCbGetRequestMsg
message ProxyrCbGetResponseMsg {
  repeated ProxyrCbGetResponse  response = 1;    // batch get response
}

// RawrCbKeyHandle is used to operate on a rawrcb either by its key or handle
message RawrCbKeyHandle {
  oneof key_or_handle {
    uint32     rawrcb_id          = 1;    // unique rawrcb id allocated by app
    fixed64    rawrcb_handle      = 2;    // rawrcb handle returned by HAL
  }
}

// RawrCbSpec captures all the rawrcb level configuration
message RawrCbSpec {
  types.ObjectMeta      meta                       = 1;    // common object meta
  RawrCbKeyHandle       key_or_handle              = 2;    // rawrcb being created/updated
  uint32                rawrcb_flags               = 3;
  uint64                chain_rxq_base             = 4;    // next service chain RxQ base
  uint64                chain_rxq_ring_indices_addr= 5;
  uint32                chain_rxq_ring_size_shift  = 6;
  uint32                chain_rxq_entry_size_shift = 7;
  uint32                chain_rxq_ring_index_select= 8;
  uint64                chain_txq_base             = 9;    // next service chain TxQ base
  uint64                chain_txq_ring_indices_addr= 10;
  uint32                chain_txq_ring_size_shift  = 11;
  uint32                chain_txq_entry_size_shift = 12;
  uint32                chain_txq_ring_index_select= 13;
  uint32                chain_txq_lif              = 14;
  uint32                chain_txq_qtype            = 15;
  uint32                chain_txq_qid              = 16;
  uint32                cpu_id                     = 17;
  uint64                ascq_base                  = 18;
  uint64                ascq_sem_inf_addr          = 19;

  /*
   * 64-bit statistic counters
   */
  uint64                redir_pkts                 = 20;
  uint64                cb_not_ready_discards      = 21;
  uint64                qstate_cfg_discards        = 22;
  uint64                pkt_len_discards           = 23;
  uint64                rxq_full_discards          = 24;
  uint64                txq_full_discards          = 25;
  uint64                pkt_alloc_errors           = 26;
  uint64                pkt_free_errors            = 27;
}

// RawrCbRequestMsg is batched add or modify rawrcb request
message RawrCbRequestMsg {
  repeated RawrCbSpec    request = 1;    // batched request
}

// RawrCbStatus is the operational status of a given rawrcb
message RawrCbStatus {
  fixed64    rawrcb_handle = 1;    // id of rawrcb returned by HAL
}

// RawrCbResponse is response to RawrCbSpec
message RawrCbResponse {
  types.ApiStatus        api_status      = 1;    // API status code
  RawrCbStatus           rawrcb_status   = 2;    // rawrcb status, if api succeeded
}

// RawrCbResponseMsg is batched response to RawrCbRequestMsg
message RawrCbResponseMsg {
  repeated RawrCbResponse    response = 1;    // batched response
}

// RawrCbDeleteRequest is used to delete a rawrcb
message RawrCbDeleteRequest {
  types.ObjectMeta        meta          = 1;    // object meta
  RawrCbKeyHandle         key_or_handle = 2;    // RawrCb key or handle
}

// RawrCbDeleteRequestMsg is used to delete a batch of rawrcbs
message RawrCbDeleteRequestMsg {
  repeated RawrCbDeleteRequest    request = 1;    // batched delete request
}

// RawrCbDeleteResponseMsg is batched response to RawrCbDeleteRequestMsg
message RawrCbDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// RawrCbGetRequest is used to get information about a rawrcb
message RawrCbGetRequest {
  types.ObjectMeta          meta          = 1;    // object meta
  RawrCbKeyHandle       key_or_handle = 2;    // RawrCb key or handle
}

// RawrCbGetRequestMsg is batched GET requests for rawrcbs
message RawrCbGetRequestMsg {
  repeated RawrCbGetRequest    request = 1;    // batched get request
}

// RawrCbStats is the statistics object for each rawrcb
message RawrCbStats {
}

// RawrCbGetResponse captures all the information about a rawrcb
// only if api_status indicates success, other fields are valid
message RawrCbGetResponse {
  types.ApiStatus    api_status = 1;    // API status code
  RawrCbSpec         spec       = 2;    // rawrcb configuration
  RawrCbStatus       status     = 3;    // operational state of rawrcb
  RawrCbStats        stats      = 4;    // stats of the rawrcb
}

// RawrCbGetResponseMsg is batched response to RawrCbGetRequestMsg
message RawrCbGetResponseMsg {
  repeated RawrCbGetResponse    response = 1;    // batch get response
}


// RawcCbKeyHandle is used to operate on a rawccb either by its key or handle
message RawcCbKeyHandle {
  oneof key_or_handle {
    uint32     rawccb_id          = 1;    // unique rawccb id allocated by app
    fixed64    rawccb_handle      = 2;    // rawccb handle returned by HAL
  }
}

// RawcCbSpec captures all the rawccb level configuration
message RawcCbSpec {
  RawcCbKeyHandle       key_or_handle              = 1;    // rawccb being created/updated
  uint32                pi                         = 2;
  uint32                ci                         = 3;
  uint32                rawccb_flags               = 4;
  uint64                my_txq_base                = 5;
  uint32                my_txq_ring_size_shift     = 6;
  uint32                my_txq_entry_size_shift    = 7;
  uint64                chain_txq_base             = 8;    // next service chain TxQ base
  uint64                chain_txq_ring_indices_addr= 9;
  uint32                chain_txq_ring_size_shift  = 10;
  uint32                chain_txq_entry_size_shift = 11;
  uint32                chain_txq_lif              = 12;
  uint32                chain_txq_qtype            = 13;
  uint32                chain_txq_qid              = 14;
  uint32                chain_txq_ring             = 15;
  uint32                cpu_id                     = 16;
  uint64                ascq_base                  = 17;
  uint64                ascq_sem_inf_addr          = 18;

  /*
   * 64-bit statistic counters
   */
  uint64                chain_pkts                 = 19;
  uint64                cb_not_ready_discards      = 20;
  uint64                qstate_cfg_discards        = 21;
  uint64                aol_error_discards         = 22;
  uint64                my_txq_empty_discards      = 23;
  uint64                txq_full_discards          = 24;
  uint64                pkt_free_errors            = 25;
}

// RawcCbRequestMsg is batched add or modify rawccb request
message RawcCbRequestMsg {
  repeated RawcCbSpec    request = 1;    // batched request
}

// RawcCbStatus is the operational status of a given rawccb
message RawcCbStatus {
  fixed64    rawccb_handle = 1;    // id of rawccb returned by HAL
}

// RawcCbResponse is response to RawcCbSpec
message RawcCbResponse {
  types.ApiStatus        api_status      = 1;    // API status code
  RawcCbStatus           rawccb_status   = 2;    // rawccb status, if api succeeded
}

// RawcCbResponseMsg is batched response to RawcCbRequestMsg
message RawcCbResponseMsg {
  repeated RawcCbResponse    response = 1;    // batched response
}

// RawcCbDeleteRequest is used to delete a rawccb
message RawcCbDeleteRequest {
  RawcCbKeyHandle         key_or_handle = 1;    // RawcCb key or handle
}

// RawcCbDeleteRequestMsg is used to delete a batch of rawccbs
message RawcCbDeleteRequestMsg {
  repeated RawcCbDeleteRequest    request = 1;    // batched delete request
}

message RawcCbDeleteResponse {
  types.ApiStatus    api_status = 1;    // API status code
}

// RawcCbDeleteResponseMsg is batched response to RawcCbDeleteRequestMsg
message RawcCbDeleteResponseMsg {
  repeated RawcCbDeleteResponse response = 1;
}

// RawcCbGetRequest is used to get information about a rawccb
message RawcCbGetRequest {
  RawcCbKeyHandle       key_or_handle = 1;    // RawcCb key or handle
}

// RawcCbGetRequestMsg is batched GET requests for rawccbs
message RawcCbGetRequestMsg {
  repeated RawcCbGetRequest    request = 1;    // batched get request
}

// RawcCbStats is the statistics object for each rawccb
message RawcCbStats {
}

// RawcCbGetResponse captures all the information about a rawccb
// only if api_status indicates success, other fields are valid
message RawcCbGetResponse {
  types.ApiStatus    api_status = 1;    // API status code
  RawcCbSpec         spec       = 2;    // rawccb configuration
  RawcCbStatus       status     = 3;    // operational state of rawccb
  RawcCbStats        stats      = 4;    // stats of the rawccb
}

// RawcCbGetResponseMsg is batched response to RawcCbGetRequestMsg
message RawcCbGetResponseMsg {
  repeated RawcCbGetResponse    response = 1;    // batch get response
}

// vMotion Debug dump
message VmotionDebugSendRequestMsg {
  repeated VmotionDebugSendRequest  request = 1;
}

message VmotionDebugSendRequest {
}

message VmotionDebugResponseMsg {
  repeated VmotionDebugResponse response = 1;
}

message VmotionStats {
  uint32     total_vmotion = 1;
  uint32     mig_in_vmotion = 2;
  uint32     mig_out_vmotion = 3;
  uint32     mig_success = 4;
  uint32     mig_failed = 5;
  uint32     mig_aborted = 6;
  uint32     mig_timeout = 7;
  uint32     mig_cold = 8;
}

message VmotionDebugEp {
  string            mac_address          = 1;
  string            old_homing_host_ip   = 2;
  uint32            migration_type       = 3;
  uint32            vmotion_state        = 4;
  uint32            flags                = 5;
  uint32            state                = 6;
  string            start_time           = 7;
  string            term_sync_time       = 8;
  string            end_time             = 9;
  uint32            sync_cnt             = 10;
  uint32            term_sync_cnt        = 11;
  uint32            sync_sess_cnt        = 12;
  uint32            term_sync_sess_cnt   = 13;
}

message VmotionActiveEp {
  string            mac_address          = 1;
  uint32            migration_state      = 2;
  uint32            useg_vlan            = 3;
}

message VmotionDebugResponse {
  types.ApiStatus          api_status     = 1 [(gogoproto.jsontag) = "api_status"]; // status code
  bool                     vmotion_enable = 2;
  VmotionStats             stats          = 3;
  repeated VmotionDebugEp  ep             = 4;
  repeated VmotionActiveEp active_ep      = 5;
  repeated VmotionDebugEp  history_ep     = 6;
}

// Debug test to send FIN on local EPs
message TestSendFinRequestMsg {
  repeated TestSendFinRequest  request = 1;
}

message TestSendFinRequest {
}

message TestSendFinResponseMsg {
  repeated TestSendFinResponse response = 1;
}

message TestSendFinResponse {
  types.ApiStatus api_status  = 1 [(gogoproto.jsontag) = "api_status"];    // API status code
}

// Debug test to force sync clock
message TestClockSyncRequestMsg {
  repeated TestClockSyncRequest  request = 1;
}

message TestClockSyncRequest {
}

message TestClockSyncResponseMsg {
  repeated TestClockSyncResponse response = 1;
}

message TestClockSyncResponse {
  types.ApiStatus api_status  = 1 [(gogoproto.jsontag) = "api_status"];    // API status code
}

// Debug test to fte cps
message TestInjectFtePacketRequestMsg {
  repeated TestInjectFtePacketRequest  request = 1;
}

message TestInjectFtePacketRequest {
  kh.EndpointKeyHandle  source_endpoint      = 1;
  kh.EndpointKeyHandle  destination_endpoint = 2;
  uint32                source_ip            = 3;
  uint32                destination_ip       = 4; 
}

message TestInjectFtePacketResponseMsg {
  repeated TestInjectFtePacketResponse response = 1;
}

message TestInjectFtePacketResponse {
  types.ApiStatus api_status  = 1 [(gogoproto.jsontag) = "api_status"];    // API status code
}

message FlowHashGetResponseMsg {
  repeated FlowHashGetResponse  response = 1;
}

message FlowHashGetResponse {
  types.ApiStatus      api_status                  = 1;
  bool                 primary_index_valid         = 2;
  uint32               primary_index               = 3;
  bool                 secondary_index_valid       = 4;
  uint32               secondary_index             = 5;
  string               key                         = 6;
  string               data                        = 7;
}


// FlowTableGetRequest is used to get information about the flows programmed in the hardware
message FlowHashGetRequest {
  uint64               hardware_vrf_id = 1;    // hardware vrf
  session.FlowKey      flow_key        = 2;    // flow key
  types.FlowDirection  flow_direction  = 3;    // flow direction
  session.FlowInstance flow_instance   = 4;    // flow instance (for proxy etc.)
}

message FlowHashGetRequestMsg {
  repeated FlowHashGetRequest request = 1;
}

enum IntPortSpeed {
    SPEED_10M       = 0;
    SPEED_100M      = 1;
    SPEED_1G        = 2;
    SPEED_RESVD     = 3;    // Unknown
}

enum IntPortDplxMode {
    HALF_DUPLEX     = 0;
    FULL_DUPLEX     = 1;
}

message InternalPortStatus {
    string              port_descr      = 1;        // Port Description
    intf.IfStatus       port_status     = 2;        // Status
    IntPortSpeed        port_speed      = 3;
    IntPortDplxMode     port_mode       = 4;
    bool                port_tx_paused  = 5;
    bool                port_flow_ctrl  = 6;
}

message InternalPortStats {
    uint64  in_good_octets  = 1;    
    uint32  in_bad_octets   = 2;
    uint32  in_unicast      = 3;
    uint32  in_broadcast    = 4;
    uint32  in_multicast    = 5;
    uint32  in_pause        = 6;
    uint32  in_undersize    = 7;
    uint32  in_fragments    = 8;
    uint32  in_oversize     = 9;
    uint32  in_jabber       = 10;
    uint32  in_rx_err       = 11;
    uint32  in_fcs_err      = 12;
    uint64  out_octets      = 13;
    uint32  out_unicast     = 14;
    uint32  out_broadcast   = 15;
    uint32  out_multicast   = 16;
    uint32  out_fcs_err     = 17;
    uint32  out_pause       = 18;
    uint32  out_collisions  = 19;
    uint32  out_deferred    = 20;
    uint32  out_single      = 21;
    uint32  out_multiple    = 22;
    uint32  out_excessive   = 23;
    uint32  out_late        = 24;
}

message InternalPortResponse {
    uint32              port_number = 1;        // Port number
    InternalPortStatus  status      = 2;
    InternalPortStats   stats       = 3;
}

message InternalPortResponseMsg {
    repeated InternalPortResponse response = 1;
}

message InternalPortRequest {
    uint32  port_number = 1;        
}

message InternalPortRequestMsg {
    repeated InternalPortRequest request = 1;
}

