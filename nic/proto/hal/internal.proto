//------------------------------------------------------------------------------
// protobuf specification for internal HAL APIs
//------------------------------------------------------------------------------

syntax = "proto3";

import "types.proto";
import "fwlog.proto";

package internal;
option go_package="halproto";

// Internal service definition
service Internal {
  // Program resolution related APIs
  rpc GetProgramAddress(GetProgramAddressRequestMsg) returns (ProgramAddressResponseMsg) {}
  // Program resolution related APIs
  rpc AllocHbmAddress(AllocHbmAddressRequestMsg) returns (AllocHbmAddressResponseMsg) {}
  // LIF BDF association APIs
  rpc ConfigureLifBdf(ConfigureLifBdfRequestMsg) returns (ConfigureLifBdfResponseMsg) {}
  // Inject a software PHV
  rpc SoftwarePhvInject (SoftwarePhvInjectMsg) returns (SoftwarePhvResponseMsg) {}
  // Get software PHV injection status
  rpc SoftwarePhvGet (SoftwarePhvGetRequestMsg) returns (SoftwarePhvGetResponseMsg) {}
  // Simulator service definition
  rpc LogFlow (LogFlowRequestMsg) returns (LogFlowResponseMsg) {}

  // Quiesce RPCs
  rpc QuiesceMsgSnd (EmptyRequest) returns (EmptyResponse) {}
  rpc QuiesceStart (EmptyRequest) returns (EmptyResponse) {}
  rpc QuiesceStop (EmptyRequest) returns (EmptyResponse) {}

  //IPsec
  rpc IpsecCbCreate (IpsecCbRequestMsg) returns (IpsecCbResponseMsg) {}
  rpc IpsecCbUpdate (IpsecCbRequestMsg) returns (IpsecCbResponseMsg) {}
  rpc IpsecCbDelete (IpsecCbDeleteRequestMsg) returns (IpsecCbDeleteResponseMsg) {}
  rpc IpsecCbGet (IpsecCbGetRequestMsg) returns (IpsecCbGetResponseMsg) {}

  //TcpCb
  rpc TcpCbCreate (TcpCbRequestMsg) returns (TcpCbResponseMsg) {}
  rpc TcpCbUpdate (TcpCbRequestMsg) returns (TcpCbResponseMsg) {}
  rpc TcpCbDelete (TcpCbDeleteRequestMsg) returns (TcpCbDeleteResponseMsg) {}
  rpc TcpCbGet (TcpCbGetRequestMsg) returns (TcpCbGetResponseMsg) {}

  //TlsCb
  rpc TlsCbCreate (TlsCbRequestMsg) returns (TlsCbResponseMsg) {}
  rpc TlsCbUpdate (TlsCbRequestMsg) returns (TlsCbResponseMsg) {}
  rpc TlsCbDelete (TlsCbDeleteRequestMsg) returns (TlsCbDeleteResponseMsg) {}
  rpc TlsCbGet (TlsCbGetRequestMsg) returns (TlsCbGetResponseMsg) {}
}

message ProgramAddressReq {
  // Handle. E.g.: 'iris', 'p4plus'.
  string handle = 1;

  // Program name to resolve
  string prog_name = 2;

  // If resolve_label is false, returns the base address of the program.
  // Otherwise returns the PC offset (14 bits) of the program.
  bool resolve_label = 3;

  // Label name to resolve
  string label = 4;
}

message ProgramAddressResp {
  int64 addr = 1;    // -errno, in case of error
}

message GetProgramAddressRequestMsg {
  repeated ProgramAddressReq request = 1;
}

message ProgramAddressResponseMsg {
  repeated ProgramAddressResp response = 1;
}

message HbmAddressReq {
  // handle that specifies region in config (json) file
  string handle = 1;
}

message HbmAddressResp {
  int64 addr = 1;    // -errno, in case of error
  uint32 size = 2;
}

message AllocHbmAddressRequestMsg {
  repeated HbmAddressReq request = 1;
}

message AllocHbmAddressResponseMsg {
  repeated HbmAddressResp response = 1;
}

message LifBdfReq {
  uint32 lif = 1;    
  uint32 bdf = 2;
}

message LifBdfResp {
  uint32 lif = 1;    
  uint32 bdf = 2;
  int32  status = 3;
}
message ConfigureLifBdfRequestMsg {
  repeated LifBdfReq request = 1;
}

message ConfigureLifBdfResponseMsg {
  repeated LifBdfResp response = 1;
}

// The Software PHV service definition
service SoftwarePhv {
}

// SoftwarePhvPipeline: pipeline to inject the software phv
enum SoftwarePhvPipeline {
  SOFTWARE_PHV_RXDMA       = 0;
  SOFTWARE_PHV_TXDMA       = 1;
  SOFTWARE_PHV_INGRESS     = 2;
  SOFTWARE_PHV_EGRESS      = 3;
}

// SoftwarePhvStatus represents the current status of the PHVs
message SoftwarePhvStatus {
  SoftwarePhvPipeline   pipeline          = 1;    // pipeline to inject into
  bool                  enabled           = 2;    // PHV injection is enabled
  bool                  done              = 3;    // PHV injection is done
  uint32                current_cntr      = 4;    // current counter
  uint32                inject_cntr       = 5;    // injected PHV counter
}

// SoftwarePhvResponse is generic response 
message SoftwarePhvResponse {
  types.ApiStatus       api_status        = 1 [(gogoproto.jsontag) = "api_status"];    // API status code
}

// SoftwarePhvResponseMsg is batched response to SoftwarePhvRequestMsg
message SoftwarePhvResponseMsg {
  repeated SoftwarePhvResponse    response = 1;    // batched response
}

// SoftwarePhvGetRequest is used to get information about a PHV
message SoftwarePhvGetRequest {
  SoftwarePhvPipeline   pipeline         = 1;    // pipeline to inject into
}

// SoftwarePhvGetRequestMsg is batched GET request for PHV
message SoftwarePhvGetRequestMsg {
  repeated SoftwarePhvGetRequest    request = 1;    // batched get request
}


// SoftwarePhvGetResponse captures all the information about a Sw PHV
// only if api_status indicates success, other fields are valid
message SoftwarePhvGetResponse {
  types.ApiStatus    api_status = 1 [(gogoproto.jsontag) = "api_status"];    // API status code
  SoftwarePhvStatus    status     = 2;    // operational state of PHV
}

// SoftwarePhvGetResponseMsg is the batched response to SoftwarePhvGetRequestMsg
message SoftwarePhvGetResponseMsg {
  repeated SoftwarePhvGetResponse    response = 1;    // batched get response
}

// SoftwarePhvInject is the packet inject spec
message SoftwarePhvInject {
  SoftwarePhvPipeline   pipeline         = 1;    // pipeline to inject into
}

// SoftwarePhvInjectMsg is the inject message
message SoftwarePhvInjectMsg {
  repeated SoftwarePhvInject  request = 1; // sw phv inject request
}

message LogFlowRequestMsg {
  repeated fwlog.FWEvent request = 1;
}

message LogFlowResponseMsg {
  repeated LogFlowResponse response = 1;
}

message LogFlowResponse {
  types.ApiStatus api_status  = 1 [(gogoproto.jsontag) = "api_status"];    // API status code
}

// Codegen forms the Request and Response messages using the package name "internal"
// This is to calm the autogenerator
message EmptyRequest{
  repeated types.Empty request = 1;
}

message EmptyResponse{
  repeated types.Empty response = 1;
}

// IpsecCbKeyHandle is used to operate on a ipsec_cb either by its key or handle
message IpsecCbKeyHandle {
  oneof key_or_handle {
    uint32     ipseccb_id          = 1;    // unique ipsec_cb id allocated by app                                                                                                                                                                                  
    fixed64    ipseccb_handle      = 2;    // ipsec_cb handle returned by HAL                                                                                                                                                                                      
  }                                                                                                                                                                                                                                                                
}                                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                   
// IpsecCbSpec captures all the ipsec_cb level configuration                                                                                                                                                                                                       
message IpsecCbSpec {                                                                                                                                                                                                                                              
  IpsecCbKeyHandle      key_or_handle              = 1;    // ipsec_cb being created/updated                                                                                                                                                                       
  uint32                pi                    = 2;                                                                                                                                                                                                                 
  uint32                ci                    = 3;                                                                                                                                                                                                                 
  uint32                tunnel_sip4           = 4;                                                                                                                                                                                                                 
  uint32                tunnel_dip4           = 5;                                                                                                                                                                                                                 
  uint32                iv_size               = 6;                                                                                                                                                                                                                 
  uint32                icv_size              = 7;                                                                                                                                                                                                                 
  uint32                block_size            = 8;                                                                                                                                                                                                                 
  uint32                key_index             = 9;                                                                                                                                                                                                                 
  uint32                barco_enc_cmd         = 10;
  fixed64               iv                    = 11;
  uint32                iv_salt               = 12;
  uint32                esn_hi                = 13;
  uint32                esn_lo                = 14;
  uint32                spi                   = 15;
  uint32                expected_seq_no       = 16;
  fixed64               seq_no_bmp            = 17;
  types.IPAddress       sip6                  = 18;
  types.IPAddress       dip6                  = 19;
  uint32                is_v6                 = 20;
  uint32                vrf_vlan              = 21;
  uint32                last_replay_seq_no    = 22;
  uint32                new_spi               = 23;
  uint32                new_key_index         = 24;
  uint32                is_nat_t              = 25;
  uint32                flags                 = 26;
  uint32                is_random             = 27;
  uint32                extra_pad             = 28;
  uint32                rx_pkts               = 29;
  fixed64               rx_bytes              = 30;
  fixed64               rx_drops              = 31;
  fixed64               tx_pkts               = 32;
  fixed64               tx_bytes              = 33;
  fixed64               tx_drops              = 34;
}

// IpsecCbRequestMsg is batched add or modify ipseccb request
message IpsecCbRequestMsg {
  repeated IpsecCbSpec    request = 1;    // batched request
}

// IpsecCbStatus is the operational status of a given ipseccb
message IpsecCbStatus {
  fixed64    ipseccb_handle     = 1;    // id of ipseccb returned by HAL
}

// IpsecCbResponse is response to IpsecCbSpec
message IpsecCbResponse {
  types.ApiStatus        api_status            = 1;    // API status code
  IpsecCbStatus       ipseccb_status   = 2;    // ipseccb status, if api succeeded
}

// IpsecCbResponseMsg is batched response to IpsecCbRequestMsg
message IpsecCbResponseMsg {
  repeated IpsecCbResponse    response = 1;    // batched response
}

// IpsecCbDeleteRequest is used to delete a ipseccb
message IpsecCbDeleteRequest {
  IpsecCbKeyHandle     key_or_handle = 1;    // IpsecCb key or handle
}

// IpsecCbDeleteRequestMsg is used to delete a batch of ipseccbs
message IpsecCbDeleteRequestMsg {
  repeated IpsecCbDeleteRequest    request = 1;    // batched delete request
}

// IpsecCbDeleteResponseMsg is batched response to IpsecCbDeleteRequestMsg
message IpsecCbDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// IpsecCbGetRequest is used to get information about a ipseccb
message IpsecCbGetRequest {
  IpsecCbKeyHandle            key_or_handle = 1;    // IpsecCb key or handle
}

// IpsecCbGetRequestMsg is batched GET requests for ipseccbs
message IpsecCbGetRequestMsg {
  repeated IpsecCbGetRequest    request = 1;    // batched get request
}

// IpsecCbStats is the statistics object for each ipseccb
message IpsecCbStats {
}

// IpsecCbGetResponse captures all the information about a ipseccb
// only if api_status indicates success, other fields are valid
message IpsecCbGetResponse {
  types.ApiStatus        api_status = 1;    // API status code
  IpsecCbSpec         spec       = 2;    // ipseccb configuration
  IpsecCbStatus       status     = 3;    // operational state of ipseccb
  IpsecCbStats        stats      = 4;    // stats of the ipseccb
}

// IpsecCbGetResponseMsg is batched response to IpsecCbGetRequestMsg
message IpsecCbGetResponseMsg {
  repeated IpsecCbGetResponse    response = 1;    // batch get response
}


// TcpCbKeyHandle is used to operate on a tcp_cb either by its key or handle
message TcpCbKeyHandle {
  oneof key_or_handle {
    uint32     tcpcb_id          = 1;    // unique tcp_cb id allocated by app
    fixed64    tcpcb_handle      = 2;    // tcp_cb handle returned by HAL
  }
}

// TcpCbSpec captures all the tcp_cb level configuration
message TcpCbSpec {
  TcpCbKeyHandle        key_or_handle              = 1;    // tcp_cb being created/updated
  uint32                rcv_nxt                    = 2;
  uint32                snd_nxt                    = 3;
  uint32                snd_una                    = 4;
  uint32                rcv_tsval                  = 5;
  uint32                ts_recent                  = 6;
  fixed64               serq_base                  = 7;
  uint32                debug_dol                  = 8;
  fixed64               sesq_base                  = 9;
  uint32                sesq_pi                    = 10;
  uint32                sesq_ci                    = 11;
  uint32                snd_wnd                    = 12;
  uint32                snd_cwnd                   = 13;
  uint32                rcv_mss                    = 14;
  uint32                source_port                = 15;
  uint32                dest_port                  = 16;
  bytes                 header_template            = 17;
  uint32                state                      = 18;
  uint32                source_lif                 = 19;
  fixed64               asesq_base                 = 20;
  uint32                asesq_pi                   = 21;
  uint32                asesq_ci                   = 22;
  uint32                debug_dol_tx               = 23;
  uint32                header_len                 = 24;
  bool                  pending_ack_send           = 25;
  types.AppRedirType    l7_proxy_type              = 26;
  uint32                sesq_retx_ci               = 27;
  uint64                retx_snd_una               = 28;
  uint64                rx_ts                      = 29;
  uint64                rto                        = 30;
  uint32                snd_cwnd_cnt               = 31;
  uint32                debug_dol_tblsetaddr       = 32;
  uint32                serq_pi                    = 33;
  uint32                pred_flags                 = 34;
  uint32                other_qid                  = 35;
  uint32                packets_out                = 36;
  uint32                rto_pi                     = 37;
  uint32                retx_timer_ci              = 38;
  uint32                rto_backoff                = 39;
  uint32                cpu_id                     = 40;
  uint32                serq_ci                    = 41;
}

// TcpCbRequestMsg is batched add or modify tcpcb request
message TcpCbRequestMsg {
  repeated TcpCbSpec    request = 1;    // batched request
}

// TcpCbStatus is the operational status of a given tcpcb
message TcpCbStatus {
  fixed64    tcpcb_handle     = 1;    // id of tcpcb returned by HAL
}

// TcpCbResponse is response to TcpCbSpec
message TcpCbResponse {
  types.ApiStatus        api_status            = 1;    // API status code
  TcpCbStatus       tcpcb_status   = 2;    // tcpcb status, if api succeeded
}

// TcpCbResponseMsg is batched response to TcpCbRequestMsg
message TcpCbResponseMsg {
  repeated TcpCbResponse    response = 1;    // batched response
}

// TcpCbDeleteRequest is used to delete a tcpcb
message TcpCbDeleteRequest {
  TcpCbKeyHandle     key_or_handle = 1;    // TcpCb key or handle
}

// TcpCbDeleteRequestMsg is used to delete a batch of tcpcbs
message TcpCbDeleteRequestMsg {
  repeated TcpCbDeleteRequest    request = 1;    // batched delete request
}

// TcpCbDeleteResponseMsg is batched response to TcpCbDeleteRequestMsg
message TcpCbDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// TcpCbGetRequest is used to get information about a tcpcb
message TcpCbGetRequest {
  TcpCbKeyHandle            key_or_handle = 1;    // TcpCb key or handle
}

// TcpCbGetRequestMsg is batched GET requests for tcpcbs
message TcpCbGetRequestMsg {
  repeated TcpCbGetRequest    request = 1;    // batched get request
}

// TcpCbStats is the statistics object for each tcpcb
message TcpCbStats {
  uint64                bytes_rcvd                 = 1;
  uint64                pkts_rcvd                  = 2;
  uint64                pages_alloced              = 3;
  uint64                desc_alloced               = 4;
  uint64                debug_num_pkt_to_mem       = 5;
  uint64                debug_num_phv_to_mem       = 6;
  uint32                debug_atomic_delta         = 8;
  uint32                debug_atomic0_incr1247     = 9;
  uint32                debug_atomic1_incr247      = 10;
  uint32                debug_atomic2_incr47       = 11;
  uint32                debug_atomic3_incr47       = 12;
  uint32                debug_atomic4_incr7        = 13;
  uint32                debug_atomic5_incr7        = 14;
  uint32                debug_atomic6_incr7        = 15;
  uint64                bytes_acked                = 16;
  uint64                slow_path_cnt              = 17;
  uint64                serq_full_cnt              = 18;
  uint64                ooo_cnt                    = 19;

  uint64                bytes_sent                 = 10001;
  uint64                pkts_sent                  = 10002;
  uint64                debug_num_phv_to_pkt       = 10003;
  uint64                debug_num_mem_to_pkt       = 10004;
  uint32                sesq_pi                    = 10005;
  uint32                sesq_ci                    = 10006;
  uint32                send_ack_pi                = 10007;
  uint32                send_ack_ci                = 10008;
  uint32                del_ack_pi                 = 10009;
  uint32                del_ack_ci                 = 10010;
  uint32                retx_timer_pi              = 10011;
  uint32                retx_timer_ci              = 10012;
  uint32                asesq_pi                   = 10013;
  uint32                asesq_ci                   = 10014;
  uint32                pending_tx_pi              = 10015;
  uint32                pending_tx_ci              = 10016;
  uint32                fast_retrans_pi            = 10017;
  uint32                fast_retrans_ci            = 10018;
  uint32                clean_retx_pi              = 10019;
  uint32                clean_retx_ci              = 10020;
  uint32                packets_out                = 10021;
  uint32                rto_pi                     = 10022;
  uint32                sesq_retx_ci               = 10023;
  uint32                asesq_retx_ci              = 10024;
  uint32                tx_ring_pi                 = 10025;
  uint32                partial_ack_cnt            = 10026;
}

// TcpCbGetResponse captures all the information about a tcpcb
// only if api_status indicates success, other fields are valid
message TcpCbGetResponse {
  types.ApiStatus        api_status = 1;    // API status code
  TcpCbSpec         spec       = 2;    // tcpcb configuration
  TcpCbStatus       status     = 3;    // operational state of tcpcb
  TcpCbStats        stats      = 4;    // stats of the tcpcb
}

// TcpCbGetResponseMsg is batched response to TcpCbGetRequestMsg
message TcpCbGetResponseMsg {
  repeated TcpCbGetResponse    response = 1;    // batch get response
}

// TlsCbKeyHandle is used to operate on a tlscb either by its key or handle
message TlsCbKeyHandle {
  oneof key_or_handle {
    uint32     tlscb_id          = 1;    // unique tlscb id allocated by app
    fixed64    tlscb_handle      = 2;    // tlscb handle returned by HAL
  }
}

// TlsCbSpec captures all the tlscb level configuration
message TlsCbSpec {
  TlsCbKeyHandle   key_or_handle                   = 1;    // tlscb being created/updated
  uint32                nic_dec_head               = 2;
  uint32                nic_dec_tail               = 3;
  uint32                command                    = 4;
  uint32                debug_dol                  = 5;
  uint32                serq_pi                    = 6;
  uint32                serq_ci                    = 7;
  uint32                bsq_pi                     = 8;
  uint32                bsq_ci                     = 9;
  uint32                crypto_key_idx             = 10;
  uint32                serq_base                  = 11;
  uint32                sesq_base                  = 12;
  fixed64               tnmdr_alloc                = 13;
  fixed64               tnmpr_alloc                = 14;
  fixed64               rnmdr_free                 = 15;
  fixed64               rnmpr_free                 = 16;
  fixed64               enc_requests               = 17;
  fixed64               enc_completions            = 18;
  fixed64               enc_failures               = 19;
  fixed64               dec_requests               = 20;
  fixed64               dec_completions            = 21;
  fixed64               dec_failures               = 22;
  uint32                salt                       = 23;
  uint64                explicit_iv                = 24;
  uint32                pre_debug_stage0_7_thread  = 25;
  uint32                post_debug_stage0_7_thread = 26;
  bool                  is_decrypt_flow            = 27;
  uint32                other_fid                  = 28;
  types.AppRedirType    l7_proxy_type              = 29;
  uint32                crypto_hmac_key_idx        = 30;
  fixed64               mac_requests               = 31;
  fixed64               mac_completions            = 32;
  fixed64               mac_failures               = 33;
  uint32                cpu_id                     = 34;
}

// TlsCbRequestMsg is batched add or modify tlscb request
message TlsCbRequestMsg {
  repeated TlsCbSpec    request = 1;    // batched request
}

// TlsCbStatus is the operational status of a given tlscb
message TlsCbStatus {
  fixed64    tlscb_handle     = 1;    // id of tlscb returned by HAL
}

// TlsCbResponse is response to TlsCbSpec
message TlsCbResponse {
  types.ApiStatus        api_status            = 1;    // API status code
  TlsCbStatus       tlscb_status   = 2;    // tlscb status, if api succeeded
}

// TlsCbResponseMsg is batched response to TlsCbRequestMsg
message TlsCbResponseMsg {
  repeated TlsCbResponse    response = 1;    // batched response
}

// TlsCbDeleteRequest is used to delete a tlscb
message TlsCbDeleteRequest {
  TlsCbKeyHandle     key_or_handle = 1;    // TlsCb key or handle
}

// TlsCbDeleteRequestMsg is used to delete a batch of tlscbs
message TlsCbDeleteRequestMsg {
  repeated TlsCbDeleteRequest    request = 1;    // batched delete request
}

// TlsCbDeleteResponseMsg is batched response to TlsCbDeleteRequestMsg
message TlsCbDeleteResponseMsg {
  repeated types.ApiStatus    api_status = 1;    // API status code
}

// TlsCbGetRequest is used to get information about a tlscb
message TlsCbGetRequest {
  TlsCbKeyHandle       key_or_handle = 1;    // TlsCb key or handle
}

// TlsCbGetRequestMsg is batched GET requests for tlscbs
message TlsCbGetRequestMsg {
  repeated TlsCbGetRequest    request = 1;    // batched get request
}

// TlsCbStats is the statistics object for each tlscb
message TlsCbStats {
}

// TlsCbGetResponse captures all the information about a tlscb
// only if api_status indicates success, other fields are valid
message TlsCbGetResponse {
  types.ApiStatus        api_status = 1;    // API status code
  TlsCbSpec         spec       = 2;    // tlscb configuration
  TlsCbStatus       status     = 3;    // operational state of tlscb
  TlsCbStats        stats      = 4;    // stats of the tlscb
}

// TlsCbGetResponseMsg is batched response to TlsCbGetRequestMsg
message TlsCbGetResponseMsg {
  repeated TlsCbGetResponse    response = 1;    // batch get response
}

