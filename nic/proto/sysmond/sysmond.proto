syntax = "proto3";
package sysmond;

import "delphi.proto";
import "penctl.proto";
import "metrics_annotations.proto";


message SysmondPenctlRootCmd {
    option (venice.penctlParentCmd) = {
        Cmd:          "system",
        HelpStr:      "Metrics for system monitors",
        ShortHelpStr: "Metrics for system monitors"
    };
}

message AsicTemperatureMetrics {
    option (venice.penctlCmd) = {
        Cmd:          "temp",
        ShortHelpStr: "System temperature information",
        HelpStr:      "System temperature information:\\n"
                      "\\n\\nValue Description:\\n\\n"
                      "local_temperature: Temperature of the board.\\n"
                      "die_temperature: Temperature of the die.\\n"
                      "hbm_temperature: Temperature of the hbm.\\n"
                      "The temperature is degree Celcius\\n",
        RootCmd:      "system"
    };
    option (venice.metricInfo) = {
        DisplayName: "Asic Temperature",
        Description: "Asic Temperature",
        Scope: PerASIC,
        Tags: [ Level7 ]
    };


    fixed64 Key = 1;

    delphi.Counter local_temperature              = 2 [(venice.metricsField) = {DisplayName: "Local Temperature" Description: "Temperature of the board in celsius", Units: Celsius }];
    delphi.Counter die_temperature                = 3 [(venice.metricsField) = {DisplayName: "Die Temperature" Description: "Temperature of the die in celsius", Units: Celsius }];
    delphi.Counter hbm_temperature                = 4 [(venice.metricsField) = {DisplayName: "HBM Temperature" Description: "Temperature of the HBM in celsius", Units: Celsius }];
    delphi.Counter qsfp_port1_temperature         = 5;
    delphi.Counter qsfp_port2_temperature         = 6;
    delphi.Counter qsfp_port1_warning_temperature = 7;
    delphi.Counter qsfp_port2_warning_temperature = 8;
    delphi.Counter qsfp_port1_alarm_temperature   = 9;
    delphi.Counter qsfp_port2_alarm_temperature   = 10;
}

message AsicPowerMetrics {
    option (venice.penctlCmd) = {
        Cmd:          "power",
        ShortHelpStr: "System power information",
        HelpStr:      "System power information:\\n"
                      "\\n\\nValue Description:\\n\\n"
                      "pin: Input power to the system.\\n"
                      "pout1: Core output power.\\n"
                      "pout2: Arm output power.\\n"
                      "The power is milli Watt\\n",
        RootCmd:      "system"
    };
    option (venice.metricInfo) = {
        DisplayName: "Asic Power",
        Description: "Asic Power",
        Scope: PerASIC,
        Tags: [ Level7 ]
    };

    fixed64 Key = 1;

    delphi.Counter pin           = 2 [(venice.metricsField) = {DisplayName: "Input Power" Description: "Input power to the system" }];
    delphi.Counter pout1         = 3 [(venice.metricsField) = {DisplayName: "Core Output Power" Description: "Core output power" }];
    delphi.Counter pout2         = 4 [(venice.metricsField) = {DisplayName: "Input Power" Description: "ARM output power" }];
}

message AsicFrequencyMetrics {
    option (venice.penctlCmd) = {
        Cmd:          "frequency",
        ShortHelpStr: "System frequency information",
        HelpStr:      "System frequency information:\\n"
                      "\\n\\nValue Description:\\n\\n"
                      "frequency: Frequency of the system.\\n"
                      "The frequency is MHz\\n",
        RootCmd:      "system"
    };
    option (venice.metricInfo) = {
        DisplayName: "Asic Frequency",
        Description: "Asic Frequency",
        Scope: PerASIC,
        Tags: [ Level7 ]
    };


    fixed64 Key = 1;

    delphi.Counter frequency           = 2 [(venice.metricsField) = {DisplayName: "Frequency of the system" Description: "Frequency of the system in MHz" }];
}

enum SpeedState {
    Full  = 0;
    Half  = 1;
}

message SysmondAsicFrequency {
    option (delphi.update_event)  = true;
    option (delphi.singleton)     = true;
    delphi.ObjectMeta      Meta   = 1;
    SpeedState             Speed  = 2;
}

message AsicMemoryMetrics {
    option (venice.penctlCmd) = {
        Cmd:          "memory",
        ShortHelpStr: "System memory information"
        HelpStr:      "System memory information:\\n"
                      "\\n\\nValue Description:\\n\\n"
                      "Total Memory: Total Memory of the system.\\n"
                      "Available Memory: Available Memory of the system.\\n"
                      "Free Memory: Free Memory of the system.\\n"
                      "The memory is KB\\n",
        RootCmd:      "system"
    };
    option (venice.metricInfo) = {
        DisplayName: "System Memory",
        Description: "System Memory",
        Scope: UnknownScope, //ignore by venice UI
        Tags: [ Level7 ]
    };

    fixed64 Key = 1;

    delphi.Counter totalmemory          = 2;
    delphi.Counter availablememory      = 3;
    delphi.Counter freememory           = 4;

}
