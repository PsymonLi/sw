syntax = "proto3";
package accel_metrics;

import "delphi.proto";
import "penctl.proto";

message AccelMetricsPenctlRootCmd {
    option (venice.penctlParentCmd) = {
        Cmd:     "sonic",
        HelpStr: "Metrics for Storage Offload NIC"
    };
}

message AccelPfInfo {
    option (venice.penctlCmd) = {
        Cmd:     "device_info",
        HelpStr: "Device information:\\n"
                 " Key index - logical interface ID\\n"
                 "\\n\\nValue Description:\\n\\n"
                 "HwLifId         : hardware logical interface ID\\n"
                 "NumSeqQueues    : number of sequencer queues available\\n"
                 "CryptoKeyIdxBase: crypto key base index\\n"
                 "NumCryptoKeysMax: maximum number of crypto keys allowed\\n"
                 "IntrBase        : CPU interrupt base\\n"
                 "IntrCount       : CPU interrupt vectors available",
        RootCmd: "sonic"
    };
    delphi.ObjectMeta   Meta                 = 1;
    string              Key                  = 2;
    uint64              HwLifId              = 3;
    uint32              NumSeqQueues         = 4;
    uint32              CryptoKeyIdxBase     = 5;
    uint32              NumCryptoKeysMax     = 6;
    uint32              IntrBase             = 7;
    uint32              IntrCount            = 8;
}
    
message AccelSeqQueueKey {
    string              LifId                = 1;     // Lif id
    string              QId                  = 2;     // Queue id
}

enum AccelSeqQGroup {
    QGroupCpdc                               = 0;
    QGroupCpdcStatus                         = 1;
    QGroupCrypto                             = 2;
    QGroupCryptoStatus                       = 3;
}

message AccelSeqQueueInfoMetrics {
    option (venice.penctlCmd) = {
        Cmd:     "sequencer_info",
        HelpStr: "Sequencer queues information:\\n"
                 " Key indices - LifId: logical interface ID, QId: queue ID\\n"
                 "\\n\\nValue Description:\\n\\n"
                 "QStateAddr: queue state memory address\\n"
                 "QGroup    : queue group\\n"
                 "            0 - compress/decompress\\n"
                 "            1 - compress/decompress status\\n"
                 "            2 - crypto\\n"
                 "            3 - crypto status\\n"
                 "CoreId    : CPU core ID (not available currently)",
        RootCmd: "sonic"
    };
    option (delphi.datapath_metrics) = true;
    AccelSeqQueueKey    Key                  = 1;

    delphi.Counter      QStateAddr           = 2;
    delphi.Counter      QGroup               = 3;
    delphi.Counter      CoreId               = 4;
}

message AccelSeqQueueMetrics {
    option (venice.penctlCmd) = {
        Cmd:     "sequencer_metrics",
        HelpStr: "Metrics for sequencer queues:\\n"
                 " Key indices - LifId: logical interface ID, QId: queue ID\\n"
                 "\\n\\nValue Description:\\n\\n"
                 "InterruptsRaised : CPU interrupts raised\\n"
                 "NextDBsRung      : chaining doorbells rung\\n"
                 "SeqDescsProcessed: sequencer descriptors processed\\n"
                 "SeqDescsAborted  : sequencer descriptors aborted (due to reset)\\n"
                 "StatusPdmaXfers  : status descriptors copied\\n"
                 "HwDescXfers      : descriptors transferred to hardware\\n"
                 "HwBatchErrors    : hardware batch (length) errors\\n"
                 "HwOpErrors       : hardware operation errors\\n"
                 "AolUpdateReqs    : AOL list updates requested\\n"
                 "SglUpdateReqs    : scatter/gather list updates requested\\n"
                 "SglPdmaXfers     : payload DMA transfers executed\\n"
                 "SglPdmaErrors    : payload DMA errors encountered\\n"
                 "SglPadOnlyXfers  : pad-data-only DMA transfers executed\\n"
                 "SglPadOnlyErrors : pad-data-only DMA errors encountered\\n"
                 "AltDescsTaken    : alternate (bypass-onfail) descriptors executed\\n"
                 "AltBufsTaken     : alternate buffers taken\\n"
                 "LenUpdateReqs    : length updates requested\\n"
                 "CpHeaderUpdates  : compression header updates requested\\n"
                 "SeqHwBytes       : bytes processed",
        RootCmd: "sonic"
    };
    option (delphi.datapath_metrics) = true;
    AccelSeqQueueKey    Key                  = 1;

    delphi.Counter InterruptsRaised          = 2;
    delphi.Counter NextDBsRung               = 3;
    delphi.Counter SeqDescsProcessed         = 4;
    delphi.Counter SeqDescsAborted           = 5;
    delphi.Counter StatusPdmaXfers           = 6;
    delphi.Counter HwDescXfers               = 7;
    delphi.Counter HwBatchErrors             = 8;
    delphi.Counter HwOpErrors                = 9;
    delphi.Counter AolUpdateReqs             = 10;
    delphi.Counter SglUpdateReqs             = 11;
    delphi.Counter SglPdmaXfers              = 12;
    delphi.Counter SglPdmaErrors             = 13;
    delphi.Counter SglPadOnlyXfers           = 14;
    delphi.Counter SglPadOnlyErrors          = 15;
    delphi.Counter AltDescsTaken             = 16;
    delphi.Counter AltBufsTaken              = 17;
    delphi.Counter LenUpdateReqs             = 18;
    delphi.Counter CpHeaderUpdates           = 19;
    delphi.Counter SeqHwBytes                = 20;
}

message AccelHwRingKey {
    string              RId                  = 1;     // Ring id
    string              SubRId               = 2;     // Sub-ring id
}

message AccelHwRingMetrics {
    option (venice.penctlCmd) = {
        Cmd:     "hw_ring",
        HelpStr: "Metrics for hardware rings\\n"
                 " Key indices - RId: ring ID, SubRId: sub-ring ID\\n"
                 "\\n\\nRing ID:\\n\\n"
                 "  cp     : compression\\n"
                 "  cp_hot : compression (priority)\\n"
                 "  dc     : decompression\\n"
                 "  dc_hot : decompression (priority)\\n"
                 "  xts_enc: XTS encryption\\n"
                 "  xts_dec: XTS decryption\\n"
                 "  gcm_enc: GCM encryption\\n"
                 "  gcm_dec: GCM decryption\\n"
                 "\\n\\nValue Description:\\n\\n"
                 "PIndex     : ring producer index\\n"
                 "CIndex     : ring consumer index\\n"
                 "InputBytes : total input bytes (not available for cp_hot, dc_hot, xts_enc/dec, gcm_enc/dec)\\n"
                 "OutputBytes: total output bytes (not available for cp_hot, dc_hot, xts_enc/dec, gcm_enc/dec)\\n"
                 "SoftResets : number of soft resets executed",
        RootCmd: "sonic"
    };
    option (delphi.datapath_metrics) = true;
    AccelHwRingKey      Key                  = 1;

    delphi.Counter      PIndex               = 2;
    delphi.Counter      CIndex               = 3;
    delphi.Counter      InputBytes           = 4;
    delphi.Counter      OutputBytes          = 5;
    delphi.Counter      SoftResets           = 6;
}

