syntax = "proto3";
package accel_metrics;

import "delphi.proto";

message AccelPfInfo {
    delphi.ObjectMeta   Meta                 = 1;
    string              Key                  = 2;
    uint64              HwLifId              = 3;
    uint32              NumSeqQueues         = 4;
    uint32              CryptoKeyIdxBase     = 5;
    uint32              NumCryptoKeysMax     = 6;
    uint32              IntrBase             = 7;
    uint32              IntrCount            = 8;
}
    
message AccelSeqQueueKey {
    string              LifId                = 1;     // Lif id
    string              QId                  = 2;     // Queue id
}

enum AccelSeqQGroup {
    QGroupCpdc                               = 0;     // CP/DC sequencer submission queue group
    QGroupCpdcStatus                         = 1;     // CP/DC sequencer status queue group
    QGroupCrypto                             = 2;     // Crypto sequencer submission queue group
    QGroupCryptoStatus                       = 3;     // Crypto sequencer status queue group
}

message AccelSeqQueueInfo {
    delphi.ObjectMeta   Meta                 = 1;
    AccelSeqQueueKey    Key                  = 2;
    uint64              QStateAddr           = 3;
    AccelSeqQGroup      QGroup               = 4;
    uint32              CoreId               = 5;
}

message AccelSeqQueueMetrics {
    option (delphi.datapath_metrics) = true;
    AccelSeqQueueKey    Key                  = 1;

    delphi.Counter InterruptsRaised          = 2;     // Interrupts raised
    delphi.Counter NextDBsRung               = 3;     // Next doorbells rung
    delphi.Counter SeqDescsProcessed         = 4;     // SeqSQ descriptors processed
    delphi.Counter SeqDescsAborted           = 5;     // SeqSQ descriptors aborted
    delphi.Counter StatusPdmaXfers           = 6;     // Status PDMA transfers
    delphi.Counter HwDescXfers               = 7;     // HW descriptor transfers
    delphi.Counter HwBatchErrors             = 8;     // HW batch transfer errors
    delphi.Counter HwOpErrors                = 9;     // HW operation errors
    delphi.Counter AolPadReqs                = 10;    // AOL padding requests processed
    delphi.Counter SglPadReqs                = 11;    // SGL padding requests processed
    delphi.Counter SglPdmaXfers              = 12;    // SGL PDMA transfers taken
    delphi.Counter SglPdmaErrors             = 13;    // SGL PDMA errors
    delphi.Counter SglPadOnlyXfers           = 14;    // SGL PDMA pad-only transfers taken
    delphi.Counter SglPadOnlyErrors          = 15;    // SGL PDMA pad-only errors
    delphi.Counter AltDescsTaken             = 16;    // Times an alternate descriptor were used
    delphi.Counter AltBufsTaken              = 17;    // Times an alternate source buffer were used
    delphi.Counter LenUpdateReqs             = 18;    // CP/DC length updates after decrypt
    delphi.Counter CpHeaderUpdates           = 19;    // CP header updates requested
    delphi.Counter XferBytes                 = 20;    // Bytes transfered
}

message AccelHwRingKey {
    string              RId                  = 1;     // Ring id
    string              SubRId               = 2;     // Sub-ring id
}

message AccelHwRingInfo {
    delphi.ObjectMeta   Meta                 = 1;
    AccelHwRingKey      Key                  = 2;
    uint32              PIndex               = 3;     // Producer index
    uint32              CIndex               = 4;     // Consumer index
}

message AccelHwRingMetrics {
    AccelHwRingKey      Key                  = 1;
    delphi.Counter      InputBytes           = 2;     // Total input bytes (not available on some rings)
    delphi.Counter      OutputBytes          = 3;     // Total output bytes (not available on some rings)
    delphi.Counter      SoftResets           = 4;     // # soft resets executed
}

