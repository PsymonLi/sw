syntax = "proto3";
package accel_metrics;

import "delphi.proto";
import "penctl.proto";
import "metrics_annotations.proto";

message AccelMetricsPenctlRootCmd {
    option (venice.penctlParentCmd) = {
        Cmd:     "sonic",
        HelpStr: "Metrics for Storage Offload NIC"
    };
}

message AccelPfInfo {
    option (venice.penctlCmd) = {
        Cmd:     "device_info",
        HelpStr: "Device information:\\n"
                 " Key index - logical interface ID\\n"
                 "\\n\\nValue Description:\\n\\n",
        RootCmd: "sonic"
    };
    option (venice.metricInfo) = {
        DisplayName: "Device information",
        Description: "Key index - logical interface ID"
    };
    delphi.ObjectMeta   Meta                 = 1;
    string              Key                  = 2;

    uint64              HwLifId              = 3 [(venice.metricsField) = {DisplayName: "Hw Lif Id" Description:"hardware logical interface ID", Units: ID}];
    uint32              NumSeqQueues         = 4 [(venice.metricsField) = {DisplayName: "Num Seq Queues" Description:"number of sequencer queues available" }];
    uint32              CryptoKeyIdxBase     = 5 [(venice.metricsField) = {DisplayName: "Crypto Key Idx Base" Description:"crypto key base index" }] ;
    uint32              NumCryptoKeysMax     = 6 [(venice.metricsField) = {DisplayName: "Num Crypto Keys Max" Description:"maximum number of crypto keys allowed" }];
    uint32              IntrBase             = 7 [(venice.metricsField) = {DisplayName: "Intr Base" Description:"CPU interrupt base" }];
    uint32              IntrCount            = 8 [(venice.metricsField) = {DisplayName: "Intr Count" Description:"CPU interrupt vectors available" }];
}
    
message AccelSeqQueueKey {
    string              LifId                = 1;     // Lif id
    string              QId                  = 2;     // Queue id
}

enum AccelSeqQGroup {
    QGroupCpdc                               = 0;
    QGroupCpdcStatus                         = 1;
    QGroupCrypto                             = 2;
    QGroupCryptoStatus                       = 3;
}

message AccelSeqQueueInfoMetrics {
    option (venice.penctlCmd) = {
        Cmd:     "sequencer_info",
        HelpStr: "Sequencer queues information:\\n"
                 " Key indices - LifId: logical interface ID, QId: queue ID\\n"
                 "\\n\\nValue Description:\\n\\n",
        RootCmd: "sonic"
    };
    option (venice.metricInfo) = {
        DisplayName: "Sequencer queues information",
        Description: "Key indices are - LifID and QId"
    };
    option (delphi.datapath_metrics) = true;
    AccelSeqQueueKey    Key                  = 1;

    delphi.Counter      QStateAddr           = 2 [(venice.metricsField) = {DisplayName: "Q State Add" Description:"queue state memory address"}];
    delphi.Counter      QGroup               = 3 [(venice.metricsField) = {DisplayName: "Q Group" Description:"queue group\\n"
                                                                                                   "           : 0 - compress/decompress\\n"
                                                                                                   "           : 1 - compress/decompress status\\n"
                                                                                                   "           : 2 - crypto\\n"
                                                                                                   "           : 3 - crypto status\\n"}];
    delphi.Counter      CoreId               = 4 [(venice.metricsField) = {DisplayName: "Core Id" Description:"CPU core ID (not available currently"}];
}

message AccelSeqQueueMetrics {
    option (venice.penctlCmd) = {
        Cmd:     "sequencer_metrics",
        HelpStr: "Metrics for sequencer queues:\\n"
                 " Key indices - LifId: logical interface ID, QId: queue ID\\n"
                 "\\n\\nValue Description:\\n\\n",
        RootCmd: "sonic"
    };
    option (delphi.datapath_metrics) = true;
    option (venice.metricInfo) = {
        DisplayName: "Metrics for sequencer queues",
        Description: "Key indices are - LifID and QId"
    };
    AccelSeqQueueKey    Key                  = 1;

    delphi.Counter InterruptsRaised          = 2 [(venice.metricsField) = {DisplayName: "Interrupts Raised" Description:"CPU interrupts raised"}];
    delphi.Counter NextDBsRung               = 3 [(venice.metricsField) = {DisplayName: "Next DBs Rung" Description:"chaining doorbells rung"}];
    delphi.Counter SeqDescsProcessed         = 4 [(venice.metricsField) = {DisplayName: "Seq Descs Processed" Description:"sequencer descriptors processed"}];
    delphi.Counter SeqDescsAborted           = 5 [(venice.metricsField) = {DisplayName: "Seq Descs Aborted" Description:"sequencer descriptors aborted (due to reset)"}];
    delphi.Counter StatusPdmaXfers           = 6 [(venice.metricsField) = {DisplayName: "Status Pdma Xfers" Description:"status descriptors copied"}];
    delphi.Counter HwDescXfers               = 7 [(venice.metricsField) = {DisplayName: "Hw Desc Xfers" Description:"descriptors transferred to hardware"}];
    delphi.Counter HwBatchErrors             = 8 [(venice.metricsField) = {DisplayName: "Hw Batch Errors" Description:"hardware batch (length) errors"}];
    delphi.Counter HwOpErrors                = 9 [(venice.metricsField) = {DisplayName: "Hw Op Errors" Description:"hardware operation errors"}];
    delphi.Counter AolUpdateReqs             = 10 [(venice.metricsField) = {DisplayName: "Aol Update Reqs" Description:"AOL list updates requested"}];
    delphi.Counter SglUpdateReqs             = 11 [(venice.metricsField) = {DisplayName: "Sgl Update Reqs" Description:"scatter/gather list updates requested"}];
    delphi.Counter SglPdmaXfers              = 12 [(venice.metricsField) = {DisplayName: "Sgl Pdma Xfers" Description:"payload DMA transfers executed"}];
    delphi.Counter SglPdmaErrors             = 13 [(venice.metricsField) = {DisplayName: "Sgl Pdma Errors" Description:"payload DMA errors encountered"}];
    delphi.Counter SglPadOnlyXfers           = 14 [(venice.metricsField) = {DisplayName: "Sgl Pad Only Xfers" Description:"pad-data-only DMA transfers executed"}];
    delphi.Counter SglPadOnlyErrors          = 15 [(venice.metricsField) = {DisplayName: "Sgl Pad Only Errors" Description:"pad-data-only DMA errors encountered"}];
    delphi.Counter AltDescsTaken             = 16 [(venice.metricsField) = {DisplayName: "Alt Descs Taken" Description:"alternate (bypass-onfail) descriptors executed"}];
    delphi.Counter AltBufsTaken              = 17 [(venice.metricsField) = {DisplayName: "Alt Bufs Taken" Description:"alternate buffers taken"}];
    delphi.Counter LenUpdateReqs             = 18 [(venice.metricsField) = {DisplayName: "Len Update Reqs" Description:"length updates requested"}];
    delphi.Counter CpHeaderUpdates           = 19 [(venice.metricsField) = {DisplayName: "Cp Header Updates" Description:"compression header updates requested"}];
    delphi.Counter SeqHwBytes                = 20 [(venice.metricsField) = {DisplayName: "Seq Hw Bytes" Description:"bytes processed"}];
}

message AccelHwRingKey {
    string              RId                  = 1;     // Ring id
    string              SubRId               = 2;     // Sub-ring id
}

message AccelHwRingMetrics {
    option (venice.penctlCmd) = {
        Cmd:     "hw_ring",
        HelpStr: "Metrics for hardware rings\\n"
                 " Key indices - RId: ring ID, SubRId: sub-ring ID\\n"
                 "\\n\\nRing ID:\\n\\n"
                 "  cp     : compression\\n"
                 "  cp_hot : compression (priority)\\n"
                 "  dc     : decompression\\n"
                 "  dc_hot : decompression (priority)\\n"
                 "  xts_enc: XTS encryption\\n"
                 "  xts_dec: XTS decryption\\n"
                 "  gcm_enc: GCM encryption\\n"
                 "  gcm_dec: GCM decryption\\n"
                 "\\n\\nValue Description:\\n\\n"
                 "PIndex     : ring producer index\\n"
                 "CIndex     : ring consumer index\\n"
                 "InputBytes : total input bytes (not available for cp_hot, dc_hot, xts_enc/dec, gcm_enc/dec)\\n"
                 "OutputBytes: total output bytes (not available for cp_hot, dc_hot, xts_enc/dec, gcm_enc/dec)\\n"
                 "SoftResets : number of soft resets executed",
        RootCmd: "sonic"
    };
    option (delphi.datapath_metrics) = true;
    option (venice.metricInfo) = {
        DisplayName: "Metrics for hardware rings",
        Description: "Key indices - RId: ring ID, SubRId: sub-ring ID"
    };
    AccelHwRingKey      Key                  = 1;

    delphi.Counter      PIndex               = 2 [(venice.metricsField) = {DisplayName: "P Index" Description:"ring producer index", Units: ID}];
    delphi.Counter      CIndex               = 3 [(venice.metricsField) = {DisplayName: "C Index" Description:"ring consumer index", Units: ID}];
    delphi.Counter      InputBytes           = 4 [(venice.metricsField) = {DisplayName: "Input Bytes" Description:"total input bytes (not available for cp_hot, dc_hot, xts_enc/dec, gcm_enc/dec)", Units: Bytes}];
    delphi.Counter      OutputBytes          = 5 [(venice.metricsField) = {DisplayName: "Output Bytes" Description:"total output bytes (not available for cp_hot, dc_hot, xts_enc/dec, gcm_enc/dec)", Units: Bytes}];
    delphi.Counter      SoftResets           = 6 [(venice.metricsField) = {DisplayName: "Soft Resets" Description:"number of soft resets executed"}];
}

