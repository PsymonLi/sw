
syntax = "proto3";
package nicmgr;

import "delphi.proto";

message QstateAddr {
    uint64 qstate_addr = 1;
}

message LifInfo {
    uint64 hw_lif_id = 1;
    repeated QstateAddr qstate_addr = 2;
}

message Vlans {
    uint32 vlan = 1;
}

message MacAddrs {
    uint64 mac_addr = 1;
}

message MacAddrVlans {
    uint32 vlan = 1;
    uint64 mac_addr = 2;
}

message UplinkInfo {
    option (delphi.persist) = true;
    delphi.ObjectMeta          Meta = 1;
    uint32                     Key = 2; //id
    uint32 id = 3;
    uint32 port = 4;
    bool is_oob = 5;
}

message EthDevSpec {
    // Delphi
    uint64 dev_uuid = 1;

    // Device
    uint32 eth_type = 2;
    string name = 3;
    uint32 oprom = 4;
    uint32 pcie_port = 5;
    uint32 pcie_total_vfs = 6;
    bool host_dev = 7;
    // Network
    uint32 uplink_port_num = 8;
    string qos_group = 9;
    // RES
    uint32 lif_count = 10;
    uint32 rxq_count = 11;
    uint32 txq_count = 12;
    uint32 eq_count = 13;
    uint32 adminq_count = 14;
    uint32 intr_count = 15;
    uint64 mac_addr = 16;
    // RDMA
    bool enable_rdma = 17;
    uint32 pte_count = 18;
    uint32 key_count = 19;
    uint32 ah_count = 20;
    uint32 rdma_sq_count = 21;
    uint32 rdma_rq_count = 22;
    uint32 rdma_cq_count = 23;
    uint32 rdma_eq_count = 24;
    uint32 rdma_aq_count = 25;
    uint32 rdma_pid_count = 26;
    uint32 barmap_size = 27;
}
message EthDevResource {
    uint32                     lif_base = 1;
    uint32                     intr_base = 2;
    uint64                     regs_mem_addr = 3;
    uint64                     port_info_addr = 4;
    uint64                     cmb_mem_addr = 5;
    uint64                     cmb_mem_size = 6;
    uint64                     rom_mem_addr = 7;
    uint64                     rom_mem_size = 8;
}
message EthDeviceInfo {
    option (delphi.persist)         = true;
    delphi.ObjectMeta          Meta = 1;
    string                     Key = 2; //eth interface name
    EthDevResource             eth_dev_res = 3;
    EthDevSpec                 eth_dev_spec = 4;
}

message NcsiVlanFilter {
    option (delphi.update_event) = true;
    delphi.ObjectMeta   Meta = 1;
    uint32              Key = 2; //filter id
    uint32              vlan_id = 3;
    bool                enable = 4;
    uint32              port = 5;
}

message NcsiVlanMode {
    option (delphi.update_event) = true;
    delphi.ObjectMeta   Meta = 1;
    uint32              Key = 2; //filter id
    uint32              vlan_mode = 3;
    bool                enable = 4;
    uint32              port = 5;
}

message NcsiMacFilter {
    option (delphi.update_event) = true;
    delphi.ObjectMeta   Meta = 1;
    uint32              Key = 2; //id
    uint64              mac_addr = 3;
    uint32              addr_type = 4;
    bool                enable = 5;
    uint32              port = 6;
}

message NcsiSetLinkMsg {
    option (delphi.update_event) = true;
    delphi.ObjectMeta   Meta = 1;
    uint32              Key = 2; //filter id
    bool                link_up = 3;
    uint32              port = 4;
}

message NcsiChanRx {
    option (delphi.update_event) = true;
    delphi.ObjectMeta   Meta = 1;
    uint32              Key = 2; //filter id
    bool                enable = 3;
    uint32              port = 4;
}

message NcsiResetChanMsg {
    option (delphi.update_event) = true;
    delphi.ObjectMeta   Meta = 1;
    uint32              Key = 2; //filter id
    bool                reset = 3;
    uint32              port = 4;
}

message NcsiChanTx {
    option (delphi.update_event) = true;
    delphi.ObjectMeta   Meta = 1;
    uint32              Key = 2; //filter id
    bool                enable = 3;
    uint32              port = 4;
}

message NcsiBcastFilter {
    option (delphi.update_event) = true;
    delphi.ObjectMeta   Meta = 1;
    uint32              Key = 2; //filter id
    bool                enable_arp = 3;
    bool                enable_dhcp_client = 4;
    bool                enable_dhcp_server = 5;
    bool                enable_netbios = 6;
    uint32              port = 7;
}

message NcsiMcastFilter {
    option (delphi.update_event) = true;
    delphi.ObjectMeta   Meta = 1;
    uint32              Key = 2; //filter id
    bool                enable_ipv6_neigh_adv = 3;
    bool                enable_ipv6_router_adv = 4;
    bool                enable_dhcpv6_relay = 5;
    bool                enable_dhcpv6_mcast = 6;
    bool                enable_ipv6_mld = 7;
    bool                enable_ipv6_neigh_sol = 8;
    uint32              port = 9;
}

