
syntax = "proto3";

package structs;

// ---------------------------------- .proto ---------------------------------
//
// Key:
// 	l2_segment_handle, mac_address
// Handle field:
//		ep_handle
// Mac field:
// 		mac_address
// IPv4 field:
//		ip_address
// IPv6 field:
//		ip_address
// List field:
//		ip_address, security_group
// Enum field:
// 		ip_af
// bool field:
//		learn_source_config
// Range field:
//   	useg_vlan. The min and max tags are not present today. I just added them as an example.

// EndpointSpec is used to add or update an endpoint
// Key: l2_segment_handle, mac_address
// Handle: ep_handle
message EndpointSpec {
    ObjectMeta                  meta                 = 1;    // common object meta
    fixed64                     l2_segment_handle    = 2;    // L2 segment endpoint is in
    MacAddress                  mac_address          = 3;    // MAC address of endpoint
    fixed64                     interface_handle     = 4;    // interface endpoint is reachable on
    uint32                      useg_vlan            = 5;    // [(gogoproto.min) = 0, (gogoproto.max) = 4095];    // microseg vlan assigned to this EP
    repeated IPAddress          ip_address           = 6;    // IP address(es) of endpoint
    repeated uint32             security_group       = 7;    // security group list(s) endpoint is in
    fixed64                     ep_handle            = 8;    // endpoint's handle
    bool                        learn_source_config  = 9;    // true if learnt through configuration
}

// common meta object that is part of all other top level objects
message ObjectMeta {
  fixed32        tenant_id = 1;     // tenant identifier
}

// mac address structure
message MacAddress {
    uint64       mac = 1;
}

// IP address structure
message IPAddress {
  IPAddressFamily    ip_af = 1;        // IP address family
  oneof v4_or_v6 {
    fixed32          v4_addr = 2;      // IPv4 address
    bytes            v6_addr = 3;      // IPv6 address  (TODO: need better representation here)
  }
}

// IP address families
enum IPAddressFamily {
  IP_AF_NONE     = 0;
  IP_AF_INET     = 1;    // IPv4
  IP_AF_INET6    = 2;    // IPv6
}

