package(default_visibility = ["//visibility:public"])

licenses(["notice"])  # MIT license

cc_library(
    name = "csrlite_gen",
    srcs = glob(["gen/csrlite/*.cc"]),
    deps = [
       "@sdk//:csrlite_gen_includes",
       "//nic/utils/pack_bytes:pack_bytes",
   ],
   alwayslink = 1
)

cc_library(
    name = "linkmgr_capricsr_int",
    srcs = [
        "asic/capri/model/cap_bx/cap_bx_csr.cc",
        "asic/capri/model/cap_bx/cap_bx_csr.h",
        "asic/capri/verif/apis/cap_bx_api.h",
        "asic/capri/model/cap_mx/cap_mx_csr.cc",
        "asic/capri/model/cap_mx/cap_mx_csr.h",
        "asic/capri/verif/apis/cap_mx_api.h",
        "asic/capri/model/utils/cap_csr_base.cc",
        "asic/capri/model/utils/cap_csr_base.h",
        "asic/ip/verif/pcpp/pen_csr_base.cc",
        "asic/ip/verif/pcpp/pen_csr_base.h",
        "asic/capri/model/utils/cpp_int_helper.h",
        "asic/capri/model/utils/cap_blk_reg_model.h",
        "asic/capri/model/utils/LogMsg.cc",
        "asic/capri/model/utils/LogMsg.h",
        "asic/capri/model/utils/common_dpi.h",
        "asic/capri/model/utils/msg_man.h",
        "asic/capri/model/utils/msg_man.cc",
        "asic/capri/model/utils/msg_stream.h",
        "asic/capri/model/utils/msg_stream.cc",
        "asic/capri/model/utils/cap_csr_py_if.cc",
        "asic/capri/model/utils/cap_csr_py_if.h",
        "asic/ip/verif/pcpp/pen_axi4_slave.h",
        "asic/ip/verif/pcpp/HBM.h",
        "asic/ip/verif/pcpp/HOST_MEM.h",
        "asic/ip/verif/pcpp/cpu.cc",
        "asic/ip/verif/pcpp/cpu.h",
        "asic/ip/verif/pcpp/cpu_bus_base.h",
        "asic/ip/verif/pcpp/cpu_bus_stub.h",
        "asic/ip/verif/pcpp/pen_mem.h",
        "asic/ip/verif/pcpp/pknobs.h",
        "asic/ip/verif/pcpp/pknobs.cc",
        "asic/ip/verif/pcpp/pen_mem_base.h",
        "asic/ip/verif/pcpp/pknobs_holder.h",
        "asic/ip/verif/pcpp/pknobs_reader.h",
    ],
    includes = [
        "asic/capri/model/utils",
        "asic/capri/model/cap_mx",
        "asic/capri/model/cap_bx",
        "asic/ip/verif/pcpp",
        "asic/capri/verif/apis",
        "model_sim/include",
    ],
    deps = [
        # "//nic/hal/pd/capri/csr:sknobs_hdrs",
        "//nic:boost",
        "//nic/model_sim/include:modelsim_includes",
        ":libsknobs",
    ],
    linkopts = [
        "-lJudy",
    ],
    copts = [
        "-DEXCLUDE_PER_FIELD_CNTRL",
        "-DCAPRI_HAL",
        "-DCAP_CSR_LARGE_ARRAY_THRESHOLD=1024",
        # Disabling warnings
        "-Wno-unused-function",
        "-Wno-unused-variable",
        "-Wno-sign-compare",
        "-Wno-maybe-uninitialized",
        "-Wno-uninitialized",
        "-Wno-unused-but-set-variable",
    ],
)

cc_library(
    name = "capricsr_int",
    srcs = [
        "asic/capri/model/cap_top/cap_top_csr.cc",
        "asic/capri/model/cap_top/cap_top_csr.h",
        "asic/capri/model/cap_top/cap_top_csr_defines.h",
        "asic/capri/model/utils/cap_csr_base.cc",
        "asic/capri/model/utils/cap_csr_base.h",
        "asic/ip/verif/pcpp/pen_csr_base.cc",
        "asic/ip/verif/pcpp/pen_csr_base.h",
        "asic/capri/model/utils/cpp_int_helper.h",
        "asic/capri/model/utils/cap_blk_reg_model.h",
        "asic/capri/model/cap_prd/cap_pr_csr.cc",
        "asic/capri/model/cap_prd/cap_pr_csr.h",
        "asic/capri/model/cap_ptd/cap_pt_csr.cc",
        "asic/capri/model/cap_ptd/cap_pt_csr.h",
        "asic/capri/model/cap_psp/cap_psp_csr.cc",
        "asic/capri/model/cap_psp/cap_psp_csr.h",
        "asic/capri/model/cap_ppa/cap_ppa_csr.cc",
        "asic/capri/model/cap_ppa/cap_ppa_csr.h",
        "asic/capri/model/cap_prd/cap_prd_csr.cc",
        "asic/capri/model/cap_prd/cap_prd_csr.h",
        "asic/capri/model/cap_ptd/cap_ptd_csr.cc",
        "asic/capri/model/cap_ptd/cap_ptd_csr.h",
        "asic/capri/model/cap_te/cap_te_csr.cc",
        "asic/capri/model/cap_te/cap_te_csr.h",
        "asic/capri/model/cap_mpu/cap_mpu_csr.cc",
        "asic/capri/model/cap_mpu/cap_mpu_csr.h",
        "asic/capri/model/cap_pic/cap_pics_csr.cc",
        "asic/capri/model/cap_pic/cap_pics_csr.h",
        "asic/capri/model/cap_pic/cap_picc_csr.cc",
        "asic/capri/model/cap_pic/cap_picc_csr.h",
        "asic/capri/model/cap_pcie/cap_pxb_csr.cc",
        "asic/capri/model/cap_pcie/cap_pxb_csr.h",
        "asic/capri/model/cap_pcie/cap_pp_csr.cc",
        "asic/capri/model/cap_pcie/cap_pp_csr.h",
        "asic/capri/model/cap_npv/cap_npv_csr.cc",
        "asic/capri/model/cap_npv/cap_npv_csr.h",
        "asic/capri/model/cap_pic/cap_pict_csr.cc",
        "asic/capri/model/cap_pic/cap_pict_csr.h",
        "asic/capri/model/cap_txs/cap_txs_csr.cc",
        "asic/capri/model/cap_txs/cap_txs_csr.h",
        "asic/capri/model/cap_pb/cap_pbc_csr.cc",
        "asic/capri/model/cap_pb/cap_pbc_csr.h",
        "asic/capri/model/cap_pb/cap_pbm_csr.cc",
        "asic/capri/model/cap_pb/cap_pbm_csr.h",
        "asic/capri/model/cap_pb/cap_pbchbmtx_csr.cc",
        "asic/capri/model/cap_pb/cap_pbchbmtx_csr.h",
        "asic/capri/model/cap_pb/cap_pbchbmeth_csr.cc",
        "asic/capri/model/cap_pb/cap_pbchbmeth_csr.h",
        "asic/capri/model/cap_pb/cap_pbchbm_csr.cc",
        "asic/capri/model/cap_pb/cap_pbchbm_csr.h",
        "asic/capri/model/cap_pb/cap_pbc_decoders.h",
        "asic/capri/model/cap_pb/cap_pbc_decoders.cc",
        "asic/capri/model/cap_wa/cap_wa_csr.cc",
        "asic/capri/model/cap_wa/cap_wa_csr.h",
        "asic/capri/model/cap_ms/cap_ms_csr.cc",
        "asic/capri/model/cap_ms/cap_ms_csr.h",
        "asic/capri/model/cap_ms/cap_msr_csr.cc",
        "asic/capri/model/cap_ms/cap_msr_csr.h",
        "asic/capri/model/cap_ms/cap_msh_csr.cc",
        "asic/capri/model/cap_ms/cap_msh_csr.h",
        "asic/capri/model/cap_ms/cap_mss_csr.cc",
        "asic/capri/model/cap_ms/cap_mss_csr.h",
        "asic/capri/model/cap_em/cap_em_csr.cc",
        "asic/capri/model/cap_em/cap_em_csr.h",
        "asic/capri/model/cap_em/cap_emm_csr.cc",
        "asic/capri/model/cap_em/cap_emm_csr.h",
        "asic/capri/model/cap_em/cap_emmc_csr.h",
        "asic/capri/model/cap_em/emmc_SDHOST_Memory_Map.h",
        "asic/capri/model/cap_em/emmc_SDHOST_Memory_Map.cc",
        "asic/capri/model/cap_ap/cap_ap_csr.cc",
        "asic/capri/model/cap_ap/cap_ap_csr.h",
        "asic/capri/model/cap_ap/cap_apb_csr.h",
        "asic/capri/model/cap_ap/cap_apb_csr.cc",
        "asic/capri/model/cap_he/readonly/cap_hens_csr.cc",
        "asic/capri/model/cap_he/readonly/cap_hens_csr.h",
        "asic/capri/model/cap_he/readonly/cap_hese_csr.cc",
        "asic/capri/model/cap_he/readonly/cap_hese_csr.h",
        "asic/capri/model/cap_he/readonly/cap_mpns_csr.cc",
        "asic/capri/model/cap_he/readonly/cap_mpns_csr.h",
        "asic/capri/model/cap_he/readonly/cap_mpse_csr.cc",
        "asic/capri/model/cap_he/readonly/cap_mpse_csr.h",
        "asic/capri/model/cap_pcie/cap_pxp_csr.cc",
        "asic/capri/model/cap_pcie/cap_pxp_csr.h",
        "asic/capri/model/cap_pcie/cap_pxc_csr.cc",
        "asic/capri/model/cap_pcie/cap_pxc_csr.h",
        "asic/capri/model/cap_sema/cap_sema_csr.cc",
        "asic/capri/model/cap_sema/cap_sema_csr.h",
        "asic/capri/model/cap_intr/cap_intr_csr.cc",
        "asic/capri/model/cap_intr/cap_intr_csr.h",
        "asic/capri/model/cap_bx/cap_bx_csr.cc",
        "asic/capri/model/cap_bx/cap_bx_csr.h",
        "asic/capri/model/cap_mx/cap_mx_csr.cc",
        "asic/capri/model/cap_mx/cap_mx_csr.h",
        "asic/capri/model/cap_mc/cap_mc_csr.cc",
        "asic/capri/model/cap_mc/cap_mc_csr.h",
        "asic/capri/model/cap_mc/cap_mch_csr.cc",
        "asic/capri/model/cap_mc/cap_mch_csr.h",
        "asic/capri/model/utils/LogMsg.cc",
        "asic/capri/model/utils/LogMsg.h",
        "asic/capri/model/utils/common_dpi.h",
        "asic/capri/model/utils/msg_man.h",
        "asic/capri/model/utils/msg_man.cc",
        "asic/capri/model/utils/msg_stream.h",
        "asic/capri/model/utils/msg_stream.cc",
        "asic/capri/model/utils/cap_csr_py_if.cc",
        "asic/capri/model/utils/cap_csr_py_if.h",
        "asic/ip/verif/pcpp/pen_axi4_slave.h",
        "asic/ip/verif/pcpp/HBM.h",
        "asic/ip/verif/pcpp/HOST_MEM.h",
        "asic/ip/verif/pcpp/cpu.cc",
        "asic/ip/verif/pcpp/cpu.h",
        "asic/ip/verif/pcpp/cpu_bus_base.h",
        "asic/ip/verif/pcpp/cpu_bus_stub.h",
        "asic/ip/verif/pcpp/pen_mem.h",
        "asic/ip/verif/pcpp/pknobs.h",
        "asic/ip/verif/pcpp/pknobs.cc",
        "asic/ip/verif/pcpp/pen_mem_base.h",
        "asic/ip/verif/pcpp/pknobs_holder.h",
        "asic/ip/verif/pcpp/pknobs_reader.h",
        "asic/capri/verif/apis/gen/cap_pb_api.cc",
	"asic/capri/verif/apis/gen/cap_quiesce_api.cc",
        "asic/capri/verif/apis/cap_txs_api.cc",
        "asic/capri/verif/apis/cap_nx_api.cc",
        "asic/capri/design/common/gen/cap_phv_intr_decoders.cc",
        "asic/capri/design/common/gen/cap_phv_intr_decoders.h",
        "asic/capri/design/common/gen/cap_axi_decoders.h",
        #"asic/capri/design/common/gen/cap_axi_decoders.h",
        "asic/capri/verif/apis/cap_npv_api.cc",
        "asic/capri/verif/apis/cap_dpa_api.cc",
        "asic/capri/verif/apis/cap_intr_api.cc",
        # "asic/capri/verif/apis/cap_pb_api.cc",
        "asic/capri/verif/apis/cap_pics_api.cc",
        "asic/capri/verif/apis/cap_pict_api.cc",
        "asic/capri/verif/apis/cap_ppa_api.cc",
        "asic/capri/verif/apis/cap_prd_api.cc",
        "asic/capri/verif/apis/cap_psp_api.cc",
        "asic/capri/verif/apis/cap_ptd_api.cc",
        "asic/capri/verif/apis/cap_stg_api.cc",
        "asic/capri/verif/apis/cap_wa_api.cc",
        "asic/capri/design/common/gen/cap_lif_qstate_decoders.cc",
        "asic/capri/model/cap_ppa/cap_ppa_decoders.cc",
        "asic/capri/verif/apis/cap_csr_util_api.cc",
        "asic/capri/model/cap_pic/cap_pic_decoders.cc",
        "asic/capri/verif/apis/cap_te_hal_api.cc",
        "asic/capri/verif/apis/cap_mpu_api.cc",
        "asic/ip/verif/pcpp/pknobs_reader.cc",
        "asic/ip/verif/pcpp/dpi_registry.h",
        "asic/capri/model/cap_wa/cap_wa_csr_define.h",
        "asic/capri/model/cap_ppa/cap_ppa_decoders.h",
        "asic/capri/model/cap_pic/cap_pic_decoders.h",
        "asic/capri/model/cap_pic/pic.h",
        "asic/capri/design/common/gen/cap_lif_qstate_decoders.h",
        "asic/capri/design/common/gen/cap_te_pic_tcamif_decoders.h",
        "asic/ip/verif/pcpp/dpi_utils.h",
    ]  + glob(["asic/capri/model/cap_dpa/*csr.cc", "asic/capri/model/cap_dpa/*csr.h"])
       + glob(["asic/capri/verif/apis/*.h"])
       + glob(["asic/capri/model/cap_pb/*port*csr.cc", "asic/capri/model/cap_pb/*port*csr.h"]),
    includes = [
        "asic/capri/model/cap_top",
        "asic/capri/model/utils",
        "asic/capri/model/cap_prd",
        "asic/capri/model/cap_ptd",
        "asic/capri/model/cap_psp",
        "asic/capri/model/cap_ppa",
        "asic/capri/model/cap_prd",
        "asic/capri/model/cap_ptd",
        "asic/capri/model/cap_te",
        "asic/capri/model/cap_mpu",
        "asic/capri/model/cap_pic",
        "asic/capri/model/cap_pcie",
        "asic/capri/model/cap_npv",
        "asic/capri/model/cap_pic",
        "asic/capri/model/cap_txs",
        "asic/capri/model/cap_pb",
        "asic/capri/model/cap_wa",
        "asic/capri/model/cap_ms",
        "asic/capri/model/cap_em",
        "asic/capri/model/cap_mc",
        "asic/capri/model/cap_he",
        "asic/capri/model/cap_dpa",
        "asic/capri/model/cap_sema",
        "asic/capri/model/cap_intr",
        "asic/capri/model/cap_mx",
        "asic/capri/model/cap_ap",
        "asic/capri/model/cap_bx",
        "asic/capri/model/cap_he/readonly",
        "asic/ip/verif/pcpp",
        "asic/capri/design/common/gen",
        "asic/capri/verif/apis",
        "model_sim/include",
    ],
    deps = [
        # "//nic/hal/pd/capri/csr:sknobs_hdrs",
        "//nic/model_sim/include:modelsim_includes",
        "//nic:boost",
        ":libsknobs",
    ],
    linkopts = [
            "-lJudy",
            ],
    #
    # Keep -D options in sync with "capri" target in
    # nic/hal/pd/capri/BUILD
    #
    copts = [
            #
            # Disabling warnings
            #
            "-Wno-unused-function",
            "-Wno-unused-variable",
            "-Wno-sign-compare",
            "-Wno-maybe-uninitialized",
            "-Wno-uninitialized",
            "-Wno-unused-but-set-variable",
            "-fno-asynchronous-unwind-tables",
            #
            # TODO enable after fixing issues with cc_test
            # "-fvisibility=hidden",
            # "-fno-exceptions",
            #
            "-DEXCLUDE_PER_FIELD_CNTRL",
            "-DCAPRI_HAL",
            "-DCAP_CSR_LARGE_ARRAY_THRESHOLD=1024",
            "-DBOOST_EXCEPTION_DISABLE",
            "-DCSR_NO_SHOW_IMPL",
            "-DCSR_NO_CALLBACK",
            "-DDCSR_NO_RESET_VAL",
            "-DCSR_NO_INST_PATH",
            "-DCSR_NO_CTOR_DEF_NAME",
            "-DCSR_NO_BASE_NAME",
            "-DCSR_NO_CSR_TYPE",
            "-DPLOG_ONLY_ERR_MODE",
            ],
    hdrs =  [
            "asic/capri/design/common/gen/cap_pb_port_def.gh",
            ],
)

cc_library(
    name = "asic_libs",
    srcs = select ({
        "//conditions:default": [
            "asic/capri/model/capsim-master/gen/x86_64/lib/libmpuobj.so",
            "asic/capri/model/capsim-master/gen/x86_64/lib/libcapisa.so",
            "asic/capri/model/capsim-master/gen/x86_64/lib/libisa.so",
        ],

        ":aarch64_mode" : [
            "asic/capri/model/capsim-master/gen/aarch64/lib/libmpuobj.so",
            "asic/capri/model/capsim-master/gen/aarch64/lib/libcapisa.so",
            "asic/capri/model/capsim-master/gen/aarch64/lib/libisa.so",
        ],
    })
)

cc_library(
    name = "asic_includes",
    srcs = [],
    hdrs = [
        "asic/capri/model/capsim-master/lib/libcapisa/include/libcapisa.h",
    ] + glob([
        "asic/capri/model/capsim-master/lib/libmpuobj/include/*.h",
    ]),
    includes = [
        "asic/capri/model/capsim-master/lib/libmpuobj/include",
    ],
    deps = [],
)

config_setting(
   name = "gft",
   values = { "define": "p4pipeline=gft" }
)

cc_library(
    name = "iris_p4pd",
    srcs = [
            "gen/iris/src/p4pd.cc",
            "gen/iris/src/p4pd_table_range.cc"],
    hdrs = [
        "gen/iris/include/p4pd.h",
    ],
    deps = [
        "//nic/include:base_includes",
    ],
)

cc_library(
    name = "gft_p4pd",
    srcs = [
            "gen/gft/src/p4pd.cc",
            "gen/gft/src/p4pd_table_range.cc"],
    hdrs = [
        "gen/gft/include/p4pd.h",
    ],
    deps = [
        "//nic/include:base_includes",
    ],
)

cc_library(
    name = "apollo_p4pd",
    srcs = [
            "gen/apollo/src/p4pd.cc",
            "gen/apollo/src/p4pd_table_range.cc"],
    hdrs = [
        "gen/apollo/include/p4pd.h",
    ],
    deps = [
        "//nic/include:base_includes",
    ],
)

cc_library(
    name = "p4pluspd_txdma",
    srcs = ["gen/common_txdma_actions/src/common_txdma_actions_p4pd.cc"],
    hdrs = [
        "gen/common_txdma_actions/include/common_txdma_actions_p4pd.h",
    ],
    deps = [
        "//nic/include:base_includes",
    ],
)

cc_library(
    name = "p4pluspd_rxdma",
    srcs = ["gen/common_rxdma_actions/src/common_rxdma_actions_p4pd.cc"],
    hdrs = [
        "gen/common_rxdma_actions/include/common_rxdma_actions_p4pd.h",
    ],
    deps = [
        "//nic/include:base_includes",
    ],
)

cc_library(
    name = "p4pluspd_storage_seq",
    srcs = ["gen/storage_seq/src/storage_seq_p4pd.cc",
            "gen/storage_seq/src/storage_seq_p4plus_entry_packing.cc"],
    hdrs = [
        "gen/storage_seq/include/storage_seq_p4pd.h",
    ],
    deps = [
        "//nic/include:base_includes",
    ],
)

cc_library(
        name = "gen_common_includes",
        srcs = [],
        hdrs =  [
                "gen/common_txdma_actions/include/common_txdma_actions_p4pd_table.h",
                "gen/common_rxdma_actions/include/common_rxdma_actions_p4pd_table.h",
                "gen/tcp_proxy_rxdma/include/tcp_proxy_rxdma_p4plus_ingress.h",
                "gen/tcp_proxy_txdma/include/tcp_proxy_txdma_p4plus_ingress.h",
                "gen/common_txdma_actions/include/common_txdma_actions_p4pd.h",
                "gen/common_rxdma_actions/include/common_rxdma_actions_p4pd.h",
                #"gen/ipsec_rxdma_actions/include/ipsec_rxdma_actions_p4plus_ingress.h",
                "gen/tls_txdma_pre_crypto_enc/include/tls_txdma_pre_crypto_enc_p4plus_ingress.h",
                "gen/tls_txdma_post_crypto_enc/include/tls_txdma_post_crypto_enc_p4plus_ingress.h",
                "gen/cpu_rxdma/include/cpu_rxdma_p4plus_ingress.h",
                "gen/cpu_txdma/include/cpu_txdma_p4plus_ingress.h",
                "gen/gc_txdma/include/gc_txdma_p4plus_ingress.h",
                "gen/rawr_rxdma/include/rawr_rxdma_p4plus_ingress.h",
                "gen/rawc_txdma/include/rawc_txdma_p4plus_ingress.h",
                "gen/proxyr_txdma/include/proxyr_txdma_p4plus_ingress.h",
                "gen/proxyc_txdma/include/proxyc_txdma_p4plus_ingress.h",
                "gen/esp_ipv4_tunnel_h2n_rxdma/include/esp_ipv4_tunnel_h2n_rxdma_p4plus_ingress.h",
                "gen/esp_v4_tunnel_n2h_rxdma/include/esp_v4_tunnel_n2h_rxdma_p4plus_ingress.h",
                ],
        deps = ["//nic/include:base_includes"],
)

cc_library(
        name = "gen_iris_includes",
        srcs = [],
        hdrs =  [
                "gen/iris/include/p4pd.h",
                "gen/iris/include/p4plus_egress.h",
                "gen/iris/include/p4plus_ingress.h",
                "gen/iris/include/p4pd_table.h",
	        "gen/tcp_proxy_txdma/include/ingress_phv.h",
	        "gen/tcp_proxy_rxdma/include/ingress_phv.h",
		"gen/iris/include/ingress_phv.h",
		"gen/iris/include/egress_phv.h",
                ],
        deps = ["//nic/include:base_includes"],
)

cc_library(
    name = "gen_gft_includes",
    srcs = [],
    hdrs = [
            "gen/gft/include/p4pd.h",
            "gen/gft/include/p4plus_egress.h",
            "gen/gft/include/p4plus_ingress.h",
            "gen/gft/include/p4pd_table.h",
        ],
    deps = ["//nic/include:base_includes"],
)

cc_library(
    name = "hal_svc_gen",
    srcs = glob(["gen/hal/svc/*.cc", "gen/hal/svc/*.hpp"]),
    hdrs = glob(["gen/hal/svc/*.hpp"]),
    deps = [
        "//nic:gen_proto_includes",
        "//nic/hal:hal_src",
        "//nic/include:base_includes",
        "//nic:spdlog",
        "//nic:grpc_includes",
        "//nic/hal/plugins/cfg/gft:gft_includes",
    ],
)

cc_library(
    name = "hal_svc_gen_includes",
    srcs = glob(["gen/hal/svc/*.hpp"]),
    hdrs = glob(["gen/hal/svc/*.hpp"]),
    deps = [
        "//nic:gen_proto_includes",
        "//nic/include:base_includes",
        "//nic:grpc_includes",
    ],
)

cc_library(
    name = "hal_svc_nw_gen",
    srcs = glob(["gen/hal/svc/nw/*.cc", "gen/hal/svc/nw/*.hpp"]),
    hdrs = glob(["gen/hal/svc/nw/*.hpp"]),
    deps = [
        "//nic:gen_proto_includes",
        "//nic/hal:hal_src",
        "//nic/include:base_includes",
        "//nic:spdlog",
        "//nic:grpc_includes",
    ],
)

cc_library(
    name = "hal_svc_gen_nw_includes",
    srcs = glob(["gen/hal/svc/nw/*.hpp"]),
    hdrs = glob(["gen/hal/svc/nw/*.hpp"]),
    deps = [
        "//nic:gen_proto_includes",
        "//nic/include:base_includes",
        "//nic:grpc_includes",
    ],
)

cc_library(
    name = "hal_gen_includes",
    srcs = glob(["gen/hal/include/*.hpp"]),
    hdrs = glob(["gen/hal/include/*.hpp"]),
    deps = [
        "//nic/include:base_includes",
    ],
)

cc_library(
    name = "gen_proto_includes",
    srcs = [
    ] + glob(["gen/proto/hal/*.hpp"]),
    hdrs = glob([
        "gen/proto/hal/*.hpp",
        "gen/proto/hal/*.h",
    ]),
    includes = [
            "gen/proto/hal",
            ],
)

cc_library(
    name = "halproto",
    srcs = select ({
        "//conditions:default" : [
            "gen/x86_64/lib/libhalproto.so",
        ],

        ":aarch64_mode" : [
            "gen/aarch64/lib/libhalproto.so",
        ],
    }),

    linkopts = select ({
        "//conditions:default" : [
            "-Lnic/gen/x86_64/lib/libhalproto.so",
        ],

        ":aarch64_mode" : [
            "-Lnic/gen/aarch64/lib/libhalproto.so",
        ],
    }),
)

cc_library(
    name = "grpc",
    deps = ["//nic/hal/third-party:grpc"],
)

cc_library(
    name = "libprotobuf",
    deps = ["//nic/hal/third-party:libprotobuf"],
)

cc_library(
    name = "grpc_includes",
    deps = ["//nic/hal/third-party:grpc_includes"],
)

cc_library(
    name = "google_includes",
    deps = ["//nic/hal/third-party:google_includes"],
)

cc_library(
    name = "spdlog",
    deps = ["//nic/hal/third-party:spdlog"],
)

cc_library(
    name = "boost",
    deps = ["@third_party//:boost"],
)

cc_library(
    name = "libaapl",
    deps = ["@third_party//:libaapl"],
)

cc_library(
    name = "aapl_includes",
    deps = ["@third_party//:aapl_includes"],
)

cc_library(
    name = "lkl_includes",
    deps = ["//nic/hal/third-party:lkl_includes"],
)

cc_library(
    name = "lkl",
    deps = ["//nic/hal/third-party:lkl"],
)

cc_library(
    name = "openssl",
    deps = ["//nic/hal/third-party:openssl"],
)

cc_library(
    name = "openssl-native",
    deps = ["//nic/hal/third-party:openssl-native"],
)

cc_library(
    name = "snort3",
    deps = ["//nic/hal/third-party:snort3"],
)

cc_library(
    name = "libtirpc",
    deps = ["//nic/hal/third-party:libtirpc"],
)

cc_library(
    name = "libtins",
    deps = ["//nic/hal/third-party:libtins"],
)

cc_library(
    name = "libzmq",
    deps = ["//nic/hal/third-party:libzmq"],
)

cc_library(
    name = "zmq_includes",
    deps = ["//nic/hal/third-party:zmq_includes"],
)

cc_library(
    name = "libsknobs",
    deps = ["//nic/hal/third-party:libsknobs"],
)

config_setting(
    name = "aarch64_mode",
    values = { "cpu": "aarch64-linux" }
)

# Used by dol/test/storage/BUILD
cc_library(
    name = "compression_asic_hdrs",
    hdrs = [
        "asic/capri/design/common/cap_addr_define.h",
        "asic/capri/model/cap_he/readonly/cap_hens_csr_define.h",
        "asic/capri/model/cap_txs/cap_txs_csr_define.h",
    ],
)

exports_files(["tools/ncc/tenjin_wrapper.py",
               "asic/capri/verif/common/csr_gen/pbc.yaml"])
