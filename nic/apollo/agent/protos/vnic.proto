//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for Virtual Network Interface Card (VNIC) object
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";
import "meta/meta.proto";
import "types.proto";

service VnicSvc {
  rpc VnicCreate (VnicRequest) returns (VnicResponse) {}
  rpc VnicGet (VnicGetRequest) returns (VnicGetResponse) {}
  rpc VnicDelete (VnicDeleteRequest) returns (VnicDeleteResponse) {}
}

// VNIC specification
// NOTE: Vnic ids are not scoped under VPC or subnet, they are globally
//       unique across VPCs
message VnicSpec {
  // unique vnic id
  uint32      VnicId                = 1 [(gogoproto.moretags) = "meta:mandatory"];
  // id of the subnet this vnic belongs to
  uint32      SubnetId              = 2 [(gogoproto.moretags) = "meta:mandatory"];
  // id of the VPC this vnic belongs to
  uint32      VPCId                 = 3 [(gogoproto.moretags) = "meta:mandatory"];
  // vnic encap information to be used while sending packets to this vnic
  types.Encap VnicEncap             = 4 [(gogoproto.moretags) = "meta:mandatory"];
  // overlay MAC of this VNIC
  uint64      MACAddress            = 5 [(gogoproto.moretags) = "meta:mandatory"];
  // resource pool to be used to enforce resource limits
  uint32      ResourcePoolId        = 6;
  // enable or disable reverse path checks while sending traffic to this vnic
  // or while receiving traffic from this vnic
  bool        SourceGuardEnable     = 7;
  // fabric encap information to be used for traffic originated from this vnic
  types.Encap FabricEncap           = 8;
  // Tx/egress mirror session id list, if any
  repeated uint32 TxMirrorSessionId = 9;
  // Rx/ingress mirror session id list, if any
  repeated uint32 RxMirrorSessionId = 10;
  // switch vnic is router/bridge/appliance sitting behind the VLAN of this VNIC
  // and can have many MACs in the same VLAN, so SMAC check will be disabled
  bool        SwitchVnic            = 11;
}

// operational status of Vnic, if any
message VnicStatus {
}

// stats of Vnic, if any
message VnicStats {
}

// vnic object
message Vnic {
  meta.TypeMeta TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta  ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  VnicSpec      Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  VnicStatus    Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  VnicStats     Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// vnic create and update request
message VnicRequest {
  repeated VnicSpec Request = 1; // batched request
}

// vnic create and update response
message VnicResponse {
  types.ApiStatus     ApiStatus = 1;
  repeated VnicStatus Response  = 2; // batched response
}

// vnic get request
message VnicGetRequest {
  repeated uint32 VnicId = 1; // batched request
}

// vnic get response
message VnicGetResponse {
  types.ApiStatus ApiStatus = 1;
  repeated Vnic   Response  = 2; // batched response
}

// vnic delete request
message VnicDeleteRequest {
  repeated uint32 VnicId = 1; // batched request
}

// vnic delete response
message VnicDeleteResponse {
  repeated types.ApiStatus ApiStatus = 1; // batched response
}
