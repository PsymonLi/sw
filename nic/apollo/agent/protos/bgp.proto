//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for BGP
//
// NOTE: This is the netagent interface for BGP protocol configurations. This is
// a limited subset of configurations required for current deployments
//
//    This model supports the following BGP configuration level
//    hierarchy:
//
//      BGP
//        |
//        +-> [ global BGP configuration ]
//        +-> neighbor
//          +-> [ neighbor config ]
//          +-> AFI / SAFI [ per-AFI overrides ]";
//
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";
import "meta/meta.proto";
import "types.proto";

// bgp service definition
service BGPSvc {
  rpc BGPCreate (BGPRequest) returns (BGPResponse) {}
  rpc BGPUpdate (BGPRequest) returns (BGPResponse) {}
  rpc BGPDelete (BGPDeleteRequest) returns (BGPDeleteResponse) {}
  rpc BGPGet (BGPGetRequest) returns (BGPGetResponse) {}
  rpc BGPPeerCreate (BGPPeerRequest) returns (BGPPeerResponse) {}
  rpc BGPPeerUpdate (BGPPeerRequest) returns (BGPPeerResponse) {}
  rpc BGPPeerDelete (BGPPeerDeleteRequest) returns (BGPPeerDeleteResponse) {}
  rpc BGPPeerGet (BGPPeerGetRequest) returns (BGPPeerGetResponse) {}
  rpc BGPPeerAfCreate (BGPPeerAfRequest) returns (BGPPeerAfResponse) {}
  rpc BGPPeerAfUpdate (BGPPeerAfRequest) returns (BGPPeerAfResponse) {}
  rpc BGPPeerAfDelete (BGPPeerAfDeleteRequest) returns (BGPPeerAfDeleteResponse) {}
  rpc BGPPeerAfGet (BGPPeerAfGetRequest) returns (BGPPeerAfGetResponse) {}
  rpc BGPNLRIPrefixGet (BGPNLRIPrefixGetRequest) returns (BGPNLRIPrefixGetResponse) {}
}

// BGP address family identifier
enum BGPAfi {
  BGP_AFI_NONE  = 0;
  BGP_AFI_IPV4  = 1;
  BGP_AFI_L2VPN = 25;
}

// BGP sub-address family identitfier
enum BGPSafi {
  BGP_SAFI_NONE         = 0;
  BGP_SAFI_UNICAST      = 1;
  BGP_SAFI_EVPN         = 70;
}

// BGP peer RR client
enum BGPPeerRRClient {
  BGP_PEER_RR_NONE          = 0;
  BGP_PEER_RR_CLIENT        = 1;
}

// BGP peer last_state
enum BGPPeerState {
  BGP_PEER_STATE_NONE        = 0;
  BGP_PEER_STATE_IDLE        = 1;
  BGP_PEER_STATE_CONNECT     = 2;
  BGP_PEER_STATE_ACTIVE      = 3;
  BGP_PEER_STATE_OPENSENT    = 4;
  BGP_PEER_STATE_OPENCONFIRM = 5;
  BGP_PEER_STATE_ESTABLISHED = 6;
}

// BGP configuration
message BGPSpec {
  // unique key/identifier of BGP config
  bytes   Id        = 1 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // the local autonomous system number
  uint32  LocalASN  = 2;
  // router ID for this bgp instance
  fixed32 RouterId  = 3;
  // cluster ID of the local router. router ID will be used as cluster ID
  // if cluster ID is not configured or configured to zero 
  fixed32 ClusterId = 4;
}

// operational status of BGP
message BGPStatus {
}

// BGP object
message BGP {
  BGPSpec   Spec   = 1 [(gogoproto.jsontag) = "spec,omitempty"];
  BGPStatus Status = 2 [(gogoproto.jsontag) = "status,omitempty"];
}

// BGP create and update request
message BGPRequest {
  BGPSpec Request = 1;
}

// BGP create and update response
message BGPResponse {
  types.ApiStatus ApiStatus = 1;
  BGPStatus       Response  = 2;
}

// BGP KeyHandle used in Get/Delete
message BGPKeyHandle {
  bytes Id = 1;
}

// BGP delete request
message BGPDeleteRequest {
  BGPKeyHandle Request = 1;
}

// BGP delete response
message BGPDeleteResponse {
  types.ApiStatus ApiStatus = 1;
}

// BGP get request
message BGPGetRequest {
  BGPKeyHandle Request = 1;
}

// BGP get response
message BGPGetResponse {
  types.ApiStatus ApiStatus = 1;
  BGP             Response  = 2;
}

// BGP peer configurations
message BGPPeerSpec {
  // unique key/identifier of peer
  bytes            Id           = 1 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // peer enable/disable admin state. if peer is not enabled then local router
  // must not initiate connections to the neighbor and must not respond to
  // TCP connections attempts from neighbor
  types.AdminState State        = 2;
  // BGP local IP address. control plane chooses the local IP address of the
  // session if an all 0 IP address is provided
  types.IPAddress  LocalAddr    = 3 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // BGP peer IP address
  types.IPAddress  PeerAddr     = 4 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // remote 4-byte AS number
  uint32           RemoteASN    = 5;
  // send regular community attributes to neighbor
  bool             SendComm     = 6;
  // send extended community attributes to neighbor
  bool             SendExtComm  = 7;
  // peer is a route reflector client
  BGPPeerRRClient  RRClient     = 8;
  // BGP session connect-retry timer in seconds
  uint32           ConnectRetry = 9;
  // BGP session holdtime timer in seconds
  uint32           HoldTime     = 10;
  // BGP session keepalive timer in seconds
  uint32           KeepAlive    = 11;
  // MD5 authentication
  bytes            Password     = 12;
}

// BGP peer status
message BGPPeerStatus {
  // BGP session status
  BGPPeerState Status        = 1;
  // BGP session previous status
  BGPPeerState PrevStatus    = 2;
  // last error received
  bytes        LastErrorRcvd = 3;
  // Last error sent
  bytes        LastErrorSent = 4;
}

// BGP peer object
message BGPPeer {
  BGPPeerSpec   Spec   = 1 [(gogoproto.jsontag) = "spec,omitempty"];
  BGPPeerStatus Status = 2 [(gogoproto.jsontag) = "status,omitempty"];
}

// BGP peer create and update response
message BGPPeerResponse {
  types.ApiStatus ApiStatus = 1;
}

// BGP peer create and update request
message BGPPeerRequest {
  repeated BGPPeerSpec Request = 1;
}

// BGP peer get response
message BGPPeerGetResponse {
  types.ApiStatus  ApiStatus = 1;
  repeated BGPPeer Response  = 2;
}

// BGP peer key parameters
message BGPPeerKey {
  // BGP local IP address
  types.IPAddress LocalAddr = 1;
  // BGP peer IP address
  types.IPAddress PeerAddr  = 2;
}

// BGP peer get and delete key handle
message BGPPeerKeyHandle {
  // unique identifier or key parameters
  oneof id_or_key {
    bytes      Id  = 1;
    BGPPeerKey Key = 2; 
  }
}

// BGP peer delete request
message BGPPeerDeleteRequest {
  repeated BGPPeerKeyHandle Request = 1;
}

// BGP peer delete response
message BGPPeerDeleteResponse {
  types.ApiStatus ApiStatus = 1;
}

// BGP peer get request
message BGPPeerGetRequest {
  repeated BGPPeerKeyHandle Request = 1;
}

// BGP peer AF configurations
message BGPPeerAfSpec {
  // unique key/identifier of peer AF config
  bytes           Id          = 1 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // BGP local IP address
  types.IPAddress LocalAddr   = 2 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // BGP peer IP address
  types.IPAddress PeerAddr    = 3 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // BGP address family
  BGPAfi          Afi         = 4 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // BGP sub-address family
  BGPSafi         Safi        = 5 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // enforce this router to set self as next-hop for advertised routes
  bool            NexthopSelf = 6;
  // originate a default route to this peer
  bool            DefaultOrig = 7;
}

// BGP peer AF status
message BGPPeerAfStatus {
}

// BGP peer AF object
message BGPPeerAf {
  BGPPeerAfSpec   Spec   = 1 [(gogoproto.jsontag) = "spec,omitempty"];
  BGPPeerAfStatus Status = 2 [(gogoproto.jsontag) = "status,omitempty"];
}

// BGP peer AF create and update response
message BGPPeerAfResponse {
  types.ApiStatus ApiStatus = 1;
}

// BGP peer AF create and update request
message BGPPeerAfRequest {
  repeated BGPPeerAfSpec Request = 1;
}

// BGP peer key parameters
message BGPPeerAfKey {
  // BGP local IP address
  types.IPAddress LocalAddr = 1;
  // BGP peer IP address
  types.IPAddress PeerAddr  = 2;
  // BGP address family
  BGPAfi          Afi       = 3;
  // BGP sub-address family
  BGPSafi         Safi      = 4;
}

// BGP peer delete spec
message BGPPeerAfKeyHandle {
  // unique identifier or key parameters
  oneof id_or_key {
    bytes        Id  = 1;
    BGPPeerAfKey Key = 2;
  }
}

// BGP peer af delete request
message BGPPeerAfDeleteRequest {
  repeated BGPPeerAfKeyHandle Request = 1;
}

// BGP peer delete response
message BGPPeerAfDeleteResponse {
  types.ApiStatus ApiStatus = 1;
}

// BGP peer af get request
message BGPPeerAfGetRequest {
  repeated BGPPeerAfKeyHandle Request = 1;
}

// BGP peer AF get response
message BGPPeerAfGetResponse {
  types.ApiStatus     ApiStatus = 1;
  repeated BGPPeerAf  Response  = 2;
}

// NLRI source
enum NLRISrc {
  NLRI_NONE = 0;
  NLRI_PEER = 1; // learned from peer
  NLRI_AFM  = 2; // learned from AFM
  NLRI_SELF = 3; // created by itself
}

// BGP NLRI prefix table
message BGPNLRIPrefixStatus {
  // BGP address family
  BGPAfi  Afi              = 1;
  // BGP sub-address family
  BGPSafi Safi             = 2;
  // prefix in NLRI
  bytes   Prefix           = 3;
  // prefix length
  uint32  PrefixLen        = 4;
  // route source (learned from BGP peer or AFM)
  NLRISrc RouteSource      = 5;
  // route source index
  uint32  RouteSourceIndex = 6;
  // path ID
  uint32  PathID           = 7;
  // chosen as BGP best route or not
  bool    BestRoute        = 8;
  // AS path string
  bytes   ASPathStr        = 9;
  // originator ID
  bytes   PathOrigId       = 10;
  // next-hop address
  bytes   NextHopAddr      = 11;
}

// BGP NLRI prefix key object
message BGPNLRIPrefixKey {
  // BGP address family
  BGPAfi   Afi              = 1;
  // BGP sub-address family
  BGPSafi  Safi             = 2;
  // prefix in NLRI
  bytes    Prefix           = 3;
  // prefix length
  uint32   PrefixLen        = 4;
  // route source (learned from BGP peer or AFM)
  NLRISrc  RouteSource      = 5;
  // route source index
  uint32   RouteSourceIndex = 6;
  // path ID
  uint32   PathID           = 7;
}

//BGP NLRI prefix object
message BGPNLRIPrefix {
  BGPNLRIPrefixStatus Status = 1;
}

// BGP NLRI prefix get response
message BGPNLRIPrefixGetResponse {
  types.ApiStatus        ApiStatus = 1;
  repeated BGPNLRIPrefix Response  = 2;
}

// BGP NLRI key handle
message BGPNLRIPrefixKeyHandle {
  BGPNLRIPrefixKey Key = 1;
}

// BGP NLRI prefix get request
message BGPNLRIPrefixGetRequest {
  repeated BGPNLRIPrefixKeyHandle Request = 1;
}
