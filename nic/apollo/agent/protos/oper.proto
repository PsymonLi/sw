//------------------------------------------------------------------------------
// {C} Copyright 2020 Pensando Systems Inc. All rights reserved
//
// protobuf specification for operational objects
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";
import "meta/meta.proto";
import "types.proto";

service OperSvc {
  // TechSupport helps collecting all the debug information on the
  // Distrubuted Services Card (DSC) platform for troubleshooting. The collected
  // information includes trace files from various components, syslogs, core
  // files, output of various debug commands etc.

  // TechSupportCollect initiates a new techsupport information collection
  // NOTE: This API will fail, if there is already one pending request in
  //       progress
  rpc TechSupportCollect (TechSupportRequest) returns (TechSupportResponse) {}

  // Metrics exposes the metric counters kept by components
  rpc MetricsGet(stream MetricsGetRequest) returns (stream MetricsGetResponse) {}
}

// TechSupportSpec defines the configuration of the techsupport object
message TechSupportSpec {
  // SkipCores can be set to true to exclude core files from techsupport
  // output
  bool SkipCores = 1;
}

// TechSupportStatus captures the current status of the techsupport job
message TechSupportStatus {
  // full path of the gzipped techsupport file created, if successful
  string FilePath  = 1;
}

// TechSupportStats contains stats related to techsupport
message TechSupportStats {
}

// Techsupport object
message TechSupport {
  meta.TypeMeta     TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta      ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  TechSupportSpec   Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  TechSupportStatus Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  TechSupportStats  Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// TechSupport create request
message TechSupportRequest {
  // config specification
  TechSupportSpec Request  = 1;
}

// TechSupport create response
message TechSupportResponse {
  // success or failure status
  types.ApiStatus   ApiStatus = 1;
  TechSupportStatus Response  = 2;
}

message MetricsGetRequest {
  // Name identifies the name of the table (e.g., Port, MgmtPort, Lif etc.)
  string Name = 1;
  // Key identifies particular instance of the object (e.g. uuid)
  bytes  Key  = 2;
}

// CounterStatus defines each individual counter that consists of
// name and value
message CounterStatus {
  // (user visible) name of the metric
  string Name  = 1;
  // value of the counter
  uint64 Value = 2;
}

// CountersStatus defines generic metrics object that can be used for any set
// of counters per object (e.g., port counters, lif/pf counters, vpp counters,
// s/w counters etc.)
message CountersStatus {
  // Id is uuid or unique key of the object
  bytes                  Key      = 1;
  // collection of metrics
  repeated CounterStatus Counters = 2;
}

message MetricsGetResponse {
  types.ApiStatus ApiStatus = 1;
  CountersStatus  Response  = 2;
}

// flow log type indicates whether log is generated when flow is
// created or closed
enum FlowLogType {
  FLOW_LOG_TYPE_NONE   = 0;
  // flow log raised at the time of flow/session creation
  FLOW_LOG_TYPE_OPEN   = 1;
  // flow log raised at the time of flow/session deletion
  FLOW_LOG_TYPE_CLOSE  = 2;
  // flow log raised for long lived flows while flow is active
  FLOW_LOG_TYPE_ACTIVE = 3;
}

// security policy type due to which the flow action was chosen
enum SecurityPolicyType {
  SECURITY_POLICY_TYPE_NONE = 0;
  // flow action is the result of a security group rule
  SECURITY_POLICY_TYPE_SG   = 1;
  // flow action is the result of a stateless NACL rule (subnet/vpc level)
  SECURITY_POLICY_TYPE_NACL = 2;
}

// protobuf format for flow logs (this is the format consumers will see flow
// logs in). VPP itself will just a binary dump and a decoder (invoked by VPP)
// will xform the contents into this format.
message FlowLog {
  // timestamp indicating when the flow is created/closed
  uint64                   Timestamp    = 1;
  // flow open log or flow close log
  FlowLogType              LogType      = 2;
  // source interface of first packet (uplink of VF/PF id)
  uint32                   SrcInterface = 3;
  // flow key
  types.FlowKey            Key          = 4;
  // flow action taken
  types.SecurityRuleAction FlowAction   = 5;
  // source NAT action, if any
  types.NatAction          SrcNATAction = 6;
  // destination NAT action, if any
  types.NatAction          DstNATAction = 7;
  // source NAT port, if any
  uint32                   SrcNATPort   = 8;
  // destination NAT port, if any
  uint32                   DstNATPort   = 9;
  // policy type that resulted in the flow action
  SecurityPolicyType       PolicyType   = 10;
}
