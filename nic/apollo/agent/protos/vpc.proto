//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for Virtual Private Cloud (VPC) object
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";
import "meta/meta.proto";
import "types.proto";

service VPCSvc {
  rpc VPCCreate (VPCRequest) returns (VPCResponse) {}
  rpc VPCUpdate (VPCRequest) returns (VPCResponse) {}
  rpc VPCGet (VPCGetRequest) returns (VPCGetResponse) {}
  rpc VPCDelete (VPCDeleteRequest) returns (VPCDeleteResponse) {}
  rpc VPCPeerCreate (VPCPeerRequest) returns (VPCPeerResponse) {}
  rpc VPCPeerGet (VPCPeerGetRequest) returns (VPCPeerGetResponse) {}
  rpc VPCPeerDelete (VPCPeerDeleteRequest) returns (VPCPeerDeleteResponse) {}
}

// type of the virtual private cloud
enum VPCType {
  VPC_TYPE_NONE     = 0;
  VPC_TYPE_UNDERLAY = 1;
  VPC_TYPE_TENANT   = 2;
}

// VPCSpec captures VPC configuration
message VPCSpec {
  // unique key/identifier of VPC
  bytes          Id               = 1 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // type of the VPC
  VPCType        Type             = 2 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // identifier of the IPv4 route table to be used and this route table is
  // inherited by the subnets under this VPC, if they are created with no route
  // table explicitly
  bytes          V4RouteTableId   = 3;
  // identifier of the IPv6 route table to be used, if any and this route table
  // is inherited by the subnets under this VPC, if they are created with no
  // route table explicitly
  bytes          V6RouteTableId   = 4;
  // Virtual Router (VR) MAC address, any packets originated or routed in this
  // VPC carry this MAC as source MAC
  uint64         VirtualRouterMac = 5;
  // encapped traffic coming with the specified encap from fabric side will be
  // mapped to this VPC
  types.Encap    FabricEncap      = 6 [(gogoproto.moretags) = "meta:immutable"];
  // IPv6 prefix/IP to be used to NAT the IPv4 traffic destined to reach a
  // service in IPv6 only network/service (all VNICs in this VPC will use this
  // prefix to get their IPv4 traffic (S)NAT-ed in the outbound direction)
  types.IPv6Prefix Nat46Prefix    = 7;
  // ToS field is 1 byte value that is populated in the DSCP field of IPv4 outer
  // header or in the Traffic Class field of IPv6 outer header, this value will
  // be written as-is (i.e., not interpreted) during encap time by the dataplane
  // when vpc's vnid is put in the VxLAN encapped packet
  // NOTE: subnets under this VPC don't inherit this ToS value, subnets need to
  //       be explicitly configured with same ToS value as that of VPC or
  //       potentially different ToS value of their own
  uint32          ToS             = 8;
}

// operational status of a VPC, if any
message VPCStatus {
    // vpc hw id
    uint32 HwId = 1;
}

// stats for a VPC, if any
message VPCStats {
}

// Virtual Private Cloud object
message VPC {
  meta.TypeMeta TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta  ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  VPCSpec       Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  VPCStatus     Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  VPCStats      Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// VPC create and update request
message VPCRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  // batched requests
  repeated VPCSpec Request  = 2;
}

// VPC create and update response
message VPCResponse {
  types.ApiStatus    ApiStatus = 1;
  repeated VPCStatus Response  = 2; // batched response
}

// VPC get request
message VPCGetRequest {
  // list of keys of interest
  repeated bytes Id = 1;
}

// VPC get response
message VPCGetResponse {
  types.ApiStatus ApiStatus = 1; // API status code
  repeated VPC    Response  = 2;
}

// VPC delete request
message VPCDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  repeated bytes  Id        = 2;
}

// VPC delete response
message VPCDeleteResponse {
  repeated types.ApiStatus ApiStatus = 1; // API status code
}

// VPCPeerSpec captures configuration for a VPC peering relation
message VPCPeerSpec {
  // unique id/key idenitifying this VPC peering relation
  bytes  Id   = 1;
  // unique key/identifier of VPC1
  bytes  Vpc1 = 2 [(gogoproto.moretags) = "meta:mandatory"];
  // unique key/identifier of VPC2
  bytes  Vpc2 = 3 [(gogoproto.moretags) = "meta:mandatory"];
}

// operational status of a VPC peering, if any
message VPCPeerStatus {
}

// stats for a VPC peering, if any
message VPCPeerStats {
}

// Virtual Private Cloud Peer (aka. pairing) object
message VPCPeer {
  meta.TypeMeta TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta  ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  VPCPeerSpec   Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  VPCPeerStatus Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  VPCPeerStats  Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// VPC peer create and update request
message VPCPeerRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt      BatchCtxt = 1;
  // batched request
  repeated VPCPeerSpec Request   = 2;
}

// VPC peer create and update response
message VPCPeerResponse {
  types.ApiStatus        ApiStatus = 1;
  // batched response
  repeated VPCPeerStatus Response  = 2;
}

// VPC peer get request
message VPCPeerGetRequest {
  repeated bytes Id = 1;
}

// VPC peer get response
message VPCPeerGetResponse {
  // API status code
  types.ApiStatus  ApiStatus = 1;
  repeated VPCPeer Response  = 2;
}

// VPC peer delete request
message VPCPeerDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  repeated bytes  Id        = 2;
}

// VPC peer delete response
message VPCPeerDeleteResponse {
  // API status code
  repeated types.ApiStatus ApiStatus = 1;
}
