//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for DHCP features
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";
import "meta/meta.proto";
import "types.proto";

service DHCPSvc {
  rpc DHCPRelayCreate (DHCPRelayRequest) returns (DHCPRelayResponse) {}
  rpc DHCPRelayUpdate (DHCPRelayRequest) returns (DHCPRelayResponse) {}
  rpc DHCPRelayGet (DHCPRelayGetRequest) returns (DHCPRelayGetResponse) {}
  rpc DHCPRelayDelete (DHCPRelayDeleteRequest) returns (DHCPRelayDeleteResponse) {}
  rpc DHCPPolicyCreate (DHCPPolicyRequest) returns (DHCPPolicyResponse) {}
  rpc DHCPPolicyUpdate (DHCPPolicyRequest) returns (DHCPPolicyResponse) {}
  rpc DHCPPolicyGet (DHCPPolicyGetRequest) returns (DHCPPolicyGetResponse) {}
  rpc DHCPPolicyDelete (DHCPPolicyDeleteRequest) returns (DHCPPolicyDeleteResponse) {}
}

// DHCPRelaySpec captures DHCP relay configuration
message DHCPRelaySpec {
  // unique key/identifier of DHCP relay policy
  bytes           Id       = 1 [(gogoproto.moretags) = "meta:mandatory"];
  // VPC where DHCP server is present in
  bytes           VPCId    = 2 [(gogoproto.moretags) = "meta:mandatory"];
  // IP address of the DHCP server, agent is relaying requests to
  types.IPAddress ServerIP = 3 [(gogoproto.moretags) = "meta:mandatory"];
  // IP address of the relay agent, if no IP address is specified local TEP IP
  // (MyTEP IP from device object configuration) will be used
  types.IPAddress AgentIP  = 4;
}

// operational status of a DHCP relay policy, if any
message DHCPRelayStatus {
}

// stats for a DHCP relay policy, if any
message DHCPRelayStats {
}

// DHCP relay object
message DHCPRelay {
  meta.TypeMeta   TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta    ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  DHCPRelaySpec   Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  DHCPRelayStatus Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  DHCPRelayStats  Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// DHCP relay create and update request
message DHCPRelayRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt        BatchCtxt = 1;
  // batched requests
  repeated DHCPRelaySpec Request   = 2;
}

// DHCP relay create and update response
message DHCPRelayResponse {
  types.ApiStatus          ApiStatus = 1;
  // batched response
  repeated DHCPRelayStatus Response  = 2;
}

// DHCP relay get request
message DHCPRelayGetRequest {
  // id of the DHCP relay policy being queried
  repeated bytes Id = 1;
}

// DHCP relay get response
message DHCPRelayGetResponse {
  // API status code
  types.ApiStatus    ApiStatus = 1;
  repeated DHCPRelay Response  = 2;
}

// DHCP relay delete request
message DHCPRelayDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  // id of the DHCP relay policy being deleted
  repeated bytes  Id        = 2;
}

// DHCP relay delete response
message DHCPRelayDeleteResponse {
  // API status code
  repeated types.ApiStatus ApiStatus = 1;
}

// DHCPPolicySpec captures the DHCP suppression configuration per subnet
message DHCPPolicySpec {
  // unique key/identifier of the DHCP policy
  bytes           Id           = 1 [(gogoproto.moretags) = "meta:mandatory"];
  // IP address of the (local) DHCP server, this IP address will be
  // used to respond to the DHCP requests from the workloads and is used as
  // the DHCP server identifier
  types.IPAddress ServerIP     = 2 [(gogoproto.moretags) = "meta:mandatory"];
  // MTU to be supplied by the DHCP server to its clients, if non-zero
  uint32          MTU          = 3;
  // IP address of the subnet's gateway sent in DHCP offer
  types.IPAddress GatewayIP    = 4;
  // IP address of the DNS server sent in DHCP offer
  types.IPAddress DNSServerIP  = 5;
  // IP address of the NTP server sent in DHCP offer
  types.IPAddress NTPServerIP  = 6;
  // client's Fully Qualified Domain Name (FQDN)
  string          DomainName   = 7;
  // DHCP lease timoeout in seconds
  uint32          LeaseTimeout = 8 [(gogoproto.moretags) = "default=3600"];
}

// operational status of a DHCP policy, if any
message DHCPPolicyStatus {
}

// stats for a DHCP policy, if any
message DHCPPolicyStats {
}

// DHCP policy object
message DHCPPolicy {
  meta.TypeMeta    TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta     ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  DHCPPolicySpec   Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  DHCPPolicyStatus Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  DHCPPolicyStats  Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// DHCP policy create and update request
message DHCPPolicyRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt         BatchCtxt = 1;
  // batched requests
  repeated DHCPPolicySpec Request   = 2;
}

// DHCP policy create and update response
message DHCPPolicyResponse {
  types.ApiStatus           ApiStatus = 1;
  // batched response
  repeated DHCPPolicyStatus Response  = 2;
}

// DHCP policy get request
message DHCPPolicyGetRequest {
  // id of the DHCP policy policy being queried
  repeated bytes Id = 1;
}

// DHCP policy get response
message DHCPPolicyGetResponse {
  // API status code
  types.ApiStatus     ApiStatus = 1;
  repeated DHCPPolicy Response  = 2;
}

// DHCP policy delete request
message DHCPPolicyDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  // id of the DHCP policy policy being deleted
  repeated bytes  Id        = 2;
}

// DHCP policy delete response
message DHCPPolicyDeleteResponse {
  // API status code
  repeated types.ApiStatus ApiStatus = 1;
}
