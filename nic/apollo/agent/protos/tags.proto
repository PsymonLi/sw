//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for (service) tag mapping
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";
import "meta/meta.proto";
import "types.proto";

service TagSvc {
  rpc TagCreate (TagRequest) returns (TagResponse) {}
  rpc TagUpdate (TagRequest) returns (TagResponse) {}
  rpc TagGet (TagGetRequest) returns (TagGetResponse) {}
  rpc TagDelete (TagDeleteRequest) returns (TagDeleteResponse) {}
}

// tag policy rule
message TagRuleSpec {
  // list of prefixes that map to this tag
  repeated types.IPPrefix Prefix   = 1;
  // tag value for above set of prefixes
  uint32                  Tag      = 2 [(gogoproto.moretags) = "meta:range:0-16384"];
  uint32                  Priority = 3;
}

// (service) tag policy specification
// NOTE: any time a tag specification changes, client is expected to send
//       full new tag specification (i.e., no incremental add/del/upd of
//       prefixes in the tag policy is supported)
message TagSpec {
  // unique tag policy id
  bytes                Id = 1 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // IP address family
  types.IPAF           Af = 2 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // tag policy rules
  repeated TagRuleSpec Rules = 3;
}

// operational status of the tag, if any
message TagStatus {
}

// stats of the tag, if any
message TagStats {
}

// tag policy object
message Tag {
  meta.TypeMeta TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta  ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  TagSpec       Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  TagStatus     Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  TagStats      Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// tag table create and update request
message TagRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  // batched request
  repeated TagSpec Request  = 2;
}

// tag table create and update response
message TagResponse {
  types.ApiStatus    ApiStatus = 1;
  repeated TagStatus Response  = 2;
}

// tag table get request
message TagGetRequest {
  // batched request
  repeated bytes Id = 1;
}

// tag table get response
message TagGetResponse {
  types.ApiStatus ApiStatus = 1;
  repeated Tag    Response  = 2;
}

// tag table delete request
message TagDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  // batched request
  repeated bytes  Id        = 2;
}

// tag table delete response
message TagDeleteResponse {
  repeated types.ApiStatus ApiStatus = 1;
}
