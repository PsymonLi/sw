//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for interface related objects
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "meta/meta.proto";
import "types.proto";

service IfSvc {
  rpc InterfaceCreate (InterfaceRequest) returns (InterfaceResponse) {}
  rpc InterfaceUpdate (InterfaceRequest) returns (InterfaceResponse) {}
  rpc InterfaceDelete (InterfaceDeleteRequest) returns (InterfaceDeleteResponse) {}
  rpc InterfaceGet (InterfaceGetRequest) returns (InterfaceGetResponse) {}
  rpc LifGet (LifGetRequest) returns (LifGetResponse) {}
}

// types of interfaces
enum IfType {
  IF_TYPE_NONE      = 0;
  // uplink interface
  IF_TYPE_UPLINK    = 1;
  // uplink port-channel interface
  IF_TYPE_UPLINK_PC = 2;
  // L3 interface
  IF_TYPE_L3        = 3;
}

// IfStatus status reflects the operational status of Interface
enum IfStatus {
  IF_STATUS_NONE = 0;
  IF_STATUS_UP   = 1;
  IF_STATUS_DOWN = 2;
}

// Uplink configuration (if interface type is IF_TYPE_UPLINK)
message UplinkSpec {
  // physical port id corresponding to this interface
  uint32 PortId       = 1 [(gogoproto.moretags) = "meta:mandatory"];
  // Untagged ingress packets are considered as coming with this VLAN id
  // Egress packet tagged with this VLAN id are sent untagge
  uint32 NativeVlanId = 2;
}

// Uplink port-channel configuration (i.e., if interface type is
// IF_TYPE_UPLINK_PC)
message UplinkPCSpec {
  // member interfaces of this port-channel in the form of bitmap
  // (e.g. if uplink interfaces 1 and 2 part of this port channel
  // this is set to 0x11
  uint64 MemberIfBitmap = 1;
  // Untagged ingress packets are considered as coming with this VLAN id
  // Egress packet tagged with this VLAN id are sent untagge
  uint32 NativeVlanId   = 2;
}

// L3 interface configuration
message L3IfSpec {
  // vpc/vrf this L3 interface belongs to
  uint32         VpcId      = 1 [(gogoproto.moretags) = "meta:mandatory"];
  // IP address, prefix of this L3 interface
  types.IPPrefix Prefix     = 2 [(gogoproto.moretags) = "meta:mandatory"];
  // physical port id corresponding to this interface
  uint32         PortId     = 3 [(gogoproto.moretags) = "meta:mandatory"];
  // (optional) encap used for packet rewrites if this is a L3 sub interface
  types.Encap    Encap      = 4;
  // MAC address of this L3 interface
  uint64         MACAddress = 5;
}

// InterfaceSpec is used to add or update of an interface
message InterfaceSpec {
  // unique interface id
  // NOTE: interface ids start from 1, for IF_TYPE_UPLINK this id is in the
  //       range [1...max-ports#] and same for IF_TYPE_UPLINK_PC
  uint32           Id          = 1 [(gogoproto.moretags) = "meta:mandatory"];
  // type of the interface
  IfType           Type        = 2 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // port up|down adminstratively
  IfStatus         AdminStatus = 3;
  // interface type specific configuration
  oneof ifinfo {
    // uplink specific configuration
    UplinkSpec   UplinkSpec    = 4 [(gogoproto.moretags) = "meta:constraints={InterfaceSpec.Type==IF_TYPE_UPLINK}"];
    UplinkPCSpec UplinkPCSpec  = 5 [(gogoproto.moretags) = "meta:constraints={InterfaceSpec.Type==IF_TYPE_UPLINK_PC}"];
    L3IfSpec     L3IfSpec      = 6 [(gogoproto.moretags) = "meta:constraints={InterfaceSpec.Type==IF_TYPE_L3}"];
  }
}

message UplinkStatus {
  uint32 LifId = 1;
}

// operational status of an interface, if any
message InterfaceStatus {
  IfStatus OperStatus         = 1;
  oneof ifstatus {
    // uplink specific status
    UplinkStatus UplinkStatus = 2;
  }
}

// stats for an interface, if any
message InterfaceStats {
}

// interface Object
message Interface {
  meta.TypeMeta   TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta    ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  InterfaceSpec   Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  InterfaceStatus Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  InterfaceStats  Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// interface create and update request
message InterfaceRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt        BatchCtxt = 1;
  // batched requests
  repeated InterfaceSpec Request   = 2;
}

// interface create and update response
message InterfaceResponse {
  types.ApiStatus          ApiStatus = 1;
  repeated InterfaceStatus Response  = 2; // batched response
}

// interface get request
message InterfaceGetRequest {
  repeated uint32 Id = 1;
}

// interface get response
message InterfaceGetResponse {
  types.ApiStatus    ApiStatus = 1; // API status code
  repeated Interface Response  = 2;
}

// interface delete request
message InterfaceDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  repeated uint32 Id        = 2;
}

// interface delete response
message InterfaceDeleteResponse {
  repeated types.ApiStatus ApiStatus = 1; // API status code
}

/// Lif (Logical interface) object represents a device (eth/storage etc.)
message LifSpec {
  // unique key of the lif
  uint32        LifId             = 1;
  // pinned interface, if applicable for this device
  uint32        PinnedInterfaceId = 2;
  // type of the lif device
  types.LifType Type              = 3;
  // MAC address of the lif, if any
  uint64        MacAddress        = 4;
}

message LifStatus {
  // encoded ifindex of this lif
  uint32   IfIndex    = 1;
  // name of this lif (as seen on the host)
  string   Name       = 2;
  // operational status of this lif
  IfStatus OperStatus = 3;
}

message LifStats {
}

message Lif {
  meta.TypeMeta TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta  ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  LifSpec       Spec     = 3;
  LifStatus     Status   = 4;
  LifStats      Stats    = 5;
}

message LifGetRequest {
  repeated uint32 LifId = 1;
}

message LifGetResponse {
  types.ApiStatus ApiStatus = 1; // API status code
  repeated Lif    Response  = 2;
}
