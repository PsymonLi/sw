//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for metering policy
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";
import "meta/meta.proto";
import "types.proto";
import "policer.proto";

service MeterSvc {
  rpc MeterCreate (MeterRequest) returns (MeterResponse) {}
  rpc MeterUpdate (MeterRequest) returns (MeterResponse) {}
  rpc MeterGet (MeterGetRequest) returns (MeterGetResponse) {}
  rpc MeterDelete (MeterDeleteRequest) returns (MeterDeleteResponse) {}
}

// meter rule
message MeterRuleSpec {
  // list of prefixes to apply this metering policy to
  repeated types.IPPrefix Prefix     = 1;
  // policer configuration, one of the following must be set
  // if bytes/packets are zero in the following policer specs,
  // only accounting will be performed
  oneof policer {
    // packets per second (pps) policer
    PacketPolicerSpec     PPSPolicer = 2;
    // bytes per second (bps) policer
    BytePolicerSpec       BPSPolicer = 3;
  }
  // priority of this rule (lower the numeric value is, higher the priority)
  uint32                  Priority   = 4;
}

// meter policy specification
// NOTE: any time a meter specification changes, client is expected to send
//       full new meter specification (i.e., no incremental add/del/upd of
//       prefixes in the metering policy is supported)
message MeterSpec {
  // unique meter policy id
  bytes                  Id    = 1 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // IP address family
  types.IPAF             Af    = 2 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // meter rules
  repeated MeterRuleSpec rules = 3;
}

// operational status of the meter, if any
message MeterStatus {
}

// stats of the meter, if any
message MeterStats {
  uint32 MeterId = 1 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  uint64 RxBytes = 2;
  uint64 TxBytes = 3;
}

// meter policy object
message Meter {
  meta.TypeMeta TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta  ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  MeterSpec     Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  MeterStatus   Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  MeterStats    Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// meter table create and update request
message MeterRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt    BatchCtxt = 1;
  // batched request
  repeated MeterSpec Request   = 2;
}

// meter table create and update response
message MeterResponse {
  types.ApiStatus      ApiStatus = 1;
  repeated MeterStatus Response  = 2;
}

// meter table get request
message MeterGetRequest {
  // batched request
  repeated bytes Id = 1;
}

// meter table get response
message MeterGetResponse {
  types.ApiStatus ApiStatus = 1;
  repeated Meter  Response  = 2;
}

// meter table delete request
message MeterDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  // batched request
  repeated bytes Id         = 2;
}

// meter table delete response
message MeterDeleteResponse {
  repeated types.ApiStatus ApiStatus = 1;
}
