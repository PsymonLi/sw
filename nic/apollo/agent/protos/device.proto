//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for the top level device object
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";
import "meta/meta.proto";
import "types.proto";

service DeviceSvc {
  rpc DeviceCreate (DeviceRequest) returns (DeviceResponse) {}
  rpc DeviceUpdate (DeviceRequest) returns (DeviceResponse) {}
  rpc DeviceGet (DeviceGetRequest) returns (DeviceGetResponse) {}
  rpc DeviceDelete (DeviceDeleteRequest) returns (DeviceDeleteResponse) {}
}

enum MemoryProfile {
  MEMORY_PROFILE_DEFAULT = 0;
}

enum DeviceProfile {
  DEVICE_PROFILE_DEFAULT = 0;
  DEVICE_PROFILE_2PF     = 1;
  DEVICE_PROFILE_3PF     = 2;
  DEVICE_PROFILE_4PF     = 3;
  DEVICE_PROFILE_5PF     = 4;
  DEVICE_PROFILE_6PF     = 5;
  DEVICE_PROFILE_7PF     = 6;
  DEVICE_PROFILE_8PF     = 7;
}

enum DeviceOperMode {
  DEVICE_OPER_MODE_NONE = 0;
  ///< bump-in-the-wire mode with workloads on uplink port(s)
  DEVICE_OPER_MODE_BITW = 1;
  ///< host path mode with workloads on pcie
  DEVICE_OPER_MODE_HOST = 2;
}

// device configuration
message DeviceSpec {
  // local IP address in the underlay (i.e. MyTEP IP or local TEP IP)
  types.IPAddress IPAddr            = 1;
  // system MAC (NAPLES's system MAC will be used if not provided)
  uint64          MACAddr           = 2;
  // IP address of the gateway in the underlay
  types.IPAddress GatewayIP         = 3;
  // operational mode of the device
  // NOTE: when operational mode is modified, it will take affect only after
  //       next reboot of NAPLES/DSC
  DeviceOperMode  DevOperMode       = 4 [(gogoproto.moretags) = "meta:mandatory"];
  // Memory Profile (only MEMORY_PROFILE_DEFAULT is supported)
  // NOTE: when a device profile is changed, it will take affect after next
  // reboot of NAPLES/DSC
  MemoryProfile   MemoryProfile     = 5 [(gogoproto.moretags) = "meta:mandatory"];
  // Device Profile
  DeviceProfile   DeviceProfile     = 6 [(gogoproto.moretags) = "meta:mandatory"];
  // if BridgingEn is true, L2 functionality based on MAC addresses kicks in
  // NOTE: when operational mode is modified, it will take affect only after
  //       next reboot of NAPLES/DSC
  bool            BridgingEn        = 7 [(gogoproto.moretags) = "meta:mandatory"];
  // if LearningEn is true, MAC and IP learning is enabled
  // NOTE: when operational mode is modified, it will take affect only after
  //       next reboot of NAPLES/DSC
  bool            LearningEn        = 8 [(gogoproto.moretags) = "meta:mandatory"];
  // LearnAgeTimeout is the aging timeout (in seconds) for learnt MAC or IP
  // addresses if LearningEn is set to true. If this is not set and learning is
  // enabled, default value is assumed for aging
  uint32          LearnAgeTimeout   = 9 [(gogoproto.moretags) = "meta:range:30-86400,meta:default=300"];
  // enable the control plane stack for overlay routing
  // NOTE: when operational mode is modified, it will take affect only after
  //       next reboot of NAPLES/DSC
  bool            OverlayRoutingEn =  10 [(gogoproto.moretags) = "meta:mandatory"];
  /// priority of IP mapping entries (this priority, if configured, will be
  /// used to break the tie in case both LPM/prefix and a mapping entry are
  /// hit in the datapath (i.e., /32 IP mapping entry is also in some LPM
  ///prefix)
  /// NOTE:
  /// 1. by default IP mapping always takes precedence over LPM hit and
  ///    default value of this attribute is 0 (lower the numerical value,
  ///    the higher the priority, hence 0 is the highest priority)
  /// 2. valid priority value range is 0 to 1022
  uint32          IPMappingPriority = 11 [(gogoproto.moretags) = "meta:range:0-65535"];
}

// device operational status
enum DeviceState {
  SWITCH_STATE_NONE = 0;
  SWITCH_STATE_UP   = 1;
  SWITCH_STATE_DOWN = 2;
  SWITCH_STATE_ERR  = 3;
}

// device health status, multiple conditions can happen
enum DeviceHealth {
  DEVICE_HEALTH_NONE            = 0;
  DEVICE_HEALTH_OK              = 1;
  DEVICE_HEALTH_SERVICE_DOWN    = 2;
  DEVICE_HEALTH_REBOOT_REQUIRED = 3;
  DEVICE_HEALTH_LOW_MEMORY      = 4;
  DEVICE_HEALTH_HARDWARE_ERROR  = 5;
}

// operational status of the device, if any
message DeviceStatus {
  // operaional state of the device
  DeviceState State             = 1;

  // System MAC address (can be used to uniquely identify the device in cluster)
  uint64      SystemMACAddress  = 2;

  // serial number of the device
  string      SerialNumber      = 3;

  // SKU/part numnber
  string      Sku               = 4;

  // version of the firmware running
  string      FirmwareVersion   = 5;

  // Memory Capacity
  uint32      Memory            = 6;

  // Product Name
  string      ProductName       = 7;

  // Manufacturing date
  string      ManufacturingDate = 8;

  // Device Description
  string      Description       = 9;

  // Vendor ID
  string      VendorID          = 10;

  // Chip Type
  types.AsicType ChipType       = 11;

  // Hardware Revision
  string      HardwareRevision  = 12;

  // CPU Vendor
  string      CpuVendor         = 13;

  // CPU Specification
  string      CpuSpecification  = 14;

  //SOC OS Version
  string      SocOSVersion      = 15;

  // Soc Disk Size
  string      SocDiskSize       = 16;

  // PCIe Specification
  string      PCIeSpecification = 17;

  // PCIe Bus Information
  string      PCIeBusInfo       = 18;

  // Number of PCIe Ports
  uint32      NumPCIePorts      = 19;

  // Number of Uplink Ports
  uint32      NumPorts          = 20;

  // Vendor Name
  string      VendorName        = 21;

  // PXE Version
  string      PXEVersion        = 22;

  // UEFI Version
  string      UEFIVersion       = 23;
}

// stats of the device, if any
message DeviceStatsEntry {
  string Name  = 1;
  uint64 Count = 2;
}

message DeviceStats {
  repeated DeviceStatsEntry Ingress = 1;
  repeated DeviceStatsEntry Egress  = 2;
}

// device object
message Device {
  meta.TypeMeta TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta  ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  DeviceSpec    Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  DeviceStatus  Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  DeviceStats   Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// device create and update request
message DeviceRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  DeviceSpec      Request   = 2;
}

// device create and update response
message DeviceResponse {
  types.ApiStatus ApiStatus = 1;
  DeviceStatus    Response  = 2;
}

// device get request
message DeviceGetRequest {
}

// device get response
message DeviceGetResponse {
  types.ApiStatus ApiStatus = 1;
  Device          Response  = 2;
}

// device delete request
message DeviceDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
}

// device delete response
message DeviceDeleteResponse {
  types.ApiStatus ApiStatus = 1;
}
