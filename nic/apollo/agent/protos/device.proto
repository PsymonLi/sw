//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for the top level device object
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";
import "meta/meta.proto";
import "types.proto";

service DeviceSvc {
  rpc DeviceCreate (DeviceRequest) returns (DeviceResponse) {}
  rpc DeviceUpdate (DeviceRequest) returns (DeviceResponse) {}
  rpc DeviceGet (types.Empty) returns (DeviceGetResponse) {}
  rpc DeviceDelete (DeviceDeleteRequest) returns (DeviceDeleteResponse) {}
}

enum DeviceProfile {
  DEVICE_PROFILE_DEFAULT = 0;
  DEVICE_PROFILE_P1      = 1;
  DEVICE_PROFILE_P2      = 2;
}

enum DeviceOperMode {
  DEVICE_OPER_MODE_NONE = 0;
  ///< bump-in-the-wire mode with workloads on uplink port(s)
  DEVICE_OPER_MODE_BITW = 1;
  ///< host path mode with workloads on pcie
  DEVICE_OPER_MODE_HOST = 2;
}

// device configuration
message DeviceSpec {
  // local IP address in the underlay (i.e. MyTEP IP)
  types.IPAddress IPAddr           = 1 [(gogoproto.moretags) = "meta:mandatory"];
  // system MAC
  uint64          MACAddr          = 2;
  // IP address of the gateway in the underlay
  types.IPAddress GatewayIP        = 3;
  // Device Profile (only DEVICE_PROFILE_DEFAULT is supported)
  DeviceProfile   Profile          = 4;
  // if BridgingEn is true, L2 functionality based on MAC addresses kicks in
  bool            BridgingEn       = 5;
  // if LearningEn is true, MAC and IP learning is enabled
  bool            LearningEn       = 6;
  // enable the control plane stack for overlay routing
  bool            OverlayRoutingEn = 7;
  // operational mode of the device
  DeviceOperMode  DevOperMode      = 8;
}

// device operational status
enum DeviceState {
  SWITCH_STATE_NONE = 0;
  SWITCH_STATE_UP   = 1;
  SWITCH_STATE_DOWN = 2;
  SWITCH_STATE_ERR  = 3;
}

// operational status of the device, if any
message DeviceStatus {
  // operaional state of the device
  DeviceState state = 1;
}

// stats of the device, if any
message DeviceStatsEntry {
  string Name  = 1;
  uint64 Count = 2;
}

message DeviceStats {
  repeated DeviceStatsEntry Ingress = 1;
  repeated DeviceStatsEntry Egress  = 2;
}

// device object
message Device {
  meta.TypeMeta TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta  ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  DeviceSpec    Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  DeviceStatus  Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  DeviceStats   Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// device create and update request
message DeviceRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  DeviceSpec      Request   = 2;
}

// device create and update response
message DeviceResponse {
  types.ApiStatus ApiStatus = 1;
  DeviceStatus    Response  = 2;
}

// device get response
message DeviceGetResponse {
  types.ApiStatus ApiStatus = 1;
  Device          Response  = 2;
}

// device delete request
message DeviceDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
}

// device delete response
message DeviceDeleteResponse {
  types.ApiStatus ApiStatus = 1;
}
