//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for the top level device object
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import public "gogo.proto";
import "meta/meta.proto";
import "types.proto";

service DeviceSvc {
  rpc DeviceCreate (DeviceRequest) returns (DeviceResponse) {}
  rpc DeviceGet (types.Empty) returns (DeviceGetResponse) {}
  rpc DeviceDelete (types.Empty) returns (DeviceDeleteResponse) {}
}

// device configuration
message DeviceSpec {
  // local IP address in the substrate, only IPv4 is supported
  types.IPAddress IPAddr  = 1 [(gogoproto.nullable) = false];
  uint64          MACAddr = 2 [(gogoproto.moretags) = "meta:mandatory"];
  // IP address of the gateway in the substrate
  types.IPAddress GatewayIP = 3 [(gogoproto.nullable) = false];
}

// device operational status
enum DeviceState {
  SWITCH_STATE_NONE = 0;
  SWITCH_STATE_UP   = 1;
  SWITCH_STATE_DOWN = 2;
  SWITCH_STATE_ERR  = 3;
}

// operational status of the device, if any
message DeviceStatus {
  // operaional state of the device
  DeviceState state = 1;
}

// stats of the device, if any
message DeviceStats {
}

// device object
message Device {
  meta.TypeMeta TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta  ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
  DeviceSpec   Spec      = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
  DeviceStatus Status    = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
  DeviceStats  Stats     = 5 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "stats,omitempty"];
}

// device create and update request
message DeviceRequest {
  DeviceSpec Request = 1;
}

// device create and update response
message DeviceResponse {
  types.ApiStatus ApiStatus = 1;
  DeviceStatus    Response  = 2;
}

// device get response
message DeviceGetResponse {
  types.ApiStatus ApiStatus = 1;
  Device          Response  = 2;
}

// device delete response
message DeviceDeleteResponse {
  types.ApiStatus ApiStatus = 1;
}
