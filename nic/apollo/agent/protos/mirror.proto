//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for Network Address Translation (Mirror)
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import public "gogo.proto";
import "meta/meta.proto";
import "types.proto";

service MirrorSvc {
  rpc MirrorPolicyCreate (MirrorPolicyRequest) returns (MirrorPolicyResponse) {}
  rpc MirrorPolicyGet (MirrorPolicyGetRequest) returns (MirrorPolicyGetResponse) {}
  rpc MirrorPolicyDelete (MirrorPolicyDeleteRequest) returns (MirrorPolicyDeleteResponse) {}
}

// RspanSpec is the configuration specification for RSPAN
message RSpanSpec {
  // uplink or front panel port number to send out pkts on
  uint32      FrontPanelPortId = 1;
  // RSPAN encap, only VLAN encapsulation supported here
  types.Encap Encap            = 2;
}

// ERSpanSpec is the configuration specification for ERSPAN
message ERSpanSpec {
  // IP address of the ERSPAN destination
  types.IPAddress DstIP  = 1;
  // Source IP address to be used for ERSPAN
  types.IPAddress SrcIP  = 2;
  // DSCP value to use in the packet
  uint32          Dscp   = 3;
  // Span ID to use in the packet
  uint32          SpanId = 4;
}

// MirrorPolicySpec captures configuration of Mirror session
message MirrorPolicySpec {
  // unique identifier of mirror policy
  uint32 Id               = 1 [(gogoproto.moretags) = "meta:mandatory"];
  // maximum  bytes of packet to mirror
  uint32 SnapLen          = 2;
  oneof MirrorDst {
    // RSPAN configuration in case of RSPAN
    RSpanSpec RspanSpec   = 3;
    // ERSPAN configuration in case of ERSPAN
    ERSpanSpec ErspanSpec = 4;
  }
}

// operational status of Mirror policy, if any
message MirrorPolicyStatus {
}

// stats of Mirror policy, if any
message MirrorPolicyStats {
}
// Mirror policy object
message MirrorPolicy {
  meta.TypeMeta      TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta       ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
  MirrorPolicySpec   Spec     = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
  MirrorPolicyStatus Status   = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
  MirrorPolicyStats  Stats    = 5 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "stats,omitempty"];
}

// Mirror policy create and update request
message MirrorPolicyRequest {
  repeated MirrorPolicySpec Request = 1;
}

// Mirror policy create and update response
message MirrorPolicyResponse {
  types.ApiStatus             ApiStatus = 1;
  repeated MirrorPolicyStatus Response  = 2;
}

// Mirror policy get request
message MirrorPolicyGetRequest {
  repeated uint32 Id = 1;
}

// Mirror policy get response
message MirrorPolicyGetResponse {
  types.ApiStatus       ApiStatus = 1;
  repeated MirrorPolicy Response  = 2;
}

// Mirror policy delete request
message MirrorPolicyDeleteRequest {
  repeated uint32 Id = 1;
}

// Mirror policy delete response
message MirrorPolicyDeleteResponse {
  repeated types.ApiStatus ApiStatus = 1;
}
