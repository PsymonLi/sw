//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for Network Address Translation (Mirror)
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "meta/meta.proto";
import "types.proto";

service MirrorSvc {
  rpc MirrorSessionCreate (MirrorSessionRequest) returns (MirrorSessionResponse) {}
  rpc MirrorSessionUpdate (MirrorSessionRequest) returns (MirrorSessionResponse) {}
  rpc MirrorSessionGet (MirrorSessionGetRequest) returns (MirrorSessionGetResponse) {}
  rpc MirrorSessionDelete (MirrorSessionDeleteRequest) returns (MirrorSessionDeleteResponse) {}
}

// RspanSpec is the configuration specification for RSPAN
message RSpanSpec {
  // interface to send RSPAN pkts on
  // NOTE: uplink interfaces and host interfaces (aka. lif) are supported
  //       currently
  bytes       Interface = 1 [(gogoproto.moretags) = "meta:mandatory"];
  // RSPAN encap, only VLAN encapsulation supported here
  types.Encap Encap     = 2;
}

// types of ERSPAN sessions differ in the encap
enum ERSpanType {
  ERSPAN_TYPE_NONE = 0;
  // Type 1 ERSPAN
  ERSPAN_TYPE_1    = 1;
  // Type 2 ERSPAN
  ERSPAN_TYPE_2    = 2;
  // Type 3 ERSPAN
  ERSPAN_TYPE_3    = 3;
}

// ERSpanSpec is the configuration specification for ERSPAN
// NOTE: source IP used in the ERSPAN packet is either
//       1. subnet VR IP in case DstIP is in a VPC of type VPC_TYPE_TENANT
//       2. local TEP (MyTEP) IP in case DstIP is in VPC  of type
//          VPC_TYPE_UNDERLAY
message ERSpanSpec {
  // type of the ERSPAN session
  // NOTE: only TYPE 3 is supported currently
  ERSpanType          Type        = 1;
  // VPC id
  bytes               VPCId       = 2 [(gogoproto.moretags) = "meta:mandatory"];
  oneof erspandst {
      // Destination/Collector IP address to be used for ERSPAN
      // NOTE: currently DstIP is supported
      // 1. when vpc is underlay VPC or
      // 2. if it the IP address of a local/remote mapping in the overlay
      //    if this IP is in the overlay but reachable via route and not a
      //    local/remote mapping, then an error is returned
      types.IPAddress DstIP       = 3;
      // tunnel (aka. TEP) as the ERSPAN collector
      bytes           TunnelId    = 4;
  }
  // DSCP value to use in the packet
  uint32              Dscp        = 5;
  // Span ID to use in the packet
  uint32              SpanId      = 6;
  // when VlanStripEn is set to true, dot1q tag of original packet is stripped
  // before mirroring
  // NOTE: VlanStringEn is applicable only for ERSPAN_TYPE_2 mirror session
  bool                VlanStripEn = 7 [(gogoproto.moretags) = "meta:constraints={ERSpanSpec.Type==ERSPAN_TYPE_2"];
}

// MirrorSessionSpec captures configuration of Mirror session
message MirrorSessionSpec {
  // unique identifier of mirror policy
  bytes        Id         = 1 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // maximum  bytes of packet to mirror, by default all of the packet contents
  // are mirrored
  // NOTE:
  // 1. if SnapLen is not set or configured as 0, all of the packet contents
  //    are mirrored (to the extent that can be carried with any encapsulations
  //    included)
  // 2. if SnapLen is non-zero, minimum length acceptable is 64
  uint32       SnapLen    = 2 [(gogoproto.moretags) = "meta:range:0,64-*"];
  oneof mirrordst {
    // RSPAN configuration in case of RSPAN
    RSpanSpec  RspanSpec  = 3;
    // ERSPAN configuration in case of ERSPAN
    ERSpanSpec ErspanSpec = 4;
  }
}

// operational status of Mirror policy, if any
message MirrorSessionStatus {
  // hardware id allocated for the mirror session
  uint32 HwId = 1;
}

// stats of Mirror policy, if any
message MirrorSessionStats {
  // number of packets mirrored by this mirror session
  uint64 PacketCount  = 1;
  // number of bytes mirrored by this mirror session
  uint64 ByteCount    = 2;
}

// Mirror policy object
message MirrorSession {
  meta.TypeMeta       TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta        ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  MirrorSessionSpec   Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  MirrorSessionStatus Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  MirrorSessionStats  Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// Mirror policy create and update request
message MirrorSessionRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt            BatchCtxt = 1;
  repeated MirrorSessionSpec Request   = 2;
}

// Mirror policy create and update response
message MirrorSessionResponse {
  types.ApiStatus              ApiStatus = 1;
  repeated MirrorSessionStatus Response  = 2;
}

// Mirror policy get request
message MirrorSessionGetRequest {
  repeated bytes Id = 1;
}

// Mirror policy get response
message MirrorSessionGetResponse {
  types.ApiStatus        ApiStatus = 1;
  repeated MirrorSession Response  = 2;
}

// Mirror policy delete request
message MirrorSessionDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  repeated bytes  Id        = 2;
}

// Mirror policy delete response
message MirrorSessionDeleteResponse {
  repeated types.ApiStatus ApiStatus = 1;
}
