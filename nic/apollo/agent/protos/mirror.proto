//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for Network Address Translation (Mirror)
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "meta/meta.proto";
import "types.proto";
import "mapping.proto";

service MirrorSvc {
  rpc MirrorSessionCreate (MirrorSessionRequest) returns (MirrorSessionResponse) {}
  rpc MirrorSessionUpdate (MirrorSessionRequest) returns (MirrorSessionResponse) {}
  rpc MirrorSessionGet (MirrorSessionGetRequest) returns (MirrorSessionGetResponse) {}
  rpc MirrorSessionDelete (MirrorSessionDeleteRequest) returns (MirrorSessionDeleteResponse) {}
}

// RspanSpec is the configuration specification for RSPAN
message RSpanSpec {
  // uplink/front panel interface index to send out RSPAN pkts on
  uint32      InterfaceId = 1;
  // RSPAN encap, only VLAN encapsulation supported here
  types.Encap Encap       = 2;
}

// ERSpanSpec is the configuration specification for ERSPAN
message ERSpanSpec {
  // VPC id
  bytes           VPCId     = 1;
  oneof erspandst {
      // tunnel (aka. TEP) as the ERSPAN destination
      bytes     TunnelId    = 2;
      // local/remote mapping as the ERSPAN destination
      MappingKey Mapping    = 3;
      // Destination IP address to be used for ERSPAN
      types.IPAddress DstIP = 4;
  }
  // Source IP address to be used for ERSPAN
  types.IPAddress SrcIP     = 5;
  // DSCP value to use in the packet
  uint32          Dscp      = 6;
  // Span ID to use in the packet
  uint32          SpanId    = 7;
}

// MirrorSessionSpec captures configuration of Mirror session
message MirrorSessionSpec {
  // unique identifier of mirror policy
  uint32 Id               = 1 [(gogoproto.moretags) = "meta:mandatory,range:1-7"];
  // maximum  bytes of packet to mirror
  uint32 SnapLen          = 2;
  oneof mirrordst {
    // RSPAN configuration in case of RSPAN
    RSpanSpec RspanSpec   = 3;
    // ERSPAN configuration in case of ERSPAN
    ERSpanSpec ErspanSpec = 4;
  }
}

// operational status of Mirror policy, if any
message MirrorSessionStatus {
}

// stats of Mirror policy, if any
message MirrorSessionStats {
}
// Mirror policy object
message MirrorSession {
  meta.TypeMeta       TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta        ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  MirrorSessionSpec   Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  MirrorSessionStatus Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  MirrorSessionStats  Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// Mirror policy create and update request
message MirrorSessionRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt            BatchCtxt = 1;
  repeated MirrorSessionSpec Request   = 2;
}

// Mirror policy create and update response
message MirrorSessionResponse {
  types.ApiStatus              ApiStatus = 1;
  repeated MirrorSessionStatus Response  = 2;
}

// Mirror policy get request
message MirrorSessionGetRequest {
  repeated uint32 Id = 1;
}

// Mirror policy get response
message MirrorSessionGetResponse {
  types.ApiStatus        ApiStatus = 1;
  repeated MirrorSession Response  = 2;
}

// Mirror policy delete request
message MirrorSessionDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  repeated uint32 Id        = 2;
}

// Mirror policy delete response
message MirrorSessionDeleteResponse {
  repeated types.ApiStatus ApiStatus = 1;
}
