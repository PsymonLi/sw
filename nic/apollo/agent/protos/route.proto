//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for routing
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";
import "meta/meta.proto";
import "types.proto";

service RouteSvc {
  rpc RouteTableCreate (RouteTableRequest) returns (RouteTableResponse) {}
  rpc RouteTableUpdate (RouteTableRequest) returns (RouteTableResponse) {}
  rpc RouteTableGet (RouteTableGetRequest) returns (RouteTableGetResponse) {}
  rpc RouteTableDelete (RouteTableDeleteRequest) returns (RouteTableDeleteResponse) {}
}

message NATAction {
  // if SrcNatAction is set to NAT_ACTION_STATIC, floating IP of the
  // local IP mapping is used to NAT the source IP or else (NAT IP, NAT port)
  // are dynamically allocated in s/w datapath
  // NOTE: Floating IP (i.e., public IP in local mapping object is always
  //       preffered over NAPT port block
  types.NatAction SrcNatAction = 1;
  // DstNatIP is set, if 1:1 destination NAT needs to be done
  // NOTE: if DNAT is done, using the DNAT IP route lookup will be done
  //       in the same routing table to get forwarding information this time
  types.IPAddress DstNatIP     = 2;
}

// route object
message Route {
  // IP prefix
  types.IPPrefix      Prefix         = 1 [(gogoproto.moretags) = "meta:mandatory"];
  // priority of the route
  // NOTE:
  // 1. priority value must be non-zero
  // 2. lower the numerical value, higher the priority
  // 3. a route table MUST have either all the routes with priority set or no
  //    priority set on all the routes
  // 4. if no priority value is set (i.e. 0) then route priority is computed as
  //    128 - <prefix length>, so longer prefixes will have higher precedence
  //    over shorter ones giving regular LPM semantics
  uint32              Priority       = 2 [(gogoproto.moretags) = "meta:range:1-65535"];
  // route either points to a Nexthop ID or peer-VPC in case of VPC peering
  oneof nh {
      // TODO: this should be obsoleted in apollo, TunnelId should be used
      types.IPAddress NextHop        = 3;
      // nexthop for this route
      uint32          NexthopId      = 4;
      // ECMP nexthop for this route
      uint32          NexthopGroupId = 5;
      // peer VPC in case of VPC peering
      uint32          VPCId          = 6;
      // Tunnel this prefix is pointing to
      uint32          TunnelId       = 7;
      // vnic this prefix is pointing to
      uint32          VnicId         = 8;
  }
  // if NATAction is set, source and/or destination NAT will be performed on
  // the packet and if destination NAT is performed, another route lookup
  // will be done in the same route table with the post-NAT destination IP
  // address being rewritten
  NATAction           NatAction      = 9;
  // if MeterEn is true, when traffic from a vnic hits the route and
  // metering is enabled on that vnic, such traffic is accounted (bytes &
  // packets) against the vnic
  bool                MeterEn        = 10;
}

// route table specification
// NOTE: any time a route table's route(s) changes, client is expected to send
//       full new route table (i.e., no incremental route add/del/upd is
//       supported)
message RouteTableSpec {
  // unique route table id (this id is not scoped under VPC or subnet)
  uint32         Id        = 1 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // IP address family
  types.IPAF     Af        = 2 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // enable or disable Priority-Based-Routing (PBR) for the route table
  bool           EnablePBR = 3 [(gogoproto.moretags) = "meta:immutable,default=false"];
  // routes in this route table
  repeated Route Routes    = 4;
}

// operational status of the route table, if any
message RouteTableStatus {
}

// stats of the route table, if any
message RouteTableStats {
}

// route table object
message RouteTable {
  meta.TypeMeta     TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta      ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  RouteTableSpec    Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  RouteTableStatus  Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  RouteTableStats   Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// route table create and update request
message RouteTableRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt         BatchCtxt = 1;
  repeated RouteTableSpec Request   = 2; // batched request
}

// route table create and update response
message RouteTableResponse {
  types.ApiStatus           ApiStatus = 1;
  repeated RouteTableStatus Response  = 2;
}

// route table get request
message RouteTableGetRequest {
  repeated uint32 Id = 1; // batched request
}

// route table get response
message RouteTableGetResponse {
  types.ApiStatus     ApiStatus = 1;
  repeated RouteTable Response  = 2;
}

// route table delete request
message RouteTableDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  // batched request
  repeated uint32 Id        = 2;
}

// route table delete response
message RouteTableDeleteResponse {
  repeated types.ApiStatus ApiStatus = 1;
}
