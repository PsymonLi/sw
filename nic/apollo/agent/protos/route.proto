//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for routing
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";
import "meta/meta.proto";
import "types.proto";

service RouteSvc {
  // route table APIs
  rpc RouteTableCreate (RouteTableRequest) returns (RouteTableResponse) {}
  rpc RouteTableUpdate (RouteTableRequest) returns (RouteTableResponse) {}
  rpc RouteTableGet (RouteTableGetRequest) returns (RouteTableGetResponse) {}
  rpc RouteTableDelete (RouteTableDeleteRequest) returns (RouteTableDeleteResponse) {}

  // route APIs
  rpc RouteCreate (RouteRequest) returns (RouteResponse) {}
  rpc RouteUpdate (RouteRequest) returns (RouteResponse) {}
  rpc RouteGet (RouteGetRequest) returns (RouteGetResponse) {}
  rpc RouteDelete (RouteDeleteRequest) returns (RouteDeleteResponse) {}
}

message NATAction {
  // if SrcNatAction is set to NAT_ACTION_STATIC, floating IP of the
  // local IP mapping is used to NAT the source IP or else (NAT IP, NAT port)
  // are dynamically allocated in s/w datapath
  // NOTE: Floating IP (i.e., public IP in local mapping object is always
  //       preffered over NAPT port block
  types.NatAction SrcNatAction = 1;
  // DstNatIP is set, if 1:1 destination NAT needs to be done
  // NOTE: if DNAT is done, using the DNAT IP route lookup will be done
  //       in the same routing table to get forwarding information this time
  types.IPAddress DstNatIP     = 2;
}

// route attributes
message RouteAttrs {
  // IP prefix
  types.IPPrefix      Prefix         = 1 [(gogoproto.moretags) = "meta:mandatory"];
  // priority of the route
  // NOTE:
  // 1. lower the numerical value, higher the priority in the datapath
  // 2. a route table MUST have either all the routes with priority set or no
  //    priority set on all the routes
  // 3. if multiple routes have same priority, route with longest prefix length
  //    will take effect
  // 4. if no priority value is set (i.e. 0) then route priority is computed as
  //    128 - <prefix length>, so longer prefixes will have higher precedence
  //    over shorter ones giving regular LPM semantics
  uint32              Priority       = 2 [(gogoproto.moretags) = "meta:range:0-65535"];
  // route either points to a Nexthop ID or peer-VPC in case of VPC peering
  oneof nh {
      // TODO: this should be obsoleted in apollo, TunnelId should be used
      types.IPAddress NextHop        = 3;
      // nexthop for this route
      bytes           NexthopId      = 4;
      // ECMP nexthop for this route
      bytes           NexthopGroupId = 5;
      // peer VPC in case of VPC peering
      bytes           VPCId          = 6;
      // Tunnel this prefix is pointing to
      bytes           TunnelId       = 7;
      // vnic this prefix is pointing to
      bytes           VnicId         = 8;
  }
  // if NATAction is set, source and/or destination NAT will be performed on
  // the packet and if destination NAT is performed, another route lookup
  // will be done in the same route table with the post-NAT destination IP
  // address being rewritten
  NATAction           NatAction      = 9;
  // if MeterEn is true, when traffic from a vnic hits the route and
  // metering is enabled on that vnic, such traffic is accounted (bytes &
  // packets) against the vnic
  bool                MeterEn        = 10;
}

// route configuration information
message RouteInfo {
  // optional route id needed if incremental route ADD/DEL/UPD functionality is needed
  bytes      Id    = 1 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  RouteAttrs Attrs = 2 [(gogoproto.moretags) = "meta:mandatory"];
}

// route table specification
// NOTE: any time a route table's route(s) changes, client is expected to send
//       full new route table (i.e., no incremental route add/del/upd is
//       supported)
message RouteTableSpec {
  // unique route table id (this id is not scoped under VPC or subnet)
  bytes          Id         = 1 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // IP address family
  types.IPAF     Af         = 2 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // enable or disable priority based routing for the route table
  bool           PriorityEn = 3 [(gogoproto.moretags) = "meta:immutable,default=false"];
  // routes in this route table
  repeated RouteInfo Routes = 4;
}

// operational status of the route table, if any
message RouteTableStatus {
}

// stats of the route table, if any
message RouteTableStats {
}

// route table object
message RouteTable {
  meta.TypeMeta     TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta      ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  RouteTableSpec    Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  RouteTableStatus  Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  RouteTableStats   Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// route table create and update request
message RouteTableRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt         BatchCtxt = 1;
  repeated RouteTableSpec Request   = 2; // batched request
}

// route table create and update response
message RouteTableResponse {
  types.ApiStatus           ApiStatus = 1;
  repeated RouteTableStatus Response  = 2;
}

// route table get request
message RouteTableGetRequest {
  repeated bytes Id = 1; // batched request
}

// route table get response
message RouteTableGetResponse {
  types.ApiStatus     ApiStatus = 1;
  repeated RouteTable Response  = 2;
}

// route table delete request
message RouteTableDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  // batched request
  repeated bytes  Id        = 2;
}

// route table delete response
message RouteTableDeleteResponse {
  repeated types.ApiStatus ApiStatus = 1;
}

// route identifier
message RouteId {
  // unique route table id (this id is not scoped under VPC or subnet)
  bytes     Id           = 1 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // route table this route belongs to
  bytes     RouteTableId = 2 [(gogoproto.moretags) = "meta:mandatory,immutable"];
}

// route specification
message RouteSpec {
  // unique route table id (this id is not scoped under VPC or subnet)
  bytes      Id           = 1 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // route table this route belongs to
  bytes      RouteTableId = 2 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // route configuration
  RouteAttrs Attrs        = 3 [(gogoproto.moretags) = "meta:mandatory"];
}

// operational status of the route, if any
message RouteStatus {
}

// stats of the route, if any
message RouteStats {
}

// route object
message Route {
  meta.TypeMeta TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta  ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  RouteSpec     Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  RouteStatus   Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  RouteStats    Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// route create and update request
message RouteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  // route configuration
  RouteSpec       Request   = 2;
}

// route create and update response
message RouteResponse {
  // success or failure status
  types.ApiStatus ApiStatus = 1;
  // operational status
  RouteStatus     Response  = 2;
}

// route get request
message RouteGetRequest {
  // list of keys of interest
  repeated RouteId Id = 1 [(gogoproto.moretags) = "meta:mandatory"];
}

// route get response
message RouteGetResponse {
  // API status code
  types.ApiStatus    ApiStatus = 1;
  // route information
  repeated Route     Response  = 2;
}

// route delete request
message RouteDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt  BatchCtxt  = 1;
  // list of routes to delete
  repeated RouteId Id         = 2 [(gogoproto.moretags) = "meta:mandatory"];
}

// route delete response
message RouteDeleteResponse {
  // API status code
  repeated types.ApiStatus ApiStatus = 1;
}
