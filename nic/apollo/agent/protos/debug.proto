//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for the top level device object
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";
import "meta/meta.proto";
import "types.proto";
import "interface.proto";
import "google/protobuf/any.proto";

service DebugSvc {
  rpc ClockFrequencyUpdate (ClockFrequencyRequest) returns (ClockFrequencyResponse) {}
  rpc SystemTemperatureGet (types.Empty) returns (SystemTemperatureGetResponse) {}
  rpc SystemPowerGet (types.Empty) returns (SystemPowerGetResponse) {}
  rpc TraceUpdate (TraceRequest) returns (TraceResponse) {}
  rpc TraceFlush(types.Empty) returns (types.Empty) {}
  rpc TableStatsGet (types.Empty) returns (TableStatsGetResponse) {}
  rpc LlcSetup (LlcSetupRequest) returns (LlcSetupResponse) {}
  rpc LlcStatsGet (types.Empty) returns (LlcStatsGetResponse) {}
  rpc PbStatsGet (types.Empty) returns (PbStatsGetResponse) {}
  rpc MemTrackGet(MemTrackGetRequest) returns (MemTrackGetResponse) {}
  rpc SlabGet(types.Empty) returns (SlabGetResponse) {}
  rpc HeapGet(types.Empty) returns (HeapGetResponse) {}
  rpc MeterStatsGet (MeterStatsGetRequest) returns (MeterStatsGetResponse) {}
  rpc SessionStatsGet (SessionStatsGetRequest) returns (SessionStatsGetResponse) {}
  rpc FteStatsGet (types.Empty) returns (FteStatsGetResponse) {}
  rpc FteStatsClear (FteStatsClearRequest) returns (FteStatsClearResponse) {}
  rpc MemoryTrim (types.Empty) returns (types.Empty) {}
  rpc QueueCreditsGet (types.Empty) returns (QueueCreditsGetResponse) {}
  rpc StartAacsServer (AacsRequest) returns (types.Empty) {}
  rpc StopAacsServer (types.Empty) returns (types.Empty) {}
  rpc InternalPortGet (InternalPortRequestMsg) returns (InternalPortResponseMsg) {}
  rpc FlowStatsSummaryGet (types.Empty) returns (FlowStatsSummaryResponse) {}
  rpc DataPathAssistStatsGet(types.Empty) returns (DataPathAssistStatsResponse) {}
}

enum TraceLevel {
  TRACE_LEVEL_NONE    = 0;    // no tracing at all
  TRACE_LEVEL_ERROR   = 1;    // enable tracing only for error messages
  TRACE_LEVEL_DEBUG   = 2;    // enable tracing only for debug messages
  TRACE_LEVEL_WARN    = 3;    // enable tracing only for warn messages
  TRACE_LEVEL_INFO    = 4;    // enable tracing only for info messages
  TRACE_LEVEL_VERBOSE = 5;    // enable tracing only for verbose messages
}

message TraceRequest {
  TraceLevel trace_level = 1;    // trace level to set to
}

message TraceResponse {
  types.ApiStatus ApiStatus  = 1;
  TraceLevel      TraceLevel = 2;    // current trace level
}

message SystemTemperatureGetResponse {
  types.ApiStatus ApiStatus = 1;
  uint32          DieTemp   = 2;
  uint32          LocalTemp = 3;
  uint32          HbmTemp   = 4;
}

message SystemPowerGetResponse {
  types.ApiStatus ApiStatus = 1;
  uint32          Pin       = 2;
  uint32          Pout1     = 3;
  uint32          Pout2     = 4;
}

message ClockFrequencyRequest {
  meta.TypeMeta TypeMeta          = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta  ObjMeta           = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  uint32        ClockFrequency    = 3;
  uint32        ArmClockFrequency = 4;
}

message ClockFrequencyResponse {
  types.ApiStatus ApiStatus = 1;
}

enum TableApiStatsType {
  TABLE_API_STATS_INSERT           = 0;
  TABLE_API_STATS_INSERT_DUPLICATE = 1;
  TABLE_API_STATS_INSERT_FAIL      = 2;
  TABLE_API_STATS_REMOVE           = 3;
  TABLE_API_STATS_REMOVE_NOT_FOUND = 4;
  TABLE_API_STATS_REMOVE_FAIL      = 5;
  TABLE_API_STATS_UPDATE           = 6;
  TABLE_API_STATS_UPDATE_FAIL      = 7;
  TABLE_API_STATS_GET              = 8;
  TABLE_API_STATS_GET_FAIL         = 9;
  TABLE_API_STATS_RESERVE          = 10;
  TABLE_API_STATS_RESERVE_FAIL     = 11;
  TABLE_API_STATS_RELEASE          = 12;
  TABLE_API_STATS_RELEASE_FAIL     = 13;
}

message TableApiStatsEntry {
  TableApiStatsType Type  = 1;
  uint32            Count = 2;
}

message TableApiStats {
  repeated TableApiStatsEntry Entry = 1;
}

enum TableStatsType {
  TABLE_STATS_ENTRIES    = 0;
  TABLE_STATS_COLLISIONS = 1;
}

message TableStatsEntry {
  TableStatsType Type  = 1;
  uint32         Count = 2;
}

message TableStats {
  repeated TableStatsEntry Entry = 1;
}

message TableStatsResponse {
  string        TableName  = 1;
  TableApiStats ApiStats   = 2;
  TableStats    TableStats = 3;
}

message TableStatsGetResponse {
  types.ApiStatus             ApiStatus = 1;
  repeated TableStatsResponse Response  = 2;
}

enum LlcCounterType {
  LLC_COUNTER_CACHE_NONE        = 0;
  LLC_COUNTER_CACHE_READ        = 1;
  LLC_COUNTER_CACHE_WRITE       = 2;
  LLC_COUNTER_SCRATCHPAD_ACCESS = 3;
  LLC_COUNTER_CACHE_HIT         = 4;
  LLC_COUNTER_CACHE_MISS        = 5;
  LLC_COUNTER_PARTIAL_WRITE     = 6;
  LLC_COUNTER_CACHE_MAINT_OP    = 7;
  LLC_COUNTER_EVICTION          = 8;
  LLC_COUNTER_RETRY_NEEDED      = 9;
  LLC_COUNTER_RETRY_ACCESS      = 10;
}

message LlcSetupRequest {
  LlcCounterType Type = 1;
}

message LlcSetupResponse {
  types.ApiStatus ApiStatus = 1;
}

message LlcStats {
  LlcCounterType  Type  = 1;
  repeated uint32 Count = 2;
}

message LlcStatsGetResponse {
  types.ApiStatus ApiStatus = 1;
  LlcStats        Stats     = 2;
}

enum OflowFifoDropType {
  OCCUPANCY_DROP                = 0;    // Pkts dropped due to fifo full
  EMERGENCY_STOP_DROP           = 1;    // Pkts dropped due to emergency condition hit due to slow oflow memory to write-buffer communication
  WRITE_BUFFER_ACK_FILL_UP_DROP = 2;    // Pkts dropped due to write buffer's ack fifo filling up
  WRITE_BUFFER_ACK_FULL_DROP    = 3;    // Pkts dropped due to write buffer's ack fifo full
  WRITE_BUFFER_FULL_DROP        = 4;    // Pkts dropped due to write buffer filling up
  CONTROL_FIFO_FULL_DROP        = 5;    // Pkts dropped due to control fifo full
}

message OflowFifoDropStatsEntry {
  OflowFifoDropType Type  = 1;
  uint32            Count = 2;
}

message OflowFifoDropStats {
  repeated OflowFifoDropStatsEntry Entry = 1;
}

// OflowFifoStats captures instantaneous counters at the overflow fifo interface
message OflowFifoStats {
  uint32             SopCountIn  = 1;    // Count of start-of-packets in
  uint32             EopCountIn  = 2;    // Count of end-of-packets in
  uint32             SopCountOut = 3;    // Count of start-of-packets out
  uint32             EopCountOut = 4;    // Count of end-of-packets out
  OflowFifoDropStats DropCounts  = 5;    // Drop counts
}

enum BufferDropReasons {
   INTRINSIC_DROP            = 0;     // Pkts dropped due to intrinsic drop bit being set
   DISCARDED                 = 1;     // Pkts dropped due to error
   ADMITTED                  = 2;     // Errored pkts admitted to buffering
   OUT_OF_CELLS_DROP         = 3;     // Pkts dropped due to cell exhaustion (first cell)
   OUT_OF_CELLS_DROP_2       = 4;     // Pkts dropped due to cell exhaustion (subsequent cell)
   OUT_OF_CREDIT_DROP        = 5;     // Pkts dropped due to cell-credits exhaustion
   TRUNCATION_DROP           = 6;     // Pkts dropped due to size bigger than the configured MTU
   PORT_DISABLED_DROP        = 7;     // Pkts dropped due to port disable
   COPY_TO_CPU_TAIL_DROP     = 8;     // Copy-to-cpu pkts tail dropped
   SPAN_TAIL_DROP            = 9;     // Span pkts tail dropped
   MIN_SIZE_VIOLATION_DROP   = 10;    // Pkts dropped due to lesser than min size
   ENQUEUE_ERROR_DROP        = 11;    // Pkts dropped due to enqueue to reserved queues
   INVALID_PORT_DROP         = 12;    // Pkts dropped due to destined to invalid ports
   INVALID_OUTPUT_QUEUE_DROP = 13;    // Pkts dropped due to destined to invalid output queues
}

message BufferDropStatsEntry {
  BufferDropReasons Reasons   = 1;    // drop reasons
  uint32            DropCount = 2;    // drop count for multiple drop reasons
}

message BufferDropStats {
  repeated BufferDropStatsEntry StatsEntries = 1;
}

message BufferStats {
  uint32          SopCountIn  = 1;    // Count of start-of-packets in
  uint32          EopCountIn  = 2;    // Count of end-of-packets in
  uint32          SopCountOut = 3;    // Count of start-of-packets out
  uint32          EopCountOut = 4;    // Count of end-of-packets out
  BufferDropStats DropCounts  = 5;    // Drop counts
}

enum PacketBufferPortType {
  PACKET_BUFFER_PORT_TYPE_DMA    = 0;
  PACKET_BUFFER_PORT_TYPE_P4IG   = 1;
  PACKET_BUFFER_PORT_TYPE_P4EG   = 2;
  PACKET_BUFFER_PORT_TYPE_UPLINK = 3;
}

message PacketBufferPort {
  PacketBufferPortType PortType = 1;
  uint32               PortNum  = 2;
}

message QosInputOflowQueueStats {
  uint64 GoodPktsIn    = 1;    // Cumulative count of good packets in
  uint64 GoodPktsOut   = 2;    // Cumulative count of good packets out
  uint64 ErroredPktsIn = 3;    // Cumulative count of errored packets in
  uint32 FifoDepth     = 4;    // Instantaneous Overflow fifo depth in bytes
  uint32 MaxFifoDepth  = 5;    // Maximum Overflow fifo depth observed in bytes
}

message QosInputQueueStats {
  uint32                  InputQueueIdx   = 1;
  QosInputOflowQueueStats OflowFifoStats  = 2;    // Overflow fifo stats
  uint32                  BufferOccupancy = 3;    // Instantaneous buffer occupancy in bytes
  uint32                  PeakOccupancy   = 4;    // Peak buffer occupancy in bytes
  uint64                  PortMonitor     = 5;    // port monitor counter
}

message QosOutputQueueStats {
  uint32 OutputQueueIdx = 1;
  uint32 QueueDepth     = 2;    // Instantaneous output queue depth in pkts
  uint64 PortMonitor    = 3;    // port monitor counter
}

message QosQueueStats {
  repeated QosInputQueueStats  InputQueueStats  = 1;    // List of input queue statistics per each input queue
  repeated QosOutputQueueStats OutputQueueStats = 2;    // List of output queue statistics per each output queue
}

message PacketBufferPortStats {
  PacketBufferPort PacketBufferPort = 1;    // Port identifier
  BufferStats      BufferStats      = 2;    // PBC block statistics
  OflowFifoStats   OflowFifoStats   = 3;    // Overflow fifo statistics
  QosQueueStats    QosQueueStats    = 4;    // QoS queue statistics
}

// PacketBufferStats captures all the statistics of the packet buffering module
message PacketBufferStats {
  repeated PacketBufferPortStats PortStats = 1; // list of stats, one per packet buffer port
}

message PbStatsGetResponse {
  types.ApiStatus   ApiStatus = 1;
  PacketBufferStats PbStats   = 2;
}

message MemTrackSpec {
  uint32 AllocId = 1; // allocation id stats are requested for (0xFFFFFFFF for all)
}

// operational status of memory tracker object
message MemTrackStatus {
}

// stats per memory tracker object
message MemTrackStats {
  uint32 NumAllocs = 1; // number of allocations with alloc_id
  uint32 NumFrees  = 2; // number of frees with alloc_id
}

// MemTrackGetRequest is request msg with allocation id that info is requested for
message MemTrackGetRequest {
  MemTrackSpec Spec = 1; // qualifiers
}

// MemTrackGetResponse captures debug information per allocation id
message MemTrackGetResponse {
  types.ApiStatus ApiStatus = 1;
  MemTrackSpec    Spec      = 2; // spec (aka. identifier of mem track object)
  MemTrackStatus  Status    = 3; // oper status, if any
  MemTrackStats   Stats     = 4; // statistics
}

message HeapStats {
  uint32 NumArenaBytesAlloc   = 1;
  uint32 NumFreeBlocks        = 2;
  uint32 NumFastBinFreeBlocks = 3;
  uint32 NumMmapBlocksAlloc   = 4;
  uint32 NumMmapBytesAlloc    = 5;
  uint32 MaxBlocksAlloc       = 6;
  uint32 NumFastBinFreeBytes  = 7;
  uint32 NumBytesAlloc        = 8;
  uint32 NumFreeBytes         = 9;
  uint32 ReleasableFreeBytes  = 10;
}

message HeapGetResponse {
  types.ApiStatus ApiStatus = 1;
  HeapStats       Stats     = 2;
}

message MeterStatsGetRequest {
  uint32 StatsIndexLow  = 1;
  uint32 StatsIndexHigh = 2;
}

message MeterStatistics {
  uint32 StatsIndex = 1;
  uint64 TxBytes    = 2;
  uint64 RxBytes    = 3;
}

message MeterStatsGetResponse {
  types.ApiStatus          ApiStatus = 1;
  repeated MeterStatistics Stats     = 2;
}

message SessionStats {
  uint32 StatsIndex         = 1;
  uint64 InitiatorFlowPkts  = 2;
  uint64 InitiatorFlowBytes = 3;
  uint64 ResponderFlowPkts  = 4;
  uint64 ResponderFlowBytes = 5;
}

message SessionStatsGetRequest {
  uint32 StatsIndexLow  = 1;
  uint32 StatsIndexHigh = 2;
}

message SessionStatsGetResponse {
  types.ApiStatus       ApiStatus = 1;
  repeated SessionStats Stats     = 2;
}

message FteTableStats {
}

message FteApiStats {
}

message FteStatsGetResponse {
  types.ApiStatus ApiStatus  = 1;
  FteTableStats   TableStats = 2;
  FteApiStats     ApiStats   = 3;
}

message FteStatsClearRequest {
  bool ApiStats   = 1;
  bool TableStats = 2;
}

message FteStatsClearResponse {
  types.ApiStatus ApiStatus  = 1;
}

message QueueCredit {
  uint32 Queue  = 1;
  uint32 Credit = 2;
}

message PortQueueCredit {
  uint32               Port        = 1;
  repeated QueueCredit QueueCredit = 2;
}

message QueueCreditsGetResponse {
  types.ApiStatus          ApiStatus       = 1;
  repeated PortQueueCredit PortQueueCredit = 2;
}

enum MappingDumpType {
  MAPPING_DUMP_LOCAL     = 0;
  MAPPING_DUMP_REMOTE_L2 = 1;
  MAPPING_DUMP_REMOTE_L3 = 2;
}

message L3HWMappingKey {
  uint32          VPCId  = 1;
  types.IPAddress IPAddr = 2;
}

message L2HWMappingKey {
  uint32 SubnetId = 1;
  uint64 MACAddr  = 2;
}

message HWMappingKey {
  oneof keyinfo {
    L3HWMappingKey IPKey  = 1;
    L2HWMappingKey MACKey = 2;
  }
}

message MappingDumpFilter {
  HWMappingKey    Key  = 1;
  MappingDumpType Type = 2;
}

message CommandUUID {
  bytes Id = 1;
}

enum Command {
  CMD_NONE                  = 0;
  CMD_MAPPING_DUMP          = 1;
  CMD_INTR_DUMP             = 2;
  CMD_INTR_CLEAR            = 3;
  CMD_API_ENGINE_STATS_DUMP = 4;
  CMD_FLOW_DUMP             = 5;
  CMD_STORE_STATS_DUMP      = 6;
  CMD_NAT_PB_DUMP           = 7;
  CMD_NACL_DUMP             = 8;
  CMD_PORT_FSM_DUMP         = 9;
}

message CommandMessage {
  Command             Command    = 1;
  google.protobuf.Any CommandMsg = 2;
}

message AacsRequest {
  uint32 AacsServerPort = 1;
}

message SlabSpec {
  string Name             = 1; // name of the slab
  uint32 Id               = 2; // slab identifier
  uint32 ElementSize      = 3; // size of each element
  uint32 ElementsPerBlock = 4; // # of elements per block
  bool   ThreadSafe       = 5; // thread safe allocation/free, if TRUE
  bool   GrowOnDemand     = 6; // grow the slab on demand, if TRUE
  bool   DelayDelete      = 7; // delay delete each element, if TRUE, instead of freeing immediately
  bool   ZeroOnAllocation = 8; // zero allocated mem. if TRUE
  uint32 RawBlockSize     = 9; // raw block size
}

message SlabStatus {
}

message SlabStats {
  uint32 NumElementsInUse = 1; // number of elements in use
  uint32 NumAllocs        = 2; // number of alloc operations
  uint32 NumFrees         = 3; // number of free operations
  uint32 NumAllocErrors   = 4; // number of alloc errors
  uint32 NumBlocks        = 5; // number of blocks allocated
}

message Slab {
  SlabSpec   Spec   = 1;
  SlabStatus Status = 2;
  SlabStats  Stats  = 3;
}

message SlabGetResponse {
  types.ApiStatus ApiStatus = 1;
  repeated Slab   Slab      = 2;
}

enum IntPortDplxMode {
  HALF_DUPLEX     = 0;
  FULL_DUPLEX     = 1;
}

message InternalPortStatus {
  pds.IfStatus        PortStatus     = 1;
  types.PortSpeed     PortSpeed      = 2;
  IntPortDplxMode     PortMode       = 3;
  bool                PortTxPaused   = 4;
  bool                PortFlowCtrl   = 5;
}

message InternalPortStats {
  uint64  InGoodOctets   = 1;
  uint64  OutOctets      = 2;
  uint32  InBadOctets    = 3;
  uint32  InUnicast      = 4;
  uint32  Inbroadcast    = 5;
  uint32  Inmulticast    = 6;
  uint32  InPause        = 7;
  uint32  InUndersize    = 8;
  uint32  InFragments    = 9;
  uint32  InOversize     = 10;
  uint32  InJabber       = 11;
  uint32  InRxErr        = 12;
  uint32  InFcsErr       = 13;
  uint32  OutUnicast     = 14;
  uint32  OutBroadcast   = 15;
  uint32  OutMulticast   = 16;
  uint32  OutFcsErr      = 17;
  uint32  OutPause       = 18;
  uint32  OutCollisions  = 19;
  uint32  OutDeferred    = 20;
  uint32  OutSingle      = 21;
  uint32  OutMultiple    = 22;
  uint32  OutExcessive   = 23;
  uint32  OutLate        = 24;
}

message InternalPortResponse {
  uint32              PortNumber     = 1;        // Port number
  string              PortDescr      = 2;        // Port Description
  InternalPortStatus  InternalStatus = 3;        // Internal port status
  InternalPortStats   Stats          = 4;        // Internal ports stats
}

message InternalPortResponseMsg {
  repeated InternalPortResponse Response = 1;
}

message InternalPortRequest {
  uint32  PortNumber     = 1;
}

message InternalPortRequestMsg {
  repeated InternalPortRequest  Request = 1;
}

message FlowStatsSummaryResponse {
  types.ApiStatus ApiStatus            = 1;
  uint64          NumTCPv4Sessions     = 2;
  uint64          NumUDPv4Sessions     = 3;
  uint64          NumICMPv4Sessions    = 4;
  uint64          NumOtherIPv4Sessions = 5;
  uint64          NumTCPv6Sessions     = 6;
  uint64          NumUDPv6Sessions     = 7;
  uint64          NumICMPv6Sessions    = 8;
  uint64          NumOtherIPv6Sessions = 9;
  uint64          NumL2Sessions        = 10;
  uint64          NumSessionErrors     = 11;
}

message DataPathAssistStatsResponse {
  types.ApiStatus ApiStatus                   = 1;
  uint64          NumPktsRx                   = 2;
  uint64          NumDrops                    = 3;
  uint64          NumDHCPPktsRx               = 4;
  uint64          NumDHCPPktsTxtoProxyServer  = 5;
  uint64          NumDHCPPktsTxtoRelayServer  = 6;
  uint64          NumDHCPPktsTxtoRelayClient  = 7;
  uint64          NumDHCPDrops                = 8;
  uint64          NumARPPktsRx                = 9;
  uint64          NumARPRepliesSent           = 10;
  uint64          NumARPDrops                 = 11;
  uint64          NumSessionsLearned          = 12;
  uint64          NumSessionsAged             = 13;
}
