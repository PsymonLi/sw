//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for IP mappings
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";
import "meta/meta.proto";
import "types.proto";

service MappingSvc {
  rpc MappingCreate (MappingRequest) returns (MappingResponse) {}
  rpc MappingUpdate (MappingRequest) returns (MappingResponse) {}
  rpc MappingGet (MappingGetRequest) returns (MappingGetResponse) {}
  rpc MappingDelete (MappingDeleteRequest) returns (MappingDeleteResponse) {}
}

message L3MappingKey {
  // virtual private cloud mapping belongs to
  uint32 VPCId           = 1 [(gogoproto.moretags) = "meta:mandatory"];
  // private/overlay IP of the mapping
  types.IPAddress IPAddr = 2;
}

message L2MappingKey {
  // subnet id of this MAC
  uint32 SubnetId = 1;
  // MAC address of this mapping
  uint64 MACAddr  = 2;
}

// MappingKey uniquley identifies the IP in the entire fabric
message MappingKey {
  oneof keyinfo {
    // IP mapping key
    L3MappingKey IPKey = 1;
    // MAC mapping key
    L2MappingKey MACKey = 2;
  }
}

// MappingSpec captures configuration of each mapping
// NOTE: Mapping is either on the local host/TEP or remote TEP
message MappingSpec {
  // key to identify the mapping
  MappingKey          Id             = 1;
  // subnet this mapping is in
  uint32              SubnetId       = 2 [(gogoproto.moretags) = "meta:mandatory"];
  // dstinfo is expected to empty for local mappings
  oneof dstinfo {
      // if IP is that of local vnic, corresponding vnic id
      uint32          VnicId         = 3;
      // Tunnel ID of the remote TEP for remote mapping
      uint32          TunnelId       = 4;
      // overlay nexthop/TEP group for remote mappings
      uint32          NexthopGroupId = 5;
  }
  // overlay MAC address of this mapping
  uint64              MACAddr        = 6 [(gogoproto.moretags) = "meta:mandatory"];
  // fabric encap information specific to this mapping, if any
  types.Encap         Encap          = 7 [(gogoproto.moretags) = "meta:mandatory"];
  // public IP, if overlay IP has corresponding public IP
  types.IPAddress     PublicIP       = 8;
  // provider/underlay IP corresponding to the overlay IP, if any
  types.IPAddress     ProviderIp     = 9;
  // tag/label/security group of this IP mapping, these tags/labels/SGs can be
  // used// in defining security policy rules
  // NOTE:
  // 1. service tag 0 is invalid
  // 2. a maximum of 5 tags are supported
  repeated uint32     Tags           = 10;
}

// operational status of a mapping
message MappingStatus {
}

// stats of a mapping
message MappingStats {
}

// mapping object
message Mapping {
  meta.TypeMeta TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta  ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  MappingSpec   Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  MappingStatus Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  MappingStats  Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// mapping create and update request
message MappingRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt      BatchCtxt = 1;
  repeated MappingSpec Request   = 2;
}

// mapping create and update response
message MappingResponse {
  types.ApiStatus        ApiStatus = 1;
  repeated MappingStatus Response  = 2;
}

// mapping get request
message MappingGetRequest {
  repeated MappingKey Id = 1;
}

// mapping get response
message MappingGetResponse {
  types.ApiStatus  ApiStatus = 1;
  repeated Mapping Response = 2;
}

// mapping dump request
message MappingDumpRequest {
  int64    CId           = 1;
  repeated MappingKey Id = 2;
}

// mapping delete request
message MappingDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt     BatchCtxt = 1;
  repeated MappingKey Id        = 2;
}

// mapping delete response
message MappingDeleteResponse {
  repeated types.ApiStatus ApiStatus = 1;
}
