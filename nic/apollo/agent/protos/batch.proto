//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for batch APIs
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "meta/meta.proto";
import "types.proto";

service BatchSvc {
  rpc BatchStart (BatchSpec) returns (BatchStatus) {}
  rpc BatchCommit(types.BatchCtxt) returns (types.Empty) {}
  rpc BatchAbort(types.BatchCtxt) returns (types.Empty) {}
}

// batch configuration
message BatchSpec {
  // epoch number for this batched API transaction
  uint32 epoch = 1 [(gogoproto.moretags) = "meta:mandatory"];
}

// operational status of the batch
message BatchStatus {
  // status of the BatchStart() request
  types.ApiStatus ApiStatus    = 1;
  // batch context to be used in all API calls in this batch
  types.BatchCtxt BatchContext = 2;
}

// Batch object
message Batch {
  meta.TypeMeta TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta  ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  BatchSpec     Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  BatchStatus   Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
}
