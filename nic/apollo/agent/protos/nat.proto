//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for Network Address Translation (NAT)
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "meta/meta.proto";
import "types.proto";

service NatSvc {
  rpc NatPolicyCreate (NatPolicyRequest) returns (NatPolicyResponse) {}
  rpc NatPolicyUpdate (NatPolicyRequest) returns (NatPolicyResponse) {}
  rpc NatPolicyGet (NatPolicyGetRequest) returns (NatPolicyGetResponse) {}
  rpc NatPolicyDelete (NatPolicyDeleteRequest) returns (NatPolicyDeleteResponse) {}
  rpc NatPortBlockCreate (NatPortBlockRequest) returns (NatPortBlockResponse) {}
  rpc NatPortBlockDelete (NatPortBlockDeleteRequest) returns (NatPortBlockResponse) {}
  rpc NatPortBlockPolicyGet (NatPortBlockGetRequest) returns (NatPortBlockGetResponse) {}
}

message NatPool {
  repeated types.Address Addresses = 1 [(gogoproto.moretags) = "meta:mandatory"];
  types.PortRange        Ports     = 2;
}

// types of NAT actions supported
enum NatAction {
  NAT_TYPE_NONE                 = 0;
  // Address only static NAT
  NAT_TYPE_STATIC_ADDRESS       = 1;
  // NAPT - Address and Port Translation
  NAT_TYPE_DYNAMIC_ADDRESS_PORT = 2;
}

message NatRuleAction {
  // source NAT action
  NatAction SrcNatAction = 1;
  // NAT pool to use
  NatPool   NatPool      = 2;
}

message NatRule {
  // unique NAT rule id
  uint32          Id     = 1 [(gogoproto.moretags) = "meta:mandatory"];
  // rule match criteria
  types.RuleMatch Match  = 2;
  // NAT rule action
  NatRuleAction   Action = 3 [(gogoproto.moretags) = "meta:mandatory"];
}

message NatPolicySpec {
  // unique identifier of NAT policy
  uint32                Id         = 1 [(gogoproto.moretags) = "meta:mandatory"];
  // IPv4 or IPv6 policy
  types.IPAF            AddrFamily = 2 [(gogoproto.moretags) = "meta:mandatory"];
  // direction in which the policy should be enforced
  types.RuleDir         Direction  = 3 [(gogoproto.moretags) = "meta:mandatory"];
  // list of NAT rules
  repeated NatRule      Rules      = 4 [(gogoproto.moretags) = "meta:mandatory"];
}

// operational status of NAT policy, if any
message NatPolicyStatus {
}

// stats of NAT policy, if any
message NatPolicyStats {
}

// NAT policy object
message NatPolicy {
  meta.TypeMeta   TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta    ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  NatPolicySpec   Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  NatPolicyStatus Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  NatPolicyStats  Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// NAT policy create and update request
message NatPolicyRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt        BatchCtxt = 1;
  repeated NatPolicySpec Request   = 2;
}

// NAT policy create and update response
message NatPolicyResponse {
  types.ApiStatus          ApiStatus = 1;
  repeated NatPolicyStatus Response  = 2;
}

// NAT policy get request
message NatPolicyGetRequest {
  repeated uint32 Id = 1;
}

// NAT policy get response
message NatPolicyGetResponse {
  types.ApiStatus    ApiStatus = 1;
  repeated NatPolicy Response  = 2;
}

// NAT policy delete request
message NatPolicyDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  repeated uint32 Id        = 2;
}

// NAT policy delete response
message NatPolicyDeleteResponse {
  repeated types.ApiStatus ApiStatus = 1;
}

// NAT port block specification
message NatPortBlockSpec {
  // unique key identifying the port block
  uint32          Id         = 1;
  // VPC identifier this port block is tied to
  uint32          VpcId      = 2;
  // NAT address to be used with this port block
  types.Address   NatAddress = 3;
  // range of ports to be use for NAT
  types.PortRange Ports      = 4;
}

// operational status of NAT port block
message NatPortBlockStatus {
}

// stats of NAT port block, if any
message NatPortBlockStats {
  // number of NAT ports in use
  uint32 InUseCount   = 1;
  // number of sessions using the port block
  uint32 SessionCount = 2;
}

// NAT port block object
message NatPortBlock {
  meta.TypeMeta      TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta       ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  NatPortBlockSpec   Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  NatPortBlockStatus Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  NatPortBlockStats  Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// NAT port block create and update request
message NatPortBlockRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt           BatchCtxt = 1;
  repeated NatPortBlockSpec Request   = 2;
}

// NAT port block create and update response
message NatPortBlockResponse {
  types.ApiStatus             ApiStatus = 1;
  repeated NatPortBlockStatus Response  = 2;
}

// NAT port block get request
message NatPortBlockGetRequest {
  repeated uint32 Id = 1;
}

// NAT port block get response
message NatPortBlockGetResponse {
  types.ApiStatus       ApiStatus = 1;
  repeated NatPortBlock Response  = 2;
}

// NAT port block delete request
message NatPortBlockDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  repeated uint32 Id        = 2;
}

// NAT port block delete response
message NatPortBlockDeleteResponse {
  repeated types.ApiStatus ApiStatus = 1;
}
