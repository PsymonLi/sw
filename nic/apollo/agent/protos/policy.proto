//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for policies
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";
import "meta/meta.proto";
import "types.proto";

service SecurityPolicySvc {
  // security policy configuration
  rpc SecurityPolicyCreate (SecurityPolicyRequest) returns (SecurityPolicyResponse) {}
  rpc SecurityPolicyUpdate (SecurityPolicyRequest) returns (SecurityPolicyResponse) {}
  rpc SecurityPolicyGet (SecurityPolicyGetRequest) returns (SecurityPolicyGetResponse) {}
  rpc SecurityPolicyDelete (SecurityPolicyDeleteRequest) returns (SecurityPolicyDeleteResponse) {}

  // security profile configuration
  rpc SecurityProfileCreate (SecurityProfileRequest) returns (SecurityProfileResponse) {}
  rpc SecurityProfileUpdate (SecurityProfileRequest) returns (SecurityProfileResponse) {}
  rpc SecurityProfileGet (SecurityProfileGetRequest) returns (SecurityProfileGetResponse) {}
  rpc SecurityProfileDelete (SecurityProfileDeleteRequest) returns (SecurityProfileDeleteResponse) {}
}

// Security rule action is one of the below
enum SecurityRuleAction {
  SECURITY_RULE_ACTION_NONE  = 0;
  SECURITY_RULE_ACTION_ALLOW = 1;
  SECURITY_RULE_ACTION_DENY  = 2;
}

// SecurityRule is a single rule in the security policy
message SecurityRule {
  // stateful rule results in flow/session creation whereas stateless rule
  // will not result in flow creation
  bool               Stateful = 1 [(gogoproto.moretags) = "meta:mandatory"];
  // rule match criteria
  types.RuleMatch    Match    = 2;
  // priority of this rule (lower the numeric value, higher the priority is)
  uint32             Priority = 3 [(gogoproto.moretags) = "meta:range:0-1022"];
  // action to take when this rule is matched
  SecurityRuleAction Action   = 4 [(gogoproto.moretags) = "meta:mandatory"];
}

// security policy configuration
message SecurityPolicySpec {
  // unique identifier of security policy
  uint32                Id              = 1 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // IPv4 or IPv6 policy
  types.IPAF            AddrFamily      = 2 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // direction in which the policy should be enforced
  types.RuleDir         Direction       = 3 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // DefaultFWAction is the action taken by the firewall when SG policies are
  // configured on vnic but no rule is hit. Similarly, when NACLs are configured
  // on a subnet and no rule is hit, this action is taken by the firewall
  // if this attribute is not set, by default "allow" action is assumed
  SecurityRuleAction    DefaultFWAction = 4 [(gogoproto.moretags) = "meta:default=SECURITY_RULE_ACTION_ALLOW"];
  // list of security rules
  repeated SecurityRule Rules           = 5 [(gogoproto.moretags) = "meta:mandatory"];
}

// operational status of security policy, if any
message SecurityPolicyStatus {
}

// stats of security policy, if any
message SecurityPolicyStats {
}

// security policy object
message SecurityPolicy {
  meta.TypeMeta        TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta         ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  SecurityPolicySpec   Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  SecurityPolicyStatus Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  SecurityPolicyStats  Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// security policy create and update request
message SecurityPolicyRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt             BatchCtxt = 1;
  repeated SecurityPolicySpec Request   = 2;
}

// security policy create and update response
message SecurityPolicyResponse {
  types.ApiStatus               ApiStatus = 1;
  repeated SecurityPolicyStatus Response  = 2;
}

// security policy get request
message SecurityPolicyGetRequest {
  repeated uint32 Id = 1;
}

// security policy get response
message SecurityPolicyGetResponse {
  types.ApiStatus         ApiStatus = 1;
  repeated SecurityPolicy Response  = 2;
}

// security policy delete request
message SecurityPolicyDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  repeated uint32 Id        = 2;
}

// security policy delete response
message SecurityPolicyDeleteResponse {
  repeated types.ApiStatus ApiStatus = 1;
}

// security profile configuration
// NOTE:
// 1. currently security profile object is global and only a singleton object,
//    any attempt to create multiple objects will be treated as an error
// 2. if no object is created, indicated default values will be used
message SecurityProfileSpec {
  // unique identifier of security profile
  uint32             Id                  = 1 [(gogoproto.moretags) = "meta:mandatory"];

  // ConnTrackEn, if set to true, will enable full connection tracking
  bool               ConnTrackEn         = 2 [(gogoproto.moretags) = "meta:default=false"];

  // DefaultFWAction is the action taken by the smartnic when no policies are
  // configured on the subnet or vnic (note that this case is different from
  // having a policy configured but no rules are configured in that policy)
  SecurityRuleAction DefaultFWAction     = 3 [(gogoproto.moretags) = "meta:default=SECURITY_RULE_ACTION_ALLOW"];

  // timeouts for established sessions per TCP/UDP/ICMP and other protocols
  uint32             TCPIdleTimeout      = 4 [(gogoproto.moretags) = "meta:range:5-86400, meta:default=600"];
  uint32             UDPIdleTimeout      = 5 [(gogoproto.moretags) = "meta:range:5-86400, meta:default=120"];
  uint32             ICMPIdleTimeout     = 6 [(gogoproto.moretags) = "meta:range:5-86400, meta:default=15"];
  uint32             OtherIdleTimeout    = 7 [(gogoproto.moretags) = "meta:range:30-86400, meta:default=90"];

  // TCP specific timeouts
  // TCPCnxnSetupTimeout is the maximum allowed time since first SYN seen to
  // 3-way handshake completion, session gets cleaned up if 3-way handshake is
  // not completed and session moves to ESTABLISHED state by then
  uint32             TCPCnxnSetupTimeout = 8 [(gogoproto.moretags) = "meta:range:1-60, meta:default=10"];
  // TCPHalfCloseTimeout is the maximum allowed time since first FIN seen to
  // 3/4way close, session gets cleaned up if this timer elapses.
  uint32             TCPHalfCloseTimeout = 9 [(gogoproto.moretags) = "meta:range:1-172800, meta:default=120"];
  // TCPCloseTimeout is wait time since FIN is seen from *both* sides (or RST)
  // before cleaning up the session
  uint32             TCPCloseTimeout     = 10 [(gogoproto.moretags) = "meta:range:1-300, meta:default=15"];

  // timeouts applicable to sessions installed with drop action
  uint32             TCPDropTimeout      = 11 [(gogoproto.moretags) = "meta:range:1-300, meta:default=90"];
  uint32             UDPDropTimeout      = 12 [(gogoproto.moretags) = "meta:range:1-172800, meta:default=60"];
  uint32             ICMPDropTimeout     = 13 [(gogoproto.moretags) = "meta:range:1-300, meta:default=30"];
  uint32             OtherDropTimeout    = 14 [(gogoproto.moretags) = "meta:range:1-300, meta:default=60"];
}

// operational status of security profile, if any
message SecurityProfileStatus {
}

// stats of security profile, if any
message SecurityProfileStats {
}

// security profile object
message SecurityProfile {
  meta.TypeMeta         TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta          ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  SecurityProfileSpec   Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  SecurityProfileStatus Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  SecurityProfileStats  Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// security profile create and update request
message SecurityProfileRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt              BatchCtxt = 1;
  repeated SecurityProfileSpec Request   = 2;
}

// security profile create and update response
message SecurityProfileResponse {
  types.ApiStatus                ApiStatus = 1;
  repeated SecurityProfileStatus Response  = 2;
}

// security profile get request
message SecurityProfileGetRequest {
  repeated uint32 Id = 1;
}

// security profile get response
message SecurityProfileGetResponse {
  types.ApiStatus          ApiStatus = 1;
  repeated SecurityProfile Response  = 2;
}

// security profile delete request
message SecurityProfileDeleteRequest {
  // optional batch context, if this request is part of batch of API calls
  types.BatchCtxt BatchCtxt = 1;
  repeated uint32 Id        = 2;
}

// security profile delete response
message SecurityProfileDeleteResponse {
  repeated types.ApiStatus ApiStatus = 1;
}
