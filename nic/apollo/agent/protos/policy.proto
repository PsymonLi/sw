//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for policies
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";
import "meta/meta.proto";
import "types.proto";

service SecurityPolicySvc {
  rpc SecurityPolicyCreate (SecurityPolicyRequest) returns (SecurityPolicyResponse) {}
  rpc SecurityPolicyUpdate (SecurityPolicyRequest) returns (SecurityPolicyResponse) {}
  rpc SecurityPolicyGet (SecurityPolicyGetRequest) returns (SecurityPolicyGetResponse) {}
  rpc SecurityPolicyDelete (SecurityPolicyDeleteRequest) returns (SecurityPolicyDeleteResponse) {}
}

// Security rule action is one of the below
enum SecurityRuleAction {
  SECURITY_RULE_ACTION_NONE   = 0;
  SECURITY_RULE_ACTION_ALLOW  = 1;
  SECURITY_RULE_ACTION_DENY   = 2;
}

// SecurityRule is a single rule in the security policy
message SecurityRule {
  // stateful rule results in flow/session creation whereas stateless rule
  // will not result in flow creation
  bool               Stateful = 1;
  // rule match criteria
  types.RuleMatch    Match    = 2;
  // priority of this rule (lower the numeric value, higher the priority is)
  uint32             Priority = 3;
  // action to take when this rule is matched
  SecurityRuleAction Action   = 4;
}

// security policy configuration
message SecurityPolicySpec {
  // unique identifier of security policy
  uint32                Id         = 1 [(gogoproto.moretags) = "meta:mandatory"];
  // IPv4 or IPv6 policy
  types.IPAF            AddrFamily = 2 [(gogoproto.moretags) = "meta:mandatory"];
  // direction in which the policy should be enforced
  types.RuleDir         Direction  = 3 [(gogoproto.moretags) = "meta:mandatory"];
  // list of security rules
  repeated SecurityRule Rules      = 4 [(gogoproto.moretags) = "meta:mandatory"];
}

// operational status of security policy, if any
message SecurityPolicyStatus {
}

// stats of security policy, if any
message SecurityPolicyStats {
}

// security policy object
message SecurityPolicy {
  meta.TypeMeta        TypeMeta = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
  meta.ObjMeta         ObjMeta  = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = "meta,omitempty"];
  SecurityPolicySpec   Spec     = 3 [(gogoproto.jsontag) = "spec,omitempty"];
  SecurityPolicyStatus Status   = 4 [(gogoproto.jsontag) = "status,omitempty"];
  SecurityPolicyStats  Stats    = 5 [(gogoproto.jsontag) = "stats,omitempty"];
}

// security policy create and update request
message SecurityPolicyRequest {
  repeated SecurityPolicySpec Request = 1;
}

// security policy create and update response
message SecurityPolicyResponse {
  types.ApiStatus ApiStatus = 1;
  repeated SecurityPolicyStatus Response  = 2;
}

// security policy get request
message SecurityPolicyGetRequest {
  repeated uint32 Id = 1;
}

// security policy get response
message SecurityPolicyGetResponse {
  types.ApiStatus         ApiStatus = 1;
  repeated SecurityPolicy Response  = 2;
}

// security policy delete request
message SecurityPolicyDeleteRequest {
  repeated uint32 Id = 1;
}

// security policy delete response
message SecurityPolicyDeleteResponse {
  repeated types.ApiStatus ApiStatus = 1;
}
