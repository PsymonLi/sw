//----------------------------------------------------------------------------
//
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
//----------------------------------------------------------------------------

#include <gtest/gtest.h>
#include "nic/sdk/asic/port.hpp"
#include "nic/apollo/test/scale/test.hpp"
#include "nic/apollo/test/scale/pkt.hpp"
#include "nic/apollo/api/include/pds_batch.hpp"
#include "nic/apollo/api/include/pds_device.hpp"
#include "nic/sdk/model_sim/include/lib_model_client.h"
#include "nic/apollo/p4/include/artemis_defines.h"

#define TESTAPP_PKT_META_HDR_SIZE \
            (ARTEMIS_P4_TO_ARM_HDR_SZ + CAPRI_RXDMA_INTRINSIC_HDR_SZ \
            - CAPRI_P4_INTRINSIC_HDR_SZ + P4PLUS_CLASSIC_NIC_HDR_SZ)

// Vxlan encap: vnid 1
uint8_t g_vnet1_vnet_out_input[] = {
    0x00, 0x00, 0x00, 0x40, 0x08, 0x02, 0x00, 0x00,
    0x00, 0x40, 0x08, 0x01, 0x81, 0x00, 0x00, 0x01,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0x76, 0xad, 0x02, 0x00,
    0x00, 0x01, 0x02, 0x00, 0x00, 0x09, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0x88, 0x66, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet1_vnet_out_output_cps_path[] = {
    0x00, 0x00, 0x00, 0x40, 0x08, 0x02, 0x00, 0x00,
    0x00, 0x40, 0x08, 0x01, 0x81, 0x00, 0x00, 0x01,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0x76, 0xad, 0x02, 0x00,
    0x00, 0x01, 0x02, 0x00, 0x00, 0x09, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0x88, 0x66, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet1_vnet_out_output[] = {
    0x00, 0x00, 0xc0, 0xc0, 0x00, 0x02, 0x00, 0x02,
    0x01, 0x00, 0x00, 0x01, 0x08, 0x00, 0x45, 0x00,
    0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x40, 0x11,
    0x74, 0x46, 0x01, 0x20, 0x00, 0x00, 0x01, 0x20,
    0x04, 0x00, 0xf1, 0xf2, 0x12, 0xb5, 0x00, 0x54,
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x08, 0x02,
    0x00, 0x00, 0x00, 0x40, 0x08, 0x01, 0x08, 0x00,
    0x45, 0x00, 0x00, 0x36, 0x00, 0x01, 0x00, 0x00,
    0x40, 0x11, 0x76, 0xad, 0x02, 0x00, 0x00, 0x01,
    0x02, 0x00, 0x00, 0x09, 0x00, 0x64, 0x00, 0x64,
    0x00, 0x22, 0x88, 0x66, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet60_st_out_v4_input[] = {
    0x00, 0x00, 0x0f, 0x00, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0x00, 0x08, 0x01, 0x81, 0x00, 0x00, 0x3c,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb8, 0xb5, 0x02, 0x00,
    0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0xca, 0x6e, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet60_st_out_v4_output_cps_path[] = {
    0x00, 0x00, 0x0f, 0x00, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0x00, 0x08, 0x01, 0x81, 0x00, 0x00, 0x3c,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb8, 0xb5, 0x02, 0x00,
    0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0xca, 0x6e, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet60_st_out_v6inv4_output[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
    0x01, 0x00, 0x00, 0x01, 0x08, 0x00, 0x45, 0x00,
    0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x11,
    0x74, 0x9f, 0x01, 0x20, 0x03, 0xb0, 0x01, 0x00,
    0x00, 0x03, 0xc3, 0x60, 0x12, 0xb5, 0x00, 0x68,
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x27,
    0x10, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x08, 0x02,
    0x00, 0x00, 0x0f, 0x00, 0x08, 0x01, 0x86, 0xdd,
    0x60, 0x00, 0x00, 0x00, 0x00, 0x22, 0x11, 0x40,
    0x20, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01,
    0x22, 0x22, 0x00, 0x00, 0xf1, 0xd0, 0xd1, 0xd0,
    0xc0, 0x00, 0x01, 0x00, 0xc0, 0x00, 0x00, 0xc0,
    0x00, 0x64, 0x00, 0x64, 0x00, 0x22, 0xca, 0x6e,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30
};

uint8_t g_vnet62_vnet_out_v4_input[] = {
    0x00, 0x00, 0x0f, 0x80, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0x80, 0x08, 0x01, 0x81, 0x00, 0x00, 0x3e,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0x76, 0xad, 0x02, 0x00,
    0x00, 0x01, 0x02, 0x00, 0x00, 0x09, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0x88, 0x66, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet62_vnet_out_v4_output_cps_path[] = {
    0x00, 0x00, 0x0f, 0x80, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0x80, 0x08, 0x01, 0x81, 0x00, 0x00, 0x3e,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0x76, 0xad, 0x02, 0x00,
    0x00, 0x01, 0x02, 0x00, 0x00, 0x09, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0x88, 0x66, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet62_vnet_out_v4inv6_output[] = {
    0x00, 0x00, 0xc0, 0xc0, 0x00, 0x02, 0x00, 0x02,
    0x01, 0x00, 0x00, 0x01, 0x86, 0xdd, 0x60, 0x00,
    0x00, 0x00, 0x00, 0x54, 0x11, 0x40, 0x20, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x20, 0x03, 0xd0, 0x20, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x20, 0xf8, 0x00, 0xf3, 0x4c,
    0x12, 0xb5, 0x00, 0x54, 0x00, 0x00, 0x08, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00,
    0x0f, 0x80, 0x08, 0x02, 0x00, 0x00, 0x0f, 0x80,
    0x08, 0x01, 0x08, 0x00, 0x45, 0x00, 0x00, 0x36,
    0x00, 0x01, 0x00, 0x00, 0x40, 0x11, 0x76, 0xad,
    0x02, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x09,
    0x00, 0x64, 0x00, 0x64, 0x00, 0x22, 0x88, 0x66,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30
};

uint8_t g_vnet62_vnet_out_v6_input[] = {
    0x00, 0x00, 0x0f, 0x80, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0x80, 0x08, 0x01, 0x81, 0x00, 0x00, 0x3e,
    0x86, 0xdd, 0x60, 0x00, 0x00, 0x00, 0x00, 0x0e,
    0x11, 0x40, 0x20, 0x19, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
    0x00, 0x01, 0x20, 0x19, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
    0x00, 0x09, 0x00, 0x64, 0x00, 0x64, 0x00, 0x0e,
    0x2a, 0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet62_vnet_out_v6_output_cps_path[] = {
    0x00, 0x00, 0x0f, 0x80, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0x80, 0x08, 0x01, 0x81, 0x00, 0x00, 0x3e,
    0x86, 0xdd, 0x60, 0x00, 0x00, 0x00, 0x00, 0x0e,
    0x11, 0x40, 0x20, 0x19, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
    0x00, 0x01, 0x20, 0x19, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
    0x00, 0x09, 0x00, 0x64, 0x00, 0x64, 0x00, 0x0e,
    0x2a, 0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet62_vnet_out_v6inv6_output[] = {
    0x00, 0x00, 0xc0, 0xc0, 0x00, 0x02, 0x00, 0x02,
    0x01, 0x00, 0x00, 0x01, 0x86, 0xdd, 0x60, 0x00,
    0x00, 0x00, 0x00, 0x54, 0x11, 0x40, 0x20, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x20, 0x03, 0xd1, 0x20, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x20, 0xf8, 0x00, 0xe8, 0x49,
    0x12, 0xb5, 0x00, 0x54, 0x00, 0x00, 0x08, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00,
    0x0f, 0x80, 0x08, 0x02, 0x00, 0x00, 0x0f, 0x80,
    0x08, 0x01, 0x86, 0xdd, 0x60, 0x00, 0x00, 0x00,
    0x00, 0x0e, 0x11, 0x40, 0x20, 0x19, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x01, 0x20, 0x19, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x09, 0x00, 0x64, 0x00, 0x64,
    0x00, 0x0e, 0x2a, 0x3e, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30
};

uint8_t g_vnet63_internet_out_vip_input[] = {
    0x00, 0x00, 0x0f, 0xc0, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0xc0, 0x08, 0x01, 0x81, 0x00, 0x00, 0x3f,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb8, 0xb5, 0x02, 0x00,
    0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x64, 0x00, 0x22, 0xca, 0x92, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet63_internet_out_vip_output_cps_path[] = {
    0x00, 0x00, 0x0f, 0xc0, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0xc0, 0x08, 0x01, 0x81, 0x00, 0x00, 0x3f,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb8, 0xb5, 0x02, 0x00,
    0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x64, 0x00, 0x22, 0xca, 0x92, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet63_internet_out_vip_output[] = {
    0x00, 0x00, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00,
    0x0f, 0xc0, 0x08, 0x01, 0x81, 0x00, 0x00, 0x80,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb8, 0xb5, 0x05, 0x00,
    0x01, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x20,
    0x00, 0x64, 0x00, 0x22, 0xca, 0x92, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet64_internet_in_floating_ip_input[] = {
    0x00, 0x00, 0x10, 0x00, 0x08, 0x01, 0x00, 0x00,
    0x10, 0x00, 0x08, 0x02, 0x81, 0x00, 0x00, 0x80,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb3, 0xc6, 0xc0, 0x00,
    0x00, 0x00, 0x03, 0x00, 0x03, 0xf0, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0xc5, 0x7f, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet64_internet_in_floating_ip_output_cps_path[] = {
    0x00, 0x00, 0x10, 0x00, 0x08, 0x01, 0x00, 0x00,
    0x10, 0x00, 0x08, 0x02, 0x81, 0x00, 0x00, 0x80,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb3, 0xc6, 0xc0, 0x00,
    0x00, 0x00, 0x03, 0x00, 0x03, 0xf0, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0xc5, 0x7f, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet64_internet_in_floating_ip_output[] = {
    0x00, 0x00, 0x10, 0x00, 0x08, 0x01, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x40,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb3, 0xc6, 0xc0, 0x00,
    0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0xc5, 0x7f, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet64_internet_out_floating_ip_input[] = {
    0x00, 0x00, 0x10, 0x00, 0x08, 0x02, 0x00, 0x00,
    0x10, 0x00, 0x08, 0x01, 0x81, 0x00, 0x00, 0x40,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb8, 0xb5, 0x02, 0x00,
    0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0xca, 0x6e, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet64_internet_out_floating_ip_output_cps_path[] = {
    0x00, 0x00, 0x10, 0x00, 0x08, 0x02, 0x00, 0x00,
    0x10, 0x00, 0x08, 0x01, 0x81, 0x00, 0x00, 0x40,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb8, 0xb5, 0x02, 0x00,
    0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0xca, 0x6e, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet64_internet_out_floating_ip_output[] = {
    0x00, 0x00, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00,
    0x10, 0x00, 0x08, 0x01, 0x81, 0x00, 0x00, 0x80,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb8, 0xb5, 0x03, 0x00,
    0x03, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0xca, 0x6e, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet61_SLB_in_V4_input[] = {
    0x00, 0x02, 0x01, 0x00, 0x00, 0x01, 0x00, 0x02,
    0x0b, 0x0a, 0x0c, 0x0e, 0x08, 0x00, 0x45, 0x00,
    0x00, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x11,
    0x70, 0x5d, 0x01, 0x24, 0x04, 0x01, 0x01, 0x20,
    0x03, 0xc0, 0x12, 0xb5, 0x12, 0xb5, 0x00, 0x78,
    0x1b, 0x40, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x00, 0x00, 0x0f, 0x40, 0x08, 0x01,
    0x00, 0x00, 0x0f, 0x40, 0x08, 0x02, 0x08, 0x00,
    0x45, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x11, 0xb3, 0xb7, 0xc0, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x01, 0xe0, 0x00, 0x64, 0x00, 0x20,
    0x00, 0x42, 0x92, 0x41, 0x00, 0x01, 0x02, 0x03,
    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
    0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23,
    0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b,
    0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33,
    0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b,
    0x3c, 0x3d
};

uint8_t g_vnet61_SLB_in_V4_output_cps_path[] = {
    0x00, 0x02, 0x01, 0x00, 0x00, 0x01, 0x00, 0x02,
    0x0b, 0x0a, 0x0c, 0x0e, 0x08, 0x00, 0x45, 0x00,
    0x00, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x11,
    0x70, 0x5d, 0x01, 0x24, 0x04, 0x01, 0x01, 0x20,
    0x03, 0xc0, 0x12, 0xb5, 0x12, 0xb5, 0x00, 0x78,
    0x1b, 0x40, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x00, 0x00, 0x0f, 0x40, 0x08, 0x01,
    0x00, 0x00, 0x0f, 0x40, 0x08, 0x02, 0x08, 0x00,
    0x45, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x11, 0xb3, 0xb7, 0xc0, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x01, 0xe0, 0x00, 0x64, 0x00, 0x20,
    0x00, 0x42, 0x92, 0x41, 0x00, 0x01, 0x02, 0x03,
    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
    0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23,
    0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b,
    0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33,
    0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b,
    0x3c, 0x3d
};

uint8_t g_vnet61_SLB_in_V4_output[] = {
    0x00, 0x00, 0x0f, 0x40, 0x08, 0x01, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x3d,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x56, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x11, 0xb8, 0x96, 0xc0, 0x00,
    0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x64,
    0x00, 0x40, 0x00, 0x42, 0x0d, 0x79, 0x00, 0x01,
    0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
    0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11,
    0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
    0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21,
    0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,
    0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31,
    0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
    0x3a, 0x3b, 0x3c, 0x3d
};

uint8_t g_vnet61_SLB_in_V6_input[] = {
    0x00, 0x02, 0x01, 0x00, 0x00, 0x01, 0x00, 0x02,
    0x0a, 0x0b, 0x0c, 0x0d, 0x08, 0x00, 0x45, 0x00,
    0x00, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x11,
    0x70, 0x5c, 0x01, 0x24, 0x04, 0x01, 0x01, 0x20,
    0x03, 0xc1, 0x12, 0xb5, 0x12, 0xb5, 0x00, 0x78,
    0x63, 0xfe, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x00, 0x00, 0x0f, 0x40, 0x08, 0x01,
    0x00, 0x00, 0x0f, 0x40, 0x08, 0x02, 0x86, 0xdd,
    0x60, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x11, 0x40,
    0x20, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xf1, 0xd0, 0xd1, 0xd0, 0xc0, 0x00, 0x00, 0x00,
    0x20, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0xe0,
    0x00, 0x64, 0x00, 0x20, 0x00, 0x2e, 0x7b, 0xec,
    0xb5, 0x15, 0xa8, 0x8c, 0x66, 0x5c, 0xff, 0x34,
    0x49, 0x78, 0x69, 0x60, 0x40, 0x00, 0x00, 0x00,
    0x10, 0x11, 0x12, 0x13, 0x5a, 0xf4, 0x46, 0x34,
    0x00, 0x0a, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
    0x20, 0x21, 0x22, 0x23, 0x5a, 0x0d, 0x26, 0x27,
    0x28, 0x29
};

uint8_t g_vnet61_SLB_in_V6_output_cps_path[] = {
    0x00, 0x02, 0x01, 0x00, 0x00, 0x01, 0x00, 0x02,
    0x0a, 0x0b, 0x0c, 0x0d, 0x08, 0x00, 0x45, 0x00,
    0x00, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x11,
    0x70, 0x5c, 0x01, 0x24, 0x04, 0x01, 0x01, 0x20,
    0x03, 0xc1, 0x12, 0xb5, 0x12, 0xb5, 0x00, 0x78,
    0x63, 0xfe, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x00, 0x00, 0x0f, 0x40, 0x08, 0x01,
    0x00, 0x00, 0x0f, 0x40, 0x08, 0x02, 0x86, 0xdd,
    0x60, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x11, 0x40,
    0x20, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xf1, 0xd0, 0xd1, 0xd0, 0xc0, 0x00, 0x00, 0x00,
    0x20, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0xe0,
    0x00, 0x64, 0x00, 0x20, 0x00, 0x2e, 0x7b, 0xec,
    0xb5, 0x15, 0xa8, 0x8c, 0x66, 0x5c, 0xff, 0x34,
    0x49, 0x78, 0x69, 0x60, 0x40, 0x00, 0x00, 0x00,
    0x10, 0x11, 0x12, 0x13, 0x5a, 0xf4, 0x46, 0x34,
    0x00, 0x0a, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
    0x20, 0x21, 0x22, 0x23, 0x5a, 0x0d, 0x26, 0x27,
    0x28, 0x29
};

uint8_t g_vnet61_SLB_in_V6_output[] = {
    0x00, 0x00, 0x0f, 0x40, 0x08, 0x01, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x3d,
    0x86, 0xdd, 0x60, 0x00, 0x00, 0x00, 0x00, 0x2e,
    0x11, 0x40, 0x20, 0x21, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xf1, 0xd0, 0xd1, 0xd0, 0xc0, 0x00,
    0x00, 0x00, 0x20, 0x19, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
    0x00, 0x01, 0x00, 0x64, 0x00, 0x40, 0x00, 0x2e,
    0xcf, 0x04, 0xb5, 0x15, 0xa8, 0x8c, 0x66, 0x5c,
    0xff, 0x34, 0x49, 0x78, 0x69, 0x60, 0x40, 0x00,
    0x00, 0x00, 0x10, 0x11, 0x12, 0x13, 0x5a, 0xf4,
    0x46, 0x34, 0x00, 0x0a, 0x1a, 0x1b, 0x1c, 0x1d,
    0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x5a, 0x0d,
    0x26, 0x27, 0x28, 0x29
};

uint8_t g_vnet61_SLB_out_V4_input[] = {
    0x00, 0x00, 0x0f, 0x40, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0x40, 0x08, 0x01, 0x81, 0x00, 0x00, 0x3d,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x34, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x11, 0xb8, 0xbb, 0x02, 0x00,
    0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x64, 0x00, 0x20, 0x73, 0x62, 0x87, 0x73,
    0x67, 0x49, 0x42, 0x87, 0x11, 0x80, 0x08, 0x71,
    0x18, 0x05, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11,
    0x12, 0x13, 0x14, 0x15, 0x16, 0x17
};

uint8_t g_vnet61_SLB_out_V4_output_cps_path[] = {
    0x00, 0x00, 0x0f, 0x40, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0x40, 0x08, 0x01, 0x81, 0x00, 0x00, 0x3d,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x34, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x11, 0xb8, 0xbb, 0x02, 0x00,
    0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x64, 0x00, 0x20, 0x73, 0x62, 0x87, 0x73,
    0x67, 0x49, 0x42, 0x87, 0x11, 0x80, 0x08, 0x71,
    0x18, 0x05, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11,
    0x12, 0x13, 0x14, 0x15, 0x16, 0x17
};

uint8_t g_vnet61_SLB_out_V4_output[] = {
    0x00, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0x40, 0x08, 0x01, 0x81, 0x00, 0x00, 0x80,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x34, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x11, 0xb3, 0xd9, 0x05, 0x00,
    0x01, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x20,
    0x00, 0x64, 0x00, 0x20, 0x6e, 0xa3, 0x87, 0x73,
    0x67, 0x49, 0x42, 0x87, 0x11, 0x80, 0x08, 0x71,
    0x18, 0x05, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11,
    0x12, 0x13, 0x14, 0x15, 0x16, 0x17
};

uint8_t g_vnet61_SLB_out_V6_input[] = {
    0x00, 0x00, 0x0f, 0x40, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0x40, 0x08, 0x01, 0x81, 0x00, 0x00, 0x3d,
    0x86, 0xdd, 0x60, 0x30, 0x00, 0x00, 0x00, 0x22,
    0x11, 0xff, 0x20, 0x19, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
    0x00, 0x01, 0x20, 0x21, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xf1, 0xd0, 0xd1, 0xd0, 0xc0, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x64, 0x00, 0x22,
    0x90, 0xbf, 0x87, 0x73, 0x67, 0x49, 0x42, 0x87,
    0x11, 0x80, 0x08, 0x71, 0x18, 0x05, 0x80, 0x00,
    0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0xb1, 0x0b,
    0xfb, 0xd8, 0x18, 0x19
};

uint8_t g_vnet61_SLB_out_V6_output_cps_path[] = {
    0x00, 0x00, 0x0f, 0x40, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0x40, 0x08, 0x01, 0x81, 0x00, 0x00, 0x3d,
    0x86, 0xdd, 0x60, 0x30, 0x00, 0x00, 0x00, 0x22,
    0x11, 0xff, 0x20, 0x19, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
    0x00, 0x01, 0x20, 0x21, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xf1, 0xd0, 0xd1, 0xd0, 0xc0, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x64, 0x00, 0x22,
    0x90, 0xbf, 0x87, 0x73, 0x67, 0x49, 0x42, 0x87,
    0x11, 0x80, 0x08, 0x71, 0x18, 0x05, 0x80, 0x00,
    0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0xb1, 0x0b,
    0xfb, 0xd8, 0x18, 0x19
};

uint8_t g_vnet61_SLB_out_V6_output[] = {
    0x00, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0x40, 0x08, 0x01, 0x81, 0x00, 0x00, 0x80,
    0x86, 0xdd, 0x60, 0x30, 0x00, 0x00, 0x00, 0x22,
    0x11, 0xff, 0x20, 0x22, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00,
    0x01, 0xe0, 0x20, 0x21, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xf1, 0xd0, 0xd1, 0xd0, 0xc0, 0x00,
    0x00, 0x00, 0x00, 0x20, 0x00, 0x64, 0x00, 0x22,
    0xe2, 0x95, 0x87, 0x73, 0x67, 0x49, 0x42, 0x87,
    0x11, 0x80, 0x08, 0x71, 0x18, 0x05, 0xa0, 0x00,
    0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x18, 0xe2,
    0x1d, 0x64, 0x18, 0x19
};

uint8_t g_cps_path_input[] = {
    0x00, 0x00, 0x00, 0x40, 0x08, 0x02, 0x00, 0x00,
    0x00, 0x40, 0x08, 0x01, 0x81, 0x00, 0x00, 0x01,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0x76, 0xad, 0x02, 0x00,
    0x00, 0x01, 0x02, 0x00, 0x00, 0x09, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0x88, 0x66, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_cps_path_output[] = {
    0x00, 0x00, 0x00, 0x40, 0x08, 0x02, 0x00, 0x00,
    0x00, 0x40, 0x08, 0x01, 0x81, 0x00, 0x00, 0x01,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0x76, 0xad, 0x02, 0x00,
    0x00, 0x01, 0x02, 0x00, 0x00, 0x09, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0x88, 0x66, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

#ifdef SIM
void
send_packet (void)
{
    uint32_t port = 0;
    uint32_t cos = 0;
    std::vector<uint8_t> ipkt;
    std::vector<uint8_t> opkt;
    std::vector<uint8_t> epkt;
    uint32_t i = 0;
    uint32_t tcscale = 1;
    int tcid = 0;
    int tcid_filter = 0;
    char *tep_encap_env;

    if (getenv("TCSCALE")) {
        tcscale = atoi(getenv("TCSCALE"));
    }

    if (getenv("TCID")) {
        tcid_filter = atoi(getenv("TCID"));
        printf("TCID given: %d\n", tcid_filter);
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet1_vnet_out_input\n");
        ipkt.resize(sizeof(g_vnet1_vnet_out_input));
        memcpy(ipkt.data(), g_vnet1_vnet_out_input, sizeof(g_vnet1_vnet_out_input));
        epkt.resize(sizeof(g_vnet1_vnet_out_output_cps_path));
        memcpy(epkt.data(), g_vnet1_vnet_out_output_cps_path, sizeof(g_vnet1_vnet_out_output_cps_path));
        std::cout << "Testing Host to Switch" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_0);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
                EXPECT_TRUE(opkt.size() == (epkt.size() + TESTAPP_PKT_META_HDR_SIZE));
                EXPECT_TRUE(std::equal(opkt.begin() + TESTAPP_PKT_META_HDR_SIZE, opkt.end(), epkt.begin()));
            }
            testcase_end(tcid, i + 1);
        }
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet60_st_out_v4_input\n");
        ipkt.resize(sizeof(g_vnet60_st_out_v4_input));
        memcpy(ipkt.data(), g_vnet60_st_out_v4_input, sizeof(g_vnet60_st_out_v4_input));
        epkt.resize(sizeof(g_vnet60_st_out_v4_output_cps_path));
        memcpy(epkt.data(), g_vnet60_st_out_v4_output_cps_path, sizeof(g_vnet60_st_out_v4_output_cps_path));
        std::cout << "Testing Host to Switch" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_0);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
                EXPECT_TRUE(opkt.size() == (epkt.size() + TESTAPP_PKT_META_HDR_SIZE));
                EXPECT_TRUE(std::equal(opkt.begin() + TESTAPP_PKT_META_HDR_SIZE, opkt.end(), epkt.begin()));
            }
            testcase_end(tcid, i + 1);
        }
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet62_vnet_out_v4_input\n");
        ipkt.resize(sizeof(g_vnet62_vnet_out_v4_input));
        memcpy(ipkt.data(), g_vnet62_vnet_out_v4_input, sizeof(g_vnet62_vnet_out_v4_input));
        epkt.resize(sizeof(g_vnet62_vnet_out_v4_output_cps_path));
        memcpy(epkt.data(), g_vnet62_vnet_out_v4_output_cps_path, sizeof(g_vnet62_vnet_out_v4_output_cps_path));
        std::cout << "Testing Host to Switch" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_0);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
                EXPECT_TRUE(opkt.size() == (epkt.size() + TESTAPP_PKT_META_HDR_SIZE));
                EXPECT_TRUE(std::equal(opkt.begin() + TESTAPP_PKT_META_HDR_SIZE, opkt.end(), epkt.begin()));
            }
            testcase_end(tcid, i + 1);
        }
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet62_vnet_out_v6_input\n");
        ipkt.resize(sizeof(g_vnet62_vnet_out_v6_input));
        memcpy(ipkt.data(), g_vnet62_vnet_out_v6_input, sizeof(g_vnet62_vnet_out_v6_input));
        epkt.resize(sizeof(g_vnet62_vnet_out_v6_output_cps_path));
        memcpy(epkt.data(), g_vnet62_vnet_out_v6_output_cps_path, sizeof(g_vnet62_vnet_out_v6_output_cps_path));
        std::cout << "Testing Host to Switch" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_0);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
                EXPECT_TRUE(opkt.size() == (epkt.size() + TESTAPP_PKT_META_HDR_SIZE));
                EXPECT_TRUE(std::equal(opkt.begin() + TESTAPP_PKT_META_HDR_SIZE, opkt.end(), epkt.begin()));
            }
            testcase_end(tcid, i + 1);
        }
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet63_internet_out_vip_input\n");
        ipkt.resize(sizeof(g_vnet63_internet_out_vip_input));
        memcpy(ipkt.data(), g_vnet63_internet_out_vip_input, sizeof(g_vnet63_internet_out_vip_input));
        epkt.resize(sizeof(g_vnet63_internet_out_vip_output_cps_path));
        memcpy(epkt.data(), g_vnet63_internet_out_vip_output_cps_path, sizeof(g_vnet63_internet_out_vip_output_cps_path));
        std::cout << "Testing Host to Switch" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_0);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
                EXPECT_TRUE(opkt.size() == (epkt.size() + TESTAPP_PKT_META_HDR_SIZE));
                EXPECT_TRUE(std::equal(opkt.begin() + TESTAPP_PKT_META_HDR_SIZE, opkt.end(), epkt.begin()));
            }
            testcase_end(tcid, i + 1);
        }
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet64_internet_in_floating_ip_input\n");
        ipkt.resize(sizeof(g_vnet64_internet_in_floating_ip_input));
        memcpy(ipkt.data(), g_vnet64_internet_in_floating_ip_input, sizeof(g_vnet64_internet_in_floating_ip_input));
        epkt.resize(sizeof(g_vnet64_internet_in_floating_ip_output_cps_path));
        memcpy(epkt.data(), g_vnet64_internet_in_floating_ip_output_cps_path, sizeof(g_vnet64_internet_in_floating_ip_output_cps_path));
        std::cout << "Testing Switch to Host" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_1);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
                EXPECT_TRUE(opkt.size() == (epkt.size() + TESTAPP_PKT_META_HDR_SIZE));
                EXPECT_TRUE(std::equal(opkt.begin() + TESTAPP_PKT_META_HDR_SIZE, opkt.end(), epkt.begin()));
            }
            testcase_end(tcid, i + 1);
        }
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet64_internet_out_floating_ip_input\n");
        ipkt.resize(sizeof(g_vnet64_internet_out_floating_ip_input));
        memcpy(ipkt.data(), g_vnet64_internet_out_floating_ip_input, sizeof(g_vnet64_internet_out_floating_ip_input));
        epkt.resize(sizeof(g_vnet64_internet_out_floating_ip_output_cps_path));
        memcpy(epkt.data(), g_vnet64_internet_out_floating_ip_output_cps_path, sizeof(g_vnet64_internet_out_floating_ip_output_cps_path));
        std::cout << "Testing Host to Switch" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_0);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
                EXPECT_TRUE(opkt.size() == (epkt.size() + TESTAPP_PKT_META_HDR_SIZE));
                EXPECT_TRUE(std::equal(opkt.begin() + TESTAPP_PKT_META_HDR_SIZE, opkt.end(), epkt.begin()));
            }
            testcase_end(tcid, i + 1);
        }
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet61_SLB_in_V4_input\n");
        ipkt.resize(sizeof(g_vnet61_SLB_in_V4_input));
        memcpy(ipkt.data(), g_vnet61_SLB_in_V4_input, sizeof(g_vnet61_SLB_in_V4_input));
        epkt.resize(sizeof(g_vnet61_SLB_in_V4_output_cps_path));
        memcpy(epkt.data(), g_vnet61_SLB_in_V4_output_cps_path, sizeof(g_vnet61_SLB_in_V4_output_cps_path));
        std::cout << "Testing Switch to Host" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_1);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
                EXPECT_TRUE(opkt.size() == (epkt.size() + TESTAPP_PKT_META_HDR_SIZE));
                EXPECT_TRUE(std::equal(opkt.begin() + TESTAPP_PKT_META_HDR_SIZE, opkt.end(), epkt.begin()));
            }
            testcase_end(tcid, i + 1);
        }
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet61_SLB_in_V6_input\n");
        ipkt.resize(sizeof(g_vnet61_SLB_in_V6_input));
        memcpy(ipkt.data(), g_vnet61_SLB_in_V6_input, sizeof(g_vnet61_SLB_in_V6_input));
        epkt.resize(sizeof(g_vnet61_SLB_in_V6_output_cps_path));
        memcpy(epkt.data(), g_vnet61_SLB_in_V6_output_cps_path, sizeof(g_vnet61_SLB_in_V6_output_cps_path));
        std::cout << "Testing Switch to Host" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_1);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
                EXPECT_TRUE(opkt.size() == (epkt.size() + TESTAPP_PKT_META_HDR_SIZE));
                EXPECT_TRUE(std::equal(opkt.begin() + TESTAPP_PKT_META_HDR_SIZE, opkt.end(), epkt.begin()));
            }
            testcase_end(tcid, i + 1);
        }
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet61_SLB_out_V4_input\n");
        ipkt.resize(sizeof(g_vnet61_SLB_out_V4_input));
        memcpy(ipkt.data(), g_vnet61_SLB_out_V4_input, sizeof(g_vnet61_SLB_out_V4_input));
        epkt.resize(sizeof(g_vnet61_SLB_out_V4_output_cps_path));
        memcpy(epkt.data(), g_vnet61_SLB_out_V4_output_cps_path, sizeof(g_vnet61_SLB_out_V4_output_cps_path));
        std::cout << "Testing Host to Switch" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_0);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
                EXPECT_TRUE(opkt.size() == (epkt.size() + TESTAPP_PKT_META_HDR_SIZE));
                EXPECT_TRUE(std::equal(opkt.begin() + TESTAPP_PKT_META_HDR_SIZE, opkt.end(), epkt.begin()));
            }
            testcase_end(tcid, i + 1);
        }
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet61_SLB_out_V6_input\n");
        ipkt.resize(sizeof(g_vnet61_SLB_out_V6_input));
        memcpy(ipkt.data(), g_vnet61_SLB_out_V6_input, sizeof(g_vnet61_SLB_out_V6_input));
        epkt.resize(sizeof(g_vnet61_SLB_out_V6_output_cps_path));
        memcpy(epkt.data(), g_vnet61_SLB_out_V6_output_cps_path, sizeof(g_vnet61_SLB_out_V6_output_cps_path));
        std::cout << "Testing Host to Switch" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_0);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
                EXPECT_TRUE(opkt.size() == (epkt.size() + TESTAPP_PKT_META_HDR_SIZE));
                EXPECT_TRUE(std::equal(opkt.begin() + TESTAPP_PKT_META_HDR_SIZE, opkt.end(), epkt.begin()));
            }
            testcase_end(tcid, i + 1);
        }
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test cps path\n");
        ipkt.resize(sizeof(g_cps_path_input));
        memcpy(ipkt.data(), g_cps_path_input, sizeof(g_cps_path_input));
        epkt.resize(sizeof(g_cps_path_output));
        memcpy(epkt.data(), g_cps_path_output, sizeof(g_cps_path_output));
        std::cout << "Testing Host to Switch" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_0);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
                EXPECT_TRUE(opkt.size() == (epkt.size() + TESTAPP_PKT_META_HDR_SIZE));
                EXPECT_TRUE(std::equal(opkt.begin() + TESTAPP_PKT_META_HDR_SIZE, opkt.end(), epkt.begin()));
            }
            testcase_end(tcid, i + 1);
        }
    }

    exit_simulation();
}
#endif
