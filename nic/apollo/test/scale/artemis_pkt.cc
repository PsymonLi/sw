//----------------------------------------------------------------------------
//
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
//----------------------------------------------------------------------------

#include <gtest/gtest.h>
#include "nic/apollo/test/scale/test.hpp"
#include "nic/apollo/test/scale/pkt.hpp"
#include "nic/apollo/test/utils/base.hpp"
#include "nic/apollo/api/include/pds_batch.hpp"
#include "nic/apollo/api/include/pds_device.hpp"
#include "nic/sdk/platform/capri/capri_p4.hpp"
#include "nic/sdk/model_sim/include/lib_model_client.h"

// Vxlan encap: vnid 1
uint8_t g_vnet1_vnet_out_input[] = {
    0x00, 0x00, 0x00, 0x40, 0x08, 0x02, 0x00, 0x00,
    0x00, 0x40, 0x08, 0x01, 0x81, 0x00, 0x00, 0x01,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0x76, 0xad, 0x02, 0x00,
    0x00, 0x01, 0x02, 0x00, 0x00, 0x09, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0x88, 0x66, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet1_vnet_out_output[] = {
    0x00, 0x00, 0xc0, 0xc0, 0x00, 0x02, 0x00, 0x02,
    0x01, 0x00, 0x00, 0x01, 0x08, 0x00, 0x45, 0x00,
    0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x40, 0x11,
    0x74, 0x46, 0x01, 0x20, 0x00, 0x00, 0x01, 0x20,
    0x04, 0x00, 0xf1, 0xf2, 0x12, 0xb5, 0x00, 0x54,
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x08, 0x02,
    0x00, 0x00, 0x00, 0x40, 0x08, 0x01, 0x08, 0x00,
    0x45, 0x00, 0x00, 0x36, 0x00, 0x01, 0x00, 0x00,
    0x40, 0x11, 0x76, 0xad, 0x02, 0x00, 0x00, 0x01,
    0x02, 0x00, 0x00, 0x09, 0x00, 0x64, 0x00, 0x64,
    0x00, 0x22, 0x88, 0x66, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet60_st_out_v4_input[] = {
    0x00, 0x00, 0x0f, 0x00, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0x00, 0x08, 0x01, 0x81, 0x00, 0x00, 0x3c,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb8, 0xb5, 0x02, 0x00,
    0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0xca, 0x6e, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet60_st_out_v6inv4_output[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
    0x01, 0x00, 0x00, 0x01, 0x08, 0x00, 0x45, 0x00,
    0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x11,
    0x74, 0x9f, 0x01, 0x20, 0x03, 0xb0, 0x01, 0x00,
    0x00, 0x03, 0xc3, 0x60, 0x12, 0xb5, 0x00, 0x68,
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x27,
    0x10, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x08, 0x02,
    0x00, 0x00, 0x0f, 0x00, 0x08, 0x01, 0x86, 0xdd,
    0x60, 0x00, 0x00, 0x00, 0x00, 0x22, 0x11, 0x40,
    0x20, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01,
    0x22, 0x22, 0x00, 0x00, 0xf1, 0xd0, 0xd1, 0xd0,
    0xc0, 0x00, 0x01, 0x00, 0xc0, 0x00, 0x00, 0xc0,
    0x00, 0x64, 0x00, 0x64, 0x00, 0x22, 0xca, 0x6e,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30
};

uint8_t g_vnet62_vnet_out_v4_input[] = {
    0x00, 0x00, 0x0f, 0x80, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0x80, 0x08, 0x01, 0x81, 0x00, 0x00, 0x3e,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0x76, 0xad, 0x02, 0x00,
    0x00, 0x01, 0x02, 0x00, 0x00, 0x09, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0x88, 0x66, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet62_vnet_out_v4inv6_output[] = {
    0x00, 0x00, 0xc0, 0xc0, 0x00, 0x02, 0x00, 0x02,
    0x01, 0x00, 0x00, 0x01, 0x86, 0xdd, 0x60, 0x00,
    0x00, 0x00, 0x00, 0x54, 0x11, 0x40, 0x20, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x20, 0x03, 0xd0, 0x20, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x20, 0xf8, 0x00, 0xf3, 0x4c,
    0x12, 0xb5, 0x00, 0x54, 0x00, 0x00, 0x08, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00,
    0x0f, 0x80, 0x08, 0x02, 0x00, 0x00, 0x0f, 0x80,
    0x08, 0x01, 0x08, 0x00, 0x45, 0x00, 0x00, 0x36,
    0x00, 0x01, 0x00, 0x00, 0x40, 0x11, 0x76, 0xad,
    0x02, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x09,
    0x00, 0x64, 0x00, 0x64, 0x00, 0x22, 0x88, 0x66,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30
};

uint8_t g_vnet62_vnet_out_v6_input[] = {
    0x00, 0x00, 0x0f, 0x80, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0x80, 0x08, 0x01, 0x81, 0x00, 0x00, 0x3e,
    0x86, 0xdd, 0x60, 0x00, 0x00, 0x00, 0x00, 0x0e,
    0x11, 0x40, 0x20, 0x19, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
    0x00, 0x01, 0x20, 0x19, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
    0x00, 0x09, 0x00, 0x64, 0x00, 0x64, 0x00, 0x0e,
    0x2a, 0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet62_vnet_out_v6inv6_output[] = {
    0x00, 0x00, 0xc0, 0xc0, 0x00, 0x02, 0x00, 0x02,
    0x01, 0x00, 0x00, 0x01, 0x86, 0xdd, 0x60, 0x00,
    0x00, 0x00, 0x00, 0x54, 0x11, 0x40, 0x20, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x20, 0x03, 0xd1, 0x20, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x20, 0xf8, 0x00, 0xe8, 0x49,
    0x12, 0xb5, 0x00, 0x54, 0x00, 0x00, 0x08, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00,
    0x0f, 0x80, 0x08, 0x02, 0x00, 0x00, 0x0f, 0x80,
    0x08, 0x01, 0x86, 0xdd, 0x60, 0x00, 0x00, 0x00,
    0x00, 0x0e, 0x11, 0x40, 0x20, 0x19, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x01, 0x20, 0x19, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x09, 0x00, 0x64, 0x00, 0x64,
    0x00, 0x0e, 0x2a, 0x3e, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30
};

uint8_t g_vnet63_internet_out_vip_input[] = {
    0x00, 0x00, 0x0f, 0xc0, 0x08, 0x02, 0x00, 0x00,
    0x0f, 0xc0, 0x08, 0x01, 0x81, 0x00, 0x00, 0x3f,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb8, 0xb5, 0x02, 0x00,
    0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x00, 0x64, 0x00, 0x22, 0xca, 0x92, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet63_internet_out_vip_output[] = {
    0x00, 0x00, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00,
    0x0f, 0xc0, 0x08, 0x01, 0x81, 0x00, 0x00, 0x80,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb8, 0xb5, 0x05, 0x00,
    0x01, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x20,
    0x00, 0x64, 0x00, 0x22, 0xca, 0x92, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet64_internet_in_floating_ip_input[] = {
    0x00, 0x00, 0x10, 0x00, 0x08, 0x01, 0x00, 0x00,
    0x10, 0x00, 0x08, 0x02, 0x81, 0x00, 0x00, 0x80,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb3, 0xc6, 0xc0, 0x00,
    0x00, 0x00, 0x03, 0x00, 0x03, 0xf0, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0xc5, 0x7f, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet64_internet_in_floating_ip_output[] = {
    0x00, 0x00, 0x10, 0x00, 0x08, 0x01, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x40,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb3, 0xc6, 0xc0, 0x00,
    0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0xc5, 0x7f, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet64_internet_out_floating_ip_input[] = {
    0x00, 0x00, 0x10, 0x00, 0x08, 0x02, 0x00, 0x00,
    0x10, 0x00, 0x08, 0x01, 0x81, 0x00, 0x00, 0x40,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb8, 0xb5, 0x02, 0x00,
    0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0xca, 0x6e, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

uint8_t g_vnet64_internet_out_floating_ip_output[] = {
    0x00, 0x00, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00,
    0x10, 0x00, 0x08, 0x01, 0x81, 0x00, 0x00, 0x80,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x36, 0x00, 0x01,
    0x00, 0x00, 0x40, 0x11, 0xb8, 0xb5, 0x03, 0x00,
    0x03, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x64,
    0x00, 0x64, 0x00, 0x22, 0xca, 0x6e, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
};

#ifdef SIM
void
send_packet (void)
{
    uint32_t port = 0;
    uint32_t cos = 0;
    std::vector<uint8_t> ipkt;
    std::vector<uint8_t> opkt;
    std::vector<uint8_t> epkt;
    uint32_t i = 0;
    uint32_t tcscale = 1;
    int tcid = 0;
    int tcid_filter = 0;
    char *tep_encap_env;

    if (getenv("TCSCALE")) {
        tcscale = atoi(getenv("TCSCALE"));
    }

    if (getenv("TCID")) {
        tcid_filter = atoi(getenv("TCID"));
        printf("TCID given: %d\n", tcid_filter);
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet1_vnet_out_input\n");
        ipkt.resize(sizeof(g_vnet1_vnet_out_input));
        memcpy(ipkt.data(), g_vnet1_vnet_out_input, sizeof(g_vnet1_vnet_out_input));
        epkt.resize(sizeof(g_vnet1_vnet_out_output));
        memcpy(epkt.data(), g_vnet1_vnet_out_output, sizeof(g_vnet1_vnet_out_output));
        std::cout << "Testing Host to Switch" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_0);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(opkt == epkt);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
            }
            testcase_end(tcid, i + 1);
        }
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet60_st_out_v4_input\n");
        ipkt.resize(sizeof(g_vnet60_st_out_v4_input));
        memcpy(ipkt.data(), g_vnet60_st_out_v4_input, sizeof(g_vnet60_st_out_v4_input));
        epkt.resize(sizeof(g_vnet60_st_out_v6inv4_output));
        memcpy(epkt.data(), g_vnet60_st_out_v6inv4_output, sizeof(g_vnet60_st_out_v6inv4_output));
        std::cout << "Testing Host to Switch" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_0);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(opkt == epkt);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
            }
            testcase_end(tcid, i + 1);
        }
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet62_vnet_out_v4_input\n");
        ipkt.resize(sizeof(g_vnet62_vnet_out_v4_input));
        memcpy(ipkt.data(), g_vnet62_vnet_out_v4_input, sizeof(g_vnet62_vnet_out_v4_input));
        epkt.resize(sizeof(g_vnet62_vnet_out_v4inv6_output));
        memcpy(epkt.data(), g_vnet62_vnet_out_v4inv6_output, sizeof(g_vnet62_vnet_out_v4inv6_output));
        std::cout << "Testing Host to Switch" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_0);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(opkt == epkt);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
            }
            testcase_end(tcid, i + 1);
        }
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet62_vnet_out_v6_input\n");
        ipkt.resize(sizeof(g_vnet62_vnet_out_v6_input));
        memcpy(ipkt.data(), g_vnet62_vnet_out_v6_input, sizeof(g_vnet62_vnet_out_v6_input));
        epkt.resize(sizeof(g_vnet62_vnet_out_v6inv6_output));
        memcpy(epkt.data(), g_vnet62_vnet_out_v6inv6_output, sizeof(g_vnet62_vnet_out_v6inv6_output));
        std::cout << "Testing Host to Switch" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_0);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(opkt == epkt);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
            }
            testcase_end(tcid, i + 1);
        }
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet63_internet_out_vip_input\n");
        ipkt.resize(sizeof(g_vnet63_internet_out_vip_input));
        memcpy(ipkt.data(), g_vnet63_internet_out_vip_input, sizeof(g_vnet63_internet_out_vip_input));
        epkt.resize(sizeof(g_vnet63_internet_out_vip_output));
        memcpy(epkt.data(), g_vnet63_internet_out_vip_output, sizeof(g_vnet63_internet_out_vip_output));
        std::cout << "Testing Host to Switch" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_0);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(opkt == epkt);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
            }
            testcase_end(tcid, i + 1);
        }
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet64_internet_in_floating_ip_input\n");
        ipkt.resize(sizeof(g_vnet64_internet_in_floating_ip_input));
        memcpy(ipkt.data(), g_vnet64_internet_in_floating_ip_input, sizeof(g_vnet64_internet_in_floating_ip_input));
        epkt.resize(sizeof(g_vnet64_internet_in_floating_ip_output));
        memcpy(epkt.data(), g_vnet64_internet_in_floating_ip_output, sizeof(g_vnet64_internet_in_floating_ip_output));
        std::cout << "Testing Switch to Host" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_1);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(opkt == epkt);
                EXPECT_TRUE(port == TM_PORT_UPLINK_0);
            }
            testcase_end(tcid, i + 1);
        }
    }

    tcid++;
    if (tcid_filter == 0 || tcid == tcid_filter) {
        printf("Test with g_vnet64_internet_out_floating_ip_input\n");
        ipkt.resize(sizeof(g_vnet64_internet_out_floating_ip_input));
        memcpy(ipkt.data(), g_vnet64_internet_out_floating_ip_input, sizeof(g_vnet64_internet_out_floating_ip_input));
        epkt.resize(sizeof(g_vnet64_internet_out_floating_ip_output));
        memcpy(epkt.data(), g_vnet64_internet_out_floating_ip_output, sizeof(g_vnet64_internet_out_floating_ip_output));
        std::cout << "Testing Host to Switch" << std::endl;
        for (i = 0; i < tcscale; i++) {
            testcase_begin(tcid, i + 1);
            step_network_pkt(ipkt, TM_PORT_UPLINK_0);
            if (!getenv("SKIP_VERIFY")) {
                get_next_pkt(opkt, port, cos);
                EXPECT_TRUE(opkt == epkt);
                EXPECT_TRUE(port == TM_PORT_UPLINK_1);
            }
            testcase_end(tcid, i + 1);
        }
    }

    exit_simulation();
}
#endif
