//
// {C} Copyright 2020 Pensando Systems Inc. All rights reserved
//
//----------------------------------------------------------------------------
///
/// \file
/// protobuf specification for upgrade object
/// upgrade manager recieves this and decide the actions
///
//----------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";

service UpgSvc {
  // start or abort the upgrade
  rpc UpgRequest (UpgradeRequest) returns (UpgradeResponse) {}
  // check if configuration replay can be started
  rpc ConfigReplayReadyCheck (EmptyMsg) returns (ConfigReplayReadyRsp) {}
  // notify configuration replay started
  rpc ConfigReplayStarted (EmptyMsg) returns (EmptyMsg) {}
  // notify configuration replay done
  rpc ConfigReplayDone (EmptyMsg) returns (EmptyMsg) {}
}

// upgrade request type
enum UpgradeRequestType {
  // invalid request
  UPGRADE_REQUEST_NONE         = 0;
  // start an upgrade
  UPGRADE_REQUEST_START        = 1;
  // abort an upgrade
  UPGRADE_REQUEST_ABORT        = 2;
}

// upgrade mode
enum UpgradeMode {
  // invalid mode
  UPGRADE_MODE_NONE     = 0;
  // graceful upgrade
  UPGRADE_MODE_GRACEFUL = 1;
  // hitless upgrade
  UPGRADE_MODE_HITLESS  = 2;
}

// upgrade specification
message UpgradeSpec {
  UpgradeRequestType RequestType = 1 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  UpgradeMode        Mode        = 2 [(gogoproto.moretags) = "meta:mandatory,immutable"];
  // new package name with full path
  string             PackageName = 3 [(gogoproto.moretags) = "meta:mandatory,immutable"];
}

// upgrade return status
enum UpgradeStatus {
  // upgrade successful
  UPGRADE_STATUS_OK          = 0;
  // upgrade failed
  UPGRADE_STATUS_FAIL        = 1;
  // upgrade invalid args
  UPGRADE_STATUS_INVALID_ARG = 2;
}

// ugprade request
message UpgradeRequest {
  UpgradeSpec Request = 1;
}

// upgrade response
message UpgradeResponse {
  UpgradeStatus Status    = 1;
  string        StatusMsg = 2;
}

// configuration replay ready check response
message ConfigReplayReadyRsp {
  bool IsReady = 1;
}

// empty msg
message EmptyMsg {}