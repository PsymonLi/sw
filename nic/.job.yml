---
targets:
  main: ["sh", "-c", "cd /sw && make pull-assets && cd nic && make clean && make j=2 -j4 all && make run-gtests && make check_traces; ret=$? ; make sanity_logs ; exit $ret" ]
  halctl: ["sh", "-c", "cd /sw && make pull-assets && cd nic && make clean && make j=2 -j4 all &&  cd $GOPATH/src/github.com/pensando/sw/nic/agent/cmd/halctl && go test" ]
  arm_build: ["sh", "-c", "cd /sw && make pull-assets && cd nic && make clean && make j=2 ARCH=aarch64 nic && make ARCH=aarch64 sanity-tests && make ARCH=aarch64 gtests && make clean ; ret=$? ; make sanity_logs ; exit $ret" ]
  arm_haps_build: ["sh", "-c", "cd /sw && make pull-assets && cd nic && make clean && make j=2 PLATFORM=haps ARCH=aarch64 nic && make PLATFORM=haps ARCH=aarch64 sanity-tests && make PLATFORM=haps ARCH=aarch64 gtests && make clean ; ret=$? ; make sanity_logs ; exit $ret" ]
  storage:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py --storage ; ret=$? ; make sanity_logs ; exit $ret" ]
  storage_perf:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py --storage --storage_test perf; ret=$? ; make sanity_logs ; exit $ret" ]
  storage_nvme:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py --storage --storage_test nvme_dp; ret=$? ; make sanity_logs ; exit $ret" ]
  #storage_nvme_perf:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --storage --storage_test nvme_dp_scale; ret=$? ; make sanity_logs ; exit $ret" ]
 # Test running into locking issues - disabling for now
 #  storage_combined:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && GRPC_TRACE=tcp GRPC_VERBOSITY=debug ./run.py --storage --storage_test unit --feature rdma --topo rdma --combined --test RDMA_TX_SEND_ONLY --testcase 1; ret=$? ; make sanity_logs ; exit $ret" ]
  # config:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --configtest ; ret=$? ; make sanity_logs ; exit $ret" ]
  rdma:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo rdma --feature rdma ; ret=$? ; make sanity_logs ; exit $ret" ]
  rdma_ext:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo rdma --feature rdma_ext,rdma_perf ; ret=$? ; make sanity_logs ; exit $ret" ]
  fte:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo fte --feature fte --lite ; ret=$? ; make sanity_logs ; exit $ret" ]
  fte2:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo fte --feature fte2 --lite ; ret=$? ; make sanity_logs ; exit $ret" ]
  ftevxlan:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo fte --feature ftevxlan --lite ; ret=$? ; make sanity_logs ; exit $ret" ]
  alg: ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py --topo alg --feature alg ; ret=$? ; make sanity_logs ; exit $ret" ]
  norm: ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo norm --feature norm ; ret=$? ; make sanity_logs ; exit $ret" ]
  eth:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo eth --feature eth ; ret=$? ; make sanity_logs ; exit $ret" ]
  acl:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo acl --feature acl ; ret=$? ; make sanity_logs ; exit $ret" ]
  proxy:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo proxy --feature proxy,proxy_fte,proxy_asym1,proxy_asym2 ; ret=$? ; make sanity_logs ; exit $ret" ]
  e2etlsproxy:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo proxy --feature proxy --config-only --e2e-tls-dol ; ret=$? ; make sanity_logs ; exit $ret" ]
  v6e2etlsproxy:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo proxy --feature proxy --config-only --v6-e2e-tls-dol ; ret=$? ; make sanity_logs ; exit $ret" ]
  e2eeplearn: ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py --topo e2e_eplearn --feature e2e_learn --e2e-mode dol-auto --cfgjson conf/dol.conf; ret=$? ; make sanity_logs ; exit $ret" ]
#  e2ealg: ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo alg --feature e2e --sub alg --e2e-mode dol-auto --cfgjson conf/dol.conf ; ret=$? ; make sanity_logs ; exit $ret" ]
  e2enetworking:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make && make package-sim && make release && rm -f nic.tar  && ./run.py --naplescontainer --e2e-mode auto; ret=$? ; make sanity_logs ; exit $ret" ]
  ipsec:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo proxy --feature ipsec --no_error_check ; ret=$? ; make sanity_logs ; exit $ret" ]
  networking:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo up2up --feature networking ; ret=$? ; make sanity_logs ; exit $ret" ]
  vxlan:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo vxlan --feature vxlan ; ret=$? ; make sanity_logs ; exit $ret" ]
  ipsg:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo eth --feature ipsg ; ret=$? ; make sanity_logs ; exit $ret" ]
  firewall:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo firewall --feature firewall ; ret=$? ; make sanity_logs ; exit $ret" ]
  # admin:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo admin --feature admin ; ret=$? ; make sanity_logs ; exit $ret" ]
  pin:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo fte --feature fte,hostpin --hostpin --lite ; ret=$? ; make sanity_logs ; exit $ret" ]
  pin2:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo fte --feature fte2 --hostpin --lite ; ret=$? ; make sanity_logs ; exit $ret" ]
  pinvxlan:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo fte --feature ftevxlan,hpvxlan --hostpin --lite ; ret=$? ; make sanity_logs ; exit $ret" ]
  agent: ["sh", "-c", "cd $GOPATH/src/github.com/pensando/sw && make pull-assets && make checks && cd nic && make j=2 nic && make sanity-tests && bash agent/netagent/scripts/sanity.sh ; ret=$? ; make sanity_logs ; exit $ret" ]
  agent-single-threaded: ["sh", "-c", "cd $GOPATH/src/github.com/pensando/sw && make pull-assets && make checks && cd nic && make j=2 nic && make sanity-tests && bash agent/netagent/scripts/sanity.sh single-threaded ; ret=$? ; make sanity_logs ; exit $ret" ]
  agent-arm-xcompile: ["sh", "-c", "cd $GOPATH/src/github.com/pensando/sw make checks && env CGO_LDFLAGS=-L/tool/toolchain/aarch64-1.1/aarch64-linux-gnu/usr/include CC=/tool/toolchain/aarch64-1.1/bin/aarch64-linux-gnu-gcc CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -a -v github.com/pensando/sw/nic/agent/cmd/netagent github.com/pensando/sw/nic/agent/cmd/nmd" ]
  agent-standalone: ["sh", "-c", "cd $GOPATH/src/github.com/pensando/sw && make checks && cd nic && make pull-assets && make j=2 nic && go install github.com/pensando/sw/nic/agent/cmd/netagent && bash agent/netagent/scripts/sanity.sh stand-alone ; ret=$? ; make sanity_logs ; exit $ret"]
  multicast:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo multicast --feature multicast ; ret=$? ; make sanity_logs ; exit $ret" ]
  pinl2mc:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo multicast --feature pinl2mc --hostpin ; ret=$? ; make sanity_logs ; exit $ret" ]
  l4lb:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo l4lb --feature l4lb ; ret=$? ; make sanity_logs ; exit $ret" ]
  dos:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo dos --feature dos ; ret=$? ; make sanity_logs ; exit $ret" ]
  recirc:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo recirc --feature recirc ; ret=$? ; make sanity_logs ; exit $ret" ]
  classic:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo classic --feature classic --classic ; ret=$? ; make sanity_logs ; exit $ret" ]
  classicl2mc:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo classic --feature classicl2mc --classic ; ret=$? ; make sanity_logs ; exit $ret" ]
  parser:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo parser --feature parser ; ret=$? ; make sanity_logs ; exit $ret" ]
  telemetry:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo telemetry --feature telemetry ; ret=$? ; make sanity_logs ; exit $ret" ]
  p4pt:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py --topo p4pt --feature p4pt ; ret=$? ; make sanity_logs ; exit $ret" ]
  app_redir:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo app_redir --feature app_redir ; ret=$? ; make sanity_logs ; exit $ret" ]
  e2el7:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo proxy --feature proxy --config-only --e2e-l7-dol ; ret=$? ; make sanity_logs ; exit $ret" ]
  mbt: ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py --mbt --mbtrandomseed 6003702; ret=$? ; make sanity_logs ; exit $ret" ]
  mbt_dol: ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py --topo=up2up --feature=networking --mbt; ret=$? ; make sanity_logs ; exit $ret" ]
  mbt_firewall:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo firewall --feature firewall --mbt; ret=$? ; make sanity_logs ; exit $ret" ]
  mbt_alg: ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py --topo alg --feature alg --mbt ; ret=$? ; make sanity_logs ; exit $ret" ]
  # configtoggle: ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo up2up --feature networking --configtoggle ; ret=$? ; make sanity_logs ; exit $ret" ]
  gft/gtest:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 gft && ./run.py --gft_gtest && make run-gft-gtests ; ret=$? ; make sanity_logs ; exit $ret" ]
  apollo/gtest:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make apollo && ./run.py --apollo_gtest ; ret=$? ; make sanity_logs ; exit $ret" ]
  gft:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 gft && ./run.py  --topo gft --feature gft --gft ; ret=$? ; make sanity_logs ; exit $ret" ]
  base:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo base --feature eth_base,nw_base,rdma_base,proxy_base --lite ; ret=$? ; make sanity_logs ; exit $ret" ]
  gft_rdma:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 gft && ./run.py  --topo rdma_gft --feature rdma_perf --gft ; ret=$? ; make sanity_logs ; exit $ret" ]
  gft_rdma_l2l:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 gft && ./run.py  --topo rdma_gft --feature rdma_send_only_inline_l2l,rdma_send_l2l --l2l --gft ; ret=$? ; make sanity_logs ; exit $ret" ]
  swphv:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./run.py  --topo firewall --feature swphv ; ret=$? ; make sanity_logs ; exit $ret" ]
  proto-sync: ["sh", "-c", "cd /sw && make pull-assets && cd $GOPATH/src/github.com/pensando/sw/nic/agent/netagent/datapath/halproto && make proto-sync" ]
  hal-rtl/parser:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make hal-rtl && ./run.py  --topo parser --feature parser ; ret=$? ; make sanity_logs ; exit $ret" ]
  naples-sim:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && bazel build //nic/hal/test:nic_mgr_app && make package-sim && make release && rm -f nic.tar && ./tools/validate-naples-docker.sh; ret=$? ; make sanity_logs ; exit $ret" ]
  agent/up2up:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make j=2 nic && make sanity-tests && ./tools/run-agent-sanity.sh --topo agentup2up --feature agentup2up ; ret=$? ; make sanity_logs ; exit $ret" ]
  upgmgr:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && make && bazel test //nic/upgrade_manager/... --jobs 1 --cache_test_results=no --test_output=all ; ret=$? ; exit $ret" ]
  delphi:  ["sh", "-c", "cd /sw && make pull-assets && cd nic && bazel build //nic/delphi/...  && cd $GOPATH/src/github.com/pensando/sw && go test -v ./nic/delphi/...; ret=$? ; exit $ret" ]
  venice: ["sh", "-c", "cd $GOPATH/src/github.com/pensando/sw && make checks && make unit-test-cover; ret=$? ; make sanity_logs ; exit $ret" ]

cache:
  name: "sw"
  mount_dir: "/root/.cache"
image:
  bind_dir: "/sw"
  work_dir: "/sw/nic"
rebase: true
logfiles:
  - /sw/nic/nic_sanity_logs.tar.gz

#warmd:
#  target: [ "sh", "-c", "cd /sw/test/suites/e2etcptls && go run e2etcptls.go" ]
#  create:
#    image: build-13
#    count: 1
#    resources:
#      cpus: 4
#      memory: 8
#
#  provision:
#    username: vm
#    password: vm
#    # additional vars to pass to ansible.
#    vars:
