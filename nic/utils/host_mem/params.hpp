#ifndef _PARAMS_H_
#define _PARAMS_H_

#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdint.h>
#include <assert.h>

#include <memory>

namespace utils {

// The shared memory block is identified by a unique key.
// By default the key is generated by combining a const string
// "MPLS" and UID of the process. This allows multiple users
// per machine running/testing with the model.
// Still in some cases users might want to control the key.
// For those cases they can set the env. variable HOST_MEM_KEY
// to some unique integer before launching the model and that
// key will be used.

static const char *kEnvMemLabel = "HOST_MEM_KEY";
static const key_t kShmKey = 0x4d504c53;  // MPLS
static const size_t kShmSize = 16 * 64 * 1024 * 1024;
const static uint32_t kAllocUnitShift = 6;
const static uint32_t kAllocUnit = (1 << kAllocUnitShift);

inline const key_t HostMemHandle() {
  char *env_key;
  if ((env_key = getenv(kEnvMemLabel)) != nullptr) {
    return atoi(env_key);
  }
  if (getenv("MODEL_SHMKEY_PATH")) {
      assert(getenv("MODEL_SHMKEY_PROJID"));
      printf("Deriving Model SHM Key from Path:%s ProjID:%s\n",
             getenv("MODEL_SHMKEY_PATH"), getenv("MODEL_SHMKEY_PROJID"));
      return ftok(getenv("MODEL_SHMKEY_PATH"),
                  atoi(getenv("MODEL_SHMKEY_PROJID")));
  }
  return kShmKey + getuid();
}

}  // namespace utils

#endif
