//-----------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//-----------------------------------------------------------------------------
#ifndef __FTL_TYPES_HPP__
#define __FTL_TYPES_HPP__

#include "include/sdk/base.hpp"
#include "include/sdk/table.hpp"
#include "lib/p4/p4_api.hpp"

#include "ftl_stats.hpp"
#include "ftl_utils.hpp"
#include "ftl_structs.hpp"

using sdk::table::sdk_table_factory_params_t;

#define FTL_MAX_API_CONTEXTS 8

namespace sdk {
namespace table {
namespace ftlint {

#define HINT_SLOT_IS_INVALID(_slot) \
        ((_slot) == ftl_apictx::hint_slot::HINT_SLOT_INVALID)
#define HINT_SLOT_IS_VALID(_slot) \
        ((_slot) != ftl_apictx::hint_slot::HINT_SLOT_INVALID)
#define HINT_SLOT_SET_INVALID(_slot) \
        ((_slot) = ftl_apictx::hint_slot::HINT_SLOT_INVALID)
#define HINT_SLOT_IS_MORE(_slot) \
        ((_slot) == ftl_apictx::hint_slot::HINT_SLOT_MORE)
#define HINT_SLOT_SET_MORE(_slot) \
        ((_slot) = ftl_apictx::hint_slot::HINT_SLOT_MORE)
#define HINT_SLOT_IS_MATCH(_ctx) \
        (HINT_SLOT_IS_FREE((_ctx)->hint_slot) &&\
         HINT_SLOT_IS_MORE((_ctx)->hint_slot))
#define HINT_IS_VALID(_hint) \
        ((_hint) != ftl_apictx::hint_index::HINT_INDEX_INVALID)
#define HINT_SET_INVALID(_hint) \
        ((_hint) = ftl_apictx::hint_index::HINT_INDEX_INVALID)

#define PRINT_API_CTX(_name, _ctx) {\
    FTL_TRACE_VERBOSE("%s: %s, [%s]", _name, (_ctx)->idstr(), (_ctx)->metastr()); \
}

class ftl_bucket;

class ftl_apictx {
public:
    enum hint_index {
        // Hint index 0 is reserved
        HINT_INDEX_INVALID = 0,
    };

    enum hint_slot {
        // Slot 0 is invalid. NCC always generates from Slot 1-to-N.
        HINT_SLOT_INVALID  = 0,
        HINT_SLOT_ONE = 1,
        HINT_SLOT_TWO = 2,
        HINT_SLOT_THREE = 3,
        HINT_SLOT_FOUR = 4,
        HINT_SLOT_FIVE = 5,
        // Slot 1 .... N are all valid slots, auto-generated by NCC.
        // Slot 0xFF is reserved for MoreHints.
        HINT_SLOT_MORE  = 0x7,
    };

public:
    // Flow Table Entry
    ftl_entry_t entry;

    // 32 Bits
    uint32_t hash_msbits:11;
    uint32_t match:1;
    uint32_t exmatch:1;
    uint32_t more_hashs:1;
    uint32_t write_pending:1;
    uint32_t inited:1;
    uint32_t level:4;
    uint32_t table_id:9;
    uint32_t hint_slot:3;
    // 32 Bits
    uint32_t table_index:26;
    uint32_t op:4;
    uint32_t spare2:2;
    // 32 Bits
    uint32_t hint:26;
    uint32_t spare3:6;
    
    ftl_bucket *bucket;
    
    // Properties of this table
    sdk::table::properties_t *props;
    // API Params of this context
    sdk_table_api_params_t *params;
    // Parent API Context: used for context nesting.
    // 1st level HintTable: pctx = MainTable context.
    // 2nd level HintTable: pctx = 1st level HintTable context.
    // and so on...
    ftl_apictx *pctx;
    // Table stats
    ftl_table_stats *table_stats;

public:
    // Default constructor
    ftl_apictx() {
    }

    // Destructor
    ~ftl_apictx() {
    }

    // Debug string
    char* metastr() {
        static char str[256];
        FTL_SNPRINTF(str, sizeof(str), "%p: tid:%d,idx:%d,slt:%d,hnt:%d,"
                     "more:%d,pndg:%d,hmsb:%#x,mat:%d exmat:%d", this, table_id,
                     table_index, hint_slot, hint, more_hashs,
                     write_pending, hash_msbits, match, exmatch);
        return str;
    }

    const char* idstr() {
        static char str[32];
        FTL_SNPRINTF(str, sizeof(str), "%s%d-L%d", level ? "H" : "M",
                     table_index, level);
        return str;
    }

    bool is_max_recircs() {
        return (level >= props->max_recircs);
    }

} __attribute__((__packed__));

#define FTL_API_CONTEXT_IS_MAIN(_ctx) ((_ctx)->level == 0)

#define FTL_API_CONTEXT_INIT_MAIN(_ctx, _op, _params, _props, _ts) \
{ \
    memset(&_ctx, 0, sizeof(ftl_apictx));\
    _ctx.op = _op; \
    _ctx.props = _props; \
    _ctx.params = _params; \
    _ctx.table_stats = _ts; \
    if (_ctx.params->entry) {\
        static char buff[512];\
        FTLENTRY_STR(((ftl_entry_t *)_ctx.params->entry), buff, 512);\
        FTL_TRACE_VERBOSE("input entry:%s hash_32b:%#x hash_valid:%d",\
                          buff, _params->hash_32b, _params->hash_valid);\
        (void)buff;\
    }\
}

#define FTL_API_CONTEXT_INIT(_dstctx, _parctx) \
{ \
    memset(_dstctx, 0, sizeof(ftl_apictx)); \
    _dstctx->op = _parctx->op; \
    _dstctx->hash_msbits = _parctx->hash_msbits; \
    _dstctx->level = _parctx->level + 1; \
    _dstctx->props = _parctx->props; \
    _dstctx->params = _parctx->params; \
    _dstctx->table_stats = _parctx->table_stats; \
    _dstctx->pctx = _parctx; \
}

#define FTL_API_CONTEXT_PRINT_SW_FIELDS(_ctx) \
{ \
    static char buff[512];\
    FTLENTRY_STR(&ctx->entry, buff, 512);\
    FTL_TRACE_VERBOSE("ftl %s: TID:%d Idx:%d Entry:%s", _ctx->idstr(),\
                      _ctx->table_id, _ctx->table_index, buff);\
    (void)buff;\
}

} // namespace ftlint
} // namespace table
} // namespace sdk

#endif // __FTL_TYPES_HPP__
