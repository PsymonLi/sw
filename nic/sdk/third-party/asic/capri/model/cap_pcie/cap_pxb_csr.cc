
#include "cap_pxb_csr.h"
#include "LogMsg.h"        
using namespace std;
        
cap_pxb_csr_int_err_int_enable_clear_t::cap_pxb_csr_int_err_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_int_err_int_enable_clear_t::~cap_pxb_csr_int_err_int_enable_clear_t() { }

cap_pxb_csr_int_err_int_test_set_t::cap_pxb_csr_int_err_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_int_err_int_test_set_t::~cap_pxb_csr_int_err_int_test_set_t() { }

cap_pxb_csr_int_err_t::cap_pxb_csr_int_err_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_int_err_t::~cap_pxb_csr_int_err_t() { }

cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::cap_pxb_csr_int_tgt_ecc_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::~cap_pxb_csr_int_tgt_ecc_int_enable_clear_t() { }

cap_pxb_csr_int_tgt_ecc_int_test_set_t::cap_pxb_csr_int_tgt_ecc_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_int_tgt_ecc_int_test_set_t::~cap_pxb_csr_int_tgt_ecc_int_test_set_t() { }

cap_pxb_csr_int_tgt_ecc_t::cap_pxb_csr_int_tgt_ecc_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_int_tgt_ecc_t::~cap_pxb_csr_int_tgt_ecc_t() { }

cap_pxb_csr_int_itr_ecc_int_enable_clear_t::cap_pxb_csr_int_itr_ecc_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_int_itr_ecc_int_enable_clear_t::~cap_pxb_csr_int_itr_ecc_int_enable_clear_t() { }

cap_pxb_csr_int_itr_ecc_intreg_t::cap_pxb_csr_int_itr_ecc_intreg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_int_itr_ecc_intreg_t::~cap_pxb_csr_int_itr_ecc_intreg_t() { }

cap_pxb_csr_int_itr_ecc_t::cap_pxb_csr_int_itr_ecc_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_int_itr_ecc_t::~cap_pxb_csr_int_itr_ecc_t() { }

cap_pxb_csr_intreg_status_t::cap_pxb_csr_intreg_status_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_intreg_status_t::~cap_pxb_csr_intreg_status_t() { }

cap_pxb_csr_int_groups_int_enable_rw_reg_t::cap_pxb_csr_int_groups_int_enable_rw_reg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_int_groups_int_enable_rw_reg_t::~cap_pxb_csr_int_groups_int_enable_rw_reg_t() { }

cap_pxb_csr_intgrp_status_t::cap_pxb_csr_intgrp_status_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_intgrp_status_t::~cap_pxb_csr_intgrp_status_t() { }

cap_pxb_csr_sta_inval_cam_entry_t::cap_pxb_csr_sta_inval_cam_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_inval_cam_entry_t::~cap_pxb_csr_sta_inval_cam_entry_t() { }

cap_pxb_csr_sta_inval_cam_t::cap_pxb_csr_sta_inval_cam_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_inval_cam_t::~cap_pxb_csr_sta_inval_cam_t() { }

cap_pxb_csr_filter_addr_ctl_value_t::cap_pxb_csr_filter_addr_ctl_value_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_filter_addr_ctl_value_t::~cap_pxb_csr_filter_addr_ctl_value_t() { }

cap_pxb_csr_filter_addr_ctl_t::cap_pxb_csr_filter_addr_ctl_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_filter_addr_ctl_t::~cap_pxb_csr_filter_addr_ctl_t() { }

cap_pxb_csr_filter_addr_hi_data_t::cap_pxb_csr_filter_addr_hi_data_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_filter_addr_hi_data_t::~cap_pxb_csr_filter_addr_hi_data_t() { }

cap_pxb_csr_filter_addr_hi_t::cap_pxb_csr_filter_addr_hi_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_filter_addr_hi_t::~cap_pxb_csr_filter_addr_hi_t() { }

cap_pxb_csr_filter_addr_lo_data_t::cap_pxb_csr_filter_addr_lo_data_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_filter_addr_lo_data_t::~cap_pxb_csr_filter_addr_lo_data_t() { }

cap_pxb_csr_filter_addr_lo_t::cap_pxb_csr_filter_addr_lo_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_filter_addr_lo_t::~cap_pxb_csr_filter_addr_lo_t() { }

cap_pxb_csr_dhs_tgt_pmt_ind_entry_t::cap_pxb_csr_dhs_tgt_pmt_ind_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_pmt_ind_entry_t::~cap_pxb_csr_dhs_tgt_pmt_ind_entry_t() { }

cap_pxb_csr_dhs_tgt_pmt_ind_t::cap_pxb_csr_dhs_tgt_pmt_ind_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_pmt_ind_t::~cap_pxb_csr_dhs_tgt_pmt_ind_t() { }

cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::cap_pxb_csr_dhs_tgt_ind_rsp_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::~cap_pxb_csr_dhs_tgt_ind_rsp_entry_t() { }

cap_pxb_csr_dhs_tgt_ind_rsp_t::cap_pxb_csr_dhs_tgt_ind_rsp_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_ind_rsp_t::~cap_pxb_csr_dhs_tgt_ind_rsp_t() { }

cap_pxb_csr_dhs_tgt_notify_entry_t::cap_pxb_csr_dhs_tgt_notify_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_notify_entry_t::~cap_pxb_csr_dhs_tgt_notify_entry_t() { }

cap_pxb_csr_dhs_tgt_notify_t::cap_pxb_csr_dhs_tgt_notify_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_notify_t::~cap_pxb_csr_dhs_tgt_notify_t() { }

cap_pxb_csr_dhs_itr_cplbfr15_entry_t::cap_pxb_csr_dhs_itr_cplbfr15_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr15_entry_t::~cap_pxb_csr_dhs_itr_cplbfr15_entry_t() { }

cap_pxb_csr_dhs_itr_cplbfr15_t::cap_pxb_csr_dhs_itr_cplbfr15_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr15_t::~cap_pxb_csr_dhs_itr_cplbfr15_t() { }

cap_pxb_csr_dhs_itr_cplbfr14_entry_t::cap_pxb_csr_dhs_itr_cplbfr14_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr14_entry_t::~cap_pxb_csr_dhs_itr_cplbfr14_entry_t() { }

cap_pxb_csr_dhs_itr_cplbfr14_t::cap_pxb_csr_dhs_itr_cplbfr14_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr14_t::~cap_pxb_csr_dhs_itr_cplbfr14_t() { }

cap_pxb_csr_dhs_itr_cplbfr13_entry_t::cap_pxb_csr_dhs_itr_cplbfr13_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr13_entry_t::~cap_pxb_csr_dhs_itr_cplbfr13_entry_t() { }

cap_pxb_csr_dhs_itr_cplbfr13_t::cap_pxb_csr_dhs_itr_cplbfr13_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr13_t::~cap_pxb_csr_dhs_itr_cplbfr13_t() { }

cap_pxb_csr_dhs_itr_cplbfr12_entry_t::cap_pxb_csr_dhs_itr_cplbfr12_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr12_entry_t::~cap_pxb_csr_dhs_itr_cplbfr12_entry_t() { }

cap_pxb_csr_dhs_itr_cplbfr12_t::cap_pxb_csr_dhs_itr_cplbfr12_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr12_t::~cap_pxb_csr_dhs_itr_cplbfr12_t() { }

cap_pxb_csr_dhs_itr_cplbfr11_entry_t::cap_pxb_csr_dhs_itr_cplbfr11_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr11_entry_t::~cap_pxb_csr_dhs_itr_cplbfr11_entry_t() { }

cap_pxb_csr_dhs_itr_cplbfr11_t::cap_pxb_csr_dhs_itr_cplbfr11_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr11_t::~cap_pxb_csr_dhs_itr_cplbfr11_t() { }

cap_pxb_csr_dhs_itr_cplbfr10_entry_t::cap_pxb_csr_dhs_itr_cplbfr10_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr10_entry_t::~cap_pxb_csr_dhs_itr_cplbfr10_entry_t() { }

cap_pxb_csr_dhs_itr_cplbfr10_t::cap_pxb_csr_dhs_itr_cplbfr10_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr10_t::~cap_pxb_csr_dhs_itr_cplbfr10_t() { }

cap_pxb_csr_dhs_itr_cplbfr9_entry_t::cap_pxb_csr_dhs_itr_cplbfr9_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr9_entry_t::~cap_pxb_csr_dhs_itr_cplbfr9_entry_t() { }

cap_pxb_csr_dhs_itr_cplbfr9_t::cap_pxb_csr_dhs_itr_cplbfr9_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr9_t::~cap_pxb_csr_dhs_itr_cplbfr9_t() { }

cap_pxb_csr_dhs_itr_cplbfr8_entry_t::cap_pxb_csr_dhs_itr_cplbfr8_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr8_entry_t::~cap_pxb_csr_dhs_itr_cplbfr8_entry_t() { }

cap_pxb_csr_dhs_itr_cplbfr8_t::cap_pxb_csr_dhs_itr_cplbfr8_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr8_t::~cap_pxb_csr_dhs_itr_cplbfr8_t() { }

cap_pxb_csr_dhs_itr_cplbfr7_entry_t::cap_pxb_csr_dhs_itr_cplbfr7_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr7_entry_t::~cap_pxb_csr_dhs_itr_cplbfr7_entry_t() { }

cap_pxb_csr_dhs_itr_cplbfr7_t::cap_pxb_csr_dhs_itr_cplbfr7_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr7_t::~cap_pxb_csr_dhs_itr_cplbfr7_t() { }

cap_pxb_csr_dhs_itr_cplbfr6_entry_t::cap_pxb_csr_dhs_itr_cplbfr6_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr6_entry_t::~cap_pxb_csr_dhs_itr_cplbfr6_entry_t() { }

cap_pxb_csr_dhs_itr_cplbfr6_t::cap_pxb_csr_dhs_itr_cplbfr6_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr6_t::~cap_pxb_csr_dhs_itr_cplbfr6_t() { }

cap_pxb_csr_dhs_itr_cplbfr5_entry_t::cap_pxb_csr_dhs_itr_cplbfr5_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr5_entry_t::~cap_pxb_csr_dhs_itr_cplbfr5_entry_t() { }

cap_pxb_csr_dhs_itr_cplbfr5_t::cap_pxb_csr_dhs_itr_cplbfr5_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr5_t::~cap_pxb_csr_dhs_itr_cplbfr5_t() { }

cap_pxb_csr_dhs_itr_cplbfr4_entry_t::cap_pxb_csr_dhs_itr_cplbfr4_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr4_entry_t::~cap_pxb_csr_dhs_itr_cplbfr4_entry_t() { }

cap_pxb_csr_dhs_itr_cplbfr4_t::cap_pxb_csr_dhs_itr_cplbfr4_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr4_t::~cap_pxb_csr_dhs_itr_cplbfr4_t() { }

cap_pxb_csr_dhs_itr_cplbfr3_entry_t::cap_pxb_csr_dhs_itr_cplbfr3_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr3_entry_t::~cap_pxb_csr_dhs_itr_cplbfr3_entry_t() { }

cap_pxb_csr_dhs_itr_cplbfr3_t::cap_pxb_csr_dhs_itr_cplbfr3_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr3_t::~cap_pxb_csr_dhs_itr_cplbfr3_t() { }

cap_pxb_csr_dhs_itr_cplbfr2_entry_t::cap_pxb_csr_dhs_itr_cplbfr2_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr2_entry_t::~cap_pxb_csr_dhs_itr_cplbfr2_entry_t() { }

cap_pxb_csr_dhs_itr_cplbfr2_t::cap_pxb_csr_dhs_itr_cplbfr2_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr2_t::~cap_pxb_csr_dhs_itr_cplbfr2_t() { }

cap_pxb_csr_dhs_itr_cplbfr1_entry_t::cap_pxb_csr_dhs_itr_cplbfr1_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr1_entry_t::~cap_pxb_csr_dhs_itr_cplbfr1_entry_t() { }

cap_pxb_csr_dhs_itr_cplbfr1_t::cap_pxb_csr_dhs_itr_cplbfr1_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr1_t::~cap_pxb_csr_dhs_itr_cplbfr1_t() { }

cap_pxb_csr_dhs_itr_cplbfr0_entry_t::cap_pxb_csr_dhs_itr_cplbfr0_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr0_entry_t::~cap_pxb_csr_dhs_itr_cplbfr0_entry_t() { }

cap_pxb_csr_dhs_itr_cplbfr0_t::cap_pxb_csr_dhs_itr_cplbfr0_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_cplbfr0_t::~cap_pxb_csr_dhs_itr_cplbfr0_t() { }

cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::~cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t() { }

cap_pxb_csr_dhs_tgt_rc_bdfmap_t::cap_pxb_csr_dhs_tgt_rc_bdfmap_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_rc_bdfmap_t::~cap_pxb_csr_dhs_tgt_rc_bdfmap_t() { }

cap_pxb_csr_dhs_tgt_rdcontext_entry_t::cap_pxb_csr_dhs_tgt_rdcontext_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_rdcontext_entry_t::~cap_pxb_csr_dhs_tgt_rdcontext_entry_t() { }

cap_pxb_csr_dhs_tgt_rdcontext_t::cap_pxb_csr_dhs_tgt_rdcontext_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_rdcontext_t::~cap_pxb_csr_dhs_tgt_rdcontext_t() { }

cap_pxb_csr_dhs_itr_rdcontext_entry_t::cap_pxb_csr_dhs_itr_rdcontext_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_rdcontext_entry_t::~cap_pxb_csr_dhs_itr_rdcontext_entry_t() { }

cap_pxb_csr_dhs_itr_rdcontext_t::cap_pxb_csr_dhs_itr_rdcontext_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_rdcontext_t::~cap_pxb_csr_dhs_itr_rdcontext_t() { }

cap_pxb_csr_dhs_itr_rdhdr_entry_t::cap_pxb_csr_dhs_itr_rdhdr_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_rdhdr_entry_t::~cap_pxb_csr_dhs_itr_rdhdr_entry_t() { }

cap_pxb_csr_dhs_itr_rdhdr_t::cap_pxb_csr_dhs_itr_rdhdr_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_rdhdr_t::~cap_pxb_csr_dhs_itr_rdhdr_t() { }

cap_pxb_csr_dhs_itr_wrhdr_entry_t::cap_pxb_csr_dhs_itr_wrhdr_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_wrhdr_entry_t::~cap_pxb_csr_dhs_itr_wrhdr_entry_t() { }

cap_pxb_csr_dhs_itr_wrhdr_t::cap_pxb_csr_dhs_itr_wrhdr_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_wrhdr_t::~cap_pxb_csr_dhs_itr_wrhdr_t() { }

cap_pxb_csr_dhs_itr_wrbfr3_entry_t::cap_pxb_csr_dhs_itr_wrbfr3_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_wrbfr3_entry_t::~cap_pxb_csr_dhs_itr_wrbfr3_entry_t() { }

cap_pxb_csr_dhs_itr_wrbfr3_t::cap_pxb_csr_dhs_itr_wrbfr3_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_wrbfr3_t::~cap_pxb_csr_dhs_itr_wrbfr3_t() { }

cap_pxb_csr_dhs_itr_wrbfr2_entry_t::cap_pxb_csr_dhs_itr_wrbfr2_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_wrbfr2_entry_t::~cap_pxb_csr_dhs_itr_wrbfr2_entry_t() { }

cap_pxb_csr_dhs_itr_wrbfr2_t::cap_pxb_csr_dhs_itr_wrbfr2_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_wrbfr2_t::~cap_pxb_csr_dhs_itr_wrbfr2_t() { }

cap_pxb_csr_dhs_itr_wrbfr1_entry_t::cap_pxb_csr_dhs_itr_wrbfr1_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_wrbfr1_entry_t::~cap_pxb_csr_dhs_itr_wrbfr1_entry_t() { }

cap_pxb_csr_dhs_itr_wrbfr1_t::cap_pxb_csr_dhs_itr_wrbfr1_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_wrbfr1_t::~cap_pxb_csr_dhs_itr_wrbfr1_t() { }

cap_pxb_csr_dhs_itr_wrbfr0_entry_t::cap_pxb_csr_dhs_itr_wrbfr0_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_wrbfr0_entry_t::~cap_pxb_csr_dhs_itr_wrbfr0_entry_t() { }

cap_pxb_csr_dhs_itr_wrbfr0_t::cap_pxb_csr_dhs_itr_wrbfr0_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_wrbfr0_t::~cap_pxb_csr_dhs_itr_wrbfr0_t() { }

cap_pxb_csr_dhs_tgt_aximst4_entry_t::cap_pxb_csr_dhs_tgt_aximst4_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_aximst4_entry_t::~cap_pxb_csr_dhs_tgt_aximst4_entry_t() { }

cap_pxb_csr_dhs_tgt_aximst4_t::cap_pxb_csr_dhs_tgt_aximst4_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_aximst4_t::~cap_pxb_csr_dhs_tgt_aximst4_t() { }

cap_pxb_csr_dhs_tgt_aximst3_entry_t::cap_pxb_csr_dhs_tgt_aximst3_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_aximst3_entry_t::~cap_pxb_csr_dhs_tgt_aximst3_entry_t() { }

cap_pxb_csr_dhs_tgt_aximst3_t::cap_pxb_csr_dhs_tgt_aximst3_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_aximst3_t::~cap_pxb_csr_dhs_tgt_aximst3_t() { }

cap_pxb_csr_dhs_tgt_aximst2_entry_t::cap_pxb_csr_dhs_tgt_aximst2_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_aximst2_entry_t::~cap_pxb_csr_dhs_tgt_aximst2_entry_t() { }

cap_pxb_csr_dhs_tgt_aximst2_t::cap_pxb_csr_dhs_tgt_aximst2_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_aximst2_t::~cap_pxb_csr_dhs_tgt_aximst2_t() { }

cap_pxb_csr_dhs_tgt_aximst1_entry_t::cap_pxb_csr_dhs_tgt_aximst1_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_aximst1_entry_t::~cap_pxb_csr_dhs_tgt_aximst1_entry_t() { }

cap_pxb_csr_dhs_tgt_aximst1_t::cap_pxb_csr_dhs_tgt_aximst1_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_aximst1_t::~cap_pxb_csr_dhs_tgt_aximst1_t() { }

cap_pxb_csr_dhs_tgt_aximst0_entry_t::cap_pxb_csr_dhs_tgt_aximst0_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_aximst0_entry_t::~cap_pxb_csr_dhs_tgt_aximst0_entry_t() { }

cap_pxb_csr_dhs_tgt_aximst0_t::cap_pxb_csr_dhs_tgt_aximst0_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_aximst0_t::~cap_pxb_csr_dhs_tgt_aximst0_t() { }

cap_pxb_csr_dhs_tgt_romask_entry_t::cap_pxb_csr_dhs_tgt_romask_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_romask_entry_t::~cap_pxb_csr_dhs_tgt_romask_entry_t() { }

cap_pxb_csr_dhs_tgt_romask_t::cap_pxb_csr_dhs_tgt_romask_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_romask_t::~cap_pxb_csr_dhs_tgt_romask_t() { }

cap_pxb_csr_dhs_tgt_cplst_entry_t::cap_pxb_csr_dhs_tgt_cplst_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_cplst_entry_t::~cap_pxb_csr_dhs_tgt_cplst_entry_t() { }

cap_pxb_csr_dhs_tgt_cplst_t::cap_pxb_csr_dhs_tgt_cplst_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_cplst_t::~cap_pxb_csr_dhs_tgt_cplst_t() { }

cap_pxb_csr_dhs_tgt_rxinfo_entry_t::cap_pxb_csr_dhs_tgt_rxinfo_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_rxinfo_entry_t::~cap_pxb_csr_dhs_tgt_rxinfo_entry_t() { }

cap_pxb_csr_dhs_tgt_rxinfo_t::cap_pxb_csr_dhs_tgt_rxinfo_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_rxinfo_t::~cap_pxb_csr_dhs_tgt_rxinfo_t() { }

cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::~cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t() { }

cap_pxb_csr_dhs_tgt_rxcrbfr3_t::cap_pxb_csr_dhs_tgt_rxcrbfr3_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_rxcrbfr3_t::~cap_pxb_csr_dhs_tgt_rxcrbfr3_t() { }

cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::~cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t() { }

cap_pxb_csr_dhs_tgt_rxcrbfr2_t::cap_pxb_csr_dhs_tgt_rxcrbfr2_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_rxcrbfr2_t::~cap_pxb_csr_dhs_tgt_rxcrbfr2_t() { }

cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::~cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t() { }

cap_pxb_csr_dhs_tgt_rxcrbfr1_t::cap_pxb_csr_dhs_tgt_rxcrbfr1_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_rxcrbfr1_t::~cap_pxb_csr_dhs_tgt_rxcrbfr1_t() { }

cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::~cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t() { }

cap_pxb_csr_dhs_tgt_rxcrbfr0_t::cap_pxb_csr_dhs_tgt_rxcrbfr0_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_rxcrbfr0_t::~cap_pxb_csr_dhs_tgt_rxcrbfr0_t() { }

cap_pxb_csr_dhs_tgt_prt_entry_t::cap_pxb_csr_dhs_tgt_prt_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_prt_entry_t::~cap_pxb_csr_dhs_tgt_prt_entry_t() { }

cap_pxb_csr_dhs_tgt_prt_t::cap_pxb_csr_dhs_tgt_prt_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_prt_t::~cap_pxb_csr_dhs_tgt_prt_t() { }

cap_pxb_csr_dhs_tgt_pmr_entry_t::cap_pxb_csr_dhs_tgt_pmr_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_pmr_entry_t::~cap_pxb_csr_dhs_tgt_pmr_entry_t() { }

cap_pxb_csr_dhs_tgt_pmr_t::cap_pxb_csr_dhs_tgt_pmr_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_pmr_t::~cap_pxb_csr_dhs_tgt_pmr_t() { }

cap_pxb_csr_dhs_tgt_pmt_entry_t::cap_pxb_csr_dhs_tgt_pmt_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_pmt_entry_t::~cap_pxb_csr_dhs_tgt_pmt_entry_t() { }

cap_pxb_csr_dhs_tgt_pmt_t::cap_pxb_csr_dhs_tgt_pmt_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_tgt_pmt_t::~cap_pxb_csr_dhs_tgt_pmt_t() { }

cap_pxb_csr_dhs_itr_portmap_entry_t::cap_pxb_csr_dhs_itr_portmap_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_portmap_entry_t::~cap_pxb_csr_dhs_itr_portmap_entry_t() { }

cap_pxb_csr_dhs_itr_portmap_t::cap_pxb_csr_dhs_itr_portmap_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_portmap_t::~cap_pxb_csr_dhs_itr_portmap_t() { }

cap_pxb_csr_dhs_itr_pcihdrt_entry_t::cap_pxb_csr_dhs_itr_pcihdrt_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_pcihdrt_entry_t::~cap_pxb_csr_dhs_itr_pcihdrt_entry_t() { }

cap_pxb_csr_dhs_itr_pcihdrt_t::cap_pxb_csr_dhs_itr_pcihdrt_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_dhs_itr_pcihdrt_t::~cap_pxb_csr_dhs_itr_pcihdrt_t() { }

cap_pxb_csr_cnt_axi_bw_mon_wr_t::cap_pxb_csr_cnt_axi_bw_mon_wr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_axi_bw_mon_wr_t::~cap_pxb_csr_cnt_axi_bw_mon_wr_t() { }

cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::~cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t() { }

cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::~cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t() { }

cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::cap_pxb_csr_sta_axi_bw_mon_wr_latency_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::~cap_pxb_csr_sta_axi_bw_mon_wr_latency_t() { }

cap_pxb_csr_cnt_axi_bw_mon_rd_t::cap_pxb_csr_cnt_axi_bw_mon_rd_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_axi_bw_mon_rd_t::~cap_pxb_csr_cnt_axi_bw_mon_rd_t() { }

cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::~cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t() { }

cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::~cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t() { }

cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::cap_pxb_csr_sta_axi_bw_mon_rd_latency_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::~cap_pxb_csr_sta_axi_bw_mon_rd_latency_t() { }

cap_pxb_csr_cfg_axi_bw_mon_t::cap_pxb_csr_cfg_axi_bw_mon_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_axi_bw_mon_t::~cap_pxb_csr_cfg_axi_bw_mon_t() { }

cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t::cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t::~cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t() { }

cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t::cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t::~cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t() { }

cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t::cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t::~cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t() { }

cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t::cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t::~cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t() { }

cap_pxb_csr_cfg_uid2sidLL_t::cap_pxb_csr_cfg_uid2sidLL_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_uid2sidLL_t::~cap_pxb_csr_cfg_uid2sidLL_t() { }

cap_pxb_csr_cfg_filter_t::cap_pxb_csr_cfg_filter_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_filter_t::~cap_pxb_csr_cfg_filter_t() { }

cap_pxb_csr_cfg_pxb_spare3_t::cap_pxb_csr_cfg_pxb_spare3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_pxb_spare3_t::~cap_pxb_csr_cfg_pxb_spare3_t() { }

cap_pxb_csr_cfg_pxb_spare2_t::cap_pxb_csr_cfg_pxb_spare2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_pxb_spare2_t::~cap_pxb_csr_cfg_pxb_spare2_t() { }

cap_pxb_csr_cfg_pxb_spare1_t::cap_pxb_csr_cfg_pxb_spare1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_pxb_spare1_t::~cap_pxb_csr_cfg_pxb_spare1_t() { }

cap_pxb_csr_cfg_pxb_spare0_t::cap_pxb_csr_cfg_pxb_spare0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_pxb_spare0_t::~cap_pxb_csr_cfg_pxb_spare0_t() { }

cap_pxb_csr_csr_intr_t::cap_pxb_csr_csr_intr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_csr_intr_t::~cap_pxb_csr_csr_intr_t() { }

cap_pxb_csr_sta_tcam_bist_t::cap_pxb_csr_sta_tcam_bist_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tcam_bist_t::~cap_pxb_csr_sta_tcam_bist_t() { }

cap_pxb_csr_cfg_tcam_bist_t::cap_pxb_csr_cfg_tcam_bist_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tcam_bist_t::~cap_pxb_csr_cfg_tcam_bist_t() { }

cap_pxb_csr_sta_sram_bist_t::cap_pxb_csr_sta_sram_bist_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_sram_bist_t::~cap_pxb_csr_sta_sram_bist_t() { }

cap_pxb_csr_cfg_sram_bist_t::cap_pxb_csr_cfg_sram_bist_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_sram_bist_t::~cap_pxb_csr_cfg_sram_bist_t() { }

cap_pxb_csr_sat_itr_rdlat3_t::cap_pxb_csr_sat_itr_rdlat3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sat_itr_rdlat3_t::~cap_pxb_csr_sat_itr_rdlat3_t() { }

cap_pxb_csr_sat_itr_rdlat2_t::cap_pxb_csr_sat_itr_rdlat2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sat_itr_rdlat2_t::~cap_pxb_csr_sat_itr_rdlat2_t() { }

cap_pxb_csr_sat_itr_rdlat1_t::cap_pxb_csr_sat_itr_rdlat1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sat_itr_rdlat1_t::~cap_pxb_csr_sat_itr_rdlat1_t() { }

cap_pxb_csr_sat_itr_rdlat0_t::cap_pxb_csr_sat_itr_rdlat0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sat_itr_rdlat0_t::~cap_pxb_csr_sat_itr_rdlat0_t() { }

cap_pxb_csr_cfg_itr_rdlat_measure_t::cap_pxb_csr_cfg_itr_rdlat_measure_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_itr_rdlat_measure_t::~cap_pxb_csr_cfg_itr_rdlat_measure_t() { }

cap_pxb_csr_sta_diag_spare1_t::cap_pxb_csr_sta_diag_spare1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_diag_spare1_t::~cap_pxb_csr_sta_diag_spare1_t() { }

cap_pxb_csr_cfg_diag_spare1_t::cap_pxb_csr_cfg_diag_spare1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_diag_spare1_t::~cap_pxb_csr_cfg_diag_spare1_t() { }

cap_pxb_csr_sta_diag_spare0_t::cap_pxb_csr_sta_diag_spare0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_diag_spare0_t::~cap_pxb_csr_sta_diag_spare0_t() { }

cap_pxb_csr_cfg_diag_spare0_t::cap_pxb_csr_cfg_diag_spare0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_diag_spare0_t::~cap_pxb_csr_cfg_diag_spare0_t() { }

cap_pxb_csr_cfg_debug_port_t::cap_pxb_csr_cfg_debug_port_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_debug_port_t::~cap_pxb_csr_cfg_debug_port_t() { }

cap_pxb_csr_cfg_tgt_axi_attr_t::cap_pxb_csr_cfg_tgt_axi_attr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_axi_attr_t::~cap_pxb_csr_cfg_tgt_axi_attr_t() { }

cap_pxb_csr_sat_tgt_rsp_err_t::cap_pxb_csr_sat_tgt_rsp_err_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sat_tgt_rsp_err_t::~cap_pxb_csr_sat_tgt_rsp_err_t() { }

cap_pxb_csr_sat_itr_req_portgate_t::cap_pxb_csr_sat_itr_req_portgate_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sat_itr_req_portgate_t::~cap_pxb_csr_sat_itr_req_portgate_t() { }

cap_pxb_csr_sat_itr_rsp_err_t::cap_pxb_csr_sat_itr_rsp_err_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sat_itr_rsp_err_t::~cap_pxb_csr_sat_itr_rsp_err_t() { }

cap_pxb_csr_sat_itr_cpl_err_t::cap_pxb_csr_sat_itr_cpl_err_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sat_itr_cpl_err_t::~cap_pxb_csr_sat_itr_cpl_err_t() { }

cap_pxb_csr_sat_itr_xfer_unexpected_t::cap_pxb_csr_sat_itr_xfer_unexpected_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sat_itr_xfer_unexpected_t::~cap_pxb_csr_sat_itr_xfer_unexpected_t() { }

cap_pxb_csr_sat_itr_req_err_t::cap_pxb_csr_sat_itr_req_err_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sat_itr_req_err_t::~cap_pxb_csr_sat_itr_req_err_t() { }

cap_pxb_csr_sat_tgt_ind_reason_t::cap_pxb_csr_sat_tgt_ind_reason_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sat_tgt_ind_reason_t::~cap_pxb_csr_sat_tgt_ind_reason_t() { }

cap_pxb_csr_cfg_itr_axi_resp_order_t::cap_pxb_csr_cfg_itr_axi_resp_order_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_itr_axi_resp_order_t::~cap_pxb_csr_cfg_itr_axi_resp_order_t() { }

cap_pxb_csr_cfg_itr_atomic_seq_cnt_t::cap_pxb_csr_cfg_itr_atomic_seq_cnt_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_itr_atomic_seq_cnt_t::~cap_pxb_csr_cfg_itr_atomic_seq_cnt_t() { }

cap_pxb_csr_sta_itr_cnxt_pending_t::cap_pxb_csr_sta_itr_cnxt_pending_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_cnxt_pending_t::~cap_pxb_csr_sta_itr_cnxt_pending_t() { }

cap_pxb_csr_sta_itr_atomic_seq_cnt_t::cap_pxb_csr_sta_itr_atomic_seq_cnt_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_atomic_seq_cnt_t::~cap_pxb_csr_sta_itr_atomic_seq_cnt_t() { }

cap_pxb_csr_sta_itr_portfifo_depth_t::cap_pxb_csr_sta_itr_portfifo_depth_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_portfifo_depth_t::~cap_pxb_csr_sta_itr_portfifo_depth_t() { }

cap_pxb_csr_sta_itr_tags_pending_t::cap_pxb_csr_sta_itr_tags_pending_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_tags_pending_t::~cap_pxb_csr_sta_itr_tags_pending_t() { }

cap_pxb_csr_sta_itr_raw_tlp_t::cap_pxb_csr_sta_itr_raw_tlp_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_raw_tlp_t::~cap_pxb_csr_sta_itr_raw_tlp_t() { }

cap_pxb_csr_sta_itr_raw_tlp_data_t::cap_pxb_csr_sta_itr_raw_tlp_data_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_raw_tlp_data_t::~cap_pxb_csr_sta_itr_raw_tlp_data_t() { }

cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::cap_pxb_csr_cfg_itr_raw_tlp_cmd_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::~cap_pxb_csr_cfg_itr_raw_tlp_cmd_t() { }

cap_pxb_csr_cfg_itr_raw_tlp_t::cap_pxb_csr_cfg_itr_raw_tlp_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_itr_raw_tlp_t::~cap_pxb_csr_cfg_itr_raw_tlp_t() { }

cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::~cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t() { }

cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::~cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t() { }

cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::~cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t() { }

cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::~cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t() { }

cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::~cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t() { }

cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::~cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t() { }

cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::~cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t() { }

cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::~cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t() { }

cap_pxb_csr_sta_itr_req_debug_t::cap_pxb_csr_sta_itr_req_debug_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_req_debug_t::~cap_pxb_csr_sta_itr_req_debug_t() { }

cap_pxb_csr_sta_tgt_req_debug_t::cap_pxb_csr_sta_tgt_req_debug_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_req_debug_t::~cap_pxb_csr_sta_tgt_req_debug_t() { }

cap_pxb_csr_sta_tgt_marker_rx_t::cap_pxb_csr_sta_tgt_marker_rx_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_marker_rx_t::~cap_pxb_csr_sta_tgt_marker_rx_t() { }

cap_pxb_csr_cnt_itr_tot_atomic_req_t::cap_pxb_csr_cnt_itr_tot_atomic_req_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_itr_tot_atomic_req_t::~cap_pxb_csr_cnt_itr_tot_atomic_req_t() { }

cap_pxb_csr_cnt_itr_intx_assert_msg_t::cap_pxb_csr_cnt_itr_intx_assert_msg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_itr_intx_assert_msg_t::~cap_pxb_csr_cnt_itr_intx_assert_msg_t() { }

cap_pxb_csr_cnt_itr_tot_msg_t::cap_pxb_csr_cnt_itr_tot_msg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_itr_tot_msg_t::~cap_pxb_csr_cnt_itr_tot_msg_t() { }

cap_pxb_csr_sta_itr_axi_rd_num_ids_t::cap_pxb_csr_sta_itr_axi_rd_num_ids_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_axi_rd_num_ids_t::~cap_pxb_csr_sta_itr_axi_rd_num_ids_t() { }

cap_pxb_csr_sta_itr_axi_wr_num_ids_t::cap_pxb_csr_sta_itr_axi_wr_num_ids_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_axi_wr_num_ids_t::~cap_pxb_csr_sta_itr_axi_wr_num_ids_t() { }

cap_pxb_csr_sta_tgt_tot_axi_rd_t::cap_pxb_csr_sta_tgt_tot_axi_rd_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_tot_axi_rd_t::~cap_pxb_csr_sta_tgt_tot_axi_rd_t() { }

cap_pxb_csr_sta_tgt_tot_axi_wr_t::cap_pxb_csr_sta_tgt_tot_axi_wr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_tot_axi_wr_t::~cap_pxb_csr_sta_tgt_tot_axi_wr_t() { }

cap_pxb_csr_cnt_tgt_axi_rd64_t::cap_pxb_csr_cnt_tgt_axi_rd64_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_tgt_axi_rd64_t::~cap_pxb_csr_cnt_tgt_axi_rd64_t() { }

cap_pxb_csr_cnt_tgt_tot_axi_rd_t::cap_pxb_csr_cnt_tgt_tot_axi_rd_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_tgt_tot_axi_rd_t::~cap_pxb_csr_cnt_tgt_tot_axi_rd_t() { }

cap_pxb_csr_cnt_tgt_rsp_ca_ur_t::cap_pxb_csr_cnt_tgt_rsp_ca_ur_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_tgt_rsp_ca_ur_t::~cap_pxb_csr_cnt_tgt_rsp_ca_ur_t() { }

cap_pxb_csr_cnt_tgt_db32_axi_wr_t::cap_pxb_csr_cnt_tgt_db32_axi_wr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_tgt_db32_axi_wr_t::~cap_pxb_csr_cnt_tgt_db32_axi_wr_t() { }

cap_pxb_csr_cnt_tgt_db64_axi_wr_t::cap_pxb_csr_cnt_tgt_db64_axi_wr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_tgt_db64_axi_wr_t::~cap_pxb_csr_cnt_tgt_db64_axi_wr_t() { }

cap_pxb_csr_cnt_tgt_axi_wr64_t::cap_pxb_csr_cnt_tgt_axi_wr64_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_tgt_axi_wr64_t::~cap_pxb_csr_cnt_tgt_axi_wr64_t() { }

cap_pxb_csr_cnt_tgt_tot_axi_wr_t::cap_pxb_csr_cnt_tgt_tot_axi_wr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_tgt_tot_axi_wr_t::~cap_pxb_csr_cnt_tgt_tot_axi_wr_t() { }

cap_pxb_csr_cnt_itr_axi_rd256_t::cap_pxb_csr_cnt_itr_axi_rd256_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_itr_axi_rd256_t::~cap_pxb_csr_cnt_itr_axi_rd256_t() { }

cap_pxb_csr_cnt_itr_axi_rd64_t::cap_pxb_csr_cnt_itr_axi_rd64_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_itr_axi_rd64_t::~cap_pxb_csr_cnt_itr_axi_rd64_t() { }

cap_pxb_csr_cnt_itr_tot_axi_rd_t::cap_pxb_csr_cnt_itr_tot_axi_rd_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_itr_tot_axi_rd_t::~cap_pxb_csr_cnt_itr_tot_axi_rd_t() { }

cap_pxb_csr_sta_itr_tot_axi_rd_t::cap_pxb_csr_sta_itr_tot_axi_rd_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_tot_axi_rd_t::~cap_pxb_csr_sta_itr_tot_axi_rd_t() { }

cap_pxb_csr_sta_itr_tot_axi_wr_t::cap_pxb_csr_sta_itr_tot_axi_wr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_tot_axi_wr_t::~cap_pxb_csr_sta_itr_tot_axi_wr_t() { }

cap_pxb_csr_cnt_itr_axi_wr256_t::cap_pxb_csr_cnt_itr_axi_wr256_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_itr_axi_wr256_t::~cap_pxb_csr_cnt_itr_axi_wr256_t() { }

cap_pxb_csr_cnt_itr_axi_wr64_t::cap_pxb_csr_cnt_itr_axi_wr64_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_itr_axi_wr64_t::~cap_pxb_csr_cnt_itr_axi_wr64_t() { }

cap_pxb_csr_cnt_itr_tot_axi_wr_t::cap_pxb_csr_cnt_itr_tot_axi_wr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cnt_itr_tot_axi_wr_t::~cap_pxb_csr_cnt_itr_tot_axi_wr_t() { }

cap_pxb_csr_sta_tgt_ind_info_t::cap_pxb_csr_sta_tgt_ind_info_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_ind_info_t::~cap_pxb_csr_sta_tgt_ind_info_t() { }

cap_pxb_csr_sta_tgt_axi_pending_t::cap_pxb_csr_sta_tgt_axi_pending_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_axi_pending_t::~cap_pxb_csr_sta_tgt_axi_pending_t() { }

cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::cap_pxb_csr_cfg_tgt_vf_cfg_stride_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::~cap_pxb_csr_cfg_tgt_vf_cfg_stride_t() { }

cap_pxb_csr_sat_tgt_rx_drop_t::cap_pxb_csr_sat_tgt_rx_drop_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sat_tgt_rx_drop_t::~cap_pxb_csr_sat_tgt_rx_drop_t() { }

cap_pxb_csr_sta_tgt_ecc_romask_t::cap_pxb_csr_sta_tgt_ecc_romask_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_ecc_romask_t::~cap_pxb_csr_sta_tgt_ecc_romask_t() { }

cap_pxb_csr_sta_tgt_ecc_prt_t::cap_pxb_csr_sta_tgt_ecc_prt_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_ecc_prt_t::~cap_pxb_csr_sta_tgt_ecc_prt_t() { }

cap_pxb_csr_sta_tgt_ecc_pmr_t::cap_pxb_csr_sta_tgt_ecc_pmr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_ecc_pmr_t::~cap_pxb_csr_sta_tgt_ecc_pmr_t() { }

cap_pxb_csr_sta_tgt_ecc_cplst_t::cap_pxb_csr_sta_tgt_ecc_cplst_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_ecc_cplst_t::~cap_pxb_csr_sta_tgt_ecc_cplst_t() { }

cap_pxb_csr_sta_tgt_ecc_rxinfo_t::cap_pxb_csr_sta_tgt_ecc_rxinfo_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_ecc_rxinfo_t::~cap_pxb_csr_sta_tgt_ecc_rxinfo_t() { }

cap_pxb_csr_sta_tgt_ecc_aximst_4_t::cap_pxb_csr_sta_tgt_ecc_aximst_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_ecc_aximst_4_t::~cap_pxb_csr_sta_tgt_ecc_aximst_4_t() { }

cap_pxb_csr_sta_tgt_ecc_aximst_3_t::cap_pxb_csr_sta_tgt_ecc_aximst_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_ecc_aximst_3_t::~cap_pxb_csr_sta_tgt_ecc_aximst_3_t() { }

cap_pxb_csr_sta_tgt_ecc_aximst_2_t::cap_pxb_csr_sta_tgt_ecc_aximst_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_ecc_aximst_2_t::~cap_pxb_csr_sta_tgt_ecc_aximst_2_t() { }

cap_pxb_csr_sta_tgt_ecc_aximst_1_t::cap_pxb_csr_sta_tgt_ecc_aximst_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_ecc_aximst_1_t::~cap_pxb_csr_sta_tgt_ecc_aximst_1_t() { }

cap_pxb_csr_sta_tgt_ecc_aximst_0_t::cap_pxb_csr_sta_tgt_ecc_aximst_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_ecc_aximst_0_t::~cap_pxb_csr_sta_tgt_ecc_aximst_0_t() { }

cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::~cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t() { }

cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::~cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t() { }

cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::~cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t() { }

cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::~cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t() { }

cap_pxb_csr_sta_itr_ecc_cplbfr_t::cap_pxb_csr_sta_itr_ecc_cplbfr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_ecc_cplbfr_t::~cap_pxb_csr_sta_itr_ecc_cplbfr_t() { }

cap_pxb_csr_sta_itr_ecc_rdhdr_t::cap_pxb_csr_sta_itr_ecc_rdhdr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_ecc_rdhdr_t::~cap_pxb_csr_sta_itr_ecc_rdhdr_t() { }

cap_pxb_csr_sta_itr_ecc_wrhdr_t::cap_pxb_csr_sta_itr_ecc_wrhdr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_ecc_wrhdr_t::~cap_pxb_csr_sta_itr_ecc_wrhdr_t() { }

cap_pxb_csr_sta_itr_ecc_portmap_t::cap_pxb_csr_sta_itr_ecc_portmap_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_ecc_portmap_t::~cap_pxb_csr_sta_itr_ecc_portmap_t() { }

cap_pxb_csr_sta_itr_ecc_pcihdrt_t::cap_pxb_csr_sta_itr_ecc_pcihdrt_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_ecc_pcihdrt_t::~cap_pxb_csr_sta_itr_ecc_pcihdrt_t() { }

cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::cap_pxb_csr_sta_itr_ecc_wrbfr_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::~cap_pxb_csr_sta_itr_ecc_wrbfr_3_t() { }

cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::cap_pxb_csr_sta_itr_ecc_wrbfr_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::~cap_pxb_csr_sta_itr_ecc_wrbfr_2_t() { }

cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::cap_pxb_csr_sta_itr_ecc_wrbfr_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::~cap_pxb_csr_sta_itr_ecc_wrbfr_1_t() { }

cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::cap_pxb_csr_sta_itr_ecc_wrbfr_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::~cap_pxb_csr_sta_itr_ecc_wrbfr_0_t() { }

cap_pxb_csr_cfg_tgt_ecc_disable_t::cap_pxb_csr_cfg_tgt_ecc_disable_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_ecc_disable_t::~cap_pxb_csr_cfg_tgt_ecc_disable_t() { }

cap_pxb_csr_cfg_itr_ecc_disable_t::cap_pxb_csr_cfg_itr_ecc_disable_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_itr_ecc_disable_t::~cap_pxb_csr_cfg_itr_ecc_disable_t() { }

cap_pxb_csr_sta_tgt_pmt_ind_t::cap_pxb_csr_sta_tgt_pmt_ind_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_sta_tgt_pmt_ind_t::~cap_pxb_csr_sta_tgt_pmt_ind_t() { }

cap_pxb_csr_cfg_tgt_pmt_ind_t::cap_pxb_csr_cfg_tgt_pmt_ind_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_pmt_ind_t::~cap_pxb_csr_cfg_tgt_pmt_ind_t() { }

cap_pxb_csr_cfg_tgt_pmt_grst_t::cap_pxb_csr_cfg_tgt_pmt_grst_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_pmt_grst_t::~cap_pxb_csr_cfg_tgt_pmt_grst_t() { }

cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t::cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t::~cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t() { }

cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t::cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t::~cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t() { }

cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::cap_pxb_csr_cfg_pcie_local_memaddr_decode_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::~cap_pxb_csr_cfg_pcie_local_memaddr_decode_t() { }

cap_pxb_csr_cfg_tgt_rc_key_t::cap_pxb_csr_cfg_tgt_rc_key_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_rc_key_t::~cap_pxb_csr_cfg_tgt_rc_key_t() { }

cap_pxb_csr_cfg_pmt_tbl_id_t::cap_pxb_csr_cfg_pmt_tbl_id_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_pmt_tbl_id_t::~cap_pxb_csr_cfg_pmt_tbl_id_t() { }

cap_pxb_csr_cfg_tgt_notify_en_t::cap_pxb_csr_cfg_tgt_notify_en_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_notify_en_t::~cap_pxb_csr_cfg_tgt_notify_en_t() { }

cap_pxb_csr_cfg_tgt_ind_en_t::cap_pxb_csr_cfg_tgt_ind_en_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_ind_en_t::~cap_pxb_csr_cfg_tgt_ind_en_t() { }

cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::cap_pxb_csr_cfg_tgt_rx_credit_bfr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::~cap_pxb_csr_cfg_tgt_rx_credit_bfr_t() { }

cap_pxb_csr_cfg_tgt_fence_ignore_t::cap_pxb_csr_cfg_tgt_fence_ignore_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_fence_ignore_t::~cap_pxb_csr_cfg_tgt_fence_ignore_t() { }

cap_pxb_csr_cfg_tgt_msg_filter_t::cap_pxb_csr_cfg_tgt_msg_filter_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_msg_filter_t::~cap_pxb_csr_cfg_tgt_msg_filter_t() { }

cap_pxb_csr_cfg_tgt_doorbell_base_t::cap_pxb_csr_cfg_tgt_doorbell_base_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_doorbell_base_t::~cap_pxb_csr_cfg_tgt_doorbell_base_t() { }

cap_pxb_csr_cfg_tgt_req_indirect_int_t::cap_pxb_csr_cfg_tgt_req_indirect_int_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_req_indirect_int_t::~cap_pxb_csr_cfg_tgt_req_indirect_int_t() { }

cap_pxb_csr_cfg_tgt_req_notify_ring_size_t::cap_pxb_csr_cfg_tgt_req_notify_ring_size_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_req_notify_ring_size_t::~cap_pxb_csr_cfg_tgt_req_notify_ring_size_t() { }

cap_pxb_csr_cfg_tgt_req_notify_int_t::cap_pxb_csr_cfg_tgt_req_notify_int_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_req_notify_int_t::~cap_pxb_csr_cfg_tgt_req_notify_int_t() { }

cap_pxb_csr_cfg_tgt_req_notify_t::cap_pxb_csr_cfg_tgt_req_notify_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_req_notify_t::~cap_pxb_csr_cfg_tgt_req_notify_t() { }

cap_pxb_csr_cfg_itr_tx_req_t::cap_pxb_csr_cfg_itr_tx_req_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_itr_tx_req_t::~cap_pxb_csr_cfg_itr_tx_req_t() { }

cap_pxb_csr_cfg_tgt_port_t::cap_pxb_csr_cfg_tgt_port_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_tgt_port_t::~cap_pxb_csr_cfg_tgt_port_t() { }

cap_pxb_csr_cfg_itr_port_t::cap_pxb_csr_cfg_itr_port_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_itr_port_t::~cap_pxb_csr_cfg_itr_port_t() { }

cap_pxb_csr_cfg_pc_port_type_t::cap_pxb_csr_cfg_pc_port_type_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_cfg_pc_port_type_t::~cap_pxb_csr_cfg_pc_port_type_t() { }

cap_pxb_csr_rdintr_t::cap_pxb_csr_rdintr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_rdintr_t::~cap_pxb_csr_rdintr_t() { }

cap_pxb_csr_base_t::cap_pxb_csr_base_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pxb_csr_base_t::~cap_pxb_csr_base_t() { }

cap_pxb_csr_t::cap_pxb_csr_t(string name, cap_csr_base * parent): 
    cap_block_base(name, parent)  { 
        set_byte_size(1048576);
        set_attributes(0,get_name(), 0);
        }
cap_pxb_csr_t::~cap_pxb_csr_t() { }

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_int_err_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_ecrc_enable: 0x" << int_var__cpl_ecrc_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_rxbuf_err_enable: 0x" << int_var__cpl_rxbuf_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_stat_enable: 0x" << int_var__cpl_stat_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_unexp_enable: 0x" << int_var__cpl_unexp_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_timeout_enable: 0x" << int_var__cpl_timeout_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_len_enable: 0x" << int_var__cpl_len_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_poison_enable: 0x" << int_var__cpl_poison_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_lowaddr_enable: 0x" << int_var__cpl_lowaddr_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tgt_ind_rsp_unexp_enable: 0x" << int_var__tgt_ind_rsp_unexp_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tgt_axi_rsp_unexp_enable: 0x" << int_var__tgt_axi_rsp_unexp_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tgt_axi_rsp_err_enable: 0x" << int_var__tgt_axi_rsp_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tgt_req_4k_err_enable: 0x" << int_var__tgt_req_4k_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".itr_req_bdfmiss_enable: 0x" << int_var__itr_req_bdfmiss_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".itr_req_axi_unsupp_enable: 0x" << int_var__itr_req_axi_unsupp_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".itr_req_msg_align_err_enable: 0x" << int_var__itr_req_msg_align_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".itr_bus_master_dis_enable: 0x" << int_var__itr_bus_master_dis_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".itr_atomic_seq_err_enable: 0x" << int_var__itr_atomic_seq_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".itr_atomic_resource_err_enable: 0x" << int_var__itr_atomic_resource_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tgt_rmw_axi_resperr_enable: 0x" << int_var__tgt_rmw_axi_resperr_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tgt_ind_notify_axi_resperr_enable: 0x" << int_var__tgt_ind_notify_axi_resperr_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_int_err_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_ecrc_interrupt: 0x" << int_var__cpl_ecrc_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_rxbuf_err_interrupt: 0x" << int_var__cpl_rxbuf_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_stat_interrupt: 0x" << int_var__cpl_stat_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_unexp_interrupt: 0x" << int_var__cpl_unexp_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_timeout_interrupt: 0x" << int_var__cpl_timeout_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_len_interrupt: 0x" << int_var__cpl_len_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_poison_interrupt: 0x" << int_var__cpl_poison_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_lowaddr_interrupt: 0x" << int_var__cpl_lowaddr_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tgt_ind_rsp_unexp_interrupt: 0x" << int_var__tgt_ind_rsp_unexp_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tgt_axi_rsp_unexp_interrupt: 0x" << int_var__tgt_axi_rsp_unexp_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tgt_axi_rsp_err_interrupt: 0x" << int_var__tgt_axi_rsp_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tgt_req_4k_err_interrupt: 0x" << int_var__tgt_req_4k_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".itr_req_bdfmiss_interrupt: 0x" << int_var__itr_req_bdfmiss_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".itr_req_axi_unsupp_interrupt: 0x" << int_var__itr_req_axi_unsupp_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".itr_req_msg_align_err_interrupt: 0x" << int_var__itr_req_msg_align_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".itr_bus_master_dis_interrupt: 0x" << int_var__itr_bus_master_dis_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".itr_atomic_seq_err_interrupt: 0x" << int_var__itr_atomic_seq_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".itr_atomic_resource_err_interrupt: 0x" << int_var__itr_atomic_resource_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tgt_rmw_axi_resperr_interrupt: 0x" << int_var__tgt_rmw_axi_resperr_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tgt_ind_notify_axi_resperr_interrupt: 0x" << int_var__tgt_ind_notify_axi_resperr_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_int_err_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_0_uncorrectable_enable: 0x" << int_var__aximst_0_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_0_correctable_enable: 0x" << int_var__aximst_0_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_1_uncorrectable_enable: 0x" << int_var__aximst_1_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_1_correctable_enable: 0x" << int_var__aximst_1_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_2_uncorrectable_enable: 0x" << int_var__aximst_2_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_2_correctable_enable: 0x" << int_var__aximst_2_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_3_uncorrectable_enable: 0x" << int_var__aximst_3_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_3_correctable_enable: 0x" << int_var__aximst_3_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_4_uncorrectable_enable: 0x" << int_var__aximst_4_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_4_correctable_enable: 0x" << int_var__aximst_4_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_0_uncorrectable_enable: 0x" << int_var__rxcrbfr_0_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_0_correctable_enable: 0x" << int_var__rxcrbfr_0_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_1_uncorrectable_enable: 0x" << int_var__rxcrbfr_1_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_1_correctable_enable: 0x" << int_var__rxcrbfr_1_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_2_uncorrectable_enable: 0x" << int_var__rxcrbfr_2_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_2_correctable_enable: 0x" << int_var__rxcrbfr_2_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_3_uncorrectable_enable: 0x" << int_var__rxcrbfr_3_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_3_correctable_enable: 0x" << int_var__rxcrbfr_3_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxinfo_uncorrectable_enable: 0x" << int_var__rxinfo_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxinfo_correctable_enable: 0x" << int_var__rxinfo_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cplst_uncorrectable_enable: 0x" << int_var__cplst_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cplst_correctable_enable: 0x" << int_var__cplst_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".romask_uncorrectable_enable: 0x" << int_var__romask_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".romask_correctable_enable: 0x" << int_var__romask_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmr_uncorrectable_enable: 0x" << int_var__pmr_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmr_correctable_enable: 0x" << int_var__pmr_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prt_uncorrectable_enable: 0x" << int_var__prt_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prt_correctable_enable: 0x" << int_var__prt_correctable_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_0_uncorrectable_interrupt: 0x" << int_var__aximst_0_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_0_correctable_interrupt: 0x" << int_var__aximst_0_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_1_uncorrectable_interrupt: 0x" << int_var__aximst_1_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_1_correctable_interrupt: 0x" << int_var__aximst_1_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_2_uncorrectable_interrupt: 0x" << int_var__aximst_2_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_2_correctable_interrupt: 0x" << int_var__aximst_2_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_3_uncorrectable_interrupt: 0x" << int_var__aximst_3_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_3_correctable_interrupt: 0x" << int_var__aximst_3_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_4_uncorrectable_interrupt: 0x" << int_var__aximst_4_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_4_correctable_interrupt: 0x" << int_var__aximst_4_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_0_uncorrectable_interrupt: 0x" << int_var__rxcrbfr_0_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_0_correctable_interrupt: 0x" << int_var__rxcrbfr_0_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_1_uncorrectable_interrupt: 0x" << int_var__rxcrbfr_1_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_1_correctable_interrupt: 0x" << int_var__rxcrbfr_1_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_2_uncorrectable_interrupt: 0x" << int_var__rxcrbfr_2_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_2_correctable_interrupt: 0x" << int_var__rxcrbfr_2_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_3_uncorrectable_interrupt: 0x" << int_var__rxcrbfr_3_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_3_correctable_interrupt: 0x" << int_var__rxcrbfr_3_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxinfo_uncorrectable_interrupt: 0x" << int_var__rxinfo_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxinfo_correctable_interrupt: 0x" << int_var__rxinfo_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cplst_uncorrectable_interrupt: 0x" << int_var__cplst_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cplst_correctable_interrupt: 0x" << int_var__cplst_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".romask_uncorrectable_interrupt: 0x" << int_var__romask_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".romask_correctable_interrupt: 0x" << int_var__romask_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmr_uncorrectable_interrupt: 0x" << int_var__pmr_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmr_correctable_interrupt: 0x" << int_var__pmr_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prt_uncorrectable_interrupt: 0x" << int_var__prt_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prt_correctable_interrupt: 0x" << int_var__prt_correctable_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_int_tgt_ecc_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pcihdrt_uncorrectable_enable: 0x" << int_var__pcihdrt_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pcihdrt_correctable_enable: 0x" << int_var__pcihdrt_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".portmap_uncorrectable_enable: 0x" << int_var__portmap_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".portmap_correctable_enable: 0x" << int_var__portmap_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrhdr_uncorrectable_enable: 0x" << int_var__wrhdr_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrhdr_correctable_enable: 0x" << int_var__wrhdr_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rdhdr_uncorrectable_enable: 0x" << int_var__rdhdr_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rdhdr_correctable_enable: 0x" << int_var__rdhdr_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_0_uncorrectable_enable: 0x" << int_var__wrbfr_0_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_0_correctable_enable: 0x" << int_var__wrbfr_0_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_1_uncorrectable_enable: 0x" << int_var__wrbfr_1_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_1_correctable_enable: 0x" << int_var__wrbfr_1_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_2_uncorrectable_enable: 0x" << int_var__wrbfr_2_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_2_correctable_enable: 0x" << int_var__wrbfr_2_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_3_uncorrectable_enable: 0x" << int_var__wrbfr_3_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_3_correctable_enable: 0x" << int_var__wrbfr_3_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cplbfr_uncorrectable_enable: 0x" << int_var__cplbfr_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cplbfr_correctable_enable: 0x" << int_var__cplbfr_correctable_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_int_itr_ecc_intreg_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pcihdrt_uncorrectable_interrupt: 0x" << int_var__pcihdrt_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pcihdrt_correctable_interrupt: 0x" << int_var__pcihdrt_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".portmap_uncorrectable_interrupt: 0x" << int_var__portmap_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".portmap_correctable_interrupt: 0x" << int_var__portmap_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrhdr_uncorrectable_interrupt: 0x" << int_var__wrhdr_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrhdr_correctable_interrupt: 0x" << int_var__wrhdr_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rdhdr_uncorrectable_interrupt: 0x" << int_var__rdhdr_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rdhdr_correctable_interrupt: 0x" << int_var__rdhdr_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_0_uncorrectable_interrupt: 0x" << int_var__wrbfr_0_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_0_correctable_interrupt: 0x" << int_var__wrbfr_0_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_1_uncorrectable_interrupt: 0x" << int_var__wrbfr_1_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_1_correctable_interrupt: 0x" << int_var__wrbfr_1_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_2_uncorrectable_interrupt: 0x" << int_var__wrbfr_2_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_2_correctable_interrupt: 0x" << int_var__wrbfr_2_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_3_uncorrectable_interrupt: 0x" << int_var__wrbfr_3_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_3_correctable_interrupt: 0x" << int_var__wrbfr_3_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cplbfr_uncorrectable_interrupt: 0x" << int_var__cplbfr_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cplbfr_correctable_interrupt: 0x" << int_var__cplbfr_correctable_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_int_itr_ecc_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_intreg_status_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".int_tgt_ecc_interrupt: 0x" << int_var__int_tgt_ecc_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_itr_ecc_interrupt: 0x" << int_var__int_itr_ecc_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_err_interrupt: 0x" << int_var__int_err_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_int_groups_int_enable_rw_reg_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".int_tgt_ecc_enable: 0x" << int_var__int_tgt_ecc_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_itr_ecc_enable: 0x" << int_var__int_itr_ecc_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_err_enable: 0x" << int_var__int_err_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_intgrp_status_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_enable_rw_reg.show();
    int_rw_reg.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_inval_cam_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_inval_cam_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 64 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 64; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_filter_addr_ctl_value_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".value: 0x" << int_var__value << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_filter_addr_ctl_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    value.show(); // large_array
    #else
    for(int ii = 0; ii < 8; ii++) {
        value[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_filter_addr_hi_data_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".value: 0x" << int_var__value << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_filter_addr_hi_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    data.show(); // large_array
    #else
    for(int ii = 0; ii < 8; ii++) {
        data[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_filter_addr_lo_data_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".value: 0x" << int_var__value << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_filter_addr_lo_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    data.show(); // large_array
    #else
    for(int ii = 0; ii < 8; ii++) {
        data[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_pmt_ind_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".cmd: 0x" << int_var__cmd << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_pmt_ind_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    entry.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data0: 0x" << int_var__data0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".data1: 0x" << int_var__data1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".data2: 0x" << int_var__data2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".data3: 0x" << int_var__data3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_stat: 0x" << int_var__cpl_stat << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port_id: 0x" << int_var__port_id << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".axi_id: 0x" << int_var__axi_id << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fetch_rsp: 0x" << int_var__fetch_rsp << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_ind_rsp_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    entry.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_notify_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".posted: 0x" << int_var__posted << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".completed: 0x" << int_var__completed << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_notify_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 8; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr15_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr15_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr14_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr14_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr13_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr13_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr12_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr12_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr11_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr11_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr10_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr10_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr9_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr9_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr8_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr8_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr7_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr7_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr6_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr6_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr5_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr5_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr4_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr4_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr3_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr3_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr2_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr2_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr1_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr0_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_cplbfr0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".valid: 0x" << int_var__valid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rc_bdf: 0x" << int_var__rc_bdf << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port_id: 0x" << int_var__port_id << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".VFID: 0x" << int_var__VFID << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_rc_bdfmap_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 64 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 64; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_rdcontext_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".state: 0x" << int_var__state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".portid: 0x" << int_var__portid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".is_nonposted_wr: 0x" << int_var__is_nonposted_wr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".is_posted_wr: 0x" << int_var__is_posted_wr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_rdcontext_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".state: 0x" << int_var__state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".portid: 0x" << int_var__portid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tag: 0x" << int_var__tag << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".axi_id: 0x" << int_var__axi_id << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".raddr: 0x" << int_var__raddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rsize: 0x" << int_var__rsize << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timer: 0x" << int_var__timer << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bdf: 0x" << int_var__bdf << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aerr: 0x" << int_var__aerr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".derr: 0x" << int_var__derr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".terr: 0x" << int_var__terr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".lineaddr: 0x" << int_var__lineaddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".linesize: 0x" << int_var__linesize << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".seg_first: 0x" << int_var__seg_first << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".seg_last: 0x" << int_var__seg_last << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".seg_next: 0x" << int_var__seg_next << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".is_raw: 0x" << int_var__is_raw << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".is_nonposted_wr: 0x" << int_var__is_nonposted_wr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".atomic_state: 0x" << int_var__atomic_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".is_narrow: 0x" << int_var__is_narrow << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_rdcontext_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_rdhdr_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_rdhdr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_wrhdr_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_wrhdr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_wrbfr3_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_wrbfr3_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_wrbfr2_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_wrbfr2_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_wrbfr1_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_wrbfr1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_wrbfr0_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_wrbfr0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_aximst4_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_aximst4_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_aximst3_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_aximst3_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_aximst2_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_aximst2_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_aximst1_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_aximst1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_aximst0_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_aximst0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_romask_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_romask_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_cplst_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_cplst_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_rxinfo_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_rxinfo_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_rxcrbfr3_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_rxcrbfr2_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_rxcrbfr1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_rxcrbfr0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_prt_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".entry_data: 0x" << int_var__entry_data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_prt_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 4096 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 4096; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_pmr_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".entry_data: 0x" << int_var__entry_data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_pmr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_pmt_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".x_data: 0x" << int_var__x_data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".y_data: 0x" << int_var__y_data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".valid: 0x" << int_var__valid << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_tgt_pmt_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_portmap_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".dest: 0x" << int_var__dest << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_portmap_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".valid: 0x" << int_var__valid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bdf: 0x" << int_var__bdf << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".td: 0x" << int_var__td << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pasid_en: 0x" << int_var__pasid_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pasid_source: 0x" << int_var__pasid_source << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pasid_value: 0x" << int_var__pasid_value << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pasid_exe: 0x" << int_var__pasid_exe << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pasid_privl: 0x" << int_var__pasid_privl << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".attr2_1_rd: 0x" << int_var__attr2_1_rd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".attr2_1_wr: 0x" << int_var__attr2_1_wr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rc_cfg1: 0x" << int_var__rc_cfg1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".attr0_rd: 0x" << int_var__attr0_rd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".attr0_wr: 0x" << int_var__attr0_wr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ats_at_wr: 0x" << int_var__ats_at_wr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ats_at_rd: 0x" << int_var__ats_at_rd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tc: 0x" << int_var__tc << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ln_wr: 0x" << int_var__ln_wr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ln_rd: 0x" << int_var__ln_rd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rsvd1: 0x" << int_var__rsvd1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_dhs_itr_pcihdrt_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 2048 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 2048; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_axi_bw_mon_wr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".val: 0x" << int_var__val << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".outstanding: 0x" << int_var__outstanding << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dess_rdy: 0x" << int_var__dess_rdy << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".maxv: 0x" << int_var__maxv << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".avrg: 0x" << int_var__avrg << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".maxv: 0x" << int_var__maxv << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".avrg: 0x" << int_var__avrg << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_axi_bw_mon_rd_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".val: 0x" << int_var__val << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".outstanding: 0x" << int_var__outstanding << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dess_rdy: 0x" << int_var__dess_rdy << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".maxv: 0x" << int_var__maxv << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".avrg: 0x" << int_var__avrg << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".maxv: 0x" << int_var__maxv << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".avrg: 0x" << int_var__avrg << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_axi_bw_mon_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cycle: 0x" << int_var__cycle << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rcache: 0x" << int_var__rcache << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rcache_msk: 0x" << int_var__rcache_msk << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wcache: 0x" << int_var__wcache << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wcache_msk: 0x" << int_var__wcache_msk << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".msk: 0x" << int_var__msk << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".msk: 0x" << int_var__msk << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".msk: 0x" << int_var__msk << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".msk: 0x" << int_var__msk << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_uid2sidLL_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".spare: 0x" << int_var__spare << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".mode: 0x" << int_var__mode << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".base: 0x" << int_var__base << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_filter_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".awcache_mask: 0x" << int_var__awcache_mask << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".awcache_match: 0x" << int_var__awcache_match << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".arcache_mask: 0x" << int_var__arcache_mask << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".arcache_match: 0x" << int_var__arcache_match << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_pxb_spare3_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_pxb_spare2_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_pxb_spare1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_pxb_spare0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_csr_intr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".dowstream: 0x" << int_var__dowstream << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dowstream_enable: 0x" << int_var__dowstream_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tcam_bist_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".done_pass: 0x" << int_var__done_pass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".done_fail: 0x" << int_var__done_fail << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tcam_bist_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".run: 0x" << int_var__run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_sram_bist_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".done_pass: 0x" << int_var__done_pass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".done_fail: 0x" << int_var__done_fail << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_sram_bist_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".run: 0x" << int_var__run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sat_itr_rdlat3_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".num_samples: 0x" << int_var__num_samples << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sat_itr_rdlat2_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".num_samples: 0x" << int_var__num_samples << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sat_itr_rdlat1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".num_samples: 0x" << int_var__num_samples << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sat_itr_rdlat0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".num_samples: 0x" << int_var__num_samples << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_itr_rdlat_measure_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".thres2: 0x" << int_var__thres2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".thres1: 0x" << int_var__thres1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".thres0: 0x" << int_var__thres0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".portid: 0x" << int_var__portid << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_diag_spare1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_diag_spare1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_diag_spare0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_diag_spare0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_debug_port_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".select: 0x" << int_var__select << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_axi_attr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".arcache: 0x" << int_var__arcache << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".awcache: 0x" << int_var__awcache << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prot: 0x" << int_var__prot << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".qos: 0x" << int_var__qos << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".lock: 0x" << int_var__lock << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sat_tgt_rsp_err_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ind_cnxt_mismatch: 0x" << int_var__ind_cnxt_mismatch << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rresp_err: 0x" << int_var__rresp_err << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bresp_err: 0x" << int_var__bresp_err << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sat_itr_req_portgate_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".closed: 0x" << int_var__closed << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sat_itr_rsp_err_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".axi: 0x" << int_var__axi << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_timeout: 0x" << int_var__cpl_timeout << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sat_itr_cpl_err_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ecrc: 0x" << int_var__ecrc << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxbuf_ecc: 0x" << int_var__rxbuf_ecc << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_stat: 0x" << int_var__cpl_stat << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".unexpected: 0x" << int_var__unexpected << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sat_itr_xfer_unexpected_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".wr256x: 0x" << int_var__wr256x << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rd256x: 0x" << int_var__rd256x << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wr_narrow: 0x" << int_var__wr_narrow << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rd_narrow: 0x" << int_var__rd_narrow << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sat_itr_req_err_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".unsupp_wr: 0x" << int_var__unsupp_wr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".unsupp_rd: 0x" << int_var__unsupp_rd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pcihdrt_miss: 0x" << int_var__pcihdrt_miss << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bus_master_dis: 0x" << int_var__bus_master_dis << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sat_tgt_ind_reason_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pmr_force: 0x" << int_var__pmr_force << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prt_force: 0x" << int_var__prt_force << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".msg: 0x" << int_var__msg << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".atomic: 0x" << int_var__atomic << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".poisoned: 0x" << int_var__poisoned << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".unsupp: 0x" << int_var__unsupp << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmv: 0x" << int_var__pmv << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".db_pmv: 0x" << int_var__db_pmv << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmt_miss: 0x" << int_var__pmt_miss << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rc_vfid_miss: 0x" << int_var__rc_vfid_miss << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmr_prt_miss: 0x" << int_var__pmr_prt_miss << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prt_oor: 0x" << int_var__prt_oor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bdf_wcard_oor: 0x" << int_var__bdf_wcard_oor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".vfid_oor: 0x" << int_var__vfid_oor << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_itr_axi_resp_order_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".rd_strict: 0x" << int_var__rd_strict << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wr_strict: 0x" << int_var__wr_strict << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rd_id_limit: 0x" << int_var__rd_id_limit << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_itr_atomic_seq_cnt_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".rst_mask: 0x" << int_var__rst_mask << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_cnxt_pending_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".num: 0x" << int_var__num << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_atomic_seq_cnt_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_mask: 0x" << int_var__err_mask << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_portfifo_depth_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".port0_wr: 0x" << int_var__port0_wr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port0_rd: 0x" << int_var__port0_rd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port1_wr: 0x" << int_var__port1_wr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port1_rd: 0x" << int_var__port1_rd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port2_wr: 0x" << int_var__port2_wr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port2_rd: 0x" << int_var__port2_rd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port3_wr: 0x" << int_var__port3_wr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port3_rd: 0x" << int_var__port3_rd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port4_wr: 0x" << int_var__port4_wr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port4_rd: 0x" << int_var__port4_rd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port5_wr: 0x" << int_var__port5_wr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port5_rd: 0x" << int_var__port5_rd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port6_wr: 0x" << int_var__port6_wr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port6_rd: 0x" << int_var__port6_rd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port7_wr: 0x" << int_var__port7_wr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port7_rd: 0x" << int_var__port7_rd << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_tags_pending_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".port0: 0x" << int_var__port0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port1: 0x" << int_var__port1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port2: 0x" << int_var__port2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port3: 0x" << int_var__port3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port4: 0x" << int_var__port4 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port5: 0x" << int_var__port5 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port6: 0x" << int_var__port6 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port7: 0x" << int_var__port7 << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_raw_tlp_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".resp_rdy: 0x" << int_var__resp_rdy << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_stat: 0x" << int_var__cpl_stat << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_data_err: 0x" << int_var__cpl_data_err << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_timeout_err: 0x" << int_var__cpl_timeout_err << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".req_err: 0x" << int_var__req_err << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_raw_tlp_data_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".resp0: 0x" << int_var__resp0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".resp1: 0x" << int_var__resp1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".resp2: 0x" << int_var__resp2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".resp3: 0x" << int_var__resp3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".resp4: 0x" << int_var__resp4 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".resp5: 0x" << int_var__resp5 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".resp6: 0x" << int_var__resp6 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".resp7: 0x" << int_var__resp7 << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".dw_cnt: 0x" << int_var__dw_cnt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port_id: 0x" << int_var__port_id << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cmd_go: 0x" << int_var__cmd_go << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_itr_raw_tlp_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".dw0: 0x" << int_var__dw0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dw1: 0x" << int_var__dw1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dw2: 0x" << int_var__dw2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dw3: 0x" << int_var__dw3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dw4: 0x" << int_var__dw4 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dw5: 0x" << int_var__dw5 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dw6: 0x" << int_var__dw6 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dw7: 0x" << int_var__dw7 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dw8: 0x" << int_var__dw8 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dw9: 0x" << int_var__dw9 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dw10: 0x" << int_var__dw10 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dw11: 0x" << int_var__dw11 << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".waddr: 0x" << int_var__waddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".raddr: 0x" << int_var__raddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".waddr: 0x" << int_var__waddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".raddr: 0x" << int_var__raddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".waddr: 0x" << int_var__waddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".raddr: 0x" << int_var__raddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".waddr: 0x" << int_var__waddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".raddr: 0x" << int_var__raddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".waddr: 0x" << int_var__waddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".raddr: 0x" << int_var__raddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".waddr: 0x" << int_var__waddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".raddr: 0x" << int_var__raddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".waddr: 0x" << int_var__waddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".raddr: 0x" << int_var__raddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".waddr: 0x" << int_var__waddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".raddr: 0x" << int_var__raddr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_req_debug_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".stg0_vld: 0x" << int_var__stg0_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg1_vld: 0x" << int_var__stg1_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg2_vld: 0x" << int_var__stg2_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg3_vld: 0x" << int_var__stg3_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg4_vld: 0x" << int_var__stg4_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg5_vld: 0x" << int_var__stg5_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".s0_rdy: 0x" << int_var__s0_rdy << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".s0_port_space_avl_vec: 0x" << int_var__s0_port_space_avl_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".s0_tag_avl_vec: 0x" << int_var__s0_tag_avl_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".itr_cnxt_free_avl0: 0x" << int_var__itr_cnxt_free_avl0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".itr_cnxt_free_avl1: 0x" << int_var__itr_cnxt_free_avl1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".s5_req_fifo_depth: 0x" << int_var__s5_req_fifo_depth << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".s5_seg_state: 0x" << int_var__s5_seg_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tx_wrcnt_req_stall: 0x" << int_var__tx_wrcnt_req_stall << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tx_wrcnt_cpl_stall: 0x" << int_var__tx_wrcnt_cpl_stall << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tx_wrcnt_raw_stall: 0x" << int_var__tx_wrcnt_raw_stall << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".s5_is_wr: 0x" << int_var__s5_is_wr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".s5_is_msg: 0x" << int_var__s5_is_msg << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_eop_pnd: 0x" << int_var__cpl_eop_pnd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".req_eop_pnd: 0x" << int_var__req_eop_pnd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".raw_cmd_pnd: 0x" << int_var__raw_cmd_pnd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_tx_vld: 0x" << int_var__cpl_tx_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cpl_tx_rdy: 0x" << int_var__cpl_tx_rdy << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bvalid: 0x" << int_var__bvalid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bready: 0x" << int_var__bready << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".awvalid: 0x" << int_var__awvalid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".awready: 0x" << int_var__awready << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wvalid: 0x" << int_var__wvalid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wready: 0x" << int_var__wready << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".arvalid: 0x" << int_var__arvalid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".arready: 0x" << int_var__arready << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rvalid: 0x" << int_var__rvalid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rready: 0x" << int_var__rready << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_req_debug_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".stg0_vld: 0x" << int_var__stg0_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg1_vld: 0x" << int_var__stg1_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg2_vld: 0x" << int_var__stg2_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg3_vld: 0x" << int_var__stg3_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg4_vld: 0x" << int_var__stg4_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg5_vld: 0x" << int_var__stg5_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg6_vld: 0x" << int_var__stg6_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg7_vld: 0x" << int_var__stg7_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg8_vld: 0x" << int_var__stg8_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg9_vld: 0x" << int_var__stg9_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg0_rdy: 0x" << int_var__stg0_rdy << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg1_rdy: 0x" << int_var__stg1_rdy << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg2_rdy: 0x" << int_var__stg2_rdy << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg3_rdy: 0x" << int_var__stg3_rdy << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg4_rdy: 0x" << int_var__stg4_rdy << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg5_rdy: 0x" << int_var__stg5_rdy << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg6_rdy: 0x" << int_var__stg6_rdy << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg7_rdy: 0x" << int_var__stg7_rdy << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg8_rdy: 0x" << int_var__stg8_rdy << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stg9_rdy: 0x" << int_var__stg9_rdy << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tgt_req_vld: 0x" << int_var__tgt_req_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".axi_fifo_rdy: 0x" << int_var__axi_fifo_rdy << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".axi_fifo_notempty: 0x" << int_var__axi_fifo_notempty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".notify_full: 0x" << int_var__notify_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tgt_cnxt_xn_pnd: 0x" << int_var__tgt_cnxt_xn_pnd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcfg0_vld: 0x" << int_var__rxcfg0_vld << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".hw_rsp_rdy: 0x" << int_var__hw_rsp_rdy << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".m_axi_awvalid: 0x" << int_var__m_axi_awvalid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".m_axi_arvalid: 0x" << int_var__m_axi_arvalid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".m_axi_wvalid: 0x" << int_var__m_axi_wvalid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".m_axi_awready: 0x" << int_var__m_axi_awready << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".m_axi_arready: 0x" << int_var__m_axi_arready << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".m_axi_wready: 0x" << int_var__m_axi_wready << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".m_axi_rvalid: 0x" << int_var__m_axi_rvalid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".m_axi_rready: 0x" << int_var__m_axi_rready << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".m_axi_bvalid: 0x" << int_var__m_axi_bvalid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".m_axi_bready: 0x" << int_var__m_axi_bready << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tgt_rsp_tx_rdy: 0x" << int_var__tgt_rsp_tx_rdy << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".s7_ax_state0: 0x" << int_var__s7_ax_state0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".s7_ax_state1: 0x" << int_var__s7_ax_state1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".s7_ax_state2: 0x" << int_var__s7_ax_state2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".s7_ax_state3: 0x" << int_var__s7_ax_state3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".s7_ax_state4: 0x" << int_var__s7_ax_state4 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".s7_ax_state5: 0x" << int_var__s7_ax_state5 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".s7_ax_state6: 0x" << int_var__s7_ax_state6 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".s7_ax_state7: 0x" << int_var__s7_ax_state7 << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_marker_rx_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".port0: 0x" << int_var__port0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port1: 0x" << int_var__port1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port2: 0x" << int_var__port2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port3: 0x" << int_var__port3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port4: 0x" << int_var__port4 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port5: 0x" << int_var__port5 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port6: 0x" << int_var__port6 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port7: 0x" << int_var__port7 << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_itr_tot_atomic_req_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sent: 0x" << int_var__sent << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_itr_intx_assert_msg_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sent: 0x" << int_var__sent << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_itr_tot_msg_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sent: 0x" << int_var__sent << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_axi_rd_num_ids_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pending: 0x" << int_var__pending << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_axi_wr_num_ids_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pending: 0x" << int_var__pending << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_tot_axi_rd_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".num_bytes: 0x" << int_var__num_bytes << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_tot_axi_wr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".num_bytes: 0x" << int_var__num_bytes << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_tgt_axi_rd64_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".req: 0x" << int_var__req << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_tgt_tot_axi_rd_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".req: 0x" << int_var__req << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_tgt_rsp_ca_ur_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".cnt: 0x" << int_var__cnt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_tgt_db32_axi_wr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".req: 0x" << int_var__req << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_tgt_db64_axi_wr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".req: 0x" << int_var__req << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_tgt_axi_wr64_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".req: 0x" << int_var__req << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_tgt_tot_axi_wr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".req: 0x" << int_var__req << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_itr_axi_rd256_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".req: 0x" << int_var__req << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_itr_axi_rd64_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".req: 0x" << int_var__req << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_itr_tot_axi_rd_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".req: 0x" << int_var__req << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_tot_axi_rd_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".num_bytes: 0x" << int_var__num_bytes << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_tot_axi_wr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".num_bytes: 0x" << int_var__num_bytes << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_itr_axi_wr256_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".req: 0x" << int_var__req << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_itr_axi_wr64_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".req: 0x" << int_var__req << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cnt_itr_tot_axi_wr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".req: 0x" << int_var__req << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_ind_info_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pending: 0x" << int_var__pending << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ramaddr: 0x" << int_var__ramaddr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_axi_pending_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ids_p0: 0x" << int_var__ids_p0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ids_p1: 0x" << int_var__ids_p1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ids_p2: 0x" << int_var__ids_p2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ids_p3: 0x" << int_var__ids_p3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ids_p4: 0x" << int_var__ids_p4 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ids_p5: 0x" << int_var__ids_p5 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ids_p6: 0x" << int_var__ids_p6 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ids_p7: 0x" << int_var__ids_p7 << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".p_shift: 0x" << int_var__p_shift << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".b_shift: 0x" << int_var__b_shift << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".d_shift: 0x" << int_var__d_shift << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".f_shift: 0x" << int_var__f_shift << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".resource_dwsize: 0x" << int_var__resource_dwsize << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sat_tgt_rx_drop_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".port0: 0x" << int_var__port0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port1: 0x" << int_var__port1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port2: 0x" << int_var__port2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port3: 0x" << int_var__port3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port4: 0x" << int_var__port4 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port5: 0x" << int_var__port5 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port6: 0x" << int_var__port6 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".port7: 0x" << int_var__port7 << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_ecc_romask_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_ecc_prt_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_ecc_pmr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_ecc_cplst_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_ecc_rxinfo_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_ecc_aximst_4_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_ecc_aximst_3_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_ecc_aximst_2_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_ecc_aximst_1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_ecc_aximst_0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_ecc_cplbfr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_ecc_rdhdr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_ecc_wrhdr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_ecc_portmap_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_ecc_pcihdrt_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_ecc_disable_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".rxinfo_cor: 0x" << int_var__rxinfo_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxinfo_det: 0x" << int_var__rxinfo_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxinfo_dhs: 0x" << int_var__rxinfo_dhs << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmr_cor: 0x" << int_var__pmr_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmr_det: 0x" << int_var__pmr_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmr_dhs: 0x" << int_var__pmr_dhs << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prt_cor: 0x" << int_var__prt_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prt_det: 0x" << int_var__prt_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prt_dhs: 0x" << int_var__prt_dhs << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cplst_cor: 0x" << int_var__cplst_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cplst_det: 0x" << int_var__cplst_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cplst_dhs: 0x" << int_var__cplst_dhs << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_cor: 0x" << int_var__aximst_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_det: 0x" << int_var__aximst_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".aximst_dhs: 0x" << int_var__aximst_dhs << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".romask_cor: 0x" << int_var__romask_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".romask_det: 0x" << int_var__romask_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".romask_dhs: 0x" << int_var__romask_dhs << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_cor: 0x" << int_var__rxcrbfr_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_det: 0x" << int_var__rxcrbfr_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rxcrbfr_dhs: 0x" << int_var__rxcrbfr_dhs << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_itr_ecc_disable_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pcihdrt_cor: 0x" << int_var__pcihdrt_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pcihdrt_det: 0x" << int_var__pcihdrt_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pcihdrt_dhs: 0x" << int_var__pcihdrt_dhs << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".portmap_cor: 0x" << int_var__portmap_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".portmap_det: 0x" << int_var__portmap_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".portmap_dhs: 0x" << int_var__portmap_dhs << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_cor: 0x" << int_var__wrbfr_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_det: 0x" << int_var__wrbfr_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrbfr_dhs: 0x" << int_var__wrbfr_dhs << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrhdr_cor: 0x" << int_var__wrhdr_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrhdr_det: 0x" << int_var__wrhdr_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".wrhdr_dhs: 0x" << int_var__wrhdr_dhs << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rdhdr_cor: 0x" << int_var__rdhdr_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rdhdr_det: 0x" << int_var__rdhdr_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rdhdr_dhs: 0x" << int_var__rdhdr_dhs << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cplbfr_cor: 0x" << int_var__cplbfr_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cplbfr_det: 0x" << int_var__cplbfr_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cplbfr_dhs: 0x" << int_var__cplbfr_dhs << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_sta_tgt_pmt_ind_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".hit: 0x" << int_var__hit << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".hit_addr: 0x" << int_var__hit_addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_pmt_ind_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".key: 0x" << int_var__key << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".mask: 0x" << int_var__mask << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_pmt_grst_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".vld: 0x" << int_var__vld << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".val: 0x" << int_var__val << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".base_35_2: 0x" << int_var__base_35_2 << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".region0: 0x" << int_var__region0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".region1: 0x" << int_var__region1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".region2: 0x" << int_var__region2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".region3: 0x" << int_var__region3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".region4: 0x" << int_var__region4 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".region5: 0x" << int_var__region5 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".region6: 0x" << int_var__region6 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".region7: 0x" << int_var__region7 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".region8: 0x" << int_var__region8 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".region9: 0x" << int_var__region9 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".region10: 0x" << int_var__region10 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".region11: 0x" << int_var__region11 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".region12: 0x" << int_var__region12 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".region13: 0x" << int_var__region13 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".region14: 0x" << int_var__region14 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".region15: 0x" << int_var__region15 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".atomic: 0x" << int_var__atomic << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rc_cfg: 0x" << int_var__rc_cfg << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".atomic_page_id: 0x" << int_var__atomic_page_id << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rc_cfg_page_id: 0x" << int_var__rc_cfg_page_id << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rc_io64k: 0x" << int_var__rc_io64k << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_rc_key_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sel: 0x" << int_var__sel << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_pmt_tbl_id_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".memio_tbl_id0: 0x" << int_var__memio_tbl_id0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cfg_tbl_id0: 0x" << int_var__cfg_tbl_id0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rc_tbl_id0: 0x" << int_var__rc_tbl_id0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".default_tbl_id0: 0x" << int_var__default_tbl_id0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".memio_tbl_id1: 0x" << int_var__memio_tbl_id1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cfg_tbl_id1: 0x" << int_var__cfg_tbl_id1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rc_tbl_id1: 0x" << int_var__rc_tbl_id1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".default_tbl_id1: 0x" << int_var__default_tbl_id1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".memio_tbl_id2: 0x" << int_var__memio_tbl_id2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cfg_tbl_id2: 0x" << int_var__cfg_tbl_id2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rc_tbl_id2: 0x" << int_var__rc_tbl_id2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".default_tbl_id2: 0x" << int_var__default_tbl_id2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".memio_tbl_id3: 0x" << int_var__memio_tbl_id3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cfg_tbl_id3: 0x" << int_var__cfg_tbl_id3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rc_tbl_id3: 0x" << int_var__rc_tbl_id3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".default_tbl_id3: 0x" << int_var__default_tbl_id3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".memio_tbl_id4: 0x" << int_var__memio_tbl_id4 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cfg_tbl_id4: 0x" << int_var__cfg_tbl_id4 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rc_tbl_id4: 0x" << int_var__rc_tbl_id4 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".default_tbl_id4: 0x" << int_var__default_tbl_id4 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".memio_tbl_id5: 0x" << int_var__memio_tbl_id5 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cfg_tbl_id5: 0x" << int_var__cfg_tbl_id5 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rc_tbl_id5: 0x" << int_var__rc_tbl_id5 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".default_tbl_id5: 0x" << int_var__default_tbl_id5 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".memio_tbl_id6: 0x" << int_var__memio_tbl_id6 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cfg_tbl_id6: 0x" << int_var__cfg_tbl_id6 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rc_tbl_id6: 0x" << int_var__rc_tbl_id6 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".default_tbl_id6: 0x" << int_var__default_tbl_id6 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".memio_tbl_id7: 0x" << int_var__memio_tbl_id7 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cfg_tbl_id7: 0x" << int_var__cfg_tbl_id7 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rc_tbl_id7: 0x" << int_var__rc_tbl_id7 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".default_tbl_id7: 0x" << int_var__default_tbl_id7 << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_notify_en_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".msg: 0x" << int_var__msg << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmv: 0x" << int_var__pmv << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".db_pmv: 0x" << int_var__db_pmv << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".unsupp: 0x" << int_var__unsupp << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".atomic: 0x" << int_var__atomic << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmt_miss: 0x" << int_var__pmt_miss << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmr_invalid: 0x" << int_var__pmr_invalid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prt_invalid: 0x" << int_var__prt_invalid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rc_vfid_miss: 0x" << int_var__rc_vfid_miss << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prt_oor: 0x" << int_var__prt_oor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".vfid_oor: 0x" << int_var__vfid_oor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cfg_bdf_oor: 0x" << int_var__cfg_bdf_oor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmr_ecc_err: 0x" << int_var__pmr_ecc_err << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prt_ecc_err: 0x" << int_var__prt_ecc_err << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_ind_en_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".msg: 0x" << int_var__msg << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmv: 0x" << int_var__pmv << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".db_pmv: 0x" << int_var__db_pmv << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".unsupp: 0x" << int_var__unsupp << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".atomic: 0x" << int_var__atomic << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmt_miss: 0x" << int_var__pmt_miss << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmr_invalid: 0x" << int_var__pmr_invalid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prt_invalid: 0x" << int_var__prt_invalid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rc_vfid_miss: 0x" << int_var__rc_vfid_miss << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prt_oor: 0x" << int_var__prt_oor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".vfid_oor: 0x" << int_var__vfid_oor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cfg_bdf_oor: 0x" << int_var__cfg_bdf_oor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pmr_ecc_err: 0x" << int_var__pmr_ecc_err << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prt_ecc_err: 0x" << int_var__prt_ecc_err << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".adr_base0: 0x" << int_var__adr_base0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".adr_limit0: 0x" << int_var__adr_limit0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".update0: 0x" << int_var__update0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rst_rxfifo0: 0x" << int_var__rst_rxfifo0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".adr_base1: 0x" << int_var__adr_base1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".adr_limit1: 0x" << int_var__adr_limit1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".update1: 0x" << int_var__update1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rst_rxfifo1: 0x" << int_var__rst_rxfifo1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".adr_base2: 0x" << int_var__adr_base2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".adr_limit2: 0x" << int_var__adr_limit2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".update2: 0x" << int_var__update2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rst_rxfifo2: 0x" << int_var__rst_rxfifo2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".adr_base3: 0x" << int_var__adr_base3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".adr_limit3: 0x" << int_var__adr_limit3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".update3: 0x" << int_var__update3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rst_rxfifo3: 0x" << int_var__rst_rxfifo3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".adr_base4: 0x" << int_var__adr_base4 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".adr_limit4: 0x" << int_var__adr_limit4 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".update4: 0x" << int_var__update4 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rst_rxfifo4: 0x" << int_var__rst_rxfifo4 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".adr_base5: 0x" << int_var__adr_base5 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".adr_limit5: 0x" << int_var__adr_limit5 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".update5: 0x" << int_var__update5 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rst_rxfifo5: 0x" << int_var__rst_rxfifo5 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".adr_base6: 0x" << int_var__adr_base6 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".adr_limit6: 0x" << int_var__adr_limit6 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".update6: 0x" << int_var__update6 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rst_rxfifo6: 0x" << int_var__rst_rxfifo6 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".adr_base7: 0x" << int_var__adr_base7 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".adr_limit7: 0x" << int_var__adr_limit7 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".update7: 0x" << int_var__update7 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rst_rxfifo7: 0x" << int_var__rst_rxfifo7 << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_fence_ignore_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".from_mask: 0x" << int_var__from_mask << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_msg_filter_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".msg_code0: 0x" << int_var__msg_code0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_en0: 0x" << int_var__drop_en0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".msg_code1: 0x" << int_var__msg_code1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_en1: 0x" << int_var__drop_en1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".msg_code2: 0x" << int_var__msg_code2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_en2: 0x" << int_var__drop_en2 << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_doorbell_base_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".addr_33_24: 0x" << int_var__addr_33_24 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".db_host_sel: 0x" << int_var__db_host_sel << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".db_32b_sel: 0x" << int_var__db_32b_sel << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_req_indirect_int_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".intr_data: 0x" << int_var__intr_data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".base_addr_35_2: 0x" << int_var__base_addr_35_2 << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_req_notify_ring_size_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".mask: 0x" << int_var__mask << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_req_notify_int_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".intr_data: 0x" << int_var__intr_data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".base_addr_35_2: 0x" << int_var__base_addr_35_2 << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_req_notify_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".base_addr_35_16: 0x" << int_var__base_addr_35_16 << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_itr_tx_req_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".macfifo_thres: 0x" << int_var__macfifo_thres << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rd_sgl_pnd: 0x" << int_var__rd_sgl_pnd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tag_avl_guardband: 0x" << int_var__tag_avl_guardband << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cnxt_avl_guardband: 0x" << int_var__cnxt_avl_guardband << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_tgt_port_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".id_limit: 0x" << int_var__id_limit << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bus_adjust: 0x" << int_var__bus_adjust << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".halt: 0x" << int_var__halt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".single_pnd: 0x" << int_var__single_pnd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".td_miss: 0x" << int_var__td_miss << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".depth_thres: 0x" << int_var__depth_thres << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".skip_notify_if_qfull: 0x" << int_var__skip_notify_if_qfull << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fbe_holes_allow: 0x" << int_var__fbe_holes_allow << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fence_dis: 0x" << int_var__fence_dis << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_itr_port_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".rdreq_limit: 0x" << int_var__rdreq_limit << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timer_tick: 0x" << int_var__timer_tick << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timer_limit: 0x" << int_var__timer_limit << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bus_adjust: 0x" << int_var__bus_adjust << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".arb_cr_hdr: 0x" << int_var__arb_cr_hdr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".arb_cr_data: 0x" << int_var__arb_cr_data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".arb_cr_dis_wr: 0x" << int_var__arb_cr_dis_wr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".arb_cr_dis_rd: 0x" << int_var__arb_cr_dis_rd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".arb_cnxtcnt_chk_dis: 0x" << int_var__arb_cnxtcnt_chk_dis << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".arb_tagcnt_chk_dis: 0x" << int_var__arb_tagcnt_chk_dis << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".arb_txfifocnt: 0x" << int_var__arb_txfifocnt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".adr_extn_en: 0x" << int_var__adr_extn_en << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_cfg_pc_port_type_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".host_or_rc0: 0x" << int_var__host_or_rc0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".host_or_rc1: 0x" << int_var__host_or_rc1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".host_or_rc2: 0x" << int_var__host_or_rc2 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".host_or_rc3: 0x" << int_var__host_or_rc3 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".host_or_rc4: 0x" << int_var__host_or_rc4 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".host_or_rc5: 0x" << int_var__host_or_rc5 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".host_or_rc6: 0x" << int_var__host_or_rc6 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".host_or_rc7: 0x" << int_var__host_or_rc7 << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_rdintr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ireg: 0x" << int_var__ireg << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_base_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".scratch_reg: 0x" << int_var__scratch_reg << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pxb_csr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    base.show();
    rdintr.show();
    cfg_pc_port_type.show();
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_itr_port.show(); // large_array
    #else
    for(int ii = 0; ii < 8; ii++) {
        cfg_itr_port[ii].show();
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_tgt_port.show(); // large_array
    #else
    for(int ii = 0; ii < 8; ii++) {
        cfg_tgt_port[ii].show();
    }
    #endif
    
    cfg_itr_tx_req.show();
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_tgt_req_notify.show(); // large_array
    #else
    for(int ii = 0; ii < 8; ii++) {
        cfg_tgt_req_notify[ii].show();
    }
    #endif
    
    cfg_tgt_req_notify_int.show();
    cfg_tgt_req_notify_ring_size.show();
    cfg_tgt_req_indirect_int.show();
    cfg_tgt_doorbell_base.show();
    cfg_tgt_msg_filter.show();
    cfg_tgt_fence_ignore.show();
    cfg_tgt_rx_credit_bfr.show();
    cfg_tgt_ind_en.show();
    cfg_tgt_notify_en.show();
    cfg_pmt_tbl_id.show();
    cfg_tgt_rc_key.show();
    cfg_pcie_local_memaddr_decode.show();
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_tgt_rc_legacy_int_addr.show(); // large_array
    #else
    for(int ii = 0; ii < 8; ii++) {
        cfg_tgt_rc_legacy_int_addr[ii].show();
    }
    #endif
    
    cfg_tgt_rc_legacy_int_data.show();
    cfg_tgt_pmt_grst.show();
    cfg_tgt_pmt_ind.show();
    sta_tgt_pmt_ind.show();
    cfg_itr_ecc_disable.show();
    cfg_tgt_ecc_disable.show();
    sta_itr_ecc_wrbfr_0.show();
    sta_itr_ecc_wrbfr_1.show();
    sta_itr_ecc_wrbfr_2.show();
    sta_itr_ecc_wrbfr_3.show();
    sta_itr_ecc_pcihdrt.show();
    sta_itr_ecc_portmap.show();
    sta_itr_ecc_wrhdr.show();
    sta_itr_ecc_rdhdr.show();
    sta_itr_ecc_cplbfr.show();
    sta_tgt_ecc_rxcrbfr_0.show();
    sta_tgt_ecc_rxcrbfr_1.show();
    sta_tgt_ecc_rxcrbfr_2.show();
    sta_tgt_ecc_rxcrbfr_3.show();
    sta_tgt_ecc_aximst_0.show();
    sta_tgt_ecc_aximst_1.show();
    sta_tgt_ecc_aximst_2.show();
    sta_tgt_ecc_aximst_3.show();
    sta_tgt_ecc_aximst_4.show();
    sta_tgt_ecc_rxinfo.show();
    sta_tgt_ecc_cplst.show();
    sta_tgt_ecc_pmr.show();
    sta_tgt_ecc_prt.show();
    sta_tgt_ecc_romask.show();
    sat_tgt_rx_drop.show();
    #if 16 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_tgt_vf_cfg_stride.show(); // large_array
    #else
    for(int ii = 0; ii < 16; ii++) {
        cfg_tgt_vf_cfg_stride[ii].show();
    }
    #endif
    
    sta_tgt_axi_pending.show();
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    sta_tgt_ind_info.show(); // large_array
    #else
    for(int ii = 0; ii < 8; ii++) {
        sta_tgt_ind_info[ii].show();
    }
    #endif
    
    cnt_itr_tot_axi_wr.show();
    cnt_itr_axi_wr64.show();
    cnt_itr_axi_wr256.show();
    sta_itr_tot_axi_wr.show();
    sta_itr_tot_axi_rd.show();
    cnt_itr_tot_axi_rd.show();
    cnt_itr_axi_rd64.show();
    cnt_itr_axi_rd256.show();
    cnt_tgt_tot_axi_wr.show();
    cnt_tgt_axi_wr64.show();
    cnt_tgt_db64_axi_wr.show();
    cnt_tgt_db32_axi_wr.show();
    cnt_tgt_rsp_ca_ur.show();
    cnt_tgt_tot_axi_rd.show();
    cnt_tgt_axi_rd64.show();
    sta_tgt_tot_axi_wr.show();
    sta_tgt_tot_axi_rd.show();
    sta_itr_axi_wr_num_ids.show();
    sta_itr_axi_rd_num_ids.show();
    cnt_itr_tot_msg.show();
    cnt_itr_intx_assert_msg.show();
    cnt_itr_tot_atomic_req.show();
    sta_tgt_marker_rx.show();
    sta_tgt_req_debug.show();
    sta_itr_req_debug.show();
    sta_tgt_rxcrbfr_debug_0.show();
    sta_tgt_rxcrbfr_debug_1.show();
    sta_tgt_rxcrbfr_debug_2.show();
    sta_tgt_rxcrbfr_debug_3.show();
    sta_tgt_rxcrbfr_debug_4.show();
    sta_tgt_rxcrbfr_debug_5.show();
    sta_tgt_rxcrbfr_debug_6.show();
    sta_tgt_rxcrbfr_debug_7.show();
    cfg_itr_raw_tlp.show();
    cfg_itr_raw_tlp_cmd.show();
    sta_itr_raw_tlp_data.show();
    sta_itr_raw_tlp.show();
    sta_itr_tags_pending.show();
    sta_itr_portfifo_depth.show();
    sta_itr_atomic_seq_cnt.show();
    sta_itr_cnxt_pending.show();
    cfg_itr_atomic_seq_cnt.show();
    cfg_itr_axi_resp_order.show();
    sat_tgt_ind_reason.show();
    sat_itr_req_err.show();
    sat_itr_xfer_unexpected.show();
    sat_itr_cpl_err.show();
    sat_itr_rsp_err.show();
    sat_itr_req_portgate.show();
    sat_tgt_rsp_err.show();
    cfg_tgt_axi_attr.show();
    cfg_debug_port.show();
    cfg_diag_spare0.show();
    sta_diag_spare0.show();
    cfg_diag_spare1.show();
    sta_diag_spare1.show();
    cfg_itr_rdlat_measure.show();
    sat_itr_rdlat0.show();
    sat_itr_rdlat1.show();
    sat_itr_rdlat2.show();
    sat_itr_rdlat3.show();
    cfg_sram_bist.show();
    sta_sram_bist.show();
    cfg_tcam_bist.show();
    sta_tcam_bist.show();
    csr_intr.show();
    cfg_pxb_spare0.show();
    cfg_pxb_spare1.show();
    cfg_pxb_spare2.show();
    cfg_pxb_spare3.show();
    cfg_filter.show();
    cfg_uid2sidLL.show();
    cfg_uid2sidLL_hbm_hash_msk_bit0.show();
    cfg_uid2sidLL_hbm_hash_msk_bit1.show();
    cfg_uid2sidLL_hbm_hash_msk_bit2.show();
    cfg_uid2sidLL_hbm_hash_msk_bit3.show();
    cfg_axi_bw_mon.show();
    sta_axi_bw_mon_rd_latency.show();
    sta_axi_bw_mon_rd_bandwidth.show();
    sta_axi_bw_mon_rd_transactions.show();
    cnt_axi_bw_mon_rd.show();
    sta_axi_bw_mon_wr_latency.show();
    sta_axi_bw_mon_wr_bandwidth.show();
    sta_axi_bw_mon_wr_transactions.show();
    cnt_axi_bw_mon_wr.show();
    dhs_itr_pcihdrt.show();
    dhs_itr_portmap.show();
    dhs_tgt_pmt.show();
    dhs_tgt_pmr.show();
    dhs_tgt_prt.show();
    dhs_tgt_rxcrbfr0.show();
    dhs_tgt_rxcrbfr1.show();
    dhs_tgt_rxcrbfr2.show();
    dhs_tgt_rxcrbfr3.show();
    dhs_tgt_rxinfo.show();
    dhs_tgt_cplst.show();
    dhs_tgt_romask.show();
    dhs_tgt_aximst0.show();
    dhs_tgt_aximst1.show();
    dhs_tgt_aximst2.show();
    dhs_tgt_aximst3.show();
    dhs_tgt_aximst4.show();
    dhs_itr_wrbfr0.show();
    dhs_itr_wrbfr1.show();
    dhs_itr_wrbfr2.show();
    dhs_itr_wrbfr3.show();
    dhs_itr_wrhdr.show();
    dhs_itr_rdhdr.show();
    dhs_itr_rdcontext.show();
    dhs_tgt_rdcontext.show();
    dhs_tgt_rc_bdfmap.show();
    dhs_itr_cplbfr0.show();
    dhs_itr_cplbfr1.show();
    dhs_itr_cplbfr2.show();
    dhs_itr_cplbfr3.show();
    dhs_itr_cplbfr4.show();
    dhs_itr_cplbfr5.show();
    dhs_itr_cplbfr6.show();
    dhs_itr_cplbfr7.show();
    dhs_itr_cplbfr8.show();
    dhs_itr_cplbfr9.show();
    dhs_itr_cplbfr10.show();
    dhs_itr_cplbfr11.show();
    dhs_itr_cplbfr12.show();
    dhs_itr_cplbfr13.show();
    dhs_itr_cplbfr14.show();
    dhs_itr_cplbfr15.show();
    dhs_tgt_notify.show();
    dhs_tgt_ind_rsp.show();
    dhs_tgt_pmt_ind.show();
    filter_addr_lo.show();
    filter_addr_hi.show();
    filter_addr_ctl.show();
    sta_inval_cam.show();
    int_groups.show();
    int_itr_ecc.show();
    int_tgt_ecc.show();
    int_err.show();
}
#endif // CSR_NO_SHOW_IMPL

int cap_pxb_csr_int_err_int_enable_clear_t::get_width() const {
    return cap_pxb_csr_int_err_int_enable_clear_t::s_get_width();

}

int cap_pxb_csr_int_err_int_test_set_t::get_width() const {
    return cap_pxb_csr_int_err_int_test_set_t::s_get_width();

}

int cap_pxb_csr_int_err_t::get_width() const {
    return cap_pxb_csr_int_err_t::s_get_width();

}

int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::get_width() const {
    return cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::s_get_width();

}

int cap_pxb_csr_int_tgt_ecc_int_test_set_t::get_width() const {
    return cap_pxb_csr_int_tgt_ecc_int_test_set_t::s_get_width();

}

int cap_pxb_csr_int_tgt_ecc_t::get_width() const {
    return cap_pxb_csr_int_tgt_ecc_t::s_get_width();

}

int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::get_width() const {
    return cap_pxb_csr_int_itr_ecc_int_enable_clear_t::s_get_width();

}

int cap_pxb_csr_int_itr_ecc_intreg_t::get_width() const {
    return cap_pxb_csr_int_itr_ecc_intreg_t::s_get_width();

}

int cap_pxb_csr_int_itr_ecc_t::get_width() const {
    return cap_pxb_csr_int_itr_ecc_t::s_get_width();

}

int cap_pxb_csr_intreg_status_t::get_width() const {
    return cap_pxb_csr_intreg_status_t::s_get_width();

}

int cap_pxb_csr_int_groups_int_enable_rw_reg_t::get_width() const {
    return cap_pxb_csr_int_groups_int_enable_rw_reg_t::s_get_width();

}

int cap_pxb_csr_intgrp_status_t::get_width() const {
    return cap_pxb_csr_intgrp_status_t::s_get_width();

}

int cap_pxb_csr_sta_inval_cam_entry_t::get_width() const {
    return cap_pxb_csr_sta_inval_cam_entry_t::s_get_width();

}

int cap_pxb_csr_sta_inval_cam_t::get_width() const {
    return cap_pxb_csr_sta_inval_cam_t::s_get_width();

}

int cap_pxb_csr_filter_addr_ctl_value_t::get_width() const {
    return cap_pxb_csr_filter_addr_ctl_value_t::s_get_width();

}

int cap_pxb_csr_filter_addr_ctl_t::get_width() const {
    return cap_pxb_csr_filter_addr_ctl_t::s_get_width();

}

int cap_pxb_csr_filter_addr_hi_data_t::get_width() const {
    return cap_pxb_csr_filter_addr_hi_data_t::s_get_width();

}

int cap_pxb_csr_filter_addr_hi_t::get_width() const {
    return cap_pxb_csr_filter_addr_hi_t::s_get_width();

}

int cap_pxb_csr_filter_addr_lo_data_t::get_width() const {
    return cap_pxb_csr_filter_addr_lo_data_t::s_get_width();

}

int cap_pxb_csr_filter_addr_lo_t::get_width() const {
    return cap_pxb_csr_filter_addr_lo_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_pmt_ind_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_pmt_ind_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_pmt_ind_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_pmt_ind_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_ind_rsp_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_ind_rsp_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_notify_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_notify_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_notify_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_notify_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr15_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr15_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr15_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr15_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr14_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr14_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr14_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr14_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr13_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr13_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr13_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr13_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr12_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr12_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr12_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr12_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr11_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr11_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr11_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr11_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr10_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr10_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr10_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr10_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr9_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr9_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr9_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr9_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr8_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr8_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr8_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr8_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr7_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr7_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr7_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr7_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr6_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr6_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr6_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr6_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr5_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr5_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr5_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr5_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr4_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr4_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr4_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr4_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr3_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr3_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr3_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr3_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr2_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr2_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr2_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr2_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr1_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr1_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr1_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr1_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr0_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr0_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_cplbfr0_t::get_width() const {
    return cap_pxb_csr_dhs_itr_cplbfr0_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_rc_bdfmap_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_rc_bdfmap_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_rdcontext_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_rdcontext_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_rdcontext_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_rdcontext_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_rdcontext_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_rdcontext_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_rdcontext_t::get_width() const {
    return cap_pxb_csr_dhs_itr_rdcontext_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_rdhdr_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_rdhdr_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_rdhdr_t::get_width() const {
    return cap_pxb_csr_dhs_itr_rdhdr_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_wrhdr_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_wrhdr_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_wrhdr_t::get_width() const {
    return cap_pxb_csr_dhs_itr_wrhdr_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_wrbfr3_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_wrbfr3_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_wrbfr3_t::get_width() const {
    return cap_pxb_csr_dhs_itr_wrbfr3_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_wrbfr2_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_wrbfr2_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_wrbfr2_t::get_width() const {
    return cap_pxb_csr_dhs_itr_wrbfr2_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_wrbfr1_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_wrbfr1_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_wrbfr1_t::get_width() const {
    return cap_pxb_csr_dhs_itr_wrbfr1_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_wrbfr0_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_wrbfr0_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_wrbfr0_t::get_width() const {
    return cap_pxb_csr_dhs_itr_wrbfr0_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_aximst4_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_aximst4_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_aximst4_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_aximst4_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_aximst3_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_aximst3_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_aximst3_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_aximst3_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_aximst2_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_aximst2_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_aximst2_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_aximst2_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_aximst1_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_aximst1_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_aximst1_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_aximst1_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_aximst0_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_aximst0_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_aximst0_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_aximst0_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_romask_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_romask_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_romask_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_romask_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_cplst_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_cplst_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_cplst_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_cplst_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_rxinfo_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_rxinfo_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_rxinfo_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_rxinfo_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_rxcrbfr3_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_rxcrbfr3_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_rxcrbfr2_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_rxcrbfr2_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_rxcrbfr1_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_rxcrbfr1_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_rxcrbfr0_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_rxcrbfr0_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_prt_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_prt_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_prt_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_prt_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_pmr_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_pmr_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_pmr_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_pmr_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_pmt_entry_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_pmt_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_tgt_pmt_t::get_width() const {
    return cap_pxb_csr_dhs_tgt_pmt_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_portmap_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_portmap_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_portmap_t::get_width() const {
    return cap_pxb_csr_dhs_itr_portmap_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::get_width() const {
    return cap_pxb_csr_dhs_itr_pcihdrt_entry_t::s_get_width();

}

int cap_pxb_csr_dhs_itr_pcihdrt_t::get_width() const {
    return cap_pxb_csr_dhs_itr_pcihdrt_t::s_get_width();

}

int cap_pxb_csr_cnt_axi_bw_mon_wr_t::get_width() const {
    return cap_pxb_csr_cnt_axi_bw_mon_wr_t::s_get_width();

}

int cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::get_width() const {
    return cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::s_get_width();

}

int cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::get_width() const {
    return cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::s_get_width();

}

int cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::get_width() const {
    return cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::s_get_width();

}

int cap_pxb_csr_cnt_axi_bw_mon_rd_t::get_width() const {
    return cap_pxb_csr_cnt_axi_bw_mon_rd_t::s_get_width();

}

int cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::get_width() const {
    return cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::s_get_width();

}

int cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::get_width() const {
    return cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::s_get_width();

}

int cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::get_width() const {
    return cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::s_get_width();

}

int cap_pxb_csr_cfg_axi_bw_mon_t::get_width() const {
    return cap_pxb_csr_cfg_axi_bw_mon_t::s_get_width();

}

int cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t::get_width() const {
    return cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t::s_get_width();

}

int cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t::get_width() const {
    return cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t::s_get_width();

}

int cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t::get_width() const {
    return cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t::s_get_width();

}

int cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t::get_width() const {
    return cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t::s_get_width();

}

int cap_pxb_csr_cfg_uid2sidLL_t::get_width() const {
    return cap_pxb_csr_cfg_uid2sidLL_t::s_get_width();

}

int cap_pxb_csr_cfg_filter_t::get_width() const {
    return cap_pxb_csr_cfg_filter_t::s_get_width();

}

int cap_pxb_csr_cfg_pxb_spare3_t::get_width() const {
    return cap_pxb_csr_cfg_pxb_spare3_t::s_get_width();

}

int cap_pxb_csr_cfg_pxb_spare2_t::get_width() const {
    return cap_pxb_csr_cfg_pxb_spare2_t::s_get_width();

}

int cap_pxb_csr_cfg_pxb_spare1_t::get_width() const {
    return cap_pxb_csr_cfg_pxb_spare1_t::s_get_width();

}

int cap_pxb_csr_cfg_pxb_spare0_t::get_width() const {
    return cap_pxb_csr_cfg_pxb_spare0_t::s_get_width();

}

int cap_pxb_csr_csr_intr_t::get_width() const {
    return cap_pxb_csr_csr_intr_t::s_get_width();

}

int cap_pxb_csr_sta_tcam_bist_t::get_width() const {
    return cap_pxb_csr_sta_tcam_bist_t::s_get_width();

}

int cap_pxb_csr_cfg_tcam_bist_t::get_width() const {
    return cap_pxb_csr_cfg_tcam_bist_t::s_get_width();

}

int cap_pxb_csr_sta_sram_bist_t::get_width() const {
    return cap_pxb_csr_sta_sram_bist_t::s_get_width();

}

int cap_pxb_csr_cfg_sram_bist_t::get_width() const {
    return cap_pxb_csr_cfg_sram_bist_t::s_get_width();

}

int cap_pxb_csr_sat_itr_rdlat3_t::get_width() const {
    return cap_pxb_csr_sat_itr_rdlat3_t::s_get_width();

}

int cap_pxb_csr_sat_itr_rdlat2_t::get_width() const {
    return cap_pxb_csr_sat_itr_rdlat2_t::s_get_width();

}

int cap_pxb_csr_sat_itr_rdlat1_t::get_width() const {
    return cap_pxb_csr_sat_itr_rdlat1_t::s_get_width();

}

int cap_pxb_csr_sat_itr_rdlat0_t::get_width() const {
    return cap_pxb_csr_sat_itr_rdlat0_t::s_get_width();

}

int cap_pxb_csr_cfg_itr_rdlat_measure_t::get_width() const {
    return cap_pxb_csr_cfg_itr_rdlat_measure_t::s_get_width();

}

int cap_pxb_csr_sta_diag_spare1_t::get_width() const {
    return cap_pxb_csr_sta_diag_spare1_t::s_get_width();

}

int cap_pxb_csr_cfg_diag_spare1_t::get_width() const {
    return cap_pxb_csr_cfg_diag_spare1_t::s_get_width();

}

int cap_pxb_csr_sta_diag_spare0_t::get_width() const {
    return cap_pxb_csr_sta_diag_spare0_t::s_get_width();

}

int cap_pxb_csr_cfg_diag_spare0_t::get_width() const {
    return cap_pxb_csr_cfg_diag_spare0_t::s_get_width();

}

int cap_pxb_csr_cfg_debug_port_t::get_width() const {
    return cap_pxb_csr_cfg_debug_port_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_axi_attr_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_axi_attr_t::s_get_width();

}

int cap_pxb_csr_sat_tgt_rsp_err_t::get_width() const {
    return cap_pxb_csr_sat_tgt_rsp_err_t::s_get_width();

}

int cap_pxb_csr_sat_itr_req_portgate_t::get_width() const {
    return cap_pxb_csr_sat_itr_req_portgate_t::s_get_width();

}

int cap_pxb_csr_sat_itr_rsp_err_t::get_width() const {
    return cap_pxb_csr_sat_itr_rsp_err_t::s_get_width();

}

int cap_pxb_csr_sat_itr_cpl_err_t::get_width() const {
    return cap_pxb_csr_sat_itr_cpl_err_t::s_get_width();

}

int cap_pxb_csr_sat_itr_xfer_unexpected_t::get_width() const {
    return cap_pxb_csr_sat_itr_xfer_unexpected_t::s_get_width();

}

int cap_pxb_csr_sat_itr_req_err_t::get_width() const {
    return cap_pxb_csr_sat_itr_req_err_t::s_get_width();

}

int cap_pxb_csr_sat_tgt_ind_reason_t::get_width() const {
    return cap_pxb_csr_sat_tgt_ind_reason_t::s_get_width();

}

int cap_pxb_csr_cfg_itr_axi_resp_order_t::get_width() const {
    return cap_pxb_csr_cfg_itr_axi_resp_order_t::s_get_width();

}

int cap_pxb_csr_cfg_itr_atomic_seq_cnt_t::get_width() const {
    return cap_pxb_csr_cfg_itr_atomic_seq_cnt_t::s_get_width();

}

int cap_pxb_csr_sta_itr_cnxt_pending_t::get_width() const {
    return cap_pxb_csr_sta_itr_cnxt_pending_t::s_get_width();

}

int cap_pxb_csr_sta_itr_atomic_seq_cnt_t::get_width() const {
    return cap_pxb_csr_sta_itr_atomic_seq_cnt_t::s_get_width();

}

int cap_pxb_csr_sta_itr_portfifo_depth_t::get_width() const {
    return cap_pxb_csr_sta_itr_portfifo_depth_t::s_get_width();

}

int cap_pxb_csr_sta_itr_tags_pending_t::get_width() const {
    return cap_pxb_csr_sta_itr_tags_pending_t::s_get_width();

}

int cap_pxb_csr_sta_itr_raw_tlp_t::get_width() const {
    return cap_pxb_csr_sta_itr_raw_tlp_t::s_get_width();

}

int cap_pxb_csr_sta_itr_raw_tlp_data_t::get_width() const {
    return cap_pxb_csr_sta_itr_raw_tlp_data_t::s_get_width();

}

int cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::get_width() const {
    return cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::s_get_width();

}

int cap_pxb_csr_cfg_itr_raw_tlp_t::get_width() const {
    return cap_pxb_csr_cfg_itr_raw_tlp_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::get_width() const {
    return cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::get_width() const {
    return cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::get_width() const {
    return cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::get_width() const {
    return cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::get_width() const {
    return cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::get_width() const {
    return cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::get_width() const {
    return cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::get_width() const {
    return cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::s_get_width();

}

int cap_pxb_csr_sta_itr_req_debug_t::get_width() const {
    return cap_pxb_csr_sta_itr_req_debug_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_req_debug_t::get_width() const {
    return cap_pxb_csr_sta_tgt_req_debug_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_marker_rx_t::get_width() const {
    return cap_pxb_csr_sta_tgt_marker_rx_t::s_get_width();

}

int cap_pxb_csr_cnt_itr_tot_atomic_req_t::get_width() const {
    return cap_pxb_csr_cnt_itr_tot_atomic_req_t::s_get_width();

}

int cap_pxb_csr_cnt_itr_intx_assert_msg_t::get_width() const {
    return cap_pxb_csr_cnt_itr_intx_assert_msg_t::s_get_width();

}

int cap_pxb_csr_cnt_itr_tot_msg_t::get_width() const {
    return cap_pxb_csr_cnt_itr_tot_msg_t::s_get_width();

}

int cap_pxb_csr_sta_itr_axi_rd_num_ids_t::get_width() const {
    return cap_pxb_csr_sta_itr_axi_rd_num_ids_t::s_get_width();

}

int cap_pxb_csr_sta_itr_axi_wr_num_ids_t::get_width() const {
    return cap_pxb_csr_sta_itr_axi_wr_num_ids_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_tot_axi_rd_t::get_width() const {
    return cap_pxb_csr_sta_tgt_tot_axi_rd_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_tot_axi_wr_t::get_width() const {
    return cap_pxb_csr_sta_tgt_tot_axi_wr_t::s_get_width();

}

int cap_pxb_csr_cnt_tgt_axi_rd64_t::get_width() const {
    return cap_pxb_csr_cnt_tgt_axi_rd64_t::s_get_width();

}

int cap_pxb_csr_cnt_tgt_tot_axi_rd_t::get_width() const {
    return cap_pxb_csr_cnt_tgt_tot_axi_rd_t::s_get_width();

}

int cap_pxb_csr_cnt_tgt_rsp_ca_ur_t::get_width() const {
    return cap_pxb_csr_cnt_tgt_rsp_ca_ur_t::s_get_width();

}

int cap_pxb_csr_cnt_tgt_db32_axi_wr_t::get_width() const {
    return cap_pxb_csr_cnt_tgt_db32_axi_wr_t::s_get_width();

}

int cap_pxb_csr_cnt_tgt_db64_axi_wr_t::get_width() const {
    return cap_pxb_csr_cnt_tgt_db64_axi_wr_t::s_get_width();

}

int cap_pxb_csr_cnt_tgt_axi_wr64_t::get_width() const {
    return cap_pxb_csr_cnt_tgt_axi_wr64_t::s_get_width();

}

int cap_pxb_csr_cnt_tgt_tot_axi_wr_t::get_width() const {
    return cap_pxb_csr_cnt_tgt_tot_axi_wr_t::s_get_width();

}

int cap_pxb_csr_cnt_itr_axi_rd256_t::get_width() const {
    return cap_pxb_csr_cnt_itr_axi_rd256_t::s_get_width();

}

int cap_pxb_csr_cnt_itr_axi_rd64_t::get_width() const {
    return cap_pxb_csr_cnt_itr_axi_rd64_t::s_get_width();

}

int cap_pxb_csr_cnt_itr_tot_axi_rd_t::get_width() const {
    return cap_pxb_csr_cnt_itr_tot_axi_rd_t::s_get_width();

}

int cap_pxb_csr_sta_itr_tot_axi_rd_t::get_width() const {
    return cap_pxb_csr_sta_itr_tot_axi_rd_t::s_get_width();

}

int cap_pxb_csr_sta_itr_tot_axi_wr_t::get_width() const {
    return cap_pxb_csr_sta_itr_tot_axi_wr_t::s_get_width();

}

int cap_pxb_csr_cnt_itr_axi_wr256_t::get_width() const {
    return cap_pxb_csr_cnt_itr_axi_wr256_t::s_get_width();

}

int cap_pxb_csr_cnt_itr_axi_wr64_t::get_width() const {
    return cap_pxb_csr_cnt_itr_axi_wr64_t::s_get_width();

}

int cap_pxb_csr_cnt_itr_tot_axi_wr_t::get_width() const {
    return cap_pxb_csr_cnt_itr_tot_axi_wr_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_ind_info_t::get_width() const {
    return cap_pxb_csr_sta_tgt_ind_info_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_axi_pending_t::get_width() const {
    return cap_pxb_csr_sta_tgt_axi_pending_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::s_get_width();

}

int cap_pxb_csr_sat_tgt_rx_drop_t::get_width() const {
    return cap_pxb_csr_sat_tgt_rx_drop_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_ecc_romask_t::get_width() const {
    return cap_pxb_csr_sta_tgt_ecc_romask_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_ecc_prt_t::get_width() const {
    return cap_pxb_csr_sta_tgt_ecc_prt_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_ecc_pmr_t::get_width() const {
    return cap_pxb_csr_sta_tgt_ecc_pmr_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_ecc_cplst_t::get_width() const {
    return cap_pxb_csr_sta_tgt_ecc_cplst_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_ecc_rxinfo_t::get_width() const {
    return cap_pxb_csr_sta_tgt_ecc_rxinfo_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_ecc_aximst_4_t::get_width() const {
    return cap_pxb_csr_sta_tgt_ecc_aximst_4_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_ecc_aximst_3_t::get_width() const {
    return cap_pxb_csr_sta_tgt_ecc_aximst_3_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_ecc_aximst_2_t::get_width() const {
    return cap_pxb_csr_sta_tgt_ecc_aximst_2_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_ecc_aximst_1_t::get_width() const {
    return cap_pxb_csr_sta_tgt_ecc_aximst_1_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_ecc_aximst_0_t::get_width() const {
    return cap_pxb_csr_sta_tgt_ecc_aximst_0_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::get_width() const {
    return cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::get_width() const {
    return cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::get_width() const {
    return cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::get_width() const {
    return cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::s_get_width();

}

int cap_pxb_csr_sta_itr_ecc_cplbfr_t::get_width() const {
    return cap_pxb_csr_sta_itr_ecc_cplbfr_t::s_get_width();

}

int cap_pxb_csr_sta_itr_ecc_rdhdr_t::get_width() const {
    return cap_pxb_csr_sta_itr_ecc_rdhdr_t::s_get_width();

}

int cap_pxb_csr_sta_itr_ecc_wrhdr_t::get_width() const {
    return cap_pxb_csr_sta_itr_ecc_wrhdr_t::s_get_width();

}

int cap_pxb_csr_sta_itr_ecc_portmap_t::get_width() const {
    return cap_pxb_csr_sta_itr_ecc_portmap_t::s_get_width();

}

int cap_pxb_csr_sta_itr_ecc_pcihdrt_t::get_width() const {
    return cap_pxb_csr_sta_itr_ecc_pcihdrt_t::s_get_width();

}

int cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::get_width() const {
    return cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::s_get_width();

}

int cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::get_width() const {
    return cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::s_get_width();

}

int cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::get_width() const {
    return cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::s_get_width();

}

int cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::get_width() const {
    return cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_ecc_disable_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_ecc_disable_t::s_get_width();

}

int cap_pxb_csr_cfg_itr_ecc_disable_t::get_width() const {
    return cap_pxb_csr_cfg_itr_ecc_disable_t::s_get_width();

}

int cap_pxb_csr_sta_tgt_pmt_ind_t::get_width() const {
    return cap_pxb_csr_sta_tgt_pmt_ind_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_pmt_ind_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_pmt_ind_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_pmt_grst_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_pmt_grst_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t::s_get_width();

}

int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::get_width() const {
    return cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_rc_key_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_rc_key_t::s_get_width();

}

int cap_pxb_csr_cfg_pmt_tbl_id_t::get_width() const {
    return cap_pxb_csr_cfg_pmt_tbl_id_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_notify_en_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_notify_en_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_ind_en_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_ind_en_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_fence_ignore_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_fence_ignore_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_msg_filter_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_msg_filter_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_doorbell_base_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_doorbell_base_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_req_indirect_int_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_req_indirect_int_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_req_notify_ring_size_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_req_notify_ring_size_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_req_notify_int_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_req_notify_int_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_req_notify_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_req_notify_t::s_get_width();

}

int cap_pxb_csr_cfg_itr_tx_req_t::get_width() const {
    return cap_pxb_csr_cfg_itr_tx_req_t::s_get_width();

}

int cap_pxb_csr_cfg_tgt_port_t::get_width() const {
    return cap_pxb_csr_cfg_tgt_port_t::s_get_width();

}

int cap_pxb_csr_cfg_itr_port_t::get_width() const {
    return cap_pxb_csr_cfg_itr_port_t::s_get_width();

}

int cap_pxb_csr_cfg_pc_port_type_t::get_width() const {
    return cap_pxb_csr_cfg_pc_port_type_t::s_get_width();

}

int cap_pxb_csr_rdintr_t::get_width() const {
    return cap_pxb_csr_rdintr_t::s_get_width();

}

int cap_pxb_csr_base_t::get_width() const {
    return cap_pxb_csr_base_t::s_get_width();

}

int cap_pxb_csr_t::get_width() const {
    return cap_pxb_csr_t::s_get_width();

}

int cap_pxb_csr_int_err_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // cpl_ecrc_enable
    _count += 1; // cpl_rxbuf_err_enable
    _count += 1; // cpl_stat_enable
    _count += 1; // cpl_unexp_enable
    _count += 1; // cpl_timeout_enable
    _count += 1; // cpl_len_enable
    _count += 1; // cpl_poison_enable
    _count += 1; // cpl_lowaddr_enable
    _count += 1; // tgt_ind_rsp_unexp_enable
    _count += 1; // tgt_axi_rsp_unexp_enable
    _count += 1; // tgt_axi_rsp_err_enable
    _count += 1; // tgt_req_4k_err_enable
    _count += 1; // itr_req_bdfmiss_enable
    _count += 1; // itr_req_axi_unsupp_enable
    _count += 1; // itr_req_msg_align_err_enable
    _count += 1; // itr_bus_master_dis_enable
    _count += 1; // itr_atomic_seq_err_enable
    _count += 1; // itr_atomic_resource_err_enable
    _count += 1; // tgt_rmw_axi_resperr_enable
    _count += 1; // tgt_ind_notify_axi_resperr_enable
    return _count;
}

int cap_pxb_csr_int_err_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // cpl_ecrc_interrupt
    _count += 1; // cpl_rxbuf_err_interrupt
    _count += 1; // cpl_stat_interrupt
    _count += 1; // cpl_unexp_interrupt
    _count += 1; // cpl_timeout_interrupt
    _count += 1; // cpl_len_interrupt
    _count += 1; // cpl_poison_interrupt
    _count += 1; // cpl_lowaddr_interrupt
    _count += 1; // tgt_ind_rsp_unexp_interrupt
    _count += 1; // tgt_axi_rsp_unexp_interrupt
    _count += 1; // tgt_axi_rsp_err_interrupt
    _count += 1; // tgt_req_4k_err_interrupt
    _count += 1; // itr_req_bdfmiss_interrupt
    _count += 1; // itr_req_axi_unsupp_interrupt
    _count += 1; // itr_req_msg_align_err_interrupt
    _count += 1; // itr_bus_master_dis_interrupt
    _count += 1; // itr_atomic_seq_err_interrupt
    _count += 1; // itr_atomic_resource_err_interrupt
    _count += 1; // tgt_rmw_axi_resperr_interrupt
    _count += 1; // tgt_ind_notify_axi_resperr_interrupt
    return _count;
}

int cap_pxb_csr_int_err_t::s_get_width() {
    int _count = 0;

    _count += cap_pxb_csr_int_err_int_test_set_t::s_get_width(); // intreg
    _count += cap_pxb_csr_int_err_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_pxb_csr_int_err_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_pxb_csr_int_err_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // aximst_0_uncorrectable_enable
    _count += 1; // aximst_0_correctable_enable
    _count += 1; // aximst_1_uncorrectable_enable
    _count += 1; // aximst_1_correctable_enable
    _count += 1; // aximst_2_uncorrectable_enable
    _count += 1; // aximst_2_correctable_enable
    _count += 1; // aximst_3_uncorrectable_enable
    _count += 1; // aximst_3_correctable_enable
    _count += 1; // aximst_4_uncorrectable_enable
    _count += 1; // aximst_4_correctable_enable
    _count += 1; // rxcrbfr_0_uncorrectable_enable
    _count += 1; // rxcrbfr_0_correctable_enable
    _count += 1; // rxcrbfr_1_uncorrectable_enable
    _count += 1; // rxcrbfr_1_correctable_enable
    _count += 1; // rxcrbfr_2_uncorrectable_enable
    _count += 1; // rxcrbfr_2_correctable_enable
    _count += 1; // rxcrbfr_3_uncorrectable_enable
    _count += 1; // rxcrbfr_3_correctable_enable
    _count += 1; // rxinfo_uncorrectable_enable
    _count += 1; // rxinfo_correctable_enable
    _count += 1; // cplst_uncorrectable_enable
    _count += 1; // cplst_correctable_enable
    _count += 1; // romask_uncorrectable_enable
    _count += 1; // romask_correctable_enable
    _count += 1; // pmr_uncorrectable_enable
    _count += 1; // pmr_correctable_enable
    _count += 1; // prt_uncorrectable_enable
    _count += 1; // prt_correctable_enable
    return _count;
}

int cap_pxb_csr_int_tgt_ecc_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // aximst_0_uncorrectable_interrupt
    _count += 1; // aximst_0_correctable_interrupt
    _count += 1; // aximst_1_uncorrectable_interrupt
    _count += 1; // aximst_1_correctable_interrupt
    _count += 1; // aximst_2_uncorrectable_interrupt
    _count += 1; // aximst_2_correctable_interrupt
    _count += 1; // aximst_3_uncorrectable_interrupt
    _count += 1; // aximst_3_correctable_interrupt
    _count += 1; // aximst_4_uncorrectable_interrupt
    _count += 1; // aximst_4_correctable_interrupt
    _count += 1; // rxcrbfr_0_uncorrectable_interrupt
    _count += 1; // rxcrbfr_0_correctable_interrupt
    _count += 1; // rxcrbfr_1_uncorrectable_interrupt
    _count += 1; // rxcrbfr_1_correctable_interrupt
    _count += 1; // rxcrbfr_2_uncorrectable_interrupt
    _count += 1; // rxcrbfr_2_correctable_interrupt
    _count += 1; // rxcrbfr_3_uncorrectable_interrupt
    _count += 1; // rxcrbfr_3_correctable_interrupt
    _count += 1; // rxinfo_uncorrectable_interrupt
    _count += 1; // rxinfo_correctable_interrupt
    _count += 1; // cplst_uncorrectable_interrupt
    _count += 1; // cplst_correctable_interrupt
    _count += 1; // romask_uncorrectable_interrupt
    _count += 1; // romask_correctable_interrupt
    _count += 1; // pmr_uncorrectable_interrupt
    _count += 1; // pmr_correctable_interrupt
    _count += 1; // prt_uncorrectable_interrupt
    _count += 1; // prt_correctable_interrupt
    return _count;
}

int cap_pxb_csr_int_tgt_ecc_t::s_get_width() {
    int _count = 0;

    _count += cap_pxb_csr_int_tgt_ecc_int_test_set_t::s_get_width(); // intreg
    _count += cap_pxb_csr_int_tgt_ecc_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // pcihdrt_uncorrectable_enable
    _count += 1; // pcihdrt_correctable_enable
    _count += 1; // portmap_uncorrectable_enable
    _count += 1; // portmap_correctable_enable
    _count += 1; // wrhdr_uncorrectable_enable
    _count += 1; // wrhdr_correctable_enable
    _count += 1; // rdhdr_uncorrectable_enable
    _count += 1; // rdhdr_correctable_enable
    _count += 1; // wrbfr_0_uncorrectable_enable
    _count += 1; // wrbfr_0_correctable_enable
    _count += 1; // wrbfr_1_uncorrectable_enable
    _count += 1; // wrbfr_1_correctable_enable
    _count += 1; // wrbfr_2_uncorrectable_enable
    _count += 1; // wrbfr_2_correctable_enable
    _count += 1; // wrbfr_3_uncorrectable_enable
    _count += 1; // wrbfr_3_correctable_enable
    _count += 1; // cplbfr_uncorrectable_enable
    _count += 1; // cplbfr_correctable_enable
    return _count;
}

int cap_pxb_csr_int_itr_ecc_intreg_t::s_get_width() {
    int _count = 0;

    _count += 1; // pcihdrt_uncorrectable_interrupt
    _count += 1; // pcihdrt_correctable_interrupt
    _count += 1; // portmap_uncorrectable_interrupt
    _count += 1; // portmap_correctable_interrupt
    _count += 1; // wrhdr_uncorrectable_interrupt
    _count += 1; // wrhdr_correctable_interrupt
    _count += 1; // rdhdr_uncorrectable_interrupt
    _count += 1; // rdhdr_correctable_interrupt
    _count += 1; // wrbfr_0_uncorrectable_interrupt
    _count += 1; // wrbfr_0_correctable_interrupt
    _count += 1; // wrbfr_1_uncorrectable_interrupt
    _count += 1; // wrbfr_1_correctable_interrupt
    _count += 1; // wrbfr_2_uncorrectable_interrupt
    _count += 1; // wrbfr_2_correctable_interrupt
    _count += 1; // wrbfr_3_uncorrectable_interrupt
    _count += 1; // wrbfr_3_correctable_interrupt
    _count += 1; // cplbfr_uncorrectable_interrupt
    _count += 1; // cplbfr_correctable_interrupt
    return _count;
}

int cap_pxb_csr_int_itr_ecc_t::s_get_width() {
    int _count = 0;

    _count += cap_pxb_csr_int_itr_ecc_intreg_t::s_get_width(); // intreg
    _count += cap_pxb_csr_int_itr_ecc_intreg_t::s_get_width(); // int_test_set
    _count += cap_pxb_csr_int_itr_ecc_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_pxb_csr_int_itr_ecc_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_pxb_csr_intreg_status_t::s_get_width() {
    int _count = 0;

    _count += 1; // int_tgt_ecc_interrupt
    _count += 1; // int_itr_ecc_interrupt
    _count += 1; // int_err_interrupt
    return _count;
}

int cap_pxb_csr_int_groups_int_enable_rw_reg_t::s_get_width() {
    int _count = 0;

    _count += 1; // int_tgt_ecc_enable
    _count += 1; // int_itr_ecc_enable
    _count += 1; // int_err_enable
    return _count;
}

int cap_pxb_csr_intgrp_status_t::s_get_width() {
    int _count = 0;

    _count += cap_pxb_csr_intreg_status_t::s_get_width(); // intreg
    _count += cap_pxb_csr_int_groups_int_enable_rw_reg_t::s_get_width(); // int_enable_rw_reg
    _count += cap_pxb_csr_intreg_status_t::s_get_width(); // int_rw_reg
    return _count;
}

int cap_pxb_csr_sta_inval_cam_entry_t::s_get_width() {
    int _count = 0;

    _count += 38; // data
    return _count;
}

int cap_pxb_csr_sta_inval_cam_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_sta_inval_cam_entry_t::s_get_width() * 64); // entry
    return _count;
}

int cap_pxb_csr_filter_addr_ctl_value_t::s_get_width() {
    int _count = 0;

    _count += 4; // value
    return _count;
}

int cap_pxb_csr_filter_addr_ctl_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_filter_addr_ctl_value_t::s_get_width() * 8); // value
    return _count;
}

int cap_pxb_csr_filter_addr_hi_data_t::s_get_width() {
    int _count = 0;

    _count += 28; // value
    return _count;
}

int cap_pxb_csr_filter_addr_hi_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_filter_addr_hi_data_t::s_get_width() * 8); // data
    return _count;
}

int cap_pxb_csr_filter_addr_lo_data_t::s_get_width() {
    int _count = 0;

    _count += 28; // value
    return _count;
}

int cap_pxb_csr_filter_addr_lo_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_filter_addr_lo_data_t::s_get_width() * 8); // data
    return _count;
}

int cap_pxb_csr_dhs_tgt_pmt_ind_entry_t::s_get_width() {
    int _count = 0;

    _count += 2; // cmd
    return _count;
}

int cap_pxb_csr_dhs_tgt_pmt_ind_t::s_get_width() {
    int _count = 0;

    _count += cap_pxb_csr_dhs_tgt_pmt_ind_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data0
    _count += 32; // data1
    _count += 32; // data2
    _count += 32; // data3
    _count += 3; // cpl_stat
    _count += 3; // port_id
    _count += 7; // axi_id
    _count += 1; // fetch_rsp
    return _count;
}

int cap_pxb_csr_dhs_tgt_ind_rsp_t::s_get_width() {
    int _count = 0;

    _count += cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_notify_entry_t::s_get_width() {
    int _count = 0;

    _count += 16; // posted
    _count += 16; // completed
    return _count;
}

int cap_pxb_csr_dhs_tgt_notify_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_notify_entry_t::s_get_width() * 8); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr15_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr15_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_cplbfr15_entry_t::s_get_width() * 512); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr14_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr14_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_cplbfr14_entry_t::s_get_width() * 512); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr13_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr13_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_cplbfr13_entry_t::s_get_width() * 512); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr12_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr12_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_cplbfr12_entry_t::s_get_width() * 512); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr11_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr11_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_cplbfr11_entry_t::s_get_width() * 512); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr10_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr10_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_cplbfr10_entry_t::s_get_width() * 512); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr9_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr9_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_cplbfr9_entry_t::s_get_width() * 512); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr8_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr8_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_cplbfr8_entry_t::s_get_width() * 512); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr7_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr7_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_cplbfr7_entry_t::s_get_width() * 512); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr6_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr6_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_cplbfr6_entry_t::s_get_width() * 512); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr5_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr5_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_cplbfr5_entry_t::s_get_width() * 512); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr4_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr4_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_cplbfr4_entry_t::s_get_width() * 512); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr3_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr3_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_cplbfr3_entry_t::s_get_width() * 512); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr2_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr2_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_cplbfr2_entry_t::s_get_width() * 512); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr1_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr1_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_cplbfr1_entry_t::s_get_width() * 512); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr0_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_cplbfr0_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_cplbfr0_entry_t::s_get_width() * 512); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::s_get_width() {
    int _count = 0;

    _count += 1; // valid
    _count += 16; // rc_bdf
    _count += 3; // port_id
    _count += 11; // VFID
    return _count;
}

int cap_pxb_csr_dhs_tgt_rc_bdfmap_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::s_get_width() * 64); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_rdcontext_entry_t::s_get_width() {
    int _count = 0;

    _count += 2; // state
    _count += 3; // portid
    _count += 1; // is_nonposted_wr
    _count += 1; // is_posted_wr
    return _count;
}

int cap_pxb_csr_dhs_tgt_rdcontext_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_rdcontext_entry_t::s_get_width() * 128); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_rdcontext_entry_t::s_get_width() {
    int _count = 0;

    _count += 3; // state
    _count += 3; // portid
    _count += 7; // tag
    _count += 7; // axi_id
    _count += 9; // raddr
    _count += 9; // rsize
    _count += 10; // timer
    _count += 16; // bdf
    _count += 1; // aerr
    _count += 1; // derr
    _count += 1; // terr
    _count += 2; // lineaddr
    _count += 3; // linesize
    _count += 1; // seg_first
    _count += 1; // seg_last
    _count += 7; // seg_next
    _count += 1; // is_raw
    _count += 1; // is_nonposted_wr
    _count += 2; // atomic_state
    _count += 1; // is_narrow
    return _count;
}

int cap_pxb_csr_dhs_itr_rdcontext_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_rdcontext_entry_t::s_get_width() * 128); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_rdhdr_entry_t::s_get_width() {
    int _count = 0;

    _count += 80; // data
    _count += 8; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_rdhdr_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_rdhdr_entry_t::s_get_width() * 128); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_wrhdr_entry_t::s_get_width() {
    int _count = 0;

    _count += 80; // data
    _count += 8; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_wrhdr_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_wrhdr_entry_t::s_get_width() * 128); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_wrbfr3_entry_t::s_get_width() {
    int _count = 0;

    _count += 128; // data
    _count += 9; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_wrbfr3_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_wrbfr3_entry_t::s_get_width() * 1024); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_wrbfr2_entry_t::s_get_width() {
    int _count = 0;

    _count += 128; // data
    _count += 9; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_wrbfr2_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_wrbfr2_entry_t::s_get_width() * 1024); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_wrbfr1_entry_t::s_get_width() {
    int _count = 0;

    _count += 128; // data
    _count += 9; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_wrbfr1_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_wrbfr1_entry_t::s_get_width() * 1024); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_wrbfr0_entry_t::s_get_width() {
    int _count = 0;

    _count += 128; // data
    _count += 9; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_wrbfr0_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_wrbfr0_entry_t::s_get_width() * 1024); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_aximst4_entry_t::s_get_width() {
    int _count = 0;

    _count += 128; // data
    _count += 9; // ecc
    return _count;
}

int cap_pxb_csr_dhs_tgt_aximst4_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_aximst4_entry_t::s_get_width() * 128); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_aximst3_entry_t::s_get_width() {
    int _count = 0;

    _count += 128; // data
    _count += 9; // ecc
    return _count;
}

int cap_pxb_csr_dhs_tgt_aximst3_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_aximst3_entry_t::s_get_width() * 128); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_aximst2_entry_t::s_get_width() {
    int _count = 0;

    _count += 128; // data
    _count += 9; // ecc
    return _count;
}

int cap_pxb_csr_dhs_tgt_aximst2_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_aximst2_entry_t::s_get_width() * 128); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_aximst1_entry_t::s_get_width() {
    int _count = 0;

    _count += 128; // data
    _count += 9; // ecc
    return _count;
}

int cap_pxb_csr_dhs_tgt_aximst1_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_aximst1_entry_t::s_get_width() * 128); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_aximst0_entry_t::s_get_width() {
    int _count = 0;

    _count += 128; // data
    _count += 9; // ecc
    return _count;
}

int cap_pxb_csr_dhs_tgt_aximst0_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_aximst0_entry_t::s_get_width() * 128); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_romask_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_tgt_romask_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_romask_entry_t::s_get_width() * 128); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_cplst_entry_t::s_get_width() {
    int _count = 0;

    _count += 100; // data
    _count += 8; // ecc
    return _count;
}

int cap_pxb_csr_dhs_tgt_cplst_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_cplst_entry_t::s_get_width() * 128); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_rxinfo_entry_t::s_get_width() {
    int _count = 0;

    _count += 16; // data
    _count += 6; // ecc
    return _count;
}

int cap_pxb_csr_dhs_tgt_rxinfo_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_rxinfo_entry_t::s_get_width() * 1024); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::s_get_width() {
    int _count = 0;

    _count += 128; // data
    _count += 9; // ecc
    return _count;
}

int cap_pxb_csr_dhs_tgt_rxcrbfr3_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::s_get_width() * 1024); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::s_get_width() {
    int _count = 0;

    _count += 128; // data
    _count += 9; // ecc
    return _count;
}

int cap_pxb_csr_dhs_tgt_rxcrbfr2_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::s_get_width() * 1024); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::s_get_width() {
    int _count = 0;

    _count += 128; // data
    _count += 9; // ecc
    return _count;
}

int cap_pxb_csr_dhs_tgt_rxcrbfr1_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::s_get_width() * 1024); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::s_get_width() {
    int _count = 0;

    _count += 128; // data
    _count += 9; // ecc
    return _count;
}

int cap_pxb_csr_dhs_tgt_rxcrbfr0_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::s_get_width() * 1024); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_prt_entry_t::s_get_width() {
    int _count = 0;

    _count += 76; // entry_data
    _count += 8; // ecc
    return _count;
}

int cap_pxb_csr_dhs_tgt_prt_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_prt_entry_t::s_get_width() * 4096); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_pmr_entry_t::s_get_width() {
    int _count = 0;

    _count += 110; // entry_data
    _count += 8; // ecc
    return _count;
}

int cap_pxb_csr_dhs_tgt_pmr_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_pmr_entry_t::s_get_width() * 1024); // entry
    return _count;
}

int cap_pxb_csr_dhs_tgt_pmt_entry_t::s_get_width() {
    int _count = 0;

    _count += 64; // x_data
    _count += 64; // y_data
    _count += 1; // valid
    return _count;
}

int cap_pxb_csr_dhs_tgt_pmt_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_tgt_pmt_entry_t::s_get_width() * 1024); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_portmap_entry_t::s_get_width() {
    int _count = 0;

    _count += 48; // dest
    _count += 7; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_portmap_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_portmap_entry_t::s_get_width() * 128); // entry
    return _count;
}

int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::s_get_width() {
    int _count = 0;

    _count += 1; // valid
    _count += 16; // bdf
    _count += 1; // td
    _count += 1; // pasid_en
    _count += 2; // pasid_source
    _count += 20; // pasid_value
    _count += 1; // pasid_exe
    _count += 1; // pasid_privl
    _count += 2; // attr2_1_rd
    _count += 2; // attr2_1_wr
    _count += 1; // rc_cfg1
    _count += 1; // attr0_rd
    _count += 1; // attr0_wr
    _count += 2; // ats_at_wr
    _count += 2; // ats_at_rd
    _count += 3; // tc
    _count += 1; // ln_wr
    _count += 1; // ln_rd
    _count += 13; // rsvd1
    _count += 8; // ecc
    return _count;
}

int cap_pxb_csr_dhs_itr_pcihdrt_t::s_get_width() {
    int _count = 0;

    _count += (cap_pxb_csr_dhs_itr_pcihdrt_entry_t::s_get_width() * 2048); // entry
    return _count;
}

int cap_pxb_csr_cnt_axi_bw_mon_wr_t::s_get_width() {
    int _count = 0;

    _count += 32; // val
    return _count;
}

int cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::s_get_width() {
    int _count = 0;

    _count += 8; // outstanding
    _count += 16; // dess_rdy
    return _count;
}

int cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::s_get_width() {
    int _count = 0;

    _count += 16; // maxv
    _count += 16; // avrg
    return _count;
}

int cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::s_get_width() {
    int _count = 0;

    _count += 14; // maxv
    _count += 14; // avrg
    return _count;
}

int cap_pxb_csr_cnt_axi_bw_mon_rd_t::s_get_width() {
    int _count = 0;

    _count += 32; // val
    return _count;
}

int cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::s_get_width() {
    int _count = 0;

    _count += 8; // outstanding
    _count += 16; // dess_rdy
    return _count;
}

int cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::s_get_width() {
    int _count = 0;

    _count += 16; // maxv
    _count += 16; // avrg
    return _count;
}

int cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::s_get_width() {
    int _count = 0;

    _count += 14; // maxv
    _count += 14; // avrg
    return _count;
}

int cap_pxb_csr_cfg_axi_bw_mon_t::s_get_width() {
    int _count = 0;

    _count += 8; // alpha
    _count += 16; // cycle
    _count += 4; // rcache
    _count += 4; // rcache_msk
    _count += 4; // wcache
    _count += 4; // wcache_msk
    return _count;
}

int cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t::s_get_width() {
    int _count = 0;

    _count += 40; // msk
    return _count;
}

int cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t::s_get_width() {
    int _count = 0;

    _count += 40; // msk
    return _count;
}

int cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t::s_get_width() {
    int _count = 0;

    _count += 40; // msk
    return _count;
}

int cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t::s_get_width() {
    int _count = 0;

    _count += 40; // msk
    return _count;
}

int cap_pxb_csr_cfg_uid2sidLL_t::s_get_width() {
    int _count = 0;

    _count += 7; // spare
    _count += 2; // mode
    _count += 7; // base
    return _count;
}

int cap_pxb_csr_cfg_filter_t::s_get_width() {
    int _count = 0;

    _count += 4; // awcache_mask
    _count += 4; // awcache_match
    _count += 4; // arcache_mask
    _count += 4; // arcache_match
    return _count;
}

int cap_pxb_csr_cfg_pxb_spare3_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    return _count;
}

int cap_pxb_csr_cfg_pxb_spare2_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    return _count;
}

int cap_pxb_csr_cfg_pxb_spare1_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    return _count;
}

int cap_pxb_csr_cfg_pxb_spare0_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    return _count;
}

int cap_pxb_csr_csr_intr_t::s_get_width() {
    int _count = 0;

    _count += 1; // dowstream
    _count += 1; // dowstream_enable
    return _count;
}

int cap_pxb_csr_sta_tcam_bist_t::s_get_width() {
    int _count = 0;

    _count += 1; // done_pass
    _count += 1; // done_fail
    return _count;
}

int cap_pxb_csr_cfg_tcam_bist_t::s_get_width() {
    int _count = 0;

    _count += 1; // run
    return _count;
}

int cap_pxb_csr_sta_sram_bist_t::s_get_width() {
    int _count = 0;

    _count += 38; // done_pass
    _count += 38; // done_fail
    return _count;
}

int cap_pxb_csr_cfg_sram_bist_t::s_get_width() {
    int _count = 0;

    _count += 38; // run
    return _count;
}

int cap_pxb_csr_sat_itr_rdlat3_t::s_get_width() {
    int _count = 0;

    _count += 40; // num_samples
    return _count;
}

int cap_pxb_csr_sat_itr_rdlat2_t::s_get_width() {
    int _count = 0;

    _count += 40; // num_samples
    return _count;
}

int cap_pxb_csr_sat_itr_rdlat1_t::s_get_width() {
    int _count = 0;

    _count += 40; // num_samples
    return _count;
}

int cap_pxb_csr_sat_itr_rdlat0_t::s_get_width() {
    int _count = 0;

    _count += 40; // num_samples
    return _count;
}

int cap_pxb_csr_cfg_itr_rdlat_measure_t::s_get_width() {
    int _count = 0;

    _count += 16; // thres2
    _count += 16; // thres1
    _count += 16; // thres0
    _count += 3; // portid
    return _count;
}

int cap_pxb_csr_sta_diag_spare1_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    return _count;
}

int cap_pxb_csr_cfg_diag_spare1_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    return _count;
}

int cap_pxb_csr_sta_diag_spare0_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    return _count;
}

int cap_pxb_csr_cfg_diag_spare0_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    return _count;
}

int cap_pxb_csr_cfg_debug_port_t::s_get_width() {
    int _count = 0;

    _count += 4; // select
    _count += 1; // enable
    return _count;
}

int cap_pxb_csr_cfg_tgt_axi_attr_t::s_get_width() {
    int _count = 0;

    _count += 4; // arcache
    _count += 4; // awcache
    _count += 3; // prot
    _count += 4; // qos
    _count += 1; // lock
    return _count;
}

int cap_pxb_csr_sat_tgt_rsp_err_t::s_get_width() {
    int _count = 0;

    _count += 8; // ind_cnxt_mismatch
    _count += 8; // rresp_err
    _count += 8; // bresp_err
    return _count;
}

int cap_pxb_csr_sat_itr_req_portgate_t::s_get_width() {
    int _count = 0;

    _count += 16; // closed
    return _count;
}

int cap_pxb_csr_sat_itr_rsp_err_t::s_get_width() {
    int _count = 0;

    _count += 8; // axi
    _count += 8; // cpl_timeout
    return _count;
}

int cap_pxb_csr_sat_itr_cpl_err_t::s_get_width() {
    int _count = 0;

    _count += 8; // ecrc
    _count += 8; // rxbuf_ecc
    _count += 8; // cpl_stat
    _count += 8; // unexpected
    return _count;
}

int cap_pxb_csr_sat_itr_xfer_unexpected_t::s_get_width() {
    int _count = 0;

    _count += 8; // wr256x
    _count += 8; // rd256x
    _count += 8; // wr_narrow
    _count += 8; // rd_narrow
    return _count;
}

int cap_pxb_csr_sat_itr_req_err_t::s_get_width() {
    int _count = 0;

    _count += 8; // unsupp_wr
    _count += 8; // unsupp_rd
    _count += 8; // pcihdrt_miss
    _count += 8; // bus_master_dis
    return _count;
}

int cap_pxb_csr_sat_tgt_ind_reason_t::s_get_width() {
    int _count = 0;

    _count += 8; // pmr_force
    _count += 8; // prt_force
    _count += 8; // msg
    _count += 8; // atomic
    _count += 8; // poisoned
    _count += 8; // unsupp
    _count += 8; // pmv
    _count += 8; // db_pmv
    _count += 8; // pmt_miss
    _count += 8; // rc_vfid_miss
    _count += 8; // pmr_prt_miss
    _count += 8; // prt_oor
    _count += 8; // bdf_wcard_oor
    _count += 8; // vfid_oor
    return _count;
}

int cap_pxb_csr_cfg_itr_axi_resp_order_t::s_get_width() {
    int _count = 0;

    _count += 1; // rd_strict
    _count += 1; // wr_strict
    _count += 8; // rd_id_limit
    return _count;
}

int cap_pxb_csr_cfg_itr_atomic_seq_cnt_t::s_get_width() {
    int _count = 0;

    _count += 32; // rst_mask
    return _count;
}

int cap_pxb_csr_sta_itr_cnxt_pending_t::s_get_width() {
    int _count = 0;

    _count += 8; // num
    return _count;
}

int cap_pxb_csr_sta_itr_atomic_seq_cnt_t::s_get_width() {
    int _count = 0;

    _count += 32; // err_mask
    return _count;
}

int cap_pxb_csr_sta_itr_portfifo_depth_t::s_get_width() {
    int _count = 0;

    _count += 8; // port0_wr
    _count += 8; // port0_rd
    _count += 8; // port1_wr
    _count += 8; // port1_rd
    _count += 8; // port2_wr
    _count += 8; // port2_rd
    _count += 8; // port3_wr
    _count += 8; // port3_rd
    _count += 8; // port4_wr
    _count += 8; // port4_rd
    _count += 8; // port5_wr
    _count += 8; // port5_rd
    _count += 8; // port6_wr
    _count += 8; // port6_rd
    _count += 8; // port7_wr
    _count += 8; // port7_rd
    return _count;
}

int cap_pxb_csr_sta_itr_tags_pending_t::s_get_width() {
    int _count = 0;

    _count += 8; // port0
    _count += 8; // port1
    _count += 8; // port2
    _count += 8; // port3
    _count += 8; // port4
    _count += 8; // port5
    _count += 8; // port6
    _count += 8; // port7
    return _count;
}

int cap_pxb_csr_sta_itr_raw_tlp_t::s_get_width() {
    int _count = 0;

    _count += 1; // resp_rdy
    _count += 3; // cpl_stat
    _count += 1; // cpl_data_err
    _count += 1; // cpl_timeout_err
    _count += 1; // req_err
    return _count;
}

int cap_pxb_csr_sta_itr_raw_tlp_data_t::s_get_width() {
    int _count = 0;

    _count += 32; // resp0
    _count += 32; // resp1
    _count += 32; // resp2
    _count += 32; // resp3
    _count += 32; // resp4
    _count += 32; // resp5
    _count += 32; // resp6
    _count += 32; // resp7
    return _count;
}

int cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::s_get_width() {
    int _count = 0;

    _count += 4; // dw_cnt
    _count += 3; // port_id
    _count += 1; // cmd_go
    return _count;
}

int cap_pxb_csr_cfg_itr_raw_tlp_t::s_get_width() {
    int _count = 0;

    _count += 32; // dw0
    _count += 32; // dw1
    _count += 32; // dw2
    _count += 32; // dw3
    _count += 32; // dw4
    _count += 32; // dw5
    _count += 32; // dw6
    _count += 32; // dw7
    _count += 32; // dw8
    _count += 32; // dw9
    _count += 32; // dw10
    _count += 32; // dw11
    return _count;
}

int cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::s_get_width() {
    int _count = 0;

    _count += 10; // waddr
    _count += 10; // raddr
    _count += 10; // depth
    return _count;
}

int cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::s_get_width() {
    int _count = 0;

    _count += 10; // waddr
    _count += 10; // raddr
    _count += 10; // depth
    return _count;
}

int cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::s_get_width() {
    int _count = 0;

    _count += 10; // waddr
    _count += 10; // raddr
    _count += 10; // depth
    return _count;
}

int cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::s_get_width() {
    int _count = 0;

    _count += 10; // waddr
    _count += 10; // raddr
    _count += 10; // depth
    return _count;
}

int cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::s_get_width() {
    int _count = 0;

    _count += 10; // waddr
    _count += 10; // raddr
    _count += 10; // depth
    return _count;
}

int cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::s_get_width() {
    int _count = 0;

    _count += 10; // waddr
    _count += 10; // raddr
    _count += 10; // depth
    return _count;
}

int cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::s_get_width() {
    int _count = 0;

    _count += 10; // waddr
    _count += 10; // raddr
    _count += 10; // depth
    return _count;
}

int cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::s_get_width() {
    int _count = 0;

    _count += 10; // waddr
    _count += 10; // raddr
    _count += 10; // depth
    return _count;
}

int cap_pxb_csr_sta_itr_req_debug_t::s_get_width() {
    int _count = 0;

    _count += 1; // stg0_vld
    _count += 1; // stg1_vld
    _count += 1; // stg2_vld
    _count += 1; // stg3_vld
    _count += 1; // stg4_vld
    _count += 1; // stg5_vld
    _count += 1; // s0_rdy
    _count += 8; // s0_port_space_avl_vec
    _count += 8; // s0_tag_avl_vec
    _count += 1; // itr_cnxt_free_avl0
    _count += 1; // itr_cnxt_free_avl1
    _count += 3; // s5_req_fifo_depth
    _count += 3; // s5_seg_state
    _count += 1; // tx_wrcnt_req_stall
    _count += 1; // tx_wrcnt_cpl_stall
    _count += 1; // tx_wrcnt_raw_stall
    _count += 1; // s5_is_wr
    _count += 1; // s5_is_msg
    _count += 1; // cpl_eop_pnd
    _count += 1; // req_eop_pnd
    _count += 1; // raw_cmd_pnd
    _count += 1; // cpl_tx_vld
    _count += 1; // cpl_tx_rdy
    _count += 1; // bvalid
    _count += 1; // bready
    _count += 1; // awvalid
    _count += 1; // awready
    _count += 1; // wvalid
    _count += 1; // wready
    _count += 1; // arvalid
    _count += 1; // arready
    _count += 1; // rvalid
    _count += 1; // rready
    return _count;
}

int cap_pxb_csr_sta_tgt_req_debug_t::s_get_width() {
    int _count = 0;

    _count += 1; // stg0_vld
    _count += 1; // stg1_vld
    _count += 1; // stg2_vld
    _count += 1; // stg3_vld
    _count += 1; // stg4_vld
    _count += 1; // stg5_vld
    _count += 1; // stg6_vld
    _count += 1; // stg7_vld
    _count += 1; // stg8_vld
    _count += 1; // stg9_vld
    _count += 1; // stg0_rdy
    _count += 1; // stg1_rdy
    _count += 1; // stg2_rdy
    _count += 1; // stg3_rdy
    _count += 1; // stg4_rdy
    _count += 1; // stg5_rdy
    _count += 1; // stg6_rdy
    _count += 1; // stg7_rdy
    _count += 1; // stg8_rdy
    _count += 1; // stg9_rdy
    _count += 8; // tgt_req_vld
    _count += 8; // axi_fifo_rdy
    _count += 8; // axi_fifo_notempty
    _count += 8; // notify_full
    _count += 8; // tgt_cnxt_xn_pnd
    _count += 1; // rxcfg0_vld
    _count += 1; // hw_rsp_rdy
    _count += 1; // m_axi_awvalid
    _count += 1; // m_axi_arvalid
    _count += 1; // m_axi_wvalid
    _count += 1; // m_axi_awready
    _count += 1; // m_axi_arready
    _count += 1; // m_axi_wready
    _count += 1; // m_axi_rvalid
    _count += 1; // m_axi_rready
    _count += 1; // m_axi_bvalid
    _count += 1; // m_axi_bready
    _count += 1; // tgt_rsp_tx_rdy
    _count += 4; // s7_ax_state0
    _count += 4; // s7_ax_state1
    _count += 4; // s7_ax_state2
    _count += 4; // s7_ax_state3
    _count += 4; // s7_ax_state4
    _count += 4; // s7_ax_state5
    _count += 4; // s7_ax_state6
    _count += 4; // s7_ax_state7
    return _count;
}

int cap_pxb_csr_sta_tgt_marker_rx_t::s_get_width() {
    int _count = 0;

    _count += 1; // port0
    _count += 1; // port1
    _count += 1; // port2
    _count += 1; // port3
    _count += 1; // port4
    _count += 1; // port5
    _count += 1; // port6
    _count += 1; // port7
    return _count;
}

int cap_pxb_csr_cnt_itr_tot_atomic_req_t::s_get_width() {
    int _count = 0;

    _count += 40; // sent
    return _count;
}

int cap_pxb_csr_cnt_itr_intx_assert_msg_t::s_get_width() {
    int _count = 0;

    _count += 40; // sent
    return _count;
}

int cap_pxb_csr_cnt_itr_tot_msg_t::s_get_width() {
    int _count = 0;

    _count += 40; // sent
    return _count;
}

int cap_pxb_csr_sta_itr_axi_rd_num_ids_t::s_get_width() {
    int _count = 0;

    _count += 8; // pending
    return _count;
}

int cap_pxb_csr_sta_itr_axi_wr_num_ids_t::s_get_width() {
    int _count = 0;

    _count += 8; // pending
    return _count;
}

int cap_pxb_csr_sta_tgt_tot_axi_rd_t::s_get_width() {
    int _count = 0;

    _count += 50; // num_bytes
    return _count;
}

int cap_pxb_csr_sta_tgt_tot_axi_wr_t::s_get_width() {
    int _count = 0;

    _count += 50; // num_bytes
    return _count;
}

int cap_pxb_csr_cnt_tgt_axi_rd64_t::s_get_width() {
    int _count = 0;

    _count += 40; // req
    return _count;
}

int cap_pxb_csr_cnt_tgt_tot_axi_rd_t::s_get_width() {
    int _count = 0;

    _count += 40; // req
    return _count;
}

int cap_pxb_csr_cnt_tgt_rsp_ca_ur_t::s_get_width() {
    int _count = 0;

    _count += 40; // cnt
    return _count;
}

int cap_pxb_csr_cnt_tgt_db32_axi_wr_t::s_get_width() {
    int _count = 0;

    _count += 40; // req
    return _count;
}

int cap_pxb_csr_cnt_tgt_db64_axi_wr_t::s_get_width() {
    int _count = 0;

    _count += 40; // req
    return _count;
}

int cap_pxb_csr_cnt_tgt_axi_wr64_t::s_get_width() {
    int _count = 0;

    _count += 40; // req
    return _count;
}

int cap_pxb_csr_cnt_tgt_tot_axi_wr_t::s_get_width() {
    int _count = 0;

    _count += 40; // req
    return _count;
}

int cap_pxb_csr_cnt_itr_axi_rd256_t::s_get_width() {
    int _count = 0;

    _count += 40; // req
    return _count;
}

int cap_pxb_csr_cnt_itr_axi_rd64_t::s_get_width() {
    int _count = 0;

    _count += 40; // req
    return _count;
}

int cap_pxb_csr_cnt_itr_tot_axi_rd_t::s_get_width() {
    int _count = 0;

    _count += 40; // req
    return _count;
}

int cap_pxb_csr_sta_itr_tot_axi_rd_t::s_get_width() {
    int _count = 0;

    _count += 50; // num_bytes
    return _count;
}

int cap_pxb_csr_sta_itr_tot_axi_wr_t::s_get_width() {
    int _count = 0;

    _count += 50; // num_bytes
    return _count;
}

int cap_pxb_csr_cnt_itr_axi_wr256_t::s_get_width() {
    int _count = 0;

    _count += 40; // req
    return _count;
}

int cap_pxb_csr_cnt_itr_axi_wr64_t::s_get_width() {
    int _count = 0;

    _count += 40; // req
    return _count;
}

int cap_pxb_csr_cnt_itr_tot_axi_wr_t::s_get_width() {
    int _count = 0;

    _count += 40; // req
    return _count;
}

int cap_pxb_csr_sta_tgt_ind_info_t::s_get_width() {
    int _count = 0;

    _count += 1; // pending
    _count += 7; // ramaddr
    return _count;
}

int cap_pxb_csr_sta_tgt_axi_pending_t::s_get_width() {
    int _count = 0;

    _count += 8; // ids_p0
    _count += 8; // ids_p1
    _count += 8; // ids_p2
    _count += 8; // ids_p3
    _count += 8; // ids_p4
    _count += 8; // ids_p5
    _count += 8; // ids_p6
    _count += 8; // ids_p7
    return _count;
}

int cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::s_get_width() {
    int _count = 0;

    _count += 5; // p_shift
    _count += 5; // b_shift
    _count += 5; // d_shift
    _count += 5; // f_shift
    _count += 10; // resource_dwsize
    return _count;
}

int cap_pxb_csr_sat_tgt_rx_drop_t::s_get_width() {
    int _count = 0;

    _count += 8; // port0
    _count += 8; // port1
    _count += 8; // port2
    _count += 8; // port3
    _count += 8; // port4
    _count += 8; // port5
    _count += 8; // port6
    _count += 8; // port7
    return _count;
}

int cap_pxb_csr_sta_tgt_ecc_romask_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 7; // syndrome
    _count += 7; // addr
    return _count;
}

int cap_pxb_csr_sta_tgt_ecc_prt_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 8; // syndrome
    _count += 12; // addr
    return _count;
}

int cap_pxb_csr_sta_tgt_ecc_pmr_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 8; // syndrome
    _count += 10; // addr
    return _count;
}

int cap_pxb_csr_sta_tgt_ecc_cplst_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 8; // syndrome
    _count += 7; // addr
    return _count;
}

int cap_pxb_csr_sta_tgt_ecc_rxinfo_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 6; // syndrome
    _count += 10; // addr
    return _count;
}

int cap_pxb_csr_sta_tgt_ecc_aximst_4_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 9; // syndrome
    _count += 7; // addr
    return _count;
}

int cap_pxb_csr_sta_tgt_ecc_aximst_3_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 9; // syndrome
    _count += 7; // addr
    return _count;
}

int cap_pxb_csr_sta_tgt_ecc_aximst_2_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 9; // syndrome
    _count += 7; // addr
    return _count;
}

int cap_pxb_csr_sta_tgt_ecc_aximst_1_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 9; // syndrome
    _count += 7; // addr
    return _count;
}

int cap_pxb_csr_sta_tgt_ecc_aximst_0_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 9; // syndrome
    _count += 7; // addr
    return _count;
}

int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 9; // syndrome
    _count += 10; // addr
    return _count;
}

int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 9; // syndrome
    _count += 10; // addr
    return _count;
}

int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 9; // syndrome
    _count += 10; // addr
    return _count;
}

int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 9; // syndrome
    _count += 10; // addr
    return _count;
}

int cap_pxb_csr_sta_itr_ecc_cplbfr_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 7; // syndrome
    _count += 13; // addr
    return _count;
}

int cap_pxb_csr_sta_itr_ecc_rdhdr_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 8; // syndrome
    _count += 7; // addr
    return _count;
}

int cap_pxb_csr_sta_itr_ecc_wrhdr_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 8; // syndrome
    _count += 7; // addr
    return _count;
}

int cap_pxb_csr_sta_itr_ecc_portmap_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 7; // syndrome
    _count += 7; // addr
    return _count;
}

int cap_pxb_csr_sta_itr_ecc_pcihdrt_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 8; // syndrome
    _count += 11; // addr
    return _count;
}

int cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 9; // syndrome
    _count += 10; // addr
    return _count;
}

int cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 9; // syndrome
    _count += 10; // addr
    return _count;
}

int cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 9; // syndrome
    _count += 10; // addr
    return _count;
}

int cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 9; // syndrome
    _count += 10; // addr
    return _count;
}

int cap_pxb_csr_cfg_tgt_ecc_disable_t::s_get_width() {
    int _count = 0;

    _count += 1; // rxinfo_cor
    _count += 1; // rxinfo_det
    _count += 1; // rxinfo_dhs
    _count += 1; // pmr_cor
    _count += 1; // pmr_det
    _count += 1; // pmr_dhs
    _count += 1; // prt_cor
    _count += 1; // prt_det
    _count += 1; // prt_dhs
    _count += 1; // cplst_cor
    _count += 1; // cplst_det
    _count += 1; // cplst_dhs
    _count += 1; // aximst_cor
    _count += 1; // aximst_det
    _count += 1; // aximst_dhs
    _count += 1; // romask_cor
    _count += 1; // romask_det
    _count += 1; // romask_dhs
    _count += 4; // rxcrbfr_cor
    _count += 4; // rxcrbfr_det
    _count += 4; // rxcrbfr_dhs
    return _count;
}

int cap_pxb_csr_cfg_itr_ecc_disable_t::s_get_width() {
    int _count = 0;

    _count += 1; // pcihdrt_cor
    _count += 1; // pcihdrt_det
    _count += 1; // pcihdrt_dhs
    _count += 1; // portmap_cor
    _count += 1; // portmap_det
    _count += 1; // portmap_dhs
    _count += 1; // wrbfr_cor
    _count += 1; // wrbfr_det
    _count += 1; // wrbfr_dhs
    _count += 1; // wrhdr_cor
    _count += 1; // wrhdr_det
    _count += 1; // wrhdr_dhs
    _count += 1; // rdhdr_cor
    _count += 1; // rdhdr_det
    _count += 1; // rdhdr_dhs
    _count += 1; // cplbfr_cor
    _count += 1; // cplbfr_det
    _count += 1; // cplbfr_dhs
    return _count;
}

int cap_pxb_csr_sta_tgt_pmt_ind_t::s_get_width() {
    int _count = 0;

    _count += 1; // hit
    _count += 10; // hit_addr
    return _count;
}

int cap_pxb_csr_cfg_tgt_pmt_ind_t::s_get_width() {
    int _count = 0;

    _count += 64; // key
    _count += 64; // mask
    return _count;
}

int cap_pxb_csr_cfg_tgt_pmt_grst_t::s_get_width() {
    int _count = 0;

    _count += 1; // vld
    return _count;
}

int cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t::s_get_width() {
    int _count = 0;

    _count += 32; // val
    return _count;
}

int cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t::s_get_width() {
    int _count = 0;

    _count += 34; // base_35_2
    return _count;
}

int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::s_get_width() {
    int _count = 0;

    _count += 3; // region0
    _count += 3; // region1
    _count += 3; // region2
    _count += 3; // region3
    _count += 3; // region4
    _count += 3; // region5
    _count += 3; // region6
    _count += 3; // region7
    _count += 3; // region8
    _count += 3; // region9
    _count += 3; // region10
    _count += 3; // region11
    _count += 3; // region12
    _count += 3; // region13
    _count += 3; // region14
    _count += 3; // region15
    _count += 4; // atomic
    _count += 4; // rc_cfg
    _count += 19; // atomic_page_id
    _count += 19; // rc_cfg_page_id
    _count += 19; // rc_io64k
    return _count;
}

int cap_pxb_csr_cfg_tgt_rc_key_t::s_get_width() {
    int _count = 0;

    _count += 2; // sel
    return _count;
}

int cap_pxb_csr_cfg_pmt_tbl_id_t::s_get_width() {
    int _count = 0;

    _count += 2; // memio_tbl_id0
    _count += 2; // cfg_tbl_id0
    _count += 2; // rc_tbl_id0
    _count += 2; // default_tbl_id0
    _count += 2; // memio_tbl_id1
    _count += 2; // cfg_tbl_id1
    _count += 2; // rc_tbl_id1
    _count += 2; // default_tbl_id1
    _count += 2; // memio_tbl_id2
    _count += 2; // cfg_tbl_id2
    _count += 2; // rc_tbl_id2
    _count += 2; // default_tbl_id2
    _count += 2; // memio_tbl_id3
    _count += 2; // cfg_tbl_id3
    _count += 2; // rc_tbl_id3
    _count += 2; // default_tbl_id3
    _count += 2; // memio_tbl_id4
    _count += 2; // cfg_tbl_id4
    _count += 2; // rc_tbl_id4
    _count += 2; // default_tbl_id4
    _count += 2; // memio_tbl_id5
    _count += 2; // cfg_tbl_id5
    _count += 2; // rc_tbl_id5
    _count += 2; // default_tbl_id5
    _count += 2; // memio_tbl_id6
    _count += 2; // cfg_tbl_id6
    _count += 2; // rc_tbl_id6
    _count += 2; // default_tbl_id6
    _count += 2; // memio_tbl_id7
    _count += 2; // cfg_tbl_id7
    _count += 2; // rc_tbl_id7
    _count += 2; // default_tbl_id7
    return _count;
}

int cap_pxb_csr_cfg_tgt_notify_en_t::s_get_width() {
    int _count = 0;

    _count += 1; // msg
    _count += 1; // pmv
    _count += 1; // db_pmv
    _count += 1; // unsupp
    _count += 1; // atomic
    _count += 1; // pmt_miss
    _count += 1; // pmr_invalid
    _count += 1; // prt_invalid
    _count += 1; // rc_vfid_miss
    _count += 1; // prt_oor
    _count += 1; // vfid_oor
    _count += 1; // cfg_bdf_oor
    _count += 1; // pmr_ecc_err
    _count += 1; // prt_ecc_err
    return _count;
}

int cap_pxb_csr_cfg_tgt_ind_en_t::s_get_width() {
    int _count = 0;

    _count += 1; // msg
    _count += 1; // pmv
    _count += 1; // db_pmv
    _count += 1; // unsupp
    _count += 1; // atomic
    _count += 1; // pmt_miss
    _count += 1; // pmr_invalid
    _count += 1; // prt_invalid
    _count += 1; // rc_vfid_miss
    _count += 1; // prt_oor
    _count += 1; // vfid_oor
    _count += 1; // cfg_bdf_oor
    _count += 1; // pmr_ecc_err
    _count += 1; // prt_ecc_err
    return _count;
}

int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::s_get_width() {
    int _count = 0;

    _count += 10; // adr_base0
    _count += 10; // adr_limit0
    _count += 1; // update0
    _count += 1; // rst_rxfifo0
    _count += 10; // adr_base1
    _count += 10; // adr_limit1
    _count += 1; // update1
    _count += 1; // rst_rxfifo1
    _count += 10; // adr_base2
    _count += 10; // adr_limit2
    _count += 1; // update2
    _count += 1; // rst_rxfifo2
    _count += 10; // adr_base3
    _count += 10; // adr_limit3
    _count += 1; // update3
    _count += 1; // rst_rxfifo3
    _count += 10; // adr_base4
    _count += 10; // adr_limit4
    _count += 1; // update4
    _count += 1; // rst_rxfifo4
    _count += 10; // adr_base5
    _count += 10; // adr_limit5
    _count += 1; // update5
    _count += 1; // rst_rxfifo5
    _count += 10; // adr_base6
    _count += 10; // adr_limit6
    _count += 1; // update6
    _count += 1; // rst_rxfifo6
    _count += 10; // adr_base7
    _count += 10; // adr_limit7
    _count += 1; // update7
    _count += 1; // rst_rxfifo7
    return _count;
}

int cap_pxb_csr_cfg_tgt_fence_ignore_t::s_get_width() {
    int _count = 0;

    _count += 8; // from_mask
    return _count;
}

int cap_pxb_csr_cfg_tgt_msg_filter_t::s_get_width() {
    int _count = 0;

    _count += 8; // msg_code0
    _count += 1; // drop_en0
    _count += 8; // msg_code1
    _count += 1; // drop_en1
    _count += 8; // msg_code2
    _count += 1; // drop_en2
    return _count;
}

int cap_pxb_csr_cfg_tgt_doorbell_base_t::s_get_width() {
    int _count = 0;

    _count += 10; // addr_33_24
    _count += 2; // db_host_sel
    _count += 2; // db_32b_sel
    return _count;
}

int cap_pxb_csr_cfg_tgt_req_indirect_int_t::s_get_width() {
    int _count = 0;

    _count += 32; // intr_data
    _count += 34; // base_addr_35_2
    return _count;
}

int cap_pxb_csr_cfg_tgt_req_notify_ring_size_t::s_get_width() {
    int _count = 0;

    _count += 16; // mask
    return _count;
}

int cap_pxb_csr_cfg_tgt_req_notify_int_t::s_get_width() {
    int _count = 0;

    _count += 32; // intr_data
    _count += 34; // base_addr_35_2
    return _count;
}

int cap_pxb_csr_cfg_tgt_req_notify_t::s_get_width() {
    int _count = 0;

    _count += 20; // base_addr_35_16
    return _count;
}

int cap_pxb_csr_cfg_itr_tx_req_t::s_get_width() {
    int _count = 0;

    _count += 5; // macfifo_thres
    _count += 1; // rd_sgl_pnd
    _count += 3; // tag_avl_guardband
    _count += 3; // cnxt_avl_guardband
    return _count;
}

int cap_pxb_csr_cfg_tgt_port_t::s_get_width() {
    int _count = 0;

    _count += 8; // id_limit
    _count += 1; // bus_adjust
    _count += 1; // halt
    _count += 1; // single_pnd
    _count += 1; // td_miss
    _count += 4; // depth_thres
    _count += 1; // skip_notify_if_qfull
    _count += 1; // fbe_holes_allow
    _count += 1; // fence_dis
    return _count;
}

int cap_pxb_csr_cfg_itr_port_t::s_get_width() {
    int _count = 0;

    _count += 8; // rdreq_limit
    _count += 16; // timer_tick
    _count += 10; // timer_limit
    _count += 1; // bus_adjust
    _count += 5; // arb_cr_hdr
    _count += 6; // arb_cr_data
    _count += 1; // arb_cr_dis_wr
    _count += 1; // arb_cr_dis_rd
    _count += 1; // arb_cnxtcnt_chk_dis
    _count += 1; // arb_tagcnt_chk_dis
    _count += 5; // arb_txfifocnt
    _count += 1; // adr_extn_en
    return _count;
}

int cap_pxb_csr_cfg_pc_port_type_t::s_get_width() {
    int _count = 0;

    _count += 1; // host_or_rc0
    _count += 1; // host_or_rc1
    _count += 1; // host_or_rc2
    _count += 1; // host_or_rc3
    _count += 1; // host_or_rc4
    _count += 1; // host_or_rc5
    _count += 1; // host_or_rc6
    _count += 1; // host_or_rc7
    return _count;
}

int cap_pxb_csr_rdintr_t::s_get_width() {
    int _count = 0;

    _count += 32; // ireg
    return _count;
}

int cap_pxb_csr_base_t::s_get_width() {
    int _count = 0;

    _count += 32; // scratch_reg
    return _count;
}

int cap_pxb_csr_t::s_get_width() {
    int _count = 0;

    _count += cap_pxb_csr_base_t::s_get_width(); // base
    _count += cap_pxb_csr_rdintr_t::s_get_width(); // rdintr
    _count += cap_pxb_csr_cfg_pc_port_type_t::s_get_width(); // cfg_pc_port_type
    _count += (cap_pxb_csr_cfg_itr_port_t::s_get_width() * 8); // cfg_itr_port
    _count += (cap_pxb_csr_cfg_tgt_port_t::s_get_width() * 8); // cfg_tgt_port
    _count += cap_pxb_csr_cfg_itr_tx_req_t::s_get_width(); // cfg_itr_tx_req
    _count += (cap_pxb_csr_cfg_tgt_req_notify_t::s_get_width() * 8); // cfg_tgt_req_notify
    _count += cap_pxb_csr_cfg_tgt_req_notify_int_t::s_get_width(); // cfg_tgt_req_notify_int
    _count += cap_pxb_csr_cfg_tgt_req_notify_ring_size_t::s_get_width(); // cfg_tgt_req_notify_ring_size
    _count += cap_pxb_csr_cfg_tgt_req_indirect_int_t::s_get_width(); // cfg_tgt_req_indirect_int
    _count += cap_pxb_csr_cfg_tgt_doorbell_base_t::s_get_width(); // cfg_tgt_doorbell_base
    _count += cap_pxb_csr_cfg_tgt_msg_filter_t::s_get_width(); // cfg_tgt_msg_filter
    _count += cap_pxb_csr_cfg_tgt_fence_ignore_t::s_get_width(); // cfg_tgt_fence_ignore
    _count += cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::s_get_width(); // cfg_tgt_rx_credit_bfr
    _count += cap_pxb_csr_cfg_tgt_ind_en_t::s_get_width(); // cfg_tgt_ind_en
    _count += cap_pxb_csr_cfg_tgt_notify_en_t::s_get_width(); // cfg_tgt_notify_en
    _count += cap_pxb_csr_cfg_pmt_tbl_id_t::s_get_width(); // cfg_pmt_tbl_id
    _count += cap_pxb_csr_cfg_tgt_rc_key_t::s_get_width(); // cfg_tgt_rc_key
    _count += cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::s_get_width(); // cfg_pcie_local_memaddr_decode
    _count += (cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t::s_get_width() * 8); // cfg_tgt_rc_legacy_int_addr
    _count += cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t::s_get_width(); // cfg_tgt_rc_legacy_int_data
    _count += cap_pxb_csr_cfg_tgt_pmt_grst_t::s_get_width(); // cfg_tgt_pmt_grst
    _count += cap_pxb_csr_cfg_tgt_pmt_ind_t::s_get_width(); // cfg_tgt_pmt_ind
    _count += cap_pxb_csr_sta_tgt_pmt_ind_t::s_get_width(); // sta_tgt_pmt_ind
    _count += cap_pxb_csr_cfg_itr_ecc_disable_t::s_get_width(); // cfg_itr_ecc_disable
    _count += cap_pxb_csr_cfg_tgt_ecc_disable_t::s_get_width(); // cfg_tgt_ecc_disable
    _count += cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::s_get_width(); // sta_itr_ecc_wrbfr_0
    _count += cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::s_get_width(); // sta_itr_ecc_wrbfr_1
    _count += cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::s_get_width(); // sta_itr_ecc_wrbfr_2
    _count += cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::s_get_width(); // sta_itr_ecc_wrbfr_3
    _count += cap_pxb_csr_sta_itr_ecc_pcihdrt_t::s_get_width(); // sta_itr_ecc_pcihdrt
    _count += cap_pxb_csr_sta_itr_ecc_portmap_t::s_get_width(); // sta_itr_ecc_portmap
    _count += cap_pxb_csr_sta_itr_ecc_wrhdr_t::s_get_width(); // sta_itr_ecc_wrhdr
    _count += cap_pxb_csr_sta_itr_ecc_rdhdr_t::s_get_width(); // sta_itr_ecc_rdhdr
    _count += cap_pxb_csr_sta_itr_ecc_cplbfr_t::s_get_width(); // sta_itr_ecc_cplbfr
    _count += cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::s_get_width(); // sta_tgt_ecc_rxcrbfr_0
    _count += cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::s_get_width(); // sta_tgt_ecc_rxcrbfr_1
    _count += cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::s_get_width(); // sta_tgt_ecc_rxcrbfr_2
    _count += cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::s_get_width(); // sta_tgt_ecc_rxcrbfr_3
    _count += cap_pxb_csr_sta_tgt_ecc_aximst_0_t::s_get_width(); // sta_tgt_ecc_aximst_0
    _count += cap_pxb_csr_sta_tgt_ecc_aximst_1_t::s_get_width(); // sta_tgt_ecc_aximst_1
    _count += cap_pxb_csr_sta_tgt_ecc_aximst_2_t::s_get_width(); // sta_tgt_ecc_aximst_2
    _count += cap_pxb_csr_sta_tgt_ecc_aximst_3_t::s_get_width(); // sta_tgt_ecc_aximst_3
    _count += cap_pxb_csr_sta_tgt_ecc_aximst_4_t::s_get_width(); // sta_tgt_ecc_aximst_4
    _count += cap_pxb_csr_sta_tgt_ecc_rxinfo_t::s_get_width(); // sta_tgt_ecc_rxinfo
    _count += cap_pxb_csr_sta_tgt_ecc_cplst_t::s_get_width(); // sta_tgt_ecc_cplst
    _count += cap_pxb_csr_sta_tgt_ecc_pmr_t::s_get_width(); // sta_tgt_ecc_pmr
    _count += cap_pxb_csr_sta_tgt_ecc_prt_t::s_get_width(); // sta_tgt_ecc_prt
    _count += cap_pxb_csr_sta_tgt_ecc_romask_t::s_get_width(); // sta_tgt_ecc_romask
    _count += cap_pxb_csr_sat_tgt_rx_drop_t::s_get_width(); // sat_tgt_rx_drop
    _count += (cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::s_get_width() * 16); // cfg_tgt_vf_cfg_stride
    _count += cap_pxb_csr_sta_tgt_axi_pending_t::s_get_width(); // sta_tgt_axi_pending
    _count += (cap_pxb_csr_sta_tgt_ind_info_t::s_get_width() * 8); // sta_tgt_ind_info
    _count += cap_pxb_csr_cnt_itr_tot_axi_wr_t::s_get_width(); // cnt_itr_tot_axi_wr
    _count += cap_pxb_csr_cnt_itr_axi_wr64_t::s_get_width(); // cnt_itr_axi_wr64
    _count += cap_pxb_csr_cnt_itr_axi_wr256_t::s_get_width(); // cnt_itr_axi_wr256
    _count += cap_pxb_csr_sta_itr_tot_axi_wr_t::s_get_width(); // sta_itr_tot_axi_wr
    _count += cap_pxb_csr_sta_itr_tot_axi_rd_t::s_get_width(); // sta_itr_tot_axi_rd
    _count += cap_pxb_csr_cnt_itr_tot_axi_rd_t::s_get_width(); // cnt_itr_tot_axi_rd
    _count += cap_pxb_csr_cnt_itr_axi_rd64_t::s_get_width(); // cnt_itr_axi_rd64
    _count += cap_pxb_csr_cnt_itr_axi_rd256_t::s_get_width(); // cnt_itr_axi_rd256
    _count += cap_pxb_csr_cnt_tgt_tot_axi_wr_t::s_get_width(); // cnt_tgt_tot_axi_wr
    _count += cap_pxb_csr_cnt_tgt_axi_wr64_t::s_get_width(); // cnt_tgt_axi_wr64
    _count += cap_pxb_csr_cnt_tgt_db64_axi_wr_t::s_get_width(); // cnt_tgt_db64_axi_wr
    _count += cap_pxb_csr_cnt_tgt_db32_axi_wr_t::s_get_width(); // cnt_tgt_db32_axi_wr
    _count += cap_pxb_csr_cnt_tgt_rsp_ca_ur_t::s_get_width(); // cnt_tgt_rsp_ca_ur
    _count += cap_pxb_csr_cnt_tgt_tot_axi_rd_t::s_get_width(); // cnt_tgt_tot_axi_rd
    _count += cap_pxb_csr_cnt_tgt_axi_rd64_t::s_get_width(); // cnt_tgt_axi_rd64
    _count += cap_pxb_csr_sta_tgt_tot_axi_wr_t::s_get_width(); // sta_tgt_tot_axi_wr
    _count += cap_pxb_csr_sta_tgt_tot_axi_rd_t::s_get_width(); // sta_tgt_tot_axi_rd
    _count += cap_pxb_csr_sta_itr_axi_wr_num_ids_t::s_get_width(); // sta_itr_axi_wr_num_ids
    _count += cap_pxb_csr_sta_itr_axi_rd_num_ids_t::s_get_width(); // sta_itr_axi_rd_num_ids
    _count += cap_pxb_csr_cnt_itr_tot_msg_t::s_get_width(); // cnt_itr_tot_msg
    _count += cap_pxb_csr_cnt_itr_intx_assert_msg_t::s_get_width(); // cnt_itr_intx_assert_msg
    _count += cap_pxb_csr_cnt_itr_tot_atomic_req_t::s_get_width(); // cnt_itr_tot_atomic_req
    _count += cap_pxb_csr_sta_tgt_marker_rx_t::s_get_width(); // sta_tgt_marker_rx
    _count += cap_pxb_csr_sta_tgt_req_debug_t::s_get_width(); // sta_tgt_req_debug
    _count += cap_pxb_csr_sta_itr_req_debug_t::s_get_width(); // sta_itr_req_debug
    _count += cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::s_get_width(); // sta_tgt_rxcrbfr_debug_0
    _count += cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::s_get_width(); // sta_tgt_rxcrbfr_debug_1
    _count += cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::s_get_width(); // sta_tgt_rxcrbfr_debug_2
    _count += cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::s_get_width(); // sta_tgt_rxcrbfr_debug_3
    _count += cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::s_get_width(); // sta_tgt_rxcrbfr_debug_4
    _count += cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::s_get_width(); // sta_tgt_rxcrbfr_debug_5
    _count += cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::s_get_width(); // sta_tgt_rxcrbfr_debug_6
    _count += cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::s_get_width(); // sta_tgt_rxcrbfr_debug_7
    _count += cap_pxb_csr_cfg_itr_raw_tlp_t::s_get_width(); // cfg_itr_raw_tlp
    _count += cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::s_get_width(); // cfg_itr_raw_tlp_cmd
    _count += cap_pxb_csr_sta_itr_raw_tlp_data_t::s_get_width(); // sta_itr_raw_tlp_data
    _count += cap_pxb_csr_sta_itr_raw_tlp_t::s_get_width(); // sta_itr_raw_tlp
    _count += cap_pxb_csr_sta_itr_tags_pending_t::s_get_width(); // sta_itr_tags_pending
    _count += cap_pxb_csr_sta_itr_portfifo_depth_t::s_get_width(); // sta_itr_portfifo_depth
    _count += cap_pxb_csr_sta_itr_atomic_seq_cnt_t::s_get_width(); // sta_itr_atomic_seq_cnt
    _count += cap_pxb_csr_sta_itr_cnxt_pending_t::s_get_width(); // sta_itr_cnxt_pending
    _count += cap_pxb_csr_cfg_itr_atomic_seq_cnt_t::s_get_width(); // cfg_itr_atomic_seq_cnt
    _count += cap_pxb_csr_cfg_itr_axi_resp_order_t::s_get_width(); // cfg_itr_axi_resp_order
    _count += cap_pxb_csr_sat_tgt_ind_reason_t::s_get_width(); // sat_tgt_ind_reason
    _count += cap_pxb_csr_sat_itr_req_err_t::s_get_width(); // sat_itr_req_err
    _count += cap_pxb_csr_sat_itr_xfer_unexpected_t::s_get_width(); // sat_itr_xfer_unexpected
    _count += cap_pxb_csr_sat_itr_cpl_err_t::s_get_width(); // sat_itr_cpl_err
    _count += cap_pxb_csr_sat_itr_rsp_err_t::s_get_width(); // sat_itr_rsp_err
    _count += cap_pxb_csr_sat_itr_req_portgate_t::s_get_width(); // sat_itr_req_portgate
    _count += cap_pxb_csr_sat_tgt_rsp_err_t::s_get_width(); // sat_tgt_rsp_err
    _count += cap_pxb_csr_cfg_tgt_axi_attr_t::s_get_width(); // cfg_tgt_axi_attr
    _count += cap_pxb_csr_cfg_debug_port_t::s_get_width(); // cfg_debug_port
    _count += cap_pxb_csr_cfg_diag_spare0_t::s_get_width(); // cfg_diag_spare0
    _count += cap_pxb_csr_sta_diag_spare0_t::s_get_width(); // sta_diag_spare0
    _count += cap_pxb_csr_cfg_diag_spare1_t::s_get_width(); // cfg_diag_spare1
    _count += cap_pxb_csr_sta_diag_spare1_t::s_get_width(); // sta_diag_spare1
    _count += cap_pxb_csr_cfg_itr_rdlat_measure_t::s_get_width(); // cfg_itr_rdlat_measure
    _count += cap_pxb_csr_sat_itr_rdlat0_t::s_get_width(); // sat_itr_rdlat0
    _count += cap_pxb_csr_sat_itr_rdlat1_t::s_get_width(); // sat_itr_rdlat1
    _count += cap_pxb_csr_sat_itr_rdlat2_t::s_get_width(); // sat_itr_rdlat2
    _count += cap_pxb_csr_sat_itr_rdlat3_t::s_get_width(); // sat_itr_rdlat3
    _count += cap_pxb_csr_cfg_sram_bist_t::s_get_width(); // cfg_sram_bist
    _count += cap_pxb_csr_sta_sram_bist_t::s_get_width(); // sta_sram_bist
    _count += cap_pxb_csr_cfg_tcam_bist_t::s_get_width(); // cfg_tcam_bist
    _count += cap_pxb_csr_sta_tcam_bist_t::s_get_width(); // sta_tcam_bist
    _count += cap_pxb_csr_csr_intr_t::s_get_width(); // csr_intr
    _count += cap_pxb_csr_cfg_pxb_spare0_t::s_get_width(); // cfg_pxb_spare0
    _count += cap_pxb_csr_cfg_pxb_spare1_t::s_get_width(); // cfg_pxb_spare1
    _count += cap_pxb_csr_cfg_pxb_spare2_t::s_get_width(); // cfg_pxb_spare2
    _count += cap_pxb_csr_cfg_pxb_spare3_t::s_get_width(); // cfg_pxb_spare3
    _count += cap_pxb_csr_cfg_filter_t::s_get_width(); // cfg_filter
    _count += cap_pxb_csr_cfg_uid2sidLL_t::s_get_width(); // cfg_uid2sidLL
    _count += cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t::s_get_width(); // cfg_uid2sidLL_hbm_hash_msk_bit0
    _count += cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t::s_get_width(); // cfg_uid2sidLL_hbm_hash_msk_bit1
    _count += cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t::s_get_width(); // cfg_uid2sidLL_hbm_hash_msk_bit2
    _count += cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t::s_get_width(); // cfg_uid2sidLL_hbm_hash_msk_bit3
    _count += cap_pxb_csr_cfg_axi_bw_mon_t::s_get_width(); // cfg_axi_bw_mon
    _count += cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::s_get_width(); // sta_axi_bw_mon_rd_latency
    _count += cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::s_get_width(); // sta_axi_bw_mon_rd_bandwidth
    _count += cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::s_get_width(); // sta_axi_bw_mon_rd_transactions
    _count += cap_pxb_csr_cnt_axi_bw_mon_rd_t::s_get_width(); // cnt_axi_bw_mon_rd
    _count += cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::s_get_width(); // sta_axi_bw_mon_wr_latency
    _count += cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::s_get_width(); // sta_axi_bw_mon_wr_bandwidth
    _count += cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::s_get_width(); // sta_axi_bw_mon_wr_transactions
    _count += cap_pxb_csr_cnt_axi_bw_mon_wr_t::s_get_width(); // cnt_axi_bw_mon_wr
    _count += cap_pxb_csr_dhs_itr_pcihdrt_t::s_get_width(); // dhs_itr_pcihdrt
    _count += cap_pxb_csr_dhs_itr_portmap_t::s_get_width(); // dhs_itr_portmap
    _count += cap_pxb_csr_dhs_tgt_pmt_t::s_get_width(); // dhs_tgt_pmt
    _count += cap_pxb_csr_dhs_tgt_pmr_t::s_get_width(); // dhs_tgt_pmr
    _count += cap_pxb_csr_dhs_tgt_prt_t::s_get_width(); // dhs_tgt_prt
    _count += cap_pxb_csr_dhs_tgt_rxcrbfr0_t::s_get_width(); // dhs_tgt_rxcrbfr0
    _count += cap_pxb_csr_dhs_tgt_rxcrbfr1_t::s_get_width(); // dhs_tgt_rxcrbfr1
    _count += cap_pxb_csr_dhs_tgt_rxcrbfr2_t::s_get_width(); // dhs_tgt_rxcrbfr2
    _count += cap_pxb_csr_dhs_tgt_rxcrbfr3_t::s_get_width(); // dhs_tgt_rxcrbfr3
    _count += cap_pxb_csr_dhs_tgt_rxinfo_t::s_get_width(); // dhs_tgt_rxinfo
    _count += cap_pxb_csr_dhs_tgt_cplst_t::s_get_width(); // dhs_tgt_cplst
    _count += cap_pxb_csr_dhs_tgt_romask_t::s_get_width(); // dhs_tgt_romask
    _count += cap_pxb_csr_dhs_tgt_aximst0_t::s_get_width(); // dhs_tgt_aximst0
    _count += cap_pxb_csr_dhs_tgt_aximst1_t::s_get_width(); // dhs_tgt_aximst1
    _count += cap_pxb_csr_dhs_tgt_aximst2_t::s_get_width(); // dhs_tgt_aximst2
    _count += cap_pxb_csr_dhs_tgt_aximst3_t::s_get_width(); // dhs_tgt_aximst3
    _count += cap_pxb_csr_dhs_tgt_aximst4_t::s_get_width(); // dhs_tgt_aximst4
    _count += cap_pxb_csr_dhs_itr_wrbfr0_t::s_get_width(); // dhs_itr_wrbfr0
    _count += cap_pxb_csr_dhs_itr_wrbfr1_t::s_get_width(); // dhs_itr_wrbfr1
    _count += cap_pxb_csr_dhs_itr_wrbfr2_t::s_get_width(); // dhs_itr_wrbfr2
    _count += cap_pxb_csr_dhs_itr_wrbfr3_t::s_get_width(); // dhs_itr_wrbfr3
    _count += cap_pxb_csr_dhs_itr_wrhdr_t::s_get_width(); // dhs_itr_wrhdr
    _count += cap_pxb_csr_dhs_itr_rdhdr_t::s_get_width(); // dhs_itr_rdhdr
    _count += cap_pxb_csr_dhs_itr_rdcontext_t::s_get_width(); // dhs_itr_rdcontext
    _count += cap_pxb_csr_dhs_tgt_rdcontext_t::s_get_width(); // dhs_tgt_rdcontext
    _count += cap_pxb_csr_dhs_tgt_rc_bdfmap_t::s_get_width(); // dhs_tgt_rc_bdfmap
    _count += cap_pxb_csr_dhs_itr_cplbfr0_t::s_get_width(); // dhs_itr_cplbfr0
    _count += cap_pxb_csr_dhs_itr_cplbfr1_t::s_get_width(); // dhs_itr_cplbfr1
    _count += cap_pxb_csr_dhs_itr_cplbfr2_t::s_get_width(); // dhs_itr_cplbfr2
    _count += cap_pxb_csr_dhs_itr_cplbfr3_t::s_get_width(); // dhs_itr_cplbfr3
    _count += cap_pxb_csr_dhs_itr_cplbfr4_t::s_get_width(); // dhs_itr_cplbfr4
    _count += cap_pxb_csr_dhs_itr_cplbfr5_t::s_get_width(); // dhs_itr_cplbfr5
    _count += cap_pxb_csr_dhs_itr_cplbfr6_t::s_get_width(); // dhs_itr_cplbfr6
    _count += cap_pxb_csr_dhs_itr_cplbfr7_t::s_get_width(); // dhs_itr_cplbfr7
    _count += cap_pxb_csr_dhs_itr_cplbfr8_t::s_get_width(); // dhs_itr_cplbfr8
    _count += cap_pxb_csr_dhs_itr_cplbfr9_t::s_get_width(); // dhs_itr_cplbfr9
    _count += cap_pxb_csr_dhs_itr_cplbfr10_t::s_get_width(); // dhs_itr_cplbfr10
    _count += cap_pxb_csr_dhs_itr_cplbfr11_t::s_get_width(); // dhs_itr_cplbfr11
    _count += cap_pxb_csr_dhs_itr_cplbfr12_t::s_get_width(); // dhs_itr_cplbfr12
    _count += cap_pxb_csr_dhs_itr_cplbfr13_t::s_get_width(); // dhs_itr_cplbfr13
    _count += cap_pxb_csr_dhs_itr_cplbfr14_t::s_get_width(); // dhs_itr_cplbfr14
    _count += cap_pxb_csr_dhs_itr_cplbfr15_t::s_get_width(); // dhs_itr_cplbfr15
    _count += cap_pxb_csr_dhs_tgt_notify_t::s_get_width(); // dhs_tgt_notify
    _count += cap_pxb_csr_dhs_tgt_ind_rsp_t::s_get_width(); // dhs_tgt_ind_rsp
    _count += cap_pxb_csr_dhs_tgt_pmt_ind_t::s_get_width(); // dhs_tgt_pmt_ind
    _count += cap_pxb_csr_filter_addr_lo_t::s_get_width(); // filter_addr_lo
    _count += cap_pxb_csr_filter_addr_hi_t::s_get_width(); // filter_addr_hi
    _count += cap_pxb_csr_filter_addr_ctl_t::s_get_width(); // filter_addr_ctl
    _count += cap_pxb_csr_sta_inval_cam_t::s_get_width(); // sta_inval_cam
    _count += cap_pxb_csr_intgrp_status_t::s_get_width(); // int_groups
    _count += cap_pxb_csr_int_itr_ecc_t::s_get_width(); // int_itr_ecc
    _count += cap_pxb_csr_int_tgt_ecc_t::s_get_width(); // int_tgt_ecc
    _count += cap_pxb_csr_int_err_t::s_get_width(); // int_err
    return _count;
}

void cap_pxb_csr_int_err_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__cpl_ecrc_enable = _val.convert_to< cpl_ecrc_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_rxbuf_err_enable = _val.convert_to< cpl_rxbuf_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_stat_enable = _val.convert_to< cpl_stat_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_unexp_enable = _val.convert_to< cpl_unexp_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_timeout_enable = _val.convert_to< cpl_timeout_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_len_enable = _val.convert_to< cpl_len_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_poison_enable = _val.convert_to< cpl_poison_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_lowaddr_enable = _val.convert_to< cpl_lowaddr_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tgt_ind_rsp_unexp_enable = _val.convert_to< tgt_ind_rsp_unexp_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tgt_axi_rsp_unexp_enable = _val.convert_to< tgt_axi_rsp_unexp_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tgt_axi_rsp_err_enable = _val.convert_to< tgt_axi_rsp_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tgt_req_4k_err_enable = _val.convert_to< tgt_req_4k_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__itr_req_bdfmiss_enable = _val.convert_to< itr_req_bdfmiss_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__itr_req_axi_unsupp_enable = _val.convert_to< itr_req_axi_unsupp_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__itr_req_msg_align_err_enable = _val.convert_to< itr_req_msg_align_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__itr_bus_master_dis_enable = _val.convert_to< itr_bus_master_dis_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__itr_atomic_seq_err_enable = _val.convert_to< itr_atomic_seq_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__itr_atomic_resource_err_enable = _val.convert_to< itr_atomic_resource_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tgt_rmw_axi_resperr_enable = _val.convert_to< tgt_rmw_axi_resperr_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tgt_ind_notify_axi_resperr_enable = _val.convert_to< tgt_ind_notify_axi_resperr_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_int_err_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__cpl_ecrc_interrupt = _val.convert_to< cpl_ecrc_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_rxbuf_err_interrupt = _val.convert_to< cpl_rxbuf_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_stat_interrupt = _val.convert_to< cpl_stat_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_unexp_interrupt = _val.convert_to< cpl_unexp_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_timeout_interrupt = _val.convert_to< cpl_timeout_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_len_interrupt = _val.convert_to< cpl_len_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_poison_interrupt = _val.convert_to< cpl_poison_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_lowaddr_interrupt = _val.convert_to< cpl_lowaddr_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tgt_ind_rsp_unexp_interrupt = _val.convert_to< tgt_ind_rsp_unexp_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tgt_axi_rsp_unexp_interrupt = _val.convert_to< tgt_axi_rsp_unexp_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tgt_axi_rsp_err_interrupt = _val.convert_to< tgt_axi_rsp_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tgt_req_4k_err_interrupt = _val.convert_to< tgt_req_4k_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__itr_req_bdfmiss_interrupt = _val.convert_to< itr_req_bdfmiss_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__itr_req_axi_unsupp_interrupt = _val.convert_to< itr_req_axi_unsupp_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__itr_req_msg_align_err_interrupt = _val.convert_to< itr_req_msg_align_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__itr_bus_master_dis_interrupt = _val.convert_to< itr_bus_master_dis_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__itr_atomic_seq_err_interrupt = _val.convert_to< itr_atomic_seq_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__itr_atomic_resource_err_interrupt = _val.convert_to< itr_atomic_resource_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tgt_rmw_axi_resperr_interrupt = _val.convert_to< tgt_rmw_axi_resperr_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tgt_ind_notify_axi_resperr_interrupt = _val.convert_to< tgt_ind_notify_axi_resperr_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_int_err_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__aximst_0_uncorrectable_enable = _val.convert_to< aximst_0_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_0_correctable_enable = _val.convert_to< aximst_0_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_1_uncorrectable_enable = _val.convert_to< aximst_1_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_1_correctable_enable = _val.convert_to< aximst_1_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_2_uncorrectable_enable = _val.convert_to< aximst_2_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_2_correctable_enable = _val.convert_to< aximst_2_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_3_uncorrectable_enable = _val.convert_to< aximst_3_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_3_correctable_enable = _val.convert_to< aximst_3_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_4_uncorrectable_enable = _val.convert_to< aximst_4_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_4_correctable_enable = _val.convert_to< aximst_4_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxcrbfr_0_uncorrectable_enable = _val.convert_to< rxcrbfr_0_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxcrbfr_0_correctable_enable = _val.convert_to< rxcrbfr_0_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxcrbfr_1_uncorrectable_enable = _val.convert_to< rxcrbfr_1_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxcrbfr_1_correctable_enable = _val.convert_to< rxcrbfr_1_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxcrbfr_2_uncorrectable_enable = _val.convert_to< rxcrbfr_2_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxcrbfr_2_correctable_enable = _val.convert_to< rxcrbfr_2_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxcrbfr_3_uncorrectable_enable = _val.convert_to< rxcrbfr_3_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxcrbfr_3_correctable_enable = _val.convert_to< rxcrbfr_3_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxinfo_uncorrectable_enable = _val.convert_to< rxinfo_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxinfo_correctable_enable = _val.convert_to< rxinfo_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cplst_uncorrectable_enable = _val.convert_to< cplst_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cplst_correctable_enable = _val.convert_to< cplst_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__romask_uncorrectable_enable = _val.convert_to< romask_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__romask_correctable_enable = _val.convert_to< romask_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pmr_uncorrectable_enable = _val.convert_to< pmr_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pmr_correctable_enable = _val.convert_to< pmr_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__prt_uncorrectable_enable = _val.convert_to< prt_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__prt_correctable_enable = _val.convert_to< prt_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_int_tgt_ecc_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__aximst_0_uncorrectable_interrupt = _val.convert_to< aximst_0_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_0_correctable_interrupt = _val.convert_to< aximst_0_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_1_uncorrectable_interrupt = _val.convert_to< aximst_1_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_1_correctable_interrupt = _val.convert_to< aximst_1_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_2_uncorrectable_interrupt = _val.convert_to< aximst_2_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_2_correctable_interrupt = _val.convert_to< aximst_2_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_3_uncorrectable_interrupt = _val.convert_to< aximst_3_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_3_correctable_interrupt = _val.convert_to< aximst_3_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_4_uncorrectable_interrupt = _val.convert_to< aximst_4_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_4_correctable_interrupt = _val.convert_to< aximst_4_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxcrbfr_0_uncorrectable_interrupt = _val.convert_to< rxcrbfr_0_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxcrbfr_0_correctable_interrupt = _val.convert_to< rxcrbfr_0_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxcrbfr_1_uncorrectable_interrupt = _val.convert_to< rxcrbfr_1_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxcrbfr_1_correctable_interrupt = _val.convert_to< rxcrbfr_1_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxcrbfr_2_uncorrectable_interrupt = _val.convert_to< rxcrbfr_2_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxcrbfr_2_correctable_interrupt = _val.convert_to< rxcrbfr_2_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxcrbfr_3_uncorrectable_interrupt = _val.convert_to< rxcrbfr_3_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxcrbfr_3_correctable_interrupt = _val.convert_to< rxcrbfr_3_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxinfo_uncorrectable_interrupt = _val.convert_to< rxinfo_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxinfo_correctable_interrupt = _val.convert_to< rxinfo_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cplst_uncorrectable_interrupt = _val.convert_to< cplst_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cplst_correctable_interrupt = _val.convert_to< cplst_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__romask_uncorrectable_interrupt = _val.convert_to< romask_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__romask_correctable_interrupt = _val.convert_to< romask_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pmr_uncorrectable_interrupt = _val.convert_to< pmr_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pmr_correctable_interrupt = _val.convert_to< pmr_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__prt_uncorrectable_interrupt = _val.convert_to< prt_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__prt_correctable_interrupt = _val.convert_to< prt_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_int_tgt_ecc_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pcihdrt_uncorrectable_enable = _val.convert_to< pcihdrt_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pcihdrt_correctable_enable = _val.convert_to< pcihdrt_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__portmap_uncorrectable_enable = _val.convert_to< portmap_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__portmap_correctable_enable = _val.convert_to< portmap_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrhdr_uncorrectable_enable = _val.convert_to< wrhdr_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrhdr_correctable_enable = _val.convert_to< wrhdr_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rdhdr_uncorrectable_enable = _val.convert_to< rdhdr_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rdhdr_correctable_enable = _val.convert_to< rdhdr_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_0_uncorrectable_enable = _val.convert_to< wrbfr_0_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_0_correctable_enable = _val.convert_to< wrbfr_0_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_1_uncorrectable_enable = _val.convert_to< wrbfr_1_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_1_correctable_enable = _val.convert_to< wrbfr_1_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_2_uncorrectable_enable = _val.convert_to< wrbfr_2_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_2_correctable_enable = _val.convert_to< wrbfr_2_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_3_uncorrectable_enable = _val.convert_to< wrbfr_3_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_3_correctable_enable = _val.convert_to< wrbfr_3_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cplbfr_uncorrectable_enable = _val.convert_to< cplbfr_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cplbfr_correctable_enable = _val.convert_to< cplbfr_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_int_itr_ecc_intreg_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pcihdrt_uncorrectable_interrupt = _val.convert_to< pcihdrt_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pcihdrt_correctable_interrupt = _val.convert_to< pcihdrt_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__portmap_uncorrectable_interrupt = _val.convert_to< portmap_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__portmap_correctable_interrupt = _val.convert_to< portmap_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrhdr_uncorrectable_interrupt = _val.convert_to< wrhdr_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrhdr_correctable_interrupt = _val.convert_to< wrhdr_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rdhdr_uncorrectable_interrupt = _val.convert_to< rdhdr_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rdhdr_correctable_interrupt = _val.convert_to< rdhdr_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_0_uncorrectable_interrupt = _val.convert_to< wrbfr_0_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_0_correctable_interrupt = _val.convert_to< wrbfr_0_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_1_uncorrectable_interrupt = _val.convert_to< wrbfr_1_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_1_correctable_interrupt = _val.convert_to< wrbfr_1_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_2_uncorrectable_interrupt = _val.convert_to< wrbfr_2_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_2_correctable_interrupt = _val.convert_to< wrbfr_2_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_3_uncorrectable_interrupt = _val.convert_to< wrbfr_3_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_3_correctable_interrupt = _val.convert_to< wrbfr_3_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cplbfr_uncorrectable_interrupt = _val.convert_to< cplbfr_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cplbfr_correctable_interrupt = _val.convert_to< cplbfr_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_int_itr_ecc_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_pxb_csr_intreg_status_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__int_tgt_ecc_interrupt = _val.convert_to< int_tgt_ecc_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_itr_ecc_interrupt = _val.convert_to< int_itr_ecc_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_err_interrupt = _val.convert_to< int_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_int_groups_int_enable_rw_reg_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__int_tgt_ecc_enable = _val.convert_to< int_tgt_ecc_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_itr_ecc_enable = _val.convert_to< int_itr_ecc_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_err_enable = _val.convert_to< int_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_intgrp_status_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_enable_rw_reg.all( _val);
    _val = _val >> int_enable_rw_reg.get_width(); 
    int_rw_reg.all( _val);
    _val = _val >> int_rw_reg.get_width(); 
}

void cap_pxb_csr_sta_inval_cam_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 38;
    
}

void cap_pxb_csr_sta_inval_cam_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 64 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 64; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_filter_addr_ctl_value_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__value = _val.convert_to< value_cpp_int_t >()  ;
    _val = _val >> 4;
    
}

void cap_pxb_csr_filter_addr_ctl_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // value
    for(int ii = 0; ii < 8; ii++) {
        value[ii].all(_val);
        _val = _val >> value[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_filter_addr_hi_data_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__value = _val.convert_to< value_cpp_int_t >()  ;
    _val = _val >> 28;
    
}

void cap_pxb_csr_filter_addr_hi_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // data
    for(int ii = 0; ii < 8; ii++) {
        data[ii].all(_val);
        _val = _val >> data[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_filter_addr_lo_data_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__value = _val.convert_to< value_cpp_int_t >()  ;
    _val = _val >> 28;
    
}

void cap_pxb_csr_filter_addr_lo_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // data
    for(int ii = 0; ii < 8; ii++) {
        data[ii].all(_val);
        _val = _val >> data[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_pmt_ind_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__cmd = _val.convert_to< cmd_cpp_int_t >()  ;
    _val = _val >> 2;
    
}

void cap_pxb_csr_dhs_tgt_pmt_ind_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    entry.all( _val);
    _val = _val >> entry.get_width(); 
}

void cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data0 = _val.convert_to< data0_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__data1 = _val.convert_to< data1_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__data2 = _val.convert_to< data2_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__data3 = _val.convert_to< data3_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__cpl_stat = _val.convert_to< cpl_stat_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__port_id = _val.convert_to< port_id_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__axi_id = _val.convert_to< axi_id_cpp_int_t >()  ;
    _val = _val >> 7;
    
    int_var__fetch_rsp = _val.convert_to< fetch_rsp_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_dhs_tgt_ind_rsp_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    entry.all( _val);
    _val = _val >> entry.get_width(); 
}

void cap_pxb_csr_dhs_tgt_notify_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__posted = _val.convert_to< posted_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__completed = _val.convert_to< completed_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pxb_csr_dhs_tgt_notify_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 8; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr15_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_itr_cplbfr15_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr14_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_itr_cplbfr14_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr13_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_itr_cplbfr13_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr12_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_itr_cplbfr12_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr11_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_itr_cplbfr11_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr10_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_itr_cplbfr10_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr9_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_itr_cplbfr9_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr8_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_itr_cplbfr8_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr7_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_itr_cplbfr7_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr6_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_itr_cplbfr6_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr5_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_itr_cplbfr5_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr4_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_itr_cplbfr4_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr3_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_itr_cplbfr3_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr2_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_itr_cplbfr2_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr1_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_itr_cplbfr1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr0_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_itr_cplbfr0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__valid = _val.convert_to< valid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rc_bdf = _val.convert_to< rc_bdf_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__port_id = _val.convert_to< port_id_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__VFID = _val.convert_to< VFID_cpp_int_t >()  ;
    _val = _val >> 11;
    
}

void cap_pxb_csr_dhs_tgt_rc_bdfmap_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 64 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 64; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rdcontext_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__state = _val.convert_to< state_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__portid = _val.convert_to< portid_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__is_nonposted_wr = _val.convert_to< is_nonposted_wr_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__is_posted_wr = _val.convert_to< is_posted_wr_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_dhs_tgt_rdcontext_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_rdcontext_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__state = _val.convert_to< state_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__portid = _val.convert_to< portid_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__tag = _val.convert_to< tag_cpp_int_t >()  ;
    _val = _val >> 7;
    
    int_var__axi_id = _val.convert_to< axi_id_cpp_int_t >()  ;
    _val = _val >> 7;
    
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__rsize = _val.convert_to< rsize_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__timer = _val.convert_to< timer_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__bdf = _val.convert_to< bdf_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__aerr = _val.convert_to< aerr_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__derr = _val.convert_to< derr_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__terr = _val.convert_to< terr_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__lineaddr = _val.convert_to< lineaddr_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__linesize = _val.convert_to< linesize_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__seg_first = _val.convert_to< seg_first_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__seg_last = _val.convert_to< seg_last_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__seg_next = _val.convert_to< seg_next_cpp_int_t >()  ;
    _val = _val >> 7;
    
    int_var__is_raw = _val.convert_to< is_raw_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__is_nonposted_wr = _val.convert_to< is_nonposted_wr_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__atomic_state = _val.convert_to< atomic_state_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__is_narrow = _val.convert_to< is_narrow_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_dhs_itr_rdcontext_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_rdhdr_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 80;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_dhs_itr_rdhdr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_wrhdr_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 80;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_dhs_itr_wrhdr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_wrbfr3_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 128;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 9;
    
}

void cap_pxb_csr_dhs_itr_wrbfr3_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_wrbfr2_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 128;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 9;
    
}

void cap_pxb_csr_dhs_itr_wrbfr2_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_wrbfr1_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 128;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 9;
    
}

void cap_pxb_csr_dhs_itr_wrbfr1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_wrbfr0_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 128;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 9;
    
}

void cap_pxb_csr_dhs_itr_wrbfr0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_aximst4_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 128;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 9;
    
}

void cap_pxb_csr_dhs_tgt_aximst4_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_aximst3_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 128;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 9;
    
}

void cap_pxb_csr_dhs_tgt_aximst3_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_aximst2_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 128;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 9;
    
}

void cap_pxb_csr_dhs_tgt_aximst2_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_aximst1_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 128;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 9;
    
}

void cap_pxb_csr_dhs_tgt_aximst1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_aximst0_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 128;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 9;
    
}

void cap_pxb_csr_dhs_tgt_aximst0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_romask_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_tgt_romask_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_cplst_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 100;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_dhs_tgt_cplst_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rxinfo_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 6;
    
}

void cap_pxb_csr_dhs_tgt_rxinfo_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 128;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 9;
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr3_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 128;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 9;
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr2_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 128;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 9;
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 128;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 9;
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_prt_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__entry_data = _val.convert_to< entry_data_cpp_int_t >()  ;
    _val = _val >> 76;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_dhs_tgt_prt_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 4096 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 4096; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_pmr_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__entry_data = _val.convert_to< entry_data_cpp_int_t >()  ;
    _val = _val >> 110;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_dhs_tgt_pmr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_pmt_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__x_data = _val.convert_to< x_data_cpp_int_t >()  ;
    _val = _val >> 64;
    
    int_var__y_data = _val.convert_to< y_data_cpp_int_t >()  ;
    _val = _val >> 64;
    
    int_var__valid = _val.convert_to< valid_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_dhs_tgt_pmt_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_portmap_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__dest = _val.convert_to< dest_cpp_int_t >()  ;
    _val = _val >> 48;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_dhs_itr_portmap_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__valid = _val.convert_to< valid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bdf = _val.convert_to< bdf_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__td = _val.convert_to< td_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pasid_en = _val.convert_to< pasid_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pasid_source = _val.convert_to< pasid_source_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__pasid_value = _val.convert_to< pasid_value_cpp_int_t >()  ;
    _val = _val >> 20;
    
    int_var__pasid_exe = _val.convert_to< pasid_exe_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pasid_privl = _val.convert_to< pasid_privl_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__attr2_1_rd = _val.convert_to< attr2_1_rd_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__attr2_1_wr = _val.convert_to< attr2_1_wr_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__rc_cfg1 = _val.convert_to< rc_cfg1_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__attr0_rd = _val.convert_to< attr0_rd_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__attr0_wr = _val.convert_to< attr0_wr_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ats_at_wr = _val.convert_to< ats_at_wr_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__ats_at_rd = _val.convert_to< ats_at_rd_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__tc = _val.convert_to< tc_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__ln_wr = _val.convert_to< ln_wr_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ln_rd = _val.convert_to< ln_rd_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rsvd1 = _val.convert_to< rsvd1_cpp_int_t >()  ;
    _val = _val >> 13;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_dhs_itr_pcihdrt_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 2048 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 2048; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pxb_csr_cnt_axi_bw_mon_wr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__val = _val.convert_to< val_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__outstanding = _val.convert_to< outstanding_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__dess_rdy = _val.convert_to< dess_rdy_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__maxv = _val.convert_to< maxv_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__avrg = _val.convert_to< avrg_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__maxv = _val.convert_to< maxv_cpp_int_t >()  ;
    _val = _val >> 14;
    
    int_var__avrg = _val.convert_to< avrg_cpp_int_t >()  ;
    _val = _val >> 14;
    
}

void cap_pxb_csr_cnt_axi_bw_mon_rd_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__val = _val.convert_to< val_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__outstanding = _val.convert_to< outstanding_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__dess_rdy = _val.convert_to< dess_rdy_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__maxv = _val.convert_to< maxv_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__avrg = _val.convert_to< avrg_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__maxv = _val.convert_to< maxv_cpp_int_t >()  ;
    _val = _val >> 14;
    
    int_var__avrg = _val.convert_to< avrg_cpp_int_t >()  ;
    _val = _val >> 14;
    
}

void cap_pxb_csr_cfg_axi_bw_mon_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__alpha = _val.convert_to< alpha_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__cycle = _val.convert_to< cycle_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__rcache = _val.convert_to< rcache_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__rcache_msk = _val.convert_to< rcache_msk_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__wcache = _val.convert_to< wcache_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__wcache_msk = _val.convert_to< wcache_msk_cpp_int_t >()  ;
    _val = _val >> 4;
    
}

void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__msk = _val.convert_to< msk_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__msk = _val.convert_to< msk_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__msk = _val.convert_to< msk_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__msk = _val.convert_to< msk_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cfg_uid2sidLL_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__spare = _val.convert_to< spare_cpp_int_t >()  ;
    _val = _val >> 7;
    
    int_var__mode = _val.convert_to< mode_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__base = _val.convert_to< base_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_cfg_filter_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__awcache_mask = _val.convert_to< awcache_mask_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__awcache_match = _val.convert_to< awcache_match_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__arcache_mask = _val.convert_to< arcache_mask_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__arcache_match = _val.convert_to< arcache_match_cpp_int_t >()  ;
    _val = _val >> 4;
    
}

void cap_pxb_csr_cfg_pxb_spare3_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pxb_csr_cfg_pxb_spare2_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pxb_csr_cfg_pxb_spare1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pxb_csr_cfg_pxb_spare0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pxb_csr_csr_intr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__dowstream = _val.convert_to< dowstream_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__dowstream_enable = _val.convert_to< dowstream_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_sta_tcam_bist_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__done_pass = _val.convert_to< done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__done_fail = _val.convert_to< done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_cfg_tcam_bist_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__run = _val.convert_to< run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_sta_sram_bist_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__done_pass = _val.convert_to< done_pass_cpp_int_t >()  ;
    _val = _val >> 38;
    
    int_var__done_fail = _val.convert_to< done_fail_cpp_int_t >()  ;
    _val = _val >> 38;
    
}

void cap_pxb_csr_cfg_sram_bist_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__run = _val.convert_to< run_cpp_int_t >()  ;
    _val = _val >> 38;
    
}

void cap_pxb_csr_sat_itr_rdlat3_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__num_samples = _val.convert_to< num_samples_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_sat_itr_rdlat2_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__num_samples = _val.convert_to< num_samples_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_sat_itr_rdlat1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__num_samples = _val.convert_to< num_samples_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_sat_itr_rdlat0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__num_samples = _val.convert_to< num_samples_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cfg_itr_rdlat_measure_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__thres2 = _val.convert_to< thres2_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__thres1 = _val.convert_to< thres1_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__thres0 = _val.convert_to< thres0_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__portid = _val.convert_to< portid_cpp_int_t >()  ;
    _val = _val >> 3;
    
}

void cap_pxb_csr_sta_diag_spare1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pxb_csr_cfg_diag_spare1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pxb_csr_sta_diag_spare0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pxb_csr_cfg_diag_spare0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pxb_csr_cfg_debug_port_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__select = _val.convert_to< select_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__enable = _val.convert_to< enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_cfg_tgt_axi_attr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__arcache = _val.convert_to< arcache_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__awcache = _val.convert_to< awcache_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__prot = _val.convert_to< prot_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__qos = _val.convert_to< qos_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__lock = _val.convert_to< lock_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_sat_tgt_rsp_err_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ind_cnxt_mismatch = _val.convert_to< ind_cnxt_mismatch_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__rresp_err = _val.convert_to< rresp_err_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__bresp_err = _val.convert_to< bresp_err_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_sat_itr_req_portgate_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__closed = _val.convert_to< closed_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pxb_csr_sat_itr_rsp_err_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__axi = _val.convert_to< axi_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__cpl_timeout = _val.convert_to< cpl_timeout_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_sat_itr_cpl_err_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ecrc = _val.convert_to< ecrc_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__rxbuf_ecc = _val.convert_to< rxbuf_ecc_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__cpl_stat = _val.convert_to< cpl_stat_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__unexpected = _val.convert_to< unexpected_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_sat_itr_xfer_unexpected_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__wr256x = _val.convert_to< wr256x_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__rd256x = _val.convert_to< rd256x_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__wr_narrow = _val.convert_to< wr_narrow_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__rd_narrow = _val.convert_to< rd_narrow_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_sat_itr_req_err_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__unsupp_wr = _val.convert_to< unsupp_wr_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__unsupp_rd = _val.convert_to< unsupp_rd_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__pcihdrt_miss = _val.convert_to< pcihdrt_miss_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__bus_master_dis = _val.convert_to< bus_master_dis_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_sat_tgt_ind_reason_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pmr_force = _val.convert_to< pmr_force_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__prt_force = _val.convert_to< prt_force_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__msg = _val.convert_to< msg_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__atomic = _val.convert_to< atomic_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__poisoned = _val.convert_to< poisoned_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__unsupp = _val.convert_to< unsupp_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__pmv = _val.convert_to< pmv_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__db_pmv = _val.convert_to< db_pmv_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__pmt_miss = _val.convert_to< pmt_miss_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__rc_vfid_miss = _val.convert_to< rc_vfid_miss_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__pmr_prt_miss = _val.convert_to< pmr_prt_miss_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__prt_oor = _val.convert_to< prt_oor_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__bdf_wcard_oor = _val.convert_to< bdf_wcard_oor_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__vfid_oor = _val.convert_to< vfid_oor_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_cfg_itr_axi_resp_order_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__rd_strict = _val.convert_to< rd_strict_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wr_strict = _val.convert_to< wr_strict_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rd_id_limit = _val.convert_to< rd_id_limit_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_cfg_itr_atomic_seq_cnt_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__rst_mask = _val.convert_to< rst_mask_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pxb_csr_sta_itr_cnxt_pending_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__num = _val.convert_to< num_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_sta_itr_atomic_seq_cnt_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_mask = _val.convert_to< err_mask_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pxb_csr_sta_itr_portfifo_depth_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__port0_wr = _val.convert_to< port0_wr_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port0_rd = _val.convert_to< port0_rd_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port1_wr = _val.convert_to< port1_wr_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port1_rd = _val.convert_to< port1_rd_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port2_wr = _val.convert_to< port2_wr_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port2_rd = _val.convert_to< port2_rd_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port3_wr = _val.convert_to< port3_wr_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port3_rd = _val.convert_to< port3_rd_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port4_wr = _val.convert_to< port4_wr_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port4_rd = _val.convert_to< port4_rd_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port5_wr = _val.convert_to< port5_wr_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port5_rd = _val.convert_to< port5_rd_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port6_wr = _val.convert_to< port6_wr_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port6_rd = _val.convert_to< port6_rd_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port7_wr = _val.convert_to< port7_wr_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port7_rd = _val.convert_to< port7_rd_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_sta_itr_tags_pending_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__port0 = _val.convert_to< port0_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port1 = _val.convert_to< port1_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port2 = _val.convert_to< port2_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port3 = _val.convert_to< port3_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port4 = _val.convert_to< port4_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port5 = _val.convert_to< port5_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port6 = _val.convert_to< port6_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port7 = _val.convert_to< port7_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_sta_itr_raw_tlp_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__resp_rdy = _val.convert_to< resp_rdy_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_stat = _val.convert_to< cpl_stat_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__cpl_data_err = _val.convert_to< cpl_data_err_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_timeout_err = _val.convert_to< cpl_timeout_err_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__req_err = _val.convert_to< req_err_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_sta_itr_raw_tlp_data_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__resp0 = _val.convert_to< resp0_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__resp1 = _val.convert_to< resp1_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__resp2 = _val.convert_to< resp2_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__resp3 = _val.convert_to< resp3_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__resp4 = _val.convert_to< resp4_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__resp5 = _val.convert_to< resp5_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__resp6 = _val.convert_to< resp6_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__resp7 = _val.convert_to< resp7_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__dw_cnt = _val.convert_to< dw_cnt_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__port_id = _val.convert_to< port_id_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__cmd_go = _val.convert_to< cmd_go_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_cfg_itr_raw_tlp_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__dw0 = _val.convert_to< dw0_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__dw1 = _val.convert_to< dw1_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__dw2 = _val.convert_to< dw2_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__dw3 = _val.convert_to< dw3_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__dw4 = _val.convert_to< dw4_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__dw5 = _val.convert_to< dw5_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__dw6 = _val.convert_to< dw6_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__dw7 = _val.convert_to< dw7_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__dw8 = _val.convert_to< dw8_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__dw9 = _val.convert_to< dw9_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__dw10 = _val.convert_to< dw10_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__dw11 = _val.convert_to< dw11_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__waddr = _val.convert_to< waddr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__waddr = _val.convert_to< waddr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__waddr = _val.convert_to< waddr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__waddr = _val.convert_to< waddr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__waddr = _val.convert_to< waddr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__waddr = _val.convert_to< waddr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__waddr = _val.convert_to< waddr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__waddr = _val.convert_to< waddr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sta_itr_req_debug_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__stg0_vld = _val.convert_to< stg0_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg1_vld = _val.convert_to< stg1_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg2_vld = _val.convert_to< stg2_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg3_vld = _val.convert_to< stg3_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg4_vld = _val.convert_to< stg4_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg5_vld = _val.convert_to< stg5_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__s0_rdy = _val.convert_to< s0_rdy_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__s0_port_space_avl_vec = _val.convert_to< s0_port_space_avl_vec_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__s0_tag_avl_vec = _val.convert_to< s0_tag_avl_vec_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__itr_cnxt_free_avl0 = _val.convert_to< itr_cnxt_free_avl0_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__itr_cnxt_free_avl1 = _val.convert_to< itr_cnxt_free_avl1_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__s5_req_fifo_depth = _val.convert_to< s5_req_fifo_depth_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__s5_seg_state = _val.convert_to< s5_seg_state_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__tx_wrcnt_req_stall = _val.convert_to< tx_wrcnt_req_stall_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tx_wrcnt_cpl_stall = _val.convert_to< tx_wrcnt_cpl_stall_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tx_wrcnt_raw_stall = _val.convert_to< tx_wrcnt_raw_stall_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__s5_is_wr = _val.convert_to< s5_is_wr_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__s5_is_msg = _val.convert_to< s5_is_msg_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_eop_pnd = _val.convert_to< cpl_eop_pnd_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__req_eop_pnd = _val.convert_to< req_eop_pnd_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__raw_cmd_pnd = _val.convert_to< raw_cmd_pnd_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_tx_vld = _val.convert_to< cpl_tx_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cpl_tx_rdy = _val.convert_to< cpl_tx_rdy_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bvalid = _val.convert_to< bvalid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bready = _val.convert_to< bready_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__awvalid = _val.convert_to< awvalid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__awready = _val.convert_to< awready_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wvalid = _val.convert_to< wvalid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wready = _val.convert_to< wready_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__arvalid = _val.convert_to< arvalid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__arready = _val.convert_to< arready_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rvalid = _val.convert_to< rvalid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rready = _val.convert_to< rready_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_sta_tgt_req_debug_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__stg0_vld = _val.convert_to< stg0_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg1_vld = _val.convert_to< stg1_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg2_vld = _val.convert_to< stg2_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg3_vld = _val.convert_to< stg3_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg4_vld = _val.convert_to< stg4_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg5_vld = _val.convert_to< stg5_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg6_vld = _val.convert_to< stg6_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg7_vld = _val.convert_to< stg7_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg8_vld = _val.convert_to< stg8_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg9_vld = _val.convert_to< stg9_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg0_rdy = _val.convert_to< stg0_rdy_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg1_rdy = _val.convert_to< stg1_rdy_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg2_rdy = _val.convert_to< stg2_rdy_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg3_rdy = _val.convert_to< stg3_rdy_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg4_rdy = _val.convert_to< stg4_rdy_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg5_rdy = _val.convert_to< stg5_rdy_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg6_rdy = _val.convert_to< stg6_rdy_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg7_rdy = _val.convert_to< stg7_rdy_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg8_rdy = _val.convert_to< stg8_rdy_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stg9_rdy = _val.convert_to< stg9_rdy_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tgt_req_vld = _val.convert_to< tgt_req_vld_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__axi_fifo_rdy = _val.convert_to< axi_fifo_rdy_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__axi_fifo_notempty = _val.convert_to< axi_fifo_notempty_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__notify_full = _val.convert_to< notify_full_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__tgt_cnxt_xn_pnd = _val.convert_to< tgt_cnxt_xn_pnd_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__rxcfg0_vld = _val.convert_to< rxcfg0_vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__hw_rsp_rdy = _val.convert_to< hw_rsp_rdy_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__m_axi_awvalid = _val.convert_to< m_axi_awvalid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__m_axi_arvalid = _val.convert_to< m_axi_arvalid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__m_axi_wvalid = _val.convert_to< m_axi_wvalid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__m_axi_awready = _val.convert_to< m_axi_awready_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__m_axi_arready = _val.convert_to< m_axi_arready_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__m_axi_wready = _val.convert_to< m_axi_wready_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__m_axi_rvalid = _val.convert_to< m_axi_rvalid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__m_axi_rready = _val.convert_to< m_axi_rready_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__m_axi_bvalid = _val.convert_to< m_axi_bvalid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__m_axi_bready = _val.convert_to< m_axi_bready_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tgt_rsp_tx_rdy = _val.convert_to< tgt_rsp_tx_rdy_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__s7_ax_state0 = _val.convert_to< s7_ax_state0_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__s7_ax_state1 = _val.convert_to< s7_ax_state1_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__s7_ax_state2 = _val.convert_to< s7_ax_state2_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__s7_ax_state3 = _val.convert_to< s7_ax_state3_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__s7_ax_state4 = _val.convert_to< s7_ax_state4_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__s7_ax_state5 = _val.convert_to< s7_ax_state5_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__s7_ax_state6 = _val.convert_to< s7_ax_state6_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__s7_ax_state7 = _val.convert_to< s7_ax_state7_cpp_int_t >()  ;
    _val = _val >> 4;
    
}

void cap_pxb_csr_sta_tgt_marker_rx_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__port0 = _val.convert_to< port0_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__port1 = _val.convert_to< port1_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__port2 = _val.convert_to< port2_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__port3 = _val.convert_to< port3_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__port4 = _val.convert_to< port4_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__port5 = _val.convert_to< port5_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__port6 = _val.convert_to< port6_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__port7 = _val.convert_to< port7_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_cnt_itr_tot_atomic_req_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sent = _val.convert_to< sent_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cnt_itr_intx_assert_msg_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sent = _val.convert_to< sent_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cnt_itr_tot_msg_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sent = _val.convert_to< sent_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_sta_itr_axi_rd_num_ids_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pending = _val.convert_to< pending_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_sta_itr_axi_wr_num_ids_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pending = _val.convert_to< pending_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_sta_tgt_tot_axi_rd_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__num_bytes = _val.convert_to< num_bytes_cpp_int_t >()  ;
    _val = _val >> 50;
    
}

void cap_pxb_csr_sta_tgt_tot_axi_wr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__num_bytes = _val.convert_to< num_bytes_cpp_int_t >()  ;
    _val = _val >> 50;
    
}

void cap_pxb_csr_cnt_tgt_axi_rd64_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__req = _val.convert_to< req_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cnt_tgt_tot_axi_rd_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__req = _val.convert_to< req_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cnt_tgt_rsp_ca_ur_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__cnt = _val.convert_to< cnt_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cnt_tgt_db32_axi_wr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__req = _val.convert_to< req_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cnt_tgt_db64_axi_wr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__req = _val.convert_to< req_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cnt_tgt_axi_wr64_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__req = _val.convert_to< req_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cnt_tgt_tot_axi_wr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__req = _val.convert_to< req_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cnt_itr_axi_rd256_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__req = _val.convert_to< req_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cnt_itr_axi_rd64_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__req = _val.convert_to< req_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cnt_itr_tot_axi_rd_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__req = _val.convert_to< req_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_sta_itr_tot_axi_rd_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__num_bytes = _val.convert_to< num_bytes_cpp_int_t >()  ;
    _val = _val >> 50;
    
}

void cap_pxb_csr_sta_itr_tot_axi_wr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__num_bytes = _val.convert_to< num_bytes_cpp_int_t >()  ;
    _val = _val >> 50;
    
}

void cap_pxb_csr_cnt_itr_axi_wr256_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__req = _val.convert_to< req_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cnt_itr_axi_wr64_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__req = _val.convert_to< req_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_cnt_itr_tot_axi_wr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__req = _val.convert_to< req_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_pxb_csr_sta_tgt_ind_info_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pending = _val.convert_to< pending_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ramaddr = _val.convert_to< ramaddr_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_sta_tgt_axi_pending_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ids_p0 = _val.convert_to< ids_p0_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__ids_p1 = _val.convert_to< ids_p1_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__ids_p2 = _val.convert_to< ids_p2_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__ids_p3 = _val.convert_to< ids_p3_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__ids_p4 = _val.convert_to< ids_p4_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__ids_p5 = _val.convert_to< ids_p5_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__ids_p6 = _val.convert_to< ids_p6_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__ids_p7 = _val.convert_to< ids_p7_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__p_shift = _val.convert_to< p_shift_cpp_int_t >()  ;
    _val = _val >> 5;
    
    int_var__b_shift = _val.convert_to< b_shift_cpp_int_t >()  ;
    _val = _val >> 5;
    
    int_var__d_shift = _val.convert_to< d_shift_cpp_int_t >()  ;
    _val = _val >> 5;
    
    int_var__f_shift = _val.convert_to< f_shift_cpp_int_t >()  ;
    _val = _val >> 5;
    
    int_var__resource_dwsize = _val.convert_to< resource_dwsize_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sat_tgt_rx_drop_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__port0 = _val.convert_to< port0_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port1 = _val.convert_to< port1_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port2 = _val.convert_to< port2_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port3 = _val.convert_to< port3_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port4 = _val.convert_to< port4_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port5 = _val.convert_to< port5_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port6 = _val.convert_to< port6_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__port7 = _val.convert_to< port7_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_sta_tgt_ecc_romask_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 7;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_sta_tgt_ecc_prt_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 12;
    
}

void cap_pxb_csr_sta_tgt_ecc_pmr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sta_tgt_ecc_cplst_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_sta_tgt_ecc_rxinfo_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sta_tgt_ecc_aximst_4_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_sta_tgt_ecc_aximst_3_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_sta_tgt_ecc_aximst_2_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_sta_tgt_ecc_aximst_1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_sta_tgt_ecc_aximst_0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sta_itr_ecc_cplbfr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 7;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 13;
    
}

void cap_pxb_csr_sta_itr_ecc_rdhdr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_sta_itr_ecc_wrhdr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_sta_itr_ecc_portmap_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 7;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_pxb_csr_sta_itr_ecc_pcihdrt_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 11;
    
}

void cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_cfg_tgt_ecc_disable_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__rxinfo_cor = _val.convert_to< rxinfo_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxinfo_det = _val.convert_to< rxinfo_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxinfo_dhs = _val.convert_to< rxinfo_dhs_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pmr_cor = _val.convert_to< pmr_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pmr_det = _val.convert_to< pmr_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pmr_dhs = _val.convert_to< pmr_dhs_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__prt_cor = _val.convert_to< prt_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__prt_det = _val.convert_to< prt_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__prt_dhs = _val.convert_to< prt_dhs_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cplst_cor = _val.convert_to< cplst_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cplst_det = _val.convert_to< cplst_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cplst_dhs = _val.convert_to< cplst_dhs_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_cor = _val.convert_to< aximst_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_det = _val.convert_to< aximst_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__aximst_dhs = _val.convert_to< aximst_dhs_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__romask_cor = _val.convert_to< romask_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__romask_det = _val.convert_to< romask_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__romask_dhs = _val.convert_to< romask_dhs_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rxcrbfr_cor = _val.convert_to< rxcrbfr_cor_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__rxcrbfr_det = _val.convert_to< rxcrbfr_det_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__rxcrbfr_dhs = _val.convert_to< rxcrbfr_dhs_cpp_int_t >()  ;
    _val = _val >> 4;
    
}

void cap_pxb_csr_cfg_itr_ecc_disable_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pcihdrt_cor = _val.convert_to< pcihdrt_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pcihdrt_det = _val.convert_to< pcihdrt_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pcihdrt_dhs = _val.convert_to< pcihdrt_dhs_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__portmap_cor = _val.convert_to< portmap_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__portmap_det = _val.convert_to< portmap_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__portmap_dhs = _val.convert_to< portmap_dhs_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_cor = _val.convert_to< wrbfr_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_det = _val.convert_to< wrbfr_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrbfr_dhs = _val.convert_to< wrbfr_dhs_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrhdr_cor = _val.convert_to< wrhdr_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrhdr_det = _val.convert_to< wrhdr_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__wrhdr_dhs = _val.convert_to< wrhdr_dhs_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rdhdr_cor = _val.convert_to< rdhdr_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rdhdr_det = _val.convert_to< rdhdr_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rdhdr_dhs = _val.convert_to< rdhdr_dhs_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cplbfr_cor = _val.convert_to< cplbfr_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cplbfr_det = _val.convert_to< cplbfr_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cplbfr_dhs = _val.convert_to< cplbfr_dhs_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_sta_tgt_pmt_ind_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__hit = _val.convert_to< hit_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__hit_addr = _val.convert_to< hit_addr_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pxb_csr_cfg_tgt_pmt_ind_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__key = _val.convert_to< key_cpp_int_t >()  ;
    _val = _val >> 64;
    
    int_var__mask = _val.convert_to< mask_cpp_int_t >()  ;
    _val = _val >> 64;
    
}

void cap_pxb_csr_cfg_tgt_pmt_grst_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__vld = _val.convert_to< vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__val = _val.convert_to< val_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__base_35_2 = _val.convert_to< base_35_2_cpp_int_t >()  ;
    _val = _val >> 34;
    
}

void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__region0 = _val.convert_to< region0_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__region1 = _val.convert_to< region1_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__region2 = _val.convert_to< region2_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__region3 = _val.convert_to< region3_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__region4 = _val.convert_to< region4_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__region5 = _val.convert_to< region5_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__region6 = _val.convert_to< region6_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__region7 = _val.convert_to< region7_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__region8 = _val.convert_to< region8_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__region9 = _val.convert_to< region9_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__region10 = _val.convert_to< region10_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__region11 = _val.convert_to< region11_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__region12 = _val.convert_to< region12_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__region13 = _val.convert_to< region13_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__region14 = _val.convert_to< region14_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__region15 = _val.convert_to< region15_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__atomic = _val.convert_to< atomic_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__rc_cfg = _val.convert_to< rc_cfg_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__atomic_page_id = _val.convert_to< atomic_page_id_cpp_int_t >()  ;
    _val = _val >> 19;
    
    int_var__rc_cfg_page_id = _val.convert_to< rc_cfg_page_id_cpp_int_t >()  ;
    _val = _val >> 19;
    
    int_var__rc_io64k = _val.convert_to< rc_io64k_cpp_int_t >()  ;
    _val = _val >> 19;
    
}

void cap_pxb_csr_cfg_tgt_rc_key_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sel = _val.convert_to< sel_cpp_int_t >()  ;
    _val = _val >> 2;
    
}

void cap_pxb_csr_cfg_pmt_tbl_id_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__memio_tbl_id0 = _val.convert_to< memio_tbl_id0_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__cfg_tbl_id0 = _val.convert_to< cfg_tbl_id0_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__rc_tbl_id0 = _val.convert_to< rc_tbl_id0_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__default_tbl_id0 = _val.convert_to< default_tbl_id0_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__memio_tbl_id1 = _val.convert_to< memio_tbl_id1_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__cfg_tbl_id1 = _val.convert_to< cfg_tbl_id1_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__rc_tbl_id1 = _val.convert_to< rc_tbl_id1_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__default_tbl_id1 = _val.convert_to< default_tbl_id1_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__memio_tbl_id2 = _val.convert_to< memio_tbl_id2_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__cfg_tbl_id2 = _val.convert_to< cfg_tbl_id2_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__rc_tbl_id2 = _val.convert_to< rc_tbl_id2_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__default_tbl_id2 = _val.convert_to< default_tbl_id2_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__memio_tbl_id3 = _val.convert_to< memio_tbl_id3_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__cfg_tbl_id3 = _val.convert_to< cfg_tbl_id3_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__rc_tbl_id3 = _val.convert_to< rc_tbl_id3_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__default_tbl_id3 = _val.convert_to< default_tbl_id3_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__memio_tbl_id4 = _val.convert_to< memio_tbl_id4_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__cfg_tbl_id4 = _val.convert_to< cfg_tbl_id4_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__rc_tbl_id4 = _val.convert_to< rc_tbl_id4_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__default_tbl_id4 = _val.convert_to< default_tbl_id4_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__memio_tbl_id5 = _val.convert_to< memio_tbl_id5_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__cfg_tbl_id5 = _val.convert_to< cfg_tbl_id5_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__rc_tbl_id5 = _val.convert_to< rc_tbl_id5_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__default_tbl_id5 = _val.convert_to< default_tbl_id5_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__memio_tbl_id6 = _val.convert_to< memio_tbl_id6_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__cfg_tbl_id6 = _val.convert_to< cfg_tbl_id6_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__rc_tbl_id6 = _val.convert_to< rc_tbl_id6_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__default_tbl_id6 = _val.convert_to< default_tbl_id6_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__memio_tbl_id7 = _val.convert_to< memio_tbl_id7_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__cfg_tbl_id7 = _val.convert_to< cfg_tbl_id7_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__rc_tbl_id7 = _val.convert_to< rc_tbl_id7_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__default_tbl_id7 = _val.convert_to< default_tbl_id7_cpp_int_t >()  ;
    _val = _val >> 2;
    
}

void cap_pxb_csr_cfg_tgt_notify_en_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__msg = _val.convert_to< msg_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pmv = _val.convert_to< pmv_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__db_pmv = _val.convert_to< db_pmv_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__unsupp = _val.convert_to< unsupp_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__atomic = _val.convert_to< atomic_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pmt_miss = _val.convert_to< pmt_miss_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pmr_invalid = _val.convert_to< pmr_invalid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__prt_invalid = _val.convert_to< prt_invalid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rc_vfid_miss = _val.convert_to< rc_vfid_miss_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__prt_oor = _val.convert_to< prt_oor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__vfid_oor = _val.convert_to< vfid_oor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cfg_bdf_oor = _val.convert_to< cfg_bdf_oor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pmr_ecc_err = _val.convert_to< pmr_ecc_err_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__prt_ecc_err = _val.convert_to< prt_ecc_err_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_cfg_tgt_ind_en_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__msg = _val.convert_to< msg_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pmv = _val.convert_to< pmv_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__db_pmv = _val.convert_to< db_pmv_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__unsupp = _val.convert_to< unsupp_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__atomic = _val.convert_to< atomic_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pmt_miss = _val.convert_to< pmt_miss_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pmr_invalid = _val.convert_to< pmr_invalid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__prt_invalid = _val.convert_to< prt_invalid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rc_vfid_miss = _val.convert_to< rc_vfid_miss_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__prt_oor = _val.convert_to< prt_oor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__vfid_oor = _val.convert_to< vfid_oor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cfg_bdf_oor = _val.convert_to< cfg_bdf_oor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pmr_ecc_err = _val.convert_to< pmr_ecc_err_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__prt_ecc_err = _val.convert_to< prt_ecc_err_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__adr_base0 = _val.convert_to< adr_base0_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__adr_limit0 = _val.convert_to< adr_limit0_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__update0 = _val.convert_to< update0_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rst_rxfifo0 = _val.convert_to< rst_rxfifo0_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__adr_base1 = _val.convert_to< adr_base1_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__adr_limit1 = _val.convert_to< adr_limit1_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__update1 = _val.convert_to< update1_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rst_rxfifo1 = _val.convert_to< rst_rxfifo1_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__adr_base2 = _val.convert_to< adr_base2_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__adr_limit2 = _val.convert_to< adr_limit2_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__update2 = _val.convert_to< update2_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rst_rxfifo2 = _val.convert_to< rst_rxfifo2_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__adr_base3 = _val.convert_to< adr_base3_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__adr_limit3 = _val.convert_to< adr_limit3_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__update3 = _val.convert_to< update3_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rst_rxfifo3 = _val.convert_to< rst_rxfifo3_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__adr_base4 = _val.convert_to< adr_base4_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__adr_limit4 = _val.convert_to< adr_limit4_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__update4 = _val.convert_to< update4_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rst_rxfifo4 = _val.convert_to< rst_rxfifo4_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__adr_base5 = _val.convert_to< adr_base5_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__adr_limit5 = _val.convert_to< adr_limit5_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__update5 = _val.convert_to< update5_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rst_rxfifo5 = _val.convert_to< rst_rxfifo5_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__adr_base6 = _val.convert_to< adr_base6_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__adr_limit6 = _val.convert_to< adr_limit6_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__update6 = _val.convert_to< update6_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rst_rxfifo6 = _val.convert_to< rst_rxfifo6_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__adr_base7 = _val.convert_to< adr_base7_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__adr_limit7 = _val.convert_to< adr_limit7_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__update7 = _val.convert_to< update7_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rst_rxfifo7 = _val.convert_to< rst_rxfifo7_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_cfg_tgt_fence_ignore_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__from_mask = _val.convert_to< from_mask_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_pxb_csr_cfg_tgt_msg_filter_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__msg_code0 = _val.convert_to< msg_code0_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__drop_en0 = _val.convert_to< drop_en0_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__msg_code1 = _val.convert_to< msg_code1_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__drop_en1 = _val.convert_to< drop_en1_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__msg_code2 = _val.convert_to< msg_code2_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__drop_en2 = _val.convert_to< drop_en2_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_cfg_tgt_doorbell_base_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__addr_33_24 = _val.convert_to< addr_33_24_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__db_host_sel = _val.convert_to< db_host_sel_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__db_32b_sel = _val.convert_to< db_32b_sel_cpp_int_t >()  ;
    _val = _val >> 2;
    
}

void cap_pxb_csr_cfg_tgt_req_indirect_int_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__intr_data = _val.convert_to< intr_data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__base_addr_35_2 = _val.convert_to< base_addr_35_2_cpp_int_t >()  ;
    _val = _val >> 34;
    
}

void cap_pxb_csr_cfg_tgt_req_notify_ring_size_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__mask = _val.convert_to< mask_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pxb_csr_cfg_tgt_req_notify_int_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__intr_data = _val.convert_to< intr_data_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__base_addr_35_2 = _val.convert_to< base_addr_35_2_cpp_int_t >()  ;
    _val = _val >> 34;
    
}

void cap_pxb_csr_cfg_tgt_req_notify_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__base_addr_35_16 = _val.convert_to< base_addr_35_16_cpp_int_t >()  ;
    _val = _val >> 20;
    
}

void cap_pxb_csr_cfg_itr_tx_req_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__macfifo_thres = _val.convert_to< macfifo_thres_cpp_int_t >()  ;
    _val = _val >> 5;
    
    int_var__rd_sgl_pnd = _val.convert_to< rd_sgl_pnd_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tag_avl_guardband = _val.convert_to< tag_avl_guardband_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__cnxt_avl_guardband = _val.convert_to< cnxt_avl_guardband_cpp_int_t >()  ;
    _val = _val >> 3;
    
}

void cap_pxb_csr_cfg_tgt_port_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__id_limit = _val.convert_to< id_limit_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__bus_adjust = _val.convert_to< bus_adjust_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__halt = _val.convert_to< halt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__single_pnd = _val.convert_to< single_pnd_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__td_miss = _val.convert_to< td_miss_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__depth_thres = _val.convert_to< depth_thres_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__skip_notify_if_qfull = _val.convert_to< skip_notify_if_qfull_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fbe_holes_allow = _val.convert_to< fbe_holes_allow_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fence_dis = _val.convert_to< fence_dis_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_cfg_itr_port_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__rdreq_limit = _val.convert_to< rdreq_limit_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__timer_tick = _val.convert_to< timer_tick_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__timer_limit = _val.convert_to< timer_limit_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__bus_adjust = _val.convert_to< bus_adjust_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__arb_cr_hdr = _val.convert_to< arb_cr_hdr_cpp_int_t >()  ;
    _val = _val >> 5;
    
    int_var__arb_cr_data = _val.convert_to< arb_cr_data_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__arb_cr_dis_wr = _val.convert_to< arb_cr_dis_wr_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__arb_cr_dis_rd = _val.convert_to< arb_cr_dis_rd_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__arb_cnxtcnt_chk_dis = _val.convert_to< arb_cnxtcnt_chk_dis_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__arb_tagcnt_chk_dis = _val.convert_to< arb_tagcnt_chk_dis_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__arb_txfifocnt = _val.convert_to< arb_txfifocnt_cpp_int_t >()  ;
    _val = _val >> 5;
    
    int_var__adr_extn_en = _val.convert_to< adr_extn_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_cfg_pc_port_type_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__host_or_rc0 = _val.convert_to< host_or_rc0_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__host_or_rc1 = _val.convert_to< host_or_rc1_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__host_or_rc2 = _val.convert_to< host_or_rc2_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__host_or_rc3 = _val.convert_to< host_or_rc3_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__host_or_rc4 = _val.convert_to< host_or_rc4_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__host_or_rc5 = _val.convert_to< host_or_rc5_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__host_or_rc6 = _val.convert_to< host_or_rc6_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__host_or_rc7 = _val.convert_to< host_or_rc7_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pxb_csr_rdintr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ireg = _val.convert_to< ireg_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pxb_csr_base_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__scratch_reg = _val.convert_to< scratch_reg_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pxb_csr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    base.all( _val);
    _val = _val >> base.get_width(); 
    rdintr.all( _val);
    _val = _val >> rdintr.get_width(); 
    cfg_pc_port_type.all( _val);
    _val = _val >> cfg_pc_port_type.get_width(); 
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_itr_port
    for(int ii = 0; ii < 8; ii++) {
        cfg_itr_port[ii].all(_val);
        _val = _val >> cfg_itr_port[ii].get_width();
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_tgt_port
    for(int ii = 0; ii < 8; ii++) {
        cfg_tgt_port[ii].all(_val);
        _val = _val >> cfg_tgt_port[ii].get_width();
    }
    #endif
    
    cfg_itr_tx_req.all( _val);
    _val = _val >> cfg_itr_tx_req.get_width(); 
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_tgt_req_notify
    for(int ii = 0; ii < 8; ii++) {
        cfg_tgt_req_notify[ii].all(_val);
        _val = _val >> cfg_tgt_req_notify[ii].get_width();
    }
    #endif
    
    cfg_tgt_req_notify_int.all( _val);
    _val = _val >> cfg_tgt_req_notify_int.get_width(); 
    cfg_tgt_req_notify_ring_size.all( _val);
    _val = _val >> cfg_tgt_req_notify_ring_size.get_width(); 
    cfg_tgt_req_indirect_int.all( _val);
    _val = _val >> cfg_tgt_req_indirect_int.get_width(); 
    cfg_tgt_doorbell_base.all( _val);
    _val = _val >> cfg_tgt_doorbell_base.get_width(); 
    cfg_tgt_msg_filter.all( _val);
    _val = _val >> cfg_tgt_msg_filter.get_width(); 
    cfg_tgt_fence_ignore.all( _val);
    _val = _val >> cfg_tgt_fence_ignore.get_width(); 
    cfg_tgt_rx_credit_bfr.all( _val);
    _val = _val >> cfg_tgt_rx_credit_bfr.get_width(); 
    cfg_tgt_ind_en.all( _val);
    _val = _val >> cfg_tgt_ind_en.get_width(); 
    cfg_tgt_notify_en.all( _val);
    _val = _val >> cfg_tgt_notify_en.get_width(); 
    cfg_pmt_tbl_id.all( _val);
    _val = _val >> cfg_pmt_tbl_id.get_width(); 
    cfg_tgt_rc_key.all( _val);
    _val = _val >> cfg_tgt_rc_key.get_width(); 
    cfg_pcie_local_memaddr_decode.all( _val);
    _val = _val >> cfg_pcie_local_memaddr_decode.get_width(); 
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_tgt_rc_legacy_int_addr
    for(int ii = 0; ii < 8; ii++) {
        cfg_tgt_rc_legacy_int_addr[ii].all(_val);
        _val = _val >> cfg_tgt_rc_legacy_int_addr[ii].get_width();
    }
    #endif
    
    cfg_tgt_rc_legacy_int_data.all( _val);
    _val = _val >> cfg_tgt_rc_legacy_int_data.get_width(); 
    cfg_tgt_pmt_grst.all( _val);
    _val = _val >> cfg_tgt_pmt_grst.get_width(); 
    cfg_tgt_pmt_ind.all( _val);
    _val = _val >> cfg_tgt_pmt_ind.get_width(); 
    sta_tgt_pmt_ind.all( _val);
    _val = _val >> sta_tgt_pmt_ind.get_width(); 
    cfg_itr_ecc_disable.all( _val);
    _val = _val >> cfg_itr_ecc_disable.get_width(); 
    cfg_tgt_ecc_disable.all( _val);
    _val = _val >> cfg_tgt_ecc_disable.get_width(); 
    sta_itr_ecc_wrbfr_0.all( _val);
    _val = _val >> sta_itr_ecc_wrbfr_0.get_width(); 
    sta_itr_ecc_wrbfr_1.all( _val);
    _val = _val >> sta_itr_ecc_wrbfr_1.get_width(); 
    sta_itr_ecc_wrbfr_2.all( _val);
    _val = _val >> sta_itr_ecc_wrbfr_2.get_width(); 
    sta_itr_ecc_wrbfr_3.all( _val);
    _val = _val >> sta_itr_ecc_wrbfr_3.get_width(); 
    sta_itr_ecc_pcihdrt.all( _val);
    _val = _val >> sta_itr_ecc_pcihdrt.get_width(); 
    sta_itr_ecc_portmap.all( _val);
    _val = _val >> sta_itr_ecc_portmap.get_width(); 
    sta_itr_ecc_wrhdr.all( _val);
    _val = _val >> sta_itr_ecc_wrhdr.get_width(); 
    sta_itr_ecc_rdhdr.all( _val);
    _val = _val >> sta_itr_ecc_rdhdr.get_width(); 
    sta_itr_ecc_cplbfr.all( _val);
    _val = _val >> sta_itr_ecc_cplbfr.get_width(); 
    sta_tgt_ecc_rxcrbfr_0.all( _val);
    _val = _val >> sta_tgt_ecc_rxcrbfr_0.get_width(); 
    sta_tgt_ecc_rxcrbfr_1.all( _val);
    _val = _val >> sta_tgt_ecc_rxcrbfr_1.get_width(); 
    sta_tgt_ecc_rxcrbfr_2.all( _val);
    _val = _val >> sta_tgt_ecc_rxcrbfr_2.get_width(); 
    sta_tgt_ecc_rxcrbfr_3.all( _val);
    _val = _val >> sta_tgt_ecc_rxcrbfr_3.get_width(); 
    sta_tgt_ecc_aximst_0.all( _val);
    _val = _val >> sta_tgt_ecc_aximst_0.get_width(); 
    sta_tgt_ecc_aximst_1.all( _val);
    _val = _val >> sta_tgt_ecc_aximst_1.get_width(); 
    sta_tgt_ecc_aximst_2.all( _val);
    _val = _val >> sta_tgt_ecc_aximst_2.get_width(); 
    sta_tgt_ecc_aximst_3.all( _val);
    _val = _val >> sta_tgt_ecc_aximst_3.get_width(); 
    sta_tgt_ecc_aximst_4.all( _val);
    _val = _val >> sta_tgt_ecc_aximst_4.get_width(); 
    sta_tgt_ecc_rxinfo.all( _val);
    _val = _val >> sta_tgt_ecc_rxinfo.get_width(); 
    sta_tgt_ecc_cplst.all( _val);
    _val = _val >> sta_tgt_ecc_cplst.get_width(); 
    sta_tgt_ecc_pmr.all( _val);
    _val = _val >> sta_tgt_ecc_pmr.get_width(); 
    sta_tgt_ecc_prt.all( _val);
    _val = _val >> sta_tgt_ecc_prt.get_width(); 
    sta_tgt_ecc_romask.all( _val);
    _val = _val >> sta_tgt_ecc_romask.get_width(); 
    sat_tgt_rx_drop.all( _val);
    _val = _val >> sat_tgt_rx_drop.get_width(); 
    #if 16 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_tgt_vf_cfg_stride
    for(int ii = 0; ii < 16; ii++) {
        cfg_tgt_vf_cfg_stride[ii].all(_val);
        _val = _val >> cfg_tgt_vf_cfg_stride[ii].get_width();
    }
    #endif
    
    sta_tgt_axi_pending.all( _val);
    _val = _val >> sta_tgt_axi_pending.get_width(); 
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // sta_tgt_ind_info
    for(int ii = 0; ii < 8; ii++) {
        sta_tgt_ind_info[ii].all(_val);
        _val = _val >> sta_tgt_ind_info[ii].get_width();
    }
    #endif
    
    cnt_itr_tot_axi_wr.all( _val);
    _val = _val >> cnt_itr_tot_axi_wr.get_width(); 
    cnt_itr_axi_wr64.all( _val);
    _val = _val >> cnt_itr_axi_wr64.get_width(); 
    cnt_itr_axi_wr256.all( _val);
    _val = _val >> cnt_itr_axi_wr256.get_width(); 
    sta_itr_tot_axi_wr.all( _val);
    _val = _val >> sta_itr_tot_axi_wr.get_width(); 
    sta_itr_tot_axi_rd.all( _val);
    _val = _val >> sta_itr_tot_axi_rd.get_width(); 
    cnt_itr_tot_axi_rd.all( _val);
    _val = _val >> cnt_itr_tot_axi_rd.get_width(); 
    cnt_itr_axi_rd64.all( _val);
    _val = _val >> cnt_itr_axi_rd64.get_width(); 
    cnt_itr_axi_rd256.all( _val);
    _val = _val >> cnt_itr_axi_rd256.get_width(); 
    cnt_tgt_tot_axi_wr.all( _val);
    _val = _val >> cnt_tgt_tot_axi_wr.get_width(); 
    cnt_tgt_axi_wr64.all( _val);
    _val = _val >> cnt_tgt_axi_wr64.get_width(); 
    cnt_tgt_db64_axi_wr.all( _val);
    _val = _val >> cnt_tgt_db64_axi_wr.get_width(); 
    cnt_tgt_db32_axi_wr.all( _val);
    _val = _val >> cnt_tgt_db32_axi_wr.get_width(); 
    cnt_tgt_rsp_ca_ur.all( _val);
    _val = _val >> cnt_tgt_rsp_ca_ur.get_width(); 
    cnt_tgt_tot_axi_rd.all( _val);
    _val = _val >> cnt_tgt_tot_axi_rd.get_width(); 
    cnt_tgt_axi_rd64.all( _val);
    _val = _val >> cnt_tgt_axi_rd64.get_width(); 
    sta_tgt_tot_axi_wr.all( _val);
    _val = _val >> sta_tgt_tot_axi_wr.get_width(); 
    sta_tgt_tot_axi_rd.all( _val);
    _val = _val >> sta_tgt_tot_axi_rd.get_width(); 
    sta_itr_axi_wr_num_ids.all( _val);
    _val = _val >> sta_itr_axi_wr_num_ids.get_width(); 
    sta_itr_axi_rd_num_ids.all( _val);
    _val = _val >> sta_itr_axi_rd_num_ids.get_width(); 
    cnt_itr_tot_msg.all( _val);
    _val = _val >> cnt_itr_tot_msg.get_width(); 
    cnt_itr_intx_assert_msg.all( _val);
    _val = _val >> cnt_itr_intx_assert_msg.get_width(); 
    cnt_itr_tot_atomic_req.all( _val);
    _val = _val >> cnt_itr_tot_atomic_req.get_width(); 
    sta_tgt_marker_rx.all( _val);
    _val = _val >> sta_tgt_marker_rx.get_width(); 
    sta_tgt_req_debug.all( _val);
    _val = _val >> sta_tgt_req_debug.get_width(); 
    sta_itr_req_debug.all( _val);
    _val = _val >> sta_itr_req_debug.get_width(); 
    sta_tgt_rxcrbfr_debug_0.all( _val);
    _val = _val >> sta_tgt_rxcrbfr_debug_0.get_width(); 
    sta_tgt_rxcrbfr_debug_1.all( _val);
    _val = _val >> sta_tgt_rxcrbfr_debug_1.get_width(); 
    sta_tgt_rxcrbfr_debug_2.all( _val);
    _val = _val >> sta_tgt_rxcrbfr_debug_2.get_width(); 
    sta_tgt_rxcrbfr_debug_3.all( _val);
    _val = _val >> sta_tgt_rxcrbfr_debug_3.get_width(); 
    sta_tgt_rxcrbfr_debug_4.all( _val);
    _val = _val >> sta_tgt_rxcrbfr_debug_4.get_width(); 
    sta_tgt_rxcrbfr_debug_5.all( _val);
    _val = _val >> sta_tgt_rxcrbfr_debug_5.get_width(); 
    sta_tgt_rxcrbfr_debug_6.all( _val);
    _val = _val >> sta_tgt_rxcrbfr_debug_6.get_width(); 
    sta_tgt_rxcrbfr_debug_7.all( _val);
    _val = _val >> sta_tgt_rxcrbfr_debug_7.get_width(); 
    cfg_itr_raw_tlp.all( _val);
    _val = _val >> cfg_itr_raw_tlp.get_width(); 
    cfg_itr_raw_tlp_cmd.all( _val);
    _val = _val >> cfg_itr_raw_tlp_cmd.get_width(); 
    sta_itr_raw_tlp_data.all( _val);
    _val = _val >> sta_itr_raw_tlp_data.get_width(); 
    sta_itr_raw_tlp.all( _val);
    _val = _val >> sta_itr_raw_tlp.get_width(); 
    sta_itr_tags_pending.all( _val);
    _val = _val >> sta_itr_tags_pending.get_width(); 
    sta_itr_portfifo_depth.all( _val);
    _val = _val >> sta_itr_portfifo_depth.get_width(); 
    sta_itr_atomic_seq_cnt.all( _val);
    _val = _val >> sta_itr_atomic_seq_cnt.get_width(); 
    sta_itr_cnxt_pending.all( _val);
    _val = _val >> sta_itr_cnxt_pending.get_width(); 
    cfg_itr_atomic_seq_cnt.all( _val);
    _val = _val >> cfg_itr_atomic_seq_cnt.get_width(); 
    cfg_itr_axi_resp_order.all( _val);
    _val = _val >> cfg_itr_axi_resp_order.get_width(); 
    sat_tgt_ind_reason.all( _val);
    _val = _val >> sat_tgt_ind_reason.get_width(); 
    sat_itr_req_err.all( _val);
    _val = _val >> sat_itr_req_err.get_width(); 
    sat_itr_xfer_unexpected.all( _val);
    _val = _val >> sat_itr_xfer_unexpected.get_width(); 
    sat_itr_cpl_err.all( _val);
    _val = _val >> sat_itr_cpl_err.get_width(); 
    sat_itr_rsp_err.all( _val);
    _val = _val >> sat_itr_rsp_err.get_width(); 
    sat_itr_req_portgate.all( _val);
    _val = _val >> sat_itr_req_portgate.get_width(); 
    sat_tgt_rsp_err.all( _val);
    _val = _val >> sat_tgt_rsp_err.get_width(); 
    cfg_tgt_axi_attr.all( _val);
    _val = _val >> cfg_tgt_axi_attr.get_width(); 
    cfg_debug_port.all( _val);
    _val = _val >> cfg_debug_port.get_width(); 
    cfg_diag_spare0.all( _val);
    _val = _val >> cfg_diag_spare0.get_width(); 
    sta_diag_spare0.all( _val);
    _val = _val >> sta_diag_spare0.get_width(); 
    cfg_diag_spare1.all( _val);
    _val = _val >> cfg_diag_spare1.get_width(); 
    sta_diag_spare1.all( _val);
    _val = _val >> sta_diag_spare1.get_width(); 
    cfg_itr_rdlat_measure.all( _val);
    _val = _val >> cfg_itr_rdlat_measure.get_width(); 
    sat_itr_rdlat0.all( _val);
    _val = _val >> sat_itr_rdlat0.get_width(); 
    sat_itr_rdlat1.all( _val);
    _val = _val >> sat_itr_rdlat1.get_width(); 
    sat_itr_rdlat2.all( _val);
    _val = _val >> sat_itr_rdlat2.get_width(); 
    sat_itr_rdlat3.all( _val);
    _val = _val >> sat_itr_rdlat3.get_width(); 
    cfg_sram_bist.all( _val);
    _val = _val >> cfg_sram_bist.get_width(); 
    sta_sram_bist.all( _val);
    _val = _val >> sta_sram_bist.get_width(); 
    cfg_tcam_bist.all( _val);
    _val = _val >> cfg_tcam_bist.get_width(); 
    sta_tcam_bist.all( _val);
    _val = _val >> sta_tcam_bist.get_width(); 
    csr_intr.all( _val);
    _val = _val >> csr_intr.get_width(); 
    cfg_pxb_spare0.all( _val);
    _val = _val >> cfg_pxb_spare0.get_width(); 
    cfg_pxb_spare1.all( _val);
    _val = _val >> cfg_pxb_spare1.get_width(); 
    cfg_pxb_spare2.all( _val);
    _val = _val >> cfg_pxb_spare2.get_width(); 
    cfg_pxb_spare3.all( _val);
    _val = _val >> cfg_pxb_spare3.get_width(); 
    cfg_filter.all( _val);
    _val = _val >> cfg_filter.get_width(); 
    cfg_uid2sidLL.all( _val);
    _val = _val >> cfg_uid2sidLL.get_width(); 
    cfg_uid2sidLL_hbm_hash_msk_bit0.all( _val);
    _val = _val >> cfg_uid2sidLL_hbm_hash_msk_bit0.get_width(); 
    cfg_uid2sidLL_hbm_hash_msk_bit1.all( _val);
    _val = _val >> cfg_uid2sidLL_hbm_hash_msk_bit1.get_width(); 
    cfg_uid2sidLL_hbm_hash_msk_bit2.all( _val);
    _val = _val >> cfg_uid2sidLL_hbm_hash_msk_bit2.get_width(); 
    cfg_uid2sidLL_hbm_hash_msk_bit3.all( _val);
    _val = _val >> cfg_uid2sidLL_hbm_hash_msk_bit3.get_width(); 
    cfg_axi_bw_mon.all( _val);
    _val = _val >> cfg_axi_bw_mon.get_width(); 
    sta_axi_bw_mon_rd_latency.all( _val);
    _val = _val >> sta_axi_bw_mon_rd_latency.get_width(); 
    sta_axi_bw_mon_rd_bandwidth.all( _val);
    _val = _val >> sta_axi_bw_mon_rd_bandwidth.get_width(); 
    sta_axi_bw_mon_rd_transactions.all( _val);
    _val = _val >> sta_axi_bw_mon_rd_transactions.get_width(); 
    cnt_axi_bw_mon_rd.all( _val);
    _val = _val >> cnt_axi_bw_mon_rd.get_width(); 
    sta_axi_bw_mon_wr_latency.all( _val);
    _val = _val >> sta_axi_bw_mon_wr_latency.get_width(); 
    sta_axi_bw_mon_wr_bandwidth.all( _val);
    _val = _val >> sta_axi_bw_mon_wr_bandwidth.get_width(); 
    sta_axi_bw_mon_wr_transactions.all( _val);
    _val = _val >> sta_axi_bw_mon_wr_transactions.get_width(); 
    cnt_axi_bw_mon_wr.all( _val);
    _val = _val >> cnt_axi_bw_mon_wr.get_width(); 
    dhs_itr_pcihdrt.all( _val);
    _val = _val >> dhs_itr_pcihdrt.get_width(); 
    dhs_itr_portmap.all( _val);
    _val = _val >> dhs_itr_portmap.get_width(); 
    dhs_tgt_pmt.all( _val);
    _val = _val >> dhs_tgt_pmt.get_width(); 
    dhs_tgt_pmr.all( _val);
    _val = _val >> dhs_tgt_pmr.get_width(); 
    dhs_tgt_prt.all( _val);
    _val = _val >> dhs_tgt_prt.get_width(); 
    dhs_tgt_rxcrbfr0.all( _val);
    _val = _val >> dhs_tgt_rxcrbfr0.get_width(); 
    dhs_tgt_rxcrbfr1.all( _val);
    _val = _val >> dhs_tgt_rxcrbfr1.get_width(); 
    dhs_tgt_rxcrbfr2.all( _val);
    _val = _val >> dhs_tgt_rxcrbfr2.get_width(); 
    dhs_tgt_rxcrbfr3.all( _val);
    _val = _val >> dhs_tgt_rxcrbfr3.get_width(); 
    dhs_tgt_rxinfo.all( _val);
    _val = _val >> dhs_tgt_rxinfo.get_width(); 
    dhs_tgt_cplst.all( _val);
    _val = _val >> dhs_tgt_cplst.get_width(); 
    dhs_tgt_romask.all( _val);
    _val = _val >> dhs_tgt_romask.get_width(); 
    dhs_tgt_aximst0.all( _val);
    _val = _val >> dhs_tgt_aximst0.get_width(); 
    dhs_tgt_aximst1.all( _val);
    _val = _val >> dhs_tgt_aximst1.get_width(); 
    dhs_tgt_aximst2.all( _val);
    _val = _val >> dhs_tgt_aximst2.get_width(); 
    dhs_tgt_aximst3.all( _val);
    _val = _val >> dhs_tgt_aximst3.get_width(); 
    dhs_tgt_aximst4.all( _val);
    _val = _val >> dhs_tgt_aximst4.get_width(); 
    dhs_itr_wrbfr0.all( _val);
    _val = _val >> dhs_itr_wrbfr0.get_width(); 
    dhs_itr_wrbfr1.all( _val);
    _val = _val >> dhs_itr_wrbfr1.get_width(); 
    dhs_itr_wrbfr2.all( _val);
    _val = _val >> dhs_itr_wrbfr2.get_width(); 
    dhs_itr_wrbfr3.all( _val);
    _val = _val >> dhs_itr_wrbfr3.get_width(); 
    dhs_itr_wrhdr.all( _val);
    _val = _val >> dhs_itr_wrhdr.get_width(); 
    dhs_itr_rdhdr.all( _val);
    _val = _val >> dhs_itr_rdhdr.get_width(); 
    dhs_itr_rdcontext.all( _val);
    _val = _val >> dhs_itr_rdcontext.get_width(); 
    dhs_tgt_rdcontext.all( _val);
    _val = _val >> dhs_tgt_rdcontext.get_width(); 
    dhs_tgt_rc_bdfmap.all( _val);
    _val = _val >> dhs_tgt_rc_bdfmap.get_width(); 
    dhs_itr_cplbfr0.all( _val);
    _val = _val >> dhs_itr_cplbfr0.get_width(); 
    dhs_itr_cplbfr1.all( _val);
    _val = _val >> dhs_itr_cplbfr1.get_width(); 
    dhs_itr_cplbfr2.all( _val);
    _val = _val >> dhs_itr_cplbfr2.get_width(); 
    dhs_itr_cplbfr3.all( _val);
    _val = _val >> dhs_itr_cplbfr3.get_width(); 
    dhs_itr_cplbfr4.all( _val);
    _val = _val >> dhs_itr_cplbfr4.get_width(); 
    dhs_itr_cplbfr5.all( _val);
    _val = _val >> dhs_itr_cplbfr5.get_width(); 
    dhs_itr_cplbfr6.all( _val);
    _val = _val >> dhs_itr_cplbfr6.get_width(); 
    dhs_itr_cplbfr7.all( _val);
    _val = _val >> dhs_itr_cplbfr7.get_width(); 
    dhs_itr_cplbfr8.all( _val);
    _val = _val >> dhs_itr_cplbfr8.get_width(); 
    dhs_itr_cplbfr9.all( _val);
    _val = _val >> dhs_itr_cplbfr9.get_width(); 
    dhs_itr_cplbfr10.all( _val);
    _val = _val >> dhs_itr_cplbfr10.get_width(); 
    dhs_itr_cplbfr11.all( _val);
    _val = _val >> dhs_itr_cplbfr11.get_width(); 
    dhs_itr_cplbfr12.all( _val);
    _val = _val >> dhs_itr_cplbfr12.get_width(); 
    dhs_itr_cplbfr13.all( _val);
    _val = _val >> dhs_itr_cplbfr13.get_width(); 
    dhs_itr_cplbfr14.all( _val);
    _val = _val >> dhs_itr_cplbfr14.get_width(); 
    dhs_itr_cplbfr15.all( _val);
    _val = _val >> dhs_itr_cplbfr15.get_width(); 
    dhs_tgt_notify.all( _val);
    _val = _val >> dhs_tgt_notify.get_width(); 
    dhs_tgt_ind_rsp.all( _val);
    _val = _val >> dhs_tgt_ind_rsp.get_width(); 
    dhs_tgt_pmt_ind.all( _val);
    _val = _val >> dhs_tgt_pmt_ind.get_width(); 
    filter_addr_lo.all( _val);
    _val = _val >> filter_addr_lo.get_width(); 
    filter_addr_hi.all( _val);
    _val = _val >> filter_addr_hi.get_width(); 
    filter_addr_ctl.all( _val);
    _val = _val >> filter_addr_ctl.get_width(); 
    sta_inval_cam.all( _val);
    _val = _val >> sta_inval_cam.get_width(); 
    int_groups.all( _val);
    _val = _val >> int_groups.get_width(); 
    int_itr_ecc.all( _val);
    _val = _val >> int_itr_ecc.get_width(); 
    int_tgt_ecc.all( _val);
    _val = _val >> int_tgt_ecc.get_width(); 
    int_err.all( _val);
    _val = _val >> int_err.get_width(); 
}

cpp_int cap_pxb_csr_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_err.get_width(); ret_val = ret_val  | int_err.all(); 
    ret_val = ret_val << int_tgt_ecc.get_width(); ret_val = ret_val  | int_tgt_ecc.all(); 
    ret_val = ret_val << int_itr_ecc.get_width(); ret_val = ret_val  | int_itr_ecc.all(); 
    ret_val = ret_val << int_groups.get_width(); ret_val = ret_val  | int_groups.all(); 
    ret_val = ret_val << sta_inval_cam.get_width(); ret_val = ret_val  | sta_inval_cam.all(); 
    ret_val = ret_val << filter_addr_ctl.get_width(); ret_val = ret_val  | filter_addr_ctl.all(); 
    ret_val = ret_val << filter_addr_hi.get_width(); ret_val = ret_val  | filter_addr_hi.all(); 
    ret_val = ret_val << filter_addr_lo.get_width(); ret_val = ret_val  | filter_addr_lo.all(); 
    ret_val = ret_val << dhs_tgt_pmt_ind.get_width(); ret_val = ret_val  | dhs_tgt_pmt_ind.all(); 
    ret_val = ret_val << dhs_tgt_ind_rsp.get_width(); ret_val = ret_val  | dhs_tgt_ind_rsp.all(); 
    ret_val = ret_val << dhs_tgt_notify.get_width(); ret_val = ret_val  | dhs_tgt_notify.all(); 
    ret_val = ret_val << dhs_itr_cplbfr15.get_width(); ret_val = ret_val  | dhs_itr_cplbfr15.all(); 
    ret_val = ret_val << dhs_itr_cplbfr14.get_width(); ret_val = ret_val  | dhs_itr_cplbfr14.all(); 
    ret_val = ret_val << dhs_itr_cplbfr13.get_width(); ret_val = ret_val  | dhs_itr_cplbfr13.all(); 
    ret_val = ret_val << dhs_itr_cplbfr12.get_width(); ret_val = ret_val  | dhs_itr_cplbfr12.all(); 
    ret_val = ret_val << dhs_itr_cplbfr11.get_width(); ret_val = ret_val  | dhs_itr_cplbfr11.all(); 
    ret_val = ret_val << dhs_itr_cplbfr10.get_width(); ret_val = ret_val  | dhs_itr_cplbfr10.all(); 
    ret_val = ret_val << dhs_itr_cplbfr9.get_width(); ret_val = ret_val  | dhs_itr_cplbfr9.all(); 
    ret_val = ret_val << dhs_itr_cplbfr8.get_width(); ret_val = ret_val  | dhs_itr_cplbfr8.all(); 
    ret_val = ret_val << dhs_itr_cplbfr7.get_width(); ret_val = ret_val  | dhs_itr_cplbfr7.all(); 
    ret_val = ret_val << dhs_itr_cplbfr6.get_width(); ret_val = ret_val  | dhs_itr_cplbfr6.all(); 
    ret_val = ret_val << dhs_itr_cplbfr5.get_width(); ret_val = ret_val  | dhs_itr_cplbfr5.all(); 
    ret_val = ret_val << dhs_itr_cplbfr4.get_width(); ret_val = ret_val  | dhs_itr_cplbfr4.all(); 
    ret_val = ret_val << dhs_itr_cplbfr3.get_width(); ret_val = ret_val  | dhs_itr_cplbfr3.all(); 
    ret_val = ret_val << dhs_itr_cplbfr2.get_width(); ret_val = ret_val  | dhs_itr_cplbfr2.all(); 
    ret_val = ret_val << dhs_itr_cplbfr1.get_width(); ret_val = ret_val  | dhs_itr_cplbfr1.all(); 
    ret_val = ret_val << dhs_itr_cplbfr0.get_width(); ret_val = ret_val  | dhs_itr_cplbfr0.all(); 
    ret_val = ret_val << dhs_tgt_rc_bdfmap.get_width(); ret_val = ret_val  | dhs_tgt_rc_bdfmap.all(); 
    ret_val = ret_val << dhs_tgt_rdcontext.get_width(); ret_val = ret_val  | dhs_tgt_rdcontext.all(); 
    ret_val = ret_val << dhs_itr_rdcontext.get_width(); ret_val = ret_val  | dhs_itr_rdcontext.all(); 
    ret_val = ret_val << dhs_itr_rdhdr.get_width(); ret_val = ret_val  | dhs_itr_rdhdr.all(); 
    ret_val = ret_val << dhs_itr_wrhdr.get_width(); ret_val = ret_val  | dhs_itr_wrhdr.all(); 
    ret_val = ret_val << dhs_itr_wrbfr3.get_width(); ret_val = ret_val  | dhs_itr_wrbfr3.all(); 
    ret_val = ret_val << dhs_itr_wrbfr2.get_width(); ret_val = ret_val  | dhs_itr_wrbfr2.all(); 
    ret_val = ret_val << dhs_itr_wrbfr1.get_width(); ret_val = ret_val  | dhs_itr_wrbfr1.all(); 
    ret_val = ret_val << dhs_itr_wrbfr0.get_width(); ret_val = ret_val  | dhs_itr_wrbfr0.all(); 
    ret_val = ret_val << dhs_tgt_aximst4.get_width(); ret_val = ret_val  | dhs_tgt_aximst4.all(); 
    ret_val = ret_val << dhs_tgt_aximst3.get_width(); ret_val = ret_val  | dhs_tgt_aximst3.all(); 
    ret_val = ret_val << dhs_tgt_aximst2.get_width(); ret_val = ret_val  | dhs_tgt_aximst2.all(); 
    ret_val = ret_val << dhs_tgt_aximst1.get_width(); ret_val = ret_val  | dhs_tgt_aximst1.all(); 
    ret_val = ret_val << dhs_tgt_aximst0.get_width(); ret_val = ret_val  | dhs_tgt_aximst0.all(); 
    ret_val = ret_val << dhs_tgt_romask.get_width(); ret_val = ret_val  | dhs_tgt_romask.all(); 
    ret_val = ret_val << dhs_tgt_cplst.get_width(); ret_val = ret_val  | dhs_tgt_cplst.all(); 
    ret_val = ret_val << dhs_tgt_rxinfo.get_width(); ret_val = ret_val  | dhs_tgt_rxinfo.all(); 
    ret_val = ret_val << dhs_tgt_rxcrbfr3.get_width(); ret_val = ret_val  | dhs_tgt_rxcrbfr3.all(); 
    ret_val = ret_val << dhs_tgt_rxcrbfr2.get_width(); ret_val = ret_val  | dhs_tgt_rxcrbfr2.all(); 
    ret_val = ret_val << dhs_tgt_rxcrbfr1.get_width(); ret_val = ret_val  | dhs_tgt_rxcrbfr1.all(); 
    ret_val = ret_val << dhs_tgt_rxcrbfr0.get_width(); ret_val = ret_val  | dhs_tgt_rxcrbfr0.all(); 
    ret_val = ret_val << dhs_tgt_prt.get_width(); ret_val = ret_val  | dhs_tgt_prt.all(); 
    ret_val = ret_val << dhs_tgt_pmr.get_width(); ret_val = ret_val  | dhs_tgt_pmr.all(); 
    ret_val = ret_val << dhs_tgt_pmt.get_width(); ret_val = ret_val  | dhs_tgt_pmt.all(); 
    ret_val = ret_val << dhs_itr_portmap.get_width(); ret_val = ret_val  | dhs_itr_portmap.all(); 
    ret_val = ret_val << dhs_itr_pcihdrt.get_width(); ret_val = ret_val  | dhs_itr_pcihdrt.all(); 
    ret_val = ret_val << cnt_axi_bw_mon_wr.get_width(); ret_val = ret_val  | cnt_axi_bw_mon_wr.all(); 
    ret_val = ret_val << sta_axi_bw_mon_wr_transactions.get_width(); ret_val = ret_val  | sta_axi_bw_mon_wr_transactions.all(); 
    ret_val = ret_val << sta_axi_bw_mon_wr_bandwidth.get_width(); ret_val = ret_val  | sta_axi_bw_mon_wr_bandwidth.all(); 
    ret_val = ret_val << sta_axi_bw_mon_wr_latency.get_width(); ret_val = ret_val  | sta_axi_bw_mon_wr_latency.all(); 
    ret_val = ret_val << cnt_axi_bw_mon_rd.get_width(); ret_val = ret_val  | cnt_axi_bw_mon_rd.all(); 
    ret_val = ret_val << sta_axi_bw_mon_rd_transactions.get_width(); ret_val = ret_val  | sta_axi_bw_mon_rd_transactions.all(); 
    ret_val = ret_val << sta_axi_bw_mon_rd_bandwidth.get_width(); ret_val = ret_val  | sta_axi_bw_mon_rd_bandwidth.all(); 
    ret_val = ret_val << sta_axi_bw_mon_rd_latency.get_width(); ret_val = ret_val  | sta_axi_bw_mon_rd_latency.all(); 
    ret_val = ret_val << cfg_axi_bw_mon.get_width(); ret_val = ret_val  | cfg_axi_bw_mon.all(); 
    ret_val = ret_val << cfg_uid2sidLL_hbm_hash_msk_bit3.get_width(); ret_val = ret_val  | cfg_uid2sidLL_hbm_hash_msk_bit3.all(); 
    ret_val = ret_val << cfg_uid2sidLL_hbm_hash_msk_bit2.get_width(); ret_val = ret_val  | cfg_uid2sidLL_hbm_hash_msk_bit2.all(); 
    ret_val = ret_val << cfg_uid2sidLL_hbm_hash_msk_bit1.get_width(); ret_val = ret_val  | cfg_uid2sidLL_hbm_hash_msk_bit1.all(); 
    ret_val = ret_val << cfg_uid2sidLL_hbm_hash_msk_bit0.get_width(); ret_val = ret_val  | cfg_uid2sidLL_hbm_hash_msk_bit0.all(); 
    ret_val = ret_val << cfg_uid2sidLL.get_width(); ret_val = ret_val  | cfg_uid2sidLL.all(); 
    ret_val = ret_val << cfg_filter.get_width(); ret_val = ret_val  | cfg_filter.all(); 
    ret_val = ret_val << cfg_pxb_spare3.get_width(); ret_val = ret_val  | cfg_pxb_spare3.all(); 
    ret_val = ret_val << cfg_pxb_spare2.get_width(); ret_val = ret_val  | cfg_pxb_spare2.all(); 
    ret_val = ret_val << cfg_pxb_spare1.get_width(); ret_val = ret_val  | cfg_pxb_spare1.all(); 
    ret_val = ret_val << cfg_pxb_spare0.get_width(); ret_val = ret_val  | cfg_pxb_spare0.all(); 
    ret_val = ret_val << csr_intr.get_width(); ret_val = ret_val  | csr_intr.all(); 
    ret_val = ret_val << sta_tcam_bist.get_width(); ret_val = ret_val  | sta_tcam_bist.all(); 
    ret_val = ret_val << cfg_tcam_bist.get_width(); ret_val = ret_val  | cfg_tcam_bist.all(); 
    ret_val = ret_val << sta_sram_bist.get_width(); ret_val = ret_val  | sta_sram_bist.all(); 
    ret_val = ret_val << cfg_sram_bist.get_width(); ret_val = ret_val  | cfg_sram_bist.all(); 
    ret_val = ret_val << sat_itr_rdlat3.get_width(); ret_val = ret_val  | sat_itr_rdlat3.all(); 
    ret_val = ret_val << sat_itr_rdlat2.get_width(); ret_val = ret_val  | sat_itr_rdlat2.all(); 
    ret_val = ret_val << sat_itr_rdlat1.get_width(); ret_val = ret_val  | sat_itr_rdlat1.all(); 
    ret_val = ret_val << sat_itr_rdlat0.get_width(); ret_val = ret_val  | sat_itr_rdlat0.all(); 
    ret_val = ret_val << cfg_itr_rdlat_measure.get_width(); ret_val = ret_val  | cfg_itr_rdlat_measure.all(); 
    ret_val = ret_val << sta_diag_spare1.get_width(); ret_val = ret_val  | sta_diag_spare1.all(); 
    ret_val = ret_val << cfg_diag_spare1.get_width(); ret_val = ret_val  | cfg_diag_spare1.all(); 
    ret_val = ret_val << sta_diag_spare0.get_width(); ret_val = ret_val  | sta_diag_spare0.all(); 
    ret_val = ret_val << cfg_diag_spare0.get_width(); ret_val = ret_val  | cfg_diag_spare0.all(); 
    ret_val = ret_val << cfg_debug_port.get_width(); ret_val = ret_val  | cfg_debug_port.all(); 
    ret_val = ret_val << cfg_tgt_axi_attr.get_width(); ret_val = ret_val  | cfg_tgt_axi_attr.all(); 
    ret_val = ret_val << sat_tgt_rsp_err.get_width(); ret_val = ret_val  | sat_tgt_rsp_err.all(); 
    ret_val = ret_val << sat_itr_req_portgate.get_width(); ret_val = ret_val  | sat_itr_req_portgate.all(); 
    ret_val = ret_val << sat_itr_rsp_err.get_width(); ret_val = ret_val  | sat_itr_rsp_err.all(); 
    ret_val = ret_val << sat_itr_cpl_err.get_width(); ret_val = ret_val  | sat_itr_cpl_err.all(); 
    ret_val = ret_val << sat_itr_xfer_unexpected.get_width(); ret_val = ret_val  | sat_itr_xfer_unexpected.all(); 
    ret_val = ret_val << sat_itr_req_err.get_width(); ret_val = ret_val  | sat_itr_req_err.all(); 
    ret_val = ret_val << sat_tgt_ind_reason.get_width(); ret_val = ret_val  | sat_tgt_ind_reason.all(); 
    ret_val = ret_val << cfg_itr_axi_resp_order.get_width(); ret_val = ret_val  | cfg_itr_axi_resp_order.all(); 
    ret_val = ret_val << cfg_itr_atomic_seq_cnt.get_width(); ret_val = ret_val  | cfg_itr_atomic_seq_cnt.all(); 
    ret_val = ret_val << sta_itr_cnxt_pending.get_width(); ret_val = ret_val  | sta_itr_cnxt_pending.all(); 
    ret_val = ret_val << sta_itr_atomic_seq_cnt.get_width(); ret_val = ret_val  | sta_itr_atomic_seq_cnt.all(); 
    ret_val = ret_val << sta_itr_portfifo_depth.get_width(); ret_val = ret_val  | sta_itr_portfifo_depth.all(); 
    ret_val = ret_val << sta_itr_tags_pending.get_width(); ret_val = ret_val  | sta_itr_tags_pending.all(); 
    ret_val = ret_val << sta_itr_raw_tlp.get_width(); ret_val = ret_val  | sta_itr_raw_tlp.all(); 
    ret_val = ret_val << sta_itr_raw_tlp_data.get_width(); ret_val = ret_val  | sta_itr_raw_tlp_data.all(); 
    ret_val = ret_val << cfg_itr_raw_tlp_cmd.get_width(); ret_val = ret_val  | cfg_itr_raw_tlp_cmd.all(); 
    ret_val = ret_val << cfg_itr_raw_tlp.get_width(); ret_val = ret_val  | cfg_itr_raw_tlp.all(); 
    ret_val = ret_val << sta_tgt_rxcrbfr_debug_7.get_width(); ret_val = ret_val  | sta_tgt_rxcrbfr_debug_7.all(); 
    ret_val = ret_val << sta_tgt_rxcrbfr_debug_6.get_width(); ret_val = ret_val  | sta_tgt_rxcrbfr_debug_6.all(); 
    ret_val = ret_val << sta_tgt_rxcrbfr_debug_5.get_width(); ret_val = ret_val  | sta_tgt_rxcrbfr_debug_5.all(); 
    ret_val = ret_val << sta_tgt_rxcrbfr_debug_4.get_width(); ret_val = ret_val  | sta_tgt_rxcrbfr_debug_4.all(); 
    ret_val = ret_val << sta_tgt_rxcrbfr_debug_3.get_width(); ret_val = ret_val  | sta_tgt_rxcrbfr_debug_3.all(); 
    ret_val = ret_val << sta_tgt_rxcrbfr_debug_2.get_width(); ret_val = ret_val  | sta_tgt_rxcrbfr_debug_2.all(); 
    ret_val = ret_val << sta_tgt_rxcrbfr_debug_1.get_width(); ret_val = ret_val  | sta_tgt_rxcrbfr_debug_1.all(); 
    ret_val = ret_val << sta_tgt_rxcrbfr_debug_0.get_width(); ret_val = ret_val  | sta_tgt_rxcrbfr_debug_0.all(); 
    ret_val = ret_val << sta_itr_req_debug.get_width(); ret_val = ret_val  | sta_itr_req_debug.all(); 
    ret_val = ret_val << sta_tgt_req_debug.get_width(); ret_val = ret_val  | sta_tgt_req_debug.all(); 
    ret_val = ret_val << sta_tgt_marker_rx.get_width(); ret_val = ret_val  | sta_tgt_marker_rx.all(); 
    ret_val = ret_val << cnt_itr_tot_atomic_req.get_width(); ret_val = ret_val  | cnt_itr_tot_atomic_req.all(); 
    ret_val = ret_val << cnt_itr_intx_assert_msg.get_width(); ret_val = ret_val  | cnt_itr_intx_assert_msg.all(); 
    ret_val = ret_val << cnt_itr_tot_msg.get_width(); ret_val = ret_val  | cnt_itr_tot_msg.all(); 
    ret_val = ret_val << sta_itr_axi_rd_num_ids.get_width(); ret_val = ret_val  | sta_itr_axi_rd_num_ids.all(); 
    ret_val = ret_val << sta_itr_axi_wr_num_ids.get_width(); ret_val = ret_val  | sta_itr_axi_wr_num_ids.all(); 
    ret_val = ret_val << sta_tgt_tot_axi_rd.get_width(); ret_val = ret_val  | sta_tgt_tot_axi_rd.all(); 
    ret_val = ret_val << sta_tgt_tot_axi_wr.get_width(); ret_val = ret_val  | sta_tgt_tot_axi_wr.all(); 
    ret_val = ret_val << cnt_tgt_axi_rd64.get_width(); ret_val = ret_val  | cnt_tgt_axi_rd64.all(); 
    ret_val = ret_val << cnt_tgt_tot_axi_rd.get_width(); ret_val = ret_val  | cnt_tgt_tot_axi_rd.all(); 
    ret_val = ret_val << cnt_tgt_rsp_ca_ur.get_width(); ret_val = ret_val  | cnt_tgt_rsp_ca_ur.all(); 
    ret_val = ret_val << cnt_tgt_db32_axi_wr.get_width(); ret_val = ret_val  | cnt_tgt_db32_axi_wr.all(); 
    ret_val = ret_val << cnt_tgt_db64_axi_wr.get_width(); ret_val = ret_val  | cnt_tgt_db64_axi_wr.all(); 
    ret_val = ret_val << cnt_tgt_axi_wr64.get_width(); ret_val = ret_val  | cnt_tgt_axi_wr64.all(); 
    ret_val = ret_val << cnt_tgt_tot_axi_wr.get_width(); ret_val = ret_val  | cnt_tgt_tot_axi_wr.all(); 
    ret_val = ret_val << cnt_itr_axi_rd256.get_width(); ret_val = ret_val  | cnt_itr_axi_rd256.all(); 
    ret_val = ret_val << cnt_itr_axi_rd64.get_width(); ret_val = ret_val  | cnt_itr_axi_rd64.all(); 
    ret_val = ret_val << cnt_itr_tot_axi_rd.get_width(); ret_val = ret_val  | cnt_itr_tot_axi_rd.all(); 
    ret_val = ret_val << sta_itr_tot_axi_rd.get_width(); ret_val = ret_val  | sta_itr_tot_axi_rd.all(); 
    ret_val = ret_val << sta_itr_tot_axi_wr.get_width(); ret_val = ret_val  | sta_itr_tot_axi_wr.all(); 
    ret_val = ret_val << cnt_itr_axi_wr256.get_width(); ret_val = ret_val  | cnt_itr_axi_wr256.all(); 
    ret_val = ret_val << cnt_itr_axi_wr64.get_width(); ret_val = ret_val  | cnt_itr_axi_wr64.all(); 
    ret_val = ret_val << cnt_itr_tot_axi_wr.get_width(); ret_val = ret_val  | cnt_itr_tot_axi_wr.all(); 
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // sta_tgt_ind_info
    for(int ii = 8-1; ii >= 0; ii--) {
         ret_val = ret_val << sta_tgt_ind_info[ii].get_width(); ret_val = ret_val  | sta_tgt_ind_info[ii].all(); 
    }
    #endif
    
    ret_val = ret_val << sta_tgt_axi_pending.get_width(); ret_val = ret_val  | sta_tgt_axi_pending.all(); 
    #if 16 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_tgt_vf_cfg_stride
    for(int ii = 16-1; ii >= 0; ii--) {
         ret_val = ret_val << cfg_tgt_vf_cfg_stride[ii].get_width(); ret_val = ret_val  | cfg_tgt_vf_cfg_stride[ii].all(); 
    }
    #endif
    
    ret_val = ret_val << sat_tgt_rx_drop.get_width(); ret_val = ret_val  | sat_tgt_rx_drop.all(); 
    ret_val = ret_val << sta_tgt_ecc_romask.get_width(); ret_val = ret_val  | sta_tgt_ecc_romask.all(); 
    ret_val = ret_val << sta_tgt_ecc_prt.get_width(); ret_val = ret_val  | sta_tgt_ecc_prt.all(); 
    ret_val = ret_val << sta_tgt_ecc_pmr.get_width(); ret_val = ret_val  | sta_tgt_ecc_pmr.all(); 
    ret_val = ret_val << sta_tgt_ecc_cplst.get_width(); ret_val = ret_val  | sta_tgt_ecc_cplst.all(); 
    ret_val = ret_val << sta_tgt_ecc_rxinfo.get_width(); ret_val = ret_val  | sta_tgt_ecc_rxinfo.all(); 
    ret_val = ret_val << sta_tgt_ecc_aximst_4.get_width(); ret_val = ret_val  | sta_tgt_ecc_aximst_4.all(); 
    ret_val = ret_val << sta_tgt_ecc_aximst_3.get_width(); ret_val = ret_val  | sta_tgt_ecc_aximst_3.all(); 
    ret_val = ret_val << sta_tgt_ecc_aximst_2.get_width(); ret_val = ret_val  | sta_tgt_ecc_aximst_2.all(); 
    ret_val = ret_val << sta_tgt_ecc_aximst_1.get_width(); ret_val = ret_val  | sta_tgt_ecc_aximst_1.all(); 
    ret_val = ret_val << sta_tgt_ecc_aximst_0.get_width(); ret_val = ret_val  | sta_tgt_ecc_aximst_0.all(); 
    ret_val = ret_val << sta_tgt_ecc_rxcrbfr_3.get_width(); ret_val = ret_val  | sta_tgt_ecc_rxcrbfr_3.all(); 
    ret_val = ret_val << sta_tgt_ecc_rxcrbfr_2.get_width(); ret_val = ret_val  | sta_tgt_ecc_rxcrbfr_2.all(); 
    ret_val = ret_val << sta_tgt_ecc_rxcrbfr_1.get_width(); ret_val = ret_val  | sta_tgt_ecc_rxcrbfr_1.all(); 
    ret_val = ret_val << sta_tgt_ecc_rxcrbfr_0.get_width(); ret_val = ret_val  | sta_tgt_ecc_rxcrbfr_0.all(); 
    ret_val = ret_val << sta_itr_ecc_cplbfr.get_width(); ret_val = ret_val  | sta_itr_ecc_cplbfr.all(); 
    ret_val = ret_val << sta_itr_ecc_rdhdr.get_width(); ret_val = ret_val  | sta_itr_ecc_rdhdr.all(); 
    ret_val = ret_val << sta_itr_ecc_wrhdr.get_width(); ret_val = ret_val  | sta_itr_ecc_wrhdr.all(); 
    ret_val = ret_val << sta_itr_ecc_portmap.get_width(); ret_val = ret_val  | sta_itr_ecc_portmap.all(); 
    ret_val = ret_val << sta_itr_ecc_pcihdrt.get_width(); ret_val = ret_val  | sta_itr_ecc_pcihdrt.all(); 
    ret_val = ret_val << sta_itr_ecc_wrbfr_3.get_width(); ret_val = ret_val  | sta_itr_ecc_wrbfr_3.all(); 
    ret_val = ret_val << sta_itr_ecc_wrbfr_2.get_width(); ret_val = ret_val  | sta_itr_ecc_wrbfr_2.all(); 
    ret_val = ret_val << sta_itr_ecc_wrbfr_1.get_width(); ret_val = ret_val  | sta_itr_ecc_wrbfr_1.all(); 
    ret_val = ret_val << sta_itr_ecc_wrbfr_0.get_width(); ret_val = ret_val  | sta_itr_ecc_wrbfr_0.all(); 
    ret_val = ret_val << cfg_tgt_ecc_disable.get_width(); ret_val = ret_val  | cfg_tgt_ecc_disable.all(); 
    ret_val = ret_val << cfg_itr_ecc_disable.get_width(); ret_val = ret_val  | cfg_itr_ecc_disable.all(); 
    ret_val = ret_val << sta_tgt_pmt_ind.get_width(); ret_val = ret_val  | sta_tgt_pmt_ind.all(); 
    ret_val = ret_val << cfg_tgt_pmt_ind.get_width(); ret_val = ret_val  | cfg_tgt_pmt_ind.all(); 
    ret_val = ret_val << cfg_tgt_pmt_grst.get_width(); ret_val = ret_val  | cfg_tgt_pmt_grst.all(); 
    ret_val = ret_val << cfg_tgt_rc_legacy_int_data.get_width(); ret_val = ret_val  | cfg_tgt_rc_legacy_int_data.all(); 
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_tgt_rc_legacy_int_addr
    for(int ii = 8-1; ii >= 0; ii--) {
         ret_val = ret_val << cfg_tgt_rc_legacy_int_addr[ii].get_width(); ret_val = ret_val  | cfg_tgt_rc_legacy_int_addr[ii].all(); 
    }
    #endif
    
    ret_val = ret_val << cfg_pcie_local_memaddr_decode.get_width(); ret_val = ret_val  | cfg_pcie_local_memaddr_decode.all(); 
    ret_val = ret_val << cfg_tgt_rc_key.get_width(); ret_val = ret_val  | cfg_tgt_rc_key.all(); 
    ret_val = ret_val << cfg_pmt_tbl_id.get_width(); ret_val = ret_val  | cfg_pmt_tbl_id.all(); 
    ret_val = ret_val << cfg_tgt_notify_en.get_width(); ret_val = ret_val  | cfg_tgt_notify_en.all(); 
    ret_val = ret_val << cfg_tgt_ind_en.get_width(); ret_val = ret_val  | cfg_tgt_ind_en.all(); 
    ret_val = ret_val << cfg_tgt_rx_credit_bfr.get_width(); ret_val = ret_val  | cfg_tgt_rx_credit_bfr.all(); 
    ret_val = ret_val << cfg_tgt_fence_ignore.get_width(); ret_val = ret_val  | cfg_tgt_fence_ignore.all(); 
    ret_val = ret_val << cfg_tgt_msg_filter.get_width(); ret_val = ret_val  | cfg_tgt_msg_filter.all(); 
    ret_val = ret_val << cfg_tgt_doorbell_base.get_width(); ret_val = ret_val  | cfg_tgt_doorbell_base.all(); 
    ret_val = ret_val << cfg_tgt_req_indirect_int.get_width(); ret_val = ret_val  | cfg_tgt_req_indirect_int.all(); 
    ret_val = ret_val << cfg_tgt_req_notify_ring_size.get_width(); ret_val = ret_val  | cfg_tgt_req_notify_ring_size.all(); 
    ret_val = ret_val << cfg_tgt_req_notify_int.get_width(); ret_val = ret_val  | cfg_tgt_req_notify_int.all(); 
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_tgt_req_notify
    for(int ii = 8-1; ii >= 0; ii--) {
         ret_val = ret_val << cfg_tgt_req_notify[ii].get_width(); ret_val = ret_val  | cfg_tgt_req_notify[ii].all(); 
    }
    #endif
    
    ret_val = ret_val << cfg_itr_tx_req.get_width(); ret_val = ret_val  | cfg_itr_tx_req.all(); 
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_tgt_port
    for(int ii = 8-1; ii >= 0; ii--) {
         ret_val = ret_val << cfg_tgt_port[ii].get_width(); ret_val = ret_val  | cfg_tgt_port[ii].all(); 
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_itr_port
    for(int ii = 8-1; ii >= 0; ii--) {
         ret_val = ret_val << cfg_itr_port[ii].get_width(); ret_val = ret_val  | cfg_itr_port[ii].all(); 
    }
    #endif
    
    ret_val = ret_val << cfg_pc_port_type.get_width(); ret_val = ret_val  | cfg_pc_port_type.all(); 
    ret_val = ret_val << rdintr.get_width(); ret_val = ret_val  | rdintr.all(); 
    ret_val = ret_val << base.get_width(); ret_val = ret_val  | base.all(); 
    return ret_val;
}

cpp_int cap_pxb_csr_base_t::all() const {
    cpp_int ret_val;

    // scratch_reg
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__scratch_reg; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_rdintr_t::all() const {
    cpp_int ret_val;

    // ireg
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__ireg; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_pc_port_type_t::all() const {
    cpp_int ret_val;

    // host_or_rc7
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__host_or_rc7; 
    
    // host_or_rc6
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__host_or_rc6; 
    
    // host_or_rc5
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__host_or_rc5; 
    
    // host_or_rc4
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__host_or_rc4; 
    
    // host_or_rc3
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__host_or_rc3; 
    
    // host_or_rc2
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__host_or_rc2; 
    
    // host_or_rc1
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__host_or_rc1; 
    
    // host_or_rc0
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__host_or_rc0; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_itr_port_t::all() const {
    cpp_int ret_val;

    // adr_extn_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__adr_extn_en; 
    
    // arb_txfifocnt
    ret_val = ret_val << 5; ret_val = ret_val  | int_var__arb_txfifocnt; 
    
    // arb_tagcnt_chk_dis
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__arb_tagcnt_chk_dis; 
    
    // arb_cnxtcnt_chk_dis
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__arb_cnxtcnt_chk_dis; 
    
    // arb_cr_dis_rd
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__arb_cr_dis_rd; 
    
    // arb_cr_dis_wr
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__arb_cr_dis_wr; 
    
    // arb_cr_data
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__arb_cr_data; 
    
    // arb_cr_hdr
    ret_val = ret_val << 5; ret_val = ret_val  | int_var__arb_cr_hdr; 
    
    // bus_adjust
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bus_adjust; 
    
    // timer_limit
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__timer_limit; 
    
    // timer_tick
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__timer_tick; 
    
    // rdreq_limit
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__rdreq_limit; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_port_t::all() const {
    cpp_int ret_val;

    // fence_dis
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fence_dis; 
    
    // fbe_holes_allow
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fbe_holes_allow; 
    
    // skip_notify_if_qfull
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__skip_notify_if_qfull; 
    
    // depth_thres
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__depth_thres; 
    
    // td_miss
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__td_miss; 
    
    // single_pnd
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__single_pnd; 
    
    // halt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__halt; 
    
    // bus_adjust
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bus_adjust; 
    
    // id_limit
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__id_limit; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_itr_tx_req_t::all() const {
    cpp_int ret_val;

    // cnxt_avl_guardband
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__cnxt_avl_guardband; 
    
    // tag_avl_guardband
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__tag_avl_guardband; 
    
    // rd_sgl_pnd
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rd_sgl_pnd; 
    
    // macfifo_thres
    ret_val = ret_val << 5; ret_val = ret_val  | int_var__macfifo_thres; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_req_notify_t::all() const {
    cpp_int ret_val;

    // base_addr_35_16
    ret_val = ret_val << 20; ret_val = ret_val  | int_var__base_addr_35_16; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_req_notify_int_t::all() const {
    cpp_int ret_val;

    // base_addr_35_2
    ret_val = ret_val << 34; ret_val = ret_val  | int_var__base_addr_35_2; 
    
    // intr_data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__intr_data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_req_notify_ring_size_t::all() const {
    cpp_int ret_val;

    // mask
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__mask; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_req_indirect_int_t::all() const {
    cpp_int ret_val;

    // base_addr_35_2
    ret_val = ret_val << 34; ret_val = ret_val  | int_var__base_addr_35_2; 
    
    // intr_data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__intr_data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_doorbell_base_t::all() const {
    cpp_int ret_val;

    // db_32b_sel
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__db_32b_sel; 
    
    // db_host_sel
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__db_host_sel; 
    
    // addr_33_24
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__addr_33_24; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_msg_filter_t::all() const {
    cpp_int ret_val;

    // drop_en2
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_en2; 
    
    // msg_code2
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__msg_code2; 
    
    // drop_en1
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_en1; 
    
    // msg_code1
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__msg_code1; 
    
    // drop_en0
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_en0; 
    
    // msg_code0
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__msg_code0; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_fence_ignore_t::all() const {
    cpp_int ret_val;

    // from_mask
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__from_mask; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::all() const {
    cpp_int ret_val;

    // rst_rxfifo7
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rst_rxfifo7; 
    
    // update7
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__update7; 
    
    // adr_limit7
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__adr_limit7; 
    
    // adr_base7
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__adr_base7; 
    
    // rst_rxfifo6
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rst_rxfifo6; 
    
    // update6
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__update6; 
    
    // adr_limit6
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__adr_limit6; 
    
    // adr_base6
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__adr_base6; 
    
    // rst_rxfifo5
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rst_rxfifo5; 
    
    // update5
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__update5; 
    
    // adr_limit5
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__adr_limit5; 
    
    // adr_base5
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__adr_base5; 
    
    // rst_rxfifo4
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rst_rxfifo4; 
    
    // update4
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__update4; 
    
    // adr_limit4
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__adr_limit4; 
    
    // adr_base4
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__adr_base4; 
    
    // rst_rxfifo3
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rst_rxfifo3; 
    
    // update3
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__update3; 
    
    // adr_limit3
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__adr_limit3; 
    
    // adr_base3
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__adr_base3; 
    
    // rst_rxfifo2
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rst_rxfifo2; 
    
    // update2
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__update2; 
    
    // adr_limit2
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__adr_limit2; 
    
    // adr_base2
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__adr_base2; 
    
    // rst_rxfifo1
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rst_rxfifo1; 
    
    // update1
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__update1; 
    
    // adr_limit1
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__adr_limit1; 
    
    // adr_base1
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__adr_base1; 
    
    // rst_rxfifo0
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rst_rxfifo0; 
    
    // update0
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__update0; 
    
    // adr_limit0
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__adr_limit0; 
    
    // adr_base0
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__adr_base0; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_ind_en_t::all() const {
    cpp_int ret_val;

    // prt_ecc_err
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__prt_ecc_err; 
    
    // pmr_ecc_err
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pmr_ecc_err; 
    
    // cfg_bdf_oor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cfg_bdf_oor; 
    
    // vfid_oor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__vfid_oor; 
    
    // prt_oor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__prt_oor; 
    
    // rc_vfid_miss
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rc_vfid_miss; 
    
    // prt_invalid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__prt_invalid; 
    
    // pmr_invalid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pmr_invalid; 
    
    // pmt_miss
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pmt_miss; 
    
    // atomic
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__atomic; 
    
    // unsupp
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__unsupp; 
    
    // db_pmv
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__db_pmv; 
    
    // pmv
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pmv; 
    
    // msg
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__msg; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_notify_en_t::all() const {
    cpp_int ret_val;

    // prt_ecc_err
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__prt_ecc_err; 
    
    // pmr_ecc_err
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pmr_ecc_err; 
    
    // cfg_bdf_oor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cfg_bdf_oor; 
    
    // vfid_oor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__vfid_oor; 
    
    // prt_oor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__prt_oor; 
    
    // rc_vfid_miss
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rc_vfid_miss; 
    
    // prt_invalid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__prt_invalid; 
    
    // pmr_invalid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pmr_invalid; 
    
    // pmt_miss
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pmt_miss; 
    
    // atomic
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__atomic; 
    
    // unsupp
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__unsupp; 
    
    // db_pmv
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__db_pmv; 
    
    // pmv
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pmv; 
    
    // msg
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__msg; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::all() const {
    cpp_int ret_val;

    // default_tbl_id7
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__default_tbl_id7; 
    
    // rc_tbl_id7
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__rc_tbl_id7; 
    
    // cfg_tbl_id7
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__cfg_tbl_id7; 
    
    // memio_tbl_id7
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__memio_tbl_id7; 
    
    // default_tbl_id6
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__default_tbl_id6; 
    
    // rc_tbl_id6
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__rc_tbl_id6; 
    
    // cfg_tbl_id6
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__cfg_tbl_id6; 
    
    // memio_tbl_id6
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__memio_tbl_id6; 
    
    // default_tbl_id5
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__default_tbl_id5; 
    
    // rc_tbl_id5
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__rc_tbl_id5; 
    
    // cfg_tbl_id5
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__cfg_tbl_id5; 
    
    // memio_tbl_id5
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__memio_tbl_id5; 
    
    // default_tbl_id4
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__default_tbl_id4; 
    
    // rc_tbl_id4
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__rc_tbl_id4; 
    
    // cfg_tbl_id4
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__cfg_tbl_id4; 
    
    // memio_tbl_id4
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__memio_tbl_id4; 
    
    // default_tbl_id3
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__default_tbl_id3; 
    
    // rc_tbl_id3
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__rc_tbl_id3; 
    
    // cfg_tbl_id3
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__cfg_tbl_id3; 
    
    // memio_tbl_id3
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__memio_tbl_id3; 
    
    // default_tbl_id2
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__default_tbl_id2; 
    
    // rc_tbl_id2
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__rc_tbl_id2; 
    
    // cfg_tbl_id2
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__cfg_tbl_id2; 
    
    // memio_tbl_id2
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__memio_tbl_id2; 
    
    // default_tbl_id1
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__default_tbl_id1; 
    
    // rc_tbl_id1
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__rc_tbl_id1; 
    
    // cfg_tbl_id1
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__cfg_tbl_id1; 
    
    // memio_tbl_id1
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__memio_tbl_id1; 
    
    // default_tbl_id0
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__default_tbl_id0; 
    
    // rc_tbl_id0
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__rc_tbl_id0; 
    
    // cfg_tbl_id0
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__cfg_tbl_id0; 
    
    // memio_tbl_id0
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__memio_tbl_id0; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_rc_key_t::all() const {
    cpp_int ret_val;

    // sel
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__sel; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::all() const {
    cpp_int ret_val;

    // rc_io64k
    ret_val = ret_val << 19; ret_val = ret_val  | int_var__rc_io64k; 
    
    // rc_cfg_page_id
    ret_val = ret_val << 19; ret_val = ret_val  | int_var__rc_cfg_page_id; 
    
    // atomic_page_id
    ret_val = ret_val << 19; ret_val = ret_val  | int_var__atomic_page_id; 
    
    // rc_cfg
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__rc_cfg; 
    
    // atomic
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__atomic; 
    
    // region15
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__region15; 
    
    // region14
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__region14; 
    
    // region13
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__region13; 
    
    // region12
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__region12; 
    
    // region11
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__region11; 
    
    // region10
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__region10; 
    
    // region9
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__region9; 
    
    // region8
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__region8; 
    
    // region7
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__region7; 
    
    // region6
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__region6; 
    
    // region5
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__region5; 
    
    // region4
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__region4; 
    
    // region3
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__region3; 
    
    // region2
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__region2; 
    
    // region1
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__region1; 
    
    // region0
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__region0; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t::all() const {
    cpp_int ret_val;

    // base_35_2
    ret_val = ret_val << 34; ret_val = ret_val  | int_var__base_35_2; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t::all() const {
    cpp_int ret_val;

    // val
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__val; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_pmt_grst_t::all() const {
    cpp_int ret_val;

    // vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__vld; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_pmt_ind_t::all() const {
    cpp_int ret_val;

    // mask
    ret_val = ret_val << 64; ret_val = ret_val  | int_var__mask; 
    
    // key
    ret_val = ret_val << 64; ret_val = ret_val  | int_var__key; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_pmt_ind_t::all() const {
    cpp_int ret_val;

    // hit_addr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__hit_addr; 
    
    // hit
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__hit; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::all() const {
    cpp_int ret_val;

    // cplbfr_dhs
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cplbfr_dhs; 
    
    // cplbfr_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cplbfr_det; 
    
    // cplbfr_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cplbfr_cor; 
    
    // rdhdr_dhs
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rdhdr_dhs; 
    
    // rdhdr_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rdhdr_det; 
    
    // rdhdr_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rdhdr_cor; 
    
    // wrhdr_dhs
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrhdr_dhs; 
    
    // wrhdr_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrhdr_det; 
    
    // wrhdr_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrhdr_cor; 
    
    // wrbfr_dhs
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_dhs; 
    
    // wrbfr_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_det; 
    
    // wrbfr_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_cor; 
    
    // portmap_dhs
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__portmap_dhs; 
    
    // portmap_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__portmap_det; 
    
    // portmap_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__portmap_cor; 
    
    // pcihdrt_dhs
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pcihdrt_dhs; 
    
    // pcihdrt_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pcihdrt_det; 
    
    // pcihdrt_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pcihdrt_cor; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::all() const {
    cpp_int ret_val;

    // rxcrbfr_dhs
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__rxcrbfr_dhs; 
    
    // rxcrbfr_det
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__rxcrbfr_det; 
    
    // rxcrbfr_cor
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__rxcrbfr_cor; 
    
    // romask_dhs
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__romask_dhs; 
    
    // romask_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__romask_det; 
    
    // romask_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__romask_cor; 
    
    // aximst_dhs
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_dhs; 
    
    // aximst_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_det; 
    
    // aximst_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_cor; 
    
    // cplst_dhs
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cplst_dhs; 
    
    // cplst_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cplst_det; 
    
    // cplst_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cplst_cor; 
    
    // prt_dhs
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__prt_dhs; 
    
    // prt_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__prt_det; 
    
    // prt_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__prt_cor; 
    
    // pmr_dhs
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pmr_dhs; 
    
    // pmr_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pmr_det; 
    
    // pmr_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pmr_cor; 
    
    // rxinfo_dhs
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxinfo_dhs; 
    
    // rxinfo_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxinfo_det; 
    
    // rxinfo_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxinfo_cor; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_ecc_pcihdrt_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 11; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_ecc_portmap_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrhdr_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_ecc_rdhdr_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_ecc_cplbfr_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 13; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_0_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_1_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_2_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_3_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_4_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxinfo_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_ecc_cplst_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_ecc_pmr_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_ecc_prt_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 12; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_ecc_romask_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sat_tgt_rx_drop_t::all() const {
    cpp_int ret_val;

    // port7
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port7; 
    
    // port6
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port6; 
    
    // port5
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port5; 
    
    // port4
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port4; 
    
    // port3
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port3; 
    
    // port2
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port2; 
    
    // port1
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port1; 
    
    // port0
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port0; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::all() const {
    cpp_int ret_val;

    // resource_dwsize
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__resource_dwsize; 
    
    // f_shift
    ret_val = ret_val << 5; ret_val = ret_val  | int_var__f_shift; 
    
    // d_shift
    ret_val = ret_val << 5; ret_val = ret_val  | int_var__d_shift; 
    
    // b_shift
    ret_val = ret_val << 5; ret_val = ret_val  | int_var__b_shift; 
    
    // p_shift
    ret_val = ret_val << 5; ret_val = ret_val  | int_var__p_shift; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_axi_pending_t::all() const {
    cpp_int ret_val;

    // ids_p7
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__ids_p7; 
    
    // ids_p6
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__ids_p6; 
    
    // ids_p5
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__ids_p5; 
    
    // ids_p4
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__ids_p4; 
    
    // ids_p3
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__ids_p3; 
    
    // ids_p2
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__ids_p2; 
    
    // ids_p1
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__ids_p1; 
    
    // ids_p0
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__ids_p0; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_ind_info_t::all() const {
    cpp_int ret_val;

    // ramaddr
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ramaddr; 
    
    // pending
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pending; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_itr_tot_axi_wr_t::all() const {
    cpp_int ret_val;

    // req
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__req; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_itr_axi_wr64_t::all() const {
    cpp_int ret_val;

    // req
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__req; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_itr_axi_wr256_t::all() const {
    cpp_int ret_val;

    // req
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__req; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_tot_axi_wr_t::all() const {
    cpp_int ret_val;

    // num_bytes
    ret_val = ret_val << 50; ret_val = ret_val  | int_var__num_bytes; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_tot_axi_rd_t::all() const {
    cpp_int ret_val;

    // num_bytes
    ret_val = ret_val << 50; ret_val = ret_val  | int_var__num_bytes; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_itr_tot_axi_rd_t::all() const {
    cpp_int ret_val;

    // req
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__req; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_itr_axi_rd64_t::all() const {
    cpp_int ret_val;

    // req
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__req; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_itr_axi_rd256_t::all() const {
    cpp_int ret_val;

    // req
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__req; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_tgt_tot_axi_wr_t::all() const {
    cpp_int ret_val;

    // req
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__req; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_tgt_axi_wr64_t::all() const {
    cpp_int ret_val;

    // req
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__req; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_tgt_db64_axi_wr_t::all() const {
    cpp_int ret_val;

    // req
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__req; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_tgt_db32_axi_wr_t::all() const {
    cpp_int ret_val;

    // req
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__req; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_tgt_rsp_ca_ur_t::all() const {
    cpp_int ret_val;

    // cnt
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__cnt; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_tgt_tot_axi_rd_t::all() const {
    cpp_int ret_val;

    // req
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__req; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_tgt_axi_rd64_t::all() const {
    cpp_int ret_val;

    // req
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__req; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_tot_axi_wr_t::all() const {
    cpp_int ret_val;

    // num_bytes
    ret_val = ret_val << 50; ret_val = ret_val  | int_var__num_bytes; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_tot_axi_rd_t::all() const {
    cpp_int ret_val;

    // num_bytes
    ret_val = ret_val << 50; ret_val = ret_val  | int_var__num_bytes; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_axi_wr_num_ids_t::all() const {
    cpp_int ret_val;

    // pending
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__pending; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_axi_rd_num_ids_t::all() const {
    cpp_int ret_val;

    // pending
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__pending; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_itr_tot_msg_t::all() const {
    cpp_int ret_val;

    // sent
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__sent; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_itr_intx_assert_msg_t::all() const {
    cpp_int ret_val;

    // sent
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__sent; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_itr_tot_atomic_req_t::all() const {
    cpp_int ret_val;

    // sent
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__sent; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_marker_rx_t::all() const {
    cpp_int ret_val;

    // port7
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__port7; 
    
    // port6
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__port6; 
    
    // port5
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__port5; 
    
    // port4
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__port4; 
    
    // port3
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__port3; 
    
    // port2
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__port2; 
    
    // port1
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__port1; 
    
    // port0
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__port0; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::all() const {
    cpp_int ret_val;

    // s7_ax_state7
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__s7_ax_state7; 
    
    // s7_ax_state6
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__s7_ax_state6; 
    
    // s7_ax_state5
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__s7_ax_state5; 
    
    // s7_ax_state4
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__s7_ax_state4; 
    
    // s7_ax_state3
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__s7_ax_state3; 
    
    // s7_ax_state2
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__s7_ax_state2; 
    
    // s7_ax_state1
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__s7_ax_state1; 
    
    // s7_ax_state0
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__s7_ax_state0; 
    
    // tgt_rsp_tx_rdy
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tgt_rsp_tx_rdy; 
    
    // m_axi_bready
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__m_axi_bready; 
    
    // m_axi_bvalid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__m_axi_bvalid; 
    
    // m_axi_rready
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__m_axi_rready; 
    
    // m_axi_rvalid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__m_axi_rvalid; 
    
    // m_axi_wready
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__m_axi_wready; 
    
    // m_axi_arready
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__m_axi_arready; 
    
    // m_axi_awready
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__m_axi_awready; 
    
    // m_axi_wvalid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__m_axi_wvalid; 
    
    // m_axi_arvalid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__m_axi_arvalid; 
    
    // m_axi_awvalid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__m_axi_awvalid; 
    
    // hw_rsp_rdy
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__hw_rsp_rdy; 
    
    // rxcfg0_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxcfg0_vld; 
    
    // tgt_cnxt_xn_pnd
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__tgt_cnxt_xn_pnd; 
    
    // notify_full
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__notify_full; 
    
    // axi_fifo_notempty
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__axi_fifo_notempty; 
    
    // axi_fifo_rdy
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__axi_fifo_rdy; 
    
    // tgt_req_vld
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__tgt_req_vld; 
    
    // stg9_rdy
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg9_rdy; 
    
    // stg8_rdy
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg8_rdy; 
    
    // stg7_rdy
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg7_rdy; 
    
    // stg6_rdy
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg6_rdy; 
    
    // stg5_rdy
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg5_rdy; 
    
    // stg4_rdy
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg4_rdy; 
    
    // stg3_rdy
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg3_rdy; 
    
    // stg2_rdy
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg2_rdy; 
    
    // stg1_rdy
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg1_rdy; 
    
    // stg0_rdy
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg0_rdy; 
    
    // stg9_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg9_vld; 
    
    // stg8_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg8_vld; 
    
    // stg7_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg7_vld; 
    
    // stg6_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg6_vld; 
    
    // stg5_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg5_vld; 
    
    // stg4_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg4_vld; 
    
    // stg3_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg3_vld; 
    
    // stg2_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg2_vld; 
    
    // stg1_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg1_vld; 
    
    // stg0_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg0_vld; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::all() const {
    cpp_int ret_val;

    // rready
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rready; 
    
    // rvalid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rvalid; 
    
    // arready
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__arready; 
    
    // arvalid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__arvalid; 
    
    // wready
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wready; 
    
    // wvalid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wvalid; 
    
    // awready
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__awready; 
    
    // awvalid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__awvalid; 
    
    // bready
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bready; 
    
    // bvalid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bvalid; 
    
    // cpl_tx_rdy
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_tx_rdy; 
    
    // cpl_tx_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_tx_vld; 
    
    // raw_cmd_pnd
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__raw_cmd_pnd; 
    
    // req_eop_pnd
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__req_eop_pnd; 
    
    // cpl_eop_pnd
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_eop_pnd; 
    
    // s5_is_msg
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__s5_is_msg; 
    
    // s5_is_wr
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__s5_is_wr; 
    
    // tx_wrcnt_raw_stall
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tx_wrcnt_raw_stall; 
    
    // tx_wrcnt_cpl_stall
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tx_wrcnt_cpl_stall; 
    
    // tx_wrcnt_req_stall
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tx_wrcnt_req_stall; 
    
    // s5_seg_state
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__s5_seg_state; 
    
    // s5_req_fifo_depth
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__s5_req_fifo_depth; 
    
    // itr_cnxt_free_avl1
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__itr_cnxt_free_avl1; 
    
    // itr_cnxt_free_avl0
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__itr_cnxt_free_avl0; 
    
    // s0_tag_avl_vec
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__s0_tag_avl_vec; 
    
    // s0_port_space_avl_vec
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__s0_port_space_avl_vec; 
    
    // s0_rdy
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__s0_rdy; 
    
    // stg5_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg5_vld; 
    
    // stg4_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg4_vld; 
    
    // stg3_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg3_vld; 
    
    // stg2_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg2_vld; 
    
    // stg1_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg1_vld; 
    
    // stg0_vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stg0_vld; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__depth; 
    
    // raddr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__raddr; 
    
    // waddr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__waddr; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__depth; 
    
    // raddr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__raddr; 
    
    // waddr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__waddr; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__depth; 
    
    // raddr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__raddr; 
    
    // waddr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__waddr; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__depth; 
    
    // raddr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__raddr; 
    
    // waddr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__waddr; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__depth; 
    
    // raddr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__raddr; 
    
    // waddr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__waddr; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__depth; 
    
    // raddr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__raddr; 
    
    // waddr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__waddr; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__depth; 
    
    // raddr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__raddr; 
    
    // waddr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__waddr; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__depth; 
    
    // raddr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__raddr; 
    
    // waddr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__waddr; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_itr_raw_tlp_t::all() const {
    cpp_int ret_val;

    // dw11
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__dw11; 
    
    // dw10
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__dw10; 
    
    // dw9
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__dw9; 
    
    // dw8
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__dw8; 
    
    // dw7
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__dw7; 
    
    // dw6
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__dw6; 
    
    // dw5
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__dw5; 
    
    // dw4
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__dw4; 
    
    // dw3
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__dw3; 
    
    // dw2
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__dw2; 
    
    // dw1
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__dw1; 
    
    // dw0
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__dw0; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::all() const {
    cpp_int ret_val;

    // cmd_go
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cmd_go; 
    
    // port_id
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__port_id; 
    
    // dw_cnt
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__dw_cnt; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_raw_tlp_data_t::all() const {
    cpp_int ret_val;

    // resp7
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__resp7; 
    
    // resp6
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__resp6; 
    
    // resp5
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__resp5; 
    
    // resp4
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__resp4; 
    
    // resp3
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__resp3; 
    
    // resp2
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__resp2; 
    
    // resp1
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__resp1; 
    
    // resp0
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__resp0; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_raw_tlp_t::all() const {
    cpp_int ret_val;

    // req_err
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__req_err; 
    
    // cpl_timeout_err
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_timeout_err; 
    
    // cpl_data_err
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_data_err; 
    
    // cpl_stat
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__cpl_stat; 
    
    // resp_rdy
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__resp_rdy; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_tags_pending_t::all() const {
    cpp_int ret_val;

    // port7
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port7; 
    
    // port6
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port6; 
    
    // port5
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port5; 
    
    // port4
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port4; 
    
    // port3
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port3; 
    
    // port2
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port2; 
    
    // port1
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port1; 
    
    // port0
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port0; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_portfifo_depth_t::all() const {
    cpp_int ret_val;

    // port7_rd
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port7_rd; 
    
    // port7_wr
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port7_wr; 
    
    // port6_rd
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port6_rd; 
    
    // port6_wr
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port6_wr; 
    
    // port5_rd
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port5_rd; 
    
    // port5_wr
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port5_wr; 
    
    // port4_rd
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port4_rd; 
    
    // port4_wr
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port4_wr; 
    
    // port3_rd
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port3_rd; 
    
    // port3_wr
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port3_wr; 
    
    // port2_rd
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port2_rd; 
    
    // port2_wr
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port2_wr; 
    
    // port1_rd
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port1_rd; 
    
    // port1_wr
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port1_wr; 
    
    // port0_rd
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port0_rd; 
    
    // port0_wr
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__port0_wr; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_atomic_seq_cnt_t::all() const {
    cpp_int ret_val;

    // err_mask
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__err_mask; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_itr_cnxt_pending_t::all() const {
    cpp_int ret_val;

    // num
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__num; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_itr_atomic_seq_cnt_t::all() const {
    cpp_int ret_val;

    // rst_mask
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__rst_mask; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_itr_axi_resp_order_t::all() const {
    cpp_int ret_val;

    // rd_id_limit
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__rd_id_limit; 
    
    // wr_strict
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wr_strict; 
    
    // rd_strict
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rd_strict; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sat_tgt_ind_reason_t::all() const {
    cpp_int ret_val;

    // vfid_oor
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__vfid_oor; 
    
    // bdf_wcard_oor
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__bdf_wcard_oor; 
    
    // prt_oor
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__prt_oor; 
    
    // pmr_prt_miss
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__pmr_prt_miss; 
    
    // rc_vfid_miss
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__rc_vfid_miss; 
    
    // pmt_miss
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__pmt_miss; 
    
    // db_pmv
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__db_pmv; 
    
    // pmv
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__pmv; 
    
    // unsupp
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__unsupp; 
    
    // poisoned
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__poisoned; 
    
    // atomic
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__atomic; 
    
    // msg
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__msg; 
    
    // prt_force
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__prt_force; 
    
    // pmr_force
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__pmr_force; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sat_itr_req_err_t::all() const {
    cpp_int ret_val;

    // bus_master_dis
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__bus_master_dis; 
    
    // pcihdrt_miss
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__pcihdrt_miss; 
    
    // unsupp_rd
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__unsupp_rd; 
    
    // unsupp_wr
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__unsupp_wr; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sat_itr_xfer_unexpected_t::all() const {
    cpp_int ret_val;

    // rd_narrow
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__rd_narrow; 
    
    // wr_narrow
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__wr_narrow; 
    
    // rd256x
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__rd256x; 
    
    // wr256x
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__wr256x; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sat_itr_cpl_err_t::all() const {
    cpp_int ret_val;

    // unexpected
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__unexpected; 
    
    // cpl_stat
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__cpl_stat; 
    
    // rxbuf_ecc
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__rxbuf_ecc; 
    
    // ecrc
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__ecrc; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sat_itr_rsp_err_t::all() const {
    cpp_int ret_val;

    // cpl_timeout
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__cpl_timeout; 
    
    // axi
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__axi; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sat_itr_req_portgate_t::all() const {
    cpp_int ret_val;

    // closed
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__closed; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sat_tgt_rsp_err_t::all() const {
    cpp_int ret_val;

    // bresp_err
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__bresp_err; 
    
    // rresp_err
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__rresp_err; 
    
    // ind_cnxt_mismatch
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__ind_cnxt_mismatch; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tgt_axi_attr_t::all() const {
    cpp_int ret_val;

    // lock
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__lock; 
    
    // qos
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__qos; 
    
    // prot
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__prot; 
    
    // awcache
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__awcache; 
    
    // arcache
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__arcache; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_debug_port_t::all() const {
    cpp_int ret_val;

    // enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__enable; 
    
    // select
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__select; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_diag_spare0_t::all() const {
    cpp_int ret_val;

    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_diag_spare0_t::all() const {
    cpp_int ret_val;

    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_diag_spare1_t::all() const {
    cpp_int ret_val;

    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_diag_spare1_t::all() const {
    cpp_int ret_val;

    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_itr_rdlat_measure_t::all() const {
    cpp_int ret_val;

    // portid
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__portid; 
    
    // thres0
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__thres0; 
    
    // thres1
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__thres1; 
    
    // thres2
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__thres2; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sat_itr_rdlat0_t::all() const {
    cpp_int ret_val;

    // num_samples
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__num_samples; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sat_itr_rdlat1_t::all() const {
    cpp_int ret_val;

    // num_samples
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__num_samples; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sat_itr_rdlat2_t::all() const {
    cpp_int ret_val;

    // num_samples
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__num_samples; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sat_itr_rdlat3_t::all() const {
    cpp_int ret_val;

    // num_samples
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__num_samples; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_sram_bist_t::all() const {
    cpp_int ret_val;

    // run
    ret_val = ret_val << 38; ret_val = ret_val  | int_var__run; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_sram_bist_t::all() const {
    cpp_int ret_val;

    // done_fail
    ret_val = ret_val << 38; ret_val = ret_val  | int_var__done_fail; 
    
    // done_pass
    ret_val = ret_val << 38; ret_val = ret_val  | int_var__done_pass; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_tcam_bist_t::all() const {
    cpp_int ret_val;

    // run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__run; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_tcam_bist_t::all() const {
    cpp_int ret_val;

    // done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__done_fail; 
    
    // done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__done_pass; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_csr_intr_t::all() const {
    cpp_int ret_val;

    // dowstream_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dowstream_enable; 
    
    // dowstream
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dowstream; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_pxb_spare0_t::all() const {
    cpp_int ret_val;

    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_pxb_spare1_t::all() const {
    cpp_int ret_val;

    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_pxb_spare2_t::all() const {
    cpp_int ret_val;

    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_pxb_spare3_t::all() const {
    cpp_int ret_val;

    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_filter_t::all() const {
    cpp_int ret_val;

    // arcache_match
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__arcache_match; 
    
    // arcache_mask
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__arcache_mask; 
    
    // awcache_match
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__awcache_match; 
    
    // awcache_mask
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__awcache_mask; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_uid2sidLL_t::all() const {
    cpp_int ret_val;

    // base
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__base; 
    
    // mode
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__mode; 
    
    // spare
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__spare; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t::all() const {
    cpp_int ret_val;

    // msk
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__msk; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t::all() const {
    cpp_int ret_val;

    // msk
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__msk; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t::all() const {
    cpp_int ret_val;

    // msk
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__msk; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t::all() const {
    cpp_int ret_val;

    // msk
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__msk; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cfg_axi_bw_mon_t::all() const {
    cpp_int ret_val;

    // wcache_msk
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__wcache_msk; 
    
    // wcache
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__wcache; 
    
    // rcache_msk
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__rcache_msk; 
    
    // rcache
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__rcache; 
    
    // cycle
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__cycle; 
    
    // alpha
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__alpha; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::all() const {
    cpp_int ret_val;

    // avrg
    ret_val = ret_val << 14; ret_val = ret_val  | int_var__avrg; 
    
    // maxv
    ret_val = ret_val << 14; ret_val = ret_val  | int_var__maxv; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::all() const {
    cpp_int ret_val;

    // avrg
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__avrg; 
    
    // maxv
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__maxv; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::all() const {
    cpp_int ret_val;

    // dess_rdy
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__dess_rdy; 
    
    // outstanding
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__outstanding; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_axi_bw_mon_rd_t::all() const {
    cpp_int ret_val;

    // val
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__val; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::all() const {
    cpp_int ret_val;

    // avrg
    ret_val = ret_val << 14; ret_val = ret_val  | int_var__avrg; 
    
    // maxv
    ret_val = ret_val << 14; ret_val = ret_val  | int_var__maxv; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::all() const {
    cpp_int ret_val;

    // avrg
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__avrg; 
    
    // maxv
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__maxv; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::all() const {
    cpp_int ret_val;

    // dess_rdy
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__dess_rdy; 
    
    // outstanding
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__outstanding; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_cnt_axi_bw_mon_wr_t::all() const {
    cpp_int ret_val;

    // val
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__val; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_t::all() const {
    cpp_int ret_val;

    #if 2048 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 2048-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__ecc; 
    
    // rsvd1
    ret_val = ret_val << 13; ret_val = ret_val  | int_var__rsvd1; 
    
    // ln_rd
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ln_rd; 
    
    // ln_wr
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ln_wr; 
    
    // tc
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__tc; 
    
    // ats_at_rd
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__ats_at_rd; 
    
    // ats_at_wr
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__ats_at_wr; 
    
    // attr0_wr
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__attr0_wr; 
    
    // attr0_rd
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__attr0_rd; 
    
    // rc_cfg1
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rc_cfg1; 
    
    // attr2_1_wr
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__attr2_1_wr; 
    
    // attr2_1_rd
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__attr2_1_rd; 
    
    // pasid_privl
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pasid_privl; 
    
    // pasid_exe
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pasid_exe; 
    
    // pasid_value
    ret_val = ret_val << 20; ret_val = ret_val  | int_var__pasid_value; 
    
    // pasid_source
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__pasid_source; 
    
    // pasid_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pasid_en; 
    
    // td
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__td; 
    
    // bdf
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__bdf; 
    
    // valid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__valid; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_portmap_t::all() const {
    cpp_int ret_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 128-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_portmap_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // dest
    ret_val = ret_val << 48; ret_val = ret_val  | int_var__dest; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_pmt_t::all() const {
    cpp_int ret_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 1024-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_pmt_entry_t::all() const {
    cpp_int ret_val;

    // valid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__valid; 
    
    // y_data
    ret_val = ret_val << 64; ret_val = ret_val  | int_var__y_data; 
    
    // x_data
    ret_val = ret_val << 64; ret_val = ret_val  | int_var__x_data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_pmr_t::all() const {
    cpp_int ret_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 1024-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_pmr_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__ecc; 
    
    // entry_data
    ret_val = ret_val << 110; ret_val = ret_val  | int_var__entry_data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_prt_t::all() const {
    cpp_int ret_val;

    #if 4096 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 4096-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_prt_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__ecc; 
    
    // entry_data
    ret_val = ret_val << 76; ret_val = ret_val  | int_var__entry_data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_rxcrbfr0_t::all() const {
    cpp_int ret_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 1024-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 128; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_rxcrbfr1_t::all() const {
    cpp_int ret_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 1024-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 128; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_rxcrbfr2_t::all() const {
    cpp_int ret_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 1024-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 128; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_rxcrbfr3_t::all() const {
    cpp_int ret_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 1024-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 128; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_rxinfo_t::all() const {
    cpp_int ret_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 1024-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_rxinfo_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_cplst_t::all() const {
    cpp_int ret_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 128-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_cplst_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 100; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_romask_t::all() const {
    cpp_int ret_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 128-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_romask_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_aximst0_t::all() const {
    cpp_int ret_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 128-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_aximst0_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 128; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_aximst1_t::all() const {
    cpp_int ret_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 128-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_aximst1_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 128; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_aximst2_t::all() const {
    cpp_int ret_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 128-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_aximst2_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 128; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_aximst3_t::all() const {
    cpp_int ret_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 128-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_aximst3_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 128; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_aximst4_t::all() const {
    cpp_int ret_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 128-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_aximst4_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 128; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_wrbfr0_t::all() const {
    cpp_int ret_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 1024-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_wrbfr0_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 128; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_wrbfr1_t::all() const {
    cpp_int ret_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 1024-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_wrbfr1_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 128; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_wrbfr2_t::all() const {
    cpp_int ret_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 1024-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_wrbfr2_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 128; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_wrbfr3_t::all() const {
    cpp_int ret_val;

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 1024-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_wrbfr3_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 128; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_wrhdr_t::all() const {
    cpp_int ret_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 128-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_wrhdr_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 80; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_rdhdr_t::all() const {
    cpp_int ret_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 128-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_rdhdr_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 80; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_t::all() const {
    cpp_int ret_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 128-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::all() const {
    cpp_int ret_val;

    // is_narrow
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__is_narrow; 
    
    // atomic_state
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__atomic_state; 
    
    // is_nonposted_wr
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__is_nonposted_wr; 
    
    // is_raw
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__is_raw; 
    
    // seg_next
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__seg_next; 
    
    // seg_last
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__seg_last; 
    
    // seg_first
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__seg_first; 
    
    // linesize
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__linesize; 
    
    // lineaddr
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__lineaddr; 
    
    // terr
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__terr; 
    
    // derr
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__derr; 
    
    // aerr
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aerr; 
    
    // bdf
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__bdf; 
    
    // timer
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__timer; 
    
    // rsize
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__rsize; 
    
    // raddr
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__raddr; 
    
    // axi_id
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__axi_id; 
    
    // tag
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__tag; 
    
    // portid
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__portid; 
    
    // state
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__state; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_rdcontext_t::all() const {
    cpp_int ret_val;

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 128-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_rdcontext_entry_t::all() const {
    cpp_int ret_val;

    // is_posted_wr
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__is_posted_wr; 
    
    // is_nonposted_wr
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__is_nonposted_wr; 
    
    // portid
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__portid; 
    
    // state
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__state; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_rc_bdfmap_t::all() const {
    cpp_int ret_val;

    #if 64 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 64-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::all() const {
    cpp_int ret_val;

    // VFID
    ret_val = ret_val << 11; ret_val = ret_val  | int_var__VFID; 
    
    // port_id
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__port_id; 
    
    // rc_bdf
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__rc_bdf; 
    
    // valid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__valid; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr0_t::all() const {
    cpp_int ret_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 512-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr0_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr1_t::all() const {
    cpp_int ret_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 512-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr1_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr2_t::all() const {
    cpp_int ret_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 512-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr2_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr3_t::all() const {
    cpp_int ret_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 512-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr3_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr4_t::all() const {
    cpp_int ret_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 512-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr4_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr5_t::all() const {
    cpp_int ret_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 512-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr5_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr6_t::all() const {
    cpp_int ret_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 512-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr6_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr7_t::all() const {
    cpp_int ret_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 512-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr7_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr8_t::all() const {
    cpp_int ret_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 512-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr8_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr9_t::all() const {
    cpp_int ret_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 512-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr9_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr10_t::all() const {
    cpp_int ret_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 512-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr10_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr11_t::all() const {
    cpp_int ret_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 512-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr11_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr12_t::all() const {
    cpp_int ret_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 512-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr12_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr13_t::all() const {
    cpp_int ret_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 512-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr13_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr14_t::all() const {
    cpp_int ret_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 512-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr14_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr15_t::all() const {
    cpp_int ret_val;

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 512-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr15_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ecc; 
    
    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_notify_t::all() const {
    cpp_int ret_val;

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 8-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_notify_entry_t::all() const {
    cpp_int ret_val;

    // completed
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__completed; 
    
    // posted
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__posted; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_ind_rsp_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << entry.get_width(); ret_val = ret_val  | entry.all(); 
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::all() const {
    cpp_int ret_val;

    // fetch_rsp
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fetch_rsp; 
    
    // axi_id
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__axi_id; 
    
    // port_id
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__port_id; 
    
    // cpl_stat
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__cpl_stat; 
    
    // data3
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data3; 
    
    // data2
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data2; 
    
    // data1
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data1; 
    
    // data0
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data0; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_pmt_ind_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << entry.get_width(); ret_val = ret_val  | entry.all(); 
    return ret_val;
}

cpp_int cap_pxb_csr_dhs_tgt_pmt_ind_entry_t::all() const {
    cpp_int ret_val;

    // cmd
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__cmd; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_filter_addr_lo_t::all() const {
    cpp_int ret_val;

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // data
    for(int ii = 8-1; ii >= 0; ii--) {
         ret_val = ret_val << data[ii].get_width(); ret_val = ret_val  | data[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_filter_addr_lo_data_t::all() const {
    cpp_int ret_val;

    // value
    ret_val = ret_val << 28; ret_val = ret_val  | int_var__value; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_filter_addr_hi_t::all() const {
    cpp_int ret_val;

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // data
    for(int ii = 8-1; ii >= 0; ii--) {
         ret_val = ret_val << data[ii].get_width(); ret_val = ret_val  | data[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_filter_addr_hi_data_t::all() const {
    cpp_int ret_val;

    // value
    ret_val = ret_val << 28; ret_val = ret_val  | int_var__value; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_filter_addr_ctl_t::all() const {
    cpp_int ret_val;

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // value
    for(int ii = 8-1; ii >= 0; ii--) {
         ret_val = ret_val << value[ii].get_width(); ret_val = ret_val  | value[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_filter_addr_ctl_value_t::all() const {
    cpp_int ret_val;

    // value
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__value; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_inval_cam_t::all() const {
    cpp_int ret_val;

    #if 64 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 64-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pxb_csr_sta_inval_cam_entry_t::all() const {
    cpp_int ret_val;

    // data
    ret_val = ret_val << 38; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_intgrp_status_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_rw_reg.get_width(); ret_val = ret_val  | int_rw_reg.all(); 
    ret_val = ret_val << int_enable_rw_reg.get_width(); ret_val = ret_val  | int_enable_rw_reg.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pxb_csr_intreg_status_t::all() const {
    cpp_int ret_val;

    // int_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_err_interrupt; 
    
    // int_itr_ecc_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_itr_ecc_interrupt; 
    
    // int_tgt_ecc_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_tgt_ecc_interrupt; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_int_groups_int_enable_rw_reg_t::all() const {
    cpp_int ret_val;

    // int_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_err_enable; 
    
    // int_itr_ecc_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_itr_ecc_enable; 
    
    // int_tgt_ecc_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_tgt_ecc_enable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_int_itr_ecc_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::all() const {
    cpp_int ret_val;

    // cplbfr_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cplbfr_correctable_interrupt; 
    
    // cplbfr_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cplbfr_uncorrectable_interrupt; 
    
    // wrbfr_3_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_3_correctable_interrupt; 
    
    // wrbfr_3_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_3_uncorrectable_interrupt; 
    
    // wrbfr_2_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_2_correctable_interrupt; 
    
    // wrbfr_2_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_2_uncorrectable_interrupt; 
    
    // wrbfr_1_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_1_correctable_interrupt; 
    
    // wrbfr_1_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_1_uncorrectable_interrupt; 
    
    // wrbfr_0_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_0_correctable_interrupt; 
    
    // wrbfr_0_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_0_uncorrectable_interrupt; 
    
    // rdhdr_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rdhdr_correctable_interrupt; 
    
    // rdhdr_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rdhdr_uncorrectable_interrupt; 
    
    // wrhdr_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrhdr_correctable_interrupt; 
    
    // wrhdr_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrhdr_uncorrectable_interrupt; 
    
    // portmap_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__portmap_correctable_interrupt; 
    
    // portmap_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__portmap_uncorrectable_interrupt; 
    
    // pcihdrt_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pcihdrt_correctable_interrupt; 
    
    // pcihdrt_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pcihdrt_uncorrectable_interrupt; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // cplbfr_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cplbfr_correctable_enable; 
    
    // cplbfr_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cplbfr_uncorrectable_enable; 
    
    // wrbfr_3_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_3_correctable_enable; 
    
    // wrbfr_3_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_3_uncorrectable_enable; 
    
    // wrbfr_2_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_2_correctable_enable; 
    
    // wrbfr_2_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_2_uncorrectable_enable; 
    
    // wrbfr_1_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_1_correctable_enable; 
    
    // wrbfr_1_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_1_uncorrectable_enable; 
    
    // wrbfr_0_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_0_correctable_enable; 
    
    // wrbfr_0_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrbfr_0_uncorrectable_enable; 
    
    // rdhdr_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rdhdr_correctable_enable; 
    
    // rdhdr_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rdhdr_uncorrectable_enable; 
    
    // wrhdr_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrhdr_correctable_enable; 
    
    // wrhdr_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__wrhdr_uncorrectable_enable; 
    
    // portmap_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__portmap_correctable_enable; 
    
    // portmap_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__portmap_uncorrectable_enable; 
    
    // pcihdrt_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pcihdrt_correctable_enable; 
    
    // pcihdrt_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pcihdrt_uncorrectable_enable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_int_tgt_ecc_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::all() const {
    cpp_int ret_val;

    // prt_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__prt_correctable_interrupt; 
    
    // prt_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__prt_uncorrectable_interrupt; 
    
    // pmr_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pmr_correctable_interrupt; 
    
    // pmr_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pmr_uncorrectable_interrupt; 
    
    // romask_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__romask_correctable_interrupt; 
    
    // romask_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__romask_uncorrectable_interrupt; 
    
    // cplst_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cplst_correctable_interrupt; 
    
    // cplst_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cplst_uncorrectable_interrupt; 
    
    // rxinfo_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxinfo_correctable_interrupt; 
    
    // rxinfo_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxinfo_uncorrectable_interrupt; 
    
    // rxcrbfr_3_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxcrbfr_3_correctable_interrupt; 
    
    // rxcrbfr_3_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxcrbfr_3_uncorrectable_interrupt; 
    
    // rxcrbfr_2_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxcrbfr_2_correctable_interrupt; 
    
    // rxcrbfr_2_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxcrbfr_2_uncorrectable_interrupt; 
    
    // rxcrbfr_1_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxcrbfr_1_correctable_interrupt; 
    
    // rxcrbfr_1_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxcrbfr_1_uncorrectable_interrupt; 
    
    // rxcrbfr_0_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxcrbfr_0_correctable_interrupt; 
    
    // rxcrbfr_0_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxcrbfr_0_uncorrectable_interrupt; 
    
    // aximst_4_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_4_correctable_interrupt; 
    
    // aximst_4_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_4_uncorrectable_interrupt; 
    
    // aximst_3_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_3_correctable_interrupt; 
    
    // aximst_3_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_3_uncorrectable_interrupt; 
    
    // aximst_2_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_2_correctable_interrupt; 
    
    // aximst_2_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_2_uncorrectable_interrupt; 
    
    // aximst_1_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_1_correctable_interrupt; 
    
    // aximst_1_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_1_uncorrectable_interrupt; 
    
    // aximst_0_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_0_correctable_interrupt; 
    
    // aximst_0_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_0_uncorrectable_interrupt; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // prt_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__prt_correctable_enable; 
    
    // prt_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__prt_uncorrectable_enable; 
    
    // pmr_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pmr_correctable_enable; 
    
    // pmr_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pmr_uncorrectable_enable; 
    
    // romask_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__romask_correctable_enable; 
    
    // romask_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__romask_uncorrectable_enable; 
    
    // cplst_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cplst_correctable_enable; 
    
    // cplst_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cplst_uncorrectable_enable; 
    
    // rxinfo_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxinfo_correctable_enable; 
    
    // rxinfo_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxinfo_uncorrectable_enable; 
    
    // rxcrbfr_3_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxcrbfr_3_correctable_enable; 
    
    // rxcrbfr_3_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxcrbfr_3_uncorrectable_enable; 
    
    // rxcrbfr_2_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxcrbfr_2_correctable_enable; 
    
    // rxcrbfr_2_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxcrbfr_2_uncorrectable_enable; 
    
    // rxcrbfr_1_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxcrbfr_1_correctable_enable; 
    
    // rxcrbfr_1_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxcrbfr_1_uncorrectable_enable; 
    
    // rxcrbfr_0_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxcrbfr_0_correctable_enable; 
    
    // rxcrbfr_0_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rxcrbfr_0_uncorrectable_enable; 
    
    // aximst_4_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_4_correctable_enable; 
    
    // aximst_4_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_4_uncorrectable_enable; 
    
    // aximst_3_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_3_correctable_enable; 
    
    // aximst_3_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_3_uncorrectable_enable; 
    
    // aximst_2_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_2_correctable_enable; 
    
    // aximst_2_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_2_uncorrectable_enable; 
    
    // aximst_1_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_1_correctable_enable; 
    
    // aximst_1_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_1_uncorrectable_enable; 
    
    // aximst_0_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_0_correctable_enable; 
    
    // aximst_0_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__aximst_0_uncorrectable_enable; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_int_err_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::all() const {
    cpp_int ret_val;

    // tgt_ind_notify_axi_resperr_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tgt_ind_notify_axi_resperr_interrupt; 
    
    // tgt_rmw_axi_resperr_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tgt_rmw_axi_resperr_interrupt; 
    
    // itr_atomic_resource_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__itr_atomic_resource_err_interrupt; 
    
    // itr_atomic_seq_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__itr_atomic_seq_err_interrupt; 
    
    // itr_bus_master_dis_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__itr_bus_master_dis_interrupt; 
    
    // itr_req_msg_align_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__itr_req_msg_align_err_interrupt; 
    
    // itr_req_axi_unsupp_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__itr_req_axi_unsupp_interrupt; 
    
    // itr_req_bdfmiss_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__itr_req_bdfmiss_interrupt; 
    
    // tgt_req_4k_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tgt_req_4k_err_interrupt; 
    
    // tgt_axi_rsp_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tgt_axi_rsp_err_interrupt; 
    
    // tgt_axi_rsp_unexp_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tgt_axi_rsp_unexp_interrupt; 
    
    // tgt_ind_rsp_unexp_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tgt_ind_rsp_unexp_interrupt; 
    
    // cpl_lowaddr_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_lowaddr_interrupt; 
    
    // cpl_poison_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_poison_interrupt; 
    
    // cpl_len_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_len_interrupt; 
    
    // cpl_timeout_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_timeout_interrupt; 
    
    // cpl_unexp_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_unexp_interrupt; 
    
    // cpl_stat_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_stat_interrupt; 
    
    // cpl_rxbuf_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_rxbuf_err_interrupt; 
    
    // cpl_ecrc_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_ecrc_interrupt; 
    
    return ret_val;
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // tgt_ind_notify_axi_resperr_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tgt_ind_notify_axi_resperr_enable; 
    
    // tgt_rmw_axi_resperr_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tgt_rmw_axi_resperr_enable; 
    
    // itr_atomic_resource_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__itr_atomic_resource_err_enable; 
    
    // itr_atomic_seq_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__itr_atomic_seq_err_enable; 
    
    // itr_bus_master_dis_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__itr_bus_master_dis_enable; 
    
    // itr_req_msg_align_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__itr_req_msg_align_err_enable; 
    
    // itr_req_axi_unsupp_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__itr_req_axi_unsupp_enable; 
    
    // itr_req_bdfmiss_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__itr_req_bdfmiss_enable; 
    
    // tgt_req_4k_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tgt_req_4k_err_enable; 
    
    // tgt_axi_rsp_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tgt_axi_rsp_err_enable; 
    
    // tgt_axi_rsp_unexp_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tgt_axi_rsp_unexp_enable; 
    
    // tgt_ind_rsp_unexp_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tgt_ind_rsp_unexp_enable; 
    
    // cpl_lowaddr_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_lowaddr_enable; 
    
    // cpl_poison_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_poison_enable; 
    
    // cpl_len_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_len_enable; 
    
    // cpl_timeout_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_timeout_enable; 
    
    // cpl_unexp_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_unexp_enable; 
    
    // cpl_stat_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_stat_enable; 
    
    // cpl_rxbuf_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_rxbuf_err_enable; 
    
    // cpl_ecrc_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cpl_ecrc_enable; 
    
    return ret_val;
}

void cap_pxb_csr_int_err_int_enable_clear_t::clear() {

    int_var__cpl_ecrc_enable = 0; 
    
    int_var__cpl_rxbuf_err_enable = 0; 
    
    int_var__cpl_stat_enable = 0; 
    
    int_var__cpl_unexp_enable = 0; 
    
    int_var__cpl_timeout_enable = 0; 
    
    int_var__cpl_len_enable = 0; 
    
    int_var__cpl_poison_enable = 0; 
    
    int_var__cpl_lowaddr_enable = 0; 
    
    int_var__tgt_ind_rsp_unexp_enable = 0; 
    
    int_var__tgt_axi_rsp_unexp_enable = 0; 
    
    int_var__tgt_axi_rsp_err_enable = 0; 
    
    int_var__tgt_req_4k_err_enable = 0; 
    
    int_var__itr_req_bdfmiss_enable = 0; 
    
    int_var__itr_req_axi_unsupp_enable = 0; 
    
    int_var__itr_req_msg_align_err_enable = 0; 
    
    int_var__itr_bus_master_dis_enable = 0; 
    
    int_var__itr_atomic_seq_err_enable = 0; 
    
    int_var__itr_atomic_resource_err_enable = 0; 
    
    int_var__tgt_rmw_axi_resperr_enable = 0; 
    
    int_var__tgt_ind_notify_axi_resperr_enable = 0; 
    
}

void cap_pxb_csr_int_err_int_test_set_t::clear() {

    int_var__cpl_ecrc_interrupt = 0; 
    
    int_var__cpl_rxbuf_err_interrupt = 0; 
    
    int_var__cpl_stat_interrupt = 0; 
    
    int_var__cpl_unexp_interrupt = 0; 
    
    int_var__cpl_timeout_interrupt = 0; 
    
    int_var__cpl_len_interrupt = 0; 
    
    int_var__cpl_poison_interrupt = 0; 
    
    int_var__cpl_lowaddr_interrupt = 0; 
    
    int_var__tgt_ind_rsp_unexp_interrupt = 0; 
    
    int_var__tgt_axi_rsp_unexp_interrupt = 0; 
    
    int_var__tgt_axi_rsp_err_interrupt = 0; 
    
    int_var__tgt_req_4k_err_interrupt = 0; 
    
    int_var__itr_req_bdfmiss_interrupt = 0; 
    
    int_var__itr_req_axi_unsupp_interrupt = 0; 
    
    int_var__itr_req_msg_align_err_interrupt = 0; 
    
    int_var__itr_bus_master_dis_interrupt = 0; 
    
    int_var__itr_atomic_seq_err_interrupt = 0; 
    
    int_var__itr_atomic_resource_err_interrupt = 0; 
    
    int_var__tgt_rmw_axi_resperr_interrupt = 0; 
    
    int_var__tgt_ind_notify_axi_resperr_interrupt = 0; 
    
}

void cap_pxb_csr_int_err_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::clear() {

    int_var__aximst_0_uncorrectable_enable = 0; 
    
    int_var__aximst_0_correctable_enable = 0; 
    
    int_var__aximst_1_uncorrectable_enable = 0; 
    
    int_var__aximst_1_correctable_enable = 0; 
    
    int_var__aximst_2_uncorrectable_enable = 0; 
    
    int_var__aximst_2_correctable_enable = 0; 
    
    int_var__aximst_3_uncorrectable_enable = 0; 
    
    int_var__aximst_3_correctable_enable = 0; 
    
    int_var__aximst_4_uncorrectable_enable = 0; 
    
    int_var__aximst_4_correctable_enable = 0; 
    
    int_var__rxcrbfr_0_uncorrectable_enable = 0; 
    
    int_var__rxcrbfr_0_correctable_enable = 0; 
    
    int_var__rxcrbfr_1_uncorrectable_enable = 0; 
    
    int_var__rxcrbfr_1_correctable_enable = 0; 
    
    int_var__rxcrbfr_2_uncorrectable_enable = 0; 
    
    int_var__rxcrbfr_2_correctable_enable = 0; 
    
    int_var__rxcrbfr_3_uncorrectable_enable = 0; 
    
    int_var__rxcrbfr_3_correctable_enable = 0; 
    
    int_var__rxinfo_uncorrectable_enable = 0; 
    
    int_var__rxinfo_correctable_enable = 0; 
    
    int_var__cplst_uncorrectable_enable = 0; 
    
    int_var__cplst_correctable_enable = 0; 
    
    int_var__romask_uncorrectable_enable = 0; 
    
    int_var__romask_correctable_enable = 0; 
    
    int_var__pmr_uncorrectable_enable = 0; 
    
    int_var__pmr_correctable_enable = 0; 
    
    int_var__prt_uncorrectable_enable = 0; 
    
    int_var__prt_correctable_enable = 0; 
    
}

void cap_pxb_csr_int_tgt_ecc_int_test_set_t::clear() {

    int_var__aximst_0_uncorrectable_interrupt = 0; 
    
    int_var__aximst_0_correctable_interrupt = 0; 
    
    int_var__aximst_1_uncorrectable_interrupt = 0; 
    
    int_var__aximst_1_correctable_interrupt = 0; 
    
    int_var__aximst_2_uncorrectable_interrupt = 0; 
    
    int_var__aximst_2_correctable_interrupt = 0; 
    
    int_var__aximst_3_uncorrectable_interrupt = 0; 
    
    int_var__aximst_3_correctable_interrupt = 0; 
    
    int_var__aximst_4_uncorrectable_interrupt = 0; 
    
    int_var__aximst_4_correctable_interrupt = 0; 
    
    int_var__rxcrbfr_0_uncorrectable_interrupt = 0; 
    
    int_var__rxcrbfr_0_correctable_interrupt = 0; 
    
    int_var__rxcrbfr_1_uncorrectable_interrupt = 0; 
    
    int_var__rxcrbfr_1_correctable_interrupt = 0; 
    
    int_var__rxcrbfr_2_uncorrectable_interrupt = 0; 
    
    int_var__rxcrbfr_2_correctable_interrupt = 0; 
    
    int_var__rxcrbfr_3_uncorrectable_interrupt = 0; 
    
    int_var__rxcrbfr_3_correctable_interrupt = 0; 
    
    int_var__rxinfo_uncorrectable_interrupt = 0; 
    
    int_var__rxinfo_correctable_interrupt = 0; 
    
    int_var__cplst_uncorrectable_interrupt = 0; 
    
    int_var__cplst_correctable_interrupt = 0; 
    
    int_var__romask_uncorrectable_interrupt = 0; 
    
    int_var__romask_correctable_interrupt = 0; 
    
    int_var__pmr_uncorrectable_interrupt = 0; 
    
    int_var__pmr_correctable_interrupt = 0; 
    
    int_var__prt_uncorrectable_interrupt = 0; 
    
    int_var__prt_correctable_interrupt = 0; 
    
}

void cap_pxb_csr_int_tgt_ecc_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::clear() {

    int_var__pcihdrt_uncorrectable_enable = 0; 
    
    int_var__pcihdrt_correctable_enable = 0; 
    
    int_var__portmap_uncorrectable_enable = 0; 
    
    int_var__portmap_correctable_enable = 0; 
    
    int_var__wrhdr_uncorrectable_enable = 0; 
    
    int_var__wrhdr_correctable_enable = 0; 
    
    int_var__rdhdr_uncorrectable_enable = 0; 
    
    int_var__rdhdr_correctable_enable = 0; 
    
    int_var__wrbfr_0_uncorrectable_enable = 0; 
    
    int_var__wrbfr_0_correctable_enable = 0; 
    
    int_var__wrbfr_1_uncorrectable_enable = 0; 
    
    int_var__wrbfr_1_correctable_enable = 0; 
    
    int_var__wrbfr_2_uncorrectable_enable = 0; 
    
    int_var__wrbfr_2_correctable_enable = 0; 
    
    int_var__wrbfr_3_uncorrectable_enable = 0; 
    
    int_var__wrbfr_3_correctable_enable = 0; 
    
    int_var__cplbfr_uncorrectable_enable = 0; 
    
    int_var__cplbfr_correctable_enable = 0; 
    
}

void cap_pxb_csr_int_itr_ecc_intreg_t::clear() {

    int_var__pcihdrt_uncorrectable_interrupt = 0; 
    
    int_var__pcihdrt_correctable_interrupt = 0; 
    
    int_var__portmap_uncorrectable_interrupt = 0; 
    
    int_var__portmap_correctable_interrupt = 0; 
    
    int_var__wrhdr_uncorrectable_interrupt = 0; 
    
    int_var__wrhdr_correctable_interrupt = 0; 
    
    int_var__rdhdr_uncorrectable_interrupt = 0; 
    
    int_var__rdhdr_correctable_interrupt = 0; 
    
    int_var__wrbfr_0_uncorrectable_interrupt = 0; 
    
    int_var__wrbfr_0_correctable_interrupt = 0; 
    
    int_var__wrbfr_1_uncorrectable_interrupt = 0; 
    
    int_var__wrbfr_1_correctable_interrupt = 0; 
    
    int_var__wrbfr_2_uncorrectable_interrupt = 0; 
    
    int_var__wrbfr_2_correctable_interrupt = 0; 
    
    int_var__wrbfr_3_uncorrectable_interrupt = 0; 
    
    int_var__wrbfr_3_correctable_interrupt = 0; 
    
    int_var__cplbfr_uncorrectable_interrupt = 0; 
    
    int_var__cplbfr_correctable_interrupt = 0; 
    
}

void cap_pxb_csr_int_itr_ecc_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_pxb_csr_intreg_status_t::clear() {

    int_var__int_tgt_ecc_interrupt = 0; 
    
    int_var__int_itr_ecc_interrupt = 0; 
    
    int_var__int_err_interrupt = 0; 
    
}

void cap_pxb_csr_int_groups_int_enable_rw_reg_t::clear() {

    int_var__int_tgt_ecc_enable = 0; 
    
    int_var__int_itr_ecc_enable = 0; 
    
    int_var__int_err_enable = 0; 
    
}

void cap_pxb_csr_intgrp_status_t::clear() {

    intreg.clear();
    int_enable_rw_reg.clear();
    int_rw_reg.clear();
}

void cap_pxb_csr_sta_inval_cam_entry_t::clear() {

    int_var__data = 0; 
    
}

void cap_pxb_csr_sta_inval_cam_t::clear() {

    #if 64 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 64; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_filter_addr_ctl_value_t::clear() {

    int_var__value = 0; 
    
}

void cap_pxb_csr_filter_addr_ctl_t::clear() {

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // value
    for(int ii = 0; ii < 8; ii++) {
        value[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_filter_addr_hi_data_t::clear() {

    int_var__value = 0; 
    
}

void cap_pxb_csr_filter_addr_hi_t::clear() {

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // data
    for(int ii = 0; ii < 8; ii++) {
        data[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_filter_addr_lo_data_t::clear() {

    int_var__value = 0; 
    
}

void cap_pxb_csr_filter_addr_lo_t::clear() {

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // data
    for(int ii = 0; ii < 8; ii++) {
        data[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_pmt_ind_entry_t::clear() {

    int_var__cmd = 0; 
    
}

void cap_pxb_csr_dhs_tgt_pmt_ind_t::clear() {

    entry.clear();
}

void cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::clear() {

    int_var__data0 = 0; 
    
    int_var__data1 = 0; 
    
    int_var__data2 = 0; 
    
    int_var__data3 = 0; 
    
    int_var__cpl_stat = 0; 
    
    int_var__port_id = 0; 
    
    int_var__axi_id = 0; 
    
    int_var__fetch_rsp = 0; 
    
}

void cap_pxb_csr_dhs_tgt_ind_rsp_t::clear() {

    entry.clear();
}

void cap_pxb_csr_dhs_tgt_notify_entry_t::clear() {

    int_var__posted = 0; 
    
    int_var__completed = 0; 
    
}

void cap_pxb_csr_dhs_tgt_notify_t::clear() {

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 8; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr15_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_cplbfr15_t::clear() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr14_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_cplbfr14_t::clear() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr13_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_cplbfr13_t::clear() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr12_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_cplbfr12_t::clear() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr11_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_cplbfr11_t::clear() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr10_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_cplbfr10_t::clear() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr9_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_cplbfr9_t::clear() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr8_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_cplbfr8_t::clear() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr7_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_cplbfr7_t::clear() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr6_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_cplbfr6_t::clear() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr5_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_cplbfr5_t::clear() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr4_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_cplbfr4_t::clear() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr3_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_cplbfr3_t::clear() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr2_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_cplbfr2_t::clear() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr1_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_cplbfr1_t::clear() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr0_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_cplbfr0_t::clear() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 512; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::clear() {

    int_var__valid = 0; 
    
    int_var__rc_bdf = 0; 
    
    int_var__port_id = 0; 
    
    int_var__VFID = 0; 
    
}

void cap_pxb_csr_dhs_tgt_rc_bdfmap_t::clear() {

    #if 64 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 64; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rdcontext_entry_t::clear() {

    int_var__state = 0; 
    
    int_var__portid = 0; 
    
    int_var__is_nonposted_wr = 0; 
    
    int_var__is_posted_wr = 0; 
    
}

void cap_pxb_csr_dhs_tgt_rdcontext_t::clear() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_rdcontext_entry_t::clear() {

    int_var__state = 0; 
    
    int_var__portid = 0; 
    
    int_var__tag = 0; 
    
    int_var__axi_id = 0; 
    
    int_var__raddr = 0; 
    
    int_var__rsize = 0; 
    
    int_var__timer = 0; 
    
    int_var__bdf = 0; 
    
    int_var__aerr = 0; 
    
    int_var__derr = 0; 
    
    int_var__terr = 0; 
    
    int_var__lineaddr = 0; 
    
    int_var__linesize = 0; 
    
    int_var__seg_first = 0; 
    
    int_var__seg_last = 0; 
    
    int_var__seg_next = 0; 
    
    int_var__is_raw = 0; 
    
    int_var__is_nonposted_wr = 0; 
    
    int_var__atomic_state = 0; 
    
    int_var__is_narrow = 0; 
    
}

void cap_pxb_csr_dhs_itr_rdcontext_t::clear() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_rdhdr_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_rdhdr_t::clear() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_wrhdr_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_wrhdr_t::clear() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_wrbfr3_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_wrbfr3_t::clear() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_wrbfr2_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_wrbfr2_t::clear() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_wrbfr1_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_wrbfr1_t::clear() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_wrbfr0_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_wrbfr0_t::clear() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_aximst4_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_tgt_aximst4_t::clear() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_aximst3_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_tgt_aximst3_t::clear() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_aximst2_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_tgt_aximst2_t::clear() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_aximst1_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_tgt_aximst1_t::clear() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_aximst0_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_tgt_aximst0_t::clear() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_romask_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_tgt_romask_t::clear() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_cplst_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_tgt_cplst_t::clear() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rxinfo_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_tgt_rxinfo_t::clear() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr3_t::clear() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr2_t::clear() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr1_t::clear() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr0_t::clear() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_prt_entry_t::clear() {

    int_var__entry_data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_tgt_prt_t::clear() {

    #if 4096 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 4096; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_pmr_entry_t::clear() {

    int_var__entry_data = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_tgt_pmr_t::clear() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_pmt_entry_t::clear() {

    int_var__x_data = 0; 
    
    int_var__y_data = 0; 
    
    int_var__valid = 0; 
    
}

void cap_pxb_csr_dhs_tgt_pmt_t::clear() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 1024; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_portmap_entry_t::clear() {

    int_var__dest = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_portmap_t::clear() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 128; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::clear() {

    int_var__valid = 0; 
    
    int_var__bdf = 0; 
    
    int_var__td = 0; 
    
    int_var__pasid_en = 0; 
    
    int_var__pasid_source = 0; 
    
    int_var__pasid_value = 0; 
    
    int_var__pasid_exe = 0; 
    
    int_var__pasid_privl = 0; 
    
    int_var__attr2_1_rd = 0; 
    
    int_var__attr2_1_wr = 0; 
    
    int_var__rc_cfg1 = 0; 
    
    int_var__attr0_rd = 0; 
    
    int_var__attr0_wr = 0; 
    
    int_var__ats_at_wr = 0; 
    
    int_var__ats_at_rd = 0; 
    
    int_var__tc = 0; 
    
    int_var__ln_wr = 0; 
    
    int_var__ln_rd = 0; 
    
    int_var__rsvd1 = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_pxb_csr_dhs_itr_pcihdrt_t::clear() {

    #if 2048 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 2048; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pxb_csr_cnt_axi_bw_mon_wr_t::clear() {

    int_var__val = 0; 
    
}

void cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::clear() {

    int_var__outstanding = 0; 
    
    int_var__dess_rdy = 0; 
    
}

void cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::clear() {

    int_var__maxv = 0; 
    
    int_var__avrg = 0; 
    
}

void cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::clear() {

    int_var__maxv = 0; 
    
    int_var__avrg = 0; 
    
}

void cap_pxb_csr_cnt_axi_bw_mon_rd_t::clear() {

    int_var__val = 0; 
    
}

void cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::clear() {

    int_var__outstanding = 0; 
    
    int_var__dess_rdy = 0; 
    
}

void cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::clear() {

    int_var__maxv = 0; 
    
    int_var__avrg = 0; 
    
}

void cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::clear() {

    int_var__maxv = 0; 
    
    int_var__avrg = 0; 
    
}

void cap_pxb_csr_cfg_axi_bw_mon_t::clear() {

    int_var__alpha = 0; 
    
    int_var__cycle = 0; 
    
    int_var__rcache = 0; 
    
    int_var__rcache_msk = 0; 
    
    int_var__wcache = 0; 
    
    int_var__wcache_msk = 0; 
    
}

void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t::clear() {

    int_var__msk = 0; 
    
}

void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t::clear() {

    int_var__msk = 0; 
    
}

void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t::clear() {

    int_var__msk = 0; 
    
}

void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t::clear() {

    int_var__msk = 0; 
    
}

void cap_pxb_csr_cfg_uid2sidLL_t::clear() {

    int_var__spare = 0; 
    
    int_var__mode = 0; 
    
    int_var__base = 0; 
    
}

void cap_pxb_csr_cfg_filter_t::clear() {

    int_var__awcache_mask = 0; 
    
    int_var__awcache_match = 0; 
    
    int_var__arcache_mask = 0; 
    
    int_var__arcache_match = 0; 
    
}

void cap_pxb_csr_cfg_pxb_spare3_t::clear() {

    int_var__data = 0; 
    
}

void cap_pxb_csr_cfg_pxb_spare2_t::clear() {

    int_var__data = 0; 
    
}

void cap_pxb_csr_cfg_pxb_spare1_t::clear() {

    int_var__data = 0; 
    
}

void cap_pxb_csr_cfg_pxb_spare0_t::clear() {

    int_var__data = 0; 
    
}

void cap_pxb_csr_csr_intr_t::clear() {

    int_var__dowstream = 0; 
    
    int_var__dowstream_enable = 0; 
    
}

void cap_pxb_csr_sta_tcam_bist_t::clear() {

    int_var__done_pass = 0; 
    
    int_var__done_fail = 0; 
    
}

void cap_pxb_csr_cfg_tcam_bist_t::clear() {

    int_var__run = 0; 
    
}

void cap_pxb_csr_sta_sram_bist_t::clear() {

    int_var__done_pass = 0; 
    
    int_var__done_fail = 0; 
    
}

void cap_pxb_csr_cfg_sram_bist_t::clear() {

    int_var__run = 0; 
    
}

void cap_pxb_csr_sat_itr_rdlat3_t::clear() {

    int_var__num_samples = 0; 
    
}

void cap_pxb_csr_sat_itr_rdlat2_t::clear() {

    int_var__num_samples = 0; 
    
}

void cap_pxb_csr_sat_itr_rdlat1_t::clear() {

    int_var__num_samples = 0; 
    
}

void cap_pxb_csr_sat_itr_rdlat0_t::clear() {

    int_var__num_samples = 0; 
    
}

void cap_pxb_csr_cfg_itr_rdlat_measure_t::clear() {

    int_var__thres2 = 0; 
    
    int_var__thres1 = 0; 
    
    int_var__thres0 = 0; 
    
    int_var__portid = 0; 
    
}

void cap_pxb_csr_sta_diag_spare1_t::clear() {

    int_var__data = 0; 
    
}

void cap_pxb_csr_cfg_diag_spare1_t::clear() {

    int_var__data = 0; 
    
}

void cap_pxb_csr_sta_diag_spare0_t::clear() {

    int_var__data = 0; 
    
}

void cap_pxb_csr_cfg_diag_spare0_t::clear() {

    int_var__data = 0; 
    
}

void cap_pxb_csr_cfg_debug_port_t::clear() {

    int_var__select = 0; 
    
    int_var__enable = 0; 
    
}

void cap_pxb_csr_cfg_tgt_axi_attr_t::clear() {

    int_var__arcache = 0; 
    
    int_var__awcache = 0; 
    
    int_var__prot = 0; 
    
    int_var__qos = 0; 
    
    int_var__lock = 0; 
    
}

void cap_pxb_csr_sat_tgt_rsp_err_t::clear() {

    int_var__ind_cnxt_mismatch = 0; 
    
    int_var__rresp_err = 0; 
    
    int_var__bresp_err = 0; 
    
}

void cap_pxb_csr_sat_itr_req_portgate_t::clear() {

    int_var__closed = 0; 
    
}

void cap_pxb_csr_sat_itr_rsp_err_t::clear() {

    int_var__axi = 0; 
    
    int_var__cpl_timeout = 0; 
    
}

void cap_pxb_csr_sat_itr_cpl_err_t::clear() {

    int_var__ecrc = 0; 
    
    int_var__rxbuf_ecc = 0; 
    
    int_var__cpl_stat = 0; 
    
    int_var__unexpected = 0; 
    
}

void cap_pxb_csr_sat_itr_xfer_unexpected_t::clear() {

    int_var__wr256x = 0; 
    
    int_var__rd256x = 0; 
    
    int_var__wr_narrow = 0; 
    
    int_var__rd_narrow = 0; 
    
}

void cap_pxb_csr_sat_itr_req_err_t::clear() {

    int_var__unsupp_wr = 0; 
    
    int_var__unsupp_rd = 0; 
    
    int_var__pcihdrt_miss = 0; 
    
    int_var__bus_master_dis = 0; 
    
}

void cap_pxb_csr_sat_tgt_ind_reason_t::clear() {

    int_var__pmr_force = 0; 
    
    int_var__prt_force = 0; 
    
    int_var__msg = 0; 
    
    int_var__atomic = 0; 
    
    int_var__poisoned = 0; 
    
    int_var__unsupp = 0; 
    
    int_var__pmv = 0; 
    
    int_var__db_pmv = 0; 
    
    int_var__pmt_miss = 0; 
    
    int_var__rc_vfid_miss = 0; 
    
    int_var__pmr_prt_miss = 0; 
    
    int_var__prt_oor = 0; 
    
    int_var__bdf_wcard_oor = 0; 
    
    int_var__vfid_oor = 0; 
    
}

void cap_pxb_csr_cfg_itr_axi_resp_order_t::clear() {

    int_var__rd_strict = 0; 
    
    int_var__wr_strict = 0; 
    
    int_var__rd_id_limit = 0; 
    
}

void cap_pxb_csr_cfg_itr_atomic_seq_cnt_t::clear() {

    int_var__rst_mask = 0; 
    
}

void cap_pxb_csr_sta_itr_cnxt_pending_t::clear() {

    int_var__num = 0; 
    
}

void cap_pxb_csr_sta_itr_atomic_seq_cnt_t::clear() {

    int_var__err_mask = 0; 
    
}

void cap_pxb_csr_sta_itr_portfifo_depth_t::clear() {

    int_var__port0_wr = 0; 
    
    int_var__port0_rd = 0; 
    
    int_var__port1_wr = 0; 
    
    int_var__port1_rd = 0; 
    
    int_var__port2_wr = 0; 
    
    int_var__port2_rd = 0; 
    
    int_var__port3_wr = 0; 
    
    int_var__port3_rd = 0; 
    
    int_var__port4_wr = 0; 
    
    int_var__port4_rd = 0; 
    
    int_var__port5_wr = 0; 
    
    int_var__port5_rd = 0; 
    
    int_var__port6_wr = 0; 
    
    int_var__port6_rd = 0; 
    
    int_var__port7_wr = 0; 
    
    int_var__port7_rd = 0; 
    
}

void cap_pxb_csr_sta_itr_tags_pending_t::clear() {

    int_var__port0 = 0; 
    
    int_var__port1 = 0; 
    
    int_var__port2 = 0; 
    
    int_var__port3 = 0; 
    
    int_var__port4 = 0; 
    
    int_var__port5 = 0; 
    
    int_var__port6 = 0; 
    
    int_var__port7 = 0; 
    
}

void cap_pxb_csr_sta_itr_raw_tlp_t::clear() {

    int_var__resp_rdy = 0; 
    
    int_var__cpl_stat = 0; 
    
    int_var__cpl_data_err = 0; 
    
    int_var__cpl_timeout_err = 0; 
    
    int_var__req_err = 0; 
    
}

void cap_pxb_csr_sta_itr_raw_tlp_data_t::clear() {

    int_var__resp0 = 0; 
    
    int_var__resp1 = 0; 
    
    int_var__resp2 = 0; 
    
    int_var__resp3 = 0; 
    
    int_var__resp4 = 0; 
    
    int_var__resp5 = 0; 
    
    int_var__resp6 = 0; 
    
    int_var__resp7 = 0; 
    
}

void cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::clear() {

    int_var__dw_cnt = 0; 
    
    int_var__port_id = 0; 
    
    int_var__cmd_go = 0; 
    
}

void cap_pxb_csr_cfg_itr_raw_tlp_t::clear() {

    int_var__dw0 = 0; 
    
    int_var__dw1 = 0; 
    
    int_var__dw2 = 0; 
    
    int_var__dw3 = 0; 
    
    int_var__dw4 = 0; 
    
    int_var__dw5 = 0; 
    
    int_var__dw6 = 0; 
    
    int_var__dw7 = 0; 
    
    int_var__dw8 = 0; 
    
    int_var__dw9 = 0; 
    
    int_var__dw10 = 0; 
    
    int_var__dw11 = 0; 
    
}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::clear() {

    int_var__waddr = 0; 
    
    int_var__raddr = 0; 
    
    int_var__depth = 0; 
    
}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::clear() {

    int_var__waddr = 0; 
    
    int_var__raddr = 0; 
    
    int_var__depth = 0; 
    
}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::clear() {

    int_var__waddr = 0; 
    
    int_var__raddr = 0; 
    
    int_var__depth = 0; 
    
}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::clear() {

    int_var__waddr = 0; 
    
    int_var__raddr = 0; 
    
    int_var__depth = 0; 
    
}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::clear() {

    int_var__waddr = 0; 
    
    int_var__raddr = 0; 
    
    int_var__depth = 0; 
    
}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::clear() {

    int_var__waddr = 0; 
    
    int_var__raddr = 0; 
    
    int_var__depth = 0; 
    
}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::clear() {

    int_var__waddr = 0; 
    
    int_var__raddr = 0; 
    
    int_var__depth = 0; 
    
}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::clear() {

    int_var__waddr = 0; 
    
    int_var__raddr = 0; 
    
    int_var__depth = 0; 
    
}

void cap_pxb_csr_sta_itr_req_debug_t::clear() {

    int_var__stg0_vld = 0; 
    
    int_var__stg1_vld = 0; 
    
    int_var__stg2_vld = 0; 
    
    int_var__stg3_vld = 0; 
    
    int_var__stg4_vld = 0; 
    
    int_var__stg5_vld = 0; 
    
    int_var__s0_rdy = 0; 
    
    int_var__s0_port_space_avl_vec = 0; 
    
    int_var__s0_tag_avl_vec = 0; 
    
    int_var__itr_cnxt_free_avl0 = 0; 
    
    int_var__itr_cnxt_free_avl1 = 0; 
    
    int_var__s5_req_fifo_depth = 0; 
    
    int_var__s5_seg_state = 0; 
    
    int_var__tx_wrcnt_req_stall = 0; 
    
    int_var__tx_wrcnt_cpl_stall = 0; 
    
    int_var__tx_wrcnt_raw_stall = 0; 
    
    int_var__s5_is_wr = 0; 
    
    int_var__s5_is_msg = 0; 
    
    int_var__cpl_eop_pnd = 0; 
    
    int_var__req_eop_pnd = 0; 
    
    int_var__raw_cmd_pnd = 0; 
    
    int_var__cpl_tx_vld = 0; 
    
    int_var__cpl_tx_rdy = 0; 
    
    int_var__bvalid = 0; 
    
    int_var__bready = 0; 
    
    int_var__awvalid = 0; 
    
    int_var__awready = 0; 
    
    int_var__wvalid = 0; 
    
    int_var__wready = 0; 
    
    int_var__arvalid = 0; 
    
    int_var__arready = 0; 
    
    int_var__rvalid = 0; 
    
    int_var__rready = 0; 
    
}

void cap_pxb_csr_sta_tgt_req_debug_t::clear() {

    int_var__stg0_vld = 0; 
    
    int_var__stg1_vld = 0; 
    
    int_var__stg2_vld = 0; 
    
    int_var__stg3_vld = 0; 
    
    int_var__stg4_vld = 0; 
    
    int_var__stg5_vld = 0; 
    
    int_var__stg6_vld = 0; 
    
    int_var__stg7_vld = 0; 
    
    int_var__stg8_vld = 0; 
    
    int_var__stg9_vld = 0; 
    
    int_var__stg0_rdy = 0; 
    
    int_var__stg1_rdy = 0; 
    
    int_var__stg2_rdy = 0; 
    
    int_var__stg3_rdy = 0; 
    
    int_var__stg4_rdy = 0; 
    
    int_var__stg5_rdy = 0; 
    
    int_var__stg6_rdy = 0; 
    
    int_var__stg7_rdy = 0; 
    
    int_var__stg8_rdy = 0; 
    
    int_var__stg9_rdy = 0; 
    
    int_var__tgt_req_vld = 0; 
    
    int_var__axi_fifo_rdy = 0; 
    
    int_var__axi_fifo_notempty = 0; 
    
    int_var__notify_full = 0; 
    
    int_var__tgt_cnxt_xn_pnd = 0; 
    
    int_var__rxcfg0_vld = 0; 
    
    int_var__hw_rsp_rdy = 0; 
    
    int_var__m_axi_awvalid = 0; 
    
    int_var__m_axi_arvalid = 0; 
    
    int_var__m_axi_wvalid = 0; 
    
    int_var__m_axi_awready = 0; 
    
    int_var__m_axi_arready = 0; 
    
    int_var__m_axi_wready = 0; 
    
    int_var__m_axi_rvalid = 0; 
    
    int_var__m_axi_rready = 0; 
    
    int_var__m_axi_bvalid = 0; 
    
    int_var__m_axi_bready = 0; 
    
    int_var__tgt_rsp_tx_rdy = 0; 
    
    int_var__s7_ax_state0 = 0; 
    
    int_var__s7_ax_state1 = 0; 
    
    int_var__s7_ax_state2 = 0; 
    
    int_var__s7_ax_state3 = 0; 
    
    int_var__s7_ax_state4 = 0; 
    
    int_var__s7_ax_state5 = 0; 
    
    int_var__s7_ax_state6 = 0; 
    
    int_var__s7_ax_state7 = 0; 
    
}

void cap_pxb_csr_sta_tgt_marker_rx_t::clear() {

    int_var__port0 = 0; 
    
    int_var__port1 = 0; 
    
    int_var__port2 = 0; 
    
    int_var__port3 = 0; 
    
    int_var__port4 = 0; 
    
    int_var__port5 = 0; 
    
    int_var__port6 = 0; 
    
    int_var__port7 = 0; 
    
}

void cap_pxb_csr_cnt_itr_tot_atomic_req_t::clear() {

    int_var__sent = 0; 
    
}

void cap_pxb_csr_cnt_itr_intx_assert_msg_t::clear() {

    int_var__sent = 0; 
    
}

void cap_pxb_csr_cnt_itr_tot_msg_t::clear() {

    int_var__sent = 0; 
    
}

void cap_pxb_csr_sta_itr_axi_rd_num_ids_t::clear() {

    int_var__pending = 0; 
    
}

void cap_pxb_csr_sta_itr_axi_wr_num_ids_t::clear() {

    int_var__pending = 0; 
    
}

void cap_pxb_csr_sta_tgt_tot_axi_rd_t::clear() {

    int_var__num_bytes = 0; 
    
}

void cap_pxb_csr_sta_tgt_tot_axi_wr_t::clear() {

    int_var__num_bytes = 0; 
    
}

void cap_pxb_csr_cnt_tgt_axi_rd64_t::clear() {

    int_var__req = 0; 
    
}

void cap_pxb_csr_cnt_tgt_tot_axi_rd_t::clear() {

    int_var__req = 0; 
    
}

void cap_pxb_csr_cnt_tgt_rsp_ca_ur_t::clear() {

    int_var__cnt = 0; 
    
}

void cap_pxb_csr_cnt_tgt_db32_axi_wr_t::clear() {

    int_var__req = 0; 
    
}

void cap_pxb_csr_cnt_tgt_db64_axi_wr_t::clear() {

    int_var__req = 0; 
    
}

void cap_pxb_csr_cnt_tgt_axi_wr64_t::clear() {

    int_var__req = 0; 
    
}

void cap_pxb_csr_cnt_tgt_tot_axi_wr_t::clear() {

    int_var__req = 0; 
    
}

void cap_pxb_csr_cnt_itr_axi_rd256_t::clear() {

    int_var__req = 0; 
    
}

void cap_pxb_csr_cnt_itr_axi_rd64_t::clear() {

    int_var__req = 0; 
    
}

void cap_pxb_csr_cnt_itr_tot_axi_rd_t::clear() {

    int_var__req = 0; 
    
}

void cap_pxb_csr_sta_itr_tot_axi_rd_t::clear() {

    int_var__num_bytes = 0; 
    
}

void cap_pxb_csr_sta_itr_tot_axi_wr_t::clear() {

    int_var__num_bytes = 0; 
    
}

void cap_pxb_csr_cnt_itr_axi_wr256_t::clear() {

    int_var__req = 0; 
    
}

void cap_pxb_csr_cnt_itr_axi_wr64_t::clear() {

    int_var__req = 0; 
    
}

void cap_pxb_csr_cnt_itr_tot_axi_wr_t::clear() {

    int_var__req = 0; 
    
}

void cap_pxb_csr_sta_tgt_ind_info_t::clear() {

    int_var__pending = 0; 
    
    int_var__ramaddr = 0; 
    
}

void cap_pxb_csr_sta_tgt_axi_pending_t::clear() {

    int_var__ids_p0 = 0; 
    
    int_var__ids_p1 = 0; 
    
    int_var__ids_p2 = 0; 
    
    int_var__ids_p3 = 0; 
    
    int_var__ids_p4 = 0; 
    
    int_var__ids_p5 = 0; 
    
    int_var__ids_p6 = 0; 
    
    int_var__ids_p7 = 0; 
    
}

void cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::clear() {

    int_var__p_shift = 0; 
    
    int_var__b_shift = 0; 
    
    int_var__d_shift = 0; 
    
    int_var__f_shift = 0; 
    
    int_var__resource_dwsize = 0; 
    
}

void cap_pxb_csr_sat_tgt_rx_drop_t::clear() {

    int_var__port0 = 0; 
    
    int_var__port1 = 0; 
    
    int_var__port2 = 0; 
    
    int_var__port3 = 0; 
    
    int_var__port4 = 0; 
    
    int_var__port5 = 0; 
    
    int_var__port6 = 0; 
    
    int_var__port7 = 0; 
    
}

void cap_pxb_csr_sta_tgt_ecc_romask_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_tgt_ecc_prt_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_tgt_ecc_pmr_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_tgt_ecc_cplst_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_tgt_ecc_rxinfo_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_tgt_ecc_aximst_4_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_tgt_ecc_aximst_3_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_tgt_ecc_aximst_2_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_tgt_ecc_aximst_1_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_tgt_ecc_aximst_0_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_itr_ecc_cplbfr_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_itr_ecc_rdhdr_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_itr_ecc_wrhdr_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_itr_ecc_portmap_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_itr_ecc_pcihdrt_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pxb_csr_cfg_tgt_ecc_disable_t::clear() {

    int_var__rxinfo_cor = 0; 
    
    int_var__rxinfo_det = 0; 
    
    int_var__rxinfo_dhs = 0; 
    
    int_var__pmr_cor = 0; 
    
    int_var__pmr_det = 0; 
    
    int_var__pmr_dhs = 0; 
    
    int_var__prt_cor = 0; 
    
    int_var__prt_det = 0; 
    
    int_var__prt_dhs = 0; 
    
    int_var__cplst_cor = 0; 
    
    int_var__cplst_det = 0; 
    
    int_var__cplst_dhs = 0; 
    
    int_var__aximst_cor = 0; 
    
    int_var__aximst_det = 0; 
    
    int_var__aximst_dhs = 0; 
    
    int_var__romask_cor = 0; 
    
    int_var__romask_det = 0; 
    
    int_var__romask_dhs = 0; 
    
    int_var__rxcrbfr_cor = 0; 
    
    int_var__rxcrbfr_det = 0; 
    
    int_var__rxcrbfr_dhs = 0; 
    
}

void cap_pxb_csr_cfg_itr_ecc_disable_t::clear() {

    int_var__pcihdrt_cor = 0; 
    
    int_var__pcihdrt_det = 0; 
    
    int_var__pcihdrt_dhs = 0; 
    
    int_var__portmap_cor = 0; 
    
    int_var__portmap_det = 0; 
    
    int_var__portmap_dhs = 0; 
    
    int_var__wrbfr_cor = 0; 
    
    int_var__wrbfr_det = 0; 
    
    int_var__wrbfr_dhs = 0; 
    
    int_var__wrhdr_cor = 0; 
    
    int_var__wrhdr_det = 0; 
    
    int_var__wrhdr_dhs = 0; 
    
    int_var__rdhdr_cor = 0; 
    
    int_var__rdhdr_det = 0; 
    
    int_var__rdhdr_dhs = 0; 
    
    int_var__cplbfr_cor = 0; 
    
    int_var__cplbfr_det = 0; 
    
    int_var__cplbfr_dhs = 0; 
    
}

void cap_pxb_csr_sta_tgt_pmt_ind_t::clear() {

    int_var__hit = 0; 
    
    int_var__hit_addr = 0; 
    
}

void cap_pxb_csr_cfg_tgt_pmt_ind_t::clear() {

    int_var__key = 0; 
    
    int_var__mask = 0; 
    
}

void cap_pxb_csr_cfg_tgt_pmt_grst_t::clear() {

    int_var__vld = 0; 
    
}

void cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t::clear() {

    int_var__val = 0; 
    
}

void cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t::clear() {

    int_var__base_35_2 = 0; 
    
}

void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::clear() {

    int_var__region0 = 0; 
    
    int_var__region1 = 0; 
    
    int_var__region2 = 0; 
    
    int_var__region3 = 0; 
    
    int_var__region4 = 0; 
    
    int_var__region5 = 0; 
    
    int_var__region6 = 0; 
    
    int_var__region7 = 0; 
    
    int_var__region8 = 0; 
    
    int_var__region9 = 0; 
    
    int_var__region10 = 0; 
    
    int_var__region11 = 0; 
    
    int_var__region12 = 0; 
    
    int_var__region13 = 0; 
    
    int_var__region14 = 0; 
    
    int_var__region15 = 0; 
    
    int_var__atomic = 0; 
    
    int_var__rc_cfg = 0; 
    
    int_var__atomic_page_id = 0; 
    
    int_var__rc_cfg_page_id = 0; 
    
    int_var__rc_io64k = 0; 
    
}

void cap_pxb_csr_cfg_tgt_rc_key_t::clear() {

    int_var__sel = 0; 
    
}

void cap_pxb_csr_cfg_pmt_tbl_id_t::clear() {

    int_var__memio_tbl_id0 = 0; 
    
    int_var__cfg_tbl_id0 = 0; 
    
    int_var__rc_tbl_id0 = 0; 
    
    int_var__default_tbl_id0 = 0; 
    
    int_var__memio_tbl_id1 = 0; 
    
    int_var__cfg_tbl_id1 = 0; 
    
    int_var__rc_tbl_id1 = 0; 
    
    int_var__default_tbl_id1 = 0; 
    
    int_var__memio_tbl_id2 = 0; 
    
    int_var__cfg_tbl_id2 = 0; 
    
    int_var__rc_tbl_id2 = 0; 
    
    int_var__default_tbl_id2 = 0; 
    
    int_var__memio_tbl_id3 = 0; 
    
    int_var__cfg_tbl_id3 = 0; 
    
    int_var__rc_tbl_id3 = 0; 
    
    int_var__default_tbl_id3 = 0; 
    
    int_var__memio_tbl_id4 = 0; 
    
    int_var__cfg_tbl_id4 = 0; 
    
    int_var__rc_tbl_id4 = 0; 
    
    int_var__default_tbl_id4 = 0; 
    
    int_var__memio_tbl_id5 = 0; 
    
    int_var__cfg_tbl_id5 = 0; 
    
    int_var__rc_tbl_id5 = 0; 
    
    int_var__default_tbl_id5 = 0; 
    
    int_var__memio_tbl_id6 = 0; 
    
    int_var__cfg_tbl_id6 = 0; 
    
    int_var__rc_tbl_id6 = 0; 
    
    int_var__default_tbl_id6 = 0; 
    
    int_var__memio_tbl_id7 = 0; 
    
    int_var__cfg_tbl_id7 = 0; 
    
    int_var__rc_tbl_id7 = 0; 
    
    int_var__default_tbl_id7 = 0; 
    
}

void cap_pxb_csr_cfg_tgt_notify_en_t::clear() {

    int_var__msg = 0; 
    
    int_var__pmv = 0; 
    
    int_var__db_pmv = 0; 
    
    int_var__unsupp = 0; 
    
    int_var__atomic = 0; 
    
    int_var__pmt_miss = 0; 
    
    int_var__pmr_invalid = 0; 
    
    int_var__prt_invalid = 0; 
    
    int_var__rc_vfid_miss = 0; 
    
    int_var__prt_oor = 0; 
    
    int_var__vfid_oor = 0; 
    
    int_var__cfg_bdf_oor = 0; 
    
    int_var__pmr_ecc_err = 0; 
    
    int_var__prt_ecc_err = 0; 
    
}

void cap_pxb_csr_cfg_tgt_ind_en_t::clear() {

    int_var__msg = 0; 
    
    int_var__pmv = 0; 
    
    int_var__db_pmv = 0; 
    
    int_var__unsupp = 0; 
    
    int_var__atomic = 0; 
    
    int_var__pmt_miss = 0; 
    
    int_var__pmr_invalid = 0; 
    
    int_var__prt_invalid = 0; 
    
    int_var__rc_vfid_miss = 0; 
    
    int_var__prt_oor = 0; 
    
    int_var__vfid_oor = 0; 
    
    int_var__cfg_bdf_oor = 0; 
    
    int_var__pmr_ecc_err = 0; 
    
    int_var__prt_ecc_err = 0; 
    
}

void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::clear() {

    int_var__adr_base0 = 0; 
    
    int_var__adr_limit0 = 0; 
    
    int_var__update0 = 0; 
    
    int_var__rst_rxfifo0 = 0; 
    
    int_var__adr_base1 = 0; 
    
    int_var__adr_limit1 = 0; 
    
    int_var__update1 = 0; 
    
    int_var__rst_rxfifo1 = 0; 
    
    int_var__adr_base2 = 0; 
    
    int_var__adr_limit2 = 0; 
    
    int_var__update2 = 0; 
    
    int_var__rst_rxfifo2 = 0; 
    
    int_var__adr_base3 = 0; 
    
    int_var__adr_limit3 = 0; 
    
    int_var__update3 = 0; 
    
    int_var__rst_rxfifo3 = 0; 
    
    int_var__adr_base4 = 0; 
    
    int_var__adr_limit4 = 0; 
    
    int_var__update4 = 0; 
    
    int_var__rst_rxfifo4 = 0; 
    
    int_var__adr_base5 = 0; 
    
    int_var__adr_limit5 = 0; 
    
    int_var__update5 = 0; 
    
    int_var__rst_rxfifo5 = 0; 
    
    int_var__adr_base6 = 0; 
    
    int_var__adr_limit6 = 0; 
    
    int_var__update6 = 0; 
    
    int_var__rst_rxfifo6 = 0; 
    
    int_var__adr_base7 = 0; 
    
    int_var__adr_limit7 = 0; 
    
    int_var__update7 = 0; 
    
    int_var__rst_rxfifo7 = 0; 
    
}

void cap_pxb_csr_cfg_tgt_fence_ignore_t::clear() {

    int_var__from_mask = 0; 
    
}

void cap_pxb_csr_cfg_tgt_msg_filter_t::clear() {

    int_var__msg_code0 = 0; 
    
    int_var__drop_en0 = 0; 
    
    int_var__msg_code1 = 0; 
    
    int_var__drop_en1 = 0; 
    
    int_var__msg_code2 = 0; 
    
    int_var__drop_en2 = 0; 
    
}

void cap_pxb_csr_cfg_tgt_doorbell_base_t::clear() {

    int_var__addr_33_24 = 0; 
    
    int_var__db_host_sel = 0; 
    
    int_var__db_32b_sel = 0; 
    
}

void cap_pxb_csr_cfg_tgt_req_indirect_int_t::clear() {

    int_var__intr_data = 0; 
    
    int_var__base_addr_35_2 = 0; 
    
}

void cap_pxb_csr_cfg_tgt_req_notify_ring_size_t::clear() {

    int_var__mask = 0; 
    
}

void cap_pxb_csr_cfg_tgt_req_notify_int_t::clear() {

    int_var__intr_data = 0; 
    
    int_var__base_addr_35_2 = 0; 
    
}

void cap_pxb_csr_cfg_tgt_req_notify_t::clear() {

    int_var__base_addr_35_16 = 0; 
    
}

void cap_pxb_csr_cfg_itr_tx_req_t::clear() {

    int_var__macfifo_thres = 0; 
    
    int_var__rd_sgl_pnd = 0; 
    
    int_var__tag_avl_guardband = 0; 
    
    int_var__cnxt_avl_guardband = 0; 
    
}

void cap_pxb_csr_cfg_tgt_port_t::clear() {

    int_var__id_limit = 0; 
    
    int_var__bus_adjust = 0; 
    
    int_var__halt = 0; 
    
    int_var__single_pnd = 0; 
    
    int_var__td_miss = 0; 
    
    int_var__depth_thres = 0; 
    
    int_var__skip_notify_if_qfull = 0; 
    
    int_var__fbe_holes_allow = 0; 
    
    int_var__fence_dis = 0; 
    
}

void cap_pxb_csr_cfg_itr_port_t::clear() {

    int_var__rdreq_limit = 0; 
    
    int_var__timer_tick = 0; 
    
    int_var__timer_limit = 0; 
    
    int_var__bus_adjust = 0; 
    
    int_var__arb_cr_hdr = 0; 
    
    int_var__arb_cr_data = 0; 
    
    int_var__arb_cr_dis_wr = 0; 
    
    int_var__arb_cr_dis_rd = 0; 
    
    int_var__arb_cnxtcnt_chk_dis = 0; 
    
    int_var__arb_tagcnt_chk_dis = 0; 
    
    int_var__arb_txfifocnt = 0; 
    
    int_var__adr_extn_en = 0; 
    
}

void cap_pxb_csr_cfg_pc_port_type_t::clear() {

    int_var__host_or_rc0 = 0; 
    
    int_var__host_or_rc1 = 0; 
    
    int_var__host_or_rc2 = 0; 
    
    int_var__host_or_rc3 = 0; 
    
    int_var__host_or_rc4 = 0; 
    
    int_var__host_or_rc5 = 0; 
    
    int_var__host_or_rc6 = 0; 
    
    int_var__host_or_rc7 = 0; 
    
}

void cap_pxb_csr_rdintr_t::clear() {

    int_var__ireg = 0; 
    
}

void cap_pxb_csr_base_t::clear() {

    int_var__scratch_reg = 0; 
    
}

void cap_pxb_csr_t::clear() {

    base.clear();
    rdintr.clear();
    cfg_pc_port_type.clear();
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // cfg_itr_port
    for(int ii = 0; ii < 8; ii++) {
        cfg_itr_port[ii].clear();
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // cfg_tgt_port
    for(int ii = 0; ii < 8; ii++) {
        cfg_tgt_port[ii].clear();
    }
    #endif
    
    cfg_itr_tx_req.clear();
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // cfg_tgt_req_notify
    for(int ii = 0; ii < 8; ii++) {
        cfg_tgt_req_notify[ii].clear();
    }
    #endif
    
    cfg_tgt_req_notify_int.clear();
    cfg_tgt_req_notify_ring_size.clear();
    cfg_tgt_req_indirect_int.clear();
    cfg_tgt_doorbell_base.clear();
    cfg_tgt_msg_filter.clear();
    cfg_tgt_fence_ignore.clear();
    cfg_tgt_rx_credit_bfr.clear();
    cfg_tgt_ind_en.clear();
    cfg_tgt_notify_en.clear();
    cfg_pmt_tbl_id.clear();
    cfg_tgt_rc_key.clear();
    cfg_pcie_local_memaddr_decode.clear();
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // cfg_tgt_rc_legacy_int_addr
    for(int ii = 0; ii < 8; ii++) {
        cfg_tgt_rc_legacy_int_addr[ii].clear();
    }
    #endif
    
    cfg_tgt_rc_legacy_int_data.clear();
    cfg_tgt_pmt_grst.clear();
    cfg_tgt_pmt_ind.clear();
    sta_tgt_pmt_ind.clear();
    cfg_itr_ecc_disable.clear();
    cfg_tgt_ecc_disable.clear();
    sta_itr_ecc_wrbfr_0.clear();
    sta_itr_ecc_wrbfr_1.clear();
    sta_itr_ecc_wrbfr_2.clear();
    sta_itr_ecc_wrbfr_3.clear();
    sta_itr_ecc_pcihdrt.clear();
    sta_itr_ecc_portmap.clear();
    sta_itr_ecc_wrhdr.clear();
    sta_itr_ecc_rdhdr.clear();
    sta_itr_ecc_cplbfr.clear();
    sta_tgt_ecc_rxcrbfr_0.clear();
    sta_tgt_ecc_rxcrbfr_1.clear();
    sta_tgt_ecc_rxcrbfr_2.clear();
    sta_tgt_ecc_rxcrbfr_3.clear();
    sta_tgt_ecc_aximst_0.clear();
    sta_tgt_ecc_aximst_1.clear();
    sta_tgt_ecc_aximst_2.clear();
    sta_tgt_ecc_aximst_3.clear();
    sta_tgt_ecc_aximst_4.clear();
    sta_tgt_ecc_rxinfo.clear();
    sta_tgt_ecc_cplst.clear();
    sta_tgt_ecc_pmr.clear();
    sta_tgt_ecc_prt.clear();
    sta_tgt_ecc_romask.clear();
    sat_tgt_rx_drop.clear();
    #if 16 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // cfg_tgt_vf_cfg_stride
    for(int ii = 0; ii < 16; ii++) {
        cfg_tgt_vf_cfg_stride[ii].clear();
    }
    #endif
    
    sta_tgt_axi_pending.clear();
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // sta_tgt_ind_info
    for(int ii = 0; ii < 8; ii++) {
        sta_tgt_ind_info[ii].clear();
    }
    #endif
    
    cnt_itr_tot_axi_wr.clear();
    cnt_itr_axi_wr64.clear();
    cnt_itr_axi_wr256.clear();
    sta_itr_tot_axi_wr.clear();
    sta_itr_tot_axi_rd.clear();
    cnt_itr_tot_axi_rd.clear();
    cnt_itr_axi_rd64.clear();
    cnt_itr_axi_rd256.clear();
    cnt_tgt_tot_axi_wr.clear();
    cnt_tgt_axi_wr64.clear();
    cnt_tgt_db64_axi_wr.clear();
    cnt_tgt_db32_axi_wr.clear();
    cnt_tgt_rsp_ca_ur.clear();
    cnt_tgt_tot_axi_rd.clear();
    cnt_tgt_axi_rd64.clear();
    sta_tgt_tot_axi_wr.clear();
    sta_tgt_tot_axi_rd.clear();
    sta_itr_axi_wr_num_ids.clear();
    sta_itr_axi_rd_num_ids.clear();
    cnt_itr_tot_msg.clear();
    cnt_itr_intx_assert_msg.clear();
    cnt_itr_tot_atomic_req.clear();
    sta_tgt_marker_rx.clear();
    sta_tgt_req_debug.clear();
    sta_itr_req_debug.clear();
    sta_tgt_rxcrbfr_debug_0.clear();
    sta_tgt_rxcrbfr_debug_1.clear();
    sta_tgt_rxcrbfr_debug_2.clear();
    sta_tgt_rxcrbfr_debug_3.clear();
    sta_tgt_rxcrbfr_debug_4.clear();
    sta_tgt_rxcrbfr_debug_5.clear();
    sta_tgt_rxcrbfr_debug_6.clear();
    sta_tgt_rxcrbfr_debug_7.clear();
    cfg_itr_raw_tlp.clear();
    cfg_itr_raw_tlp_cmd.clear();
    sta_itr_raw_tlp_data.clear();
    sta_itr_raw_tlp.clear();
    sta_itr_tags_pending.clear();
    sta_itr_portfifo_depth.clear();
    sta_itr_atomic_seq_cnt.clear();
    sta_itr_cnxt_pending.clear();
    cfg_itr_atomic_seq_cnt.clear();
    cfg_itr_axi_resp_order.clear();
    sat_tgt_ind_reason.clear();
    sat_itr_req_err.clear();
    sat_itr_xfer_unexpected.clear();
    sat_itr_cpl_err.clear();
    sat_itr_rsp_err.clear();
    sat_itr_req_portgate.clear();
    sat_tgt_rsp_err.clear();
    cfg_tgt_axi_attr.clear();
    cfg_debug_port.clear();
    cfg_diag_spare0.clear();
    sta_diag_spare0.clear();
    cfg_diag_spare1.clear();
    sta_diag_spare1.clear();
    cfg_itr_rdlat_measure.clear();
    sat_itr_rdlat0.clear();
    sat_itr_rdlat1.clear();
    sat_itr_rdlat2.clear();
    sat_itr_rdlat3.clear();
    cfg_sram_bist.clear();
    sta_sram_bist.clear();
    cfg_tcam_bist.clear();
    sta_tcam_bist.clear();
    csr_intr.clear();
    cfg_pxb_spare0.clear();
    cfg_pxb_spare1.clear();
    cfg_pxb_spare2.clear();
    cfg_pxb_spare3.clear();
    cfg_filter.clear();
    cfg_uid2sidLL.clear();
    cfg_uid2sidLL_hbm_hash_msk_bit0.clear();
    cfg_uid2sidLL_hbm_hash_msk_bit1.clear();
    cfg_uid2sidLL_hbm_hash_msk_bit2.clear();
    cfg_uid2sidLL_hbm_hash_msk_bit3.clear();
    cfg_axi_bw_mon.clear();
    sta_axi_bw_mon_rd_latency.clear();
    sta_axi_bw_mon_rd_bandwidth.clear();
    sta_axi_bw_mon_rd_transactions.clear();
    cnt_axi_bw_mon_rd.clear();
    sta_axi_bw_mon_wr_latency.clear();
    sta_axi_bw_mon_wr_bandwidth.clear();
    sta_axi_bw_mon_wr_transactions.clear();
    cnt_axi_bw_mon_wr.clear();
    dhs_itr_pcihdrt.clear();
    dhs_itr_portmap.clear();
    dhs_tgt_pmt.clear();
    dhs_tgt_pmr.clear();
    dhs_tgt_prt.clear();
    dhs_tgt_rxcrbfr0.clear();
    dhs_tgt_rxcrbfr1.clear();
    dhs_tgt_rxcrbfr2.clear();
    dhs_tgt_rxcrbfr3.clear();
    dhs_tgt_rxinfo.clear();
    dhs_tgt_cplst.clear();
    dhs_tgt_romask.clear();
    dhs_tgt_aximst0.clear();
    dhs_tgt_aximst1.clear();
    dhs_tgt_aximst2.clear();
    dhs_tgt_aximst3.clear();
    dhs_tgt_aximst4.clear();
    dhs_itr_wrbfr0.clear();
    dhs_itr_wrbfr1.clear();
    dhs_itr_wrbfr2.clear();
    dhs_itr_wrbfr3.clear();
    dhs_itr_wrhdr.clear();
    dhs_itr_rdhdr.clear();
    dhs_itr_rdcontext.clear();
    dhs_tgt_rdcontext.clear();
    dhs_tgt_rc_bdfmap.clear();
    dhs_itr_cplbfr0.clear();
    dhs_itr_cplbfr1.clear();
    dhs_itr_cplbfr2.clear();
    dhs_itr_cplbfr3.clear();
    dhs_itr_cplbfr4.clear();
    dhs_itr_cplbfr5.clear();
    dhs_itr_cplbfr6.clear();
    dhs_itr_cplbfr7.clear();
    dhs_itr_cplbfr8.clear();
    dhs_itr_cplbfr9.clear();
    dhs_itr_cplbfr10.clear();
    dhs_itr_cplbfr11.clear();
    dhs_itr_cplbfr12.clear();
    dhs_itr_cplbfr13.clear();
    dhs_itr_cplbfr14.clear();
    dhs_itr_cplbfr15.clear();
    dhs_tgt_notify.clear();
    dhs_tgt_ind_rsp.clear();
    dhs_tgt_pmt_ind.clear();
    filter_addr_lo.clear();
    filter_addr_hi.clear();
    filter_addr_ctl.clear();
    sta_inval_cam.clear();
    int_groups.clear();
    int_itr_ecc.clear();
    int_tgt_ecc.clear();
    int_err.clear();
}

void cap_pxb_csr_int_err_int_enable_clear_t::init() {

}

void cap_pxb_csr_int_err_int_test_set_t::init() {

}

void cap_pxb_csr_int_err_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::init() {

}

void cap_pxb_csr_int_tgt_ecc_int_test_set_t::init() {

}

void cap_pxb_csr_int_tgt_ecc_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::init() {

}

void cap_pxb_csr_int_itr_ecc_intreg_t::init() {

}

void cap_pxb_csr_int_itr_ecc_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_pxb_csr_intreg_status_t::init() {

}

void cap_pxb_csr_int_groups_int_enable_rw_reg_t::init() {

}

void cap_pxb_csr_intgrp_status_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_enable_rw_reg.set_attributes(this,"int_enable_rw_reg", 0x4 );
    int_rw_reg.set_attributes(this,"int_rw_reg", 0x8 );
}

void cap_pxb_csr_sta_inval_cam_entry_t::init() {

}

void cap_pxb_csr_sta_inval_cam_t::init() {

    #if 64 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 64; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_filter_addr_ctl_value_t::init() {

}

void cap_pxb_csr_filter_addr_ctl_t::init() {

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    value.set_attributes(this, "value", 0x0);
    #else
    for(int ii = 0; ii < 8; ii++) {
        if(ii != 0) value[ii].set_field_init_done(true, true);
        value[ii].set_attributes(this,"value["+to_string(ii)+"]",  0x0 + (value[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_filter_addr_hi_data_t::init() {

}

void cap_pxb_csr_filter_addr_hi_t::init() {

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    data.set_attributes(this, "data", 0x0);
    #else
    for(int ii = 0; ii < 8; ii++) {
        if(ii != 0) data[ii].set_field_init_done(true, true);
        data[ii].set_attributes(this,"data["+to_string(ii)+"]",  0x0 + (data[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_filter_addr_lo_data_t::init() {

}

void cap_pxb_csr_filter_addr_lo_t::init() {

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    data.set_attributes(this, "data", 0x0);
    #else
    for(int ii = 0; ii < 8; ii++) {
        if(ii != 0) data[ii].set_field_init_done(true, true);
        data[ii].set_attributes(this,"data["+to_string(ii)+"]",  0x0 + (data[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_pmt_ind_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_pmt_ind_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_ind_rsp_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pxb_csr_dhs_tgt_notify_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_notify_t::init() {

    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 8; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr15_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_cplbfr15_t::init() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 512; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr14_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_cplbfr14_t::init() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 512; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr13_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_cplbfr13_t::init() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 512; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr12_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_cplbfr12_t::init() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 512; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr11_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_cplbfr11_t::init() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 512; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr10_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_cplbfr10_t::init() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 512; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr9_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_cplbfr9_t::init() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 512; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr8_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_cplbfr8_t::init() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 512; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr7_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_cplbfr7_t::init() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 512; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr6_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_cplbfr6_t::init() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 512; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr5_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_cplbfr5_t::init() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 512; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr4_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_cplbfr4_t::init() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 512; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr3_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_cplbfr3_t::init() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 512; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr2_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_cplbfr2_t::init() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 512; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr1_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_cplbfr1_t::init() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 512; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_cplbfr0_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_cplbfr0_t::init() {

    #if 512 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 512; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_rc_bdfmap_t::init() {

    #if 64 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 64; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rdcontext_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_rdcontext_t::init() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 128; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_rdcontext_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_rdcontext_t::init() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 128; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_rdhdr_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_rdhdr_t::init() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 128; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_wrhdr_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_wrhdr_t::init() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 128; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_wrbfr3_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_wrbfr3_t::init() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 1024; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_wrbfr2_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_wrbfr2_t::init() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 1024; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_wrbfr1_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_wrbfr1_t::init() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 1024; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_wrbfr0_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_wrbfr0_t::init() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 1024; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_aximst4_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_aximst4_t::init() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 128; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_aximst3_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_aximst3_t::init() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 128; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_aximst2_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_aximst2_t::init() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 128; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_aximst1_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_aximst1_t::init() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 128; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_aximst0_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_aximst0_t::init() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 128; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_romask_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_romask_t::init() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 128; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_cplst_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_cplst_t::init() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 128; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rxinfo_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_rxinfo_t::init() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 1024; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_rxcrbfr3_t::init() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 1024; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_rxcrbfr2_t::init() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 1024; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_rxcrbfr1_t::init() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 1024; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_rxcrbfr0_t::init() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 1024; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_prt_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_prt_t::init() {

    #if 4096 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 4096; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_pmr_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_pmr_t::init() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 1024; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_tgt_pmt_entry_t::init() {

}

void cap_pxb_csr_dhs_tgt_pmt_t::init() {

    #if 1024 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 1024; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_portmap_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_portmap_t::init() {

    #if 128 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 128; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::init() {

}

void cap_pxb_csr_dhs_itr_pcihdrt_t::init() {

    #if 2048 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 2048; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pxb_csr_cnt_axi_bw_mon_wr_t::init() {

}

void cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::init() {

}

void cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::init() {

}

void cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::init() {

}

void cap_pxb_csr_cnt_axi_bw_mon_rd_t::init() {

}

void cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::init() {

}

void cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::init() {

}

void cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::init() {

}

void cap_pxb_csr_cfg_axi_bw_mon_t::init() {

    set_reset_val(cpp_int("0xf0f00ff04"));
    all(get_reset_val());
}

void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t::init() {

    set_reset_val(cpp_int("0x8888888800"));
    all(get_reset_val());
}

void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t::init() {

    set_reset_val(cpp_int("0x4444444400"));
    all(get_reset_val());
}

void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t::init() {

    set_reset_val(cpp_int("0x2222222200"));
    all(get_reset_val());
}

void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t::init() {

    set_reset_val(cpp_int("0x1111111100"));
    all(get_reset_val());
}

void cap_pxb_csr_cfg_uid2sidLL_t::init() {

}

void cap_pxb_csr_cfg_filter_t::init() {

}

void cap_pxb_csr_cfg_pxb_spare3_t::init() {

}

void cap_pxb_csr_cfg_pxb_spare2_t::init() {

}

void cap_pxb_csr_cfg_pxb_spare1_t::init() {

}

void cap_pxb_csr_cfg_pxb_spare0_t::init() {

}

void cap_pxb_csr_csr_intr_t::init() {

}

void cap_pxb_csr_sta_tcam_bist_t::init() {

}

void cap_pxb_csr_cfg_tcam_bist_t::init() {

}

void cap_pxb_csr_sta_sram_bist_t::init() {

}

void cap_pxb_csr_cfg_sram_bist_t::init() {

}

void cap_pxb_csr_sat_itr_rdlat3_t::init() {

}

void cap_pxb_csr_sat_itr_rdlat2_t::init() {

}

void cap_pxb_csr_sat_itr_rdlat1_t::init() {

}

void cap_pxb_csr_sat_itr_rdlat0_t::init() {

}

void cap_pxb_csr_cfg_itr_rdlat_measure_t::init() {

    set_reset_val(cpp_int("0xfa01f403e8"));
    all(get_reset_val());
}

void cap_pxb_csr_sta_diag_spare1_t::init() {

}

void cap_pxb_csr_cfg_diag_spare1_t::init() {

}

void cap_pxb_csr_sta_diag_spare0_t::init() {

}

void cap_pxb_csr_cfg_diag_spare0_t::init() {

}

void cap_pxb_csr_cfg_debug_port_t::init() {

}

void cap_pxb_csr_cfg_tgt_axi_attr_t::init() {

    set_reset_val(cpp_int("0x2ff"));
    all(get_reset_val());
}

void cap_pxb_csr_sat_tgt_rsp_err_t::init() {

}

void cap_pxb_csr_sat_itr_req_portgate_t::init() {

}

void cap_pxb_csr_sat_itr_rsp_err_t::init() {

}

void cap_pxb_csr_sat_itr_cpl_err_t::init() {

}

void cap_pxb_csr_sat_itr_xfer_unexpected_t::init() {

}

void cap_pxb_csr_sat_itr_req_err_t::init() {

}

void cap_pxb_csr_sat_tgt_ind_reason_t::init() {

}

void cap_pxb_csr_cfg_itr_axi_resp_order_t::init() {

    set_reset_val(cpp_int("0x200"));
    all(get_reset_val());
}

void cap_pxb_csr_cfg_itr_atomic_seq_cnt_t::init() {

}

void cap_pxb_csr_sta_itr_cnxt_pending_t::init() {

}

void cap_pxb_csr_sta_itr_atomic_seq_cnt_t::init() {

}

void cap_pxb_csr_sta_itr_portfifo_depth_t::init() {

}

void cap_pxb_csr_sta_itr_tags_pending_t::init() {

}

void cap_pxb_csr_sta_itr_raw_tlp_t::init() {

}

void cap_pxb_csr_sta_itr_raw_tlp_data_t::init() {

}

void cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::init() {

}

void cap_pxb_csr_cfg_itr_raw_tlp_t::init() {

}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::init() {

}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::init() {

}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::init() {

}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::init() {

}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::init() {

}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::init() {

}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::init() {

}

void cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::init() {

}

void cap_pxb_csr_sta_itr_req_debug_t::init() {

}

void cap_pxb_csr_sta_tgt_req_debug_t::init() {

}

void cap_pxb_csr_sta_tgt_marker_rx_t::init() {

}

void cap_pxb_csr_cnt_itr_tot_atomic_req_t::init() {

}

void cap_pxb_csr_cnt_itr_intx_assert_msg_t::init() {

}

void cap_pxb_csr_cnt_itr_tot_msg_t::init() {

}

void cap_pxb_csr_sta_itr_axi_rd_num_ids_t::init() {

}

void cap_pxb_csr_sta_itr_axi_wr_num_ids_t::init() {

}

void cap_pxb_csr_sta_tgt_tot_axi_rd_t::init() {

}

void cap_pxb_csr_sta_tgt_tot_axi_wr_t::init() {

}

void cap_pxb_csr_cnt_tgt_axi_rd64_t::init() {

}

void cap_pxb_csr_cnt_tgt_tot_axi_rd_t::init() {

}

void cap_pxb_csr_cnt_tgt_rsp_ca_ur_t::init() {

}

void cap_pxb_csr_cnt_tgt_db32_axi_wr_t::init() {

}

void cap_pxb_csr_cnt_tgt_db64_axi_wr_t::init() {

}

void cap_pxb_csr_cnt_tgt_axi_wr64_t::init() {

}

void cap_pxb_csr_cnt_tgt_tot_axi_wr_t::init() {

}

void cap_pxb_csr_cnt_itr_axi_rd256_t::init() {

}

void cap_pxb_csr_cnt_itr_axi_rd64_t::init() {

}

void cap_pxb_csr_cnt_itr_tot_axi_rd_t::init() {

}

void cap_pxb_csr_sta_itr_tot_axi_rd_t::init() {

}

void cap_pxb_csr_sta_itr_tot_axi_wr_t::init() {

}

void cap_pxb_csr_cnt_itr_axi_wr256_t::init() {

}

void cap_pxb_csr_cnt_itr_axi_wr64_t::init() {

}

void cap_pxb_csr_cnt_itr_tot_axi_wr_t::init() {

}

void cap_pxb_csr_sta_tgt_ind_info_t::init() {

}

void cap_pxb_csr_sta_tgt_axi_pending_t::init() {

}

void cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::init() {

    set_reset_val(cpp_int("0x3ff5365a"));
    all(get_reset_val());
}

void cap_pxb_csr_sat_tgt_rx_drop_t::init() {

}

void cap_pxb_csr_sta_tgt_ecc_romask_t::init() {

}

void cap_pxb_csr_sta_tgt_ecc_prt_t::init() {

}

void cap_pxb_csr_sta_tgt_ecc_pmr_t::init() {

}

void cap_pxb_csr_sta_tgt_ecc_cplst_t::init() {

}

void cap_pxb_csr_sta_tgt_ecc_rxinfo_t::init() {

}

void cap_pxb_csr_sta_tgt_ecc_aximst_4_t::init() {

}

void cap_pxb_csr_sta_tgt_ecc_aximst_3_t::init() {

}

void cap_pxb_csr_sta_tgt_ecc_aximst_2_t::init() {

}

void cap_pxb_csr_sta_tgt_ecc_aximst_1_t::init() {

}

void cap_pxb_csr_sta_tgt_ecc_aximst_0_t::init() {

}

void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::init() {

}

void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::init() {

}

void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::init() {

}

void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::init() {

}

void cap_pxb_csr_sta_itr_ecc_cplbfr_t::init() {

}

void cap_pxb_csr_sta_itr_ecc_rdhdr_t::init() {

}

void cap_pxb_csr_sta_itr_ecc_wrhdr_t::init() {

}

void cap_pxb_csr_sta_itr_ecc_portmap_t::init() {

}

void cap_pxb_csr_sta_itr_ecc_pcihdrt_t::init() {

}

void cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::init() {

}

void cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::init() {

}

void cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::init() {

}

void cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::init() {

}

void cap_pxb_csr_cfg_tgt_ecc_disable_t::init() {

}

void cap_pxb_csr_cfg_itr_ecc_disable_t::init() {

}

void cap_pxb_csr_sta_tgt_pmt_ind_t::init() {

}

void cap_pxb_csr_cfg_tgt_pmt_ind_t::init() {

}

void cap_pxb_csr_cfg_tgt_pmt_grst_t::init() {

}

void cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t::init() {

}

void cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t::init() {

}

void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::init() {

    set_reset_val(cpp_int("0x1ffffffffffffffff000000000000"));
    all(get_reset_val());
}

void cap_pxb_csr_cfg_tgt_rc_key_t::init() {

}

void cap_pxb_csr_cfg_pmt_tbl_id_t::init() {

}

void cap_pxb_csr_cfg_tgt_notify_en_t::init() {

}

void cap_pxb_csr_cfg_tgt_ind_en_t::init() {

}

void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::init() {

    set_reset_val(cpp_int("0x3ffe00dff002ffa009fe001ff6005fd000ff2001fc00"));
    all(get_reset_val());
}

void cap_pxb_csr_cfg_tgt_fence_ignore_t::init() {

}

void cap_pxb_csr_cfg_tgt_msg_filter_t::init() {

}

void cap_pxb_csr_cfg_tgt_doorbell_base_t::init() {

    set_reset_val(cpp_int("0x3808"));
    all(get_reset_val());
}

void cap_pxb_csr_cfg_tgt_req_indirect_int_t::init() {

}

void cap_pxb_csr_cfg_tgt_req_notify_ring_size_t::init() {

    set_reset_val(cpp_int("0x3ff"));
    all(get_reset_val());
}

void cap_pxb_csr_cfg_tgt_req_notify_int_t::init() {

}

void cap_pxb_csr_cfg_tgt_req_notify_t::init() {

}

void cap_pxb_csr_cfg_itr_tx_req_t::init() {

    set_reset_val(cpp_int("0x249"));
    all(get_reset_val());
}

void cap_pxb_csr_cfg_tgt_port_t::init() {

    set_reset_val(cpp_int("0x2c120"));
    all(get_reset_val());
}

void cap_pxb_csr_cfg_itr_port_t::init() {

    set_reset_val(cpp_int("0xa02047e8a21680"));
    all(get_reset_val());
}

void cap_pxb_csr_cfg_pc_port_type_t::init() {

    set_reset_val(cpp_int("0xff"));
    all(get_reset_val());
}

void cap_pxb_csr_rdintr_t::init() {

}

void cap_pxb_csr_base_t::init() {

    set_reset_val(cpp_int("0x1"));
    all(get_reset_val());
}

void cap_pxb_csr_t::init() {

    base.set_attributes(this,"base", 0x0 );
    rdintr.set_attributes(this,"rdintr", 0x4 );
    cfg_pc_port_type.set_attributes(this,"cfg_pc_port_type", 0x9a040 );
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_itr_port.set_attributes(this, "cfg_itr_port", 0x9a080);
    #else
    for(int ii = 0; ii < 8; ii++) {
        if(ii != 0) cfg_itr_port[ii].set_field_init_done(true, true);
        cfg_itr_port[ii].set_attributes(this,"cfg_itr_port["+to_string(ii)+"]",  0x9a080 + (cfg_itr_port[ii].get_byte_size()*ii));
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_tgt_port.set_attributes(this, "cfg_tgt_port", 0x9a0c0);
    #else
    for(int ii = 0; ii < 8; ii++) {
        if(ii != 0) cfg_tgt_port[ii].set_field_init_done(true, true);
        cfg_tgt_port[ii].set_attributes(this,"cfg_tgt_port["+to_string(ii)+"]",  0x9a0c0 + (cfg_tgt_port[ii].get_byte_size()*ii));
    }
    #endif
    
    cfg_itr_tx_req.set_attributes(this,"cfg_itr_tx_req", 0x9a0e0 );
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_tgt_req_notify.set_attributes(this, "cfg_tgt_req_notify", 0x9a100);
    #else
    for(int ii = 0; ii < 8; ii++) {
        if(ii != 0) cfg_tgt_req_notify[ii].set_field_init_done(true, true);
        cfg_tgt_req_notify[ii].set_attributes(this,"cfg_tgt_req_notify["+to_string(ii)+"]",  0x9a100 + (cfg_tgt_req_notify[ii].get_byte_size()*ii));
    }
    #endif
    
    cfg_tgt_req_notify_int.set_attributes(this,"cfg_tgt_req_notify_int", 0x9a120 );
    cfg_tgt_req_notify_ring_size.set_attributes(this,"cfg_tgt_req_notify_ring_size", 0x9a130 );
    cfg_tgt_req_indirect_int.set_attributes(this,"cfg_tgt_req_indirect_int", 0x9a140 );
    cfg_tgt_doorbell_base.set_attributes(this,"cfg_tgt_doorbell_base", 0x9a150 );
    cfg_tgt_msg_filter.set_attributes(this,"cfg_tgt_msg_filter", 0x9a154 );
    cfg_tgt_fence_ignore.set_attributes(this,"cfg_tgt_fence_ignore", 0x9a158 );
    cfg_tgt_rx_credit_bfr.set_attributes(this,"cfg_tgt_rx_credit_bfr", 0x9a160 );
    cfg_tgt_ind_en.set_attributes(this,"cfg_tgt_ind_en", 0x9a180 );
    cfg_tgt_notify_en.set_attributes(this,"cfg_tgt_notify_en", 0x9a184 );
    cfg_pmt_tbl_id.set_attributes(this,"cfg_pmt_tbl_id", 0x9a188 );
    cfg_tgt_rc_key.set_attributes(this,"cfg_tgt_rc_key", 0x9a190 );
    cfg_pcie_local_memaddr_decode.set_attributes(this,"cfg_pcie_local_memaddr_decode", 0x9a1a0 );
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_tgt_rc_legacy_int_addr.set_attributes(this, "cfg_tgt_rc_legacy_int_addr", 0x9a1c0);
    #else
    for(int ii = 0; ii < 8; ii++) {
        if(ii != 0) cfg_tgt_rc_legacy_int_addr[ii].set_field_init_done(true, true);
        cfg_tgt_rc_legacy_int_addr[ii].set_attributes(this,"cfg_tgt_rc_legacy_int_addr["+to_string(ii)+"]",  0x9a1c0 + (cfg_tgt_rc_legacy_int_addr[ii].get_byte_size()*ii));
    }
    #endif
    
    cfg_tgt_rc_legacy_int_data.set_attributes(this,"cfg_tgt_rc_legacy_int_data", 0x9a200 );
    cfg_tgt_pmt_grst.set_attributes(this,"cfg_tgt_pmt_grst", 0x9a204 );
    cfg_tgt_pmt_ind.set_attributes(this,"cfg_tgt_pmt_ind", 0x9a210 );
    sta_tgt_pmt_ind.set_attributes(this,"sta_tgt_pmt_ind", 0x9a220 );
    cfg_itr_ecc_disable.set_attributes(this,"cfg_itr_ecc_disable", 0x9a228 );
    cfg_tgt_ecc_disable.set_attributes(this,"cfg_tgt_ecc_disable", 0x9a22c );
    sta_itr_ecc_wrbfr_0.set_attributes(this,"sta_itr_ecc_wrbfr_0", 0x9a230 );
    sta_itr_ecc_wrbfr_1.set_attributes(this,"sta_itr_ecc_wrbfr_1", 0x9a234 );
    sta_itr_ecc_wrbfr_2.set_attributes(this,"sta_itr_ecc_wrbfr_2", 0x9a238 );
    sta_itr_ecc_wrbfr_3.set_attributes(this,"sta_itr_ecc_wrbfr_3", 0x9a23c );
    sta_itr_ecc_pcihdrt.set_attributes(this,"sta_itr_ecc_pcihdrt", 0x9a240 );
    sta_itr_ecc_portmap.set_attributes(this,"sta_itr_ecc_portmap", 0x9a244 );
    sta_itr_ecc_wrhdr.set_attributes(this,"sta_itr_ecc_wrhdr", 0x9a248 );
    sta_itr_ecc_rdhdr.set_attributes(this,"sta_itr_ecc_rdhdr", 0x9a24c );
    sta_itr_ecc_cplbfr.set_attributes(this,"sta_itr_ecc_cplbfr", 0x9a250 );
    sta_tgt_ecc_rxcrbfr_0.set_attributes(this,"sta_tgt_ecc_rxcrbfr_0", 0x9a254 );
    sta_tgt_ecc_rxcrbfr_1.set_attributes(this,"sta_tgt_ecc_rxcrbfr_1", 0x9a258 );
    sta_tgt_ecc_rxcrbfr_2.set_attributes(this,"sta_tgt_ecc_rxcrbfr_2", 0x9a25c );
    sta_tgt_ecc_rxcrbfr_3.set_attributes(this,"sta_tgt_ecc_rxcrbfr_3", 0x9a260 );
    sta_tgt_ecc_aximst_0.set_attributes(this,"sta_tgt_ecc_aximst_0", 0x9a264 );
    sta_tgt_ecc_aximst_1.set_attributes(this,"sta_tgt_ecc_aximst_1", 0x9a268 );
    sta_tgt_ecc_aximst_2.set_attributes(this,"sta_tgt_ecc_aximst_2", 0x9a26c );
    sta_tgt_ecc_aximst_3.set_attributes(this,"sta_tgt_ecc_aximst_3", 0x9a270 );
    sta_tgt_ecc_aximst_4.set_attributes(this,"sta_tgt_ecc_aximst_4", 0x9a274 );
    sta_tgt_ecc_rxinfo.set_attributes(this,"sta_tgt_ecc_rxinfo", 0x9a278 );
    sta_tgt_ecc_cplst.set_attributes(this,"sta_tgt_ecc_cplst", 0x9a27c );
    sta_tgt_ecc_pmr.set_attributes(this,"sta_tgt_ecc_pmr", 0x9a280 );
    sta_tgt_ecc_prt.set_attributes(this,"sta_tgt_ecc_prt", 0x9a284 );
    sta_tgt_ecc_romask.set_attributes(this,"sta_tgt_ecc_romask", 0x9a288 );
    sat_tgt_rx_drop.set_attributes(this,"sat_tgt_rx_drop", 0x9a290 );
    #if 16 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_tgt_vf_cfg_stride.set_attributes(this, "cfg_tgt_vf_cfg_stride", 0x9a2c0);
    #else
    for(int ii = 0; ii < 16; ii++) {
        if(ii != 0) cfg_tgt_vf_cfg_stride[ii].set_field_init_done(true, true);
        cfg_tgt_vf_cfg_stride[ii].set_attributes(this,"cfg_tgt_vf_cfg_stride["+to_string(ii)+"]",  0x9a2c0 + (cfg_tgt_vf_cfg_stride[ii].get_byte_size()*ii));
    }
    #endif
    
    sta_tgt_axi_pending.set_attributes(this,"sta_tgt_axi_pending", 0x9a300 );
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    sta_tgt_ind_info.set_attributes(this, "sta_tgt_ind_info", 0x9a320);
    #else
    for(int ii = 0; ii < 8; ii++) {
        if(ii != 0) sta_tgt_ind_info[ii].set_field_init_done(true, true);
        sta_tgt_ind_info[ii].set_attributes(this,"sta_tgt_ind_info["+to_string(ii)+"]",  0x9a320 + (sta_tgt_ind_info[ii].get_byte_size()*ii));
    }
    #endif
    
    cnt_itr_tot_axi_wr.set_attributes(this,"cnt_itr_tot_axi_wr", 0x9a340 );
    cnt_itr_axi_wr64.set_attributes(this,"cnt_itr_axi_wr64", 0x9a348 );
    cnt_itr_axi_wr256.set_attributes(this,"cnt_itr_axi_wr256", 0x9a350 );
    sta_itr_tot_axi_wr.set_attributes(this,"sta_itr_tot_axi_wr", 0x9a358 );
    sta_itr_tot_axi_rd.set_attributes(this,"sta_itr_tot_axi_rd", 0x9a360 );
    cnt_itr_tot_axi_rd.set_attributes(this,"cnt_itr_tot_axi_rd", 0x9a368 );
    cnt_itr_axi_rd64.set_attributes(this,"cnt_itr_axi_rd64", 0x9a370 );
    cnt_itr_axi_rd256.set_attributes(this,"cnt_itr_axi_rd256", 0x9a378 );
    cnt_tgt_tot_axi_wr.set_attributes(this,"cnt_tgt_tot_axi_wr", 0x9a380 );
    cnt_tgt_axi_wr64.set_attributes(this,"cnt_tgt_axi_wr64", 0x9a388 );
    cnt_tgt_db64_axi_wr.set_attributes(this,"cnt_tgt_db64_axi_wr", 0x9a390 );
    cnt_tgt_db32_axi_wr.set_attributes(this,"cnt_tgt_db32_axi_wr", 0x9a398 );
    cnt_tgt_rsp_ca_ur.set_attributes(this,"cnt_tgt_rsp_ca_ur", 0x9a3a0 );
    cnt_tgt_tot_axi_rd.set_attributes(this,"cnt_tgt_tot_axi_rd", 0x9a3a8 );
    cnt_tgt_axi_rd64.set_attributes(this,"cnt_tgt_axi_rd64", 0x9a3b0 );
    sta_tgt_tot_axi_wr.set_attributes(this,"sta_tgt_tot_axi_wr", 0x9a3b8 );
    sta_tgt_tot_axi_rd.set_attributes(this,"sta_tgt_tot_axi_rd", 0x9a3c0 );
    sta_itr_axi_wr_num_ids.set_attributes(this,"sta_itr_axi_wr_num_ids", 0x9a3c8 );
    sta_itr_axi_rd_num_ids.set_attributes(this,"sta_itr_axi_rd_num_ids", 0x9a3cc );
    cnt_itr_tot_msg.set_attributes(this,"cnt_itr_tot_msg", 0x9a3d0 );
    cnt_itr_intx_assert_msg.set_attributes(this,"cnt_itr_intx_assert_msg", 0x9a3d8 );
    cnt_itr_tot_atomic_req.set_attributes(this,"cnt_itr_tot_atomic_req", 0x9a3e0 );
    sta_tgt_marker_rx.set_attributes(this,"sta_tgt_marker_rx", 0x9a3e8 );
    sta_tgt_req_debug.set_attributes(this,"sta_tgt_req_debug", 0x9a3f0 );
    sta_itr_req_debug.set_attributes(this,"sta_itr_req_debug", 0x9a400 );
    sta_tgt_rxcrbfr_debug_0.set_attributes(this,"sta_tgt_rxcrbfr_debug_0", 0x9a408 );
    sta_tgt_rxcrbfr_debug_1.set_attributes(this,"sta_tgt_rxcrbfr_debug_1", 0x9a40c );
    sta_tgt_rxcrbfr_debug_2.set_attributes(this,"sta_tgt_rxcrbfr_debug_2", 0x9a410 );
    sta_tgt_rxcrbfr_debug_3.set_attributes(this,"sta_tgt_rxcrbfr_debug_3", 0x9a414 );
    sta_tgt_rxcrbfr_debug_4.set_attributes(this,"sta_tgt_rxcrbfr_debug_4", 0x9a418 );
    sta_tgt_rxcrbfr_debug_5.set_attributes(this,"sta_tgt_rxcrbfr_debug_5", 0x9a41c );
    sta_tgt_rxcrbfr_debug_6.set_attributes(this,"sta_tgt_rxcrbfr_debug_6", 0x9a420 );
    sta_tgt_rxcrbfr_debug_7.set_attributes(this,"sta_tgt_rxcrbfr_debug_7", 0x9a424 );
    cfg_itr_raw_tlp.set_attributes(this,"cfg_itr_raw_tlp", 0x9a440 );
    cfg_itr_raw_tlp_cmd.set_attributes(this,"cfg_itr_raw_tlp_cmd", 0x9a480 );
    sta_itr_raw_tlp_data.set_attributes(this,"sta_itr_raw_tlp_data", 0x9a4a0 );
    sta_itr_raw_tlp.set_attributes(this,"sta_itr_raw_tlp", 0x9a4c0 );
    sta_itr_tags_pending.set_attributes(this,"sta_itr_tags_pending", 0x9a4c8 );
    sta_itr_portfifo_depth.set_attributes(this,"sta_itr_portfifo_depth", 0x9a4d0 );
    sta_itr_atomic_seq_cnt.set_attributes(this,"sta_itr_atomic_seq_cnt", 0x9a4e0 );
    sta_itr_cnxt_pending.set_attributes(this,"sta_itr_cnxt_pending", 0x9a4e4 );
    cfg_itr_atomic_seq_cnt.set_attributes(this,"cfg_itr_atomic_seq_cnt", 0x9a4e8 );
    cfg_itr_axi_resp_order.set_attributes(this,"cfg_itr_axi_resp_order", 0x9a4ec );
    sat_tgt_ind_reason.set_attributes(this,"sat_tgt_ind_reason", 0x9a4f0 );
    sat_itr_req_err.set_attributes(this,"sat_itr_req_err", 0x9a500 );
    sat_itr_xfer_unexpected.set_attributes(this,"sat_itr_xfer_unexpected", 0x9a504 );
    sat_itr_cpl_err.set_attributes(this,"sat_itr_cpl_err", 0x9a508 );
    sat_itr_rsp_err.set_attributes(this,"sat_itr_rsp_err", 0x9a50c );
    sat_itr_req_portgate.set_attributes(this,"sat_itr_req_portgate", 0x9a510 );
    sat_tgt_rsp_err.set_attributes(this,"sat_tgt_rsp_err", 0x9a514 );
    cfg_tgt_axi_attr.set_attributes(this,"cfg_tgt_axi_attr", 0x9a518 );
    cfg_debug_port.set_attributes(this,"cfg_debug_port", 0x9a51c );
    cfg_diag_spare0.set_attributes(this,"cfg_diag_spare0", 0x9a520 );
    sta_diag_spare0.set_attributes(this,"sta_diag_spare0", 0x9a524 );
    cfg_diag_spare1.set_attributes(this,"cfg_diag_spare1", 0x9a528 );
    sta_diag_spare1.set_attributes(this,"sta_diag_spare1", 0x9a52c );
    cfg_itr_rdlat_measure.set_attributes(this,"cfg_itr_rdlat_measure", 0x9a530 );
    sat_itr_rdlat0.set_attributes(this,"sat_itr_rdlat0", 0x9a538 );
    sat_itr_rdlat1.set_attributes(this,"sat_itr_rdlat1", 0x9a540 );
    sat_itr_rdlat2.set_attributes(this,"sat_itr_rdlat2", 0x9a548 );
    sat_itr_rdlat3.set_attributes(this,"sat_itr_rdlat3", 0x9a550 );
    cfg_sram_bist.set_attributes(this,"cfg_sram_bist", 0x9a558 );
    sta_sram_bist.set_attributes(this,"sta_sram_bist", 0x9a560 );
    cfg_tcam_bist.set_attributes(this,"cfg_tcam_bist", 0x9a570 );
    sta_tcam_bist.set_attributes(this,"sta_tcam_bist", 0x9a574 );
    csr_intr.set_attributes(this,"csr_intr", 0x9a578 );
    cfg_pxb_spare0.set_attributes(this,"cfg_pxb_spare0", 0x9a5c0 );
    cfg_pxb_spare1.set_attributes(this,"cfg_pxb_spare1", 0x9a5c4 );
    cfg_pxb_spare2.set_attributes(this,"cfg_pxb_spare2", 0x9a5c8 );
    cfg_pxb_spare3.set_attributes(this,"cfg_pxb_spare3", 0x9a5cc );
    cfg_filter.set_attributes(this,"cfg_filter", 0x9a640 );
    cfg_uid2sidLL.set_attributes(this,"cfg_uid2sidLL", 0x9aa00 );
    cfg_uid2sidLL_hbm_hash_msk_bit0.set_attributes(this,"cfg_uid2sidLL_hbm_hash_msk_bit0", 0x9aa08 );
    cfg_uid2sidLL_hbm_hash_msk_bit1.set_attributes(this,"cfg_uid2sidLL_hbm_hash_msk_bit1", 0x9aa10 );
    cfg_uid2sidLL_hbm_hash_msk_bit2.set_attributes(this,"cfg_uid2sidLL_hbm_hash_msk_bit2", 0x9aa18 );
    cfg_uid2sidLL_hbm_hash_msk_bit3.set_attributes(this,"cfg_uid2sidLL_hbm_hash_msk_bit3", 0x9aa20 );
    cfg_axi_bw_mon.set_attributes(this,"cfg_axi_bw_mon", 0x9aa28 );
    sta_axi_bw_mon_rd_latency.set_attributes(this,"sta_axi_bw_mon_rd_latency", 0x9aa30 );
    sta_axi_bw_mon_rd_bandwidth.set_attributes(this,"sta_axi_bw_mon_rd_bandwidth", 0x9aa34 );
    sta_axi_bw_mon_rd_transactions.set_attributes(this,"sta_axi_bw_mon_rd_transactions", 0x9aa38 );
    cnt_axi_bw_mon_rd.set_attributes(this,"cnt_axi_bw_mon_rd", 0x9aa3c );
    sta_axi_bw_mon_wr_latency.set_attributes(this,"sta_axi_bw_mon_wr_latency", 0x9aa40 );
    sta_axi_bw_mon_wr_bandwidth.set_attributes(this,"sta_axi_bw_mon_wr_bandwidth", 0x9aa44 );
    sta_axi_bw_mon_wr_transactions.set_attributes(this,"sta_axi_bw_mon_wr_transactions", 0x9aa48 );
    cnt_axi_bw_mon_wr.set_attributes(this,"cnt_axi_bw_mon_wr", 0x9aa4c );
    dhs_itr_pcihdrt.set_attributes(this,"dhs_itr_pcihdrt", 0x8000 );
    dhs_itr_portmap.set_attributes(this,"dhs_itr_portmap", 0x10000 );
    dhs_tgt_pmt.set_attributes(this,"dhs_tgt_pmt", 0x18000 );
    dhs_tgt_pmr.set_attributes(this,"dhs_tgt_pmr", 0x20000 );
    dhs_tgt_prt.set_attributes(this,"dhs_tgt_prt", 0x30000 );
    dhs_tgt_rxcrbfr0.set_attributes(this,"dhs_tgt_rxcrbfr0", 0x40000 );
    dhs_tgt_rxcrbfr1.set_attributes(this,"dhs_tgt_rxcrbfr1", 0x48000 );
    dhs_tgt_rxcrbfr2.set_attributes(this,"dhs_tgt_rxcrbfr2", 0x50000 );
    dhs_tgt_rxcrbfr3.set_attributes(this,"dhs_tgt_rxcrbfr3", 0x58000 );
    dhs_tgt_rxinfo.set_attributes(this,"dhs_tgt_rxinfo", 0x60000 );
    dhs_tgt_cplst.set_attributes(this,"dhs_tgt_cplst", 0x61000 );
    dhs_tgt_romask.set_attributes(this,"dhs_tgt_romask", 0x61800 );
    dhs_tgt_aximst0.set_attributes(this,"dhs_tgt_aximst0", 0x62000 );
    dhs_tgt_aximst1.set_attributes(this,"dhs_tgt_aximst1", 0x63000 );
    dhs_tgt_aximst2.set_attributes(this,"dhs_tgt_aximst2", 0x64000 );
    dhs_tgt_aximst3.set_attributes(this,"dhs_tgt_aximst3", 0x65000 );
    dhs_tgt_aximst4.set_attributes(this,"dhs_tgt_aximst4", 0x66000 );
    dhs_itr_wrbfr0.set_attributes(this,"dhs_itr_wrbfr0", 0x68000 );
    dhs_itr_wrbfr1.set_attributes(this,"dhs_itr_wrbfr1", 0x70000 );
    dhs_itr_wrbfr2.set_attributes(this,"dhs_itr_wrbfr2", 0x78000 );
    dhs_itr_wrbfr3.set_attributes(this,"dhs_itr_wrbfr3", 0x80000 );
    dhs_itr_wrhdr.set_attributes(this,"dhs_itr_wrhdr", 0x88000 );
    dhs_itr_rdhdr.set_attributes(this,"dhs_itr_rdhdr", 0x88800 );
    dhs_itr_rdcontext.set_attributes(this,"dhs_itr_rdcontext", 0x89000 );
    dhs_tgt_rdcontext.set_attributes(this,"dhs_tgt_rdcontext", 0x89800 );
    dhs_tgt_rc_bdfmap.set_attributes(this,"dhs_tgt_rc_bdfmap", 0x89a00 );
    dhs_itr_cplbfr0.set_attributes(this,"dhs_itr_cplbfr0", 0x8a000 );
    dhs_itr_cplbfr1.set_attributes(this,"dhs_itr_cplbfr1", 0x8b000 );
    dhs_itr_cplbfr2.set_attributes(this,"dhs_itr_cplbfr2", 0x8c000 );
    dhs_itr_cplbfr3.set_attributes(this,"dhs_itr_cplbfr3", 0x8d000 );
    dhs_itr_cplbfr4.set_attributes(this,"dhs_itr_cplbfr4", 0x8e000 );
    dhs_itr_cplbfr5.set_attributes(this,"dhs_itr_cplbfr5", 0x8f000 );
    dhs_itr_cplbfr6.set_attributes(this,"dhs_itr_cplbfr6", 0x90000 );
    dhs_itr_cplbfr7.set_attributes(this,"dhs_itr_cplbfr7", 0x91000 );
    dhs_itr_cplbfr8.set_attributes(this,"dhs_itr_cplbfr8", 0x92000 );
    dhs_itr_cplbfr9.set_attributes(this,"dhs_itr_cplbfr9", 0x93000 );
    dhs_itr_cplbfr10.set_attributes(this,"dhs_itr_cplbfr10", 0x94000 );
    dhs_itr_cplbfr11.set_attributes(this,"dhs_itr_cplbfr11", 0x95000 );
    dhs_itr_cplbfr12.set_attributes(this,"dhs_itr_cplbfr12", 0x96000 );
    dhs_itr_cplbfr13.set_attributes(this,"dhs_itr_cplbfr13", 0x97000 );
    dhs_itr_cplbfr14.set_attributes(this,"dhs_itr_cplbfr14", 0x98000 );
    dhs_itr_cplbfr15.set_attributes(this,"dhs_itr_cplbfr15", 0x99000 );
    dhs_tgt_notify.set_attributes(this,"dhs_tgt_notify", 0x9a000 );
    dhs_tgt_ind_rsp.set_attributes(this,"dhs_tgt_ind_rsp", 0x9a020 );
    dhs_tgt_pmt_ind.set_attributes(this,"dhs_tgt_pmt_ind", 0x9a224 );
    filter_addr_lo.set_attributes(this,"filter_addr_lo", 0x9a5e0 );
    filter_addr_hi.set_attributes(this,"filter_addr_hi", 0x9a600 );
    filter_addr_ctl.set_attributes(this,"filter_addr_ctl", 0x9a620 );
    sta_inval_cam.set_attributes(this,"sta_inval_cam", 0x9a800 );
    int_groups.set_attributes(this,"int_groups", 0x9a580 );
    int_itr_ecc.set_attributes(this,"int_itr_ecc", 0x9a590 );
    int_tgt_ecc.set_attributes(this,"int_tgt_ecc", 0x9a5a0 );
    int_err.set_attributes(this,"int_err", 0x9a5b0 );
}

void cap_pxb_csr_int_err_int_enable_clear_t::cpl_ecrc_enable(const cpp_int & _val) { 
    // cpl_ecrc_enable
    int_var__cpl_ecrc_enable = _val.convert_to< cpl_ecrc_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::cpl_ecrc_enable() const {
    return int_var__cpl_ecrc_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::cpl_rxbuf_err_enable(const cpp_int & _val) { 
    // cpl_rxbuf_err_enable
    int_var__cpl_rxbuf_err_enable = _val.convert_to< cpl_rxbuf_err_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::cpl_rxbuf_err_enable() const {
    return int_var__cpl_rxbuf_err_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::cpl_stat_enable(const cpp_int & _val) { 
    // cpl_stat_enable
    int_var__cpl_stat_enable = _val.convert_to< cpl_stat_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::cpl_stat_enable() const {
    return int_var__cpl_stat_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::cpl_unexp_enable(const cpp_int & _val) { 
    // cpl_unexp_enable
    int_var__cpl_unexp_enable = _val.convert_to< cpl_unexp_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::cpl_unexp_enable() const {
    return int_var__cpl_unexp_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::cpl_timeout_enable(const cpp_int & _val) { 
    // cpl_timeout_enable
    int_var__cpl_timeout_enable = _val.convert_to< cpl_timeout_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::cpl_timeout_enable() const {
    return int_var__cpl_timeout_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::cpl_len_enable(const cpp_int & _val) { 
    // cpl_len_enable
    int_var__cpl_len_enable = _val.convert_to< cpl_len_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::cpl_len_enable() const {
    return int_var__cpl_len_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::cpl_poison_enable(const cpp_int & _val) { 
    // cpl_poison_enable
    int_var__cpl_poison_enable = _val.convert_to< cpl_poison_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::cpl_poison_enable() const {
    return int_var__cpl_poison_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::cpl_lowaddr_enable(const cpp_int & _val) { 
    // cpl_lowaddr_enable
    int_var__cpl_lowaddr_enable = _val.convert_to< cpl_lowaddr_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::cpl_lowaddr_enable() const {
    return int_var__cpl_lowaddr_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::tgt_ind_rsp_unexp_enable(const cpp_int & _val) { 
    // tgt_ind_rsp_unexp_enable
    int_var__tgt_ind_rsp_unexp_enable = _val.convert_to< tgt_ind_rsp_unexp_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::tgt_ind_rsp_unexp_enable() const {
    return int_var__tgt_ind_rsp_unexp_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::tgt_axi_rsp_unexp_enable(const cpp_int & _val) { 
    // tgt_axi_rsp_unexp_enable
    int_var__tgt_axi_rsp_unexp_enable = _val.convert_to< tgt_axi_rsp_unexp_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::tgt_axi_rsp_unexp_enable() const {
    return int_var__tgt_axi_rsp_unexp_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::tgt_axi_rsp_err_enable(const cpp_int & _val) { 
    // tgt_axi_rsp_err_enable
    int_var__tgt_axi_rsp_err_enable = _val.convert_to< tgt_axi_rsp_err_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::tgt_axi_rsp_err_enable() const {
    return int_var__tgt_axi_rsp_err_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::tgt_req_4k_err_enable(const cpp_int & _val) { 
    // tgt_req_4k_err_enable
    int_var__tgt_req_4k_err_enable = _val.convert_to< tgt_req_4k_err_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::tgt_req_4k_err_enable() const {
    return int_var__tgt_req_4k_err_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::itr_req_bdfmiss_enable(const cpp_int & _val) { 
    // itr_req_bdfmiss_enable
    int_var__itr_req_bdfmiss_enable = _val.convert_to< itr_req_bdfmiss_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::itr_req_bdfmiss_enable() const {
    return int_var__itr_req_bdfmiss_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::itr_req_axi_unsupp_enable(const cpp_int & _val) { 
    // itr_req_axi_unsupp_enable
    int_var__itr_req_axi_unsupp_enable = _val.convert_to< itr_req_axi_unsupp_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::itr_req_axi_unsupp_enable() const {
    return int_var__itr_req_axi_unsupp_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::itr_req_msg_align_err_enable(const cpp_int & _val) { 
    // itr_req_msg_align_err_enable
    int_var__itr_req_msg_align_err_enable = _val.convert_to< itr_req_msg_align_err_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::itr_req_msg_align_err_enable() const {
    return int_var__itr_req_msg_align_err_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::itr_bus_master_dis_enable(const cpp_int & _val) { 
    // itr_bus_master_dis_enable
    int_var__itr_bus_master_dis_enable = _val.convert_to< itr_bus_master_dis_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::itr_bus_master_dis_enable() const {
    return int_var__itr_bus_master_dis_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::itr_atomic_seq_err_enable(const cpp_int & _val) { 
    // itr_atomic_seq_err_enable
    int_var__itr_atomic_seq_err_enable = _val.convert_to< itr_atomic_seq_err_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::itr_atomic_seq_err_enable() const {
    return int_var__itr_atomic_seq_err_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::itr_atomic_resource_err_enable(const cpp_int & _val) { 
    // itr_atomic_resource_err_enable
    int_var__itr_atomic_resource_err_enable = _val.convert_to< itr_atomic_resource_err_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::itr_atomic_resource_err_enable() const {
    return int_var__itr_atomic_resource_err_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::tgt_rmw_axi_resperr_enable(const cpp_int & _val) { 
    // tgt_rmw_axi_resperr_enable
    int_var__tgt_rmw_axi_resperr_enable = _val.convert_to< tgt_rmw_axi_resperr_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::tgt_rmw_axi_resperr_enable() const {
    return int_var__tgt_rmw_axi_resperr_enable;
}
    
void cap_pxb_csr_int_err_int_enable_clear_t::tgt_ind_notify_axi_resperr_enable(const cpp_int & _val) { 
    // tgt_ind_notify_axi_resperr_enable
    int_var__tgt_ind_notify_axi_resperr_enable = _val.convert_to< tgt_ind_notify_axi_resperr_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_enable_clear_t::tgt_ind_notify_axi_resperr_enable() const {
    return int_var__tgt_ind_notify_axi_resperr_enable;
}
    
void cap_pxb_csr_int_err_int_test_set_t::cpl_ecrc_interrupt(const cpp_int & _val) { 
    // cpl_ecrc_interrupt
    int_var__cpl_ecrc_interrupt = _val.convert_to< cpl_ecrc_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::cpl_ecrc_interrupt() const {
    return int_var__cpl_ecrc_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::cpl_rxbuf_err_interrupt(const cpp_int & _val) { 
    // cpl_rxbuf_err_interrupt
    int_var__cpl_rxbuf_err_interrupt = _val.convert_to< cpl_rxbuf_err_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::cpl_rxbuf_err_interrupt() const {
    return int_var__cpl_rxbuf_err_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::cpl_stat_interrupt(const cpp_int & _val) { 
    // cpl_stat_interrupt
    int_var__cpl_stat_interrupt = _val.convert_to< cpl_stat_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::cpl_stat_interrupt() const {
    return int_var__cpl_stat_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::cpl_unexp_interrupt(const cpp_int & _val) { 
    // cpl_unexp_interrupt
    int_var__cpl_unexp_interrupt = _val.convert_to< cpl_unexp_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::cpl_unexp_interrupt() const {
    return int_var__cpl_unexp_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::cpl_timeout_interrupt(const cpp_int & _val) { 
    // cpl_timeout_interrupt
    int_var__cpl_timeout_interrupt = _val.convert_to< cpl_timeout_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::cpl_timeout_interrupt() const {
    return int_var__cpl_timeout_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::cpl_len_interrupt(const cpp_int & _val) { 
    // cpl_len_interrupt
    int_var__cpl_len_interrupt = _val.convert_to< cpl_len_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::cpl_len_interrupt() const {
    return int_var__cpl_len_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::cpl_poison_interrupt(const cpp_int & _val) { 
    // cpl_poison_interrupt
    int_var__cpl_poison_interrupt = _val.convert_to< cpl_poison_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::cpl_poison_interrupt() const {
    return int_var__cpl_poison_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::cpl_lowaddr_interrupt(const cpp_int & _val) { 
    // cpl_lowaddr_interrupt
    int_var__cpl_lowaddr_interrupt = _val.convert_to< cpl_lowaddr_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::cpl_lowaddr_interrupt() const {
    return int_var__cpl_lowaddr_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::tgt_ind_rsp_unexp_interrupt(const cpp_int & _val) { 
    // tgt_ind_rsp_unexp_interrupt
    int_var__tgt_ind_rsp_unexp_interrupt = _val.convert_to< tgt_ind_rsp_unexp_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::tgt_ind_rsp_unexp_interrupt() const {
    return int_var__tgt_ind_rsp_unexp_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::tgt_axi_rsp_unexp_interrupt(const cpp_int & _val) { 
    // tgt_axi_rsp_unexp_interrupt
    int_var__tgt_axi_rsp_unexp_interrupt = _val.convert_to< tgt_axi_rsp_unexp_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::tgt_axi_rsp_unexp_interrupt() const {
    return int_var__tgt_axi_rsp_unexp_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::tgt_axi_rsp_err_interrupt(const cpp_int & _val) { 
    // tgt_axi_rsp_err_interrupt
    int_var__tgt_axi_rsp_err_interrupt = _val.convert_to< tgt_axi_rsp_err_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::tgt_axi_rsp_err_interrupt() const {
    return int_var__tgt_axi_rsp_err_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::tgt_req_4k_err_interrupt(const cpp_int & _val) { 
    // tgt_req_4k_err_interrupt
    int_var__tgt_req_4k_err_interrupt = _val.convert_to< tgt_req_4k_err_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::tgt_req_4k_err_interrupt() const {
    return int_var__tgt_req_4k_err_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::itr_req_bdfmiss_interrupt(const cpp_int & _val) { 
    // itr_req_bdfmiss_interrupt
    int_var__itr_req_bdfmiss_interrupt = _val.convert_to< itr_req_bdfmiss_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::itr_req_bdfmiss_interrupt() const {
    return int_var__itr_req_bdfmiss_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::itr_req_axi_unsupp_interrupt(const cpp_int & _val) { 
    // itr_req_axi_unsupp_interrupt
    int_var__itr_req_axi_unsupp_interrupt = _val.convert_to< itr_req_axi_unsupp_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::itr_req_axi_unsupp_interrupt() const {
    return int_var__itr_req_axi_unsupp_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::itr_req_msg_align_err_interrupt(const cpp_int & _val) { 
    // itr_req_msg_align_err_interrupt
    int_var__itr_req_msg_align_err_interrupt = _val.convert_to< itr_req_msg_align_err_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::itr_req_msg_align_err_interrupt() const {
    return int_var__itr_req_msg_align_err_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::itr_bus_master_dis_interrupt(const cpp_int & _val) { 
    // itr_bus_master_dis_interrupt
    int_var__itr_bus_master_dis_interrupt = _val.convert_to< itr_bus_master_dis_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::itr_bus_master_dis_interrupt() const {
    return int_var__itr_bus_master_dis_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::itr_atomic_seq_err_interrupt(const cpp_int & _val) { 
    // itr_atomic_seq_err_interrupt
    int_var__itr_atomic_seq_err_interrupt = _val.convert_to< itr_atomic_seq_err_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::itr_atomic_seq_err_interrupt() const {
    return int_var__itr_atomic_seq_err_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::itr_atomic_resource_err_interrupt(const cpp_int & _val) { 
    // itr_atomic_resource_err_interrupt
    int_var__itr_atomic_resource_err_interrupt = _val.convert_to< itr_atomic_resource_err_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::itr_atomic_resource_err_interrupt() const {
    return int_var__itr_atomic_resource_err_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::tgt_rmw_axi_resperr_interrupt(const cpp_int & _val) { 
    // tgt_rmw_axi_resperr_interrupt
    int_var__tgt_rmw_axi_resperr_interrupt = _val.convert_to< tgt_rmw_axi_resperr_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::tgt_rmw_axi_resperr_interrupt() const {
    return int_var__tgt_rmw_axi_resperr_interrupt;
}
    
void cap_pxb_csr_int_err_int_test_set_t::tgt_ind_notify_axi_resperr_interrupt(const cpp_int & _val) { 
    // tgt_ind_notify_axi_resperr_interrupt
    int_var__tgt_ind_notify_axi_resperr_interrupt = _val.convert_to< tgt_ind_notify_axi_resperr_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_err_int_test_set_t::tgt_ind_notify_axi_resperr_interrupt() const {
    return int_var__tgt_ind_notify_axi_resperr_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_0_uncorrectable_enable(const cpp_int & _val) { 
    // aximst_0_uncorrectable_enable
    int_var__aximst_0_uncorrectable_enable = _val.convert_to< aximst_0_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_0_uncorrectable_enable() const {
    return int_var__aximst_0_uncorrectable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_0_correctable_enable(const cpp_int & _val) { 
    // aximst_0_correctable_enable
    int_var__aximst_0_correctable_enable = _val.convert_to< aximst_0_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_0_correctable_enable() const {
    return int_var__aximst_0_correctable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_1_uncorrectable_enable(const cpp_int & _val) { 
    // aximst_1_uncorrectable_enable
    int_var__aximst_1_uncorrectable_enable = _val.convert_to< aximst_1_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_1_uncorrectable_enable() const {
    return int_var__aximst_1_uncorrectable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_1_correctable_enable(const cpp_int & _val) { 
    // aximst_1_correctable_enable
    int_var__aximst_1_correctable_enable = _val.convert_to< aximst_1_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_1_correctable_enable() const {
    return int_var__aximst_1_correctable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_2_uncorrectable_enable(const cpp_int & _val) { 
    // aximst_2_uncorrectable_enable
    int_var__aximst_2_uncorrectable_enable = _val.convert_to< aximst_2_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_2_uncorrectable_enable() const {
    return int_var__aximst_2_uncorrectable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_2_correctable_enable(const cpp_int & _val) { 
    // aximst_2_correctable_enable
    int_var__aximst_2_correctable_enable = _val.convert_to< aximst_2_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_2_correctable_enable() const {
    return int_var__aximst_2_correctable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_3_uncorrectable_enable(const cpp_int & _val) { 
    // aximst_3_uncorrectable_enable
    int_var__aximst_3_uncorrectable_enable = _val.convert_to< aximst_3_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_3_uncorrectable_enable() const {
    return int_var__aximst_3_uncorrectable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_3_correctable_enable(const cpp_int & _val) { 
    // aximst_3_correctable_enable
    int_var__aximst_3_correctable_enable = _val.convert_to< aximst_3_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_3_correctable_enable() const {
    return int_var__aximst_3_correctable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_4_uncorrectable_enable(const cpp_int & _val) { 
    // aximst_4_uncorrectable_enable
    int_var__aximst_4_uncorrectable_enable = _val.convert_to< aximst_4_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_4_uncorrectable_enable() const {
    return int_var__aximst_4_uncorrectable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_4_correctable_enable(const cpp_int & _val) { 
    // aximst_4_correctable_enable
    int_var__aximst_4_correctable_enable = _val.convert_to< aximst_4_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::aximst_4_correctable_enable() const {
    return int_var__aximst_4_correctable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxcrbfr_0_uncorrectable_enable(const cpp_int & _val) { 
    // rxcrbfr_0_uncorrectable_enable
    int_var__rxcrbfr_0_uncorrectable_enable = _val.convert_to< rxcrbfr_0_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxcrbfr_0_uncorrectable_enable() const {
    return int_var__rxcrbfr_0_uncorrectable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxcrbfr_0_correctable_enable(const cpp_int & _val) { 
    // rxcrbfr_0_correctable_enable
    int_var__rxcrbfr_0_correctable_enable = _val.convert_to< rxcrbfr_0_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxcrbfr_0_correctable_enable() const {
    return int_var__rxcrbfr_0_correctable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxcrbfr_1_uncorrectable_enable(const cpp_int & _val) { 
    // rxcrbfr_1_uncorrectable_enable
    int_var__rxcrbfr_1_uncorrectable_enable = _val.convert_to< rxcrbfr_1_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxcrbfr_1_uncorrectable_enable() const {
    return int_var__rxcrbfr_1_uncorrectable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxcrbfr_1_correctable_enable(const cpp_int & _val) { 
    // rxcrbfr_1_correctable_enable
    int_var__rxcrbfr_1_correctable_enable = _val.convert_to< rxcrbfr_1_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxcrbfr_1_correctable_enable() const {
    return int_var__rxcrbfr_1_correctable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxcrbfr_2_uncorrectable_enable(const cpp_int & _val) { 
    // rxcrbfr_2_uncorrectable_enable
    int_var__rxcrbfr_2_uncorrectable_enable = _val.convert_to< rxcrbfr_2_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxcrbfr_2_uncorrectable_enable() const {
    return int_var__rxcrbfr_2_uncorrectable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxcrbfr_2_correctable_enable(const cpp_int & _val) { 
    // rxcrbfr_2_correctable_enable
    int_var__rxcrbfr_2_correctable_enable = _val.convert_to< rxcrbfr_2_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxcrbfr_2_correctable_enable() const {
    return int_var__rxcrbfr_2_correctable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxcrbfr_3_uncorrectable_enable(const cpp_int & _val) { 
    // rxcrbfr_3_uncorrectable_enable
    int_var__rxcrbfr_3_uncorrectable_enable = _val.convert_to< rxcrbfr_3_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxcrbfr_3_uncorrectable_enable() const {
    return int_var__rxcrbfr_3_uncorrectable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxcrbfr_3_correctable_enable(const cpp_int & _val) { 
    // rxcrbfr_3_correctable_enable
    int_var__rxcrbfr_3_correctable_enable = _val.convert_to< rxcrbfr_3_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxcrbfr_3_correctable_enable() const {
    return int_var__rxcrbfr_3_correctable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxinfo_uncorrectable_enable(const cpp_int & _val) { 
    // rxinfo_uncorrectable_enable
    int_var__rxinfo_uncorrectable_enable = _val.convert_to< rxinfo_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxinfo_uncorrectable_enable() const {
    return int_var__rxinfo_uncorrectable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxinfo_correctable_enable(const cpp_int & _val) { 
    // rxinfo_correctable_enable
    int_var__rxinfo_correctable_enable = _val.convert_to< rxinfo_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::rxinfo_correctable_enable() const {
    return int_var__rxinfo_correctable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::cplst_uncorrectable_enable(const cpp_int & _val) { 
    // cplst_uncorrectable_enable
    int_var__cplst_uncorrectable_enable = _val.convert_to< cplst_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::cplst_uncorrectable_enable() const {
    return int_var__cplst_uncorrectable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::cplst_correctable_enable(const cpp_int & _val) { 
    // cplst_correctable_enable
    int_var__cplst_correctable_enable = _val.convert_to< cplst_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::cplst_correctable_enable() const {
    return int_var__cplst_correctable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::romask_uncorrectable_enable(const cpp_int & _val) { 
    // romask_uncorrectable_enable
    int_var__romask_uncorrectable_enable = _val.convert_to< romask_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::romask_uncorrectable_enable() const {
    return int_var__romask_uncorrectable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::romask_correctable_enable(const cpp_int & _val) { 
    // romask_correctable_enable
    int_var__romask_correctable_enable = _val.convert_to< romask_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::romask_correctable_enable() const {
    return int_var__romask_correctable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::pmr_uncorrectable_enable(const cpp_int & _val) { 
    // pmr_uncorrectable_enable
    int_var__pmr_uncorrectable_enable = _val.convert_to< pmr_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::pmr_uncorrectable_enable() const {
    return int_var__pmr_uncorrectable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::pmr_correctable_enable(const cpp_int & _val) { 
    // pmr_correctable_enable
    int_var__pmr_correctable_enable = _val.convert_to< pmr_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::pmr_correctable_enable() const {
    return int_var__pmr_correctable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::prt_uncorrectable_enable(const cpp_int & _val) { 
    // prt_uncorrectable_enable
    int_var__prt_uncorrectable_enable = _val.convert_to< prt_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::prt_uncorrectable_enable() const {
    return int_var__prt_uncorrectable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::prt_correctable_enable(const cpp_int & _val) { 
    // prt_correctable_enable
    int_var__prt_correctable_enable = _val.convert_to< prt_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::prt_correctable_enable() const {
    return int_var__prt_correctable_enable;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_0_uncorrectable_interrupt(const cpp_int & _val) { 
    // aximst_0_uncorrectable_interrupt
    int_var__aximst_0_uncorrectable_interrupt = _val.convert_to< aximst_0_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_0_uncorrectable_interrupt() const {
    return int_var__aximst_0_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_0_correctable_interrupt(const cpp_int & _val) { 
    // aximst_0_correctable_interrupt
    int_var__aximst_0_correctable_interrupt = _val.convert_to< aximst_0_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_0_correctable_interrupt() const {
    return int_var__aximst_0_correctable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_1_uncorrectable_interrupt(const cpp_int & _val) { 
    // aximst_1_uncorrectable_interrupt
    int_var__aximst_1_uncorrectable_interrupt = _val.convert_to< aximst_1_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_1_uncorrectable_interrupt() const {
    return int_var__aximst_1_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_1_correctable_interrupt(const cpp_int & _val) { 
    // aximst_1_correctable_interrupt
    int_var__aximst_1_correctable_interrupt = _val.convert_to< aximst_1_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_1_correctable_interrupt() const {
    return int_var__aximst_1_correctable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_2_uncorrectable_interrupt(const cpp_int & _val) { 
    // aximst_2_uncorrectable_interrupt
    int_var__aximst_2_uncorrectable_interrupt = _val.convert_to< aximst_2_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_2_uncorrectable_interrupt() const {
    return int_var__aximst_2_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_2_correctable_interrupt(const cpp_int & _val) { 
    // aximst_2_correctable_interrupt
    int_var__aximst_2_correctable_interrupt = _val.convert_to< aximst_2_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_2_correctable_interrupt() const {
    return int_var__aximst_2_correctable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_3_uncorrectable_interrupt(const cpp_int & _val) { 
    // aximst_3_uncorrectable_interrupt
    int_var__aximst_3_uncorrectable_interrupt = _val.convert_to< aximst_3_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_3_uncorrectable_interrupt() const {
    return int_var__aximst_3_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_3_correctable_interrupt(const cpp_int & _val) { 
    // aximst_3_correctable_interrupt
    int_var__aximst_3_correctable_interrupt = _val.convert_to< aximst_3_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_3_correctable_interrupt() const {
    return int_var__aximst_3_correctable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_4_uncorrectable_interrupt(const cpp_int & _val) { 
    // aximst_4_uncorrectable_interrupt
    int_var__aximst_4_uncorrectable_interrupt = _val.convert_to< aximst_4_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_4_uncorrectable_interrupt() const {
    return int_var__aximst_4_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_4_correctable_interrupt(const cpp_int & _val) { 
    // aximst_4_correctable_interrupt
    int_var__aximst_4_correctable_interrupt = _val.convert_to< aximst_4_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::aximst_4_correctable_interrupt() const {
    return int_var__aximst_4_correctable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxcrbfr_0_uncorrectable_interrupt(const cpp_int & _val) { 
    // rxcrbfr_0_uncorrectable_interrupt
    int_var__rxcrbfr_0_uncorrectable_interrupt = _val.convert_to< rxcrbfr_0_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxcrbfr_0_uncorrectable_interrupt() const {
    return int_var__rxcrbfr_0_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxcrbfr_0_correctable_interrupt(const cpp_int & _val) { 
    // rxcrbfr_0_correctable_interrupt
    int_var__rxcrbfr_0_correctable_interrupt = _val.convert_to< rxcrbfr_0_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxcrbfr_0_correctable_interrupt() const {
    return int_var__rxcrbfr_0_correctable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxcrbfr_1_uncorrectable_interrupt(const cpp_int & _val) { 
    // rxcrbfr_1_uncorrectable_interrupt
    int_var__rxcrbfr_1_uncorrectable_interrupt = _val.convert_to< rxcrbfr_1_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxcrbfr_1_uncorrectable_interrupt() const {
    return int_var__rxcrbfr_1_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxcrbfr_1_correctable_interrupt(const cpp_int & _val) { 
    // rxcrbfr_1_correctable_interrupt
    int_var__rxcrbfr_1_correctable_interrupt = _val.convert_to< rxcrbfr_1_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxcrbfr_1_correctable_interrupt() const {
    return int_var__rxcrbfr_1_correctable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxcrbfr_2_uncorrectable_interrupt(const cpp_int & _val) { 
    // rxcrbfr_2_uncorrectable_interrupt
    int_var__rxcrbfr_2_uncorrectable_interrupt = _val.convert_to< rxcrbfr_2_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxcrbfr_2_uncorrectable_interrupt() const {
    return int_var__rxcrbfr_2_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxcrbfr_2_correctable_interrupt(const cpp_int & _val) { 
    // rxcrbfr_2_correctable_interrupt
    int_var__rxcrbfr_2_correctable_interrupt = _val.convert_to< rxcrbfr_2_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxcrbfr_2_correctable_interrupt() const {
    return int_var__rxcrbfr_2_correctable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxcrbfr_3_uncorrectable_interrupt(const cpp_int & _val) { 
    // rxcrbfr_3_uncorrectable_interrupt
    int_var__rxcrbfr_3_uncorrectable_interrupt = _val.convert_to< rxcrbfr_3_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxcrbfr_3_uncorrectable_interrupt() const {
    return int_var__rxcrbfr_3_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxcrbfr_3_correctable_interrupt(const cpp_int & _val) { 
    // rxcrbfr_3_correctable_interrupt
    int_var__rxcrbfr_3_correctable_interrupt = _val.convert_to< rxcrbfr_3_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxcrbfr_3_correctable_interrupt() const {
    return int_var__rxcrbfr_3_correctable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxinfo_uncorrectable_interrupt(const cpp_int & _val) { 
    // rxinfo_uncorrectable_interrupt
    int_var__rxinfo_uncorrectable_interrupt = _val.convert_to< rxinfo_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxinfo_uncorrectable_interrupt() const {
    return int_var__rxinfo_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxinfo_correctable_interrupt(const cpp_int & _val) { 
    // rxinfo_correctable_interrupt
    int_var__rxinfo_correctable_interrupt = _val.convert_to< rxinfo_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::rxinfo_correctable_interrupt() const {
    return int_var__rxinfo_correctable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::cplst_uncorrectable_interrupt(const cpp_int & _val) { 
    // cplst_uncorrectable_interrupt
    int_var__cplst_uncorrectable_interrupt = _val.convert_to< cplst_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::cplst_uncorrectable_interrupt() const {
    return int_var__cplst_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::cplst_correctable_interrupt(const cpp_int & _val) { 
    // cplst_correctable_interrupt
    int_var__cplst_correctable_interrupt = _val.convert_to< cplst_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::cplst_correctable_interrupt() const {
    return int_var__cplst_correctable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::romask_uncorrectable_interrupt(const cpp_int & _val) { 
    // romask_uncorrectable_interrupt
    int_var__romask_uncorrectable_interrupt = _val.convert_to< romask_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::romask_uncorrectable_interrupt() const {
    return int_var__romask_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::romask_correctable_interrupt(const cpp_int & _val) { 
    // romask_correctable_interrupt
    int_var__romask_correctable_interrupt = _val.convert_to< romask_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::romask_correctable_interrupt() const {
    return int_var__romask_correctable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::pmr_uncorrectable_interrupt(const cpp_int & _val) { 
    // pmr_uncorrectable_interrupt
    int_var__pmr_uncorrectable_interrupt = _val.convert_to< pmr_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::pmr_uncorrectable_interrupt() const {
    return int_var__pmr_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::pmr_correctable_interrupt(const cpp_int & _val) { 
    // pmr_correctable_interrupt
    int_var__pmr_correctable_interrupt = _val.convert_to< pmr_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::pmr_correctable_interrupt() const {
    return int_var__pmr_correctable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::prt_uncorrectable_interrupt(const cpp_int & _val) { 
    // prt_uncorrectable_interrupt
    int_var__prt_uncorrectable_interrupt = _val.convert_to< prt_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::prt_uncorrectable_interrupt() const {
    return int_var__prt_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_tgt_ecc_int_test_set_t::prt_correctable_interrupt(const cpp_int & _val) { 
    // prt_correctable_interrupt
    int_var__prt_correctable_interrupt = _val.convert_to< prt_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_tgt_ecc_int_test_set_t::prt_correctable_interrupt() const {
    return int_var__prt_correctable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::pcihdrt_uncorrectable_enable(const cpp_int & _val) { 
    // pcihdrt_uncorrectable_enable
    int_var__pcihdrt_uncorrectable_enable = _val.convert_to< pcihdrt_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::pcihdrt_uncorrectable_enable() const {
    return int_var__pcihdrt_uncorrectable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::pcihdrt_correctable_enable(const cpp_int & _val) { 
    // pcihdrt_correctable_enable
    int_var__pcihdrt_correctable_enable = _val.convert_to< pcihdrt_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::pcihdrt_correctable_enable() const {
    return int_var__pcihdrt_correctable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::portmap_uncorrectable_enable(const cpp_int & _val) { 
    // portmap_uncorrectable_enable
    int_var__portmap_uncorrectable_enable = _val.convert_to< portmap_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::portmap_uncorrectable_enable() const {
    return int_var__portmap_uncorrectable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::portmap_correctable_enable(const cpp_int & _val) { 
    // portmap_correctable_enable
    int_var__portmap_correctable_enable = _val.convert_to< portmap_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::portmap_correctable_enable() const {
    return int_var__portmap_correctable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrhdr_uncorrectable_enable(const cpp_int & _val) { 
    // wrhdr_uncorrectable_enable
    int_var__wrhdr_uncorrectable_enable = _val.convert_to< wrhdr_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrhdr_uncorrectable_enable() const {
    return int_var__wrhdr_uncorrectable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrhdr_correctable_enable(const cpp_int & _val) { 
    // wrhdr_correctable_enable
    int_var__wrhdr_correctable_enable = _val.convert_to< wrhdr_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrhdr_correctable_enable() const {
    return int_var__wrhdr_correctable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::rdhdr_uncorrectable_enable(const cpp_int & _val) { 
    // rdhdr_uncorrectable_enable
    int_var__rdhdr_uncorrectable_enable = _val.convert_to< rdhdr_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::rdhdr_uncorrectable_enable() const {
    return int_var__rdhdr_uncorrectable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::rdhdr_correctable_enable(const cpp_int & _val) { 
    // rdhdr_correctable_enable
    int_var__rdhdr_correctable_enable = _val.convert_to< rdhdr_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::rdhdr_correctable_enable() const {
    return int_var__rdhdr_correctable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrbfr_0_uncorrectable_enable(const cpp_int & _val) { 
    // wrbfr_0_uncorrectable_enable
    int_var__wrbfr_0_uncorrectable_enable = _val.convert_to< wrbfr_0_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrbfr_0_uncorrectable_enable() const {
    return int_var__wrbfr_0_uncorrectable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrbfr_0_correctable_enable(const cpp_int & _val) { 
    // wrbfr_0_correctable_enable
    int_var__wrbfr_0_correctable_enable = _val.convert_to< wrbfr_0_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrbfr_0_correctable_enable() const {
    return int_var__wrbfr_0_correctable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrbfr_1_uncorrectable_enable(const cpp_int & _val) { 
    // wrbfr_1_uncorrectable_enable
    int_var__wrbfr_1_uncorrectable_enable = _val.convert_to< wrbfr_1_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrbfr_1_uncorrectable_enable() const {
    return int_var__wrbfr_1_uncorrectable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrbfr_1_correctable_enable(const cpp_int & _val) { 
    // wrbfr_1_correctable_enable
    int_var__wrbfr_1_correctable_enable = _val.convert_to< wrbfr_1_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrbfr_1_correctable_enable() const {
    return int_var__wrbfr_1_correctable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrbfr_2_uncorrectable_enable(const cpp_int & _val) { 
    // wrbfr_2_uncorrectable_enable
    int_var__wrbfr_2_uncorrectable_enable = _val.convert_to< wrbfr_2_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrbfr_2_uncorrectable_enable() const {
    return int_var__wrbfr_2_uncorrectable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrbfr_2_correctable_enable(const cpp_int & _val) { 
    // wrbfr_2_correctable_enable
    int_var__wrbfr_2_correctable_enable = _val.convert_to< wrbfr_2_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrbfr_2_correctable_enable() const {
    return int_var__wrbfr_2_correctable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrbfr_3_uncorrectable_enable(const cpp_int & _val) { 
    // wrbfr_3_uncorrectable_enable
    int_var__wrbfr_3_uncorrectable_enable = _val.convert_to< wrbfr_3_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrbfr_3_uncorrectable_enable() const {
    return int_var__wrbfr_3_uncorrectable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrbfr_3_correctable_enable(const cpp_int & _val) { 
    // wrbfr_3_correctable_enable
    int_var__wrbfr_3_correctable_enable = _val.convert_to< wrbfr_3_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::wrbfr_3_correctable_enable() const {
    return int_var__wrbfr_3_correctable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::cplbfr_uncorrectable_enable(const cpp_int & _val) { 
    // cplbfr_uncorrectable_enable
    int_var__cplbfr_uncorrectable_enable = _val.convert_to< cplbfr_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::cplbfr_uncorrectable_enable() const {
    return int_var__cplbfr_uncorrectable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_int_enable_clear_t::cplbfr_correctable_enable(const cpp_int & _val) { 
    // cplbfr_correctable_enable
    int_var__cplbfr_correctable_enable = _val.convert_to< cplbfr_correctable_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_int_enable_clear_t::cplbfr_correctable_enable() const {
    return int_var__cplbfr_correctable_enable;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::pcihdrt_uncorrectable_interrupt(const cpp_int & _val) { 
    // pcihdrt_uncorrectable_interrupt
    int_var__pcihdrt_uncorrectable_interrupt = _val.convert_to< pcihdrt_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::pcihdrt_uncorrectable_interrupt() const {
    return int_var__pcihdrt_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::pcihdrt_correctable_interrupt(const cpp_int & _val) { 
    // pcihdrt_correctable_interrupt
    int_var__pcihdrt_correctable_interrupt = _val.convert_to< pcihdrt_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::pcihdrt_correctable_interrupt() const {
    return int_var__pcihdrt_correctable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::portmap_uncorrectable_interrupt(const cpp_int & _val) { 
    // portmap_uncorrectable_interrupt
    int_var__portmap_uncorrectable_interrupt = _val.convert_to< portmap_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::portmap_uncorrectable_interrupt() const {
    return int_var__portmap_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::portmap_correctable_interrupt(const cpp_int & _val) { 
    // portmap_correctable_interrupt
    int_var__portmap_correctable_interrupt = _val.convert_to< portmap_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::portmap_correctable_interrupt() const {
    return int_var__portmap_correctable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::wrhdr_uncorrectable_interrupt(const cpp_int & _val) { 
    // wrhdr_uncorrectable_interrupt
    int_var__wrhdr_uncorrectable_interrupt = _val.convert_to< wrhdr_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::wrhdr_uncorrectable_interrupt() const {
    return int_var__wrhdr_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::wrhdr_correctable_interrupt(const cpp_int & _val) { 
    // wrhdr_correctable_interrupt
    int_var__wrhdr_correctable_interrupt = _val.convert_to< wrhdr_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::wrhdr_correctable_interrupt() const {
    return int_var__wrhdr_correctable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::rdhdr_uncorrectable_interrupt(const cpp_int & _val) { 
    // rdhdr_uncorrectable_interrupt
    int_var__rdhdr_uncorrectable_interrupt = _val.convert_to< rdhdr_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::rdhdr_uncorrectable_interrupt() const {
    return int_var__rdhdr_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::rdhdr_correctable_interrupt(const cpp_int & _val) { 
    // rdhdr_correctable_interrupt
    int_var__rdhdr_correctable_interrupt = _val.convert_to< rdhdr_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::rdhdr_correctable_interrupt() const {
    return int_var__rdhdr_correctable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::wrbfr_0_uncorrectable_interrupt(const cpp_int & _val) { 
    // wrbfr_0_uncorrectable_interrupt
    int_var__wrbfr_0_uncorrectable_interrupt = _val.convert_to< wrbfr_0_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::wrbfr_0_uncorrectable_interrupt() const {
    return int_var__wrbfr_0_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::wrbfr_0_correctable_interrupt(const cpp_int & _val) { 
    // wrbfr_0_correctable_interrupt
    int_var__wrbfr_0_correctable_interrupt = _val.convert_to< wrbfr_0_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::wrbfr_0_correctable_interrupt() const {
    return int_var__wrbfr_0_correctable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::wrbfr_1_uncorrectable_interrupt(const cpp_int & _val) { 
    // wrbfr_1_uncorrectable_interrupt
    int_var__wrbfr_1_uncorrectable_interrupt = _val.convert_to< wrbfr_1_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::wrbfr_1_uncorrectable_interrupt() const {
    return int_var__wrbfr_1_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::wrbfr_1_correctable_interrupt(const cpp_int & _val) { 
    // wrbfr_1_correctable_interrupt
    int_var__wrbfr_1_correctable_interrupt = _val.convert_to< wrbfr_1_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::wrbfr_1_correctable_interrupt() const {
    return int_var__wrbfr_1_correctable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::wrbfr_2_uncorrectable_interrupt(const cpp_int & _val) { 
    // wrbfr_2_uncorrectable_interrupt
    int_var__wrbfr_2_uncorrectable_interrupt = _val.convert_to< wrbfr_2_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::wrbfr_2_uncorrectable_interrupt() const {
    return int_var__wrbfr_2_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::wrbfr_2_correctable_interrupt(const cpp_int & _val) { 
    // wrbfr_2_correctable_interrupt
    int_var__wrbfr_2_correctable_interrupt = _val.convert_to< wrbfr_2_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::wrbfr_2_correctable_interrupt() const {
    return int_var__wrbfr_2_correctable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::wrbfr_3_uncorrectable_interrupt(const cpp_int & _val) { 
    // wrbfr_3_uncorrectable_interrupt
    int_var__wrbfr_3_uncorrectable_interrupt = _val.convert_to< wrbfr_3_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::wrbfr_3_uncorrectable_interrupt() const {
    return int_var__wrbfr_3_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::wrbfr_3_correctable_interrupt(const cpp_int & _val) { 
    // wrbfr_3_correctable_interrupt
    int_var__wrbfr_3_correctable_interrupt = _val.convert_to< wrbfr_3_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::wrbfr_3_correctable_interrupt() const {
    return int_var__wrbfr_3_correctable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::cplbfr_uncorrectable_interrupt(const cpp_int & _val) { 
    // cplbfr_uncorrectable_interrupt
    int_var__cplbfr_uncorrectable_interrupt = _val.convert_to< cplbfr_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::cplbfr_uncorrectable_interrupt() const {
    return int_var__cplbfr_uncorrectable_interrupt;
}
    
void cap_pxb_csr_int_itr_ecc_intreg_t::cplbfr_correctable_interrupt(const cpp_int & _val) { 
    // cplbfr_correctable_interrupt
    int_var__cplbfr_correctable_interrupt = _val.convert_to< cplbfr_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_itr_ecc_intreg_t::cplbfr_correctable_interrupt() const {
    return int_var__cplbfr_correctable_interrupt;
}
    
void cap_pxb_csr_intreg_status_t::int_tgt_ecc_interrupt(const cpp_int & _val) { 
    // int_tgt_ecc_interrupt
    int_var__int_tgt_ecc_interrupt = _val.convert_to< int_tgt_ecc_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_intreg_status_t::int_tgt_ecc_interrupt() const {
    return int_var__int_tgt_ecc_interrupt;
}
    
void cap_pxb_csr_intreg_status_t::int_itr_ecc_interrupt(const cpp_int & _val) { 
    // int_itr_ecc_interrupt
    int_var__int_itr_ecc_interrupt = _val.convert_to< int_itr_ecc_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_intreg_status_t::int_itr_ecc_interrupt() const {
    return int_var__int_itr_ecc_interrupt;
}
    
void cap_pxb_csr_intreg_status_t::int_err_interrupt(const cpp_int & _val) { 
    // int_err_interrupt
    int_var__int_err_interrupt = _val.convert_to< int_err_interrupt_cpp_int_t >();
}

cpp_int cap_pxb_csr_intreg_status_t::int_err_interrupt() const {
    return int_var__int_err_interrupt;
}
    
void cap_pxb_csr_int_groups_int_enable_rw_reg_t::int_tgt_ecc_enable(const cpp_int & _val) { 
    // int_tgt_ecc_enable
    int_var__int_tgt_ecc_enable = _val.convert_to< int_tgt_ecc_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_groups_int_enable_rw_reg_t::int_tgt_ecc_enable() const {
    return int_var__int_tgt_ecc_enable;
}
    
void cap_pxb_csr_int_groups_int_enable_rw_reg_t::int_itr_ecc_enable(const cpp_int & _val) { 
    // int_itr_ecc_enable
    int_var__int_itr_ecc_enable = _val.convert_to< int_itr_ecc_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_groups_int_enable_rw_reg_t::int_itr_ecc_enable() const {
    return int_var__int_itr_ecc_enable;
}
    
void cap_pxb_csr_int_groups_int_enable_rw_reg_t::int_err_enable(const cpp_int & _val) { 
    // int_err_enable
    int_var__int_err_enable = _val.convert_to< int_err_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_int_groups_int_enable_rw_reg_t::int_err_enable() const {
    return int_var__int_err_enable;
}
    
void cap_pxb_csr_sta_inval_cam_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_inval_cam_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_filter_addr_ctl_value_t::value(const cpp_int & _val) { 
    // value
    int_var__value = _val.convert_to< value_cpp_int_t >();
}

cpp_int cap_pxb_csr_filter_addr_ctl_value_t::value() const {
    return int_var__value;
}
    
void cap_pxb_csr_filter_addr_hi_data_t::value(const cpp_int & _val) { 
    // value
    int_var__value = _val.convert_to< value_cpp_int_t >();
}

cpp_int cap_pxb_csr_filter_addr_hi_data_t::value() const {
    return int_var__value;
}
    
void cap_pxb_csr_filter_addr_lo_data_t::value(const cpp_int & _val) { 
    // value
    int_var__value = _val.convert_to< value_cpp_int_t >();
}

cpp_int cap_pxb_csr_filter_addr_lo_data_t::value() const {
    return int_var__value;
}
    
void cap_pxb_csr_dhs_tgt_pmt_ind_entry_t::cmd(const cpp_int & _val) { 
    // cmd
    int_var__cmd = _val.convert_to< cmd_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_pmt_ind_entry_t::cmd() const {
    return int_var__cmd;
}
    
void cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::data0(const cpp_int & _val) { 
    // data0
    int_var__data0 = _val.convert_to< data0_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::data0() const {
    return int_var__data0;
}
    
void cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::data1(const cpp_int & _val) { 
    // data1
    int_var__data1 = _val.convert_to< data1_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::data1() const {
    return int_var__data1;
}
    
void cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::data2(const cpp_int & _val) { 
    // data2
    int_var__data2 = _val.convert_to< data2_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::data2() const {
    return int_var__data2;
}
    
void cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::data3(const cpp_int & _val) { 
    // data3
    int_var__data3 = _val.convert_to< data3_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::data3() const {
    return int_var__data3;
}
    
void cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::cpl_stat(const cpp_int & _val) { 
    // cpl_stat
    int_var__cpl_stat = _val.convert_to< cpl_stat_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::cpl_stat() const {
    return int_var__cpl_stat;
}
    
void cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::port_id(const cpp_int & _val) { 
    // port_id
    int_var__port_id = _val.convert_to< port_id_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::port_id() const {
    return int_var__port_id;
}
    
void cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::axi_id(const cpp_int & _val) { 
    // axi_id
    int_var__axi_id = _val.convert_to< axi_id_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::axi_id() const {
    return int_var__axi_id;
}
    
void cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::fetch_rsp(const cpp_int & _val) { 
    // fetch_rsp
    int_var__fetch_rsp = _val.convert_to< fetch_rsp_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::fetch_rsp() const {
    return int_var__fetch_rsp;
}
    
void cap_pxb_csr_dhs_tgt_notify_entry_t::posted(const cpp_int & _val) { 
    // posted
    int_var__posted = _val.convert_to< posted_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_notify_entry_t::posted() const {
    return int_var__posted;
}
    
void cap_pxb_csr_dhs_tgt_notify_entry_t::completed(const cpp_int & _val) { 
    // completed
    int_var__completed = _val.convert_to< completed_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_notify_entry_t::completed() const {
    return int_var__completed;
}
    
void cap_pxb_csr_dhs_itr_cplbfr15_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr15_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_cplbfr15_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr15_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_cplbfr14_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr14_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_cplbfr14_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr14_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_cplbfr13_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr13_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_cplbfr13_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr13_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_cplbfr12_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr12_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_cplbfr12_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr12_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_cplbfr11_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr11_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_cplbfr11_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr11_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_cplbfr10_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr10_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_cplbfr10_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr10_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_cplbfr9_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr9_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_cplbfr9_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr9_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_cplbfr8_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr8_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_cplbfr8_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr8_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_cplbfr7_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr7_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_cplbfr7_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr7_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_cplbfr6_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr6_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_cplbfr6_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr6_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_cplbfr5_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr5_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_cplbfr5_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr5_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_cplbfr4_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr4_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_cplbfr4_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr4_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_cplbfr3_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr3_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_cplbfr3_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr3_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_cplbfr2_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr2_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_cplbfr2_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr2_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_cplbfr1_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr1_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_cplbfr1_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr1_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_cplbfr0_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr0_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_cplbfr0_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_cplbfr0_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::valid(const cpp_int & _val) { 
    // valid
    int_var__valid = _val.convert_to< valid_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::valid() const {
    return int_var__valid;
}
    
void cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::rc_bdf(const cpp_int & _val) { 
    // rc_bdf
    int_var__rc_bdf = _val.convert_to< rc_bdf_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::rc_bdf() const {
    return int_var__rc_bdf;
}
    
void cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::port_id(const cpp_int & _val) { 
    // port_id
    int_var__port_id = _val.convert_to< port_id_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::port_id() const {
    return int_var__port_id;
}
    
void cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::VFID(const cpp_int & _val) { 
    // VFID
    int_var__VFID = _val.convert_to< VFID_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::VFID() const {
    return int_var__VFID;
}
    
void cap_pxb_csr_dhs_tgt_rdcontext_entry_t::state(const cpp_int & _val) { 
    // state
    int_var__state = _val.convert_to< state_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rdcontext_entry_t::state() const {
    return int_var__state;
}
    
void cap_pxb_csr_dhs_tgt_rdcontext_entry_t::portid(const cpp_int & _val) { 
    // portid
    int_var__portid = _val.convert_to< portid_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rdcontext_entry_t::portid() const {
    return int_var__portid;
}
    
void cap_pxb_csr_dhs_tgt_rdcontext_entry_t::is_nonposted_wr(const cpp_int & _val) { 
    // is_nonposted_wr
    int_var__is_nonposted_wr = _val.convert_to< is_nonposted_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rdcontext_entry_t::is_nonposted_wr() const {
    return int_var__is_nonposted_wr;
}
    
void cap_pxb_csr_dhs_tgt_rdcontext_entry_t::is_posted_wr(const cpp_int & _val) { 
    // is_posted_wr
    int_var__is_posted_wr = _val.convert_to< is_posted_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rdcontext_entry_t::is_posted_wr() const {
    return int_var__is_posted_wr;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::state(const cpp_int & _val) { 
    // state
    int_var__state = _val.convert_to< state_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::state() const {
    return int_var__state;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::portid(const cpp_int & _val) { 
    // portid
    int_var__portid = _val.convert_to< portid_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::portid() const {
    return int_var__portid;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::tag(const cpp_int & _val) { 
    // tag
    int_var__tag = _val.convert_to< tag_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::tag() const {
    return int_var__tag;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::axi_id(const cpp_int & _val) { 
    // axi_id
    int_var__axi_id = _val.convert_to< axi_id_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::axi_id() const {
    return int_var__axi_id;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::raddr(const cpp_int & _val) { 
    // raddr
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::raddr() const {
    return int_var__raddr;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::rsize(const cpp_int & _val) { 
    // rsize
    int_var__rsize = _val.convert_to< rsize_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::rsize() const {
    return int_var__rsize;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::timer(const cpp_int & _val) { 
    // timer
    int_var__timer = _val.convert_to< timer_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::timer() const {
    return int_var__timer;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::bdf(const cpp_int & _val) { 
    // bdf
    int_var__bdf = _val.convert_to< bdf_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::bdf() const {
    return int_var__bdf;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::aerr(const cpp_int & _val) { 
    // aerr
    int_var__aerr = _val.convert_to< aerr_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::aerr() const {
    return int_var__aerr;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::derr(const cpp_int & _val) { 
    // derr
    int_var__derr = _val.convert_to< derr_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::derr() const {
    return int_var__derr;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::terr(const cpp_int & _val) { 
    // terr
    int_var__terr = _val.convert_to< terr_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::terr() const {
    return int_var__terr;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::lineaddr(const cpp_int & _val) { 
    // lineaddr
    int_var__lineaddr = _val.convert_to< lineaddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::lineaddr() const {
    return int_var__lineaddr;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::linesize(const cpp_int & _val) { 
    // linesize
    int_var__linesize = _val.convert_to< linesize_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::linesize() const {
    return int_var__linesize;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::seg_first(const cpp_int & _val) { 
    // seg_first
    int_var__seg_first = _val.convert_to< seg_first_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::seg_first() const {
    return int_var__seg_first;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::seg_last(const cpp_int & _val) { 
    // seg_last
    int_var__seg_last = _val.convert_to< seg_last_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::seg_last() const {
    return int_var__seg_last;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::seg_next(const cpp_int & _val) { 
    // seg_next
    int_var__seg_next = _val.convert_to< seg_next_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::seg_next() const {
    return int_var__seg_next;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::is_raw(const cpp_int & _val) { 
    // is_raw
    int_var__is_raw = _val.convert_to< is_raw_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::is_raw() const {
    return int_var__is_raw;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::is_nonposted_wr(const cpp_int & _val) { 
    // is_nonposted_wr
    int_var__is_nonposted_wr = _val.convert_to< is_nonposted_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::is_nonposted_wr() const {
    return int_var__is_nonposted_wr;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::atomic_state(const cpp_int & _val) { 
    // atomic_state
    int_var__atomic_state = _val.convert_to< atomic_state_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::atomic_state() const {
    return int_var__atomic_state;
}
    
void cap_pxb_csr_dhs_itr_rdcontext_entry_t::is_narrow(const cpp_int & _val) { 
    // is_narrow
    int_var__is_narrow = _val.convert_to< is_narrow_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdcontext_entry_t::is_narrow() const {
    return int_var__is_narrow;
}
    
void cap_pxb_csr_dhs_itr_rdhdr_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdhdr_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_rdhdr_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_rdhdr_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_wrhdr_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_wrhdr_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_wrhdr_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_wrhdr_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_wrbfr3_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_wrbfr3_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_wrbfr3_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_wrbfr3_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_wrbfr2_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_wrbfr2_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_wrbfr2_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_wrbfr2_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_wrbfr1_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_wrbfr1_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_wrbfr1_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_wrbfr1_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_wrbfr0_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_wrbfr0_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_itr_wrbfr0_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_wrbfr0_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_tgt_aximst4_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_aximst4_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_tgt_aximst4_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_aximst4_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_tgt_aximst3_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_aximst3_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_tgt_aximst3_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_aximst3_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_tgt_aximst2_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_aximst2_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_tgt_aximst2_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_aximst2_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_tgt_aximst1_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_aximst1_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_tgt_aximst1_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_aximst1_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_tgt_aximst0_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_aximst0_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_tgt_aximst0_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_aximst0_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_tgt_romask_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_romask_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_tgt_romask_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_romask_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_tgt_cplst_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_cplst_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_tgt_cplst_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_cplst_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_tgt_rxinfo_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rxinfo_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_tgt_rxinfo_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rxinfo_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_tgt_prt_entry_t::entry_data(const cpp_int & _val) { 
    // entry_data
    int_var__entry_data = _val.convert_to< entry_data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_prt_entry_t::entry_data() const {
    return int_var__entry_data;
}
    
void cap_pxb_csr_dhs_tgt_prt_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_prt_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_tgt_pmr_entry_t::entry_data(const cpp_int & _val) { 
    // entry_data
    int_var__entry_data = _val.convert_to< entry_data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_pmr_entry_t::entry_data() const {
    return int_var__entry_data;
}
    
void cap_pxb_csr_dhs_tgt_pmr_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_pmr_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_tgt_pmt_entry_t::x_data(const cpp_int & _val) { 
    // x_data
    int_var__x_data = _val.convert_to< x_data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_pmt_entry_t::x_data() const {
    return int_var__x_data;
}
    
void cap_pxb_csr_dhs_tgt_pmt_entry_t::y_data(const cpp_int & _val) { 
    // y_data
    int_var__y_data = _val.convert_to< y_data_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_pmt_entry_t::y_data() const {
    return int_var__y_data;
}
    
void cap_pxb_csr_dhs_tgt_pmt_entry_t::valid(const cpp_int & _val) { 
    // valid
    int_var__valid = _val.convert_to< valid_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_tgt_pmt_entry_t::valid() const {
    return int_var__valid;
}
    
void cap_pxb_csr_dhs_itr_portmap_entry_t::dest(const cpp_int & _val) { 
    // dest
    int_var__dest = _val.convert_to< dest_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_portmap_entry_t::dest() const {
    return int_var__dest;
}
    
void cap_pxb_csr_dhs_itr_portmap_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_portmap_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::valid(const cpp_int & _val) { 
    // valid
    int_var__valid = _val.convert_to< valid_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::valid() const {
    return int_var__valid;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::bdf(const cpp_int & _val) { 
    // bdf
    int_var__bdf = _val.convert_to< bdf_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::bdf() const {
    return int_var__bdf;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::td(const cpp_int & _val) { 
    // td
    int_var__td = _val.convert_to< td_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::td() const {
    return int_var__td;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::pasid_en(const cpp_int & _val) { 
    // pasid_en
    int_var__pasid_en = _val.convert_to< pasid_en_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::pasid_en() const {
    return int_var__pasid_en;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::pasid_source(const cpp_int & _val) { 
    // pasid_source
    int_var__pasid_source = _val.convert_to< pasid_source_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::pasid_source() const {
    return int_var__pasid_source;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::pasid_value(const cpp_int & _val) { 
    // pasid_value
    int_var__pasid_value = _val.convert_to< pasid_value_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::pasid_value() const {
    return int_var__pasid_value;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::pasid_exe(const cpp_int & _val) { 
    // pasid_exe
    int_var__pasid_exe = _val.convert_to< pasid_exe_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::pasid_exe() const {
    return int_var__pasid_exe;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::pasid_privl(const cpp_int & _val) { 
    // pasid_privl
    int_var__pasid_privl = _val.convert_to< pasid_privl_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::pasid_privl() const {
    return int_var__pasid_privl;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::attr2_1_rd(const cpp_int & _val) { 
    // attr2_1_rd
    int_var__attr2_1_rd = _val.convert_to< attr2_1_rd_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::attr2_1_rd() const {
    return int_var__attr2_1_rd;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::attr2_1_wr(const cpp_int & _val) { 
    // attr2_1_wr
    int_var__attr2_1_wr = _val.convert_to< attr2_1_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::attr2_1_wr() const {
    return int_var__attr2_1_wr;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::rc_cfg1(const cpp_int & _val) { 
    // rc_cfg1
    int_var__rc_cfg1 = _val.convert_to< rc_cfg1_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::rc_cfg1() const {
    return int_var__rc_cfg1;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::attr0_rd(const cpp_int & _val) { 
    // attr0_rd
    int_var__attr0_rd = _val.convert_to< attr0_rd_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::attr0_rd() const {
    return int_var__attr0_rd;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::attr0_wr(const cpp_int & _val) { 
    // attr0_wr
    int_var__attr0_wr = _val.convert_to< attr0_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::attr0_wr() const {
    return int_var__attr0_wr;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::ats_at_wr(const cpp_int & _val) { 
    // ats_at_wr
    int_var__ats_at_wr = _val.convert_to< ats_at_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::ats_at_wr() const {
    return int_var__ats_at_wr;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::ats_at_rd(const cpp_int & _val) { 
    // ats_at_rd
    int_var__ats_at_rd = _val.convert_to< ats_at_rd_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::ats_at_rd() const {
    return int_var__ats_at_rd;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::tc(const cpp_int & _val) { 
    // tc
    int_var__tc = _val.convert_to< tc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::tc() const {
    return int_var__tc;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::ln_wr(const cpp_int & _val) { 
    // ln_wr
    int_var__ln_wr = _val.convert_to< ln_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::ln_wr() const {
    return int_var__ln_wr;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::ln_rd(const cpp_int & _val) { 
    // ln_rd
    int_var__ln_rd = _val.convert_to< ln_rd_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::ln_rd() const {
    return int_var__ln_rd;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::rsvd1(const cpp_int & _val) { 
    // rsvd1
    int_var__rsvd1 = _val.convert_to< rsvd1_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::rsvd1() const {
    return int_var__rsvd1;
}
    
void cap_pxb_csr_dhs_itr_pcihdrt_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_dhs_itr_pcihdrt_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_pxb_csr_cnt_axi_bw_mon_wr_t::val(const cpp_int & _val) { 
    // val
    int_var__val = _val.convert_to< val_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_axi_bw_mon_wr_t::val() const {
    return int_var__val;
}
    
void cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::outstanding(const cpp_int & _val) { 
    // outstanding
    int_var__outstanding = _val.convert_to< outstanding_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::outstanding() const {
    return int_var__outstanding;
}
    
void cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::dess_rdy(const cpp_int & _val) { 
    // dess_rdy
    int_var__dess_rdy = _val.convert_to< dess_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::dess_rdy() const {
    return int_var__dess_rdy;
}
    
void cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::maxv(const cpp_int & _val) { 
    // maxv
    int_var__maxv = _val.convert_to< maxv_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::maxv() const {
    return int_var__maxv;
}
    
void cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::avrg(const cpp_int & _val) { 
    // avrg
    int_var__avrg = _val.convert_to< avrg_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::avrg() const {
    return int_var__avrg;
}
    
void cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::maxv(const cpp_int & _val) { 
    // maxv
    int_var__maxv = _val.convert_to< maxv_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::maxv() const {
    return int_var__maxv;
}
    
void cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::avrg(const cpp_int & _val) { 
    // avrg
    int_var__avrg = _val.convert_to< avrg_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::avrg() const {
    return int_var__avrg;
}
    
void cap_pxb_csr_cnt_axi_bw_mon_rd_t::val(const cpp_int & _val) { 
    // val
    int_var__val = _val.convert_to< val_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_axi_bw_mon_rd_t::val() const {
    return int_var__val;
}
    
void cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::outstanding(const cpp_int & _val) { 
    // outstanding
    int_var__outstanding = _val.convert_to< outstanding_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::outstanding() const {
    return int_var__outstanding;
}
    
void cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::dess_rdy(const cpp_int & _val) { 
    // dess_rdy
    int_var__dess_rdy = _val.convert_to< dess_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::dess_rdy() const {
    return int_var__dess_rdy;
}
    
void cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::maxv(const cpp_int & _val) { 
    // maxv
    int_var__maxv = _val.convert_to< maxv_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::maxv() const {
    return int_var__maxv;
}
    
void cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::avrg(const cpp_int & _val) { 
    // avrg
    int_var__avrg = _val.convert_to< avrg_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::avrg() const {
    return int_var__avrg;
}
    
void cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::maxv(const cpp_int & _val) { 
    // maxv
    int_var__maxv = _val.convert_to< maxv_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::maxv() const {
    return int_var__maxv;
}
    
void cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::avrg(const cpp_int & _val) { 
    // avrg
    int_var__avrg = _val.convert_to< avrg_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::avrg() const {
    return int_var__avrg;
}
    
void cap_pxb_csr_cfg_axi_bw_mon_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_axi_bw_mon_t::alpha() const {
    return int_var__alpha;
}
    
void cap_pxb_csr_cfg_axi_bw_mon_t::cycle(const cpp_int & _val) { 
    // cycle
    int_var__cycle = _val.convert_to< cycle_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_axi_bw_mon_t::cycle() const {
    return int_var__cycle;
}
    
void cap_pxb_csr_cfg_axi_bw_mon_t::rcache(const cpp_int & _val) { 
    // rcache
    int_var__rcache = _val.convert_to< rcache_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_axi_bw_mon_t::rcache() const {
    return int_var__rcache;
}
    
void cap_pxb_csr_cfg_axi_bw_mon_t::rcache_msk(const cpp_int & _val) { 
    // rcache_msk
    int_var__rcache_msk = _val.convert_to< rcache_msk_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_axi_bw_mon_t::rcache_msk() const {
    return int_var__rcache_msk;
}
    
void cap_pxb_csr_cfg_axi_bw_mon_t::wcache(const cpp_int & _val) { 
    // wcache
    int_var__wcache = _val.convert_to< wcache_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_axi_bw_mon_t::wcache() const {
    return int_var__wcache;
}
    
void cap_pxb_csr_cfg_axi_bw_mon_t::wcache_msk(const cpp_int & _val) { 
    // wcache_msk
    int_var__wcache_msk = _val.convert_to< wcache_msk_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_axi_bw_mon_t::wcache_msk() const {
    return int_var__wcache_msk;
}
    
void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t::msk(const cpp_int & _val) { 
    // msk
    int_var__msk = _val.convert_to< msk_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t::msk() const {
    return int_var__msk;
}
    
void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t::msk(const cpp_int & _val) { 
    // msk
    int_var__msk = _val.convert_to< msk_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t::msk() const {
    return int_var__msk;
}
    
void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t::msk(const cpp_int & _val) { 
    // msk
    int_var__msk = _val.convert_to< msk_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t::msk() const {
    return int_var__msk;
}
    
void cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t::msk(const cpp_int & _val) { 
    // msk
    int_var__msk = _val.convert_to< msk_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t::msk() const {
    return int_var__msk;
}
    
void cap_pxb_csr_cfg_uid2sidLL_t::spare(const cpp_int & _val) { 
    // spare
    int_var__spare = _val.convert_to< spare_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_uid2sidLL_t::spare() const {
    return int_var__spare;
}
    
void cap_pxb_csr_cfg_uid2sidLL_t::mode(const cpp_int & _val) { 
    // mode
    int_var__mode = _val.convert_to< mode_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_uid2sidLL_t::mode() const {
    return int_var__mode;
}
    
void cap_pxb_csr_cfg_uid2sidLL_t::base(const cpp_int & _val) { 
    // base
    int_var__base = _val.convert_to< base_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_uid2sidLL_t::base() const {
    return int_var__base;
}
    
void cap_pxb_csr_cfg_filter_t::awcache_mask(const cpp_int & _val) { 
    // awcache_mask
    int_var__awcache_mask = _val.convert_to< awcache_mask_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_filter_t::awcache_mask() const {
    return int_var__awcache_mask;
}
    
void cap_pxb_csr_cfg_filter_t::awcache_match(const cpp_int & _val) { 
    // awcache_match
    int_var__awcache_match = _val.convert_to< awcache_match_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_filter_t::awcache_match() const {
    return int_var__awcache_match;
}
    
void cap_pxb_csr_cfg_filter_t::arcache_mask(const cpp_int & _val) { 
    // arcache_mask
    int_var__arcache_mask = _val.convert_to< arcache_mask_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_filter_t::arcache_mask() const {
    return int_var__arcache_mask;
}
    
void cap_pxb_csr_cfg_filter_t::arcache_match(const cpp_int & _val) { 
    // arcache_match
    int_var__arcache_match = _val.convert_to< arcache_match_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_filter_t::arcache_match() const {
    return int_var__arcache_match;
}
    
void cap_pxb_csr_cfg_pxb_spare3_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pxb_spare3_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_cfg_pxb_spare2_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pxb_spare2_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_cfg_pxb_spare1_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pxb_spare1_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_cfg_pxb_spare0_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pxb_spare0_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_csr_intr_t::dowstream(const cpp_int & _val) { 
    // dowstream
    int_var__dowstream = _val.convert_to< dowstream_cpp_int_t >();
}

cpp_int cap_pxb_csr_csr_intr_t::dowstream() const {
    return int_var__dowstream;
}
    
void cap_pxb_csr_csr_intr_t::dowstream_enable(const cpp_int & _val) { 
    // dowstream_enable
    int_var__dowstream_enable = _val.convert_to< dowstream_enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_csr_intr_t::dowstream_enable() const {
    return int_var__dowstream_enable;
}
    
void cap_pxb_csr_sta_tcam_bist_t::done_pass(const cpp_int & _val) { 
    // done_pass
    int_var__done_pass = _val.convert_to< done_pass_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tcam_bist_t::done_pass() const {
    return int_var__done_pass;
}
    
void cap_pxb_csr_sta_tcam_bist_t::done_fail(const cpp_int & _val) { 
    // done_fail
    int_var__done_fail = _val.convert_to< done_fail_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tcam_bist_t::done_fail() const {
    return int_var__done_fail;
}
    
void cap_pxb_csr_cfg_tcam_bist_t::run(const cpp_int & _val) { 
    // run
    int_var__run = _val.convert_to< run_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tcam_bist_t::run() const {
    return int_var__run;
}
    
void cap_pxb_csr_sta_sram_bist_t::done_pass(const cpp_int & _val) { 
    // done_pass
    int_var__done_pass = _val.convert_to< done_pass_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_sram_bist_t::done_pass() const {
    return int_var__done_pass;
}
    
void cap_pxb_csr_sta_sram_bist_t::done_fail(const cpp_int & _val) { 
    // done_fail
    int_var__done_fail = _val.convert_to< done_fail_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_sram_bist_t::done_fail() const {
    return int_var__done_fail;
}
    
void cap_pxb_csr_cfg_sram_bist_t::run(const cpp_int & _val) { 
    // run
    int_var__run = _val.convert_to< run_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_sram_bist_t::run() const {
    return int_var__run;
}
    
void cap_pxb_csr_sat_itr_rdlat3_t::num_samples(const cpp_int & _val) { 
    // num_samples
    int_var__num_samples = _val.convert_to< num_samples_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_rdlat3_t::num_samples() const {
    return int_var__num_samples;
}
    
void cap_pxb_csr_sat_itr_rdlat2_t::num_samples(const cpp_int & _val) { 
    // num_samples
    int_var__num_samples = _val.convert_to< num_samples_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_rdlat2_t::num_samples() const {
    return int_var__num_samples;
}
    
void cap_pxb_csr_sat_itr_rdlat1_t::num_samples(const cpp_int & _val) { 
    // num_samples
    int_var__num_samples = _val.convert_to< num_samples_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_rdlat1_t::num_samples() const {
    return int_var__num_samples;
}
    
void cap_pxb_csr_sat_itr_rdlat0_t::num_samples(const cpp_int & _val) { 
    // num_samples
    int_var__num_samples = _val.convert_to< num_samples_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_rdlat0_t::num_samples() const {
    return int_var__num_samples;
}
    
void cap_pxb_csr_cfg_itr_rdlat_measure_t::thres2(const cpp_int & _val) { 
    // thres2
    int_var__thres2 = _val.convert_to< thres2_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_rdlat_measure_t::thres2() const {
    return int_var__thres2;
}
    
void cap_pxb_csr_cfg_itr_rdlat_measure_t::thres1(const cpp_int & _val) { 
    // thres1
    int_var__thres1 = _val.convert_to< thres1_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_rdlat_measure_t::thres1() const {
    return int_var__thres1;
}
    
void cap_pxb_csr_cfg_itr_rdlat_measure_t::thres0(const cpp_int & _val) { 
    // thres0
    int_var__thres0 = _val.convert_to< thres0_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_rdlat_measure_t::thres0() const {
    return int_var__thres0;
}
    
void cap_pxb_csr_cfg_itr_rdlat_measure_t::portid(const cpp_int & _val) { 
    // portid
    int_var__portid = _val.convert_to< portid_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_rdlat_measure_t::portid() const {
    return int_var__portid;
}
    
void cap_pxb_csr_sta_diag_spare1_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_diag_spare1_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_cfg_diag_spare1_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_diag_spare1_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_sta_diag_spare0_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_diag_spare0_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_cfg_diag_spare0_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_diag_spare0_t::data() const {
    return int_var__data;
}
    
void cap_pxb_csr_cfg_debug_port_t::select(const cpp_int & _val) { 
    // select
    int_var__select = _val.convert_to< select_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_debug_port_t::select() const {
    return int_var__select;
}
    
void cap_pxb_csr_cfg_debug_port_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_debug_port_t::enable() const {
    return int_var__enable;
}
    
void cap_pxb_csr_cfg_tgt_axi_attr_t::arcache(const cpp_int & _val) { 
    // arcache
    int_var__arcache = _val.convert_to< arcache_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_axi_attr_t::arcache() const {
    return int_var__arcache;
}
    
void cap_pxb_csr_cfg_tgt_axi_attr_t::awcache(const cpp_int & _val) { 
    // awcache
    int_var__awcache = _val.convert_to< awcache_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_axi_attr_t::awcache() const {
    return int_var__awcache;
}
    
void cap_pxb_csr_cfg_tgt_axi_attr_t::prot(const cpp_int & _val) { 
    // prot
    int_var__prot = _val.convert_to< prot_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_axi_attr_t::prot() const {
    return int_var__prot;
}
    
void cap_pxb_csr_cfg_tgt_axi_attr_t::qos(const cpp_int & _val) { 
    // qos
    int_var__qos = _val.convert_to< qos_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_axi_attr_t::qos() const {
    return int_var__qos;
}
    
void cap_pxb_csr_cfg_tgt_axi_attr_t::lock(const cpp_int & _val) { 
    // lock
    int_var__lock = _val.convert_to< lock_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_axi_attr_t::lock() const {
    return int_var__lock;
}
    
void cap_pxb_csr_sat_tgt_rsp_err_t::ind_cnxt_mismatch(const cpp_int & _val) { 
    // ind_cnxt_mismatch
    int_var__ind_cnxt_mismatch = _val.convert_to< ind_cnxt_mismatch_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_rsp_err_t::ind_cnxt_mismatch() const {
    return int_var__ind_cnxt_mismatch;
}
    
void cap_pxb_csr_sat_tgt_rsp_err_t::rresp_err(const cpp_int & _val) { 
    // rresp_err
    int_var__rresp_err = _val.convert_to< rresp_err_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_rsp_err_t::rresp_err() const {
    return int_var__rresp_err;
}
    
void cap_pxb_csr_sat_tgt_rsp_err_t::bresp_err(const cpp_int & _val) { 
    // bresp_err
    int_var__bresp_err = _val.convert_to< bresp_err_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_rsp_err_t::bresp_err() const {
    return int_var__bresp_err;
}
    
void cap_pxb_csr_sat_itr_req_portgate_t::closed(const cpp_int & _val) { 
    // closed
    int_var__closed = _val.convert_to< closed_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_req_portgate_t::closed() const {
    return int_var__closed;
}
    
void cap_pxb_csr_sat_itr_rsp_err_t::axi(const cpp_int & _val) { 
    // axi
    int_var__axi = _val.convert_to< axi_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_rsp_err_t::axi() const {
    return int_var__axi;
}
    
void cap_pxb_csr_sat_itr_rsp_err_t::cpl_timeout(const cpp_int & _val) { 
    // cpl_timeout
    int_var__cpl_timeout = _val.convert_to< cpl_timeout_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_rsp_err_t::cpl_timeout() const {
    return int_var__cpl_timeout;
}
    
void cap_pxb_csr_sat_itr_cpl_err_t::ecrc(const cpp_int & _val) { 
    // ecrc
    int_var__ecrc = _val.convert_to< ecrc_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_cpl_err_t::ecrc() const {
    return int_var__ecrc;
}
    
void cap_pxb_csr_sat_itr_cpl_err_t::rxbuf_ecc(const cpp_int & _val) { 
    // rxbuf_ecc
    int_var__rxbuf_ecc = _val.convert_to< rxbuf_ecc_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_cpl_err_t::rxbuf_ecc() const {
    return int_var__rxbuf_ecc;
}
    
void cap_pxb_csr_sat_itr_cpl_err_t::cpl_stat(const cpp_int & _val) { 
    // cpl_stat
    int_var__cpl_stat = _val.convert_to< cpl_stat_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_cpl_err_t::cpl_stat() const {
    return int_var__cpl_stat;
}
    
void cap_pxb_csr_sat_itr_cpl_err_t::unexpected(const cpp_int & _val) { 
    // unexpected
    int_var__unexpected = _val.convert_to< unexpected_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_cpl_err_t::unexpected() const {
    return int_var__unexpected;
}
    
void cap_pxb_csr_sat_itr_xfer_unexpected_t::wr256x(const cpp_int & _val) { 
    // wr256x
    int_var__wr256x = _val.convert_to< wr256x_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_xfer_unexpected_t::wr256x() const {
    return int_var__wr256x;
}
    
void cap_pxb_csr_sat_itr_xfer_unexpected_t::rd256x(const cpp_int & _val) { 
    // rd256x
    int_var__rd256x = _val.convert_to< rd256x_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_xfer_unexpected_t::rd256x() const {
    return int_var__rd256x;
}
    
void cap_pxb_csr_sat_itr_xfer_unexpected_t::wr_narrow(const cpp_int & _val) { 
    // wr_narrow
    int_var__wr_narrow = _val.convert_to< wr_narrow_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_xfer_unexpected_t::wr_narrow() const {
    return int_var__wr_narrow;
}
    
void cap_pxb_csr_sat_itr_xfer_unexpected_t::rd_narrow(const cpp_int & _val) { 
    // rd_narrow
    int_var__rd_narrow = _val.convert_to< rd_narrow_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_xfer_unexpected_t::rd_narrow() const {
    return int_var__rd_narrow;
}
    
void cap_pxb_csr_sat_itr_req_err_t::unsupp_wr(const cpp_int & _val) { 
    // unsupp_wr
    int_var__unsupp_wr = _val.convert_to< unsupp_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_req_err_t::unsupp_wr() const {
    return int_var__unsupp_wr;
}
    
void cap_pxb_csr_sat_itr_req_err_t::unsupp_rd(const cpp_int & _val) { 
    // unsupp_rd
    int_var__unsupp_rd = _val.convert_to< unsupp_rd_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_req_err_t::unsupp_rd() const {
    return int_var__unsupp_rd;
}
    
void cap_pxb_csr_sat_itr_req_err_t::pcihdrt_miss(const cpp_int & _val) { 
    // pcihdrt_miss
    int_var__pcihdrt_miss = _val.convert_to< pcihdrt_miss_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_req_err_t::pcihdrt_miss() const {
    return int_var__pcihdrt_miss;
}
    
void cap_pxb_csr_sat_itr_req_err_t::bus_master_dis(const cpp_int & _val) { 
    // bus_master_dis
    int_var__bus_master_dis = _val.convert_to< bus_master_dis_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_itr_req_err_t::bus_master_dis() const {
    return int_var__bus_master_dis;
}
    
void cap_pxb_csr_sat_tgt_ind_reason_t::pmr_force(const cpp_int & _val) { 
    // pmr_force
    int_var__pmr_force = _val.convert_to< pmr_force_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_ind_reason_t::pmr_force() const {
    return int_var__pmr_force;
}
    
void cap_pxb_csr_sat_tgt_ind_reason_t::prt_force(const cpp_int & _val) { 
    // prt_force
    int_var__prt_force = _val.convert_to< prt_force_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_ind_reason_t::prt_force() const {
    return int_var__prt_force;
}
    
void cap_pxb_csr_sat_tgt_ind_reason_t::msg(const cpp_int & _val) { 
    // msg
    int_var__msg = _val.convert_to< msg_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_ind_reason_t::msg() const {
    return int_var__msg;
}
    
void cap_pxb_csr_sat_tgt_ind_reason_t::atomic(const cpp_int & _val) { 
    // atomic
    int_var__atomic = _val.convert_to< atomic_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_ind_reason_t::atomic() const {
    return int_var__atomic;
}
    
void cap_pxb_csr_sat_tgt_ind_reason_t::poisoned(const cpp_int & _val) { 
    // poisoned
    int_var__poisoned = _val.convert_to< poisoned_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_ind_reason_t::poisoned() const {
    return int_var__poisoned;
}
    
void cap_pxb_csr_sat_tgt_ind_reason_t::unsupp(const cpp_int & _val) { 
    // unsupp
    int_var__unsupp = _val.convert_to< unsupp_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_ind_reason_t::unsupp() const {
    return int_var__unsupp;
}
    
void cap_pxb_csr_sat_tgt_ind_reason_t::pmv(const cpp_int & _val) { 
    // pmv
    int_var__pmv = _val.convert_to< pmv_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_ind_reason_t::pmv() const {
    return int_var__pmv;
}
    
void cap_pxb_csr_sat_tgt_ind_reason_t::db_pmv(const cpp_int & _val) { 
    // db_pmv
    int_var__db_pmv = _val.convert_to< db_pmv_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_ind_reason_t::db_pmv() const {
    return int_var__db_pmv;
}
    
void cap_pxb_csr_sat_tgt_ind_reason_t::pmt_miss(const cpp_int & _val) { 
    // pmt_miss
    int_var__pmt_miss = _val.convert_to< pmt_miss_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_ind_reason_t::pmt_miss() const {
    return int_var__pmt_miss;
}
    
void cap_pxb_csr_sat_tgt_ind_reason_t::rc_vfid_miss(const cpp_int & _val) { 
    // rc_vfid_miss
    int_var__rc_vfid_miss = _val.convert_to< rc_vfid_miss_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_ind_reason_t::rc_vfid_miss() const {
    return int_var__rc_vfid_miss;
}
    
void cap_pxb_csr_sat_tgt_ind_reason_t::pmr_prt_miss(const cpp_int & _val) { 
    // pmr_prt_miss
    int_var__pmr_prt_miss = _val.convert_to< pmr_prt_miss_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_ind_reason_t::pmr_prt_miss() const {
    return int_var__pmr_prt_miss;
}
    
void cap_pxb_csr_sat_tgt_ind_reason_t::prt_oor(const cpp_int & _val) { 
    // prt_oor
    int_var__prt_oor = _val.convert_to< prt_oor_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_ind_reason_t::prt_oor() const {
    return int_var__prt_oor;
}
    
void cap_pxb_csr_sat_tgt_ind_reason_t::bdf_wcard_oor(const cpp_int & _val) { 
    // bdf_wcard_oor
    int_var__bdf_wcard_oor = _val.convert_to< bdf_wcard_oor_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_ind_reason_t::bdf_wcard_oor() const {
    return int_var__bdf_wcard_oor;
}
    
void cap_pxb_csr_sat_tgt_ind_reason_t::vfid_oor(const cpp_int & _val) { 
    // vfid_oor
    int_var__vfid_oor = _val.convert_to< vfid_oor_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_ind_reason_t::vfid_oor() const {
    return int_var__vfid_oor;
}
    
void cap_pxb_csr_cfg_itr_axi_resp_order_t::rd_strict(const cpp_int & _val) { 
    // rd_strict
    int_var__rd_strict = _val.convert_to< rd_strict_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_axi_resp_order_t::rd_strict() const {
    return int_var__rd_strict;
}
    
void cap_pxb_csr_cfg_itr_axi_resp_order_t::wr_strict(const cpp_int & _val) { 
    // wr_strict
    int_var__wr_strict = _val.convert_to< wr_strict_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_axi_resp_order_t::wr_strict() const {
    return int_var__wr_strict;
}
    
void cap_pxb_csr_cfg_itr_axi_resp_order_t::rd_id_limit(const cpp_int & _val) { 
    // rd_id_limit
    int_var__rd_id_limit = _val.convert_to< rd_id_limit_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_axi_resp_order_t::rd_id_limit() const {
    return int_var__rd_id_limit;
}
    
void cap_pxb_csr_cfg_itr_atomic_seq_cnt_t::rst_mask(const cpp_int & _val) { 
    // rst_mask
    int_var__rst_mask = _val.convert_to< rst_mask_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_atomic_seq_cnt_t::rst_mask() const {
    return int_var__rst_mask;
}
    
void cap_pxb_csr_sta_itr_cnxt_pending_t::num(const cpp_int & _val) { 
    // num
    int_var__num = _val.convert_to< num_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_cnxt_pending_t::num() const {
    return int_var__num;
}
    
void cap_pxb_csr_sta_itr_atomic_seq_cnt_t::err_mask(const cpp_int & _val) { 
    // err_mask
    int_var__err_mask = _val.convert_to< err_mask_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_atomic_seq_cnt_t::err_mask() const {
    return int_var__err_mask;
}
    
void cap_pxb_csr_sta_itr_portfifo_depth_t::port0_wr(const cpp_int & _val) { 
    // port0_wr
    int_var__port0_wr = _val.convert_to< port0_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_portfifo_depth_t::port0_wr() const {
    return int_var__port0_wr;
}
    
void cap_pxb_csr_sta_itr_portfifo_depth_t::port0_rd(const cpp_int & _val) { 
    // port0_rd
    int_var__port0_rd = _val.convert_to< port0_rd_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_portfifo_depth_t::port0_rd() const {
    return int_var__port0_rd;
}
    
void cap_pxb_csr_sta_itr_portfifo_depth_t::port1_wr(const cpp_int & _val) { 
    // port1_wr
    int_var__port1_wr = _val.convert_to< port1_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_portfifo_depth_t::port1_wr() const {
    return int_var__port1_wr;
}
    
void cap_pxb_csr_sta_itr_portfifo_depth_t::port1_rd(const cpp_int & _val) { 
    // port1_rd
    int_var__port1_rd = _val.convert_to< port1_rd_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_portfifo_depth_t::port1_rd() const {
    return int_var__port1_rd;
}
    
void cap_pxb_csr_sta_itr_portfifo_depth_t::port2_wr(const cpp_int & _val) { 
    // port2_wr
    int_var__port2_wr = _val.convert_to< port2_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_portfifo_depth_t::port2_wr() const {
    return int_var__port2_wr;
}
    
void cap_pxb_csr_sta_itr_portfifo_depth_t::port2_rd(const cpp_int & _val) { 
    // port2_rd
    int_var__port2_rd = _val.convert_to< port2_rd_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_portfifo_depth_t::port2_rd() const {
    return int_var__port2_rd;
}
    
void cap_pxb_csr_sta_itr_portfifo_depth_t::port3_wr(const cpp_int & _val) { 
    // port3_wr
    int_var__port3_wr = _val.convert_to< port3_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_portfifo_depth_t::port3_wr() const {
    return int_var__port3_wr;
}
    
void cap_pxb_csr_sta_itr_portfifo_depth_t::port3_rd(const cpp_int & _val) { 
    // port3_rd
    int_var__port3_rd = _val.convert_to< port3_rd_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_portfifo_depth_t::port3_rd() const {
    return int_var__port3_rd;
}
    
void cap_pxb_csr_sta_itr_portfifo_depth_t::port4_wr(const cpp_int & _val) { 
    // port4_wr
    int_var__port4_wr = _val.convert_to< port4_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_portfifo_depth_t::port4_wr() const {
    return int_var__port4_wr;
}
    
void cap_pxb_csr_sta_itr_portfifo_depth_t::port4_rd(const cpp_int & _val) { 
    // port4_rd
    int_var__port4_rd = _val.convert_to< port4_rd_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_portfifo_depth_t::port4_rd() const {
    return int_var__port4_rd;
}
    
void cap_pxb_csr_sta_itr_portfifo_depth_t::port5_wr(const cpp_int & _val) { 
    // port5_wr
    int_var__port5_wr = _val.convert_to< port5_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_portfifo_depth_t::port5_wr() const {
    return int_var__port5_wr;
}
    
void cap_pxb_csr_sta_itr_portfifo_depth_t::port5_rd(const cpp_int & _val) { 
    // port5_rd
    int_var__port5_rd = _val.convert_to< port5_rd_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_portfifo_depth_t::port5_rd() const {
    return int_var__port5_rd;
}
    
void cap_pxb_csr_sta_itr_portfifo_depth_t::port6_wr(const cpp_int & _val) { 
    // port6_wr
    int_var__port6_wr = _val.convert_to< port6_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_portfifo_depth_t::port6_wr() const {
    return int_var__port6_wr;
}
    
void cap_pxb_csr_sta_itr_portfifo_depth_t::port6_rd(const cpp_int & _val) { 
    // port6_rd
    int_var__port6_rd = _val.convert_to< port6_rd_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_portfifo_depth_t::port6_rd() const {
    return int_var__port6_rd;
}
    
void cap_pxb_csr_sta_itr_portfifo_depth_t::port7_wr(const cpp_int & _val) { 
    // port7_wr
    int_var__port7_wr = _val.convert_to< port7_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_portfifo_depth_t::port7_wr() const {
    return int_var__port7_wr;
}
    
void cap_pxb_csr_sta_itr_portfifo_depth_t::port7_rd(const cpp_int & _val) { 
    // port7_rd
    int_var__port7_rd = _val.convert_to< port7_rd_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_portfifo_depth_t::port7_rd() const {
    return int_var__port7_rd;
}
    
void cap_pxb_csr_sta_itr_tags_pending_t::port0(const cpp_int & _val) { 
    // port0
    int_var__port0 = _val.convert_to< port0_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_tags_pending_t::port0() const {
    return int_var__port0;
}
    
void cap_pxb_csr_sta_itr_tags_pending_t::port1(const cpp_int & _val) { 
    // port1
    int_var__port1 = _val.convert_to< port1_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_tags_pending_t::port1() const {
    return int_var__port1;
}
    
void cap_pxb_csr_sta_itr_tags_pending_t::port2(const cpp_int & _val) { 
    // port2
    int_var__port2 = _val.convert_to< port2_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_tags_pending_t::port2() const {
    return int_var__port2;
}
    
void cap_pxb_csr_sta_itr_tags_pending_t::port3(const cpp_int & _val) { 
    // port3
    int_var__port3 = _val.convert_to< port3_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_tags_pending_t::port3() const {
    return int_var__port3;
}
    
void cap_pxb_csr_sta_itr_tags_pending_t::port4(const cpp_int & _val) { 
    // port4
    int_var__port4 = _val.convert_to< port4_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_tags_pending_t::port4() const {
    return int_var__port4;
}
    
void cap_pxb_csr_sta_itr_tags_pending_t::port5(const cpp_int & _val) { 
    // port5
    int_var__port5 = _val.convert_to< port5_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_tags_pending_t::port5() const {
    return int_var__port5;
}
    
void cap_pxb_csr_sta_itr_tags_pending_t::port6(const cpp_int & _val) { 
    // port6
    int_var__port6 = _val.convert_to< port6_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_tags_pending_t::port6() const {
    return int_var__port6;
}
    
void cap_pxb_csr_sta_itr_tags_pending_t::port7(const cpp_int & _val) { 
    // port7
    int_var__port7 = _val.convert_to< port7_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_tags_pending_t::port7() const {
    return int_var__port7;
}
    
void cap_pxb_csr_sta_itr_raw_tlp_t::resp_rdy(const cpp_int & _val) { 
    // resp_rdy
    int_var__resp_rdy = _val.convert_to< resp_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_raw_tlp_t::resp_rdy() const {
    return int_var__resp_rdy;
}
    
void cap_pxb_csr_sta_itr_raw_tlp_t::cpl_stat(const cpp_int & _val) { 
    // cpl_stat
    int_var__cpl_stat = _val.convert_to< cpl_stat_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_raw_tlp_t::cpl_stat() const {
    return int_var__cpl_stat;
}
    
void cap_pxb_csr_sta_itr_raw_tlp_t::cpl_data_err(const cpp_int & _val) { 
    // cpl_data_err
    int_var__cpl_data_err = _val.convert_to< cpl_data_err_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_raw_tlp_t::cpl_data_err() const {
    return int_var__cpl_data_err;
}
    
void cap_pxb_csr_sta_itr_raw_tlp_t::cpl_timeout_err(const cpp_int & _val) { 
    // cpl_timeout_err
    int_var__cpl_timeout_err = _val.convert_to< cpl_timeout_err_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_raw_tlp_t::cpl_timeout_err() const {
    return int_var__cpl_timeout_err;
}
    
void cap_pxb_csr_sta_itr_raw_tlp_t::req_err(const cpp_int & _val) { 
    // req_err
    int_var__req_err = _val.convert_to< req_err_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_raw_tlp_t::req_err() const {
    return int_var__req_err;
}
    
void cap_pxb_csr_sta_itr_raw_tlp_data_t::resp0(const cpp_int & _val) { 
    // resp0
    int_var__resp0 = _val.convert_to< resp0_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_raw_tlp_data_t::resp0() const {
    return int_var__resp0;
}
    
void cap_pxb_csr_sta_itr_raw_tlp_data_t::resp1(const cpp_int & _val) { 
    // resp1
    int_var__resp1 = _val.convert_to< resp1_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_raw_tlp_data_t::resp1() const {
    return int_var__resp1;
}
    
void cap_pxb_csr_sta_itr_raw_tlp_data_t::resp2(const cpp_int & _val) { 
    // resp2
    int_var__resp2 = _val.convert_to< resp2_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_raw_tlp_data_t::resp2() const {
    return int_var__resp2;
}
    
void cap_pxb_csr_sta_itr_raw_tlp_data_t::resp3(const cpp_int & _val) { 
    // resp3
    int_var__resp3 = _val.convert_to< resp3_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_raw_tlp_data_t::resp3() const {
    return int_var__resp3;
}
    
void cap_pxb_csr_sta_itr_raw_tlp_data_t::resp4(const cpp_int & _val) { 
    // resp4
    int_var__resp4 = _val.convert_to< resp4_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_raw_tlp_data_t::resp4() const {
    return int_var__resp4;
}
    
void cap_pxb_csr_sta_itr_raw_tlp_data_t::resp5(const cpp_int & _val) { 
    // resp5
    int_var__resp5 = _val.convert_to< resp5_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_raw_tlp_data_t::resp5() const {
    return int_var__resp5;
}
    
void cap_pxb_csr_sta_itr_raw_tlp_data_t::resp6(const cpp_int & _val) { 
    // resp6
    int_var__resp6 = _val.convert_to< resp6_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_raw_tlp_data_t::resp6() const {
    return int_var__resp6;
}
    
void cap_pxb_csr_sta_itr_raw_tlp_data_t::resp7(const cpp_int & _val) { 
    // resp7
    int_var__resp7 = _val.convert_to< resp7_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_raw_tlp_data_t::resp7() const {
    return int_var__resp7;
}
    
void cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::dw_cnt(const cpp_int & _val) { 
    // dw_cnt
    int_var__dw_cnt = _val.convert_to< dw_cnt_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::dw_cnt() const {
    return int_var__dw_cnt;
}
    
void cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::port_id(const cpp_int & _val) { 
    // port_id
    int_var__port_id = _val.convert_to< port_id_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::port_id() const {
    return int_var__port_id;
}
    
void cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::cmd_go(const cpp_int & _val) { 
    // cmd_go
    int_var__cmd_go = _val.convert_to< cmd_go_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::cmd_go() const {
    return int_var__cmd_go;
}
    
void cap_pxb_csr_cfg_itr_raw_tlp_t::dw0(const cpp_int & _val) { 
    // dw0
    int_var__dw0 = _val.convert_to< dw0_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_raw_tlp_t::dw0() const {
    return int_var__dw0;
}
    
void cap_pxb_csr_cfg_itr_raw_tlp_t::dw1(const cpp_int & _val) { 
    // dw1
    int_var__dw1 = _val.convert_to< dw1_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_raw_tlp_t::dw1() const {
    return int_var__dw1;
}
    
void cap_pxb_csr_cfg_itr_raw_tlp_t::dw2(const cpp_int & _val) { 
    // dw2
    int_var__dw2 = _val.convert_to< dw2_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_raw_tlp_t::dw2() const {
    return int_var__dw2;
}
    
void cap_pxb_csr_cfg_itr_raw_tlp_t::dw3(const cpp_int & _val) { 
    // dw3
    int_var__dw3 = _val.convert_to< dw3_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_raw_tlp_t::dw3() const {
    return int_var__dw3;
}
    
void cap_pxb_csr_cfg_itr_raw_tlp_t::dw4(const cpp_int & _val) { 
    // dw4
    int_var__dw4 = _val.convert_to< dw4_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_raw_tlp_t::dw4() const {
    return int_var__dw4;
}
    
void cap_pxb_csr_cfg_itr_raw_tlp_t::dw5(const cpp_int & _val) { 
    // dw5
    int_var__dw5 = _val.convert_to< dw5_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_raw_tlp_t::dw5() const {
    return int_var__dw5;
}
    
void cap_pxb_csr_cfg_itr_raw_tlp_t::dw6(const cpp_int & _val) { 
    // dw6
    int_var__dw6 = _val.convert_to< dw6_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_raw_tlp_t::dw6() const {
    return int_var__dw6;
}
    
void cap_pxb_csr_cfg_itr_raw_tlp_t::dw7(const cpp_int & _val) { 
    // dw7
    int_var__dw7 = _val.convert_to< dw7_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_raw_tlp_t::dw7() const {
    return int_var__dw7;
}
    
void cap_pxb_csr_cfg_itr_raw_tlp_t::dw8(const cpp_int & _val) { 
    // dw8
    int_var__dw8 = _val.convert_to< dw8_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_raw_tlp_t::dw8() const {
    return int_var__dw8;
}
    
void cap_pxb_csr_cfg_itr_raw_tlp_t::dw9(const cpp_int & _val) { 
    // dw9
    int_var__dw9 = _val.convert_to< dw9_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_raw_tlp_t::dw9() const {
    return int_var__dw9;
}
    
void cap_pxb_csr_cfg_itr_raw_tlp_t::dw10(const cpp_int & _val) { 
    // dw10
    int_var__dw10 = _val.convert_to< dw10_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_raw_tlp_t::dw10() const {
    return int_var__dw10;
}
    
void cap_pxb_csr_cfg_itr_raw_tlp_t::dw11(const cpp_int & _val) { 
    // dw11
    int_var__dw11 = _val.convert_to< dw11_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_raw_tlp_t::dw11() const {
    return int_var__dw11;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::waddr(const cpp_int & _val) { 
    // waddr
    int_var__waddr = _val.convert_to< waddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::waddr() const {
    return int_var__waddr;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::raddr(const cpp_int & _val) { 
    // raddr
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::raddr() const {
    return int_var__raddr;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::depth() const {
    return int_var__depth;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::waddr(const cpp_int & _val) { 
    // waddr
    int_var__waddr = _val.convert_to< waddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::waddr() const {
    return int_var__waddr;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::raddr(const cpp_int & _val) { 
    // raddr
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::raddr() const {
    return int_var__raddr;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::depth() const {
    return int_var__depth;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::waddr(const cpp_int & _val) { 
    // waddr
    int_var__waddr = _val.convert_to< waddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::waddr() const {
    return int_var__waddr;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::raddr(const cpp_int & _val) { 
    // raddr
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::raddr() const {
    return int_var__raddr;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::depth() const {
    return int_var__depth;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::waddr(const cpp_int & _val) { 
    // waddr
    int_var__waddr = _val.convert_to< waddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::waddr() const {
    return int_var__waddr;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::raddr(const cpp_int & _val) { 
    // raddr
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::raddr() const {
    return int_var__raddr;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::depth() const {
    return int_var__depth;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::waddr(const cpp_int & _val) { 
    // waddr
    int_var__waddr = _val.convert_to< waddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::waddr() const {
    return int_var__waddr;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::raddr(const cpp_int & _val) { 
    // raddr
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::raddr() const {
    return int_var__raddr;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::depth() const {
    return int_var__depth;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::waddr(const cpp_int & _val) { 
    // waddr
    int_var__waddr = _val.convert_to< waddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::waddr() const {
    return int_var__waddr;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::raddr(const cpp_int & _val) { 
    // raddr
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::raddr() const {
    return int_var__raddr;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::depth() const {
    return int_var__depth;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::waddr(const cpp_int & _val) { 
    // waddr
    int_var__waddr = _val.convert_to< waddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::waddr() const {
    return int_var__waddr;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::raddr(const cpp_int & _val) { 
    // raddr
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::raddr() const {
    return int_var__raddr;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::depth() const {
    return int_var__depth;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::waddr(const cpp_int & _val) { 
    // waddr
    int_var__waddr = _val.convert_to< waddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::waddr() const {
    return int_var__waddr;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::raddr(const cpp_int & _val) { 
    // raddr
    int_var__raddr = _val.convert_to< raddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::raddr() const {
    return int_var__raddr;
}
    
void cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::depth() const {
    return int_var__depth;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::stg0_vld(const cpp_int & _val) { 
    // stg0_vld
    int_var__stg0_vld = _val.convert_to< stg0_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::stg0_vld() const {
    return int_var__stg0_vld;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::stg1_vld(const cpp_int & _val) { 
    // stg1_vld
    int_var__stg1_vld = _val.convert_to< stg1_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::stg1_vld() const {
    return int_var__stg1_vld;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::stg2_vld(const cpp_int & _val) { 
    // stg2_vld
    int_var__stg2_vld = _val.convert_to< stg2_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::stg2_vld() const {
    return int_var__stg2_vld;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::stg3_vld(const cpp_int & _val) { 
    // stg3_vld
    int_var__stg3_vld = _val.convert_to< stg3_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::stg3_vld() const {
    return int_var__stg3_vld;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::stg4_vld(const cpp_int & _val) { 
    // stg4_vld
    int_var__stg4_vld = _val.convert_to< stg4_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::stg4_vld() const {
    return int_var__stg4_vld;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::stg5_vld(const cpp_int & _val) { 
    // stg5_vld
    int_var__stg5_vld = _val.convert_to< stg5_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::stg5_vld() const {
    return int_var__stg5_vld;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::s0_rdy(const cpp_int & _val) { 
    // s0_rdy
    int_var__s0_rdy = _val.convert_to< s0_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::s0_rdy() const {
    return int_var__s0_rdy;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::s0_port_space_avl_vec(const cpp_int & _val) { 
    // s0_port_space_avl_vec
    int_var__s0_port_space_avl_vec = _val.convert_to< s0_port_space_avl_vec_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::s0_port_space_avl_vec() const {
    return int_var__s0_port_space_avl_vec;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::s0_tag_avl_vec(const cpp_int & _val) { 
    // s0_tag_avl_vec
    int_var__s0_tag_avl_vec = _val.convert_to< s0_tag_avl_vec_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::s0_tag_avl_vec() const {
    return int_var__s0_tag_avl_vec;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::itr_cnxt_free_avl0(const cpp_int & _val) { 
    // itr_cnxt_free_avl0
    int_var__itr_cnxt_free_avl0 = _val.convert_to< itr_cnxt_free_avl0_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::itr_cnxt_free_avl0() const {
    return int_var__itr_cnxt_free_avl0;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::itr_cnxt_free_avl1(const cpp_int & _val) { 
    // itr_cnxt_free_avl1
    int_var__itr_cnxt_free_avl1 = _val.convert_to< itr_cnxt_free_avl1_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::itr_cnxt_free_avl1() const {
    return int_var__itr_cnxt_free_avl1;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::s5_req_fifo_depth(const cpp_int & _val) { 
    // s5_req_fifo_depth
    int_var__s5_req_fifo_depth = _val.convert_to< s5_req_fifo_depth_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::s5_req_fifo_depth() const {
    return int_var__s5_req_fifo_depth;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::s5_seg_state(const cpp_int & _val) { 
    // s5_seg_state
    int_var__s5_seg_state = _val.convert_to< s5_seg_state_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::s5_seg_state() const {
    return int_var__s5_seg_state;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::tx_wrcnt_req_stall(const cpp_int & _val) { 
    // tx_wrcnt_req_stall
    int_var__tx_wrcnt_req_stall = _val.convert_to< tx_wrcnt_req_stall_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::tx_wrcnt_req_stall() const {
    return int_var__tx_wrcnt_req_stall;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::tx_wrcnt_cpl_stall(const cpp_int & _val) { 
    // tx_wrcnt_cpl_stall
    int_var__tx_wrcnt_cpl_stall = _val.convert_to< tx_wrcnt_cpl_stall_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::tx_wrcnt_cpl_stall() const {
    return int_var__tx_wrcnt_cpl_stall;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::tx_wrcnt_raw_stall(const cpp_int & _val) { 
    // tx_wrcnt_raw_stall
    int_var__tx_wrcnt_raw_stall = _val.convert_to< tx_wrcnt_raw_stall_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::tx_wrcnt_raw_stall() const {
    return int_var__tx_wrcnt_raw_stall;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::s5_is_wr(const cpp_int & _val) { 
    // s5_is_wr
    int_var__s5_is_wr = _val.convert_to< s5_is_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::s5_is_wr() const {
    return int_var__s5_is_wr;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::s5_is_msg(const cpp_int & _val) { 
    // s5_is_msg
    int_var__s5_is_msg = _val.convert_to< s5_is_msg_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::s5_is_msg() const {
    return int_var__s5_is_msg;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::cpl_eop_pnd(const cpp_int & _val) { 
    // cpl_eop_pnd
    int_var__cpl_eop_pnd = _val.convert_to< cpl_eop_pnd_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::cpl_eop_pnd() const {
    return int_var__cpl_eop_pnd;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::req_eop_pnd(const cpp_int & _val) { 
    // req_eop_pnd
    int_var__req_eop_pnd = _val.convert_to< req_eop_pnd_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::req_eop_pnd() const {
    return int_var__req_eop_pnd;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::raw_cmd_pnd(const cpp_int & _val) { 
    // raw_cmd_pnd
    int_var__raw_cmd_pnd = _val.convert_to< raw_cmd_pnd_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::raw_cmd_pnd() const {
    return int_var__raw_cmd_pnd;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::cpl_tx_vld(const cpp_int & _val) { 
    // cpl_tx_vld
    int_var__cpl_tx_vld = _val.convert_to< cpl_tx_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::cpl_tx_vld() const {
    return int_var__cpl_tx_vld;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::cpl_tx_rdy(const cpp_int & _val) { 
    // cpl_tx_rdy
    int_var__cpl_tx_rdy = _val.convert_to< cpl_tx_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::cpl_tx_rdy() const {
    return int_var__cpl_tx_rdy;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::bvalid(const cpp_int & _val) { 
    // bvalid
    int_var__bvalid = _val.convert_to< bvalid_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::bvalid() const {
    return int_var__bvalid;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::bready(const cpp_int & _val) { 
    // bready
    int_var__bready = _val.convert_to< bready_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::bready() const {
    return int_var__bready;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::awvalid(const cpp_int & _val) { 
    // awvalid
    int_var__awvalid = _val.convert_to< awvalid_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::awvalid() const {
    return int_var__awvalid;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::awready(const cpp_int & _val) { 
    // awready
    int_var__awready = _val.convert_to< awready_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::awready() const {
    return int_var__awready;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::wvalid(const cpp_int & _val) { 
    // wvalid
    int_var__wvalid = _val.convert_to< wvalid_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::wvalid() const {
    return int_var__wvalid;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::wready(const cpp_int & _val) { 
    // wready
    int_var__wready = _val.convert_to< wready_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::wready() const {
    return int_var__wready;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::arvalid(const cpp_int & _val) { 
    // arvalid
    int_var__arvalid = _val.convert_to< arvalid_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::arvalid() const {
    return int_var__arvalid;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::arready(const cpp_int & _val) { 
    // arready
    int_var__arready = _val.convert_to< arready_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::arready() const {
    return int_var__arready;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::rvalid(const cpp_int & _val) { 
    // rvalid
    int_var__rvalid = _val.convert_to< rvalid_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::rvalid() const {
    return int_var__rvalid;
}
    
void cap_pxb_csr_sta_itr_req_debug_t::rready(const cpp_int & _val) { 
    // rready
    int_var__rready = _val.convert_to< rready_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_req_debug_t::rready() const {
    return int_var__rready;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg0_vld(const cpp_int & _val) { 
    // stg0_vld
    int_var__stg0_vld = _val.convert_to< stg0_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg0_vld() const {
    return int_var__stg0_vld;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg1_vld(const cpp_int & _val) { 
    // stg1_vld
    int_var__stg1_vld = _val.convert_to< stg1_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg1_vld() const {
    return int_var__stg1_vld;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg2_vld(const cpp_int & _val) { 
    // stg2_vld
    int_var__stg2_vld = _val.convert_to< stg2_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg2_vld() const {
    return int_var__stg2_vld;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg3_vld(const cpp_int & _val) { 
    // stg3_vld
    int_var__stg3_vld = _val.convert_to< stg3_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg3_vld() const {
    return int_var__stg3_vld;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg4_vld(const cpp_int & _val) { 
    // stg4_vld
    int_var__stg4_vld = _val.convert_to< stg4_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg4_vld() const {
    return int_var__stg4_vld;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg5_vld(const cpp_int & _val) { 
    // stg5_vld
    int_var__stg5_vld = _val.convert_to< stg5_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg5_vld() const {
    return int_var__stg5_vld;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg6_vld(const cpp_int & _val) { 
    // stg6_vld
    int_var__stg6_vld = _val.convert_to< stg6_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg6_vld() const {
    return int_var__stg6_vld;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg7_vld(const cpp_int & _val) { 
    // stg7_vld
    int_var__stg7_vld = _val.convert_to< stg7_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg7_vld() const {
    return int_var__stg7_vld;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg8_vld(const cpp_int & _val) { 
    // stg8_vld
    int_var__stg8_vld = _val.convert_to< stg8_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg8_vld() const {
    return int_var__stg8_vld;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg9_vld(const cpp_int & _val) { 
    // stg9_vld
    int_var__stg9_vld = _val.convert_to< stg9_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg9_vld() const {
    return int_var__stg9_vld;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg0_rdy(const cpp_int & _val) { 
    // stg0_rdy
    int_var__stg0_rdy = _val.convert_to< stg0_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg0_rdy() const {
    return int_var__stg0_rdy;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg1_rdy(const cpp_int & _val) { 
    // stg1_rdy
    int_var__stg1_rdy = _val.convert_to< stg1_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg1_rdy() const {
    return int_var__stg1_rdy;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg2_rdy(const cpp_int & _val) { 
    // stg2_rdy
    int_var__stg2_rdy = _val.convert_to< stg2_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg2_rdy() const {
    return int_var__stg2_rdy;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg3_rdy(const cpp_int & _val) { 
    // stg3_rdy
    int_var__stg3_rdy = _val.convert_to< stg3_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg3_rdy() const {
    return int_var__stg3_rdy;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg4_rdy(const cpp_int & _val) { 
    // stg4_rdy
    int_var__stg4_rdy = _val.convert_to< stg4_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg4_rdy() const {
    return int_var__stg4_rdy;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg5_rdy(const cpp_int & _val) { 
    // stg5_rdy
    int_var__stg5_rdy = _val.convert_to< stg5_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg5_rdy() const {
    return int_var__stg5_rdy;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg6_rdy(const cpp_int & _val) { 
    // stg6_rdy
    int_var__stg6_rdy = _val.convert_to< stg6_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg6_rdy() const {
    return int_var__stg6_rdy;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg7_rdy(const cpp_int & _val) { 
    // stg7_rdy
    int_var__stg7_rdy = _val.convert_to< stg7_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg7_rdy() const {
    return int_var__stg7_rdy;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg8_rdy(const cpp_int & _val) { 
    // stg8_rdy
    int_var__stg8_rdy = _val.convert_to< stg8_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg8_rdy() const {
    return int_var__stg8_rdy;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::stg9_rdy(const cpp_int & _val) { 
    // stg9_rdy
    int_var__stg9_rdy = _val.convert_to< stg9_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::stg9_rdy() const {
    return int_var__stg9_rdy;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::tgt_req_vld(const cpp_int & _val) { 
    // tgt_req_vld
    int_var__tgt_req_vld = _val.convert_to< tgt_req_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::tgt_req_vld() const {
    return int_var__tgt_req_vld;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::axi_fifo_rdy(const cpp_int & _val) { 
    // axi_fifo_rdy
    int_var__axi_fifo_rdy = _val.convert_to< axi_fifo_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::axi_fifo_rdy() const {
    return int_var__axi_fifo_rdy;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::axi_fifo_notempty(const cpp_int & _val) { 
    // axi_fifo_notempty
    int_var__axi_fifo_notempty = _val.convert_to< axi_fifo_notempty_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::axi_fifo_notempty() const {
    return int_var__axi_fifo_notempty;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::notify_full(const cpp_int & _val) { 
    // notify_full
    int_var__notify_full = _val.convert_to< notify_full_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::notify_full() const {
    return int_var__notify_full;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::tgt_cnxt_xn_pnd(const cpp_int & _val) { 
    // tgt_cnxt_xn_pnd
    int_var__tgt_cnxt_xn_pnd = _val.convert_to< tgt_cnxt_xn_pnd_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::tgt_cnxt_xn_pnd() const {
    return int_var__tgt_cnxt_xn_pnd;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::rxcfg0_vld(const cpp_int & _val) { 
    // rxcfg0_vld
    int_var__rxcfg0_vld = _val.convert_to< rxcfg0_vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::rxcfg0_vld() const {
    return int_var__rxcfg0_vld;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::hw_rsp_rdy(const cpp_int & _val) { 
    // hw_rsp_rdy
    int_var__hw_rsp_rdy = _val.convert_to< hw_rsp_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::hw_rsp_rdy() const {
    return int_var__hw_rsp_rdy;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::m_axi_awvalid(const cpp_int & _val) { 
    // m_axi_awvalid
    int_var__m_axi_awvalid = _val.convert_to< m_axi_awvalid_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::m_axi_awvalid() const {
    return int_var__m_axi_awvalid;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::m_axi_arvalid(const cpp_int & _val) { 
    // m_axi_arvalid
    int_var__m_axi_arvalid = _val.convert_to< m_axi_arvalid_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::m_axi_arvalid() const {
    return int_var__m_axi_arvalid;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::m_axi_wvalid(const cpp_int & _val) { 
    // m_axi_wvalid
    int_var__m_axi_wvalid = _val.convert_to< m_axi_wvalid_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::m_axi_wvalid() const {
    return int_var__m_axi_wvalid;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::m_axi_awready(const cpp_int & _val) { 
    // m_axi_awready
    int_var__m_axi_awready = _val.convert_to< m_axi_awready_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::m_axi_awready() const {
    return int_var__m_axi_awready;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::m_axi_arready(const cpp_int & _val) { 
    // m_axi_arready
    int_var__m_axi_arready = _val.convert_to< m_axi_arready_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::m_axi_arready() const {
    return int_var__m_axi_arready;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::m_axi_wready(const cpp_int & _val) { 
    // m_axi_wready
    int_var__m_axi_wready = _val.convert_to< m_axi_wready_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::m_axi_wready() const {
    return int_var__m_axi_wready;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::m_axi_rvalid(const cpp_int & _val) { 
    // m_axi_rvalid
    int_var__m_axi_rvalid = _val.convert_to< m_axi_rvalid_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::m_axi_rvalid() const {
    return int_var__m_axi_rvalid;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::m_axi_rready(const cpp_int & _val) { 
    // m_axi_rready
    int_var__m_axi_rready = _val.convert_to< m_axi_rready_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::m_axi_rready() const {
    return int_var__m_axi_rready;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::m_axi_bvalid(const cpp_int & _val) { 
    // m_axi_bvalid
    int_var__m_axi_bvalid = _val.convert_to< m_axi_bvalid_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::m_axi_bvalid() const {
    return int_var__m_axi_bvalid;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::m_axi_bready(const cpp_int & _val) { 
    // m_axi_bready
    int_var__m_axi_bready = _val.convert_to< m_axi_bready_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::m_axi_bready() const {
    return int_var__m_axi_bready;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::tgt_rsp_tx_rdy(const cpp_int & _val) { 
    // tgt_rsp_tx_rdy
    int_var__tgt_rsp_tx_rdy = _val.convert_to< tgt_rsp_tx_rdy_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::tgt_rsp_tx_rdy() const {
    return int_var__tgt_rsp_tx_rdy;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::s7_ax_state0(const cpp_int & _val) { 
    // s7_ax_state0
    int_var__s7_ax_state0 = _val.convert_to< s7_ax_state0_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::s7_ax_state0() const {
    return int_var__s7_ax_state0;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::s7_ax_state1(const cpp_int & _val) { 
    // s7_ax_state1
    int_var__s7_ax_state1 = _val.convert_to< s7_ax_state1_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::s7_ax_state1() const {
    return int_var__s7_ax_state1;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::s7_ax_state2(const cpp_int & _val) { 
    // s7_ax_state2
    int_var__s7_ax_state2 = _val.convert_to< s7_ax_state2_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::s7_ax_state2() const {
    return int_var__s7_ax_state2;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::s7_ax_state3(const cpp_int & _val) { 
    // s7_ax_state3
    int_var__s7_ax_state3 = _val.convert_to< s7_ax_state3_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::s7_ax_state3() const {
    return int_var__s7_ax_state3;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::s7_ax_state4(const cpp_int & _val) { 
    // s7_ax_state4
    int_var__s7_ax_state4 = _val.convert_to< s7_ax_state4_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::s7_ax_state4() const {
    return int_var__s7_ax_state4;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::s7_ax_state5(const cpp_int & _val) { 
    // s7_ax_state5
    int_var__s7_ax_state5 = _val.convert_to< s7_ax_state5_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::s7_ax_state5() const {
    return int_var__s7_ax_state5;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::s7_ax_state6(const cpp_int & _val) { 
    // s7_ax_state6
    int_var__s7_ax_state6 = _val.convert_to< s7_ax_state6_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::s7_ax_state6() const {
    return int_var__s7_ax_state6;
}
    
void cap_pxb_csr_sta_tgt_req_debug_t::s7_ax_state7(const cpp_int & _val) { 
    // s7_ax_state7
    int_var__s7_ax_state7 = _val.convert_to< s7_ax_state7_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_req_debug_t::s7_ax_state7() const {
    return int_var__s7_ax_state7;
}
    
void cap_pxb_csr_sta_tgt_marker_rx_t::port0(const cpp_int & _val) { 
    // port0
    int_var__port0 = _val.convert_to< port0_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_marker_rx_t::port0() const {
    return int_var__port0;
}
    
void cap_pxb_csr_sta_tgt_marker_rx_t::port1(const cpp_int & _val) { 
    // port1
    int_var__port1 = _val.convert_to< port1_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_marker_rx_t::port1() const {
    return int_var__port1;
}
    
void cap_pxb_csr_sta_tgt_marker_rx_t::port2(const cpp_int & _val) { 
    // port2
    int_var__port2 = _val.convert_to< port2_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_marker_rx_t::port2() const {
    return int_var__port2;
}
    
void cap_pxb_csr_sta_tgt_marker_rx_t::port3(const cpp_int & _val) { 
    // port3
    int_var__port3 = _val.convert_to< port3_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_marker_rx_t::port3() const {
    return int_var__port3;
}
    
void cap_pxb_csr_sta_tgt_marker_rx_t::port4(const cpp_int & _val) { 
    // port4
    int_var__port4 = _val.convert_to< port4_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_marker_rx_t::port4() const {
    return int_var__port4;
}
    
void cap_pxb_csr_sta_tgt_marker_rx_t::port5(const cpp_int & _val) { 
    // port5
    int_var__port5 = _val.convert_to< port5_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_marker_rx_t::port5() const {
    return int_var__port5;
}
    
void cap_pxb_csr_sta_tgt_marker_rx_t::port6(const cpp_int & _val) { 
    // port6
    int_var__port6 = _val.convert_to< port6_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_marker_rx_t::port6() const {
    return int_var__port6;
}
    
void cap_pxb_csr_sta_tgt_marker_rx_t::port7(const cpp_int & _val) { 
    // port7
    int_var__port7 = _val.convert_to< port7_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_marker_rx_t::port7() const {
    return int_var__port7;
}
    
void cap_pxb_csr_cnt_itr_tot_atomic_req_t::sent(const cpp_int & _val) { 
    // sent
    int_var__sent = _val.convert_to< sent_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_itr_tot_atomic_req_t::sent() const {
    return int_var__sent;
}
    
void cap_pxb_csr_cnt_itr_intx_assert_msg_t::sent(const cpp_int & _val) { 
    // sent
    int_var__sent = _val.convert_to< sent_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_itr_intx_assert_msg_t::sent() const {
    return int_var__sent;
}
    
void cap_pxb_csr_cnt_itr_tot_msg_t::sent(const cpp_int & _val) { 
    // sent
    int_var__sent = _val.convert_to< sent_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_itr_tot_msg_t::sent() const {
    return int_var__sent;
}
    
void cap_pxb_csr_sta_itr_axi_rd_num_ids_t::pending(const cpp_int & _val) { 
    // pending
    int_var__pending = _val.convert_to< pending_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_axi_rd_num_ids_t::pending() const {
    return int_var__pending;
}
    
void cap_pxb_csr_sta_itr_axi_wr_num_ids_t::pending(const cpp_int & _val) { 
    // pending
    int_var__pending = _val.convert_to< pending_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_axi_wr_num_ids_t::pending() const {
    return int_var__pending;
}
    
void cap_pxb_csr_sta_tgt_tot_axi_rd_t::num_bytes(const cpp_int & _val) { 
    // num_bytes
    int_var__num_bytes = _val.convert_to< num_bytes_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_tot_axi_rd_t::num_bytes() const {
    return int_var__num_bytes;
}
    
void cap_pxb_csr_sta_tgt_tot_axi_wr_t::num_bytes(const cpp_int & _val) { 
    // num_bytes
    int_var__num_bytes = _val.convert_to< num_bytes_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_tot_axi_wr_t::num_bytes() const {
    return int_var__num_bytes;
}
    
void cap_pxb_csr_cnt_tgt_axi_rd64_t::req(const cpp_int & _val) { 
    // req
    int_var__req = _val.convert_to< req_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_tgt_axi_rd64_t::req() const {
    return int_var__req;
}
    
void cap_pxb_csr_cnt_tgt_tot_axi_rd_t::req(const cpp_int & _val) { 
    // req
    int_var__req = _val.convert_to< req_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_tgt_tot_axi_rd_t::req() const {
    return int_var__req;
}
    
void cap_pxb_csr_cnt_tgt_rsp_ca_ur_t::cnt(const cpp_int & _val) { 
    // cnt
    int_var__cnt = _val.convert_to< cnt_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_tgt_rsp_ca_ur_t::cnt() const {
    return int_var__cnt;
}
    
void cap_pxb_csr_cnt_tgt_db32_axi_wr_t::req(const cpp_int & _val) { 
    // req
    int_var__req = _val.convert_to< req_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_tgt_db32_axi_wr_t::req() const {
    return int_var__req;
}
    
void cap_pxb_csr_cnt_tgt_db64_axi_wr_t::req(const cpp_int & _val) { 
    // req
    int_var__req = _val.convert_to< req_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_tgt_db64_axi_wr_t::req() const {
    return int_var__req;
}
    
void cap_pxb_csr_cnt_tgt_axi_wr64_t::req(const cpp_int & _val) { 
    // req
    int_var__req = _val.convert_to< req_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_tgt_axi_wr64_t::req() const {
    return int_var__req;
}
    
void cap_pxb_csr_cnt_tgt_tot_axi_wr_t::req(const cpp_int & _val) { 
    // req
    int_var__req = _val.convert_to< req_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_tgt_tot_axi_wr_t::req() const {
    return int_var__req;
}
    
void cap_pxb_csr_cnt_itr_axi_rd256_t::req(const cpp_int & _val) { 
    // req
    int_var__req = _val.convert_to< req_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_itr_axi_rd256_t::req() const {
    return int_var__req;
}
    
void cap_pxb_csr_cnt_itr_axi_rd64_t::req(const cpp_int & _val) { 
    // req
    int_var__req = _val.convert_to< req_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_itr_axi_rd64_t::req() const {
    return int_var__req;
}
    
void cap_pxb_csr_cnt_itr_tot_axi_rd_t::req(const cpp_int & _val) { 
    // req
    int_var__req = _val.convert_to< req_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_itr_tot_axi_rd_t::req() const {
    return int_var__req;
}
    
void cap_pxb_csr_sta_itr_tot_axi_rd_t::num_bytes(const cpp_int & _val) { 
    // num_bytes
    int_var__num_bytes = _val.convert_to< num_bytes_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_tot_axi_rd_t::num_bytes() const {
    return int_var__num_bytes;
}
    
void cap_pxb_csr_sta_itr_tot_axi_wr_t::num_bytes(const cpp_int & _val) { 
    // num_bytes
    int_var__num_bytes = _val.convert_to< num_bytes_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_tot_axi_wr_t::num_bytes() const {
    return int_var__num_bytes;
}
    
void cap_pxb_csr_cnt_itr_axi_wr256_t::req(const cpp_int & _val) { 
    // req
    int_var__req = _val.convert_to< req_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_itr_axi_wr256_t::req() const {
    return int_var__req;
}
    
void cap_pxb_csr_cnt_itr_axi_wr64_t::req(const cpp_int & _val) { 
    // req
    int_var__req = _val.convert_to< req_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_itr_axi_wr64_t::req() const {
    return int_var__req;
}
    
void cap_pxb_csr_cnt_itr_tot_axi_wr_t::req(const cpp_int & _val) { 
    // req
    int_var__req = _val.convert_to< req_cpp_int_t >();
}

cpp_int cap_pxb_csr_cnt_itr_tot_axi_wr_t::req() const {
    return int_var__req;
}
    
void cap_pxb_csr_sta_tgt_ind_info_t::pending(const cpp_int & _val) { 
    // pending
    int_var__pending = _val.convert_to< pending_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ind_info_t::pending() const {
    return int_var__pending;
}
    
void cap_pxb_csr_sta_tgt_ind_info_t::ramaddr(const cpp_int & _val) { 
    // ramaddr
    int_var__ramaddr = _val.convert_to< ramaddr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ind_info_t::ramaddr() const {
    return int_var__ramaddr;
}
    
void cap_pxb_csr_sta_tgt_axi_pending_t::ids_p0(const cpp_int & _val) { 
    // ids_p0
    int_var__ids_p0 = _val.convert_to< ids_p0_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_axi_pending_t::ids_p0() const {
    return int_var__ids_p0;
}
    
void cap_pxb_csr_sta_tgt_axi_pending_t::ids_p1(const cpp_int & _val) { 
    // ids_p1
    int_var__ids_p1 = _val.convert_to< ids_p1_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_axi_pending_t::ids_p1() const {
    return int_var__ids_p1;
}
    
void cap_pxb_csr_sta_tgt_axi_pending_t::ids_p2(const cpp_int & _val) { 
    // ids_p2
    int_var__ids_p2 = _val.convert_to< ids_p2_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_axi_pending_t::ids_p2() const {
    return int_var__ids_p2;
}
    
void cap_pxb_csr_sta_tgt_axi_pending_t::ids_p3(const cpp_int & _val) { 
    // ids_p3
    int_var__ids_p3 = _val.convert_to< ids_p3_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_axi_pending_t::ids_p3() const {
    return int_var__ids_p3;
}
    
void cap_pxb_csr_sta_tgt_axi_pending_t::ids_p4(const cpp_int & _val) { 
    // ids_p4
    int_var__ids_p4 = _val.convert_to< ids_p4_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_axi_pending_t::ids_p4() const {
    return int_var__ids_p4;
}
    
void cap_pxb_csr_sta_tgt_axi_pending_t::ids_p5(const cpp_int & _val) { 
    // ids_p5
    int_var__ids_p5 = _val.convert_to< ids_p5_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_axi_pending_t::ids_p5() const {
    return int_var__ids_p5;
}
    
void cap_pxb_csr_sta_tgt_axi_pending_t::ids_p6(const cpp_int & _val) { 
    // ids_p6
    int_var__ids_p6 = _val.convert_to< ids_p6_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_axi_pending_t::ids_p6() const {
    return int_var__ids_p6;
}
    
void cap_pxb_csr_sta_tgt_axi_pending_t::ids_p7(const cpp_int & _val) { 
    // ids_p7
    int_var__ids_p7 = _val.convert_to< ids_p7_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_axi_pending_t::ids_p7() const {
    return int_var__ids_p7;
}
    
void cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::p_shift(const cpp_int & _val) { 
    // p_shift
    int_var__p_shift = _val.convert_to< p_shift_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::p_shift() const {
    return int_var__p_shift;
}
    
void cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::b_shift(const cpp_int & _val) { 
    // b_shift
    int_var__b_shift = _val.convert_to< b_shift_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::b_shift() const {
    return int_var__b_shift;
}
    
void cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::d_shift(const cpp_int & _val) { 
    // d_shift
    int_var__d_shift = _val.convert_to< d_shift_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::d_shift() const {
    return int_var__d_shift;
}
    
void cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::f_shift(const cpp_int & _val) { 
    // f_shift
    int_var__f_shift = _val.convert_to< f_shift_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::f_shift() const {
    return int_var__f_shift;
}
    
void cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::resource_dwsize(const cpp_int & _val) { 
    // resource_dwsize
    int_var__resource_dwsize = _val.convert_to< resource_dwsize_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::resource_dwsize() const {
    return int_var__resource_dwsize;
}
    
void cap_pxb_csr_sat_tgt_rx_drop_t::port0(const cpp_int & _val) { 
    // port0
    int_var__port0 = _val.convert_to< port0_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_rx_drop_t::port0() const {
    return int_var__port0;
}
    
void cap_pxb_csr_sat_tgt_rx_drop_t::port1(const cpp_int & _val) { 
    // port1
    int_var__port1 = _val.convert_to< port1_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_rx_drop_t::port1() const {
    return int_var__port1;
}
    
void cap_pxb_csr_sat_tgt_rx_drop_t::port2(const cpp_int & _val) { 
    // port2
    int_var__port2 = _val.convert_to< port2_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_rx_drop_t::port2() const {
    return int_var__port2;
}
    
void cap_pxb_csr_sat_tgt_rx_drop_t::port3(const cpp_int & _val) { 
    // port3
    int_var__port3 = _val.convert_to< port3_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_rx_drop_t::port3() const {
    return int_var__port3;
}
    
void cap_pxb_csr_sat_tgt_rx_drop_t::port4(const cpp_int & _val) { 
    // port4
    int_var__port4 = _val.convert_to< port4_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_rx_drop_t::port4() const {
    return int_var__port4;
}
    
void cap_pxb_csr_sat_tgt_rx_drop_t::port5(const cpp_int & _val) { 
    // port5
    int_var__port5 = _val.convert_to< port5_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_rx_drop_t::port5() const {
    return int_var__port5;
}
    
void cap_pxb_csr_sat_tgt_rx_drop_t::port6(const cpp_int & _val) { 
    // port6
    int_var__port6 = _val.convert_to< port6_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_rx_drop_t::port6() const {
    return int_var__port6;
}
    
void cap_pxb_csr_sat_tgt_rx_drop_t::port7(const cpp_int & _val) { 
    // port7
    int_var__port7 = _val.convert_to< port7_cpp_int_t >();
}

cpp_int cap_pxb_csr_sat_tgt_rx_drop_t::port7() const {
    return int_var__port7;
}
    
void cap_pxb_csr_sta_tgt_ecc_romask_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_romask_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_tgt_ecc_romask_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_romask_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_tgt_ecc_romask_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_romask_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_tgt_ecc_romask_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_romask_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_tgt_ecc_prt_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_prt_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_tgt_ecc_prt_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_prt_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_tgt_ecc_prt_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_prt_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_tgt_ecc_prt_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_prt_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_tgt_ecc_pmr_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_pmr_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_tgt_ecc_pmr_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_pmr_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_tgt_ecc_pmr_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_pmr_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_tgt_ecc_pmr_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_pmr_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_tgt_ecc_cplst_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_cplst_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_tgt_ecc_cplst_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_cplst_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_tgt_ecc_cplst_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_cplst_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_tgt_ecc_cplst_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_cplst_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxinfo_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxinfo_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxinfo_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxinfo_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxinfo_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxinfo_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxinfo_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxinfo_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_4_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_4_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_4_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_4_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_4_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_4_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_4_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_4_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_3_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_3_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_3_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_3_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_3_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_3_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_3_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_3_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_2_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_2_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_2_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_2_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_2_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_2_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_2_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_2_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_1_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_1_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_1_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_1_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_1_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_1_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_1_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_1_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_0_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_0_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_0_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_0_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_0_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_0_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_tgt_ecc_aximst_0_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_aximst_0_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_itr_ecc_cplbfr_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_cplbfr_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_itr_ecc_cplbfr_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_cplbfr_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_itr_ecc_cplbfr_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_cplbfr_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_itr_ecc_cplbfr_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_cplbfr_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_itr_ecc_rdhdr_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_rdhdr_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_itr_ecc_rdhdr_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_rdhdr_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_itr_ecc_rdhdr_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_rdhdr_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_itr_ecc_rdhdr_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_rdhdr_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_itr_ecc_wrhdr_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrhdr_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_itr_ecc_wrhdr_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrhdr_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_itr_ecc_wrhdr_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrhdr_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_itr_ecc_wrhdr_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrhdr_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_itr_ecc_portmap_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_portmap_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_itr_ecc_portmap_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_portmap_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_itr_ecc_portmap_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_portmap_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_itr_ecc_portmap_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_portmap_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_itr_ecc_pcihdrt_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_pcihdrt_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_itr_ecc_pcihdrt_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_pcihdrt_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_itr_ecc_pcihdrt_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_pcihdrt_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_itr_ecc_pcihdrt_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_pcihdrt_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::addr() const {
    return int_var__addr;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::rxinfo_cor(const cpp_int & _val) { 
    // rxinfo_cor
    int_var__rxinfo_cor = _val.convert_to< rxinfo_cor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::rxinfo_cor() const {
    return int_var__rxinfo_cor;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::rxinfo_det(const cpp_int & _val) { 
    // rxinfo_det
    int_var__rxinfo_det = _val.convert_to< rxinfo_det_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::rxinfo_det() const {
    return int_var__rxinfo_det;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::rxinfo_dhs(const cpp_int & _val) { 
    // rxinfo_dhs
    int_var__rxinfo_dhs = _val.convert_to< rxinfo_dhs_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::rxinfo_dhs() const {
    return int_var__rxinfo_dhs;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::pmr_cor(const cpp_int & _val) { 
    // pmr_cor
    int_var__pmr_cor = _val.convert_to< pmr_cor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::pmr_cor() const {
    return int_var__pmr_cor;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::pmr_det(const cpp_int & _val) { 
    // pmr_det
    int_var__pmr_det = _val.convert_to< pmr_det_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::pmr_det() const {
    return int_var__pmr_det;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::pmr_dhs(const cpp_int & _val) { 
    // pmr_dhs
    int_var__pmr_dhs = _val.convert_to< pmr_dhs_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::pmr_dhs() const {
    return int_var__pmr_dhs;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::prt_cor(const cpp_int & _val) { 
    // prt_cor
    int_var__prt_cor = _val.convert_to< prt_cor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::prt_cor() const {
    return int_var__prt_cor;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::prt_det(const cpp_int & _val) { 
    // prt_det
    int_var__prt_det = _val.convert_to< prt_det_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::prt_det() const {
    return int_var__prt_det;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::prt_dhs(const cpp_int & _val) { 
    // prt_dhs
    int_var__prt_dhs = _val.convert_to< prt_dhs_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::prt_dhs() const {
    return int_var__prt_dhs;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::cplst_cor(const cpp_int & _val) { 
    // cplst_cor
    int_var__cplst_cor = _val.convert_to< cplst_cor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::cplst_cor() const {
    return int_var__cplst_cor;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::cplst_det(const cpp_int & _val) { 
    // cplst_det
    int_var__cplst_det = _val.convert_to< cplst_det_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::cplst_det() const {
    return int_var__cplst_det;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::cplst_dhs(const cpp_int & _val) { 
    // cplst_dhs
    int_var__cplst_dhs = _val.convert_to< cplst_dhs_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::cplst_dhs() const {
    return int_var__cplst_dhs;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::aximst_cor(const cpp_int & _val) { 
    // aximst_cor
    int_var__aximst_cor = _val.convert_to< aximst_cor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::aximst_cor() const {
    return int_var__aximst_cor;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::aximst_det(const cpp_int & _val) { 
    // aximst_det
    int_var__aximst_det = _val.convert_to< aximst_det_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::aximst_det() const {
    return int_var__aximst_det;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::aximst_dhs(const cpp_int & _val) { 
    // aximst_dhs
    int_var__aximst_dhs = _val.convert_to< aximst_dhs_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::aximst_dhs() const {
    return int_var__aximst_dhs;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::romask_cor(const cpp_int & _val) { 
    // romask_cor
    int_var__romask_cor = _val.convert_to< romask_cor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::romask_cor() const {
    return int_var__romask_cor;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::romask_det(const cpp_int & _val) { 
    // romask_det
    int_var__romask_det = _val.convert_to< romask_det_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::romask_det() const {
    return int_var__romask_det;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::romask_dhs(const cpp_int & _val) { 
    // romask_dhs
    int_var__romask_dhs = _val.convert_to< romask_dhs_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::romask_dhs() const {
    return int_var__romask_dhs;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::rxcrbfr_cor(const cpp_int & _val) { 
    // rxcrbfr_cor
    int_var__rxcrbfr_cor = _val.convert_to< rxcrbfr_cor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::rxcrbfr_cor() const {
    return int_var__rxcrbfr_cor;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::rxcrbfr_det(const cpp_int & _val) { 
    // rxcrbfr_det
    int_var__rxcrbfr_det = _val.convert_to< rxcrbfr_det_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::rxcrbfr_det() const {
    return int_var__rxcrbfr_det;
}
    
void cap_pxb_csr_cfg_tgt_ecc_disable_t::rxcrbfr_dhs(const cpp_int & _val) { 
    // rxcrbfr_dhs
    int_var__rxcrbfr_dhs = _val.convert_to< rxcrbfr_dhs_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ecc_disable_t::rxcrbfr_dhs() const {
    return int_var__rxcrbfr_dhs;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::pcihdrt_cor(const cpp_int & _val) { 
    // pcihdrt_cor
    int_var__pcihdrt_cor = _val.convert_to< pcihdrt_cor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::pcihdrt_cor() const {
    return int_var__pcihdrt_cor;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::pcihdrt_det(const cpp_int & _val) { 
    // pcihdrt_det
    int_var__pcihdrt_det = _val.convert_to< pcihdrt_det_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::pcihdrt_det() const {
    return int_var__pcihdrt_det;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::pcihdrt_dhs(const cpp_int & _val) { 
    // pcihdrt_dhs
    int_var__pcihdrt_dhs = _val.convert_to< pcihdrt_dhs_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::pcihdrt_dhs() const {
    return int_var__pcihdrt_dhs;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::portmap_cor(const cpp_int & _val) { 
    // portmap_cor
    int_var__portmap_cor = _val.convert_to< portmap_cor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::portmap_cor() const {
    return int_var__portmap_cor;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::portmap_det(const cpp_int & _val) { 
    // portmap_det
    int_var__portmap_det = _val.convert_to< portmap_det_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::portmap_det() const {
    return int_var__portmap_det;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::portmap_dhs(const cpp_int & _val) { 
    // portmap_dhs
    int_var__portmap_dhs = _val.convert_to< portmap_dhs_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::portmap_dhs() const {
    return int_var__portmap_dhs;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::wrbfr_cor(const cpp_int & _val) { 
    // wrbfr_cor
    int_var__wrbfr_cor = _val.convert_to< wrbfr_cor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::wrbfr_cor() const {
    return int_var__wrbfr_cor;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::wrbfr_det(const cpp_int & _val) { 
    // wrbfr_det
    int_var__wrbfr_det = _val.convert_to< wrbfr_det_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::wrbfr_det() const {
    return int_var__wrbfr_det;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::wrbfr_dhs(const cpp_int & _val) { 
    // wrbfr_dhs
    int_var__wrbfr_dhs = _val.convert_to< wrbfr_dhs_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::wrbfr_dhs() const {
    return int_var__wrbfr_dhs;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::wrhdr_cor(const cpp_int & _val) { 
    // wrhdr_cor
    int_var__wrhdr_cor = _val.convert_to< wrhdr_cor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::wrhdr_cor() const {
    return int_var__wrhdr_cor;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::wrhdr_det(const cpp_int & _val) { 
    // wrhdr_det
    int_var__wrhdr_det = _val.convert_to< wrhdr_det_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::wrhdr_det() const {
    return int_var__wrhdr_det;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::wrhdr_dhs(const cpp_int & _val) { 
    // wrhdr_dhs
    int_var__wrhdr_dhs = _val.convert_to< wrhdr_dhs_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::wrhdr_dhs() const {
    return int_var__wrhdr_dhs;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::rdhdr_cor(const cpp_int & _val) { 
    // rdhdr_cor
    int_var__rdhdr_cor = _val.convert_to< rdhdr_cor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::rdhdr_cor() const {
    return int_var__rdhdr_cor;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::rdhdr_det(const cpp_int & _val) { 
    // rdhdr_det
    int_var__rdhdr_det = _val.convert_to< rdhdr_det_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::rdhdr_det() const {
    return int_var__rdhdr_det;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::rdhdr_dhs(const cpp_int & _val) { 
    // rdhdr_dhs
    int_var__rdhdr_dhs = _val.convert_to< rdhdr_dhs_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::rdhdr_dhs() const {
    return int_var__rdhdr_dhs;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::cplbfr_cor(const cpp_int & _val) { 
    // cplbfr_cor
    int_var__cplbfr_cor = _val.convert_to< cplbfr_cor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::cplbfr_cor() const {
    return int_var__cplbfr_cor;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::cplbfr_det(const cpp_int & _val) { 
    // cplbfr_det
    int_var__cplbfr_det = _val.convert_to< cplbfr_det_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::cplbfr_det() const {
    return int_var__cplbfr_det;
}
    
void cap_pxb_csr_cfg_itr_ecc_disable_t::cplbfr_dhs(const cpp_int & _val) { 
    // cplbfr_dhs
    int_var__cplbfr_dhs = _val.convert_to< cplbfr_dhs_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_ecc_disable_t::cplbfr_dhs() const {
    return int_var__cplbfr_dhs;
}
    
void cap_pxb_csr_sta_tgt_pmt_ind_t::hit(const cpp_int & _val) { 
    // hit
    int_var__hit = _val.convert_to< hit_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_pmt_ind_t::hit() const {
    return int_var__hit;
}
    
void cap_pxb_csr_sta_tgt_pmt_ind_t::hit_addr(const cpp_int & _val) { 
    // hit_addr
    int_var__hit_addr = _val.convert_to< hit_addr_cpp_int_t >();
}

cpp_int cap_pxb_csr_sta_tgt_pmt_ind_t::hit_addr() const {
    return int_var__hit_addr;
}
    
void cap_pxb_csr_cfg_tgt_pmt_ind_t::key(const cpp_int & _val) { 
    // key
    int_var__key = _val.convert_to< key_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_pmt_ind_t::key() const {
    return int_var__key;
}
    
void cap_pxb_csr_cfg_tgt_pmt_ind_t::mask(const cpp_int & _val) { 
    // mask
    int_var__mask = _val.convert_to< mask_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_pmt_ind_t::mask() const {
    return int_var__mask;
}
    
void cap_pxb_csr_cfg_tgt_pmt_grst_t::vld(const cpp_int & _val) { 
    // vld
    int_var__vld = _val.convert_to< vld_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_pmt_grst_t::vld() const {
    return int_var__vld;
}
    
void cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t::val(const cpp_int & _val) { 
    // val
    int_var__val = _val.convert_to< val_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t::val() const {
    return int_var__val;
}
    
void cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t::base_35_2(const cpp_int & _val) { 
    // base_35_2
    int_var__base_35_2 = _val.convert_to< base_35_2_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t::base_35_2() const {
    return int_var__base_35_2;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region0(const cpp_int & _val) { 
    // region0
    int_var__region0 = _val.convert_to< region0_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region0() const {
    return int_var__region0;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region1(const cpp_int & _val) { 
    // region1
    int_var__region1 = _val.convert_to< region1_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region1() const {
    return int_var__region1;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region2(const cpp_int & _val) { 
    // region2
    int_var__region2 = _val.convert_to< region2_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region2() const {
    return int_var__region2;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region3(const cpp_int & _val) { 
    // region3
    int_var__region3 = _val.convert_to< region3_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region3() const {
    return int_var__region3;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region4(const cpp_int & _val) { 
    // region4
    int_var__region4 = _val.convert_to< region4_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region4() const {
    return int_var__region4;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region5(const cpp_int & _val) { 
    // region5
    int_var__region5 = _val.convert_to< region5_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region5() const {
    return int_var__region5;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region6(const cpp_int & _val) { 
    // region6
    int_var__region6 = _val.convert_to< region6_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region6() const {
    return int_var__region6;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region7(const cpp_int & _val) { 
    // region7
    int_var__region7 = _val.convert_to< region7_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region7() const {
    return int_var__region7;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region8(const cpp_int & _val) { 
    // region8
    int_var__region8 = _val.convert_to< region8_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region8() const {
    return int_var__region8;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region9(const cpp_int & _val) { 
    // region9
    int_var__region9 = _val.convert_to< region9_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region9() const {
    return int_var__region9;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region10(const cpp_int & _val) { 
    // region10
    int_var__region10 = _val.convert_to< region10_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region10() const {
    return int_var__region10;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region11(const cpp_int & _val) { 
    // region11
    int_var__region11 = _val.convert_to< region11_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region11() const {
    return int_var__region11;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region12(const cpp_int & _val) { 
    // region12
    int_var__region12 = _val.convert_to< region12_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region12() const {
    return int_var__region12;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region13(const cpp_int & _val) { 
    // region13
    int_var__region13 = _val.convert_to< region13_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region13() const {
    return int_var__region13;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region14(const cpp_int & _val) { 
    // region14
    int_var__region14 = _val.convert_to< region14_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region14() const {
    return int_var__region14;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region15(const cpp_int & _val) { 
    // region15
    int_var__region15 = _val.convert_to< region15_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::region15() const {
    return int_var__region15;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::atomic(const cpp_int & _val) { 
    // atomic
    int_var__atomic = _val.convert_to< atomic_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::atomic() const {
    return int_var__atomic;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::rc_cfg(const cpp_int & _val) { 
    // rc_cfg
    int_var__rc_cfg = _val.convert_to< rc_cfg_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::rc_cfg() const {
    return int_var__rc_cfg;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::atomic_page_id(const cpp_int & _val) { 
    // atomic_page_id
    int_var__atomic_page_id = _val.convert_to< atomic_page_id_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::atomic_page_id() const {
    return int_var__atomic_page_id;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::rc_cfg_page_id(const cpp_int & _val) { 
    // rc_cfg_page_id
    int_var__rc_cfg_page_id = _val.convert_to< rc_cfg_page_id_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::rc_cfg_page_id() const {
    return int_var__rc_cfg_page_id;
}
    
void cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::rc_io64k(const cpp_int & _val) { 
    // rc_io64k
    int_var__rc_io64k = _val.convert_to< rc_io64k_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::rc_io64k() const {
    return int_var__rc_io64k;
}
    
void cap_pxb_csr_cfg_tgt_rc_key_t::sel(const cpp_int & _val) { 
    // sel
    int_var__sel = _val.convert_to< sel_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rc_key_t::sel() const {
    return int_var__sel;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::memio_tbl_id0(const cpp_int & _val) { 
    // memio_tbl_id0
    int_var__memio_tbl_id0 = _val.convert_to< memio_tbl_id0_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::memio_tbl_id0() const {
    return int_var__memio_tbl_id0;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::cfg_tbl_id0(const cpp_int & _val) { 
    // cfg_tbl_id0
    int_var__cfg_tbl_id0 = _val.convert_to< cfg_tbl_id0_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::cfg_tbl_id0() const {
    return int_var__cfg_tbl_id0;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::rc_tbl_id0(const cpp_int & _val) { 
    // rc_tbl_id0
    int_var__rc_tbl_id0 = _val.convert_to< rc_tbl_id0_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::rc_tbl_id0() const {
    return int_var__rc_tbl_id0;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::default_tbl_id0(const cpp_int & _val) { 
    // default_tbl_id0
    int_var__default_tbl_id0 = _val.convert_to< default_tbl_id0_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::default_tbl_id0() const {
    return int_var__default_tbl_id0;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::memio_tbl_id1(const cpp_int & _val) { 
    // memio_tbl_id1
    int_var__memio_tbl_id1 = _val.convert_to< memio_tbl_id1_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::memio_tbl_id1() const {
    return int_var__memio_tbl_id1;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::cfg_tbl_id1(const cpp_int & _val) { 
    // cfg_tbl_id1
    int_var__cfg_tbl_id1 = _val.convert_to< cfg_tbl_id1_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::cfg_tbl_id1() const {
    return int_var__cfg_tbl_id1;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::rc_tbl_id1(const cpp_int & _val) { 
    // rc_tbl_id1
    int_var__rc_tbl_id1 = _val.convert_to< rc_tbl_id1_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::rc_tbl_id1() const {
    return int_var__rc_tbl_id1;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::default_tbl_id1(const cpp_int & _val) { 
    // default_tbl_id1
    int_var__default_tbl_id1 = _val.convert_to< default_tbl_id1_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::default_tbl_id1() const {
    return int_var__default_tbl_id1;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::memio_tbl_id2(const cpp_int & _val) { 
    // memio_tbl_id2
    int_var__memio_tbl_id2 = _val.convert_to< memio_tbl_id2_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::memio_tbl_id2() const {
    return int_var__memio_tbl_id2;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::cfg_tbl_id2(const cpp_int & _val) { 
    // cfg_tbl_id2
    int_var__cfg_tbl_id2 = _val.convert_to< cfg_tbl_id2_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::cfg_tbl_id2() const {
    return int_var__cfg_tbl_id2;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::rc_tbl_id2(const cpp_int & _val) { 
    // rc_tbl_id2
    int_var__rc_tbl_id2 = _val.convert_to< rc_tbl_id2_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::rc_tbl_id2() const {
    return int_var__rc_tbl_id2;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::default_tbl_id2(const cpp_int & _val) { 
    // default_tbl_id2
    int_var__default_tbl_id2 = _val.convert_to< default_tbl_id2_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::default_tbl_id2() const {
    return int_var__default_tbl_id2;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::memio_tbl_id3(const cpp_int & _val) { 
    // memio_tbl_id3
    int_var__memio_tbl_id3 = _val.convert_to< memio_tbl_id3_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::memio_tbl_id3() const {
    return int_var__memio_tbl_id3;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::cfg_tbl_id3(const cpp_int & _val) { 
    // cfg_tbl_id3
    int_var__cfg_tbl_id3 = _val.convert_to< cfg_tbl_id3_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::cfg_tbl_id3() const {
    return int_var__cfg_tbl_id3;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::rc_tbl_id3(const cpp_int & _val) { 
    // rc_tbl_id3
    int_var__rc_tbl_id3 = _val.convert_to< rc_tbl_id3_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::rc_tbl_id3() const {
    return int_var__rc_tbl_id3;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::default_tbl_id3(const cpp_int & _val) { 
    // default_tbl_id3
    int_var__default_tbl_id3 = _val.convert_to< default_tbl_id3_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::default_tbl_id3() const {
    return int_var__default_tbl_id3;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::memio_tbl_id4(const cpp_int & _val) { 
    // memio_tbl_id4
    int_var__memio_tbl_id4 = _val.convert_to< memio_tbl_id4_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::memio_tbl_id4() const {
    return int_var__memio_tbl_id4;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::cfg_tbl_id4(const cpp_int & _val) { 
    // cfg_tbl_id4
    int_var__cfg_tbl_id4 = _val.convert_to< cfg_tbl_id4_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::cfg_tbl_id4() const {
    return int_var__cfg_tbl_id4;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::rc_tbl_id4(const cpp_int & _val) { 
    // rc_tbl_id4
    int_var__rc_tbl_id4 = _val.convert_to< rc_tbl_id4_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::rc_tbl_id4() const {
    return int_var__rc_tbl_id4;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::default_tbl_id4(const cpp_int & _val) { 
    // default_tbl_id4
    int_var__default_tbl_id4 = _val.convert_to< default_tbl_id4_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::default_tbl_id4() const {
    return int_var__default_tbl_id4;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::memio_tbl_id5(const cpp_int & _val) { 
    // memio_tbl_id5
    int_var__memio_tbl_id5 = _val.convert_to< memio_tbl_id5_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::memio_tbl_id5() const {
    return int_var__memio_tbl_id5;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::cfg_tbl_id5(const cpp_int & _val) { 
    // cfg_tbl_id5
    int_var__cfg_tbl_id5 = _val.convert_to< cfg_tbl_id5_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::cfg_tbl_id5() const {
    return int_var__cfg_tbl_id5;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::rc_tbl_id5(const cpp_int & _val) { 
    // rc_tbl_id5
    int_var__rc_tbl_id5 = _val.convert_to< rc_tbl_id5_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::rc_tbl_id5() const {
    return int_var__rc_tbl_id5;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::default_tbl_id5(const cpp_int & _val) { 
    // default_tbl_id5
    int_var__default_tbl_id5 = _val.convert_to< default_tbl_id5_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::default_tbl_id5() const {
    return int_var__default_tbl_id5;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::memio_tbl_id6(const cpp_int & _val) { 
    // memio_tbl_id6
    int_var__memio_tbl_id6 = _val.convert_to< memio_tbl_id6_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::memio_tbl_id6() const {
    return int_var__memio_tbl_id6;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::cfg_tbl_id6(const cpp_int & _val) { 
    // cfg_tbl_id6
    int_var__cfg_tbl_id6 = _val.convert_to< cfg_tbl_id6_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::cfg_tbl_id6() const {
    return int_var__cfg_tbl_id6;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::rc_tbl_id6(const cpp_int & _val) { 
    // rc_tbl_id6
    int_var__rc_tbl_id6 = _val.convert_to< rc_tbl_id6_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::rc_tbl_id6() const {
    return int_var__rc_tbl_id6;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::default_tbl_id6(const cpp_int & _val) { 
    // default_tbl_id6
    int_var__default_tbl_id6 = _val.convert_to< default_tbl_id6_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::default_tbl_id6() const {
    return int_var__default_tbl_id6;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::memio_tbl_id7(const cpp_int & _val) { 
    // memio_tbl_id7
    int_var__memio_tbl_id7 = _val.convert_to< memio_tbl_id7_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::memio_tbl_id7() const {
    return int_var__memio_tbl_id7;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::cfg_tbl_id7(const cpp_int & _val) { 
    // cfg_tbl_id7
    int_var__cfg_tbl_id7 = _val.convert_to< cfg_tbl_id7_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::cfg_tbl_id7() const {
    return int_var__cfg_tbl_id7;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::rc_tbl_id7(const cpp_int & _val) { 
    // rc_tbl_id7
    int_var__rc_tbl_id7 = _val.convert_to< rc_tbl_id7_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::rc_tbl_id7() const {
    return int_var__rc_tbl_id7;
}
    
void cap_pxb_csr_cfg_pmt_tbl_id_t::default_tbl_id7(const cpp_int & _val) { 
    // default_tbl_id7
    int_var__default_tbl_id7 = _val.convert_to< default_tbl_id7_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pmt_tbl_id_t::default_tbl_id7() const {
    return int_var__default_tbl_id7;
}
    
void cap_pxb_csr_cfg_tgt_notify_en_t::msg(const cpp_int & _val) { 
    // msg
    int_var__msg = _val.convert_to< msg_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_notify_en_t::msg() const {
    return int_var__msg;
}
    
void cap_pxb_csr_cfg_tgt_notify_en_t::pmv(const cpp_int & _val) { 
    // pmv
    int_var__pmv = _val.convert_to< pmv_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_notify_en_t::pmv() const {
    return int_var__pmv;
}
    
void cap_pxb_csr_cfg_tgt_notify_en_t::db_pmv(const cpp_int & _val) { 
    // db_pmv
    int_var__db_pmv = _val.convert_to< db_pmv_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_notify_en_t::db_pmv() const {
    return int_var__db_pmv;
}
    
void cap_pxb_csr_cfg_tgt_notify_en_t::unsupp(const cpp_int & _val) { 
    // unsupp
    int_var__unsupp = _val.convert_to< unsupp_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_notify_en_t::unsupp() const {
    return int_var__unsupp;
}
    
void cap_pxb_csr_cfg_tgt_notify_en_t::atomic(const cpp_int & _val) { 
    // atomic
    int_var__atomic = _val.convert_to< atomic_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_notify_en_t::atomic() const {
    return int_var__atomic;
}
    
void cap_pxb_csr_cfg_tgt_notify_en_t::pmt_miss(const cpp_int & _val) { 
    // pmt_miss
    int_var__pmt_miss = _val.convert_to< pmt_miss_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_notify_en_t::pmt_miss() const {
    return int_var__pmt_miss;
}
    
void cap_pxb_csr_cfg_tgt_notify_en_t::pmr_invalid(const cpp_int & _val) { 
    // pmr_invalid
    int_var__pmr_invalid = _val.convert_to< pmr_invalid_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_notify_en_t::pmr_invalid() const {
    return int_var__pmr_invalid;
}
    
void cap_pxb_csr_cfg_tgt_notify_en_t::prt_invalid(const cpp_int & _val) { 
    // prt_invalid
    int_var__prt_invalid = _val.convert_to< prt_invalid_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_notify_en_t::prt_invalid() const {
    return int_var__prt_invalid;
}
    
void cap_pxb_csr_cfg_tgt_notify_en_t::rc_vfid_miss(const cpp_int & _val) { 
    // rc_vfid_miss
    int_var__rc_vfid_miss = _val.convert_to< rc_vfid_miss_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_notify_en_t::rc_vfid_miss() const {
    return int_var__rc_vfid_miss;
}
    
void cap_pxb_csr_cfg_tgt_notify_en_t::prt_oor(const cpp_int & _val) { 
    // prt_oor
    int_var__prt_oor = _val.convert_to< prt_oor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_notify_en_t::prt_oor() const {
    return int_var__prt_oor;
}
    
void cap_pxb_csr_cfg_tgt_notify_en_t::vfid_oor(const cpp_int & _val) { 
    // vfid_oor
    int_var__vfid_oor = _val.convert_to< vfid_oor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_notify_en_t::vfid_oor() const {
    return int_var__vfid_oor;
}
    
void cap_pxb_csr_cfg_tgt_notify_en_t::cfg_bdf_oor(const cpp_int & _val) { 
    // cfg_bdf_oor
    int_var__cfg_bdf_oor = _val.convert_to< cfg_bdf_oor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_notify_en_t::cfg_bdf_oor() const {
    return int_var__cfg_bdf_oor;
}
    
void cap_pxb_csr_cfg_tgt_notify_en_t::pmr_ecc_err(const cpp_int & _val) { 
    // pmr_ecc_err
    int_var__pmr_ecc_err = _val.convert_to< pmr_ecc_err_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_notify_en_t::pmr_ecc_err() const {
    return int_var__pmr_ecc_err;
}
    
void cap_pxb_csr_cfg_tgt_notify_en_t::prt_ecc_err(const cpp_int & _val) { 
    // prt_ecc_err
    int_var__prt_ecc_err = _val.convert_to< prt_ecc_err_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_notify_en_t::prt_ecc_err() const {
    return int_var__prt_ecc_err;
}
    
void cap_pxb_csr_cfg_tgt_ind_en_t::msg(const cpp_int & _val) { 
    // msg
    int_var__msg = _val.convert_to< msg_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ind_en_t::msg() const {
    return int_var__msg;
}
    
void cap_pxb_csr_cfg_tgt_ind_en_t::pmv(const cpp_int & _val) { 
    // pmv
    int_var__pmv = _val.convert_to< pmv_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ind_en_t::pmv() const {
    return int_var__pmv;
}
    
void cap_pxb_csr_cfg_tgt_ind_en_t::db_pmv(const cpp_int & _val) { 
    // db_pmv
    int_var__db_pmv = _val.convert_to< db_pmv_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ind_en_t::db_pmv() const {
    return int_var__db_pmv;
}
    
void cap_pxb_csr_cfg_tgt_ind_en_t::unsupp(const cpp_int & _val) { 
    // unsupp
    int_var__unsupp = _val.convert_to< unsupp_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ind_en_t::unsupp() const {
    return int_var__unsupp;
}
    
void cap_pxb_csr_cfg_tgt_ind_en_t::atomic(const cpp_int & _val) { 
    // atomic
    int_var__atomic = _val.convert_to< atomic_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ind_en_t::atomic() const {
    return int_var__atomic;
}
    
void cap_pxb_csr_cfg_tgt_ind_en_t::pmt_miss(const cpp_int & _val) { 
    // pmt_miss
    int_var__pmt_miss = _val.convert_to< pmt_miss_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ind_en_t::pmt_miss() const {
    return int_var__pmt_miss;
}
    
void cap_pxb_csr_cfg_tgt_ind_en_t::pmr_invalid(const cpp_int & _val) { 
    // pmr_invalid
    int_var__pmr_invalid = _val.convert_to< pmr_invalid_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ind_en_t::pmr_invalid() const {
    return int_var__pmr_invalid;
}
    
void cap_pxb_csr_cfg_tgt_ind_en_t::prt_invalid(const cpp_int & _val) { 
    // prt_invalid
    int_var__prt_invalid = _val.convert_to< prt_invalid_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ind_en_t::prt_invalid() const {
    return int_var__prt_invalid;
}
    
void cap_pxb_csr_cfg_tgt_ind_en_t::rc_vfid_miss(const cpp_int & _val) { 
    // rc_vfid_miss
    int_var__rc_vfid_miss = _val.convert_to< rc_vfid_miss_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ind_en_t::rc_vfid_miss() const {
    return int_var__rc_vfid_miss;
}
    
void cap_pxb_csr_cfg_tgt_ind_en_t::prt_oor(const cpp_int & _val) { 
    // prt_oor
    int_var__prt_oor = _val.convert_to< prt_oor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ind_en_t::prt_oor() const {
    return int_var__prt_oor;
}
    
void cap_pxb_csr_cfg_tgt_ind_en_t::vfid_oor(const cpp_int & _val) { 
    // vfid_oor
    int_var__vfid_oor = _val.convert_to< vfid_oor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ind_en_t::vfid_oor() const {
    return int_var__vfid_oor;
}
    
void cap_pxb_csr_cfg_tgt_ind_en_t::cfg_bdf_oor(const cpp_int & _val) { 
    // cfg_bdf_oor
    int_var__cfg_bdf_oor = _val.convert_to< cfg_bdf_oor_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ind_en_t::cfg_bdf_oor() const {
    return int_var__cfg_bdf_oor;
}
    
void cap_pxb_csr_cfg_tgt_ind_en_t::pmr_ecc_err(const cpp_int & _val) { 
    // pmr_ecc_err
    int_var__pmr_ecc_err = _val.convert_to< pmr_ecc_err_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ind_en_t::pmr_ecc_err() const {
    return int_var__pmr_ecc_err;
}
    
void cap_pxb_csr_cfg_tgt_ind_en_t::prt_ecc_err(const cpp_int & _val) { 
    // prt_ecc_err
    int_var__prt_ecc_err = _val.convert_to< prt_ecc_err_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_ind_en_t::prt_ecc_err() const {
    return int_var__prt_ecc_err;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_base0(const cpp_int & _val) { 
    // adr_base0
    int_var__adr_base0 = _val.convert_to< adr_base0_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_base0() const {
    return int_var__adr_base0;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_limit0(const cpp_int & _val) { 
    // adr_limit0
    int_var__adr_limit0 = _val.convert_to< adr_limit0_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_limit0() const {
    return int_var__adr_limit0;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::update0(const cpp_int & _val) { 
    // update0
    int_var__update0 = _val.convert_to< update0_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::update0() const {
    return int_var__update0;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::rst_rxfifo0(const cpp_int & _val) { 
    // rst_rxfifo0
    int_var__rst_rxfifo0 = _val.convert_to< rst_rxfifo0_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::rst_rxfifo0() const {
    return int_var__rst_rxfifo0;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_base1(const cpp_int & _val) { 
    // adr_base1
    int_var__adr_base1 = _val.convert_to< adr_base1_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_base1() const {
    return int_var__adr_base1;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_limit1(const cpp_int & _val) { 
    // adr_limit1
    int_var__adr_limit1 = _val.convert_to< adr_limit1_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_limit1() const {
    return int_var__adr_limit1;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::update1(const cpp_int & _val) { 
    // update1
    int_var__update1 = _val.convert_to< update1_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::update1() const {
    return int_var__update1;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::rst_rxfifo1(const cpp_int & _val) { 
    // rst_rxfifo1
    int_var__rst_rxfifo1 = _val.convert_to< rst_rxfifo1_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::rst_rxfifo1() const {
    return int_var__rst_rxfifo1;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_base2(const cpp_int & _val) { 
    // adr_base2
    int_var__adr_base2 = _val.convert_to< adr_base2_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_base2() const {
    return int_var__adr_base2;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_limit2(const cpp_int & _val) { 
    // adr_limit2
    int_var__adr_limit2 = _val.convert_to< adr_limit2_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_limit2() const {
    return int_var__adr_limit2;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::update2(const cpp_int & _val) { 
    // update2
    int_var__update2 = _val.convert_to< update2_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::update2() const {
    return int_var__update2;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::rst_rxfifo2(const cpp_int & _val) { 
    // rst_rxfifo2
    int_var__rst_rxfifo2 = _val.convert_to< rst_rxfifo2_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::rst_rxfifo2() const {
    return int_var__rst_rxfifo2;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_base3(const cpp_int & _val) { 
    // adr_base3
    int_var__adr_base3 = _val.convert_to< adr_base3_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_base3() const {
    return int_var__adr_base3;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_limit3(const cpp_int & _val) { 
    // adr_limit3
    int_var__adr_limit3 = _val.convert_to< adr_limit3_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_limit3() const {
    return int_var__adr_limit3;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::update3(const cpp_int & _val) { 
    // update3
    int_var__update3 = _val.convert_to< update3_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::update3() const {
    return int_var__update3;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::rst_rxfifo3(const cpp_int & _val) { 
    // rst_rxfifo3
    int_var__rst_rxfifo3 = _val.convert_to< rst_rxfifo3_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::rst_rxfifo3() const {
    return int_var__rst_rxfifo3;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_base4(const cpp_int & _val) { 
    // adr_base4
    int_var__adr_base4 = _val.convert_to< adr_base4_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_base4() const {
    return int_var__adr_base4;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_limit4(const cpp_int & _val) { 
    // adr_limit4
    int_var__adr_limit4 = _val.convert_to< adr_limit4_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_limit4() const {
    return int_var__adr_limit4;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::update4(const cpp_int & _val) { 
    // update4
    int_var__update4 = _val.convert_to< update4_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::update4() const {
    return int_var__update4;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::rst_rxfifo4(const cpp_int & _val) { 
    // rst_rxfifo4
    int_var__rst_rxfifo4 = _val.convert_to< rst_rxfifo4_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::rst_rxfifo4() const {
    return int_var__rst_rxfifo4;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_base5(const cpp_int & _val) { 
    // adr_base5
    int_var__adr_base5 = _val.convert_to< adr_base5_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_base5() const {
    return int_var__adr_base5;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_limit5(const cpp_int & _val) { 
    // adr_limit5
    int_var__adr_limit5 = _val.convert_to< adr_limit5_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_limit5() const {
    return int_var__adr_limit5;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::update5(const cpp_int & _val) { 
    // update5
    int_var__update5 = _val.convert_to< update5_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::update5() const {
    return int_var__update5;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::rst_rxfifo5(const cpp_int & _val) { 
    // rst_rxfifo5
    int_var__rst_rxfifo5 = _val.convert_to< rst_rxfifo5_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::rst_rxfifo5() const {
    return int_var__rst_rxfifo5;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_base6(const cpp_int & _val) { 
    // adr_base6
    int_var__adr_base6 = _val.convert_to< adr_base6_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_base6() const {
    return int_var__adr_base6;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_limit6(const cpp_int & _val) { 
    // adr_limit6
    int_var__adr_limit6 = _val.convert_to< adr_limit6_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_limit6() const {
    return int_var__adr_limit6;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::update6(const cpp_int & _val) { 
    // update6
    int_var__update6 = _val.convert_to< update6_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::update6() const {
    return int_var__update6;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::rst_rxfifo6(const cpp_int & _val) { 
    // rst_rxfifo6
    int_var__rst_rxfifo6 = _val.convert_to< rst_rxfifo6_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::rst_rxfifo6() const {
    return int_var__rst_rxfifo6;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_base7(const cpp_int & _val) { 
    // adr_base7
    int_var__adr_base7 = _val.convert_to< adr_base7_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_base7() const {
    return int_var__adr_base7;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_limit7(const cpp_int & _val) { 
    // adr_limit7
    int_var__adr_limit7 = _val.convert_to< adr_limit7_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::adr_limit7() const {
    return int_var__adr_limit7;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::update7(const cpp_int & _val) { 
    // update7
    int_var__update7 = _val.convert_to< update7_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::update7() const {
    return int_var__update7;
}
    
void cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::rst_rxfifo7(const cpp_int & _val) { 
    // rst_rxfifo7
    int_var__rst_rxfifo7 = _val.convert_to< rst_rxfifo7_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::rst_rxfifo7() const {
    return int_var__rst_rxfifo7;
}
    
void cap_pxb_csr_cfg_tgt_fence_ignore_t::from_mask(const cpp_int & _val) { 
    // from_mask
    int_var__from_mask = _val.convert_to< from_mask_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_fence_ignore_t::from_mask() const {
    return int_var__from_mask;
}
    
void cap_pxb_csr_cfg_tgt_msg_filter_t::msg_code0(const cpp_int & _val) { 
    // msg_code0
    int_var__msg_code0 = _val.convert_to< msg_code0_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_msg_filter_t::msg_code0() const {
    return int_var__msg_code0;
}
    
void cap_pxb_csr_cfg_tgt_msg_filter_t::drop_en0(const cpp_int & _val) { 
    // drop_en0
    int_var__drop_en0 = _val.convert_to< drop_en0_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_msg_filter_t::drop_en0() const {
    return int_var__drop_en0;
}
    
void cap_pxb_csr_cfg_tgt_msg_filter_t::msg_code1(const cpp_int & _val) { 
    // msg_code1
    int_var__msg_code1 = _val.convert_to< msg_code1_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_msg_filter_t::msg_code1() const {
    return int_var__msg_code1;
}
    
void cap_pxb_csr_cfg_tgt_msg_filter_t::drop_en1(const cpp_int & _val) { 
    // drop_en1
    int_var__drop_en1 = _val.convert_to< drop_en1_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_msg_filter_t::drop_en1() const {
    return int_var__drop_en1;
}
    
void cap_pxb_csr_cfg_tgt_msg_filter_t::msg_code2(const cpp_int & _val) { 
    // msg_code2
    int_var__msg_code2 = _val.convert_to< msg_code2_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_msg_filter_t::msg_code2() const {
    return int_var__msg_code2;
}
    
void cap_pxb_csr_cfg_tgt_msg_filter_t::drop_en2(const cpp_int & _val) { 
    // drop_en2
    int_var__drop_en2 = _val.convert_to< drop_en2_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_msg_filter_t::drop_en2() const {
    return int_var__drop_en2;
}
    
void cap_pxb_csr_cfg_tgt_doorbell_base_t::addr_33_24(const cpp_int & _val) { 
    // addr_33_24
    int_var__addr_33_24 = _val.convert_to< addr_33_24_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_doorbell_base_t::addr_33_24() const {
    return int_var__addr_33_24;
}
    
void cap_pxb_csr_cfg_tgt_doorbell_base_t::db_host_sel(const cpp_int & _val) { 
    // db_host_sel
    int_var__db_host_sel = _val.convert_to< db_host_sel_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_doorbell_base_t::db_host_sel() const {
    return int_var__db_host_sel;
}
    
void cap_pxb_csr_cfg_tgt_doorbell_base_t::db_32b_sel(const cpp_int & _val) { 
    // db_32b_sel
    int_var__db_32b_sel = _val.convert_to< db_32b_sel_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_doorbell_base_t::db_32b_sel() const {
    return int_var__db_32b_sel;
}
    
void cap_pxb_csr_cfg_tgt_req_indirect_int_t::intr_data(const cpp_int & _val) { 
    // intr_data
    int_var__intr_data = _val.convert_to< intr_data_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_req_indirect_int_t::intr_data() const {
    return int_var__intr_data;
}
    
void cap_pxb_csr_cfg_tgt_req_indirect_int_t::base_addr_35_2(const cpp_int & _val) { 
    // base_addr_35_2
    int_var__base_addr_35_2 = _val.convert_to< base_addr_35_2_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_req_indirect_int_t::base_addr_35_2() const {
    return int_var__base_addr_35_2;
}
    
void cap_pxb_csr_cfg_tgt_req_notify_ring_size_t::mask(const cpp_int & _val) { 
    // mask
    int_var__mask = _val.convert_to< mask_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_req_notify_ring_size_t::mask() const {
    return int_var__mask;
}
    
void cap_pxb_csr_cfg_tgt_req_notify_int_t::intr_data(const cpp_int & _val) { 
    // intr_data
    int_var__intr_data = _val.convert_to< intr_data_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_req_notify_int_t::intr_data() const {
    return int_var__intr_data;
}
    
void cap_pxb_csr_cfg_tgt_req_notify_int_t::base_addr_35_2(const cpp_int & _val) { 
    // base_addr_35_2
    int_var__base_addr_35_2 = _val.convert_to< base_addr_35_2_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_req_notify_int_t::base_addr_35_2() const {
    return int_var__base_addr_35_2;
}
    
void cap_pxb_csr_cfg_tgt_req_notify_t::base_addr_35_16(const cpp_int & _val) { 
    // base_addr_35_16
    int_var__base_addr_35_16 = _val.convert_to< base_addr_35_16_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_req_notify_t::base_addr_35_16() const {
    return int_var__base_addr_35_16;
}
    
void cap_pxb_csr_cfg_itr_tx_req_t::macfifo_thres(const cpp_int & _val) { 
    // macfifo_thres
    int_var__macfifo_thres = _val.convert_to< macfifo_thres_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_tx_req_t::macfifo_thres() const {
    return int_var__macfifo_thres;
}
    
void cap_pxb_csr_cfg_itr_tx_req_t::rd_sgl_pnd(const cpp_int & _val) { 
    // rd_sgl_pnd
    int_var__rd_sgl_pnd = _val.convert_to< rd_sgl_pnd_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_tx_req_t::rd_sgl_pnd() const {
    return int_var__rd_sgl_pnd;
}
    
void cap_pxb_csr_cfg_itr_tx_req_t::tag_avl_guardband(const cpp_int & _val) { 
    // tag_avl_guardband
    int_var__tag_avl_guardband = _val.convert_to< tag_avl_guardband_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_tx_req_t::tag_avl_guardband() const {
    return int_var__tag_avl_guardband;
}
    
void cap_pxb_csr_cfg_itr_tx_req_t::cnxt_avl_guardband(const cpp_int & _val) { 
    // cnxt_avl_guardband
    int_var__cnxt_avl_guardband = _val.convert_to< cnxt_avl_guardband_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_tx_req_t::cnxt_avl_guardband() const {
    return int_var__cnxt_avl_guardband;
}
    
void cap_pxb_csr_cfg_tgt_port_t::id_limit(const cpp_int & _val) { 
    // id_limit
    int_var__id_limit = _val.convert_to< id_limit_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_port_t::id_limit() const {
    return int_var__id_limit;
}
    
void cap_pxb_csr_cfg_tgt_port_t::bus_adjust(const cpp_int & _val) { 
    // bus_adjust
    int_var__bus_adjust = _val.convert_to< bus_adjust_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_port_t::bus_adjust() const {
    return int_var__bus_adjust;
}
    
void cap_pxb_csr_cfg_tgt_port_t::halt(const cpp_int & _val) { 
    // halt
    int_var__halt = _val.convert_to< halt_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_port_t::halt() const {
    return int_var__halt;
}
    
void cap_pxb_csr_cfg_tgt_port_t::single_pnd(const cpp_int & _val) { 
    // single_pnd
    int_var__single_pnd = _val.convert_to< single_pnd_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_port_t::single_pnd() const {
    return int_var__single_pnd;
}
    
void cap_pxb_csr_cfg_tgt_port_t::td_miss(const cpp_int & _val) { 
    // td_miss
    int_var__td_miss = _val.convert_to< td_miss_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_port_t::td_miss() const {
    return int_var__td_miss;
}
    
void cap_pxb_csr_cfg_tgt_port_t::depth_thres(const cpp_int & _val) { 
    // depth_thres
    int_var__depth_thres = _val.convert_to< depth_thres_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_port_t::depth_thres() const {
    return int_var__depth_thres;
}
    
void cap_pxb_csr_cfg_tgt_port_t::skip_notify_if_qfull(const cpp_int & _val) { 
    // skip_notify_if_qfull
    int_var__skip_notify_if_qfull = _val.convert_to< skip_notify_if_qfull_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_port_t::skip_notify_if_qfull() const {
    return int_var__skip_notify_if_qfull;
}
    
void cap_pxb_csr_cfg_tgt_port_t::fbe_holes_allow(const cpp_int & _val) { 
    // fbe_holes_allow
    int_var__fbe_holes_allow = _val.convert_to< fbe_holes_allow_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_port_t::fbe_holes_allow() const {
    return int_var__fbe_holes_allow;
}
    
void cap_pxb_csr_cfg_tgt_port_t::fence_dis(const cpp_int & _val) { 
    // fence_dis
    int_var__fence_dis = _val.convert_to< fence_dis_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_tgt_port_t::fence_dis() const {
    return int_var__fence_dis;
}
    
void cap_pxb_csr_cfg_itr_port_t::rdreq_limit(const cpp_int & _val) { 
    // rdreq_limit
    int_var__rdreq_limit = _val.convert_to< rdreq_limit_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_port_t::rdreq_limit() const {
    return int_var__rdreq_limit;
}
    
void cap_pxb_csr_cfg_itr_port_t::timer_tick(const cpp_int & _val) { 
    // timer_tick
    int_var__timer_tick = _val.convert_to< timer_tick_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_port_t::timer_tick() const {
    return int_var__timer_tick;
}
    
void cap_pxb_csr_cfg_itr_port_t::timer_limit(const cpp_int & _val) { 
    // timer_limit
    int_var__timer_limit = _val.convert_to< timer_limit_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_port_t::timer_limit() const {
    return int_var__timer_limit;
}
    
void cap_pxb_csr_cfg_itr_port_t::bus_adjust(const cpp_int & _val) { 
    // bus_adjust
    int_var__bus_adjust = _val.convert_to< bus_adjust_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_port_t::bus_adjust() const {
    return int_var__bus_adjust;
}
    
void cap_pxb_csr_cfg_itr_port_t::arb_cr_hdr(const cpp_int & _val) { 
    // arb_cr_hdr
    int_var__arb_cr_hdr = _val.convert_to< arb_cr_hdr_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_port_t::arb_cr_hdr() const {
    return int_var__arb_cr_hdr;
}
    
void cap_pxb_csr_cfg_itr_port_t::arb_cr_data(const cpp_int & _val) { 
    // arb_cr_data
    int_var__arb_cr_data = _val.convert_to< arb_cr_data_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_port_t::arb_cr_data() const {
    return int_var__arb_cr_data;
}
    
void cap_pxb_csr_cfg_itr_port_t::arb_cr_dis_wr(const cpp_int & _val) { 
    // arb_cr_dis_wr
    int_var__arb_cr_dis_wr = _val.convert_to< arb_cr_dis_wr_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_port_t::arb_cr_dis_wr() const {
    return int_var__arb_cr_dis_wr;
}
    
void cap_pxb_csr_cfg_itr_port_t::arb_cr_dis_rd(const cpp_int & _val) { 
    // arb_cr_dis_rd
    int_var__arb_cr_dis_rd = _val.convert_to< arb_cr_dis_rd_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_port_t::arb_cr_dis_rd() const {
    return int_var__arb_cr_dis_rd;
}
    
void cap_pxb_csr_cfg_itr_port_t::arb_cnxtcnt_chk_dis(const cpp_int & _val) { 
    // arb_cnxtcnt_chk_dis
    int_var__arb_cnxtcnt_chk_dis = _val.convert_to< arb_cnxtcnt_chk_dis_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_port_t::arb_cnxtcnt_chk_dis() const {
    return int_var__arb_cnxtcnt_chk_dis;
}
    
void cap_pxb_csr_cfg_itr_port_t::arb_tagcnt_chk_dis(const cpp_int & _val) { 
    // arb_tagcnt_chk_dis
    int_var__arb_tagcnt_chk_dis = _val.convert_to< arb_tagcnt_chk_dis_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_port_t::arb_tagcnt_chk_dis() const {
    return int_var__arb_tagcnt_chk_dis;
}
    
void cap_pxb_csr_cfg_itr_port_t::arb_txfifocnt(const cpp_int & _val) { 
    // arb_txfifocnt
    int_var__arb_txfifocnt = _val.convert_to< arb_txfifocnt_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_port_t::arb_txfifocnt() const {
    return int_var__arb_txfifocnt;
}
    
void cap_pxb_csr_cfg_itr_port_t::adr_extn_en(const cpp_int & _val) { 
    // adr_extn_en
    int_var__adr_extn_en = _val.convert_to< adr_extn_en_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_itr_port_t::adr_extn_en() const {
    return int_var__adr_extn_en;
}
    
void cap_pxb_csr_cfg_pc_port_type_t::host_or_rc0(const cpp_int & _val) { 
    // host_or_rc0
    int_var__host_or_rc0 = _val.convert_to< host_or_rc0_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pc_port_type_t::host_or_rc0() const {
    return int_var__host_or_rc0;
}
    
void cap_pxb_csr_cfg_pc_port_type_t::host_or_rc1(const cpp_int & _val) { 
    // host_or_rc1
    int_var__host_or_rc1 = _val.convert_to< host_or_rc1_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pc_port_type_t::host_or_rc1() const {
    return int_var__host_or_rc1;
}
    
void cap_pxb_csr_cfg_pc_port_type_t::host_or_rc2(const cpp_int & _val) { 
    // host_or_rc2
    int_var__host_or_rc2 = _val.convert_to< host_or_rc2_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pc_port_type_t::host_or_rc2() const {
    return int_var__host_or_rc2;
}
    
void cap_pxb_csr_cfg_pc_port_type_t::host_or_rc3(const cpp_int & _val) { 
    // host_or_rc3
    int_var__host_or_rc3 = _val.convert_to< host_or_rc3_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pc_port_type_t::host_or_rc3() const {
    return int_var__host_or_rc3;
}
    
void cap_pxb_csr_cfg_pc_port_type_t::host_or_rc4(const cpp_int & _val) { 
    // host_or_rc4
    int_var__host_or_rc4 = _val.convert_to< host_or_rc4_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pc_port_type_t::host_or_rc4() const {
    return int_var__host_or_rc4;
}
    
void cap_pxb_csr_cfg_pc_port_type_t::host_or_rc5(const cpp_int & _val) { 
    // host_or_rc5
    int_var__host_or_rc5 = _val.convert_to< host_or_rc5_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pc_port_type_t::host_or_rc5() const {
    return int_var__host_or_rc5;
}
    
void cap_pxb_csr_cfg_pc_port_type_t::host_or_rc6(const cpp_int & _val) { 
    // host_or_rc6
    int_var__host_or_rc6 = _val.convert_to< host_or_rc6_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pc_port_type_t::host_or_rc6() const {
    return int_var__host_or_rc6;
}
    
void cap_pxb_csr_cfg_pc_port_type_t::host_or_rc7(const cpp_int & _val) { 
    // host_or_rc7
    int_var__host_or_rc7 = _val.convert_to< host_or_rc7_cpp_int_t >();
}

cpp_int cap_pxb_csr_cfg_pc_port_type_t::host_or_rc7() const {
    return int_var__host_or_rc7;
}
    
void cap_pxb_csr_rdintr_t::ireg(const cpp_int & _val) { 
    // ireg
    int_var__ireg = _val.convert_to< ireg_cpp_int_t >();
}

cpp_int cap_pxb_csr_rdintr_t::ireg() const {
    return int_var__ireg;
}
    
void cap_pxb_csr_base_t::scratch_reg(const cpp_int & _val) { 
    // scratch_reg
    int_var__scratch_reg = _val.convert_to< scratch_reg_cpp_int_t >();
}

cpp_int cap_pxb_csr_base_t::scratch_reg() const {
    return int_var__scratch_reg;
}
    
#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_err_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cpl_ecrc_enable")) { field_val = cpl_ecrc_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_rxbuf_err_enable")) { field_val = cpl_rxbuf_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_stat_enable")) { field_val = cpl_stat_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_unexp_enable")) { field_val = cpl_unexp_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_timeout_enable")) { field_val = cpl_timeout_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_len_enable")) { field_val = cpl_len_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_poison_enable")) { field_val = cpl_poison_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_lowaddr_enable")) { field_val = cpl_lowaddr_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_ind_rsp_unexp_enable")) { field_val = tgt_ind_rsp_unexp_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_axi_rsp_unexp_enable")) { field_val = tgt_axi_rsp_unexp_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_axi_rsp_err_enable")) { field_val = tgt_axi_rsp_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_req_4k_err_enable")) { field_val = tgt_req_4k_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_req_bdfmiss_enable")) { field_val = itr_req_bdfmiss_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_req_axi_unsupp_enable")) { field_val = itr_req_axi_unsupp_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_req_msg_align_err_enable")) { field_val = itr_req_msg_align_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_bus_master_dis_enable")) { field_val = itr_bus_master_dis_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_atomic_seq_err_enable")) { field_val = itr_atomic_seq_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_atomic_resource_err_enable")) { field_val = itr_atomic_resource_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_rmw_axi_resperr_enable")) { field_val = tgt_rmw_axi_resperr_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_ind_notify_axi_resperr_enable")) { field_val = tgt_ind_notify_axi_resperr_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_err_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cpl_ecrc_interrupt")) { field_val = cpl_ecrc_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_rxbuf_err_interrupt")) { field_val = cpl_rxbuf_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_stat_interrupt")) { field_val = cpl_stat_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_unexp_interrupt")) { field_val = cpl_unexp_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_timeout_interrupt")) { field_val = cpl_timeout_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_len_interrupt")) { field_val = cpl_len_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_poison_interrupt")) { field_val = cpl_poison_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_lowaddr_interrupt")) { field_val = cpl_lowaddr_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_ind_rsp_unexp_interrupt")) { field_val = tgt_ind_rsp_unexp_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_axi_rsp_unexp_interrupt")) { field_val = tgt_axi_rsp_unexp_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_axi_rsp_err_interrupt")) { field_val = tgt_axi_rsp_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_req_4k_err_interrupt")) { field_val = tgt_req_4k_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_req_bdfmiss_interrupt")) { field_val = itr_req_bdfmiss_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_req_axi_unsupp_interrupt")) { field_val = itr_req_axi_unsupp_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_req_msg_align_err_interrupt")) { field_val = itr_req_msg_align_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_bus_master_dis_interrupt")) { field_val = itr_bus_master_dis_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_atomic_seq_err_interrupt")) { field_val = itr_atomic_seq_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_atomic_resource_err_interrupt")) { field_val = itr_atomic_resource_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_rmw_axi_resperr_interrupt")) { field_val = tgt_rmw_axi_resperr_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_ind_notify_axi_resperr_interrupt")) { field_val = tgt_ind_notify_axi_resperr_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_err_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "aximst_0_uncorrectable_enable")) { field_val = aximst_0_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_0_correctable_enable")) { field_val = aximst_0_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_1_uncorrectable_enable")) { field_val = aximst_1_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_1_correctable_enable")) { field_val = aximst_1_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_2_uncorrectable_enable")) { field_val = aximst_2_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_2_correctable_enable")) { field_val = aximst_2_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_3_uncorrectable_enable")) { field_val = aximst_3_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_3_correctable_enable")) { field_val = aximst_3_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_4_uncorrectable_enable")) { field_val = aximst_4_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_4_correctable_enable")) { field_val = aximst_4_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_0_uncorrectable_enable")) { field_val = rxcrbfr_0_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_0_correctable_enable")) { field_val = rxcrbfr_0_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_1_uncorrectable_enable")) { field_val = rxcrbfr_1_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_1_correctable_enable")) { field_val = rxcrbfr_1_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_2_uncorrectable_enable")) { field_val = rxcrbfr_2_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_2_correctable_enable")) { field_val = rxcrbfr_2_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_3_uncorrectable_enable")) { field_val = rxcrbfr_3_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_3_correctable_enable")) { field_val = rxcrbfr_3_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxinfo_uncorrectable_enable")) { field_val = rxinfo_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxinfo_correctable_enable")) { field_val = rxinfo_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplst_uncorrectable_enable")) { field_val = cplst_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplst_correctable_enable")) { field_val = cplst_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "romask_uncorrectable_enable")) { field_val = romask_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "romask_correctable_enable")) { field_val = romask_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_uncorrectable_enable")) { field_val = pmr_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_correctable_enable")) { field_val = pmr_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_uncorrectable_enable")) { field_val = prt_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_correctable_enable")) { field_val = prt_correctable_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_tgt_ecc_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "aximst_0_uncorrectable_interrupt")) { field_val = aximst_0_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_0_correctable_interrupt")) { field_val = aximst_0_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_1_uncorrectable_interrupt")) { field_val = aximst_1_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_1_correctable_interrupt")) { field_val = aximst_1_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_2_uncorrectable_interrupt")) { field_val = aximst_2_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_2_correctable_interrupt")) { field_val = aximst_2_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_3_uncorrectable_interrupt")) { field_val = aximst_3_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_3_correctable_interrupt")) { field_val = aximst_3_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_4_uncorrectable_interrupt")) { field_val = aximst_4_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_4_correctable_interrupt")) { field_val = aximst_4_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_0_uncorrectable_interrupt")) { field_val = rxcrbfr_0_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_0_correctable_interrupt")) { field_val = rxcrbfr_0_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_1_uncorrectable_interrupt")) { field_val = rxcrbfr_1_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_1_correctable_interrupt")) { field_val = rxcrbfr_1_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_2_uncorrectable_interrupt")) { field_val = rxcrbfr_2_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_2_correctable_interrupt")) { field_val = rxcrbfr_2_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_3_uncorrectable_interrupt")) { field_val = rxcrbfr_3_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_3_correctable_interrupt")) { field_val = rxcrbfr_3_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxinfo_uncorrectable_interrupt")) { field_val = rxinfo_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxinfo_correctable_interrupt")) { field_val = rxinfo_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplst_uncorrectable_interrupt")) { field_val = cplst_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplst_correctable_interrupt")) { field_val = cplst_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "romask_uncorrectable_interrupt")) { field_val = romask_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "romask_correctable_interrupt")) { field_val = romask_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_uncorrectable_interrupt")) { field_val = pmr_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_correctable_interrupt")) { field_val = pmr_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_uncorrectable_interrupt")) { field_val = prt_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_correctable_interrupt")) { field_val = prt_correctable_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_tgt_ecc_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_itr_ecc_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pcihdrt_uncorrectable_enable")) { field_val = pcihdrt_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pcihdrt_correctable_enable")) { field_val = pcihdrt_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "portmap_uncorrectable_enable")) { field_val = portmap_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "portmap_correctable_enable")) { field_val = portmap_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrhdr_uncorrectable_enable")) { field_val = wrhdr_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrhdr_correctable_enable")) { field_val = wrhdr_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rdhdr_uncorrectable_enable")) { field_val = rdhdr_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rdhdr_correctable_enable")) { field_val = rdhdr_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_0_uncorrectable_enable")) { field_val = wrbfr_0_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_0_correctable_enable")) { field_val = wrbfr_0_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_1_uncorrectable_enable")) { field_val = wrbfr_1_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_1_correctable_enable")) { field_val = wrbfr_1_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_2_uncorrectable_enable")) { field_val = wrbfr_2_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_2_correctable_enable")) { field_val = wrbfr_2_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_3_uncorrectable_enable")) { field_val = wrbfr_3_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_3_correctable_enable")) { field_val = wrbfr_3_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplbfr_uncorrectable_enable")) { field_val = cplbfr_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplbfr_correctable_enable")) { field_val = cplbfr_correctable_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_itr_ecc_intreg_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pcihdrt_uncorrectable_interrupt")) { field_val = pcihdrt_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pcihdrt_correctable_interrupt")) { field_val = pcihdrt_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "portmap_uncorrectable_interrupt")) { field_val = portmap_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "portmap_correctable_interrupt")) { field_val = portmap_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrhdr_uncorrectable_interrupt")) { field_val = wrhdr_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrhdr_correctable_interrupt")) { field_val = wrhdr_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rdhdr_uncorrectable_interrupt")) { field_val = rdhdr_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rdhdr_correctable_interrupt")) { field_val = rdhdr_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_0_uncorrectable_interrupt")) { field_val = wrbfr_0_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_0_correctable_interrupt")) { field_val = wrbfr_0_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_1_uncorrectable_interrupt")) { field_val = wrbfr_1_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_1_correctable_interrupt")) { field_val = wrbfr_1_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_2_uncorrectable_interrupt")) { field_val = wrbfr_2_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_2_correctable_interrupt")) { field_val = wrbfr_2_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_3_uncorrectable_interrupt")) { field_val = wrbfr_3_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_3_correctable_interrupt")) { field_val = wrbfr_3_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplbfr_uncorrectable_interrupt")) { field_val = cplbfr_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplbfr_correctable_interrupt")) { field_val = cplbfr_correctable_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_itr_ecc_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_intreg_status_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "int_tgt_ecc_interrupt")) { field_val = int_tgt_ecc_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_itr_ecc_interrupt")) { field_val = int_itr_ecc_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_err_interrupt")) { field_val = int_err_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_groups_int_enable_rw_reg_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "int_tgt_ecc_enable")) { field_val = int_tgt_ecc_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_itr_ecc_enable")) { field_val = int_itr_ecc_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_err_enable")) { field_val = int_err_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_intgrp_status_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_rw_reg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_rw_reg.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_inval_cam_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_inval_cam_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_filter_addr_ctl_value_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "value")) { field_val = value(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_filter_addr_ctl_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_filter_addr_hi_data_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "value")) { field_val = value(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_filter_addr_hi_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_filter_addr_lo_data_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "value")) { field_val = value(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_filter_addr_lo_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_pmt_ind_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cmd")) { field_val = cmd(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_pmt_ind_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = entry.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data0")) { field_val = data0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "data1")) { field_val = data1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "data2")) { field_val = data2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "data3")) { field_val = data3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_stat")) { field_val = cpl_stat(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port_id")) { field_val = port_id(); field_found=1; }
    if(!field_found && !strcmp(field_name, "axi_id")) { field_val = axi_id(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fetch_rsp")) { field_val = fetch_rsp(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_ind_rsp_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = entry.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_notify_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "posted")) { field_val = posted(); field_found=1; }
    if(!field_found && !strcmp(field_name, "completed")) { field_val = completed(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_notify_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr15_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr15_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr14_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr14_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr13_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr13_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr12_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr12_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr11_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr11_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr10_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr10_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr9_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr9_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr8_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr8_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr7_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr7_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr6_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr6_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr5_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr5_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr4_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr4_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr3_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr3_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr2_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr2_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr1_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr0_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "valid")) { field_val = valid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_bdf")) { field_val = rc_bdf(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port_id")) { field_val = port_id(); field_found=1; }
    if(!field_found && !strcmp(field_name, "VFID")) { field_val = VFID(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rc_bdfmap_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rdcontext_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "state")) { field_val = state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "portid")) { field_val = portid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "is_nonposted_wr")) { field_val = is_nonposted_wr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "is_posted_wr")) { field_val = is_posted_wr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rdcontext_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_rdcontext_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "state")) { field_val = state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "portid")) { field_val = portid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tag")) { field_val = tag(); field_found=1; }
    if(!field_found && !strcmp(field_name, "axi_id")) { field_val = axi_id(); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { field_val = raddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rsize")) { field_val = rsize(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timer")) { field_val = timer(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bdf")) { field_val = bdf(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aerr")) { field_val = aerr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "derr")) { field_val = derr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "terr")) { field_val = terr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "lineaddr")) { field_val = lineaddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "linesize")) { field_val = linesize(); field_found=1; }
    if(!field_found && !strcmp(field_name, "seg_first")) { field_val = seg_first(); field_found=1; }
    if(!field_found && !strcmp(field_name, "seg_last")) { field_val = seg_last(); field_found=1; }
    if(!field_found && !strcmp(field_name, "seg_next")) { field_val = seg_next(); field_found=1; }
    if(!field_found && !strcmp(field_name, "is_raw")) { field_val = is_raw(); field_found=1; }
    if(!field_found && !strcmp(field_name, "is_nonposted_wr")) { field_val = is_nonposted_wr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "atomic_state")) { field_val = atomic_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "is_narrow")) { field_val = is_narrow(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_rdcontext_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_rdhdr_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_rdhdr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrhdr_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrhdr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrbfr3_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrbfr3_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrbfr2_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrbfr2_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrbfr1_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrbfr1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrbfr0_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrbfr0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst4_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst4_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst3_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst3_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst2_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst2_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst1_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst0_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_romask_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_romask_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_cplst_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_cplst_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxinfo_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxinfo_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxcrbfr3_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxcrbfr2_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxcrbfr1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxcrbfr0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_prt_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "entry_data")) { field_val = entry_data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_prt_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_pmr_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "entry_data")) { field_val = entry_data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_pmr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_pmt_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "x_data")) { field_val = x_data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "y_data")) { field_val = y_data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "valid")) { field_val = valid(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_pmt_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_portmap_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dest")) { field_val = dest(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_portmap_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_pcihdrt_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "valid")) { field_val = valid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bdf")) { field_val = bdf(); field_found=1; }
    if(!field_found && !strcmp(field_name, "td")) { field_val = td(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pasid_en")) { field_val = pasid_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pasid_source")) { field_val = pasid_source(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pasid_value")) { field_val = pasid_value(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pasid_exe")) { field_val = pasid_exe(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pasid_privl")) { field_val = pasid_privl(); field_found=1; }
    if(!field_found && !strcmp(field_name, "attr2_1_rd")) { field_val = attr2_1_rd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "attr2_1_wr")) { field_val = attr2_1_wr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_cfg1")) { field_val = rc_cfg1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "attr0_rd")) { field_val = attr0_rd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "attr0_wr")) { field_val = attr0_wr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ats_at_wr")) { field_val = ats_at_wr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ats_at_rd")) { field_val = ats_at_rd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tc")) { field_val = tc(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ln_wr")) { field_val = ln_wr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ln_rd")) { field_val = ln_rd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rsvd1")) { field_val = rsvd1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_pcihdrt_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_axi_bw_mon_wr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "val")) { field_val = val(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "outstanding")) { field_val = outstanding(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dess_rdy")) { field_val = dess_rdy(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "maxv")) { field_val = maxv(); field_found=1; }
    if(!field_found && !strcmp(field_name, "avrg")) { field_val = avrg(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "maxv")) { field_val = maxv(); field_found=1; }
    if(!field_found && !strcmp(field_name, "avrg")) { field_val = avrg(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_axi_bw_mon_rd_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "val")) { field_val = val(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "outstanding")) { field_val = outstanding(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dess_rdy")) { field_val = dess_rdy(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "maxv")) { field_val = maxv(); field_found=1; }
    if(!field_found && !strcmp(field_name, "avrg")) { field_val = avrg(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "maxv")) { field_val = maxv(); field_found=1; }
    if(!field_found && !strcmp(field_name, "avrg")) { field_val = avrg(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_axi_bw_mon_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "alpha")) { field_val = alpha(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cycle")) { field_val = cycle(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rcache")) { field_val = rcache(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rcache_msk")) { field_val = rcache_msk(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wcache")) { field_val = wcache(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wcache_msk")) { field_val = wcache_msk(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "msk")) { field_val = msk(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "msk")) { field_val = msk(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "msk")) { field_val = msk(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "msk")) { field_val = msk(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_uid2sidLL_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "spare")) { field_val = spare(); field_found=1; }
    if(!field_found && !strcmp(field_name, "mode")) { field_val = mode(); field_found=1; }
    if(!field_found && !strcmp(field_name, "base")) { field_val = base(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_filter_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "awcache_mask")) { field_val = awcache_mask(); field_found=1; }
    if(!field_found && !strcmp(field_name, "awcache_match")) { field_val = awcache_match(); field_found=1; }
    if(!field_found && !strcmp(field_name, "arcache_mask")) { field_val = arcache_mask(); field_found=1; }
    if(!field_found && !strcmp(field_name, "arcache_match")) { field_val = arcache_match(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_pxb_spare3_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_pxb_spare2_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_pxb_spare1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_pxb_spare0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_csr_intr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dowstream")) { field_val = dowstream(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dowstream_enable")) { field_val = dowstream_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tcam_bist_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "done_pass")) { field_val = done_pass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "done_fail")) { field_val = done_fail(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tcam_bist_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "run")) { field_val = run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_sram_bist_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "done_pass")) { field_val = done_pass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "done_fail")) { field_val = done_fail(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_sram_bist_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "run")) { field_val = run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_rdlat3_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num_samples")) { field_val = num_samples(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_rdlat2_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num_samples")) { field_val = num_samples(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_rdlat1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num_samples")) { field_val = num_samples(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_rdlat0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num_samples")) { field_val = num_samples(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_itr_rdlat_measure_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "thres2")) { field_val = thres2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "thres1")) { field_val = thres1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "thres0")) { field_val = thres0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "portid")) { field_val = portid(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_diag_spare1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_diag_spare1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_diag_spare0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_diag_spare0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_debug_port_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "select")) { field_val = select(); field_found=1; }
    if(!field_found && !strcmp(field_name, "enable")) { field_val = enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_axi_attr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "arcache")) { field_val = arcache(); field_found=1; }
    if(!field_found && !strcmp(field_name, "awcache")) { field_val = awcache(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prot")) { field_val = prot(); field_found=1; }
    if(!field_found && !strcmp(field_name, "qos")) { field_val = qos(); field_found=1; }
    if(!field_found && !strcmp(field_name, "lock")) { field_val = lock(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_tgt_rsp_err_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ind_cnxt_mismatch")) { field_val = ind_cnxt_mismatch(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rresp_err")) { field_val = rresp_err(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bresp_err")) { field_val = bresp_err(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_req_portgate_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "closed")) { field_val = closed(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_rsp_err_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "axi")) { field_val = axi(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_timeout")) { field_val = cpl_timeout(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_cpl_err_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecrc")) { field_val = ecrc(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxbuf_ecc")) { field_val = rxbuf_ecc(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_stat")) { field_val = cpl_stat(); field_found=1; }
    if(!field_found && !strcmp(field_name, "unexpected")) { field_val = unexpected(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_xfer_unexpected_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "wr256x")) { field_val = wr256x(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rd256x")) { field_val = rd256x(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wr_narrow")) { field_val = wr_narrow(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rd_narrow")) { field_val = rd_narrow(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_req_err_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "unsupp_wr")) { field_val = unsupp_wr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "unsupp_rd")) { field_val = unsupp_rd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pcihdrt_miss")) { field_val = pcihdrt_miss(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bus_master_dis")) { field_val = bus_master_dis(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_tgt_ind_reason_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pmr_force")) { field_val = pmr_force(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_force")) { field_val = prt_force(); field_found=1; }
    if(!field_found && !strcmp(field_name, "msg")) { field_val = msg(); field_found=1; }
    if(!field_found && !strcmp(field_name, "atomic")) { field_val = atomic(); field_found=1; }
    if(!field_found && !strcmp(field_name, "poisoned")) { field_val = poisoned(); field_found=1; }
    if(!field_found && !strcmp(field_name, "unsupp")) { field_val = unsupp(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmv")) { field_val = pmv(); field_found=1; }
    if(!field_found && !strcmp(field_name, "db_pmv")) { field_val = db_pmv(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmt_miss")) { field_val = pmt_miss(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_vfid_miss")) { field_val = rc_vfid_miss(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_prt_miss")) { field_val = pmr_prt_miss(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_oor")) { field_val = prt_oor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bdf_wcard_oor")) { field_val = bdf_wcard_oor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "vfid_oor")) { field_val = vfid_oor(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_itr_axi_resp_order_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "rd_strict")) { field_val = rd_strict(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wr_strict")) { field_val = wr_strict(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rd_id_limit")) { field_val = rd_id_limit(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_itr_atomic_seq_cnt_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "rst_mask")) { field_val = rst_mask(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_cnxt_pending_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num")) { field_val = num(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_atomic_seq_cnt_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_mask")) { field_val = err_mask(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_portfifo_depth_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "port0_wr")) { field_val = port0_wr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port0_rd")) { field_val = port0_rd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port1_wr")) { field_val = port1_wr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port1_rd")) { field_val = port1_rd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port2_wr")) { field_val = port2_wr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port2_rd")) { field_val = port2_rd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port3_wr")) { field_val = port3_wr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port3_rd")) { field_val = port3_rd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port4_wr")) { field_val = port4_wr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port4_rd")) { field_val = port4_rd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port5_wr")) { field_val = port5_wr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port5_rd")) { field_val = port5_rd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port6_wr")) { field_val = port6_wr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port6_rd")) { field_val = port6_rd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port7_wr")) { field_val = port7_wr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port7_rd")) { field_val = port7_rd(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_tags_pending_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "port0")) { field_val = port0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port1")) { field_val = port1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port2")) { field_val = port2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port3")) { field_val = port3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port4")) { field_val = port4(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port5")) { field_val = port5(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port6")) { field_val = port6(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port7")) { field_val = port7(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_raw_tlp_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "resp_rdy")) { field_val = resp_rdy(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_stat")) { field_val = cpl_stat(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_data_err")) { field_val = cpl_data_err(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_timeout_err")) { field_val = cpl_timeout_err(); field_found=1; }
    if(!field_found && !strcmp(field_name, "req_err")) { field_val = req_err(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_raw_tlp_data_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "resp0")) { field_val = resp0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "resp1")) { field_val = resp1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "resp2")) { field_val = resp2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "resp3")) { field_val = resp3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "resp4")) { field_val = resp4(); field_found=1; }
    if(!field_found && !strcmp(field_name, "resp5")) { field_val = resp5(); field_found=1; }
    if(!field_found && !strcmp(field_name, "resp6")) { field_val = resp6(); field_found=1; }
    if(!field_found && !strcmp(field_name, "resp7")) { field_val = resp7(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dw_cnt")) { field_val = dw_cnt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port_id")) { field_val = port_id(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cmd_go")) { field_val = cmd_go(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_itr_raw_tlp_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dw0")) { field_val = dw0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw1")) { field_val = dw1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw2")) { field_val = dw2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw3")) { field_val = dw3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw4")) { field_val = dw4(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw5")) { field_val = dw5(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw6")) { field_val = dw6(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw7")) { field_val = dw7(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw8")) { field_val = dw8(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw9")) { field_val = dw9(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw10")) { field_val = dw10(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw11")) { field_val = dw11(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "waddr")) { field_val = waddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { field_val = raddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "waddr")) { field_val = waddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { field_val = raddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "waddr")) { field_val = waddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { field_val = raddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "waddr")) { field_val = waddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { field_val = raddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "waddr")) { field_val = waddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { field_val = raddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "waddr")) { field_val = waddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { field_val = raddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "waddr")) { field_val = waddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { field_val = raddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "waddr")) { field_val = waddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { field_val = raddr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_req_debug_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "stg0_vld")) { field_val = stg0_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg1_vld")) { field_val = stg1_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg2_vld")) { field_val = stg2_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg3_vld")) { field_val = stg3_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg4_vld")) { field_val = stg4_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg5_vld")) { field_val = stg5_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "s0_rdy")) { field_val = s0_rdy(); field_found=1; }
    if(!field_found && !strcmp(field_name, "s0_port_space_avl_vec")) { field_val = s0_port_space_avl_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "s0_tag_avl_vec")) { field_val = s0_tag_avl_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_cnxt_free_avl0")) { field_val = itr_cnxt_free_avl0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_cnxt_free_avl1")) { field_val = itr_cnxt_free_avl1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "s5_req_fifo_depth")) { field_val = s5_req_fifo_depth(); field_found=1; }
    if(!field_found && !strcmp(field_name, "s5_seg_state")) { field_val = s5_seg_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tx_wrcnt_req_stall")) { field_val = tx_wrcnt_req_stall(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tx_wrcnt_cpl_stall")) { field_val = tx_wrcnt_cpl_stall(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tx_wrcnt_raw_stall")) { field_val = tx_wrcnt_raw_stall(); field_found=1; }
    if(!field_found && !strcmp(field_name, "s5_is_wr")) { field_val = s5_is_wr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "s5_is_msg")) { field_val = s5_is_msg(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_eop_pnd")) { field_val = cpl_eop_pnd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "req_eop_pnd")) { field_val = req_eop_pnd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "raw_cmd_pnd")) { field_val = raw_cmd_pnd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_tx_vld")) { field_val = cpl_tx_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_tx_rdy")) { field_val = cpl_tx_rdy(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bvalid")) { field_val = bvalid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bready")) { field_val = bready(); field_found=1; }
    if(!field_found && !strcmp(field_name, "awvalid")) { field_val = awvalid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "awready")) { field_val = awready(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wvalid")) { field_val = wvalid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wready")) { field_val = wready(); field_found=1; }
    if(!field_found && !strcmp(field_name, "arvalid")) { field_val = arvalid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "arready")) { field_val = arready(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rvalid")) { field_val = rvalid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rready")) { field_val = rready(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_req_debug_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "stg0_vld")) { field_val = stg0_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg1_vld")) { field_val = stg1_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg2_vld")) { field_val = stg2_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg3_vld")) { field_val = stg3_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg4_vld")) { field_val = stg4_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg5_vld")) { field_val = stg5_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg6_vld")) { field_val = stg6_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg7_vld")) { field_val = stg7_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg8_vld")) { field_val = stg8_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg9_vld")) { field_val = stg9_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg0_rdy")) { field_val = stg0_rdy(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg1_rdy")) { field_val = stg1_rdy(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg2_rdy")) { field_val = stg2_rdy(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg3_rdy")) { field_val = stg3_rdy(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg4_rdy")) { field_val = stg4_rdy(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg5_rdy")) { field_val = stg5_rdy(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg6_rdy")) { field_val = stg6_rdy(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg7_rdy")) { field_val = stg7_rdy(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg8_rdy")) { field_val = stg8_rdy(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg9_rdy")) { field_val = stg9_rdy(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_req_vld")) { field_val = tgt_req_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "axi_fifo_rdy")) { field_val = axi_fifo_rdy(); field_found=1; }
    if(!field_found && !strcmp(field_name, "axi_fifo_notempty")) { field_val = axi_fifo_notempty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "notify_full")) { field_val = notify_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_cnxt_xn_pnd")) { field_val = tgt_cnxt_xn_pnd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcfg0_vld")) { field_val = rxcfg0_vld(); field_found=1; }
    if(!field_found && !strcmp(field_name, "hw_rsp_rdy")) { field_val = hw_rsp_rdy(); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_awvalid")) { field_val = m_axi_awvalid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_arvalid")) { field_val = m_axi_arvalid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_wvalid")) { field_val = m_axi_wvalid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_awready")) { field_val = m_axi_awready(); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_arready")) { field_val = m_axi_arready(); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_wready")) { field_val = m_axi_wready(); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_rvalid")) { field_val = m_axi_rvalid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_rready")) { field_val = m_axi_rready(); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_bvalid")) { field_val = m_axi_bvalid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_bready")) { field_val = m_axi_bready(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_rsp_tx_rdy")) { field_val = tgt_rsp_tx_rdy(); field_found=1; }
    if(!field_found && !strcmp(field_name, "s7_ax_state0")) { field_val = s7_ax_state0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "s7_ax_state1")) { field_val = s7_ax_state1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "s7_ax_state2")) { field_val = s7_ax_state2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "s7_ax_state3")) { field_val = s7_ax_state3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "s7_ax_state4")) { field_val = s7_ax_state4(); field_found=1; }
    if(!field_found && !strcmp(field_name, "s7_ax_state5")) { field_val = s7_ax_state5(); field_found=1; }
    if(!field_found && !strcmp(field_name, "s7_ax_state6")) { field_val = s7_ax_state6(); field_found=1; }
    if(!field_found && !strcmp(field_name, "s7_ax_state7")) { field_val = s7_ax_state7(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_marker_rx_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "port0")) { field_val = port0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port1")) { field_val = port1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port2")) { field_val = port2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port3")) { field_val = port3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port4")) { field_val = port4(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port5")) { field_val = port5(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port6")) { field_val = port6(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port7")) { field_val = port7(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_tot_atomic_req_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sent")) { field_val = sent(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_intx_assert_msg_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sent")) { field_val = sent(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_tot_msg_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sent")) { field_val = sent(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_axi_rd_num_ids_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pending")) { field_val = pending(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_axi_wr_num_ids_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pending")) { field_val = pending(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_tot_axi_rd_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num_bytes")) { field_val = num_bytes(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_tot_axi_wr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num_bytes")) { field_val = num_bytes(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_tgt_axi_rd64_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { field_val = req(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_tgt_tot_axi_rd_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { field_val = req(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_tgt_rsp_ca_ur_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cnt")) { field_val = cnt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_tgt_db32_axi_wr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { field_val = req(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_tgt_db64_axi_wr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { field_val = req(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_tgt_axi_wr64_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { field_val = req(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_tgt_tot_axi_wr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { field_val = req(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_axi_rd256_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { field_val = req(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_axi_rd64_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { field_val = req(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_tot_axi_rd_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { field_val = req(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_tot_axi_rd_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num_bytes")) { field_val = num_bytes(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_tot_axi_wr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num_bytes")) { field_val = num_bytes(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_axi_wr256_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { field_val = req(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_axi_wr64_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { field_val = req(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_tot_axi_wr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { field_val = req(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ind_info_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pending")) { field_val = pending(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ramaddr")) { field_val = ramaddr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_axi_pending_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ids_p0")) { field_val = ids_p0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ids_p1")) { field_val = ids_p1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ids_p2")) { field_val = ids_p2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ids_p3")) { field_val = ids_p3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ids_p4")) { field_val = ids_p4(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ids_p5")) { field_val = ids_p5(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ids_p6")) { field_val = ids_p6(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ids_p7")) { field_val = ids_p7(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "p_shift")) { field_val = p_shift(); field_found=1; }
    if(!field_found && !strcmp(field_name, "b_shift")) { field_val = b_shift(); field_found=1; }
    if(!field_found && !strcmp(field_name, "d_shift")) { field_val = d_shift(); field_found=1; }
    if(!field_found && !strcmp(field_name, "f_shift")) { field_val = f_shift(); field_found=1; }
    if(!field_found && !strcmp(field_name, "resource_dwsize")) { field_val = resource_dwsize(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_tgt_rx_drop_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "port0")) { field_val = port0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port1")) { field_val = port1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port2")) { field_val = port2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port3")) { field_val = port3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port4")) { field_val = port4(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port5")) { field_val = port5(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port6")) { field_val = port6(); field_found=1; }
    if(!field_found && !strcmp(field_name, "port7")) { field_val = port7(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_romask_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_prt_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_pmr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_cplst_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_rxinfo_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_aximst_4_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_aximst_3_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_aximst_2_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_aximst_1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_aximst_0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_cplbfr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_rdhdr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_wrhdr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_portmap_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_pcihdrt_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_ecc_disable_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "rxinfo_cor")) { field_val = rxinfo_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxinfo_det")) { field_val = rxinfo_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxinfo_dhs")) { field_val = rxinfo_dhs(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_cor")) { field_val = pmr_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_det")) { field_val = pmr_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_dhs")) { field_val = pmr_dhs(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_cor")) { field_val = prt_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_det")) { field_val = prt_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_dhs")) { field_val = prt_dhs(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplst_cor")) { field_val = cplst_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplst_det")) { field_val = cplst_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplst_dhs")) { field_val = cplst_dhs(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_cor")) { field_val = aximst_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_det")) { field_val = aximst_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_dhs")) { field_val = aximst_dhs(); field_found=1; }
    if(!field_found && !strcmp(field_name, "romask_cor")) { field_val = romask_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "romask_det")) { field_val = romask_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "romask_dhs")) { field_val = romask_dhs(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_cor")) { field_val = rxcrbfr_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_det")) { field_val = rxcrbfr_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_dhs")) { field_val = rxcrbfr_dhs(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_itr_ecc_disable_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pcihdrt_cor")) { field_val = pcihdrt_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pcihdrt_det")) { field_val = pcihdrt_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pcihdrt_dhs")) { field_val = pcihdrt_dhs(); field_found=1; }
    if(!field_found && !strcmp(field_name, "portmap_cor")) { field_val = portmap_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "portmap_det")) { field_val = portmap_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "portmap_dhs")) { field_val = portmap_dhs(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_cor")) { field_val = wrbfr_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_det")) { field_val = wrbfr_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_dhs")) { field_val = wrbfr_dhs(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrhdr_cor")) { field_val = wrhdr_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrhdr_det")) { field_val = wrhdr_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrhdr_dhs")) { field_val = wrhdr_dhs(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rdhdr_cor")) { field_val = rdhdr_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rdhdr_det")) { field_val = rdhdr_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rdhdr_dhs")) { field_val = rdhdr_dhs(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplbfr_cor")) { field_val = cplbfr_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplbfr_det")) { field_val = cplbfr_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplbfr_dhs")) { field_val = cplbfr_dhs(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_pmt_ind_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "hit")) { field_val = hit(); field_found=1; }
    if(!field_found && !strcmp(field_name, "hit_addr")) { field_val = hit_addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_pmt_ind_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "key")) { field_val = key(); field_found=1; }
    if(!field_found && !strcmp(field_name, "mask")) { field_val = mask(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_pmt_grst_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "vld")) { field_val = vld(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "val")) { field_val = val(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "base_35_2")) { field_val = base_35_2(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "region0")) { field_val = region0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "region1")) { field_val = region1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "region2")) { field_val = region2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "region3")) { field_val = region3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "region4")) { field_val = region4(); field_found=1; }
    if(!field_found && !strcmp(field_name, "region5")) { field_val = region5(); field_found=1; }
    if(!field_found && !strcmp(field_name, "region6")) { field_val = region6(); field_found=1; }
    if(!field_found && !strcmp(field_name, "region7")) { field_val = region7(); field_found=1; }
    if(!field_found && !strcmp(field_name, "region8")) { field_val = region8(); field_found=1; }
    if(!field_found && !strcmp(field_name, "region9")) { field_val = region9(); field_found=1; }
    if(!field_found && !strcmp(field_name, "region10")) { field_val = region10(); field_found=1; }
    if(!field_found && !strcmp(field_name, "region11")) { field_val = region11(); field_found=1; }
    if(!field_found && !strcmp(field_name, "region12")) { field_val = region12(); field_found=1; }
    if(!field_found && !strcmp(field_name, "region13")) { field_val = region13(); field_found=1; }
    if(!field_found && !strcmp(field_name, "region14")) { field_val = region14(); field_found=1; }
    if(!field_found && !strcmp(field_name, "region15")) { field_val = region15(); field_found=1; }
    if(!field_found && !strcmp(field_name, "atomic")) { field_val = atomic(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_cfg")) { field_val = rc_cfg(); field_found=1; }
    if(!field_found && !strcmp(field_name, "atomic_page_id")) { field_val = atomic_page_id(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_cfg_page_id")) { field_val = rc_cfg_page_id(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_io64k")) { field_val = rc_io64k(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_rc_key_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sel")) { field_val = sel(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_pmt_tbl_id_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "memio_tbl_id0")) { field_val = memio_tbl_id0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_tbl_id0")) { field_val = cfg_tbl_id0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_tbl_id0")) { field_val = rc_tbl_id0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "default_tbl_id0")) { field_val = default_tbl_id0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "memio_tbl_id1")) { field_val = memio_tbl_id1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_tbl_id1")) { field_val = cfg_tbl_id1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_tbl_id1")) { field_val = rc_tbl_id1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "default_tbl_id1")) { field_val = default_tbl_id1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "memio_tbl_id2")) { field_val = memio_tbl_id2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_tbl_id2")) { field_val = cfg_tbl_id2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_tbl_id2")) { field_val = rc_tbl_id2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "default_tbl_id2")) { field_val = default_tbl_id2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "memio_tbl_id3")) { field_val = memio_tbl_id3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_tbl_id3")) { field_val = cfg_tbl_id3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_tbl_id3")) { field_val = rc_tbl_id3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "default_tbl_id3")) { field_val = default_tbl_id3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "memio_tbl_id4")) { field_val = memio_tbl_id4(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_tbl_id4")) { field_val = cfg_tbl_id4(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_tbl_id4")) { field_val = rc_tbl_id4(); field_found=1; }
    if(!field_found && !strcmp(field_name, "default_tbl_id4")) { field_val = default_tbl_id4(); field_found=1; }
    if(!field_found && !strcmp(field_name, "memio_tbl_id5")) { field_val = memio_tbl_id5(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_tbl_id5")) { field_val = cfg_tbl_id5(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_tbl_id5")) { field_val = rc_tbl_id5(); field_found=1; }
    if(!field_found && !strcmp(field_name, "default_tbl_id5")) { field_val = default_tbl_id5(); field_found=1; }
    if(!field_found && !strcmp(field_name, "memio_tbl_id6")) { field_val = memio_tbl_id6(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_tbl_id6")) { field_val = cfg_tbl_id6(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_tbl_id6")) { field_val = rc_tbl_id6(); field_found=1; }
    if(!field_found && !strcmp(field_name, "default_tbl_id6")) { field_val = default_tbl_id6(); field_found=1; }
    if(!field_found && !strcmp(field_name, "memio_tbl_id7")) { field_val = memio_tbl_id7(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_tbl_id7")) { field_val = cfg_tbl_id7(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_tbl_id7")) { field_val = rc_tbl_id7(); field_found=1; }
    if(!field_found && !strcmp(field_name, "default_tbl_id7")) { field_val = default_tbl_id7(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_notify_en_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "msg")) { field_val = msg(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmv")) { field_val = pmv(); field_found=1; }
    if(!field_found && !strcmp(field_name, "db_pmv")) { field_val = db_pmv(); field_found=1; }
    if(!field_found && !strcmp(field_name, "unsupp")) { field_val = unsupp(); field_found=1; }
    if(!field_found && !strcmp(field_name, "atomic")) { field_val = atomic(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmt_miss")) { field_val = pmt_miss(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_invalid")) { field_val = pmr_invalid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_invalid")) { field_val = prt_invalid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_vfid_miss")) { field_val = rc_vfid_miss(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_oor")) { field_val = prt_oor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "vfid_oor")) { field_val = vfid_oor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_bdf_oor")) { field_val = cfg_bdf_oor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_ecc_err")) { field_val = pmr_ecc_err(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_ecc_err")) { field_val = prt_ecc_err(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_ind_en_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "msg")) { field_val = msg(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmv")) { field_val = pmv(); field_found=1; }
    if(!field_found && !strcmp(field_name, "db_pmv")) { field_val = db_pmv(); field_found=1; }
    if(!field_found && !strcmp(field_name, "unsupp")) { field_val = unsupp(); field_found=1; }
    if(!field_found && !strcmp(field_name, "atomic")) { field_val = atomic(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmt_miss")) { field_val = pmt_miss(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_invalid")) { field_val = pmr_invalid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_invalid")) { field_val = prt_invalid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_vfid_miss")) { field_val = rc_vfid_miss(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_oor")) { field_val = prt_oor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "vfid_oor")) { field_val = vfid_oor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_bdf_oor")) { field_val = cfg_bdf_oor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_ecc_err")) { field_val = pmr_ecc_err(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_ecc_err")) { field_val = prt_ecc_err(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "adr_base0")) { field_val = adr_base0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_limit0")) { field_val = adr_limit0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "update0")) { field_val = update0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rst_rxfifo0")) { field_val = rst_rxfifo0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_base1")) { field_val = adr_base1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_limit1")) { field_val = adr_limit1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "update1")) { field_val = update1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rst_rxfifo1")) { field_val = rst_rxfifo1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_base2")) { field_val = adr_base2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_limit2")) { field_val = adr_limit2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "update2")) { field_val = update2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rst_rxfifo2")) { field_val = rst_rxfifo2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_base3")) { field_val = adr_base3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_limit3")) { field_val = adr_limit3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "update3")) { field_val = update3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rst_rxfifo3")) { field_val = rst_rxfifo3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_base4")) { field_val = adr_base4(); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_limit4")) { field_val = adr_limit4(); field_found=1; }
    if(!field_found && !strcmp(field_name, "update4")) { field_val = update4(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rst_rxfifo4")) { field_val = rst_rxfifo4(); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_base5")) { field_val = adr_base5(); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_limit5")) { field_val = adr_limit5(); field_found=1; }
    if(!field_found && !strcmp(field_name, "update5")) { field_val = update5(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rst_rxfifo5")) { field_val = rst_rxfifo5(); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_base6")) { field_val = adr_base6(); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_limit6")) { field_val = adr_limit6(); field_found=1; }
    if(!field_found && !strcmp(field_name, "update6")) { field_val = update6(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rst_rxfifo6")) { field_val = rst_rxfifo6(); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_base7")) { field_val = adr_base7(); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_limit7")) { field_val = adr_limit7(); field_found=1; }
    if(!field_found && !strcmp(field_name, "update7")) { field_val = update7(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rst_rxfifo7")) { field_val = rst_rxfifo7(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_fence_ignore_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "from_mask")) { field_val = from_mask(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_msg_filter_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "msg_code0")) { field_val = msg_code0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_en0")) { field_val = drop_en0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "msg_code1")) { field_val = msg_code1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_en1")) { field_val = drop_en1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "msg_code2")) { field_val = msg_code2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_en2")) { field_val = drop_en2(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_doorbell_base_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "addr_33_24")) { field_val = addr_33_24(); field_found=1; }
    if(!field_found && !strcmp(field_name, "db_host_sel")) { field_val = db_host_sel(); field_found=1; }
    if(!field_found && !strcmp(field_name, "db_32b_sel")) { field_val = db_32b_sel(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_req_indirect_int_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "intr_data")) { field_val = intr_data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "base_addr_35_2")) { field_val = base_addr_35_2(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_req_notify_ring_size_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "mask")) { field_val = mask(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_req_notify_int_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "intr_data")) { field_val = intr_data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "base_addr_35_2")) { field_val = base_addr_35_2(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_req_notify_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "base_addr_35_16")) { field_val = base_addr_35_16(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_itr_tx_req_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "macfifo_thres")) { field_val = macfifo_thres(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rd_sgl_pnd")) { field_val = rd_sgl_pnd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tag_avl_guardband")) { field_val = tag_avl_guardband(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cnxt_avl_guardband")) { field_val = cnxt_avl_guardband(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_port_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "id_limit")) { field_val = id_limit(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bus_adjust")) { field_val = bus_adjust(); field_found=1; }
    if(!field_found && !strcmp(field_name, "halt")) { field_val = halt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "single_pnd")) { field_val = single_pnd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "td_miss")) { field_val = td_miss(); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth_thres")) { field_val = depth_thres(); field_found=1; }
    if(!field_found && !strcmp(field_name, "skip_notify_if_qfull")) { field_val = skip_notify_if_qfull(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fbe_holes_allow")) { field_val = fbe_holes_allow(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fence_dis")) { field_val = fence_dis(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_itr_port_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "rdreq_limit")) { field_val = rdreq_limit(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timer_tick")) { field_val = timer_tick(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timer_limit")) { field_val = timer_limit(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bus_adjust")) { field_val = bus_adjust(); field_found=1; }
    if(!field_found && !strcmp(field_name, "arb_cr_hdr")) { field_val = arb_cr_hdr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "arb_cr_data")) { field_val = arb_cr_data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "arb_cr_dis_wr")) { field_val = arb_cr_dis_wr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "arb_cr_dis_rd")) { field_val = arb_cr_dis_rd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "arb_cnxtcnt_chk_dis")) { field_val = arb_cnxtcnt_chk_dis(); field_found=1; }
    if(!field_found && !strcmp(field_name, "arb_tagcnt_chk_dis")) { field_val = arb_tagcnt_chk_dis(); field_found=1; }
    if(!field_found && !strcmp(field_name, "arb_txfifocnt")) { field_val = arb_txfifocnt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_extn_en")) { field_val = adr_extn_en(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_pc_port_type_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "host_or_rc0")) { field_val = host_or_rc0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "host_or_rc1")) { field_val = host_or_rc1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "host_or_rc2")) { field_val = host_or_rc2(); field_found=1; }
    if(!field_found && !strcmp(field_name, "host_or_rc3")) { field_val = host_or_rc3(); field_found=1; }
    if(!field_found && !strcmp(field_name, "host_or_rc4")) { field_val = host_or_rc4(); field_found=1; }
    if(!field_found && !strcmp(field_name, "host_or_rc5")) { field_val = host_or_rc5(); field_found=1; }
    if(!field_found && !strcmp(field_name, "host_or_rc6")) { field_val = host_or_rc6(); field_found=1; }
    if(!field_found && !strcmp(field_name, "host_or_rc7")) { field_val = host_or_rc7(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_rdintr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ireg")) { field_val = ireg(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_base_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "scratch_reg")) { field_val = scratch_reg(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = base.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = rdintr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pc_port_type.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_itr_tx_req.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_req_notify_int.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_req_notify_ring_size.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_req_indirect_int.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_doorbell_base.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_msg_filter.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_fence_ignore.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_rx_credit_bfr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_ind_en.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_notify_en.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pmt_tbl_id.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_rc_key.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pcie_local_memaddr_decode.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_rc_legacy_int_data.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_pmt_grst.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_pmt_ind.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_pmt_ind.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_itr_ecc_disable.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_ecc_disable.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_wrbfr_0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_wrbfr_1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_wrbfr_2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_wrbfr_3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_pcihdrt.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_portmap.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_wrhdr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_rdhdr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_cplbfr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_rxcrbfr_0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_rxcrbfr_1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_rxcrbfr_2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_rxcrbfr_3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_aximst_0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_aximst_1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_aximst_2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_aximst_3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_aximst_4.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_rxinfo.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_cplst.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_pmr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_prt.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_romask.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_tgt_rx_drop.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_axi_pending.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_tot_axi_wr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_axi_wr64.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_axi_wr256.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_tot_axi_wr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_tot_axi_rd.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_tot_axi_rd.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_axi_rd64.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_axi_rd256.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_tgt_tot_axi_wr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_tgt_axi_wr64.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_tgt_db64_axi_wr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_tgt_db32_axi_wr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_tgt_rsp_ca_ur.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_tgt_tot_axi_rd.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_tgt_axi_rd64.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_tot_axi_wr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_tot_axi_rd.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_axi_wr_num_ids.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_axi_rd_num_ids.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_tot_msg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_intx_assert_msg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_tot_atomic_req.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_marker_rx.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_req_debug.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_req_debug.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_rxcrbfr_debug_0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_rxcrbfr_debug_1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_rxcrbfr_debug_2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_rxcrbfr_debug_3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_rxcrbfr_debug_4.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_rxcrbfr_debug_5.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_rxcrbfr_debug_6.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_rxcrbfr_debug_7.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_itr_raw_tlp.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_itr_raw_tlp_cmd.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_raw_tlp_data.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_raw_tlp.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_tags_pending.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_portfifo_depth.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_atomic_seq_cnt.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_cnxt_pending.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_itr_atomic_seq_cnt.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_itr_axi_resp_order.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_tgt_ind_reason.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_req_err.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_xfer_unexpected.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_cpl_err.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_rsp_err.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_req_portgate.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_tgt_rsp_err.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_axi_attr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_debug_port.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_diag_spare0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_diag_spare0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_diag_spare1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_diag_spare1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_itr_rdlat_measure.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_rdlat0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_rdlat1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_rdlat2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_rdlat3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_sram_bist.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_sram_bist.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tcam_bist.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tcam_bist.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = csr_intr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pxb_spare0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pxb_spare1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pxb_spare2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pxb_spare3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_filter.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_uid2sidLL.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_uid2sidLL_hbm_hash_msk_bit0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_uid2sidLL_hbm_hash_msk_bit1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_uid2sidLL_hbm_hash_msk_bit2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_uid2sidLL_hbm_hash_msk_bit3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_axi_bw_mon.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_axi_bw_mon_rd_latency.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_axi_bw_mon_rd_bandwidth.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_axi_bw_mon_rd_transactions.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_axi_bw_mon_rd.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_axi_bw_mon_wr_latency.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_axi_bw_mon_wr_bandwidth.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_axi_bw_mon_wr_transactions.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_axi_bw_mon_wr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_pcihdrt.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_portmap.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_pmt.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_pmr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_prt.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_rxcrbfr0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_rxcrbfr1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_rxcrbfr2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_rxcrbfr3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_rxinfo.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_cplst.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_romask.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_aximst0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_aximst1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_aximst2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_aximst3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_aximst4.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_wrbfr0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_wrbfr1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_wrbfr2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_wrbfr3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_wrhdr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_rdhdr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_rdcontext.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_rdcontext.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_rc_bdfmap.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr4.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr5.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr6.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr7.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr8.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr9.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr10.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr11.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr12.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr13.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr14.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr15.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_notify.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_ind_rsp.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_pmt_ind.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = filter_addr_lo.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = filter_addr_hi.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = filter_addr_ctl.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_inval_cam.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_groups.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_itr_ecc.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_tgt_ecc.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_err.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_err_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cpl_ecrc_enable")) { cpl_ecrc_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_rxbuf_err_enable")) { cpl_rxbuf_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_stat_enable")) { cpl_stat_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_unexp_enable")) { cpl_unexp_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_timeout_enable")) { cpl_timeout_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_len_enable")) { cpl_len_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_poison_enable")) { cpl_poison_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_lowaddr_enable")) { cpl_lowaddr_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_ind_rsp_unexp_enable")) { tgt_ind_rsp_unexp_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_axi_rsp_unexp_enable")) { tgt_axi_rsp_unexp_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_axi_rsp_err_enable")) { tgt_axi_rsp_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_req_4k_err_enable")) { tgt_req_4k_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_req_bdfmiss_enable")) { itr_req_bdfmiss_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_req_axi_unsupp_enable")) { itr_req_axi_unsupp_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_req_msg_align_err_enable")) { itr_req_msg_align_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_bus_master_dis_enable")) { itr_bus_master_dis_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_atomic_seq_err_enable")) { itr_atomic_seq_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_atomic_resource_err_enable")) { itr_atomic_resource_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_rmw_axi_resperr_enable")) { tgt_rmw_axi_resperr_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_ind_notify_axi_resperr_enable")) { tgt_ind_notify_axi_resperr_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_err_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cpl_ecrc_interrupt")) { cpl_ecrc_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_rxbuf_err_interrupt")) { cpl_rxbuf_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_stat_interrupt")) { cpl_stat_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_unexp_interrupt")) { cpl_unexp_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_timeout_interrupt")) { cpl_timeout_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_len_interrupt")) { cpl_len_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_poison_interrupt")) { cpl_poison_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_lowaddr_interrupt")) { cpl_lowaddr_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_ind_rsp_unexp_interrupt")) { tgt_ind_rsp_unexp_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_axi_rsp_unexp_interrupt")) { tgt_axi_rsp_unexp_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_axi_rsp_err_interrupt")) { tgt_axi_rsp_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_req_4k_err_interrupt")) { tgt_req_4k_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_req_bdfmiss_interrupt")) { itr_req_bdfmiss_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_req_axi_unsupp_interrupt")) { itr_req_axi_unsupp_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_req_msg_align_err_interrupt")) { itr_req_msg_align_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_bus_master_dis_interrupt")) { itr_bus_master_dis_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_atomic_seq_err_interrupt")) { itr_atomic_seq_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_atomic_resource_err_interrupt")) { itr_atomic_resource_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_rmw_axi_resperr_interrupt")) { tgt_rmw_axi_resperr_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_ind_notify_axi_resperr_interrupt")) { tgt_ind_notify_axi_resperr_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_err_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "aximst_0_uncorrectable_enable")) { aximst_0_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_0_correctable_enable")) { aximst_0_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_1_uncorrectable_enable")) { aximst_1_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_1_correctable_enable")) { aximst_1_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_2_uncorrectable_enable")) { aximst_2_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_2_correctable_enable")) { aximst_2_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_3_uncorrectable_enable")) { aximst_3_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_3_correctable_enable")) { aximst_3_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_4_uncorrectable_enable")) { aximst_4_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_4_correctable_enable")) { aximst_4_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_0_uncorrectable_enable")) { rxcrbfr_0_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_0_correctable_enable")) { rxcrbfr_0_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_1_uncorrectable_enable")) { rxcrbfr_1_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_1_correctable_enable")) { rxcrbfr_1_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_2_uncorrectable_enable")) { rxcrbfr_2_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_2_correctable_enable")) { rxcrbfr_2_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_3_uncorrectable_enable")) { rxcrbfr_3_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_3_correctable_enable")) { rxcrbfr_3_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxinfo_uncorrectable_enable")) { rxinfo_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxinfo_correctable_enable")) { rxinfo_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplst_uncorrectable_enable")) { cplst_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplst_correctable_enable")) { cplst_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "romask_uncorrectable_enable")) { romask_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "romask_correctable_enable")) { romask_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_uncorrectable_enable")) { pmr_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_correctable_enable")) { pmr_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_uncorrectable_enable")) { prt_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_correctable_enable")) { prt_correctable_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_tgt_ecc_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "aximst_0_uncorrectable_interrupt")) { aximst_0_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_0_correctable_interrupt")) { aximst_0_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_1_uncorrectable_interrupt")) { aximst_1_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_1_correctable_interrupt")) { aximst_1_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_2_uncorrectable_interrupt")) { aximst_2_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_2_correctable_interrupt")) { aximst_2_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_3_uncorrectable_interrupt")) { aximst_3_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_3_correctable_interrupt")) { aximst_3_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_4_uncorrectable_interrupt")) { aximst_4_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_4_correctable_interrupt")) { aximst_4_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_0_uncorrectable_interrupt")) { rxcrbfr_0_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_0_correctable_interrupt")) { rxcrbfr_0_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_1_uncorrectable_interrupt")) { rxcrbfr_1_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_1_correctable_interrupt")) { rxcrbfr_1_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_2_uncorrectable_interrupt")) { rxcrbfr_2_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_2_correctable_interrupt")) { rxcrbfr_2_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_3_uncorrectable_interrupt")) { rxcrbfr_3_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_3_correctable_interrupt")) { rxcrbfr_3_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxinfo_uncorrectable_interrupt")) { rxinfo_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxinfo_correctable_interrupt")) { rxinfo_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplst_uncorrectable_interrupt")) { cplst_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplst_correctable_interrupt")) { cplst_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "romask_uncorrectable_interrupt")) { romask_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "romask_correctable_interrupt")) { romask_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_uncorrectable_interrupt")) { pmr_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_correctable_interrupt")) { pmr_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_uncorrectable_interrupt")) { prt_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_correctable_interrupt")) { prt_correctable_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_tgt_ecc_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_itr_ecc_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pcihdrt_uncorrectable_enable")) { pcihdrt_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pcihdrt_correctable_enable")) { pcihdrt_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "portmap_uncorrectable_enable")) { portmap_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "portmap_correctable_enable")) { portmap_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrhdr_uncorrectable_enable")) { wrhdr_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrhdr_correctable_enable")) { wrhdr_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rdhdr_uncorrectable_enable")) { rdhdr_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rdhdr_correctable_enable")) { rdhdr_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_0_uncorrectable_enable")) { wrbfr_0_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_0_correctable_enable")) { wrbfr_0_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_1_uncorrectable_enable")) { wrbfr_1_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_1_correctable_enable")) { wrbfr_1_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_2_uncorrectable_enable")) { wrbfr_2_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_2_correctable_enable")) { wrbfr_2_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_3_uncorrectable_enable")) { wrbfr_3_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_3_correctable_enable")) { wrbfr_3_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplbfr_uncorrectable_enable")) { cplbfr_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplbfr_correctable_enable")) { cplbfr_correctable_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_itr_ecc_intreg_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pcihdrt_uncorrectable_interrupt")) { pcihdrt_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pcihdrt_correctable_interrupt")) { pcihdrt_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "portmap_uncorrectable_interrupt")) { portmap_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "portmap_correctable_interrupt")) { portmap_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrhdr_uncorrectable_interrupt")) { wrhdr_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrhdr_correctable_interrupt")) { wrhdr_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rdhdr_uncorrectable_interrupt")) { rdhdr_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rdhdr_correctable_interrupt")) { rdhdr_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_0_uncorrectable_interrupt")) { wrbfr_0_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_0_correctable_interrupt")) { wrbfr_0_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_1_uncorrectable_interrupt")) { wrbfr_1_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_1_correctable_interrupt")) { wrbfr_1_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_2_uncorrectable_interrupt")) { wrbfr_2_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_2_correctable_interrupt")) { wrbfr_2_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_3_uncorrectable_interrupt")) { wrbfr_3_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_3_correctable_interrupt")) { wrbfr_3_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplbfr_uncorrectable_interrupt")) { cplbfr_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplbfr_correctable_interrupt")) { cplbfr_correctable_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_itr_ecc_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_intreg_status_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "int_tgt_ecc_interrupt")) { int_tgt_ecc_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_itr_ecc_interrupt")) { int_itr_ecc_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_err_interrupt")) { int_err_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_int_groups_int_enable_rw_reg_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "int_tgt_ecc_enable")) { int_tgt_ecc_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_itr_ecc_enable")) { int_itr_ecc_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_err_enable")) { int_err_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_intgrp_status_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_rw_reg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_rw_reg.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_inval_cam_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_inval_cam_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_filter_addr_ctl_value_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "value")) { value(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_filter_addr_ctl_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_filter_addr_hi_data_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "value")) { value(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_filter_addr_hi_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_filter_addr_lo_data_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "value")) { value(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_filter_addr_lo_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_pmt_ind_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cmd")) { cmd(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_pmt_ind_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = entry.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data0")) { data0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "data1")) { data1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "data2")) { data2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "data3")) { data3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_stat")) { cpl_stat(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port_id")) { port_id(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "axi_id")) { axi_id(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fetch_rsp")) { fetch_rsp(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_ind_rsp_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = entry.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_notify_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "posted")) { posted(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "completed")) { completed(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_notify_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr15_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr15_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr14_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr14_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr13_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr13_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr12_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr12_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr11_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr11_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr10_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr10_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr9_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr9_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr8_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr8_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr7_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr7_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr6_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr6_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr5_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr5_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr4_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr4_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr3_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr3_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr2_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr2_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr1_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr0_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_cplbfr0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "valid")) { valid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_bdf")) { rc_bdf(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port_id")) { port_id(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "VFID")) { VFID(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rc_bdfmap_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rdcontext_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "state")) { state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "portid")) { portid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "is_nonposted_wr")) { is_nonposted_wr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "is_posted_wr")) { is_posted_wr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rdcontext_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_rdcontext_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "state")) { state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "portid")) { portid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tag")) { tag(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "axi_id")) { axi_id(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { raddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rsize")) { rsize(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timer")) { timer(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bdf")) { bdf(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aerr")) { aerr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "derr")) { derr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "terr")) { terr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "lineaddr")) { lineaddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "linesize")) { linesize(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "seg_first")) { seg_first(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "seg_last")) { seg_last(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "seg_next")) { seg_next(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "is_raw")) { is_raw(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "is_nonposted_wr")) { is_nonposted_wr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "atomic_state")) { atomic_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "is_narrow")) { is_narrow(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_rdcontext_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_rdhdr_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_rdhdr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrhdr_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrhdr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrbfr3_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrbfr3_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrbfr2_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrbfr2_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrbfr1_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrbfr1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrbfr0_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_wrbfr0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst4_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst4_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst3_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst3_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst2_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst2_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst1_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst0_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_aximst0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_romask_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_romask_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_cplst_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_cplst_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxinfo_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxinfo_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxcrbfr3_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxcrbfr2_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxcrbfr1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_rxcrbfr0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_prt_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "entry_data")) { entry_data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_prt_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_pmr_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "entry_data")) { entry_data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_pmr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_pmt_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "x_data")) { x_data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "y_data")) { y_data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "valid")) { valid(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_tgt_pmt_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_portmap_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dest")) { dest(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_portmap_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_pcihdrt_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "valid")) { valid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bdf")) { bdf(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "td")) { td(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pasid_en")) { pasid_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pasid_source")) { pasid_source(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pasid_value")) { pasid_value(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pasid_exe")) { pasid_exe(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pasid_privl")) { pasid_privl(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "attr2_1_rd")) { attr2_1_rd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "attr2_1_wr")) { attr2_1_wr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_cfg1")) { rc_cfg1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "attr0_rd")) { attr0_rd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "attr0_wr")) { attr0_wr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ats_at_wr")) { ats_at_wr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ats_at_rd")) { ats_at_rd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tc")) { tc(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ln_wr")) { ln_wr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ln_rd")) { ln_rd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rsvd1")) { rsvd1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_dhs_itr_pcihdrt_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_axi_bw_mon_wr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "val")) { val(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "outstanding")) { outstanding(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dess_rdy")) { dess_rdy(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "maxv")) { maxv(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "avrg")) { avrg(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "maxv")) { maxv(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "avrg")) { avrg(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_axi_bw_mon_rd_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "val")) { val(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "outstanding")) { outstanding(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dess_rdy")) { dess_rdy(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "maxv")) { maxv(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "avrg")) { avrg(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "maxv")) { maxv(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "avrg")) { avrg(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_axi_bw_mon_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "alpha")) { alpha(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cycle")) { cycle(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rcache")) { rcache(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rcache_msk")) { rcache_msk(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wcache")) { wcache(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wcache_msk")) { wcache_msk(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "msk")) { msk(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "msk")) { msk(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "msk")) { msk(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "msk")) { msk(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_uid2sidLL_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "spare")) { spare(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "mode")) { mode(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "base")) { base(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_filter_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "awcache_mask")) { awcache_mask(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "awcache_match")) { awcache_match(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "arcache_mask")) { arcache_mask(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "arcache_match")) { arcache_match(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_pxb_spare3_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_pxb_spare2_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_pxb_spare1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_pxb_spare0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_csr_intr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dowstream")) { dowstream(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dowstream_enable")) { dowstream_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tcam_bist_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "done_pass")) { done_pass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "done_fail")) { done_fail(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tcam_bist_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "run")) { run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_sram_bist_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "done_pass")) { done_pass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "done_fail")) { done_fail(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_sram_bist_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "run")) { run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_rdlat3_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num_samples")) { num_samples(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_rdlat2_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num_samples")) { num_samples(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_rdlat1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num_samples")) { num_samples(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_rdlat0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num_samples")) { num_samples(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_itr_rdlat_measure_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "thres2")) { thres2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "thres1")) { thres1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "thres0")) { thres0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "portid")) { portid(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_diag_spare1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_diag_spare1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_diag_spare0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_diag_spare0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_debug_port_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "select")) { select(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "enable")) { enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_axi_attr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "arcache")) { arcache(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "awcache")) { awcache(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prot")) { prot(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "qos")) { qos(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "lock")) { lock(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_tgt_rsp_err_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ind_cnxt_mismatch")) { ind_cnxt_mismatch(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rresp_err")) { rresp_err(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bresp_err")) { bresp_err(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_req_portgate_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "closed")) { closed(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_rsp_err_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "axi")) { axi(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_timeout")) { cpl_timeout(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_cpl_err_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecrc")) { ecrc(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxbuf_ecc")) { rxbuf_ecc(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_stat")) { cpl_stat(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "unexpected")) { unexpected(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_xfer_unexpected_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "wr256x")) { wr256x(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rd256x")) { rd256x(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wr_narrow")) { wr_narrow(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rd_narrow")) { rd_narrow(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_itr_req_err_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "unsupp_wr")) { unsupp_wr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "unsupp_rd")) { unsupp_rd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pcihdrt_miss")) { pcihdrt_miss(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bus_master_dis")) { bus_master_dis(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_tgt_ind_reason_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pmr_force")) { pmr_force(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_force")) { prt_force(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "msg")) { msg(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "atomic")) { atomic(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "poisoned")) { poisoned(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "unsupp")) { unsupp(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmv")) { pmv(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "db_pmv")) { db_pmv(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmt_miss")) { pmt_miss(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_vfid_miss")) { rc_vfid_miss(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_prt_miss")) { pmr_prt_miss(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_oor")) { prt_oor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bdf_wcard_oor")) { bdf_wcard_oor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "vfid_oor")) { vfid_oor(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_itr_axi_resp_order_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "rd_strict")) { rd_strict(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wr_strict")) { wr_strict(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rd_id_limit")) { rd_id_limit(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_itr_atomic_seq_cnt_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "rst_mask")) { rst_mask(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_cnxt_pending_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num")) { num(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_atomic_seq_cnt_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_mask")) { err_mask(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_portfifo_depth_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "port0_wr")) { port0_wr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port0_rd")) { port0_rd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port1_wr")) { port1_wr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port1_rd")) { port1_rd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port2_wr")) { port2_wr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port2_rd")) { port2_rd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port3_wr")) { port3_wr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port3_rd")) { port3_rd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port4_wr")) { port4_wr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port4_rd")) { port4_rd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port5_wr")) { port5_wr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port5_rd")) { port5_rd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port6_wr")) { port6_wr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port6_rd")) { port6_rd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port7_wr")) { port7_wr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port7_rd")) { port7_rd(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_tags_pending_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "port0")) { port0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port1")) { port1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port2")) { port2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port3")) { port3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port4")) { port4(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port5")) { port5(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port6")) { port6(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port7")) { port7(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_raw_tlp_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "resp_rdy")) { resp_rdy(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_stat")) { cpl_stat(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_data_err")) { cpl_data_err(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_timeout_err")) { cpl_timeout_err(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "req_err")) { req_err(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_raw_tlp_data_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "resp0")) { resp0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "resp1")) { resp1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "resp2")) { resp2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "resp3")) { resp3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "resp4")) { resp4(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "resp5")) { resp5(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "resp6")) { resp6(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "resp7")) { resp7(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dw_cnt")) { dw_cnt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port_id")) { port_id(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cmd_go")) { cmd_go(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_itr_raw_tlp_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dw0")) { dw0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw1")) { dw1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw2")) { dw2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw3")) { dw3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw4")) { dw4(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw5")) { dw5(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw6")) { dw6(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw7")) { dw7(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw8")) { dw8(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw9")) { dw9(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw10")) { dw10(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dw11")) { dw11(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "waddr")) { waddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { raddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "waddr")) { waddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { raddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "waddr")) { waddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { raddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "waddr")) { waddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { raddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "waddr")) { waddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { raddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "waddr")) { waddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { raddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "waddr")) { waddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { raddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "waddr")) { waddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "raddr")) { raddr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_req_debug_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "stg0_vld")) { stg0_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg1_vld")) { stg1_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg2_vld")) { stg2_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg3_vld")) { stg3_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg4_vld")) { stg4_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg5_vld")) { stg5_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "s0_rdy")) { s0_rdy(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "s0_port_space_avl_vec")) { s0_port_space_avl_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "s0_tag_avl_vec")) { s0_tag_avl_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_cnxt_free_avl0")) { itr_cnxt_free_avl0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "itr_cnxt_free_avl1")) { itr_cnxt_free_avl1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "s5_req_fifo_depth")) { s5_req_fifo_depth(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "s5_seg_state")) { s5_seg_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tx_wrcnt_req_stall")) { tx_wrcnt_req_stall(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tx_wrcnt_cpl_stall")) { tx_wrcnt_cpl_stall(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tx_wrcnt_raw_stall")) { tx_wrcnt_raw_stall(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "s5_is_wr")) { s5_is_wr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "s5_is_msg")) { s5_is_msg(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_eop_pnd")) { cpl_eop_pnd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "req_eop_pnd")) { req_eop_pnd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "raw_cmd_pnd")) { raw_cmd_pnd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_tx_vld")) { cpl_tx_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cpl_tx_rdy")) { cpl_tx_rdy(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bvalid")) { bvalid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bready")) { bready(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "awvalid")) { awvalid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "awready")) { awready(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wvalid")) { wvalid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wready")) { wready(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "arvalid")) { arvalid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "arready")) { arready(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rvalid")) { rvalid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rready")) { rready(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_req_debug_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "stg0_vld")) { stg0_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg1_vld")) { stg1_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg2_vld")) { stg2_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg3_vld")) { stg3_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg4_vld")) { stg4_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg5_vld")) { stg5_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg6_vld")) { stg6_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg7_vld")) { stg7_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg8_vld")) { stg8_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg9_vld")) { stg9_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg0_rdy")) { stg0_rdy(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg1_rdy")) { stg1_rdy(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg2_rdy")) { stg2_rdy(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg3_rdy")) { stg3_rdy(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg4_rdy")) { stg4_rdy(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg5_rdy")) { stg5_rdy(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg6_rdy")) { stg6_rdy(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg7_rdy")) { stg7_rdy(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg8_rdy")) { stg8_rdy(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stg9_rdy")) { stg9_rdy(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_req_vld")) { tgt_req_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "axi_fifo_rdy")) { axi_fifo_rdy(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "axi_fifo_notempty")) { axi_fifo_notempty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "notify_full")) { notify_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_cnxt_xn_pnd")) { tgt_cnxt_xn_pnd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcfg0_vld")) { rxcfg0_vld(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "hw_rsp_rdy")) { hw_rsp_rdy(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_awvalid")) { m_axi_awvalid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_arvalid")) { m_axi_arvalid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_wvalid")) { m_axi_wvalid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_awready")) { m_axi_awready(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_arready")) { m_axi_arready(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_wready")) { m_axi_wready(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_rvalid")) { m_axi_rvalid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_rready")) { m_axi_rready(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_bvalid")) { m_axi_bvalid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "m_axi_bready")) { m_axi_bready(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tgt_rsp_tx_rdy")) { tgt_rsp_tx_rdy(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "s7_ax_state0")) { s7_ax_state0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "s7_ax_state1")) { s7_ax_state1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "s7_ax_state2")) { s7_ax_state2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "s7_ax_state3")) { s7_ax_state3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "s7_ax_state4")) { s7_ax_state4(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "s7_ax_state5")) { s7_ax_state5(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "s7_ax_state6")) { s7_ax_state6(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "s7_ax_state7")) { s7_ax_state7(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_marker_rx_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "port0")) { port0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port1")) { port1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port2")) { port2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port3")) { port3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port4")) { port4(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port5")) { port5(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port6")) { port6(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port7")) { port7(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_tot_atomic_req_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sent")) { sent(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_intx_assert_msg_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sent")) { sent(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_tot_msg_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sent")) { sent(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_axi_rd_num_ids_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pending")) { pending(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_axi_wr_num_ids_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pending")) { pending(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_tot_axi_rd_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num_bytes")) { num_bytes(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_tot_axi_wr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num_bytes")) { num_bytes(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_tgt_axi_rd64_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { req(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_tgt_tot_axi_rd_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { req(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_tgt_rsp_ca_ur_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cnt")) { cnt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_tgt_db32_axi_wr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { req(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_tgt_db64_axi_wr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { req(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_tgt_axi_wr64_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { req(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_tgt_tot_axi_wr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { req(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_axi_rd256_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { req(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_axi_rd64_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { req(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_tot_axi_rd_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { req(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_tot_axi_rd_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num_bytes")) { num_bytes(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_tot_axi_wr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "num_bytes")) { num_bytes(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_axi_wr256_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { req(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_axi_wr64_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { req(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cnt_itr_tot_axi_wr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "req")) { req(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ind_info_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pending")) { pending(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ramaddr")) { ramaddr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_axi_pending_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ids_p0")) { ids_p0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ids_p1")) { ids_p1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ids_p2")) { ids_p2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ids_p3")) { ids_p3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ids_p4")) { ids_p4(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ids_p5")) { ids_p5(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ids_p6")) { ids_p6(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ids_p7")) { ids_p7(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "p_shift")) { p_shift(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "b_shift")) { b_shift(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "d_shift")) { d_shift(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "f_shift")) { f_shift(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "resource_dwsize")) { resource_dwsize(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sat_tgt_rx_drop_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "port0")) { port0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port1")) { port1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port2")) { port2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port3")) { port3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port4")) { port4(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port5")) { port5(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port6")) { port6(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "port7")) { port7(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_romask_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_prt_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_pmr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_cplst_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_rxinfo_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_aximst_4_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_aximst_3_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_aximst_2_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_aximst_1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_aximst_0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_cplbfr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_rdhdr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_wrhdr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_portmap_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_pcihdrt_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_ecc_disable_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "rxinfo_cor")) { rxinfo_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxinfo_det")) { rxinfo_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxinfo_dhs")) { rxinfo_dhs(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_cor")) { pmr_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_det")) { pmr_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_dhs")) { pmr_dhs(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_cor")) { prt_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_det")) { prt_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_dhs")) { prt_dhs(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplst_cor")) { cplst_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplst_det")) { cplst_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplst_dhs")) { cplst_dhs(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_cor")) { aximst_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_det")) { aximst_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "aximst_dhs")) { aximst_dhs(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "romask_cor")) { romask_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "romask_det")) { romask_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "romask_dhs")) { romask_dhs(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_cor")) { rxcrbfr_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_det")) { rxcrbfr_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rxcrbfr_dhs")) { rxcrbfr_dhs(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_itr_ecc_disable_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pcihdrt_cor")) { pcihdrt_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pcihdrt_det")) { pcihdrt_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pcihdrt_dhs")) { pcihdrt_dhs(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "portmap_cor")) { portmap_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "portmap_det")) { portmap_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "portmap_dhs")) { portmap_dhs(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_cor")) { wrbfr_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_det")) { wrbfr_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrbfr_dhs")) { wrbfr_dhs(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrhdr_cor")) { wrhdr_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrhdr_det")) { wrhdr_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "wrhdr_dhs")) { wrhdr_dhs(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rdhdr_cor")) { rdhdr_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rdhdr_det")) { rdhdr_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rdhdr_dhs")) { rdhdr_dhs(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplbfr_cor")) { cplbfr_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplbfr_det")) { cplbfr_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cplbfr_dhs")) { cplbfr_dhs(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_sta_tgt_pmt_ind_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "hit")) { hit(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "hit_addr")) { hit_addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_pmt_ind_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "key")) { key(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "mask")) { mask(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_pmt_grst_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "vld")) { vld(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "val")) { val(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "base_35_2")) { base_35_2(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "region0")) { region0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "region1")) { region1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "region2")) { region2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "region3")) { region3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "region4")) { region4(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "region5")) { region5(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "region6")) { region6(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "region7")) { region7(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "region8")) { region8(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "region9")) { region9(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "region10")) { region10(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "region11")) { region11(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "region12")) { region12(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "region13")) { region13(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "region14")) { region14(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "region15")) { region15(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "atomic")) { atomic(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_cfg")) { rc_cfg(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "atomic_page_id")) { atomic_page_id(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_cfg_page_id")) { rc_cfg_page_id(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_io64k")) { rc_io64k(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_rc_key_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sel")) { sel(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_pmt_tbl_id_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "memio_tbl_id0")) { memio_tbl_id0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_tbl_id0")) { cfg_tbl_id0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_tbl_id0")) { rc_tbl_id0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "default_tbl_id0")) { default_tbl_id0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "memio_tbl_id1")) { memio_tbl_id1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_tbl_id1")) { cfg_tbl_id1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_tbl_id1")) { rc_tbl_id1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "default_tbl_id1")) { default_tbl_id1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "memio_tbl_id2")) { memio_tbl_id2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_tbl_id2")) { cfg_tbl_id2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_tbl_id2")) { rc_tbl_id2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "default_tbl_id2")) { default_tbl_id2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "memio_tbl_id3")) { memio_tbl_id3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_tbl_id3")) { cfg_tbl_id3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_tbl_id3")) { rc_tbl_id3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "default_tbl_id3")) { default_tbl_id3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "memio_tbl_id4")) { memio_tbl_id4(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_tbl_id4")) { cfg_tbl_id4(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_tbl_id4")) { rc_tbl_id4(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "default_tbl_id4")) { default_tbl_id4(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "memio_tbl_id5")) { memio_tbl_id5(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_tbl_id5")) { cfg_tbl_id5(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_tbl_id5")) { rc_tbl_id5(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "default_tbl_id5")) { default_tbl_id5(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "memio_tbl_id6")) { memio_tbl_id6(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_tbl_id6")) { cfg_tbl_id6(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_tbl_id6")) { rc_tbl_id6(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "default_tbl_id6")) { default_tbl_id6(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "memio_tbl_id7")) { memio_tbl_id7(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_tbl_id7")) { cfg_tbl_id7(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_tbl_id7")) { rc_tbl_id7(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "default_tbl_id7")) { default_tbl_id7(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_notify_en_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "msg")) { msg(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmv")) { pmv(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "db_pmv")) { db_pmv(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "unsupp")) { unsupp(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "atomic")) { atomic(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmt_miss")) { pmt_miss(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_invalid")) { pmr_invalid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_invalid")) { prt_invalid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_vfid_miss")) { rc_vfid_miss(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_oor")) { prt_oor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "vfid_oor")) { vfid_oor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_bdf_oor")) { cfg_bdf_oor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_ecc_err")) { pmr_ecc_err(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_ecc_err")) { prt_ecc_err(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_ind_en_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "msg")) { msg(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmv")) { pmv(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "db_pmv")) { db_pmv(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "unsupp")) { unsupp(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "atomic")) { atomic(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmt_miss")) { pmt_miss(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_invalid")) { pmr_invalid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_invalid")) { prt_invalid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rc_vfid_miss")) { rc_vfid_miss(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_oor")) { prt_oor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "vfid_oor")) { vfid_oor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cfg_bdf_oor")) { cfg_bdf_oor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pmr_ecc_err")) { pmr_ecc_err(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prt_ecc_err")) { prt_ecc_err(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "adr_base0")) { adr_base0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_limit0")) { adr_limit0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "update0")) { update0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rst_rxfifo0")) { rst_rxfifo0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_base1")) { adr_base1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_limit1")) { adr_limit1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "update1")) { update1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rst_rxfifo1")) { rst_rxfifo1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_base2")) { adr_base2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_limit2")) { adr_limit2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "update2")) { update2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rst_rxfifo2")) { rst_rxfifo2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_base3")) { adr_base3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_limit3")) { adr_limit3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "update3")) { update3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rst_rxfifo3")) { rst_rxfifo3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_base4")) { adr_base4(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_limit4")) { adr_limit4(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "update4")) { update4(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rst_rxfifo4")) { rst_rxfifo4(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_base5")) { adr_base5(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_limit5")) { adr_limit5(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "update5")) { update5(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rst_rxfifo5")) { rst_rxfifo5(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_base6")) { adr_base6(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_limit6")) { adr_limit6(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "update6")) { update6(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rst_rxfifo6")) { rst_rxfifo6(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_base7")) { adr_base7(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_limit7")) { adr_limit7(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "update7")) { update7(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rst_rxfifo7")) { rst_rxfifo7(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_fence_ignore_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "from_mask")) { from_mask(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_msg_filter_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "msg_code0")) { msg_code0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_en0")) { drop_en0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "msg_code1")) { msg_code1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_en1")) { drop_en1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "msg_code2")) { msg_code2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_en2")) { drop_en2(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_doorbell_base_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "addr_33_24")) { addr_33_24(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "db_host_sel")) { db_host_sel(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "db_32b_sel")) { db_32b_sel(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_req_indirect_int_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "intr_data")) { intr_data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "base_addr_35_2")) { base_addr_35_2(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_req_notify_ring_size_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "mask")) { mask(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_req_notify_int_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "intr_data")) { intr_data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "base_addr_35_2")) { base_addr_35_2(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_req_notify_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "base_addr_35_16")) { base_addr_35_16(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_itr_tx_req_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "macfifo_thres")) { macfifo_thres(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rd_sgl_pnd")) { rd_sgl_pnd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tag_avl_guardband")) { tag_avl_guardband(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cnxt_avl_guardband")) { cnxt_avl_guardband(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_tgt_port_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "id_limit")) { id_limit(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bus_adjust")) { bus_adjust(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "halt")) { halt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "single_pnd")) { single_pnd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "td_miss")) { td_miss(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "depth_thres")) { depth_thres(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "skip_notify_if_qfull")) { skip_notify_if_qfull(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fbe_holes_allow")) { fbe_holes_allow(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fence_dis")) { fence_dis(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_itr_port_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "rdreq_limit")) { rdreq_limit(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timer_tick")) { timer_tick(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timer_limit")) { timer_limit(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bus_adjust")) { bus_adjust(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "arb_cr_hdr")) { arb_cr_hdr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "arb_cr_data")) { arb_cr_data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "arb_cr_dis_wr")) { arb_cr_dis_wr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "arb_cr_dis_rd")) { arb_cr_dis_rd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "arb_cnxtcnt_chk_dis")) { arb_cnxtcnt_chk_dis(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "arb_tagcnt_chk_dis")) { arb_tagcnt_chk_dis(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "arb_txfifocnt")) { arb_txfifocnt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "adr_extn_en")) { adr_extn_en(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_cfg_pc_port_type_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "host_or_rc0")) { host_or_rc0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "host_or_rc1")) { host_or_rc1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "host_or_rc2")) { host_or_rc2(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "host_or_rc3")) { host_or_rc3(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "host_or_rc4")) { host_or_rc4(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "host_or_rc5")) { host_or_rc5(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "host_or_rc6")) { host_or_rc6(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "host_or_rc7")) { host_or_rc7(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_rdintr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ireg")) { ireg(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_base_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "scratch_reg")) { scratch_reg(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pxb_csr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = base.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = rdintr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pc_port_type.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_itr_tx_req.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_req_notify_int.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_req_notify_ring_size.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_req_indirect_int.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_doorbell_base.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_msg_filter.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_fence_ignore.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_rx_credit_bfr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_ind_en.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_notify_en.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pmt_tbl_id.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_rc_key.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pcie_local_memaddr_decode.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_rc_legacy_int_data.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_pmt_grst.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_pmt_ind.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_pmt_ind.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_itr_ecc_disable.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_ecc_disable.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_wrbfr_0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_wrbfr_1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_wrbfr_2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_wrbfr_3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_pcihdrt.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_portmap.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_wrhdr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_rdhdr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_ecc_cplbfr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_rxcrbfr_0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_rxcrbfr_1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_rxcrbfr_2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_rxcrbfr_3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_aximst_0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_aximst_1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_aximst_2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_aximst_3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_aximst_4.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_rxinfo.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_cplst.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_pmr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_prt.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_ecc_romask.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_tgt_rx_drop.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_axi_pending.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_tot_axi_wr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_axi_wr64.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_axi_wr256.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_tot_axi_wr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_tot_axi_rd.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_tot_axi_rd.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_axi_rd64.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_axi_rd256.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_tgt_tot_axi_wr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_tgt_axi_wr64.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_tgt_db64_axi_wr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_tgt_db32_axi_wr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_tgt_rsp_ca_ur.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_tgt_tot_axi_rd.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_tgt_axi_rd64.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_tot_axi_wr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_tot_axi_rd.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_axi_wr_num_ids.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_axi_rd_num_ids.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_tot_msg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_intx_assert_msg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_itr_tot_atomic_req.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_marker_rx.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_req_debug.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_req_debug.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_rxcrbfr_debug_0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_rxcrbfr_debug_1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_rxcrbfr_debug_2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_rxcrbfr_debug_3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_rxcrbfr_debug_4.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_rxcrbfr_debug_5.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_rxcrbfr_debug_6.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tgt_rxcrbfr_debug_7.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_itr_raw_tlp.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_itr_raw_tlp_cmd.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_raw_tlp_data.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_raw_tlp.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_tags_pending.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_portfifo_depth.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_atomic_seq_cnt.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_itr_cnxt_pending.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_itr_atomic_seq_cnt.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_itr_axi_resp_order.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_tgt_ind_reason.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_req_err.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_xfer_unexpected.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_cpl_err.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_rsp_err.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_req_portgate.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_tgt_rsp_err.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tgt_axi_attr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_debug_port.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_diag_spare0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_diag_spare0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_diag_spare1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_diag_spare1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_itr_rdlat_measure.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_rdlat0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_rdlat1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_rdlat2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_itr_rdlat3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_sram_bist.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_sram_bist.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_tcam_bist.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_tcam_bist.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = csr_intr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pxb_spare0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pxb_spare1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pxb_spare2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pxb_spare3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_filter.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_uid2sidLL.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_uid2sidLL_hbm_hash_msk_bit0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_uid2sidLL_hbm_hash_msk_bit1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_uid2sidLL_hbm_hash_msk_bit2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_uid2sidLL_hbm_hash_msk_bit3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_axi_bw_mon.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_axi_bw_mon_rd_latency.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_axi_bw_mon_rd_bandwidth.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_axi_bw_mon_rd_transactions.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_axi_bw_mon_rd.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_axi_bw_mon_wr_latency.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_axi_bw_mon_wr_bandwidth.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_axi_bw_mon_wr_transactions.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_axi_bw_mon_wr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_pcihdrt.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_portmap.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_pmt.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_pmr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_prt.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_rxcrbfr0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_rxcrbfr1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_rxcrbfr2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_rxcrbfr3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_rxinfo.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_cplst.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_romask.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_aximst0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_aximst1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_aximst2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_aximst3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_aximst4.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_wrbfr0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_wrbfr1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_wrbfr2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_wrbfr3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_wrhdr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_rdhdr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_rdcontext.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_rdcontext.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_rc_bdfmap.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr4.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr5.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr6.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr7.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr8.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr9.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr10.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr11.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr12.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr13.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr14.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_itr_cplbfr15.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_notify.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_ind_rsp.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_tgt_pmt_ind.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = filter_addr_lo.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = filter_addr_hi.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = filter_addr_ctl.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_inval_cam.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_groups.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_itr_ecc.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_tgt_ecc.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_err.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_int_err_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("cpl_ecrc_enable");
    ret_vec.push_back("cpl_rxbuf_err_enable");
    ret_vec.push_back("cpl_stat_enable");
    ret_vec.push_back("cpl_unexp_enable");
    ret_vec.push_back("cpl_timeout_enable");
    ret_vec.push_back("cpl_len_enable");
    ret_vec.push_back("cpl_poison_enable");
    ret_vec.push_back("cpl_lowaddr_enable");
    ret_vec.push_back("tgt_ind_rsp_unexp_enable");
    ret_vec.push_back("tgt_axi_rsp_unexp_enable");
    ret_vec.push_back("tgt_axi_rsp_err_enable");
    ret_vec.push_back("tgt_req_4k_err_enable");
    ret_vec.push_back("itr_req_bdfmiss_enable");
    ret_vec.push_back("itr_req_axi_unsupp_enable");
    ret_vec.push_back("itr_req_msg_align_err_enable");
    ret_vec.push_back("itr_bus_master_dis_enable");
    ret_vec.push_back("itr_atomic_seq_err_enable");
    ret_vec.push_back("itr_atomic_resource_err_enable");
    ret_vec.push_back("tgt_rmw_axi_resperr_enable");
    ret_vec.push_back("tgt_ind_notify_axi_resperr_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_int_err_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("cpl_ecrc_interrupt");
    ret_vec.push_back("cpl_rxbuf_err_interrupt");
    ret_vec.push_back("cpl_stat_interrupt");
    ret_vec.push_back("cpl_unexp_interrupt");
    ret_vec.push_back("cpl_timeout_interrupt");
    ret_vec.push_back("cpl_len_interrupt");
    ret_vec.push_back("cpl_poison_interrupt");
    ret_vec.push_back("cpl_lowaddr_interrupt");
    ret_vec.push_back("tgt_ind_rsp_unexp_interrupt");
    ret_vec.push_back("tgt_axi_rsp_unexp_interrupt");
    ret_vec.push_back("tgt_axi_rsp_err_interrupt");
    ret_vec.push_back("tgt_req_4k_err_interrupt");
    ret_vec.push_back("itr_req_bdfmiss_interrupt");
    ret_vec.push_back("itr_req_axi_unsupp_interrupt");
    ret_vec.push_back("itr_req_msg_align_err_interrupt");
    ret_vec.push_back("itr_bus_master_dis_interrupt");
    ret_vec.push_back("itr_atomic_seq_err_interrupt");
    ret_vec.push_back("itr_atomic_resource_err_interrupt");
    ret_vec.push_back("tgt_rmw_axi_resperr_interrupt");
    ret_vec.push_back("tgt_ind_notify_axi_resperr_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_int_err_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_int_tgt_ecc_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("aximst_0_uncorrectable_enable");
    ret_vec.push_back("aximst_0_correctable_enable");
    ret_vec.push_back("aximst_1_uncorrectable_enable");
    ret_vec.push_back("aximst_1_correctable_enable");
    ret_vec.push_back("aximst_2_uncorrectable_enable");
    ret_vec.push_back("aximst_2_correctable_enable");
    ret_vec.push_back("aximst_3_uncorrectable_enable");
    ret_vec.push_back("aximst_3_correctable_enable");
    ret_vec.push_back("aximst_4_uncorrectable_enable");
    ret_vec.push_back("aximst_4_correctable_enable");
    ret_vec.push_back("rxcrbfr_0_uncorrectable_enable");
    ret_vec.push_back("rxcrbfr_0_correctable_enable");
    ret_vec.push_back("rxcrbfr_1_uncorrectable_enable");
    ret_vec.push_back("rxcrbfr_1_correctable_enable");
    ret_vec.push_back("rxcrbfr_2_uncorrectable_enable");
    ret_vec.push_back("rxcrbfr_2_correctable_enable");
    ret_vec.push_back("rxcrbfr_3_uncorrectable_enable");
    ret_vec.push_back("rxcrbfr_3_correctable_enable");
    ret_vec.push_back("rxinfo_uncorrectable_enable");
    ret_vec.push_back("rxinfo_correctable_enable");
    ret_vec.push_back("cplst_uncorrectable_enable");
    ret_vec.push_back("cplst_correctable_enable");
    ret_vec.push_back("romask_uncorrectable_enable");
    ret_vec.push_back("romask_correctable_enable");
    ret_vec.push_back("pmr_uncorrectable_enable");
    ret_vec.push_back("pmr_correctable_enable");
    ret_vec.push_back("prt_uncorrectable_enable");
    ret_vec.push_back("prt_correctable_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_int_tgt_ecc_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("aximst_0_uncorrectable_interrupt");
    ret_vec.push_back("aximst_0_correctable_interrupt");
    ret_vec.push_back("aximst_1_uncorrectable_interrupt");
    ret_vec.push_back("aximst_1_correctable_interrupt");
    ret_vec.push_back("aximst_2_uncorrectable_interrupt");
    ret_vec.push_back("aximst_2_correctable_interrupt");
    ret_vec.push_back("aximst_3_uncorrectable_interrupt");
    ret_vec.push_back("aximst_3_correctable_interrupt");
    ret_vec.push_back("aximst_4_uncorrectable_interrupt");
    ret_vec.push_back("aximst_4_correctable_interrupt");
    ret_vec.push_back("rxcrbfr_0_uncorrectable_interrupt");
    ret_vec.push_back("rxcrbfr_0_correctable_interrupt");
    ret_vec.push_back("rxcrbfr_1_uncorrectable_interrupt");
    ret_vec.push_back("rxcrbfr_1_correctable_interrupt");
    ret_vec.push_back("rxcrbfr_2_uncorrectable_interrupt");
    ret_vec.push_back("rxcrbfr_2_correctable_interrupt");
    ret_vec.push_back("rxcrbfr_3_uncorrectable_interrupt");
    ret_vec.push_back("rxcrbfr_3_correctable_interrupt");
    ret_vec.push_back("rxinfo_uncorrectable_interrupt");
    ret_vec.push_back("rxinfo_correctable_interrupt");
    ret_vec.push_back("cplst_uncorrectable_interrupt");
    ret_vec.push_back("cplst_correctable_interrupt");
    ret_vec.push_back("romask_uncorrectable_interrupt");
    ret_vec.push_back("romask_correctable_interrupt");
    ret_vec.push_back("pmr_uncorrectable_interrupt");
    ret_vec.push_back("pmr_correctable_interrupt");
    ret_vec.push_back("prt_uncorrectable_interrupt");
    ret_vec.push_back("prt_correctable_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_int_tgt_ecc_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_int_itr_ecc_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pcihdrt_uncorrectable_enable");
    ret_vec.push_back("pcihdrt_correctable_enable");
    ret_vec.push_back("portmap_uncorrectable_enable");
    ret_vec.push_back("portmap_correctable_enable");
    ret_vec.push_back("wrhdr_uncorrectable_enable");
    ret_vec.push_back("wrhdr_correctable_enable");
    ret_vec.push_back("rdhdr_uncorrectable_enable");
    ret_vec.push_back("rdhdr_correctable_enable");
    ret_vec.push_back("wrbfr_0_uncorrectable_enable");
    ret_vec.push_back("wrbfr_0_correctable_enable");
    ret_vec.push_back("wrbfr_1_uncorrectable_enable");
    ret_vec.push_back("wrbfr_1_correctable_enable");
    ret_vec.push_back("wrbfr_2_uncorrectable_enable");
    ret_vec.push_back("wrbfr_2_correctable_enable");
    ret_vec.push_back("wrbfr_3_uncorrectable_enable");
    ret_vec.push_back("wrbfr_3_correctable_enable");
    ret_vec.push_back("cplbfr_uncorrectable_enable");
    ret_vec.push_back("cplbfr_correctable_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_int_itr_ecc_intreg_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pcihdrt_uncorrectable_interrupt");
    ret_vec.push_back("pcihdrt_correctable_interrupt");
    ret_vec.push_back("portmap_uncorrectable_interrupt");
    ret_vec.push_back("portmap_correctable_interrupt");
    ret_vec.push_back("wrhdr_uncorrectable_interrupt");
    ret_vec.push_back("wrhdr_correctable_interrupt");
    ret_vec.push_back("rdhdr_uncorrectable_interrupt");
    ret_vec.push_back("rdhdr_correctable_interrupt");
    ret_vec.push_back("wrbfr_0_uncorrectable_interrupt");
    ret_vec.push_back("wrbfr_0_correctable_interrupt");
    ret_vec.push_back("wrbfr_1_uncorrectable_interrupt");
    ret_vec.push_back("wrbfr_1_correctable_interrupt");
    ret_vec.push_back("wrbfr_2_uncorrectable_interrupt");
    ret_vec.push_back("wrbfr_2_correctable_interrupt");
    ret_vec.push_back("wrbfr_3_uncorrectable_interrupt");
    ret_vec.push_back("wrbfr_3_correctable_interrupt");
    ret_vec.push_back("cplbfr_uncorrectable_interrupt");
    ret_vec.push_back("cplbfr_correctable_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_int_itr_ecc_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_intreg_status_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("int_tgt_ecc_interrupt");
    ret_vec.push_back("int_itr_ecc_interrupt");
    ret_vec.push_back("int_err_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_int_groups_int_enable_rw_reg_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("int_tgt_ecc_enable");
    ret_vec.push_back("int_itr_ecc_enable");
    ret_vec.push_back("int_err_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_intgrp_status_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_rw_reg.get_fields(level-1)) {
            ret_vec.push_back("int_enable_rw_reg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_rw_reg.get_fields(level-1)) {
            ret_vec.push_back("int_rw_reg." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_inval_cam_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_inval_cam_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_filter_addr_ctl_value_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("value");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_filter_addr_ctl_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_filter_addr_hi_data_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("value");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_filter_addr_hi_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_filter_addr_lo_data_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("value");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_filter_addr_lo_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_pmt_ind_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("cmd");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_pmt_ind_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : entry.get_fields(level-1)) {
            ret_vec.push_back("entry." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_ind_rsp_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data0");
    ret_vec.push_back("data1");
    ret_vec.push_back("data2");
    ret_vec.push_back("data3");
    ret_vec.push_back("cpl_stat");
    ret_vec.push_back("port_id");
    ret_vec.push_back("axi_id");
    ret_vec.push_back("fetch_rsp");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_ind_rsp_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : entry.get_fields(level-1)) {
            ret_vec.push_back("entry." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_notify_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("posted");
    ret_vec.push_back("completed");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_notify_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr15_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr15_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr14_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr14_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr13_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr13_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr12_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr12_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr11_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr11_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr10_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr10_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr9_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr9_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr8_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr8_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr7_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr7_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr6_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr6_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr5_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr5_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr4_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr4_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr3_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr3_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr2_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr2_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr1_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr0_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_cplbfr0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_rc_bdfmap_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("valid");
    ret_vec.push_back("rc_bdf");
    ret_vec.push_back("port_id");
    ret_vec.push_back("VFID");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_rc_bdfmap_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_rdcontext_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("state");
    ret_vec.push_back("portid");
    ret_vec.push_back("is_nonposted_wr");
    ret_vec.push_back("is_posted_wr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_rdcontext_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_rdcontext_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("state");
    ret_vec.push_back("portid");
    ret_vec.push_back("tag");
    ret_vec.push_back("axi_id");
    ret_vec.push_back("raddr");
    ret_vec.push_back("rsize");
    ret_vec.push_back("timer");
    ret_vec.push_back("bdf");
    ret_vec.push_back("aerr");
    ret_vec.push_back("derr");
    ret_vec.push_back("terr");
    ret_vec.push_back("lineaddr");
    ret_vec.push_back("linesize");
    ret_vec.push_back("seg_first");
    ret_vec.push_back("seg_last");
    ret_vec.push_back("seg_next");
    ret_vec.push_back("is_raw");
    ret_vec.push_back("is_nonposted_wr");
    ret_vec.push_back("atomic_state");
    ret_vec.push_back("is_narrow");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_rdcontext_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_rdhdr_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_rdhdr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_wrhdr_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_wrhdr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_wrbfr3_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_wrbfr3_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_wrbfr2_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_wrbfr2_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_wrbfr1_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_wrbfr1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_wrbfr0_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_wrbfr0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_aximst4_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_aximst4_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_aximst3_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_aximst3_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_aximst2_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_aximst2_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_aximst1_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_aximst1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_aximst0_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_aximst0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_romask_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_romask_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_cplst_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_cplst_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_rxinfo_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_rxinfo_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_rxcrbfr3_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_rxcrbfr3_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_rxcrbfr2_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_rxcrbfr2_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_rxcrbfr1_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_rxcrbfr1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_rxcrbfr0_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_rxcrbfr0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_prt_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("entry_data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_prt_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_pmr_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("entry_data");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_pmr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_pmt_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("x_data");
    ret_vec.push_back("y_data");
    ret_vec.push_back("valid");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_tgt_pmt_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_portmap_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("dest");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_portmap_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_pcihdrt_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("valid");
    ret_vec.push_back("bdf");
    ret_vec.push_back("td");
    ret_vec.push_back("pasid_en");
    ret_vec.push_back("pasid_source");
    ret_vec.push_back("pasid_value");
    ret_vec.push_back("pasid_exe");
    ret_vec.push_back("pasid_privl");
    ret_vec.push_back("attr2_1_rd");
    ret_vec.push_back("attr2_1_wr");
    ret_vec.push_back("rc_cfg1");
    ret_vec.push_back("attr0_rd");
    ret_vec.push_back("attr0_wr");
    ret_vec.push_back("ats_at_wr");
    ret_vec.push_back("ats_at_rd");
    ret_vec.push_back("tc");
    ret_vec.push_back("ln_wr");
    ret_vec.push_back("ln_rd");
    ret_vec.push_back("rsvd1");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_dhs_itr_pcihdrt_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_axi_bw_mon_wr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("val");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_axi_bw_mon_wr_transactions_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("outstanding");
    ret_vec.push_back("dess_rdy");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_axi_bw_mon_wr_bandwidth_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("maxv");
    ret_vec.push_back("avrg");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_axi_bw_mon_wr_latency_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("maxv");
    ret_vec.push_back("avrg");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_axi_bw_mon_rd_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("val");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_axi_bw_mon_rd_transactions_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("outstanding");
    ret_vec.push_back("dess_rdy");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_axi_bw_mon_rd_bandwidth_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("maxv");
    ret_vec.push_back("avrg");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_axi_bw_mon_rd_latency_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("maxv");
    ret_vec.push_back("avrg");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_axi_bw_mon_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("alpha");
    ret_vec.push_back("cycle");
    ret_vec.push_back("rcache");
    ret_vec.push_back("rcache_msk");
    ret_vec.push_back("wcache");
    ret_vec.push_back("wcache_msk");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit3_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("msk");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit2_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("msk");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("msk");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_uid2sidLL_hbm_hash_msk_bit0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("msk");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_uid2sidLL_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("spare");
    ret_vec.push_back("mode");
    ret_vec.push_back("base");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_filter_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("awcache_mask");
    ret_vec.push_back("awcache_match");
    ret_vec.push_back("arcache_mask");
    ret_vec.push_back("arcache_match");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_pxb_spare3_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_pxb_spare2_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_pxb_spare1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_pxb_spare0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_csr_intr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("dowstream");
    ret_vec.push_back("dowstream_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tcam_bist_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("done_pass");
    ret_vec.push_back("done_fail");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tcam_bist_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_sram_bist_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("done_pass");
    ret_vec.push_back("done_fail");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_sram_bist_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sat_itr_rdlat3_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("num_samples");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sat_itr_rdlat2_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("num_samples");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sat_itr_rdlat1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("num_samples");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sat_itr_rdlat0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("num_samples");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_itr_rdlat_measure_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("thres2");
    ret_vec.push_back("thres1");
    ret_vec.push_back("thres0");
    ret_vec.push_back("portid");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_diag_spare1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_diag_spare1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_diag_spare0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_diag_spare0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_debug_port_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("select");
    ret_vec.push_back("enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_axi_attr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("arcache");
    ret_vec.push_back("awcache");
    ret_vec.push_back("prot");
    ret_vec.push_back("qos");
    ret_vec.push_back("lock");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sat_tgt_rsp_err_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ind_cnxt_mismatch");
    ret_vec.push_back("rresp_err");
    ret_vec.push_back("bresp_err");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sat_itr_req_portgate_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("closed");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sat_itr_rsp_err_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("axi");
    ret_vec.push_back("cpl_timeout");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sat_itr_cpl_err_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ecrc");
    ret_vec.push_back("rxbuf_ecc");
    ret_vec.push_back("cpl_stat");
    ret_vec.push_back("unexpected");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sat_itr_xfer_unexpected_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("wr256x");
    ret_vec.push_back("rd256x");
    ret_vec.push_back("wr_narrow");
    ret_vec.push_back("rd_narrow");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sat_itr_req_err_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("unsupp_wr");
    ret_vec.push_back("unsupp_rd");
    ret_vec.push_back("pcihdrt_miss");
    ret_vec.push_back("bus_master_dis");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sat_tgt_ind_reason_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pmr_force");
    ret_vec.push_back("prt_force");
    ret_vec.push_back("msg");
    ret_vec.push_back("atomic");
    ret_vec.push_back("poisoned");
    ret_vec.push_back("unsupp");
    ret_vec.push_back("pmv");
    ret_vec.push_back("db_pmv");
    ret_vec.push_back("pmt_miss");
    ret_vec.push_back("rc_vfid_miss");
    ret_vec.push_back("pmr_prt_miss");
    ret_vec.push_back("prt_oor");
    ret_vec.push_back("bdf_wcard_oor");
    ret_vec.push_back("vfid_oor");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_itr_axi_resp_order_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("rd_strict");
    ret_vec.push_back("wr_strict");
    ret_vec.push_back("rd_id_limit");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_itr_atomic_seq_cnt_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("rst_mask");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_cnxt_pending_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("num");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_atomic_seq_cnt_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_mask");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_portfifo_depth_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("port0_wr");
    ret_vec.push_back("port0_rd");
    ret_vec.push_back("port1_wr");
    ret_vec.push_back("port1_rd");
    ret_vec.push_back("port2_wr");
    ret_vec.push_back("port2_rd");
    ret_vec.push_back("port3_wr");
    ret_vec.push_back("port3_rd");
    ret_vec.push_back("port4_wr");
    ret_vec.push_back("port4_rd");
    ret_vec.push_back("port5_wr");
    ret_vec.push_back("port5_rd");
    ret_vec.push_back("port6_wr");
    ret_vec.push_back("port6_rd");
    ret_vec.push_back("port7_wr");
    ret_vec.push_back("port7_rd");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_tags_pending_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("port0");
    ret_vec.push_back("port1");
    ret_vec.push_back("port2");
    ret_vec.push_back("port3");
    ret_vec.push_back("port4");
    ret_vec.push_back("port5");
    ret_vec.push_back("port6");
    ret_vec.push_back("port7");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_raw_tlp_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("resp_rdy");
    ret_vec.push_back("cpl_stat");
    ret_vec.push_back("cpl_data_err");
    ret_vec.push_back("cpl_timeout_err");
    ret_vec.push_back("req_err");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_raw_tlp_data_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("resp0");
    ret_vec.push_back("resp1");
    ret_vec.push_back("resp2");
    ret_vec.push_back("resp3");
    ret_vec.push_back("resp4");
    ret_vec.push_back("resp5");
    ret_vec.push_back("resp6");
    ret_vec.push_back("resp7");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_itr_raw_tlp_cmd_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("dw_cnt");
    ret_vec.push_back("port_id");
    ret_vec.push_back("cmd_go");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_itr_raw_tlp_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("dw0");
    ret_vec.push_back("dw1");
    ret_vec.push_back("dw2");
    ret_vec.push_back("dw3");
    ret_vec.push_back("dw4");
    ret_vec.push_back("dw5");
    ret_vec.push_back("dw6");
    ret_vec.push_back("dw7");
    ret_vec.push_back("dw8");
    ret_vec.push_back("dw9");
    ret_vec.push_back("dw10");
    ret_vec.push_back("dw11");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_rxcrbfr_debug_7_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("waddr");
    ret_vec.push_back("raddr");
    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_rxcrbfr_debug_6_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("waddr");
    ret_vec.push_back("raddr");
    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_rxcrbfr_debug_5_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("waddr");
    ret_vec.push_back("raddr");
    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_rxcrbfr_debug_4_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("waddr");
    ret_vec.push_back("raddr");
    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_rxcrbfr_debug_3_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("waddr");
    ret_vec.push_back("raddr");
    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_rxcrbfr_debug_2_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("waddr");
    ret_vec.push_back("raddr");
    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_rxcrbfr_debug_1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("waddr");
    ret_vec.push_back("raddr");
    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_rxcrbfr_debug_0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("waddr");
    ret_vec.push_back("raddr");
    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_req_debug_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("stg0_vld");
    ret_vec.push_back("stg1_vld");
    ret_vec.push_back("stg2_vld");
    ret_vec.push_back("stg3_vld");
    ret_vec.push_back("stg4_vld");
    ret_vec.push_back("stg5_vld");
    ret_vec.push_back("s0_rdy");
    ret_vec.push_back("s0_port_space_avl_vec");
    ret_vec.push_back("s0_tag_avl_vec");
    ret_vec.push_back("itr_cnxt_free_avl0");
    ret_vec.push_back("itr_cnxt_free_avl1");
    ret_vec.push_back("s5_req_fifo_depth");
    ret_vec.push_back("s5_seg_state");
    ret_vec.push_back("tx_wrcnt_req_stall");
    ret_vec.push_back("tx_wrcnt_cpl_stall");
    ret_vec.push_back("tx_wrcnt_raw_stall");
    ret_vec.push_back("s5_is_wr");
    ret_vec.push_back("s5_is_msg");
    ret_vec.push_back("cpl_eop_pnd");
    ret_vec.push_back("req_eop_pnd");
    ret_vec.push_back("raw_cmd_pnd");
    ret_vec.push_back("cpl_tx_vld");
    ret_vec.push_back("cpl_tx_rdy");
    ret_vec.push_back("bvalid");
    ret_vec.push_back("bready");
    ret_vec.push_back("awvalid");
    ret_vec.push_back("awready");
    ret_vec.push_back("wvalid");
    ret_vec.push_back("wready");
    ret_vec.push_back("arvalid");
    ret_vec.push_back("arready");
    ret_vec.push_back("rvalid");
    ret_vec.push_back("rready");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_req_debug_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("stg0_vld");
    ret_vec.push_back("stg1_vld");
    ret_vec.push_back("stg2_vld");
    ret_vec.push_back("stg3_vld");
    ret_vec.push_back("stg4_vld");
    ret_vec.push_back("stg5_vld");
    ret_vec.push_back("stg6_vld");
    ret_vec.push_back("stg7_vld");
    ret_vec.push_back("stg8_vld");
    ret_vec.push_back("stg9_vld");
    ret_vec.push_back("stg0_rdy");
    ret_vec.push_back("stg1_rdy");
    ret_vec.push_back("stg2_rdy");
    ret_vec.push_back("stg3_rdy");
    ret_vec.push_back("stg4_rdy");
    ret_vec.push_back("stg5_rdy");
    ret_vec.push_back("stg6_rdy");
    ret_vec.push_back("stg7_rdy");
    ret_vec.push_back("stg8_rdy");
    ret_vec.push_back("stg9_rdy");
    ret_vec.push_back("tgt_req_vld");
    ret_vec.push_back("axi_fifo_rdy");
    ret_vec.push_back("axi_fifo_notempty");
    ret_vec.push_back("notify_full");
    ret_vec.push_back("tgt_cnxt_xn_pnd");
    ret_vec.push_back("rxcfg0_vld");
    ret_vec.push_back("hw_rsp_rdy");
    ret_vec.push_back("m_axi_awvalid");
    ret_vec.push_back("m_axi_arvalid");
    ret_vec.push_back("m_axi_wvalid");
    ret_vec.push_back("m_axi_awready");
    ret_vec.push_back("m_axi_arready");
    ret_vec.push_back("m_axi_wready");
    ret_vec.push_back("m_axi_rvalid");
    ret_vec.push_back("m_axi_rready");
    ret_vec.push_back("m_axi_bvalid");
    ret_vec.push_back("m_axi_bready");
    ret_vec.push_back("tgt_rsp_tx_rdy");
    ret_vec.push_back("s7_ax_state0");
    ret_vec.push_back("s7_ax_state1");
    ret_vec.push_back("s7_ax_state2");
    ret_vec.push_back("s7_ax_state3");
    ret_vec.push_back("s7_ax_state4");
    ret_vec.push_back("s7_ax_state5");
    ret_vec.push_back("s7_ax_state6");
    ret_vec.push_back("s7_ax_state7");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_marker_rx_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("port0");
    ret_vec.push_back("port1");
    ret_vec.push_back("port2");
    ret_vec.push_back("port3");
    ret_vec.push_back("port4");
    ret_vec.push_back("port5");
    ret_vec.push_back("port6");
    ret_vec.push_back("port7");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_itr_tot_atomic_req_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sent");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_itr_intx_assert_msg_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sent");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_itr_tot_msg_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sent");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_axi_rd_num_ids_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pending");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_axi_wr_num_ids_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pending");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_tot_axi_rd_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("num_bytes");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_tot_axi_wr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("num_bytes");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_tgt_axi_rd64_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("req");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_tgt_tot_axi_rd_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("req");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_tgt_rsp_ca_ur_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("cnt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_tgt_db32_axi_wr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("req");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_tgt_db64_axi_wr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("req");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_tgt_axi_wr64_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("req");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_tgt_tot_axi_wr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("req");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_itr_axi_rd256_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("req");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_itr_axi_rd64_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("req");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_itr_tot_axi_rd_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("req");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_tot_axi_rd_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("num_bytes");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_tot_axi_wr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("num_bytes");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_itr_axi_wr256_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("req");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_itr_axi_wr64_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("req");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cnt_itr_tot_axi_wr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("req");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_ind_info_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pending");
    ret_vec.push_back("ramaddr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_axi_pending_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ids_p0");
    ret_vec.push_back("ids_p1");
    ret_vec.push_back("ids_p2");
    ret_vec.push_back("ids_p3");
    ret_vec.push_back("ids_p4");
    ret_vec.push_back("ids_p5");
    ret_vec.push_back("ids_p6");
    ret_vec.push_back("ids_p7");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_vf_cfg_stride_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("p_shift");
    ret_vec.push_back("b_shift");
    ret_vec.push_back("d_shift");
    ret_vec.push_back("f_shift");
    ret_vec.push_back("resource_dwsize");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sat_tgt_rx_drop_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("port0");
    ret_vec.push_back("port1");
    ret_vec.push_back("port2");
    ret_vec.push_back("port3");
    ret_vec.push_back("port4");
    ret_vec.push_back("port5");
    ret_vec.push_back("port6");
    ret_vec.push_back("port7");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_ecc_romask_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_ecc_prt_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_ecc_pmr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_ecc_cplst_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_ecc_rxinfo_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_ecc_aximst_4_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_ecc_aximst_3_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_ecc_aximst_2_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_ecc_aximst_1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_ecc_aximst_0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_ecc_rxcrbfr_3_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_ecc_rxcrbfr_2_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_ecc_rxcrbfr_1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_ecc_rxcrbfr_0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_ecc_cplbfr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_ecc_rdhdr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_ecc_wrhdr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_ecc_portmap_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_ecc_pcihdrt_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_ecc_wrbfr_3_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_ecc_wrbfr_2_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_ecc_wrbfr_1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_itr_ecc_wrbfr_0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_ecc_disable_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("rxinfo_cor");
    ret_vec.push_back("rxinfo_det");
    ret_vec.push_back("rxinfo_dhs");
    ret_vec.push_back("pmr_cor");
    ret_vec.push_back("pmr_det");
    ret_vec.push_back("pmr_dhs");
    ret_vec.push_back("prt_cor");
    ret_vec.push_back("prt_det");
    ret_vec.push_back("prt_dhs");
    ret_vec.push_back("cplst_cor");
    ret_vec.push_back("cplst_det");
    ret_vec.push_back("cplst_dhs");
    ret_vec.push_back("aximst_cor");
    ret_vec.push_back("aximst_det");
    ret_vec.push_back("aximst_dhs");
    ret_vec.push_back("romask_cor");
    ret_vec.push_back("romask_det");
    ret_vec.push_back("romask_dhs");
    ret_vec.push_back("rxcrbfr_cor");
    ret_vec.push_back("rxcrbfr_det");
    ret_vec.push_back("rxcrbfr_dhs");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_itr_ecc_disable_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pcihdrt_cor");
    ret_vec.push_back("pcihdrt_det");
    ret_vec.push_back("pcihdrt_dhs");
    ret_vec.push_back("portmap_cor");
    ret_vec.push_back("portmap_det");
    ret_vec.push_back("portmap_dhs");
    ret_vec.push_back("wrbfr_cor");
    ret_vec.push_back("wrbfr_det");
    ret_vec.push_back("wrbfr_dhs");
    ret_vec.push_back("wrhdr_cor");
    ret_vec.push_back("wrhdr_det");
    ret_vec.push_back("wrhdr_dhs");
    ret_vec.push_back("rdhdr_cor");
    ret_vec.push_back("rdhdr_det");
    ret_vec.push_back("rdhdr_dhs");
    ret_vec.push_back("cplbfr_cor");
    ret_vec.push_back("cplbfr_det");
    ret_vec.push_back("cplbfr_dhs");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_sta_tgt_pmt_ind_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("hit");
    ret_vec.push_back("hit_addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_pmt_ind_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("key");
    ret_vec.push_back("mask");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_pmt_grst_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("vld");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_rc_legacy_int_data_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("val");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_rc_legacy_int_addr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("base_35_2");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_pcie_local_memaddr_decode_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("region0");
    ret_vec.push_back("region1");
    ret_vec.push_back("region2");
    ret_vec.push_back("region3");
    ret_vec.push_back("region4");
    ret_vec.push_back("region5");
    ret_vec.push_back("region6");
    ret_vec.push_back("region7");
    ret_vec.push_back("region8");
    ret_vec.push_back("region9");
    ret_vec.push_back("region10");
    ret_vec.push_back("region11");
    ret_vec.push_back("region12");
    ret_vec.push_back("region13");
    ret_vec.push_back("region14");
    ret_vec.push_back("region15");
    ret_vec.push_back("atomic");
    ret_vec.push_back("rc_cfg");
    ret_vec.push_back("atomic_page_id");
    ret_vec.push_back("rc_cfg_page_id");
    ret_vec.push_back("rc_io64k");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_rc_key_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sel");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_pmt_tbl_id_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("memio_tbl_id0");
    ret_vec.push_back("cfg_tbl_id0");
    ret_vec.push_back("rc_tbl_id0");
    ret_vec.push_back("default_tbl_id0");
    ret_vec.push_back("memio_tbl_id1");
    ret_vec.push_back("cfg_tbl_id1");
    ret_vec.push_back("rc_tbl_id1");
    ret_vec.push_back("default_tbl_id1");
    ret_vec.push_back("memio_tbl_id2");
    ret_vec.push_back("cfg_tbl_id2");
    ret_vec.push_back("rc_tbl_id2");
    ret_vec.push_back("default_tbl_id2");
    ret_vec.push_back("memio_tbl_id3");
    ret_vec.push_back("cfg_tbl_id3");
    ret_vec.push_back("rc_tbl_id3");
    ret_vec.push_back("default_tbl_id3");
    ret_vec.push_back("memio_tbl_id4");
    ret_vec.push_back("cfg_tbl_id4");
    ret_vec.push_back("rc_tbl_id4");
    ret_vec.push_back("default_tbl_id4");
    ret_vec.push_back("memio_tbl_id5");
    ret_vec.push_back("cfg_tbl_id5");
    ret_vec.push_back("rc_tbl_id5");
    ret_vec.push_back("default_tbl_id5");
    ret_vec.push_back("memio_tbl_id6");
    ret_vec.push_back("cfg_tbl_id6");
    ret_vec.push_back("rc_tbl_id6");
    ret_vec.push_back("default_tbl_id6");
    ret_vec.push_back("memio_tbl_id7");
    ret_vec.push_back("cfg_tbl_id7");
    ret_vec.push_back("rc_tbl_id7");
    ret_vec.push_back("default_tbl_id7");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_notify_en_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("msg");
    ret_vec.push_back("pmv");
    ret_vec.push_back("db_pmv");
    ret_vec.push_back("unsupp");
    ret_vec.push_back("atomic");
    ret_vec.push_back("pmt_miss");
    ret_vec.push_back("pmr_invalid");
    ret_vec.push_back("prt_invalid");
    ret_vec.push_back("rc_vfid_miss");
    ret_vec.push_back("prt_oor");
    ret_vec.push_back("vfid_oor");
    ret_vec.push_back("cfg_bdf_oor");
    ret_vec.push_back("pmr_ecc_err");
    ret_vec.push_back("prt_ecc_err");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_ind_en_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("msg");
    ret_vec.push_back("pmv");
    ret_vec.push_back("db_pmv");
    ret_vec.push_back("unsupp");
    ret_vec.push_back("atomic");
    ret_vec.push_back("pmt_miss");
    ret_vec.push_back("pmr_invalid");
    ret_vec.push_back("prt_invalid");
    ret_vec.push_back("rc_vfid_miss");
    ret_vec.push_back("prt_oor");
    ret_vec.push_back("vfid_oor");
    ret_vec.push_back("cfg_bdf_oor");
    ret_vec.push_back("pmr_ecc_err");
    ret_vec.push_back("prt_ecc_err");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_rx_credit_bfr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("adr_base0");
    ret_vec.push_back("adr_limit0");
    ret_vec.push_back("update0");
    ret_vec.push_back("rst_rxfifo0");
    ret_vec.push_back("adr_base1");
    ret_vec.push_back("adr_limit1");
    ret_vec.push_back("update1");
    ret_vec.push_back("rst_rxfifo1");
    ret_vec.push_back("adr_base2");
    ret_vec.push_back("adr_limit2");
    ret_vec.push_back("update2");
    ret_vec.push_back("rst_rxfifo2");
    ret_vec.push_back("adr_base3");
    ret_vec.push_back("adr_limit3");
    ret_vec.push_back("update3");
    ret_vec.push_back("rst_rxfifo3");
    ret_vec.push_back("adr_base4");
    ret_vec.push_back("adr_limit4");
    ret_vec.push_back("update4");
    ret_vec.push_back("rst_rxfifo4");
    ret_vec.push_back("adr_base5");
    ret_vec.push_back("adr_limit5");
    ret_vec.push_back("update5");
    ret_vec.push_back("rst_rxfifo5");
    ret_vec.push_back("adr_base6");
    ret_vec.push_back("adr_limit6");
    ret_vec.push_back("update6");
    ret_vec.push_back("rst_rxfifo6");
    ret_vec.push_back("adr_base7");
    ret_vec.push_back("adr_limit7");
    ret_vec.push_back("update7");
    ret_vec.push_back("rst_rxfifo7");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_fence_ignore_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("from_mask");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_msg_filter_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("msg_code0");
    ret_vec.push_back("drop_en0");
    ret_vec.push_back("msg_code1");
    ret_vec.push_back("drop_en1");
    ret_vec.push_back("msg_code2");
    ret_vec.push_back("drop_en2");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_doorbell_base_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("addr_33_24");
    ret_vec.push_back("db_host_sel");
    ret_vec.push_back("db_32b_sel");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_req_indirect_int_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("intr_data");
    ret_vec.push_back("base_addr_35_2");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_req_notify_ring_size_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("mask");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_req_notify_int_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("intr_data");
    ret_vec.push_back("base_addr_35_2");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_req_notify_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("base_addr_35_16");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_itr_tx_req_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("macfifo_thres");
    ret_vec.push_back("rd_sgl_pnd");
    ret_vec.push_back("tag_avl_guardband");
    ret_vec.push_back("cnxt_avl_guardband");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_tgt_port_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("id_limit");
    ret_vec.push_back("bus_adjust");
    ret_vec.push_back("halt");
    ret_vec.push_back("single_pnd");
    ret_vec.push_back("td_miss");
    ret_vec.push_back("depth_thres");
    ret_vec.push_back("skip_notify_if_qfull");
    ret_vec.push_back("fbe_holes_allow");
    ret_vec.push_back("fence_dis");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_itr_port_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("rdreq_limit");
    ret_vec.push_back("timer_tick");
    ret_vec.push_back("timer_limit");
    ret_vec.push_back("bus_adjust");
    ret_vec.push_back("arb_cr_hdr");
    ret_vec.push_back("arb_cr_data");
    ret_vec.push_back("arb_cr_dis_wr");
    ret_vec.push_back("arb_cr_dis_rd");
    ret_vec.push_back("arb_cnxtcnt_chk_dis");
    ret_vec.push_back("arb_tagcnt_chk_dis");
    ret_vec.push_back("arb_txfifocnt");
    ret_vec.push_back("adr_extn_en");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_cfg_pc_port_type_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("host_or_rc0");
    ret_vec.push_back("host_or_rc1");
    ret_vec.push_back("host_or_rc2");
    ret_vec.push_back("host_or_rc3");
    ret_vec.push_back("host_or_rc4");
    ret_vec.push_back("host_or_rc5");
    ret_vec.push_back("host_or_rc6");
    ret_vec.push_back("host_or_rc7");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_rdintr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ireg");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_base_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("scratch_reg");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pxb_csr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : base.get_fields(level-1)) {
            ret_vec.push_back("base." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : rdintr.get_fields(level-1)) {
            ret_vec.push_back("rdintr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pc_port_type.get_fields(level-1)) {
            ret_vec.push_back("cfg_pc_port_type." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_itr_tx_req.get_fields(level-1)) {
            ret_vec.push_back("cfg_itr_tx_req." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_tgt_req_notify_int.get_fields(level-1)) {
            ret_vec.push_back("cfg_tgt_req_notify_int." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_tgt_req_notify_ring_size.get_fields(level-1)) {
            ret_vec.push_back("cfg_tgt_req_notify_ring_size." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_tgt_req_indirect_int.get_fields(level-1)) {
            ret_vec.push_back("cfg_tgt_req_indirect_int." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_tgt_doorbell_base.get_fields(level-1)) {
            ret_vec.push_back("cfg_tgt_doorbell_base." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_tgt_msg_filter.get_fields(level-1)) {
            ret_vec.push_back("cfg_tgt_msg_filter." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_tgt_fence_ignore.get_fields(level-1)) {
            ret_vec.push_back("cfg_tgt_fence_ignore." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_tgt_rx_credit_bfr.get_fields(level-1)) {
            ret_vec.push_back("cfg_tgt_rx_credit_bfr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_tgt_ind_en.get_fields(level-1)) {
            ret_vec.push_back("cfg_tgt_ind_en." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_tgt_notify_en.get_fields(level-1)) {
            ret_vec.push_back("cfg_tgt_notify_en." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pmt_tbl_id.get_fields(level-1)) {
            ret_vec.push_back("cfg_pmt_tbl_id." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_tgt_rc_key.get_fields(level-1)) {
            ret_vec.push_back("cfg_tgt_rc_key." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pcie_local_memaddr_decode.get_fields(level-1)) {
            ret_vec.push_back("cfg_pcie_local_memaddr_decode." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_tgt_rc_legacy_int_data.get_fields(level-1)) {
            ret_vec.push_back("cfg_tgt_rc_legacy_int_data." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_tgt_pmt_grst.get_fields(level-1)) {
            ret_vec.push_back("cfg_tgt_pmt_grst." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_tgt_pmt_ind.get_fields(level-1)) {
            ret_vec.push_back("cfg_tgt_pmt_ind." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_pmt_ind.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_pmt_ind." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_itr_ecc_disable.get_fields(level-1)) {
            ret_vec.push_back("cfg_itr_ecc_disable." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_tgt_ecc_disable.get_fields(level-1)) {
            ret_vec.push_back("cfg_tgt_ecc_disable." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_ecc_wrbfr_0.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_ecc_wrbfr_0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_ecc_wrbfr_1.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_ecc_wrbfr_1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_ecc_wrbfr_2.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_ecc_wrbfr_2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_ecc_wrbfr_3.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_ecc_wrbfr_3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_ecc_pcihdrt.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_ecc_pcihdrt." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_ecc_portmap.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_ecc_portmap." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_ecc_wrhdr.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_ecc_wrhdr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_ecc_rdhdr.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_ecc_rdhdr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_ecc_cplbfr.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_ecc_cplbfr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_ecc_rxcrbfr_0.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_ecc_rxcrbfr_0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_ecc_rxcrbfr_1.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_ecc_rxcrbfr_1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_ecc_rxcrbfr_2.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_ecc_rxcrbfr_2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_ecc_rxcrbfr_3.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_ecc_rxcrbfr_3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_ecc_aximst_0.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_ecc_aximst_0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_ecc_aximst_1.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_ecc_aximst_1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_ecc_aximst_2.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_ecc_aximst_2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_ecc_aximst_3.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_ecc_aximst_3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_ecc_aximst_4.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_ecc_aximst_4." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_ecc_rxinfo.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_ecc_rxinfo." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_ecc_cplst.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_ecc_cplst." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_ecc_pmr.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_ecc_pmr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_ecc_prt.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_ecc_prt." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_ecc_romask.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_ecc_romask." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_tgt_rx_drop.get_fields(level-1)) {
            ret_vec.push_back("sat_tgt_rx_drop." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_axi_pending.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_axi_pending." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_itr_tot_axi_wr.get_fields(level-1)) {
            ret_vec.push_back("cnt_itr_tot_axi_wr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_itr_axi_wr64.get_fields(level-1)) {
            ret_vec.push_back("cnt_itr_axi_wr64." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_itr_axi_wr256.get_fields(level-1)) {
            ret_vec.push_back("cnt_itr_axi_wr256." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_tot_axi_wr.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_tot_axi_wr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_tot_axi_rd.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_tot_axi_rd." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_itr_tot_axi_rd.get_fields(level-1)) {
            ret_vec.push_back("cnt_itr_tot_axi_rd." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_itr_axi_rd64.get_fields(level-1)) {
            ret_vec.push_back("cnt_itr_axi_rd64." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_itr_axi_rd256.get_fields(level-1)) {
            ret_vec.push_back("cnt_itr_axi_rd256." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_tgt_tot_axi_wr.get_fields(level-1)) {
            ret_vec.push_back("cnt_tgt_tot_axi_wr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_tgt_axi_wr64.get_fields(level-1)) {
            ret_vec.push_back("cnt_tgt_axi_wr64." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_tgt_db64_axi_wr.get_fields(level-1)) {
            ret_vec.push_back("cnt_tgt_db64_axi_wr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_tgt_db32_axi_wr.get_fields(level-1)) {
            ret_vec.push_back("cnt_tgt_db32_axi_wr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_tgt_rsp_ca_ur.get_fields(level-1)) {
            ret_vec.push_back("cnt_tgt_rsp_ca_ur." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_tgt_tot_axi_rd.get_fields(level-1)) {
            ret_vec.push_back("cnt_tgt_tot_axi_rd." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_tgt_axi_rd64.get_fields(level-1)) {
            ret_vec.push_back("cnt_tgt_axi_rd64." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_tot_axi_wr.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_tot_axi_wr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_tot_axi_rd.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_tot_axi_rd." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_axi_wr_num_ids.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_axi_wr_num_ids." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_axi_rd_num_ids.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_axi_rd_num_ids." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_itr_tot_msg.get_fields(level-1)) {
            ret_vec.push_back("cnt_itr_tot_msg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_itr_intx_assert_msg.get_fields(level-1)) {
            ret_vec.push_back("cnt_itr_intx_assert_msg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_itr_tot_atomic_req.get_fields(level-1)) {
            ret_vec.push_back("cnt_itr_tot_atomic_req." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_marker_rx.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_marker_rx." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_req_debug.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_req_debug." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_req_debug.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_req_debug." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_rxcrbfr_debug_0.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_rxcrbfr_debug_0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_rxcrbfr_debug_1.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_rxcrbfr_debug_1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_rxcrbfr_debug_2.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_rxcrbfr_debug_2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_rxcrbfr_debug_3.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_rxcrbfr_debug_3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_rxcrbfr_debug_4.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_rxcrbfr_debug_4." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_rxcrbfr_debug_5.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_rxcrbfr_debug_5." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_rxcrbfr_debug_6.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_rxcrbfr_debug_6." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tgt_rxcrbfr_debug_7.get_fields(level-1)) {
            ret_vec.push_back("sta_tgt_rxcrbfr_debug_7." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_itr_raw_tlp.get_fields(level-1)) {
            ret_vec.push_back("cfg_itr_raw_tlp." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_itr_raw_tlp_cmd.get_fields(level-1)) {
            ret_vec.push_back("cfg_itr_raw_tlp_cmd." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_raw_tlp_data.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_raw_tlp_data." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_raw_tlp.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_raw_tlp." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_tags_pending.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_tags_pending." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_portfifo_depth.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_portfifo_depth." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_atomic_seq_cnt.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_atomic_seq_cnt." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_itr_cnxt_pending.get_fields(level-1)) {
            ret_vec.push_back("sta_itr_cnxt_pending." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_itr_atomic_seq_cnt.get_fields(level-1)) {
            ret_vec.push_back("cfg_itr_atomic_seq_cnt." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_itr_axi_resp_order.get_fields(level-1)) {
            ret_vec.push_back("cfg_itr_axi_resp_order." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_tgt_ind_reason.get_fields(level-1)) {
            ret_vec.push_back("sat_tgt_ind_reason." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_itr_req_err.get_fields(level-1)) {
            ret_vec.push_back("sat_itr_req_err." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_itr_xfer_unexpected.get_fields(level-1)) {
            ret_vec.push_back("sat_itr_xfer_unexpected." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_itr_cpl_err.get_fields(level-1)) {
            ret_vec.push_back("sat_itr_cpl_err." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_itr_rsp_err.get_fields(level-1)) {
            ret_vec.push_back("sat_itr_rsp_err." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_itr_req_portgate.get_fields(level-1)) {
            ret_vec.push_back("sat_itr_req_portgate." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_tgt_rsp_err.get_fields(level-1)) {
            ret_vec.push_back("sat_tgt_rsp_err." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_tgt_axi_attr.get_fields(level-1)) {
            ret_vec.push_back("cfg_tgt_axi_attr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_debug_port.get_fields(level-1)) {
            ret_vec.push_back("cfg_debug_port." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_diag_spare0.get_fields(level-1)) {
            ret_vec.push_back("cfg_diag_spare0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_diag_spare0.get_fields(level-1)) {
            ret_vec.push_back("sta_diag_spare0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_diag_spare1.get_fields(level-1)) {
            ret_vec.push_back("cfg_diag_spare1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_diag_spare1.get_fields(level-1)) {
            ret_vec.push_back("sta_diag_spare1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_itr_rdlat_measure.get_fields(level-1)) {
            ret_vec.push_back("cfg_itr_rdlat_measure." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_itr_rdlat0.get_fields(level-1)) {
            ret_vec.push_back("sat_itr_rdlat0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_itr_rdlat1.get_fields(level-1)) {
            ret_vec.push_back("sat_itr_rdlat1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_itr_rdlat2.get_fields(level-1)) {
            ret_vec.push_back("sat_itr_rdlat2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_itr_rdlat3.get_fields(level-1)) {
            ret_vec.push_back("sat_itr_rdlat3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_sram_bist.get_fields(level-1)) {
            ret_vec.push_back("cfg_sram_bist." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_sram_bist.get_fields(level-1)) {
            ret_vec.push_back("sta_sram_bist." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_tcam_bist.get_fields(level-1)) {
            ret_vec.push_back("cfg_tcam_bist." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_tcam_bist.get_fields(level-1)) {
            ret_vec.push_back("sta_tcam_bist." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : csr_intr.get_fields(level-1)) {
            ret_vec.push_back("csr_intr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pxb_spare0.get_fields(level-1)) {
            ret_vec.push_back("cfg_pxb_spare0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pxb_spare1.get_fields(level-1)) {
            ret_vec.push_back("cfg_pxb_spare1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pxb_spare2.get_fields(level-1)) {
            ret_vec.push_back("cfg_pxb_spare2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pxb_spare3.get_fields(level-1)) {
            ret_vec.push_back("cfg_pxb_spare3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_filter.get_fields(level-1)) {
            ret_vec.push_back("cfg_filter." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_uid2sidLL.get_fields(level-1)) {
            ret_vec.push_back("cfg_uid2sidLL." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_uid2sidLL_hbm_hash_msk_bit0.get_fields(level-1)) {
            ret_vec.push_back("cfg_uid2sidLL_hbm_hash_msk_bit0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_uid2sidLL_hbm_hash_msk_bit1.get_fields(level-1)) {
            ret_vec.push_back("cfg_uid2sidLL_hbm_hash_msk_bit1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_uid2sidLL_hbm_hash_msk_bit2.get_fields(level-1)) {
            ret_vec.push_back("cfg_uid2sidLL_hbm_hash_msk_bit2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_uid2sidLL_hbm_hash_msk_bit3.get_fields(level-1)) {
            ret_vec.push_back("cfg_uid2sidLL_hbm_hash_msk_bit3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_axi_bw_mon.get_fields(level-1)) {
            ret_vec.push_back("cfg_axi_bw_mon." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_axi_bw_mon_rd_latency.get_fields(level-1)) {
            ret_vec.push_back("sta_axi_bw_mon_rd_latency." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_axi_bw_mon_rd_bandwidth.get_fields(level-1)) {
            ret_vec.push_back("sta_axi_bw_mon_rd_bandwidth." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_axi_bw_mon_rd_transactions.get_fields(level-1)) {
            ret_vec.push_back("sta_axi_bw_mon_rd_transactions." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_axi_bw_mon_rd.get_fields(level-1)) {
            ret_vec.push_back("cnt_axi_bw_mon_rd." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_axi_bw_mon_wr_latency.get_fields(level-1)) {
            ret_vec.push_back("sta_axi_bw_mon_wr_latency." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_axi_bw_mon_wr_bandwidth.get_fields(level-1)) {
            ret_vec.push_back("sta_axi_bw_mon_wr_bandwidth." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_axi_bw_mon_wr_transactions.get_fields(level-1)) {
            ret_vec.push_back("sta_axi_bw_mon_wr_transactions." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_axi_bw_mon_wr.get_fields(level-1)) {
            ret_vec.push_back("cnt_axi_bw_mon_wr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_pcihdrt.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_pcihdrt." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_portmap.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_portmap." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_pmt.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_pmt." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_pmr.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_pmr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_prt.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_prt." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_rxcrbfr0.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_rxcrbfr0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_rxcrbfr1.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_rxcrbfr1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_rxcrbfr2.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_rxcrbfr2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_rxcrbfr3.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_rxcrbfr3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_rxinfo.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_rxinfo." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_cplst.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_cplst." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_romask.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_romask." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_aximst0.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_aximst0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_aximst1.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_aximst1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_aximst2.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_aximst2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_aximst3.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_aximst3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_aximst4.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_aximst4." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_wrbfr0.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_wrbfr0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_wrbfr1.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_wrbfr1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_wrbfr2.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_wrbfr2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_wrbfr3.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_wrbfr3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_wrhdr.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_wrhdr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_rdhdr.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_rdhdr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_rdcontext.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_rdcontext." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_rdcontext.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_rdcontext." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_rc_bdfmap.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_rc_bdfmap." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_cplbfr0.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_cplbfr0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_cplbfr1.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_cplbfr1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_cplbfr2.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_cplbfr2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_cplbfr3.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_cplbfr3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_cplbfr4.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_cplbfr4." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_cplbfr5.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_cplbfr5." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_cplbfr6.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_cplbfr6." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_cplbfr7.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_cplbfr7." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_cplbfr8.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_cplbfr8." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_cplbfr9.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_cplbfr9." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_cplbfr10.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_cplbfr10." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_cplbfr11.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_cplbfr11." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_cplbfr12.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_cplbfr12." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_cplbfr13.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_cplbfr13." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_cplbfr14.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_cplbfr14." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_itr_cplbfr15.get_fields(level-1)) {
            ret_vec.push_back("dhs_itr_cplbfr15." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_notify.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_notify." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_ind_rsp.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_ind_rsp." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_tgt_pmt_ind.get_fields(level-1)) {
            ret_vec.push_back("dhs_tgt_pmt_ind." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : filter_addr_lo.get_fields(level-1)) {
            ret_vec.push_back("filter_addr_lo." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : filter_addr_hi.get_fields(level-1)) {
            ret_vec.push_back("filter_addr_hi." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : filter_addr_ctl.get_fields(level-1)) {
            ret_vec.push_back("filter_addr_ctl." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_inval_cam.get_fields(level-1)) {
            ret_vec.push_back("sta_inval_cam." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_groups.get_fields(level-1)) {
            ret_vec.push_back("int_groups." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_itr_ecc.get_fields(level-1)) {
            ret_vec.push_back("int_itr_ecc." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_tgt_ecc.get_fields(level-1)) {
            ret_vec.push_back("int_tgt_ecc." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_err.get_fields(level-1)) {
            ret_vec.push_back("int_err." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL
