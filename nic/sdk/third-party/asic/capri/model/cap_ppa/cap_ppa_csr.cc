
#include "cap_ppa_csr.h"
#include "LogMsg.h"        
using namespace std;
        
cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::~cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t() { }

cap_ppa_csr_int_sw_phv_mem_int_test_set_t::cap_ppa_csr_int_sw_phv_mem_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_sw_phv_mem_int_test_set_t::~cap_ppa_csr_int_sw_phv_mem_int_test_set_t() { }

cap_ppa_csr_int_sw_phv_mem_t::cap_ppa_csr_int_sw_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_sw_phv_mem_t::~cap_ppa_csr_int_sw_phv_mem_t() { }

cap_ppa_csr_int_intf_int_enable_clear_t::cap_ppa_csr_int_intf_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_intf_int_enable_clear_t::~cap_ppa_csr_int_intf_int_enable_clear_t() { }

cap_ppa_csr_int_intf_int_test_set_t::cap_ppa_csr_int_intf_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_intf_int_test_set_t::~cap_ppa_csr_int_intf_int_test_set_t() { }

cap_ppa_csr_int_intf_t::cap_ppa_csr_int_intf_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_intf_t::~cap_ppa_csr_int_intf_t() { }

cap_ppa_csr_int_pa_int_enable_clear_t::cap_ppa_csr_int_pa_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_pa_int_enable_clear_t::~cap_ppa_csr_int_pa_int_enable_clear_t() { }

cap_ppa_csr_int_pa_int_test_set_t::cap_ppa_csr_int_pa_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_pa_int_test_set_t::~cap_ppa_csr_int_pa_int_test_set_t() { }

cap_ppa_csr_int_pa_t::cap_ppa_csr_int_pa_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_pa_t::~cap_ppa_csr_int_pa_t() { }

cap_ppa_csr_int_pe9_int_enable_clear_t::cap_ppa_csr_int_pe9_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_pe9_int_enable_clear_t::~cap_ppa_csr_int_pe9_int_enable_clear_t() { }

cap_ppa_csr_int_pe9_int_test_set_t::cap_ppa_csr_int_pe9_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_pe9_int_test_set_t::~cap_ppa_csr_int_pe9_int_test_set_t() { }

cap_ppa_csr_int_pe9_t::cap_ppa_csr_int_pe9_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_pe9_t::~cap_ppa_csr_int_pe9_t() { }

cap_ppa_csr_int_fifo2_int_enable_clear_t::cap_ppa_csr_int_fifo2_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_fifo2_int_enable_clear_t::~cap_ppa_csr_int_fifo2_int_enable_clear_t() { }

cap_ppa_csr_int_fifo2_int_test_set_t::cap_ppa_csr_int_fifo2_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_fifo2_int_test_set_t::~cap_ppa_csr_int_fifo2_int_test_set_t() { }

cap_ppa_csr_int_fifo2_t::cap_ppa_csr_int_fifo2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_fifo2_t::~cap_ppa_csr_int_fifo2_t() { }

cap_ppa_csr_int_fifo1_int_enable_clear_t::cap_ppa_csr_int_fifo1_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_fifo1_int_enable_clear_t::~cap_ppa_csr_int_fifo1_int_enable_clear_t() { }

cap_ppa_csr_int_fifo1_int_test_set_t::cap_ppa_csr_int_fifo1_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_fifo1_int_test_set_t::~cap_ppa_csr_int_fifo1_int_test_set_t() { }

cap_ppa_csr_int_fifo1_t::cap_ppa_csr_int_fifo1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_fifo1_t::~cap_ppa_csr_int_fifo1_t() { }

cap_ppa_csr_int_ecc_int_enable_clear_t::cap_ppa_csr_int_ecc_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_ecc_int_enable_clear_t::~cap_ppa_csr_int_ecc_int_enable_clear_t() { }

cap_ppa_csr_int_ecc_int_test_set_t::cap_ppa_csr_int_ecc_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_ecc_int_test_set_t::~cap_ppa_csr_int_ecc_int_test_set_t() { }

cap_ppa_csr_int_ecc_t::cap_ppa_csr_int_ecc_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_ecc_t::~cap_ppa_csr_int_ecc_t() { }

cap_ppa_csr_int_bndl1_int_enable_clear_t::cap_ppa_csr_int_bndl1_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_bndl1_int_enable_clear_t::~cap_ppa_csr_int_bndl1_int_enable_clear_t() { }

cap_ppa_csr_int_bndl0_intreg_t::cap_ppa_csr_int_bndl0_intreg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_bndl0_intreg_t::~cap_ppa_csr_int_bndl0_intreg_t() { }

cap_ppa_csr_int_bndl0_t::cap_ppa_csr_int_bndl0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_bndl0_t::~cap_ppa_csr_int_bndl0_t() { }

cap_ppa_csr_intreg_status_t::cap_ppa_csr_intreg_status_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_intreg_status_t::~cap_ppa_csr_intreg_status_t() { }

cap_ppa_csr_int_groups_int_enable_rw_reg_t::cap_ppa_csr_int_groups_int_enable_rw_reg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_int_groups_int_enable_rw_reg_t::~cap_ppa_csr_int_groups_int_enable_rw_reg_t() { }

cap_ppa_csr_intgrp_status_t::cap_ppa_csr_intgrp_status_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_intgrp_status_t::~cap_ppa_csr_intgrp_status_t() { }

cap_ppa_csr_dhs_dbg_mem_entry_t::cap_ppa_csr_dhs_dbg_mem_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_dhs_dbg_mem_entry_t::~cap_ppa_csr_dhs_dbg_mem_entry_t() { }

cap_ppa_csr_dhs_dbg_mem_t::cap_ppa_csr_dhs_dbg_mem_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_dhs_dbg_mem_t::~cap_ppa_csr_dhs_dbg_mem_t() { }

cap_ppa_csr_dhs_sw_phv_mem_entry_t::cap_ppa_csr_dhs_sw_phv_mem_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_dhs_sw_phv_mem_entry_t::~cap_ppa_csr_dhs_sw_phv_mem_entry_t() { }

cap_ppa_csr_dhs_sw_phv_mem_t::cap_ppa_csr_dhs_sw_phv_mem_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_dhs_sw_phv_mem_t::~cap_ppa_csr_dhs_sw_phv_mem_t() { }

cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::~cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t() { }

cap_ppa_csr_dhs_bndl1_state_lkp_sram_t::cap_ppa_csr_dhs_bndl1_state_lkp_sram_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_dhs_bndl1_state_lkp_sram_t::~cap_ppa_csr_dhs_bndl1_state_lkp_sram_t() { }

cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t::cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t::~cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t() { }

cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_t::cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_t::~cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_t() { }

cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::~cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t() { }

cap_ppa_csr_dhs_bndl1_state_lkp_tcam_t::cap_ppa_csr_dhs_bndl1_state_lkp_tcam_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_dhs_bndl1_state_lkp_tcam_t::~cap_ppa_csr_dhs_bndl1_state_lkp_tcam_t() { }

cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::~cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t() { }

cap_ppa_csr_dhs_bndl0_state_lkp_sram_t::cap_ppa_csr_dhs_bndl0_state_lkp_sram_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_dhs_bndl0_state_lkp_sram_t::~cap_ppa_csr_dhs_bndl0_state_lkp_sram_t() { }

cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t::cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t::~cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t() { }

cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_t::cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_t::~cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_t() { }

cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::~cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t() { }

cap_ppa_csr_dhs_bndl0_state_lkp_tcam_t::cap_ppa_csr_dhs_bndl0_state_lkp_tcam_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_dhs_bndl0_state_lkp_tcam_t::~cap_ppa_csr_dhs_bndl0_state_lkp_tcam_t() { }

cap_ppa_csr_CNT_preparse_t::cap_ppa_csr_CNT_preparse_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_preparse_t::~cap_ppa_csr_CNT_preparse_t() { }

cap_ppa_csr_sta_preparse_t::cap_ppa_csr_sta_preparse_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_preparse_t::~cap_ppa_csr_sta_preparse_t() { }

cap_ppa_csr_cfg_preparse_t::cap_ppa_csr_cfg_preparse_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_preparse_t::~cap_ppa_csr_cfg_preparse_t() { }

cap_ppa_csr_cfg_spare_dbg_t::cap_ppa_csr_cfg_spare_dbg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_spare_dbg_t::~cap_ppa_csr_cfg_spare_dbg_t() { }

cap_ppa_csr_cfg_spare_t::cap_ppa_csr_cfg_spare_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_spare_t::~cap_ppa_csr_cfg_spare_t() { }

cap_ppa_csr_cfg_debug_port_t::cap_ppa_csr_cfg_debug_port_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_debug_port_t::~cap_ppa_csr_cfg_debug_port_t() { }

cap_ppa_csr_cfg_debug_ctrl_t::cap_ppa_csr_cfg_debug_ctrl_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_debug_ctrl_t::~cap_ppa_csr_cfg_debug_ctrl_t() { }

cap_ppa_csr_sta_pe_alloc_t::cap_ppa_csr_sta_pe_alloc_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe_alloc_t::~cap_ppa_csr_sta_pe_alloc_t() { }

cap_ppa_csr_sta_bndl1_t::cap_ppa_csr_sta_bndl1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_bndl1_t::~cap_ppa_csr_sta_bndl1_t() { }

cap_ppa_csr_sta_bndl0_t::cap_ppa_csr_sta_bndl0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_bndl0_t::~cap_ppa_csr_sta_bndl0_t() { }

cap_ppa_csr_sta_fifo_t::cap_ppa_csr_sta_fifo_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_fifo_t::~cap_ppa_csr_sta_fifo_t() { }

cap_ppa_csr_sta_bndl1_state_lkp_t::cap_ppa_csr_sta_bndl1_state_lkp_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_bndl1_state_lkp_t::~cap_ppa_csr_sta_bndl1_state_lkp_t() { }

cap_ppa_csr_sta_bndl0_state_lkp_t::cap_ppa_csr_sta_bndl0_state_lkp_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_bndl0_state_lkp_t::~cap_ppa_csr_sta_bndl0_state_lkp_t() { }

cap_ppa_csr_sta_pe9_t::cap_ppa_csr_sta_pe9_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe9_t::~cap_ppa_csr_sta_pe9_t() { }

cap_ppa_csr_sta_pe8_t::cap_ppa_csr_sta_pe8_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe8_t::~cap_ppa_csr_sta_pe8_t() { }

cap_ppa_csr_sta_pe7_t::cap_ppa_csr_sta_pe7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe7_t::~cap_ppa_csr_sta_pe7_t() { }

cap_ppa_csr_sta_pe6_t::cap_ppa_csr_sta_pe6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe6_t::~cap_ppa_csr_sta_pe6_t() { }

cap_ppa_csr_sta_pe5_t::cap_ppa_csr_sta_pe5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe5_t::~cap_ppa_csr_sta_pe5_t() { }

cap_ppa_csr_sta_pe4_t::cap_ppa_csr_sta_pe4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe4_t::~cap_ppa_csr_sta_pe4_t() { }

cap_ppa_csr_sta_pe3_t::cap_ppa_csr_sta_pe3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe3_t::~cap_ppa_csr_sta_pe3_t() { }

cap_ppa_csr_sta_pe2_t::cap_ppa_csr_sta_pe2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe2_t::~cap_ppa_csr_sta_pe2_t() { }

cap_ppa_csr_sta_pe1_t::cap_ppa_csr_sta_pe1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe1_t::~cap_ppa_csr_sta_pe1_t() { }

cap_ppa_csr_sta_pe0_t::cap_ppa_csr_sta_pe0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe0_t::~cap_ppa_csr_sta_pe0_t() { }

cap_ppa_csr_sta_chkr_seq_id_t::cap_ppa_csr_sta_chkr_seq_id_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_chkr_seq_id_t::~cap_ppa_csr_sta_chkr_seq_id_t() { }

cap_ppa_csr_sta_csum4_t::cap_ppa_csr_sta_csum4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_csum4_t::~cap_ppa_csr_sta_csum4_t() { }

cap_ppa_csr_sta_csum3_t::cap_ppa_csr_sta_csum3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_csum3_t::~cap_ppa_csr_sta_csum3_t() { }

cap_ppa_csr_sta_csum2_t::cap_ppa_csr_sta_csum2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_csum2_t::~cap_ppa_csr_sta_csum2_t() { }

cap_ppa_csr_sta_csum1_t::cap_ppa_csr_sta_csum1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_csum1_t::~cap_ppa_csr_sta_csum1_t() { }

cap_ppa_csr_sta_csum0_t::cap_ppa_csr_sta_csum0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_csum0_t::~cap_ppa_csr_sta_csum0_t() { }

cap_ppa_csr_sta_reorder_t::cap_ppa_csr_sta_reorder_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_reorder_t::~cap_ppa_csr_sta_reorder_t() { }

cap_ppa_csr_sta_reorder_phv_not_sop_err_t::cap_ppa_csr_sta_reorder_phv_not_sop_err_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_reorder_phv_not_sop_err_t::~cap_ppa_csr_sta_reorder_phv_not_sop_err_t() { }

cap_ppa_csr_sta_sw_phv_mem_t::cap_ppa_csr_sta_sw_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_sw_phv_mem_t::~cap_ppa_csr_sta_sw_phv_mem_t() { }

cap_ppa_csr_cfg_sw_phv_mem_t::cap_ppa_csr_cfg_sw_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_sw_phv_mem_t::~cap_ppa_csr_cfg_sw_phv_mem_t() { }

cap_ppa_csr_sta_sw_phv_state_t::cap_ppa_csr_sta_sw_phv_state_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_sw_phv_state_t::~cap_ppa_csr_sta_sw_phv_state_t() { }

cap_ppa_csr_cfg_sw_phv_config_t::cap_ppa_csr_cfg_sw_phv_config_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_sw_phv_config_t::~cap_ppa_csr_cfg_sw_phv_config_t() { }

cap_ppa_csr_cfg_sw_phv_control_t::cap_ppa_csr_cfg_sw_phv_control_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_sw_phv_control_t::~cap_ppa_csr_cfg_sw_phv_control_t() { }

cap_ppa_csr_cfg_sw_phv_global_t::cap_ppa_csr_cfg_sw_phv_global_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_sw_phv_global_t::~cap_ppa_csr_cfg_sw_phv_global_t() { }

cap_ppa_csr_sta_pe9_phv_mem_t::cap_ppa_csr_sta_pe9_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe9_phv_mem_t::~cap_ppa_csr_sta_pe9_phv_mem_t() { }

cap_ppa_csr_cfg_pe9_phv_mem_t::cap_ppa_csr_cfg_pe9_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_pe9_phv_mem_t::~cap_ppa_csr_cfg_pe9_phv_mem_t() { }

cap_ppa_csr_sta_pe8_phv_mem_t::cap_ppa_csr_sta_pe8_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe8_phv_mem_t::~cap_ppa_csr_sta_pe8_phv_mem_t() { }

cap_ppa_csr_cfg_pe8_phv_mem_t::cap_ppa_csr_cfg_pe8_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_pe8_phv_mem_t::~cap_ppa_csr_cfg_pe8_phv_mem_t() { }

cap_ppa_csr_sta_pe7_phv_mem_t::cap_ppa_csr_sta_pe7_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe7_phv_mem_t::~cap_ppa_csr_sta_pe7_phv_mem_t() { }

cap_ppa_csr_cfg_pe7_phv_mem_t::cap_ppa_csr_cfg_pe7_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_pe7_phv_mem_t::~cap_ppa_csr_cfg_pe7_phv_mem_t() { }

cap_ppa_csr_sta_pe6_phv_mem_t::cap_ppa_csr_sta_pe6_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe6_phv_mem_t::~cap_ppa_csr_sta_pe6_phv_mem_t() { }

cap_ppa_csr_cfg_pe6_phv_mem_t::cap_ppa_csr_cfg_pe6_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_pe6_phv_mem_t::~cap_ppa_csr_cfg_pe6_phv_mem_t() { }

cap_ppa_csr_sta_pe5_phv_mem_t::cap_ppa_csr_sta_pe5_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe5_phv_mem_t::~cap_ppa_csr_sta_pe5_phv_mem_t() { }

cap_ppa_csr_cfg_pe5_phv_mem_t::cap_ppa_csr_cfg_pe5_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_pe5_phv_mem_t::~cap_ppa_csr_cfg_pe5_phv_mem_t() { }

cap_ppa_csr_sta_pe4_phv_mem_t::cap_ppa_csr_sta_pe4_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe4_phv_mem_t::~cap_ppa_csr_sta_pe4_phv_mem_t() { }

cap_ppa_csr_cfg_pe4_phv_mem_t::cap_ppa_csr_cfg_pe4_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_pe4_phv_mem_t::~cap_ppa_csr_cfg_pe4_phv_mem_t() { }

cap_ppa_csr_sta_pe3_phv_mem_t::cap_ppa_csr_sta_pe3_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe3_phv_mem_t::~cap_ppa_csr_sta_pe3_phv_mem_t() { }

cap_ppa_csr_cfg_pe3_phv_mem_t::cap_ppa_csr_cfg_pe3_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_pe3_phv_mem_t::~cap_ppa_csr_cfg_pe3_phv_mem_t() { }

cap_ppa_csr_sta_pe2_phv_mem_t::cap_ppa_csr_sta_pe2_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe2_phv_mem_t::~cap_ppa_csr_sta_pe2_phv_mem_t() { }

cap_ppa_csr_cfg_pe2_phv_mem_t::cap_ppa_csr_cfg_pe2_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_pe2_phv_mem_t::~cap_ppa_csr_cfg_pe2_phv_mem_t() { }

cap_ppa_csr_sta_pe1_phv_mem_t::cap_ppa_csr_sta_pe1_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe1_phv_mem_t::~cap_ppa_csr_sta_pe1_phv_mem_t() { }

cap_ppa_csr_cfg_pe1_phv_mem_t::cap_ppa_csr_cfg_pe1_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_pe1_phv_mem_t::~cap_ppa_csr_cfg_pe1_phv_mem_t() { }

cap_ppa_csr_sta_pe0_phv_mem_t::cap_ppa_csr_sta_pe0_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pe0_phv_mem_t::~cap_ppa_csr_sta_pe0_phv_mem_t() { }

cap_ppa_csr_cfg_pe0_phv_mem_t::cap_ppa_csr_cfg_pe0_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_pe0_phv_mem_t::~cap_ppa_csr_cfg_pe0_phv_mem_t() { }

cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::cap_ppa_csr_sta_bndl1_state_lkp_tcam_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::~cap_ppa_csr_sta_bndl1_state_lkp_tcam_t() { }

cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t::cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t::~cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t() { }

cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::cap_ppa_csr_sta_bndl0_state_lkp_tcam_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::~cap_ppa_csr_sta_bndl0_state_lkp_tcam_t() { }

cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t::cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t::~cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t() { }

cap_ppa_csr_sta_outq_ohi_mem_t::cap_ppa_csr_sta_outq_ohi_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_outq_ohi_mem_t::~cap_ppa_csr_sta_outq_ohi_mem_t() { }

cap_ppa_csr_cfg_outq_ohi_mem_t::cap_ppa_csr_cfg_outq_ohi_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_outq_ohi_mem_t::~cap_ppa_csr_cfg_outq_ohi_mem_t() { }

cap_ppa_csr_sta_outq_phv_mem_t::cap_ppa_csr_sta_outq_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_outq_phv_mem_t::~cap_ppa_csr_sta_outq_phv_mem_t() { }

cap_ppa_csr_cfg_outq_phv_mem_t::cap_ppa_csr_cfg_outq_phv_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_outq_phv_mem_t::~cap_ppa_csr_cfg_outq_phv_mem_t() { }

cap_ppa_csr_sta_bndl1_inq_mem_t::cap_ppa_csr_sta_bndl1_inq_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_bndl1_inq_mem_t::~cap_ppa_csr_sta_bndl1_inq_mem_t() { }

cap_ppa_csr_cfg_bndl1_inq_mem_t::cap_ppa_csr_cfg_bndl1_inq_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_bndl1_inq_mem_t::~cap_ppa_csr_cfg_bndl1_inq_mem_t() { }

cap_ppa_csr_sta_bndl0_inq_mem_t::cap_ppa_csr_sta_bndl0_inq_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_bndl0_inq_mem_t::~cap_ppa_csr_sta_bndl0_inq_mem_t() { }

cap_ppa_csr_cfg_bndl0_inq_mem_t::cap_ppa_csr_cfg_bndl0_inq_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_bndl0_inq_mem_t::~cap_ppa_csr_cfg_bndl0_inq_mem_t() { }

cap_ppa_csr_sta_bndl1_state_lkp_sram_t::cap_ppa_csr_sta_bndl1_state_lkp_sram_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_bndl1_state_lkp_sram_t::~cap_ppa_csr_sta_bndl1_state_lkp_sram_t() { }

cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::cap_ppa_csr_cfg_bndl1_state_lkp_sram_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::~cap_ppa_csr_cfg_bndl1_state_lkp_sram_t() { }

cap_ppa_csr_sta_bndl0_state_lkp_sram_t::cap_ppa_csr_sta_bndl0_state_lkp_sram_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_bndl0_state_lkp_sram_t::~cap_ppa_csr_sta_bndl0_state_lkp_sram_t() { }

cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::cap_ppa_csr_cfg_bndl0_state_lkp_sram_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::~cap_ppa_csr_cfg_bndl0_state_lkp_sram_t() { }

cap_ppa_csr_sta_pkt_mem_t::cap_ppa_csr_sta_pkt_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_pkt_mem_t::~cap_ppa_csr_sta_pkt_mem_t() { }

cap_ppa_csr_cfg_pkt_mem_t::cap_ppa_csr_cfg_pkt_mem_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_pkt_mem_t::~cap_ppa_csr_cfg_pkt_mem_t() { }

cap_ppa_csr_csr_intr_t::cap_ppa_csr_csr_intr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_csr_intr_t::~cap_ppa_csr_csr_intr_t() { }

cap_ppa_csr_CNT_ppa_pe9_phv_out_t::cap_ppa_csr_CNT_ppa_pe9_phv_out_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe9_phv_out_t::~cap_ppa_csr_CNT_ppa_pe9_phv_out_t() { }

cap_ppa_csr_CNT_ppa_pe9_t::cap_ppa_csr_CNT_ppa_pe9_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe9_t::~cap_ppa_csr_CNT_ppa_pe9_t() { }

cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::cap_ppa_csr_CNT_ppa_pe9_pkt_in_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::~cap_ppa_csr_CNT_ppa_pe9_pkt_in_t() { }

cap_ppa_csr_CNT_ppa_pe8_phv_out_t::cap_ppa_csr_CNT_ppa_pe8_phv_out_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe8_phv_out_t::~cap_ppa_csr_CNT_ppa_pe8_phv_out_t() { }

cap_ppa_csr_CNT_ppa_pe8_t::cap_ppa_csr_CNT_ppa_pe8_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe8_t::~cap_ppa_csr_CNT_ppa_pe8_t() { }

cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::cap_ppa_csr_CNT_ppa_pe8_pkt_in_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::~cap_ppa_csr_CNT_ppa_pe8_pkt_in_t() { }

cap_ppa_csr_CNT_ppa_pe7_phv_out_t::cap_ppa_csr_CNT_ppa_pe7_phv_out_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe7_phv_out_t::~cap_ppa_csr_CNT_ppa_pe7_phv_out_t() { }

cap_ppa_csr_CNT_ppa_pe7_t::cap_ppa_csr_CNT_ppa_pe7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe7_t::~cap_ppa_csr_CNT_ppa_pe7_t() { }

cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::cap_ppa_csr_CNT_ppa_pe7_pkt_in_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::~cap_ppa_csr_CNT_ppa_pe7_pkt_in_t() { }

cap_ppa_csr_CNT_ppa_pe6_phv_out_t::cap_ppa_csr_CNT_ppa_pe6_phv_out_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe6_phv_out_t::~cap_ppa_csr_CNT_ppa_pe6_phv_out_t() { }

cap_ppa_csr_CNT_ppa_pe6_t::cap_ppa_csr_CNT_ppa_pe6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe6_t::~cap_ppa_csr_CNT_ppa_pe6_t() { }

cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::cap_ppa_csr_CNT_ppa_pe6_pkt_in_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::~cap_ppa_csr_CNT_ppa_pe6_pkt_in_t() { }

cap_ppa_csr_CNT_ppa_pe5_phv_out_t::cap_ppa_csr_CNT_ppa_pe5_phv_out_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe5_phv_out_t::~cap_ppa_csr_CNT_ppa_pe5_phv_out_t() { }

cap_ppa_csr_CNT_ppa_pe5_t::cap_ppa_csr_CNT_ppa_pe5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe5_t::~cap_ppa_csr_CNT_ppa_pe5_t() { }

cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::cap_ppa_csr_CNT_ppa_pe5_pkt_in_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::~cap_ppa_csr_CNT_ppa_pe5_pkt_in_t() { }

cap_ppa_csr_CNT_ppa_pe4_phv_out_t::cap_ppa_csr_CNT_ppa_pe4_phv_out_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe4_phv_out_t::~cap_ppa_csr_CNT_ppa_pe4_phv_out_t() { }

cap_ppa_csr_CNT_ppa_pe4_t::cap_ppa_csr_CNT_ppa_pe4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe4_t::~cap_ppa_csr_CNT_ppa_pe4_t() { }

cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::cap_ppa_csr_CNT_ppa_pe4_pkt_in_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::~cap_ppa_csr_CNT_ppa_pe4_pkt_in_t() { }

cap_ppa_csr_CNT_ppa_pe3_phv_out_t::cap_ppa_csr_CNT_ppa_pe3_phv_out_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe3_phv_out_t::~cap_ppa_csr_CNT_ppa_pe3_phv_out_t() { }

cap_ppa_csr_CNT_ppa_pe3_t::cap_ppa_csr_CNT_ppa_pe3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe3_t::~cap_ppa_csr_CNT_ppa_pe3_t() { }

cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::cap_ppa_csr_CNT_ppa_pe3_pkt_in_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::~cap_ppa_csr_CNT_ppa_pe3_pkt_in_t() { }

cap_ppa_csr_CNT_ppa_pe2_phv_out_t::cap_ppa_csr_CNT_ppa_pe2_phv_out_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe2_phv_out_t::~cap_ppa_csr_CNT_ppa_pe2_phv_out_t() { }

cap_ppa_csr_CNT_ppa_pe2_t::cap_ppa_csr_CNT_ppa_pe2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe2_t::~cap_ppa_csr_CNT_ppa_pe2_t() { }

cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::cap_ppa_csr_CNT_ppa_pe2_pkt_in_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::~cap_ppa_csr_CNT_ppa_pe2_pkt_in_t() { }

cap_ppa_csr_CNT_ppa_pe1_phv_out_t::cap_ppa_csr_CNT_ppa_pe1_phv_out_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe1_phv_out_t::~cap_ppa_csr_CNT_ppa_pe1_phv_out_t() { }

cap_ppa_csr_CNT_ppa_pe1_t::cap_ppa_csr_CNT_ppa_pe1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe1_t::~cap_ppa_csr_CNT_ppa_pe1_t() { }

cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::cap_ppa_csr_CNT_ppa_pe1_pkt_in_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::~cap_ppa_csr_CNT_ppa_pe1_pkt_in_t() { }

cap_ppa_csr_CNT_ppa_pe0_phv_out_t::cap_ppa_csr_CNT_ppa_pe0_phv_out_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe0_phv_out_t::~cap_ppa_csr_CNT_ppa_pe0_phv_out_t() { }

cap_ppa_csr_CNT_ppa_pe0_t::cap_ppa_csr_CNT_ppa_pe0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe0_t::~cap_ppa_csr_CNT_ppa_pe0_t() { }

cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::cap_ppa_csr_CNT_ppa_pe0_pkt_in_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::~cap_ppa_csr_CNT_ppa_pe0_pkt_in_t() { }

cap_ppa_csr_CNT_ppa_ohi_t::cap_ppa_csr_CNT_ppa_ohi_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_ohi_t::~cap_ppa_csr_CNT_ppa_ohi_t() { }

cap_ppa_csr_CNT_ppa_sw_phv_t::cap_ppa_csr_CNT_ppa_sw_phv_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_sw_phv_t::~cap_ppa_csr_CNT_ppa_sw_phv_t() { }

cap_ppa_csr_CNT_ppa_ma_t::cap_ppa_csr_CNT_ppa_ma_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_ma_t::~cap_ppa_csr_CNT_ppa_ma_t() { }

cap_ppa_csr_CNT_ppa_dp_t::cap_ppa_csr_CNT_ppa_dp_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_dp_t::~cap_ppa_csr_CNT_ppa_dp_t() { }

cap_ppa_csr_CNT_ppa_pb_t::cap_ppa_csr_CNT_ppa_pb_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_CNT_ppa_pb_t::~cap_ppa_csr_CNT_ppa_pb_t() { }

cap_ppa_csr_cfg_align_chk_profile_t::cap_ppa_csr_cfg_align_chk_profile_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_align_chk_profile_t::~cap_ppa_csr_cfg_align_chk_profile_t() { }

cap_ppa_csr_cfg_len_chk_profile_t::cap_ppa_csr_cfg_len_chk_profile_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_len_chk_profile_t::~cap_ppa_csr_cfg_len_chk_profile_t() { }

cap_ppa_csr_cfg_csum_phdr_profile_t::cap_ppa_csr_cfg_csum_phdr_profile_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_csum_phdr_profile_t::~cap_ppa_csr_cfg_csum_phdr_profile_t() { }

cap_ppa_csr_cfg_csum_profile_t::cap_ppa_csr_cfg_csum_profile_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_csum_profile_t::~cap_ppa_csr_cfg_csum_profile_t() { }

cap_ppa_csr_cfg_crc_mask_profile_t::cap_ppa_csr_cfg_crc_mask_profile_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_crc_mask_profile_t::~cap_ppa_csr_cfg_crc_mask_profile_t() { }

cap_ppa_csr_cfg_crc_profile_t::cap_ppa_csr_cfg_crc_profile_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_crc_profile_t::~cap_ppa_csr_cfg_crc_profile_t() { }

cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::~cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t() { }

cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::~cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t() { }

cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t::cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t::~cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t() { }

cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::~cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t() { }

cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::~cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t() { }

cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t::cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t::~cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t() { }

cap_ppa_csr_cfg_init_profile_t::cap_ppa_csr_cfg_init_profile_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_init_profile_t::~cap_ppa_csr_cfg_init_profile_t() { }

cap_ppa_csr_cfg_ctrl_thresh_t::cap_ppa_csr_cfg_ctrl_thresh_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_ctrl_thresh_t::~cap_ppa_csr_cfg_ctrl_thresh_t() { }

cap_ppa_csr_cfg_ctrl_t::cap_ppa_csr_cfg_ctrl_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_cfg_ctrl_t::~cap_ppa_csr_cfg_ctrl_t() { }

cap_ppa_csr_rdintr_t::cap_ppa_csr_rdintr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_rdintr_t::~cap_ppa_csr_rdintr_t() { }

cap_ppa_csr_base_t::cap_ppa_csr_base_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_ppa_csr_base_t::~cap_ppa_csr_base_t() { }

cap_ppa_csr_t::cap_ppa_csr_t(string name, cap_csr_base * parent): 
    cap_block_base(name, parent)  { 
        set_byte_size(524288);
        set_attributes(0,get_name(), 0);
        }
cap_ppa_csr_t::~cap_ppa_csr_t() { }

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_uncorrectable_enable: 0x" << int_var__ecc_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_correctable_enable: 0x" << int_var__ecc_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_invalid_sram_enable: 0x" << int_var__phv_invalid_sram_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_invalid_data_enable: 0x" << int_var__phv_invalid_data_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_done0_enable: 0x" << int_var__phv_done0_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_done1_enable: 0x" << int_var__phv_done1_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_done2_enable: 0x" << int_var__phv_done2_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_done3_enable: 0x" << int_var__phv_done3_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_done4_enable: 0x" << int_var__phv_done4_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_done5_enable: 0x" << int_var__phv_done5_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_done6_enable: 0x" << int_var__phv_done6_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_done7_enable: 0x" << int_var__phv_done7_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_sw_phv_mem_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_uncorrectable_interrupt: 0x" << int_var__ecc_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_correctable_interrupt: 0x" << int_var__ecc_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_invalid_sram_interrupt: 0x" << int_var__phv_invalid_sram_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_invalid_data_interrupt: 0x" << int_var__phv_invalid_data_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_done0_interrupt: 0x" << int_var__phv_done0_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_done1_interrupt: 0x" << int_var__phv_done1_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_done2_interrupt: 0x" << int_var__phv_done2_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_done3_interrupt: 0x" << int_var__phv_done3_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_done4_interrupt: 0x" << int_var__phv_done4_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_done5_interrupt: 0x" << int_var__phv_done5_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_done6_interrupt: 0x" << int_var__phv_done6_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_done7_interrupt: 0x" << int_var__phv_done7_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_sw_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_intf_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pb_err_enable: 0x" << int_var__pb_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pb_sop_err_enable: 0x" << int_var__pb_sop_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pb_eop_err_enable: 0x" << int_var__pb_eop_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dp_err_enable: 0x" << int_var__dp_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dp_sop_err_enable: 0x" << int_var__dp_sop_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dp_eop_err_enable: 0x" << int_var__dp_eop_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_err_enable: 0x" << int_var__ohi_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_sop_err_enable: 0x" << int_var__ohi_sop_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_eop_err_enable: 0x" << int_var__ohi_eop_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sw_phv_err_enable: 0x" << int_var__sw_phv_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sw_phv_sop_err_enable: 0x" << int_var__sw_phv_sop_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sw_phv_eop_err_enable: 0x" << int_var__sw_phv_eop_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ma_err_enable: 0x" << int_var__ma_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ma_sop_err_enable: 0x" << int_var__ma_sop_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ma_eop_err_enable: 0x" << int_var__ma_eop_err_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_intf_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pb_err_interrupt: 0x" << int_var__pb_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pb_sop_err_interrupt: 0x" << int_var__pb_sop_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pb_eop_err_interrupt: 0x" << int_var__pb_eop_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dp_err_interrupt: 0x" << int_var__dp_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dp_sop_err_interrupt: 0x" << int_var__dp_sop_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dp_eop_err_interrupt: 0x" << int_var__dp_eop_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_err_interrupt: 0x" << int_var__ohi_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_sop_err_interrupt: 0x" << int_var__ohi_sop_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_eop_err_interrupt: 0x" << int_var__ohi_eop_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sw_phv_err_interrupt: 0x" << int_var__sw_phv_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sw_phv_sop_err_interrupt: 0x" << int_var__sw_phv_sop_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sw_phv_eop_err_interrupt: 0x" << int_var__sw_phv_eop_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ma_err_interrupt: 0x" << int_var__ma_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ma_sop_err_interrupt: 0x" << int_var__ma_sop_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ma_eop_err_interrupt: 0x" << int_var__ma_eop_err_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_intf_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_pa_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".reorder_phv_not_sop_enable: 0x" << int_var__reorder_phv_not_sop_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum0_not_enuf_bytes_enable: 0x" << int_var__csum0_not_enuf_bytes_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum0_start_more_than_end_offset_enable: 0x" << int_var__csum0_start_more_than_end_offset_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum1_not_enuf_bytes_enable: 0x" << int_var__csum1_not_enuf_bytes_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum1_start_more_than_end_offset_enable: 0x" << int_var__csum1_start_more_than_end_offset_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum2_not_enuf_bytes_enable: 0x" << int_var__csum2_not_enuf_bytes_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum2_start_more_than_end_offset_enable: 0x" << int_var__csum2_start_more_than_end_offset_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum3_not_enuf_bytes_enable: 0x" << int_var__csum3_not_enuf_bytes_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum3_start_more_than_end_offset_enable: 0x" << int_var__csum3_start_more_than_end_offset_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum4_not_enuf_bytes_enable: 0x" << int_var__csum4_not_enuf_bytes_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum4_start_more_than_end_offset_enable: 0x" << int_var__csum4_start_more_than_end_offset_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crc_not_enuf_bytes_enable: 0x" << int_var__crc_not_enuf_bytes_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crc_start_more_than_end_offset_enable: 0x" << int_var__crc_start_more_than_end_offset_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".chkr_phv_single_flit_enable: 0x" << int_var__chkr_phv_single_flit_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".chkr_phv_not_sop_enable: 0x" << int_var__chkr_phv_not_sop_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".chkr_pkt_not_sop_enable: 0x" << int_var__chkr_pkt_not_sop_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".chkr_seq_id_enable: 0x" << int_var__chkr_seq_id_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".preparse_line0_not_sop_enable: 0x" << int_var__preparse_line0_not_sop_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".preparse_dff_not_sop_enable: 0x" << int_var__preparse_dff_not_sop_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".preparse_dff_ovflow_enable: 0x" << int_var__preparse_dff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".preparse_eff_ovflow_enable: 0x" << int_var__preparse_eff_ovflow_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_pa_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".reorder_phv_not_sop_interrupt: 0x" << int_var__reorder_phv_not_sop_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum0_not_enuf_bytes_interrupt: 0x" << int_var__csum0_not_enuf_bytes_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum0_start_more_than_end_offset_interrupt: 0x" << int_var__csum0_start_more_than_end_offset_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum1_not_enuf_bytes_interrupt: 0x" << int_var__csum1_not_enuf_bytes_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum1_start_more_than_end_offset_interrupt: 0x" << int_var__csum1_start_more_than_end_offset_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum2_not_enuf_bytes_interrupt: 0x" << int_var__csum2_not_enuf_bytes_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum2_start_more_than_end_offset_interrupt: 0x" << int_var__csum2_start_more_than_end_offset_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum3_not_enuf_bytes_interrupt: 0x" << int_var__csum3_not_enuf_bytes_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum3_start_more_than_end_offset_interrupt: 0x" << int_var__csum3_start_more_than_end_offset_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum4_not_enuf_bytes_interrupt: 0x" << int_var__csum4_not_enuf_bytes_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum4_start_more_than_end_offset_interrupt: 0x" << int_var__csum4_start_more_than_end_offset_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crc_not_enuf_bytes_interrupt: 0x" << int_var__crc_not_enuf_bytes_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crc_start_more_than_end_offset_interrupt: 0x" << int_var__crc_start_more_than_end_offset_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".chkr_phv_single_flit_interrupt: 0x" << int_var__chkr_phv_single_flit_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".chkr_phv_not_sop_interrupt: 0x" << int_var__chkr_phv_not_sop_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".chkr_pkt_not_sop_interrupt: 0x" << int_var__chkr_pkt_not_sop_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".chkr_seq_id_interrupt: 0x" << int_var__chkr_seq_id_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".preparse_line0_not_sop_interrupt: 0x" << int_var__preparse_line0_not_sop_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".preparse_dff_not_sop_interrupt: 0x" << int_var__preparse_dff_not_sop_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".preparse_dff_ovflow_interrupt: 0x" << int_var__preparse_dff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".preparse_eff_ovflow_interrupt: 0x" << int_var__preparse_eff_ovflow_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_pa_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_pe9_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".qctl_skid_depth_not_zero_enable: 0x" << int_var__qctl_skid_depth_not_zero_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".qctl_not_sop_after_pkt_release_enable: 0x" << int_var__qctl_not_sop_after_pkt_release_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".unexpected_non_sop_enable: 0x" << int_var__unexpected_non_sop_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".exceed_phv_flit_cnt_enable: 0x" << int_var__exceed_phv_flit_cnt_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".exceed_parse_loop_cnt_enable: 0x" << int_var__exceed_parse_loop_cnt_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".offset_out_of_range_enable: 0x" << int_var__offset_out_of_range_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_size_chk_enable: 0x" << int_var__pkt_size_chk_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".offset_jump_chk_enable: 0x" << int_var__offset_jump_chk_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".d1_not_valid_enable: 0x" << int_var__d1_not_valid_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_upr_idx_less_enable: 0x" << int_var__phv_upr_idx_less_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_pe9_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".qctl_skid_depth_not_zero_interrupt: 0x" << int_var__qctl_skid_depth_not_zero_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".qctl_not_sop_after_pkt_release_interrupt: 0x" << int_var__qctl_not_sop_after_pkt_release_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".unexpected_non_sop_interrupt: 0x" << int_var__unexpected_non_sop_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".exceed_phv_flit_cnt_interrupt: 0x" << int_var__exceed_phv_flit_cnt_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".exceed_parse_loop_cnt_interrupt: 0x" << int_var__exceed_parse_loop_cnt_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".offset_out_of_range_interrupt: 0x" << int_var__offset_out_of_range_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_size_chk_interrupt: 0x" << int_var__pkt_size_chk_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".offset_jump_chk_interrupt: 0x" << int_var__offset_jump_chk_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".d1_not_valid_interrupt: 0x" << int_var__d1_not_valid_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_upr_idx_less_interrupt: 0x" << int_var__phv_upr_idx_less_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_pe9_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_fifo2_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".dp_if_ff_ovflow_enable: 0x" << int_var__dp_if_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_if_ff_ovflow_enable: 0x" << int_var__ohi_if_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ma_if_ff_ovflow_enable: 0x" << int_var__ma_if_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pb_if_ff_ovflow_enable: 0x" << int_var__pb_if_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_mtu_ff_ovflow_enable: 0x" << int_var__pkt_mtu_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".outphv_ff_ovflow_enable: 0x" << int_var__outphv_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".outohi_ff_ovflow_enable: 0x" << int_var__outohi_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".chk_ff_ovflow_enable: 0x" << int_var__chk_ff_ovflow_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_fifo2_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".dp_if_ff_ovflow_interrupt: 0x" << int_var__dp_if_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_if_ff_ovflow_interrupt: 0x" << int_var__ohi_if_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ma_if_ff_ovflow_interrupt: 0x" << int_var__ma_if_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pb_if_ff_ovflow_interrupt: 0x" << int_var__pb_if_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_mtu_ff_ovflow_interrupt: 0x" << int_var__pkt_mtu_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".outphv_ff_ovflow_interrupt: 0x" << int_var__outphv_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".outohi_ff_ovflow_interrupt: 0x" << int_var__outohi_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".chk_ff_ovflow_interrupt: 0x" << int_var__chk_ff_ovflow_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_fifo2_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_fifo1_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pe0_qctl_ff_ovflow_enable: 0x" << int_var__pe0_qctl_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe1_qctl_ff_ovflow_enable: 0x" << int_var__pe1_qctl_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe2_qctl_ff_ovflow_enable: 0x" << int_var__pe2_qctl_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe3_qctl_ff_ovflow_enable: 0x" << int_var__pe3_qctl_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe4_qctl_ff_ovflow_enable: 0x" << int_var__pe4_qctl_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe5_qctl_ff_ovflow_enable: 0x" << int_var__pe5_qctl_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe6_qctl_ff_ovflow_enable: 0x" << int_var__pe6_qctl_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe7_qctl_ff_ovflow_enable: 0x" << int_var__pe7_qctl_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe8_qctl_ff_ovflow_enable: 0x" << int_var__pe8_qctl_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe9_qctl_ff_ovflow_enable: 0x" << int_var__pe9_qctl_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe0_phv_ff_ovflow_enable: 0x" << int_var__pe0_phv_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe1_phv_ff_ovflow_enable: 0x" << int_var__pe1_phv_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe2_phv_ff_ovflow_enable: 0x" << int_var__pe2_phv_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe3_phv_ff_ovflow_enable: 0x" << int_var__pe3_phv_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe4_phv_ff_ovflow_enable: 0x" << int_var__pe4_phv_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe5_phv_ff_ovflow_enable: 0x" << int_var__pe5_phv_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe6_phv_ff_ovflow_enable: 0x" << int_var__pe6_phv_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe7_phv_ff_ovflow_enable: 0x" << int_var__pe7_phv_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe8_phv_ff_ovflow_enable: 0x" << int_var__pe8_phv_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe9_phv_ff_ovflow_enable: 0x" << int_var__pe9_phv_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe0_ohi_ff_ovflow_enable: 0x" << int_var__pe0_ohi_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe1_ohi_ff_ovflow_enable: 0x" << int_var__pe1_ohi_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe2_ohi_ff_ovflow_enable: 0x" << int_var__pe2_ohi_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe3_ohi_ff_ovflow_enable: 0x" << int_var__pe3_ohi_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe4_ohi_ff_ovflow_enable: 0x" << int_var__pe4_ohi_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe5_ohi_ff_ovflow_enable: 0x" << int_var__pe5_ohi_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe6_ohi_ff_ovflow_enable: 0x" << int_var__pe6_ohi_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe7_ohi_ff_ovflow_enable: 0x" << int_var__pe7_ohi_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe8_ohi_ff_ovflow_enable: 0x" << int_var__pe8_ohi_ff_ovflow_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe9_ohi_ff_ovflow_enable: 0x" << int_var__pe9_ohi_ff_ovflow_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_fifo1_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pe0_qctl_ff_ovflow_interrupt: 0x" << int_var__pe0_qctl_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe1_qctl_ff_ovflow_interrupt: 0x" << int_var__pe1_qctl_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe2_qctl_ff_ovflow_interrupt: 0x" << int_var__pe2_qctl_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe3_qctl_ff_ovflow_interrupt: 0x" << int_var__pe3_qctl_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe4_qctl_ff_ovflow_interrupt: 0x" << int_var__pe4_qctl_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe5_qctl_ff_ovflow_interrupt: 0x" << int_var__pe5_qctl_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe6_qctl_ff_ovflow_interrupt: 0x" << int_var__pe6_qctl_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe7_qctl_ff_ovflow_interrupt: 0x" << int_var__pe7_qctl_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe8_qctl_ff_ovflow_interrupt: 0x" << int_var__pe8_qctl_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe9_qctl_ff_ovflow_interrupt: 0x" << int_var__pe9_qctl_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe0_phv_ff_ovflow_interrupt: 0x" << int_var__pe0_phv_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe1_phv_ff_ovflow_interrupt: 0x" << int_var__pe1_phv_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe2_phv_ff_ovflow_interrupt: 0x" << int_var__pe2_phv_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe3_phv_ff_ovflow_interrupt: 0x" << int_var__pe3_phv_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe4_phv_ff_ovflow_interrupt: 0x" << int_var__pe4_phv_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe5_phv_ff_ovflow_interrupt: 0x" << int_var__pe5_phv_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe6_phv_ff_ovflow_interrupt: 0x" << int_var__pe6_phv_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe7_phv_ff_ovflow_interrupt: 0x" << int_var__pe7_phv_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe8_phv_ff_ovflow_interrupt: 0x" << int_var__pe8_phv_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe9_phv_ff_ovflow_interrupt: 0x" << int_var__pe9_phv_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe0_ohi_ff_ovflow_interrupt: 0x" << int_var__pe0_ohi_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe1_ohi_ff_ovflow_interrupt: 0x" << int_var__pe1_ohi_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe2_ohi_ff_ovflow_interrupt: 0x" << int_var__pe2_ohi_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe3_ohi_ff_ovflow_interrupt: 0x" << int_var__pe3_ohi_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe4_ohi_ff_ovflow_interrupt: 0x" << int_var__pe4_ohi_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe5_ohi_ff_ovflow_interrupt: 0x" << int_var__pe5_ohi_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe6_ohi_ff_ovflow_interrupt: 0x" << int_var__pe6_ohi_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe7_ohi_ff_ovflow_interrupt: 0x" << int_var__pe7_ohi_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe8_ohi_ff_ovflow_interrupt: 0x" << int_var__pe8_ohi_ff_ovflow_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe9_ohi_ff_ovflow_interrupt: 0x" << int_var__pe9_ohi_ff_ovflow_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_fifo1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_ecc_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_mem_uncorrectable_enable: 0x" << int_var__pkt_mem_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_mem_correctable_enable: 0x" << int_var__pkt_mem_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bndl0_state_lkp_sram_uncorrectable_enable: 0x" << int_var__bndl0_state_lkp_sram_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bndl0_state_lkp_sram_correctable_enable: 0x" << int_var__bndl0_state_lkp_sram_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bndl1_state_lkp_sram_uncorrectable_enable: 0x" << int_var__bndl1_state_lkp_sram_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bndl1_state_lkp_sram_correctable_enable: 0x" << int_var__bndl1_state_lkp_sram_correctable_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_ecc_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_mem_uncorrectable_interrupt: 0x" << int_var__pkt_mem_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_mem_correctable_interrupt: 0x" << int_var__pkt_mem_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bndl0_state_lkp_sram_uncorrectable_interrupt: 0x" << int_var__bndl0_state_lkp_sram_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bndl0_state_lkp_sram_correctable_interrupt: 0x" << int_var__bndl0_state_lkp_sram_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bndl1_state_lkp_sram_uncorrectable_interrupt: 0x" << int_var__bndl1_state_lkp_sram_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bndl1_state_lkp_sram_correctable_interrupt: 0x" << int_var__bndl1_state_lkp_sram_correctable_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_ecc_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_bndl1_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".state_lkp_srch_hit_addr_range_err_enable: 0x" << int_var__state_lkp_srch_hit_addr_range_err_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".state_lkp_srch_miss_enable: 0x" << int_var__state_lkp_srch_miss_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".state_lkp_srch_req_not_rdy_enable: 0x" << int_var__state_lkp_srch_req_not_rdy_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_bndl0_intreg_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".state_lkp_srch_hit_addr_range_err_interrupt: 0x" << int_var__state_lkp_srch_hit_addr_range_err_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".state_lkp_srch_miss_interrupt: 0x" << int_var__state_lkp_srch_miss_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".state_lkp_srch_req_not_rdy_interrupt: 0x" << int_var__state_lkp_srch_req_not_rdy_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_bndl0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_intreg_status_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".int_bndl0_interrupt: 0x" << int_var__int_bndl0_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_bndl1_interrupt: 0x" << int_var__int_bndl1_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_ecc_interrupt: 0x" << int_var__int_ecc_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_fifo1_interrupt: 0x" << int_var__int_fifo1_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_fifo2_interrupt: 0x" << int_var__int_fifo2_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe0_interrupt: 0x" << int_var__int_pe0_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe1_interrupt: 0x" << int_var__int_pe1_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe2_interrupt: 0x" << int_var__int_pe2_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe3_interrupt: 0x" << int_var__int_pe3_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe4_interrupt: 0x" << int_var__int_pe4_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe5_interrupt: 0x" << int_var__int_pe5_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe6_interrupt: 0x" << int_var__int_pe6_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe7_interrupt: 0x" << int_var__int_pe7_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe8_interrupt: 0x" << int_var__int_pe8_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe9_interrupt: 0x" << int_var__int_pe9_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pa_interrupt: 0x" << int_var__int_pa_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_sw_phv_mem_interrupt: 0x" << int_var__int_sw_phv_mem_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_intf_interrupt: 0x" << int_var__int_intf_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".int_bndl0_enable: 0x" << int_var__int_bndl0_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_bndl1_enable: 0x" << int_var__int_bndl1_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_ecc_enable: 0x" << int_var__int_ecc_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_fifo1_enable: 0x" << int_var__int_fifo1_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_fifo2_enable: 0x" << int_var__int_fifo2_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe0_enable: 0x" << int_var__int_pe0_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe1_enable: 0x" << int_var__int_pe1_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe2_enable: 0x" << int_var__int_pe2_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe3_enable: 0x" << int_var__int_pe3_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe4_enable: 0x" << int_var__int_pe4_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe5_enable: 0x" << int_var__int_pe5_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe6_enable: 0x" << int_var__int_pe6_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe7_enable: 0x" << int_var__int_pe7_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe8_enable: 0x" << int_var__int_pe8_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pe9_enable: 0x" << int_var__int_pe9_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_pa_enable: 0x" << int_var__int_pa_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_sw_phv_mem_enable: 0x" << int_var__int_sw_phv_mem_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_intf_enable: 0x" << int_var__int_intf_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_intgrp_status_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_enable_rw_reg.show();
    int_rw_reg.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_dhs_dbg_mem_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_dhs_dbg_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 256 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 256; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_dhs_sw_phv_mem_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".spare: 0x" << int_var__spare << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_dhs_sw_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 16 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 16; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rsvd: 0x" << int_var__rsvd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_dhs_bndl1_state_lkp_sram_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 288; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".cmd: 0x" << int_var__cmd << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    entry.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".x_data: 0x" << int_var__x_data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".y_data: 0x" << int_var__y_data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".valid: 0x" << int_var__valid << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 288; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rsvd: 0x" << int_var__rsvd << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc: 0x" << int_var__ecc << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_dhs_bndl0_state_lkp_sram_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 288; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".cmd: 0x" << int_var__cmd << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    entry.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".x_data: 0x" << int_var__x_data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".y_data: 0x" << int_var__y_data << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".valid: 0x" << int_var__valid << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 288; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_preparse_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".dff_sop: 0x" << int_var__dff_sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dff_eop: 0x" << int_var__dff_eop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eff: 0x" << int_var__eff << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_preparse_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".state: 0x" << int_var__state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dq_state: 0x" << int_var__dq_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dff_empty: 0x" << int_var__dff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dff_full: 0x" << int_var__dff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eff_empty: 0x" << int_var__eff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eff_full: 0x" << int_var__eff_full << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_preparse_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".spare: 0x" << int_var__spare << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bypass: 0x" << int_var__bypass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tm_iport_enc_en: 0x" << int_var__tm_iport_enc_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".udp_dstport_roce_val0: 0x" << int_var__udp_dstport_roce_val0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".udp_dstport_roce_val1: 0x" << int_var__udp_dstport_roce_val1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".udp_dstport_vxlan_val0: 0x" << int_var__udp_dstport_vxlan_val0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".udp_dstport_vxlan_val1: 0x" << int_var__udp_dstport_vxlan_val1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".vxlan_flag_mask: 0x" << int_var__vxlan_flag_mask << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".vxlan_flag_val: 0x" << int_var__vxlan_flag_val << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_spare_dbg_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_spare_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".fld0_inst: 0x" << int_var__fld0_inst << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld1_inst: 0x" << int_var__fld1_inst << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld2_inst: 0x" << int_var__fld2_inst << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld3_inst: 0x" << int_var__fld3_inst << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_debug_port_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".select: 0x" << int_var__select << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_debug_ctrl_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".deq_stall_en: 0x" << int_var__deq_stall_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dbg_mem_sel: 0x" << int_var__dbg_mem_sel << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dbg_bndl_sel: 0x" << int_var__dbg_bndl_sel << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dbg_bus_sel: 0x" << int_var__dbg_bus_sel << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eccbypass: 0x" << int_var__eccbypass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe_alloc_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".state: 0x" << int_var__state << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_bndl1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_queue: 0x" << int_var__pkt_queue << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_bndl0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_queue: 0x" << int_var__pkt_queue << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_fifo_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".dp_if_ff_full: 0x" << int_var__dp_if_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dp_if_ff_empty: 0x" << int_var__dp_if_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_if_ff_full: 0x" << int_var__ohi_if_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_if_ff_empty: 0x" << int_var__ohi_if_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ma_if_ff_full: 0x" << int_var__ma_if_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ma_if_ff_empty: 0x" << int_var__ma_if_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pb_if_ff_full: 0x" << int_var__pb_if_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pb_if_ff_empty: 0x" << int_var__pb_if_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_mtu_ff_full: 0x" << int_var__pkt_mtu_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_mtu_ff_empty: 0x" << int_var__pkt_mtu_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".outphv_ff_full: 0x" << int_var__outphv_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".outphv_ff_empty: 0x" << int_var__outphv_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".outohi_ff_full: 0x" << int_var__outohi_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".outohi_ff_empty: 0x" << int_var__outohi_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".chk_ff_full: 0x" << int_var__chk_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".chk_ff_empty: 0x" << int_var__chk_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe0_qctl_ff_full: 0x" << int_var__pe0_qctl_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe0_qctl_ff_empty: 0x" << int_var__pe0_qctl_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe0_phv_ff_full: 0x" << int_var__pe0_phv_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe0_phv_ff_empty: 0x" << int_var__pe0_phv_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe0_ohi_ff_full: 0x" << int_var__pe0_ohi_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe0_ohi_ff_empty: 0x" << int_var__pe0_ohi_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe1_qctl_ff_full: 0x" << int_var__pe1_qctl_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe1_qctl_ff_empty: 0x" << int_var__pe1_qctl_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe1_phv_ff_full: 0x" << int_var__pe1_phv_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe1_phv_ff_empty: 0x" << int_var__pe1_phv_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe1_ohi_ff_full: 0x" << int_var__pe1_ohi_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe1_ohi_ff_empty: 0x" << int_var__pe1_ohi_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe2_qctl_ff_full: 0x" << int_var__pe2_qctl_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe2_qctl_ff_empty: 0x" << int_var__pe2_qctl_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe2_phv_ff_full: 0x" << int_var__pe2_phv_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe2_phv_ff_empty: 0x" << int_var__pe2_phv_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe2_ohi_ff_full: 0x" << int_var__pe2_ohi_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe2_ohi_ff_empty: 0x" << int_var__pe2_ohi_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe3_qctl_ff_full: 0x" << int_var__pe3_qctl_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe3_qctl_ff_empty: 0x" << int_var__pe3_qctl_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe3_phv_ff_full: 0x" << int_var__pe3_phv_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe3_phv_ff_empty: 0x" << int_var__pe3_phv_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe3_ohi_ff_full: 0x" << int_var__pe3_ohi_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe3_ohi_ff_empty: 0x" << int_var__pe3_ohi_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe4_qctl_ff_full: 0x" << int_var__pe4_qctl_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe4_qctl_ff_empty: 0x" << int_var__pe4_qctl_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe4_phv_ff_full: 0x" << int_var__pe4_phv_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe4_phv_ff_empty: 0x" << int_var__pe4_phv_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe4_ohi_ff_full: 0x" << int_var__pe4_ohi_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe4_ohi_ff_empty: 0x" << int_var__pe4_ohi_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe5_qctl_ff_full: 0x" << int_var__pe5_qctl_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe5_qctl_ff_empty: 0x" << int_var__pe5_qctl_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe5_phv_ff_full: 0x" << int_var__pe5_phv_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe5_phv_ff_empty: 0x" << int_var__pe5_phv_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe5_ohi_ff_full: 0x" << int_var__pe5_ohi_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe5_ohi_ff_empty: 0x" << int_var__pe5_ohi_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe6_qctl_ff_full: 0x" << int_var__pe6_qctl_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe6_qctl_ff_empty: 0x" << int_var__pe6_qctl_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe6_phv_ff_full: 0x" << int_var__pe6_phv_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe6_phv_ff_empty: 0x" << int_var__pe6_phv_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe6_ohi_ff_full: 0x" << int_var__pe6_ohi_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe6_ohi_ff_empty: 0x" << int_var__pe6_ohi_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe7_qctl_ff_full: 0x" << int_var__pe7_qctl_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe7_qctl_ff_empty: 0x" << int_var__pe7_qctl_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe7_phv_ff_full: 0x" << int_var__pe7_phv_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe7_phv_ff_empty: 0x" << int_var__pe7_phv_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe7_ohi_ff_full: 0x" << int_var__pe7_ohi_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe7_ohi_ff_empty: 0x" << int_var__pe7_ohi_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe8_qctl_ff_full: 0x" << int_var__pe8_qctl_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe8_qctl_ff_empty: 0x" << int_var__pe8_qctl_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe8_phv_ff_full: 0x" << int_var__pe8_phv_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe8_phv_ff_empty: 0x" << int_var__pe8_phv_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe8_ohi_ff_full: 0x" << int_var__pe8_ohi_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe8_ohi_ff_empty: 0x" << int_var__pe8_ohi_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe9_qctl_ff_full: 0x" << int_var__pe9_qctl_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe9_qctl_ff_empty: 0x" << int_var__pe9_qctl_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe9_phv_ff_full: 0x" << int_var__pe9_phv_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe9_phv_ff_empty: 0x" << int_var__pe9_phv_ff_empty << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe9_ohi_ff_full: 0x" << int_var__pe9_ohi_ff_full << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe9_ohi_ff_empty: 0x" << int_var__pe9_ohi_ff_empty << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_bndl1_state_lkp_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_vec: 0x" << int_var__err_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err_log: 0x" << int_var__err_log << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_bndl0_state_lkp_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_vec: 0x" << int_var__err_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err_log: 0x" << int_var__err_log << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe9_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_vec: 0x" << int_var__err_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err_log: 0x" << int_var__err_log << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe_state: 0x" << int_var__pe_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_state: 0x" << int_var__phv_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_state: 0x" << int_var__pkt_state << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe8_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_vec: 0x" << int_var__err_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err_log: 0x" << int_var__err_log << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe_state: 0x" << int_var__pe_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_state: 0x" << int_var__phv_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_state: 0x" << int_var__pkt_state << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe7_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_vec: 0x" << int_var__err_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err_log: 0x" << int_var__err_log << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe_state: 0x" << int_var__pe_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_state: 0x" << int_var__phv_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_state: 0x" << int_var__pkt_state << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe6_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_vec: 0x" << int_var__err_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err_log: 0x" << int_var__err_log << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe_state: 0x" << int_var__pe_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_state: 0x" << int_var__phv_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_state: 0x" << int_var__pkt_state << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe5_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_vec: 0x" << int_var__err_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err_log: 0x" << int_var__err_log << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe_state: 0x" << int_var__pe_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_state: 0x" << int_var__phv_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_state: 0x" << int_var__pkt_state << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe4_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_vec: 0x" << int_var__err_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err_log: 0x" << int_var__err_log << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe_state: 0x" << int_var__pe_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_state: 0x" << int_var__phv_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_state: 0x" << int_var__pkt_state << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe3_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_vec: 0x" << int_var__err_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err_log: 0x" << int_var__err_log << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe_state: 0x" << int_var__pe_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_state: 0x" << int_var__phv_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_state: 0x" << int_var__pkt_state << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe2_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_vec: 0x" << int_var__err_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err_log: 0x" << int_var__err_log << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe_state: 0x" << int_var__pe_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_state: 0x" << int_var__phv_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_state: 0x" << int_var__pkt_state << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_vec: 0x" << int_var__err_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err_log: 0x" << int_var__err_log << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe_state: 0x" << int_var__pe_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_state: 0x" << int_var__phv_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_state: 0x" << int_var__pkt_state << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_vec: 0x" << int_var__err_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err_log: 0x" << int_var__err_log << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe_state: 0x" << int_var__pe_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_state: 0x" << int_var__phv_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_state: 0x" << int_var__pkt_state << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_chkr_seq_id_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ohi: 0x" << int_var__ohi << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pkt: 0x" << int_var__pkt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_csum4_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_vec: 0x" << int_var__err_vec << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_csum3_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_vec: 0x" << int_var__err_vec << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_csum2_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_vec: 0x" << int_var__err_vec << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_csum1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_vec: 0x" << int_var__err_vec << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_csum0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".err_vec: 0x" << int_var__err_vec << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_reorder_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".seq_state: 0x" << int_var__seq_state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".seq_num: 0x" << int_var__seq_num << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_srdy_vec: 0x" << int_var__ohi_srdy_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_srdy_vec: 0x" << int_var__phv_srdy_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".match_vec: 0x" << int_var__match_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_vec: 0x" << int_var__eop_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drdy_vec_d: 0x" << int_var__drdy_vec_d << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_reorder_phv_not_sop_err_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".match_vec: 0x" << int_var__match_vec << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_sop_vec: 0x" << int_var__phv_sop_vec << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_sw_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_correctable: 0x" << int_var__ecc_correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_uncorrectable: 0x" << int_var__ecc_uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_syndrome: 0x" << int_var__ecc_syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_addr: 0x" << int_var__ecc_addr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_sw_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_detect: 0x" << int_var__ecc_detect << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_correct: 0x" << int_var__ecc_correct << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_bypass: 0x" << int_var__ecc_bypass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_sw_phv_state_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".done: 0x" << int_var__done << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".current_insertion_period: 0x" << int_var__current_insertion_period << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".current_counter: 0x" << int_var__current_counter << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".current_flit: 0x" << int_var__current_flit << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".current_qid: 0x" << int_var__current_qid << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_sw_phv_config_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".start_addr: 0x" << int_var__start_addr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".num_flits: 0x" << int_var__num_flits << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".insertion_period_clocks: 0x" << int_var__insertion_period_clocks << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".counter_max: 0x" << int_var__counter_max << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".qid_min: 0x" << int_var__qid_min << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".qid_max: 0x" << int_var__qid_max << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_sw_phv_control_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".start_enable: 0x" << int_var__start_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".counter_repeat_enable: 0x" << int_var__counter_repeat_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".qid_repeat_enable: 0x" << int_var__qid_repeat_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".localtime_enable: 0x" << int_var__localtime_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".frame_size_enable: 0x" << int_var__frame_size_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".packet_len_enable: 0x" << int_var__packet_len_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".qid_enable: 0x" << int_var__qid_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_sw_phv_global_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".start_enable: 0x" << int_var__start_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err_enable: 0x" << int_var__err_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe9_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_pe9_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe8_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_pe8_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe7_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_pe7_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe6_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_pe6_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe5_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_pe5_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe4_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_pe4_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe3_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_pe3_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe2_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_pe2_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe1_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_pe1_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pe0_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_pe0_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_outq_ohi_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_outq_ohi_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_outq_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_outq_phv_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_bndl1_inq_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_bndl1_inq_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_bndl0_inq_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_bndl0_inq_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_bndl1_state_lkp_sram_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_ecc_bypass: 0x" << int_var__dhs_ecc_bypass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_bndl0_state_lkp_sram_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_ecc_bypass: 0x" << int_var__dhs_ecc_bypass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_pkt_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_pkt_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_csr_intr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".dowstream: 0x" << int_var__dowstream << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dowstream_enable: 0x" << int_var__dowstream_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe9_phv_out_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe9_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_release: 0x" << int_var__pkt_release << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_out: 0x" << int_var__ohi_out << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe8_phv_out_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe8_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_release: 0x" << int_var__pkt_release << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_out: 0x" << int_var__ohi_out << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe7_phv_out_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe7_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_release: 0x" << int_var__pkt_release << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_out: 0x" << int_var__ohi_out << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe6_phv_out_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe6_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_release: 0x" << int_var__pkt_release << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_out: 0x" << int_var__ohi_out << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe5_phv_out_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe5_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_release: 0x" << int_var__pkt_release << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_out: 0x" << int_var__ohi_out << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe4_phv_out_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe4_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_release: 0x" << int_var__pkt_release << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_out: 0x" << int_var__ohi_out << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe3_phv_out_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe3_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_release: 0x" << int_var__pkt_release << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_out: 0x" << int_var__ohi_out << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe2_phv_out_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe2_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_release: 0x" << int_var__pkt_release << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_out: 0x" << int_var__ohi_out << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe1_phv_out_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_release: 0x" << int_var__pkt_release << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_out: 0x" << int_var__ohi_out << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe0_phv_out_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pkt_release: 0x" << int_var__pkt_release << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ohi_out: 0x" << int_var__ohi_out << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_ohi_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err: 0x" << int_var__err << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_err: 0x" << int_var__sop_err << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_err: 0x" << int_var__eop_err << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_sw_phv_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err: 0x" << int_var__err << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_err: 0x" << int_var__sop_err << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_err: 0x" << int_var__eop_err << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_ma_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err: 0x" << int_var__err << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_err: 0x" << int_var__sop_err << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_err: 0x" << int_var__eop_err << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_dp_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err: 0x" << int_var__err << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_err: 0x" << int_var__sop_err << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_err: 0x" << int_var__eop_err << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_CNT_ppa_pb_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop: 0x" << int_var__sop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".err: 0x" << int_var__err << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_err: 0x" << int_var__sop_err << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_err: 0x" << int_var__eop_err << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_align_chk_profile_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".addsub_start: 0x" << int_var__addsub_start << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".start_adj: 0x" << int_var__start_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".mod_log2: 0x" << int_var__mod_log2 << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_len_chk_profile_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".len_mask: 0x" << int_var__len_mask << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".len_shift_left: 0x" << int_var__len_shift_left << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".len_shift_val: 0x" << int_var__len_shift_val << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addsub_start: 0x" << int_var__addsub_start << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".start_adj: 0x" << int_var__start_adj << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_csum_phdr_profile_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".fld0_fld_en: 0x" << int_var__fld0_fld_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld0_fld_align: 0x" << int_var__fld0_fld_align << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld0_fld_start: 0x" << int_var__fld0_fld_start << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld0_fld_end: 0x" << int_var__fld0_fld_end << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld0_add_len: 0x" << int_var__fld0_add_len << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld1_fld_en: 0x" << int_var__fld1_fld_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld1_fld_align: 0x" << int_var__fld1_fld_align << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld1_fld_start: 0x" << int_var__fld1_fld_start << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld1_fld_end: 0x" << int_var__fld1_fld_end << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld1_add_len: 0x" << int_var__fld1_add_len << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld2_fld_en: 0x" << int_var__fld2_fld_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld2_fld_align: 0x" << int_var__fld2_fld_align << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld2_fld_start: 0x" << int_var__fld2_fld_start << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld2_fld_end: 0x" << int_var__fld2_fld_end << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld2_add_len: 0x" << int_var__fld2_add_len << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld3_fld_en: 0x" << int_var__fld3_fld_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld3_fld_align: 0x" << int_var__fld3_fld_align << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld3_fld_start: 0x" << int_var__fld3_fld_start << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld3_fld_end: 0x" << int_var__fld3_fld_end << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld3_add_len: 0x" << int_var__fld3_add_len << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_csum_profile_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".csum_loc_use_phdr_ohi: 0x" << int_var__csum_loc_use_phdr_ohi << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum_8b: 0x" << int_var__csum_8b << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_csum_flit_num: 0x" << int_var__phv_csum_flit_num << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".end_eop: 0x" << int_var__end_eop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".len_mask: 0x" << int_var__len_mask << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".len_shift_left: 0x" << int_var__len_shift_left << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".len_shift_val: 0x" << int_var__len_shift_val << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addsub_start: 0x" << int_var__addsub_start << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".start_adj: 0x" << int_var__start_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addsub_end: 0x" << int_var__addsub_end << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".end_adj: 0x" << int_var__end_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addsub_phdr: 0x" << int_var__addsub_phdr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phdr_adj: 0x" << int_var__phdr_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addsub_csum_loc: 0x" << int_var__addsub_csum_loc << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum_loc_adj: 0x" << int_var__csum_loc_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".align: 0x" << int_var__align << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".add_val: 0x" << int_var__add_val << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_crc_mask_profile_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".fld0_mask_en: 0x" << int_var__fld0_mask_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld0_use_ohi: 0x" << int_var__fld0_use_ohi << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld0_start_adj: 0x" << int_var__fld0_start_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld0_end_adj: 0x" << int_var__fld0_end_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld0_fill: 0x" << int_var__fld0_fill << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld0_skip_first_nibble: 0x" << int_var__fld0_skip_first_nibble << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld1_mask_en: 0x" << int_var__fld1_mask_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld1_use_ohi: 0x" << int_var__fld1_use_ohi << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld1_start_adj: 0x" << int_var__fld1_start_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld1_end_adj: 0x" << int_var__fld1_end_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld1_fill: 0x" << int_var__fld1_fill << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld1_skip_first_nibble: 0x" << int_var__fld1_skip_first_nibble << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld2_mask_en: 0x" << int_var__fld2_mask_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld2_use_ohi: 0x" << int_var__fld2_use_ohi << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld2_start_adj: 0x" << int_var__fld2_start_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld2_end_adj: 0x" << int_var__fld2_end_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld2_fill: 0x" << int_var__fld2_fill << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld2_skip_first_nibble: 0x" << int_var__fld2_skip_first_nibble << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld3_mask_en: 0x" << int_var__fld3_mask_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld3_use_ohi: 0x" << int_var__fld3_use_ohi << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld3_start_adj: 0x" << int_var__fld3_start_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld3_end_adj: 0x" << int_var__fld3_end_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld3_fill: 0x" << int_var__fld3_fill << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld3_skip_first_nibble: 0x" << int_var__fld3_skip_first_nibble << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld4_mask_en: 0x" << int_var__fld4_mask_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld4_use_ohi: 0x" << int_var__fld4_use_ohi << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld4_start_adj: 0x" << int_var__fld4_start_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld4_end_adj: 0x" << int_var__fld4_end_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld4_fill: 0x" << int_var__fld4_fill << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld4_skip_first_nibble: 0x" << int_var__fld4_skip_first_nibble << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld5_mask_en: 0x" << int_var__fld5_mask_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld5_use_ohi: 0x" << int_var__fld5_use_ohi << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld5_start_adj: 0x" << int_var__fld5_start_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld5_end_adj: 0x" << int_var__fld5_end_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld5_fill: 0x" << int_var__fld5_fill << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".fld5_skip_first_nibble: 0x" << int_var__fld5_skip_first_nibble << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_crc_profile_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".len_mask: 0x" << int_var__len_mask << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".len_shift_left: 0x" << int_var__len_shift_left << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".len_shift_val: 0x" << int_var__len_shift_val << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addsub_start: 0x" << int_var__addsub_start << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".start_adj: 0x" << int_var__start_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addsub_end: 0x" << int_var__addsub_end << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".end_adj: 0x" << int_var__end_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addsub_mask: 0x" << int_var__addsub_mask << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".mask_adj: 0x" << int_var__mask_adj << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".end_eop: 0x" << int_var__end_eop << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".mask_prof_sel: 0x" << int_var__mask_prof_sel << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".hit: 0x" << int_var__hit << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".hit_addr: 0x" << int_var__hit_addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".key: 0x" << int_var__key << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".mask: 0x" << int_var__mask << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".vld: 0x" << int_var__vld << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".hit: 0x" << int_var__hit << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".hit_addr: 0x" << int_var__hit_addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".key: 0x" << int_var__key << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".mask: 0x" << int_var__mask << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".vld: 0x" << int_var__vld << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_init_profile_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".curr_offset: 0x" << int_var__curr_offset << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".state: 0x" << int_var__state << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".lkp_val_pkt_idx0: 0x" << int_var__lkp_val_pkt_idx0 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".lkp_val_pkt_idx1: 0x" << int_var__lkp_val_pkt_idx1 << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".lkp_val_pkt_idx2: 0x" << int_var__lkp_val_pkt_idx2 << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_ctrl_thresh_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".outphv_ff: 0x" << int_var__outphv_ff << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_ff: 0x" << int_var__phv_ff << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".chk_ff: 0x" << int_var__chk_ff << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_cfg_ctrl_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".pe_enable: 0x" << int_var__pe_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".parse_loop_cnt: 0x" << int_var__parse_loop_cnt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".num_phv_flit: 0x" << int_var__num_phv_flit << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".state_lkp_catchall_entry: 0x" << int_var__state_lkp_catchall_entry << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_set_hw_err_en: 0x" << int_var__phv_set_hw_err_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".phv_set_parser_err_en: 0x" << int_var__phv_set_parser_err_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".gso_csum_en: 0x" << int_var__gso_csum_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pe_err_vec_en: 0x" << int_var__pe_err_vec_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".end_offset_en: 0x" << int_var__end_offset_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".end_offset_flit_num: 0x" << int_var__end_offset_flit_num << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tcam_key_ctl: 0x" << int_var__tcam_key_ctl << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crc_start_offset_err_en: 0x" << int_var__crc_start_offset_err_en << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".csum_start_offset_err_en: 0x" << int_var__csum_start_offset_err_en << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_rdintr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ireg: 0x" << int_var__ireg << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_base_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".scratch_reg: 0x" << int_var__scratch_reg << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_ppa_csr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    base.show();
    rdintr.show();
    cfg_ctrl.show();
    cfg_ctrl_thresh.show();
    #if 16 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_init_profile.show(); // large_array
    #else
    for(int ii = 0; ii < 16; ii++) {
        cfg_init_profile[ii].show();
    }
    #endif
    
    cfg_bndl0_state_lkp_tcam_grst.show();
    cfg_bndl0_state_lkp_tcam_ind.show();
    sta_bndl0_state_lkp_tcam_ind.show();
    cfg_bndl1_state_lkp_tcam_grst.show();
    cfg_bndl1_state_lkp_tcam_ind.show();
    sta_bndl1_state_lkp_tcam_ind.show();
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_crc_profile.show(); // large_array
    #else
    for(int ii = 0; ii < 8; ii++) {
        cfg_crc_profile[ii].show();
    }
    #endif
    
    #if 4 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_crc_mask_profile.show(); // large_array
    #else
    for(int ii = 0; ii < 4; ii++) {
        cfg_crc_mask_profile[ii].show();
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_csum_profile.show(); // large_array
    #else
    for(int ii = 0; ii < 8; ii++) {
        cfg_csum_profile[ii].show();
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_csum_phdr_profile.show(); // large_array
    #else
    for(int ii = 0; ii < 8; ii++) {
        cfg_csum_phdr_profile[ii].show();
    }
    #endif
    
    #if 4 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_len_chk_profile.show(); // large_array
    #else
    for(int ii = 0; ii < 4; ii++) {
        cfg_len_chk_profile[ii].show();
    }
    #endif
    
    #if 4 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_align_chk_profile.show(); // large_array
    #else
    for(int ii = 0; ii < 4; ii++) {
        cfg_align_chk_profile[ii].show();
    }
    #endif
    
    CNT_ppa_pb.show();
    CNT_ppa_dp.show();
    CNT_ppa_ma.show();
    CNT_ppa_sw_phv.show();
    CNT_ppa_ohi.show();
    CNT_ppa_pe0_pkt_in.show();
    CNT_ppa_pe0.show();
    CNT_ppa_pe0_phv_out.show();
    CNT_ppa_pe1_pkt_in.show();
    CNT_ppa_pe1.show();
    CNT_ppa_pe1_phv_out.show();
    CNT_ppa_pe2_pkt_in.show();
    CNT_ppa_pe2.show();
    CNT_ppa_pe2_phv_out.show();
    CNT_ppa_pe3_pkt_in.show();
    CNT_ppa_pe3.show();
    CNT_ppa_pe3_phv_out.show();
    CNT_ppa_pe4_pkt_in.show();
    CNT_ppa_pe4.show();
    CNT_ppa_pe4_phv_out.show();
    CNT_ppa_pe5_pkt_in.show();
    CNT_ppa_pe5.show();
    CNT_ppa_pe5_phv_out.show();
    CNT_ppa_pe6_pkt_in.show();
    CNT_ppa_pe6.show();
    CNT_ppa_pe6_phv_out.show();
    CNT_ppa_pe7_pkt_in.show();
    CNT_ppa_pe7.show();
    CNT_ppa_pe7_phv_out.show();
    CNT_ppa_pe8_pkt_in.show();
    CNT_ppa_pe8.show();
    CNT_ppa_pe8_phv_out.show();
    CNT_ppa_pe9_pkt_in.show();
    CNT_ppa_pe9.show();
    CNT_ppa_pe9_phv_out.show();
    csr_intr.show();
    cfg_pkt_mem.show();
    sta_pkt_mem.show();
    cfg_bndl0_state_lkp_sram.show();
    sta_bndl0_state_lkp_sram.show();
    cfg_bndl1_state_lkp_sram.show();
    sta_bndl1_state_lkp_sram.show();
    cfg_bndl0_inq_mem.show();
    sta_bndl0_inq_mem.show();
    cfg_bndl1_inq_mem.show();
    sta_bndl1_inq_mem.show();
    cfg_outq_phv_mem.show();
    sta_outq_phv_mem.show();
    cfg_outq_ohi_mem.show();
    sta_outq_ohi_mem.show();
    cfg_bndl0_state_lkp_tcam.show();
    sta_bndl0_state_lkp_tcam.show();
    cfg_bndl1_state_lkp_tcam.show();
    sta_bndl1_state_lkp_tcam.show();
    cfg_pe0_phv_mem.show();
    sta_pe0_phv_mem.show();
    cfg_pe1_phv_mem.show();
    sta_pe1_phv_mem.show();
    cfg_pe2_phv_mem.show();
    sta_pe2_phv_mem.show();
    cfg_pe3_phv_mem.show();
    sta_pe3_phv_mem.show();
    cfg_pe4_phv_mem.show();
    sta_pe4_phv_mem.show();
    cfg_pe5_phv_mem.show();
    sta_pe5_phv_mem.show();
    cfg_pe6_phv_mem.show();
    sta_pe6_phv_mem.show();
    cfg_pe7_phv_mem.show();
    sta_pe7_phv_mem.show();
    cfg_pe8_phv_mem.show();
    sta_pe8_phv_mem.show();
    cfg_pe9_phv_mem.show();
    sta_pe9_phv_mem.show();
    cfg_sw_phv_global.show();
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_sw_phv_control.show(); // large_array
    #else
    for(int ii = 0; ii < 8; ii++) {
        cfg_sw_phv_control[ii].show();
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_sw_phv_config.show(); // large_array
    #else
    for(int ii = 0; ii < 8; ii++) {
        cfg_sw_phv_config[ii].show();
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    sta_sw_phv_state.show(); // large_array
    #else
    for(int ii = 0; ii < 8; ii++) {
        sta_sw_phv_state[ii].show();
    }
    #endif
    
    cfg_sw_phv_mem.show();
    sta_sw_phv_mem.show();
    sta_reorder_phv_not_sop_err.show();
    sta_reorder.show();
    sta_csum0.show();
    sta_csum1.show();
    sta_csum2.show();
    sta_csum3.show();
    sta_csum4.show();
    sta_chkr_seq_id.show();
    sta_pe0.show();
    sta_pe1.show();
    sta_pe2.show();
    sta_pe3.show();
    sta_pe4.show();
    sta_pe5.show();
    sta_pe6.show();
    sta_pe7.show();
    sta_pe8.show();
    sta_pe9.show();
    sta_bndl0_state_lkp.show();
    sta_bndl1_state_lkp.show();
    sta_fifo.show();
    sta_bndl0.show();
    sta_bndl1.show();
    sta_pe_alloc.show();
    cfg_debug_ctrl.show();
    cfg_debug_port.show();
    cfg_spare.show();
    cfg_spare_dbg.show();
    cfg_preparse.show();
    sta_preparse.show();
    CNT_preparse.show();
    dhs_bndl0_state_lkp_tcam.show();
    dhs_bndl0_state_lkp_tcam_ind.show();
    dhs_bndl0_state_lkp_sram.show();
    dhs_bndl1_state_lkp_tcam.show();
    dhs_bndl1_state_lkp_tcam_ind.show();
    dhs_bndl1_state_lkp_sram.show();
    dhs_sw_phv_mem.show();
    dhs_dbg_mem.show();
    int_groups.show();
    int_bndl0.show();
    int_bndl1.show();
    int_ecc.show();
    int_fifo1.show();
    int_fifo2.show();
    int_pe0.show();
    int_pe1.show();
    int_pe2.show();
    int_pe3.show();
    int_pe4.show();
    int_pe5.show();
    int_pe6.show();
    int_pe7.show();
    int_pe8.show();
    int_pe9.show();
    int_pa.show();
    int_intf.show();
    int_sw_phv_mem.show();
}
#endif // CSR_NO_SHOW_IMPL

int cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::get_width() const {
    return cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::s_get_width();

}

int cap_ppa_csr_int_sw_phv_mem_int_test_set_t::get_width() const {
    return cap_ppa_csr_int_sw_phv_mem_int_test_set_t::s_get_width();

}

int cap_ppa_csr_int_sw_phv_mem_t::get_width() const {
    return cap_ppa_csr_int_sw_phv_mem_t::s_get_width();

}

int cap_ppa_csr_int_intf_int_enable_clear_t::get_width() const {
    return cap_ppa_csr_int_intf_int_enable_clear_t::s_get_width();

}

int cap_ppa_csr_int_intf_int_test_set_t::get_width() const {
    return cap_ppa_csr_int_intf_int_test_set_t::s_get_width();

}

int cap_ppa_csr_int_intf_t::get_width() const {
    return cap_ppa_csr_int_intf_t::s_get_width();

}

int cap_ppa_csr_int_pa_int_enable_clear_t::get_width() const {
    return cap_ppa_csr_int_pa_int_enable_clear_t::s_get_width();

}

int cap_ppa_csr_int_pa_int_test_set_t::get_width() const {
    return cap_ppa_csr_int_pa_int_test_set_t::s_get_width();

}

int cap_ppa_csr_int_pa_t::get_width() const {
    return cap_ppa_csr_int_pa_t::s_get_width();

}

int cap_ppa_csr_int_pe9_int_enable_clear_t::get_width() const {
    return cap_ppa_csr_int_pe9_int_enable_clear_t::s_get_width();

}

int cap_ppa_csr_int_pe9_int_test_set_t::get_width() const {
    return cap_ppa_csr_int_pe9_int_test_set_t::s_get_width();

}

int cap_ppa_csr_int_pe9_t::get_width() const {
    return cap_ppa_csr_int_pe9_t::s_get_width();

}

int cap_ppa_csr_int_fifo2_int_enable_clear_t::get_width() const {
    return cap_ppa_csr_int_fifo2_int_enable_clear_t::s_get_width();

}

int cap_ppa_csr_int_fifo2_int_test_set_t::get_width() const {
    return cap_ppa_csr_int_fifo2_int_test_set_t::s_get_width();

}

int cap_ppa_csr_int_fifo2_t::get_width() const {
    return cap_ppa_csr_int_fifo2_t::s_get_width();

}

int cap_ppa_csr_int_fifo1_int_enable_clear_t::get_width() const {
    return cap_ppa_csr_int_fifo1_int_enable_clear_t::s_get_width();

}

int cap_ppa_csr_int_fifo1_int_test_set_t::get_width() const {
    return cap_ppa_csr_int_fifo1_int_test_set_t::s_get_width();

}

int cap_ppa_csr_int_fifo1_t::get_width() const {
    return cap_ppa_csr_int_fifo1_t::s_get_width();

}

int cap_ppa_csr_int_ecc_int_enable_clear_t::get_width() const {
    return cap_ppa_csr_int_ecc_int_enable_clear_t::s_get_width();

}

int cap_ppa_csr_int_ecc_int_test_set_t::get_width() const {
    return cap_ppa_csr_int_ecc_int_test_set_t::s_get_width();

}

int cap_ppa_csr_int_ecc_t::get_width() const {
    return cap_ppa_csr_int_ecc_t::s_get_width();

}

int cap_ppa_csr_int_bndl1_int_enable_clear_t::get_width() const {
    return cap_ppa_csr_int_bndl1_int_enable_clear_t::s_get_width();

}

int cap_ppa_csr_int_bndl0_intreg_t::get_width() const {
    return cap_ppa_csr_int_bndl0_intreg_t::s_get_width();

}

int cap_ppa_csr_int_bndl0_t::get_width() const {
    return cap_ppa_csr_int_bndl0_t::s_get_width();

}

int cap_ppa_csr_intreg_status_t::get_width() const {
    return cap_ppa_csr_intreg_status_t::s_get_width();

}

int cap_ppa_csr_int_groups_int_enable_rw_reg_t::get_width() const {
    return cap_ppa_csr_int_groups_int_enable_rw_reg_t::s_get_width();

}

int cap_ppa_csr_intgrp_status_t::get_width() const {
    return cap_ppa_csr_intgrp_status_t::s_get_width();

}

int cap_ppa_csr_dhs_dbg_mem_entry_t::get_width() const {
    return cap_ppa_csr_dhs_dbg_mem_entry_t::s_get_width();

}

int cap_ppa_csr_dhs_dbg_mem_t::get_width() const {
    return cap_ppa_csr_dhs_dbg_mem_t::s_get_width();

}

int cap_ppa_csr_dhs_sw_phv_mem_entry_t::get_width() const {
    return cap_ppa_csr_dhs_sw_phv_mem_entry_t::s_get_width();

}

int cap_ppa_csr_dhs_sw_phv_mem_t::get_width() const {
    return cap_ppa_csr_dhs_sw_phv_mem_t::s_get_width();

}

int cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::get_width() const {
    return cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::s_get_width();

}

int cap_ppa_csr_dhs_bndl1_state_lkp_sram_t::get_width() const {
    return cap_ppa_csr_dhs_bndl1_state_lkp_sram_t::s_get_width();

}

int cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t::get_width() const {
    return cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t::s_get_width();

}

int cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_t::get_width() const {
    return cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_t::s_get_width();

}

int cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::get_width() const {
    return cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::s_get_width();

}

int cap_ppa_csr_dhs_bndl1_state_lkp_tcam_t::get_width() const {
    return cap_ppa_csr_dhs_bndl1_state_lkp_tcam_t::s_get_width();

}

int cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::get_width() const {
    return cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::s_get_width();

}

int cap_ppa_csr_dhs_bndl0_state_lkp_sram_t::get_width() const {
    return cap_ppa_csr_dhs_bndl0_state_lkp_sram_t::s_get_width();

}

int cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t::get_width() const {
    return cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t::s_get_width();

}

int cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_t::get_width() const {
    return cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_t::s_get_width();

}

int cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::get_width() const {
    return cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::s_get_width();

}

int cap_ppa_csr_dhs_bndl0_state_lkp_tcam_t::get_width() const {
    return cap_ppa_csr_dhs_bndl0_state_lkp_tcam_t::s_get_width();

}

int cap_ppa_csr_CNT_preparse_t::get_width() const {
    return cap_ppa_csr_CNT_preparse_t::s_get_width();

}

int cap_ppa_csr_sta_preparse_t::get_width() const {
    return cap_ppa_csr_sta_preparse_t::s_get_width();

}

int cap_ppa_csr_cfg_preparse_t::get_width() const {
    return cap_ppa_csr_cfg_preparse_t::s_get_width();

}

int cap_ppa_csr_cfg_spare_dbg_t::get_width() const {
    return cap_ppa_csr_cfg_spare_dbg_t::s_get_width();

}

int cap_ppa_csr_cfg_spare_t::get_width() const {
    return cap_ppa_csr_cfg_spare_t::s_get_width();

}

int cap_ppa_csr_cfg_debug_port_t::get_width() const {
    return cap_ppa_csr_cfg_debug_port_t::s_get_width();

}

int cap_ppa_csr_cfg_debug_ctrl_t::get_width() const {
    return cap_ppa_csr_cfg_debug_ctrl_t::s_get_width();

}

int cap_ppa_csr_sta_pe_alloc_t::get_width() const {
    return cap_ppa_csr_sta_pe_alloc_t::s_get_width();

}

int cap_ppa_csr_sta_bndl1_t::get_width() const {
    return cap_ppa_csr_sta_bndl1_t::s_get_width();

}

int cap_ppa_csr_sta_bndl0_t::get_width() const {
    return cap_ppa_csr_sta_bndl0_t::s_get_width();

}

int cap_ppa_csr_sta_fifo_t::get_width() const {
    return cap_ppa_csr_sta_fifo_t::s_get_width();

}

int cap_ppa_csr_sta_bndl1_state_lkp_t::get_width() const {
    return cap_ppa_csr_sta_bndl1_state_lkp_t::s_get_width();

}

int cap_ppa_csr_sta_bndl0_state_lkp_t::get_width() const {
    return cap_ppa_csr_sta_bndl0_state_lkp_t::s_get_width();

}

int cap_ppa_csr_sta_pe9_t::get_width() const {
    return cap_ppa_csr_sta_pe9_t::s_get_width();

}

int cap_ppa_csr_sta_pe8_t::get_width() const {
    return cap_ppa_csr_sta_pe8_t::s_get_width();

}

int cap_ppa_csr_sta_pe7_t::get_width() const {
    return cap_ppa_csr_sta_pe7_t::s_get_width();

}

int cap_ppa_csr_sta_pe6_t::get_width() const {
    return cap_ppa_csr_sta_pe6_t::s_get_width();

}

int cap_ppa_csr_sta_pe5_t::get_width() const {
    return cap_ppa_csr_sta_pe5_t::s_get_width();

}

int cap_ppa_csr_sta_pe4_t::get_width() const {
    return cap_ppa_csr_sta_pe4_t::s_get_width();

}

int cap_ppa_csr_sta_pe3_t::get_width() const {
    return cap_ppa_csr_sta_pe3_t::s_get_width();

}

int cap_ppa_csr_sta_pe2_t::get_width() const {
    return cap_ppa_csr_sta_pe2_t::s_get_width();

}

int cap_ppa_csr_sta_pe1_t::get_width() const {
    return cap_ppa_csr_sta_pe1_t::s_get_width();

}

int cap_ppa_csr_sta_pe0_t::get_width() const {
    return cap_ppa_csr_sta_pe0_t::s_get_width();

}

int cap_ppa_csr_sta_chkr_seq_id_t::get_width() const {
    return cap_ppa_csr_sta_chkr_seq_id_t::s_get_width();

}

int cap_ppa_csr_sta_csum4_t::get_width() const {
    return cap_ppa_csr_sta_csum4_t::s_get_width();

}

int cap_ppa_csr_sta_csum3_t::get_width() const {
    return cap_ppa_csr_sta_csum3_t::s_get_width();

}

int cap_ppa_csr_sta_csum2_t::get_width() const {
    return cap_ppa_csr_sta_csum2_t::s_get_width();

}

int cap_ppa_csr_sta_csum1_t::get_width() const {
    return cap_ppa_csr_sta_csum1_t::s_get_width();

}

int cap_ppa_csr_sta_csum0_t::get_width() const {
    return cap_ppa_csr_sta_csum0_t::s_get_width();

}

int cap_ppa_csr_sta_reorder_t::get_width() const {
    return cap_ppa_csr_sta_reorder_t::s_get_width();

}

int cap_ppa_csr_sta_reorder_phv_not_sop_err_t::get_width() const {
    return cap_ppa_csr_sta_reorder_phv_not_sop_err_t::s_get_width();

}

int cap_ppa_csr_sta_sw_phv_mem_t::get_width() const {
    return cap_ppa_csr_sta_sw_phv_mem_t::s_get_width();

}

int cap_ppa_csr_cfg_sw_phv_mem_t::get_width() const {
    return cap_ppa_csr_cfg_sw_phv_mem_t::s_get_width();

}

int cap_ppa_csr_sta_sw_phv_state_t::get_width() const {
    return cap_ppa_csr_sta_sw_phv_state_t::s_get_width();

}

int cap_ppa_csr_cfg_sw_phv_config_t::get_width() const {
    return cap_ppa_csr_cfg_sw_phv_config_t::s_get_width();

}

int cap_ppa_csr_cfg_sw_phv_control_t::get_width() const {
    return cap_ppa_csr_cfg_sw_phv_control_t::s_get_width();

}

int cap_ppa_csr_cfg_sw_phv_global_t::get_width() const {
    return cap_ppa_csr_cfg_sw_phv_global_t::s_get_width();

}

int cap_ppa_csr_sta_pe9_phv_mem_t::get_width() const {
    return cap_ppa_csr_sta_pe9_phv_mem_t::s_get_width();

}

int cap_ppa_csr_cfg_pe9_phv_mem_t::get_width() const {
    return cap_ppa_csr_cfg_pe9_phv_mem_t::s_get_width();

}

int cap_ppa_csr_sta_pe8_phv_mem_t::get_width() const {
    return cap_ppa_csr_sta_pe8_phv_mem_t::s_get_width();

}

int cap_ppa_csr_cfg_pe8_phv_mem_t::get_width() const {
    return cap_ppa_csr_cfg_pe8_phv_mem_t::s_get_width();

}

int cap_ppa_csr_sta_pe7_phv_mem_t::get_width() const {
    return cap_ppa_csr_sta_pe7_phv_mem_t::s_get_width();

}

int cap_ppa_csr_cfg_pe7_phv_mem_t::get_width() const {
    return cap_ppa_csr_cfg_pe7_phv_mem_t::s_get_width();

}

int cap_ppa_csr_sta_pe6_phv_mem_t::get_width() const {
    return cap_ppa_csr_sta_pe6_phv_mem_t::s_get_width();

}

int cap_ppa_csr_cfg_pe6_phv_mem_t::get_width() const {
    return cap_ppa_csr_cfg_pe6_phv_mem_t::s_get_width();

}

int cap_ppa_csr_sta_pe5_phv_mem_t::get_width() const {
    return cap_ppa_csr_sta_pe5_phv_mem_t::s_get_width();

}

int cap_ppa_csr_cfg_pe5_phv_mem_t::get_width() const {
    return cap_ppa_csr_cfg_pe5_phv_mem_t::s_get_width();

}

int cap_ppa_csr_sta_pe4_phv_mem_t::get_width() const {
    return cap_ppa_csr_sta_pe4_phv_mem_t::s_get_width();

}

int cap_ppa_csr_cfg_pe4_phv_mem_t::get_width() const {
    return cap_ppa_csr_cfg_pe4_phv_mem_t::s_get_width();

}

int cap_ppa_csr_sta_pe3_phv_mem_t::get_width() const {
    return cap_ppa_csr_sta_pe3_phv_mem_t::s_get_width();

}

int cap_ppa_csr_cfg_pe3_phv_mem_t::get_width() const {
    return cap_ppa_csr_cfg_pe3_phv_mem_t::s_get_width();

}

int cap_ppa_csr_sta_pe2_phv_mem_t::get_width() const {
    return cap_ppa_csr_sta_pe2_phv_mem_t::s_get_width();

}

int cap_ppa_csr_cfg_pe2_phv_mem_t::get_width() const {
    return cap_ppa_csr_cfg_pe2_phv_mem_t::s_get_width();

}

int cap_ppa_csr_sta_pe1_phv_mem_t::get_width() const {
    return cap_ppa_csr_sta_pe1_phv_mem_t::s_get_width();

}

int cap_ppa_csr_cfg_pe1_phv_mem_t::get_width() const {
    return cap_ppa_csr_cfg_pe1_phv_mem_t::s_get_width();

}

int cap_ppa_csr_sta_pe0_phv_mem_t::get_width() const {
    return cap_ppa_csr_sta_pe0_phv_mem_t::s_get_width();

}

int cap_ppa_csr_cfg_pe0_phv_mem_t::get_width() const {
    return cap_ppa_csr_cfg_pe0_phv_mem_t::s_get_width();

}

int cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::get_width() const {
    return cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::s_get_width();

}

int cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t::get_width() const {
    return cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t::s_get_width();

}

int cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::get_width() const {
    return cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::s_get_width();

}

int cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t::get_width() const {
    return cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t::s_get_width();

}

int cap_ppa_csr_sta_outq_ohi_mem_t::get_width() const {
    return cap_ppa_csr_sta_outq_ohi_mem_t::s_get_width();

}

int cap_ppa_csr_cfg_outq_ohi_mem_t::get_width() const {
    return cap_ppa_csr_cfg_outq_ohi_mem_t::s_get_width();

}

int cap_ppa_csr_sta_outq_phv_mem_t::get_width() const {
    return cap_ppa_csr_sta_outq_phv_mem_t::s_get_width();

}

int cap_ppa_csr_cfg_outq_phv_mem_t::get_width() const {
    return cap_ppa_csr_cfg_outq_phv_mem_t::s_get_width();

}

int cap_ppa_csr_sta_bndl1_inq_mem_t::get_width() const {
    return cap_ppa_csr_sta_bndl1_inq_mem_t::s_get_width();

}

int cap_ppa_csr_cfg_bndl1_inq_mem_t::get_width() const {
    return cap_ppa_csr_cfg_bndl1_inq_mem_t::s_get_width();

}

int cap_ppa_csr_sta_bndl0_inq_mem_t::get_width() const {
    return cap_ppa_csr_sta_bndl0_inq_mem_t::s_get_width();

}

int cap_ppa_csr_cfg_bndl0_inq_mem_t::get_width() const {
    return cap_ppa_csr_cfg_bndl0_inq_mem_t::s_get_width();

}

int cap_ppa_csr_sta_bndl1_state_lkp_sram_t::get_width() const {
    return cap_ppa_csr_sta_bndl1_state_lkp_sram_t::s_get_width();

}

int cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::get_width() const {
    return cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::s_get_width();

}

int cap_ppa_csr_sta_bndl0_state_lkp_sram_t::get_width() const {
    return cap_ppa_csr_sta_bndl0_state_lkp_sram_t::s_get_width();

}

int cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::get_width() const {
    return cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::s_get_width();

}

int cap_ppa_csr_sta_pkt_mem_t::get_width() const {
    return cap_ppa_csr_sta_pkt_mem_t::s_get_width();

}

int cap_ppa_csr_cfg_pkt_mem_t::get_width() const {
    return cap_ppa_csr_cfg_pkt_mem_t::s_get_width();

}

int cap_ppa_csr_csr_intr_t::get_width() const {
    return cap_ppa_csr_csr_intr_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe9_phv_out_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe9_phv_out_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe9_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe9_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe8_phv_out_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe8_phv_out_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe8_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe8_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe7_phv_out_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe7_phv_out_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe7_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe7_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe6_phv_out_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe6_phv_out_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe6_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe6_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe5_phv_out_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe5_phv_out_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe5_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe5_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe4_phv_out_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe4_phv_out_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe4_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe4_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe3_phv_out_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe3_phv_out_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe3_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe3_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe2_phv_out_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe2_phv_out_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe2_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe2_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe1_phv_out_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe1_phv_out_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe1_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe1_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe0_phv_out_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe0_phv_out_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe0_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe0_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_ohi_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_ohi_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_sw_phv_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_sw_phv_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_ma_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_ma_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_dp_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_dp_t::s_get_width();

}

int cap_ppa_csr_CNT_ppa_pb_t::get_width() const {
    return cap_ppa_csr_CNT_ppa_pb_t::s_get_width();

}

int cap_ppa_csr_cfg_align_chk_profile_t::get_width() const {
    return cap_ppa_csr_cfg_align_chk_profile_t::s_get_width();

}

int cap_ppa_csr_cfg_len_chk_profile_t::get_width() const {
    return cap_ppa_csr_cfg_len_chk_profile_t::s_get_width();

}

int cap_ppa_csr_cfg_csum_phdr_profile_t::get_width() const {
    return cap_ppa_csr_cfg_csum_phdr_profile_t::s_get_width();

}

int cap_ppa_csr_cfg_csum_profile_t::get_width() const {
    return cap_ppa_csr_cfg_csum_profile_t::s_get_width();

}

int cap_ppa_csr_cfg_crc_mask_profile_t::get_width() const {
    return cap_ppa_csr_cfg_crc_mask_profile_t::s_get_width();

}

int cap_ppa_csr_cfg_crc_profile_t::get_width() const {
    return cap_ppa_csr_cfg_crc_profile_t::s_get_width();

}

int cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::get_width() const {
    return cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::s_get_width();

}

int cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::get_width() const {
    return cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::s_get_width();

}

int cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t::get_width() const {
    return cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t::s_get_width();

}

int cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::get_width() const {
    return cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::s_get_width();

}

int cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::get_width() const {
    return cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::s_get_width();

}

int cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t::get_width() const {
    return cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t::s_get_width();

}

int cap_ppa_csr_cfg_init_profile_t::get_width() const {
    return cap_ppa_csr_cfg_init_profile_t::s_get_width();

}

int cap_ppa_csr_cfg_ctrl_thresh_t::get_width() const {
    return cap_ppa_csr_cfg_ctrl_thresh_t::s_get_width();

}

int cap_ppa_csr_cfg_ctrl_t::get_width() const {
    return cap_ppa_csr_cfg_ctrl_t::s_get_width();

}

int cap_ppa_csr_rdintr_t::get_width() const {
    return cap_ppa_csr_rdintr_t::s_get_width();

}

int cap_ppa_csr_base_t::get_width() const {
    return cap_ppa_csr_base_t::s_get_width();

}

int cap_ppa_csr_t::get_width() const {
    return cap_ppa_csr_t::s_get_width();

}

int cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // ecc_uncorrectable_enable
    _count += 1; // ecc_correctable_enable
    _count += 1; // phv_invalid_sram_enable
    _count += 1; // phv_invalid_data_enable
    _count += 1; // phv_done0_enable
    _count += 1; // phv_done1_enable
    _count += 1; // phv_done2_enable
    _count += 1; // phv_done3_enable
    _count += 1; // phv_done4_enable
    _count += 1; // phv_done5_enable
    _count += 1; // phv_done6_enable
    _count += 1; // phv_done7_enable
    return _count;
}

int cap_ppa_csr_int_sw_phv_mem_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // ecc_uncorrectable_interrupt
    _count += 1; // ecc_correctable_interrupt
    _count += 1; // phv_invalid_sram_interrupt
    _count += 1; // phv_invalid_data_interrupt
    _count += 1; // phv_done0_interrupt
    _count += 1; // phv_done1_interrupt
    _count += 1; // phv_done2_interrupt
    _count += 1; // phv_done3_interrupt
    _count += 1; // phv_done4_interrupt
    _count += 1; // phv_done5_interrupt
    _count += 1; // phv_done6_interrupt
    _count += 1; // phv_done7_interrupt
    return _count;
}

int cap_ppa_csr_int_sw_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += cap_ppa_csr_int_sw_phv_mem_int_test_set_t::s_get_width(); // intreg
    _count += cap_ppa_csr_int_sw_phv_mem_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_ppa_csr_int_intf_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // pb_err_enable
    _count += 1; // pb_sop_err_enable
    _count += 1; // pb_eop_err_enable
    _count += 1; // dp_err_enable
    _count += 1; // dp_sop_err_enable
    _count += 1; // dp_eop_err_enable
    _count += 1; // ohi_err_enable
    _count += 1; // ohi_sop_err_enable
    _count += 1; // ohi_eop_err_enable
    _count += 1; // sw_phv_err_enable
    _count += 1; // sw_phv_sop_err_enable
    _count += 1; // sw_phv_eop_err_enable
    _count += 1; // ma_err_enable
    _count += 1; // ma_sop_err_enable
    _count += 1; // ma_eop_err_enable
    return _count;
}

int cap_ppa_csr_int_intf_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // pb_err_interrupt
    _count += 1; // pb_sop_err_interrupt
    _count += 1; // pb_eop_err_interrupt
    _count += 1; // dp_err_interrupt
    _count += 1; // dp_sop_err_interrupt
    _count += 1; // dp_eop_err_interrupt
    _count += 1; // ohi_err_interrupt
    _count += 1; // ohi_sop_err_interrupt
    _count += 1; // ohi_eop_err_interrupt
    _count += 1; // sw_phv_err_interrupt
    _count += 1; // sw_phv_sop_err_interrupt
    _count += 1; // sw_phv_eop_err_interrupt
    _count += 1; // ma_err_interrupt
    _count += 1; // ma_sop_err_interrupt
    _count += 1; // ma_eop_err_interrupt
    return _count;
}

int cap_ppa_csr_int_intf_t::s_get_width() {
    int _count = 0;

    _count += cap_ppa_csr_int_intf_int_test_set_t::s_get_width(); // intreg
    _count += cap_ppa_csr_int_intf_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_ppa_csr_int_intf_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_ppa_csr_int_intf_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_ppa_csr_int_pa_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // reorder_phv_not_sop_enable
    _count += 1; // csum0_not_enuf_bytes_enable
    _count += 1; // csum0_start_more_than_end_offset_enable
    _count += 1; // csum1_not_enuf_bytes_enable
    _count += 1; // csum1_start_more_than_end_offset_enable
    _count += 1; // csum2_not_enuf_bytes_enable
    _count += 1; // csum2_start_more_than_end_offset_enable
    _count += 1; // csum3_not_enuf_bytes_enable
    _count += 1; // csum3_start_more_than_end_offset_enable
    _count += 1; // csum4_not_enuf_bytes_enable
    _count += 1; // csum4_start_more_than_end_offset_enable
    _count += 1; // crc_not_enuf_bytes_enable
    _count += 1; // crc_start_more_than_end_offset_enable
    _count += 1; // chkr_phv_single_flit_enable
    _count += 1; // chkr_phv_not_sop_enable
    _count += 1; // chkr_pkt_not_sop_enable
    _count += 1; // chkr_seq_id_enable
    _count += 1; // preparse_line0_not_sop_enable
    _count += 1; // preparse_dff_not_sop_enable
    _count += 1; // preparse_dff_ovflow_enable
    _count += 1; // preparse_eff_ovflow_enable
    return _count;
}

int cap_ppa_csr_int_pa_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // reorder_phv_not_sop_interrupt
    _count += 1; // csum0_not_enuf_bytes_interrupt
    _count += 1; // csum0_start_more_than_end_offset_interrupt
    _count += 1; // csum1_not_enuf_bytes_interrupt
    _count += 1; // csum1_start_more_than_end_offset_interrupt
    _count += 1; // csum2_not_enuf_bytes_interrupt
    _count += 1; // csum2_start_more_than_end_offset_interrupt
    _count += 1; // csum3_not_enuf_bytes_interrupt
    _count += 1; // csum3_start_more_than_end_offset_interrupt
    _count += 1; // csum4_not_enuf_bytes_interrupt
    _count += 1; // csum4_start_more_than_end_offset_interrupt
    _count += 1; // crc_not_enuf_bytes_interrupt
    _count += 1; // crc_start_more_than_end_offset_interrupt
    _count += 1; // chkr_phv_single_flit_interrupt
    _count += 1; // chkr_phv_not_sop_interrupt
    _count += 1; // chkr_pkt_not_sop_interrupt
    _count += 1; // chkr_seq_id_interrupt
    _count += 1; // preparse_line0_not_sop_interrupt
    _count += 1; // preparse_dff_not_sop_interrupt
    _count += 1; // preparse_dff_ovflow_interrupt
    _count += 1; // preparse_eff_ovflow_interrupt
    return _count;
}

int cap_ppa_csr_int_pa_t::s_get_width() {
    int _count = 0;

    _count += cap_ppa_csr_int_pa_int_test_set_t::s_get_width(); // intreg
    _count += cap_ppa_csr_int_pa_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_ppa_csr_int_pa_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_ppa_csr_int_pa_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_ppa_csr_int_pe9_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // qctl_skid_depth_not_zero_enable
    _count += 1; // qctl_not_sop_after_pkt_release_enable
    _count += 1; // unexpected_non_sop_enable
    _count += 1; // exceed_phv_flit_cnt_enable
    _count += 1; // exceed_parse_loop_cnt_enable
    _count += 1; // offset_out_of_range_enable
    _count += 1; // pkt_size_chk_enable
    _count += 1; // offset_jump_chk_enable
    _count += 1; // d1_not_valid_enable
    _count += 1; // phv_upr_idx_less_enable
    return _count;
}

int cap_ppa_csr_int_pe9_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // qctl_skid_depth_not_zero_interrupt
    _count += 1; // qctl_not_sop_after_pkt_release_interrupt
    _count += 1; // unexpected_non_sop_interrupt
    _count += 1; // exceed_phv_flit_cnt_interrupt
    _count += 1; // exceed_parse_loop_cnt_interrupt
    _count += 1; // offset_out_of_range_interrupt
    _count += 1; // pkt_size_chk_interrupt
    _count += 1; // offset_jump_chk_interrupt
    _count += 1; // d1_not_valid_interrupt
    _count += 1; // phv_upr_idx_less_interrupt
    return _count;
}

int cap_ppa_csr_int_pe9_t::s_get_width() {
    int _count = 0;

    _count += cap_ppa_csr_int_pe9_int_test_set_t::s_get_width(); // intreg
    _count += cap_ppa_csr_int_pe9_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_ppa_csr_int_pe9_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_ppa_csr_int_pe9_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_ppa_csr_int_fifo2_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // dp_if_ff_ovflow_enable
    _count += 1; // ohi_if_ff_ovflow_enable
    _count += 1; // ma_if_ff_ovflow_enable
    _count += 1; // pb_if_ff_ovflow_enable
    _count += 1; // pkt_mtu_ff_ovflow_enable
    _count += 1; // outphv_ff_ovflow_enable
    _count += 1; // outohi_ff_ovflow_enable
    _count += 1; // chk_ff_ovflow_enable
    return _count;
}

int cap_ppa_csr_int_fifo2_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // dp_if_ff_ovflow_interrupt
    _count += 1; // ohi_if_ff_ovflow_interrupt
    _count += 1; // ma_if_ff_ovflow_interrupt
    _count += 1; // pb_if_ff_ovflow_interrupt
    _count += 1; // pkt_mtu_ff_ovflow_interrupt
    _count += 1; // outphv_ff_ovflow_interrupt
    _count += 1; // outohi_ff_ovflow_interrupt
    _count += 1; // chk_ff_ovflow_interrupt
    return _count;
}

int cap_ppa_csr_int_fifo2_t::s_get_width() {
    int _count = 0;

    _count += cap_ppa_csr_int_fifo2_int_test_set_t::s_get_width(); // intreg
    _count += cap_ppa_csr_int_fifo2_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_ppa_csr_int_fifo2_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_ppa_csr_int_fifo2_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_ppa_csr_int_fifo1_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // pe0_qctl_ff_ovflow_enable
    _count += 1; // pe1_qctl_ff_ovflow_enable
    _count += 1; // pe2_qctl_ff_ovflow_enable
    _count += 1; // pe3_qctl_ff_ovflow_enable
    _count += 1; // pe4_qctl_ff_ovflow_enable
    _count += 1; // pe5_qctl_ff_ovflow_enable
    _count += 1; // pe6_qctl_ff_ovflow_enable
    _count += 1; // pe7_qctl_ff_ovflow_enable
    _count += 1; // pe8_qctl_ff_ovflow_enable
    _count += 1; // pe9_qctl_ff_ovflow_enable
    _count += 1; // pe0_phv_ff_ovflow_enable
    _count += 1; // pe1_phv_ff_ovflow_enable
    _count += 1; // pe2_phv_ff_ovflow_enable
    _count += 1; // pe3_phv_ff_ovflow_enable
    _count += 1; // pe4_phv_ff_ovflow_enable
    _count += 1; // pe5_phv_ff_ovflow_enable
    _count += 1; // pe6_phv_ff_ovflow_enable
    _count += 1; // pe7_phv_ff_ovflow_enable
    _count += 1; // pe8_phv_ff_ovflow_enable
    _count += 1; // pe9_phv_ff_ovflow_enable
    _count += 1; // pe0_ohi_ff_ovflow_enable
    _count += 1; // pe1_ohi_ff_ovflow_enable
    _count += 1; // pe2_ohi_ff_ovflow_enable
    _count += 1; // pe3_ohi_ff_ovflow_enable
    _count += 1; // pe4_ohi_ff_ovflow_enable
    _count += 1; // pe5_ohi_ff_ovflow_enable
    _count += 1; // pe6_ohi_ff_ovflow_enable
    _count += 1; // pe7_ohi_ff_ovflow_enable
    _count += 1; // pe8_ohi_ff_ovflow_enable
    _count += 1; // pe9_ohi_ff_ovflow_enable
    return _count;
}

int cap_ppa_csr_int_fifo1_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // pe0_qctl_ff_ovflow_interrupt
    _count += 1; // pe1_qctl_ff_ovflow_interrupt
    _count += 1; // pe2_qctl_ff_ovflow_interrupt
    _count += 1; // pe3_qctl_ff_ovflow_interrupt
    _count += 1; // pe4_qctl_ff_ovflow_interrupt
    _count += 1; // pe5_qctl_ff_ovflow_interrupt
    _count += 1; // pe6_qctl_ff_ovflow_interrupt
    _count += 1; // pe7_qctl_ff_ovflow_interrupt
    _count += 1; // pe8_qctl_ff_ovflow_interrupt
    _count += 1; // pe9_qctl_ff_ovflow_interrupt
    _count += 1; // pe0_phv_ff_ovflow_interrupt
    _count += 1; // pe1_phv_ff_ovflow_interrupt
    _count += 1; // pe2_phv_ff_ovflow_interrupt
    _count += 1; // pe3_phv_ff_ovflow_interrupt
    _count += 1; // pe4_phv_ff_ovflow_interrupt
    _count += 1; // pe5_phv_ff_ovflow_interrupt
    _count += 1; // pe6_phv_ff_ovflow_interrupt
    _count += 1; // pe7_phv_ff_ovflow_interrupt
    _count += 1; // pe8_phv_ff_ovflow_interrupt
    _count += 1; // pe9_phv_ff_ovflow_interrupt
    _count += 1; // pe0_ohi_ff_ovflow_interrupt
    _count += 1; // pe1_ohi_ff_ovflow_interrupt
    _count += 1; // pe2_ohi_ff_ovflow_interrupt
    _count += 1; // pe3_ohi_ff_ovflow_interrupt
    _count += 1; // pe4_ohi_ff_ovflow_interrupt
    _count += 1; // pe5_ohi_ff_ovflow_interrupt
    _count += 1; // pe6_ohi_ff_ovflow_interrupt
    _count += 1; // pe7_ohi_ff_ovflow_interrupt
    _count += 1; // pe8_ohi_ff_ovflow_interrupt
    _count += 1; // pe9_ohi_ff_ovflow_interrupt
    return _count;
}

int cap_ppa_csr_int_fifo1_t::s_get_width() {
    int _count = 0;

    _count += cap_ppa_csr_int_fifo1_int_test_set_t::s_get_width(); // intreg
    _count += cap_ppa_csr_int_fifo1_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_ppa_csr_int_fifo1_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_ppa_csr_int_fifo1_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_ppa_csr_int_ecc_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // pkt_mem_uncorrectable_enable
    _count += 1; // pkt_mem_correctable_enable
    _count += 1; // bndl0_state_lkp_sram_uncorrectable_enable
    _count += 1; // bndl0_state_lkp_sram_correctable_enable
    _count += 1; // bndl1_state_lkp_sram_uncorrectable_enable
    _count += 1; // bndl1_state_lkp_sram_correctable_enable
    return _count;
}

int cap_ppa_csr_int_ecc_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // pkt_mem_uncorrectable_interrupt
    _count += 1; // pkt_mem_correctable_interrupt
    _count += 1; // bndl0_state_lkp_sram_uncorrectable_interrupt
    _count += 1; // bndl0_state_lkp_sram_correctable_interrupt
    _count += 1; // bndl1_state_lkp_sram_uncorrectable_interrupt
    _count += 1; // bndl1_state_lkp_sram_correctable_interrupt
    return _count;
}

int cap_ppa_csr_int_ecc_t::s_get_width() {
    int _count = 0;

    _count += cap_ppa_csr_int_ecc_int_test_set_t::s_get_width(); // intreg
    _count += cap_ppa_csr_int_ecc_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_ppa_csr_int_ecc_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_ppa_csr_int_ecc_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_ppa_csr_int_bndl1_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // state_lkp_srch_hit_addr_range_err_enable
    _count += 1; // state_lkp_srch_miss_enable
    _count += 1; // state_lkp_srch_req_not_rdy_enable
    return _count;
}

int cap_ppa_csr_int_bndl0_intreg_t::s_get_width() {
    int _count = 0;

    _count += 1; // state_lkp_srch_hit_addr_range_err_interrupt
    _count += 1; // state_lkp_srch_miss_interrupt
    _count += 1; // state_lkp_srch_req_not_rdy_interrupt
    return _count;
}

int cap_ppa_csr_int_bndl0_t::s_get_width() {
    int _count = 0;

    _count += cap_ppa_csr_int_bndl0_intreg_t::s_get_width(); // intreg
    _count += cap_ppa_csr_int_bndl0_intreg_t::s_get_width(); // int_test_set
    _count += cap_ppa_csr_int_bndl1_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_ppa_csr_int_bndl1_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_ppa_csr_intreg_status_t::s_get_width() {
    int _count = 0;

    _count += 1; // int_bndl0_interrupt
    _count += 1; // int_bndl1_interrupt
    _count += 1; // int_ecc_interrupt
    _count += 1; // int_fifo1_interrupt
    _count += 1; // int_fifo2_interrupt
    _count += 1; // int_pe0_interrupt
    _count += 1; // int_pe1_interrupt
    _count += 1; // int_pe2_interrupt
    _count += 1; // int_pe3_interrupt
    _count += 1; // int_pe4_interrupt
    _count += 1; // int_pe5_interrupt
    _count += 1; // int_pe6_interrupt
    _count += 1; // int_pe7_interrupt
    _count += 1; // int_pe8_interrupt
    _count += 1; // int_pe9_interrupt
    _count += 1; // int_pa_interrupt
    _count += 1; // int_sw_phv_mem_interrupt
    _count += 1; // int_intf_interrupt
    return _count;
}

int cap_ppa_csr_int_groups_int_enable_rw_reg_t::s_get_width() {
    int _count = 0;

    _count += 1; // int_bndl0_enable
    _count += 1; // int_bndl1_enable
    _count += 1; // int_ecc_enable
    _count += 1; // int_fifo1_enable
    _count += 1; // int_fifo2_enable
    _count += 1; // int_pe0_enable
    _count += 1; // int_pe1_enable
    _count += 1; // int_pe2_enable
    _count += 1; // int_pe3_enable
    _count += 1; // int_pe4_enable
    _count += 1; // int_pe5_enable
    _count += 1; // int_pe6_enable
    _count += 1; // int_pe7_enable
    _count += 1; // int_pe8_enable
    _count += 1; // int_pe9_enable
    _count += 1; // int_pa_enable
    _count += 1; // int_sw_phv_mem_enable
    _count += 1; // int_intf_enable
    return _count;
}

int cap_ppa_csr_intgrp_status_t::s_get_width() {
    int _count = 0;

    _count += cap_ppa_csr_intreg_status_t::s_get_width(); // intreg
    _count += cap_ppa_csr_int_groups_int_enable_rw_reg_t::s_get_width(); // int_enable_rw_reg
    _count += cap_ppa_csr_intreg_status_t::s_get_width(); // int_rw_reg
    return _count;
}

int cap_ppa_csr_dhs_dbg_mem_entry_t::s_get_width() {
    int _count = 0;

    _count += 546; // data
    return _count;
}

int cap_ppa_csr_dhs_dbg_mem_t::s_get_width() {
    int _count = 0;

    _count += (cap_ppa_csr_dhs_dbg_mem_entry_t::s_get_width() * 256); // entry
    return _count;
}

int cap_ppa_csr_dhs_sw_phv_mem_entry_t::s_get_width() {
    int _count = 0;

    _count += 512; // data
    _count += 3; // spare
    _count += 20; // ecc
    return _count;
}

int cap_ppa_csr_dhs_sw_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += (cap_ppa_csr_dhs_sw_phv_mem_entry_t::s_get_width() * 16); // entry
    return _count;
}

int cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::s_get_width() {
    int _count = 0;

    _count += 763; // data
    _count += 1; // rsvd
    _count += 54; // ecc
    return _count;
}

int cap_ppa_csr_dhs_bndl1_state_lkp_sram_t::s_get_width() {
    int _count = 0;

    _count += (cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::s_get_width() * 288); // entry
    return _count;
}

int cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t::s_get_width() {
    int _count = 0;

    _count += 2; // cmd
    return _count;
}

int cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_t::s_get_width() {
    int _count = 0;

    _count += cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t::s_get_width(); // entry
    return _count;
}

int cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::s_get_width() {
    int _count = 0;

    _count += 64; // x_data
    _count += 64; // y_data
    _count += 1; // valid
    return _count;
}

int cap_ppa_csr_dhs_bndl1_state_lkp_tcam_t::s_get_width() {
    int _count = 0;

    _count += (cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::s_get_width() * 288); // entry
    return _count;
}

int cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::s_get_width() {
    int _count = 0;

    _count += 763; // data
    _count += 1; // rsvd
    _count += 54; // ecc
    return _count;
}

int cap_ppa_csr_dhs_bndl0_state_lkp_sram_t::s_get_width() {
    int _count = 0;

    _count += (cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::s_get_width() * 288); // entry
    return _count;
}

int cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t::s_get_width() {
    int _count = 0;

    _count += 2; // cmd
    return _count;
}

int cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_t::s_get_width() {
    int _count = 0;

    _count += cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t::s_get_width(); // entry
    return _count;
}

int cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::s_get_width() {
    int _count = 0;

    _count += 64; // x_data
    _count += 64; // y_data
    _count += 1; // valid
    return _count;
}

int cap_ppa_csr_dhs_bndl0_state_lkp_tcam_t::s_get_width() {
    int _count = 0;

    _count += (cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::s_get_width() * 288); // entry
    return _count;
}

int cap_ppa_csr_CNT_preparse_t::s_get_width() {
    int _count = 0;

    _count += 40; // dff_sop
    _count += 40; // dff_eop
    _count += 40; // eff
    return _count;
}

int cap_ppa_csr_sta_preparse_t::s_get_width() {
    int _count = 0;

    _count += 2; // state
    _count += 1; // dq_state
    _count += 1; // dff_empty
    _count += 1; // dff_full
    _count += 1; // eff_empty
    _count += 1; // eff_full
    return _count;
}

int cap_ppa_csr_cfg_preparse_t::s_get_width() {
    int _count = 0;

    _count += 15; // spare
    _count += 1; // bypass
    _count += 16; // tm_iport_enc_en
    _count += 16; // udp_dstport_roce_val0
    _count += 16; // udp_dstport_roce_val1
    _count += 16; // udp_dstport_vxlan_val0
    _count += 16; // udp_dstport_vxlan_val1
    _count += 8; // vxlan_flag_mask
    _count += 8; // vxlan_flag_val
    return _count;
}

int cap_ppa_csr_cfg_spare_dbg_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    return _count;
}

int cap_ppa_csr_cfg_spare_t::s_get_width() {
    int _count = 0;

    _count += 128; // fld0_inst
    _count += 128; // fld1_inst
    _count += 128; // fld2_inst
    _count += 128; // fld3_inst
    return _count;
}

int cap_ppa_csr_cfg_debug_port_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 2; // select
    return _count;
}

int cap_ppa_csr_cfg_debug_ctrl_t::s_get_width() {
    int _count = 0;

    _count += 1; // deq_stall_en
    _count += 3; // dbg_mem_sel
    _count += 4; // dbg_bndl_sel
    _count += 4; // dbg_bus_sel
    _count += 1; // eccbypass
    return _count;
}

int cap_ppa_csr_sta_pe_alloc_t::s_get_width() {
    int _count = 0;

    _count += 2; // state
    return _count;
}

int cap_ppa_csr_sta_bndl1_t::s_get_width() {
    int _count = 0;

    _count += 100; // pkt_queue
    return _count;
}

int cap_ppa_csr_sta_bndl0_t::s_get_width() {
    int _count = 0;

    _count += 100; // pkt_queue
    return _count;
}

int cap_ppa_csr_sta_fifo_t::s_get_width() {
    int _count = 0;

    _count += 1; // dp_if_ff_full
    _count += 1; // dp_if_ff_empty
    _count += 1; // ohi_if_ff_full
    _count += 1; // ohi_if_ff_empty
    _count += 1; // ma_if_ff_full
    _count += 1; // ma_if_ff_empty
    _count += 1; // pb_if_ff_full
    _count += 1; // pb_if_ff_empty
    _count += 1; // pkt_mtu_ff_full
    _count += 1; // pkt_mtu_ff_empty
    _count += 1; // outphv_ff_full
    _count += 1; // outphv_ff_empty
    _count += 1; // outohi_ff_full
    _count += 1; // outohi_ff_empty
    _count += 1; // chk_ff_full
    _count += 1; // chk_ff_empty
    _count += 1; // pe0_qctl_ff_full
    _count += 1; // pe0_qctl_ff_empty
    _count += 1; // pe0_phv_ff_full
    _count += 1; // pe0_phv_ff_empty
    _count += 1; // pe0_ohi_ff_full
    _count += 1; // pe0_ohi_ff_empty
    _count += 1; // pe1_qctl_ff_full
    _count += 1; // pe1_qctl_ff_empty
    _count += 1; // pe1_phv_ff_full
    _count += 1; // pe1_phv_ff_empty
    _count += 1; // pe1_ohi_ff_full
    _count += 1; // pe1_ohi_ff_empty
    _count += 1; // pe2_qctl_ff_full
    _count += 1; // pe2_qctl_ff_empty
    _count += 1; // pe2_phv_ff_full
    _count += 1; // pe2_phv_ff_empty
    _count += 1; // pe2_ohi_ff_full
    _count += 1; // pe2_ohi_ff_empty
    _count += 1; // pe3_qctl_ff_full
    _count += 1; // pe3_qctl_ff_empty
    _count += 1; // pe3_phv_ff_full
    _count += 1; // pe3_phv_ff_empty
    _count += 1; // pe3_ohi_ff_full
    _count += 1; // pe3_ohi_ff_empty
    _count += 1; // pe4_qctl_ff_full
    _count += 1; // pe4_qctl_ff_empty
    _count += 1; // pe4_phv_ff_full
    _count += 1; // pe4_phv_ff_empty
    _count += 1; // pe4_ohi_ff_full
    _count += 1; // pe4_ohi_ff_empty
    _count += 1; // pe5_qctl_ff_full
    _count += 1; // pe5_qctl_ff_empty
    _count += 1; // pe5_phv_ff_full
    _count += 1; // pe5_phv_ff_empty
    _count += 1; // pe5_ohi_ff_full
    _count += 1; // pe5_ohi_ff_empty
    _count += 1; // pe6_qctl_ff_full
    _count += 1; // pe6_qctl_ff_empty
    _count += 1; // pe6_phv_ff_full
    _count += 1; // pe6_phv_ff_empty
    _count += 1; // pe6_ohi_ff_full
    _count += 1; // pe6_ohi_ff_empty
    _count += 1; // pe7_qctl_ff_full
    _count += 1; // pe7_qctl_ff_empty
    _count += 1; // pe7_phv_ff_full
    _count += 1; // pe7_phv_ff_empty
    _count += 1; // pe7_ohi_ff_full
    _count += 1; // pe7_ohi_ff_empty
    _count += 1; // pe8_qctl_ff_full
    _count += 1; // pe8_qctl_ff_empty
    _count += 1; // pe8_phv_ff_full
    _count += 1; // pe8_phv_ff_empty
    _count += 1; // pe8_ohi_ff_full
    _count += 1; // pe8_ohi_ff_empty
    _count += 1; // pe9_qctl_ff_full
    _count += 1; // pe9_qctl_ff_empty
    _count += 1; // pe9_phv_ff_full
    _count += 1; // pe9_phv_ff_empty
    _count += 1; // pe9_ohi_ff_full
    _count += 1; // pe9_ohi_ff_empty
    return _count;
}

int cap_ppa_csr_sta_bndl1_state_lkp_t::s_get_width() {
    int _count = 0;

    _count += 3; // err_vec
    _count += 13; // err_log
    return _count;
}

int cap_ppa_csr_sta_bndl0_state_lkp_t::s_get_width() {
    int _count = 0;

    _count += 3; // err_vec
    _count += 13; // err_log
    return _count;
}

int cap_ppa_csr_sta_pe9_t::s_get_width() {
    int _count = 0;

    _count += 8; // err_vec
    _count += 105; // err_log
    _count += 4; // pe_state
    _count += 2; // phv_state
    _count += 1; // pkt_state
    return _count;
}

int cap_ppa_csr_sta_pe8_t::s_get_width() {
    int _count = 0;

    _count += 8; // err_vec
    _count += 105; // err_log
    _count += 4; // pe_state
    _count += 2; // phv_state
    _count += 1; // pkt_state
    return _count;
}

int cap_ppa_csr_sta_pe7_t::s_get_width() {
    int _count = 0;

    _count += 8; // err_vec
    _count += 105; // err_log
    _count += 4; // pe_state
    _count += 2; // phv_state
    _count += 1; // pkt_state
    return _count;
}

int cap_ppa_csr_sta_pe6_t::s_get_width() {
    int _count = 0;

    _count += 8; // err_vec
    _count += 105; // err_log
    _count += 4; // pe_state
    _count += 2; // phv_state
    _count += 1; // pkt_state
    return _count;
}

int cap_ppa_csr_sta_pe5_t::s_get_width() {
    int _count = 0;

    _count += 8; // err_vec
    _count += 105; // err_log
    _count += 4; // pe_state
    _count += 2; // phv_state
    _count += 1; // pkt_state
    return _count;
}

int cap_ppa_csr_sta_pe4_t::s_get_width() {
    int _count = 0;

    _count += 8; // err_vec
    _count += 105; // err_log
    _count += 4; // pe_state
    _count += 2; // phv_state
    _count += 1; // pkt_state
    return _count;
}

int cap_ppa_csr_sta_pe3_t::s_get_width() {
    int _count = 0;

    _count += 8; // err_vec
    _count += 105; // err_log
    _count += 4; // pe_state
    _count += 2; // phv_state
    _count += 1; // pkt_state
    return _count;
}

int cap_ppa_csr_sta_pe2_t::s_get_width() {
    int _count = 0;

    _count += 8; // err_vec
    _count += 105; // err_log
    _count += 4; // pe_state
    _count += 2; // phv_state
    _count += 1; // pkt_state
    return _count;
}

int cap_ppa_csr_sta_pe1_t::s_get_width() {
    int _count = 0;

    _count += 8; // err_vec
    _count += 105; // err_log
    _count += 4; // pe_state
    _count += 2; // phv_state
    _count += 1; // pkt_state
    return _count;
}

int cap_ppa_csr_sta_pe0_t::s_get_width() {
    int _count = 0;

    _count += 8; // err_vec
    _count += 105; // err_log
    _count += 4; // pe_state
    _count += 2; // phv_state
    _count += 1; // pkt_state
    return _count;
}

int cap_ppa_csr_sta_chkr_seq_id_t::s_get_width() {
    int _count = 0;

    _count += 7; // ohi
    _count += 7; // pkt
    return _count;
}

int cap_ppa_csr_sta_csum4_t::s_get_width() {
    int _count = 0;

    _count += 10; // err_vec
    return _count;
}

int cap_ppa_csr_sta_csum3_t::s_get_width() {
    int _count = 0;

    _count += 10; // err_vec
    return _count;
}

int cap_ppa_csr_sta_csum2_t::s_get_width() {
    int _count = 0;

    _count += 10; // err_vec
    return _count;
}

int cap_ppa_csr_sta_csum1_t::s_get_width() {
    int _count = 0;

    _count += 10; // err_vec
    return _count;
}

int cap_ppa_csr_sta_csum0_t::s_get_width() {
    int _count = 0;

    _count += 10; // err_vec
    return _count;
}

int cap_ppa_csr_sta_reorder_t::s_get_width() {
    int _count = 0;

    _count += 2; // seq_state
    _count += 7; // seq_num
    _count += 10; // ohi_srdy_vec
    _count += 10; // phv_srdy_vec
    _count += 10; // match_vec
    _count += 10; // eop_vec
    _count += 10; // drdy_vec_d
    return _count;
}

int cap_ppa_csr_sta_reorder_phv_not_sop_err_t::s_get_width() {
    int _count = 0;

    _count += 10; // match_vec
    _count += 10; // phv_sop_vec
    return _count;
}

int cap_ppa_csr_sta_sw_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // ecc_correctable
    _count += 1; // ecc_uncorrectable
    _count += 20; // ecc_syndrome
    _count += 4; // ecc_addr
    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_sw_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // ecc_detect
    _count += 1; // ecc_correct
    _count += 1; // ecc_bypass
    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_sw_phv_state_t::s_get_width() {
    int _count = 0;

    _count += 1; // done
    _count += 42; // current_insertion_period
    _count += 14; // current_counter
    _count += 4; // current_flit
    _count += 24; // current_qid
    return _count;
}

int cap_ppa_csr_cfg_sw_phv_config_t::s_get_width() {
    int _count = 0;

    _count += 4; // start_addr
    _count += 4; // num_flits
    _count += 42; // insertion_period_clocks
    _count += 14; // counter_max
    _count += 24; // qid_min
    _count += 24; // qid_max
    return _count;
}

int cap_ppa_csr_cfg_sw_phv_control_t::s_get_width() {
    int _count = 0;

    _count += 1; // start_enable
    _count += 1; // counter_repeat_enable
    _count += 1; // qid_repeat_enable
    _count += 1; // localtime_enable
    _count += 1; // frame_size_enable
    _count += 1; // packet_len_enable
    _count += 1; // qid_enable
    return _count;
}

int cap_ppa_csr_cfg_sw_phv_global_t::s_get_width() {
    int _count = 0;

    _count += 1; // start_enable
    _count += 1; // err_enable
    return _count;
}

int cap_ppa_csr_sta_pe9_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_pe9_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_pe8_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_pe8_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_pe7_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_pe7_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_pe6_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_pe6_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_pe5_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_pe5_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_pe4_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_pe4_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_pe3_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_pe3_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_pe2_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_pe2_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_pe1_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_pe1_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_pe0_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_pe0_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_outq_ohi_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_outq_ohi_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_outq_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_outq_phv_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_bndl1_inq_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_bndl1_inq_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_bndl0_inq_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_bndl0_inq_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_bndl1_state_lkp_sram_t::s_get_width() {
    int _count = 0;

    _count += 1; // correctable
    _count += 1; // uncorrectable
    _count += 54; // syndrome
    _count += 9; // addr
    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::s_get_width() {
    int _count = 0;

    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_ecc_bypass
    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_bndl0_state_lkp_sram_t::s_get_width() {
    int _count = 0;

    _count += 1; // correctable
    _count += 1; // uncorrectable
    _count += 54; // syndrome
    _count += 9; // addr
    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::s_get_width() {
    int _count = 0;

    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_ecc_bypass
    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_sta_pkt_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // correctable
    _count += 1; // uncorrectable
    _count += 20; // syndrome
    _count += 8; // addr
    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_ppa_csr_cfg_pkt_mem_t::s_get_width() {
    int _count = 0;

    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // bist_run
    return _count;
}

int cap_ppa_csr_csr_intr_t::s_get_width() {
    int _count = 0;

    _count += 1; // dowstream
    _count += 1; // dowstream_enable
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe9_phv_out_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe9_t::s_get_width() {
    int _count = 0;

    _count += 32; // pkt_release
    _count += 32; // ohi_out
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe8_phv_out_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe8_t::s_get_width() {
    int _count = 0;

    _count += 32; // pkt_release
    _count += 32; // ohi_out
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe7_phv_out_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe7_t::s_get_width() {
    int _count = 0;

    _count += 32; // pkt_release
    _count += 32; // ohi_out
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe6_phv_out_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe6_t::s_get_width() {
    int _count = 0;

    _count += 32; // pkt_release
    _count += 32; // ohi_out
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe5_phv_out_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe5_t::s_get_width() {
    int _count = 0;

    _count += 32; // pkt_release
    _count += 32; // ohi_out
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe4_phv_out_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe4_t::s_get_width() {
    int _count = 0;

    _count += 32; // pkt_release
    _count += 32; // ohi_out
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe3_phv_out_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe3_t::s_get_width() {
    int _count = 0;

    _count += 32; // pkt_release
    _count += 32; // ohi_out
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe2_phv_out_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe2_t::s_get_width() {
    int _count = 0;

    _count += 32; // pkt_release
    _count += 32; // ohi_out
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe1_phv_out_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe1_t::s_get_width() {
    int _count = 0;

    _count += 32; // pkt_release
    _count += 32; // ohi_out
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe0_phv_out_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe0_t::s_get_width() {
    int _count = 0;

    _count += 32; // pkt_release
    _count += 32; // ohi_out
    return _count;
}

int cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::s_get_width() {
    int _count = 0;

    _count += 32; // sop
    _count += 32; // eop
    return _count;
}

int cap_ppa_csr_CNT_ppa_ohi_t::s_get_width() {
    int _count = 0;

    _count += 40; // sop
    _count += 40; // eop
    _count += 8; // err
    _count += 8; // sop_err
    _count += 8; // eop_err
    return _count;
}

int cap_ppa_csr_CNT_ppa_sw_phv_t::s_get_width() {
    int _count = 0;

    _count += 16; // sop
    _count += 16; // eop
    _count += 8; // err
    _count += 8; // sop_err
    _count += 8; // eop_err
    return _count;
}

int cap_ppa_csr_CNT_ppa_ma_t::s_get_width() {
    int _count = 0;

    _count += 40; // sop
    _count += 40; // eop
    _count += 8; // err
    _count += 8; // sop_err
    _count += 8; // eop_err
    return _count;
}

int cap_ppa_csr_CNT_ppa_dp_t::s_get_width() {
    int _count = 0;

    _count += 40; // sop
    _count += 40; // eop
    _count += 8; // err
    _count += 8; // sop_err
    _count += 8; // eop_err
    return _count;
}

int cap_ppa_csr_CNT_ppa_pb_t::s_get_width() {
    int _count = 0;

    _count += 40; // sop
    _count += 40; // eop
    _count += 8; // err
    _count += 8; // sop_err
    _count += 8; // eop_err
    return _count;
}

int cap_ppa_csr_cfg_align_chk_profile_t::s_get_width() {
    int _count = 0;

    _count += 1; // addsub_start
    _count += 6; // start_adj
    _count += 8; // mod_log2
    return _count;
}

int cap_ppa_csr_cfg_len_chk_profile_t::s_get_width() {
    int _count = 0;

    _count += 14; // len_mask
    _count += 1; // len_shift_left
    _count += 3; // len_shift_val
    _count += 1; // addsub_start
    _count += 6; // start_adj
    return _count;
}

int cap_ppa_csr_cfg_csum_phdr_profile_t::s_get_width() {
    int _count = 0;

    _count += 1; // fld0_fld_en
    _count += 1; // fld0_fld_align
    _count += 6; // fld0_fld_start
    _count += 6; // fld0_fld_end
    _count += 1; // fld0_add_len
    _count += 1; // fld1_fld_en
    _count += 1; // fld1_fld_align
    _count += 6; // fld1_fld_start
    _count += 6; // fld1_fld_end
    _count += 1; // fld1_add_len
    _count += 1; // fld2_fld_en
    _count += 1; // fld2_fld_align
    _count += 6; // fld2_fld_start
    _count += 6; // fld2_fld_end
    _count += 1; // fld2_add_len
    _count += 1; // fld3_fld_en
    _count += 1; // fld3_fld_align
    _count += 6; // fld3_fld_start
    _count += 6; // fld3_fld_end
    _count += 1; // fld3_add_len
    return _count;
}

int cap_ppa_csr_cfg_csum_profile_t::s_get_width() {
    int _count = 0;

    _count += 1; // csum_loc_use_phdr_ohi
    _count += 1; // csum_8b
    _count += 4; // phv_csum_flit_num
    _count += 1; // end_eop
    _count += 14; // len_mask
    _count += 1; // len_shift_left
    _count += 3; // len_shift_val
    _count += 1; // addsub_start
    _count += 6; // start_adj
    _count += 1; // addsub_end
    _count += 6; // end_adj
    _count += 1; // addsub_phdr
    _count += 6; // phdr_adj
    _count += 1; // addsub_csum_loc
    _count += 6; // csum_loc_adj
    _count += 1; // align
    _count += 16; // add_val
    return _count;
}

int cap_ppa_csr_cfg_crc_mask_profile_t::s_get_width() {
    int _count = 0;

    _count += 1; // fld0_mask_en
    _count += 1; // fld0_use_ohi
    _count += 6; // fld0_start_adj
    _count += 6; // fld0_end_adj
    _count += 1; // fld0_fill
    _count += 1; // fld0_skip_first_nibble
    _count += 1; // fld1_mask_en
    _count += 1; // fld1_use_ohi
    _count += 6; // fld1_start_adj
    _count += 6; // fld1_end_adj
    _count += 1; // fld1_fill
    _count += 1; // fld1_skip_first_nibble
    _count += 1; // fld2_mask_en
    _count += 1; // fld2_use_ohi
    _count += 6; // fld2_start_adj
    _count += 6; // fld2_end_adj
    _count += 1; // fld2_fill
    _count += 1; // fld2_skip_first_nibble
    _count += 1; // fld3_mask_en
    _count += 1; // fld3_use_ohi
    _count += 6; // fld3_start_adj
    _count += 6; // fld3_end_adj
    _count += 1; // fld3_fill
    _count += 1; // fld3_skip_first_nibble
    _count += 1; // fld4_mask_en
    _count += 1; // fld4_use_ohi
    _count += 6; // fld4_start_adj
    _count += 6; // fld4_end_adj
    _count += 1; // fld4_fill
    _count += 1; // fld4_skip_first_nibble
    _count += 1; // fld5_mask_en
    _count += 1; // fld5_use_ohi
    _count += 6; // fld5_start_adj
    _count += 6; // fld5_end_adj
    _count += 1; // fld5_fill
    _count += 1; // fld5_skip_first_nibble
    return _count;
}

int cap_ppa_csr_cfg_crc_profile_t::s_get_width() {
    int _count = 0;

    _count += 14; // len_mask
    _count += 1; // len_shift_left
    _count += 3; // len_shift_val
    _count += 1; // addsub_start
    _count += 6; // start_adj
    _count += 1; // addsub_end
    _count += 6; // end_adj
    _count += 1; // addsub_mask
    _count += 6; // mask_adj
    _count += 1; // end_eop
    _count += 2; // mask_prof_sel
    return _count;
}

int cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::s_get_width() {
    int _count = 0;

    _count += 1; // hit
    _count += 9; // hit_addr
    return _count;
}

int cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::s_get_width() {
    int _count = 0;

    _count += 64; // key
    _count += 64; // mask
    return _count;
}

int cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t::s_get_width() {
    int _count = 0;

    _count += 1; // vld
    return _count;
}

int cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::s_get_width() {
    int _count = 0;

    _count += 1; // hit
    _count += 9; // hit_addr
    return _count;
}

int cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::s_get_width() {
    int _count = 0;

    _count += 64; // key
    _count += 64; // mask
    return _count;
}

int cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t::s_get_width() {
    int _count = 0;

    _count += 1; // vld
    return _count;
}

int cap_ppa_csr_cfg_init_profile_t::s_get_width() {
    int _count = 0;

    _count += 6; // curr_offset
    _count += 9; // state
    _count += 6; // lkp_val_pkt_idx0
    _count += 6; // lkp_val_pkt_idx1
    _count += 6; // lkp_val_pkt_idx2
    return _count;
}

int cap_ppa_csr_cfg_ctrl_thresh_t::s_get_width() {
    int _count = 0;

    _count += 8; // outphv_ff
    _count += 5; // phv_ff
    _count += 6; // chk_ff
    return _count;
}

int cap_ppa_csr_cfg_ctrl_t::s_get_width() {
    int _count = 0;

    _count += 10; // pe_enable
    _count += 9; // parse_loop_cnt
    _count += 3; // num_phv_flit
    _count += 9; // state_lkp_catchall_entry
    _count += 1; // phv_set_hw_err_en
    _count += 1; // phv_set_parser_err_en
    _count += 1; // gso_csum_en
    _count += 7; // pe_err_vec_en
    _count += 1; // end_offset_en
    _count += 4; // end_offset_flit_num
    _count += 7; // tcam_key_ctl
    _count += 1; // crc_start_offset_err_en
    _count += 1; // csum_start_offset_err_en
    return _count;
}

int cap_ppa_csr_rdintr_t::s_get_width() {
    int _count = 0;

    _count += 32; // ireg
    return _count;
}

int cap_ppa_csr_base_t::s_get_width() {
    int _count = 0;

    _count += 32; // scratch_reg
    return _count;
}

int cap_ppa_csr_t::s_get_width() {
    int _count = 0;

    _count += cap_ppa_csr_base_t::s_get_width(); // base
    _count += cap_ppa_csr_rdintr_t::s_get_width(); // rdintr
    _count += cap_ppa_csr_cfg_ctrl_t::s_get_width(); // cfg_ctrl
    _count += cap_ppa_csr_cfg_ctrl_thresh_t::s_get_width(); // cfg_ctrl_thresh
    _count += (cap_ppa_csr_cfg_init_profile_t::s_get_width() * 16); // cfg_init_profile
    _count += cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t::s_get_width(); // cfg_bndl0_state_lkp_tcam_grst
    _count += cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::s_get_width(); // cfg_bndl0_state_lkp_tcam_ind
    _count += cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::s_get_width(); // sta_bndl0_state_lkp_tcam_ind
    _count += cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t::s_get_width(); // cfg_bndl1_state_lkp_tcam_grst
    _count += cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::s_get_width(); // cfg_bndl1_state_lkp_tcam_ind
    _count += cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::s_get_width(); // sta_bndl1_state_lkp_tcam_ind
    _count += (cap_ppa_csr_cfg_crc_profile_t::s_get_width() * 8); // cfg_crc_profile
    _count += (cap_ppa_csr_cfg_crc_mask_profile_t::s_get_width() * 4); // cfg_crc_mask_profile
    _count += (cap_ppa_csr_cfg_csum_profile_t::s_get_width() * 8); // cfg_csum_profile
    _count += (cap_ppa_csr_cfg_csum_phdr_profile_t::s_get_width() * 8); // cfg_csum_phdr_profile
    _count += (cap_ppa_csr_cfg_len_chk_profile_t::s_get_width() * 4); // cfg_len_chk_profile
    _count += (cap_ppa_csr_cfg_align_chk_profile_t::s_get_width() * 4); // cfg_align_chk_profile
    _count += cap_ppa_csr_CNT_ppa_pb_t::s_get_width(); // CNT_ppa_pb
    _count += cap_ppa_csr_CNT_ppa_dp_t::s_get_width(); // CNT_ppa_dp
    _count += cap_ppa_csr_CNT_ppa_ma_t::s_get_width(); // CNT_ppa_ma
    _count += cap_ppa_csr_CNT_ppa_sw_phv_t::s_get_width(); // CNT_ppa_sw_phv
    _count += cap_ppa_csr_CNT_ppa_ohi_t::s_get_width(); // CNT_ppa_ohi
    _count += cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::s_get_width(); // CNT_ppa_pe0_pkt_in
    _count += cap_ppa_csr_CNT_ppa_pe0_t::s_get_width(); // CNT_ppa_pe0
    _count += cap_ppa_csr_CNT_ppa_pe0_phv_out_t::s_get_width(); // CNT_ppa_pe0_phv_out
    _count += cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::s_get_width(); // CNT_ppa_pe1_pkt_in
    _count += cap_ppa_csr_CNT_ppa_pe1_t::s_get_width(); // CNT_ppa_pe1
    _count += cap_ppa_csr_CNT_ppa_pe1_phv_out_t::s_get_width(); // CNT_ppa_pe1_phv_out
    _count += cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::s_get_width(); // CNT_ppa_pe2_pkt_in
    _count += cap_ppa_csr_CNT_ppa_pe2_t::s_get_width(); // CNT_ppa_pe2
    _count += cap_ppa_csr_CNT_ppa_pe2_phv_out_t::s_get_width(); // CNT_ppa_pe2_phv_out
    _count += cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::s_get_width(); // CNT_ppa_pe3_pkt_in
    _count += cap_ppa_csr_CNT_ppa_pe3_t::s_get_width(); // CNT_ppa_pe3
    _count += cap_ppa_csr_CNT_ppa_pe3_phv_out_t::s_get_width(); // CNT_ppa_pe3_phv_out
    _count += cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::s_get_width(); // CNT_ppa_pe4_pkt_in
    _count += cap_ppa_csr_CNT_ppa_pe4_t::s_get_width(); // CNT_ppa_pe4
    _count += cap_ppa_csr_CNT_ppa_pe4_phv_out_t::s_get_width(); // CNT_ppa_pe4_phv_out
    _count += cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::s_get_width(); // CNT_ppa_pe5_pkt_in
    _count += cap_ppa_csr_CNT_ppa_pe5_t::s_get_width(); // CNT_ppa_pe5
    _count += cap_ppa_csr_CNT_ppa_pe5_phv_out_t::s_get_width(); // CNT_ppa_pe5_phv_out
    _count += cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::s_get_width(); // CNT_ppa_pe6_pkt_in
    _count += cap_ppa_csr_CNT_ppa_pe6_t::s_get_width(); // CNT_ppa_pe6
    _count += cap_ppa_csr_CNT_ppa_pe6_phv_out_t::s_get_width(); // CNT_ppa_pe6_phv_out
    _count += cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::s_get_width(); // CNT_ppa_pe7_pkt_in
    _count += cap_ppa_csr_CNT_ppa_pe7_t::s_get_width(); // CNT_ppa_pe7
    _count += cap_ppa_csr_CNT_ppa_pe7_phv_out_t::s_get_width(); // CNT_ppa_pe7_phv_out
    _count += cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::s_get_width(); // CNT_ppa_pe8_pkt_in
    _count += cap_ppa_csr_CNT_ppa_pe8_t::s_get_width(); // CNT_ppa_pe8
    _count += cap_ppa_csr_CNT_ppa_pe8_phv_out_t::s_get_width(); // CNT_ppa_pe8_phv_out
    _count += cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::s_get_width(); // CNT_ppa_pe9_pkt_in
    _count += cap_ppa_csr_CNT_ppa_pe9_t::s_get_width(); // CNT_ppa_pe9
    _count += cap_ppa_csr_CNT_ppa_pe9_phv_out_t::s_get_width(); // CNT_ppa_pe9_phv_out
    _count += cap_ppa_csr_csr_intr_t::s_get_width(); // csr_intr
    _count += cap_ppa_csr_cfg_pkt_mem_t::s_get_width(); // cfg_pkt_mem
    _count += cap_ppa_csr_sta_pkt_mem_t::s_get_width(); // sta_pkt_mem
    _count += cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::s_get_width(); // cfg_bndl0_state_lkp_sram
    _count += cap_ppa_csr_sta_bndl0_state_lkp_sram_t::s_get_width(); // sta_bndl0_state_lkp_sram
    _count += cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::s_get_width(); // cfg_bndl1_state_lkp_sram
    _count += cap_ppa_csr_sta_bndl1_state_lkp_sram_t::s_get_width(); // sta_bndl1_state_lkp_sram
    _count += cap_ppa_csr_cfg_bndl0_inq_mem_t::s_get_width(); // cfg_bndl0_inq_mem
    _count += cap_ppa_csr_sta_bndl0_inq_mem_t::s_get_width(); // sta_bndl0_inq_mem
    _count += cap_ppa_csr_cfg_bndl1_inq_mem_t::s_get_width(); // cfg_bndl1_inq_mem
    _count += cap_ppa_csr_sta_bndl1_inq_mem_t::s_get_width(); // sta_bndl1_inq_mem
    _count += cap_ppa_csr_cfg_outq_phv_mem_t::s_get_width(); // cfg_outq_phv_mem
    _count += cap_ppa_csr_sta_outq_phv_mem_t::s_get_width(); // sta_outq_phv_mem
    _count += cap_ppa_csr_cfg_outq_ohi_mem_t::s_get_width(); // cfg_outq_ohi_mem
    _count += cap_ppa_csr_sta_outq_ohi_mem_t::s_get_width(); // sta_outq_ohi_mem
    _count += cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t::s_get_width(); // cfg_bndl0_state_lkp_tcam
    _count += cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::s_get_width(); // sta_bndl0_state_lkp_tcam
    _count += cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t::s_get_width(); // cfg_bndl1_state_lkp_tcam
    _count += cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::s_get_width(); // sta_bndl1_state_lkp_tcam
    _count += cap_ppa_csr_cfg_pe0_phv_mem_t::s_get_width(); // cfg_pe0_phv_mem
    _count += cap_ppa_csr_sta_pe0_phv_mem_t::s_get_width(); // sta_pe0_phv_mem
    _count += cap_ppa_csr_cfg_pe1_phv_mem_t::s_get_width(); // cfg_pe1_phv_mem
    _count += cap_ppa_csr_sta_pe1_phv_mem_t::s_get_width(); // sta_pe1_phv_mem
    _count += cap_ppa_csr_cfg_pe2_phv_mem_t::s_get_width(); // cfg_pe2_phv_mem
    _count += cap_ppa_csr_sta_pe2_phv_mem_t::s_get_width(); // sta_pe2_phv_mem
    _count += cap_ppa_csr_cfg_pe3_phv_mem_t::s_get_width(); // cfg_pe3_phv_mem
    _count += cap_ppa_csr_sta_pe3_phv_mem_t::s_get_width(); // sta_pe3_phv_mem
    _count += cap_ppa_csr_cfg_pe4_phv_mem_t::s_get_width(); // cfg_pe4_phv_mem
    _count += cap_ppa_csr_sta_pe4_phv_mem_t::s_get_width(); // sta_pe4_phv_mem
    _count += cap_ppa_csr_cfg_pe5_phv_mem_t::s_get_width(); // cfg_pe5_phv_mem
    _count += cap_ppa_csr_sta_pe5_phv_mem_t::s_get_width(); // sta_pe5_phv_mem
    _count += cap_ppa_csr_cfg_pe6_phv_mem_t::s_get_width(); // cfg_pe6_phv_mem
    _count += cap_ppa_csr_sta_pe6_phv_mem_t::s_get_width(); // sta_pe6_phv_mem
    _count += cap_ppa_csr_cfg_pe7_phv_mem_t::s_get_width(); // cfg_pe7_phv_mem
    _count += cap_ppa_csr_sta_pe7_phv_mem_t::s_get_width(); // sta_pe7_phv_mem
    _count += cap_ppa_csr_cfg_pe8_phv_mem_t::s_get_width(); // cfg_pe8_phv_mem
    _count += cap_ppa_csr_sta_pe8_phv_mem_t::s_get_width(); // sta_pe8_phv_mem
    _count += cap_ppa_csr_cfg_pe9_phv_mem_t::s_get_width(); // cfg_pe9_phv_mem
    _count += cap_ppa_csr_sta_pe9_phv_mem_t::s_get_width(); // sta_pe9_phv_mem
    _count += cap_ppa_csr_cfg_sw_phv_global_t::s_get_width(); // cfg_sw_phv_global
    _count += (cap_ppa_csr_cfg_sw_phv_control_t::s_get_width() * 8); // cfg_sw_phv_control
    _count += (cap_ppa_csr_cfg_sw_phv_config_t::s_get_width() * 8); // cfg_sw_phv_config
    _count += (cap_ppa_csr_sta_sw_phv_state_t::s_get_width() * 8); // sta_sw_phv_state
    _count += cap_ppa_csr_cfg_sw_phv_mem_t::s_get_width(); // cfg_sw_phv_mem
    _count += cap_ppa_csr_sta_sw_phv_mem_t::s_get_width(); // sta_sw_phv_mem
    _count += cap_ppa_csr_sta_reorder_phv_not_sop_err_t::s_get_width(); // sta_reorder_phv_not_sop_err
    _count += cap_ppa_csr_sta_reorder_t::s_get_width(); // sta_reorder
    _count += cap_ppa_csr_sta_csum0_t::s_get_width(); // sta_csum0
    _count += cap_ppa_csr_sta_csum1_t::s_get_width(); // sta_csum1
    _count += cap_ppa_csr_sta_csum2_t::s_get_width(); // sta_csum2
    _count += cap_ppa_csr_sta_csum3_t::s_get_width(); // sta_csum3
    _count += cap_ppa_csr_sta_csum4_t::s_get_width(); // sta_csum4
    _count += cap_ppa_csr_sta_chkr_seq_id_t::s_get_width(); // sta_chkr_seq_id
    _count += cap_ppa_csr_sta_pe0_t::s_get_width(); // sta_pe0
    _count += cap_ppa_csr_sta_pe1_t::s_get_width(); // sta_pe1
    _count += cap_ppa_csr_sta_pe2_t::s_get_width(); // sta_pe2
    _count += cap_ppa_csr_sta_pe3_t::s_get_width(); // sta_pe3
    _count += cap_ppa_csr_sta_pe4_t::s_get_width(); // sta_pe4
    _count += cap_ppa_csr_sta_pe5_t::s_get_width(); // sta_pe5
    _count += cap_ppa_csr_sta_pe6_t::s_get_width(); // sta_pe6
    _count += cap_ppa_csr_sta_pe7_t::s_get_width(); // sta_pe7
    _count += cap_ppa_csr_sta_pe8_t::s_get_width(); // sta_pe8
    _count += cap_ppa_csr_sta_pe9_t::s_get_width(); // sta_pe9
    _count += cap_ppa_csr_sta_bndl0_state_lkp_t::s_get_width(); // sta_bndl0_state_lkp
    _count += cap_ppa_csr_sta_bndl1_state_lkp_t::s_get_width(); // sta_bndl1_state_lkp
    _count += cap_ppa_csr_sta_fifo_t::s_get_width(); // sta_fifo
    _count += cap_ppa_csr_sta_bndl0_t::s_get_width(); // sta_bndl0
    _count += cap_ppa_csr_sta_bndl1_t::s_get_width(); // sta_bndl1
    _count += cap_ppa_csr_sta_pe_alloc_t::s_get_width(); // sta_pe_alloc
    _count += cap_ppa_csr_cfg_debug_ctrl_t::s_get_width(); // cfg_debug_ctrl
    _count += cap_ppa_csr_cfg_debug_port_t::s_get_width(); // cfg_debug_port
    _count += cap_ppa_csr_cfg_spare_t::s_get_width(); // cfg_spare
    _count += cap_ppa_csr_cfg_spare_dbg_t::s_get_width(); // cfg_spare_dbg
    _count += cap_ppa_csr_cfg_preparse_t::s_get_width(); // cfg_preparse
    _count += cap_ppa_csr_sta_preparse_t::s_get_width(); // sta_preparse
    _count += cap_ppa_csr_CNT_preparse_t::s_get_width(); // CNT_preparse
    _count += cap_ppa_csr_dhs_bndl0_state_lkp_tcam_t::s_get_width(); // dhs_bndl0_state_lkp_tcam
    _count += cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_t::s_get_width(); // dhs_bndl0_state_lkp_tcam_ind
    _count += cap_ppa_csr_dhs_bndl0_state_lkp_sram_t::s_get_width(); // dhs_bndl0_state_lkp_sram
    _count += cap_ppa_csr_dhs_bndl1_state_lkp_tcam_t::s_get_width(); // dhs_bndl1_state_lkp_tcam
    _count += cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_t::s_get_width(); // dhs_bndl1_state_lkp_tcam_ind
    _count += cap_ppa_csr_dhs_bndl1_state_lkp_sram_t::s_get_width(); // dhs_bndl1_state_lkp_sram
    _count += cap_ppa_csr_dhs_sw_phv_mem_t::s_get_width(); // dhs_sw_phv_mem
    _count += cap_ppa_csr_dhs_dbg_mem_t::s_get_width(); // dhs_dbg_mem
    _count += cap_ppa_csr_intgrp_status_t::s_get_width(); // int_groups
    _count += cap_ppa_csr_int_bndl0_t::s_get_width(); // int_bndl0
    _count += cap_ppa_csr_int_bndl0_t::s_get_width(); // int_bndl1
    _count += cap_ppa_csr_int_ecc_t::s_get_width(); // int_ecc
    _count += cap_ppa_csr_int_fifo1_t::s_get_width(); // int_fifo1
    _count += cap_ppa_csr_int_fifo2_t::s_get_width(); // int_fifo2
    _count += cap_ppa_csr_int_pe9_t::s_get_width(); // int_pe0
    _count += cap_ppa_csr_int_pe9_t::s_get_width(); // int_pe1
    _count += cap_ppa_csr_int_pe9_t::s_get_width(); // int_pe2
    _count += cap_ppa_csr_int_pe9_t::s_get_width(); // int_pe3
    _count += cap_ppa_csr_int_pe9_t::s_get_width(); // int_pe4
    _count += cap_ppa_csr_int_pe9_t::s_get_width(); // int_pe5
    _count += cap_ppa_csr_int_pe9_t::s_get_width(); // int_pe6
    _count += cap_ppa_csr_int_pe9_t::s_get_width(); // int_pe7
    _count += cap_ppa_csr_int_pe9_t::s_get_width(); // int_pe8
    _count += cap_ppa_csr_int_pe9_t::s_get_width(); // int_pe9
    _count += cap_ppa_csr_int_pa_t::s_get_width(); // int_pa
    _count += cap_ppa_csr_int_intf_t::s_get_width(); // int_intf
    _count += cap_ppa_csr_int_sw_phv_mem_t::s_get_width(); // int_sw_phv_mem
    return _count;
}

void cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ecc_uncorrectable_enable = _val.convert_to< ecc_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ecc_correctable_enable = _val.convert_to< ecc_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_invalid_sram_enable = _val.convert_to< phv_invalid_sram_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_invalid_data_enable = _val.convert_to< phv_invalid_data_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_done0_enable = _val.convert_to< phv_done0_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_done1_enable = _val.convert_to< phv_done1_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_done2_enable = _val.convert_to< phv_done2_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_done3_enable = _val.convert_to< phv_done3_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_done4_enable = _val.convert_to< phv_done4_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_done5_enable = _val.convert_to< phv_done5_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_done6_enable = _val.convert_to< phv_done6_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_done7_enable = _val.convert_to< phv_done7_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_int_sw_phv_mem_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ecc_uncorrectable_interrupt = _val.convert_to< ecc_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ecc_correctable_interrupt = _val.convert_to< ecc_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_invalid_sram_interrupt = _val.convert_to< phv_invalid_sram_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_invalid_data_interrupt = _val.convert_to< phv_invalid_data_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_done0_interrupt = _val.convert_to< phv_done0_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_done1_interrupt = _val.convert_to< phv_done1_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_done2_interrupt = _val.convert_to< phv_done2_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_done3_interrupt = _val.convert_to< phv_done3_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_done4_interrupt = _val.convert_to< phv_done4_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_done5_interrupt = _val.convert_to< phv_done5_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_done6_interrupt = _val.convert_to< phv_done6_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_done7_interrupt = _val.convert_to< phv_done7_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_int_sw_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_ppa_csr_int_intf_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pb_err_enable = _val.convert_to< pb_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pb_sop_err_enable = _val.convert_to< pb_sop_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pb_eop_err_enable = _val.convert_to< pb_eop_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__dp_err_enable = _val.convert_to< dp_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__dp_sop_err_enable = _val.convert_to< dp_sop_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__dp_eop_err_enable = _val.convert_to< dp_eop_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ohi_err_enable = _val.convert_to< ohi_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ohi_sop_err_enable = _val.convert_to< ohi_sop_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ohi_eop_err_enable = _val.convert_to< ohi_eop_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sw_phv_err_enable = _val.convert_to< sw_phv_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sw_phv_sop_err_enable = _val.convert_to< sw_phv_sop_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sw_phv_eop_err_enable = _val.convert_to< sw_phv_eop_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ma_err_enable = _val.convert_to< ma_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ma_sop_err_enable = _val.convert_to< ma_sop_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ma_eop_err_enable = _val.convert_to< ma_eop_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_int_intf_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pb_err_interrupt = _val.convert_to< pb_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pb_sop_err_interrupt = _val.convert_to< pb_sop_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pb_eop_err_interrupt = _val.convert_to< pb_eop_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__dp_err_interrupt = _val.convert_to< dp_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__dp_sop_err_interrupt = _val.convert_to< dp_sop_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__dp_eop_err_interrupt = _val.convert_to< dp_eop_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ohi_err_interrupt = _val.convert_to< ohi_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ohi_sop_err_interrupt = _val.convert_to< ohi_sop_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ohi_eop_err_interrupt = _val.convert_to< ohi_eop_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sw_phv_err_interrupt = _val.convert_to< sw_phv_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sw_phv_sop_err_interrupt = _val.convert_to< sw_phv_sop_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sw_phv_eop_err_interrupt = _val.convert_to< sw_phv_eop_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ma_err_interrupt = _val.convert_to< ma_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ma_sop_err_interrupt = _val.convert_to< ma_sop_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ma_eop_err_interrupt = _val.convert_to< ma_eop_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_int_intf_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_ppa_csr_int_pa_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__reorder_phv_not_sop_enable = _val.convert_to< reorder_phv_not_sop_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum0_not_enuf_bytes_enable = _val.convert_to< csum0_not_enuf_bytes_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum0_start_more_than_end_offset_enable = _val.convert_to< csum0_start_more_than_end_offset_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum1_not_enuf_bytes_enable = _val.convert_to< csum1_not_enuf_bytes_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum1_start_more_than_end_offset_enable = _val.convert_to< csum1_start_more_than_end_offset_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum2_not_enuf_bytes_enable = _val.convert_to< csum2_not_enuf_bytes_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum2_start_more_than_end_offset_enable = _val.convert_to< csum2_start_more_than_end_offset_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum3_not_enuf_bytes_enable = _val.convert_to< csum3_not_enuf_bytes_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum3_start_more_than_end_offset_enable = _val.convert_to< csum3_start_more_than_end_offset_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum4_not_enuf_bytes_enable = _val.convert_to< csum4_not_enuf_bytes_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum4_start_more_than_end_offset_enable = _val.convert_to< csum4_start_more_than_end_offset_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crc_not_enuf_bytes_enable = _val.convert_to< crc_not_enuf_bytes_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crc_start_more_than_end_offset_enable = _val.convert_to< crc_start_more_than_end_offset_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__chkr_phv_single_flit_enable = _val.convert_to< chkr_phv_single_flit_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__chkr_phv_not_sop_enable = _val.convert_to< chkr_phv_not_sop_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__chkr_pkt_not_sop_enable = _val.convert_to< chkr_pkt_not_sop_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__chkr_seq_id_enable = _val.convert_to< chkr_seq_id_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__preparse_line0_not_sop_enable = _val.convert_to< preparse_line0_not_sop_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__preparse_dff_not_sop_enable = _val.convert_to< preparse_dff_not_sop_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__preparse_dff_ovflow_enable = _val.convert_to< preparse_dff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__preparse_eff_ovflow_enable = _val.convert_to< preparse_eff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_int_pa_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__reorder_phv_not_sop_interrupt = _val.convert_to< reorder_phv_not_sop_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum0_not_enuf_bytes_interrupt = _val.convert_to< csum0_not_enuf_bytes_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum0_start_more_than_end_offset_interrupt = _val.convert_to< csum0_start_more_than_end_offset_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum1_not_enuf_bytes_interrupt = _val.convert_to< csum1_not_enuf_bytes_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum1_start_more_than_end_offset_interrupt = _val.convert_to< csum1_start_more_than_end_offset_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum2_not_enuf_bytes_interrupt = _val.convert_to< csum2_not_enuf_bytes_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum2_start_more_than_end_offset_interrupt = _val.convert_to< csum2_start_more_than_end_offset_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum3_not_enuf_bytes_interrupt = _val.convert_to< csum3_not_enuf_bytes_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum3_start_more_than_end_offset_interrupt = _val.convert_to< csum3_start_more_than_end_offset_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum4_not_enuf_bytes_interrupt = _val.convert_to< csum4_not_enuf_bytes_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum4_start_more_than_end_offset_interrupt = _val.convert_to< csum4_start_more_than_end_offset_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crc_not_enuf_bytes_interrupt = _val.convert_to< crc_not_enuf_bytes_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crc_start_more_than_end_offset_interrupt = _val.convert_to< crc_start_more_than_end_offset_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__chkr_phv_single_flit_interrupt = _val.convert_to< chkr_phv_single_flit_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__chkr_phv_not_sop_interrupt = _val.convert_to< chkr_phv_not_sop_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__chkr_pkt_not_sop_interrupt = _val.convert_to< chkr_pkt_not_sop_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__chkr_seq_id_interrupt = _val.convert_to< chkr_seq_id_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__preparse_line0_not_sop_interrupt = _val.convert_to< preparse_line0_not_sop_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__preparse_dff_not_sop_interrupt = _val.convert_to< preparse_dff_not_sop_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__preparse_dff_ovflow_interrupt = _val.convert_to< preparse_dff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__preparse_eff_ovflow_interrupt = _val.convert_to< preparse_eff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_int_pa_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_ppa_csr_int_pe9_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__qctl_skid_depth_not_zero_enable = _val.convert_to< qctl_skid_depth_not_zero_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__qctl_not_sop_after_pkt_release_enable = _val.convert_to< qctl_not_sop_after_pkt_release_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__unexpected_non_sop_enable = _val.convert_to< unexpected_non_sop_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__exceed_phv_flit_cnt_enable = _val.convert_to< exceed_phv_flit_cnt_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__exceed_parse_loop_cnt_enable = _val.convert_to< exceed_parse_loop_cnt_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__offset_out_of_range_enable = _val.convert_to< offset_out_of_range_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pkt_size_chk_enable = _val.convert_to< pkt_size_chk_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__offset_jump_chk_enable = _val.convert_to< offset_jump_chk_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__d1_not_valid_enable = _val.convert_to< d1_not_valid_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_upr_idx_less_enable = _val.convert_to< phv_upr_idx_less_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_int_pe9_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__qctl_skid_depth_not_zero_interrupt = _val.convert_to< qctl_skid_depth_not_zero_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__qctl_not_sop_after_pkt_release_interrupt = _val.convert_to< qctl_not_sop_after_pkt_release_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__unexpected_non_sop_interrupt = _val.convert_to< unexpected_non_sop_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__exceed_phv_flit_cnt_interrupt = _val.convert_to< exceed_phv_flit_cnt_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__exceed_parse_loop_cnt_interrupt = _val.convert_to< exceed_parse_loop_cnt_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__offset_out_of_range_interrupt = _val.convert_to< offset_out_of_range_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pkt_size_chk_interrupt = _val.convert_to< pkt_size_chk_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__offset_jump_chk_interrupt = _val.convert_to< offset_jump_chk_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__d1_not_valid_interrupt = _val.convert_to< d1_not_valid_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_upr_idx_less_interrupt = _val.convert_to< phv_upr_idx_less_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_int_pe9_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_ppa_csr_int_fifo2_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__dp_if_ff_ovflow_enable = _val.convert_to< dp_if_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ohi_if_ff_ovflow_enable = _val.convert_to< ohi_if_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ma_if_ff_ovflow_enable = _val.convert_to< ma_if_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pb_if_ff_ovflow_enable = _val.convert_to< pb_if_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pkt_mtu_ff_ovflow_enable = _val.convert_to< pkt_mtu_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__outphv_ff_ovflow_enable = _val.convert_to< outphv_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__outohi_ff_ovflow_enable = _val.convert_to< outohi_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__chk_ff_ovflow_enable = _val.convert_to< chk_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_int_fifo2_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__dp_if_ff_ovflow_interrupt = _val.convert_to< dp_if_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ohi_if_ff_ovflow_interrupt = _val.convert_to< ohi_if_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ma_if_ff_ovflow_interrupt = _val.convert_to< ma_if_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pb_if_ff_ovflow_interrupt = _val.convert_to< pb_if_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pkt_mtu_ff_ovflow_interrupt = _val.convert_to< pkt_mtu_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__outphv_ff_ovflow_interrupt = _val.convert_to< outphv_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__outohi_ff_ovflow_interrupt = _val.convert_to< outohi_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__chk_ff_ovflow_interrupt = _val.convert_to< chk_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_int_fifo2_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_ppa_csr_int_fifo1_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pe0_qctl_ff_ovflow_enable = _val.convert_to< pe0_qctl_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe1_qctl_ff_ovflow_enable = _val.convert_to< pe1_qctl_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe2_qctl_ff_ovflow_enable = _val.convert_to< pe2_qctl_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe3_qctl_ff_ovflow_enable = _val.convert_to< pe3_qctl_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe4_qctl_ff_ovflow_enable = _val.convert_to< pe4_qctl_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe5_qctl_ff_ovflow_enable = _val.convert_to< pe5_qctl_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe6_qctl_ff_ovflow_enable = _val.convert_to< pe6_qctl_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe7_qctl_ff_ovflow_enable = _val.convert_to< pe7_qctl_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe8_qctl_ff_ovflow_enable = _val.convert_to< pe8_qctl_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe9_qctl_ff_ovflow_enable = _val.convert_to< pe9_qctl_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe0_phv_ff_ovflow_enable = _val.convert_to< pe0_phv_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe1_phv_ff_ovflow_enable = _val.convert_to< pe1_phv_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe2_phv_ff_ovflow_enable = _val.convert_to< pe2_phv_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe3_phv_ff_ovflow_enable = _val.convert_to< pe3_phv_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe4_phv_ff_ovflow_enable = _val.convert_to< pe4_phv_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe5_phv_ff_ovflow_enable = _val.convert_to< pe5_phv_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe6_phv_ff_ovflow_enable = _val.convert_to< pe6_phv_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe7_phv_ff_ovflow_enable = _val.convert_to< pe7_phv_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe8_phv_ff_ovflow_enable = _val.convert_to< pe8_phv_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe9_phv_ff_ovflow_enable = _val.convert_to< pe9_phv_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe0_ohi_ff_ovflow_enable = _val.convert_to< pe0_ohi_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe1_ohi_ff_ovflow_enable = _val.convert_to< pe1_ohi_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe2_ohi_ff_ovflow_enable = _val.convert_to< pe2_ohi_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe3_ohi_ff_ovflow_enable = _val.convert_to< pe3_ohi_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe4_ohi_ff_ovflow_enable = _val.convert_to< pe4_ohi_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe5_ohi_ff_ovflow_enable = _val.convert_to< pe5_ohi_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe6_ohi_ff_ovflow_enable = _val.convert_to< pe6_ohi_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe7_ohi_ff_ovflow_enable = _val.convert_to< pe7_ohi_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe8_ohi_ff_ovflow_enable = _val.convert_to< pe8_ohi_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe9_ohi_ff_ovflow_enable = _val.convert_to< pe9_ohi_ff_ovflow_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_int_fifo1_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pe0_qctl_ff_ovflow_interrupt = _val.convert_to< pe0_qctl_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe1_qctl_ff_ovflow_interrupt = _val.convert_to< pe1_qctl_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe2_qctl_ff_ovflow_interrupt = _val.convert_to< pe2_qctl_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe3_qctl_ff_ovflow_interrupt = _val.convert_to< pe3_qctl_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe4_qctl_ff_ovflow_interrupt = _val.convert_to< pe4_qctl_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe5_qctl_ff_ovflow_interrupt = _val.convert_to< pe5_qctl_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe6_qctl_ff_ovflow_interrupt = _val.convert_to< pe6_qctl_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe7_qctl_ff_ovflow_interrupt = _val.convert_to< pe7_qctl_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe8_qctl_ff_ovflow_interrupt = _val.convert_to< pe8_qctl_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe9_qctl_ff_ovflow_interrupt = _val.convert_to< pe9_qctl_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe0_phv_ff_ovflow_interrupt = _val.convert_to< pe0_phv_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe1_phv_ff_ovflow_interrupt = _val.convert_to< pe1_phv_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe2_phv_ff_ovflow_interrupt = _val.convert_to< pe2_phv_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe3_phv_ff_ovflow_interrupt = _val.convert_to< pe3_phv_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe4_phv_ff_ovflow_interrupt = _val.convert_to< pe4_phv_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe5_phv_ff_ovflow_interrupt = _val.convert_to< pe5_phv_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe6_phv_ff_ovflow_interrupt = _val.convert_to< pe6_phv_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe7_phv_ff_ovflow_interrupt = _val.convert_to< pe7_phv_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe8_phv_ff_ovflow_interrupt = _val.convert_to< pe8_phv_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe9_phv_ff_ovflow_interrupt = _val.convert_to< pe9_phv_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe0_ohi_ff_ovflow_interrupt = _val.convert_to< pe0_ohi_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe1_ohi_ff_ovflow_interrupt = _val.convert_to< pe1_ohi_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe2_ohi_ff_ovflow_interrupt = _val.convert_to< pe2_ohi_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe3_ohi_ff_ovflow_interrupt = _val.convert_to< pe3_ohi_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe4_ohi_ff_ovflow_interrupt = _val.convert_to< pe4_ohi_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe5_ohi_ff_ovflow_interrupt = _val.convert_to< pe5_ohi_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe6_ohi_ff_ovflow_interrupt = _val.convert_to< pe6_ohi_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe7_ohi_ff_ovflow_interrupt = _val.convert_to< pe7_ohi_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe8_ohi_ff_ovflow_interrupt = _val.convert_to< pe8_ohi_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe9_ohi_ff_ovflow_interrupt = _val.convert_to< pe9_ohi_ff_ovflow_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_int_fifo1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_ppa_csr_int_ecc_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pkt_mem_uncorrectable_enable = _val.convert_to< pkt_mem_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pkt_mem_correctable_enable = _val.convert_to< pkt_mem_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bndl0_state_lkp_sram_uncorrectable_enable = _val.convert_to< bndl0_state_lkp_sram_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bndl0_state_lkp_sram_correctable_enable = _val.convert_to< bndl0_state_lkp_sram_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bndl1_state_lkp_sram_uncorrectable_enable = _val.convert_to< bndl1_state_lkp_sram_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bndl1_state_lkp_sram_correctable_enable = _val.convert_to< bndl1_state_lkp_sram_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_int_ecc_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pkt_mem_uncorrectable_interrupt = _val.convert_to< pkt_mem_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pkt_mem_correctable_interrupt = _val.convert_to< pkt_mem_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bndl0_state_lkp_sram_uncorrectable_interrupt = _val.convert_to< bndl0_state_lkp_sram_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bndl0_state_lkp_sram_correctable_interrupt = _val.convert_to< bndl0_state_lkp_sram_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bndl1_state_lkp_sram_uncorrectable_interrupt = _val.convert_to< bndl1_state_lkp_sram_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bndl1_state_lkp_sram_correctable_interrupt = _val.convert_to< bndl1_state_lkp_sram_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_int_ecc_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_ppa_csr_int_bndl1_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__state_lkp_srch_hit_addr_range_err_enable = _val.convert_to< state_lkp_srch_hit_addr_range_err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__state_lkp_srch_miss_enable = _val.convert_to< state_lkp_srch_miss_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__state_lkp_srch_req_not_rdy_enable = _val.convert_to< state_lkp_srch_req_not_rdy_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_int_bndl0_intreg_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__state_lkp_srch_hit_addr_range_err_interrupt = _val.convert_to< state_lkp_srch_hit_addr_range_err_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__state_lkp_srch_miss_interrupt = _val.convert_to< state_lkp_srch_miss_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__state_lkp_srch_req_not_rdy_interrupt = _val.convert_to< state_lkp_srch_req_not_rdy_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_int_bndl0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_ppa_csr_intreg_status_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__int_bndl0_interrupt = _val.convert_to< int_bndl0_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_bndl1_interrupt = _val.convert_to< int_bndl1_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_ecc_interrupt = _val.convert_to< int_ecc_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_fifo1_interrupt = _val.convert_to< int_fifo1_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_fifo2_interrupt = _val.convert_to< int_fifo2_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe0_interrupt = _val.convert_to< int_pe0_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe1_interrupt = _val.convert_to< int_pe1_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe2_interrupt = _val.convert_to< int_pe2_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe3_interrupt = _val.convert_to< int_pe3_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe4_interrupt = _val.convert_to< int_pe4_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe5_interrupt = _val.convert_to< int_pe5_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe6_interrupt = _val.convert_to< int_pe6_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe7_interrupt = _val.convert_to< int_pe7_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe8_interrupt = _val.convert_to< int_pe8_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe9_interrupt = _val.convert_to< int_pe9_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pa_interrupt = _val.convert_to< int_pa_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_sw_phv_mem_interrupt = _val.convert_to< int_sw_phv_mem_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_intf_interrupt = _val.convert_to< int_intf_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_int_groups_int_enable_rw_reg_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__int_bndl0_enable = _val.convert_to< int_bndl0_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_bndl1_enable = _val.convert_to< int_bndl1_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_ecc_enable = _val.convert_to< int_ecc_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_fifo1_enable = _val.convert_to< int_fifo1_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_fifo2_enable = _val.convert_to< int_fifo2_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe0_enable = _val.convert_to< int_pe0_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe1_enable = _val.convert_to< int_pe1_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe2_enable = _val.convert_to< int_pe2_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe3_enable = _val.convert_to< int_pe3_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe4_enable = _val.convert_to< int_pe4_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe5_enable = _val.convert_to< int_pe5_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe6_enable = _val.convert_to< int_pe6_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe7_enable = _val.convert_to< int_pe7_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe8_enable = _val.convert_to< int_pe8_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pe9_enable = _val.convert_to< int_pe9_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_pa_enable = _val.convert_to< int_pa_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_sw_phv_mem_enable = _val.convert_to< int_sw_phv_mem_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_intf_enable = _val.convert_to< int_intf_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_intgrp_status_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_enable_rw_reg.all( _val);
    _val = _val >> int_enable_rw_reg.get_width(); 
    int_rw_reg.all( _val);
    _val = _val >> int_rw_reg.get_width(); 
}

void cap_ppa_csr_dhs_dbg_mem_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 546;
    
}

void cap_ppa_csr_dhs_dbg_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 256 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 256; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_ppa_csr_dhs_sw_phv_mem_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 512;
    
    int_var__spare = _val.convert_to< spare_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 20;
    
}

void cap_ppa_csr_dhs_sw_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 16 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 16; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 763;
    
    int_var__rsvd = _val.convert_to< rsvd_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 54;
    
}

void cap_ppa_csr_dhs_bndl1_state_lkp_sram_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 288; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__cmd = _val.convert_to< cmd_cpp_int_t >()  ;
    _val = _val >> 2;
    
}

void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    entry.all( _val);
    _val = _val >> entry.get_width(); 
}

void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__x_data = _val.convert_to< x_data_cpp_int_t >()  ;
    _val = _val >> 64;
    
    int_var__y_data = _val.convert_to< y_data_cpp_int_t >()  ;
    _val = _val >> 64;
    
    int_var__valid = _val.convert_to< valid_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 288; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 763;
    
    int_var__rsvd = _val.convert_to< rsvd_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >()  ;
    _val = _val >> 54;
    
}

void cap_ppa_csr_dhs_bndl0_state_lkp_sram_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 288; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__cmd = _val.convert_to< cmd_cpp_int_t >()  ;
    _val = _val >> 2;
    
}

void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    entry.all( _val);
    _val = _val >> entry.get_width(); 
}

void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__x_data = _val.convert_to< x_data_cpp_int_t >()  ;
    _val = _val >> 64;
    
    int_var__y_data = _val.convert_to< y_data_cpp_int_t >()  ;
    _val = _val >> 64;
    
    int_var__valid = _val.convert_to< valid_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 288; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_ppa_csr_CNT_preparse_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__dff_sop = _val.convert_to< dff_sop_cpp_int_t >()  ;
    _val = _val >> 40;
    
    int_var__dff_eop = _val.convert_to< dff_eop_cpp_int_t >()  ;
    _val = _val >> 40;
    
    int_var__eff = _val.convert_to< eff_cpp_int_t >()  ;
    _val = _val >> 40;
    
}

void cap_ppa_csr_sta_preparse_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__state = _val.convert_to< state_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__dq_state = _val.convert_to< dq_state_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__dff_empty = _val.convert_to< dff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__dff_full = _val.convert_to< dff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eff_empty = _val.convert_to< eff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eff_full = _val.convert_to< eff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_preparse_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__spare = _val.convert_to< spare_cpp_int_t >()  ;
    _val = _val >> 15;
    
    int_var__bypass = _val.convert_to< bypass_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tm_iport_enc_en = _val.convert_to< tm_iport_enc_en_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__udp_dstport_roce_val0 = _val.convert_to< udp_dstport_roce_val0_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__udp_dstport_roce_val1 = _val.convert_to< udp_dstport_roce_val1_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__udp_dstport_vxlan_val0 = _val.convert_to< udp_dstport_vxlan_val0_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__udp_dstport_vxlan_val1 = _val.convert_to< udp_dstport_vxlan_val1_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__vxlan_flag_mask = _val.convert_to< vxlan_flag_mask_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__vxlan_flag_val = _val.convert_to< vxlan_flag_val_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_ppa_csr_cfg_spare_dbg_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_cfg_spare_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__fld0_inst = _val.convert_to< fld0_inst_cpp_int_t >()  ;
    _val = _val >> 128;
    
    int_var__fld1_inst = _val.convert_to< fld1_inst_cpp_int_t >()  ;
    _val = _val >> 128;
    
    int_var__fld2_inst = _val.convert_to< fld2_inst_cpp_int_t >()  ;
    _val = _val >> 128;
    
    int_var__fld3_inst = _val.convert_to< fld3_inst_cpp_int_t >()  ;
    _val = _val >> 128;
    
}

void cap_ppa_csr_cfg_debug_port_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__enable = _val.convert_to< enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__select = _val.convert_to< select_cpp_int_t >()  ;
    _val = _val >> 2;
    
}

void cap_ppa_csr_cfg_debug_ctrl_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__deq_stall_en = _val.convert_to< deq_stall_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__dbg_mem_sel = _val.convert_to< dbg_mem_sel_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__dbg_bndl_sel = _val.convert_to< dbg_bndl_sel_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__dbg_bus_sel = _val.convert_to< dbg_bus_sel_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__eccbypass = _val.convert_to< eccbypass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe_alloc_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__state = _val.convert_to< state_cpp_int_t >()  ;
    _val = _val >> 2;
    
}

void cap_ppa_csr_sta_bndl1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pkt_queue = _val.convert_to< pkt_queue_cpp_int_t >()  ;
    _val = _val >> 100;
    
}

void cap_ppa_csr_sta_bndl0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pkt_queue = _val.convert_to< pkt_queue_cpp_int_t >()  ;
    _val = _val >> 100;
    
}

void cap_ppa_csr_sta_fifo_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__dp_if_ff_full = _val.convert_to< dp_if_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__dp_if_ff_empty = _val.convert_to< dp_if_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ohi_if_ff_full = _val.convert_to< ohi_if_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ohi_if_ff_empty = _val.convert_to< ohi_if_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ma_if_ff_full = _val.convert_to< ma_if_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ma_if_ff_empty = _val.convert_to< ma_if_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pb_if_ff_full = _val.convert_to< pb_if_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pb_if_ff_empty = _val.convert_to< pb_if_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pkt_mtu_ff_full = _val.convert_to< pkt_mtu_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pkt_mtu_ff_empty = _val.convert_to< pkt_mtu_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__outphv_ff_full = _val.convert_to< outphv_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__outphv_ff_empty = _val.convert_to< outphv_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__outohi_ff_full = _val.convert_to< outohi_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__outohi_ff_empty = _val.convert_to< outohi_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__chk_ff_full = _val.convert_to< chk_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__chk_ff_empty = _val.convert_to< chk_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe0_qctl_ff_full = _val.convert_to< pe0_qctl_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe0_qctl_ff_empty = _val.convert_to< pe0_qctl_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe0_phv_ff_full = _val.convert_to< pe0_phv_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe0_phv_ff_empty = _val.convert_to< pe0_phv_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe0_ohi_ff_full = _val.convert_to< pe0_ohi_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe0_ohi_ff_empty = _val.convert_to< pe0_ohi_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe1_qctl_ff_full = _val.convert_to< pe1_qctl_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe1_qctl_ff_empty = _val.convert_to< pe1_qctl_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe1_phv_ff_full = _val.convert_to< pe1_phv_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe1_phv_ff_empty = _val.convert_to< pe1_phv_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe1_ohi_ff_full = _val.convert_to< pe1_ohi_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe1_ohi_ff_empty = _val.convert_to< pe1_ohi_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe2_qctl_ff_full = _val.convert_to< pe2_qctl_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe2_qctl_ff_empty = _val.convert_to< pe2_qctl_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe2_phv_ff_full = _val.convert_to< pe2_phv_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe2_phv_ff_empty = _val.convert_to< pe2_phv_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe2_ohi_ff_full = _val.convert_to< pe2_ohi_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe2_ohi_ff_empty = _val.convert_to< pe2_ohi_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe3_qctl_ff_full = _val.convert_to< pe3_qctl_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe3_qctl_ff_empty = _val.convert_to< pe3_qctl_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe3_phv_ff_full = _val.convert_to< pe3_phv_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe3_phv_ff_empty = _val.convert_to< pe3_phv_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe3_ohi_ff_full = _val.convert_to< pe3_ohi_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe3_ohi_ff_empty = _val.convert_to< pe3_ohi_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe4_qctl_ff_full = _val.convert_to< pe4_qctl_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe4_qctl_ff_empty = _val.convert_to< pe4_qctl_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe4_phv_ff_full = _val.convert_to< pe4_phv_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe4_phv_ff_empty = _val.convert_to< pe4_phv_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe4_ohi_ff_full = _val.convert_to< pe4_ohi_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe4_ohi_ff_empty = _val.convert_to< pe4_ohi_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe5_qctl_ff_full = _val.convert_to< pe5_qctl_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe5_qctl_ff_empty = _val.convert_to< pe5_qctl_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe5_phv_ff_full = _val.convert_to< pe5_phv_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe5_phv_ff_empty = _val.convert_to< pe5_phv_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe5_ohi_ff_full = _val.convert_to< pe5_ohi_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe5_ohi_ff_empty = _val.convert_to< pe5_ohi_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe6_qctl_ff_full = _val.convert_to< pe6_qctl_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe6_qctl_ff_empty = _val.convert_to< pe6_qctl_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe6_phv_ff_full = _val.convert_to< pe6_phv_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe6_phv_ff_empty = _val.convert_to< pe6_phv_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe6_ohi_ff_full = _val.convert_to< pe6_ohi_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe6_ohi_ff_empty = _val.convert_to< pe6_ohi_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe7_qctl_ff_full = _val.convert_to< pe7_qctl_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe7_qctl_ff_empty = _val.convert_to< pe7_qctl_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe7_phv_ff_full = _val.convert_to< pe7_phv_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe7_phv_ff_empty = _val.convert_to< pe7_phv_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe7_ohi_ff_full = _val.convert_to< pe7_ohi_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe7_ohi_ff_empty = _val.convert_to< pe7_ohi_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe8_qctl_ff_full = _val.convert_to< pe8_qctl_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe8_qctl_ff_empty = _val.convert_to< pe8_qctl_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe8_phv_ff_full = _val.convert_to< pe8_phv_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe8_phv_ff_empty = _val.convert_to< pe8_phv_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe8_ohi_ff_full = _val.convert_to< pe8_ohi_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe8_ohi_ff_empty = _val.convert_to< pe8_ohi_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe9_qctl_ff_full = _val.convert_to< pe9_qctl_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe9_qctl_ff_empty = _val.convert_to< pe9_qctl_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe9_phv_ff_full = _val.convert_to< pe9_phv_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe9_phv_ff_empty = _val.convert_to< pe9_phv_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe9_ohi_ff_full = _val.convert_to< pe9_ohi_ff_full_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe9_ohi_ff_empty = _val.convert_to< pe9_ohi_ff_empty_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_bndl1_state_lkp_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >()  ;
    _val = _val >> 13;
    
}

void cap_ppa_csr_sta_bndl0_state_lkp_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >()  ;
    _val = _val >> 13;
    
}

void cap_ppa_csr_sta_pe9_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >()  ;
    _val = _val >> 105;
    
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe8_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >()  ;
    _val = _val >> 105;
    
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe7_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >()  ;
    _val = _val >> 105;
    
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe6_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >()  ;
    _val = _val >> 105;
    
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe5_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >()  ;
    _val = _val >> 105;
    
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe4_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >()  ;
    _val = _val >> 105;
    
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe3_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >()  ;
    _val = _val >> 105;
    
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe2_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >()  ;
    _val = _val >> 105;
    
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >()  ;
    _val = _val >> 105;
    
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >()  ;
    _val = _val >> 105;
    
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_chkr_seq_id_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ohi = _val.convert_to< ohi_cpp_int_t >()  ;
    _val = _val >> 7;
    
    int_var__pkt = _val.convert_to< pkt_cpp_int_t >()  ;
    _val = _val >> 7;
    
}

void cap_ppa_csr_sta_csum4_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_ppa_csr_sta_csum3_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_ppa_csr_sta_csum2_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_ppa_csr_sta_csum1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_ppa_csr_sta_csum0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_ppa_csr_sta_reorder_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__seq_state = _val.convert_to< seq_state_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__seq_num = _val.convert_to< seq_num_cpp_int_t >()  ;
    _val = _val >> 7;
    
    int_var__ohi_srdy_vec = _val.convert_to< ohi_srdy_vec_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__phv_srdy_vec = _val.convert_to< phv_srdy_vec_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__match_vec = _val.convert_to< match_vec_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__eop_vec = _val.convert_to< eop_vec_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__drdy_vec_d = _val.convert_to< drdy_vec_d_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_ppa_csr_sta_reorder_phv_not_sop_err_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__match_vec = _val.convert_to< match_vec_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__phv_sop_vec = _val.convert_to< phv_sop_vec_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_ppa_csr_sta_sw_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ecc_correctable = _val.convert_to< ecc_correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ecc_uncorrectable = _val.convert_to< ecc_uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ecc_syndrome = _val.convert_to< ecc_syndrome_cpp_int_t >()  ;
    _val = _val >> 20;
    
    int_var__ecc_addr = _val.convert_to< ecc_addr_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_sw_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ecc_detect = _val.convert_to< ecc_detect_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ecc_correct = _val.convert_to< ecc_correct_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ecc_bypass = _val.convert_to< ecc_bypass_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_sw_phv_state_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__done = _val.convert_to< done_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__current_insertion_period = _val.convert_to< current_insertion_period_cpp_int_t >()  ;
    _val = _val >> 42;
    
    int_var__current_counter = _val.convert_to< current_counter_cpp_int_t >()  ;
    _val = _val >> 14;
    
    int_var__current_flit = _val.convert_to< current_flit_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__current_qid = _val.convert_to< current_qid_cpp_int_t >()  ;
    _val = _val >> 24;
    
}

void cap_ppa_csr_cfg_sw_phv_config_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__start_addr = _val.convert_to< start_addr_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__num_flits = _val.convert_to< num_flits_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__insertion_period_clocks = _val.convert_to< insertion_period_clocks_cpp_int_t >()  ;
    _val = _val >> 42;
    
    int_var__counter_max = _val.convert_to< counter_max_cpp_int_t >()  ;
    _val = _val >> 14;
    
    int_var__qid_min = _val.convert_to< qid_min_cpp_int_t >()  ;
    _val = _val >> 24;
    
    int_var__qid_max = _val.convert_to< qid_max_cpp_int_t >()  ;
    _val = _val >> 24;
    
}

void cap_ppa_csr_cfg_sw_phv_control_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__start_enable = _val.convert_to< start_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__counter_repeat_enable = _val.convert_to< counter_repeat_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__qid_repeat_enable = _val.convert_to< qid_repeat_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__localtime_enable = _val.convert_to< localtime_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__frame_size_enable = _val.convert_to< frame_size_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__packet_len_enable = _val.convert_to< packet_len_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__qid_enable = _val.convert_to< qid_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_sw_phv_global_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__start_enable = _val.convert_to< start_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__err_enable = _val.convert_to< err_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe9_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_pe9_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe8_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_pe8_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe7_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_pe7_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe6_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_pe6_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe5_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_pe5_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe4_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_pe4_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe3_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_pe3_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe2_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_pe2_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe1_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_pe1_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pe0_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_pe0_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_outq_ohi_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_outq_ohi_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_outq_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_outq_phv_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_bndl1_inq_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_bndl1_inq_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_bndl0_inq_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_bndl0_inq_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_bndl1_state_lkp_sram_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 54;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__dhs_ecc_bypass = _val.convert_to< dhs_ecc_bypass_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_bndl0_state_lkp_sram_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 54;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__dhs_ecc_bypass = _val.convert_to< dhs_ecc_bypass_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_pkt_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 20;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_pkt_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_csr_intr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__dowstream = _val.convert_to< dowstream_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__dowstream_enable = _val.convert_to< dowstream_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_CNT_ppa_pe9_phv_out_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe9_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe8_phv_out_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe8_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe7_phv_out_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe7_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe6_phv_out_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe6_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe5_phv_out_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe5_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe4_phv_out_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe4_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe3_phv_out_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe3_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe2_phv_out_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe2_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe1_phv_out_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe0_phv_out_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_CNT_ppa_ohi_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 40;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 40;
    
    int_var__err = _val.convert_to< err_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__sop_err = _val.convert_to< sop_err_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__eop_err = _val.convert_to< eop_err_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_ppa_csr_CNT_ppa_sw_phv_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__err = _val.convert_to< err_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__sop_err = _val.convert_to< sop_err_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__eop_err = _val.convert_to< eop_err_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_ppa_csr_CNT_ppa_ma_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 40;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 40;
    
    int_var__err = _val.convert_to< err_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__sop_err = _val.convert_to< sop_err_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__eop_err = _val.convert_to< eop_err_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_ppa_csr_CNT_ppa_dp_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 40;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 40;
    
    int_var__err = _val.convert_to< err_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__sop_err = _val.convert_to< sop_err_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__eop_err = _val.convert_to< eop_err_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_ppa_csr_CNT_ppa_pb_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop = _val.convert_to< sop_cpp_int_t >()  ;
    _val = _val >> 40;
    
    int_var__eop = _val.convert_to< eop_cpp_int_t >()  ;
    _val = _val >> 40;
    
    int_var__err = _val.convert_to< err_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__sop_err = _val.convert_to< sop_err_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__eop_err = _val.convert_to< eop_err_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_ppa_csr_cfg_align_chk_profile_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__addsub_start = _val.convert_to< addsub_start_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__start_adj = _val.convert_to< start_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__mod_log2 = _val.convert_to< mod_log2_cpp_int_t >()  ;
    _val = _val >> 8;
    
}

void cap_ppa_csr_cfg_len_chk_profile_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__len_mask = _val.convert_to< len_mask_cpp_int_t >()  ;
    _val = _val >> 14;
    
    int_var__len_shift_left = _val.convert_to< len_shift_left_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__len_shift_val = _val.convert_to< len_shift_val_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__addsub_start = _val.convert_to< addsub_start_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__start_adj = _val.convert_to< start_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
}

void cap_ppa_csr_cfg_csum_phdr_profile_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__fld0_fld_en = _val.convert_to< fld0_fld_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld0_fld_align = _val.convert_to< fld0_fld_align_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld0_fld_start = _val.convert_to< fld0_fld_start_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld0_fld_end = _val.convert_to< fld0_fld_end_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld0_add_len = _val.convert_to< fld0_add_len_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld1_fld_en = _val.convert_to< fld1_fld_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld1_fld_align = _val.convert_to< fld1_fld_align_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld1_fld_start = _val.convert_to< fld1_fld_start_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld1_fld_end = _val.convert_to< fld1_fld_end_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld1_add_len = _val.convert_to< fld1_add_len_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld2_fld_en = _val.convert_to< fld2_fld_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld2_fld_align = _val.convert_to< fld2_fld_align_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld2_fld_start = _val.convert_to< fld2_fld_start_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld2_fld_end = _val.convert_to< fld2_fld_end_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld2_add_len = _val.convert_to< fld2_add_len_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld3_fld_en = _val.convert_to< fld3_fld_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld3_fld_align = _val.convert_to< fld3_fld_align_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld3_fld_start = _val.convert_to< fld3_fld_start_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld3_fld_end = _val.convert_to< fld3_fld_end_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld3_add_len = _val.convert_to< fld3_add_len_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_csum_profile_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__csum_loc_use_phdr_ohi = _val.convert_to< csum_loc_use_phdr_ohi_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum_8b = _val.convert_to< csum_8b_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_csum_flit_num = _val.convert_to< phv_csum_flit_num_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__end_eop = _val.convert_to< end_eop_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__len_mask = _val.convert_to< len_mask_cpp_int_t >()  ;
    _val = _val >> 14;
    
    int_var__len_shift_left = _val.convert_to< len_shift_left_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__len_shift_val = _val.convert_to< len_shift_val_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__addsub_start = _val.convert_to< addsub_start_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__start_adj = _val.convert_to< start_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__addsub_end = _val.convert_to< addsub_end_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__end_adj = _val.convert_to< end_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__addsub_phdr = _val.convert_to< addsub_phdr_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phdr_adj = _val.convert_to< phdr_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__addsub_csum_loc = _val.convert_to< addsub_csum_loc_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum_loc_adj = _val.convert_to< csum_loc_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__align = _val.convert_to< align_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__add_val = _val.convert_to< add_val_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_ppa_csr_cfg_crc_mask_profile_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__fld0_mask_en = _val.convert_to< fld0_mask_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld0_use_ohi = _val.convert_to< fld0_use_ohi_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld0_start_adj = _val.convert_to< fld0_start_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld0_end_adj = _val.convert_to< fld0_end_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld0_fill = _val.convert_to< fld0_fill_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld0_skip_first_nibble = _val.convert_to< fld0_skip_first_nibble_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld1_mask_en = _val.convert_to< fld1_mask_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld1_use_ohi = _val.convert_to< fld1_use_ohi_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld1_start_adj = _val.convert_to< fld1_start_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld1_end_adj = _val.convert_to< fld1_end_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld1_fill = _val.convert_to< fld1_fill_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld1_skip_first_nibble = _val.convert_to< fld1_skip_first_nibble_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld2_mask_en = _val.convert_to< fld2_mask_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld2_use_ohi = _val.convert_to< fld2_use_ohi_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld2_start_adj = _val.convert_to< fld2_start_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld2_end_adj = _val.convert_to< fld2_end_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld2_fill = _val.convert_to< fld2_fill_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld2_skip_first_nibble = _val.convert_to< fld2_skip_first_nibble_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld3_mask_en = _val.convert_to< fld3_mask_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld3_use_ohi = _val.convert_to< fld3_use_ohi_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld3_start_adj = _val.convert_to< fld3_start_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld3_end_adj = _val.convert_to< fld3_end_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld3_fill = _val.convert_to< fld3_fill_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld3_skip_first_nibble = _val.convert_to< fld3_skip_first_nibble_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld4_mask_en = _val.convert_to< fld4_mask_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld4_use_ohi = _val.convert_to< fld4_use_ohi_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld4_start_adj = _val.convert_to< fld4_start_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld4_end_adj = _val.convert_to< fld4_end_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld4_fill = _val.convert_to< fld4_fill_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld4_skip_first_nibble = _val.convert_to< fld4_skip_first_nibble_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld5_mask_en = _val.convert_to< fld5_mask_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld5_use_ohi = _val.convert_to< fld5_use_ohi_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld5_start_adj = _val.convert_to< fld5_start_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld5_end_adj = _val.convert_to< fld5_end_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__fld5_fill = _val.convert_to< fld5_fill_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__fld5_skip_first_nibble = _val.convert_to< fld5_skip_first_nibble_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_crc_profile_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__len_mask = _val.convert_to< len_mask_cpp_int_t >()  ;
    _val = _val >> 14;
    
    int_var__len_shift_left = _val.convert_to< len_shift_left_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__len_shift_val = _val.convert_to< len_shift_val_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__addsub_start = _val.convert_to< addsub_start_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__start_adj = _val.convert_to< start_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__addsub_end = _val.convert_to< addsub_end_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__end_adj = _val.convert_to< end_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__addsub_mask = _val.convert_to< addsub_mask_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__mask_adj = _val.convert_to< mask_adj_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__end_eop = _val.convert_to< end_eop_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__mask_prof_sel = _val.convert_to< mask_prof_sel_cpp_int_t >()  ;
    _val = _val >> 2;
    
}

void cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__hit = _val.convert_to< hit_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__hit_addr = _val.convert_to< hit_addr_cpp_int_t >()  ;
    _val = _val >> 9;
    
}

void cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__key = _val.convert_to< key_cpp_int_t >()  ;
    _val = _val >> 64;
    
    int_var__mask = _val.convert_to< mask_cpp_int_t >()  ;
    _val = _val >> 64;
    
}

void cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__vld = _val.convert_to< vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__hit = _val.convert_to< hit_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__hit_addr = _val.convert_to< hit_addr_cpp_int_t >()  ;
    _val = _val >> 9;
    
}

void cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__key = _val.convert_to< key_cpp_int_t >()  ;
    _val = _val >> 64;
    
    int_var__mask = _val.convert_to< mask_cpp_int_t >()  ;
    _val = _val >> 64;
    
}

void cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__vld = _val.convert_to< vld_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_cfg_init_profile_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__curr_offset = _val.convert_to< curr_offset_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__state = _val.convert_to< state_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__lkp_val_pkt_idx0 = _val.convert_to< lkp_val_pkt_idx0_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__lkp_val_pkt_idx1 = _val.convert_to< lkp_val_pkt_idx1_cpp_int_t >()  ;
    _val = _val >> 6;
    
    int_var__lkp_val_pkt_idx2 = _val.convert_to< lkp_val_pkt_idx2_cpp_int_t >()  ;
    _val = _val >> 6;
    
}

void cap_ppa_csr_cfg_ctrl_thresh_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__outphv_ff = _val.convert_to< outphv_ff_cpp_int_t >()  ;
    _val = _val >> 8;
    
    int_var__phv_ff = _val.convert_to< phv_ff_cpp_int_t >()  ;
    _val = _val >> 5;
    
    int_var__chk_ff = _val.convert_to< chk_ff_cpp_int_t >()  ;
    _val = _val >> 6;
    
}

void cap_ppa_csr_cfg_ctrl_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__pe_enable = _val.convert_to< pe_enable_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__parse_loop_cnt = _val.convert_to< parse_loop_cnt_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__num_phv_flit = _val.convert_to< num_phv_flit_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__state_lkp_catchall_entry = _val.convert_to< state_lkp_catchall_entry_cpp_int_t >()  ;
    _val = _val >> 9;
    
    int_var__phv_set_hw_err_en = _val.convert_to< phv_set_hw_err_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__phv_set_parser_err_en = _val.convert_to< phv_set_parser_err_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__gso_csum_en = _val.convert_to< gso_csum_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pe_err_vec_en = _val.convert_to< pe_err_vec_en_cpp_int_t >()  ;
    _val = _val >> 7;
    
    int_var__end_offset_en = _val.convert_to< end_offset_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__end_offset_flit_num = _val.convert_to< end_offset_flit_num_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__tcam_key_ctl = _val.convert_to< tcam_key_ctl_cpp_int_t >()  ;
    _val = _val >> 7;
    
    int_var__crc_start_offset_err_en = _val.convert_to< crc_start_offset_err_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__csum_start_offset_err_en = _val.convert_to< csum_start_offset_err_en_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_ppa_csr_rdintr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ireg = _val.convert_to< ireg_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_base_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__scratch_reg = _val.convert_to< scratch_reg_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_ppa_csr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    base.all( _val);
    _val = _val >> base.get_width(); 
    rdintr.all( _val);
    _val = _val >> rdintr.get_width(); 
    cfg_ctrl.all( _val);
    _val = _val >> cfg_ctrl.get_width(); 
    cfg_ctrl_thresh.all( _val);
    _val = _val >> cfg_ctrl_thresh.get_width(); 
    #if 16 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_init_profile
    for(int ii = 0; ii < 16; ii++) {
        cfg_init_profile[ii].all(_val);
        _val = _val >> cfg_init_profile[ii].get_width();
    }
    #endif
    
    cfg_bndl0_state_lkp_tcam_grst.all( _val);
    _val = _val >> cfg_bndl0_state_lkp_tcam_grst.get_width(); 
    cfg_bndl0_state_lkp_tcam_ind.all( _val);
    _val = _val >> cfg_bndl0_state_lkp_tcam_ind.get_width(); 
    sta_bndl0_state_lkp_tcam_ind.all( _val);
    _val = _val >> sta_bndl0_state_lkp_tcam_ind.get_width(); 
    cfg_bndl1_state_lkp_tcam_grst.all( _val);
    _val = _val >> cfg_bndl1_state_lkp_tcam_grst.get_width(); 
    cfg_bndl1_state_lkp_tcam_ind.all( _val);
    _val = _val >> cfg_bndl1_state_lkp_tcam_ind.get_width(); 
    sta_bndl1_state_lkp_tcam_ind.all( _val);
    _val = _val >> sta_bndl1_state_lkp_tcam_ind.get_width(); 
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_crc_profile
    for(int ii = 0; ii < 8; ii++) {
        cfg_crc_profile[ii].all(_val);
        _val = _val >> cfg_crc_profile[ii].get_width();
    }
    #endif
    
    #if 4 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_crc_mask_profile
    for(int ii = 0; ii < 4; ii++) {
        cfg_crc_mask_profile[ii].all(_val);
        _val = _val >> cfg_crc_mask_profile[ii].get_width();
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_csum_profile
    for(int ii = 0; ii < 8; ii++) {
        cfg_csum_profile[ii].all(_val);
        _val = _val >> cfg_csum_profile[ii].get_width();
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_csum_phdr_profile
    for(int ii = 0; ii < 8; ii++) {
        cfg_csum_phdr_profile[ii].all(_val);
        _val = _val >> cfg_csum_phdr_profile[ii].get_width();
    }
    #endif
    
    #if 4 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_len_chk_profile
    for(int ii = 0; ii < 4; ii++) {
        cfg_len_chk_profile[ii].all(_val);
        _val = _val >> cfg_len_chk_profile[ii].get_width();
    }
    #endif
    
    #if 4 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_align_chk_profile
    for(int ii = 0; ii < 4; ii++) {
        cfg_align_chk_profile[ii].all(_val);
        _val = _val >> cfg_align_chk_profile[ii].get_width();
    }
    #endif
    
    CNT_ppa_pb.all( _val);
    _val = _val >> CNT_ppa_pb.get_width(); 
    CNT_ppa_dp.all( _val);
    _val = _val >> CNT_ppa_dp.get_width(); 
    CNT_ppa_ma.all( _val);
    _val = _val >> CNT_ppa_ma.get_width(); 
    CNT_ppa_sw_phv.all( _val);
    _val = _val >> CNT_ppa_sw_phv.get_width(); 
    CNT_ppa_ohi.all( _val);
    _val = _val >> CNT_ppa_ohi.get_width(); 
    CNT_ppa_pe0_pkt_in.all( _val);
    _val = _val >> CNT_ppa_pe0_pkt_in.get_width(); 
    CNT_ppa_pe0.all( _val);
    _val = _val >> CNT_ppa_pe0.get_width(); 
    CNT_ppa_pe0_phv_out.all( _val);
    _val = _val >> CNT_ppa_pe0_phv_out.get_width(); 
    CNT_ppa_pe1_pkt_in.all( _val);
    _val = _val >> CNT_ppa_pe1_pkt_in.get_width(); 
    CNT_ppa_pe1.all( _val);
    _val = _val >> CNT_ppa_pe1.get_width(); 
    CNT_ppa_pe1_phv_out.all( _val);
    _val = _val >> CNT_ppa_pe1_phv_out.get_width(); 
    CNT_ppa_pe2_pkt_in.all( _val);
    _val = _val >> CNT_ppa_pe2_pkt_in.get_width(); 
    CNT_ppa_pe2.all( _val);
    _val = _val >> CNT_ppa_pe2.get_width(); 
    CNT_ppa_pe2_phv_out.all( _val);
    _val = _val >> CNT_ppa_pe2_phv_out.get_width(); 
    CNT_ppa_pe3_pkt_in.all( _val);
    _val = _val >> CNT_ppa_pe3_pkt_in.get_width(); 
    CNT_ppa_pe3.all( _val);
    _val = _val >> CNT_ppa_pe3.get_width(); 
    CNT_ppa_pe3_phv_out.all( _val);
    _val = _val >> CNT_ppa_pe3_phv_out.get_width(); 
    CNT_ppa_pe4_pkt_in.all( _val);
    _val = _val >> CNT_ppa_pe4_pkt_in.get_width(); 
    CNT_ppa_pe4.all( _val);
    _val = _val >> CNT_ppa_pe4.get_width(); 
    CNT_ppa_pe4_phv_out.all( _val);
    _val = _val >> CNT_ppa_pe4_phv_out.get_width(); 
    CNT_ppa_pe5_pkt_in.all( _val);
    _val = _val >> CNT_ppa_pe5_pkt_in.get_width(); 
    CNT_ppa_pe5.all( _val);
    _val = _val >> CNT_ppa_pe5.get_width(); 
    CNT_ppa_pe5_phv_out.all( _val);
    _val = _val >> CNT_ppa_pe5_phv_out.get_width(); 
    CNT_ppa_pe6_pkt_in.all( _val);
    _val = _val >> CNT_ppa_pe6_pkt_in.get_width(); 
    CNT_ppa_pe6.all( _val);
    _val = _val >> CNT_ppa_pe6.get_width(); 
    CNT_ppa_pe6_phv_out.all( _val);
    _val = _val >> CNT_ppa_pe6_phv_out.get_width(); 
    CNT_ppa_pe7_pkt_in.all( _val);
    _val = _val >> CNT_ppa_pe7_pkt_in.get_width(); 
    CNT_ppa_pe7.all( _val);
    _val = _val >> CNT_ppa_pe7.get_width(); 
    CNT_ppa_pe7_phv_out.all( _val);
    _val = _val >> CNT_ppa_pe7_phv_out.get_width(); 
    CNT_ppa_pe8_pkt_in.all( _val);
    _val = _val >> CNT_ppa_pe8_pkt_in.get_width(); 
    CNT_ppa_pe8.all( _val);
    _val = _val >> CNT_ppa_pe8.get_width(); 
    CNT_ppa_pe8_phv_out.all( _val);
    _val = _val >> CNT_ppa_pe8_phv_out.get_width(); 
    CNT_ppa_pe9_pkt_in.all( _val);
    _val = _val >> CNT_ppa_pe9_pkt_in.get_width(); 
    CNT_ppa_pe9.all( _val);
    _val = _val >> CNT_ppa_pe9.get_width(); 
    CNT_ppa_pe9_phv_out.all( _val);
    _val = _val >> CNT_ppa_pe9_phv_out.get_width(); 
    csr_intr.all( _val);
    _val = _val >> csr_intr.get_width(); 
    cfg_pkt_mem.all( _val);
    _val = _val >> cfg_pkt_mem.get_width(); 
    sta_pkt_mem.all( _val);
    _val = _val >> sta_pkt_mem.get_width(); 
    cfg_bndl0_state_lkp_sram.all( _val);
    _val = _val >> cfg_bndl0_state_lkp_sram.get_width(); 
    sta_bndl0_state_lkp_sram.all( _val);
    _val = _val >> sta_bndl0_state_lkp_sram.get_width(); 
    cfg_bndl1_state_lkp_sram.all( _val);
    _val = _val >> cfg_bndl1_state_lkp_sram.get_width(); 
    sta_bndl1_state_lkp_sram.all( _val);
    _val = _val >> sta_bndl1_state_lkp_sram.get_width(); 
    cfg_bndl0_inq_mem.all( _val);
    _val = _val >> cfg_bndl0_inq_mem.get_width(); 
    sta_bndl0_inq_mem.all( _val);
    _val = _val >> sta_bndl0_inq_mem.get_width(); 
    cfg_bndl1_inq_mem.all( _val);
    _val = _val >> cfg_bndl1_inq_mem.get_width(); 
    sta_bndl1_inq_mem.all( _val);
    _val = _val >> sta_bndl1_inq_mem.get_width(); 
    cfg_outq_phv_mem.all( _val);
    _val = _val >> cfg_outq_phv_mem.get_width(); 
    sta_outq_phv_mem.all( _val);
    _val = _val >> sta_outq_phv_mem.get_width(); 
    cfg_outq_ohi_mem.all( _val);
    _val = _val >> cfg_outq_ohi_mem.get_width(); 
    sta_outq_ohi_mem.all( _val);
    _val = _val >> sta_outq_ohi_mem.get_width(); 
    cfg_bndl0_state_lkp_tcam.all( _val);
    _val = _val >> cfg_bndl0_state_lkp_tcam.get_width(); 
    sta_bndl0_state_lkp_tcam.all( _val);
    _val = _val >> sta_bndl0_state_lkp_tcam.get_width(); 
    cfg_bndl1_state_lkp_tcam.all( _val);
    _val = _val >> cfg_bndl1_state_lkp_tcam.get_width(); 
    sta_bndl1_state_lkp_tcam.all( _val);
    _val = _val >> sta_bndl1_state_lkp_tcam.get_width(); 
    cfg_pe0_phv_mem.all( _val);
    _val = _val >> cfg_pe0_phv_mem.get_width(); 
    sta_pe0_phv_mem.all( _val);
    _val = _val >> sta_pe0_phv_mem.get_width(); 
    cfg_pe1_phv_mem.all( _val);
    _val = _val >> cfg_pe1_phv_mem.get_width(); 
    sta_pe1_phv_mem.all( _val);
    _val = _val >> sta_pe1_phv_mem.get_width(); 
    cfg_pe2_phv_mem.all( _val);
    _val = _val >> cfg_pe2_phv_mem.get_width(); 
    sta_pe2_phv_mem.all( _val);
    _val = _val >> sta_pe2_phv_mem.get_width(); 
    cfg_pe3_phv_mem.all( _val);
    _val = _val >> cfg_pe3_phv_mem.get_width(); 
    sta_pe3_phv_mem.all( _val);
    _val = _val >> sta_pe3_phv_mem.get_width(); 
    cfg_pe4_phv_mem.all( _val);
    _val = _val >> cfg_pe4_phv_mem.get_width(); 
    sta_pe4_phv_mem.all( _val);
    _val = _val >> sta_pe4_phv_mem.get_width(); 
    cfg_pe5_phv_mem.all( _val);
    _val = _val >> cfg_pe5_phv_mem.get_width(); 
    sta_pe5_phv_mem.all( _val);
    _val = _val >> sta_pe5_phv_mem.get_width(); 
    cfg_pe6_phv_mem.all( _val);
    _val = _val >> cfg_pe6_phv_mem.get_width(); 
    sta_pe6_phv_mem.all( _val);
    _val = _val >> sta_pe6_phv_mem.get_width(); 
    cfg_pe7_phv_mem.all( _val);
    _val = _val >> cfg_pe7_phv_mem.get_width(); 
    sta_pe7_phv_mem.all( _val);
    _val = _val >> sta_pe7_phv_mem.get_width(); 
    cfg_pe8_phv_mem.all( _val);
    _val = _val >> cfg_pe8_phv_mem.get_width(); 
    sta_pe8_phv_mem.all( _val);
    _val = _val >> sta_pe8_phv_mem.get_width(); 
    cfg_pe9_phv_mem.all( _val);
    _val = _val >> cfg_pe9_phv_mem.get_width(); 
    sta_pe9_phv_mem.all( _val);
    _val = _val >> sta_pe9_phv_mem.get_width(); 
    cfg_sw_phv_global.all( _val);
    _val = _val >> cfg_sw_phv_global.get_width(); 
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_sw_phv_control
    for(int ii = 0; ii < 8; ii++) {
        cfg_sw_phv_control[ii].all(_val);
        _val = _val >> cfg_sw_phv_control[ii].get_width();
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_sw_phv_config
    for(int ii = 0; ii < 8; ii++) {
        cfg_sw_phv_config[ii].all(_val);
        _val = _val >> cfg_sw_phv_config[ii].get_width();
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // sta_sw_phv_state
    for(int ii = 0; ii < 8; ii++) {
        sta_sw_phv_state[ii].all(_val);
        _val = _val >> sta_sw_phv_state[ii].get_width();
    }
    #endif
    
    cfg_sw_phv_mem.all( _val);
    _val = _val >> cfg_sw_phv_mem.get_width(); 
    sta_sw_phv_mem.all( _val);
    _val = _val >> sta_sw_phv_mem.get_width(); 
    sta_reorder_phv_not_sop_err.all( _val);
    _val = _val >> sta_reorder_phv_not_sop_err.get_width(); 
    sta_reorder.all( _val);
    _val = _val >> sta_reorder.get_width(); 
    sta_csum0.all( _val);
    _val = _val >> sta_csum0.get_width(); 
    sta_csum1.all( _val);
    _val = _val >> sta_csum1.get_width(); 
    sta_csum2.all( _val);
    _val = _val >> sta_csum2.get_width(); 
    sta_csum3.all( _val);
    _val = _val >> sta_csum3.get_width(); 
    sta_csum4.all( _val);
    _val = _val >> sta_csum4.get_width(); 
    sta_chkr_seq_id.all( _val);
    _val = _val >> sta_chkr_seq_id.get_width(); 
    sta_pe0.all( _val);
    _val = _val >> sta_pe0.get_width(); 
    sta_pe1.all( _val);
    _val = _val >> sta_pe1.get_width(); 
    sta_pe2.all( _val);
    _val = _val >> sta_pe2.get_width(); 
    sta_pe3.all( _val);
    _val = _val >> sta_pe3.get_width(); 
    sta_pe4.all( _val);
    _val = _val >> sta_pe4.get_width(); 
    sta_pe5.all( _val);
    _val = _val >> sta_pe5.get_width(); 
    sta_pe6.all( _val);
    _val = _val >> sta_pe6.get_width(); 
    sta_pe7.all( _val);
    _val = _val >> sta_pe7.get_width(); 
    sta_pe8.all( _val);
    _val = _val >> sta_pe8.get_width(); 
    sta_pe9.all( _val);
    _val = _val >> sta_pe9.get_width(); 
    sta_bndl0_state_lkp.all( _val);
    _val = _val >> sta_bndl0_state_lkp.get_width(); 
    sta_bndl1_state_lkp.all( _val);
    _val = _val >> sta_bndl1_state_lkp.get_width(); 
    sta_fifo.all( _val);
    _val = _val >> sta_fifo.get_width(); 
    sta_bndl0.all( _val);
    _val = _val >> sta_bndl0.get_width(); 
    sta_bndl1.all( _val);
    _val = _val >> sta_bndl1.get_width(); 
    sta_pe_alloc.all( _val);
    _val = _val >> sta_pe_alloc.get_width(); 
    cfg_debug_ctrl.all( _val);
    _val = _val >> cfg_debug_ctrl.get_width(); 
    cfg_debug_port.all( _val);
    _val = _val >> cfg_debug_port.get_width(); 
    cfg_spare.all( _val);
    _val = _val >> cfg_spare.get_width(); 
    cfg_spare_dbg.all( _val);
    _val = _val >> cfg_spare_dbg.get_width(); 
    cfg_preparse.all( _val);
    _val = _val >> cfg_preparse.get_width(); 
    sta_preparse.all( _val);
    _val = _val >> sta_preparse.get_width(); 
    CNT_preparse.all( _val);
    _val = _val >> CNT_preparse.get_width(); 
    dhs_bndl0_state_lkp_tcam.all( _val);
    _val = _val >> dhs_bndl0_state_lkp_tcam.get_width(); 
    dhs_bndl0_state_lkp_tcam_ind.all( _val);
    _val = _val >> dhs_bndl0_state_lkp_tcam_ind.get_width(); 
    dhs_bndl0_state_lkp_sram.all( _val);
    _val = _val >> dhs_bndl0_state_lkp_sram.get_width(); 
    dhs_bndl1_state_lkp_tcam.all( _val);
    _val = _val >> dhs_bndl1_state_lkp_tcam.get_width(); 
    dhs_bndl1_state_lkp_tcam_ind.all( _val);
    _val = _val >> dhs_bndl1_state_lkp_tcam_ind.get_width(); 
    dhs_bndl1_state_lkp_sram.all( _val);
    _val = _val >> dhs_bndl1_state_lkp_sram.get_width(); 
    dhs_sw_phv_mem.all( _val);
    _val = _val >> dhs_sw_phv_mem.get_width(); 
    dhs_dbg_mem.all( _val);
    _val = _val >> dhs_dbg_mem.get_width(); 
    int_groups.all( _val);
    _val = _val >> int_groups.get_width(); 
    int_bndl0.all( _val);
    _val = _val >> int_bndl0.get_width(); 
    int_bndl1.all( _val);
    _val = _val >> int_bndl1.get_width(); 
    int_ecc.all( _val);
    _val = _val >> int_ecc.get_width(); 
    int_fifo1.all( _val);
    _val = _val >> int_fifo1.get_width(); 
    int_fifo2.all( _val);
    _val = _val >> int_fifo2.get_width(); 
    int_pe0.all( _val);
    _val = _val >> int_pe0.get_width(); 
    int_pe1.all( _val);
    _val = _val >> int_pe1.get_width(); 
    int_pe2.all( _val);
    _val = _val >> int_pe2.get_width(); 
    int_pe3.all( _val);
    _val = _val >> int_pe3.get_width(); 
    int_pe4.all( _val);
    _val = _val >> int_pe4.get_width(); 
    int_pe5.all( _val);
    _val = _val >> int_pe5.get_width(); 
    int_pe6.all( _val);
    _val = _val >> int_pe6.get_width(); 
    int_pe7.all( _val);
    _val = _val >> int_pe7.get_width(); 
    int_pe8.all( _val);
    _val = _val >> int_pe8.get_width(); 
    int_pe9.all( _val);
    _val = _val >> int_pe9.get_width(); 
    int_pa.all( _val);
    _val = _val >> int_pa.get_width(); 
    int_intf.all( _val);
    _val = _val >> int_intf.get_width(); 
    int_sw_phv_mem.all( _val);
    _val = _val >> int_sw_phv_mem.get_width(); 
}

cpp_int cap_ppa_csr_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_sw_phv_mem.get_width(); ret_val = ret_val  | int_sw_phv_mem.all(); 
    ret_val = ret_val << int_intf.get_width(); ret_val = ret_val  | int_intf.all(); 
    ret_val = ret_val << int_pa.get_width(); ret_val = ret_val  | int_pa.all(); 
    ret_val = ret_val << int_pe9.get_width(); ret_val = ret_val  | int_pe9.all(); 
    ret_val = ret_val << int_pe8.get_width(); ret_val = ret_val  | int_pe8.all(); 
    ret_val = ret_val << int_pe7.get_width(); ret_val = ret_val  | int_pe7.all(); 
    ret_val = ret_val << int_pe6.get_width(); ret_val = ret_val  | int_pe6.all(); 
    ret_val = ret_val << int_pe5.get_width(); ret_val = ret_val  | int_pe5.all(); 
    ret_val = ret_val << int_pe4.get_width(); ret_val = ret_val  | int_pe4.all(); 
    ret_val = ret_val << int_pe3.get_width(); ret_val = ret_val  | int_pe3.all(); 
    ret_val = ret_val << int_pe2.get_width(); ret_val = ret_val  | int_pe2.all(); 
    ret_val = ret_val << int_pe1.get_width(); ret_val = ret_val  | int_pe1.all(); 
    ret_val = ret_val << int_pe0.get_width(); ret_val = ret_val  | int_pe0.all(); 
    ret_val = ret_val << int_fifo2.get_width(); ret_val = ret_val  | int_fifo2.all(); 
    ret_val = ret_val << int_fifo1.get_width(); ret_val = ret_val  | int_fifo1.all(); 
    ret_val = ret_val << int_ecc.get_width(); ret_val = ret_val  | int_ecc.all(); 
    ret_val = ret_val << int_bndl1.get_width(); ret_val = ret_val  | int_bndl1.all(); 
    ret_val = ret_val << int_bndl0.get_width(); ret_val = ret_val  | int_bndl0.all(); 
    ret_val = ret_val << int_groups.get_width(); ret_val = ret_val  | int_groups.all(); 
    ret_val = ret_val << dhs_dbg_mem.get_width(); ret_val = ret_val  | dhs_dbg_mem.all(); 
    ret_val = ret_val << dhs_sw_phv_mem.get_width(); ret_val = ret_val  | dhs_sw_phv_mem.all(); 
    ret_val = ret_val << dhs_bndl1_state_lkp_sram.get_width(); ret_val = ret_val  | dhs_bndl1_state_lkp_sram.all(); 
    ret_val = ret_val << dhs_bndl1_state_lkp_tcam_ind.get_width(); ret_val = ret_val  | dhs_bndl1_state_lkp_tcam_ind.all(); 
    ret_val = ret_val << dhs_bndl1_state_lkp_tcam.get_width(); ret_val = ret_val  | dhs_bndl1_state_lkp_tcam.all(); 
    ret_val = ret_val << dhs_bndl0_state_lkp_sram.get_width(); ret_val = ret_val  | dhs_bndl0_state_lkp_sram.all(); 
    ret_val = ret_val << dhs_bndl0_state_lkp_tcam_ind.get_width(); ret_val = ret_val  | dhs_bndl0_state_lkp_tcam_ind.all(); 
    ret_val = ret_val << dhs_bndl0_state_lkp_tcam.get_width(); ret_val = ret_val  | dhs_bndl0_state_lkp_tcam.all(); 
    ret_val = ret_val << CNT_preparse.get_width(); ret_val = ret_val  | CNT_preparse.all(); 
    ret_val = ret_val << sta_preparse.get_width(); ret_val = ret_val  | sta_preparse.all(); 
    ret_val = ret_val << cfg_preparse.get_width(); ret_val = ret_val  | cfg_preparse.all(); 
    ret_val = ret_val << cfg_spare_dbg.get_width(); ret_val = ret_val  | cfg_spare_dbg.all(); 
    ret_val = ret_val << cfg_spare.get_width(); ret_val = ret_val  | cfg_spare.all(); 
    ret_val = ret_val << cfg_debug_port.get_width(); ret_val = ret_val  | cfg_debug_port.all(); 
    ret_val = ret_val << cfg_debug_ctrl.get_width(); ret_val = ret_val  | cfg_debug_ctrl.all(); 
    ret_val = ret_val << sta_pe_alloc.get_width(); ret_val = ret_val  | sta_pe_alloc.all(); 
    ret_val = ret_val << sta_bndl1.get_width(); ret_val = ret_val  | sta_bndl1.all(); 
    ret_val = ret_val << sta_bndl0.get_width(); ret_val = ret_val  | sta_bndl0.all(); 
    ret_val = ret_val << sta_fifo.get_width(); ret_val = ret_val  | sta_fifo.all(); 
    ret_val = ret_val << sta_bndl1_state_lkp.get_width(); ret_val = ret_val  | sta_bndl1_state_lkp.all(); 
    ret_val = ret_val << sta_bndl0_state_lkp.get_width(); ret_val = ret_val  | sta_bndl0_state_lkp.all(); 
    ret_val = ret_val << sta_pe9.get_width(); ret_val = ret_val  | sta_pe9.all(); 
    ret_val = ret_val << sta_pe8.get_width(); ret_val = ret_val  | sta_pe8.all(); 
    ret_val = ret_val << sta_pe7.get_width(); ret_val = ret_val  | sta_pe7.all(); 
    ret_val = ret_val << sta_pe6.get_width(); ret_val = ret_val  | sta_pe6.all(); 
    ret_val = ret_val << sta_pe5.get_width(); ret_val = ret_val  | sta_pe5.all(); 
    ret_val = ret_val << sta_pe4.get_width(); ret_val = ret_val  | sta_pe4.all(); 
    ret_val = ret_val << sta_pe3.get_width(); ret_val = ret_val  | sta_pe3.all(); 
    ret_val = ret_val << sta_pe2.get_width(); ret_val = ret_val  | sta_pe2.all(); 
    ret_val = ret_val << sta_pe1.get_width(); ret_val = ret_val  | sta_pe1.all(); 
    ret_val = ret_val << sta_pe0.get_width(); ret_val = ret_val  | sta_pe0.all(); 
    ret_val = ret_val << sta_chkr_seq_id.get_width(); ret_val = ret_val  | sta_chkr_seq_id.all(); 
    ret_val = ret_val << sta_csum4.get_width(); ret_val = ret_val  | sta_csum4.all(); 
    ret_val = ret_val << sta_csum3.get_width(); ret_val = ret_val  | sta_csum3.all(); 
    ret_val = ret_val << sta_csum2.get_width(); ret_val = ret_val  | sta_csum2.all(); 
    ret_val = ret_val << sta_csum1.get_width(); ret_val = ret_val  | sta_csum1.all(); 
    ret_val = ret_val << sta_csum0.get_width(); ret_val = ret_val  | sta_csum0.all(); 
    ret_val = ret_val << sta_reorder.get_width(); ret_val = ret_val  | sta_reorder.all(); 
    ret_val = ret_val << sta_reorder_phv_not_sop_err.get_width(); ret_val = ret_val  | sta_reorder_phv_not_sop_err.all(); 
    ret_val = ret_val << sta_sw_phv_mem.get_width(); ret_val = ret_val  | sta_sw_phv_mem.all(); 
    ret_val = ret_val << cfg_sw_phv_mem.get_width(); ret_val = ret_val  | cfg_sw_phv_mem.all(); 
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // sta_sw_phv_state
    for(int ii = 8-1; ii >= 0; ii--) {
         ret_val = ret_val << sta_sw_phv_state[ii].get_width(); ret_val = ret_val  | sta_sw_phv_state[ii].all(); 
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_sw_phv_config
    for(int ii = 8-1; ii >= 0; ii--) {
         ret_val = ret_val << cfg_sw_phv_config[ii].get_width(); ret_val = ret_val  | cfg_sw_phv_config[ii].all(); 
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_sw_phv_control
    for(int ii = 8-1; ii >= 0; ii--) {
         ret_val = ret_val << cfg_sw_phv_control[ii].get_width(); ret_val = ret_val  | cfg_sw_phv_control[ii].all(); 
    }
    #endif
    
    ret_val = ret_val << cfg_sw_phv_global.get_width(); ret_val = ret_val  | cfg_sw_phv_global.all(); 
    ret_val = ret_val << sta_pe9_phv_mem.get_width(); ret_val = ret_val  | sta_pe9_phv_mem.all(); 
    ret_val = ret_val << cfg_pe9_phv_mem.get_width(); ret_val = ret_val  | cfg_pe9_phv_mem.all(); 
    ret_val = ret_val << sta_pe8_phv_mem.get_width(); ret_val = ret_val  | sta_pe8_phv_mem.all(); 
    ret_val = ret_val << cfg_pe8_phv_mem.get_width(); ret_val = ret_val  | cfg_pe8_phv_mem.all(); 
    ret_val = ret_val << sta_pe7_phv_mem.get_width(); ret_val = ret_val  | sta_pe7_phv_mem.all(); 
    ret_val = ret_val << cfg_pe7_phv_mem.get_width(); ret_val = ret_val  | cfg_pe7_phv_mem.all(); 
    ret_val = ret_val << sta_pe6_phv_mem.get_width(); ret_val = ret_val  | sta_pe6_phv_mem.all(); 
    ret_val = ret_val << cfg_pe6_phv_mem.get_width(); ret_val = ret_val  | cfg_pe6_phv_mem.all(); 
    ret_val = ret_val << sta_pe5_phv_mem.get_width(); ret_val = ret_val  | sta_pe5_phv_mem.all(); 
    ret_val = ret_val << cfg_pe5_phv_mem.get_width(); ret_val = ret_val  | cfg_pe5_phv_mem.all(); 
    ret_val = ret_val << sta_pe4_phv_mem.get_width(); ret_val = ret_val  | sta_pe4_phv_mem.all(); 
    ret_val = ret_val << cfg_pe4_phv_mem.get_width(); ret_val = ret_val  | cfg_pe4_phv_mem.all(); 
    ret_val = ret_val << sta_pe3_phv_mem.get_width(); ret_val = ret_val  | sta_pe3_phv_mem.all(); 
    ret_val = ret_val << cfg_pe3_phv_mem.get_width(); ret_val = ret_val  | cfg_pe3_phv_mem.all(); 
    ret_val = ret_val << sta_pe2_phv_mem.get_width(); ret_val = ret_val  | sta_pe2_phv_mem.all(); 
    ret_val = ret_val << cfg_pe2_phv_mem.get_width(); ret_val = ret_val  | cfg_pe2_phv_mem.all(); 
    ret_val = ret_val << sta_pe1_phv_mem.get_width(); ret_val = ret_val  | sta_pe1_phv_mem.all(); 
    ret_val = ret_val << cfg_pe1_phv_mem.get_width(); ret_val = ret_val  | cfg_pe1_phv_mem.all(); 
    ret_val = ret_val << sta_pe0_phv_mem.get_width(); ret_val = ret_val  | sta_pe0_phv_mem.all(); 
    ret_val = ret_val << cfg_pe0_phv_mem.get_width(); ret_val = ret_val  | cfg_pe0_phv_mem.all(); 
    ret_val = ret_val << sta_bndl1_state_lkp_tcam.get_width(); ret_val = ret_val  | sta_bndl1_state_lkp_tcam.all(); 
    ret_val = ret_val << cfg_bndl1_state_lkp_tcam.get_width(); ret_val = ret_val  | cfg_bndl1_state_lkp_tcam.all(); 
    ret_val = ret_val << sta_bndl0_state_lkp_tcam.get_width(); ret_val = ret_val  | sta_bndl0_state_lkp_tcam.all(); 
    ret_val = ret_val << cfg_bndl0_state_lkp_tcam.get_width(); ret_val = ret_val  | cfg_bndl0_state_lkp_tcam.all(); 
    ret_val = ret_val << sta_outq_ohi_mem.get_width(); ret_val = ret_val  | sta_outq_ohi_mem.all(); 
    ret_val = ret_val << cfg_outq_ohi_mem.get_width(); ret_val = ret_val  | cfg_outq_ohi_mem.all(); 
    ret_val = ret_val << sta_outq_phv_mem.get_width(); ret_val = ret_val  | sta_outq_phv_mem.all(); 
    ret_val = ret_val << cfg_outq_phv_mem.get_width(); ret_val = ret_val  | cfg_outq_phv_mem.all(); 
    ret_val = ret_val << sta_bndl1_inq_mem.get_width(); ret_val = ret_val  | sta_bndl1_inq_mem.all(); 
    ret_val = ret_val << cfg_bndl1_inq_mem.get_width(); ret_val = ret_val  | cfg_bndl1_inq_mem.all(); 
    ret_val = ret_val << sta_bndl0_inq_mem.get_width(); ret_val = ret_val  | sta_bndl0_inq_mem.all(); 
    ret_val = ret_val << cfg_bndl0_inq_mem.get_width(); ret_val = ret_val  | cfg_bndl0_inq_mem.all(); 
    ret_val = ret_val << sta_bndl1_state_lkp_sram.get_width(); ret_val = ret_val  | sta_bndl1_state_lkp_sram.all(); 
    ret_val = ret_val << cfg_bndl1_state_lkp_sram.get_width(); ret_val = ret_val  | cfg_bndl1_state_lkp_sram.all(); 
    ret_val = ret_val << sta_bndl0_state_lkp_sram.get_width(); ret_val = ret_val  | sta_bndl0_state_lkp_sram.all(); 
    ret_val = ret_val << cfg_bndl0_state_lkp_sram.get_width(); ret_val = ret_val  | cfg_bndl0_state_lkp_sram.all(); 
    ret_val = ret_val << sta_pkt_mem.get_width(); ret_val = ret_val  | sta_pkt_mem.all(); 
    ret_val = ret_val << cfg_pkt_mem.get_width(); ret_val = ret_val  | cfg_pkt_mem.all(); 
    ret_val = ret_val << csr_intr.get_width(); ret_val = ret_val  | csr_intr.all(); 
    ret_val = ret_val << CNT_ppa_pe9_phv_out.get_width(); ret_val = ret_val  | CNT_ppa_pe9_phv_out.all(); 
    ret_val = ret_val << CNT_ppa_pe9.get_width(); ret_val = ret_val  | CNT_ppa_pe9.all(); 
    ret_val = ret_val << CNT_ppa_pe9_pkt_in.get_width(); ret_val = ret_val  | CNT_ppa_pe9_pkt_in.all(); 
    ret_val = ret_val << CNT_ppa_pe8_phv_out.get_width(); ret_val = ret_val  | CNT_ppa_pe8_phv_out.all(); 
    ret_val = ret_val << CNT_ppa_pe8.get_width(); ret_val = ret_val  | CNT_ppa_pe8.all(); 
    ret_val = ret_val << CNT_ppa_pe8_pkt_in.get_width(); ret_val = ret_val  | CNT_ppa_pe8_pkt_in.all(); 
    ret_val = ret_val << CNT_ppa_pe7_phv_out.get_width(); ret_val = ret_val  | CNT_ppa_pe7_phv_out.all(); 
    ret_val = ret_val << CNT_ppa_pe7.get_width(); ret_val = ret_val  | CNT_ppa_pe7.all(); 
    ret_val = ret_val << CNT_ppa_pe7_pkt_in.get_width(); ret_val = ret_val  | CNT_ppa_pe7_pkt_in.all(); 
    ret_val = ret_val << CNT_ppa_pe6_phv_out.get_width(); ret_val = ret_val  | CNT_ppa_pe6_phv_out.all(); 
    ret_val = ret_val << CNT_ppa_pe6.get_width(); ret_val = ret_val  | CNT_ppa_pe6.all(); 
    ret_val = ret_val << CNT_ppa_pe6_pkt_in.get_width(); ret_val = ret_val  | CNT_ppa_pe6_pkt_in.all(); 
    ret_val = ret_val << CNT_ppa_pe5_phv_out.get_width(); ret_val = ret_val  | CNT_ppa_pe5_phv_out.all(); 
    ret_val = ret_val << CNT_ppa_pe5.get_width(); ret_val = ret_val  | CNT_ppa_pe5.all(); 
    ret_val = ret_val << CNT_ppa_pe5_pkt_in.get_width(); ret_val = ret_val  | CNT_ppa_pe5_pkt_in.all(); 
    ret_val = ret_val << CNT_ppa_pe4_phv_out.get_width(); ret_val = ret_val  | CNT_ppa_pe4_phv_out.all(); 
    ret_val = ret_val << CNT_ppa_pe4.get_width(); ret_val = ret_val  | CNT_ppa_pe4.all(); 
    ret_val = ret_val << CNT_ppa_pe4_pkt_in.get_width(); ret_val = ret_val  | CNT_ppa_pe4_pkt_in.all(); 
    ret_val = ret_val << CNT_ppa_pe3_phv_out.get_width(); ret_val = ret_val  | CNT_ppa_pe3_phv_out.all(); 
    ret_val = ret_val << CNT_ppa_pe3.get_width(); ret_val = ret_val  | CNT_ppa_pe3.all(); 
    ret_val = ret_val << CNT_ppa_pe3_pkt_in.get_width(); ret_val = ret_val  | CNT_ppa_pe3_pkt_in.all(); 
    ret_val = ret_val << CNT_ppa_pe2_phv_out.get_width(); ret_val = ret_val  | CNT_ppa_pe2_phv_out.all(); 
    ret_val = ret_val << CNT_ppa_pe2.get_width(); ret_val = ret_val  | CNT_ppa_pe2.all(); 
    ret_val = ret_val << CNT_ppa_pe2_pkt_in.get_width(); ret_val = ret_val  | CNT_ppa_pe2_pkt_in.all(); 
    ret_val = ret_val << CNT_ppa_pe1_phv_out.get_width(); ret_val = ret_val  | CNT_ppa_pe1_phv_out.all(); 
    ret_val = ret_val << CNT_ppa_pe1.get_width(); ret_val = ret_val  | CNT_ppa_pe1.all(); 
    ret_val = ret_val << CNT_ppa_pe1_pkt_in.get_width(); ret_val = ret_val  | CNT_ppa_pe1_pkt_in.all(); 
    ret_val = ret_val << CNT_ppa_pe0_phv_out.get_width(); ret_val = ret_val  | CNT_ppa_pe0_phv_out.all(); 
    ret_val = ret_val << CNT_ppa_pe0.get_width(); ret_val = ret_val  | CNT_ppa_pe0.all(); 
    ret_val = ret_val << CNT_ppa_pe0_pkt_in.get_width(); ret_val = ret_val  | CNT_ppa_pe0_pkt_in.all(); 
    ret_val = ret_val << CNT_ppa_ohi.get_width(); ret_val = ret_val  | CNT_ppa_ohi.all(); 
    ret_val = ret_val << CNT_ppa_sw_phv.get_width(); ret_val = ret_val  | CNT_ppa_sw_phv.all(); 
    ret_val = ret_val << CNT_ppa_ma.get_width(); ret_val = ret_val  | CNT_ppa_ma.all(); 
    ret_val = ret_val << CNT_ppa_dp.get_width(); ret_val = ret_val  | CNT_ppa_dp.all(); 
    ret_val = ret_val << CNT_ppa_pb.get_width(); ret_val = ret_val  | CNT_ppa_pb.all(); 
    #if 4 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_align_chk_profile
    for(int ii = 4-1; ii >= 0; ii--) {
         ret_val = ret_val << cfg_align_chk_profile[ii].get_width(); ret_val = ret_val  | cfg_align_chk_profile[ii].all(); 
    }
    #endif
    
    #if 4 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_len_chk_profile
    for(int ii = 4-1; ii >= 0; ii--) {
         ret_val = ret_val << cfg_len_chk_profile[ii].get_width(); ret_val = ret_val  | cfg_len_chk_profile[ii].all(); 
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_csum_phdr_profile
    for(int ii = 8-1; ii >= 0; ii--) {
         ret_val = ret_val << cfg_csum_phdr_profile[ii].get_width(); ret_val = ret_val  | cfg_csum_phdr_profile[ii].all(); 
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_csum_profile
    for(int ii = 8-1; ii >= 0; ii--) {
         ret_val = ret_val << cfg_csum_profile[ii].get_width(); ret_val = ret_val  | cfg_csum_profile[ii].all(); 
    }
    #endif
    
    #if 4 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_crc_mask_profile
    for(int ii = 4-1; ii >= 0; ii--) {
         ret_val = ret_val << cfg_crc_mask_profile[ii].get_width(); ret_val = ret_val  | cfg_crc_mask_profile[ii].all(); 
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_crc_profile
    for(int ii = 8-1; ii >= 0; ii--) {
         ret_val = ret_val << cfg_crc_profile[ii].get_width(); ret_val = ret_val  | cfg_crc_profile[ii].all(); 
    }
    #endif
    
    ret_val = ret_val << sta_bndl1_state_lkp_tcam_ind.get_width(); ret_val = ret_val  | sta_bndl1_state_lkp_tcam_ind.all(); 
    ret_val = ret_val << cfg_bndl1_state_lkp_tcam_ind.get_width(); ret_val = ret_val  | cfg_bndl1_state_lkp_tcam_ind.all(); 
    ret_val = ret_val << cfg_bndl1_state_lkp_tcam_grst.get_width(); ret_val = ret_val  | cfg_bndl1_state_lkp_tcam_grst.all(); 
    ret_val = ret_val << sta_bndl0_state_lkp_tcam_ind.get_width(); ret_val = ret_val  | sta_bndl0_state_lkp_tcam_ind.all(); 
    ret_val = ret_val << cfg_bndl0_state_lkp_tcam_ind.get_width(); ret_val = ret_val  | cfg_bndl0_state_lkp_tcam_ind.all(); 
    ret_val = ret_val << cfg_bndl0_state_lkp_tcam_grst.get_width(); ret_val = ret_val  | cfg_bndl0_state_lkp_tcam_grst.all(); 
    #if 16 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // cfg_init_profile
    for(int ii = 16-1; ii >= 0; ii--) {
         ret_val = ret_val << cfg_init_profile[ii].get_width(); ret_val = ret_val  | cfg_init_profile[ii].all(); 
    }
    #endif
    
    ret_val = ret_val << cfg_ctrl_thresh.get_width(); ret_val = ret_val  | cfg_ctrl_thresh.all(); 
    ret_val = ret_val << cfg_ctrl.get_width(); ret_val = ret_val  | cfg_ctrl.all(); 
    ret_val = ret_val << rdintr.get_width(); ret_val = ret_val  | rdintr.all(); 
    ret_val = ret_val << base.get_width(); ret_val = ret_val  | base.all(); 
    return ret_val;
}

cpp_int cap_ppa_csr_base_t::all() const {
    cpp_int ret_val;

    // scratch_reg
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__scratch_reg; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_rdintr_t::all() const {
    cpp_int ret_val;

    // ireg
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__ireg; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_ctrl_t::all() const {
    cpp_int ret_val;

    // csum_start_offset_err_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum_start_offset_err_en; 
    
    // crc_start_offset_err_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crc_start_offset_err_en; 
    
    // tcam_key_ctl
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__tcam_key_ctl; 
    
    // end_offset_flit_num
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__end_offset_flit_num; 
    
    // end_offset_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__end_offset_en; 
    
    // pe_err_vec_en
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__pe_err_vec_en; 
    
    // gso_csum_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__gso_csum_en; 
    
    // phv_set_parser_err_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_set_parser_err_en; 
    
    // phv_set_hw_err_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_set_hw_err_en; 
    
    // state_lkp_catchall_entry
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__state_lkp_catchall_entry; 
    
    // num_phv_flit
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__num_phv_flit; 
    
    // parse_loop_cnt
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__parse_loop_cnt; 
    
    // pe_enable
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__pe_enable; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_ctrl_thresh_t::all() const {
    cpp_int ret_val;

    // chk_ff
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__chk_ff; 
    
    // phv_ff
    ret_val = ret_val << 5; ret_val = ret_val  | int_var__phv_ff; 
    
    // outphv_ff
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__outphv_ff; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_init_profile_t::all() const {
    cpp_int ret_val;

    // lkp_val_pkt_idx2
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__lkp_val_pkt_idx2; 
    
    // lkp_val_pkt_idx1
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__lkp_val_pkt_idx1; 
    
    // lkp_val_pkt_idx0
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__lkp_val_pkt_idx0; 
    
    // state
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__state; 
    
    // curr_offset
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__curr_offset; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t::all() const {
    cpp_int ret_val;

    // vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__vld; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::all() const {
    cpp_int ret_val;

    // mask
    ret_val = ret_val << 64; ret_val = ret_val  | int_var__mask; 
    
    // key
    ret_val = ret_val << 64; ret_val = ret_val  | int_var__key; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::all() const {
    cpp_int ret_val;

    // hit_addr
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__hit_addr; 
    
    // hit
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__hit; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t::all() const {
    cpp_int ret_val;

    // vld
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__vld; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::all() const {
    cpp_int ret_val;

    // mask
    ret_val = ret_val << 64; ret_val = ret_val  | int_var__mask; 
    
    // key
    ret_val = ret_val << 64; ret_val = ret_val  | int_var__key; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::all() const {
    cpp_int ret_val;

    // hit_addr
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__hit_addr; 
    
    // hit
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__hit; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_crc_profile_t::all() const {
    cpp_int ret_val;

    // mask_prof_sel
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__mask_prof_sel; 
    
    // end_eop
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__end_eop; 
    
    // mask_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__mask_adj; 
    
    // addsub_mask
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__addsub_mask; 
    
    // end_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__end_adj; 
    
    // addsub_end
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__addsub_end; 
    
    // start_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__start_adj; 
    
    // addsub_start
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__addsub_start; 
    
    // len_shift_val
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__len_shift_val; 
    
    // len_shift_left
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__len_shift_left; 
    
    // len_mask
    ret_val = ret_val << 14; ret_val = ret_val  | int_var__len_mask; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::all() const {
    cpp_int ret_val;

    // fld5_skip_first_nibble
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld5_skip_first_nibble; 
    
    // fld5_fill
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld5_fill; 
    
    // fld5_end_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld5_end_adj; 
    
    // fld5_start_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld5_start_adj; 
    
    // fld5_use_ohi
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld5_use_ohi; 
    
    // fld5_mask_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld5_mask_en; 
    
    // fld4_skip_first_nibble
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld4_skip_first_nibble; 
    
    // fld4_fill
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld4_fill; 
    
    // fld4_end_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld4_end_adj; 
    
    // fld4_start_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld4_start_adj; 
    
    // fld4_use_ohi
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld4_use_ohi; 
    
    // fld4_mask_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld4_mask_en; 
    
    // fld3_skip_first_nibble
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld3_skip_first_nibble; 
    
    // fld3_fill
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld3_fill; 
    
    // fld3_end_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld3_end_adj; 
    
    // fld3_start_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld3_start_adj; 
    
    // fld3_use_ohi
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld3_use_ohi; 
    
    // fld3_mask_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld3_mask_en; 
    
    // fld2_skip_first_nibble
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld2_skip_first_nibble; 
    
    // fld2_fill
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld2_fill; 
    
    // fld2_end_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld2_end_adj; 
    
    // fld2_start_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld2_start_adj; 
    
    // fld2_use_ohi
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld2_use_ohi; 
    
    // fld2_mask_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld2_mask_en; 
    
    // fld1_skip_first_nibble
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld1_skip_first_nibble; 
    
    // fld1_fill
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld1_fill; 
    
    // fld1_end_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld1_end_adj; 
    
    // fld1_start_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld1_start_adj; 
    
    // fld1_use_ohi
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld1_use_ohi; 
    
    // fld1_mask_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld1_mask_en; 
    
    // fld0_skip_first_nibble
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld0_skip_first_nibble; 
    
    // fld0_fill
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld0_fill; 
    
    // fld0_end_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld0_end_adj; 
    
    // fld0_start_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld0_start_adj; 
    
    // fld0_use_ohi
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld0_use_ohi; 
    
    // fld0_mask_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld0_mask_en; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::all() const {
    cpp_int ret_val;

    // add_val
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__add_val; 
    
    // align
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__align; 
    
    // csum_loc_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__csum_loc_adj; 
    
    // addsub_csum_loc
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__addsub_csum_loc; 
    
    // phdr_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__phdr_adj; 
    
    // addsub_phdr
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__addsub_phdr; 
    
    // end_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__end_adj; 
    
    // addsub_end
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__addsub_end; 
    
    // start_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__start_adj; 
    
    // addsub_start
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__addsub_start; 
    
    // len_shift_val
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__len_shift_val; 
    
    // len_shift_left
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__len_shift_left; 
    
    // len_mask
    ret_val = ret_val << 14; ret_val = ret_val  | int_var__len_mask; 
    
    // end_eop
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__end_eop; 
    
    // phv_csum_flit_num
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__phv_csum_flit_num; 
    
    // csum_8b
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum_8b; 
    
    // csum_loc_use_phdr_ohi
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum_loc_use_phdr_ohi; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::all() const {
    cpp_int ret_val;

    // fld3_add_len
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld3_add_len; 
    
    // fld3_fld_end
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld3_fld_end; 
    
    // fld3_fld_start
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld3_fld_start; 
    
    // fld3_fld_align
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld3_fld_align; 
    
    // fld3_fld_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld3_fld_en; 
    
    // fld2_add_len
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld2_add_len; 
    
    // fld2_fld_end
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld2_fld_end; 
    
    // fld2_fld_start
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld2_fld_start; 
    
    // fld2_fld_align
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld2_fld_align; 
    
    // fld2_fld_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld2_fld_en; 
    
    // fld1_add_len
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld1_add_len; 
    
    // fld1_fld_end
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld1_fld_end; 
    
    // fld1_fld_start
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld1_fld_start; 
    
    // fld1_fld_align
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld1_fld_align; 
    
    // fld1_fld_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld1_fld_en; 
    
    // fld0_add_len
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld0_add_len; 
    
    // fld0_fld_end
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld0_fld_end; 
    
    // fld0_fld_start
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__fld0_fld_start; 
    
    // fld0_fld_align
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld0_fld_align; 
    
    // fld0_fld_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__fld0_fld_en; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_len_chk_profile_t::all() const {
    cpp_int ret_val;

    // start_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__start_adj; 
    
    // addsub_start
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__addsub_start; 
    
    // len_shift_val
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__len_shift_val; 
    
    // len_shift_left
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__len_shift_left; 
    
    // len_mask
    ret_val = ret_val << 14; ret_val = ret_val  | int_var__len_mask; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_align_chk_profile_t::all() const {
    cpp_int ret_val;

    // mod_log2
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__mod_log2; 
    
    // start_adj
    ret_val = ret_val << 6; ret_val = ret_val  | int_var__start_adj; 
    
    // addsub_start
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__addsub_start; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pb_t::all() const {
    cpp_int ret_val;

    // eop_err
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__eop_err; 
    
    // sop_err
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__sop_err; 
    
    // err
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__err; 
    
    // eop
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_dp_t::all() const {
    cpp_int ret_val;

    // eop_err
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__eop_err; 
    
    // sop_err
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__sop_err; 
    
    // err
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__err; 
    
    // eop
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_ma_t::all() const {
    cpp_int ret_val;

    // eop_err
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__eop_err; 
    
    // sop_err
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__sop_err; 
    
    // err
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__err; 
    
    // eop
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_sw_phv_t::all() const {
    cpp_int ret_val;

    // eop_err
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__eop_err; 
    
    // sop_err
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__sop_err; 
    
    // err
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__err; 
    
    // eop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_ohi_t::all() const {
    cpp_int ret_val;

    // eop_err
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__eop_err; 
    
    // sop_err
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__sop_err; 
    
    // err
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__err; 
    
    // eop
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe0_t::all() const {
    cpp_int ret_val;

    // ohi_out
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__ohi_out; 
    
    // pkt_release
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__pkt_release; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe0_phv_out_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe1_t::all() const {
    cpp_int ret_val;

    // ohi_out
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__ohi_out; 
    
    // pkt_release
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__pkt_release; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe1_phv_out_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe2_t::all() const {
    cpp_int ret_val;

    // ohi_out
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__ohi_out; 
    
    // pkt_release
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__pkt_release; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe2_phv_out_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe3_t::all() const {
    cpp_int ret_val;

    // ohi_out
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__ohi_out; 
    
    // pkt_release
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__pkt_release; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe3_phv_out_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe4_t::all() const {
    cpp_int ret_val;

    // ohi_out
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__ohi_out; 
    
    // pkt_release
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__pkt_release; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe4_phv_out_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe5_t::all() const {
    cpp_int ret_val;

    // ohi_out
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__ohi_out; 
    
    // pkt_release
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__pkt_release; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe5_phv_out_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe6_t::all() const {
    cpp_int ret_val;

    // ohi_out
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__ohi_out; 
    
    // pkt_release
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__pkt_release; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe6_phv_out_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe7_t::all() const {
    cpp_int ret_val;

    // ohi_out
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__ohi_out; 
    
    // pkt_release
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__pkt_release; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe7_phv_out_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe8_t::all() const {
    cpp_int ret_val;

    // ohi_out
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__ohi_out; 
    
    // pkt_release
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__pkt_release; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe8_phv_out_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe9_t::all() const {
    cpp_int ret_val;

    // ohi_out
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__ohi_out; 
    
    // pkt_release
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__pkt_release; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_ppa_pe9_phv_out_t::all() const {
    cpp_int ret_val;

    // eop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__eop; 
    
    // sop
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_csr_intr_t::all() const {
    cpp_int ret_val;

    // dowstream_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dowstream_enable; 
    
    // dowstream
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dowstream; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_pkt_mem_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    // ecc_disable_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_disable_cor; 
    
    // ecc_disable_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_disable_det; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pkt_mem_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    // addr
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 20; ret_val = ret_val  | int_var__syndrome; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    // dhs_ecc_bypass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dhs_ecc_bypass; 
    
    // ecc_disable_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_disable_cor; 
    
    // ecc_disable_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_disable_det; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_bndl0_state_lkp_sram_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    // addr
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 54; ret_val = ret_val  | int_var__syndrome; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    // dhs_ecc_bypass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dhs_ecc_bypass; 
    
    // ecc_disable_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_disable_cor; 
    
    // ecc_disable_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_disable_det; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_bndl1_state_lkp_sram_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    // addr
    ret_val = ret_val << 9; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 54; ret_val = ret_val  | int_var__syndrome; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_bndl0_inq_mem_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_bndl0_inq_mem_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_bndl1_inq_mem_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_bndl1_inq_mem_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_outq_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_outq_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_outq_ohi_mem_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_outq_ohi_mem_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_pe0_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe0_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_pe1_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe1_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_pe2_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe2_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_pe3_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe3_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_pe4_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe4_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_pe5_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe5_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_pe6_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe6_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_pe7_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe7_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_pe8_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe8_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_pe9_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe9_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_sw_phv_global_t::all() const {
    cpp_int ret_val;

    // err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__err_enable; 
    
    // start_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__start_enable; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_sw_phv_control_t::all() const {
    cpp_int ret_val;

    // qid_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__qid_enable; 
    
    // packet_len_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__packet_len_enable; 
    
    // frame_size_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__frame_size_enable; 
    
    // localtime_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__localtime_enable; 
    
    // qid_repeat_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__qid_repeat_enable; 
    
    // counter_repeat_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__counter_repeat_enable; 
    
    // start_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__start_enable; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_sw_phv_config_t::all() const {
    cpp_int ret_val;

    // qid_max
    ret_val = ret_val << 24; ret_val = ret_val  | int_var__qid_max; 
    
    // qid_min
    ret_val = ret_val << 24; ret_val = ret_val  | int_var__qid_min; 
    
    // counter_max
    ret_val = ret_val << 14; ret_val = ret_val  | int_var__counter_max; 
    
    // insertion_period_clocks
    ret_val = ret_val << 42; ret_val = ret_val  | int_var__insertion_period_clocks; 
    
    // num_flits
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__num_flits; 
    
    // start_addr
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__start_addr; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_sw_phv_state_t::all() const {
    cpp_int ret_val;

    // current_qid
    ret_val = ret_val << 24; ret_val = ret_val  | int_var__current_qid; 
    
    // current_flit
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__current_flit; 
    
    // current_counter
    ret_val = ret_val << 14; ret_val = ret_val  | int_var__current_counter; 
    
    // current_insertion_period
    ret_val = ret_val << 42; ret_val = ret_val  | int_var__current_insertion_period; 
    
    // done
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__done; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_sw_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    // ecc_bypass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_bypass; 
    
    // ecc_correct
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_correct; 
    
    // ecc_detect
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_detect; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_sw_phv_mem_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    // ecc_addr
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__ecc_addr; 
    
    // ecc_syndrome
    ret_val = ret_val << 20; ret_val = ret_val  | int_var__ecc_syndrome; 
    
    // ecc_uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_uncorrectable; 
    
    // ecc_correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_correctable; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_reorder_phv_not_sop_err_t::all() const {
    cpp_int ret_val;

    // phv_sop_vec
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__phv_sop_vec; 
    
    // match_vec
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__match_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_reorder_t::all() const {
    cpp_int ret_val;

    // drdy_vec_d
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__drdy_vec_d; 
    
    // eop_vec
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__eop_vec; 
    
    // match_vec
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__match_vec; 
    
    // phv_srdy_vec
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__phv_srdy_vec; 
    
    // ohi_srdy_vec
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__ohi_srdy_vec; 
    
    // seq_num
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__seq_num; 
    
    // seq_state
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__seq_state; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_csum0_t::all() const {
    cpp_int ret_val;

    // err_vec
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__err_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_csum1_t::all() const {
    cpp_int ret_val;

    // err_vec
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__err_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_csum2_t::all() const {
    cpp_int ret_val;

    // err_vec
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__err_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_csum3_t::all() const {
    cpp_int ret_val;

    // err_vec
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__err_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_csum4_t::all() const {
    cpp_int ret_val;

    // err_vec
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__err_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_chkr_seq_id_t::all() const {
    cpp_int ret_val;

    // pkt
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__pkt; 
    
    // ohi
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__ohi; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe0_t::all() const {
    cpp_int ret_val;

    // pkt_state
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_state; 
    
    // phv_state
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__phv_state; 
    
    // pe_state
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__pe_state; 
    
    // err_log
    ret_val = ret_val << 105; ret_val = ret_val  | int_var__err_log; 
    
    // err_vec
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__err_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe1_t::all() const {
    cpp_int ret_val;

    // pkt_state
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_state; 
    
    // phv_state
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__phv_state; 
    
    // pe_state
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__pe_state; 
    
    // err_log
    ret_val = ret_val << 105; ret_val = ret_val  | int_var__err_log; 
    
    // err_vec
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__err_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe2_t::all() const {
    cpp_int ret_val;

    // pkt_state
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_state; 
    
    // phv_state
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__phv_state; 
    
    // pe_state
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__pe_state; 
    
    // err_log
    ret_val = ret_val << 105; ret_val = ret_val  | int_var__err_log; 
    
    // err_vec
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__err_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe3_t::all() const {
    cpp_int ret_val;

    // pkt_state
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_state; 
    
    // phv_state
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__phv_state; 
    
    // pe_state
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__pe_state; 
    
    // err_log
    ret_val = ret_val << 105; ret_val = ret_val  | int_var__err_log; 
    
    // err_vec
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__err_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe4_t::all() const {
    cpp_int ret_val;

    // pkt_state
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_state; 
    
    // phv_state
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__phv_state; 
    
    // pe_state
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__pe_state; 
    
    // err_log
    ret_val = ret_val << 105; ret_val = ret_val  | int_var__err_log; 
    
    // err_vec
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__err_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe5_t::all() const {
    cpp_int ret_val;

    // pkt_state
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_state; 
    
    // phv_state
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__phv_state; 
    
    // pe_state
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__pe_state; 
    
    // err_log
    ret_val = ret_val << 105; ret_val = ret_val  | int_var__err_log; 
    
    // err_vec
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__err_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe6_t::all() const {
    cpp_int ret_val;

    // pkt_state
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_state; 
    
    // phv_state
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__phv_state; 
    
    // pe_state
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__pe_state; 
    
    // err_log
    ret_val = ret_val << 105; ret_val = ret_val  | int_var__err_log; 
    
    // err_vec
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__err_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe7_t::all() const {
    cpp_int ret_val;

    // pkt_state
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_state; 
    
    // phv_state
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__phv_state; 
    
    // pe_state
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__pe_state; 
    
    // err_log
    ret_val = ret_val << 105; ret_val = ret_val  | int_var__err_log; 
    
    // err_vec
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__err_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe8_t::all() const {
    cpp_int ret_val;

    // pkt_state
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_state; 
    
    // phv_state
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__phv_state; 
    
    // pe_state
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__pe_state; 
    
    // err_log
    ret_val = ret_val << 105; ret_val = ret_val  | int_var__err_log; 
    
    // err_vec
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__err_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe9_t::all() const {
    cpp_int ret_val;

    // pkt_state
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_state; 
    
    // phv_state
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__phv_state; 
    
    // pe_state
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__pe_state; 
    
    // err_log
    ret_val = ret_val << 105; ret_val = ret_val  | int_var__err_log; 
    
    // err_vec
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__err_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_bndl0_state_lkp_t::all() const {
    cpp_int ret_val;

    // err_log
    ret_val = ret_val << 13; ret_val = ret_val  | int_var__err_log; 
    
    // err_vec
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__err_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_bndl1_state_lkp_t::all() const {
    cpp_int ret_val;

    // err_log
    ret_val = ret_val << 13; ret_val = ret_val  | int_var__err_log; 
    
    // err_vec
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__err_vec; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_fifo_t::all() const {
    cpp_int ret_val;

    // pe9_ohi_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe9_ohi_ff_empty; 
    
    // pe9_ohi_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe9_ohi_ff_full; 
    
    // pe9_phv_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe9_phv_ff_empty; 
    
    // pe9_phv_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe9_phv_ff_full; 
    
    // pe9_qctl_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe9_qctl_ff_empty; 
    
    // pe9_qctl_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe9_qctl_ff_full; 
    
    // pe8_ohi_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe8_ohi_ff_empty; 
    
    // pe8_ohi_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe8_ohi_ff_full; 
    
    // pe8_phv_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe8_phv_ff_empty; 
    
    // pe8_phv_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe8_phv_ff_full; 
    
    // pe8_qctl_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe8_qctl_ff_empty; 
    
    // pe8_qctl_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe8_qctl_ff_full; 
    
    // pe7_ohi_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe7_ohi_ff_empty; 
    
    // pe7_ohi_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe7_ohi_ff_full; 
    
    // pe7_phv_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe7_phv_ff_empty; 
    
    // pe7_phv_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe7_phv_ff_full; 
    
    // pe7_qctl_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe7_qctl_ff_empty; 
    
    // pe7_qctl_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe7_qctl_ff_full; 
    
    // pe6_ohi_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe6_ohi_ff_empty; 
    
    // pe6_ohi_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe6_ohi_ff_full; 
    
    // pe6_phv_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe6_phv_ff_empty; 
    
    // pe6_phv_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe6_phv_ff_full; 
    
    // pe6_qctl_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe6_qctl_ff_empty; 
    
    // pe6_qctl_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe6_qctl_ff_full; 
    
    // pe5_ohi_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe5_ohi_ff_empty; 
    
    // pe5_ohi_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe5_ohi_ff_full; 
    
    // pe5_phv_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe5_phv_ff_empty; 
    
    // pe5_phv_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe5_phv_ff_full; 
    
    // pe5_qctl_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe5_qctl_ff_empty; 
    
    // pe5_qctl_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe5_qctl_ff_full; 
    
    // pe4_ohi_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe4_ohi_ff_empty; 
    
    // pe4_ohi_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe4_ohi_ff_full; 
    
    // pe4_phv_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe4_phv_ff_empty; 
    
    // pe4_phv_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe4_phv_ff_full; 
    
    // pe4_qctl_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe4_qctl_ff_empty; 
    
    // pe4_qctl_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe4_qctl_ff_full; 
    
    // pe3_ohi_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe3_ohi_ff_empty; 
    
    // pe3_ohi_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe3_ohi_ff_full; 
    
    // pe3_phv_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe3_phv_ff_empty; 
    
    // pe3_phv_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe3_phv_ff_full; 
    
    // pe3_qctl_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe3_qctl_ff_empty; 
    
    // pe3_qctl_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe3_qctl_ff_full; 
    
    // pe2_ohi_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe2_ohi_ff_empty; 
    
    // pe2_ohi_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe2_ohi_ff_full; 
    
    // pe2_phv_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe2_phv_ff_empty; 
    
    // pe2_phv_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe2_phv_ff_full; 
    
    // pe2_qctl_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe2_qctl_ff_empty; 
    
    // pe2_qctl_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe2_qctl_ff_full; 
    
    // pe1_ohi_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe1_ohi_ff_empty; 
    
    // pe1_ohi_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe1_ohi_ff_full; 
    
    // pe1_phv_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe1_phv_ff_empty; 
    
    // pe1_phv_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe1_phv_ff_full; 
    
    // pe1_qctl_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe1_qctl_ff_empty; 
    
    // pe1_qctl_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe1_qctl_ff_full; 
    
    // pe0_ohi_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe0_ohi_ff_empty; 
    
    // pe0_ohi_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe0_ohi_ff_full; 
    
    // pe0_phv_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe0_phv_ff_empty; 
    
    // pe0_phv_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe0_phv_ff_full; 
    
    // pe0_qctl_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe0_qctl_ff_empty; 
    
    // pe0_qctl_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe0_qctl_ff_full; 
    
    // chk_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__chk_ff_empty; 
    
    // chk_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__chk_ff_full; 
    
    // outohi_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__outohi_ff_empty; 
    
    // outohi_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__outohi_ff_full; 
    
    // outphv_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__outphv_ff_empty; 
    
    // outphv_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__outphv_ff_full; 
    
    // pkt_mtu_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_mtu_ff_empty; 
    
    // pkt_mtu_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_mtu_ff_full; 
    
    // pb_if_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pb_if_ff_empty; 
    
    // pb_if_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pb_if_ff_full; 
    
    // ma_if_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ma_if_ff_empty; 
    
    // ma_if_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ma_if_ff_full; 
    
    // ohi_if_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ohi_if_ff_empty; 
    
    // ohi_if_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ohi_if_ff_full; 
    
    // dp_if_ff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dp_if_ff_empty; 
    
    // dp_if_ff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dp_if_ff_full; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_bndl0_t::all() const {
    cpp_int ret_val;

    // pkt_queue
    ret_val = ret_val << 100; ret_val = ret_val  | int_var__pkt_queue; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_bndl1_t::all() const {
    cpp_int ret_val;

    // pkt_queue
    ret_val = ret_val << 100; ret_val = ret_val  | int_var__pkt_queue; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_pe_alloc_t::all() const {
    cpp_int ret_val;

    // state
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__state; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_debug_ctrl_t::all() const {
    cpp_int ret_val;

    // eccbypass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eccbypass; 
    
    // dbg_bus_sel
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__dbg_bus_sel; 
    
    // dbg_bndl_sel
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__dbg_bndl_sel; 
    
    // dbg_mem_sel
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__dbg_mem_sel; 
    
    // deq_stall_en
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__deq_stall_en; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_debug_port_t::all() const {
    cpp_int ret_val;

    // select
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__select; 
    
    // enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__enable; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_spare_t::all() const {
    cpp_int ret_val;

    // fld3_inst
    ret_val = ret_val << 128; ret_val = ret_val  | int_var__fld3_inst; 
    
    // fld2_inst
    ret_val = ret_val << 128; ret_val = ret_val  | int_var__fld2_inst; 
    
    // fld1_inst
    ret_val = ret_val << 128; ret_val = ret_val  | int_var__fld1_inst; 
    
    // fld0_inst
    ret_val = ret_val << 128; ret_val = ret_val  | int_var__fld0_inst; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_spare_dbg_t::all() const {
    cpp_int ret_val;

    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_cfg_preparse_t::all() const {
    cpp_int ret_val;

    // vxlan_flag_val
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__vxlan_flag_val; 
    
    // vxlan_flag_mask
    ret_val = ret_val << 8; ret_val = ret_val  | int_var__vxlan_flag_mask; 
    
    // udp_dstport_vxlan_val1
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__udp_dstport_vxlan_val1; 
    
    // udp_dstport_vxlan_val0
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__udp_dstport_vxlan_val0; 
    
    // udp_dstport_roce_val1
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__udp_dstport_roce_val1; 
    
    // udp_dstport_roce_val0
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__udp_dstport_roce_val0; 
    
    // tm_iport_enc_en
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__tm_iport_enc_en; 
    
    // bypass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bypass; 
    
    // spare
    ret_val = ret_val << 15; ret_val = ret_val  | int_var__spare; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_sta_preparse_t::all() const {
    cpp_int ret_val;

    // eff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eff_full; 
    
    // eff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eff_empty; 
    
    // dff_full
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dff_full; 
    
    // dff_empty
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dff_empty; 
    
    // dq_state
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dq_state; 
    
    // state
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__state; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_CNT_preparse_t::all() const {
    cpp_int ret_val;

    // eff
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__eff; 
    
    // dff_eop
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__dff_eop; 
    
    // dff_sop
    ret_val = ret_val << 40; ret_val = ret_val  | int_var__dff_sop; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_dhs_bndl0_state_lkp_tcam_t::all() const {
    cpp_int ret_val;

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 288-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::all() const {
    cpp_int ret_val;

    // valid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__valid; 
    
    // y_data
    ret_val = ret_val << 64; ret_val = ret_val  | int_var__y_data; 
    
    // x_data
    ret_val = ret_val << 64; ret_val = ret_val  | int_var__x_data; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << entry.get_width(); ret_val = ret_val  | entry.all(); 
    return ret_val;
}

cpp_int cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t::all() const {
    cpp_int ret_val;

    // cmd
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__cmd; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_dhs_bndl0_state_lkp_sram_t::all() const {
    cpp_int ret_val;

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 288-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 54; ret_val = ret_val  | int_var__ecc; 
    
    // rsvd
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rsvd; 
    
    // data
    ret_val = ret_val << 763; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_dhs_bndl1_state_lkp_tcam_t::all() const {
    cpp_int ret_val;

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 288-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::all() const {
    cpp_int ret_val;

    // valid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__valid; 
    
    // y_data
    ret_val = ret_val << 64; ret_val = ret_val  | int_var__y_data; 
    
    // x_data
    ret_val = ret_val << 64; ret_val = ret_val  | int_var__x_data; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << entry.get_width(); ret_val = ret_val  | entry.all(); 
    return ret_val;
}

cpp_int cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t::all() const {
    cpp_int ret_val;

    // cmd
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__cmd; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_dhs_bndl1_state_lkp_sram_t::all() const {
    cpp_int ret_val;

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 288-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 54; ret_val = ret_val  | int_var__ecc; 
    
    // rsvd
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rsvd; 
    
    // data
    ret_val = ret_val << 763; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_dhs_sw_phv_mem_t::all() const {
    cpp_int ret_val;

    #if 16 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 16-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_ppa_csr_dhs_sw_phv_mem_entry_t::all() const {
    cpp_int ret_val;

    // ecc
    ret_val = ret_val << 20; ret_val = ret_val  | int_var__ecc; 
    
    // spare
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__spare; 
    
    // data
    ret_val = ret_val << 512; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_dhs_dbg_mem_t::all() const {
    cpp_int ret_val;

    #if 256 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 256-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_ppa_csr_dhs_dbg_mem_entry_t::all() const {
    cpp_int ret_val;

    // data
    ret_val = ret_val << 546; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_intgrp_status_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_rw_reg.get_width(); ret_val = ret_val  | int_rw_reg.all(); 
    ret_val = ret_val << int_enable_rw_reg.get_width(); ret_val = ret_val  | int_enable_rw_reg.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_ppa_csr_intreg_status_t::all() const {
    cpp_int ret_val;

    // int_intf_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_intf_interrupt; 
    
    // int_sw_phv_mem_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_sw_phv_mem_interrupt; 
    
    // int_pa_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pa_interrupt; 
    
    // int_pe9_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe9_interrupt; 
    
    // int_pe8_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe8_interrupt; 
    
    // int_pe7_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe7_interrupt; 
    
    // int_pe6_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe6_interrupt; 
    
    // int_pe5_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe5_interrupt; 
    
    // int_pe4_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe4_interrupt; 
    
    // int_pe3_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe3_interrupt; 
    
    // int_pe2_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe2_interrupt; 
    
    // int_pe1_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe1_interrupt; 
    
    // int_pe0_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe0_interrupt; 
    
    // int_fifo2_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_fifo2_interrupt; 
    
    // int_fifo1_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_fifo1_interrupt; 
    
    // int_ecc_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_ecc_interrupt; 
    
    // int_bndl1_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_bndl1_interrupt; 
    
    // int_bndl0_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_bndl0_interrupt; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::all() const {
    cpp_int ret_val;

    // int_intf_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_intf_enable; 
    
    // int_sw_phv_mem_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_sw_phv_mem_enable; 
    
    // int_pa_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pa_enable; 
    
    // int_pe9_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe9_enable; 
    
    // int_pe8_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe8_enable; 
    
    // int_pe7_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe7_enable; 
    
    // int_pe6_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe6_enable; 
    
    // int_pe5_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe5_enable; 
    
    // int_pe4_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe4_enable; 
    
    // int_pe3_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe3_enable; 
    
    // int_pe2_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe2_enable; 
    
    // int_pe1_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe1_enable; 
    
    // int_pe0_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_pe0_enable; 
    
    // int_fifo2_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_fifo2_enable; 
    
    // int_fifo1_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_fifo1_enable; 
    
    // int_ecc_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_ecc_enable; 
    
    // int_bndl1_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_bndl1_enable; 
    
    // int_bndl0_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_bndl0_enable; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_int_bndl0_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_ppa_csr_int_bndl0_intreg_t::all() const {
    cpp_int ret_val;

    // state_lkp_srch_req_not_rdy_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__state_lkp_srch_req_not_rdy_interrupt; 
    
    // state_lkp_srch_miss_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__state_lkp_srch_miss_interrupt; 
    
    // state_lkp_srch_hit_addr_range_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__state_lkp_srch_hit_addr_range_err_interrupt; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_int_bndl1_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // state_lkp_srch_req_not_rdy_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__state_lkp_srch_req_not_rdy_enable; 
    
    // state_lkp_srch_miss_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__state_lkp_srch_miss_enable; 
    
    // state_lkp_srch_hit_addr_range_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__state_lkp_srch_hit_addr_range_err_enable; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_int_ecc_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_ppa_csr_int_ecc_int_test_set_t::all() const {
    cpp_int ret_val;

    // bndl1_state_lkp_sram_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bndl1_state_lkp_sram_correctable_interrupt; 
    
    // bndl1_state_lkp_sram_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bndl1_state_lkp_sram_uncorrectable_interrupt; 
    
    // bndl0_state_lkp_sram_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bndl0_state_lkp_sram_correctable_interrupt; 
    
    // bndl0_state_lkp_sram_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bndl0_state_lkp_sram_uncorrectable_interrupt; 
    
    // pkt_mem_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_mem_correctable_interrupt; 
    
    // pkt_mem_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_mem_uncorrectable_interrupt; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_int_ecc_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // bndl1_state_lkp_sram_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bndl1_state_lkp_sram_correctable_enable; 
    
    // bndl1_state_lkp_sram_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bndl1_state_lkp_sram_uncorrectable_enable; 
    
    // bndl0_state_lkp_sram_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bndl0_state_lkp_sram_correctable_enable; 
    
    // bndl0_state_lkp_sram_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bndl0_state_lkp_sram_uncorrectable_enable; 
    
    // pkt_mem_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_mem_correctable_enable; 
    
    // pkt_mem_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_mem_uncorrectable_enable; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_int_fifo1_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::all() const {
    cpp_int ret_val;

    // pe9_ohi_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe9_ohi_ff_ovflow_interrupt; 
    
    // pe8_ohi_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe8_ohi_ff_ovflow_interrupt; 
    
    // pe7_ohi_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe7_ohi_ff_ovflow_interrupt; 
    
    // pe6_ohi_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe6_ohi_ff_ovflow_interrupt; 
    
    // pe5_ohi_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe5_ohi_ff_ovflow_interrupt; 
    
    // pe4_ohi_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe4_ohi_ff_ovflow_interrupt; 
    
    // pe3_ohi_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe3_ohi_ff_ovflow_interrupt; 
    
    // pe2_ohi_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe2_ohi_ff_ovflow_interrupt; 
    
    // pe1_ohi_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe1_ohi_ff_ovflow_interrupt; 
    
    // pe0_ohi_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe0_ohi_ff_ovflow_interrupt; 
    
    // pe9_phv_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe9_phv_ff_ovflow_interrupt; 
    
    // pe8_phv_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe8_phv_ff_ovflow_interrupt; 
    
    // pe7_phv_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe7_phv_ff_ovflow_interrupt; 
    
    // pe6_phv_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe6_phv_ff_ovflow_interrupt; 
    
    // pe5_phv_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe5_phv_ff_ovflow_interrupt; 
    
    // pe4_phv_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe4_phv_ff_ovflow_interrupt; 
    
    // pe3_phv_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe3_phv_ff_ovflow_interrupt; 
    
    // pe2_phv_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe2_phv_ff_ovflow_interrupt; 
    
    // pe1_phv_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe1_phv_ff_ovflow_interrupt; 
    
    // pe0_phv_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe0_phv_ff_ovflow_interrupt; 
    
    // pe9_qctl_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe9_qctl_ff_ovflow_interrupt; 
    
    // pe8_qctl_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe8_qctl_ff_ovflow_interrupt; 
    
    // pe7_qctl_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe7_qctl_ff_ovflow_interrupt; 
    
    // pe6_qctl_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe6_qctl_ff_ovflow_interrupt; 
    
    // pe5_qctl_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe5_qctl_ff_ovflow_interrupt; 
    
    // pe4_qctl_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe4_qctl_ff_ovflow_interrupt; 
    
    // pe3_qctl_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe3_qctl_ff_ovflow_interrupt; 
    
    // pe2_qctl_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe2_qctl_ff_ovflow_interrupt; 
    
    // pe1_qctl_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe1_qctl_ff_ovflow_interrupt; 
    
    // pe0_qctl_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe0_qctl_ff_ovflow_interrupt; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // pe9_ohi_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe9_ohi_ff_ovflow_enable; 
    
    // pe8_ohi_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe8_ohi_ff_ovflow_enable; 
    
    // pe7_ohi_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe7_ohi_ff_ovflow_enable; 
    
    // pe6_ohi_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe6_ohi_ff_ovflow_enable; 
    
    // pe5_ohi_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe5_ohi_ff_ovflow_enable; 
    
    // pe4_ohi_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe4_ohi_ff_ovflow_enable; 
    
    // pe3_ohi_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe3_ohi_ff_ovflow_enable; 
    
    // pe2_ohi_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe2_ohi_ff_ovflow_enable; 
    
    // pe1_ohi_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe1_ohi_ff_ovflow_enable; 
    
    // pe0_ohi_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe0_ohi_ff_ovflow_enable; 
    
    // pe9_phv_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe9_phv_ff_ovflow_enable; 
    
    // pe8_phv_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe8_phv_ff_ovflow_enable; 
    
    // pe7_phv_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe7_phv_ff_ovflow_enable; 
    
    // pe6_phv_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe6_phv_ff_ovflow_enable; 
    
    // pe5_phv_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe5_phv_ff_ovflow_enable; 
    
    // pe4_phv_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe4_phv_ff_ovflow_enable; 
    
    // pe3_phv_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe3_phv_ff_ovflow_enable; 
    
    // pe2_phv_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe2_phv_ff_ovflow_enable; 
    
    // pe1_phv_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe1_phv_ff_ovflow_enable; 
    
    // pe0_phv_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe0_phv_ff_ovflow_enable; 
    
    // pe9_qctl_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe9_qctl_ff_ovflow_enable; 
    
    // pe8_qctl_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe8_qctl_ff_ovflow_enable; 
    
    // pe7_qctl_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe7_qctl_ff_ovflow_enable; 
    
    // pe6_qctl_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe6_qctl_ff_ovflow_enable; 
    
    // pe5_qctl_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe5_qctl_ff_ovflow_enable; 
    
    // pe4_qctl_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe4_qctl_ff_ovflow_enable; 
    
    // pe3_qctl_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe3_qctl_ff_ovflow_enable; 
    
    // pe2_qctl_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe2_qctl_ff_ovflow_enable; 
    
    // pe1_qctl_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe1_qctl_ff_ovflow_enable; 
    
    // pe0_qctl_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pe0_qctl_ff_ovflow_enable; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_int_fifo2_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_ppa_csr_int_fifo2_int_test_set_t::all() const {
    cpp_int ret_val;

    // chk_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__chk_ff_ovflow_interrupt; 
    
    // outohi_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__outohi_ff_ovflow_interrupt; 
    
    // outphv_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__outphv_ff_ovflow_interrupt; 
    
    // pkt_mtu_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_mtu_ff_ovflow_interrupt; 
    
    // pb_if_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pb_if_ff_ovflow_interrupt; 
    
    // ma_if_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ma_if_ff_ovflow_interrupt; 
    
    // ohi_if_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ohi_if_ff_ovflow_interrupt; 
    
    // dp_if_ff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dp_if_ff_ovflow_interrupt; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_int_fifo2_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // chk_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__chk_ff_ovflow_enable; 
    
    // outohi_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__outohi_ff_ovflow_enable; 
    
    // outphv_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__outphv_ff_ovflow_enable; 
    
    // pkt_mtu_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_mtu_ff_ovflow_enable; 
    
    // pb_if_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pb_if_ff_ovflow_enable; 
    
    // ma_if_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ma_if_ff_ovflow_enable; 
    
    // ohi_if_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ohi_if_ff_ovflow_enable; 
    
    // dp_if_ff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dp_if_ff_ovflow_enable; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_int_pe9_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_ppa_csr_int_pe9_int_test_set_t::all() const {
    cpp_int ret_val;

    // phv_upr_idx_less_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_upr_idx_less_interrupt; 
    
    // d1_not_valid_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__d1_not_valid_interrupt; 
    
    // offset_jump_chk_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__offset_jump_chk_interrupt; 
    
    // pkt_size_chk_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_size_chk_interrupt; 
    
    // offset_out_of_range_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__offset_out_of_range_interrupt; 
    
    // exceed_parse_loop_cnt_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__exceed_parse_loop_cnt_interrupt; 
    
    // exceed_phv_flit_cnt_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__exceed_phv_flit_cnt_interrupt; 
    
    // unexpected_non_sop_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__unexpected_non_sop_interrupt; 
    
    // qctl_not_sop_after_pkt_release_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__qctl_not_sop_after_pkt_release_interrupt; 
    
    // qctl_skid_depth_not_zero_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__qctl_skid_depth_not_zero_interrupt; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_int_pe9_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // phv_upr_idx_less_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_upr_idx_less_enable; 
    
    // d1_not_valid_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__d1_not_valid_enable; 
    
    // offset_jump_chk_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__offset_jump_chk_enable; 
    
    // pkt_size_chk_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pkt_size_chk_enable; 
    
    // offset_out_of_range_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__offset_out_of_range_enable; 
    
    // exceed_parse_loop_cnt_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__exceed_parse_loop_cnt_enable; 
    
    // exceed_phv_flit_cnt_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__exceed_phv_flit_cnt_enable; 
    
    // unexpected_non_sop_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__unexpected_non_sop_enable; 
    
    // qctl_not_sop_after_pkt_release_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__qctl_not_sop_after_pkt_release_enable; 
    
    // qctl_skid_depth_not_zero_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__qctl_skid_depth_not_zero_enable; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_int_pa_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::all() const {
    cpp_int ret_val;

    // preparse_eff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__preparse_eff_ovflow_interrupt; 
    
    // preparse_dff_ovflow_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__preparse_dff_ovflow_interrupt; 
    
    // preparse_dff_not_sop_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__preparse_dff_not_sop_interrupt; 
    
    // preparse_line0_not_sop_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__preparse_line0_not_sop_interrupt; 
    
    // chkr_seq_id_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__chkr_seq_id_interrupt; 
    
    // chkr_pkt_not_sop_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__chkr_pkt_not_sop_interrupt; 
    
    // chkr_phv_not_sop_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__chkr_phv_not_sop_interrupt; 
    
    // chkr_phv_single_flit_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__chkr_phv_single_flit_interrupt; 
    
    // crc_start_more_than_end_offset_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crc_start_more_than_end_offset_interrupt; 
    
    // crc_not_enuf_bytes_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crc_not_enuf_bytes_interrupt; 
    
    // csum4_start_more_than_end_offset_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum4_start_more_than_end_offset_interrupt; 
    
    // csum4_not_enuf_bytes_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum4_not_enuf_bytes_interrupt; 
    
    // csum3_start_more_than_end_offset_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum3_start_more_than_end_offset_interrupt; 
    
    // csum3_not_enuf_bytes_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum3_not_enuf_bytes_interrupt; 
    
    // csum2_start_more_than_end_offset_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum2_start_more_than_end_offset_interrupt; 
    
    // csum2_not_enuf_bytes_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum2_not_enuf_bytes_interrupt; 
    
    // csum1_start_more_than_end_offset_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum1_start_more_than_end_offset_interrupt; 
    
    // csum1_not_enuf_bytes_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum1_not_enuf_bytes_interrupt; 
    
    // csum0_start_more_than_end_offset_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum0_start_more_than_end_offset_interrupt; 
    
    // csum0_not_enuf_bytes_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum0_not_enuf_bytes_interrupt; 
    
    // reorder_phv_not_sop_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__reorder_phv_not_sop_interrupt; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // preparse_eff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__preparse_eff_ovflow_enable; 
    
    // preparse_dff_ovflow_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__preparse_dff_ovflow_enable; 
    
    // preparse_dff_not_sop_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__preparse_dff_not_sop_enable; 
    
    // preparse_line0_not_sop_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__preparse_line0_not_sop_enable; 
    
    // chkr_seq_id_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__chkr_seq_id_enable; 
    
    // chkr_pkt_not_sop_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__chkr_pkt_not_sop_enable; 
    
    // chkr_phv_not_sop_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__chkr_phv_not_sop_enable; 
    
    // chkr_phv_single_flit_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__chkr_phv_single_flit_enable; 
    
    // crc_start_more_than_end_offset_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crc_start_more_than_end_offset_enable; 
    
    // crc_not_enuf_bytes_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crc_not_enuf_bytes_enable; 
    
    // csum4_start_more_than_end_offset_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum4_start_more_than_end_offset_enable; 
    
    // csum4_not_enuf_bytes_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum4_not_enuf_bytes_enable; 
    
    // csum3_start_more_than_end_offset_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum3_start_more_than_end_offset_enable; 
    
    // csum3_not_enuf_bytes_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum3_not_enuf_bytes_enable; 
    
    // csum2_start_more_than_end_offset_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum2_start_more_than_end_offset_enable; 
    
    // csum2_not_enuf_bytes_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum2_not_enuf_bytes_enable; 
    
    // csum1_start_more_than_end_offset_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum1_start_more_than_end_offset_enable; 
    
    // csum1_not_enuf_bytes_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum1_not_enuf_bytes_enable; 
    
    // csum0_start_more_than_end_offset_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum0_start_more_than_end_offset_enable; 
    
    // csum0_not_enuf_bytes_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__csum0_not_enuf_bytes_enable; 
    
    // reorder_phv_not_sop_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__reorder_phv_not_sop_enable; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_int_intf_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_ppa_csr_int_intf_int_test_set_t::all() const {
    cpp_int ret_val;

    // ma_eop_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ma_eop_err_interrupt; 
    
    // ma_sop_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ma_sop_err_interrupt; 
    
    // ma_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ma_err_interrupt; 
    
    // sw_phv_eop_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sw_phv_eop_err_interrupt; 
    
    // sw_phv_sop_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sw_phv_sop_err_interrupt; 
    
    // sw_phv_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sw_phv_err_interrupt; 
    
    // ohi_eop_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ohi_eop_err_interrupt; 
    
    // ohi_sop_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ohi_sop_err_interrupt; 
    
    // ohi_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ohi_err_interrupt; 
    
    // dp_eop_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dp_eop_err_interrupt; 
    
    // dp_sop_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dp_sop_err_interrupt; 
    
    // dp_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dp_err_interrupt; 
    
    // pb_eop_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pb_eop_err_interrupt; 
    
    // pb_sop_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pb_sop_err_interrupt; 
    
    // pb_err_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pb_err_interrupt; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_int_intf_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // ma_eop_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ma_eop_err_enable; 
    
    // ma_sop_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ma_sop_err_enable; 
    
    // ma_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ma_err_enable; 
    
    // sw_phv_eop_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sw_phv_eop_err_enable; 
    
    // sw_phv_sop_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sw_phv_sop_err_enable; 
    
    // sw_phv_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sw_phv_err_enable; 
    
    // ohi_eop_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ohi_eop_err_enable; 
    
    // ohi_sop_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ohi_sop_err_enable; 
    
    // ohi_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ohi_err_enable; 
    
    // dp_eop_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dp_eop_err_enable; 
    
    // dp_sop_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dp_sop_err_enable; 
    
    // dp_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dp_err_enable; 
    
    // pb_eop_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pb_eop_err_enable; 
    
    // pb_sop_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pb_sop_err_enable; 
    
    // pb_err_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pb_err_enable; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_int_sw_phv_mem_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_test_set_t::all() const {
    cpp_int ret_val;

    // phv_done7_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_done7_interrupt; 
    
    // phv_done6_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_done6_interrupt; 
    
    // phv_done5_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_done5_interrupt; 
    
    // phv_done4_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_done4_interrupt; 
    
    // phv_done3_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_done3_interrupt; 
    
    // phv_done2_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_done2_interrupt; 
    
    // phv_done1_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_done1_interrupt; 
    
    // phv_done0_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_done0_interrupt; 
    
    // phv_invalid_data_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_invalid_data_interrupt; 
    
    // phv_invalid_sram_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_invalid_sram_interrupt; 
    
    // ecc_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_correctable_interrupt; 
    
    // ecc_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_uncorrectable_interrupt; 
    
    return ret_val;
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // phv_done7_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_done7_enable; 
    
    // phv_done6_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_done6_enable; 
    
    // phv_done5_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_done5_enable; 
    
    // phv_done4_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_done4_enable; 
    
    // phv_done3_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_done3_enable; 
    
    // phv_done2_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_done2_enable; 
    
    // phv_done1_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_done1_enable; 
    
    // phv_done0_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_done0_enable; 
    
    // phv_invalid_data_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_invalid_data_enable; 
    
    // phv_invalid_sram_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__phv_invalid_sram_enable; 
    
    // ecc_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_correctable_enable; 
    
    // ecc_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_uncorrectable_enable; 
    
    return ret_val;
}

void cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::clear() {

    int_var__ecc_uncorrectable_enable = 0; 
    
    int_var__ecc_correctable_enable = 0; 
    
    int_var__phv_invalid_sram_enable = 0; 
    
    int_var__phv_invalid_data_enable = 0; 
    
    int_var__phv_done0_enable = 0; 
    
    int_var__phv_done1_enable = 0; 
    
    int_var__phv_done2_enable = 0; 
    
    int_var__phv_done3_enable = 0; 
    
    int_var__phv_done4_enable = 0; 
    
    int_var__phv_done5_enable = 0; 
    
    int_var__phv_done6_enable = 0; 
    
    int_var__phv_done7_enable = 0; 
    
}

void cap_ppa_csr_int_sw_phv_mem_int_test_set_t::clear() {

    int_var__ecc_uncorrectable_interrupt = 0; 
    
    int_var__ecc_correctable_interrupt = 0; 
    
    int_var__phv_invalid_sram_interrupt = 0; 
    
    int_var__phv_invalid_data_interrupt = 0; 
    
    int_var__phv_done0_interrupt = 0; 
    
    int_var__phv_done1_interrupt = 0; 
    
    int_var__phv_done2_interrupt = 0; 
    
    int_var__phv_done3_interrupt = 0; 
    
    int_var__phv_done4_interrupt = 0; 
    
    int_var__phv_done5_interrupt = 0; 
    
    int_var__phv_done6_interrupt = 0; 
    
    int_var__phv_done7_interrupt = 0; 
    
}

void cap_ppa_csr_int_sw_phv_mem_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_ppa_csr_int_intf_int_enable_clear_t::clear() {

    int_var__pb_err_enable = 0; 
    
    int_var__pb_sop_err_enable = 0; 
    
    int_var__pb_eop_err_enable = 0; 
    
    int_var__dp_err_enable = 0; 
    
    int_var__dp_sop_err_enable = 0; 
    
    int_var__dp_eop_err_enable = 0; 
    
    int_var__ohi_err_enable = 0; 
    
    int_var__ohi_sop_err_enable = 0; 
    
    int_var__ohi_eop_err_enable = 0; 
    
    int_var__sw_phv_err_enable = 0; 
    
    int_var__sw_phv_sop_err_enable = 0; 
    
    int_var__sw_phv_eop_err_enable = 0; 
    
    int_var__ma_err_enable = 0; 
    
    int_var__ma_sop_err_enable = 0; 
    
    int_var__ma_eop_err_enable = 0; 
    
}

void cap_ppa_csr_int_intf_int_test_set_t::clear() {

    int_var__pb_err_interrupt = 0; 
    
    int_var__pb_sop_err_interrupt = 0; 
    
    int_var__pb_eop_err_interrupt = 0; 
    
    int_var__dp_err_interrupt = 0; 
    
    int_var__dp_sop_err_interrupt = 0; 
    
    int_var__dp_eop_err_interrupt = 0; 
    
    int_var__ohi_err_interrupt = 0; 
    
    int_var__ohi_sop_err_interrupt = 0; 
    
    int_var__ohi_eop_err_interrupt = 0; 
    
    int_var__sw_phv_err_interrupt = 0; 
    
    int_var__sw_phv_sop_err_interrupt = 0; 
    
    int_var__sw_phv_eop_err_interrupt = 0; 
    
    int_var__ma_err_interrupt = 0; 
    
    int_var__ma_sop_err_interrupt = 0; 
    
    int_var__ma_eop_err_interrupt = 0; 
    
}

void cap_ppa_csr_int_intf_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_ppa_csr_int_pa_int_enable_clear_t::clear() {

    int_var__reorder_phv_not_sop_enable = 0; 
    
    int_var__csum0_not_enuf_bytes_enable = 0; 
    
    int_var__csum0_start_more_than_end_offset_enable = 0; 
    
    int_var__csum1_not_enuf_bytes_enable = 0; 
    
    int_var__csum1_start_more_than_end_offset_enable = 0; 
    
    int_var__csum2_not_enuf_bytes_enable = 0; 
    
    int_var__csum2_start_more_than_end_offset_enable = 0; 
    
    int_var__csum3_not_enuf_bytes_enable = 0; 
    
    int_var__csum3_start_more_than_end_offset_enable = 0; 
    
    int_var__csum4_not_enuf_bytes_enable = 0; 
    
    int_var__csum4_start_more_than_end_offset_enable = 0; 
    
    int_var__crc_not_enuf_bytes_enable = 0; 
    
    int_var__crc_start_more_than_end_offset_enable = 0; 
    
    int_var__chkr_phv_single_flit_enable = 0; 
    
    int_var__chkr_phv_not_sop_enable = 0; 
    
    int_var__chkr_pkt_not_sop_enable = 0; 
    
    int_var__chkr_seq_id_enable = 0; 
    
    int_var__preparse_line0_not_sop_enable = 0; 
    
    int_var__preparse_dff_not_sop_enable = 0; 
    
    int_var__preparse_dff_ovflow_enable = 0; 
    
    int_var__preparse_eff_ovflow_enable = 0; 
    
}

void cap_ppa_csr_int_pa_int_test_set_t::clear() {

    int_var__reorder_phv_not_sop_interrupt = 0; 
    
    int_var__csum0_not_enuf_bytes_interrupt = 0; 
    
    int_var__csum0_start_more_than_end_offset_interrupt = 0; 
    
    int_var__csum1_not_enuf_bytes_interrupt = 0; 
    
    int_var__csum1_start_more_than_end_offset_interrupt = 0; 
    
    int_var__csum2_not_enuf_bytes_interrupt = 0; 
    
    int_var__csum2_start_more_than_end_offset_interrupt = 0; 
    
    int_var__csum3_not_enuf_bytes_interrupt = 0; 
    
    int_var__csum3_start_more_than_end_offset_interrupt = 0; 
    
    int_var__csum4_not_enuf_bytes_interrupt = 0; 
    
    int_var__csum4_start_more_than_end_offset_interrupt = 0; 
    
    int_var__crc_not_enuf_bytes_interrupt = 0; 
    
    int_var__crc_start_more_than_end_offset_interrupt = 0; 
    
    int_var__chkr_phv_single_flit_interrupt = 0; 
    
    int_var__chkr_phv_not_sop_interrupt = 0; 
    
    int_var__chkr_pkt_not_sop_interrupt = 0; 
    
    int_var__chkr_seq_id_interrupt = 0; 
    
    int_var__preparse_line0_not_sop_interrupt = 0; 
    
    int_var__preparse_dff_not_sop_interrupt = 0; 
    
    int_var__preparse_dff_ovflow_interrupt = 0; 
    
    int_var__preparse_eff_ovflow_interrupt = 0; 
    
}

void cap_ppa_csr_int_pa_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_ppa_csr_int_pe9_int_enable_clear_t::clear() {

    int_var__qctl_skid_depth_not_zero_enable = 0; 
    
    int_var__qctl_not_sop_after_pkt_release_enable = 0; 
    
    int_var__unexpected_non_sop_enable = 0; 
    
    int_var__exceed_phv_flit_cnt_enable = 0; 
    
    int_var__exceed_parse_loop_cnt_enable = 0; 
    
    int_var__offset_out_of_range_enable = 0; 
    
    int_var__pkt_size_chk_enable = 0; 
    
    int_var__offset_jump_chk_enable = 0; 
    
    int_var__d1_not_valid_enable = 0; 
    
    int_var__phv_upr_idx_less_enable = 0; 
    
}

void cap_ppa_csr_int_pe9_int_test_set_t::clear() {

    int_var__qctl_skid_depth_not_zero_interrupt = 0; 
    
    int_var__qctl_not_sop_after_pkt_release_interrupt = 0; 
    
    int_var__unexpected_non_sop_interrupt = 0; 
    
    int_var__exceed_phv_flit_cnt_interrupt = 0; 
    
    int_var__exceed_parse_loop_cnt_interrupt = 0; 
    
    int_var__offset_out_of_range_interrupt = 0; 
    
    int_var__pkt_size_chk_interrupt = 0; 
    
    int_var__offset_jump_chk_interrupt = 0; 
    
    int_var__d1_not_valid_interrupt = 0; 
    
    int_var__phv_upr_idx_less_interrupt = 0; 
    
}

void cap_ppa_csr_int_pe9_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_ppa_csr_int_fifo2_int_enable_clear_t::clear() {

    int_var__dp_if_ff_ovflow_enable = 0; 
    
    int_var__ohi_if_ff_ovflow_enable = 0; 
    
    int_var__ma_if_ff_ovflow_enable = 0; 
    
    int_var__pb_if_ff_ovflow_enable = 0; 
    
    int_var__pkt_mtu_ff_ovflow_enable = 0; 
    
    int_var__outphv_ff_ovflow_enable = 0; 
    
    int_var__outohi_ff_ovflow_enable = 0; 
    
    int_var__chk_ff_ovflow_enable = 0; 
    
}

void cap_ppa_csr_int_fifo2_int_test_set_t::clear() {

    int_var__dp_if_ff_ovflow_interrupt = 0; 
    
    int_var__ohi_if_ff_ovflow_interrupt = 0; 
    
    int_var__ma_if_ff_ovflow_interrupt = 0; 
    
    int_var__pb_if_ff_ovflow_interrupt = 0; 
    
    int_var__pkt_mtu_ff_ovflow_interrupt = 0; 
    
    int_var__outphv_ff_ovflow_interrupt = 0; 
    
    int_var__outohi_ff_ovflow_interrupt = 0; 
    
    int_var__chk_ff_ovflow_interrupt = 0; 
    
}

void cap_ppa_csr_int_fifo2_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_ppa_csr_int_fifo1_int_enable_clear_t::clear() {

    int_var__pe0_qctl_ff_ovflow_enable = 0; 
    
    int_var__pe1_qctl_ff_ovflow_enable = 0; 
    
    int_var__pe2_qctl_ff_ovflow_enable = 0; 
    
    int_var__pe3_qctl_ff_ovflow_enable = 0; 
    
    int_var__pe4_qctl_ff_ovflow_enable = 0; 
    
    int_var__pe5_qctl_ff_ovflow_enable = 0; 
    
    int_var__pe6_qctl_ff_ovflow_enable = 0; 
    
    int_var__pe7_qctl_ff_ovflow_enable = 0; 
    
    int_var__pe8_qctl_ff_ovflow_enable = 0; 
    
    int_var__pe9_qctl_ff_ovflow_enable = 0; 
    
    int_var__pe0_phv_ff_ovflow_enable = 0; 
    
    int_var__pe1_phv_ff_ovflow_enable = 0; 
    
    int_var__pe2_phv_ff_ovflow_enable = 0; 
    
    int_var__pe3_phv_ff_ovflow_enable = 0; 
    
    int_var__pe4_phv_ff_ovflow_enable = 0; 
    
    int_var__pe5_phv_ff_ovflow_enable = 0; 
    
    int_var__pe6_phv_ff_ovflow_enable = 0; 
    
    int_var__pe7_phv_ff_ovflow_enable = 0; 
    
    int_var__pe8_phv_ff_ovflow_enable = 0; 
    
    int_var__pe9_phv_ff_ovflow_enable = 0; 
    
    int_var__pe0_ohi_ff_ovflow_enable = 0; 
    
    int_var__pe1_ohi_ff_ovflow_enable = 0; 
    
    int_var__pe2_ohi_ff_ovflow_enable = 0; 
    
    int_var__pe3_ohi_ff_ovflow_enable = 0; 
    
    int_var__pe4_ohi_ff_ovflow_enable = 0; 
    
    int_var__pe5_ohi_ff_ovflow_enable = 0; 
    
    int_var__pe6_ohi_ff_ovflow_enable = 0; 
    
    int_var__pe7_ohi_ff_ovflow_enable = 0; 
    
    int_var__pe8_ohi_ff_ovflow_enable = 0; 
    
    int_var__pe9_ohi_ff_ovflow_enable = 0; 
    
}

void cap_ppa_csr_int_fifo1_int_test_set_t::clear() {

    int_var__pe0_qctl_ff_ovflow_interrupt = 0; 
    
    int_var__pe1_qctl_ff_ovflow_interrupt = 0; 
    
    int_var__pe2_qctl_ff_ovflow_interrupt = 0; 
    
    int_var__pe3_qctl_ff_ovflow_interrupt = 0; 
    
    int_var__pe4_qctl_ff_ovflow_interrupt = 0; 
    
    int_var__pe5_qctl_ff_ovflow_interrupt = 0; 
    
    int_var__pe6_qctl_ff_ovflow_interrupt = 0; 
    
    int_var__pe7_qctl_ff_ovflow_interrupt = 0; 
    
    int_var__pe8_qctl_ff_ovflow_interrupt = 0; 
    
    int_var__pe9_qctl_ff_ovflow_interrupt = 0; 
    
    int_var__pe0_phv_ff_ovflow_interrupt = 0; 
    
    int_var__pe1_phv_ff_ovflow_interrupt = 0; 
    
    int_var__pe2_phv_ff_ovflow_interrupt = 0; 
    
    int_var__pe3_phv_ff_ovflow_interrupt = 0; 
    
    int_var__pe4_phv_ff_ovflow_interrupt = 0; 
    
    int_var__pe5_phv_ff_ovflow_interrupt = 0; 
    
    int_var__pe6_phv_ff_ovflow_interrupt = 0; 
    
    int_var__pe7_phv_ff_ovflow_interrupt = 0; 
    
    int_var__pe8_phv_ff_ovflow_interrupt = 0; 
    
    int_var__pe9_phv_ff_ovflow_interrupt = 0; 
    
    int_var__pe0_ohi_ff_ovflow_interrupt = 0; 
    
    int_var__pe1_ohi_ff_ovflow_interrupt = 0; 
    
    int_var__pe2_ohi_ff_ovflow_interrupt = 0; 
    
    int_var__pe3_ohi_ff_ovflow_interrupt = 0; 
    
    int_var__pe4_ohi_ff_ovflow_interrupt = 0; 
    
    int_var__pe5_ohi_ff_ovflow_interrupt = 0; 
    
    int_var__pe6_ohi_ff_ovflow_interrupt = 0; 
    
    int_var__pe7_ohi_ff_ovflow_interrupt = 0; 
    
    int_var__pe8_ohi_ff_ovflow_interrupt = 0; 
    
    int_var__pe9_ohi_ff_ovflow_interrupt = 0; 
    
}

void cap_ppa_csr_int_fifo1_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_ppa_csr_int_ecc_int_enable_clear_t::clear() {

    int_var__pkt_mem_uncorrectable_enable = 0; 
    
    int_var__pkt_mem_correctable_enable = 0; 
    
    int_var__bndl0_state_lkp_sram_uncorrectable_enable = 0; 
    
    int_var__bndl0_state_lkp_sram_correctable_enable = 0; 
    
    int_var__bndl1_state_lkp_sram_uncorrectable_enable = 0; 
    
    int_var__bndl1_state_lkp_sram_correctable_enable = 0; 
    
}

void cap_ppa_csr_int_ecc_int_test_set_t::clear() {

    int_var__pkt_mem_uncorrectable_interrupt = 0; 
    
    int_var__pkt_mem_correctable_interrupt = 0; 
    
    int_var__bndl0_state_lkp_sram_uncorrectable_interrupt = 0; 
    
    int_var__bndl0_state_lkp_sram_correctable_interrupt = 0; 
    
    int_var__bndl1_state_lkp_sram_uncorrectable_interrupt = 0; 
    
    int_var__bndl1_state_lkp_sram_correctable_interrupt = 0; 
    
}

void cap_ppa_csr_int_ecc_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_ppa_csr_int_bndl1_int_enable_clear_t::clear() {

    int_var__state_lkp_srch_hit_addr_range_err_enable = 0; 
    
    int_var__state_lkp_srch_miss_enable = 0; 
    
    int_var__state_lkp_srch_req_not_rdy_enable = 0; 
    
}

void cap_ppa_csr_int_bndl0_intreg_t::clear() {

    int_var__state_lkp_srch_hit_addr_range_err_interrupt = 0; 
    
    int_var__state_lkp_srch_miss_interrupt = 0; 
    
    int_var__state_lkp_srch_req_not_rdy_interrupt = 0; 
    
}

void cap_ppa_csr_int_bndl0_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_ppa_csr_intreg_status_t::clear() {

    int_var__int_bndl0_interrupt = 0; 
    
    int_var__int_bndl1_interrupt = 0; 
    
    int_var__int_ecc_interrupt = 0; 
    
    int_var__int_fifo1_interrupt = 0; 
    
    int_var__int_fifo2_interrupt = 0; 
    
    int_var__int_pe0_interrupt = 0; 
    
    int_var__int_pe1_interrupt = 0; 
    
    int_var__int_pe2_interrupt = 0; 
    
    int_var__int_pe3_interrupt = 0; 
    
    int_var__int_pe4_interrupt = 0; 
    
    int_var__int_pe5_interrupt = 0; 
    
    int_var__int_pe6_interrupt = 0; 
    
    int_var__int_pe7_interrupt = 0; 
    
    int_var__int_pe8_interrupt = 0; 
    
    int_var__int_pe9_interrupt = 0; 
    
    int_var__int_pa_interrupt = 0; 
    
    int_var__int_sw_phv_mem_interrupt = 0; 
    
    int_var__int_intf_interrupt = 0; 
    
}

void cap_ppa_csr_int_groups_int_enable_rw_reg_t::clear() {

    int_var__int_bndl0_enable = 0; 
    
    int_var__int_bndl1_enable = 0; 
    
    int_var__int_ecc_enable = 0; 
    
    int_var__int_fifo1_enable = 0; 
    
    int_var__int_fifo2_enable = 0; 
    
    int_var__int_pe0_enable = 0; 
    
    int_var__int_pe1_enable = 0; 
    
    int_var__int_pe2_enable = 0; 
    
    int_var__int_pe3_enable = 0; 
    
    int_var__int_pe4_enable = 0; 
    
    int_var__int_pe5_enable = 0; 
    
    int_var__int_pe6_enable = 0; 
    
    int_var__int_pe7_enable = 0; 
    
    int_var__int_pe8_enable = 0; 
    
    int_var__int_pe9_enable = 0; 
    
    int_var__int_pa_enable = 0; 
    
    int_var__int_sw_phv_mem_enable = 0; 
    
    int_var__int_intf_enable = 0; 
    
}

void cap_ppa_csr_intgrp_status_t::clear() {

    intreg.clear();
    int_enable_rw_reg.clear();
    int_rw_reg.clear();
}

void cap_ppa_csr_dhs_dbg_mem_entry_t::clear() {

    int_var__data = 0; 
    
}

void cap_ppa_csr_dhs_dbg_mem_t::clear() {

    #if 256 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 256; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_ppa_csr_dhs_sw_phv_mem_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__spare = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_ppa_csr_dhs_sw_phv_mem_t::clear() {

    #if 16 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 16; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__rsvd = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_ppa_csr_dhs_bndl1_state_lkp_sram_t::clear() {

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 288; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t::clear() {

    int_var__cmd = 0; 
    
}

void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_t::clear() {

    entry.clear();
}

void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::clear() {

    int_var__x_data = 0; 
    
    int_var__y_data = 0; 
    
    int_var__valid = 0; 
    
}

void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_t::clear() {

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 288; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::clear() {

    int_var__data = 0; 
    
    int_var__rsvd = 0; 
    
    int_var__ecc = 0; 
    
}

void cap_ppa_csr_dhs_bndl0_state_lkp_sram_t::clear() {

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 288; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t::clear() {

    int_var__cmd = 0; 
    
}

void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_t::clear() {

    entry.clear();
}

void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::clear() {

    int_var__x_data = 0; 
    
    int_var__y_data = 0; 
    
    int_var__valid = 0; 
    
}

void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_t::clear() {

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 288; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_ppa_csr_CNT_preparse_t::clear() {

    int_var__dff_sop = 0; 
    
    int_var__dff_eop = 0; 
    
    int_var__eff = 0; 
    
}

void cap_ppa_csr_sta_preparse_t::clear() {

    int_var__state = 0; 
    
    int_var__dq_state = 0; 
    
    int_var__dff_empty = 0; 
    
    int_var__dff_full = 0; 
    
    int_var__eff_empty = 0; 
    
    int_var__eff_full = 0; 
    
}

void cap_ppa_csr_cfg_preparse_t::clear() {

    int_var__spare = 0; 
    
    int_var__bypass = 0; 
    
    int_var__tm_iport_enc_en = 0; 
    
    int_var__udp_dstport_roce_val0 = 0; 
    
    int_var__udp_dstport_roce_val1 = 0; 
    
    int_var__udp_dstport_vxlan_val0 = 0; 
    
    int_var__udp_dstport_vxlan_val1 = 0; 
    
    int_var__vxlan_flag_mask = 0; 
    
    int_var__vxlan_flag_val = 0; 
    
}

void cap_ppa_csr_cfg_spare_dbg_t::clear() {

    int_var__data = 0; 
    
}

void cap_ppa_csr_cfg_spare_t::clear() {

    int_var__fld0_inst = 0; 
    
    int_var__fld1_inst = 0; 
    
    int_var__fld2_inst = 0; 
    
    int_var__fld3_inst = 0; 
    
}

void cap_ppa_csr_cfg_debug_port_t::clear() {

    int_var__enable = 0; 
    
    int_var__select = 0; 
    
}

void cap_ppa_csr_cfg_debug_ctrl_t::clear() {

    int_var__deq_stall_en = 0; 
    
    int_var__dbg_mem_sel = 0; 
    
    int_var__dbg_bndl_sel = 0; 
    
    int_var__dbg_bus_sel = 0; 
    
    int_var__eccbypass = 0; 
    
}

void cap_ppa_csr_sta_pe_alloc_t::clear() {

    int_var__state = 0; 
    
}

void cap_ppa_csr_sta_bndl1_t::clear() {

    int_var__pkt_queue = 0; 
    
}

void cap_ppa_csr_sta_bndl0_t::clear() {

    int_var__pkt_queue = 0; 
    
}

void cap_ppa_csr_sta_fifo_t::clear() {

    int_var__dp_if_ff_full = 0; 
    
    int_var__dp_if_ff_empty = 0; 
    
    int_var__ohi_if_ff_full = 0; 
    
    int_var__ohi_if_ff_empty = 0; 
    
    int_var__ma_if_ff_full = 0; 
    
    int_var__ma_if_ff_empty = 0; 
    
    int_var__pb_if_ff_full = 0; 
    
    int_var__pb_if_ff_empty = 0; 
    
    int_var__pkt_mtu_ff_full = 0; 
    
    int_var__pkt_mtu_ff_empty = 0; 
    
    int_var__outphv_ff_full = 0; 
    
    int_var__outphv_ff_empty = 0; 
    
    int_var__outohi_ff_full = 0; 
    
    int_var__outohi_ff_empty = 0; 
    
    int_var__chk_ff_full = 0; 
    
    int_var__chk_ff_empty = 0; 
    
    int_var__pe0_qctl_ff_full = 0; 
    
    int_var__pe0_qctl_ff_empty = 0; 
    
    int_var__pe0_phv_ff_full = 0; 
    
    int_var__pe0_phv_ff_empty = 0; 
    
    int_var__pe0_ohi_ff_full = 0; 
    
    int_var__pe0_ohi_ff_empty = 0; 
    
    int_var__pe1_qctl_ff_full = 0; 
    
    int_var__pe1_qctl_ff_empty = 0; 
    
    int_var__pe1_phv_ff_full = 0; 
    
    int_var__pe1_phv_ff_empty = 0; 
    
    int_var__pe1_ohi_ff_full = 0; 
    
    int_var__pe1_ohi_ff_empty = 0; 
    
    int_var__pe2_qctl_ff_full = 0; 
    
    int_var__pe2_qctl_ff_empty = 0; 
    
    int_var__pe2_phv_ff_full = 0; 
    
    int_var__pe2_phv_ff_empty = 0; 
    
    int_var__pe2_ohi_ff_full = 0; 
    
    int_var__pe2_ohi_ff_empty = 0; 
    
    int_var__pe3_qctl_ff_full = 0; 
    
    int_var__pe3_qctl_ff_empty = 0; 
    
    int_var__pe3_phv_ff_full = 0; 
    
    int_var__pe3_phv_ff_empty = 0; 
    
    int_var__pe3_ohi_ff_full = 0; 
    
    int_var__pe3_ohi_ff_empty = 0; 
    
    int_var__pe4_qctl_ff_full = 0; 
    
    int_var__pe4_qctl_ff_empty = 0; 
    
    int_var__pe4_phv_ff_full = 0; 
    
    int_var__pe4_phv_ff_empty = 0; 
    
    int_var__pe4_ohi_ff_full = 0; 
    
    int_var__pe4_ohi_ff_empty = 0; 
    
    int_var__pe5_qctl_ff_full = 0; 
    
    int_var__pe5_qctl_ff_empty = 0; 
    
    int_var__pe5_phv_ff_full = 0; 
    
    int_var__pe5_phv_ff_empty = 0; 
    
    int_var__pe5_ohi_ff_full = 0; 
    
    int_var__pe5_ohi_ff_empty = 0; 
    
    int_var__pe6_qctl_ff_full = 0; 
    
    int_var__pe6_qctl_ff_empty = 0; 
    
    int_var__pe6_phv_ff_full = 0; 
    
    int_var__pe6_phv_ff_empty = 0; 
    
    int_var__pe6_ohi_ff_full = 0; 
    
    int_var__pe6_ohi_ff_empty = 0; 
    
    int_var__pe7_qctl_ff_full = 0; 
    
    int_var__pe7_qctl_ff_empty = 0; 
    
    int_var__pe7_phv_ff_full = 0; 
    
    int_var__pe7_phv_ff_empty = 0; 
    
    int_var__pe7_ohi_ff_full = 0; 
    
    int_var__pe7_ohi_ff_empty = 0; 
    
    int_var__pe8_qctl_ff_full = 0; 
    
    int_var__pe8_qctl_ff_empty = 0; 
    
    int_var__pe8_phv_ff_full = 0; 
    
    int_var__pe8_phv_ff_empty = 0; 
    
    int_var__pe8_ohi_ff_full = 0; 
    
    int_var__pe8_ohi_ff_empty = 0; 
    
    int_var__pe9_qctl_ff_full = 0; 
    
    int_var__pe9_qctl_ff_empty = 0; 
    
    int_var__pe9_phv_ff_full = 0; 
    
    int_var__pe9_phv_ff_empty = 0; 
    
    int_var__pe9_ohi_ff_full = 0; 
    
    int_var__pe9_ohi_ff_empty = 0; 
    
}

void cap_ppa_csr_sta_bndl1_state_lkp_t::clear() {

    int_var__err_vec = 0; 
    
    int_var__err_log = 0; 
    
}

void cap_ppa_csr_sta_bndl0_state_lkp_t::clear() {

    int_var__err_vec = 0; 
    
    int_var__err_log = 0; 
    
}

void cap_ppa_csr_sta_pe9_t::clear() {

    int_var__err_vec = 0; 
    
    int_var__err_log = 0; 
    
    int_var__pe_state = 0; 
    
    int_var__phv_state = 0; 
    
    int_var__pkt_state = 0; 
    
}

void cap_ppa_csr_sta_pe8_t::clear() {

    int_var__err_vec = 0; 
    
    int_var__err_log = 0; 
    
    int_var__pe_state = 0; 
    
    int_var__phv_state = 0; 
    
    int_var__pkt_state = 0; 
    
}

void cap_ppa_csr_sta_pe7_t::clear() {

    int_var__err_vec = 0; 
    
    int_var__err_log = 0; 
    
    int_var__pe_state = 0; 
    
    int_var__phv_state = 0; 
    
    int_var__pkt_state = 0; 
    
}

void cap_ppa_csr_sta_pe6_t::clear() {

    int_var__err_vec = 0; 
    
    int_var__err_log = 0; 
    
    int_var__pe_state = 0; 
    
    int_var__phv_state = 0; 
    
    int_var__pkt_state = 0; 
    
}

void cap_ppa_csr_sta_pe5_t::clear() {

    int_var__err_vec = 0; 
    
    int_var__err_log = 0; 
    
    int_var__pe_state = 0; 
    
    int_var__phv_state = 0; 
    
    int_var__pkt_state = 0; 
    
}

void cap_ppa_csr_sta_pe4_t::clear() {

    int_var__err_vec = 0; 
    
    int_var__err_log = 0; 
    
    int_var__pe_state = 0; 
    
    int_var__phv_state = 0; 
    
    int_var__pkt_state = 0; 
    
}

void cap_ppa_csr_sta_pe3_t::clear() {

    int_var__err_vec = 0; 
    
    int_var__err_log = 0; 
    
    int_var__pe_state = 0; 
    
    int_var__phv_state = 0; 
    
    int_var__pkt_state = 0; 
    
}

void cap_ppa_csr_sta_pe2_t::clear() {

    int_var__err_vec = 0; 
    
    int_var__err_log = 0; 
    
    int_var__pe_state = 0; 
    
    int_var__phv_state = 0; 
    
    int_var__pkt_state = 0; 
    
}

void cap_ppa_csr_sta_pe1_t::clear() {

    int_var__err_vec = 0; 
    
    int_var__err_log = 0; 
    
    int_var__pe_state = 0; 
    
    int_var__phv_state = 0; 
    
    int_var__pkt_state = 0; 
    
}

void cap_ppa_csr_sta_pe0_t::clear() {

    int_var__err_vec = 0; 
    
    int_var__err_log = 0; 
    
    int_var__pe_state = 0; 
    
    int_var__phv_state = 0; 
    
    int_var__pkt_state = 0; 
    
}

void cap_ppa_csr_sta_chkr_seq_id_t::clear() {

    int_var__ohi = 0; 
    
    int_var__pkt = 0; 
    
}

void cap_ppa_csr_sta_csum4_t::clear() {

    int_var__err_vec = 0; 
    
}

void cap_ppa_csr_sta_csum3_t::clear() {

    int_var__err_vec = 0; 
    
}

void cap_ppa_csr_sta_csum2_t::clear() {

    int_var__err_vec = 0; 
    
}

void cap_ppa_csr_sta_csum1_t::clear() {

    int_var__err_vec = 0; 
    
}

void cap_ppa_csr_sta_csum0_t::clear() {

    int_var__err_vec = 0; 
    
}

void cap_ppa_csr_sta_reorder_t::clear() {

    int_var__seq_state = 0; 
    
    int_var__seq_num = 0; 
    
    int_var__ohi_srdy_vec = 0; 
    
    int_var__phv_srdy_vec = 0; 
    
    int_var__match_vec = 0; 
    
    int_var__eop_vec = 0; 
    
    int_var__drdy_vec_d = 0; 
    
}

void cap_ppa_csr_sta_reorder_phv_not_sop_err_t::clear() {

    int_var__match_vec = 0; 
    
    int_var__phv_sop_vec = 0; 
    
}

void cap_ppa_csr_sta_sw_phv_mem_t::clear() {

    int_var__ecc_correctable = 0; 
    
    int_var__ecc_uncorrectable = 0; 
    
    int_var__ecc_syndrome = 0; 
    
    int_var__ecc_addr = 0; 
    
    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_sw_phv_mem_t::clear() {

    int_var__ecc_detect = 0; 
    
    int_var__ecc_correct = 0; 
    
    int_var__ecc_bypass = 0; 
    
    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_sw_phv_state_t::clear() {

    int_var__done = 0; 
    
    int_var__current_insertion_period = 0; 
    
    int_var__current_counter = 0; 
    
    int_var__current_flit = 0; 
    
    int_var__current_qid = 0; 
    
}

void cap_ppa_csr_cfg_sw_phv_config_t::clear() {

    int_var__start_addr = 0; 
    
    int_var__num_flits = 0; 
    
    int_var__insertion_period_clocks = 0; 
    
    int_var__counter_max = 0; 
    
    int_var__qid_min = 0; 
    
    int_var__qid_max = 0; 
    
}

void cap_ppa_csr_cfg_sw_phv_control_t::clear() {

    int_var__start_enable = 0; 
    
    int_var__counter_repeat_enable = 0; 
    
    int_var__qid_repeat_enable = 0; 
    
    int_var__localtime_enable = 0; 
    
    int_var__frame_size_enable = 0; 
    
    int_var__packet_len_enable = 0; 
    
    int_var__qid_enable = 0; 
    
}

void cap_ppa_csr_cfg_sw_phv_global_t::clear() {

    int_var__start_enable = 0; 
    
    int_var__err_enable = 0; 
    
}

void cap_ppa_csr_sta_pe9_phv_mem_t::clear() {

    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_pe9_phv_mem_t::clear() {

    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_pe8_phv_mem_t::clear() {

    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_pe8_phv_mem_t::clear() {

    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_pe7_phv_mem_t::clear() {

    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_pe7_phv_mem_t::clear() {

    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_pe6_phv_mem_t::clear() {

    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_pe6_phv_mem_t::clear() {

    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_pe5_phv_mem_t::clear() {

    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_pe5_phv_mem_t::clear() {

    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_pe4_phv_mem_t::clear() {

    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_pe4_phv_mem_t::clear() {

    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_pe3_phv_mem_t::clear() {

    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_pe3_phv_mem_t::clear() {

    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_pe2_phv_mem_t::clear() {

    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_pe2_phv_mem_t::clear() {

    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_pe1_phv_mem_t::clear() {

    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_pe1_phv_mem_t::clear() {

    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_pe0_phv_mem_t::clear() {

    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_pe0_phv_mem_t::clear() {

    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::clear() {

    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t::clear() {

    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::clear() {

    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t::clear() {

    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_outq_ohi_mem_t::clear() {

    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_outq_ohi_mem_t::clear() {

    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_outq_phv_mem_t::clear() {

    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_outq_phv_mem_t::clear() {

    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_bndl1_inq_mem_t::clear() {

    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_bndl1_inq_mem_t::clear() {

    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_bndl0_inq_mem_t::clear() {

    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_bndl0_inq_mem_t::clear() {

    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_bndl1_state_lkp_sram_t::clear() {

    int_var__correctable = 0; 
    
    int_var__uncorrectable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::clear() {

    int_var__ecc_disable_det = 0; 
    
    int_var__ecc_disable_cor = 0; 
    
    int_var__dhs_ecc_bypass = 0; 
    
    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_bndl0_state_lkp_sram_t::clear() {

    int_var__correctable = 0; 
    
    int_var__uncorrectable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::clear() {

    int_var__ecc_disable_det = 0; 
    
    int_var__ecc_disable_cor = 0; 
    
    int_var__dhs_ecc_bypass = 0; 
    
    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_sta_pkt_mem_t::clear() {

    int_var__correctable = 0; 
    
    int_var__uncorrectable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_ppa_csr_cfg_pkt_mem_t::clear() {

    int_var__ecc_disable_det = 0; 
    
    int_var__ecc_disable_cor = 0; 
    
    int_var__bist_run = 0; 
    
}

void cap_ppa_csr_csr_intr_t::clear() {

    int_var__dowstream = 0; 
    
    int_var__dowstream_enable = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe9_phv_out_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe9_t::clear() {

    int_var__pkt_release = 0; 
    
    int_var__ohi_out = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe8_phv_out_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe8_t::clear() {

    int_var__pkt_release = 0; 
    
    int_var__ohi_out = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe7_phv_out_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe7_t::clear() {

    int_var__pkt_release = 0; 
    
    int_var__ohi_out = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe6_phv_out_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe6_t::clear() {

    int_var__pkt_release = 0; 
    
    int_var__ohi_out = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe5_phv_out_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe5_t::clear() {

    int_var__pkt_release = 0; 
    
    int_var__ohi_out = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe4_phv_out_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe4_t::clear() {

    int_var__pkt_release = 0; 
    
    int_var__ohi_out = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe3_phv_out_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe3_t::clear() {

    int_var__pkt_release = 0; 
    
    int_var__ohi_out = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe2_phv_out_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe2_t::clear() {

    int_var__pkt_release = 0; 
    
    int_var__ohi_out = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe1_phv_out_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe1_t::clear() {

    int_var__pkt_release = 0; 
    
    int_var__ohi_out = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe0_phv_out_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe0_t::clear() {

    int_var__pkt_release = 0; 
    
    int_var__ohi_out = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
}

void cap_ppa_csr_CNT_ppa_ohi_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
    int_var__err = 0; 
    
    int_var__sop_err = 0; 
    
    int_var__eop_err = 0; 
    
}

void cap_ppa_csr_CNT_ppa_sw_phv_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
    int_var__err = 0; 
    
    int_var__sop_err = 0; 
    
    int_var__eop_err = 0; 
    
}

void cap_ppa_csr_CNT_ppa_ma_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
    int_var__err = 0; 
    
    int_var__sop_err = 0; 
    
    int_var__eop_err = 0; 
    
}

void cap_ppa_csr_CNT_ppa_dp_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
    int_var__err = 0; 
    
    int_var__sop_err = 0; 
    
    int_var__eop_err = 0; 
    
}

void cap_ppa_csr_CNT_ppa_pb_t::clear() {

    int_var__sop = 0; 
    
    int_var__eop = 0; 
    
    int_var__err = 0; 
    
    int_var__sop_err = 0; 
    
    int_var__eop_err = 0; 
    
}

void cap_ppa_csr_cfg_align_chk_profile_t::clear() {

    int_var__addsub_start = 0; 
    
    int_var__start_adj = 0; 
    
    int_var__mod_log2 = 0; 
    
}

void cap_ppa_csr_cfg_len_chk_profile_t::clear() {

    int_var__len_mask = 0; 
    
    int_var__len_shift_left = 0; 
    
    int_var__len_shift_val = 0; 
    
    int_var__addsub_start = 0; 
    
    int_var__start_adj = 0; 
    
}

void cap_ppa_csr_cfg_csum_phdr_profile_t::clear() {

    int_var__fld0_fld_en = 0; 
    
    int_var__fld0_fld_align = 0; 
    
    int_var__fld0_fld_start = 0; 
    
    int_var__fld0_fld_end = 0; 
    
    int_var__fld0_add_len = 0; 
    
    int_var__fld1_fld_en = 0; 
    
    int_var__fld1_fld_align = 0; 
    
    int_var__fld1_fld_start = 0; 
    
    int_var__fld1_fld_end = 0; 
    
    int_var__fld1_add_len = 0; 
    
    int_var__fld2_fld_en = 0; 
    
    int_var__fld2_fld_align = 0; 
    
    int_var__fld2_fld_start = 0; 
    
    int_var__fld2_fld_end = 0; 
    
    int_var__fld2_add_len = 0; 
    
    int_var__fld3_fld_en = 0; 
    
    int_var__fld3_fld_align = 0; 
    
    int_var__fld3_fld_start = 0; 
    
    int_var__fld3_fld_end = 0; 
    
    int_var__fld3_add_len = 0; 
    
}

void cap_ppa_csr_cfg_csum_profile_t::clear() {

    int_var__csum_loc_use_phdr_ohi = 0; 
    
    int_var__csum_8b = 0; 
    
    int_var__phv_csum_flit_num = 0; 
    
    int_var__end_eop = 0; 
    
    int_var__len_mask = 0; 
    
    int_var__len_shift_left = 0; 
    
    int_var__len_shift_val = 0; 
    
    int_var__addsub_start = 0; 
    
    int_var__start_adj = 0; 
    
    int_var__addsub_end = 0; 
    
    int_var__end_adj = 0; 
    
    int_var__addsub_phdr = 0; 
    
    int_var__phdr_adj = 0; 
    
    int_var__addsub_csum_loc = 0; 
    
    int_var__csum_loc_adj = 0; 
    
    int_var__align = 0; 
    
    int_var__add_val = 0; 
    
}

void cap_ppa_csr_cfg_crc_mask_profile_t::clear() {

    int_var__fld0_mask_en = 0; 
    
    int_var__fld0_use_ohi = 0; 
    
    int_var__fld0_start_adj = 0; 
    
    int_var__fld0_end_adj = 0; 
    
    int_var__fld0_fill = 0; 
    
    int_var__fld0_skip_first_nibble = 0; 
    
    int_var__fld1_mask_en = 0; 
    
    int_var__fld1_use_ohi = 0; 
    
    int_var__fld1_start_adj = 0; 
    
    int_var__fld1_end_adj = 0; 
    
    int_var__fld1_fill = 0; 
    
    int_var__fld1_skip_first_nibble = 0; 
    
    int_var__fld2_mask_en = 0; 
    
    int_var__fld2_use_ohi = 0; 
    
    int_var__fld2_start_adj = 0; 
    
    int_var__fld2_end_adj = 0; 
    
    int_var__fld2_fill = 0; 
    
    int_var__fld2_skip_first_nibble = 0; 
    
    int_var__fld3_mask_en = 0; 
    
    int_var__fld3_use_ohi = 0; 
    
    int_var__fld3_start_adj = 0; 
    
    int_var__fld3_end_adj = 0; 
    
    int_var__fld3_fill = 0; 
    
    int_var__fld3_skip_first_nibble = 0; 
    
    int_var__fld4_mask_en = 0; 
    
    int_var__fld4_use_ohi = 0; 
    
    int_var__fld4_start_adj = 0; 
    
    int_var__fld4_end_adj = 0; 
    
    int_var__fld4_fill = 0; 
    
    int_var__fld4_skip_first_nibble = 0; 
    
    int_var__fld5_mask_en = 0; 
    
    int_var__fld5_use_ohi = 0; 
    
    int_var__fld5_start_adj = 0; 
    
    int_var__fld5_end_adj = 0; 
    
    int_var__fld5_fill = 0; 
    
    int_var__fld5_skip_first_nibble = 0; 
    
}

void cap_ppa_csr_cfg_crc_profile_t::clear() {

    int_var__len_mask = 0; 
    
    int_var__len_shift_left = 0; 
    
    int_var__len_shift_val = 0; 
    
    int_var__addsub_start = 0; 
    
    int_var__start_adj = 0; 
    
    int_var__addsub_end = 0; 
    
    int_var__end_adj = 0; 
    
    int_var__addsub_mask = 0; 
    
    int_var__mask_adj = 0; 
    
    int_var__end_eop = 0; 
    
    int_var__mask_prof_sel = 0; 
    
}

void cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::clear() {

    int_var__hit = 0; 
    
    int_var__hit_addr = 0; 
    
}

void cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::clear() {

    int_var__key = 0; 
    
    int_var__mask = 0; 
    
}

void cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t::clear() {

    int_var__vld = 0; 
    
}

void cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::clear() {

    int_var__hit = 0; 
    
    int_var__hit_addr = 0; 
    
}

void cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::clear() {

    int_var__key = 0; 
    
    int_var__mask = 0; 
    
}

void cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t::clear() {

    int_var__vld = 0; 
    
}

void cap_ppa_csr_cfg_init_profile_t::clear() {

    int_var__curr_offset = 0; 
    
    int_var__state = 0; 
    
    int_var__lkp_val_pkt_idx0 = 0; 
    
    int_var__lkp_val_pkt_idx1 = 0; 
    
    int_var__lkp_val_pkt_idx2 = 0; 
    
}

void cap_ppa_csr_cfg_ctrl_thresh_t::clear() {

    int_var__outphv_ff = 0; 
    
    int_var__phv_ff = 0; 
    
    int_var__chk_ff = 0; 
    
}

void cap_ppa_csr_cfg_ctrl_t::clear() {

    int_var__pe_enable = 0; 
    
    int_var__parse_loop_cnt = 0; 
    
    int_var__num_phv_flit = 0; 
    
    int_var__state_lkp_catchall_entry = 0; 
    
    int_var__phv_set_hw_err_en = 0; 
    
    int_var__phv_set_parser_err_en = 0; 
    
    int_var__gso_csum_en = 0; 
    
    int_var__pe_err_vec_en = 0; 
    
    int_var__end_offset_en = 0; 
    
    int_var__end_offset_flit_num = 0; 
    
    int_var__tcam_key_ctl = 0; 
    
    int_var__crc_start_offset_err_en = 0; 
    
    int_var__csum_start_offset_err_en = 0; 
    
}

void cap_ppa_csr_rdintr_t::clear() {

    int_var__ireg = 0; 
    
}

void cap_ppa_csr_base_t::clear() {

    int_var__scratch_reg = 0; 
    
}

void cap_ppa_csr_t::clear() {

    base.clear();
    rdintr.clear();
    cfg_ctrl.clear();
    cfg_ctrl_thresh.clear();
    #if 16 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // cfg_init_profile
    for(int ii = 0; ii < 16; ii++) {
        cfg_init_profile[ii].clear();
    }
    #endif
    
    cfg_bndl0_state_lkp_tcam_grst.clear();
    cfg_bndl0_state_lkp_tcam_ind.clear();
    sta_bndl0_state_lkp_tcam_ind.clear();
    cfg_bndl1_state_lkp_tcam_grst.clear();
    cfg_bndl1_state_lkp_tcam_ind.clear();
    sta_bndl1_state_lkp_tcam_ind.clear();
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // cfg_crc_profile
    for(int ii = 0; ii < 8; ii++) {
        cfg_crc_profile[ii].clear();
    }
    #endif
    
    #if 4 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // cfg_crc_mask_profile
    for(int ii = 0; ii < 4; ii++) {
        cfg_crc_mask_profile[ii].clear();
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // cfg_csum_profile
    for(int ii = 0; ii < 8; ii++) {
        cfg_csum_profile[ii].clear();
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // cfg_csum_phdr_profile
    for(int ii = 0; ii < 8; ii++) {
        cfg_csum_phdr_profile[ii].clear();
    }
    #endif
    
    #if 4 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // cfg_len_chk_profile
    for(int ii = 0; ii < 4; ii++) {
        cfg_len_chk_profile[ii].clear();
    }
    #endif
    
    #if 4 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // cfg_align_chk_profile
    for(int ii = 0; ii < 4; ii++) {
        cfg_align_chk_profile[ii].clear();
    }
    #endif
    
    CNT_ppa_pb.clear();
    CNT_ppa_dp.clear();
    CNT_ppa_ma.clear();
    CNT_ppa_sw_phv.clear();
    CNT_ppa_ohi.clear();
    CNT_ppa_pe0_pkt_in.clear();
    CNT_ppa_pe0.clear();
    CNT_ppa_pe0_phv_out.clear();
    CNT_ppa_pe1_pkt_in.clear();
    CNT_ppa_pe1.clear();
    CNT_ppa_pe1_phv_out.clear();
    CNT_ppa_pe2_pkt_in.clear();
    CNT_ppa_pe2.clear();
    CNT_ppa_pe2_phv_out.clear();
    CNT_ppa_pe3_pkt_in.clear();
    CNT_ppa_pe3.clear();
    CNT_ppa_pe3_phv_out.clear();
    CNT_ppa_pe4_pkt_in.clear();
    CNT_ppa_pe4.clear();
    CNT_ppa_pe4_phv_out.clear();
    CNT_ppa_pe5_pkt_in.clear();
    CNT_ppa_pe5.clear();
    CNT_ppa_pe5_phv_out.clear();
    CNT_ppa_pe6_pkt_in.clear();
    CNT_ppa_pe6.clear();
    CNT_ppa_pe6_phv_out.clear();
    CNT_ppa_pe7_pkt_in.clear();
    CNT_ppa_pe7.clear();
    CNT_ppa_pe7_phv_out.clear();
    CNT_ppa_pe8_pkt_in.clear();
    CNT_ppa_pe8.clear();
    CNT_ppa_pe8_phv_out.clear();
    CNT_ppa_pe9_pkt_in.clear();
    CNT_ppa_pe9.clear();
    CNT_ppa_pe9_phv_out.clear();
    csr_intr.clear();
    cfg_pkt_mem.clear();
    sta_pkt_mem.clear();
    cfg_bndl0_state_lkp_sram.clear();
    sta_bndl0_state_lkp_sram.clear();
    cfg_bndl1_state_lkp_sram.clear();
    sta_bndl1_state_lkp_sram.clear();
    cfg_bndl0_inq_mem.clear();
    sta_bndl0_inq_mem.clear();
    cfg_bndl1_inq_mem.clear();
    sta_bndl1_inq_mem.clear();
    cfg_outq_phv_mem.clear();
    sta_outq_phv_mem.clear();
    cfg_outq_ohi_mem.clear();
    sta_outq_ohi_mem.clear();
    cfg_bndl0_state_lkp_tcam.clear();
    sta_bndl0_state_lkp_tcam.clear();
    cfg_bndl1_state_lkp_tcam.clear();
    sta_bndl1_state_lkp_tcam.clear();
    cfg_pe0_phv_mem.clear();
    sta_pe0_phv_mem.clear();
    cfg_pe1_phv_mem.clear();
    sta_pe1_phv_mem.clear();
    cfg_pe2_phv_mem.clear();
    sta_pe2_phv_mem.clear();
    cfg_pe3_phv_mem.clear();
    sta_pe3_phv_mem.clear();
    cfg_pe4_phv_mem.clear();
    sta_pe4_phv_mem.clear();
    cfg_pe5_phv_mem.clear();
    sta_pe5_phv_mem.clear();
    cfg_pe6_phv_mem.clear();
    sta_pe6_phv_mem.clear();
    cfg_pe7_phv_mem.clear();
    sta_pe7_phv_mem.clear();
    cfg_pe8_phv_mem.clear();
    sta_pe8_phv_mem.clear();
    cfg_pe9_phv_mem.clear();
    sta_pe9_phv_mem.clear();
    cfg_sw_phv_global.clear();
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // cfg_sw_phv_control
    for(int ii = 0; ii < 8; ii++) {
        cfg_sw_phv_control[ii].clear();
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // cfg_sw_phv_config
    for(int ii = 0; ii < 8; ii++) {
        cfg_sw_phv_config[ii].clear();
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // sta_sw_phv_state
    for(int ii = 0; ii < 8; ii++) {
        sta_sw_phv_state[ii].clear();
    }
    #endif
    
    cfg_sw_phv_mem.clear();
    sta_sw_phv_mem.clear();
    sta_reorder_phv_not_sop_err.clear();
    sta_reorder.clear();
    sta_csum0.clear();
    sta_csum1.clear();
    sta_csum2.clear();
    sta_csum3.clear();
    sta_csum4.clear();
    sta_chkr_seq_id.clear();
    sta_pe0.clear();
    sta_pe1.clear();
    sta_pe2.clear();
    sta_pe3.clear();
    sta_pe4.clear();
    sta_pe5.clear();
    sta_pe6.clear();
    sta_pe7.clear();
    sta_pe8.clear();
    sta_pe9.clear();
    sta_bndl0_state_lkp.clear();
    sta_bndl1_state_lkp.clear();
    sta_fifo.clear();
    sta_bndl0.clear();
    sta_bndl1.clear();
    sta_pe_alloc.clear();
    cfg_debug_ctrl.clear();
    cfg_debug_port.clear();
    cfg_spare.clear();
    cfg_spare_dbg.clear();
    cfg_preparse.clear();
    sta_preparse.clear();
    CNT_preparse.clear();
    dhs_bndl0_state_lkp_tcam.clear();
    dhs_bndl0_state_lkp_tcam_ind.clear();
    dhs_bndl0_state_lkp_sram.clear();
    dhs_bndl1_state_lkp_tcam.clear();
    dhs_bndl1_state_lkp_tcam_ind.clear();
    dhs_bndl1_state_lkp_sram.clear();
    dhs_sw_phv_mem.clear();
    dhs_dbg_mem.clear();
    int_groups.clear();
    int_bndl0.clear();
    int_bndl1.clear();
    int_ecc.clear();
    int_fifo1.clear();
    int_fifo2.clear();
    int_pe0.clear();
    int_pe1.clear();
    int_pe2.clear();
    int_pe3.clear();
    int_pe4.clear();
    int_pe5.clear();
    int_pe6.clear();
    int_pe7.clear();
    int_pe8.clear();
    int_pe9.clear();
    int_pa.clear();
    int_intf.clear();
    int_sw_phv_mem.clear();
}

void cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::init() {

}

void cap_ppa_csr_int_sw_phv_mem_int_test_set_t::init() {

}

void cap_ppa_csr_int_sw_phv_mem_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_ppa_csr_int_intf_int_enable_clear_t::init() {

}

void cap_ppa_csr_int_intf_int_test_set_t::init() {

}

void cap_ppa_csr_int_intf_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_ppa_csr_int_pa_int_enable_clear_t::init() {

}

void cap_ppa_csr_int_pa_int_test_set_t::init() {

}

void cap_ppa_csr_int_pa_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_ppa_csr_int_pe9_int_enable_clear_t::init() {

}

void cap_ppa_csr_int_pe9_int_test_set_t::init() {

}

void cap_ppa_csr_int_pe9_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_ppa_csr_int_fifo2_int_enable_clear_t::init() {

}

void cap_ppa_csr_int_fifo2_int_test_set_t::init() {

}

void cap_ppa_csr_int_fifo2_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_ppa_csr_int_fifo1_int_enable_clear_t::init() {

}

void cap_ppa_csr_int_fifo1_int_test_set_t::init() {

}

void cap_ppa_csr_int_fifo1_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_ppa_csr_int_ecc_int_enable_clear_t::init() {

}

void cap_ppa_csr_int_ecc_int_test_set_t::init() {

}

void cap_ppa_csr_int_ecc_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_ppa_csr_int_bndl1_int_enable_clear_t::init() {

}

void cap_ppa_csr_int_bndl0_intreg_t::init() {

}

void cap_ppa_csr_int_bndl0_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_ppa_csr_intreg_status_t::init() {

}

void cap_ppa_csr_int_groups_int_enable_rw_reg_t::init() {

}

void cap_ppa_csr_intgrp_status_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_enable_rw_reg.set_attributes(this,"int_enable_rw_reg", 0x4 );
    int_rw_reg.set_attributes(this,"int_rw_reg", 0x8 );
}

void cap_ppa_csr_dhs_dbg_mem_entry_t::init() {

}

void cap_ppa_csr_dhs_dbg_mem_t::init() {

    #if 256 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 256; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_ppa_csr_dhs_sw_phv_mem_entry_t::init() {

}

void cap_ppa_csr_dhs_sw_phv_mem_t::init() {

    #if 16 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 16; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::init() {

}

void cap_ppa_csr_dhs_bndl1_state_lkp_sram_t::init() {

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 288; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t::init() {

}

void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::init() {

}

void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_t::init() {

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 288; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::init() {

}

void cap_ppa_csr_dhs_bndl0_state_lkp_sram_t::init() {

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 288; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t::init() {

}

void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::init() {

}

void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_t::init() {

    #if 288 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 288; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_ppa_csr_CNT_preparse_t::init() {

}

void cap_ppa_csr_sta_preparse_t::init() {

}

void cap_ppa_csr_cfg_preparse_t::init() {

    set_reset_val(cpp_int("0x8000"));
    all(get_reset_val());
}

void cap_ppa_csr_cfg_spare_dbg_t::init() {

    set_reset_val(cpp_int("0xdeadbeef"));
    all(get_reset_val());
}

void cap_ppa_csr_cfg_spare_t::init() {

}

void cap_ppa_csr_cfg_debug_port_t::init() {

}

void cap_ppa_csr_cfg_debug_ctrl_t::init() {

}

void cap_ppa_csr_sta_pe_alloc_t::init() {

}

void cap_ppa_csr_sta_bndl1_t::init() {

}

void cap_ppa_csr_sta_bndl0_t::init() {

}

void cap_ppa_csr_sta_fifo_t::init() {

}

void cap_ppa_csr_sta_bndl1_state_lkp_t::init() {

}

void cap_ppa_csr_sta_bndl0_state_lkp_t::init() {

}

void cap_ppa_csr_sta_pe9_t::init() {

}

void cap_ppa_csr_sta_pe8_t::init() {

}

void cap_ppa_csr_sta_pe7_t::init() {

}

void cap_ppa_csr_sta_pe6_t::init() {

}

void cap_ppa_csr_sta_pe5_t::init() {

}

void cap_ppa_csr_sta_pe4_t::init() {

}

void cap_ppa_csr_sta_pe3_t::init() {

}

void cap_ppa_csr_sta_pe2_t::init() {

}

void cap_ppa_csr_sta_pe1_t::init() {

}

void cap_ppa_csr_sta_pe0_t::init() {

}

void cap_ppa_csr_sta_chkr_seq_id_t::init() {

}

void cap_ppa_csr_sta_csum4_t::init() {

}

void cap_ppa_csr_sta_csum3_t::init() {

}

void cap_ppa_csr_sta_csum2_t::init() {

}

void cap_ppa_csr_sta_csum1_t::init() {

}

void cap_ppa_csr_sta_csum0_t::init() {

}

void cap_ppa_csr_sta_reorder_t::init() {

}

void cap_ppa_csr_sta_reorder_phv_not_sop_err_t::init() {

}

void cap_ppa_csr_sta_sw_phv_mem_t::init() {

}

void cap_ppa_csr_cfg_sw_phv_mem_t::init() {

}

void cap_ppa_csr_sta_sw_phv_state_t::init() {

}

void cap_ppa_csr_cfg_sw_phv_config_t::init() {

}

void cap_ppa_csr_cfg_sw_phv_control_t::init() {

}

void cap_ppa_csr_cfg_sw_phv_global_t::init() {

    set_reset_val(cpp_int("0x1"));
    all(get_reset_val());
}

void cap_ppa_csr_sta_pe9_phv_mem_t::init() {

}

void cap_ppa_csr_cfg_pe9_phv_mem_t::init() {

}

void cap_ppa_csr_sta_pe8_phv_mem_t::init() {

}

void cap_ppa_csr_cfg_pe8_phv_mem_t::init() {

}

void cap_ppa_csr_sta_pe7_phv_mem_t::init() {

}

void cap_ppa_csr_cfg_pe7_phv_mem_t::init() {

}

void cap_ppa_csr_sta_pe6_phv_mem_t::init() {

}

void cap_ppa_csr_cfg_pe6_phv_mem_t::init() {

}

void cap_ppa_csr_sta_pe5_phv_mem_t::init() {

}

void cap_ppa_csr_cfg_pe5_phv_mem_t::init() {

}

void cap_ppa_csr_sta_pe4_phv_mem_t::init() {

}

void cap_ppa_csr_cfg_pe4_phv_mem_t::init() {

}

void cap_ppa_csr_sta_pe3_phv_mem_t::init() {

}

void cap_ppa_csr_cfg_pe3_phv_mem_t::init() {

}

void cap_ppa_csr_sta_pe2_phv_mem_t::init() {

}

void cap_ppa_csr_cfg_pe2_phv_mem_t::init() {

}

void cap_ppa_csr_sta_pe1_phv_mem_t::init() {

}

void cap_ppa_csr_cfg_pe1_phv_mem_t::init() {

}

void cap_ppa_csr_sta_pe0_phv_mem_t::init() {

}

void cap_ppa_csr_cfg_pe0_phv_mem_t::init() {

}

void cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::init() {

}

void cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t::init() {

}

void cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::init() {

}

void cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t::init() {

}

void cap_ppa_csr_sta_outq_ohi_mem_t::init() {

}

void cap_ppa_csr_cfg_outq_ohi_mem_t::init() {

}

void cap_ppa_csr_sta_outq_phv_mem_t::init() {

}

void cap_ppa_csr_cfg_outq_phv_mem_t::init() {

}

void cap_ppa_csr_sta_bndl1_inq_mem_t::init() {

}

void cap_ppa_csr_cfg_bndl1_inq_mem_t::init() {

}

void cap_ppa_csr_sta_bndl0_inq_mem_t::init() {

}

void cap_ppa_csr_cfg_bndl0_inq_mem_t::init() {

}

void cap_ppa_csr_sta_bndl1_state_lkp_sram_t::init() {

}

void cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::init() {

}

void cap_ppa_csr_sta_bndl0_state_lkp_sram_t::init() {

}

void cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::init() {

}

void cap_ppa_csr_sta_pkt_mem_t::init() {

}

void cap_ppa_csr_cfg_pkt_mem_t::init() {

}

void cap_ppa_csr_csr_intr_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe9_phv_out_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe9_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe8_phv_out_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe8_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe7_phv_out_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe7_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe6_phv_out_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe6_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe5_phv_out_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe5_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe4_phv_out_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe4_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe3_phv_out_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe3_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe2_phv_out_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe2_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe1_phv_out_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe1_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe0_phv_out_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe0_t::init() {

}

void cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::init() {

}

void cap_ppa_csr_CNT_ppa_ohi_t::init() {

}

void cap_ppa_csr_CNT_ppa_sw_phv_t::init() {

}

void cap_ppa_csr_CNT_ppa_ma_t::init() {

}

void cap_ppa_csr_CNT_ppa_dp_t::init() {

}

void cap_ppa_csr_CNT_ppa_pb_t::init() {

}

void cap_ppa_csr_cfg_align_chk_profile_t::init() {

}

void cap_ppa_csr_cfg_len_chk_profile_t::init() {

}

void cap_ppa_csr_cfg_csum_phdr_profile_t::init() {

}

void cap_ppa_csr_cfg_csum_profile_t::init() {

}

void cap_ppa_csr_cfg_crc_mask_profile_t::init() {

}

void cap_ppa_csr_cfg_crc_profile_t::init() {

}

void cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::init() {

}

void cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::init() {

}

void cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t::init() {

}

void cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::init() {

}

void cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::init() {

}

void cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t::init() {

}

void cap_ppa_csr_cfg_init_profile_t::init() {

}

void cap_ppa_csr_cfg_ctrl_thresh_t::init() {

    set_reset_val(cpp_int("0x18d73"));
    all(get_reset_val());
}

void cap_ppa_csr_cfg_ctrl_t::init() {

    set_reset_val(cpp_int("0x6001fdc7f47fff"));
    all(get_reset_val());
}

void cap_ppa_csr_rdintr_t::init() {

}

void cap_ppa_csr_base_t::init() {

    set_reset_val(cpp_int("0x1"));
    all(get_reset_val());
}

void cap_ppa_csr_t::init() {

    base.set_attributes(this,"base", 0x0 );
    rdintr.set_attributes(this,"rdintr", 0x4 );
    cfg_ctrl.set_attributes(this,"cfg_ctrl", 0x8 );
    cfg_ctrl_thresh.set_attributes(this,"cfg_ctrl_thresh", 0x10 );
    #if 16 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_init_profile.set_attributes(this, "cfg_init_profile", 0x80);
    #else
    for(int ii = 0; ii < 16; ii++) {
        if(ii != 0) cfg_init_profile[ii].set_field_init_done(true, true);
        cfg_init_profile[ii].set_attributes(this,"cfg_init_profile["+to_string(ii)+"]",  0x80 + (cfg_init_profile[ii].get_byte_size()*ii));
    }
    #endif
    
    cfg_bndl0_state_lkp_tcam_grst.set_attributes(this,"cfg_bndl0_state_lkp_tcam_grst", 0x8000 );
    cfg_bndl0_state_lkp_tcam_ind.set_attributes(this,"cfg_bndl0_state_lkp_tcam_ind", 0x8010 );
    sta_bndl0_state_lkp_tcam_ind.set_attributes(this,"sta_bndl0_state_lkp_tcam_ind", 0x8020 );
    cfg_bndl1_state_lkp_tcam_grst.set_attributes(this,"cfg_bndl1_state_lkp_tcam_grst", 0x24000 );
    cfg_bndl1_state_lkp_tcam_ind.set_attributes(this,"cfg_bndl1_state_lkp_tcam_ind", 0x24010 );
    sta_bndl1_state_lkp_tcam_ind.set_attributes(this,"sta_bndl1_state_lkp_tcam_ind", 0x24020 );
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_crc_profile.set_attributes(this, "cfg_crc_profile", 0x40000);
    #else
    for(int ii = 0; ii < 8; ii++) {
        if(ii != 0) cfg_crc_profile[ii].set_field_init_done(true, true);
        cfg_crc_profile[ii].set_attributes(this,"cfg_crc_profile["+to_string(ii)+"]",  0x40000 + (cfg_crc_profile[ii].get_byte_size()*ii));
    }
    #endif
    
    #if 4 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_crc_mask_profile.set_attributes(this, "cfg_crc_mask_profile", 0x40040);
    #else
    for(int ii = 0; ii < 4; ii++) {
        if(ii != 0) cfg_crc_mask_profile[ii].set_field_init_done(true, true);
        cfg_crc_mask_profile[ii].set_attributes(this,"cfg_crc_mask_profile["+to_string(ii)+"]",  0x40040 + (cfg_crc_mask_profile[ii].get_byte_size()*ii));
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_csum_profile.set_attributes(this, "cfg_csum_profile", 0x40080);
    #else
    for(int ii = 0; ii < 8; ii++) {
        if(ii != 0) cfg_csum_profile[ii].set_field_init_done(true, true);
        cfg_csum_profile[ii].set_attributes(this,"cfg_csum_profile["+to_string(ii)+"]",  0x40080 + (cfg_csum_profile[ii].get_byte_size()*ii));
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_csum_phdr_profile.set_attributes(this, "cfg_csum_phdr_profile", 0x40100);
    #else
    for(int ii = 0; ii < 8; ii++) {
        if(ii != 0) cfg_csum_phdr_profile[ii].set_field_init_done(true, true);
        cfg_csum_phdr_profile[ii].set_attributes(this,"cfg_csum_phdr_profile["+to_string(ii)+"]",  0x40100 + (cfg_csum_phdr_profile[ii].get_byte_size()*ii));
    }
    #endif
    
    #if 4 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_len_chk_profile.set_attributes(this, "cfg_len_chk_profile", 0x40140);
    #else
    for(int ii = 0; ii < 4; ii++) {
        if(ii != 0) cfg_len_chk_profile[ii].set_field_init_done(true, true);
        cfg_len_chk_profile[ii].set_attributes(this,"cfg_len_chk_profile["+to_string(ii)+"]",  0x40140 + (cfg_len_chk_profile[ii].get_byte_size()*ii));
    }
    #endif
    
    #if 4 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_align_chk_profile.set_attributes(this, "cfg_align_chk_profile", 0x40150);
    #else
    for(int ii = 0; ii < 4; ii++) {
        if(ii != 0) cfg_align_chk_profile[ii].set_field_init_done(true, true);
        cfg_align_chk_profile[ii].set_attributes(this,"cfg_align_chk_profile["+to_string(ii)+"]",  0x40150 + (cfg_align_chk_profile[ii].get_byte_size()*ii));
    }
    #endif
    
    CNT_ppa_pb.set_attributes(this,"CNT_ppa_pb", 0x40160 );
    CNT_ppa_dp.set_attributes(this,"CNT_ppa_dp", 0x40170 );
    CNT_ppa_ma.set_attributes(this,"CNT_ppa_ma", 0x40180 );
    CNT_ppa_sw_phv.set_attributes(this,"CNT_ppa_sw_phv", 0x40190 );
    CNT_ppa_ohi.set_attributes(this,"CNT_ppa_ohi", 0x401a0 );
    CNT_ppa_pe0_pkt_in.set_attributes(this,"CNT_ppa_pe0_pkt_in", 0x401b0 );
    CNT_ppa_pe0.set_attributes(this,"CNT_ppa_pe0", 0x401b8 );
    CNT_ppa_pe0_phv_out.set_attributes(this,"CNT_ppa_pe0_phv_out", 0x401c0 );
    CNT_ppa_pe1_pkt_in.set_attributes(this,"CNT_ppa_pe1_pkt_in", 0x401c8 );
    CNT_ppa_pe1.set_attributes(this,"CNT_ppa_pe1", 0x401d0 );
    CNT_ppa_pe1_phv_out.set_attributes(this,"CNT_ppa_pe1_phv_out", 0x401d8 );
    CNT_ppa_pe2_pkt_in.set_attributes(this,"CNT_ppa_pe2_pkt_in", 0x401e0 );
    CNT_ppa_pe2.set_attributes(this,"CNT_ppa_pe2", 0x401e8 );
    CNT_ppa_pe2_phv_out.set_attributes(this,"CNT_ppa_pe2_phv_out", 0x401f0 );
    CNT_ppa_pe3_pkt_in.set_attributes(this,"CNT_ppa_pe3_pkt_in", 0x401f8 );
    CNT_ppa_pe3.set_attributes(this,"CNT_ppa_pe3", 0x40200 );
    CNT_ppa_pe3_phv_out.set_attributes(this,"CNT_ppa_pe3_phv_out", 0x40208 );
    CNT_ppa_pe4_pkt_in.set_attributes(this,"CNT_ppa_pe4_pkt_in", 0x40210 );
    CNT_ppa_pe4.set_attributes(this,"CNT_ppa_pe4", 0x40218 );
    CNT_ppa_pe4_phv_out.set_attributes(this,"CNT_ppa_pe4_phv_out", 0x40220 );
    CNT_ppa_pe5_pkt_in.set_attributes(this,"CNT_ppa_pe5_pkt_in", 0x40228 );
    CNT_ppa_pe5.set_attributes(this,"CNT_ppa_pe5", 0x40230 );
    CNT_ppa_pe5_phv_out.set_attributes(this,"CNT_ppa_pe5_phv_out", 0x40238 );
    CNT_ppa_pe6_pkt_in.set_attributes(this,"CNT_ppa_pe6_pkt_in", 0x40240 );
    CNT_ppa_pe6.set_attributes(this,"CNT_ppa_pe6", 0x40248 );
    CNT_ppa_pe6_phv_out.set_attributes(this,"CNT_ppa_pe6_phv_out", 0x40250 );
    CNT_ppa_pe7_pkt_in.set_attributes(this,"CNT_ppa_pe7_pkt_in", 0x40258 );
    CNT_ppa_pe7.set_attributes(this,"CNT_ppa_pe7", 0x40260 );
    CNT_ppa_pe7_phv_out.set_attributes(this,"CNT_ppa_pe7_phv_out", 0x40268 );
    CNT_ppa_pe8_pkt_in.set_attributes(this,"CNT_ppa_pe8_pkt_in", 0x40270 );
    CNT_ppa_pe8.set_attributes(this,"CNT_ppa_pe8", 0x40278 );
    CNT_ppa_pe8_phv_out.set_attributes(this,"CNT_ppa_pe8_phv_out", 0x40280 );
    CNT_ppa_pe9_pkt_in.set_attributes(this,"CNT_ppa_pe9_pkt_in", 0x40288 );
    CNT_ppa_pe9.set_attributes(this,"CNT_ppa_pe9", 0x40290 );
    CNT_ppa_pe9_phv_out.set_attributes(this,"CNT_ppa_pe9_phv_out", 0x40298 );
    csr_intr.set_attributes(this,"csr_intr", 0x402a0 );
    cfg_pkt_mem.set_attributes(this,"cfg_pkt_mem", 0x403d0 );
    sta_pkt_mem.set_attributes(this,"sta_pkt_mem", 0x403d4 );
    cfg_bndl0_state_lkp_sram.set_attributes(this,"cfg_bndl0_state_lkp_sram", 0x403d8 );
    sta_bndl0_state_lkp_sram.set_attributes(this,"sta_bndl0_state_lkp_sram", 0x403e0 );
    cfg_bndl1_state_lkp_sram.set_attributes(this,"cfg_bndl1_state_lkp_sram", 0x403f0 );
    sta_bndl1_state_lkp_sram.set_attributes(this,"sta_bndl1_state_lkp_sram", 0x40400 );
    cfg_bndl0_inq_mem.set_attributes(this,"cfg_bndl0_inq_mem", 0x40410 );
    sta_bndl0_inq_mem.set_attributes(this,"sta_bndl0_inq_mem", 0x40414 );
    cfg_bndl1_inq_mem.set_attributes(this,"cfg_bndl1_inq_mem", 0x40418 );
    sta_bndl1_inq_mem.set_attributes(this,"sta_bndl1_inq_mem", 0x4041c );
    cfg_outq_phv_mem.set_attributes(this,"cfg_outq_phv_mem", 0x40420 );
    sta_outq_phv_mem.set_attributes(this,"sta_outq_phv_mem", 0x40424 );
    cfg_outq_ohi_mem.set_attributes(this,"cfg_outq_ohi_mem", 0x40428 );
    sta_outq_ohi_mem.set_attributes(this,"sta_outq_ohi_mem", 0x4042c );
    cfg_bndl0_state_lkp_tcam.set_attributes(this,"cfg_bndl0_state_lkp_tcam", 0x40430 );
    sta_bndl0_state_lkp_tcam.set_attributes(this,"sta_bndl0_state_lkp_tcam", 0x40434 );
    cfg_bndl1_state_lkp_tcam.set_attributes(this,"cfg_bndl1_state_lkp_tcam", 0x40438 );
    sta_bndl1_state_lkp_tcam.set_attributes(this,"sta_bndl1_state_lkp_tcam", 0x4043c );
    cfg_pe0_phv_mem.set_attributes(this,"cfg_pe0_phv_mem", 0x40440 );
    sta_pe0_phv_mem.set_attributes(this,"sta_pe0_phv_mem", 0x40444 );
    cfg_pe1_phv_mem.set_attributes(this,"cfg_pe1_phv_mem", 0x40448 );
    sta_pe1_phv_mem.set_attributes(this,"sta_pe1_phv_mem", 0x4044c );
    cfg_pe2_phv_mem.set_attributes(this,"cfg_pe2_phv_mem", 0x40450 );
    sta_pe2_phv_mem.set_attributes(this,"sta_pe2_phv_mem", 0x40454 );
    cfg_pe3_phv_mem.set_attributes(this,"cfg_pe3_phv_mem", 0x40458 );
    sta_pe3_phv_mem.set_attributes(this,"sta_pe3_phv_mem", 0x4045c );
    cfg_pe4_phv_mem.set_attributes(this,"cfg_pe4_phv_mem", 0x40460 );
    sta_pe4_phv_mem.set_attributes(this,"sta_pe4_phv_mem", 0x40464 );
    cfg_pe5_phv_mem.set_attributes(this,"cfg_pe5_phv_mem", 0x40468 );
    sta_pe5_phv_mem.set_attributes(this,"sta_pe5_phv_mem", 0x4046c );
    cfg_pe6_phv_mem.set_attributes(this,"cfg_pe6_phv_mem", 0x40470 );
    sta_pe6_phv_mem.set_attributes(this,"sta_pe6_phv_mem", 0x40474 );
    cfg_pe7_phv_mem.set_attributes(this,"cfg_pe7_phv_mem", 0x40478 );
    sta_pe7_phv_mem.set_attributes(this,"sta_pe7_phv_mem", 0x4047c );
    cfg_pe8_phv_mem.set_attributes(this,"cfg_pe8_phv_mem", 0x40480 );
    sta_pe8_phv_mem.set_attributes(this,"sta_pe8_phv_mem", 0x40484 );
    cfg_pe9_phv_mem.set_attributes(this,"cfg_pe9_phv_mem", 0x40488 );
    sta_pe9_phv_mem.set_attributes(this,"sta_pe9_phv_mem", 0x4048c );
    cfg_sw_phv_global.set_attributes(this,"cfg_sw_phv_global", 0x40490 );
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_sw_phv_control.set_attributes(this, "cfg_sw_phv_control", 0x404a0);
    #else
    for(int ii = 0; ii < 8; ii++) {
        if(ii != 0) cfg_sw_phv_control[ii].set_field_init_done(true, true);
        cfg_sw_phv_control[ii].set_attributes(this,"cfg_sw_phv_control["+to_string(ii)+"]",  0x404a0 + (cfg_sw_phv_control[ii].get_byte_size()*ii));
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    cfg_sw_phv_config.set_attributes(this, "cfg_sw_phv_config", 0x40500);
    #else
    for(int ii = 0; ii < 8; ii++) {
        if(ii != 0) cfg_sw_phv_config[ii].set_field_init_done(true, true);
        cfg_sw_phv_config[ii].set_attributes(this,"cfg_sw_phv_config["+to_string(ii)+"]",  0x40500 + (cfg_sw_phv_config[ii].get_byte_size()*ii));
    }
    #endif
    
    #if 8 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    sta_sw_phv_state.set_attributes(this, "sta_sw_phv_state", 0x40580);
    #else
    for(int ii = 0; ii < 8; ii++) {
        if(ii != 0) sta_sw_phv_state[ii].set_field_init_done(true, true);
        sta_sw_phv_state[ii].set_attributes(this,"sta_sw_phv_state["+to_string(ii)+"]",  0x40580 + (sta_sw_phv_state[ii].get_byte_size()*ii));
    }
    #endif
    
    cfg_sw_phv_mem.set_attributes(this,"cfg_sw_phv_mem", 0x41000 );
    sta_sw_phv_mem.set_attributes(this,"sta_sw_phv_mem", 0x41004 );
    sta_reorder_phv_not_sop_err.set_attributes(this,"sta_reorder_phv_not_sop_err", 0x41020 );
    sta_reorder.set_attributes(this,"sta_reorder", 0x41028 );
    sta_csum0.set_attributes(this,"sta_csum0", 0x41030 );
    sta_csum1.set_attributes(this,"sta_csum1", 0x41034 );
    sta_csum2.set_attributes(this,"sta_csum2", 0x41038 );
    sta_csum3.set_attributes(this,"sta_csum3", 0x4103c );
    sta_csum4.set_attributes(this,"sta_csum4", 0x41040 );
    sta_chkr_seq_id.set_attributes(this,"sta_chkr_seq_id", 0x41044 );
    sta_pe0.set_attributes(this,"sta_pe0", 0x41050 );
    sta_pe1.set_attributes(this,"sta_pe1", 0x41060 );
    sta_pe2.set_attributes(this,"sta_pe2", 0x41070 );
    sta_pe3.set_attributes(this,"sta_pe3", 0x41080 );
    sta_pe4.set_attributes(this,"sta_pe4", 0x41090 );
    sta_pe5.set_attributes(this,"sta_pe5", 0x410a0 );
    sta_pe6.set_attributes(this,"sta_pe6", 0x410b0 );
    sta_pe7.set_attributes(this,"sta_pe7", 0x410c0 );
    sta_pe8.set_attributes(this,"sta_pe8", 0x410d0 );
    sta_pe9.set_attributes(this,"sta_pe9", 0x410e0 );
    sta_bndl0_state_lkp.set_attributes(this,"sta_bndl0_state_lkp", 0x410f0 );
    sta_bndl1_state_lkp.set_attributes(this,"sta_bndl1_state_lkp", 0x410f4 );
    sta_fifo.set_attributes(this,"sta_fifo", 0x41100 );
    sta_bndl0.set_attributes(this,"sta_bndl0", 0x41110 );
    sta_bndl1.set_attributes(this,"sta_bndl1", 0x41120 );
    sta_pe_alloc.set_attributes(this,"sta_pe_alloc", 0x41130 );
    cfg_debug_ctrl.set_attributes(this,"cfg_debug_ctrl", 0x41134 );
    cfg_debug_port.set_attributes(this,"cfg_debug_port", 0x50000 );
    cfg_spare.set_attributes(this,"cfg_spare", 0x50040 );
    cfg_spare_dbg.set_attributes(this,"cfg_spare_dbg", 0x50080 );
    cfg_preparse.set_attributes(this,"cfg_preparse", 0x50090 );
    sta_preparse.set_attributes(this,"sta_preparse", 0x500a0 );
    CNT_preparse.set_attributes(this,"CNT_preparse", 0x500b0 );
    dhs_bndl0_state_lkp_tcam.set_attributes(this,"dhs_bndl0_state_lkp_tcam", 0x4000 );
    dhs_bndl0_state_lkp_tcam_ind.set_attributes(this,"dhs_bndl0_state_lkp_tcam_ind", 0x8024 );
    dhs_bndl0_state_lkp_sram.set_attributes(this,"dhs_bndl0_state_lkp_sram", 0x10000 );
    dhs_bndl1_state_lkp_tcam.set_attributes(this,"dhs_bndl1_state_lkp_tcam", 0x20000 );
    dhs_bndl1_state_lkp_tcam_ind.set_attributes(this,"dhs_bndl1_state_lkp_tcam_ind", 0x24024 );
    dhs_bndl1_state_lkp_sram.set_attributes(this,"dhs_bndl1_state_lkp_sram", 0x30000 );
    dhs_sw_phv_mem.set_attributes(this,"dhs_sw_phv_mem", 0x40800 );
    dhs_dbg_mem.set_attributes(this,"dhs_dbg_mem", 0x48000 );
    int_groups.set_attributes(this,"int_groups", 0x402b0 );
    int_bndl0.set_attributes(this,"int_bndl0", 0x402c0 );
    int_bndl1.set_attributes(this,"int_bndl1", 0x402d0 );
    int_ecc.set_attributes(this,"int_ecc", 0x402e0 );
    int_fifo1.set_attributes(this,"int_fifo1", 0x402f0 );
    int_fifo2.set_attributes(this,"int_fifo2", 0x40300 );
    int_pe0.set_attributes(this,"int_pe0", 0x40310 );
    int_pe1.set_attributes(this,"int_pe1", 0x40320 );
    int_pe2.set_attributes(this,"int_pe2", 0x40330 );
    int_pe3.set_attributes(this,"int_pe3", 0x40340 );
    int_pe4.set_attributes(this,"int_pe4", 0x40350 );
    int_pe5.set_attributes(this,"int_pe5", 0x40360 );
    int_pe6.set_attributes(this,"int_pe6", 0x40370 );
    int_pe7.set_attributes(this,"int_pe7", 0x40380 );
    int_pe8.set_attributes(this,"int_pe8", 0x40390 );
    int_pe9.set_attributes(this,"int_pe9", 0x403a0 );
    int_pa.set_attributes(this,"int_pa", 0x403b0 );
    int_intf.set_attributes(this,"int_intf", 0x403c0 );
    int_sw_phv_mem.set_attributes(this,"int_sw_phv_mem", 0x41010 );
}

void cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::ecc_uncorrectable_enable(const cpp_int & _val) { 
    // ecc_uncorrectable_enable
    int_var__ecc_uncorrectable_enable = _val.convert_to< ecc_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::ecc_uncorrectable_enable() const {
    return int_var__ecc_uncorrectable_enable;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::ecc_correctable_enable(const cpp_int & _val) { 
    // ecc_correctable_enable
    int_var__ecc_correctable_enable = _val.convert_to< ecc_correctable_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::ecc_correctable_enable() const {
    return int_var__ecc_correctable_enable;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_invalid_sram_enable(const cpp_int & _val) { 
    // phv_invalid_sram_enable
    int_var__phv_invalid_sram_enable = _val.convert_to< phv_invalid_sram_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_invalid_sram_enable() const {
    return int_var__phv_invalid_sram_enable;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_invalid_data_enable(const cpp_int & _val) { 
    // phv_invalid_data_enable
    int_var__phv_invalid_data_enable = _val.convert_to< phv_invalid_data_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_invalid_data_enable() const {
    return int_var__phv_invalid_data_enable;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_done0_enable(const cpp_int & _val) { 
    // phv_done0_enable
    int_var__phv_done0_enable = _val.convert_to< phv_done0_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_done0_enable() const {
    return int_var__phv_done0_enable;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_done1_enable(const cpp_int & _val) { 
    // phv_done1_enable
    int_var__phv_done1_enable = _val.convert_to< phv_done1_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_done1_enable() const {
    return int_var__phv_done1_enable;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_done2_enable(const cpp_int & _val) { 
    // phv_done2_enable
    int_var__phv_done2_enable = _val.convert_to< phv_done2_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_done2_enable() const {
    return int_var__phv_done2_enable;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_done3_enable(const cpp_int & _val) { 
    // phv_done3_enable
    int_var__phv_done3_enable = _val.convert_to< phv_done3_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_done3_enable() const {
    return int_var__phv_done3_enable;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_done4_enable(const cpp_int & _val) { 
    // phv_done4_enable
    int_var__phv_done4_enable = _val.convert_to< phv_done4_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_done4_enable() const {
    return int_var__phv_done4_enable;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_done5_enable(const cpp_int & _val) { 
    // phv_done5_enable
    int_var__phv_done5_enable = _val.convert_to< phv_done5_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_done5_enable() const {
    return int_var__phv_done5_enable;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_done6_enable(const cpp_int & _val) { 
    // phv_done6_enable
    int_var__phv_done6_enable = _val.convert_to< phv_done6_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_done6_enable() const {
    return int_var__phv_done6_enable;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_done7_enable(const cpp_int & _val) { 
    // phv_done7_enable
    int_var__phv_done7_enable = _val.convert_to< phv_done7_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::phv_done7_enable() const {
    return int_var__phv_done7_enable;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_test_set_t::ecc_uncorrectable_interrupt(const cpp_int & _val) { 
    // ecc_uncorrectable_interrupt
    int_var__ecc_uncorrectable_interrupt = _val.convert_to< ecc_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_test_set_t::ecc_uncorrectable_interrupt() const {
    return int_var__ecc_uncorrectable_interrupt;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_test_set_t::ecc_correctable_interrupt(const cpp_int & _val) { 
    // ecc_correctable_interrupt
    int_var__ecc_correctable_interrupt = _val.convert_to< ecc_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_test_set_t::ecc_correctable_interrupt() const {
    return int_var__ecc_correctable_interrupt;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_invalid_sram_interrupt(const cpp_int & _val) { 
    // phv_invalid_sram_interrupt
    int_var__phv_invalid_sram_interrupt = _val.convert_to< phv_invalid_sram_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_invalid_sram_interrupt() const {
    return int_var__phv_invalid_sram_interrupt;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_invalid_data_interrupt(const cpp_int & _val) { 
    // phv_invalid_data_interrupt
    int_var__phv_invalid_data_interrupt = _val.convert_to< phv_invalid_data_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_invalid_data_interrupt() const {
    return int_var__phv_invalid_data_interrupt;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_done0_interrupt(const cpp_int & _val) { 
    // phv_done0_interrupt
    int_var__phv_done0_interrupt = _val.convert_to< phv_done0_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_done0_interrupt() const {
    return int_var__phv_done0_interrupt;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_done1_interrupt(const cpp_int & _val) { 
    // phv_done1_interrupt
    int_var__phv_done1_interrupt = _val.convert_to< phv_done1_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_done1_interrupt() const {
    return int_var__phv_done1_interrupt;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_done2_interrupt(const cpp_int & _val) { 
    // phv_done2_interrupt
    int_var__phv_done2_interrupt = _val.convert_to< phv_done2_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_done2_interrupt() const {
    return int_var__phv_done2_interrupt;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_done3_interrupt(const cpp_int & _val) { 
    // phv_done3_interrupt
    int_var__phv_done3_interrupt = _val.convert_to< phv_done3_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_done3_interrupt() const {
    return int_var__phv_done3_interrupt;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_done4_interrupt(const cpp_int & _val) { 
    // phv_done4_interrupt
    int_var__phv_done4_interrupt = _val.convert_to< phv_done4_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_done4_interrupt() const {
    return int_var__phv_done4_interrupt;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_done5_interrupt(const cpp_int & _val) { 
    // phv_done5_interrupt
    int_var__phv_done5_interrupt = _val.convert_to< phv_done5_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_done5_interrupt() const {
    return int_var__phv_done5_interrupt;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_done6_interrupt(const cpp_int & _val) { 
    // phv_done6_interrupt
    int_var__phv_done6_interrupt = _val.convert_to< phv_done6_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_done6_interrupt() const {
    return int_var__phv_done6_interrupt;
}
    
void cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_done7_interrupt(const cpp_int & _val) { 
    // phv_done7_interrupt
    int_var__phv_done7_interrupt = _val.convert_to< phv_done7_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_sw_phv_mem_int_test_set_t::phv_done7_interrupt() const {
    return int_var__phv_done7_interrupt;
}
    
void cap_ppa_csr_int_intf_int_enable_clear_t::pb_err_enable(const cpp_int & _val) { 
    // pb_err_enable
    int_var__pb_err_enable = _val.convert_to< pb_err_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_enable_clear_t::pb_err_enable() const {
    return int_var__pb_err_enable;
}
    
void cap_ppa_csr_int_intf_int_enable_clear_t::pb_sop_err_enable(const cpp_int & _val) { 
    // pb_sop_err_enable
    int_var__pb_sop_err_enable = _val.convert_to< pb_sop_err_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_enable_clear_t::pb_sop_err_enable() const {
    return int_var__pb_sop_err_enable;
}
    
void cap_ppa_csr_int_intf_int_enable_clear_t::pb_eop_err_enable(const cpp_int & _val) { 
    // pb_eop_err_enable
    int_var__pb_eop_err_enable = _val.convert_to< pb_eop_err_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_enable_clear_t::pb_eop_err_enable() const {
    return int_var__pb_eop_err_enable;
}
    
void cap_ppa_csr_int_intf_int_enable_clear_t::dp_err_enable(const cpp_int & _val) { 
    // dp_err_enable
    int_var__dp_err_enable = _val.convert_to< dp_err_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_enable_clear_t::dp_err_enable() const {
    return int_var__dp_err_enable;
}
    
void cap_ppa_csr_int_intf_int_enable_clear_t::dp_sop_err_enable(const cpp_int & _val) { 
    // dp_sop_err_enable
    int_var__dp_sop_err_enable = _val.convert_to< dp_sop_err_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_enable_clear_t::dp_sop_err_enable() const {
    return int_var__dp_sop_err_enable;
}
    
void cap_ppa_csr_int_intf_int_enable_clear_t::dp_eop_err_enable(const cpp_int & _val) { 
    // dp_eop_err_enable
    int_var__dp_eop_err_enable = _val.convert_to< dp_eop_err_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_enable_clear_t::dp_eop_err_enable() const {
    return int_var__dp_eop_err_enable;
}
    
void cap_ppa_csr_int_intf_int_enable_clear_t::ohi_err_enable(const cpp_int & _val) { 
    // ohi_err_enable
    int_var__ohi_err_enable = _val.convert_to< ohi_err_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_enable_clear_t::ohi_err_enable() const {
    return int_var__ohi_err_enable;
}
    
void cap_ppa_csr_int_intf_int_enable_clear_t::ohi_sop_err_enable(const cpp_int & _val) { 
    // ohi_sop_err_enable
    int_var__ohi_sop_err_enable = _val.convert_to< ohi_sop_err_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_enable_clear_t::ohi_sop_err_enable() const {
    return int_var__ohi_sop_err_enable;
}
    
void cap_ppa_csr_int_intf_int_enable_clear_t::ohi_eop_err_enable(const cpp_int & _val) { 
    // ohi_eop_err_enable
    int_var__ohi_eop_err_enable = _val.convert_to< ohi_eop_err_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_enable_clear_t::ohi_eop_err_enable() const {
    return int_var__ohi_eop_err_enable;
}
    
void cap_ppa_csr_int_intf_int_enable_clear_t::sw_phv_err_enable(const cpp_int & _val) { 
    // sw_phv_err_enable
    int_var__sw_phv_err_enable = _val.convert_to< sw_phv_err_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_enable_clear_t::sw_phv_err_enable() const {
    return int_var__sw_phv_err_enable;
}
    
void cap_ppa_csr_int_intf_int_enable_clear_t::sw_phv_sop_err_enable(const cpp_int & _val) { 
    // sw_phv_sop_err_enable
    int_var__sw_phv_sop_err_enable = _val.convert_to< sw_phv_sop_err_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_enable_clear_t::sw_phv_sop_err_enable() const {
    return int_var__sw_phv_sop_err_enable;
}
    
void cap_ppa_csr_int_intf_int_enable_clear_t::sw_phv_eop_err_enable(const cpp_int & _val) { 
    // sw_phv_eop_err_enable
    int_var__sw_phv_eop_err_enable = _val.convert_to< sw_phv_eop_err_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_enable_clear_t::sw_phv_eop_err_enable() const {
    return int_var__sw_phv_eop_err_enable;
}
    
void cap_ppa_csr_int_intf_int_enable_clear_t::ma_err_enable(const cpp_int & _val) { 
    // ma_err_enable
    int_var__ma_err_enable = _val.convert_to< ma_err_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_enable_clear_t::ma_err_enable() const {
    return int_var__ma_err_enable;
}
    
void cap_ppa_csr_int_intf_int_enable_clear_t::ma_sop_err_enable(const cpp_int & _val) { 
    // ma_sop_err_enable
    int_var__ma_sop_err_enable = _val.convert_to< ma_sop_err_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_enable_clear_t::ma_sop_err_enable() const {
    return int_var__ma_sop_err_enable;
}
    
void cap_ppa_csr_int_intf_int_enable_clear_t::ma_eop_err_enable(const cpp_int & _val) { 
    // ma_eop_err_enable
    int_var__ma_eop_err_enable = _val.convert_to< ma_eop_err_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_enable_clear_t::ma_eop_err_enable() const {
    return int_var__ma_eop_err_enable;
}
    
void cap_ppa_csr_int_intf_int_test_set_t::pb_err_interrupt(const cpp_int & _val) { 
    // pb_err_interrupt
    int_var__pb_err_interrupt = _val.convert_to< pb_err_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_test_set_t::pb_err_interrupt() const {
    return int_var__pb_err_interrupt;
}
    
void cap_ppa_csr_int_intf_int_test_set_t::pb_sop_err_interrupt(const cpp_int & _val) { 
    // pb_sop_err_interrupt
    int_var__pb_sop_err_interrupt = _val.convert_to< pb_sop_err_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_test_set_t::pb_sop_err_interrupt() const {
    return int_var__pb_sop_err_interrupt;
}
    
void cap_ppa_csr_int_intf_int_test_set_t::pb_eop_err_interrupt(const cpp_int & _val) { 
    // pb_eop_err_interrupt
    int_var__pb_eop_err_interrupt = _val.convert_to< pb_eop_err_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_test_set_t::pb_eop_err_interrupt() const {
    return int_var__pb_eop_err_interrupt;
}
    
void cap_ppa_csr_int_intf_int_test_set_t::dp_err_interrupt(const cpp_int & _val) { 
    // dp_err_interrupt
    int_var__dp_err_interrupt = _val.convert_to< dp_err_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_test_set_t::dp_err_interrupt() const {
    return int_var__dp_err_interrupt;
}
    
void cap_ppa_csr_int_intf_int_test_set_t::dp_sop_err_interrupt(const cpp_int & _val) { 
    // dp_sop_err_interrupt
    int_var__dp_sop_err_interrupt = _val.convert_to< dp_sop_err_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_test_set_t::dp_sop_err_interrupt() const {
    return int_var__dp_sop_err_interrupt;
}
    
void cap_ppa_csr_int_intf_int_test_set_t::dp_eop_err_interrupt(const cpp_int & _val) { 
    // dp_eop_err_interrupt
    int_var__dp_eop_err_interrupt = _val.convert_to< dp_eop_err_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_test_set_t::dp_eop_err_interrupt() const {
    return int_var__dp_eop_err_interrupt;
}
    
void cap_ppa_csr_int_intf_int_test_set_t::ohi_err_interrupt(const cpp_int & _val) { 
    // ohi_err_interrupt
    int_var__ohi_err_interrupt = _val.convert_to< ohi_err_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_test_set_t::ohi_err_interrupt() const {
    return int_var__ohi_err_interrupt;
}
    
void cap_ppa_csr_int_intf_int_test_set_t::ohi_sop_err_interrupt(const cpp_int & _val) { 
    // ohi_sop_err_interrupt
    int_var__ohi_sop_err_interrupt = _val.convert_to< ohi_sop_err_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_test_set_t::ohi_sop_err_interrupt() const {
    return int_var__ohi_sop_err_interrupt;
}
    
void cap_ppa_csr_int_intf_int_test_set_t::ohi_eop_err_interrupt(const cpp_int & _val) { 
    // ohi_eop_err_interrupt
    int_var__ohi_eop_err_interrupt = _val.convert_to< ohi_eop_err_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_test_set_t::ohi_eop_err_interrupt() const {
    return int_var__ohi_eop_err_interrupt;
}
    
void cap_ppa_csr_int_intf_int_test_set_t::sw_phv_err_interrupt(const cpp_int & _val) { 
    // sw_phv_err_interrupt
    int_var__sw_phv_err_interrupt = _val.convert_to< sw_phv_err_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_test_set_t::sw_phv_err_interrupt() const {
    return int_var__sw_phv_err_interrupt;
}
    
void cap_ppa_csr_int_intf_int_test_set_t::sw_phv_sop_err_interrupt(const cpp_int & _val) { 
    // sw_phv_sop_err_interrupt
    int_var__sw_phv_sop_err_interrupt = _val.convert_to< sw_phv_sop_err_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_test_set_t::sw_phv_sop_err_interrupt() const {
    return int_var__sw_phv_sop_err_interrupt;
}
    
void cap_ppa_csr_int_intf_int_test_set_t::sw_phv_eop_err_interrupt(const cpp_int & _val) { 
    // sw_phv_eop_err_interrupt
    int_var__sw_phv_eop_err_interrupt = _val.convert_to< sw_phv_eop_err_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_test_set_t::sw_phv_eop_err_interrupt() const {
    return int_var__sw_phv_eop_err_interrupt;
}
    
void cap_ppa_csr_int_intf_int_test_set_t::ma_err_interrupt(const cpp_int & _val) { 
    // ma_err_interrupt
    int_var__ma_err_interrupt = _val.convert_to< ma_err_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_test_set_t::ma_err_interrupt() const {
    return int_var__ma_err_interrupt;
}
    
void cap_ppa_csr_int_intf_int_test_set_t::ma_sop_err_interrupt(const cpp_int & _val) { 
    // ma_sop_err_interrupt
    int_var__ma_sop_err_interrupt = _val.convert_to< ma_sop_err_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_test_set_t::ma_sop_err_interrupt() const {
    return int_var__ma_sop_err_interrupt;
}
    
void cap_ppa_csr_int_intf_int_test_set_t::ma_eop_err_interrupt(const cpp_int & _val) { 
    // ma_eop_err_interrupt
    int_var__ma_eop_err_interrupt = _val.convert_to< ma_eop_err_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_intf_int_test_set_t::ma_eop_err_interrupt() const {
    return int_var__ma_eop_err_interrupt;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::reorder_phv_not_sop_enable(const cpp_int & _val) { 
    // reorder_phv_not_sop_enable
    int_var__reorder_phv_not_sop_enable = _val.convert_to< reorder_phv_not_sop_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::reorder_phv_not_sop_enable() const {
    return int_var__reorder_phv_not_sop_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::csum0_not_enuf_bytes_enable(const cpp_int & _val) { 
    // csum0_not_enuf_bytes_enable
    int_var__csum0_not_enuf_bytes_enable = _val.convert_to< csum0_not_enuf_bytes_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::csum0_not_enuf_bytes_enable() const {
    return int_var__csum0_not_enuf_bytes_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::csum0_start_more_than_end_offset_enable(const cpp_int & _val) { 
    // csum0_start_more_than_end_offset_enable
    int_var__csum0_start_more_than_end_offset_enable = _val.convert_to< csum0_start_more_than_end_offset_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::csum0_start_more_than_end_offset_enable() const {
    return int_var__csum0_start_more_than_end_offset_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::csum1_not_enuf_bytes_enable(const cpp_int & _val) { 
    // csum1_not_enuf_bytes_enable
    int_var__csum1_not_enuf_bytes_enable = _val.convert_to< csum1_not_enuf_bytes_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::csum1_not_enuf_bytes_enable() const {
    return int_var__csum1_not_enuf_bytes_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::csum1_start_more_than_end_offset_enable(const cpp_int & _val) { 
    // csum1_start_more_than_end_offset_enable
    int_var__csum1_start_more_than_end_offset_enable = _val.convert_to< csum1_start_more_than_end_offset_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::csum1_start_more_than_end_offset_enable() const {
    return int_var__csum1_start_more_than_end_offset_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::csum2_not_enuf_bytes_enable(const cpp_int & _val) { 
    // csum2_not_enuf_bytes_enable
    int_var__csum2_not_enuf_bytes_enable = _val.convert_to< csum2_not_enuf_bytes_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::csum2_not_enuf_bytes_enable() const {
    return int_var__csum2_not_enuf_bytes_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::csum2_start_more_than_end_offset_enable(const cpp_int & _val) { 
    // csum2_start_more_than_end_offset_enable
    int_var__csum2_start_more_than_end_offset_enable = _val.convert_to< csum2_start_more_than_end_offset_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::csum2_start_more_than_end_offset_enable() const {
    return int_var__csum2_start_more_than_end_offset_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::csum3_not_enuf_bytes_enable(const cpp_int & _val) { 
    // csum3_not_enuf_bytes_enable
    int_var__csum3_not_enuf_bytes_enable = _val.convert_to< csum3_not_enuf_bytes_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::csum3_not_enuf_bytes_enable() const {
    return int_var__csum3_not_enuf_bytes_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::csum3_start_more_than_end_offset_enable(const cpp_int & _val) { 
    // csum3_start_more_than_end_offset_enable
    int_var__csum3_start_more_than_end_offset_enable = _val.convert_to< csum3_start_more_than_end_offset_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::csum3_start_more_than_end_offset_enable() const {
    return int_var__csum3_start_more_than_end_offset_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::csum4_not_enuf_bytes_enable(const cpp_int & _val) { 
    // csum4_not_enuf_bytes_enable
    int_var__csum4_not_enuf_bytes_enable = _val.convert_to< csum4_not_enuf_bytes_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::csum4_not_enuf_bytes_enable() const {
    return int_var__csum4_not_enuf_bytes_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::csum4_start_more_than_end_offset_enable(const cpp_int & _val) { 
    // csum4_start_more_than_end_offset_enable
    int_var__csum4_start_more_than_end_offset_enable = _val.convert_to< csum4_start_more_than_end_offset_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::csum4_start_more_than_end_offset_enable() const {
    return int_var__csum4_start_more_than_end_offset_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::crc_not_enuf_bytes_enable(const cpp_int & _val) { 
    // crc_not_enuf_bytes_enable
    int_var__crc_not_enuf_bytes_enable = _val.convert_to< crc_not_enuf_bytes_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::crc_not_enuf_bytes_enable() const {
    return int_var__crc_not_enuf_bytes_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::crc_start_more_than_end_offset_enable(const cpp_int & _val) { 
    // crc_start_more_than_end_offset_enable
    int_var__crc_start_more_than_end_offset_enable = _val.convert_to< crc_start_more_than_end_offset_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::crc_start_more_than_end_offset_enable() const {
    return int_var__crc_start_more_than_end_offset_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::chkr_phv_single_flit_enable(const cpp_int & _val) { 
    // chkr_phv_single_flit_enable
    int_var__chkr_phv_single_flit_enable = _val.convert_to< chkr_phv_single_flit_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::chkr_phv_single_flit_enable() const {
    return int_var__chkr_phv_single_flit_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::chkr_phv_not_sop_enable(const cpp_int & _val) { 
    // chkr_phv_not_sop_enable
    int_var__chkr_phv_not_sop_enable = _val.convert_to< chkr_phv_not_sop_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::chkr_phv_not_sop_enable() const {
    return int_var__chkr_phv_not_sop_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::chkr_pkt_not_sop_enable(const cpp_int & _val) { 
    // chkr_pkt_not_sop_enable
    int_var__chkr_pkt_not_sop_enable = _val.convert_to< chkr_pkt_not_sop_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::chkr_pkt_not_sop_enable() const {
    return int_var__chkr_pkt_not_sop_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::chkr_seq_id_enable(const cpp_int & _val) { 
    // chkr_seq_id_enable
    int_var__chkr_seq_id_enable = _val.convert_to< chkr_seq_id_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::chkr_seq_id_enable() const {
    return int_var__chkr_seq_id_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::preparse_line0_not_sop_enable(const cpp_int & _val) { 
    // preparse_line0_not_sop_enable
    int_var__preparse_line0_not_sop_enable = _val.convert_to< preparse_line0_not_sop_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::preparse_line0_not_sop_enable() const {
    return int_var__preparse_line0_not_sop_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::preparse_dff_not_sop_enable(const cpp_int & _val) { 
    // preparse_dff_not_sop_enable
    int_var__preparse_dff_not_sop_enable = _val.convert_to< preparse_dff_not_sop_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::preparse_dff_not_sop_enable() const {
    return int_var__preparse_dff_not_sop_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::preparse_dff_ovflow_enable(const cpp_int & _val) { 
    // preparse_dff_ovflow_enable
    int_var__preparse_dff_ovflow_enable = _val.convert_to< preparse_dff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::preparse_dff_ovflow_enable() const {
    return int_var__preparse_dff_ovflow_enable;
}
    
void cap_ppa_csr_int_pa_int_enable_clear_t::preparse_eff_ovflow_enable(const cpp_int & _val) { 
    // preparse_eff_ovflow_enable
    int_var__preparse_eff_ovflow_enable = _val.convert_to< preparse_eff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_enable_clear_t::preparse_eff_ovflow_enable() const {
    return int_var__preparse_eff_ovflow_enable;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::reorder_phv_not_sop_interrupt(const cpp_int & _val) { 
    // reorder_phv_not_sop_interrupt
    int_var__reorder_phv_not_sop_interrupt = _val.convert_to< reorder_phv_not_sop_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::reorder_phv_not_sop_interrupt() const {
    return int_var__reorder_phv_not_sop_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::csum0_not_enuf_bytes_interrupt(const cpp_int & _val) { 
    // csum0_not_enuf_bytes_interrupt
    int_var__csum0_not_enuf_bytes_interrupt = _val.convert_to< csum0_not_enuf_bytes_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::csum0_not_enuf_bytes_interrupt() const {
    return int_var__csum0_not_enuf_bytes_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::csum0_start_more_than_end_offset_interrupt(const cpp_int & _val) { 
    // csum0_start_more_than_end_offset_interrupt
    int_var__csum0_start_more_than_end_offset_interrupt = _val.convert_to< csum0_start_more_than_end_offset_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::csum0_start_more_than_end_offset_interrupt() const {
    return int_var__csum0_start_more_than_end_offset_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::csum1_not_enuf_bytes_interrupt(const cpp_int & _val) { 
    // csum1_not_enuf_bytes_interrupt
    int_var__csum1_not_enuf_bytes_interrupt = _val.convert_to< csum1_not_enuf_bytes_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::csum1_not_enuf_bytes_interrupt() const {
    return int_var__csum1_not_enuf_bytes_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::csum1_start_more_than_end_offset_interrupt(const cpp_int & _val) { 
    // csum1_start_more_than_end_offset_interrupt
    int_var__csum1_start_more_than_end_offset_interrupt = _val.convert_to< csum1_start_more_than_end_offset_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::csum1_start_more_than_end_offset_interrupt() const {
    return int_var__csum1_start_more_than_end_offset_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::csum2_not_enuf_bytes_interrupt(const cpp_int & _val) { 
    // csum2_not_enuf_bytes_interrupt
    int_var__csum2_not_enuf_bytes_interrupt = _val.convert_to< csum2_not_enuf_bytes_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::csum2_not_enuf_bytes_interrupt() const {
    return int_var__csum2_not_enuf_bytes_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::csum2_start_more_than_end_offset_interrupt(const cpp_int & _val) { 
    // csum2_start_more_than_end_offset_interrupt
    int_var__csum2_start_more_than_end_offset_interrupt = _val.convert_to< csum2_start_more_than_end_offset_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::csum2_start_more_than_end_offset_interrupt() const {
    return int_var__csum2_start_more_than_end_offset_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::csum3_not_enuf_bytes_interrupt(const cpp_int & _val) { 
    // csum3_not_enuf_bytes_interrupt
    int_var__csum3_not_enuf_bytes_interrupt = _val.convert_to< csum3_not_enuf_bytes_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::csum3_not_enuf_bytes_interrupt() const {
    return int_var__csum3_not_enuf_bytes_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::csum3_start_more_than_end_offset_interrupt(const cpp_int & _val) { 
    // csum3_start_more_than_end_offset_interrupt
    int_var__csum3_start_more_than_end_offset_interrupt = _val.convert_to< csum3_start_more_than_end_offset_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::csum3_start_more_than_end_offset_interrupt() const {
    return int_var__csum3_start_more_than_end_offset_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::csum4_not_enuf_bytes_interrupt(const cpp_int & _val) { 
    // csum4_not_enuf_bytes_interrupt
    int_var__csum4_not_enuf_bytes_interrupt = _val.convert_to< csum4_not_enuf_bytes_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::csum4_not_enuf_bytes_interrupt() const {
    return int_var__csum4_not_enuf_bytes_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::csum4_start_more_than_end_offset_interrupt(const cpp_int & _val) { 
    // csum4_start_more_than_end_offset_interrupt
    int_var__csum4_start_more_than_end_offset_interrupt = _val.convert_to< csum4_start_more_than_end_offset_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::csum4_start_more_than_end_offset_interrupt() const {
    return int_var__csum4_start_more_than_end_offset_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::crc_not_enuf_bytes_interrupt(const cpp_int & _val) { 
    // crc_not_enuf_bytes_interrupt
    int_var__crc_not_enuf_bytes_interrupt = _val.convert_to< crc_not_enuf_bytes_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::crc_not_enuf_bytes_interrupt() const {
    return int_var__crc_not_enuf_bytes_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::crc_start_more_than_end_offset_interrupt(const cpp_int & _val) { 
    // crc_start_more_than_end_offset_interrupt
    int_var__crc_start_more_than_end_offset_interrupt = _val.convert_to< crc_start_more_than_end_offset_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::crc_start_more_than_end_offset_interrupt() const {
    return int_var__crc_start_more_than_end_offset_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::chkr_phv_single_flit_interrupt(const cpp_int & _val) { 
    // chkr_phv_single_flit_interrupt
    int_var__chkr_phv_single_flit_interrupt = _val.convert_to< chkr_phv_single_flit_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::chkr_phv_single_flit_interrupt() const {
    return int_var__chkr_phv_single_flit_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::chkr_phv_not_sop_interrupt(const cpp_int & _val) { 
    // chkr_phv_not_sop_interrupt
    int_var__chkr_phv_not_sop_interrupt = _val.convert_to< chkr_phv_not_sop_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::chkr_phv_not_sop_interrupt() const {
    return int_var__chkr_phv_not_sop_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::chkr_pkt_not_sop_interrupt(const cpp_int & _val) { 
    // chkr_pkt_not_sop_interrupt
    int_var__chkr_pkt_not_sop_interrupt = _val.convert_to< chkr_pkt_not_sop_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::chkr_pkt_not_sop_interrupt() const {
    return int_var__chkr_pkt_not_sop_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::chkr_seq_id_interrupt(const cpp_int & _val) { 
    // chkr_seq_id_interrupt
    int_var__chkr_seq_id_interrupt = _val.convert_to< chkr_seq_id_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::chkr_seq_id_interrupt() const {
    return int_var__chkr_seq_id_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::preparse_line0_not_sop_interrupt(const cpp_int & _val) { 
    // preparse_line0_not_sop_interrupt
    int_var__preparse_line0_not_sop_interrupt = _val.convert_to< preparse_line0_not_sop_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::preparse_line0_not_sop_interrupt() const {
    return int_var__preparse_line0_not_sop_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::preparse_dff_not_sop_interrupt(const cpp_int & _val) { 
    // preparse_dff_not_sop_interrupt
    int_var__preparse_dff_not_sop_interrupt = _val.convert_to< preparse_dff_not_sop_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::preparse_dff_not_sop_interrupt() const {
    return int_var__preparse_dff_not_sop_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::preparse_dff_ovflow_interrupt(const cpp_int & _val) { 
    // preparse_dff_ovflow_interrupt
    int_var__preparse_dff_ovflow_interrupt = _val.convert_to< preparse_dff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::preparse_dff_ovflow_interrupt() const {
    return int_var__preparse_dff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_pa_int_test_set_t::preparse_eff_ovflow_interrupt(const cpp_int & _val) { 
    // preparse_eff_ovflow_interrupt
    int_var__preparse_eff_ovflow_interrupt = _val.convert_to< preparse_eff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pa_int_test_set_t::preparse_eff_ovflow_interrupt() const {
    return int_var__preparse_eff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_pe9_int_enable_clear_t::qctl_skid_depth_not_zero_enable(const cpp_int & _val) { 
    // qctl_skid_depth_not_zero_enable
    int_var__qctl_skid_depth_not_zero_enable = _val.convert_to< qctl_skid_depth_not_zero_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_enable_clear_t::qctl_skid_depth_not_zero_enable() const {
    return int_var__qctl_skid_depth_not_zero_enable;
}
    
void cap_ppa_csr_int_pe9_int_enable_clear_t::qctl_not_sop_after_pkt_release_enable(const cpp_int & _val) { 
    // qctl_not_sop_after_pkt_release_enable
    int_var__qctl_not_sop_after_pkt_release_enable = _val.convert_to< qctl_not_sop_after_pkt_release_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_enable_clear_t::qctl_not_sop_after_pkt_release_enable() const {
    return int_var__qctl_not_sop_after_pkt_release_enable;
}
    
void cap_ppa_csr_int_pe9_int_enable_clear_t::unexpected_non_sop_enable(const cpp_int & _val) { 
    // unexpected_non_sop_enable
    int_var__unexpected_non_sop_enable = _val.convert_to< unexpected_non_sop_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_enable_clear_t::unexpected_non_sop_enable() const {
    return int_var__unexpected_non_sop_enable;
}
    
void cap_ppa_csr_int_pe9_int_enable_clear_t::exceed_phv_flit_cnt_enable(const cpp_int & _val) { 
    // exceed_phv_flit_cnt_enable
    int_var__exceed_phv_flit_cnt_enable = _val.convert_to< exceed_phv_flit_cnt_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_enable_clear_t::exceed_phv_flit_cnt_enable() const {
    return int_var__exceed_phv_flit_cnt_enable;
}
    
void cap_ppa_csr_int_pe9_int_enable_clear_t::exceed_parse_loop_cnt_enable(const cpp_int & _val) { 
    // exceed_parse_loop_cnt_enable
    int_var__exceed_parse_loop_cnt_enable = _val.convert_to< exceed_parse_loop_cnt_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_enable_clear_t::exceed_parse_loop_cnt_enable() const {
    return int_var__exceed_parse_loop_cnt_enable;
}
    
void cap_ppa_csr_int_pe9_int_enable_clear_t::offset_out_of_range_enable(const cpp_int & _val) { 
    // offset_out_of_range_enable
    int_var__offset_out_of_range_enable = _val.convert_to< offset_out_of_range_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_enable_clear_t::offset_out_of_range_enable() const {
    return int_var__offset_out_of_range_enable;
}
    
void cap_ppa_csr_int_pe9_int_enable_clear_t::pkt_size_chk_enable(const cpp_int & _val) { 
    // pkt_size_chk_enable
    int_var__pkt_size_chk_enable = _val.convert_to< pkt_size_chk_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_enable_clear_t::pkt_size_chk_enable() const {
    return int_var__pkt_size_chk_enable;
}
    
void cap_ppa_csr_int_pe9_int_enable_clear_t::offset_jump_chk_enable(const cpp_int & _val) { 
    // offset_jump_chk_enable
    int_var__offset_jump_chk_enable = _val.convert_to< offset_jump_chk_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_enable_clear_t::offset_jump_chk_enable() const {
    return int_var__offset_jump_chk_enable;
}
    
void cap_ppa_csr_int_pe9_int_enable_clear_t::d1_not_valid_enable(const cpp_int & _val) { 
    // d1_not_valid_enable
    int_var__d1_not_valid_enable = _val.convert_to< d1_not_valid_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_enable_clear_t::d1_not_valid_enable() const {
    return int_var__d1_not_valid_enable;
}
    
void cap_ppa_csr_int_pe9_int_enable_clear_t::phv_upr_idx_less_enable(const cpp_int & _val) { 
    // phv_upr_idx_less_enable
    int_var__phv_upr_idx_less_enable = _val.convert_to< phv_upr_idx_less_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_enable_clear_t::phv_upr_idx_less_enable() const {
    return int_var__phv_upr_idx_less_enable;
}
    
void cap_ppa_csr_int_pe9_int_test_set_t::qctl_skid_depth_not_zero_interrupt(const cpp_int & _val) { 
    // qctl_skid_depth_not_zero_interrupt
    int_var__qctl_skid_depth_not_zero_interrupt = _val.convert_to< qctl_skid_depth_not_zero_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_test_set_t::qctl_skid_depth_not_zero_interrupt() const {
    return int_var__qctl_skid_depth_not_zero_interrupt;
}
    
void cap_ppa_csr_int_pe9_int_test_set_t::qctl_not_sop_after_pkt_release_interrupt(const cpp_int & _val) { 
    // qctl_not_sop_after_pkt_release_interrupt
    int_var__qctl_not_sop_after_pkt_release_interrupt = _val.convert_to< qctl_not_sop_after_pkt_release_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_test_set_t::qctl_not_sop_after_pkt_release_interrupt() const {
    return int_var__qctl_not_sop_after_pkt_release_interrupt;
}
    
void cap_ppa_csr_int_pe9_int_test_set_t::unexpected_non_sop_interrupt(const cpp_int & _val) { 
    // unexpected_non_sop_interrupt
    int_var__unexpected_non_sop_interrupt = _val.convert_to< unexpected_non_sop_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_test_set_t::unexpected_non_sop_interrupt() const {
    return int_var__unexpected_non_sop_interrupt;
}
    
void cap_ppa_csr_int_pe9_int_test_set_t::exceed_phv_flit_cnt_interrupt(const cpp_int & _val) { 
    // exceed_phv_flit_cnt_interrupt
    int_var__exceed_phv_flit_cnt_interrupt = _val.convert_to< exceed_phv_flit_cnt_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_test_set_t::exceed_phv_flit_cnt_interrupt() const {
    return int_var__exceed_phv_flit_cnt_interrupt;
}
    
void cap_ppa_csr_int_pe9_int_test_set_t::exceed_parse_loop_cnt_interrupt(const cpp_int & _val) { 
    // exceed_parse_loop_cnt_interrupt
    int_var__exceed_parse_loop_cnt_interrupt = _val.convert_to< exceed_parse_loop_cnt_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_test_set_t::exceed_parse_loop_cnt_interrupt() const {
    return int_var__exceed_parse_loop_cnt_interrupt;
}
    
void cap_ppa_csr_int_pe9_int_test_set_t::offset_out_of_range_interrupt(const cpp_int & _val) { 
    // offset_out_of_range_interrupt
    int_var__offset_out_of_range_interrupt = _val.convert_to< offset_out_of_range_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_test_set_t::offset_out_of_range_interrupt() const {
    return int_var__offset_out_of_range_interrupt;
}
    
void cap_ppa_csr_int_pe9_int_test_set_t::pkt_size_chk_interrupt(const cpp_int & _val) { 
    // pkt_size_chk_interrupt
    int_var__pkt_size_chk_interrupt = _val.convert_to< pkt_size_chk_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_test_set_t::pkt_size_chk_interrupt() const {
    return int_var__pkt_size_chk_interrupt;
}
    
void cap_ppa_csr_int_pe9_int_test_set_t::offset_jump_chk_interrupt(const cpp_int & _val) { 
    // offset_jump_chk_interrupt
    int_var__offset_jump_chk_interrupt = _val.convert_to< offset_jump_chk_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_test_set_t::offset_jump_chk_interrupt() const {
    return int_var__offset_jump_chk_interrupt;
}
    
void cap_ppa_csr_int_pe9_int_test_set_t::d1_not_valid_interrupt(const cpp_int & _val) { 
    // d1_not_valid_interrupt
    int_var__d1_not_valid_interrupt = _val.convert_to< d1_not_valid_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_test_set_t::d1_not_valid_interrupt() const {
    return int_var__d1_not_valid_interrupt;
}
    
void cap_ppa_csr_int_pe9_int_test_set_t::phv_upr_idx_less_interrupt(const cpp_int & _val) { 
    // phv_upr_idx_less_interrupt
    int_var__phv_upr_idx_less_interrupt = _val.convert_to< phv_upr_idx_less_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_pe9_int_test_set_t::phv_upr_idx_less_interrupt() const {
    return int_var__phv_upr_idx_less_interrupt;
}
    
void cap_ppa_csr_int_fifo2_int_enable_clear_t::dp_if_ff_ovflow_enable(const cpp_int & _val) { 
    // dp_if_ff_ovflow_enable
    int_var__dp_if_ff_ovflow_enable = _val.convert_to< dp_if_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo2_int_enable_clear_t::dp_if_ff_ovflow_enable() const {
    return int_var__dp_if_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo2_int_enable_clear_t::ohi_if_ff_ovflow_enable(const cpp_int & _val) { 
    // ohi_if_ff_ovflow_enable
    int_var__ohi_if_ff_ovflow_enable = _val.convert_to< ohi_if_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo2_int_enable_clear_t::ohi_if_ff_ovflow_enable() const {
    return int_var__ohi_if_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo2_int_enable_clear_t::ma_if_ff_ovflow_enable(const cpp_int & _val) { 
    // ma_if_ff_ovflow_enable
    int_var__ma_if_ff_ovflow_enable = _val.convert_to< ma_if_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo2_int_enable_clear_t::ma_if_ff_ovflow_enable() const {
    return int_var__ma_if_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo2_int_enable_clear_t::pb_if_ff_ovflow_enable(const cpp_int & _val) { 
    // pb_if_ff_ovflow_enable
    int_var__pb_if_ff_ovflow_enable = _val.convert_to< pb_if_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo2_int_enable_clear_t::pb_if_ff_ovflow_enable() const {
    return int_var__pb_if_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo2_int_enable_clear_t::pkt_mtu_ff_ovflow_enable(const cpp_int & _val) { 
    // pkt_mtu_ff_ovflow_enable
    int_var__pkt_mtu_ff_ovflow_enable = _val.convert_to< pkt_mtu_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo2_int_enable_clear_t::pkt_mtu_ff_ovflow_enable() const {
    return int_var__pkt_mtu_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo2_int_enable_clear_t::outphv_ff_ovflow_enable(const cpp_int & _val) { 
    // outphv_ff_ovflow_enable
    int_var__outphv_ff_ovflow_enable = _val.convert_to< outphv_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo2_int_enable_clear_t::outphv_ff_ovflow_enable() const {
    return int_var__outphv_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo2_int_enable_clear_t::outohi_ff_ovflow_enable(const cpp_int & _val) { 
    // outohi_ff_ovflow_enable
    int_var__outohi_ff_ovflow_enable = _val.convert_to< outohi_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo2_int_enable_clear_t::outohi_ff_ovflow_enable() const {
    return int_var__outohi_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo2_int_enable_clear_t::chk_ff_ovflow_enable(const cpp_int & _val) { 
    // chk_ff_ovflow_enable
    int_var__chk_ff_ovflow_enable = _val.convert_to< chk_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo2_int_enable_clear_t::chk_ff_ovflow_enable() const {
    return int_var__chk_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo2_int_test_set_t::dp_if_ff_ovflow_interrupt(const cpp_int & _val) { 
    // dp_if_ff_ovflow_interrupt
    int_var__dp_if_ff_ovflow_interrupt = _val.convert_to< dp_if_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo2_int_test_set_t::dp_if_ff_ovflow_interrupt() const {
    return int_var__dp_if_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo2_int_test_set_t::ohi_if_ff_ovflow_interrupt(const cpp_int & _val) { 
    // ohi_if_ff_ovflow_interrupt
    int_var__ohi_if_ff_ovflow_interrupt = _val.convert_to< ohi_if_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo2_int_test_set_t::ohi_if_ff_ovflow_interrupt() const {
    return int_var__ohi_if_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo2_int_test_set_t::ma_if_ff_ovflow_interrupt(const cpp_int & _val) { 
    // ma_if_ff_ovflow_interrupt
    int_var__ma_if_ff_ovflow_interrupt = _val.convert_to< ma_if_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo2_int_test_set_t::ma_if_ff_ovflow_interrupt() const {
    return int_var__ma_if_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo2_int_test_set_t::pb_if_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pb_if_ff_ovflow_interrupt
    int_var__pb_if_ff_ovflow_interrupt = _val.convert_to< pb_if_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo2_int_test_set_t::pb_if_ff_ovflow_interrupt() const {
    return int_var__pb_if_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo2_int_test_set_t::pkt_mtu_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pkt_mtu_ff_ovflow_interrupt
    int_var__pkt_mtu_ff_ovflow_interrupt = _val.convert_to< pkt_mtu_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo2_int_test_set_t::pkt_mtu_ff_ovflow_interrupt() const {
    return int_var__pkt_mtu_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo2_int_test_set_t::outphv_ff_ovflow_interrupt(const cpp_int & _val) { 
    // outphv_ff_ovflow_interrupt
    int_var__outphv_ff_ovflow_interrupt = _val.convert_to< outphv_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo2_int_test_set_t::outphv_ff_ovflow_interrupt() const {
    return int_var__outphv_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo2_int_test_set_t::outohi_ff_ovflow_interrupt(const cpp_int & _val) { 
    // outohi_ff_ovflow_interrupt
    int_var__outohi_ff_ovflow_interrupt = _val.convert_to< outohi_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo2_int_test_set_t::outohi_ff_ovflow_interrupt() const {
    return int_var__outohi_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo2_int_test_set_t::chk_ff_ovflow_interrupt(const cpp_int & _val) { 
    // chk_ff_ovflow_interrupt
    int_var__chk_ff_ovflow_interrupt = _val.convert_to< chk_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo2_int_test_set_t::chk_ff_ovflow_interrupt() const {
    return int_var__chk_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe0_qctl_ff_ovflow_enable(const cpp_int & _val) { 
    // pe0_qctl_ff_ovflow_enable
    int_var__pe0_qctl_ff_ovflow_enable = _val.convert_to< pe0_qctl_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe0_qctl_ff_ovflow_enable() const {
    return int_var__pe0_qctl_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe1_qctl_ff_ovflow_enable(const cpp_int & _val) { 
    // pe1_qctl_ff_ovflow_enable
    int_var__pe1_qctl_ff_ovflow_enable = _val.convert_to< pe1_qctl_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe1_qctl_ff_ovflow_enable() const {
    return int_var__pe1_qctl_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe2_qctl_ff_ovflow_enable(const cpp_int & _val) { 
    // pe2_qctl_ff_ovflow_enable
    int_var__pe2_qctl_ff_ovflow_enable = _val.convert_to< pe2_qctl_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe2_qctl_ff_ovflow_enable() const {
    return int_var__pe2_qctl_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe3_qctl_ff_ovflow_enable(const cpp_int & _val) { 
    // pe3_qctl_ff_ovflow_enable
    int_var__pe3_qctl_ff_ovflow_enable = _val.convert_to< pe3_qctl_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe3_qctl_ff_ovflow_enable() const {
    return int_var__pe3_qctl_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe4_qctl_ff_ovflow_enable(const cpp_int & _val) { 
    // pe4_qctl_ff_ovflow_enable
    int_var__pe4_qctl_ff_ovflow_enable = _val.convert_to< pe4_qctl_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe4_qctl_ff_ovflow_enable() const {
    return int_var__pe4_qctl_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe5_qctl_ff_ovflow_enable(const cpp_int & _val) { 
    // pe5_qctl_ff_ovflow_enable
    int_var__pe5_qctl_ff_ovflow_enable = _val.convert_to< pe5_qctl_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe5_qctl_ff_ovflow_enable() const {
    return int_var__pe5_qctl_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe6_qctl_ff_ovflow_enable(const cpp_int & _val) { 
    // pe6_qctl_ff_ovflow_enable
    int_var__pe6_qctl_ff_ovflow_enable = _val.convert_to< pe6_qctl_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe6_qctl_ff_ovflow_enable() const {
    return int_var__pe6_qctl_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe7_qctl_ff_ovflow_enable(const cpp_int & _val) { 
    // pe7_qctl_ff_ovflow_enable
    int_var__pe7_qctl_ff_ovflow_enable = _val.convert_to< pe7_qctl_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe7_qctl_ff_ovflow_enable() const {
    return int_var__pe7_qctl_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe8_qctl_ff_ovflow_enable(const cpp_int & _val) { 
    // pe8_qctl_ff_ovflow_enable
    int_var__pe8_qctl_ff_ovflow_enable = _val.convert_to< pe8_qctl_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe8_qctl_ff_ovflow_enable() const {
    return int_var__pe8_qctl_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe9_qctl_ff_ovflow_enable(const cpp_int & _val) { 
    // pe9_qctl_ff_ovflow_enable
    int_var__pe9_qctl_ff_ovflow_enable = _val.convert_to< pe9_qctl_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe9_qctl_ff_ovflow_enable() const {
    return int_var__pe9_qctl_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe0_phv_ff_ovflow_enable(const cpp_int & _val) { 
    // pe0_phv_ff_ovflow_enable
    int_var__pe0_phv_ff_ovflow_enable = _val.convert_to< pe0_phv_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe0_phv_ff_ovflow_enable() const {
    return int_var__pe0_phv_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe1_phv_ff_ovflow_enable(const cpp_int & _val) { 
    // pe1_phv_ff_ovflow_enable
    int_var__pe1_phv_ff_ovflow_enable = _val.convert_to< pe1_phv_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe1_phv_ff_ovflow_enable() const {
    return int_var__pe1_phv_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe2_phv_ff_ovflow_enable(const cpp_int & _val) { 
    // pe2_phv_ff_ovflow_enable
    int_var__pe2_phv_ff_ovflow_enable = _val.convert_to< pe2_phv_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe2_phv_ff_ovflow_enable() const {
    return int_var__pe2_phv_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe3_phv_ff_ovflow_enable(const cpp_int & _val) { 
    // pe3_phv_ff_ovflow_enable
    int_var__pe3_phv_ff_ovflow_enable = _val.convert_to< pe3_phv_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe3_phv_ff_ovflow_enable() const {
    return int_var__pe3_phv_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe4_phv_ff_ovflow_enable(const cpp_int & _val) { 
    // pe4_phv_ff_ovflow_enable
    int_var__pe4_phv_ff_ovflow_enable = _val.convert_to< pe4_phv_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe4_phv_ff_ovflow_enable() const {
    return int_var__pe4_phv_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe5_phv_ff_ovflow_enable(const cpp_int & _val) { 
    // pe5_phv_ff_ovflow_enable
    int_var__pe5_phv_ff_ovflow_enable = _val.convert_to< pe5_phv_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe5_phv_ff_ovflow_enable() const {
    return int_var__pe5_phv_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe6_phv_ff_ovflow_enable(const cpp_int & _val) { 
    // pe6_phv_ff_ovflow_enable
    int_var__pe6_phv_ff_ovflow_enable = _val.convert_to< pe6_phv_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe6_phv_ff_ovflow_enable() const {
    return int_var__pe6_phv_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe7_phv_ff_ovflow_enable(const cpp_int & _val) { 
    // pe7_phv_ff_ovflow_enable
    int_var__pe7_phv_ff_ovflow_enable = _val.convert_to< pe7_phv_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe7_phv_ff_ovflow_enable() const {
    return int_var__pe7_phv_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe8_phv_ff_ovflow_enable(const cpp_int & _val) { 
    // pe8_phv_ff_ovflow_enable
    int_var__pe8_phv_ff_ovflow_enable = _val.convert_to< pe8_phv_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe8_phv_ff_ovflow_enable() const {
    return int_var__pe8_phv_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe9_phv_ff_ovflow_enable(const cpp_int & _val) { 
    // pe9_phv_ff_ovflow_enable
    int_var__pe9_phv_ff_ovflow_enable = _val.convert_to< pe9_phv_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe9_phv_ff_ovflow_enable() const {
    return int_var__pe9_phv_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe0_ohi_ff_ovflow_enable(const cpp_int & _val) { 
    // pe0_ohi_ff_ovflow_enable
    int_var__pe0_ohi_ff_ovflow_enable = _val.convert_to< pe0_ohi_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe0_ohi_ff_ovflow_enable() const {
    return int_var__pe0_ohi_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe1_ohi_ff_ovflow_enable(const cpp_int & _val) { 
    // pe1_ohi_ff_ovflow_enable
    int_var__pe1_ohi_ff_ovflow_enable = _val.convert_to< pe1_ohi_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe1_ohi_ff_ovflow_enable() const {
    return int_var__pe1_ohi_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe2_ohi_ff_ovflow_enable(const cpp_int & _val) { 
    // pe2_ohi_ff_ovflow_enable
    int_var__pe2_ohi_ff_ovflow_enable = _val.convert_to< pe2_ohi_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe2_ohi_ff_ovflow_enable() const {
    return int_var__pe2_ohi_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe3_ohi_ff_ovflow_enable(const cpp_int & _val) { 
    // pe3_ohi_ff_ovflow_enable
    int_var__pe3_ohi_ff_ovflow_enable = _val.convert_to< pe3_ohi_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe3_ohi_ff_ovflow_enable() const {
    return int_var__pe3_ohi_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe4_ohi_ff_ovflow_enable(const cpp_int & _val) { 
    // pe4_ohi_ff_ovflow_enable
    int_var__pe4_ohi_ff_ovflow_enable = _val.convert_to< pe4_ohi_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe4_ohi_ff_ovflow_enable() const {
    return int_var__pe4_ohi_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe5_ohi_ff_ovflow_enable(const cpp_int & _val) { 
    // pe5_ohi_ff_ovflow_enable
    int_var__pe5_ohi_ff_ovflow_enable = _val.convert_to< pe5_ohi_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe5_ohi_ff_ovflow_enable() const {
    return int_var__pe5_ohi_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe6_ohi_ff_ovflow_enable(const cpp_int & _val) { 
    // pe6_ohi_ff_ovflow_enable
    int_var__pe6_ohi_ff_ovflow_enable = _val.convert_to< pe6_ohi_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe6_ohi_ff_ovflow_enable() const {
    return int_var__pe6_ohi_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe7_ohi_ff_ovflow_enable(const cpp_int & _val) { 
    // pe7_ohi_ff_ovflow_enable
    int_var__pe7_ohi_ff_ovflow_enable = _val.convert_to< pe7_ohi_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe7_ohi_ff_ovflow_enable() const {
    return int_var__pe7_ohi_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe8_ohi_ff_ovflow_enable(const cpp_int & _val) { 
    // pe8_ohi_ff_ovflow_enable
    int_var__pe8_ohi_ff_ovflow_enable = _val.convert_to< pe8_ohi_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe8_ohi_ff_ovflow_enable() const {
    return int_var__pe8_ohi_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_enable_clear_t::pe9_ohi_ff_ovflow_enable(const cpp_int & _val) { 
    // pe9_ohi_ff_ovflow_enable
    int_var__pe9_ohi_ff_ovflow_enable = _val.convert_to< pe9_ohi_ff_ovflow_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_enable_clear_t::pe9_ohi_ff_ovflow_enable() const {
    return int_var__pe9_ohi_ff_ovflow_enable;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe0_qctl_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe0_qctl_ff_ovflow_interrupt
    int_var__pe0_qctl_ff_ovflow_interrupt = _val.convert_to< pe0_qctl_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe0_qctl_ff_ovflow_interrupt() const {
    return int_var__pe0_qctl_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe1_qctl_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe1_qctl_ff_ovflow_interrupt
    int_var__pe1_qctl_ff_ovflow_interrupt = _val.convert_to< pe1_qctl_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe1_qctl_ff_ovflow_interrupt() const {
    return int_var__pe1_qctl_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe2_qctl_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe2_qctl_ff_ovflow_interrupt
    int_var__pe2_qctl_ff_ovflow_interrupt = _val.convert_to< pe2_qctl_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe2_qctl_ff_ovflow_interrupt() const {
    return int_var__pe2_qctl_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe3_qctl_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe3_qctl_ff_ovflow_interrupt
    int_var__pe3_qctl_ff_ovflow_interrupt = _val.convert_to< pe3_qctl_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe3_qctl_ff_ovflow_interrupt() const {
    return int_var__pe3_qctl_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe4_qctl_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe4_qctl_ff_ovflow_interrupt
    int_var__pe4_qctl_ff_ovflow_interrupt = _val.convert_to< pe4_qctl_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe4_qctl_ff_ovflow_interrupt() const {
    return int_var__pe4_qctl_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe5_qctl_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe5_qctl_ff_ovflow_interrupt
    int_var__pe5_qctl_ff_ovflow_interrupt = _val.convert_to< pe5_qctl_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe5_qctl_ff_ovflow_interrupt() const {
    return int_var__pe5_qctl_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe6_qctl_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe6_qctl_ff_ovflow_interrupt
    int_var__pe6_qctl_ff_ovflow_interrupt = _val.convert_to< pe6_qctl_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe6_qctl_ff_ovflow_interrupt() const {
    return int_var__pe6_qctl_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe7_qctl_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe7_qctl_ff_ovflow_interrupt
    int_var__pe7_qctl_ff_ovflow_interrupt = _val.convert_to< pe7_qctl_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe7_qctl_ff_ovflow_interrupt() const {
    return int_var__pe7_qctl_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe8_qctl_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe8_qctl_ff_ovflow_interrupt
    int_var__pe8_qctl_ff_ovflow_interrupt = _val.convert_to< pe8_qctl_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe8_qctl_ff_ovflow_interrupt() const {
    return int_var__pe8_qctl_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe9_qctl_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe9_qctl_ff_ovflow_interrupt
    int_var__pe9_qctl_ff_ovflow_interrupt = _val.convert_to< pe9_qctl_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe9_qctl_ff_ovflow_interrupt() const {
    return int_var__pe9_qctl_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe0_phv_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe0_phv_ff_ovflow_interrupt
    int_var__pe0_phv_ff_ovflow_interrupt = _val.convert_to< pe0_phv_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe0_phv_ff_ovflow_interrupt() const {
    return int_var__pe0_phv_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe1_phv_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe1_phv_ff_ovflow_interrupt
    int_var__pe1_phv_ff_ovflow_interrupt = _val.convert_to< pe1_phv_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe1_phv_ff_ovflow_interrupt() const {
    return int_var__pe1_phv_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe2_phv_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe2_phv_ff_ovflow_interrupt
    int_var__pe2_phv_ff_ovflow_interrupt = _val.convert_to< pe2_phv_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe2_phv_ff_ovflow_interrupt() const {
    return int_var__pe2_phv_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe3_phv_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe3_phv_ff_ovflow_interrupt
    int_var__pe3_phv_ff_ovflow_interrupt = _val.convert_to< pe3_phv_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe3_phv_ff_ovflow_interrupt() const {
    return int_var__pe3_phv_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe4_phv_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe4_phv_ff_ovflow_interrupt
    int_var__pe4_phv_ff_ovflow_interrupt = _val.convert_to< pe4_phv_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe4_phv_ff_ovflow_interrupt() const {
    return int_var__pe4_phv_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe5_phv_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe5_phv_ff_ovflow_interrupt
    int_var__pe5_phv_ff_ovflow_interrupt = _val.convert_to< pe5_phv_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe5_phv_ff_ovflow_interrupt() const {
    return int_var__pe5_phv_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe6_phv_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe6_phv_ff_ovflow_interrupt
    int_var__pe6_phv_ff_ovflow_interrupt = _val.convert_to< pe6_phv_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe6_phv_ff_ovflow_interrupt() const {
    return int_var__pe6_phv_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe7_phv_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe7_phv_ff_ovflow_interrupt
    int_var__pe7_phv_ff_ovflow_interrupt = _val.convert_to< pe7_phv_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe7_phv_ff_ovflow_interrupt() const {
    return int_var__pe7_phv_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe8_phv_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe8_phv_ff_ovflow_interrupt
    int_var__pe8_phv_ff_ovflow_interrupt = _val.convert_to< pe8_phv_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe8_phv_ff_ovflow_interrupt() const {
    return int_var__pe8_phv_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe9_phv_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe9_phv_ff_ovflow_interrupt
    int_var__pe9_phv_ff_ovflow_interrupt = _val.convert_to< pe9_phv_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe9_phv_ff_ovflow_interrupt() const {
    return int_var__pe9_phv_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe0_ohi_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe0_ohi_ff_ovflow_interrupt
    int_var__pe0_ohi_ff_ovflow_interrupt = _val.convert_to< pe0_ohi_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe0_ohi_ff_ovflow_interrupt() const {
    return int_var__pe0_ohi_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe1_ohi_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe1_ohi_ff_ovflow_interrupt
    int_var__pe1_ohi_ff_ovflow_interrupt = _val.convert_to< pe1_ohi_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe1_ohi_ff_ovflow_interrupt() const {
    return int_var__pe1_ohi_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe2_ohi_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe2_ohi_ff_ovflow_interrupt
    int_var__pe2_ohi_ff_ovflow_interrupt = _val.convert_to< pe2_ohi_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe2_ohi_ff_ovflow_interrupt() const {
    return int_var__pe2_ohi_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe3_ohi_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe3_ohi_ff_ovflow_interrupt
    int_var__pe3_ohi_ff_ovflow_interrupt = _val.convert_to< pe3_ohi_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe3_ohi_ff_ovflow_interrupt() const {
    return int_var__pe3_ohi_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe4_ohi_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe4_ohi_ff_ovflow_interrupt
    int_var__pe4_ohi_ff_ovflow_interrupt = _val.convert_to< pe4_ohi_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe4_ohi_ff_ovflow_interrupt() const {
    return int_var__pe4_ohi_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe5_ohi_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe5_ohi_ff_ovflow_interrupt
    int_var__pe5_ohi_ff_ovflow_interrupt = _val.convert_to< pe5_ohi_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe5_ohi_ff_ovflow_interrupt() const {
    return int_var__pe5_ohi_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe6_ohi_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe6_ohi_ff_ovflow_interrupt
    int_var__pe6_ohi_ff_ovflow_interrupt = _val.convert_to< pe6_ohi_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe6_ohi_ff_ovflow_interrupt() const {
    return int_var__pe6_ohi_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe7_ohi_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe7_ohi_ff_ovflow_interrupt
    int_var__pe7_ohi_ff_ovflow_interrupt = _val.convert_to< pe7_ohi_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe7_ohi_ff_ovflow_interrupt() const {
    return int_var__pe7_ohi_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe8_ohi_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe8_ohi_ff_ovflow_interrupt
    int_var__pe8_ohi_ff_ovflow_interrupt = _val.convert_to< pe8_ohi_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe8_ohi_ff_ovflow_interrupt() const {
    return int_var__pe8_ohi_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_fifo1_int_test_set_t::pe9_ohi_ff_ovflow_interrupt(const cpp_int & _val) { 
    // pe9_ohi_ff_ovflow_interrupt
    int_var__pe9_ohi_ff_ovflow_interrupt = _val.convert_to< pe9_ohi_ff_ovflow_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_fifo1_int_test_set_t::pe9_ohi_ff_ovflow_interrupt() const {
    return int_var__pe9_ohi_ff_ovflow_interrupt;
}
    
void cap_ppa_csr_int_ecc_int_enable_clear_t::pkt_mem_uncorrectable_enable(const cpp_int & _val) { 
    // pkt_mem_uncorrectable_enable
    int_var__pkt_mem_uncorrectable_enable = _val.convert_to< pkt_mem_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_ecc_int_enable_clear_t::pkt_mem_uncorrectable_enable() const {
    return int_var__pkt_mem_uncorrectable_enable;
}
    
void cap_ppa_csr_int_ecc_int_enable_clear_t::pkt_mem_correctable_enable(const cpp_int & _val) { 
    // pkt_mem_correctable_enable
    int_var__pkt_mem_correctable_enable = _val.convert_to< pkt_mem_correctable_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_ecc_int_enable_clear_t::pkt_mem_correctable_enable() const {
    return int_var__pkt_mem_correctable_enable;
}
    
void cap_ppa_csr_int_ecc_int_enable_clear_t::bndl0_state_lkp_sram_uncorrectable_enable(const cpp_int & _val) { 
    // bndl0_state_lkp_sram_uncorrectable_enable
    int_var__bndl0_state_lkp_sram_uncorrectable_enable = _val.convert_to< bndl0_state_lkp_sram_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_ecc_int_enable_clear_t::bndl0_state_lkp_sram_uncorrectable_enable() const {
    return int_var__bndl0_state_lkp_sram_uncorrectable_enable;
}
    
void cap_ppa_csr_int_ecc_int_enable_clear_t::bndl0_state_lkp_sram_correctable_enable(const cpp_int & _val) { 
    // bndl0_state_lkp_sram_correctable_enable
    int_var__bndl0_state_lkp_sram_correctable_enable = _val.convert_to< bndl0_state_lkp_sram_correctable_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_ecc_int_enable_clear_t::bndl0_state_lkp_sram_correctable_enable() const {
    return int_var__bndl0_state_lkp_sram_correctable_enable;
}
    
void cap_ppa_csr_int_ecc_int_enable_clear_t::bndl1_state_lkp_sram_uncorrectable_enable(const cpp_int & _val) { 
    // bndl1_state_lkp_sram_uncorrectable_enable
    int_var__bndl1_state_lkp_sram_uncorrectable_enable = _val.convert_to< bndl1_state_lkp_sram_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_ecc_int_enable_clear_t::bndl1_state_lkp_sram_uncorrectable_enable() const {
    return int_var__bndl1_state_lkp_sram_uncorrectable_enable;
}
    
void cap_ppa_csr_int_ecc_int_enable_clear_t::bndl1_state_lkp_sram_correctable_enable(const cpp_int & _val) { 
    // bndl1_state_lkp_sram_correctable_enable
    int_var__bndl1_state_lkp_sram_correctable_enable = _val.convert_to< bndl1_state_lkp_sram_correctable_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_ecc_int_enable_clear_t::bndl1_state_lkp_sram_correctable_enable() const {
    return int_var__bndl1_state_lkp_sram_correctable_enable;
}
    
void cap_ppa_csr_int_ecc_int_test_set_t::pkt_mem_uncorrectable_interrupt(const cpp_int & _val) { 
    // pkt_mem_uncorrectable_interrupt
    int_var__pkt_mem_uncorrectable_interrupt = _val.convert_to< pkt_mem_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_ecc_int_test_set_t::pkt_mem_uncorrectable_interrupt() const {
    return int_var__pkt_mem_uncorrectable_interrupt;
}
    
void cap_ppa_csr_int_ecc_int_test_set_t::pkt_mem_correctable_interrupt(const cpp_int & _val) { 
    // pkt_mem_correctable_interrupt
    int_var__pkt_mem_correctable_interrupt = _val.convert_to< pkt_mem_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_ecc_int_test_set_t::pkt_mem_correctable_interrupt() const {
    return int_var__pkt_mem_correctable_interrupt;
}
    
void cap_ppa_csr_int_ecc_int_test_set_t::bndl0_state_lkp_sram_uncorrectable_interrupt(const cpp_int & _val) { 
    // bndl0_state_lkp_sram_uncorrectable_interrupt
    int_var__bndl0_state_lkp_sram_uncorrectable_interrupt = _val.convert_to< bndl0_state_lkp_sram_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_ecc_int_test_set_t::bndl0_state_lkp_sram_uncorrectable_interrupt() const {
    return int_var__bndl0_state_lkp_sram_uncorrectable_interrupt;
}
    
void cap_ppa_csr_int_ecc_int_test_set_t::bndl0_state_lkp_sram_correctable_interrupt(const cpp_int & _val) { 
    // bndl0_state_lkp_sram_correctable_interrupt
    int_var__bndl0_state_lkp_sram_correctable_interrupt = _val.convert_to< bndl0_state_lkp_sram_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_ecc_int_test_set_t::bndl0_state_lkp_sram_correctable_interrupt() const {
    return int_var__bndl0_state_lkp_sram_correctable_interrupt;
}
    
void cap_ppa_csr_int_ecc_int_test_set_t::bndl1_state_lkp_sram_uncorrectable_interrupt(const cpp_int & _val) { 
    // bndl1_state_lkp_sram_uncorrectable_interrupt
    int_var__bndl1_state_lkp_sram_uncorrectable_interrupt = _val.convert_to< bndl1_state_lkp_sram_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_ecc_int_test_set_t::bndl1_state_lkp_sram_uncorrectable_interrupt() const {
    return int_var__bndl1_state_lkp_sram_uncorrectable_interrupt;
}
    
void cap_ppa_csr_int_ecc_int_test_set_t::bndl1_state_lkp_sram_correctable_interrupt(const cpp_int & _val) { 
    // bndl1_state_lkp_sram_correctable_interrupt
    int_var__bndl1_state_lkp_sram_correctable_interrupt = _val.convert_to< bndl1_state_lkp_sram_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_ecc_int_test_set_t::bndl1_state_lkp_sram_correctable_interrupt() const {
    return int_var__bndl1_state_lkp_sram_correctable_interrupt;
}
    
void cap_ppa_csr_int_bndl1_int_enable_clear_t::state_lkp_srch_hit_addr_range_err_enable(const cpp_int & _val) { 
    // state_lkp_srch_hit_addr_range_err_enable
    int_var__state_lkp_srch_hit_addr_range_err_enable = _val.convert_to< state_lkp_srch_hit_addr_range_err_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_bndl1_int_enable_clear_t::state_lkp_srch_hit_addr_range_err_enable() const {
    return int_var__state_lkp_srch_hit_addr_range_err_enable;
}
    
void cap_ppa_csr_int_bndl1_int_enable_clear_t::state_lkp_srch_miss_enable(const cpp_int & _val) { 
    // state_lkp_srch_miss_enable
    int_var__state_lkp_srch_miss_enable = _val.convert_to< state_lkp_srch_miss_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_bndl1_int_enable_clear_t::state_lkp_srch_miss_enable() const {
    return int_var__state_lkp_srch_miss_enable;
}
    
void cap_ppa_csr_int_bndl1_int_enable_clear_t::state_lkp_srch_req_not_rdy_enable(const cpp_int & _val) { 
    // state_lkp_srch_req_not_rdy_enable
    int_var__state_lkp_srch_req_not_rdy_enable = _val.convert_to< state_lkp_srch_req_not_rdy_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_bndl1_int_enable_clear_t::state_lkp_srch_req_not_rdy_enable() const {
    return int_var__state_lkp_srch_req_not_rdy_enable;
}
    
void cap_ppa_csr_int_bndl0_intreg_t::state_lkp_srch_hit_addr_range_err_interrupt(const cpp_int & _val) { 
    // state_lkp_srch_hit_addr_range_err_interrupt
    int_var__state_lkp_srch_hit_addr_range_err_interrupt = _val.convert_to< state_lkp_srch_hit_addr_range_err_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_bndl0_intreg_t::state_lkp_srch_hit_addr_range_err_interrupt() const {
    return int_var__state_lkp_srch_hit_addr_range_err_interrupt;
}
    
void cap_ppa_csr_int_bndl0_intreg_t::state_lkp_srch_miss_interrupt(const cpp_int & _val) { 
    // state_lkp_srch_miss_interrupt
    int_var__state_lkp_srch_miss_interrupt = _val.convert_to< state_lkp_srch_miss_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_bndl0_intreg_t::state_lkp_srch_miss_interrupt() const {
    return int_var__state_lkp_srch_miss_interrupt;
}
    
void cap_ppa_csr_int_bndl0_intreg_t::state_lkp_srch_req_not_rdy_interrupt(const cpp_int & _val) { 
    // state_lkp_srch_req_not_rdy_interrupt
    int_var__state_lkp_srch_req_not_rdy_interrupt = _val.convert_to< state_lkp_srch_req_not_rdy_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_bndl0_intreg_t::state_lkp_srch_req_not_rdy_interrupt() const {
    return int_var__state_lkp_srch_req_not_rdy_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_bndl0_interrupt(const cpp_int & _val) { 
    // int_bndl0_interrupt
    int_var__int_bndl0_interrupt = _val.convert_to< int_bndl0_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_bndl0_interrupt() const {
    return int_var__int_bndl0_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_bndl1_interrupt(const cpp_int & _val) { 
    // int_bndl1_interrupt
    int_var__int_bndl1_interrupt = _val.convert_to< int_bndl1_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_bndl1_interrupt() const {
    return int_var__int_bndl1_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_ecc_interrupt(const cpp_int & _val) { 
    // int_ecc_interrupt
    int_var__int_ecc_interrupt = _val.convert_to< int_ecc_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_ecc_interrupt() const {
    return int_var__int_ecc_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_fifo1_interrupt(const cpp_int & _val) { 
    // int_fifo1_interrupt
    int_var__int_fifo1_interrupt = _val.convert_to< int_fifo1_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_fifo1_interrupt() const {
    return int_var__int_fifo1_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_fifo2_interrupt(const cpp_int & _val) { 
    // int_fifo2_interrupt
    int_var__int_fifo2_interrupt = _val.convert_to< int_fifo2_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_fifo2_interrupt() const {
    return int_var__int_fifo2_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_pe0_interrupt(const cpp_int & _val) { 
    // int_pe0_interrupt
    int_var__int_pe0_interrupt = _val.convert_to< int_pe0_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_pe0_interrupt() const {
    return int_var__int_pe0_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_pe1_interrupt(const cpp_int & _val) { 
    // int_pe1_interrupt
    int_var__int_pe1_interrupt = _val.convert_to< int_pe1_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_pe1_interrupt() const {
    return int_var__int_pe1_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_pe2_interrupt(const cpp_int & _val) { 
    // int_pe2_interrupt
    int_var__int_pe2_interrupt = _val.convert_to< int_pe2_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_pe2_interrupt() const {
    return int_var__int_pe2_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_pe3_interrupt(const cpp_int & _val) { 
    // int_pe3_interrupt
    int_var__int_pe3_interrupt = _val.convert_to< int_pe3_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_pe3_interrupt() const {
    return int_var__int_pe3_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_pe4_interrupt(const cpp_int & _val) { 
    // int_pe4_interrupt
    int_var__int_pe4_interrupt = _val.convert_to< int_pe4_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_pe4_interrupt() const {
    return int_var__int_pe4_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_pe5_interrupt(const cpp_int & _val) { 
    // int_pe5_interrupt
    int_var__int_pe5_interrupt = _val.convert_to< int_pe5_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_pe5_interrupt() const {
    return int_var__int_pe5_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_pe6_interrupt(const cpp_int & _val) { 
    // int_pe6_interrupt
    int_var__int_pe6_interrupt = _val.convert_to< int_pe6_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_pe6_interrupt() const {
    return int_var__int_pe6_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_pe7_interrupt(const cpp_int & _val) { 
    // int_pe7_interrupt
    int_var__int_pe7_interrupt = _val.convert_to< int_pe7_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_pe7_interrupt() const {
    return int_var__int_pe7_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_pe8_interrupt(const cpp_int & _val) { 
    // int_pe8_interrupt
    int_var__int_pe8_interrupt = _val.convert_to< int_pe8_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_pe8_interrupt() const {
    return int_var__int_pe8_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_pe9_interrupt(const cpp_int & _val) { 
    // int_pe9_interrupt
    int_var__int_pe9_interrupt = _val.convert_to< int_pe9_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_pe9_interrupt() const {
    return int_var__int_pe9_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_pa_interrupt(const cpp_int & _val) { 
    // int_pa_interrupt
    int_var__int_pa_interrupt = _val.convert_to< int_pa_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_pa_interrupt() const {
    return int_var__int_pa_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_sw_phv_mem_interrupt(const cpp_int & _val) { 
    // int_sw_phv_mem_interrupt
    int_var__int_sw_phv_mem_interrupt = _val.convert_to< int_sw_phv_mem_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_sw_phv_mem_interrupt() const {
    return int_var__int_sw_phv_mem_interrupt;
}
    
void cap_ppa_csr_intreg_status_t::int_intf_interrupt(const cpp_int & _val) { 
    // int_intf_interrupt
    int_var__int_intf_interrupt = _val.convert_to< int_intf_interrupt_cpp_int_t >();
}

cpp_int cap_ppa_csr_intreg_status_t::int_intf_interrupt() const {
    return int_var__int_intf_interrupt;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_bndl0_enable(const cpp_int & _val) { 
    // int_bndl0_enable
    int_var__int_bndl0_enable = _val.convert_to< int_bndl0_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_bndl0_enable() const {
    return int_var__int_bndl0_enable;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_bndl1_enable(const cpp_int & _val) { 
    // int_bndl1_enable
    int_var__int_bndl1_enable = _val.convert_to< int_bndl1_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_bndl1_enable() const {
    return int_var__int_bndl1_enable;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_ecc_enable(const cpp_int & _val) { 
    // int_ecc_enable
    int_var__int_ecc_enable = _val.convert_to< int_ecc_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_ecc_enable() const {
    return int_var__int_ecc_enable;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_fifo1_enable(const cpp_int & _val) { 
    // int_fifo1_enable
    int_var__int_fifo1_enable = _val.convert_to< int_fifo1_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_fifo1_enable() const {
    return int_var__int_fifo1_enable;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_fifo2_enable(const cpp_int & _val) { 
    // int_fifo2_enable
    int_var__int_fifo2_enable = _val.convert_to< int_fifo2_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_fifo2_enable() const {
    return int_var__int_fifo2_enable;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe0_enable(const cpp_int & _val) { 
    // int_pe0_enable
    int_var__int_pe0_enable = _val.convert_to< int_pe0_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe0_enable() const {
    return int_var__int_pe0_enable;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe1_enable(const cpp_int & _val) { 
    // int_pe1_enable
    int_var__int_pe1_enable = _val.convert_to< int_pe1_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe1_enable() const {
    return int_var__int_pe1_enable;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe2_enable(const cpp_int & _val) { 
    // int_pe2_enable
    int_var__int_pe2_enable = _val.convert_to< int_pe2_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe2_enable() const {
    return int_var__int_pe2_enable;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe3_enable(const cpp_int & _val) { 
    // int_pe3_enable
    int_var__int_pe3_enable = _val.convert_to< int_pe3_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe3_enable() const {
    return int_var__int_pe3_enable;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe4_enable(const cpp_int & _val) { 
    // int_pe4_enable
    int_var__int_pe4_enable = _val.convert_to< int_pe4_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe4_enable() const {
    return int_var__int_pe4_enable;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe5_enable(const cpp_int & _val) { 
    // int_pe5_enable
    int_var__int_pe5_enable = _val.convert_to< int_pe5_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe5_enable() const {
    return int_var__int_pe5_enable;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe6_enable(const cpp_int & _val) { 
    // int_pe6_enable
    int_var__int_pe6_enable = _val.convert_to< int_pe6_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe6_enable() const {
    return int_var__int_pe6_enable;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe7_enable(const cpp_int & _val) { 
    // int_pe7_enable
    int_var__int_pe7_enable = _val.convert_to< int_pe7_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe7_enable() const {
    return int_var__int_pe7_enable;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe8_enable(const cpp_int & _val) { 
    // int_pe8_enable
    int_var__int_pe8_enable = _val.convert_to< int_pe8_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe8_enable() const {
    return int_var__int_pe8_enable;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe9_enable(const cpp_int & _val) { 
    // int_pe9_enable
    int_var__int_pe9_enable = _val.convert_to< int_pe9_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pe9_enable() const {
    return int_var__int_pe9_enable;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pa_enable(const cpp_int & _val) { 
    // int_pa_enable
    int_var__int_pa_enable = _val.convert_to< int_pa_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_pa_enable() const {
    return int_var__int_pa_enable;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_sw_phv_mem_enable(const cpp_int & _val) { 
    // int_sw_phv_mem_enable
    int_var__int_sw_phv_mem_enable = _val.convert_to< int_sw_phv_mem_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_sw_phv_mem_enable() const {
    return int_var__int_sw_phv_mem_enable;
}
    
void cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_intf_enable(const cpp_int & _val) { 
    // int_intf_enable
    int_var__int_intf_enable = _val.convert_to< int_intf_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_int_groups_int_enable_rw_reg_t::int_intf_enable() const {
    return int_var__int_intf_enable;
}
    
void cap_ppa_csr_dhs_dbg_mem_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_dbg_mem_entry_t::data() const {
    return int_var__data;
}
    
void cap_ppa_csr_dhs_sw_phv_mem_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_sw_phv_mem_entry_t::data() const {
    return int_var__data;
}
    
void cap_ppa_csr_dhs_sw_phv_mem_entry_t::spare(const cpp_int & _val) { 
    // spare
    int_var__spare = _val.convert_to< spare_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_sw_phv_mem_entry_t::spare() const {
    return int_var__spare;
}
    
void cap_ppa_csr_dhs_sw_phv_mem_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_sw_phv_mem_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::data() const {
    return int_var__data;
}
    
void cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::rsvd(const cpp_int & _val) { 
    // rsvd
    int_var__rsvd = _val.convert_to< rsvd_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::rsvd() const {
    return int_var__rsvd;
}
    
void cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t::cmd(const cpp_int & _val) { 
    // cmd
    int_var__cmd = _val.convert_to< cmd_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t::cmd() const {
    return int_var__cmd;
}
    
void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::x_data(const cpp_int & _val) { 
    // x_data
    int_var__x_data = _val.convert_to< x_data_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::x_data() const {
    return int_var__x_data;
}
    
void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::y_data(const cpp_int & _val) { 
    // y_data
    int_var__y_data = _val.convert_to< y_data_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::y_data() const {
    return int_var__y_data;
}
    
void cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::valid(const cpp_int & _val) { 
    // valid
    int_var__valid = _val.convert_to< valid_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::valid() const {
    return int_var__valid;
}
    
void cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::data() const {
    return int_var__data;
}
    
void cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::rsvd(const cpp_int & _val) { 
    // rsvd
    int_var__rsvd = _val.convert_to< rsvd_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::rsvd() const {
    return int_var__rsvd;
}
    
void cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::ecc(const cpp_int & _val) { 
    // ecc
    int_var__ecc = _val.convert_to< ecc_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::ecc() const {
    return int_var__ecc;
}
    
void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t::cmd(const cpp_int & _val) { 
    // cmd
    int_var__cmd = _val.convert_to< cmd_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t::cmd() const {
    return int_var__cmd;
}
    
void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::x_data(const cpp_int & _val) { 
    // x_data
    int_var__x_data = _val.convert_to< x_data_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::x_data() const {
    return int_var__x_data;
}
    
void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::y_data(const cpp_int & _val) { 
    // y_data
    int_var__y_data = _val.convert_to< y_data_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::y_data() const {
    return int_var__y_data;
}
    
void cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::valid(const cpp_int & _val) { 
    // valid
    int_var__valid = _val.convert_to< valid_cpp_int_t >();
}

cpp_int cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::valid() const {
    return int_var__valid;
}
    
void cap_ppa_csr_CNT_preparse_t::dff_sop(const cpp_int & _val) { 
    // dff_sop
    int_var__dff_sop = _val.convert_to< dff_sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_preparse_t::dff_sop() const {
    return int_var__dff_sop;
}
    
void cap_ppa_csr_CNT_preparse_t::dff_eop(const cpp_int & _val) { 
    // dff_eop
    int_var__dff_eop = _val.convert_to< dff_eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_preparse_t::dff_eop() const {
    return int_var__dff_eop;
}
    
void cap_ppa_csr_CNT_preparse_t::eff(const cpp_int & _val) { 
    // eff
    int_var__eff = _val.convert_to< eff_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_preparse_t::eff() const {
    return int_var__eff;
}
    
void cap_ppa_csr_sta_preparse_t::state(const cpp_int & _val) { 
    // state
    int_var__state = _val.convert_to< state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_preparse_t::state() const {
    return int_var__state;
}
    
void cap_ppa_csr_sta_preparse_t::dq_state(const cpp_int & _val) { 
    // dq_state
    int_var__dq_state = _val.convert_to< dq_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_preparse_t::dq_state() const {
    return int_var__dq_state;
}
    
void cap_ppa_csr_sta_preparse_t::dff_empty(const cpp_int & _val) { 
    // dff_empty
    int_var__dff_empty = _val.convert_to< dff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_preparse_t::dff_empty() const {
    return int_var__dff_empty;
}
    
void cap_ppa_csr_sta_preparse_t::dff_full(const cpp_int & _val) { 
    // dff_full
    int_var__dff_full = _val.convert_to< dff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_preparse_t::dff_full() const {
    return int_var__dff_full;
}
    
void cap_ppa_csr_sta_preparse_t::eff_empty(const cpp_int & _val) { 
    // eff_empty
    int_var__eff_empty = _val.convert_to< eff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_preparse_t::eff_empty() const {
    return int_var__eff_empty;
}
    
void cap_ppa_csr_sta_preparse_t::eff_full(const cpp_int & _val) { 
    // eff_full
    int_var__eff_full = _val.convert_to< eff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_preparse_t::eff_full() const {
    return int_var__eff_full;
}
    
void cap_ppa_csr_cfg_preparse_t::spare(const cpp_int & _val) { 
    // spare
    int_var__spare = _val.convert_to< spare_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_preparse_t::spare() const {
    return int_var__spare;
}
    
void cap_ppa_csr_cfg_preparse_t::bypass(const cpp_int & _val) { 
    // bypass
    int_var__bypass = _val.convert_to< bypass_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_preparse_t::bypass() const {
    return int_var__bypass;
}
    
void cap_ppa_csr_cfg_preparse_t::tm_iport_enc_en(const cpp_int & _val) { 
    // tm_iport_enc_en
    int_var__tm_iport_enc_en = _val.convert_to< tm_iport_enc_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_preparse_t::tm_iport_enc_en() const {
    return int_var__tm_iport_enc_en;
}
    
void cap_ppa_csr_cfg_preparse_t::udp_dstport_roce_val0(const cpp_int & _val) { 
    // udp_dstport_roce_val0
    int_var__udp_dstport_roce_val0 = _val.convert_to< udp_dstport_roce_val0_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_preparse_t::udp_dstport_roce_val0() const {
    return int_var__udp_dstport_roce_val0;
}
    
void cap_ppa_csr_cfg_preparse_t::udp_dstport_roce_val1(const cpp_int & _val) { 
    // udp_dstport_roce_val1
    int_var__udp_dstport_roce_val1 = _val.convert_to< udp_dstport_roce_val1_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_preparse_t::udp_dstport_roce_val1() const {
    return int_var__udp_dstport_roce_val1;
}
    
void cap_ppa_csr_cfg_preparse_t::udp_dstport_vxlan_val0(const cpp_int & _val) { 
    // udp_dstport_vxlan_val0
    int_var__udp_dstport_vxlan_val0 = _val.convert_to< udp_dstport_vxlan_val0_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_preparse_t::udp_dstport_vxlan_val0() const {
    return int_var__udp_dstport_vxlan_val0;
}
    
void cap_ppa_csr_cfg_preparse_t::udp_dstport_vxlan_val1(const cpp_int & _val) { 
    // udp_dstport_vxlan_val1
    int_var__udp_dstport_vxlan_val1 = _val.convert_to< udp_dstport_vxlan_val1_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_preparse_t::udp_dstport_vxlan_val1() const {
    return int_var__udp_dstport_vxlan_val1;
}
    
void cap_ppa_csr_cfg_preparse_t::vxlan_flag_mask(const cpp_int & _val) { 
    // vxlan_flag_mask
    int_var__vxlan_flag_mask = _val.convert_to< vxlan_flag_mask_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_preparse_t::vxlan_flag_mask() const {
    return int_var__vxlan_flag_mask;
}
    
void cap_ppa_csr_cfg_preparse_t::vxlan_flag_val(const cpp_int & _val) { 
    // vxlan_flag_val
    int_var__vxlan_flag_val = _val.convert_to< vxlan_flag_val_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_preparse_t::vxlan_flag_val() const {
    return int_var__vxlan_flag_val;
}
    
void cap_ppa_csr_cfg_spare_dbg_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_spare_dbg_t::data() const {
    return int_var__data;
}
    
void cap_ppa_csr_cfg_spare_t::fld0_inst(const cpp_int & _val) { 
    // fld0_inst
    int_var__fld0_inst = _val.convert_to< fld0_inst_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_spare_t::fld0_inst() const {
    return int_var__fld0_inst;
}
    
void cap_ppa_csr_cfg_spare_t::fld1_inst(const cpp_int & _val) { 
    // fld1_inst
    int_var__fld1_inst = _val.convert_to< fld1_inst_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_spare_t::fld1_inst() const {
    return int_var__fld1_inst;
}
    
void cap_ppa_csr_cfg_spare_t::fld2_inst(const cpp_int & _val) { 
    // fld2_inst
    int_var__fld2_inst = _val.convert_to< fld2_inst_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_spare_t::fld2_inst() const {
    return int_var__fld2_inst;
}
    
void cap_ppa_csr_cfg_spare_t::fld3_inst(const cpp_int & _val) { 
    // fld3_inst
    int_var__fld3_inst = _val.convert_to< fld3_inst_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_spare_t::fld3_inst() const {
    return int_var__fld3_inst;
}
    
void cap_ppa_csr_cfg_debug_port_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_debug_port_t::enable() const {
    return int_var__enable;
}
    
void cap_ppa_csr_cfg_debug_port_t::select(const cpp_int & _val) { 
    // select
    int_var__select = _val.convert_to< select_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_debug_port_t::select() const {
    return int_var__select;
}
    
void cap_ppa_csr_cfg_debug_ctrl_t::deq_stall_en(const cpp_int & _val) { 
    // deq_stall_en
    int_var__deq_stall_en = _val.convert_to< deq_stall_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_debug_ctrl_t::deq_stall_en() const {
    return int_var__deq_stall_en;
}
    
void cap_ppa_csr_cfg_debug_ctrl_t::dbg_mem_sel(const cpp_int & _val) { 
    // dbg_mem_sel
    int_var__dbg_mem_sel = _val.convert_to< dbg_mem_sel_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_debug_ctrl_t::dbg_mem_sel() const {
    return int_var__dbg_mem_sel;
}
    
void cap_ppa_csr_cfg_debug_ctrl_t::dbg_bndl_sel(const cpp_int & _val) { 
    // dbg_bndl_sel
    int_var__dbg_bndl_sel = _val.convert_to< dbg_bndl_sel_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_debug_ctrl_t::dbg_bndl_sel() const {
    return int_var__dbg_bndl_sel;
}
    
void cap_ppa_csr_cfg_debug_ctrl_t::dbg_bus_sel(const cpp_int & _val) { 
    // dbg_bus_sel
    int_var__dbg_bus_sel = _val.convert_to< dbg_bus_sel_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_debug_ctrl_t::dbg_bus_sel() const {
    return int_var__dbg_bus_sel;
}
    
void cap_ppa_csr_cfg_debug_ctrl_t::eccbypass(const cpp_int & _val) { 
    // eccbypass
    int_var__eccbypass = _val.convert_to< eccbypass_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_debug_ctrl_t::eccbypass() const {
    return int_var__eccbypass;
}
    
void cap_ppa_csr_sta_pe_alloc_t::state(const cpp_int & _val) { 
    // state
    int_var__state = _val.convert_to< state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe_alloc_t::state() const {
    return int_var__state;
}
    
void cap_ppa_csr_sta_bndl1_t::pkt_queue(const cpp_int & _val) { 
    // pkt_queue
    int_var__pkt_queue = _val.convert_to< pkt_queue_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl1_t::pkt_queue() const {
    return int_var__pkt_queue;
}
    
void cap_ppa_csr_sta_bndl0_t::pkt_queue(const cpp_int & _val) { 
    // pkt_queue
    int_var__pkt_queue = _val.convert_to< pkt_queue_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl0_t::pkt_queue() const {
    return int_var__pkt_queue;
}
    
void cap_ppa_csr_sta_fifo_t::dp_if_ff_full(const cpp_int & _val) { 
    // dp_if_ff_full
    int_var__dp_if_ff_full = _val.convert_to< dp_if_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::dp_if_ff_full() const {
    return int_var__dp_if_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::dp_if_ff_empty(const cpp_int & _val) { 
    // dp_if_ff_empty
    int_var__dp_if_ff_empty = _val.convert_to< dp_if_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::dp_if_ff_empty() const {
    return int_var__dp_if_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::ohi_if_ff_full(const cpp_int & _val) { 
    // ohi_if_ff_full
    int_var__ohi_if_ff_full = _val.convert_to< ohi_if_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::ohi_if_ff_full() const {
    return int_var__ohi_if_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::ohi_if_ff_empty(const cpp_int & _val) { 
    // ohi_if_ff_empty
    int_var__ohi_if_ff_empty = _val.convert_to< ohi_if_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::ohi_if_ff_empty() const {
    return int_var__ohi_if_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::ma_if_ff_full(const cpp_int & _val) { 
    // ma_if_ff_full
    int_var__ma_if_ff_full = _val.convert_to< ma_if_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::ma_if_ff_full() const {
    return int_var__ma_if_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::ma_if_ff_empty(const cpp_int & _val) { 
    // ma_if_ff_empty
    int_var__ma_if_ff_empty = _val.convert_to< ma_if_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::ma_if_ff_empty() const {
    return int_var__ma_if_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pb_if_ff_full(const cpp_int & _val) { 
    // pb_if_ff_full
    int_var__pb_if_ff_full = _val.convert_to< pb_if_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pb_if_ff_full() const {
    return int_var__pb_if_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pb_if_ff_empty(const cpp_int & _val) { 
    // pb_if_ff_empty
    int_var__pb_if_ff_empty = _val.convert_to< pb_if_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pb_if_ff_empty() const {
    return int_var__pb_if_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pkt_mtu_ff_full(const cpp_int & _val) { 
    // pkt_mtu_ff_full
    int_var__pkt_mtu_ff_full = _val.convert_to< pkt_mtu_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pkt_mtu_ff_full() const {
    return int_var__pkt_mtu_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pkt_mtu_ff_empty(const cpp_int & _val) { 
    // pkt_mtu_ff_empty
    int_var__pkt_mtu_ff_empty = _val.convert_to< pkt_mtu_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pkt_mtu_ff_empty() const {
    return int_var__pkt_mtu_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::outphv_ff_full(const cpp_int & _val) { 
    // outphv_ff_full
    int_var__outphv_ff_full = _val.convert_to< outphv_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::outphv_ff_full() const {
    return int_var__outphv_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::outphv_ff_empty(const cpp_int & _val) { 
    // outphv_ff_empty
    int_var__outphv_ff_empty = _val.convert_to< outphv_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::outphv_ff_empty() const {
    return int_var__outphv_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::outohi_ff_full(const cpp_int & _val) { 
    // outohi_ff_full
    int_var__outohi_ff_full = _val.convert_to< outohi_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::outohi_ff_full() const {
    return int_var__outohi_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::outohi_ff_empty(const cpp_int & _val) { 
    // outohi_ff_empty
    int_var__outohi_ff_empty = _val.convert_to< outohi_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::outohi_ff_empty() const {
    return int_var__outohi_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::chk_ff_full(const cpp_int & _val) { 
    // chk_ff_full
    int_var__chk_ff_full = _val.convert_to< chk_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::chk_ff_full() const {
    return int_var__chk_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::chk_ff_empty(const cpp_int & _val) { 
    // chk_ff_empty
    int_var__chk_ff_empty = _val.convert_to< chk_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::chk_ff_empty() const {
    return int_var__chk_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe0_qctl_ff_full(const cpp_int & _val) { 
    // pe0_qctl_ff_full
    int_var__pe0_qctl_ff_full = _val.convert_to< pe0_qctl_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe0_qctl_ff_full() const {
    return int_var__pe0_qctl_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe0_qctl_ff_empty(const cpp_int & _val) { 
    // pe0_qctl_ff_empty
    int_var__pe0_qctl_ff_empty = _val.convert_to< pe0_qctl_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe0_qctl_ff_empty() const {
    return int_var__pe0_qctl_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe0_phv_ff_full(const cpp_int & _val) { 
    // pe0_phv_ff_full
    int_var__pe0_phv_ff_full = _val.convert_to< pe0_phv_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe0_phv_ff_full() const {
    return int_var__pe0_phv_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe0_phv_ff_empty(const cpp_int & _val) { 
    // pe0_phv_ff_empty
    int_var__pe0_phv_ff_empty = _val.convert_to< pe0_phv_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe0_phv_ff_empty() const {
    return int_var__pe0_phv_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe0_ohi_ff_full(const cpp_int & _val) { 
    // pe0_ohi_ff_full
    int_var__pe0_ohi_ff_full = _val.convert_to< pe0_ohi_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe0_ohi_ff_full() const {
    return int_var__pe0_ohi_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe0_ohi_ff_empty(const cpp_int & _val) { 
    // pe0_ohi_ff_empty
    int_var__pe0_ohi_ff_empty = _val.convert_to< pe0_ohi_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe0_ohi_ff_empty() const {
    return int_var__pe0_ohi_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe1_qctl_ff_full(const cpp_int & _val) { 
    // pe1_qctl_ff_full
    int_var__pe1_qctl_ff_full = _val.convert_to< pe1_qctl_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe1_qctl_ff_full() const {
    return int_var__pe1_qctl_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe1_qctl_ff_empty(const cpp_int & _val) { 
    // pe1_qctl_ff_empty
    int_var__pe1_qctl_ff_empty = _val.convert_to< pe1_qctl_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe1_qctl_ff_empty() const {
    return int_var__pe1_qctl_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe1_phv_ff_full(const cpp_int & _val) { 
    // pe1_phv_ff_full
    int_var__pe1_phv_ff_full = _val.convert_to< pe1_phv_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe1_phv_ff_full() const {
    return int_var__pe1_phv_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe1_phv_ff_empty(const cpp_int & _val) { 
    // pe1_phv_ff_empty
    int_var__pe1_phv_ff_empty = _val.convert_to< pe1_phv_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe1_phv_ff_empty() const {
    return int_var__pe1_phv_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe1_ohi_ff_full(const cpp_int & _val) { 
    // pe1_ohi_ff_full
    int_var__pe1_ohi_ff_full = _val.convert_to< pe1_ohi_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe1_ohi_ff_full() const {
    return int_var__pe1_ohi_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe1_ohi_ff_empty(const cpp_int & _val) { 
    // pe1_ohi_ff_empty
    int_var__pe1_ohi_ff_empty = _val.convert_to< pe1_ohi_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe1_ohi_ff_empty() const {
    return int_var__pe1_ohi_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe2_qctl_ff_full(const cpp_int & _val) { 
    // pe2_qctl_ff_full
    int_var__pe2_qctl_ff_full = _val.convert_to< pe2_qctl_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe2_qctl_ff_full() const {
    return int_var__pe2_qctl_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe2_qctl_ff_empty(const cpp_int & _val) { 
    // pe2_qctl_ff_empty
    int_var__pe2_qctl_ff_empty = _val.convert_to< pe2_qctl_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe2_qctl_ff_empty() const {
    return int_var__pe2_qctl_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe2_phv_ff_full(const cpp_int & _val) { 
    // pe2_phv_ff_full
    int_var__pe2_phv_ff_full = _val.convert_to< pe2_phv_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe2_phv_ff_full() const {
    return int_var__pe2_phv_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe2_phv_ff_empty(const cpp_int & _val) { 
    // pe2_phv_ff_empty
    int_var__pe2_phv_ff_empty = _val.convert_to< pe2_phv_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe2_phv_ff_empty() const {
    return int_var__pe2_phv_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe2_ohi_ff_full(const cpp_int & _val) { 
    // pe2_ohi_ff_full
    int_var__pe2_ohi_ff_full = _val.convert_to< pe2_ohi_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe2_ohi_ff_full() const {
    return int_var__pe2_ohi_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe2_ohi_ff_empty(const cpp_int & _val) { 
    // pe2_ohi_ff_empty
    int_var__pe2_ohi_ff_empty = _val.convert_to< pe2_ohi_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe2_ohi_ff_empty() const {
    return int_var__pe2_ohi_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe3_qctl_ff_full(const cpp_int & _val) { 
    // pe3_qctl_ff_full
    int_var__pe3_qctl_ff_full = _val.convert_to< pe3_qctl_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe3_qctl_ff_full() const {
    return int_var__pe3_qctl_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe3_qctl_ff_empty(const cpp_int & _val) { 
    // pe3_qctl_ff_empty
    int_var__pe3_qctl_ff_empty = _val.convert_to< pe3_qctl_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe3_qctl_ff_empty() const {
    return int_var__pe3_qctl_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe3_phv_ff_full(const cpp_int & _val) { 
    // pe3_phv_ff_full
    int_var__pe3_phv_ff_full = _val.convert_to< pe3_phv_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe3_phv_ff_full() const {
    return int_var__pe3_phv_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe3_phv_ff_empty(const cpp_int & _val) { 
    // pe3_phv_ff_empty
    int_var__pe3_phv_ff_empty = _val.convert_to< pe3_phv_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe3_phv_ff_empty() const {
    return int_var__pe3_phv_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe3_ohi_ff_full(const cpp_int & _val) { 
    // pe3_ohi_ff_full
    int_var__pe3_ohi_ff_full = _val.convert_to< pe3_ohi_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe3_ohi_ff_full() const {
    return int_var__pe3_ohi_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe3_ohi_ff_empty(const cpp_int & _val) { 
    // pe3_ohi_ff_empty
    int_var__pe3_ohi_ff_empty = _val.convert_to< pe3_ohi_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe3_ohi_ff_empty() const {
    return int_var__pe3_ohi_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe4_qctl_ff_full(const cpp_int & _val) { 
    // pe4_qctl_ff_full
    int_var__pe4_qctl_ff_full = _val.convert_to< pe4_qctl_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe4_qctl_ff_full() const {
    return int_var__pe4_qctl_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe4_qctl_ff_empty(const cpp_int & _val) { 
    // pe4_qctl_ff_empty
    int_var__pe4_qctl_ff_empty = _val.convert_to< pe4_qctl_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe4_qctl_ff_empty() const {
    return int_var__pe4_qctl_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe4_phv_ff_full(const cpp_int & _val) { 
    // pe4_phv_ff_full
    int_var__pe4_phv_ff_full = _val.convert_to< pe4_phv_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe4_phv_ff_full() const {
    return int_var__pe4_phv_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe4_phv_ff_empty(const cpp_int & _val) { 
    // pe4_phv_ff_empty
    int_var__pe4_phv_ff_empty = _val.convert_to< pe4_phv_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe4_phv_ff_empty() const {
    return int_var__pe4_phv_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe4_ohi_ff_full(const cpp_int & _val) { 
    // pe4_ohi_ff_full
    int_var__pe4_ohi_ff_full = _val.convert_to< pe4_ohi_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe4_ohi_ff_full() const {
    return int_var__pe4_ohi_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe4_ohi_ff_empty(const cpp_int & _val) { 
    // pe4_ohi_ff_empty
    int_var__pe4_ohi_ff_empty = _val.convert_to< pe4_ohi_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe4_ohi_ff_empty() const {
    return int_var__pe4_ohi_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe5_qctl_ff_full(const cpp_int & _val) { 
    // pe5_qctl_ff_full
    int_var__pe5_qctl_ff_full = _val.convert_to< pe5_qctl_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe5_qctl_ff_full() const {
    return int_var__pe5_qctl_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe5_qctl_ff_empty(const cpp_int & _val) { 
    // pe5_qctl_ff_empty
    int_var__pe5_qctl_ff_empty = _val.convert_to< pe5_qctl_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe5_qctl_ff_empty() const {
    return int_var__pe5_qctl_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe5_phv_ff_full(const cpp_int & _val) { 
    // pe5_phv_ff_full
    int_var__pe5_phv_ff_full = _val.convert_to< pe5_phv_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe5_phv_ff_full() const {
    return int_var__pe5_phv_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe5_phv_ff_empty(const cpp_int & _val) { 
    // pe5_phv_ff_empty
    int_var__pe5_phv_ff_empty = _val.convert_to< pe5_phv_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe5_phv_ff_empty() const {
    return int_var__pe5_phv_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe5_ohi_ff_full(const cpp_int & _val) { 
    // pe5_ohi_ff_full
    int_var__pe5_ohi_ff_full = _val.convert_to< pe5_ohi_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe5_ohi_ff_full() const {
    return int_var__pe5_ohi_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe5_ohi_ff_empty(const cpp_int & _val) { 
    // pe5_ohi_ff_empty
    int_var__pe5_ohi_ff_empty = _val.convert_to< pe5_ohi_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe5_ohi_ff_empty() const {
    return int_var__pe5_ohi_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe6_qctl_ff_full(const cpp_int & _val) { 
    // pe6_qctl_ff_full
    int_var__pe6_qctl_ff_full = _val.convert_to< pe6_qctl_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe6_qctl_ff_full() const {
    return int_var__pe6_qctl_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe6_qctl_ff_empty(const cpp_int & _val) { 
    // pe6_qctl_ff_empty
    int_var__pe6_qctl_ff_empty = _val.convert_to< pe6_qctl_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe6_qctl_ff_empty() const {
    return int_var__pe6_qctl_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe6_phv_ff_full(const cpp_int & _val) { 
    // pe6_phv_ff_full
    int_var__pe6_phv_ff_full = _val.convert_to< pe6_phv_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe6_phv_ff_full() const {
    return int_var__pe6_phv_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe6_phv_ff_empty(const cpp_int & _val) { 
    // pe6_phv_ff_empty
    int_var__pe6_phv_ff_empty = _val.convert_to< pe6_phv_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe6_phv_ff_empty() const {
    return int_var__pe6_phv_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe6_ohi_ff_full(const cpp_int & _val) { 
    // pe6_ohi_ff_full
    int_var__pe6_ohi_ff_full = _val.convert_to< pe6_ohi_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe6_ohi_ff_full() const {
    return int_var__pe6_ohi_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe6_ohi_ff_empty(const cpp_int & _val) { 
    // pe6_ohi_ff_empty
    int_var__pe6_ohi_ff_empty = _val.convert_to< pe6_ohi_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe6_ohi_ff_empty() const {
    return int_var__pe6_ohi_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe7_qctl_ff_full(const cpp_int & _val) { 
    // pe7_qctl_ff_full
    int_var__pe7_qctl_ff_full = _val.convert_to< pe7_qctl_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe7_qctl_ff_full() const {
    return int_var__pe7_qctl_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe7_qctl_ff_empty(const cpp_int & _val) { 
    // pe7_qctl_ff_empty
    int_var__pe7_qctl_ff_empty = _val.convert_to< pe7_qctl_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe7_qctl_ff_empty() const {
    return int_var__pe7_qctl_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe7_phv_ff_full(const cpp_int & _val) { 
    // pe7_phv_ff_full
    int_var__pe7_phv_ff_full = _val.convert_to< pe7_phv_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe7_phv_ff_full() const {
    return int_var__pe7_phv_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe7_phv_ff_empty(const cpp_int & _val) { 
    // pe7_phv_ff_empty
    int_var__pe7_phv_ff_empty = _val.convert_to< pe7_phv_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe7_phv_ff_empty() const {
    return int_var__pe7_phv_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe7_ohi_ff_full(const cpp_int & _val) { 
    // pe7_ohi_ff_full
    int_var__pe7_ohi_ff_full = _val.convert_to< pe7_ohi_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe7_ohi_ff_full() const {
    return int_var__pe7_ohi_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe7_ohi_ff_empty(const cpp_int & _val) { 
    // pe7_ohi_ff_empty
    int_var__pe7_ohi_ff_empty = _val.convert_to< pe7_ohi_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe7_ohi_ff_empty() const {
    return int_var__pe7_ohi_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe8_qctl_ff_full(const cpp_int & _val) { 
    // pe8_qctl_ff_full
    int_var__pe8_qctl_ff_full = _val.convert_to< pe8_qctl_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe8_qctl_ff_full() const {
    return int_var__pe8_qctl_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe8_qctl_ff_empty(const cpp_int & _val) { 
    // pe8_qctl_ff_empty
    int_var__pe8_qctl_ff_empty = _val.convert_to< pe8_qctl_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe8_qctl_ff_empty() const {
    return int_var__pe8_qctl_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe8_phv_ff_full(const cpp_int & _val) { 
    // pe8_phv_ff_full
    int_var__pe8_phv_ff_full = _val.convert_to< pe8_phv_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe8_phv_ff_full() const {
    return int_var__pe8_phv_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe8_phv_ff_empty(const cpp_int & _val) { 
    // pe8_phv_ff_empty
    int_var__pe8_phv_ff_empty = _val.convert_to< pe8_phv_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe8_phv_ff_empty() const {
    return int_var__pe8_phv_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe8_ohi_ff_full(const cpp_int & _val) { 
    // pe8_ohi_ff_full
    int_var__pe8_ohi_ff_full = _val.convert_to< pe8_ohi_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe8_ohi_ff_full() const {
    return int_var__pe8_ohi_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe8_ohi_ff_empty(const cpp_int & _val) { 
    // pe8_ohi_ff_empty
    int_var__pe8_ohi_ff_empty = _val.convert_to< pe8_ohi_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe8_ohi_ff_empty() const {
    return int_var__pe8_ohi_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe9_qctl_ff_full(const cpp_int & _val) { 
    // pe9_qctl_ff_full
    int_var__pe9_qctl_ff_full = _val.convert_to< pe9_qctl_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe9_qctl_ff_full() const {
    return int_var__pe9_qctl_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe9_qctl_ff_empty(const cpp_int & _val) { 
    // pe9_qctl_ff_empty
    int_var__pe9_qctl_ff_empty = _val.convert_to< pe9_qctl_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe9_qctl_ff_empty() const {
    return int_var__pe9_qctl_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe9_phv_ff_full(const cpp_int & _val) { 
    // pe9_phv_ff_full
    int_var__pe9_phv_ff_full = _val.convert_to< pe9_phv_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe9_phv_ff_full() const {
    return int_var__pe9_phv_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe9_phv_ff_empty(const cpp_int & _val) { 
    // pe9_phv_ff_empty
    int_var__pe9_phv_ff_empty = _val.convert_to< pe9_phv_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe9_phv_ff_empty() const {
    return int_var__pe9_phv_ff_empty;
}
    
void cap_ppa_csr_sta_fifo_t::pe9_ohi_ff_full(const cpp_int & _val) { 
    // pe9_ohi_ff_full
    int_var__pe9_ohi_ff_full = _val.convert_to< pe9_ohi_ff_full_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe9_ohi_ff_full() const {
    return int_var__pe9_ohi_ff_full;
}
    
void cap_ppa_csr_sta_fifo_t::pe9_ohi_ff_empty(const cpp_int & _val) { 
    // pe9_ohi_ff_empty
    int_var__pe9_ohi_ff_empty = _val.convert_to< pe9_ohi_ff_empty_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_fifo_t::pe9_ohi_ff_empty() const {
    return int_var__pe9_ohi_ff_empty;
}
    
void cap_ppa_csr_sta_bndl1_state_lkp_t::err_vec(const cpp_int & _val) { 
    // err_vec
    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl1_state_lkp_t::err_vec() const {
    return int_var__err_vec;
}
    
void cap_ppa_csr_sta_bndl1_state_lkp_t::err_log(const cpp_int & _val) { 
    // err_log
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl1_state_lkp_t::err_log() const {
    return int_var__err_log;
}
    
void cap_ppa_csr_sta_bndl0_state_lkp_t::err_vec(const cpp_int & _val) { 
    // err_vec
    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl0_state_lkp_t::err_vec() const {
    return int_var__err_vec;
}
    
void cap_ppa_csr_sta_bndl0_state_lkp_t::err_log(const cpp_int & _val) { 
    // err_log
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl0_state_lkp_t::err_log() const {
    return int_var__err_log;
}
    
void cap_ppa_csr_sta_pe9_t::err_vec(const cpp_int & _val) { 
    // err_vec
    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe9_t::err_vec() const {
    return int_var__err_vec;
}
    
void cap_ppa_csr_sta_pe9_t::err_log(const cpp_int & _val) { 
    // err_log
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe9_t::err_log() const {
    return int_var__err_log;
}
    
void cap_ppa_csr_sta_pe9_t::pe_state(const cpp_int & _val) { 
    // pe_state
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe9_t::pe_state() const {
    return int_var__pe_state;
}
    
void cap_ppa_csr_sta_pe9_t::phv_state(const cpp_int & _val) { 
    // phv_state
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe9_t::phv_state() const {
    return int_var__phv_state;
}
    
void cap_ppa_csr_sta_pe9_t::pkt_state(const cpp_int & _val) { 
    // pkt_state
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe9_t::pkt_state() const {
    return int_var__pkt_state;
}
    
void cap_ppa_csr_sta_pe8_t::err_vec(const cpp_int & _val) { 
    // err_vec
    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe8_t::err_vec() const {
    return int_var__err_vec;
}
    
void cap_ppa_csr_sta_pe8_t::err_log(const cpp_int & _val) { 
    // err_log
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe8_t::err_log() const {
    return int_var__err_log;
}
    
void cap_ppa_csr_sta_pe8_t::pe_state(const cpp_int & _val) { 
    // pe_state
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe8_t::pe_state() const {
    return int_var__pe_state;
}
    
void cap_ppa_csr_sta_pe8_t::phv_state(const cpp_int & _val) { 
    // phv_state
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe8_t::phv_state() const {
    return int_var__phv_state;
}
    
void cap_ppa_csr_sta_pe8_t::pkt_state(const cpp_int & _val) { 
    // pkt_state
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe8_t::pkt_state() const {
    return int_var__pkt_state;
}
    
void cap_ppa_csr_sta_pe7_t::err_vec(const cpp_int & _val) { 
    // err_vec
    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe7_t::err_vec() const {
    return int_var__err_vec;
}
    
void cap_ppa_csr_sta_pe7_t::err_log(const cpp_int & _val) { 
    // err_log
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe7_t::err_log() const {
    return int_var__err_log;
}
    
void cap_ppa_csr_sta_pe7_t::pe_state(const cpp_int & _val) { 
    // pe_state
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe7_t::pe_state() const {
    return int_var__pe_state;
}
    
void cap_ppa_csr_sta_pe7_t::phv_state(const cpp_int & _val) { 
    // phv_state
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe7_t::phv_state() const {
    return int_var__phv_state;
}
    
void cap_ppa_csr_sta_pe7_t::pkt_state(const cpp_int & _val) { 
    // pkt_state
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe7_t::pkt_state() const {
    return int_var__pkt_state;
}
    
void cap_ppa_csr_sta_pe6_t::err_vec(const cpp_int & _val) { 
    // err_vec
    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe6_t::err_vec() const {
    return int_var__err_vec;
}
    
void cap_ppa_csr_sta_pe6_t::err_log(const cpp_int & _val) { 
    // err_log
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe6_t::err_log() const {
    return int_var__err_log;
}
    
void cap_ppa_csr_sta_pe6_t::pe_state(const cpp_int & _val) { 
    // pe_state
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe6_t::pe_state() const {
    return int_var__pe_state;
}
    
void cap_ppa_csr_sta_pe6_t::phv_state(const cpp_int & _val) { 
    // phv_state
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe6_t::phv_state() const {
    return int_var__phv_state;
}
    
void cap_ppa_csr_sta_pe6_t::pkt_state(const cpp_int & _val) { 
    // pkt_state
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe6_t::pkt_state() const {
    return int_var__pkt_state;
}
    
void cap_ppa_csr_sta_pe5_t::err_vec(const cpp_int & _val) { 
    // err_vec
    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe5_t::err_vec() const {
    return int_var__err_vec;
}
    
void cap_ppa_csr_sta_pe5_t::err_log(const cpp_int & _val) { 
    // err_log
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe5_t::err_log() const {
    return int_var__err_log;
}
    
void cap_ppa_csr_sta_pe5_t::pe_state(const cpp_int & _val) { 
    // pe_state
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe5_t::pe_state() const {
    return int_var__pe_state;
}
    
void cap_ppa_csr_sta_pe5_t::phv_state(const cpp_int & _val) { 
    // phv_state
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe5_t::phv_state() const {
    return int_var__phv_state;
}
    
void cap_ppa_csr_sta_pe5_t::pkt_state(const cpp_int & _val) { 
    // pkt_state
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe5_t::pkt_state() const {
    return int_var__pkt_state;
}
    
void cap_ppa_csr_sta_pe4_t::err_vec(const cpp_int & _val) { 
    // err_vec
    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe4_t::err_vec() const {
    return int_var__err_vec;
}
    
void cap_ppa_csr_sta_pe4_t::err_log(const cpp_int & _val) { 
    // err_log
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe4_t::err_log() const {
    return int_var__err_log;
}
    
void cap_ppa_csr_sta_pe4_t::pe_state(const cpp_int & _val) { 
    // pe_state
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe4_t::pe_state() const {
    return int_var__pe_state;
}
    
void cap_ppa_csr_sta_pe4_t::phv_state(const cpp_int & _val) { 
    // phv_state
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe4_t::phv_state() const {
    return int_var__phv_state;
}
    
void cap_ppa_csr_sta_pe4_t::pkt_state(const cpp_int & _val) { 
    // pkt_state
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe4_t::pkt_state() const {
    return int_var__pkt_state;
}
    
void cap_ppa_csr_sta_pe3_t::err_vec(const cpp_int & _val) { 
    // err_vec
    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe3_t::err_vec() const {
    return int_var__err_vec;
}
    
void cap_ppa_csr_sta_pe3_t::err_log(const cpp_int & _val) { 
    // err_log
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe3_t::err_log() const {
    return int_var__err_log;
}
    
void cap_ppa_csr_sta_pe3_t::pe_state(const cpp_int & _val) { 
    // pe_state
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe3_t::pe_state() const {
    return int_var__pe_state;
}
    
void cap_ppa_csr_sta_pe3_t::phv_state(const cpp_int & _val) { 
    // phv_state
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe3_t::phv_state() const {
    return int_var__phv_state;
}
    
void cap_ppa_csr_sta_pe3_t::pkt_state(const cpp_int & _val) { 
    // pkt_state
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe3_t::pkt_state() const {
    return int_var__pkt_state;
}
    
void cap_ppa_csr_sta_pe2_t::err_vec(const cpp_int & _val) { 
    // err_vec
    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe2_t::err_vec() const {
    return int_var__err_vec;
}
    
void cap_ppa_csr_sta_pe2_t::err_log(const cpp_int & _val) { 
    // err_log
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe2_t::err_log() const {
    return int_var__err_log;
}
    
void cap_ppa_csr_sta_pe2_t::pe_state(const cpp_int & _val) { 
    // pe_state
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe2_t::pe_state() const {
    return int_var__pe_state;
}
    
void cap_ppa_csr_sta_pe2_t::phv_state(const cpp_int & _val) { 
    // phv_state
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe2_t::phv_state() const {
    return int_var__phv_state;
}
    
void cap_ppa_csr_sta_pe2_t::pkt_state(const cpp_int & _val) { 
    // pkt_state
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe2_t::pkt_state() const {
    return int_var__pkt_state;
}
    
void cap_ppa_csr_sta_pe1_t::err_vec(const cpp_int & _val) { 
    // err_vec
    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe1_t::err_vec() const {
    return int_var__err_vec;
}
    
void cap_ppa_csr_sta_pe1_t::err_log(const cpp_int & _val) { 
    // err_log
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe1_t::err_log() const {
    return int_var__err_log;
}
    
void cap_ppa_csr_sta_pe1_t::pe_state(const cpp_int & _val) { 
    // pe_state
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe1_t::pe_state() const {
    return int_var__pe_state;
}
    
void cap_ppa_csr_sta_pe1_t::phv_state(const cpp_int & _val) { 
    // phv_state
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe1_t::phv_state() const {
    return int_var__phv_state;
}
    
void cap_ppa_csr_sta_pe1_t::pkt_state(const cpp_int & _val) { 
    // pkt_state
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe1_t::pkt_state() const {
    return int_var__pkt_state;
}
    
void cap_ppa_csr_sta_pe0_t::err_vec(const cpp_int & _val) { 
    // err_vec
    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe0_t::err_vec() const {
    return int_var__err_vec;
}
    
void cap_ppa_csr_sta_pe0_t::err_log(const cpp_int & _val) { 
    // err_log
    int_var__err_log = _val.convert_to< err_log_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe0_t::err_log() const {
    return int_var__err_log;
}
    
void cap_ppa_csr_sta_pe0_t::pe_state(const cpp_int & _val) { 
    // pe_state
    int_var__pe_state = _val.convert_to< pe_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe0_t::pe_state() const {
    return int_var__pe_state;
}
    
void cap_ppa_csr_sta_pe0_t::phv_state(const cpp_int & _val) { 
    // phv_state
    int_var__phv_state = _val.convert_to< phv_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe0_t::phv_state() const {
    return int_var__phv_state;
}
    
void cap_ppa_csr_sta_pe0_t::pkt_state(const cpp_int & _val) { 
    // pkt_state
    int_var__pkt_state = _val.convert_to< pkt_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe0_t::pkt_state() const {
    return int_var__pkt_state;
}
    
void cap_ppa_csr_sta_chkr_seq_id_t::ohi(const cpp_int & _val) { 
    // ohi
    int_var__ohi = _val.convert_to< ohi_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_chkr_seq_id_t::ohi() const {
    return int_var__ohi;
}
    
void cap_ppa_csr_sta_chkr_seq_id_t::pkt(const cpp_int & _val) { 
    // pkt
    int_var__pkt = _val.convert_to< pkt_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_chkr_seq_id_t::pkt() const {
    return int_var__pkt;
}
    
void cap_ppa_csr_sta_csum4_t::err_vec(const cpp_int & _val) { 
    // err_vec
    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_csum4_t::err_vec() const {
    return int_var__err_vec;
}
    
void cap_ppa_csr_sta_csum3_t::err_vec(const cpp_int & _val) { 
    // err_vec
    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_csum3_t::err_vec() const {
    return int_var__err_vec;
}
    
void cap_ppa_csr_sta_csum2_t::err_vec(const cpp_int & _val) { 
    // err_vec
    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_csum2_t::err_vec() const {
    return int_var__err_vec;
}
    
void cap_ppa_csr_sta_csum1_t::err_vec(const cpp_int & _val) { 
    // err_vec
    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_csum1_t::err_vec() const {
    return int_var__err_vec;
}
    
void cap_ppa_csr_sta_csum0_t::err_vec(const cpp_int & _val) { 
    // err_vec
    int_var__err_vec = _val.convert_to< err_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_csum0_t::err_vec() const {
    return int_var__err_vec;
}
    
void cap_ppa_csr_sta_reorder_t::seq_state(const cpp_int & _val) { 
    // seq_state
    int_var__seq_state = _val.convert_to< seq_state_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_reorder_t::seq_state() const {
    return int_var__seq_state;
}
    
void cap_ppa_csr_sta_reorder_t::seq_num(const cpp_int & _val) { 
    // seq_num
    int_var__seq_num = _val.convert_to< seq_num_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_reorder_t::seq_num() const {
    return int_var__seq_num;
}
    
void cap_ppa_csr_sta_reorder_t::ohi_srdy_vec(const cpp_int & _val) { 
    // ohi_srdy_vec
    int_var__ohi_srdy_vec = _val.convert_to< ohi_srdy_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_reorder_t::ohi_srdy_vec() const {
    return int_var__ohi_srdy_vec;
}
    
void cap_ppa_csr_sta_reorder_t::phv_srdy_vec(const cpp_int & _val) { 
    // phv_srdy_vec
    int_var__phv_srdy_vec = _val.convert_to< phv_srdy_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_reorder_t::phv_srdy_vec() const {
    return int_var__phv_srdy_vec;
}
    
void cap_ppa_csr_sta_reorder_t::match_vec(const cpp_int & _val) { 
    // match_vec
    int_var__match_vec = _val.convert_to< match_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_reorder_t::match_vec() const {
    return int_var__match_vec;
}
    
void cap_ppa_csr_sta_reorder_t::eop_vec(const cpp_int & _val) { 
    // eop_vec
    int_var__eop_vec = _val.convert_to< eop_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_reorder_t::eop_vec() const {
    return int_var__eop_vec;
}
    
void cap_ppa_csr_sta_reorder_t::drdy_vec_d(const cpp_int & _val) { 
    // drdy_vec_d
    int_var__drdy_vec_d = _val.convert_to< drdy_vec_d_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_reorder_t::drdy_vec_d() const {
    return int_var__drdy_vec_d;
}
    
void cap_ppa_csr_sta_reorder_phv_not_sop_err_t::match_vec(const cpp_int & _val) { 
    // match_vec
    int_var__match_vec = _val.convert_to< match_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_reorder_phv_not_sop_err_t::match_vec() const {
    return int_var__match_vec;
}
    
void cap_ppa_csr_sta_reorder_phv_not_sop_err_t::phv_sop_vec(const cpp_int & _val) { 
    // phv_sop_vec
    int_var__phv_sop_vec = _val.convert_to< phv_sop_vec_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_reorder_phv_not_sop_err_t::phv_sop_vec() const {
    return int_var__phv_sop_vec;
}
    
void cap_ppa_csr_sta_sw_phv_mem_t::ecc_correctable(const cpp_int & _val) { 
    // ecc_correctable
    int_var__ecc_correctable = _val.convert_to< ecc_correctable_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_sw_phv_mem_t::ecc_correctable() const {
    return int_var__ecc_correctable;
}
    
void cap_ppa_csr_sta_sw_phv_mem_t::ecc_uncorrectable(const cpp_int & _val) { 
    // ecc_uncorrectable
    int_var__ecc_uncorrectable = _val.convert_to< ecc_uncorrectable_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_sw_phv_mem_t::ecc_uncorrectable() const {
    return int_var__ecc_uncorrectable;
}
    
void cap_ppa_csr_sta_sw_phv_mem_t::ecc_syndrome(const cpp_int & _val) { 
    // ecc_syndrome
    int_var__ecc_syndrome = _val.convert_to< ecc_syndrome_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_sw_phv_mem_t::ecc_syndrome() const {
    return int_var__ecc_syndrome;
}
    
void cap_ppa_csr_sta_sw_phv_mem_t::ecc_addr(const cpp_int & _val) { 
    // ecc_addr
    int_var__ecc_addr = _val.convert_to< ecc_addr_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_sw_phv_mem_t::ecc_addr() const {
    return int_var__ecc_addr;
}
    
void cap_ppa_csr_sta_sw_phv_mem_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_sw_phv_mem_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_sw_phv_mem_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_sw_phv_mem_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_sw_phv_mem_t::ecc_detect(const cpp_int & _val) { 
    // ecc_detect
    int_var__ecc_detect = _val.convert_to< ecc_detect_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_mem_t::ecc_detect() const {
    return int_var__ecc_detect;
}
    
void cap_ppa_csr_cfg_sw_phv_mem_t::ecc_correct(const cpp_int & _val) { 
    // ecc_correct
    int_var__ecc_correct = _val.convert_to< ecc_correct_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_mem_t::ecc_correct() const {
    return int_var__ecc_correct;
}
    
void cap_ppa_csr_cfg_sw_phv_mem_t::ecc_bypass(const cpp_int & _val) { 
    // ecc_bypass
    int_var__ecc_bypass = _val.convert_to< ecc_bypass_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_mem_t::ecc_bypass() const {
    return int_var__ecc_bypass;
}
    
void cap_ppa_csr_cfg_sw_phv_mem_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_mem_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_sw_phv_state_t::done(const cpp_int & _val) { 
    // done
    int_var__done = _val.convert_to< done_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_sw_phv_state_t::done() const {
    return int_var__done;
}
    
void cap_ppa_csr_sta_sw_phv_state_t::current_insertion_period(const cpp_int & _val) { 
    // current_insertion_period
    int_var__current_insertion_period = _val.convert_to< current_insertion_period_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_sw_phv_state_t::current_insertion_period() const {
    return int_var__current_insertion_period;
}
    
void cap_ppa_csr_sta_sw_phv_state_t::current_counter(const cpp_int & _val) { 
    // current_counter
    int_var__current_counter = _val.convert_to< current_counter_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_sw_phv_state_t::current_counter() const {
    return int_var__current_counter;
}
    
void cap_ppa_csr_sta_sw_phv_state_t::current_flit(const cpp_int & _val) { 
    // current_flit
    int_var__current_flit = _val.convert_to< current_flit_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_sw_phv_state_t::current_flit() const {
    return int_var__current_flit;
}
    
void cap_ppa_csr_sta_sw_phv_state_t::current_qid(const cpp_int & _val) { 
    // current_qid
    int_var__current_qid = _val.convert_to< current_qid_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_sw_phv_state_t::current_qid() const {
    return int_var__current_qid;
}
    
void cap_ppa_csr_cfg_sw_phv_config_t::start_addr(const cpp_int & _val) { 
    // start_addr
    int_var__start_addr = _val.convert_to< start_addr_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_config_t::start_addr() const {
    return int_var__start_addr;
}
    
void cap_ppa_csr_cfg_sw_phv_config_t::num_flits(const cpp_int & _val) { 
    // num_flits
    int_var__num_flits = _val.convert_to< num_flits_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_config_t::num_flits() const {
    return int_var__num_flits;
}
    
void cap_ppa_csr_cfg_sw_phv_config_t::insertion_period_clocks(const cpp_int & _val) { 
    // insertion_period_clocks
    int_var__insertion_period_clocks = _val.convert_to< insertion_period_clocks_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_config_t::insertion_period_clocks() const {
    return int_var__insertion_period_clocks;
}
    
void cap_ppa_csr_cfg_sw_phv_config_t::counter_max(const cpp_int & _val) { 
    // counter_max
    int_var__counter_max = _val.convert_to< counter_max_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_config_t::counter_max() const {
    return int_var__counter_max;
}
    
void cap_ppa_csr_cfg_sw_phv_config_t::qid_min(const cpp_int & _val) { 
    // qid_min
    int_var__qid_min = _val.convert_to< qid_min_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_config_t::qid_min() const {
    return int_var__qid_min;
}
    
void cap_ppa_csr_cfg_sw_phv_config_t::qid_max(const cpp_int & _val) { 
    // qid_max
    int_var__qid_max = _val.convert_to< qid_max_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_config_t::qid_max() const {
    return int_var__qid_max;
}
    
void cap_ppa_csr_cfg_sw_phv_control_t::start_enable(const cpp_int & _val) { 
    // start_enable
    int_var__start_enable = _val.convert_to< start_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_control_t::start_enable() const {
    return int_var__start_enable;
}
    
void cap_ppa_csr_cfg_sw_phv_control_t::counter_repeat_enable(const cpp_int & _val) { 
    // counter_repeat_enable
    int_var__counter_repeat_enable = _val.convert_to< counter_repeat_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_control_t::counter_repeat_enable() const {
    return int_var__counter_repeat_enable;
}
    
void cap_ppa_csr_cfg_sw_phv_control_t::qid_repeat_enable(const cpp_int & _val) { 
    // qid_repeat_enable
    int_var__qid_repeat_enable = _val.convert_to< qid_repeat_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_control_t::qid_repeat_enable() const {
    return int_var__qid_repeat_enable;
}
    
void cap_ppa_csr_cfg_sw_phv_control_t::localtime_enable(const cpp_int & _val) { 
    // localtime_enable
    int_var__localtime_enable = _val.convert_to< localtime_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_control_t::localtime_enable() const {
    return int_var__localtime_enable;
}
    
void cap_ppa_csr_cfg_sw_phv_control_t::frame_size_enable(const cpp_int & _val) { 
    // frame_size_enable
    int_var__frame_size_enable = _val.convert_to< frame_size_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_control_t::frame_size_enable() const {
    return int_var__frame_size_enable;
}
    
void cap_ppa_csr_cfg_sw_phv_control_t::packet_len_enable(const cpp_int & _val) { 
    // packet_len_enable
    int_var__packet_len_enable = _val.convert_to< packet_len_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_control_t::packet_len_enable() const {
    return int_var__packet_len_enable;
}
    
void cap_ppa_csr_cfg_sw_phv_control_t::qid_enable(const cpp_int & _val) { 
    // qid_enable
    int_var__qid_enable = _val.convert_to< qid_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_control_t::qid_enable() const {
    return int_var__qid_enable;
}
    
void cap_ppa_csr_cfg_sw_phv_global_t::start_enable(const cpp_int & _val) { 
    // start_enable
    int_var__start_enable = _val.convert_to< start_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_global_t::start_enable() const {
    return int_var__start_enable;
}
    
void cap_ppa_csr_cfg_sw_phv_global_t::err_enable(const cpp_int & _val) { 
    // err_enable
    int_var__err_enable = _val.convert_to< err_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_sw_phv_global_t::err_enable() const {
    return int_var__err_enable;
}
    
void cap_ppa_csr_sta_pe9_phv_mem_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe9_phv_mem_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_pe9_phv_mem_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe9_phv_mem_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_pe9_phv_mem_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_pe9_phv_mem_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_pe8_phv_mem_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe8_phv_mem_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_pe8_phv_mem_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe8_phv_mem_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_pe8_phv_mem_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_pe8_phv_mem_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_pe7_phv_mem_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe7_phv_mem_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_pe7_phv_mem_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe7_phv_mem_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_pe7_phv_mem_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_pe7_phv_mem_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_pe6_phv_mem_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe6_phv_mem_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_pe6_phv_mem_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe6_phv_mem_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_pe6_phv_mem_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_pe6_phv_mem_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_pe5_phv_mem_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe5_phv_mem_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_pe5_phv_mem_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe5_phv_mem_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_pe5_phv_mem_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_pe5_phv_mem_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_pe4_phv_mem_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe4_phv_mem_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_pe4_phv_mem_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe4_phv_mem_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_pe4_phv_mem_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_pe4_phv_mem_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_pe3_phv_mem_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe3_phv_mem_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_pe3_phv_mem_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe3_phv_mem_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_pe3_phv_mem_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_pe3_phv_mem_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_pe2_phv_mem_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe2_phv_mem_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_pe2_phv_mem_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe2_phv_mem_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_pe2_phv_mem_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_pe2_phv_mem_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_pe1_phv_mem_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe1_phv_mem_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_pe1_phv_mem_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe1_phv_mem_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_pe1_phv_mem_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_pe1_phv_mem_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_pe0_phv_mem_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe0_phv_mem_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_pe0_phv_mem_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pe0_phv_mem_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_pe0_phv_mem_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_pe0_phv_mem_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_outq_ohi_mem_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_outq_ohi_mem_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_outq_ohi_mem_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_outq_ohi_mem_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_outq_ohi_mem_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_outq_ohi_mem_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_outq_phv_mem_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_outq_phv_mem_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_outq_phv_mem_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_outq_phv_mem_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_outq_phv_mem_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_outq_phv_mem_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_bndl1_inq_mem_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl1_inq_mem_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_bndl1_inq_mem_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl1_inq_mem_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_bndl1_inq_mem_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl1_inq_mem_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_bndl0_inq_mem_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl0_inq_mem_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_bndl0_inq_mem_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl0_inq_mem_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_bndl0_inq_mem_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl0_inq_mem_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_bndl1_state_lkp_sram_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl1_state_lkp_sram_t::correctable() const {
    return int_var__correctable;
}
    
void cap_ppa_csr_sta_bndl1_state_lkp_sram_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl1_state_lkp_sram_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_ppa_csr_sta_bndl1_state_lkp_sram_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl1_state_lkp_sram_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_ppa_csr_sta_bndl1_state_lkp_sram_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl1_state_lkp_sram_t::addr() const {
    return int_var__addr;
}
    
void cap_ppa_csr_sta_bndl1_state_lkp_sram_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl1_state_lkp_sram_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_bndl1_state_lkp_sram_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl1_state_lkp_sram_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::ecc_disable_det() const {
    return int_var__ecc_disable_det;
}
    
void cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor;
}
    
void cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::dhs_ecc_bypass(const cpp_int & _val) { 
    // dhs_ecc_bypass
    int_var__dhs_ecc_bypass = _val.convert_to< dhs_ecc_bypass_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::dhs_ecc_bypass() const {
    return int_var__dhs_ecc_bypass;
}
    
void cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_bndl0_state_lkp_sram_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl0_state_lkp_sram_t::correctable() const {
    return int_var__correctable;
}
    
void cap_ppa_csr_sta_bndl0_state_lkp_sram_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl0_state_lkp_sram_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_ppa_csr_sta_bndl0_state_lkp_sram_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl0_state_lkp_sram_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_ppa_csr_sta_bndl0_state_lkp_sram_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl0_state_lkp_sram_t::addr() const {
    return int_var__addr;
}
    
void cap_ppa_csr_sta_bndl0_state_lkp_sram_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl0_state_lkp_sram_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_bndl0_state_lkp_sram_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl0_state_lkp_sram_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::ecc_disable_det() const {
    return int_var__ecc_disable_det;
}
    
void cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor;
}
    
void cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::dhs_ecc_bypass(const cpp_int & _val) { 
    // dhs_ecc_bypass
    int_var__dhs_ecc_bypass = _val.convert_to< dhs_ecc_bypass_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::dhs_ecc_bypass() const {
    return int_var__dhs_ecc_bypass;
}
    
void cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_sta_pkt_mem_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pkt_mem_t::correctable() const {
    return int_var__correctable;
}
    
void cap_ppa_csr_sta_pkt_mem_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pkt_mem_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_ppa_csr_sta_pkt_mem_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pkt_mem_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_ppa_csr_sta_pkt_mem_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pkt_mem_t::addr() const {
    return int_var__addr;
}
    
void cap_ppa_csr_sta_pkt_mem_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pkt_mem_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_ppa_csr_sta_pkt_mem_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_pkt_mem_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_ppa_csr_cfg_pkt_mem_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_pkt_mem_t::ecc_disable_det() const {
    return int_var__ecc_disable_det;
}
    
void cap_ppa_csr_cfg_pkt_mem_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_pkt_mem_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor;
}
    
void cap_ppa_csr_cfg_pkt_mem_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_pkt_mem_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_ppa_csr_csr_intr_t::dowstream(const cpp_int & _val) { 
    // dowstream
    int_var__dowstream = _val.convert_to< dowstream_cpp_int_t >();
}

cpp_int cap_ppa_csr_csr_intr_t::dowstream() const {
    return int_var__dowstream;
}
    
void cap_ppa_csr_csr_intr_t::dowstream_enable(const cpp_int & _val) { 
    // dowstream_enable
    int_var__dowstream_enable = _val.convert_to< dowstream_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_csr_intr_t::dowstream_enable() const {
    return int_var__dowstream_enable;
}
    
void cap_ppa_csr_CNT_ppa_pe9_phv_out_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe9_phv_out_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe9_phv_out_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe9_phv_out_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe9_t::pkt_release(const cpp_int & _val) { 
    // pkt_release
    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe9_t::pkt_release() const {
    return int_var__pkt_release;
}
    
void cap_ppa_csr_CNT_ppa_pe9_t::ohi_out(const cpp_int & _val) { 
    // ohi_out
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe9_t::ohi_out() const {
    return int_var__ohi_out;
}
    
void cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe8_phv_out_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe8_phv_out_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe8_phv_out_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe8_phv_out_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe8_t::pkt_release(const cpp_int & _val) { 
    // pkt_release
    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe8_t::pkt_release() const {
    return int_var__pkt_release;
}
    
void cap_ppa_csr_CNT_ppa_pe8_t::ohi_out(const cpp_int & _val) { 
    // ohi_out
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe8_t::ohi_out() const {
    return int_var__ohi_out;
}
    
void cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe7_phv_out_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe7_phv_out_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe7_phv_out_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe7_phv_out_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe7_t::pkt_release(const cpp_int & _val) { 
    // pkt_release
    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe7_t::pkt_release() const {
    return int_var__pkt_release;
}
    
void cap_ppa_csr_CNT_ppa_pe7_t::ohi_out(const cpp_int & _val) { 
    // ohi_out
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe7_t::ohi_out() const {
    return int_var__ohi_out;
}
    
void cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe6_phv_out_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe6_phv_out_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe6_phv_out_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe6_phv_out_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe6_t::pkt_release(const cpp_int & _val) { 
    // pkt_release
    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe6_t::pkt_release() const {
    return int_var__pkt_release;
}
    
void cap_ppa_csr_CNT_ppa_pe6_t::ohi_out(const cpp_int & _val) { 
    // ohi_out
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe6_t::ohi_out() const {
    return int_var__ohi_out;
}
    
void cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe5_phv_out_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe5_phv_out_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe5_phv_out_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe5_phv_out_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe5_t::pkt_release(const cpp_int & _val) { 
    // pkt_release
    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe5_t::pkt_release() const {
    return int_var__pkt_release;
}
    
void cap_ppa_csr_CNT_ppa_pe5_t::ohi_out(const cpp_int & _val) { 
    // ohi_out
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe5_t::ohi_out() const {
    return int_var__ohi_out;
}
    
void cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe4_phv_out_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe4_phv_out_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe4_phv_out_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe4_phv_out_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe4_t::pkt_release(const cpp_int & _val) { 
    // pkt_release
    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe4_t::pkt_release() const {
    return int_var__pkt_release;
}
    
void cap_ppa_csr_CNT_ppa_pe4_t::ohi_out(const cpp_int & _val) { 
    // ohi_out
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe4_t::ohi_out() const {
    return int_var__ohi_out;
}
    
void cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe3_phv_out_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe3_phv_out_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe3_phv_out_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe3_phv_out_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe3_t::pkt_release(const cpp_int & _val) { 
    // pkt_release
    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe3_t::pkt_release() const {
    return int_var__pkt_release;
}
    
void cap_ppa_csr_CNT_ppa_pe3_t::ohi_out(const cpp_int & _val) { 
    // ohi_out
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe3_t::ohi_out() const {
    return int_var__ohi_out;
}
    
void cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe2_phv_out_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe2_phv_out_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe2_phv_out_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe2_phv_out_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe2_t::pkt_release(const cpp_int & _val) { 
    // pkt_release
    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe2_t::pkt_release() const {
    return int_var__pkt_release;
}
    
void cap_ppa_csr_CNT_ppa_pe2_t::ohi_out(const cpp_int & _val) { 
    // ohi_out
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe2_t::ohi_out() const {
    return int_var__ohi_out;
}
    
void cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe1_phv_out_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe1_phv_out_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe1_phv_out_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe1_phv_out_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe1_t::pkt_release(const cpp_int & _val) { 
    // pkt_release
    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe1_t::pkt_release() const {
    return int_var__pkt_release;
}
    
void cap_ppa_csr_CNT_ppa_pe1_t::ohi_out(const cpp_int & _val) { 
    // ohi_out
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe1_t::ohi_out() const {
    return int_var__ohi_out;
}
    
void cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe0_phv_out_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe0_phv_out_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe0_phv_out_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe0_phv_out_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pe0_t::pkt_release(const cpp_int & _val) { 
    // pkt_release
    int_var__pkt_release = _val.convert_to< pkt_release_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe0_t::pkt_release() const {
    return int_var__pkt_release;
}
    
void cap_ppa_csr_CNT_ppa_pe0_t::ohi_out(const cpp_int & _val) { 
    // ohi_out
    int_var__ohi_out = _val.convert_to< ohi_out_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe0_t::ohi_out() const {
    return int_var__ohi_out;
}
    
void cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_ohi_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_ohi_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_ohi_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_ohi_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_ohi_t::err(const cpp_int & _val) { 
    // err
    int_var__err = _val.convert_to< err_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_ohi_t::err() const {
    return int_var__err;
}
    
void cap_ppa_csr_CNT_ppa_ohi_t::sop_err(const cpp_int & _val) { 
    // sop_err
    int_var__sop_err = _val.convert_to< sop_err_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_ohi_t::sop_err() const {
    return int_var__sop_err;
}
    
void cap_ppa_csr_CNT_ppa_ohi_t::eop_err(const cpp_int & _val) { 
    // eop_err
    int_var__eop_err = _val.convert_to< eop_err_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_ohi_t::eop_err() const {
    return int_var__eop_err;
}
    
void cap_ppa_csr_CNT_ppa_sw_phv_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_sw_phv_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_sw_phv_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_sw_phv_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_sw_phv_t::err(const cpp_int & _val) { 
    // err
    int_var__err = _val.convert_to< err_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_sw_phv_t::err() const {
    return int_var__err;
}
    
void cap_ppa_csr_CNT_ppa_sw_phv_t::sop_err(const cpp_int & _val) { 
    // sop_err
    int_var__sop_err = _val.convert_to< sop_err_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_sw_phv_t::sop_err() const {
    return int_var__sop_err;
}
    
void cap_ppa_csr_CNT_ppa_sw_phv_t::eop_err(const cpp_int & _val) { 
    // eop_err
    int_var__eop_err = _val.convert_to< eop_err_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_sw_phv_t::eop_err() const {
    return int_var__eop_err;
}
    
void cap_ppa_csr_CNT_ppa_ma_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_ma_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_ma_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_ma_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_ma_t::err(const cpp_int & _val) { 
    // err
    int_var__err = _val.convert_to< err_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_ma_t::err() const {
    return int_var__err;
}
    
void cap_ppa_csr_CNT_ppa_ma_t::sop_err(const cpp_int & _val) { 
    // sop_err
    int_var__sop_err = _val.convert_to< sop_err_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_ma_t::sop_err() const {
    return int_var__sop_err;
}
    
void cap_ppa_csr_CNT_ppa_ma_t::eop_err(const cpp_int & _val) { 
    // eop_err
    int_var__eop_err = _val.convert_to< eop_err_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_ma_t::eop_err() const {
    return int_var__eop_err;
}
    
void cap_ppa_csr_CNT_ppa_dp_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_dp_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_dp_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_dp_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_dp_t::err(const cpp_int & _val) { 
    // err
    int_var__err = _val.convert_to< err_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_dp_t::err() const {
    return int_var__err;
}
    
void cap_ppa_csr_CNT_ppa_dp_t::sop_err(const cpp_int & _val) { 
    // sop_err
    int_var__sop_err = _val.convert_to< sop_err_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_dp_t::sop_err() const {
    return int_var__sop_err;
}
    
void cap_ppa_csr_CNT_ppa_dp_t::eop_err(const cpp_int & _val) { 
    // eop_err
    int_var__eop_err = _val.convert_to< eop_err_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_dp_t::eop_err() const {
    return int_var__eop_err;
}
    
void cap_ppa_csr_CNT_ppa_pb_t::sop(const cpp_int & _val) { 
    // sop
    int_var__sop = _val.convert_to< sop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pb_t::sop() const {
    return int_var__sop;
}
    
void cap_ppa_csr_CNT_ppa_pb_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pb_t::eop() const {
    return int_var__eop;
}
    
void cap_ppa_csr_CNT_ppa_pb_t::err(const cpp_int & _val) { 
    // err
    int_var__err = _val.convert_to< err_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pb_t::err() const {
    return int_var__err;
}
    
void cap_ppa_csr_CNT_ppa_pb_t::sop_err(const cpp_int & _val) { 
    // sop_err
    int_var__sop_err = _val.convert_to< sop_err_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pb_t::sop_err() const {
    return int_var__sop_err;
}
    
void cap_ppa_csr_CNT_ppa_pb_t::eop_err(const cpp_int & _val) { 
    // eop_err
    int_var__eop_err = _val.convert_to< eop_err_cpp_int_t >();
}

cpp_int cap_ppa_csr_CNT_ppa_pb_t::eop_err() const {
    return int_var__eop_err;
}
    
void cap_ppa_csr_cfg_align_chk_profile_t::addsub_start(const cpp_int & _val) { 
    // addsub_start
    int_var__addsub_start = _val.convert_to< addsub_start_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_align_chk_profile_t::addsub_start() const {
    return int_var__addsub_start;
}
    
void cap_ppa_csr_cfg_align_chk_profile_t::start_adj(const cpp_int & _val) { 
    // start_adj
    int_var__start_adj = _val.convert_to< start_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_align_chk_profile_t::start_adj() const {
    return int_var__start_adj;
}
    
void cap_ppa_csr_cfg_align_chk_profile_t::mod_log2(const cpp_int & _val) { 
    // mod_log2
    int_var__mod_log2 = _val.convert_to< mod_log2_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_align_chk_profile_t::mod_log2() const {
    return int_var__mod_log2;
}
    
void cap_ppa_csr_cfg_len_chk_profile_t::len_mask(const cpp_int & _val) { 
    // len_mask
    int_var__len_mask = _val.convert_to< len_mask_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_len_chk_profile_t::len_mask() const {
    return int_var__len_mask;
}
    
void cap_ppa_csr_cfg_len_chk_profile_t::len_shift_left(const cpp_int & _val) { 
    // len_shift_left
    int_var__len_shift_left = _val.convert_to< len_shift_left_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_len_chk_profile_t::len_shift_left() const {
    return int_var__len_shift_left;
}
    
void cap_ppa_csr_cfg_len_chk_profile_t::len_shift_val(const cpp_int & _val) { 
    // len_shift_val
    int_var__len_shift_val = _val.convert_to< len_shift_val_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_len_chk_profile_t::len_shift_val() const {
    return int_var__len_shift_val;
}
    
void cap_ppa_csr_cfg_len_chk_profile_t::addsub_start(const cpp_int & _val) { 
    // addsub_start
    int_var__addsub_start = _val.convert_to< addsub_start_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_len_chk_profile_t::addsub_start() const {
    return int_var__addsub_start;
}
    
void cap_ppa_csr_cfg_len_chk_profile_t::start_adj(const cpp_int & _val) { 
    // start_adj
    int_var__start_adj = _val.convert_to< start_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_len_chk_profile_t::start_adj() const {
    return int_var__start_adj;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld0_fld_en(const cpp_int & _val) { 
    // fld0_fld_en
    int_var__fld0_fld_en = _val.convert_to< fld0_fld_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld0_fld_en() const {
    return int_var__fld0_fld_en;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld0_fld_align(const cpp_int & _val) { 
    // fld0_fld_align
    int_var__fld0_fld_align = _val.convert_to< fld0_fld_align_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld0_fld_align() const {
    return int_var__fld0_fld_align;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld0_fld_start(const cpp_int & _val) { 
    // fld0_fld_start
    int_var__fld0_fld_start = _val.convert_to< fld0_fld_start_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld0_fld_start() const {
    return int_var__fld0_fld_start;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld0_fld_end(const cpp_int & _val) { 
    // fld0_fld_end
    int_var__fld0_fld_end = _val.convert_to< fld0_fld_end_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld0_fld_end() const {
    return int_var__fld0_fld_end;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld0_add_len(const cpp_int & _val) { 
    // fld0_add_len
    int_var__fld0_add_len = _val.convert_to< fld0_add_len_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld0_add_len() const {
    return int_var__fld0_add_len;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld1_fld_en(const cpp_int & _val) { 
    // fld1_fld_en
    int_var__fld1_fld_en = _val.convert_to< fld1_fld_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld1_fld_en() const {
    return int_var__fld1_fld_en;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld1_fld_align(const cpp_int & _val) { 
    // fld1_fld_align
    int_var__fld1_fld_align = _val.convert_to< fld1_fld_align_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld1_fld_align() const {
    return int_var__fld1_fld_align;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld1_fld_start(const cpp_int & _val) { 
    // fld1_fld_start
    int_var__fld1_fld_start = _val.convert_to< fld1_fld_start_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld1_fld_start() const {
    return int_var__fld1_fld_start;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld1_fld_end(const cpp_int & _val) { 
    // fld1_fld_end
    int_var__fld1_fld_end = _val.convert_to< fld1_fld_end_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld1_fld_end() const {
    return int_var__fld1_fld_end;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld1_add_len(const cpp_int & _val) { 
    // fld1_add_len
    int_var__fld1_add_len = _val.convert_to< fld1_add_len_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld1_add_len() const {
    return int_var__fld1_add_len;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld2_fld_en(const cpp_int & _val) { 
    // fld2_fld_en
    int_var__fld2_fld_en = _val.convert_to< fld2_fld_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld2_fld_en() const {
    return int_var__fld2_fld_en;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld2_fld_align(const cpp_int & _val) { 
    // fld2_fld_align
    int_var__fld2_fld_align = _val.convert_to< fld2_fld_align_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld2_fld_align() const {
    return int_var__fld2_fld_align;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld2_fld_start(const cpp_int & _val) { 
    // fld2_fld_start
    int_var__fld2_fld_start = _val.convert_to< fld2_fld_start_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld2_fld_start() const {
    return int_var__fld2_fld_start;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld2_fld_end(const cpp_int & _val) { 
    // fld2_fld_end
    int_var__fld2_fld_end = _val.convert_to< fld2_fld_end_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld2_fld_end() const {
    return int_var__fld2_fld_end;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld2_add_len(const cpp_int & _val) { 
    // fld2_add_len
    int_var__fld2_add_len = _val.convert_to< fld2_add_len_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld2_add_len() const {
    return int_var__fld2_add_len;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld3_fld_en(const cpp_int & _val) { 
    // fld3_fld_en
    int_var__fld3_fld_en = _val.convert_to< fld3_fld_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld3_fld_en() const {
    return int_var__fld3_fld_en;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld3_fld_align(const cpp_int & _val) { 
    // fld3_fld_align
    int_var__fld3_fld_align = _val.convert_to< fld3_fld_align_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld3_fld_align() const {
    return int_var__fld3_fld_align;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld3_fld_start(const cpp_int & _val) { 
    // fld3_fld_start
    int_var__fld3_fld_start = _val.convert_to< fld3_fld_start_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld3_fld_start() const {
    return int_var__fld3_fld_start;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld3_fld_end(const cpp_int & _val) { 
    // fld3_fld_end
    int_var__fld3_fld_end = _val.convert_to< fld3_fld_end_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld3_fld_end() const {
    return int_var__fld3_fld_end;
}
    
void cap_ppa_csr_cfg_csum_phdr_profile_t::fld3_add_len(const cpp_int & _val) { 
    // fld3_add_len
    int_var__fld3_add_len = _val.convert_to< fld3_add_len_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_phdr_profile_t::fld3_add_len() const {
    return int_var__fld3_add_len;
}
    
void cap_ppa_csr_cfg_csum_profile_t::csum_loc_use_phdr_ohi(const cpp_int & _val) { 
    // csum_loc_use_phdr_ohi
    int_var__csum_loc_use_phdr_ohi = _val.convert_to< csum_loc_use_phdr_ohi_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::csum_loc_use_phdr_ohi() const {
    return int_var__csum_loc_use_phdr_ohi;
}
    
void cap_ppa_csr_cfg_csum_profile_t::csum_8b(const cpp_int & _val) { 
    // csum_8b
    int_var__csum_8b = _val.convert_to< csum_8b_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::csum_8b() const {
    return int_var__csum_8b;
}
    
void cap_ppa_csr_cfg_csum_profile_t::phv_csum_flit_num(const cpp_int & _val) { 
    // phv_csum_flit_num
    int_var__phv_csum_flit_num = _val.convert_to< phv_csum_flit_num_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::phv_csum_flit_num() const {
    return int_var__phv_csum_flit_num;
}
    
void cap_ppa_csr_cfg_csum_profile_t::end_eop(const cpp_int & _val) { 
    // end_eop
    int_var__end_eop = _val.convert_to< end_eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::end_eop() const {
    return int_var__end_eop;
}
    
void cap_ppa_csr_cfg_csum_profile_t::len_mask(const cpp_int & _val) { 
    // len_mask
    int_var__len_mask = _val.convert_to< len_mask_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::len_mask() const {
    return int_var__len_mask;
}
    
void cap_ppa_csr_cfg_csum_profile_t::len_shift_left(const cpp_int & _val) { 
    // len_shift_left
    int_var__len_shift_left = _val.convert_to< len_shift_left_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::len_shift_left() const {
    return int_var__len_shift_left;
}
    
void cap_ppa_csr_cfg_csum_profile_t::len_shift_val(const cpp_int & _val) { 
    // len_shift_val
    int_var__len_shift_val = _val.convert_to< len_shift_val_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::len_shift_val() const {
    return int_var__len_shift_val;
}
    
void cap_ppa_csr_cfg_csum_profile_t::addsub_start(const cpp_int & _val) { 
    // addsub_start
    int_var__addsub_start = _val.convert_to< addsub_start_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::addsub_start() const {
    return int_var__addsub_start;
}
    
void cap_ppa_csr_cfg_csum_profile_t::start_adj(const cpp_int & _val) { 
    // start_adj
    int_var__start_adj = _val.convert_to< start_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::start_adj() const {
    return int_var__start_adj;
}
    
void cap_ppa_csr_cfg_csum_profile_t::addsub_end(const cpp_int & _val) { 
    // addsub_end
    int_var__addsub_end = _val.convert_to< addsub_end_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::addsub_end() const {
    return int_var__addsub_end;
}
    
void cap_ppa_csr_cfg_csum_profile_t::end_adj(const cpp_int & _val) { 
    // end_adj
    int_var__end_adj = _val.convert_to< end_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::end_adj() const {
    return int_var__end_adj;
}
    
void cap_ppa_csr_cfg_csum_profile_t::addsub_phdr(const cpp_int & _val) { 
    // addsub_phdr
    int_var__addsub_phdr = _val.convert_to< addsub_phdr_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::addsub_phdr() const {
    return int_var__addsub_phdr;
}
    
void cap_ppa_csr_cfg_csum_profile_t::phdr_adj(const cpp_int & _val) { 
    // phdr_adj
    int_var__phdr_adj = _val.convert_to< phdr_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::phdr_adj() const {
    return int_var__phdr_adj;
}
    
void cap_ppa_csr_cfg_csum_profile_t::addsub_csum_loc(const cpp_int & _val) { 
    // addsub_csum_loc
    int_var__addsub_csum_loc = _val.convert_to< addsub_csum_loc_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::addsub_csum_loc() const {
    return int_var__addsub_csum_loc;
}
    
void cap_ppa_csr_cfg_csum_profile_t::csum_loc_adj(const cpp_int & _val) { 
    // csum_loc_adj
    int_var__csum_loc_adj = _val.convert_to< csum_loc_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::csum_loc_adj() const {
    return int_var__csum_loc_adj;
}
    
void cap_ppa_csr_cfg_csum_profile_t::align(const cpp_int & _val) { 
    // align
    int_var__align = _val.convert_to< align_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::align() const {
    return int_var__align;
}
    
void cap_ppa_csr_cfg_csum_profile_t::add_val(const cpp_int & _val) { 
    // add_val
    int_var__add_val = _val.convert_to< add_val_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_csum_profile_t::add_val() const {
    return int_var__add_val;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld0_mask_en(const cpp_int & _val) { 
    // fld0_mask_en
    int_var__fld0_mask_en = _val.convert_to< fld0_mask_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld0_mask_en() const {
    return int_var__fld0_mask_en;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld0_use_ohi(const cpp_int & _val) { 
    // fld0_use_ohi
    int_var__fld0_use_ohi = _val.convert_to< fld0_use_ohi_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld0_use_ohi() const {
    return int_var__fld0_use_ohi;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld0_start_adj(const cpp_int & _val) { 
    // fld0_start_adj
    int_var__fld0_start_adj = _val.convert_to< fld0_start_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld0_start_adj() const {
    return int_var__fld0_start_adj;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld0_end_adj(const cpp_int & _val) { 
    // fld0_end_adj
    int_var__fld0_end_adj = _val.convert_to< fld0_end_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld0_end_adj() const {
    return int_var__fld0_end_adj;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld0_fill(const cpp_int & _val) { 
    // fld0_fill
    int_var__fld0_fill = _val.convert_to< fld0_fill_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld0_fill() const {
    return int_var__fld0_fill;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld0_skip_first_nibble(const cpp_int & _val) { 
    // fld0_skip_first_nibble
    int_var__fld0_skip_first_nibble = _val.convert_to< fld0_skip_first_nibble_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld0_skip_first_nibble() const {
    return int_var__fld0_skip_first_nibble;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld1_mask_en(const cpp_int & _val) { 
    // fld1_mask_en
    int_var__fld1_mask_en = _val.convert_to< fld1_mask_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld1_mask_en() const {
    return int_var__fld1_mask_en;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld1_use_ohi(const cpp_int & _val) { 
    // fld1_use_ohi
    int_var__fld1_use_ohi = _val.convert_to< fld1_use_ohi_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld1_use_ohi() const {
    return int_var__fld1_use_ohi;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld1_start_adj(const cpp_int & _val) { 
    // fld1_start_adj
    int_var__fld1_start_adj = _val.convert_to< fld1_start_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld1_start_adj() const {
    return int_var__fld1_start_adj;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld1_end_adj(const cpp_int & _val) { 
    // fld1_end_adj
    int_var__fld1_end_adj = _val.convert_to< fld1_end_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld1_end_adj() const {
    return int_var__fld1_end_adj;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld1_fill(const cpp_int & _val) { 
    // fld1_fill
    int_var__fld1_fill = _val.convert_to< fld1_fill_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld1_fill() const {
    return int_var__fld1_fill;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld1_skip_first_nibble(const cpp_int & _val) { 
    // fld1_skip_first_nibble
    int_var__fld1_skip_first_nibble = _val.convert_to< fld1_skip_first_nibble_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld1_skip_first_nibble() const {
    return int_var__fld1_skip_first_nibble;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld2_mask_en(const cpp_int & _val) { 
    // fld2_mask_en
    int_var__fld2_mask_en = _val.convert_to< fld2_mask_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld2_mask_en() const {
    return int_var__fld2_mask_en;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld2_use_ohi(const cpp_int & _val) { 
    // fld2_use_ohi
    int_var__fld2_use_ohi = _val.convert_to< fld2_use_ohi_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld2_use_ohi() const {
    return int_var__fld2_use_ohi;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld2_start_adj(const cpp_int & _val) { 
    // fld2_start_adj
    int_var__fld2_start_adj = _val.convert_to< fld2_start_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld2_start_adj() const {
    return int_var__fld2_start_adj;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld2_end_adj(const cpp_int & _val) { 
    // fld2_end_adj
    int_var__fld2_end_adj = _val.convert_to< fld2_end_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld2_end_adj() const {
    return int_var__fld2_end_adj;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld2_fill(const cpp_int & _val) { 
    // fld2_fill
    int_var__fld2_fill = _val.convert_to< fld2_fill_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld2_fill() const {
    return int_var__fld2_fill;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld2_skip_first_nibble(const cpp_int & _val) { 
    // fld2_skip_first_nibble
    int_var__fld2_skip_first_nibble = _val.convert_to< fld2_skip_first_nibble_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld2_skip_first_nibble() const {
    return int_var__fld2_skip_first_nibble;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld3_mask_en(const cpp_int & _val) { 
    // fld3_mask_en
    int_var__fld3_mask_en = _val.convert_to< fld3_mask_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld3_mask_en() const {
    return int_var__fld3_mask_en;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld3_use_ohi(const cpp_int & _val) { 
    // fld3_use_ohi
    int_var__fld3_use_ohi = _val.convert_to< fld3_use_ohi_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld3_use_ohi() const {
    return int_var__fld3_use_ohi;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld3_start_adj(const cpp_int & _val) { 
    // fld3_start_adj
    int_var__fld3_start_adj = _val.convert_to< fld3_start_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld3_start_adj() const {
    return int_var__fld3_start_adj;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld3_end_adj(const cpp_int & _val) { 
    // fld3_end_adj
    int_var__fld3_end_adj = _val.convert_to< fld3_end_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld3_end_adj() const {
    return int_var__fld3_end_adj;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld3_fill(const cpp_int & _val) { 
    // fld3_fill
    int_var__fld3_fill = _val.convert_to< fld3_fill_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld3_fill() const {
    return int_var__fld3_fill;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld3_skip_first_nibble(const cpp_int & _val) { 
    // fld3_skip_first_nibble
    int_var__fld3_skip_first_nibble = _val.convert_to< fld3_skip_first_nibble_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld3_skip_first_nibble() const {
    return int_var__fld3_skip_first_nibble;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld4_mask_en(const cpp_int & _val) { 
    // fld4_mask_en
    int_var__fld4_mask_en = _val.convert_to< fld4_mask_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld4_mask_en() const {
    return int_var__fld4_mask_en;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld4_use_ohi(const cpp_int & _val) { 
    // fld4_use_ohi
    int_var__fld4_use_ohi = _val.convert_to< fld4_use_ohi_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld4_use_ohi() const {
    return int_var__fld4_use_ohi;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld4_start_adj(const cpp_int & _val) { 
    // fld4_start_adj
    int_var__fld4_start_adj = _val.convert_to< fld4_start_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld4_start_adj() const {
    return int_var__fld4_start_adj;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld4_end_adj(const cpp_int & _val) { 
    // fld4_end_adj
    int_var__fld4_end_adj = _val.convert_to< fld4_end_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld4_end_adj() const {
    return int_var__fld4_end_adj;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld4_fill(const cpp_int & _val) { 
    // fld4_fill
    int_var__fld4_fill = _val.convert_to< fld4_fill_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld4_fill() const {
    return int_var__fld4_fill;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld4_skip_first_nibble(const cpp_int & _val) { 
    // fld4_skip_first_nibble
    int_var__fld4_skip_first_nibble = _val.convert_to< fld4_skip_first_nibble_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld4_skip_first_nibble() const {
    return int_var__fld4_skip_first_nibble;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld5_mask_en(const cpp_int & _val) { 
    // fld5_mask_en
    int_var__fld5_mask_en = _val.convert_to< fld5_mask_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld5_mask_en() const {
    return int_var__fld5_mask_en;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld5_use_ohi(const cpp_int & _val) { 
    // fld5_use_ohi
    int_var__fld5_use_ohi = _val.convert_to< fld5_use_ohi_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld5_use_ohi() const {
    return int_var__fld5_use_ohi;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld5_start_adj(const cpp_int & _val) { 
    // fld5_start_adj
    int_var__fld5_start_adj = _val.convert_to< fld5_start_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld5_start_adj() const {
    return int_var__fld5_start_adj;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld5_end_adj(const cpp_int & _val) { 
    // fld5_end_adj
    int_var__fld5_end_adj = _val.convert_to< fld5_end_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld5_end_adj() const {
    return int_var__fld5_end_adj;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld5_fill(const cpp_int & _val) { 
    // fld5_fill
    int_var__fld5_fill = _val.convert_to< fld5_fill_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld5_fill() const {
    return int_var__fld5_fill;
}
    
void cap_ppa_csr_cfg_crc_mask_profile_t::fld5_skip_first_nibble(const cpp_int & _val) { 
    // fld5_skip_first_nibble
    int_var__fld5_skip_first_nibble = _val.convert_to< fld5_skip_first_nibble_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_mask_profile_t::fld5_skip_first_nibble() const {
    return int_var__fld5_skip_first_nibble;
}
    
void cap_ppa_csr_cfg_crc_profile_t::len_mask(const cpp_int & _val) { 
    // len_mask
    int_var__len_mask = _val.convert_to< len_mask_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_profile_t::len_mask() const {
    return int_var__len_mask;
}
    
void cap_ppa_csr_cfg_crc_profile_t::len_shift_left(const cpp_int & _val) { 
    // len_shift_left
    int_var__len_shift_left = _val.convert_to< len_shift_left_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_profile_t::len_shift_left() const {
    return int_var__len_shift_left;
}
    
void cap_ppa_csr_cfg_crc_profile_t::len_shift_val(const cpp_int & _val) { 
    // len_shift_val
    int_var__len_shift_val = _val.convert_to< len_shift_val_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_profile_t::len_shift_val() const {
    return int_var__len_shift_val;
}
    
void cap_ppa_csr_cfg_crc_profile_t::addsub_start(const cpp_int & _val) { 
    // addsub_start
    int_var__addsub_start = _val.convert_to< addsub_start_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_profile_t::addsub_start() const {
    return int_var__addsub_start;
}
    
void cap_ppa_csr_cfg_crc_profile_t::start_adj(const cpp_int & _val) { 
    // start_adj
    int_var__start_adj = _val.convert_to< start_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_profile_t::start_adj() const {
    return int_var__start_adj;
}
    
void cap_ppa_csr_cfg_crc_profile_t::addsub_end(const cpp_int & _val) { 
    // addsub_end
    int_var__addsub_end = _val.convert_to< addsub_end_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_profile_t::addsub_end() const {
    return int_var__addsub_end;
}
    
void cap_ppa_csr_cfg_crc_profile_t::end_adj(const cpp_int & _val) { 
    // end_adj
    int_var__end_adj = _val.convert_to< end_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_profile_t::end_adj() const {
    return int_var__end_adj;
}
    
void cap_ppa_csr_cfg_crc_profile_t::addsub_mask(const cpp_int & _val) { 
    // addsub_mask
    int_var__addsub_mask = _val.convert_to< addsub_mask_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_profile_t::addsub_mask() const {
    return int_var__addsub_mask;
}
    
void cap_ppa_csr_cfg_crc_profile_t::mask_adj(const cpp_int & _val) { 
    // mask_adj
    int_var__mask_adj = _val.convert_to< mask_adj_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_profile_t::mask_adj() const {
    return int_var__mask_adj;
}
    
void cap_ppa_csr_cfg_crc_profile_t::end_eop(const cpp_int & _val) { 
    // end_eop
    int_var__end_eop = _val.convert_to< end_eop_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_profile_t::end_eop() const {
    return int_var__end_eop;
}
    
void cap_ppa_csr_cfg_crc_profile_t::mask_prof_sel(const cpp_int & _val) { 
    // mask_prof_sel
    int_var__mask_prof_sel = _val.convert_to< mask_prof_sel_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_crc_profile_t::mask_prof_sel() const {
    return int_var__mask_prof_sel;
}
    
void cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::hit(const cpp_int & _val) { 
    // hit
    int_var__hit = _val.convert_to< hit_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::hit() const {
    return int_var__hit;
}
    
void cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::hit_addr(const cpp_int & _val) { 
    // hit_addr
    int_var__hit_addr = _val.convert_to< hit_addr_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::hit_addr() const {
    return int_var__hit_addr;
}
    
void cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::key(const cpp_int & _val) { 
    // key
    int_var__key = _val.convert_to< key_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::key() const {
    return int_var__key;
}
    
void cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::mask(const cpp_int & _val) { 
    // mask
    int_var__mask = _val.convert_to< mask_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::mask() const {
    return int_var__mask;
}
    
void cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t::vld(const cpp_int & _val) { 
    // vld
    int_var__vld = _val.convert_to< vld_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t::vld() const {
    return int_var__vld;
}
    
void cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::hit(const cpp_int & _val) { 
    // hit
    int_var__hit = _val.convert_to< hit_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::hit() const {
    return int_var__hit;
}
    
void cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::hit_addr(const cpp_int & _val) { 
    // hit_addr
    int_var__hit_addr = _val.convert_to< hit_addr_cpp_int_t >();
}

cpp_int cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::hit_addr() const {
    return int_var__hit_addr;
}
    
void cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::key(const cpp_int & _val) { 
    // key
    int_var__key = _val.convert_to< key_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::key() const {
    return int_var__key;
}
    
void cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::mask(const cpp_int & _val) { 
    // mask
    int_var__mask = _val.convert_to< mask_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::mask() const {
    return int_var__mask;
}
    
void cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t::vld(const cpp_int & _val) { 
    // vld
    int_var__vld = _val.convert_to< vld_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t::vld() const {
    return int_var__vld;
}
    
void cap_ppa_csr_cfg_init_profile_t::curr_offset(const cpp_int & _val) { 
    // curr_offset
    int_var__curr_offset = _val.convert_to< curr_offset_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_init_profile_t::curr_offset() const {
    return int_var__curr_offset;
}
    
void cap_ppa_csr_cfg_init_profile_t::state(const cpp_int & _val) { 
    // state
    int_var__state = _val.convert_to< state_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_init_profile_t::state() const {
    return int_var__state;
}
    
void cap_ppa_csr_cfg_init_profile_t::lkp_val_pkt_idx0(const cpp_int & _val) { 
    // lkp_val_pkt_idx0
    int_var__lkp_val_pkt_idx0 = _val.convert_to< lkp_val_pkt_idx0_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_init_profile_t::lkp_val_pkt_idx0() const {
    return int_var__lkp_val_pkt_idx0;
}
    
void cap_ppa_csr_cfg_init_profile_t::lkp_val_pkt_idx1(const cpp_int & _val) { 
    // lkp_val_pkt_idx1
    int_var__lkp_val_pkt_idx1 = _val.convert_to< lkp_val_pkt_idx1_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_init_profile_t::lkp_val_pkt_idx1() const {
    return int_var__lkp_val_pkt_idx1;
}
    
void cap_ppa_csr_cfg_init_profile_t::lkp_val_pkt_idx2(const cpp_int & _val) { 
    // lkp_val_pkt_idx2
    int_var__lkp_val_pkt_idx2 = _val.convert_to< lkp_val_pkt_idx2_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_init_profile_t::lkp_val_pkt_idx2() const {
    return int_var__lkp_val_pkt_idx2;
}
    
void cap_ppa_csr_cfg_ctrl_thresh_t::outphv_ff(const cpp_int & _val) { 
    // outphv_ff
    int_var__outphv_ff = _val.convert_to< outphv_ff_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_ctrl_thresh_t::outphv_ff() const {
    return int_var__outphv_ff;
}
    
void cap_ppa_csr_cfg_ctrl_thresh_t::phv_ff(const cpp_int & _val) { 
    // phv_ff
    int_var__phv_ff = _val.convert_to< phv_ff_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_ctrl_thresh_t::phv_ff() const {
    return int_var__phv_ff;
}
    
void cap_ppa_csr_cfg_ctrl_thresh_t::chk_ff(const cpp_int & _val) { 
    // chk_ff
    int_var__chk_ff = _val.convert_to< chk_ff_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_ctrl_thresh_t::chk_ff() const {
    return int_var__chk_ff;
}
    
void cap_ppa_csr_cfg_ctrl_t::pe_enable(const cpp_int & _val) { 
    // pe_enable
    int_var__pe_enable = _val.convert_to< pe_enable_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_ctrl_t::pe_enable() const {
    return int_var__pe_enable;
}
    
void cap_ppa_csr_cfg_ctrl_t::parse_loop_cnt(const cpp_int & _val) { 
    // parse_loop_cnt
    int_var__parse_loop_cnt = _val.convert_to< parse_loop_cnt_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_ctrl_t::parse_loop_cnt() const {
    return int_var__parse_loop_cnt;
}
    
void cap_ppa_csr_cfg_ctrl_t::num_phv_flit(const cpp_int & _val) { 
    // num_phv_flit
    int_var__num_phv_flit = _val.convert_to< num_phv_flit_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_ctrl_t::num_phv_flit() const {
    return int_var__num_phv_flit;
}
    
void cap_ppa_csr_cfg_ctrl_t::state_lkp_catchall_entry(const cpp_int & _val) { 
    // state_lkp_catchall_entry
    int_var__state_lkp_catchall_entry = _val.convert_to< state_lkp_catchall_entry_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_ctrl_t::state_lkp_catchall_entry() const {
    return int_var__state_lkp_catchall_entry;
}
    
void cap_ppa_csr_cfg_ctrl_t::phv_set_hw_err_en(const cpp_int & _val) { 
    // phv_set_hw_err_en
    int_var__phv_set_hw_err_en = _val.convert_to< phv_set_hw_err_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_ctrl_t::phv_set_hw_err_en() const {
    return int_var__phv_set_hw_err_en;
}
    
void cap_ppa_csr_cfg_ctrl_t::phv_set_parser_err_en(const cpp_int & _val) { 
    // phv_set_parser_err_en
    int_var__phv_set_parser_err_en = _val.convert_to< phv_set_parser_err_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_ctrl_t::phv_set_parser_err_en() const {
    return int_var__phv_set_parser_err_en;
}
    
void cap_ppa_csr_cfg_ctrl_t::gso_csum_en(const cpp_int & _val) { 
    // gso_csum_en
    int_var__gso_csum_en = _val.convert_to< gso_csum_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_ctrl_t::gso_csum_en() const {
    return int_var__gso_csum_en;
}
    
void cap_ppa_csr_cfg_ctrl_t::pe_err_vec_en(const cpp_int & _val) { 
    // pe_err_vec_en
    int_var__pe_err_vec_en = _val.convert_to< pe_err_vec_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_ctrl_t::pe_err_vec_en() const {
    return int_var__pe_err_vec_en;
}
    
void cap_ppa_csr_cfg_ctrl_t::end_offset_en(const cpp_int & _val) { 
    // end_offset_en
    int_var__end_offset_en = _val.convert_to< end_offset_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_ctrl_t::end_offset_en() const {
    return int_var__end_offset_en;
}
    
void cap_ppa_csr_cfg_ctrl_t::end_offset_flit_num(const cpp_int & _val) { 
    // end_offset_flit_num
    int_var__end_offset_flit_num = _val.convert_to< end_offset_flit_num_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_ctrl_t::end_offset_flit_num() const {
    return int_var__end_offset_flit_num;
}
    
void cap_ppa_csr_cfg_ctrl_t::tcam_key_ctl(const cpp_int & _val) { 
    // tcam_key_ctl
    int_var__tcam_key_ctl = _val.convert_to< tcam_key_ctl_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_ctrl_t::tcam_key_ctl() const {
    return int_var__tcam_key_ctl;
}
    
void cap_ppa_csr_cfg_ctrl_t::crc_start_offset_err_en(const cpp_int & _val) { 
    // crc_start_offset_err_en
    int_var__crc_start_offset_err_en = _val.convert_to< crc_start_offset_err_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_ctrl_t::crc_start_offset_err_en() const {
    return int_var__crc_start_offset_err_en;
}
    
void cap_ppa_csr_cfg_ctrl_t::csum_start_offset_err_en(const cpp_int & _val) { 
    // csum_start_offset_err_en
    int_var__csum_start_offset_err_en = _val.convert_to< csum_start_offset_err_en_cpp_int_t >();
}

cpp_int cap_ppa_csr_cfg_ctrl_t::csum_start_offset_err_en() const {
    return int_var__csum_start_offset_err_en;
}
    
void cap_ppa_csr_rdintr_t::ireg(const cpp_int & _val) { 
    // ireg
    int_var__ireg = _val.convert_to< ireg_cpp_int_t >();
}

cpp_int cap_ppa_csr_rdintr_t::ireg() const {
    return int_var__ireg;
}
    
void cap_ppa_csr_base_t::scratch_reg(const cpp_int & _val) { 
    // scratch_reg
    int_var__scratch_reg = _val.convert_to< scratch_reg_cpp_int_t >();
}

cpp_int cap_ppa_csr_base_t::scratch_reg() const {
    return int_var__scratch_reg;
}
    
#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecc_uncorrectable_enable")) { field_val = ecc_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_correctable_enable")) { field_val = ecc_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_invalid_sram_enable")) { field_val = phv_invalid_sram_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_invalid_data_enable")) { field_val = phv_invalid_data_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done0_enable")) { field_val = phv_done0_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done1_enable")) { field_val = phv_done1_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done2_enable")) { field_val = phv_done2_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done3_enable")) { field_val = phv_done3_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done4_enable")) { field_val = phv_done4_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done5_enable")) { field_val = phv_done5_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done6_enable")) { field_val = phv_done6_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done7_enable")) { field_val = phv_done7_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_sw_phv_mem_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecc_uncorrectable_interrupt")) { field_val = ecc_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_correctable_interrupt")) { field_val = ecc_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_invalid_sram_interrupt")) { field_val = phv_invalid_sram_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_invalid_data_interrupt")) { field_val = phv_invalid_data_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done0_interrupt")) { field_val = phv_done0_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done1_interrupt")) { field_val = phv_done1_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done2_interrupt")) { field_val = phv_done2_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done3_interrupt")) { field_val = phv_done3_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done4_interrupt")) { field_val = phv_done4_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done5_interrupt")) { field_val = phv_done5_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done6_interrupt")) { field_val = phv_done6_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done7_interrupt")) { field_val = phv_done7_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_sw_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_intf_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pb_err_enable")) { field_val = pb_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pb_sop_err_enable")) { field_val = pb_sop_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pb_eop_err_enable")) { field_val = pb_eop_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dp_err_enable")) { field_val = dp_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dp_sop_err_enable")) { field_val = dp_sop_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dp_eop_err_enable")) { field_val = dp_eop_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_err_enable")) { field_val = ohi_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_sop_err_enable")) { field_val = ohi_sop_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_eop_err_enable")) { field_val = ohi_eop_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sw_phv_err_enable")) { field_val = sw_phv_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sw_phv_sop_err_enable")) { field_val = sw_phv_sop_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sw_phv_eop_err_enable")) { field_val = sw_phv_eop_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_err_enable")) { field_val = ma_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_sop_err_enable")) { field_val = ma_sop_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_eop_err_enable")) { field_val = ma_eop_err_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_intf_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pb_err_interrupt")) { field_val = pb_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pb_sop_err_interrupt")) { field_val = pb_sop_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pb_eop_err_interrupt")) { field_val = pb_eop_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dp_err_interrupt")) { field_val = dp_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dp_sop_err_interrupt")) { field_val = dp_sop_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dp_eop_err_interrupt")) { field_val = dp_eop_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_err_interrupt")) { field_val = ohi_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_sop_err_interrupt")) { field_val = ohi_sop_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_eop_err_interrupt")) { field_val = ohi_eop_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sw_phv_err_interrupt")) { field_val = sw_phv_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sw_phv_sop_err_interrupt")) { field_val = sw_phv_sop_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sw_phv_eop_err_interrupt")) { field_val = sw_phv_eop_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_err_interrupt")) { field_val = ma_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_sop_err_interrupt")) { field_val = ma_sop_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_eop_err_interrupt")) { field_val = ma_eop_err_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_intf_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_pa_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "reorder_phv_not_sop_enable")) { field_val = reorder_phv_not_sop_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum0_not_enuf_bytes_enable")) { field_val = csum0_not_enuf_bytes_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum0_start_more_than_end_offset_enable")) { field_val = csum0_start_more_than_end_offset_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum1_not_enuf_bytes_enable")) { field_val = csum1_not_enuf_bytes_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum1_start_more_than_end_offset_enable")) { field_val = csum1_start_more_than_end_offset_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum2_not_enuf_bytes_enable")) { field_val = csum2_not_enuf_bytes_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum2_start_more_than_end_offset_enable")) { field_val = csum2_start_more_than_end_offset_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum3_not_enuf_bytes_enable")) { field_val = csum3_not_enuf_bytes_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum3_start_more_than_end_offset_enable")) { field_val = csum3_start_more_than_end_offset_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum4_not_enuf_bytes_enable")) { field_val = csum4_not_enuf_bytes_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum4_start_more_than_end_offset_enable")) { field_val = csum4_start_more_than_end_offset_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crc_not_enuf_bytes_enable")) { field_val = crc_not_enuf_bytes_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crc_start_more_than_end_offset_enable")) { field_val = crc_start_more_than_end_offset_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "chkr_phv_single_flit_enable")) { field_val = chkr_phv_single_flit_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "chkr_phv_not_sop_enable")) { field_val = chkr_phv_not_sop_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "chkr_pkt_not_sop_enable")) { field_val = chkr_pkt_not_sop_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "chkr_seq_id_enable")) { field_val = chkr_seq_id_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "preparse_line0_not_sop_enable")) { field_val = preparse_line0_not_sop_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "preparse_dff_not_sop_enable")) { field_val = preparse_dff_not_sop_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "preparse_dff_ovflow_enable")) { field_val = preparse_dff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "preparse_eff_ovflow_enable")) { field_val = preparse_eff_ovflow_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_pa_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "reorder_phv_not_sop_interrupt")) { field_val = reorder_phv_not_sop_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum0_not_enuf_bytes_interrupt")) { field_val = csum0_not_enuf_bytes_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum0_start_more_than_end_offset_interrupt")) { field_val = csum0_start_more_than_end_offset_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum1_not_enuf_bytes_interrupt")) { field_val = csum1_not_enuf_bytes_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum1_start_more_than_end_offset_interrupt")) { field_val = csum1_start_more_than_end_offset_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum2_not_enuf_bytes_interrupt")) { field_val = csum2_not_enuf_bytes_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum2_start_more_than_end_offset_interrupt")) { field_val = csum2_start_more_than_end_offset_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum3_not_enuf_bytes_interrupt")) { field_val = csum3_not_enuf_bytes_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum3_start_more_than_end_offset_interrupt")) { field_val = csum3_start_more_than_end_offset_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum4_not_enuf_bytes_interrupt")) { field_val = csum4_not_enuf_bytes_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum4_start_more_than_end_offset_interrupt")) { field_val = csum4_start_more_than_end_offset_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crc_not_enuf_bytes_interrupt")) { field_val = crc_not_enuf_bytes_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crc_start_more_than_end_offset_interrupt")) { field_val = crc_start_more_than_end_offset_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "chkr_phv_single_flit_interrupt")) { field_val = chkr_phv_single_flit_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "chkr_phv_not_sop_interrupt")) { field_val = chkr_phv_not_sop_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "chkr_pkt_not_sop_interrupt")) { field_val = chkr_pkt_not_sop_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "chkr_seq_id_interrupt")) { field_val = chkr_seq_id_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "preparse_line0_not_sop_interrupt")) { field_val = preparse_line0_not_sop_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "preparse_dff_not_sop_interrupt")) { field_val = preparse_dff_not_sop_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "preparse_dff_ovflow_interrupt")) { field_val = preparse_dff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "preparse_eff_ovflow_interrupt")) { field_val = preparse_eff_ovflow_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_pa_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_pe9_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "qctl_skid_depth_not_zero_enable")) { field_val = qctl_skid_depth_not_zero_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "qctl_not_sop_after_pkt_release_enable")) { field_val = qctl_not_sop_after_pkt_release_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "unexpected_non_sop_enable")) { field_val = unexpected_non_sop_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "exceed_phv_flit_cnt_enable")) { field_val = exceed_phv_flit_cnt_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "exceed_parse_loop_cnt_enable")) { field_val = exceed_parse_loop_cnt_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "offset_out_of_range_enable")) { field_val = offset_out_of_range_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_size_chk_enable")) { field_val = pkt_size_chk_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "offset_jump_chk_enable")) { field_val = offset_jump_chk_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "d1_not_valid_enable")) { field_val = d1_not_valid_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_upr_idx_less_enable")) { field_val = phv_upr_idx_less_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_pe9_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "qctl_skid_depth_not_zero_interrupt")) { field_val = qctl_skid_depth_not_zero_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "qctl_not_sop_after_pkt_release_interrupt")) { field_val = qctl_not_sop_after_pkt_release_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "unexpected_non_sop_interrupt")) { field_val = unexpected_non_sop_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "exceed_phv_flit_cnt_interrupt")) { field_val = exceed_phv_flit_cnt_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "exceed_parse_loop_cnt_interrupt")) { field_val = exceed_parse_loop_cnt_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "offset_out_of_range_interrupt")) { field_val = offset_out_of_range_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_size_chk_interrupt")) { field_val = pkt_size_chk_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "offset_jump_chk_interrupt")) { field_val = offset_jump_chk_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "d1_not_valid_interrupt")) { field_val = d1_not_valid_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_upr_idx_less_interrupt")) { field_val = phv_upr_idx_less_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_pe9_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_fifo2_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dp_if_ff_ovflow_enable")) { field_val = dp_if_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_if_ff_ovflow_enable")) { field_val = ohi_if_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_if_ff_ovflow_enable")) { field_val = ma_if_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pb_if_ff_ovflow_enable")) { field_val = pb_if_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_mtu_ff_ovflow_enable")) { field_val = pkt_mtu_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "outphv_ff_ovflow_enable")) { field_val = outphv_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "outohi_ff_ovflow_enable")) { field_val = outohi_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "chk_ff_ovflow_enable")) { field_val = chk_ff_ovflow_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_fifo2_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dp_if_ff_ovflow_interrupt")) { field_val = dp_if_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_if_ff_ovflow_interrupt")) { field_val = ohi_if_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_if_ff_ovflow_interrupt")) { field_val = ma_if_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pb_if_ff_ovflow_interrupt")) { field_val = pb_if_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_mtu_ff_ovflow_interrupt")) { field_val = pkt_mtu_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "outphv_ff_ovflow_interrupt")) { field_val = outphv_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "outohi_ff_ovflow_interrupt")) { field_val = outohi_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "chk_ff_ovflow_interrupt")) { field_val = chk_ff_ovflow_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_fifo2_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_fifo1_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pe0_qctl_ff_ovflow_enable")) { field_val = pe0_qctl_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_qctl_ff_ovflow_enable")) { field_val = pe1_qctl_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_qctl_ff_ovflow_enable")) { field_val = pe2_qctl_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_qctl_ff_ovflow_enable")) { field_val = pe3_qctl_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_qctl_ff_ovflow_enable")) { field_val = pe4_qctl_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_qctl_ff_ovflow_enable")) { field_val = pe5_qctl_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_qctl_ff_ovflow_enable")) { field_val = pe6_qctl_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_qctl_ff_ovflow_enable")) { field_val = pe7_qctl_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_qctl_ff_ovflow_enable")) { field_val = pe8_qctl_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_qctl_ff_ovflow_enable")) { field_val = pe9_qctl_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_phv_ff_ovflow_enable")) { field_val = pe0_phv_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_phv_ff_ovflow_enable")) { field_val = pe1_phv_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_phv_ff_ovflow_enable")) { field_val = pe2_phv_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_phv_ff_ovflow_enable")) { field_val = pe3_phv_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_phv_ff_ovflow_enable")) { field_val = pe4_phv_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_phv_ff_ovflow_enable")) { field_val = pe5_phv_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_phv_ff_ovflow_enable")) { field_val = pe6_phv_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_phv_ff_ovflow_enable")) { field_val = pe7_phv_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_phv_ff_ovflow_enable")) { field_val = pe8_phv_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_phv_ff_ovflow_enable")) { field_val = pe9_phv_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_ohi_ff_ovflow_enable")) { field_val = pe0_ohi_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_ohi_ff_ovflow_enable")) { field_val = pe1_ohi_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_ohi_ff_ovflow_enable")) { field_val = pe2_ohi_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_ohi_ff_ovflow_enable")) { field_val = pe3_ohi_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_ohi_ff_ovflow_enable")) { field_val = pe4_ohi_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_ohi_ff_ovflow_enable")) { field_val = pe5_ohi_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_ohi_ff_ovflow_enable")) { field_val = pe6_ohi_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_ohi_ff_ovflow_enable")) { field_val = pe7_ohi_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_ohi_ff_ovflow_enable")) { field_val = pe8_ohi_ff_ovflow_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_ohi_ff_ovflow_enable")) { field_val = pe9_ohi_ff_ovflow_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_fifo1_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pe0_qctl_ff_ovflow_interrupt")) { field_val = pe0_qctl_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_qctl_ff_ovflow_interrupt")) { field_val = pe1_qctl_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_qctl_ff_ovflow_interrupt")) { field_val = pe2_qctl_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_qctl_ff_ovflow_interrupt")) { field_val = pe3_qctl_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_qctl_ff_ovflow_interrupt")) { field_val = pe4_qctl_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_qctl_ff_ovflow_interrupt")) { field_val = pe5_qctl_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_qctl_ff_ovflow_interrupt")) { field_val = pe6_qctl_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_qctl_ff_ovflow_interrupt")) { field_val = pe7_qctl_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_qctl_ff_ovflow_interrupt")) { field_val = pe8_qctl_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_qctl_ff_ovflow_interrupt")) { field_val = pe9_qctl_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_phv_ff_ovflow_interrupt")) { field_val = pe0_phv_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_phv_ff_ovflow_interrupt")) { field_val = pe1_phv_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_phv_ff_ovflow_interrupt")) { field_val = pe2_phv_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_phv_ff_ovflow_interrupt")) { field_val = pe3_phv_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_phv_ff_ovflow_interrupt")) { field_val = pe4_phv_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_phv_ff_ovflow_interrupt")) { field_val = pe5_phv_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_phv_ff_ovflow_interrupt")) { field_val = pe6_phv_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_phv_ff_ovflow_interrupt")) { field_val = pe7_phv_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_phv_ff_ovflow_interrupt")) { field_val = pe8_phv_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_phv_ff_ovflow_interrupt")) { field_val = pe9_phv_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_ohi_ff_ovflow_interrupt")) { field_val = pe0_ohi_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_ohi_ff_ovflow_interrupt")) { field_val = pe1_ohi_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_ohi_ff_ovflow_interrupt")) { field_val = pe2_ohi_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_ohi_ff_ovflow_interrupt")) { field_val = pe3_ohi_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_ohi_ff_ovflow_interrupt")) { field_val = pe4_ohi_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_ohi_ff_ovflow_interrupt")) { field_val = pe5_ohi_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_ohi_ff_ovflow_interrupt")) { field_val = pe6_ohi_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_ohi_ff_ovflow_interrupt")) { field_val = pe7_ohi_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_ohi_ff_ovflow_interrupt")) { field_val = pe8_ohi_ff_ovflow_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_ohi_ff_ovflow_interrupt")) { field_val = pe9_ohi_ff_ovflow_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_fifo1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_ecc_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_mem_uncorrectable_enable")) { field_val = pkt_mem_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_mem_correctable_enable")) { field_val = pkt_mem_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bndl0_state_lkp_sram_uncorrectable_enable")) { field_val = bndl0_state_lkp_sram_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bndl0_state_lkp_sram_correctable_enable")) { field_val = bndl0_state_lkp_sram_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bndl1_state_lkp_sram_uncorrectable_enable")) { field_val = bndl1_state_lkp_sram_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bndl1_state_lkp_sram_correctable_enable")) { field_val = bndl1_state_lkp_sram_correctable_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_ecc_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_mem_uncorrectable_interrupt")) { field_val = pkt_mem_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_mem_correctable_interrupt")) { field_val = pkt_mem_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bndl0_state_lkp_sram_uncorrectable_interrupt")) { field_val = bndl0_state_lkp_sram_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bndl0_state_lkp_sram_correctable_interrupt")) { field_val = bndl0_state_lkp_sram_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bndl1_state_lkp_sram_uncorrectable_interrupt")) { field_val = bndl1_state_lkp_sram_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bndl1_state_lkp_sram_correctable_interrupt")) { field_val = bndl1_state_lkp_sram_correctable_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_ecc_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_bndl1_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "state_lkp_srch_hit_addr_range_err_enable")) { field_val = state_lkp_srch_hit_addr_range_err_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "state_lkp_srch_miss_enable")) { field_val = state_lkp_srch_miss_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "state_lkp_srch_req_not_rdy_enable")) { field_val = state_lkp_srch_req_not_rdy_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_bndl0_intreg_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "state_lkp_srch_hit_addr_range_err_interrupt")) { field_val = state_lkp_srch_hit_addr_range_err_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "state_lkp_srch_miss_interrupt")) { field_val = state_lkp_srch_miss_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "state_lkp_srch_req_not_rdy_interrupt")) { field_val = state_lkp_srch_req_not_rdy_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_bndl0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_intreg_status_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "int_bndl0_interrupt")) { field_val = int_bndl0_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_bndl1_interrupt")) { field_val = int_bndl1_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_ecc_interrupt")) { field_val = int_ecc_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_fifo1_interrupt")) { field_val = int_fifo1_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_fifo2_interrupt")) { field_val = int_fifo2_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe0_interrupt")) { field_val = int_pe0_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe1_interrupt")) { field_val = int_pe1_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe2_interrupt")) { field_val = int_pe2_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe3_interrupt")) { field_val = int_pe3_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe4_interrupt")) { field_val = int_pe4_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe5_interrupt")) { field_val = int_pe5_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe6_interrupt")) { field_val = int_pe6_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe7_interrupt")) { field_val = int_pe7_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe8_interrupt")) { field_val = int_pe8_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe9_interrupt")) { field_val = int_pe9_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pa_interrupt")) { field_val = int_pa_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_sw_phv_mem_interrupt")) { field_val = int_sw_phv_mem_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_intf_interrupt")) { field_val = int_intf_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_groups_int_enable_rw_reg_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "int_bndl0_enable")) { field_val = int_bndl0_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_bndl1_enable")) { field_val = int_bndl1_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_ecc_enable")) { field_val = int_ecc_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_fifo1_enable")) { field_val = int_fifo1_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_fifo2_enable")) { field_val = int_fifo2_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe0_enable")) { field_val = int_pe0_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe1_enable")) { field_val = int_pe1_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe2_enable")) { field_val = int_pe2_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe3_enable")) { field_val = int_pe3_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe4_enable")) { field_val = int_pe4_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe5_enable")) { field_val = int_pe5_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe6_enable")) { field_val = int_pe6_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe7_enable")) { field_val = int_pe7_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe8_enable")) { field_val = int_pe8_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe9_enable")) { field_val = int_pe9_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pa_enable")) { field_val = int_pa_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_sw_phv_mem_enable")) { field_val = int_sw_phv_mem_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_intf_enable")) { field_val = int_intf_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_intgrp_status_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_rw_reg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_rw_reg.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_dbg_mem_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_dbg_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_sw_phv_mem_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "spare")) { field_val = spare(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_sw_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rsvd")) { field_val = rsvd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl1_state_lkp_sram_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cmd")) { field_val = cmd(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = entry.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "x_data")) { field_val = x_data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "y_data")) { field_val = y_data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "valid")) { field_val = valid(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl1_state_lkp_tcam_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rsvd")) { field_val = rsvd(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { field_val = ecc(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl0_state_lkp_sram_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cmd")) { field_val = cmd(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = entry.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "x_data")) { field_val = x_data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "y_data")) { field_val = y_data(); field_found=1; }
    if(!field_found && !strcmp(field_name, "valid")) { field_val = valid(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl0_state_lkp_tcam_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_preparse_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dff_sop")) { field_val = dff_sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dff_eop")) { field_val = dff_eop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eff")) { field_val = eff(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_preparse_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "state")) { field_val = state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dq_state")) { field_val = dq_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dff_empty")) { field_val = dff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dff_full")) { field_val = dff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eff_empty")) { field_val = eff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eff_full")) { field_val = eff_full(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_preparse_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "spare")) { field_val = spare(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bypass")) { field_val = bypass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tm_iport_enc_en")) { field_val = tm_iport_enc_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "udp_dstport_roce_val0")) { field_val = udp_dstport_roce_val0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "udp_dstport_roce_val1")) { field_val = udp_dstport_roce_val1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "udp_dstport_vxlan_val0")) { field_val = udp_dstport_vxlan_val0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "udp_dstport_vxlan_val1")) { field_val = udp_dstport_vxlan_val1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "vxlan_flag_mask")) { field_val = vxlan_flag_mask(); field_found=1; }
    if(!field_found && !strcmp(field_name, "vxlan_flag_val")) { field_val = vxlan_flag_val(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_spare_dbg_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_spare_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "fld0_inst")) { field_val = fld0_inst(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_inst")) { field_val = fld1_inst(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_inst")) { field_val = fld2_inst(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_inst")) { field_val = fld3_inst(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_debug_port_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "enable")) { field_val = enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "select")) { field_val = select(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_debug_ctrl_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "deq_stall_en")) { field_val = deq_stall_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dbg_mem_sel")) { field_val = dbg_mem_sel(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dbg_bndl_sel")) { field_val = dbg_bndl_sel(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dbg_bus_sel")) { field_val = dbg_bus_sel(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eccbypass")) { field_val = eccbypass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe_alloc_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "state")) { field_val = state(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_queue")) { field_val = pkt_queue(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_queue")) { field_val = pkt_queue(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_fifo_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dp_if_ff_full")) { field_val = dp_if_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dp_if_ff_empty")) { field_val = dp_if_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_if_ff_full")) { field_val = ohi_if_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_if_ff_empty")) { field_val = ohi_if_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_if_ff_full")) { field_val = ma_if_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_if_ff_empty")) { field_val = ma_if_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pb_if_ff_full")) { field_val = pb_if_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pb_if_ff_empty")) { field_val = pb_if_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_mtu_ff_full")) { field_val = pkt_mtu_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_mtu_ff_empty")) { field_val = pkt_mtu_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "outphv_ff_full")) { field_val = outphv_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "outphv_ff_empty")) { field_val = outphv_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "outohi_ff_full")) { field_val = outohi_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "outohi_ff_empty")) { field_val = outohi_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "chk_ff_full")) { field_val = chk_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "chk_ff_empty")) { field_val = chk_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_qctl_ff_full")) { field_val = pe0_qctl_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_qctl_ff_empty")) { field_val = pe0_qctl_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_phv_ff_full")) { field_val = pe0_phv_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_phv_ff_empty")) { field_val = pe0_phv_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_ohi_ff_full")) { field_val = pe0_ohi_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_ohi_ff_empty")) { field_val = pe0_ohi_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_qctl_ff_full")) { field_val = pe1_qctl_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_qctl_ff_empty")) { field_val = pe1_qctl_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_phv_ff_full")) { field_val = pe1_phv_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_phv_ff_empty")) { field_val = pe1_phv_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_ohi_ff_full")) { field_val = pe1_ohi_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_ohi_ff_empty")) { field_val = pe1_ohi_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_qctl_ff_full")) { field_val = pe2_qctl_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_qctl_ff_empty")) { field_val = pe2_qctl_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_phv_ff_full")) { field_val = pe2_phv_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_phv_ff_empty")) { field_val = pe2_phv_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_ohi_ff_full")) { field_val = pe2_ohi_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_ohi_ff_empty")) { field_val = pe2_ohi_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_qctl_ff_full")) { field_val = pe3_qctl_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_qctl_ff_empty")) { field_val = pe3_qctl_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_phv_ff_full")) { field_val = pe3_phv_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_phv_ff_empty")) { field_val = pe3_phv_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_ohi_ff_full")) { field_val = pe3_ohi_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_ohi_ff_empty")) { field_val = pe3_ohi_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_qctl_ff_full")) { field_val = pe4_qctl_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_qctl_ff_empty")) { field_val = pe4_qctl_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_phv_ff_full")) { field_val = pe4_phv_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_phv_ff_empty")) { field_val = pe4_phv_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_ohi_ff_full")) { field_val = pe4_ohi_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_ohi_ff_empty")) { field_val = pe4_ohi_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_qctl_ff_full")) { field_val = pe5_qctl_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_qctl_ff_empty")) { field_val = pe5_qctl_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_phv_ff_full")) { field_val = pe5_phv_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_phv_ff_empty")) { field_val = pe5_phv_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_ohi_ff_full")) { field_val = pe5_ohi_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_ohi_ff_empty")) { field_val = pe5_ohi_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_qctl_ff_full")) { field_val = pe6_qctl_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_qctl_ff_empty")) { field_val = pe6_qctl_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_phv_ff_full")) { field_val = pe6_phv_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_phv_ff_empty")) { field_val = pe6_phv_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_ohi_ff_full")) { field_val = pe6_ohi_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_ohi_ff_empty")) { field_val = pe6_ohi_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_qctl_ff_full")) { field_val = pe7_qctl_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_qctl_ff_empty")) { field_val = pe7_qctl_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_phv_ff_full")) { field_val = pe7_phv_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_phv_ff_empty")) { field_val = pe7_phv_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_ohi_ff_full")) { field_val = pe7_ohi_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_ohi_ff_empty")) { field_val = pe7_ohi_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_qctl_ff_full")) { field_val = pe8_qctl_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_qctl_ff_empty")) { field_val = pe8_qctl_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_phv_ff_full")) { field_val = pe8_phv_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_phv_ff_empty")) { field_val = pe8_phv_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_ohi_ff_full")) { field_val = pe8_ohi_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_ohi_ff_empty")) { field_val = pe8_ohi_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_qctl_ff_full")) { field_val = pe9_qctl_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_qctl_ff_empty")) { field_val = pe9_qctl_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_phv_ff_full")) { field_val = pe9_phv_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_phv_ff_empty")) { field_val = pe9_phv_ff_empty(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_ohi_ff_full")) { field_val = pe9_ohi_ff_full(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_ohi_ff_empty")) { field_val = pe9_ohi_ff_empty(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl1_state_lkp_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { field_val = err_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { field_val = err_log(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl0_state_lkp_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { field_val = err_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { field_val = err_log(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe9_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { field_val = err_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { field_val = err_log(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { field_val = pe_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { field_val = phv_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { field_val = pkt_state(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe8_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { field_val = err_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { field_val = err_log(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { field_val = pe_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { field_val = phv_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { field_val = pkt_state(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe7_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { field_val = err_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { field_val = err_log(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { field_val = pe_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { field_val = phv_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { field_val = pkt_state(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe6_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { field_val = err_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { field_val = err_log(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { field_val = pe_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { field_val = phv_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { field_val = pkt_state(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe5_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { field_val = err_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { field_val = err_log(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { field_val = pe_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { field_val = phv_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { field_val = pkt_state(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe4_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { field_val = err_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { field_val = err_log(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { field_val = pe_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { field_val = phv_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { field_val = pkt_state(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe3_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { field_val = err_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { field_val = err_log(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { field_val = pe_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { field_val = phv_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { field_val = pkt_state(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe2_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { field_val = err_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { field_val = err_log(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { field_val = pe_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { field_val = phv_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { field_val = pkt_state(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { field_val = err_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { field_val = err_log(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { field_val = pe_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { field_val = phv_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { field_val = pkt_state(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { field_val = err_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { field_val = err_log(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { field_val = pe_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { field_val = phv_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { field_val = pkt_state(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_chkr_seq_id_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ohi")) { field_val = ohi(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt")) { field_val = pkt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_csum4_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { field_val = err_vec(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_csum3_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { field_val = err_vec(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_csum2_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { field_val = err_vec(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_csum1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { field_val = err_vec(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_csum0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { field_val = err_vec(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_reorder_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "seq_state")) { field_val = seq_state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "seq_num")) { field_val = seq_num(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_srdy_vec")) { field_val = ohi_srdy_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_srdy_vec")) { field_val = phv_srdy_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "match_vec")) { field_val = match_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_vec")) { field_val = eop_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drdy_vec_d")) { field_val = drdy_vec_d(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_reorder_phv_not_sop_err_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "match_vec")) { field_val = match_vec(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_sop_vec")) { field_val = phv_sop_vec(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_sw_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecc_correctable")) { field_val = ecc_correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_uncorrectable")) { field_val = ecc_uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_syndrome")) { field_val = ecc_syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_addr")) { field_val = ecc_addr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_sw_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecc_detect")) { field_val = ecc_detect(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_correct")) { field_val = ecc_correct(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_bypass")) { field_val = ecc_bypass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_sw_phv_state_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "done")) { field_val = done(); field_found=1; }
    if(!field_found && !strcmp(field_name, "current_insertion_period")) { field_val = current_insertion_period(); field_found=1; }
    if(!field_found && !strcmp(field_name, "current_counter")) { field_val = current_counter(); field_found=1; }
    if(!field_found && !strcmp(field_name, "current_flit")) { field_val = current_flit(); field_found=1; }
    if(!field_found && !strcmp(field_name, "current_qid")) { field_val = current_qid(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_sw_phv_config_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "start_addr")) { field_val = start_addr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "num_flits")) { field_val = num_flits(); field_found=1; }
    if(!field_found && !strcmp(field_name, "insertion_period_clocks")) { field_val = insertion_period_clocks(); field_found=1; }
    if(!field_found && !strcmp(field_name, "counter_max")) { field_val = counter_max(); field_found=1; }
    if(!field_found && !strcmp(field_name, "qid_min")) { field_val = qid_min(); field_found=1; }
    if(!field_found && !strcmp(field_name, "qid_max")) { field_val = qid_max(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_sw_phv_control_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "start_enable")) { field_val = start_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "counter_repeat_enable")) { field_val = counter_repeat_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "qid_repeat_enable")) { field_val = qid_repeat_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "localtime_enable")) { field_val = localtime_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "frame_size_enable")) { field_val = frame_size_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "packet_len_enable")) { field_val = packet_len_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "qid_enable")) { field_val = qid_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_sw_phv_global_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "start_enable")) { field_val = start_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_enable")) { field_val = err_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe9_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe9_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe8_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe8_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe7_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe7_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe6_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe6_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe5_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe5_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe4_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe4_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe3_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe3_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe2_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe2_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe1_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe1_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe0_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe0_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_outq_ohi_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_outq_ohi_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_outq_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_outq_phv_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl1_inq_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl1_inq_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl0_inq_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl0_inq_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl1_state_lkp_sram_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecc_disable_det")) { field_val = ecc_disable_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_disable_cor")) { field_val = ecc_disable_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dhs_ecc_bypass")) { field_val = dhs_ecc_bypass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl0_state_lkp_sram_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecc_disable_det")) { field_val = ecc_disable_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_disable_cor")) { field_val = ecc_disable_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dhs_ecc_bypass")) { field_val = dhs_ecc_bypass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pkt_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pkt_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecc_disable_det")) { field_val = ecc_disable_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_disable_cor")) { field_val = ecc_disable_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_csr_intr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dowstream")) { field_val = dowstream(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dowstream_enable")) { field_val = dowstream_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe9_phv_out_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe9_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { field_val = pkt_release(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { field_val = ohi_out(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe8_phv_out_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe8_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { field_val = pkt_release(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { field_val = ohi_out(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe7_phv_out_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe7_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { field_val = pkt_release(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { field_val = ohi_out(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe6_phv_out_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe6_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { field_val = pkt_release(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { field_val = ohi_out(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe5_phv_out_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe5_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { field_val = pkt_release(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { field_val = ohi_out(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe4_phv_out_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe4_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { field_val = pkt_release(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { field_val = ohi_out(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe3_phv_out_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe3_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { field_val = pkt_release(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { field_val = ohi_out(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe2_phv_out_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe2_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { field_val = pkt_release(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { field_val = ohi_out(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe1_phv_out_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { field_val = pkt_release(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { field_val = ohi_out(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe0_phv_out_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { field_val = pkt_release(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { field_val = ohi_out(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_ohi_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err")) { field_val = err(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_err")) { field_val = sop_err(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_err")) { field_val = eop_err(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_sw_phv_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err")) { field_val = err(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_err")) { field_val = sop_err(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_err")) { field_val = eop_err(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_ma_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err")) { field_val = err(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_err")) { field_val = sop_err(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_err")) { field_val = eop_err(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_dp_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err")) { field_val = err(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_err")) { field_val = sop_err(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_err")) { field_val = eop_err(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pb_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { field_val = sop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { field_val = eop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "err")) { field_val = err(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_err")) { field_val = sop_err(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_err")) { field_val = eop_err(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_align_chk_profile_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "addsub_start")) { field_val = addsub_start(); field_found=1; }
    if(!field_found && !strcmp(field_name, "start_adj")) { field_val = start_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "mod_log2")) { field_val = mod_log2(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_len_chk_profile_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "len_mask")) { field_val = len_mask(); field_found=1; }
    if(!field_found && !strcmp(field_name, "len_shift_left")) { field_val = len_shift_left(); field_found=1; }
    if(!field_found && !strcmp(field_name, "len_shift_val")) { field_val = len_shift_val(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addsub_start")) { field_val = addsub_start(); field_found=1; }
    if(!field_found && !strcmp(field_name, "start_adj")) { field_val = start_adj(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_csum_phdr_profile_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "fld0_fld_en")) { field_val = fld0_fld_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_fld_align")) { field_val = fld0_fld_align(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_fld_start")) { field_val = fld0_fld_start(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_fld_end")) { field_val = fld0_fld_end(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_add_len")) { field_val = fld0_add_len(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_fld_en")) { field_val = fld1_fld_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_fld_align")) { field_val = fld1_fld_align(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_fld_start")) { field_val = fld1_fld_start(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_fld_end")) { field_val = fld1_fld_end(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_add_len")) { field_val = fld1_add_len(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_fld_en")) { field_val = fld2_fld_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_fld_align")) { field_val = fld2_fld_align(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_fld_start")) { field_val = fld2_fld_start(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_fld_end")) { field_val = fld2_fld_end(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_add_len")) { field_val = fld2_add_len(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_fld_en")) { field_val = fld3_fld_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_fld_align")) { field_val = fld3_fld_align(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_fld_start")) { field_val = fld3_fld_start(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_fld_end")) { field_val = fld3_fld_end(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_add_len")) { field_val = fld3_add_len(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_csum_profile_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "csum_loc_use_phdr_ohi")) { field_val = csum_loc_use_phdr_ohi(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum_8b")) { field_val = csum_8b(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_csum_flit_num")) { field_val = phv_csum_flit_num(); field_found=1; }
    if(!field_found && !strcmp(field_name, "end_eop")) { field_val = end_eop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "len_mask")) { field_val = len_mask(); field_found=1; }
    if(!field_found && !strcmp(field_name, "len_shift_left")) { field_val = len_shift_left(); field_found=1; }
    if(!field_found && !strcmp(field_name, "len_shift_val")) { field_val = len_shift_val(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addsub_start")) { field_val = addsub_start(); field_found=1; }
    if(!field_found && !strcmp(field_name, "start_adj")) { field_val = start_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addsub_end")) { field_val = addsub_end(); field_found=1; }
    if(!field_found && !strcmp(field_name, "end_adj")) { field_val = end_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addsub_phdr")) { field_val = addsub_phdr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phdr_adj")) { field_val = phdr_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addsub_csum_loc")) { field_val = addsub_csum_loc(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum_loc_adj")) { field_val = csum_loc_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "align")) { field_val = align(); field_found=1; }
    if(!field_found && !strcmp(field_name, "add_val")) { field_val = add_val(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_crc_mask_profile_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "fld0_mask_en")) { field_val = fld0_mask_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_use_ohi")) { field_val = fld0_use_ohi(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_start_adj")) { field_val = fld0_start_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_end_adj")) { field_val = fld0_end_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_fill")) { field_val = fld0_fill(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_skip_first_nibble")) { field_val = fld0_skip_first_nibble(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_mask_en")) { field_val = fld1_mask_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_use_ohi")) { field_val = fld1_use_ohi(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_start_adj")) { field_val = fld1_start_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_end_adj")) { field_val = fld1_end_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_fill")) { field_val = fld1_fill(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_skip_first_nibble")) { field_val = fld1_skip_first_nibble(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_mask_en")) { field_val = fld2_mask_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_use_ohi")) { field_val = fld2_use_ohi(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_start_adj")) { field_val = fld2_start_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_end_adj")) { field_val = fld2_end_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_fill")) { field_val = fld2_fill(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_skip_first_nibble")) { field_val = fld2_skip_first_nibble(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_mask_en")) { field_val = fld3_mask_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_use_ohi")) { field_val = fld3_use_ohi(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_start_adj")) { field_val = fld3_start_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_end_adj")) { field_val = fld3_end_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_fill")) { field_val = fld3_fill(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_skip_first_nibble")) { field_val = fld3_skip_first_nibble(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld4_mask_en")) { field_val = fld4_mask_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld4_use_ohi")) { field_val = fld4_use_ohi(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld4_start_adj")) { field_val = fld4_start_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld4_end_adj")) { field_val = fld4_end_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld4_fill")) { field_val = fld4_fill(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld4_skip_first_nibble")) { field_val = fld4_skip_first_nibble(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld5_mask_en")) { field_val = fld5_mask_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld5_use_ohi")) { field_val = fld5_use_ohi(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld5_start_adj")) { field_val = fld5_start_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld5_end_adj")) { field_val = fld5_end_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld5_fill")) { field_val = fld5_fill(); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld5_skip_first_nibble")) { field_val = fld5_skip_first_nibble(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_crc_profile_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "len_mask")) { field_val = len_mask(); field_found=1; }
    if(!field_found && !strcmp(field_name, "len_shift_left")) { field_val = len_shift_left(); field_found=1; }
    if(!field_found && !strcmp(field_name, "len_shift_val")) { field_val = len_shift_val(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addsub_start")) { field_val = addsub_start(); field_found=1; }
    if(!field_found && !strcmp(field_name, "start_adj")) { field_val = start_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addsub_end")) { field_val = addsub_end(); field_found=1; }
    if(!field_found && !strcmp(field_name, "end_adj")) { field_val = end_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addsub_mask")) { field_val = addsub_mask(); field_found=1; }
    if(!field_found && !strcmp(field_name, "mask_adj")) { field_val = mask_adj(); field_found=1; }
    if(!field_found && !strcmp(field_name, "end_eop")) { field_val = end_eop(); field_found=1; }
    if(!field_found && !strcmp(field_name, "mask_prof_sel")) { field_val = mask_prof_sel(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "hit")) { field_val = hit(); field_found=1; }
    if(!field_found && !strcmp(field_name, "hit_addr")) { field_val = hit_addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "key")) { field_val = key(); field_found=1; }
    if(!field_found && !strcmp(field_name, "mask")) { field_val = mask(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "vld")) { field_val = vld(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "hit")) { field_val = hit(); field_found=1; }
    if(!field_found && !strcmp(field_name, "hit_addr")) { field_val = hit_addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "key")) { field_val = key(); field_found=1; }
    if(!field_found && !strcmp(field_name, "mask")) { field_val = mask(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "vld")) { field_val = vld(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_init_profile_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "curr_offset")) { field_val = curr_offset(); field_found=1; }
    if(!field_found && !strcmp(field_name, "state")) { field_val = state(); field_found=1; }
    if(!field_found && !strcmp(field_name, "lkp_val_pkt_idx0")) { field_val = lkp_val_pkt_idx0(); field_found=1; }
    if(!field_found && !strcmp(field_name, "lkp_val_pkt_idx1")) { field_val = lkp_val_pkt_idx1(); field_found=1; }
    if(!field_found && !strcmp(field_name, "lkp_val_pkt_idx2")) { field_val = lkp_val_pkt_idx2(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_ctrl_thresh_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "outphv_ff")) { field_val = outphv_ff(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_ff")) { field_val = phv_ff(); field_found=1; }
    if(!field_found && !strcmp(field_name, "chk_ff")) { field_val = chk_ff(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_ctrl_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pe_enable")) { field_val = pe_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "parse_loop_cnt")) { field_val = parse_loop_cnt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "num_phv_flit")) { field_val = num_phv_flit(); field_found=1; }
    if(!field_found && !strcmp(field_name, "state_lkp_catchall_entry")) { field_val = state_lkp_catchall_entry(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_set_hw_err_en")) { field_val = phv_set_hw_err_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_set_parser_err_en")) { field_val = phv_set_parser_err_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "gso_csum_en")) { field_val = gso_csum_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_err_vec_en")) { field_val = pe_err_vec_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "end_offset_en")) { field_val = end_offset_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "end_offset_flit_num")) { field_val = end_offset_flit_num(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tcam_key_ctl")) { field_val = tcam_key_ctl(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crc_start_offset_err_en")) { field_val = crc_start_offset_err_en(); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum_start_offset_err_en")) { field_val = csum_start_offset_err_en(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_rdintr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ireg")) { field_val = ireg(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_base_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "scratch_reg")) { field_val = scratch_reg(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = base.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = rdintr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_ctrl.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_ctrl_thresh.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl0_state_lkp_tcam_grst.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl0_state_lkp_tcam_ind.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl0_state_lkp_tcam_ind.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl1_state_lkp_tcam_grst.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl1_state_lkp_tcam_ind.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl1_state_lkp_tcam_ind.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pb.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_dp.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_ma.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_sw_phv.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_ohi.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe0_pkt_in.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe0_phv_out.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe1_pkt_in.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe1_phv_out.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe2_pkt_in.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe2_phv_out.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe3_pkt_in.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe3_phv_out.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe4_pkt_in.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe4.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe4_phv_out.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe5_pkt_in.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe5.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe5_phv_out.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe6_pkt_in.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe6.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe6_phv_out.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe7_pkt_in.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe7.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe7_phv_out.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe8_pkt_in.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe8.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe8_phv_out.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe9_pkt_in.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe9.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe9_phv_out.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = csr_intr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pkt_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pkt_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl0_state_lkp_sram.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl0_state_lkp_sram.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl1_state_lkp_sram.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl1_state_lkp_sram.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl0_inq_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl0_inq_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl1_inq_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl1_inq_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_outq_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_outq_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_outq_ohi_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_outq_ohi_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl0_state_lkp_tcam.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl0_state_lkp_tcam.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl1_state_lkp_tcam.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl1_state_lkp_tcam.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe0_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe0_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe1_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe1_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe2_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe2_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe3_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe3_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe4_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe4_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe5_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe5_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe6_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe6_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe7_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe7_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe8_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe8_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe9_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe9_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_sw_phv_global.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_sw_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_sw_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_reorder_phv_not_sop_err.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_reorder.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_csum0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_csum1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_csum2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_csum3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_csum4.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_chkr_seq_id.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe4.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe5.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe6.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe7.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe8.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe9.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl0_state_lkp.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl1_state_lkp.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_fifo.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe_alloc.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_debug_ctrl.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_debug_port.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_spare.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_spare_dbg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_preparse.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_preparse.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_preparse.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_bndl0_state_lkp_tcam.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_bndl0_state_lkp_tcam_ind.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_bndl0_state_lkp_sram.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_bndl1_state_lkp_tcam.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_bndl1_state_lkp_tcam_ind.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_bndl1_state_lkp_sram.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_sw_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_dbg_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_groups.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_bndl0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_bndl1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_ecc.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_fifo1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_fifo2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe4.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe5.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe6.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe7.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe8.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe9.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pa.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_intf.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_sw_phv_mem.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecc_uncorrectable_enable")) { ecc_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_correctable_enable")) { ecc_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_invalid_sram_enable")) { phv_invalid_sram_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_invalid_data_enable")) { phv_invalid_data_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done0_enable")) { phv_done0_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done1_enable")) { phv_done1_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done2_enable")) { phv_done2_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done3_enable")) { phv_done3_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done4_enable")) { phv_done4_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done5_enable")) { phv_done5_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done6_enable")) { phv_done6_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done7_enable")) { phv_done7_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_sw_phv_mem_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecc_uncorrectable_interrupt")) { ecc_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_correctable_interrupt")) { ecc_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_invalid_sram_interrupt")) { phv_invalid_sram_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_invalid_data_interrupt")) { phv_invalid_data_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done0_interrupt")) { phv_done0_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done1_interrupt")) { phv_done1_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done2_interrupt")) { phv_done2_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done3_interrupt")) { phv_done3_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done4_interrupt")) { phv_done4_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done5_interrupt")) { phv_done5_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done6_interrupt")) { phv_done6_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_done7_interrupt")) { phv_done7_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_sw_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_intf_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pb_err_enable")) { pb_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pb_sop_err_enable")) { pb_sop_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pb_eop_err_enable")) { pb_eop_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dp_err_enable")) { dp_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dp_sop_err_enable")) { dp_sop_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dp_eop_err_enable")) { dp_eop_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_err_enable")) { ohi_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_sop_err_enable")) { ohi_sop_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_eop_err_enable")) { ohi_eop_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sw_phv_err_enable")) { sw_phv_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sw_phv_sop_err_enable")) { sw_phv_sop_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sw_phv_eop_err_enable")) { sw_phv_eop_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_err_enable")) { ma_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_sop_err_enable")) { ma_sop_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_eop_err_enable")) { ma_eop_err_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_intf_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pb_err_interrupt")) { pb_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pb_sop_err_interrupt")) { pb_sop_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pb_eop_err_interrupt")) { pb_eop_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dp_err_interrupt")) { dp_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dp_sop_err_interrupt")) { dp_sop_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dp_eop_err_interrupt")) { dp_eop_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_err_interrupt")) { ohi_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_sop_err_interrupt")) { ohi_sop_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_eop_err_interrupt")) { ohi_eop_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sw_phv_err_interrupt")) { sw_phv_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sw_phv_sop_err_interrupt")) { sw_phv_sop_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sw_phv_eop_err_interrupt")) { sw_phv_eop_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_err_interrupt")) { ma_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_sop_err_interrupt")) { ma_sop_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_eop_err_interrupt")) { ma_eop_err_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_intf_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_pa_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "reorder_phv_not_sop_enable")) { reorder_phv_not_sop_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum0_not_enuf_bytes_enable")) { csum0_not_enuf_bytes_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum0_start_more_than_end_offset_enable")) { csum0_start_more_than_end_offset_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum1_not_enuf_bytes_enable")) { csum1_not_enuf_bytes_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum1_start_more_than_end_offset_enable")) { csum1_start_more_than_end_offset_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum2_not_enuf_bytes_enable")) { csum2_not_enuf_bytes_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum2_start_more_than_end_offset_enable")) { csum2_start_more_than_end_offset_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum3_not_enuf_bytes_enable")) { csum3_not_enuf_bytes_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum3_start_more_than_end_offset_enable")) { csum3_start_more_than_end_offset_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum4_not_enuf_bytes_enable")) { csum4_not_enuf_bytes_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum4_start_more_than_end_offset_enable")) { csum4_start_more_than_end_offset_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crc_not_enuf_bytes_enable")) { crc_not_enuf_bytes_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crc_start_more_than_end_offset_enable")) { crc_start_more_than_end_offset_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "chkr_phv_single_flit_enable")) { chkr_phv_single_flit_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "chkr_phv_not_sop_enable")) { chkr_phv_not_sop_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "chkr_pkt_not_sop_enable")) { chkr_pkt_not_sop_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "chkr_seq_id_enable")) { chkr_seq_id_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "preparse_line0_not_sop_enable")) { preparse_line0_not_sop_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "preparse_dff_not_sop_enable")) { preparse_dff_not_sop_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "preparse_dff_ovflow_enable")) { preparse_dff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "preparse_eff_ovflow_enable")) { preparse_eff_ovflow_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_pa_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "reorder_phv_not_sop_interrupt")) { reorder_phv_not_sop_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum0_not_enuf_bytes_interrupt")) { csum0_not_enuf_bytes_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum0_start_more_than_end_offset_interrupt")) { csum0_start_more_than_end_offset_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum1_not_enuf_bytes_interrupt")) { csum1_not_enuf_bytes_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum1_start_more_than_end_offset_interrupt")) { csum1_start_more_than_end_offset_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum2_not_enuf_bytes_interrupt")) { csum2_not_enuf_bytes_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum2_start_more_than_end_offset_interrupt")) { csum2_start_more_than_end_offset_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum3_not_enuf_bytes_interrupt")) { csum3_not_enuf_bytes_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum3_start_more_than_end_offset_interrupt")) { csum3_start_more_than_end_offset_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum4_not_enuf_bytes_interrupt")) { csum4_not_enuf_bytes_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum4_start_more_than_end_offset_interrupt")) { csum4_start_more_than_end_offset_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crc_not_enuf_bytes_interrupt")) { crc_not_enuf_bytes_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crc_start_more_than_end_offset_interrupt")) { crc_start_more_than_end_offset_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "chkr_phv_single_flit_interrupt")) { chkr_phv_single_flit_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "chkr_phv_not_sop_interrupt")) { chkr_phv_not_sop_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "chkr_pkt_not_sop_interrupt")) { chkr_pkt_not_sop_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "chkr_seq_id_interrupt")) { chkr_seq_id_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "preparse_line0_not_sop_interrupt")) { preparse_line0_not_sop_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "preparse_dff_not_sop_interrupt")) { preparse_dff_not_sop_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "preparse_dff_ovflow_interrupt")) { preparse_dff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "preparse_eff_ovflow_interrupt")) { preparse_eff_ovflow_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_pa_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_pe9_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "qctl_skid_depth_not_zero_enable")) { qctl_skid_depth_not_zero_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "qctl_not_sop_after_pkt_release_enable")) { qctl_not_sop_after_pkt_release_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "unexpected_non_sop_enable")) { unexpected_non_sop_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "exceed_phv_flit_cnt_enable")) { exceed_phv_flit_cnt_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "exceed_parse_loop_cnt_enable")) { exceed_parse_loop_cnt_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "offset_out_of_range_enable")) { offset_out_of_range_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_size_chk_enable")) { pkt_size_chk_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "offset_jump_chk_enable")) { offset_jump_chk_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "d1_not_valid_enable")) { d1_not_valid_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_upr_idx_less_enable")) { phv_upr_idx_less_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_pe9_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "qctl_skid_depth_not_zero_interrupt")) { qctl_skid_depth_not_zero_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "qctl_not_sop_after_pkt_release_interrupt")) { qctl_not_sop_after_pkt_release_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "unexpected_non_sop_interrupt")) { unexpected_non_sop_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "exceed_phv_flit_cnt_interrupt")) { exceed_phv_flit_cnt_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "exceed_parse_loop_cnt_interrupt")) { exceed_parse_loop_cnt_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "offset_out_of_range_interrupt")) { offset_out_of_range_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_size_chk_interrupt")) { pkt_size_chk_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "offset_jump_chk_interrupt")) { offset_jump_chk_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "d1_not_valid_interrupt")) { d1_not_valid_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_upr_idx_less_interrupt")) { phv_upr_idx_less_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_pe9_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_fifo2_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dp_if_ff_ovflow_enable")) { dp_if_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_if_ff_ovflow_enable")) { ohi_if_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_if_ff_ovflow_enable")) { ma_if_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pb_if_ff_ovflow_enable")) { pb_if_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_mtu_ff_ovflow_enable")) { pkt_mtu_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "outphv_ff_ovflow_enable")) { outphv_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "outohi_ff_ovflow_enable")) { outohi_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "chk_ff_ovflow_enable")) { chk_ff_ovflow_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_fifo2_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dp_if_ff_ovflow_interrupt")) { dp_if_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_if_ff_ovflow_interrupt")) { ohi_if_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_if_ff_ovflow_interrupt")) { ma_if_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pb_if_ff_ovflow_interrupt")) { pb_if_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_mtu_ff_ovflow_interrupt")) { pkt_mtu_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "outphv_ff_ovflow_interrupt")) { outphv_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "outohi_ff_ovflow_interrupt")) { outohi_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "chk_ff_ovflow_interrupt")) { chk_ff_ovflow_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_fifo2_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_fifo1_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pe0_qctl_ff_ovflow_enable")) { pe0_qctl_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_qctl_ff_ovflow_enable")) { pe1_qctl_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_qctl_ff_ovflow_enable")) { pe2_qctl_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_qctl_ff_ovflow_enable")) { pe3_qctl_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_qctl_ff_ovflow_enable")) { pe4_qctl_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_qctl_ff_ovflow_enable")) { pe5_qctl_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_qctl_ff_ovflow_enable")) { pe6_qctl_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_qctl_ff_ovflow_enable")) { pe7_qctl_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_qctl_ff_ovflow_enable")) { pe8_qctl_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_qctl_ff_ovflow_enable")) { pe9_qctl_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_phv_ff_ovflow_enable")) { pe0_phv_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_phv_ff_ovflow_enable")) { pe1_phv_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_phv_ff_ovflow_enable")) { pe2_phv_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_phv_ff_ovflow_enable")) { pe3_phv_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_phv_ff_ovflow_enable")) { pe4_phv_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_phv_ff_ovflow_enable")) { pe5_phv_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_phv_ff_ovflow_enable")) { pe6_phv_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_phv_ff_ovflow_enable")) { pe7_phv_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_phv_ff_ovflow_enable")) { pe8_phv_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_phv_ff_ovflow_enable")) { pe9_phv_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_ohi_ff_ovflow_enable")) { pe0_ohi_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_ohi_ff_ovflow_enable")) { pe1_ohi_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_ohi_ff_ovflow_enable")) { pe2_ohi_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_ohi_ff_ovflow_enable")) { pe3_ohi_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_ohi_ff_ovflow_enable")) { pe4_ohi_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_ohi_ff_ovflow_enable")) { pe5_ohi_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_ohi_ff_ovflow_enable")) { pe6_ohi_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_ohi_ff_ovflow_enable")) { pe7_ohi_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_ohi_ff_ovflow_enable")) { pe8_ohi_ff_ovflow_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_ohi_ff_ovflow_enable")) { pe9_ohi_ff_ovflow_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_fifo1_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pe0_qctl_ff_ovflow_interrupt")) { pe0_qctl_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_qctl_ff_ovflow_interrupt")) { pe1_qctl_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_qctl_ff_ovflow_interrupt")) { pe2_qctl_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_qctl_ff_ovflow_interrupt")) { pe3_qctl_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_qctl_ff_ovflow_interrupt")) { pe4_qctl_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_qctl_ff_ovflow_interrupt")) { pe5_qctl_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_qctl_ff_ovflow_interrupt")) { pe6_qctl_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_qctl_ff_ovflow_interrupt")) { pe7_qctl_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_qctl_ff_ovflow_interrupt")) { pe8_qctl_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_qctl_ff_ovflow_interrupt")) { pe9_qctl_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_phv_ff_ovflow_interrupt")) { pe0_phv_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_phv_ff_ovflow_interrupt")) { pe1_phv_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_phv_ff_ovflow_interrupt")) { pe2_phv_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_phv_ff_ovflow_interrupt")) { pe3_phv_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_phv_ff_ovflow_interrupt")) { pe4_phv_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_phv_ff_ovflow_interrupt")) { pe5_phv_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_phv_ff_ovflow_interrupt")) { pe6_phv_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_phv_ff_ovflow_interrupt")) { pe7_phv_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_phv_ff_ovflow_interrupt")) { pe8_phv_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_phv_ff_ovflow_interrupt")) { pe9_phv_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_ohi_ff_ovflow_interrupt")) { pe0_ohi_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_ohi_ff_ovflow_interrupt")) { pe1_ohi_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_ohi_ff_ovflow_interrupt")) { pe2_ohi_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_ohi_ff_ovflow_interrupt")) { pe3_ohi_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_ohi_ff_ovflow_interrupt")) { pe4_ohi_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_ohi_ff_ovflow_interrupt")) { pe5_ohi_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_ohi_ff_ovflow_interrupt")) { pe6_ohi_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_ohi_ff_ovflow_interrupt")) { pe7_ohi_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_ohi_ff_ovflow_interrupt")) { pe8_ohi_ff_ovflow_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_ohi_ff_ovflow_interrupt")) { pe9_ohi_ff_ovflow_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_fifo1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_ecc_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_mem_uncorrectable_enable")) { pkt_mem_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_mem_correctable_enable")) { pkt_mem_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bndl0_state_lkp_sram_uncorrectable_enable")) { bndl0_state_lkp_sram_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bndl0_state_lkp_sram_correctable_enable")) { bndl0_state_lkp_sram_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bndl1_state_lkp_sram_uncorrectable_enable")) { bndl1_state_lkp_sram_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bndl1_state_lkp_sram_correctable_enable")) { bndl1_state_lkp_sram_correctable_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_ecc_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_mem_uncorrectable_interrupt")) { pkt_mem_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_mem_correctable_interrupt")) { pkt_mem_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bndl0_state_lkp_sram_uncorrectable_interrupt")) { bndl0_state_lkp_sram_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bndl0_state_lkp_sram_correctable_interrupt")) { bndl0_state_lkp_sram_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bndl1_state_lkp_sram_uncorrectable_interrupt")) { bndl1_state_lkp_sram_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bndl1_state_lkp_sram_correctable_interrupt")) { bndl1_state_lkp_sram_correctable_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_ecc_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_bndl1_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "state_lkp_srch_hit_addr_range_err_enable")) { state_lkp_srch_hit_addr_range_err_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "state_lkp_srch_miss_enable")) { state_lkp_srch_miss_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "state_lkp_srch_req_not_rdy_enable")) { state_lkp_srch_req_not_rdy_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_bndl0_intreg_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "state_lkp_srch_hit_addr_range_err_interrupt")) { state_lkp_srch_hit_addr_range_err_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "state_lkp_srch_miss_interrupt")) { state_lkp_srch_miss_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "state_lkp_srch_req_not_rdy_interrupt")) { state_lkp_srch_req_not_rdy_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_bndl0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_intreg_status_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "int_bndl0_interrupt")) { int_bndl0_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_bndl1_interrupt")) { int_bndl1_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_ecc_interrupt")) { int_ecc_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_fifo1_interrupt")) { int_fifo1_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_fifo2_interrupt")) { int_fifo2_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe0_interrupt")) { int_pe0_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe1_interrupt")) { int_pe1_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe2_interrupt")) { int_pe2_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe3_interrupt")) { int_pe3_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe4_interrupt")) { int_pe4_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe5_interrupt")) { int_pe5_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe6_interrupt")) { int_pe6_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe7_interrupt")) { int_pe7_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe8_interrupt")) { int_pe8_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe9_interrupt")) { int_pe9_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pa_interrupt")) { int_pa_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_sw_phv_mem_interrupt")) { int_sw_phv_mem_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_intf_interrupt")) { int_intf_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_int_groups_int_enable_rw_reg_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "int_bndl0_enable")) { int_bndl0_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_bndl1_enable")) { int_bndl1_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_ecc_enable")) { int_ecc_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_fifo1_enable")) { int_fifo1_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_fifo2_enable")) { int_fifo2_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe0_enable")) { int_pe0_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe1_enable")) { int_pe1_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe2_enable")) { int_pe2_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe3_enable")) { int_pe3_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe4_enable")) { int_pe4_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe5_enable")) { int_pe5_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe6_enable")) { int_pe6_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe7_enable")) { int_pe7_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe8_enable")) { int_pe8_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pe9_enable")) { int_pe9_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_pa_enable")) { int_pa_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_sw_phv_mem_enable")) { int_sw_phv_mem_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_intf_enable")) { int_intf_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_intgrp_status_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_rw_reg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_rw_reg.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_dbg_mem_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_dbg_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_sw_phv_mem_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "spare")) { spare(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_sw_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rsvd")) { rsvd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl1_state_lkp_sram_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cmd")) { cmd(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = entry.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "x_data")) { x_data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "y_data")) { y_data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "valid")) { valid(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl1_state_lkp_tcam_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rsvd")) { rsvd(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc")) { ecc(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl0_state_lkp_sram_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cmd")) { cmd(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = entry.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "x_data")) { x_data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "y_data")) { y_data(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "valid")) { valid(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_dhs_bndl0_state_lkp_tcam_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_preparse_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dff_sop")) { dff_sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dff_eop")) { dff_eop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eff")) { eff(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_preparse_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "state")) { state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dq_state")) { dq_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dff_empty")) { dff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dff_full")) { dff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eff_empty")) { eff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eff_full")) { eff_full(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_preparse_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "spare")) { spare(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bypass")) { bypass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tm_iport_enc_en")) { tm_iport_enc_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "udp_dstport_roce_val0")) { udp_dstport_roce_val0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "udp_dstport_roce_val1")) { udp_dstport_roce_val1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "udp_dstport_vxlan_val0")) { udp_dstport_vxlan_val0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "udp_dstport_vxlan_val1")) { udp_dstport_vxlan_val1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "vxlan_flag_mask")) { vxlan_flag_mask(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "vxlan_flag_val")) { vxlan_flag_val(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_spare_dbg_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_spare_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "fld0_inst")) { fld0_inst(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_inst")) { fld1_inst(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_inst")) { fld2_inst(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_inst")) { fld3_inst(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_debug_port_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "enable")) { enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "select")) { select(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_debug_ctrl_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "deq_stall_en")) { deq_stall_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dbg_mem_sel")) { dbg_mem_sel(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dbg_bndl_sel")) { dbg_bndl_sel(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dbg_bus_sel")) { dbg_bus_sel(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eccbypass")) { eccbypass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe_alloc_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "state")) { state(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_queue")) { pkt_queue(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_queue")) { pkt_queue(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_fifo_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dp_if_ff_full")) { dp_if_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dp_if_ff_empty")) { dp_if_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_if_ff_full")) { ohi_if_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_if_ff_empty")) { ohi_if_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_if_ff_full")) { ma_if_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ma_if_ff_empty")) { ma_if_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pb_if_ff_full")) { pb_if_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pb_if_ff_empty")) { pb_if_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_mtu_ff_full")) { pkt_mtu_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_mtu_ff_empty")) { pkt_mtu_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "outphv_ff_full")) { outphv_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "outphv_ff_empty")) { outphv_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "outohi_ff_full")) { outohi_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "outohi_ff_empty")) { outohi_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "chk_ff_full")) { chk_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "chk_ff_empty")) { chk_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_qctl_ff_full")) { pe0_qctl_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_qctl_ff_empty")) { pe0_qctl_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_phv_ff_full")) { pe0_phv_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_phv_ff_empty")) { pe0_phv_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_ohi_ff_full")) { pe0_ohi_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe0_ohi_ff_empty")) { pe0_ohi_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_qctl_ff_full")) { pe1_qctl_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_qctl_ff_empty")) { pe1_qctl_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_phv_ff_full")) { pe1_phv_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_phv_ff_empty")) { pe1_phv_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_ohi_ff_full")) { pe1_ohi_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe1_ohi_ff_empty")) { pe1_ohi_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_qctl_ff_full")) { pe2_qctl_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_qctl_ff_empty")) { pe2_qctl_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_phv_ff_full")) { pe2_phv_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_phv_ff_empty")) { pe2_phv_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_ohi_ff_full")) { pe2_ohi_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe2_ohi_ff_empty")) { pe2_ohi_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_qctl_ff_full")) { pe3_qctl_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_qctl_ff_empty")) { pe3_qctl_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_phv_ff_full")) { pe3_phv_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_phv_ff_empty")) { pe3_phv_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_ohi_ff_full")) { pe3_ohi_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe3_ohi_ff_empty")) { pe3_ohi_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_qctl_ff_full")) { pe4_qctl_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_qctl_ff_empty")) { pe4_qctl_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_phv_ff_full")) { pe4_phv_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_phv_ff_empty")) { pe4_phv_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_ohi_ff_full")) { pe4_ohi_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe4_ohi_ff_empty")) { pe4_ohi_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_qctl_ff_full")) { pe5_qctl_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_qctl_ff_empty")) { pe5_qctl_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_phv_ff_full")) { pe5_phv_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_phv_ff_empty")) { pe5_phv_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_ohi_ff_full")) { pe5_ohi_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe5_ohi_ff_empty")) { pe5_ohi_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_qctl_ff_full")) { pe6_qctl_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_qctl_ff_empty")) { pe6_qctl_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_phv_ff_full")) { pe6_phv_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_phv_ff_empty")) { pe6_phv_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_ohi_ff_full")) { pe6_ohi_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe6_ohi_ff_empty")) { pe6_ohi_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_qctl_ff_full")) { pe7_qctl_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_qctl_ff_empty")) { pe7_qctl_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_phv_ff_full")) { pe7_phv_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_phv_ff_empty")) { pe7_phv_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_ohi_ff_full")) { pe7_ohi_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe7_ohi_ff_empty")) { pe7_ohi_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_qctl_ff_full")) { pe8_qctl_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_qctl_ff_empty")) { pe8_qctl_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_phv_ff_full")) { pe8_phv_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_phv_ff_empty")) { pe8_phv_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_ohi_ff_full")) { pe8_ohi_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe8_ohi_ff_empty")) { pe8_ohi_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_qctl_ff_full")) { pe9_qctl_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_qctl_ff_empty")) { pe9_qctl_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_phv_ff_full")) { pe9_phv_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_phv_ff_empty")) { pe9_phv_ff_empty(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_ohi_ff_full")) { pe9_ohi_ff_full(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe9_ohi_ff_empty")) { pe9_ohi_ff_empty(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl1_state_lkp_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { err_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { err_log(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl0_state_lkp_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { err_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { err_log(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe9_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { err_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { err_log(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { pe_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { phv_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { pkt_state(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe8_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { err_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { err_log(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { pe_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { phv_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { pkt_state(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe7_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { err_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { err_log(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { pe_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { phv_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { pkt_state(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe6_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { err_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { err_log(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { pe_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { phv_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { pkt_state(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe5_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { err_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { err_log(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { pe_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { phv_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { pkt_state(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe4_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { err_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { err_log(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { pe_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { phv_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { pkt_state(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe3_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { err_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { err_log(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { pe_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { phv_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { pkt_state(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe2_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { err_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { err_log(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { pe_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { phv_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { pkt_state(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { err_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { err_log(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { pe_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { phv_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { pkt_state(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { err_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_log")) { err_log(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_state")) { pe_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_state")) { phv_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt_state")) { pkt_state(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_chkr_seq_id_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ohi")) { ohi(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pkt")) { pkt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_csum4_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { err_vec(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_csum3_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { err_vec(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_csum2_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { err_vec(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_csum1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { err_vec(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_csum0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "err_vec")) { err_vec(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_reorder_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "seq_state")) { seq_state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "seq_num")) { seq_num(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_srdy_vec")) { ohi_srdy_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_srdy_vec")) { phv_srdy_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "match_vec")) { match_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_vec")) { eop_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drdy_vec_d")) { drdy_vec_d(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_reorder_phv_not_sop_err_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "match_vec")) { match_vec(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_sop_vec")) { phv_sop_vec(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_sw_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecc_correctable")) { ecc_correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_uncorrectable")) { ecc_uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_syndrome")) { ecc_syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_addr")) { ecc_addr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_sw_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecc_detect")) { ecc_detect(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_correct")) { ecc_correct(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_bypass")) { ecc_bypass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_sw_phv_state_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "done")) { done(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "current_insertion_period")) { current_insertion_period(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "current_counter")) { current_counter(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "current_flit")) { current_flit(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "current_qid")) { current_qid(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_sw_phv_config_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "start_addr")) { start_addr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "num_flits")) { num_flits(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "insertion_period_clocks")) { insertion_period_clocks(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "counter_max")) { counter_max(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "qid_min")) { qid_min(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "qid_max")) { qid_max(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_sw_phv_control_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "start_enable")) { start_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "counter_repeat_enable")) { counter_repeat_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "qid_repeat_enable")) { qid_repeat_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "localtime_enable")) { localtime_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "frame_size_enable")) { frame_size_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "packet_len_enable")) { packet_len_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "qid_enable")) { qid_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_sw_phv_global_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "start_enable")) { start_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err_enable")) { err_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe9_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe9_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe8_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe8_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe7_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe7_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe6_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe6_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe5_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe5_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe4_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe4_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe3_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe3_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe2_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe2_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe1_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe1_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pe0_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pe0_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_outq_ohi_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_outq_ohi_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_outq_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_outq_phv_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl1_inq_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl1_inq_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl0_inq_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl0_inq_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl1_state_lkp_sram_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecc_disable_det")) { ecc_disable_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_disable_cor")) { ecc_disable_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dhs_ecc_bypass")) { dhs_ecc_bypass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl0_state_lkp_sram_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecc_disable_det")) { ecc_disable_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_disable_cor")) { ecc_disable_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dhs_ecc_bypass")) { dhs_ecc_bypass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_pkt_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_pkt_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecc_disable_det")) { ecc_disable_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_disable_cor")) { ecc_disable_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_csr_intr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dowstream")) { dowstream(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dowstream_enable")) { dowstream_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe9_phv_out_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe9_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { pkt_release(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { ohi_out(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe8_phv_out_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe8_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { pkt_release(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { ohi_out(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe7_phv_out_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe7_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { pkt_release(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { ohi_out(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe6_phv_out_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe6_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { pkt_release(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { ohi_out(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe5_phv_out_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe5_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { pkt_release(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { ohi_out(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe4_phv_out_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe4_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { pkt_release(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { ohi_out(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe3_phv_out_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe3_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { pkt_release(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { ohi_out(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe2_phv_out_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe2_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { pkt_release(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { ohi_out(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe1_phv_out_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { pkt_release(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { ohi_out(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe0_phv_out_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pkt_release")) { pkt_release(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ohi_out")) { ohi_out(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_ohi_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err")) { err(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_err")) { sop_err(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_err")) { eop_err(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_sw_phv_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err")) { err(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_err")) { sop_err(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_err")) { eop_err(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_ma_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err")) { err(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_err")) { sop_err(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_err")) { eop_err(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_dp_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err")) { err(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_err")) { sop_err(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_err")) { eop_err(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_CNT_ppa_pb_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop")) { sop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop")) { eop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "err")) { err(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_err")) { sop_err(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_err")) { eop_err(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_align_chk_profile_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "addsub_start")) { addsub_start(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "start_adj")) { start_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "mod_log2")) { mod_log2(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_len_chk_profile_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "len_mask")) { len_mask(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "len_shift_left")) { len_shift_left(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "len_shift_val")) { len_shift_val(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addsub_start")) { addsub_start(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "start_adj")) { start_adj(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_csum_phdr_profile_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "fld0_fld_en")) { fld0_fld_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_fld_align")) { fld0_fld_align(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_fld_start")) { fld0_fld_start(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_fld_end")) { fld0_fld_end(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_add_len")) { fld0_add_len(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_fld_en")) { fld1_fld_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_fld_align")) { fld1_fld_align(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_fld_start")) { fld1_fld_start(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_fld_end")) { fld1_fld_end(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_add_len")) { fld1_add_len(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_fld_en")) { fld2_fld_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_fld_align")) { fld2_fld_align(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_fld_start")) { fld2_fld_start(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_fld_end")) { fld2_fld_end(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_add_len")) { fld2_add_len(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_fld_en")) { fld3_fld_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_fld_align")) { fld3_fld_align(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_fld_start")) { fld3_fld_start(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_fld_end")) { fld3_fld_end(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_add_len")) { fld3_add_len(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_csum_profile_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "csum_loc_use_phdr_ohi")) { csum_loc_use_phdr_ohi(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum_8b")) { csum_8b(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_csum_flit_num")) { phv_csum_flit_num(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "end_eop")) { end_eop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "len_mask")) { len_mask(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "len_shift_left")) { len_shift_left(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "len_shift_val")) { len_shift_val(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addsub_start")) { addsub_start(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "start_adj")) { start_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addsub_end")) { addsub_end(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "end_adj")) { end_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addsub_phdr")) { addsub_phdr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phdr_adj")) { phdr_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addsub_csum_loc")) { addsub_csum_loc(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum_loc_adj")) { csum_loc_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "align")) { align(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "add_val")) { add_val(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_crc_mask_profile_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "fld0_mask_en")) { fld0_mask_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_use_ohi")) { fld0_use_ohi(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_start_adj")) { fld0_start_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_end_adj")) { fld0_end_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_fill")) { fld0_fill(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld0_skip_first_nibble")) { fld0_skip_first_nibble(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_mask_en")) { fld1_mask_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_use_ohi")) { fld1_use_ohi(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_start_adj")) { fld1_start_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_end_adj")) { fld1_end_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_fill")) { fld1_fill(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld1_skip_first_nibble")) { fld1_skip_first_nibble(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_mask_en")) { fld2_mask_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_use_ohi")) { fld2_use_ohi(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_start_adj")) { fld2_start_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_end_adj")) { fld2_end_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_fill")) { fld2_fill(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld2_skip_first_nibble")) { fld2_skip_first_nibble(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_mask_en")) { fld3_mask_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_use_ohi")) { fld3_use_ohi(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_start_adj")) { fld3_start_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_end_adj")) { fld3_end_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_fill")) { fld3_fill(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld3_skip_first_nibble")) { fld3_skip_first_nibble(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld4_mask_en")) { fld4_mask_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld4_use_ohi")) { fld4_use_ohi(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld4_start_adj")) { fld4_start_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld4_end_adj")) { fld4_end_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld4_fill")) { fld4_fill(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld4_skip_first_nibble")) { fld4_skip_first_nibble(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld5_mask_en")) { fld5_mask_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld5_use_ohi")) { fld5_use_ohi(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld5_start_adj")) { fld5_start_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld5_end_adj")) { fld5_end_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld5_fill")) { fld5_fill(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "fld5_skip_first_nibble")) { fld5_skip_first_nibble(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_crc_profile_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "len_mask")) { len_mask(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "len_shift_left")) { len_shift_left(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "len_shift_val")) { len_shift_val(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addsub_start")) { addsub_start(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "start_adj")) { start_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addsub_end")) { addsub_end(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "end_adj")) { end_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addsub_mask")) { addsub_mask(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "mask_adj")) { mask_adj(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "end_eop")) { end_eop(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "mask_prof_sel")) { mask_prof_sel(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "hit")) { hit(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "hit_addr")) { hit_addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "key")) { key(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "mask")) { mask(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "vld")) { vld(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "hit")) { hit(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "hit_addr")) { hit_addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "key")) { key(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "mask")) { mask(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "vld")) { vld(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_init_profile_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "curr_offset")) { curr_offset(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "state")) { state(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "lkp_val_pkt_idx0")) { lkp_val_pkt_idx0(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "lkp_val_pkt_idx1")) { lkp_val_pkt_idx1(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "lkp_val_pkt_idx2")) { lkp_val_pkt_idx2(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_ctrl_thresh_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "outphv_ff")) { outphv_ff(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_ff")) { phv_ff(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "chk_ff")) { chk_ff(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_cfg_ctrl_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "pe_enable")) { pe_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "parse_loop_cnt")) { parse_loop_cnt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "num_phv_flit")) { num_phv_flit(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "state_lkp_catchall_entry")) { state_lkp_catchall_entry(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_set_hw_err_en")) { phv_set_hw_err_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "phv_set_parser_err_en")) { phv_set_parser_err_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "gso_csum_en")) { gso_csum_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pe_err_vec_en")) { pe_err_vec_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "end_offset_en")) { end_offset_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "end_offset_flit_num")) { end_offset_flit_num(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tcam_key_ctl")) { tcam_key_ctl(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crc_start_offset_err_en")) { crc_start_offset_err_en(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "csum_start_offset_err_en")) { csum_start_offset_err_en(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_rdintr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ireg")) { ireg(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_base_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "scratch_reg")) { scratch_reg(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_ppa_csr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = base.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = rdintr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_ctrl.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_ctrl_thresh.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl0_state_lkp_tcam_grst.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl0_state_lkp_tcam_ind.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl0_state_lkp_tcam_ind.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl1_state_lkp_tcam_grst.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl1_state_lkp_tcam_ind.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl1_state_lkp_tcam_ind.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pb.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_dp.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_ma.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_sw_phv.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_ohi.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe0_pkt_in.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe0_phv_out.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe1_pkt_in.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe1_phv_out.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe2_pkt_in.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe2_phv_out.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe3_pkt_in.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe3_phv_out.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe4_pkt_in.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe4.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe4_phv_out.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe5_pkt_in.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe5.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe5_phv_out.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe6_pkt_in.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe6.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe6_phv_out.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe7_pkt_in.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe7.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe7_phv_out.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe8_pkt_in.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe8.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe8_phv_out.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe9_pkt_in.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe9.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_ppa_pe9_phv_out.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = csr_intr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pkt_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pkt_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl0_state_lkp_sram.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl0_state_lkp_sram.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl1_state_lkp_sram.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl1_state_lkp_sram.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl0_inq_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl0_inq_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl1_inq_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl1_inq_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_outq_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_outq_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_outq_ohi_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_outq_ohi_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl0_state_lkp_tcam.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl0_state_lkp_tcam.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_bndl1_state_lkp_tcam.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl1_state_lkp_tcam.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe0_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe0_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe1_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe1_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe2_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe2_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe3_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe3_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe4_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe4_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe5_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe5_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe6_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe6_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe7_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe7_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe8_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe8_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_pe9_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe9_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_sw_phv_global.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_sw_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_sw_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_reorder_phv_not_sop_err.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_reorder.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_csum0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_csum1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_csum2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_csum3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_csum4.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_chkr_seq_id.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe4.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe5.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe6.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe7.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe8.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe9.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl0_state_lkp.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl1_state_lkp.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_fifo.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bndl1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_pe_alloc.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_debug_ctrl.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_debug_port.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_spare.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_spare_dbg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_preparse.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_preparse.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = CNT_preparse.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_bndl0_state_lkp_tcam.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_bndl0_state_lkp_tcam_ind.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_bndl0_state_lkp_sram.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_bndl1_state_lkp_tcam.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_bndl1_state_lkp_tcam_ind.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_bndl1_state_lkp_sram.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_sw_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_dbg_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_groups.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_bndl0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_bndl1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_ecc.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_fifo1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_fifo2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe4.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe5.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe6.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe7.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe8.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pe9.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_pa.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_intf.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_sw_phv_mem.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_sw_phv_mem_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ecc_uncorrectable_enable");
    ret_vec.push_back("ecc_correctable_enable");
    ret_vec.push_back("phv_invalid_sram_enable");
    ret_vec.push_back("phv_invalid_data_enable");
    ret_vec.push_back("phv_done0_enable");
    ret_vec.push_back("phv_done1_enable");
    ret_vec.push_back("phv_done2_enable");
    ret_vec.push_back("phv_done3_enable");
    ret_vec.push_back("phv_done4_enable");
    ret_vec.push_back("phv_done5_enable");
    ret_vec.push_back("phv_done6_enable");
    ret_vec.push_back("phv_done7_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_sw_phv_mem_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ecc_uncorrectable_interrupt");
    ret_vec.push_back("ecc_correctable_interrupt");
    ret_vec.push_back("phv_invalid_sram_interrupt");
    ret_vec.push_back("phv_invalid_data_interrupt");
    ret_vec.push_back("phv_done0_interrupt");
    ret_vec.push_back("phv_done1_interrupt");
    ret_vec.push_back("phv_done2_interrupt");
    ret_vec.push_back("phv_done3_interrupt");
    ret_vec.push_back("phv_done4_interrupt");
    ret_vec.push_back("phv_done5_interrupt");
    ret_vec.push_back("phv_done6_interrupt");
    ret_vec.push_back("phv_done7_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_sw_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_intf_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pb_err_enable");
    ret_vec.push_back("pb_sop_err_enable");
    ret_vec.push_back("pb_eop_err_enable");
    ret_vec.push_back("dp_err_enable");
    ret_vec.push_back("dp_sop_err_enable");
    ret_vec.push_back("dp_eop_err_enable");
    ret_vec.push_back("ohi_err_enable");
    ret_vec.push_back("ohi_sop_err_enable");
    ret_vec.push_back("ohi_eop_err_enable");
    ret_vec.push_back("sw_phv_err_enable");
    ret_vec.push_back("sw_phv_sop_err_enable");
    ret_vec.push_back("sw_phv_eop_err_enable");
    ret_vec.push_back("ma_err_enable");
    ret_vec.push_back("ma_sop_err_enable");
    ret_vec.push_back("ma_eop_err_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_intf_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pb_err_interrupt");
    ret_vec.push_back("pb_sop_err_interrupt");
    ret_vec.push_back("pb_eop_err_interrupt");
    ret_vec.push_back("dp_err_interrupt");
    ret_vec.push_back("dp_sop_err_interrupt");
    ret_vec.push_back("dp_eop_err_interrupt");
    ret_vec.push_back("ohi_err_interrupt");
    ret_vec.push_back("ohi_sop_err_interrupt");
    ret_vec.push_back("ohi_eop_err_interrupt");
    ret_vec.push_back("sw_phv_err_interrupt");
    ret_vec.push_back("sw_phv_sop_err_interrupt");
    ret_vec.push_back("sw_phv_eop_err_interrupt");
    ret_vec.push_back("ma_err_interrupt");
    ret_vec.push_back("ma_sop_err_interrupt");
    ret_vec.push_back("ma_eop_err_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_intf_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_pa_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("reorder_phv_not_sop_enable");
    ret_vec.push_back("csum0_not_enuf_bytes_enable");
    ret_vec.push_back("csum0_start_more_than_end_offset_enable");
    ret_vec.push_back("csum1_not_enuf_bytes_enable");
    ret_vec.push_back("csum1_start_more_than_end_offset_enable");
    ret_vec.push_back("csum2_not_enuf_bytes_enable");
    ret_vec.push_back("csum2_start_more_than_end_offset_enable");
    ret_vec.push_back("csum3_not_enuf_bytes_enable");
    ret_vec.push_back("csum3_start_more_than_end_offset_enable");
    ret_vec.push_back("csum4_not_enuf_bytes_enable");
    ret_vec.push_back("csum4_start_more_than_end_offset_enable");
    ret_vec.push_back("crc_not_enuf_bytes_enable");
    ret_vec.push_back("crc_start_more_than_end_offset_enable");
    ret_vec.push_back("chkr_phv_single_flit_enable");
    ret_vec.push_back("chkr_phv_not_sop_enable");
    ret_vec.push_back("chkr_pkt_not_sop_enable");
    ret_vec.push_back("chkr_seq_id_enable");
    ret_vec.push_back("preparse_line0_not_sop_enable");
    ret_vec.push_back("preparse_dff_not_sop_enable");
    ret_vec.push_back("preparse_dff_ovflow_enable");
    ret_vec.push_back("preparse_eff_ovflow_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_pa_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("reorder_phv_not_sop_interrupt");
    ret_vec.push_back("csum0_not_enuf_bytes_interrupt");
    ret_vec.push_back("csum0_start_more_than_end_offset_interrupt");
    ret_vec.push_back("csum1_not_enuf_bytes_interrupt");
    ret_vec.push_back("csum1_start_more_than_end_offset_interrupt");
    ret_vec.push_back("csum2_not_enuf_bytes_interrupt");
    ret_vec.push_back("csum2_start_more_than_end_offset_interrupt");
    ret_vec.push_back("csum3_not_enuf_bytes_interrupt");
    ret_vec.push_back("csum3_start_more_than_end_offset_interrupt");
    ret_vec.push_back("csum4_not_enuf_bytes_interrupt");
    ret_vec.push_back("csum4_start_more_than_end_offset_interrupt");
    ret_vec.push_back("crc_not_enuf_bytes_interrupt");
    ret_vec.push_back("crc_start_more_than_end_offset_interrupt");
    ret_vec.push_back("chkr_phv_single_flit_interrupt");
    ret_vec.push_back("chkr_phv_not_sop_interrupt");
    ret_vec.push_back("chkr_pkt_not_sop_interrupt");
    ret_vec.push_back("chkr_seq_id_interrupt");
    ret_vec.push_back("preparse_line0_not_sop_interrupt");
    ret_vec.push_back("preparse_dff_not_sop_interrupt");
    ret_vec.push_back("preparse_dff_ovflow_interrupt");
    ret_vec.push_back("preparse_eff_ovflow_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_pa_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_pe9_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("qctl_skid_depth_not_zero_enable");
    ret_vec.push_back("qctl_not_sop_after_pkt_release_enable");
    ret_vec.push_back("unexpected_non_sop_enable");
    ret_vec.push_back("exceed_phv_flit_cnt_enable");
    ret_vec.push_back("exceed_parse_loop_cnt_enable");
    ret_vec.push_back("offset_out_of_range_enable");
    ret_vec.push_back("pkt_size_chk_enable");
    ret_vec.push_back("offset_jump_chk_enable");
    ret_vec.push_back("d1_not_valid_enable");
    ret_vec.push_back("phv_upr_idx_less_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_pe9_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("qctl_skid_depth_not_zero_interrupt");
    ret_vec.push_back("qctl_not_sop_after_pkt_release_interrupt");
    ret_vec.push_back("unexpected_non_sop_interrupt");
    ret_vec.push_back("exceed_phv_flit_cnt_interrupt");
    ret_vec.push_back("exceed_parse_loop_cnt_interrupt");
    ret_vec.push_back("offset_out_of_range_interrupt");
    ret_vec.push_back("pkt_size_chk_interrupt");
    ret_vec.push_back("offset_jump_chk_interrupt");
    ret_vec.push_back("d1_not_valid_interrupt");
    ret_vec.push_back("phv_upr_idx_less_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_pe9_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_fifo2_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("dp_if_ff_ovflow_enable");
    ret_vec.push_back("ohi_if_ff_ovflow_enable");
    ret_vec.push_back("ma_if_ff_ovflow_enable");
    ret_vec.push_back("pb_if_ff_ovflow_enable");
    ret_vec.push_back("pkt_mtu_ff_ovflow_enable");
    ret_vec.push_back("outphv_ff_ovflow_enable");
    ret_vec.push_back("outohi_ff_ovflow_enable");
    ret_vec.push_back("chk_ff_ovflow_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_fifo2_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("dp_if_ff_ovflow_interrupt");
    ret_vec.push_back("ohi_if_ff_ovflow_interrupt");
    ret_vec.push_back("ma_if_ff_ovflow_interrupt");
    ret_vec.push_back("pb_if_ff_ovflow_interrupt");
    ret_vec.push_back("pkt_mtu_ff_ovflow_interrupt");
    ret_vec.push_back("outphv_ff_ovflow_interrupt");
    ret_vec.push_back("outohi_ff_ovflow_interrupt");
    ret_vec.push_back("chk_ff_ovflow_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_fifo2_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_fifo1_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pe0_qctl_ff_ovflow_enable");
    ret_vec.push_back("pe1_qctl_ff_ovflow_enable");
    ret_vec.push_back("pe2_qctl_ff_ovflow_enable");
    ret_vec.push_back("pe3_qctl_ff_ovflow_enable");
    ret_vec.push_back("pe4_qctl_ff_ovflow_enable");
    ret_vec.push_back("pe5_qctl_ff_ovflow_enable");
    ret_vec.push_back("pe6_qctl_ff_ovflow_enable");
    ret_vec.push_back("pe7_qctl_ff_ovflow_enable");
    ret_vec.push_back("pe8_qctl_ff_ovflow_enable");
    ret_vec.push_back("pe9_qctl_ff_ovflow_enable");
    ret_vec.push_back("pe0_phv_ff_ovflow_enable");
    ret_vec.push_back("pe1_phv_ff_ovflow_enable");
    ret_vec.push_back("pe2_phv_ff_ovflow_enable");
    ret_vec.push_back("pe3_phv_ff_ovflow_enable");
    ret_vec.push_back("pe4_phv_ff_ovflow_enable");
    ret_vec.push_back("pe5_phv_ff_ovflow_enable");
    ret_vec.push_back("pe6_phv_ff_ovflow_enable");
    ret_vec.push_back("pe7_phv_ff_ovflow_enable");
    ret_vec.push_back("pe8_phv_ff_ovflow_enable");
    ret_vec.push_back("pe9_phv_ff_ovflow_enable");
    ret_vec.push_back("pe0_ohi_ff_ovflow_enable");
    ret_vec.push_back("pe1_ohi_ff_ovflow_enable");
    ret_vec.push_back("pe2_ohi_ff_ovflow_enable");
    ret_vec.push_back("pe3_ohi_ff_ovflow_enable");
    ret_vec.push_back("pe4_ohi_ff_ovflow_enable");
    ret_vec.push_back("pe5_ohi_ff_ovflow_enable");
    ret_vec.push_back("pe6_ohi_ff_ovflow_enable");
    ret_vec.push_back("pe7_ohi_ff_ovflow_enable");
    ret_vec.push_back("pe8_ohi_ff_ovflow_enable");
    ret_vec.push_back("pe9_ohi_ff_ovflow_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_fifo1_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pe0_qctl_ff_ovflow_interrupt");
    ret_vec.push_back("pe1_qctl_ff_ovflow_interrupt");
    ret_vec.push_back("pe2_qctl_ff_ovflow_interrupt");
    ret_vec.push_back("pe3_qctl_ff_ovflow_interrupt");
    ret_vec.push_back("pe4_qctl_ff_ovflow_interrupt");
    ret_vec.push_back("pe5_qctl_ff_ovflow_interrupt");
    ret_vec.push_back("pe6_qctl_ff_ovflow_interrupt");
    ret_vec.push_back("pe7_qctl_ff_ovflow_interrupt");
    ret_vec.push_back("pe8_qctl_ff_ovflow_interrupt");
    ret_vec.push_back("pe9_qctl_ff_ovflow_interrupt");
    ret_vec.push_back("pe0_phv_ff_ovflow_interrupt");
    ret_vec.push_back("pe1_phv_ff_ovflow_interrupt");
    ret_vec.push_back("pe2_phv_ff_ovflow_interrupt");
    ret_vec.push_back("pe3_phv_ff_ovflow_interrupt");
    ret_vec.push_back("pe4_phv_ff_ovflow_interrupt");
    ret_vec.push_back("pe5_phv_ff_ovflow_interrupt");
    ret_vec.push_back("pe6_phv_ff_ovflow_interrupt");
    ret_vec.push_back("pe7_phv_ff_ovflow_interrupt");
    ret_vec.push_back("pe8_phv_ff_ovflow_interrupt");
    ret_vec.push_back("pe9_phv_ff_ovflow_interrupt");
    ret_vec.push_back("pe0_ohi_ff_ovflow_interrupt");
    ret_vec.push_back("pe1_ohi_ff_ovflow_interrupt");
    ret_vec.push_back("pe2_ohi_ff_ovflow_interrupt");
    ret_vec.push_back("pe3_ohi_ff_ovflow_interrupt");
    ret_vec.push_back("pe4_ohi_ff_ovflow_interrupt");
    ret_vec.push_back("pe5_ohi_ff_ovflow_interrupt");
    ret_vec.push_back("pe6_ohi_ff_ovflow_interrupt");
    ret_vec.push_back("pe7_ohi_ff_ovflow_interrupt");
    ret_vec.push_back("pe8_ohi_ff_ovflow_interrupt");
    ret_vec.push_back("pe9_ohi_ff_ovflow_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_fifo1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_ecc_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pkt_mem_uncorrectable_enable");
    ret_vec.push_back("pkt_mem_correctable_enable");
    ret_vec.push_back("bndl0_state_lkp_sram_uncorrectable_enable");
    ret_vec.push_back("bndl0_state_lkp_sram_correctable_enable");
    ret_vec.push_back("bndl1_state_lkp_sram_uncorrectable_enable");
    ret_vec.push_back("bndl1_state_lkp_sram_correctable_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_ecc_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pkt_mem_uncorrectable_interrupt");
    ret_vec.push_back("pkt_mem_correctable_interrupt");
    ret_vec.push_back("bndl0_state_lkp_sram_uncorrectable_interrupt");
    ret_vec.push_back("bndl0_state_lkp_sram_correctable_interrupt");
    ret_vec.push_back("bndl1_state_lkp_sram_uncorrectable_interrupt");
    ret_vec.push_back("bndl1_state_lkp_sram_correctable_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_ecc_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_bndl1_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("state_lkp_srch_hit_addr_range_err_enable");
    ret_vec.push_back("state_lkp_srch_miss_enable");
    ret_vec.push_back("state_lkp_srch_req_not_rdy_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_bndl0_intreg_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("state_lkp_srch_hit_addr_range_err_interrupt");
    ret_vec.push_back("state_lkp_srch_miss_interrupt");
    ret_vec.push_back("state_lkp_srch_req_not_rdy_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_bndl0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_intreg_status_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("int_bndl0_interrupt");
    ret_vec.push_back("int_bndl1_interrupt");
    ret_vec.push_back("int_ecc_interrupt");
    ret_vec.push_back("int_fifo1_interrupt");
    ret_vec.push_back("int_fifo2_interrupt");
    ret_vec.push_back("int_pe0_interrupt");
    ret_vec.push_back("int_pe1_interrupt");
    ret_vec.push_back("int_pe2_interrupt");
    ret_vec.push_back("int_pe3_interrupt");
    ret_vec.push_back("int_pe4_interrupt");
    ret_vec.push_back("int_pe5_interrupt");
    ret_vec.push_back("int_pe6_interrupt");
    ret_vec.push_back("int_pe7_interrupt");
    ret_vec.push_back("int_pe8_interrupt");
    ret_vec.push_back("int_pe9_interrupt");
    ret_vec.push_back("int_pa_interrupt");
    ret_vec.push_back("int_sw_phv_mem_interrupt");
    ret_vec.push_back("int_intf_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_int_groups_int_enable_rw_reg_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("int_bndl0_enable");
    ret_vec.push_back("int_bndl1_enable");
    ret_vec.push_back("int_ecc_enable");
    ret_vec.push_back("int_fifo1_enable");
    ret_vec.push_back("int_fifo2_enable");
    ret_vec.push_back("int_pe0_enable");
    ret_vec.push_back("int_pe1_enable");
    ret_vec.push_back("int_pe2_enable");
    ret_vec.push_back("int_pe3_enable");
    ret_vec.push_back("int_pe4_enable");
    ret_vec.push_back("int_pe5_enable");
    ret_vec.push_back("int_pe6_enable");
    ret_vec.push_back("int_pe7_enable");
    ret_vec.push_back("int_pe8_enable");
    ret_vec.push_back("int_pe9_enable");
    ret_vec.push_back("int_pa_enable");
    ret_vec.push_back("int_sw_phv_mem_enable");
    ret_vec.push_back("int_intf_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_intgrp_status_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_rw_reg.get_fields(level-1)) {
            ret_vec.push_back("int_enable_rw_reg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_rw_reg.get_fields(level-1)) {
            ret_vec.push_back("int_rw_reg." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_dhs_dbg_mem_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_dhs_dbg_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_dhs_sw_phv_mem_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("spare");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_dhs_sw_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_dhs_bndl1_state_lkp_sram_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("rsvd");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_dhs_bndl1_state_lkp_sram_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("cmd");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_dhs_bndl1_state_lkp_tcam_ind_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : entry.get_fields(level-1)) {
            ret_vec.push_back("entry." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_dhs_bndl1_state_lkp_tcam_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("x_data");
    ret_vec.push_back("y_data");
    ret_vec.push_back("valid");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_dhs_bndl1_state_lkp_tcam_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_dhs_bndl0_state_lkp_sram_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    ret_vec.push_back("rsvd");
    ret_vec.push_back("ecc");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_dhs_bndl0_state_lkp_sram_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("cmd");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_dhs_bndl0_state_lkp_tcam_ind_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : entry.get_fields(level-1)) {
            ret_vec.push_back("entry." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_dhs_bndl0_state_lkp_tcam_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("x_data");
    ret_vec.push_back("y_data");
    ret_vec.push_back("valid");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_dhs_bndl0_state_lkp_tcam_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_preparse_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("dff_sop");
    ret_vec.push_back("dff_eop");
    ret_vec.push_back("eff");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_preparse_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("state");
    ret_vec.push_back("dq_state");
    ret_vec.push_back("dff_empty");
    ret_vec.push_back("dff_full");
    ret_vec.push_back("eff_empty");
    ret_vec.push_back("eff_full");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_preparse_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("spare");
    ret_vec.push_back("bypass");
    ret_vec.push_back("tm_iport_enc_en");
    ret_vec.push_back("udp_dstport_roce_val0");
    ret_vec.push_back("udp_dstport_roce_val1");
    ret_vec.push_back("udp_dstport_vxlan_val0");
    ret_vec.push_back("udp_dstport_vxlan_val1");
    ret_vec.push_back("vxlan_flag_mask");
    ret_vec.push_back("vxlan_flag_val");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_spare_dbg_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_spare_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("fld0_inst");
    ret_vec.push_back("fld1_inst");
    ret_vec.push_back("fld2_inst");
    ret_vec.push_back("fld3_inst");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_debug_port_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("enable");
    ret_vec.push_back("select");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_debug_ctrl_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("deq_stall_en");
    ret_vec.push_back("dbg_mem_sel");
    ret_vec.push_back("dbg_bndl_sel");
    ret_vec.push_back("dbg_bus_sel");
    ret_vec.push_back("eccbypass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe_alloc_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("state");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_bndl1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pkt_queue");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_bndl0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pkt_queue");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_fifo_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("dp_if_ff_full");
    ret_vec.push_back("dp_if_ff_empty");
    ret_vec.push_back("ohi_if_ff_full");
    ret_vec.push_back("ohi_if_ff_empty");
    ret_vec.push_back("ma_if_ff_full");
    ret_vec.push_back("ma_if_ff_empty");
    ret_vec.push_back("pb_if_ff_full");
    ret_vec.push_back("pb_if_ff_empty");
    ret_vec.push_back("pkt_mtu_ff_full");
    ret_vec.push_back("pkt_mtu_ff_empty");
    ret_vec.push_back("outphv_ff_full");
    ret_vec.push_back("outphv_ff_empty");
    ret_vec.push_back("outohi_ff_full");
    ret_vec.push_back("outohi_ff_empty");
    ret_vec.push_back("chk_ff_full");
    ret_vec.push_back("chk_ff_empty");
    ret_vec.push_back("pe0_qctl_ff_full");
    ret_vec.push_back("pe0_qctl_ff_empty");
    ret_vec.push_back("pe0_phv_ff_full");
    ret_vec.push_back("pe0_phv_ff_empty");
    ret_vec.push_back("pe0_ohi_ff_full");
    ret_vec.push_back("pe0_ohi_ff_empty");
    ret_vec.push_back("pe1_qctl_ff_full");
    ret_vec.push_back("pe1_qctl_ff_empty");
    ret_vec.push_back("pe1_phv_ff_full");
    ret_vec.push_back("pe1_phv_ff_empty");
    ret_vec.push_back("pe1_ohi_ff_full");
    ret_vec.push_back("pe1_ohi_ff_empty");
    ret_vec.push_back("pe2_qctl_ff_full");
    ret_vec.push_back("pe2_qctl_ff_empty");
    ret_vec.push_back("pe2_phv_ff_full");
    ret_vec.push_back("pe2_phv_ff_empty");
    ret_vec.push_back("pe2_ohi_ff_full");
    ret_vec.push_back("pe2_ohi_ff_empty");
    ret_vec.push_back("pe3_qctl_ff_full");
    ret_vec.push_back("pe3_qctl_ff_empty");
    ret_vec.push_back("pe3_phv_ff_full");
    ret_vec.push_back("pe3_phv_ff_empty");
    ret_vec.push_back("pe3_ohi_ff_full");
    ret_vec.push_back("pe3_ohi_ff_empty");
    ret_vec.push_back("pe4_qctl_ff_full");
    ret_vec.push_back("pe4_qctl_ff_empty");
    ret_vec.push_back("pe4_phv_ff_full");
    ret_vec.push_back("pe4_phv_ff_empty");
    ret_vec.push_back("pe4_ohi_ff_full");
    ret_vec.push_back("pe4_ohi_ff_empty");
    ret_vec.push_back("pe5_qctl_ff_full");
    ret_vec.push_back("pe5_qctl_ff_empty");
    ret_vec.push_back("pe5_phv_ff_full");
    ret_vec.push_back("pe5_phv_ff_empty");
    ret_vec.push_back("pe5_ohi_ff_full");
    ret_vec.push_back("pe5_ohi_ff_empty");
    ret_vec.push_back("pe6_qctl_ff_full");
    ret_vec.push_back("pe6_qctl_ff_empty");
    ret_vec.push_back("pe6_phv_ff_full");
    ret_vec.push_back("pe6_phv_ff_empty");
    ret_vec.push_back("pe6_ohi_ff_full");
    ret_vec.push_back("pe6_ohi_ff_empty");
    ret_vec.push_back("pe7_qctl_ff_full");
    ret_vec.push_back("pe7_qctl_ff_empty");
    ret_vec.push_back("pe7_phv_ff_full");
    ret_vec.push_back("pe7_phv_ff_empty");
    ret_vec.push_back("pe7_ohi_ff_full");
    ret_vec.push_back("pe7_ohi_ff_empty");
    ret_vec.push_back("pe8_qctl_ff_full");
    ret_vec.push_back("pe8_qctl_ff_empty");
    ret_vec.push_back("pe8_phv_ff_full");
    ret_vec.push_back("pe8_phv_ff_empty");
    ret_vec.push_back("pe8_ohi_ff_full");
    ret_vec.push_back("pe8_ohi_ff_empty");
    ret_vec.push_back("pe9_qctl_ff_full");
    ret_vec.push_back("pe9_qctl_ff_empty");
    ret_vec.push_back("pe9_phv_ff_full");
    ret_vec.push_back("pe9_phv_ff_empty");
    ret_vec.push_back("pe9_ohi_ff_full");
    ret_vec.push_back("pe9_ohi_ff_empty");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_bndl1_state_lkp_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_vec");
    ret_vec.push_back("err_log");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_bndl0_state_lkp_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_vec");
    ret_vec.push_back("err_log");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe9_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_vec");
    ret_vec.push_back("err_log");
    ret_vec.push_back("pe_state");
    ret_vec.push_back("phv_state");
    ret_vec.push_back("pkt_state");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe8_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_vec");
    ret_vec.push_back("err_log");
    ret_vec.push_back("pe_state");
    ret_vec.push_back("phv_state");
    ret_vec.push_back("pkt_state");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe7_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_vec");
    ret_vec.push_back("err_log");
    ret_vec.push_back("pe_state");
    ret_vec.push_back("phv_state");
    ret_vec.push_back("pkt_state");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe6_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_vec");
    ret_vec.push_back("err_log");
    ret_vec.push_back("pe_state");
    ret_vec.push_back("phv_state");
    ret_vec.push_back("pkt_state");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe5_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_vec");
    ret_vec.push_back("err_log");
    ret_vec.push_back("pe_state");
    ret_vec.push_back("phv_state");
    ret_vec.push_back("pkt_state");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe4_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_vec");
    ret_vec.push_back("err_log");
    ret_vec.push_back("pe_state");
    ret_vec.push_back("phv_state");
    ret_vec.push_back("pkt_state");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe3_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_vec");
    ret_vec.push_back("err_log");
    ret_vec.push_back("pe_state");
    ret_vec.push_back("phv_state");
    ret_vec.push_back("pkt_state");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe2_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_vec");
    ret_vec.push_back("err_log");
    ret_vec.push_back("pe_state");
    ret_vec.push_back("phv_state");
    ret_vec.push_back("pkt_state");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_vec");
    ret_vec.push_back("err_log");
    ret_vec.push_back("pe_state");
    ret_vec.push_back("phv_state");
    ret_vec.push_back("pkt_state");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_vec");
    ret_vec.push_back("err_log");
    ret_vec.push_back("pe_state");
    ret_vec.push_back("phv_state");
    ret_vec.push_back("pkt_state");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_chkr_seq_id_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ohi");
    ret_vec.push_back("pkt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_csum4_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_vec");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_csum3_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_vec");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_csum2_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_vec");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_csum1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_vec");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_csum0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("err_vec");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_reorder_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("seq_state");
    ret_vec.push_back("seq_num");
    ret_vec.push_back("ohi_srdy_vec");
    ret_vec.push_back("phv_srdy_vec");
    ret_vec.push_back("match_vec");
    ret_vec.push_back("eop_vec");
    ret_vec.push_back("drdy_vec_d");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_reorder_phv_not_sop_err_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("match_vec");
    ret_vec.push_back("phv_sop_vec");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_sw_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ecc_correctable");
    ret_vec.push_back("ecc_uncorrectable");
    ret_vec.push_back("ecc_syndrome");
    ret_vec.push_back("ecc_addr");
    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_sw_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ecc_detect");
    ret_vec.push_back("ecc_correct");
    ret_vec.push_back("ecc_bypass");
    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_sw_phv_state_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("done");
    ret_vec.push_back("current_insertion_period");
    ret_vec.push_back("current_counter");
    ret_vec.push_back("current_flit");
    ret_vec.push_back("current_qid");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_sw_phv_config_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("start_addr");
    ret_vec.push_back("num_flits");
    ret_vec.push_back("insertion_period_clocks");
    ret_vec.push_back("counter_max");
    ret_vec.push_back("qid_min");
    ret_vec.push_back("qid_max");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_sw_phv_control_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("start_enable");
    ret_vec.push_back("counter_repeat_enable");
    ret_vec.push_back("qid_repeat_enable");
    ret_vec.push_back("localtime_enable");
    ret_vec.push_back("frame_size_enable");
    ret_vec.push_back("packet_len_enable");
    ret_vec.push_back("qid_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_sw_phv_global_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("start_enable");
    ret_vec.push_back("err_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe9_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_pe9_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe8_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_pe8_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe7_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_pe7_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe6_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_pe6_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe5_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_pe5_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe4_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_pe4_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe3_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_pe3_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe2_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_pe2_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe1_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_pe1_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pe0_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_pe0_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_bndl1_state_lkp_tcam_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_bndl1_state_lkp_tcam_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_bndl0_state_lkp_tcam_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_bndl0_state_lkp_tcam_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_outq_ohi_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_outq_ohi_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_outq_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_outq_phv_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_bndl1_inq_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_bndl1_inq_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_bndl0_inq_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_bndl0_inq_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_bndl1_state_lkp_sram_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("correctable");
    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_bndl1_state_lkp_sram_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ecc_disable_det");
    ret_vec.push_back("ecc_disable_cor");
    ret_vec.push_back("dhs_ecc_bypass");
    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_bndl0_state_lkp_sram_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("correctable");
    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_bndl0_state_lkp_sram_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ecc_disable_det");
    ret_vec.push_back("ecc_disable_cor");
    ret_vec.push_back("dhs_ecc_bypass");
    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_pkt_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("correctable");
    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_pkt_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ecc_disable_det");
    ret_vec.push_back("ecc_disable_cor");
    ret_vec.push_back("bist_run");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_csr_intr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("dowstream");
    ret_vec.push_back("dowstream_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe9_phv_out_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe9_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pkt_release");
    ret_vec.push_back("ohi_out");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe9_pkt_in_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe8_phv_out_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe8_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pkt_release");
    ret_vec.push_back("ohi_out");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe8_pkt_in_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe7_phv_out_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe7_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pkt_release");
    ret_vec.push_back("ohi_out");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe7_pkt_in_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe6_phv_out_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe6_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pkt_release");
    ret_vec.push_back("ohi_out");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe6_pkt_in_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe5_phv_out_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe5_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pkt_release");
    ret_vec.push_back("ohi_out");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe5_pkt_in_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe4_phv_out_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe4_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pkt_release");
    ret_vec.push_back("ohi_out");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe4_pkt_in_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe3_phv_out_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe3_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pkt_release");
    ret_vec.push_back("ohi_out");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe3_pkt_in_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe2_phv_out_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe2_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pkt_release");
    ret_vec.push_back("ohi_out");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe2_pkt_in_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe1_phv_out_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pkt_release");
    ret_vec.push_back("ohi_out");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe1_pkt_in_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe0_phv_out_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pkt_release");
    ret_vec.push_back("ohi_out");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pe0_pkt_in_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_ohi_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    ret_vec.push_back("err");
    ret_vec.push_back("sop_err");
    ret_vec.push_back("eop_err");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_sw_phv_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    ret_vec.push_back("err");
    ret_vec.push_back("sop_err");
    ret_vec.push_back("eop_err");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_ma_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    ret_vec.push_back("err");
    ret_vec.push_back("sop_err");
    ret_vec.push_back("eop_err");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_dp_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    ret_vec.push_back("err");
    ret_vec.push_back("sop_err");
    ret_vec.push_back("eop_err");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_CNT_ppa_pb_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop");
    ret_vec.push_back("eop");
    ret_vec.push_back("err");
    ret_vec.push_back("sop_err");
    ret_vec.push_back("eop_err");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_align_chk_profile_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("addsub_start");
    ret_vec.push_back("start_adj");
    ret_vec.push_back("mod_log2");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_len_chk_profile_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("len_mask");
    ret_vec.push_back("len_shift_left");
    ret_vec.push_back("len_shift_val");
    ret_vec.push_back("addsub_start");
    ret_vec.push_back("start_adj");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_csum_phdr_profile_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("fld0_fld_en");
    ret_vec.push_back("fld0_fld_align");
    ret_vec.push_back("fld0_fld_start");
    ret_vec.push_back("fld0_fld_end");
    ret_vec.push_back("fld0_add_len");
    ret_vec.push_back("fld1_fld_en");
    ret_vec.push_back("fld1_fld_align");
    ret_vec.push_back("fld1_fld_start");
    ret_vec.push_back("fld1_fld_end");
    ret_vec.push_back("fld1_add_len");
    ret_vec.push_back("fld2_fld_en");
    ret_vec.push_back("fld2_fld_align");
    ret_vec.push_back("fld2_fld_start");
    ret_vec.push_back("fld2_fld_end");
    ret_vec.push_back("fld2_add_len");
    ret_vec.push_back("fld3_fld_en");
    ret_vec.push_back("fld3_fld_align");
    ret_vec.push_back("fld3_fld_start");
    ret_vec.push_back("fld3_fld_end");
    ret_vec.push_back("fld3_add_len");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_csum_profile_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("csum_loc_use_phdr_ohi");
    ret_vec.push_back("csum_8b");
    ret_vec.push_back("phv_csum_flit_num");
    ret_vec.push_back("end_eop");
    ret_vec.push_back("len_mask");
    ret_vec.push_back("len_shift_left");
    ret_vec.push_back("len_shift_val");
    ret_vec.push_back("addsub_start");
    ret_vec.push_back("start_adj");
    ret_vec.push_back("addsub_end");
    ret_vec.push_back("end_adj");
    ret_vec.push_back("addsub_phdr");
    ret_vec.push_back("phdr_adj");
    ret_vec.push_back("addsub_csum_loc");
    ret_vec.push_back("csum_loc_adj");
    ret_vec.push_back("align");
    ret_vec.push_back("add_val");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_crc_mask_profile_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("fld0_mask_en");
    ret_vec.push_back("fld0_use_ohi");
    ret_vec.push_back("fld0_start_adj");
    ret_vec.push_back("fld0_end_adj");
    ret_vec.push_back("fld0_fill");
    ret_vec.push_back("fld0_skip_first_nibble");
    ret_vec.push_back("fld1_mask_en");
    ret_vec.push_back("fld1_use_ohi");
    ret_vec.push_back("fld1_start_adj");
    ret_vec.push_back("fld1_end_adj");
    ret_vec.push_back("fld1_fill");
    ret_vec.push_back("fld1_skip_first_nibble");
    ret_vec.push_back("fld2_mask_en");
    ret_vec.push_back("fld2_use_ohi");
    ret_vec.push_back("fld2_start_adj");
    ret_vec.push_back("fld2_end_adj");
    ret_vec.push_back("fld2_fill");
    ret_vec.push_back("fld2_skip_first_nibble");
    ret_vec.push_back("fld3_mask_en");
    ret_vec.push_back("fld3_use_ohi");
    ret_vec.push_back("fld3_start_adj");
    ret_vec.push_back("fld3_end_adj");
    ret_vec.push_back("fld3_fill");
    ret_vec.push_back("fld3_skip_first_nibble");
    ret_vec.push_back("fld4_mask_en");
    ret_vec.push_back("fld4_use_ohi");
    ret_vec.push_back("fld4_start_adj");
    ret_vec.push_back("fld4_end_adj");
    ret_vec.push_back("fld4_fill");
    ret_vec.push_back("fld4_skip_first_nibble");
    ret_vec.push_back("fld5_mask_en");
    ret_vec.push_back("fld5_use_ohi");
    ret_vec.push_back("fld5_start_adj");
    ret_vec.push_back("fld5_end_adj");
    ret_vec.push_back("fld5_fill");
    ret_vec.push_back("fld5_skip_first_nibble");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_crc_profile_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("len_mask");
    ret_vec.push_back("len_shift_left");
    ret_vec.push_back("len_shift_val");
    ret_vec.push_back("addsub_start");
    ret_vec.push_back("start_adj");
    ret_vec.push_back("addsub_end");
    ret_vec.push_back("end_adj");
    ret_vec.push_back("addsub_mask");
    ret_vec.push_back("mask_adj");
    ret_vec.push_back("end_eop");
    ret_vec.push_back("mask_prof_sel");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_bndl1_state_lkp_tcam_ind_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("hit");
    ret_vec.push_back("hit_addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_bndl1_state_lkp_tcam_ind_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("key");
    ret_vec.push_back("mask");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_bndl1_state_lkp_tcam_grst_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("vld");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_sta_bndl0_state_lkp_tcam_ind_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("hit");
    ret_vec.push_back("hit_addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_bndl0_state_lkp_tcam_ind_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("key");
    ret_vec.push_back("mask");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_bndl0_state_lkp_tcam_grst_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("vld");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_init_profile_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("curr_offset");
    ret_vec.push_back("state");
    ret_vec.push_back("lkp_val_pkt_idx0");
    ret_vec.push_back("lkp_val_pkt_idx1");
    ret_vec.push_back("lkp_val_pkt_idx2");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_ctrl_thresh_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("outphv_ff");
    ret_vec.push_back("phv_ff");
    ret_vec.push_back("chk_ff");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_cfg_ctrl_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("pe_enable");
    ret_vec.push_back("parse_loop_cnt");
    ret_vec.push_back("num_phv_flit");
    ret_vec.push_back("state_lkp_catchall_entry");
    ret_vec.push_back("phv_set_hw_err_en");
    ret_vec.push_back("phv_set_parser_err_en");
    ret_vec.push_back("gso_csum_en");
    ret_vec.push_back("pe_err_vec_en");
    ret_vec.push_back("end_offset_en");
    ret_vec.push_back("end_offset_flit_num");
    ret_vec.push_back("tcam_key_ctl");
    ret_vec.push_back("crc_start_offset_err_en");
    ret_vec.push_back("csum_start_offset_err_en");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_rdintr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ireg");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_base_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("scratch_reg");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_ppa_csr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : base.get_fields(level-1)) {
            ret_vec.push_back("base." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : rdintr.get_fields(level-1)) {
            ret_vec.push_back("rdintr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_ctrl.get_fields(level-1)) {
            ret_vec.push_back("cfg_ctrl." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_ctrl_thresh.get_fields(level-1)) {
            ret_vec.push_back("cfg_ctrl_thresh." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_bndl0_state_lkp_tcam_grst.get_fields(level-1)) {
            ret_vec.push_back("cfg_bndl0_state_lkp_tcam_grst." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_bndl0_state_lkp_tcam_ind.get_fields(level-1)) {
            ret_vec.push_back("cfg_bndl0_state_lkp_tcam_ind." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_bndl0_state_lkp_tcam_ind.get_fields(level-1)) {
            ret_vec.push_back("sta_bndl0_state_lkp_tcam_ind." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_bndl1_state_lkp_tcam_grst.get_fields(level-1)) {
            ret_vec.push_back("cfg_bndl1_state_lkp_tcam_grst." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_bndl1_state_lkp_tcam_ind.get_fields(level-1)) {
            ret_vec.push_back("cfg_bndl1_state_lkp_tcam_ind." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_bndl1_state_lkp_tcam_ind.get_fields(level-1)) {
            ret_vec.push_back("sta_bndl1_state_lkp_tcam_ind." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pb.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pb." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_dp.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_dp." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_ma.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_ma." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_sw_phv.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_sw_phv." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_ohi.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_ohi." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe0_pkt_in.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe0_pkt_in." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe0.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe0_phv_out.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe0_phv_out." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe1_pkt_in.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe1_pkt_in." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe1.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe1_phv_out.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe1_phv_out." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe2_pkt_in.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe2_pkt_in." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe2.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe2_phv_out.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe2_phv_out." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe3_pkt_in.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe3_pkt_in." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe3.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe3_phv_out.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe3_phv_out." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe4_pkt_in.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe4_pkt_in." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe4.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe4." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe4_phv_out.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe4_phv_out." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe5_pkt_in.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe5_pkt_in." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe5.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe5." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe5_phv_out.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe5_phv_out." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe6_pkt_in.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe6_pkt_in." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe6.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe6." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe6_phv_out.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe6_phv_out." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe7_pkt_in.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe7_pkt_in." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe7.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe7." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe7_phv_out.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe7_phv_out." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe8_pkt_in.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe8_pkt_in." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe8.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe8." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe8_phv_out.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe8_phv_out." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe9_pkt_in.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe9_pkt_in." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe9.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe9." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_ppa_pe9_phv_out.get_fields(level-1)) {
            ret_vec.push_back("CNT_ppa_pe9_phv_out." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : csr_intr.get_fields(level-1)) {
            ret_vec.push_back("csr_intr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pkt_mem.get_fields(level-1)) {
            ret_vec.push_back("cfg_pkt_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pkt_mem.get_fields(level-1)) {
            ret_vec.push_back("sta_pkt_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_bndl0_state_lkp_sram.get_fields(level-1)) {
            ret_vec.push_back("cfg_bndl0_state_lkp_sram." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_bndl0_state_lkp_sram.get_fields(level-1)) {
            ret_vec.push_back("sta_bndl0_state_lkp_sram." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_bndl1_state_lkp_sram.get_fields(level-1)) {
            ret_vec.push_back("cfg_bndl1_state_lkp_sram." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_bndl1_state_lkp_sram.get_fields(level-1)) {
            ret_vec.push_back("sta_bndl1_state_lkp_sram." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_bndl0_inq_mem.get_fields(level-1)) {
            ret_vec.push_back("cfg_bndl0_inq_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_bndl0_inq_mem.get_fields(level-1)) {
            ret_vec.push_back("sta_bndl0_inq_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_bndl1_inq_mem.get_fields(level-1)) {
            ret_vec.push_back("cfg_bndl1_inq_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_bndl1_inq_mem.get_fields(level-1)) {
            ret_vec.push_back("sta_bndl1_inq_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_outq_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("cfg_outq_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_outq_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("sta_outq_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_outq_ohi_mem.get_fields(level-1)) {
            ret_vec.push_back("cfg_outq_ohi_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_outq_ohi_mem.get_fields(level-1)) {
            ret_vec.push_back("sta_outq_ohi_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_bndl0_state_lkp_tcam.get_fields(level-1)) {
            ret_vec.push_back("cfg_bndl0_state_lkp_tcam." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_bndl0_state_lkp_tcam.get_fields(level-1)) {
            ret_vec.push_back("sta_bndl0_state_lkp_tcam." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_bndl1_state_lkp_tcam.get_fields(level-1)) {
            ret_vec.push_back("cfg_bndl1_state_lkp_tcam." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_bndl1_state_lkp_tcam.get_fields(level-1)) {
            ret_vec.push_back("sta_bndl1_state_lkp_tcam." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pe0_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("cfg_pe0_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe0_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("sta_pe0_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pe1_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("cfg_pe1_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe1_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("sta_pe1_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pe2_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("cfg_pe2_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe2_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("sta_pe2_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pe3_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("cfg_pe3_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe3_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("sta_pe3_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pe4_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("cfg_pe4_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe4_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("sta_pe4_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pe5_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("cfg_pe5_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe5_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("sta_pe5_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pe6_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("cfg_pe6_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe6_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("sta_pe6_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pe7_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("cfg_pe7_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe7_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("sta_pe7_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pe8_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("cfg_pe8_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe8_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("sta_pe8_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_pe9_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("cfg_pe9_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe9_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("sta_pe9_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_sw_phv_global.get_fields(level-1)) {
            ret_vec.push_back("cfg_sw_phv_global." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_sw_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("cfg_sw_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_sw_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("sta_sw_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_reorder_phv_not_sop_err.get_fields(level-1)) {
            ret_vec.push_back("sta_reorder_phv_not_sop_err." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_reorder.get_fields(level-1)) {
            ret_vec.push_back("sta_reorder." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_csum0.get_fields(level-1)) {
            ret_vec.push_back("sta_csum0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_csum1.get_fields(level-1)) {
            ret_vec.push_back("sta_csum1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_csum2.get_fields(level-1)) {
            ret_vec.push_back("sta_csum2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_csum3.get_fields(level-1)) {
            ret_vec.push_back("sta_csum3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_csum4.get_fields(level-1)) {
            ret_vec.push_back("sta_csum4." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_chkr_seq_id.get_fields(level-1)) {
            ret_vec.push_back("sta_chkr_seq_id." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe0.get_fields(level-1)) {
            ret_vec.push_back("sta_pe0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe1.get_fields(level-1)) {
            ret_vec.push_back("sta_pe1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe2.get_fields(level-1)) {
            ret_vec.push_back("sta_pe2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe3.get_fields(level-1)) {
            ret_vec.push_back("sta_pe3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe4.get_fields(level-1)) {
            ret_vec.push_back("sta_pe4." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe5.get_fields(level-1)) {
            ret_vec.push_back("sta_pe5." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe6.get_fields(level-1)) {
            ret_vec.push_back("sta_pe6." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe7.get_fields(level-1)) {
            ret_vec.push_back("sta_pe7." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe8.get_fields(level-1)) {
            ret_vec.push_back("sta_pe8." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe9.get_fields(level-1)) {
            ret_vec.push_back("sta_pe9." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_bndl0_state_lkp.get_fields(level-1)) {
            ret_vec.push_back("sta_bndl0_state_lkp." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_bndl1_state_lkp.get_fields(level-1)) {
            ret_vec.push_back("sta_bndl1_state_lkp." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_fifo.get_fields(level-1)) {
            ret_vec.push_back("sta_fifo." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_bndl0.get_fields(level-1)) {
            ret_vec.push_back("sta_bndl0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_bndl1.get_fields(level-1)) {
            ret_vec.push_back("sta_bndl1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_pe_alloc.get_fields(level-1)) {
            ret_vec.push_back("sta_pe_alloc." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_debug_ctrl.get_fields(level-1)) {
            ret_vec.push_back("cfg_debug_ctrl." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_debug_port.get_fields(level-1)) {
            ret_vec.push_back("cfg_debug_port." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_spare.get_fields(level-1)) {
            ret_vec.push_back("cfg_spare." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_spare_dbg.get_fields(level-1)) {
            ret_vec.push_back("cfg_spare_dbg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_preparse.get_fields(level-1)) {
            ret_vec.push_back("cfg_preparse." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_preparse.get_fields(level-1)) {
            ret_vec.push_back("sta_preparse." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : CNT_preparse.get_fields(level-1)) {
            ret_vec.push_back("CNT_preparse." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_bndl0_state_lkp_tcam.get_fields(level-1)) {
            ret_vec.push_back("dhs_bndl0_state_lkp_tcam." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_bndl0_state_lkp_tcam_ind.get_fields(level-1)) {
            ret_vec.push_back("dhs_bndl0_state_lkp_tcam_ind." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_bndl0_state_lkp_sram.get_fields(level-1)) {
            ret_vec.push_back("dhs_bndl0_state_lkp_sram." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_bndl1_state_lkp_tcam.get_fields(level-1)) {
            ret_vec.push_back("dhs_bndl1_state_lkp_tcam." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_bndl1_state_lkp_tcam_ind.get_fields(level-1)) {
            ret_vec.push_back("dhs_bndl1_state_lkp_tcam_ind." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_bndl1_state_lkp_sram.get_fields(level-1)) {
            ret_vec.push_back("dhs_bndl1_state_lkp_sram." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_sw_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("dhs_sw_phv_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_dbg_mem.get_fields(level-1)) {
            ret_vec.push_back("dhs_dbg_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_groups.get_fields(level-1)) {
            ret_vec.push_back("int_groups." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_bndl0.get_fields(level-1)) {
            ret_vec.push_back("int_bndl0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_bndl1.get_fields(level-1)) {
            ret_vec.push_back("int_bndl1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_ecc.get_fields(level-1)) {
            ret_vec.push_back("int_ecc." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_fifo1.get_fields(level-1)) {
            ret_vec.push_back("int_fifo1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_fifo2.get_fields(level-1)) {
            ret_vec.push_back("int_fifo2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_pe0.get_fields(level-1)) {
            ret_vec.push_back("int_pe0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_pe1.get_fields(level-1)) {
            ret_vec.push_back("int_pe1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_pe2.get_fields(level-1)) {
            ret_vec.push_back("int_pe2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_pe3.get_fields(level-1)) {
            ret_vec.push_back("int_pe3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_pe4.get_fields(level-1)) {
            ret_vec.push_back("int_pe4." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_pe5.get_fields(level-1)) {
            ret_vec.push_back("int_pe5." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_pe6.get_fields(level-1)) {
            ret_vec.push_back("int_pe6." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_pe7.get_fields(level-1)) {
            ret_vec.push_back("int_pe7." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_pe8.get_fields(level-1)) {
            ret_vec.push_back("int_pe8." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_pe9.get_fields(level-1)) {
            ret_vec.push_back("int_pe9." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_pa.get_fields(level-1)) {
            ret_vec.push_back("int_pa." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_intf.get_fields(level-1)) {
            ret_vec.push_back("int_intf." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_sw_phv_mem.get_fields(level-1)) {
            ret_vec.push_back("int_sw_phv_mem." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL
