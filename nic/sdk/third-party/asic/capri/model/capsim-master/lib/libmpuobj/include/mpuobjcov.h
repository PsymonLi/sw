
/*
 * Copyright (c) 2017, Pensando Systems Inc.
 */

#ifndef __MPUOBJCOV_H__
#define __MPUOBJCOV_H__

#define MPUCOV_NOTE_SUFFIX      ".cano"
#define MPUCOV_DATA_SUFFIX      ".cada"
#define MPUCOV_COV_SUFFIX       ".cacov"

/*
 * Coverage Notes File - Generated by capas.
 * Maps each opcode in the program to a source line number.
 *      - Does not map padding instructions.
 *
 * Each entry in note_tab is of type MpuCovNotesEntry and comprises:
 *      offs        - Byte offset into the program text[*]
 *      idx         - Index into string_tab holding the source filename
 *      lineno      - Source file line number
 *
 * [*] The offs here is 32-bits as its a simple offset into an assembled object
 * file.
 */
struct MpuCovNotesFileHeader {
    uint32_t magic;                 // magic
    uint32_t version;               // version
    uint32_t strtab_offs;           // file offset to string table
    uint32_t strtab_len;            // length in bytes
    uint32_t notes_offs;            // file offset to notes entries
    uint32_t notes_len;             // length in bytes
};
#define MPUCOVNOTESFILE_MAGIC       0xc0def0e5
#define MPUCOVNOTESFILE_VERSION     0

struct MpuCovNotesEntry {
    uint32_t offs;              // program offset
    uint32_t idx;               // filename string index
    uint32_t lineno;            // file line number
};

class MpuCovNotesFile {
public:
    MpuCovNotesFile() {}
    ~MpuCovNotesFile() {}
    void addentry(uint32_t offs, const std::string& path, int lineno);
    int save(const std::string& path) const;
    int load(const std::string& path);

    mutable MpuObjError err;
    std::map<std::string, int> string_map;
    std::vector<std::string> string_tab;
    std::vector<MpuCovNotesEntry> note_tab;
    void dump(void) const;

private:
    int do_load(FILE *fp);
    int seterror(MpuObjError e) const { err = e; return -1; };
};

/*
 * Coverage Data File - Captured from capsim or the a hardware trace
 * Provides a record of the number of times each instruction in a program
 * was executed.
 *
 * The header includes:
 *      runcount    - The number of discrete program runs
 *      instrcount  - The program execution instruction count[+]
 *      cyclecount  - The program execution time in cycles
 *
 * [+] The instruction count indicates the instructions visited, not necessary
 * executed.
 *
 * Each entry in data_tab is of type MpuCovDataEntry and comprises:
 *      offs        - Byte offset into the program text[*]
 *      count       - Number of times this instruction was executed
 *
 * [*] A 64-bit offs is used here as coverage file may be created using
 * physical PC addreses (as opposed to program offsets) and later processed
 * to extract per-program data.
 *
 * Instructions not executed (either by not being visited or via a false
 * execution predicate) are not represented in the file.  This means that
 * the sum of coverage records will be <= the header 'instrcount'.
 */
struct MpuCovDataFileHeader {
    uint32_t magic;                 // magic
    uint32_t version;               // version
    uint32_t runcount;              // number of program runs
    uint32_t instrcount;            // number of instructions
    uint32_t cyclecount;            // number of cycles
    uint32_t data_offs;             // file offset to data entries
    uint32_t data_len;              // length in bytes
};
#define MPUCOVDATAFILE_MAGIC        0xc0dedaba
#define MPUCOVDATAFILE_VERSION      1

struct MpuCovDataEntry {
    uint64_t offs;                  // program offset
    uint32_t count;                 // execution count
};

class MpuCovDataFile {
public:
    MpuCovDataFile();
    ~MpuCovDataFile();
    void addentry(uint64_t offs, uint32_t count);
    int save(const std::string& path) const;
    int load(const std::string& path);
    void dump(void) const;

    // Set performance data - instruction and cycle counts
    void setinstrcount(uint32_t count);
    void setcyclecount(uint32_t count);

    // Accumulate data from another file.
    void accumulate(const MpuCovDataFile& d);

    // Rebase a file - adjust the offsets to a new base address
    void rebase(uint64_t addr);

    // Filter a file - keeping entries within a cetain offs range, and
    // optionally rebasing all entries to the range.
    void filter(uint64_t addr, uint64_t len, bool rebase = true);
 
    mutable MpuObjError err;

    // runcount is a count of the number of program runs that this
    // data represents.  When saving an original file this should be
    // set to 1.  Calls to 'accumulate' add runcount values, as well as
    // the data.
    uint32_t runcount;                  // number of program runs

    // instrcount is the cumulative program runtime in instructions.  This
    // includes all instructions visited regardless of whether they were
    // executed or not.
    uint32_t instrcount;

    // cyclecount is the cumulative program runtime in cycles.
    uint32_t cyclecount;

    // data_map is the coverage data, mapping PC => Count.
    std::map<uint64_t, uint32_t> data_map;

private:
    int do_load(FILE *fp);
    int seterror(MpuObjError e) const { err = e; return -1; };
};

#endif
